var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21198509729110185 ± 0.0015779504125950717\n   G2(1) = 0.9173392567706856 ± 0.0006756471434242419\n   G2(2) = 0.9815151150731305 ± 0.0006210665223238014\n   G2(3) = 0.9903061590212667 ± 0.0009733079811610734\n   G2(4) = 0.9815151150731305 ± 0.0006210665223238014\n   G2(5) = 0.9173392567706856 ± 0.0006756471434242419\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.055175889518068 ± 0.1317047638190525\n   Replica 2: -4.052789361343015 ± 0.1351219828904127\n   Replica 3: -4.045747279995466 ± 0.1417427438644679\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip000\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip001\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip002\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.22 2211.02,1003.22 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.608 2211.02,745.608 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.995 2211.02,487.995 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.383 2211.02,230.383 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.22 423.181,1003.22 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.608 423.181,745.608 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.995 423.181,487.995 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.383 423.181,230.383 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M290.043 1016.57 L306.363 1016.57 L306.363 1020.5 L284.418 1020.5 L284.418 1016.57 Q287.08 1013.81 291.664 1009.18 Q296.27 1004.53 297.451 1003.19 Q299.696 1000.66 300.576 998.927 Q301.478 997.167 301.478 995.477 Q301.478 992.723 299.534 990.987 Q297.613 989.251 294.511 989.251 Q292.312 989.251 289.858 990.015 Q287.427 990.778 284.65 992.329 L284.65 987.607 Q287.474 986.473 289.927 985.894 Q292.381 985.315 294.418 985.315 Q299.789 985.315 302.983 988.001 Q306.177 990.686 306.177 995.177 Q306.177 997.306 305.367 999.227 Q304.58 1001.13 302.474 1003.72 Q301.895 1004.39 298.793 1007.61 Q295.691 1010.8 290.043 1016.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M316.224 985.94 L334.58 985.94 L334.58 989.876 L320.506 989.876 L320.506 998.348 Q321.524 998.001 322.543 997.839 Q323.562 997.653 324.58 997.653 Q330.367 997.653 333.747 1000.82 Q337.126 1004 337.126 1009.41 Q337.126 1014.99 333.654 1018.09 Q330.182 1021.17 323.862 1021.17 Q321.687 1021.17 319.418 1020.8 Q317.173 1020.43 314.765 1019.69 L314.765 1014.99 Q316.849 1016.13 319.071 1016.68 Q321.293 1017.24 323.77 1017.24 Q327.774 1017.24 330.112 1015.13 Q332.45 1013.02 332.45 1009.41 Q332.45 1005.8 330.112 1003.7 Q327.774 1001.59 323.77 1001.59 Q321.895 1001.59 320.02 1002.01 Q318.168 1002.42 316.224 1003.3 L316.224 985.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M356.339 989.019 Q352.728 989.019 350.899 992.584 Q349.094 996.126 349.094 1003.26 Q349.094 1010.36 350.899 1013.93 Q352.728 1017.47 356.339 1017.47 Q359.973 1017.47 361.779 1013.93 Q363.608 1010.36 363.608 1003.26 Q363.608 996.126 361.779 992.584 Q359.973 989.019 356.339 989.019 M356.339 985.315 Q362.149 985.315 365.205 989.922 Q368.284 994.505 368.284 1003.26 Q368.284 1011.98 365.205 1016.59 Q362.149 1021.17 356.339 1021.17 Q350.529 1021.17 347.45 1016.59 Q344.395 1011.98 344.395 1003.26 Q344.395 994.505 347.45 989.922 Q350.529 985.315 356.339 985.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M286.062 728.328 L304.418 728.328 L304.418 732.263 L290.344 732.263 L290.344 740.735 Q291.363 740.388 292.381 740.226 Q293.4 740.041 294.418 740.041 Q300.205 740.041 303.585 743.212 Q306.964 746.383 306.964 751.8 Q306.964 757.379 303.492 760.48 Q300.02 763.559 293.701 763.559 Q291.525 763.559 289.256 763.189 Q287.011 762.818 284.603 762.078 L284.603 757.379 Q286.687 758.513 288.909 759.068 Q291.131 759.624 293.608 759.624 Q297.613 759.624 299.951 757.518 Q302.288 755.411 302.288 751.8 Q302.288 748.189 299.951 746.082 Q297.613 743.976 293.608 743.976 Q291.733 743.976 289.858 744.393 Q288.006 744.809 286.062 745.689 L286.062 728.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M326.177 731.407 Q322.566 731.407 320.737 734.971 Q318.932 738.513 318.932 745.643 Q318.932 752.749 320.737 756.314 Q322.566 759.855 326.177 759.855 Q329.811 759.855 331.617 756.314 Q333.446 752.749 333.446 745.643 Q333.446 738.513 331.617 734.971 Q329.811 731.407 326.177 731.407 M326.177 727.703 Q331.987 727.703 335.043 732.309 Q338.122 736.893 338.122 745.643 Q338.122 754.369 335.043 758.976 Q331.987 763.559 326.177 763.559 Q320.367 763.559 317.288 758.976 Q314.233 754.369 314.233 745.643 Q314.233 736.893 317.288 732.309 Q320.367 727.703 326.177 727.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M356.339 731.407 Q352.728 731.407 350.899 734.971 Q349.094 738.513 349.094 745.643 Q349.094 752.749 350.899 756.314 Q352.728 759.855 356.339 759.855 Q359.973 759.855 361.779 756.314 Q363.608 752.749 363.608 745.643 Q363.608 738.513 361.779 734.971 Q359.973 731.407 356.339 731.407 M356.339 727.703 Q362.149 727.703 365.205 732.309 Q368.284 736.893 368.284 745.643 Q368.284 754.369 365.205 758.976 Q362.149 763.559 356.339 763.559 Q350.529 763.559 347.45 758.976 Q344.395 754.369 344.395 745.643 Q344.395 736.893 347.45 732.309 Q350.529 727.703 356.339 727.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M284.835 470.715 L307.057 470.715 L307.057 472.706 L294.511 505.275 L289.627 505.275 L301.432 474.65 L284.835 474.65 L284.835 470.715 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M316.224 470.715 L334.58 470.715 L334.58 474.65 L320.506 474.65 L320.506 483.123 Q321.524 482.775 322.543 482.613 Q323.562 482.428 324.58 482.428 Q330.367 482.428 333.747 485.599 Q337.126 488.771 337.126 494.187 Q337.126 499.766 333.654 502.868 Q330.182 505.947 323.862 505.947 Q321.687 505.947 319.418 505.576 Q317.173 505.206 314.765 504.465 L314.765 499.766 Q316.849 500.9 319.071 501.456 Q321.293 502.011 323.77 502.011 Q327.774 502.011 330.112 499.905 Q332.45 497.798 332.45 494.187 Q332.45 490.576 330.112 488.47 Q327.774 486.363 323.77 486.363 Q321.895 486.363 320.02 486.78 Q318.168 487.197 316.224 488.076 L316.224 470.715 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M356.339 473.794 Q352.728 473.794 350.899 477.359 Q349.094 480.9 349.094 488.03 Q349.094 495.136 350.899 498.701 Q352.728 502.243 356.339 502.243 Q359.973 502.243 361.779 498.701 Q363.608 495.136 363.608 488.03 Q363.608 480.9 361.779 477.359 Q359.973 473.794 356.339 473.794 M356.339 470.09 Q362.149 470.09 365.205 474.697 Q368.284 479.28 368.284 488.03 Q368.284 496.757 365.205 501.363 Q362.149 505.947 356.339 505.947 Q350.529 505.947 347.45 501.363 Q344.395 496.757 344.395 488.03 Q344.395 479.28 347.45 474.697 Q350.529 470.09 356.339 470.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M256.664 243.728 L264.303 243.728 L264.303 217.362 L255.992 219.029 L255.992 214.769 L264.256 213.103 L268.932 213.103 L268.932 243.728 L276.571 243.728 L276.571 247.663 L256.664 247.663 L256.664 243.728 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M296.015 216.181 Q292.404 216.181 290.576 219.746 Q288.77 223.288 288.77 230.417 Q288.77 237.524 290.576 241.089 Q292.404 244.63 296.015 244.63 Q299.65 244.63 301.455 241.089 Q303.284 237.524 303.284 230.417 Q303.284 223.288 301.455 219.746 Q299.65 216.181 296.015 216.181 M296.015 212.478 Q301.826 212.478 304.881 217.084 Q307.96 221.667 307.96 230.417 Q307.96 239.144 304.881 243.751 Q301.826 248.334 296.015 248.334 Q290.205 248.334 287.127 243.751 Q284.071 239.144 284.071 230.417 Q284.071 221.667 287.127 217.084 Q290.205 212.478 296.015 212.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M326.177 216.181 Q322.566 216.181 320.737 219.746 Q318.932 223.288 318.932 230.417 Q318.932 237.524 320.737 241.089 Q322.566 244.63 326.177 244.63 Q329.811 244.63 331.617 241.089 Q333.446 237.524 333.446 230.417 Q333.446 223.288 331.617 219.746 Q329.811 216.181 326.177 216.181 M326.177 212.478 Q331.987 212.478 335.043 217.084 Q338.122 221.667 338.122 230.417 Q338.122 239.144 335.043 243.751 Q331.987 248.334 326.177 248.334 Q320.367 248.334 317.288 243.751 Q314.233 239.144 314.233 230.417 Q314.233 221.667 317.288 217.084 Q320.367 212.478 326.177 212.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M356.339 216.181 Q352.728 216.181 350.899 219.746 Q349.094 223.288 349.094 230.417 Q349.094 237.524 350.899 241.089 Q352.728 244.63 356.339 244.63 Q359.973 244.63 361.779 241.089 Q363.608 237.524 363.608 230.417 Q363.608 223.288 361.779 219.746 Q359.973 216.181 356.339 216.181 M356.339 212.478 Q362.149 212.478 365.205 217.084 Q368.284 221.667 368.284 230.417 Q368.284 239.144 365.205 243.751 Q362.149 248.334 356.339 248.334 Q350.529 248.334 347.45 243.751 Q344.395 239.144 344.395 230.417 Q344.395 221.667 347.45 217.084 Q350.529 212.478 356.339 212.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip002)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.383 4017.76,230.383 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1244.23 463.375,1243.22 463.943,1241.08 464.511,1239.87 465.08,1237.53 465.648,1236.11 466.216,1234.58 466.785,1232.91 467.353,1231.12 467.921,1229.2 468.49,1225.06 469.058,1222.82 469.626,1220.42 470.195,1217.86 470.763,1215.14 471.331,1212.22 471.9,1209.14 472.468,1205.85 473.036,1200.3 473.605,1196.57 474.173,1192.61 474.741,1187.43 475.31,1181.03 475.878,1175.33 476.446,1170.52 477.015,1165.47 477.583,1159.14 478.152,1153.57 478.72,1147.79 479.288,1139.7 479.857,1133.36 480.425,1123.78 480.993,1115.01 481.562,1108.04 482.13,1100.93 482.698,1093.58 483.267,1085.02 483.835,1077.26 484.403,1069.33 484.972,1059.09 485.54,1048.84 486.108,1039.52 486.677,1030.98 487.245,1021.01 487.813,1011.01 488.382,1000.89 488.95,990.762 489.518,979.535 490.087,970.257 490.655,960.854 491.224,951.455 491.792,939.783 492.36,929.085 492.929,918.458 493.497,908.724 494.065,898.023 494.634,888.324 495.202,876.441 495.77,865.637 496.339,855.772 496.907,843.835 497.475,832.061 498.044,820.355 498.612,809.765 499.18,800.136 499.749,786.525 500.317,777.103 500.885,766.621 501.454,756.275 502.022,746.074 502.59,734.928 503.159,724.851 503.727,715.997 504.295,705.029 504.864,694.385 505.432,685.019 506.001,674.546 506.569,667.207 507.137,657.816 507.706,649.736 508.274,638.403 508.842,629.509 509.411,618.72 509.979,607.005 510.547,599.65 511.116,590.264 511.684,581.106 512.252,572.177 512.821,565.596 513.389,557.997 513.957,548.514 514.526,541.27 515.094,532.165 515.662,523.175 516.231,516.469 516.799,510.108 517.367,504.755 517.936,498.395 518.504,493.233 519.072,486.889 519.641,480.866 520.209,475.9 520.778,469.935 521.346,466.149 521.914,459.363 522.483,452.754 523.051,446.177 523.619,439.909 524.188,435.646 524.756,429.452 525.324,424.625 525.893,419.853 526.461,415.13 527.029,407.453 527.598,404.223 528.166,397.943 528.734,393.717 529.303,390.728 529.871,387.796 530.439,379.649 531.008,376.014 531.576,372.467 532.144,371.175 532.713,366.761 533.281,362.513 533.85,359.415 534.418,356.339 534.986,353.377 535.555,351.319 536.123,346.184 536.691,344.394 537.26,339.524 537.828,338.083 538.396,338.599 538.965,335.762 539.533,333 540.101,331.526 540.67,327.051 541.238,325.531 541.806,324.134 542.375,320.787 542.943,319.464 543.511,319.369 544.08,316.985 544.648,314.838 545.216,312.458 545.785,312.407 546.353,310.081 546.921,308.972 547.49,305.839 548.058,304.786 548.627,299.455 549.195,297.766 549.763,296.138 550.332,292.44 550.9,291.047 551.468,290.804 552.037,288.18 552.605,287.009 553.173,284.52 553.742,284.251 554.31,285.052 554.878,283.828 555.447,284.713 556.015,285.442 556.583,283.945 557.152,282.462 557.72,279.019 558.288,277.861 558.857,276.716 559.425,273.437 559.993,274.524 560.562,274.439 561.13,274.492 561.698,274.398 562.267,274.331 562.835,272.924 563.404,270.725 563.972,269.832 564.54,270.893 565.109,269.813 565.677,269.62 566.245,267.503 566.814,267.286 567.382,266.253 567.95,266.183 568.519,267.165 569.087,266.954 569.655,268.664 570.224,267.387 570.792,265.229 571.36,265.962 571.929,264.907 572.497,262.467 573.065,262.279 573.634,265.245 574.202,265.845 574.77,262.934 575.339,263.88 575.907,262.625 576.476,259.281 577.044,259.167 577.612,259.838 578.181,259.51 578.749,259 579.317,258.856 579.886,259.788 580.454,260.623 581.022,261.108 581.591,259.568 582.159,256.996 582.727,256.95 583.296,257.831 583.864,255.568 584.432,253.524 585.001,254.409 585.569,254.385 586.137,254.209 586.706,256.024 587.274,253.536 587.842,253.474 588.411,254.359 588.979,254.113 589.547,254.899 590.116,254.38 590.684,252.831 591.253,253.678 591.821,253.33 592.389,252.052 592.958,250.634 593.526,252.623 594.094,252.145 594.663,249.967 595.231,247.588 595.799,248.557 596.368,247.382 596.936,248.484 597.504,247.341 598.073,245.233 598.641,245.354 599.209,245.523 599.778,243.499 600.346,241.669 600.914,240.864 601.483,241.104 602.051,241.47 602.619,242.808 603.188,243.099 603.756,240.371 604.325,239.681 604.893,240.289 605.461,240.709 606.03,240.865 606.598,242.187 607.166,242.634 607.735,243.689 608.303,243.858 608.871,244.131 609.44,240.269 610.008,241.534 610.576,241.611 611.145,241.896 611.713,240.369 612.281,240.573 612.85,239.667 613.418,237.019 613.986,235.591 614.555,234.248 615.123,234.887 615.691,235.512 616.26,236.009 616.828,237.809 617.396,237.112 617.965,239.657 618.533,239.024 619.102,238.409 619.67,237.894 620.238,239.539 620.807,238.879 621.375,239.281 621.943,239.506 622.512,238.724 623.08,240.071 623.648,240.048 624.217,240.097 624.785,243.473 625.353,244.526 625.922,242.559 626.49,240.156 627.058,241.195 627.627,242.411 628.195,240.222 628.763,240.124 629.332,242.301 629.9,247.355 630.468,243.931 631.037,244.572 631.605,245.297 632.173,245.844 632.742,246.236 633.31,246.801 633.879,246.556 634.447,245.906 635.015,245.355 635.584,243.002 636.152,241.649 636.72,238.253 637.289,238.303 637.857,239.41 638.425,238.426 638.994,236.326 639.562,236.422 640.13,236.417 640.699,236.571 641.267,234.576 641.835,235.031 642.404,234.108 642.972,232.338 643.54,231.671 644.109,232.045 644.677,232.591 645.245,229.897 645.814,228.368 646.382,228.135 646.951,229.768 647.519,230.392 648.087,227.791 648.656,226.439 649.224,225.06 649.792,222.871 650.361,225.113 650.929,228.368 651.497,228.214 652.066,229.031 652.634,227.707 653.202,228.607 653.771,229.434 654.339,230.089 654.907,229.658 655.476,227.163 656.044,227.026 656.612,226.851 657.181,228.714 657.749,231.556 658.317,234.322 658.886,234.831 659.454,235.055 660.022,235.585 660.591,234.731 661.159,236.973 661.728,236.117 662.296,236.512 662.864,236.861 663.433,237.156 664.001,238.575 664.569,238.599 665.138,237.624 665.706,239.884 666.274,239.007 666.843,240.108 667.411,241.067 667.979,240.838 668.548,240.673 669.116,241.483 669.684,240.226 670.253,240.087 670.821,239.906 671.389,240.848 671.958,240.688 672.526,239.592 673.094,238.528 673.663,237.455 674.231,237.494 674.799,236.525 675.368,236.629 675.936,239.845 676.505,240.803 677.073,241.559 677.641,240.095 678.21,239.791 678.778,240.661 679.346,239.457 679.915,239.138 680.483,242.039 681.051,240.415 681.62,239.196 682.188,238.877 682.756,238.473 683.325,237.198 683.893,237.217 684.461,237.063 685.03,238.032 685.598,237.817 686.166,237.597 686.735,234.417 687.303,233.421 687.871,232.466 688.44,233.616 689.008,234.711 689.577,234.635 690.145,235.727 690.713,234.544 691.282,231.44 691.85,231.587 692.418,231.848 692.987,230.156 693.555,229.389 694.123,231.995 694.692,233.498 695.26,232.568 695.828,231.585 696.397,233.98 696.965,234.246 697.533,236.272 698.102,236.061 698.67,233.873 699.238,234.653 699.807,234.574 700.375,236.734 700.943,236.482 701.512,237.433 702.08,237.052 702.648,236.932 703.217,234.833 703.785,233.773 704.354,236.099 704.922,235.158 705.49,236.126 706.059,237.112 706.627,237.714 707.195,236.524 707.764,235.337 708.332,236.34 708.9,234.21 709.469,233.46 710.037,232.49 710.605,232.563 711.174,233.78 711.742,233.648 712.31,235.789 712.879,236.641 713.447,235.468 714.015,239.272 714.584,238.772 715.152,238.503 715.72,238.345 716.289,236.936 716.857,235.824 717.425,233.497 717.994,231.462 718.562,231.557 719.131,229.549 719.699,226.683 720.267,227.102 720.836,224.212 721.404,229.076 721.972,229.239 722.541,229.584 723.109,230.794 723.677,234.004 724.246,232.84 724.814,232.818 725.382,231.827 725.951,231.869 726.519,232.126 727.087,232.088 727.656,232.234 728.224,232.26 728.792,232.307 729.361,230.319 729.929,230.69 730.497,232.938 731.066,234.191 731.634,232.1 732.203,232.17 732.771,231.217 733.339,231.22 733.908,232.299 734.476,231.163 735.044,231.383 735.613,230.531 736.181,231.712 736.749,231.973 737.318,234.034 737.886,232.004 738.454,232.226 739.023,231.376 739.591,233.567 740.159,233.504 740.728,233.58 741.296,234.518 741.864,234.438 742.433,233.211 743.001,231.29 743.569,231.362 744.138,230.418 744.706,230.747 745.274,232.924 745.843,233.669 746.411,233.641 746.98,232.833 747.548,236.957 748.116,237.493 748.685,237.178 749.253,237.087 749.821,235.853 750.39,234.56 750.958,234.577 751.526,235.234 752.095,234.939 752.663,237.73 753.231,236.252 753.8,235.821 754.368,234.521 754.936,235.398 755.505,235.305 756.073,233.787 756.641,232.705 757.21,233.665 757.778,232.431 758.346,231.414 758.915,229.353 759.483,229.56 760.052,230.64 760.62,231.654 761.188,229.623 761.757,230.849 762.325,228.834 762.893,229.18 763.462,226.533 764.03,228.917 764.598,230.062 765.167,231.069 765.735,232.255 766.303,232.275 766.872,231.411 767.44,231.597 768.008,231.565 768.577,230.68 769.145,229.969 769.713,226.928 770.282,227.284 770.85,227.609 771.418,227.996 771.987,228.281 772.555,226.668 773.123,226.101 773.692,229.637 774.26,230.048 774.829,228.198 775.397,228.374 775.965,228.753 776.534,227.143 777.102,228.405 777.67,229.789 778.239,229.013 778.807,230.468 779.375,227.688 779.944,227.958 780.512,227.416 781.08,226.599 781.649,227.29 782.217,227.639 782.785,227.794 783.354,230.054 783.922,229.279 784.49,229.543 785.059,228.591 785.627,230.235 786.195,230.589 786.764,229.783 787.332,228.989 787.9,229.291 788.469,229.574 789.037,229.92 789.606,230.042 790.174,229.338 790.742,227.635 791.311,227.032 791.879,228.488 792.447,230.007 793.016,232.564 793.584,231.525 794.152,230.554 794.721,230.872 795.289,232.116 795.857,232.343 796.426,232.612 796.994,233.536 797.562,234.612 798.131,233.546 798.699,232.348 799.267,233.346 799.836,233.312 800.404,232.351 800.972,233.387 801.541,233.41 802.109,230.295 802.678,232.66 803.246,234.754 803.814,235.674 804.383,234.503 804.951,235.679 805.519,235.529 806.088,234.615 806.656,235.535 807.224,237.249 807.793,236.93 808.361,235.642 808.929,237.655 809.498,236.522 810.066,236.212 810.634,234.07 811.203,234.931 811.771,234.841 812.339,235.659 812.908,233.567 813.476,232.585 814.044,231.529 814.613,230.674 815.181,231.813 815.749,232.055 816.318,231.97 816.886,233.09 817.455,233.329 818.023,233.347 818.591,230.953 819.16,229.953 819.728,230.132 820.296,231.459 820.865,232.556 821.433,230.653 822.001,229.637 822.57,230.858 823.138,232.996 823.706,232.899 824.275,230.81 824.843,231.852 825.411,233.013 825.98,233.964 826.548,232.548 827.116,234.52 827.685,232.267 828.253,236.479 828.821,234.101 829.39,233.844 829.958,233.584 830.526,232.441 831.095,232.227 831.663,232.582 832.232,232.479 832.8,232.269 833.368,233.225 833.937,234.123 834.505,233.803 835.073,234.627 835.642,234.367 836.21,231.917 836.778,231.984 837.347,233.035 837.915,232.8 838.483,232.613 839.052,234.638 839.62,231.247 840.188,230.29 840.757,227.332 841.325,229.588 841.893,229.651 842.462,228.638 843.03,228.907 843.598,227.159 844.167,228.521 844.735,230.769 845.304,227.908 845.872,229.33 846.44,230.482 847.009,231.542 847.577,235.757 848.145,235.485 848.714,236.243 849.282,235.702 849.85,234.452 850.419,234.161 850.987,234.995 851.555,232.627 852.124,232.594 852.692,232.523 853.26,231.493 853.829,231.451 854.397,229.104 854.965,229.143 855.534,229.445 856.102,227.449 856.67,228.736 857.239,228.913 857.807,228.985 858.375,230.258 858.944,229.188 859.512,230.397 860.081,229.311 860.649,230.694 861.217,230.738 861.786,231.866 862.354,231.786 862.922,231.291 863.491,231.285 864.059,231.389 864.627,233.382 865.196,231.27 865.764,233.172 866.332,232.758 866.901,232.543 867.469,233.151 868.037,231.755 868.606,230.69 869.174,231.887 869.742,232.789 870.311,232.602 870.879,232.351 871.447,230.89 872.016,228.674 872.584,229.854 873.152,228.873 873.721,232.266 874.289,231.136 874.858,232.197 875.426,231.062 875.994,231.024 876.563,229.964 877.131,229.016 877.699,227.092 878.268,229.466 878.836,229.549 879.404,228.854 879.973,227.954 880.541,225.251 881.109,227.83 881.678,225.933 882.246,224.985 882.814,227.348 883.383,226.717 883.951,228.03 884.519,230.23 885.088,231.227 885.656,231.424 886.224,233.509 886.793,233.385 887.361,232.955 887.93,231.843 888.498,231.681 889.066,230.855 889.635,230.766 890.203,229.797 890.771,231.961 891.34,230.645 891.908,232.773 892.476,232.773 893.045,233.552 893.613,233.404 894.181,234.071 894.75,233.929 895.318,233.775 895.886,230.411 896.455,230.439 897.023,231.108 897.591,228.033 898.16,229.262 898.728,228.367 899.296,228.658 899.865,228.847 900.433,227.937 901.001,229.113 901.57,229.5 902.138,230.839 902.707,231.919 903.275,231.854 903.843,232.869 904.412,232.753 904.98,231.467 905.548,231.55 906.117,231.528 906.685,231.49 907.253,232.488 907.822,233.642 908.39,233.612 908.958,233.451 909.527,233.294 910.095,232.195 910.663,232.122 911.232,232.999 911.8,232.988 912.368,231.884 912.937,232.898 913.505,232.981 914.073,233.88 914.642,232.589 915.21,230.457 915.779,231.531 916.347,232.223 916.915,231.025 917.484,230.946 918.052,230.718 918.62,231.596 919.189,231.527 919.757,230.313 920.325,229.443 920.894,230.479 921.462,231.72 922.03,231.853 922.599,231.823 923.167,230.595 923.735,232.703 924.304,233.63 924.872,232.372 925.44,236.164 926.009,235.753 926.577,235.442 927.145,233.736 927.714,234.449 928.282,233.079 928.85,232.824 929.419,230.429 929.987,229.579 930.556,229.61 931.124,229.45 931.692,230.652 932.261,229.497 932.829,230.536 933.397,229.502 933.966,230.446 934.534,229.558 935.102,228.574 935.671,228.629 936.239,227.685 936.807,226.894 937.376,226.242 937.944,226.828 938.512,229.029 939.081,229.128 939.649,228.253 940.217,228.381 940.786,229.543 941.354,229.833 941.922,230.989 942.491,228.891 943.059,231.08 943.627,230.998 944.196,231.219 944.764,232.072 945.333,230.879 945.901,230.902 946.469,230.917 947.038,233.036 947.606,231.529 948.174,230.345 948.743,229.101 949.311,229.427 949.879,228.704 950.448,226.719 951.016,224.142 951.584,225.469 952.153,226.897 952.721,229.16 953.289,228.392 953.858,227.469 954.426,227.841 954.994,227.994 955.563,229.168 956.131,228.254 956.699,228.419 957.268,223.579 957.836,222.895 958.405,222.237 958.973,224.898 959.541,224.281 960.11,223.918 960.678,225.818 961.246,223.507 961.815,224.108 962.383,226.66 962.951,225.13 963.52,225.572 964.088,227.894 964.656,229.143 965.225,231.245 965.793,231.547 966.361,231.641 966.93,230.742 967.498,230.666 968.066,228.754 968.635,229.113 969.203,232.576 969.771,233.568 970.34,234.491 970.908,233.361 971.476,233.482 972.045,232.257 972.613,231.106 973.182,231.026 973.75,232.202 974.318,235.405 974.887,236.206 975.455,234.769 976.023,233.376 976.592,234.474 977.16,235.225 977.728,234.991 978.297,235.827 978.865,237.659 979.433,237.208 980.002,235.769 980.57,235.373 981.138,233.961 981.707,234.91 982.275,235.593 982.843,235.426 983.412,235.033 983.98,234.7 984.548,233.563 985.117,232.248 985.685,231.062 986.253,230.248 986.822,230.512 987.39,231.721 987.959,230.643 988.527,231.82 989.095,232.808 989.664,231.709 990.232,231.557 990.8,234.65 991.369,234.614 991.937,233.342 992.505,235.305 993.074,235 993.642,234.49 994.21,232.11 994.779,231.049 995.347,231.974 995.915,229.705 996.484,228.796 997.052,229.037 997.62,226.141 998.189,225.286 998.757,224.509 999.325,227.015 999.894,226.23 1000.46,227.421 1001.03,228.894 1001.6,229.126 1002.17,225.101 1002.74,225.402 1003.3,226.795 1003.87,225.941 1004.44,228.33 1005.01,226.546 1005.58,226.893 1006.15,228.048 1006.71,228.294 1007.28,230.521 1007.85,231.739 1008.42,231.831 1008.99,231.674 1009.56,230.617 1010.12,228.629 1010.69,228.856 1011.26,229.908 1011.83,230.909 1012.4,229.943 1012.97,229.996 1013.53,226.976 1014.1,224.457 1014.67,223.893 1015.24,225.538 1015.81,226.032 1016.38,224.419 1016.94,224.905 1017.51,223.248 1018.08,220.864 1018.65,222.603 1019.22,225.422 1019.79,226.02 1020.35,227.448 1020.92,227.716 1021.49,229.098 1022.06,231.297 1022.63,232.357 1023.2,231.402 1023.76,229.673 1024.33,230.858 1024.9,226.789 1025.47,227.36 1026.04,228.705 1026.61,226.934 1027.17,226.295 1027.74,227.844 1028.31,229.185 1028.88,228.376 1029.45,227.902 1030.02,228.212 1030.58,230.613 1031.15,229.822 1031.72,229.104 1032.29,230.494 1032.86,228.333 1033.43,228.687 1033.99,232.042 1034.56,236.283 1035.13,236.004 1035.7,239.79 1036.27,241.427 1036.84,240.943 1037.4,240.46 1037.97,239.043 1038.54,238.665 1039.11,237.114 1039.68,237.691 1040.25,239.455 1040.81,237.774 1041.38,238.384 1041.95,237.806 1042.52,235.102 1043.09,235.914 1043.66,235.792 1044.22,234.38 1044.79,232.971 1045.36,232.831 1045.93,232.804 1046.5,230.414 1047.07,231.359 1047.63,229.18 1048.2,227.954 1048.77,227.943 1049.34,229.006 1049.91,229.206 1050.48,229.429 1051.05,231.766 1051.61,232.633 1052.18,231.412 1052.75,232.363 1053.32,232.105 1053.89,232.846 1054.46,233.736 1055.02,234.526 1055.59,237.341 1056.16,235.908 1056.73,235.192 1057.3,236.731 1057.87,236.245 1058.43,235.851 1059,236.394 1059.57,235.091 1060.14,232.497 1060.71,232.374 1061.28,231.2 1061.84,232.282 1062.41,232.917 1062.98,230.694 1063.55,228.322 1064.12,226.491 1064.69,226.79 1065.25,230.092 1065.82,230.852 1066.39,229.621 1066.96,227.715 1067.53,227.971 1068.1,228.303 1068.66,226.384 1069.23,227.897 1069.8,228.92 1070.37,227.809 1070.94,229.209 1071.51,231.242 1072.07,230.28 1072.64,230.217 1073.21,227.933 1073.78,226.115 1074.35,225.176 1074.92,226.583 1075.48,226.719 1076.05,224.092 1076.62,225.629 1077.19,224.91 1077.76,224.289 1078.33,223.82 1078.89,225.331 1079.46,226.817 1080.03,226.158 1080.6,226.505 1081.17,229.129 1081.74,225.235 1082.3,227.921 1082.87,227.102 1083.44,226.286 1084.01,225.688 1084.58,226.26 1085.15,226.744 1085.71,226.879 1086.28,228.254 1086.85,228.426 1087.42,228.724 1087.99,228.944 1088.56,231.172 1089.12,231.137 1089.69,230.057 1090.26,233.097 1090.83,232.993 1091.4,234.835 1091.97,236.705 1092.53,236.305 1093.1,235.794 1093.67,235.329 1094.24,234.066 1094.81,233.772 1095.38,231.593 1095.94,231.699 1096.51,233.765 1097.08,234.578 1097.65,233.471 1098.22,233.408 1098.79,234.302 1099.35,233.322 1099.92,232.284 1100.49,232.134 1101.06,229.935 1101.63,229.355 1102.2,229.469 1102.76,234.668 1103.33,234.425 1103.9,234.301 1104.47,234.041 1105.04,234.823 1105.61,235.364 1106.17,235.08 1106.74,235.716 1107.31,231.257 1107.88,229.777 1108.45,229.723 1109.02,230.86 1109.58,229.767 1110.15,231.706 1110.72,230.543 1111.29,229.444 1111.86,229.582 1112.43,232.876 1112.99,232.788 1113.56,232.628 1114.13,232.423 1114.7,233.247 1115.27,233.044 1115.84,235.037 1116.4,233.785 1116.97,232.55 1117.54,233.461 1118.11,234.237 1118.68,234.18 1119.25,233.816 1119.81,231.586 1120.38,232.485 1120.95,232.279 1121.52,232.937 1122.09,233.678 1122.66,232.475 1123.23,231.487 1123.79,231.589 1124.36,230.534 1124.93,231.541 1125.5,231.336 1126.07,231.187 1126.64,231.123 1127.2,232.807 1127.77,231.538 1128.34,230.266 1128.91,229.228 1129.48,229.198 1130.05,229.232 1130.61,228.19 1131.18,227.007 1131.75,228.813 1132.32,230.806 1132.89,229.644 1133.46,229.637 1134.02,228.455 1134.59,228.306 1135.16,230.454 1135.73,229.37 1136.3,229.093 1136.87,230.268 1137.43,232.377 1138,231.309 1138.57,232.177 1139.14,234.053 1139.71,233.888 1140.28,233.552 1140.84,234.314 1141.41,235.973 1141.98,234.484 1142.55,234.164 1143.12,231.955 1143.69,231.719 1144.25,230.587 1144.82,230.251 1145.39,229.931 1145.96,227.996 1146.53,227.904 1147.1,229.166 1147.66,228.983 1148.23,229.93 1148.8,228.824 1149.37,229.948 1149.94,231.021 1150.51,230.865 1151.07,230.693 1151.64,231.546 1152.21,231.17 1152.78,229.906 1153.35,229.795 1153.92,231.705 1154.48,232.415 1155.05,234.982 1155.62,234.402 1156.19,232.924 1156.76,232.366 1157.33,229.762 1157.89,229.823 1158.46,228.47 1159.03,230.526 1159.6,230.524 1160.17,230.516 1160.74,230.316 1161.3,229.217 1161.87,229.038 1162.44,227.893 1163.01,229.928 1163.58,230.076 1164.15,230.064 1164.71,229.921 1165.28,230.856 1165.85,230.58 1166.42,228.344 1166.99,231.503 1167.56,230.196 1168.12,230.051 1168.69,233.216 1169.26,233.86 1169.83,233.48 1170.4,231.305 1170.97,231.129 1171.53,232.996 1172.1,232.635 1172.67,231.344 1173.24,229.302 1173.81,227.38 1174.38,226.68 1174.94,227.888 1175.51,227.989 1176.08,228.178 1176.65,227.288 1177.22,226.367 1177.79,225.698 1178.35,224.82 1178.92,224.938 1179.49,225.413 1180.06,226.827 1180.63,228.044 1181.2,229.411 1181.76,230.299 1182.33,231.3 1182.9,233.262 1183.47,231.979 1184.04,230.995 1184.61,229.738 1185.17,227.68 1185.74,227.805 1186.31,229.015 1186.88,230.192 1187.45,232.058 1188.02,232.068 1188.58,232.941 1189.15,233.73 1189.72,232.51 1190.29,231.237 1190.86,231.151 1191.43,230.857 1192,230.778 1192.56,230.633 1193.13,230.67 1193.7,230.369 1194.27,230.545 1194.84,230.6 1195.41,231.519 1195.97,230.451 1196.54,229.267 1197.11,228.202 1197.68,229.31 1198.25,228.188 1198.82,228.568 1199.38,229.785 1199.95,230.009 1200.52,228.902 1201.09,230.131 1201.66,230.321 1202.23,230.382 1202.79,229.225 1203.36,230.387 1203.93,230.266 1204.5,229.252 1205.07,229.327 1205.64,232.403 1206.2,233.408 1206.77,232.955 1207.34,231.384 1207.91,231.069 1208.48,229.155 1209.05,227.072 1209.61,225.073 1210.18,226.317 1210.75,225.551 1211.32,224.898 1211.89,223.019 1212.46,221.345 1213.02,221.987 1213.59,221.466 1214.16,221.914 1214.73,223.9 1215.3,224.46 1215.87,224.762 1216.43,225.148 1217,225.625 1217.57,226.071 1218.14,229.626 1218.71,226.655 1219.28,229.232 1219.84,229.225 1220.41,231.304 1220.98,232.444 1221.55,233.322 1222.12,230.927 1222.69,231.998 1223.25,230.728 1223.82,232.659 1224.39,233.491 1224.96,234.687 1225.53,234.588 1226.1,233.196 1226.66,234.07 1227.23,232.745 1227.8,232.678 1228.37,232.413 1228.94,234.332 1229.51,235.197 1230.07,234.869 1230.64,235.3 1231.21,235.122 1231.78,235.705 1232.35,235.018 1232.92,234.859 1233.48,235.71 1234.05,236.66 1234.62,237.362 1235.19,236.934 1235.76,236.524 1236.33,236.045 1236.89,236.516 1237.46,237.093 1238.03,236.556 1238.6,233.893 1239.17,233.468 1239.74,233.155 1240.3,231.818 1240.87,228.237 1241.44,229.25 1242.01,232.348 1242.58,231.167 1243.15,230.728 1243.71,228.435 1244.28,228.446 1244.85,229.544 1245.42,231.492 1245.99,229.182 1246.56,228.204 1247.12,228.546 1247.69,227.448 1248.26,227.533 1248.83,227.562 1249.4,225.884 1249.97,228.244 1250.53,227.555 1251.1,226.671 1251.67,226.898 1252.24,228.271 1252.81,227.133 1253.38,225.231 1253.94,228.676 1254.51,227.486 1255.08,228.644 1255.65,228.966 1256.22,228.799 1256.79,230.15 1257.35,229.34 1257.92,229.416 1258.49,228.578 1259.06,226.628 1259.63,225.981 1260.2,226.271 1260.76,225.782 1261.33,227.299 1261.9,226.546 1262.47,226.758 1263.04,226.908 1263.61,225.05 1264.18,226.493 1264.74,226.868 1265.31,227.141 1265.88,227.23 1266.45,228.651 1267.02,228.834 1267.59,229.148 1268.15,229.448 1268.72,228.662 1269.29,231.07 1269.86,233.02 1270.43,232.889 1271,234.572 1271.56,236.13 1272.13,234.792 1272.7,234.306 1273.27,233.97 1273.84,233.481 1274.41,234.305 1274.97,234.177 1275.54,233.909 1276.11,232.638 1276.68,232.398 1277.25,233.337 1277.82,232.089 1278.38,231.15 1278.95,231.115 1279.52,231.101 1280.09,232.178 1280.66,232.221 1281.23,231.098 1281.79,230.212 1282.36,227.189 1282.93,227.344 1283.5,224.388 1284.07,223.956 1284.64,225.807 1285.2,226.351 1285.77,225.652 1286.34,227.1 1286.91,227.594 1287.48,227.704 1288.05,229.854 1288.61,228.909 1289.18,227.282 1289.75,230.848 1290.32,229.144 1290.89,230.254 1291.46,231.236 1292.02,227.178 1292.59,227.376 1293.16,226.543 1293.73,223.983 1294.3,225.432 1294.87,224.863 1295.43,226.457 1296,227.718 1296.57,229.271 1297.14,231.266 1297.71,230.326 1298.28,232.399 1298.84,232.534 1299.41,230.405 1299.98,229.268 1300.55,229.379 1301.12,233.846 1301.69,234.629 1302.25,234.279 1302.82,232.196 1303.39,232.178 1303.96,233.251 1304.53,227.97 1305.1,229.122 1305.66,230.445 1306.23,229.44 1306.8,230.324 1307.37,231.393 1307.94,232.711 1308.51,230.764 1309.07,232.714 1309.64,232.674 1310.21,234.515 1310.78,234.141 1311.35,231.674 1311.92,232.734 1312.48,228.521 1313.05,227.67 1313.62,230.21 1314.19,231.008 1314.76,231.019 1315.33,232.111 1315.89,231.98 1316.46,229.95 1317.03,231.326 1317.6,231.357 1318.17,230.224 1318.74,230.185 1319.3,228.059 1319.87,229.198 1320.44,229.632 1321.01,228.803 1321.58,229.974 1322.15,230.062 1322.71,228.017 1323.28,225.208 1323.85,224.502 1324.42,223.948 1324.99,225.344 1325.56,225.765 1326.12,228.258 1326.69,228.464 1327.26,229.809 1327.83,229.996 1328.4,231.013 1328.97,231.139 1329.53,233.053 1330.1,233.876 1330.67,234.781 1331.24,232.486 1331.81,232.281 1332.38,230.115 1332.94,232.321 1333.51,233.433 1334.08,231.343 1334.65,233.67 1335.22,233.374 1335.79,232.452 1336.36,230.285 1336.92,231.287 1337.49,233.539 1338.06,233.379 1338.63,236.184 1339.2,234.859 1339.77,234.632 1340.33,233.487 1340.9,233.576 1341.47,232.182 1342.04,231.109 1342.61,230.934 1343.18,229.754 1343.74,227.787 1344.31,228.981 1344.88,230.044 1345.45,230.011 1346.02,229.961 1346.59,229.093 1347.15,230.317 1347.72,228.071 1348.29,229.112 1348.86,229.256 1349.43,230.402 1350,231.25 1350.56,231.205 1351.13,231.073 1351.7,228.938 1352.27,230.014 1352.84,230.864 1353.41,229.864 1353.97,231.932 1354.54,234.068 1355.11,234.772 1355.68,234.451 1356.25,232.03 1356.82,233.915 1357.38,233.702 1357.95,233.244 1358.52,233.126 1359.09,233 1359.66,232.95 1360.23,231.931 1360.79,230.744 1361.36,233.754 1361.93,233.721 1362.5,234.563 1363.07,234.071 1363.64,234.766 1364.2,232.498 1364.77,232.349 1365.34,228.833 1365.91,227.774 1366.48,227.832 1367.05,226.883 1367.61,227.15 1368.18,227.369 1368.75,227.574 1369.32,227.967 1369.89,228.068 1370.46,228.098 1371.02,229.131 1371.59,230.08 1372.16,230.021 1372.73,229.996 1373.3,228.946 1373.87,230.237 1374.43,229.383 1375,230.412 1375.57,228.39 1376.14,228.514 1376.71,228.74 1377.28,228.973 1377.84,229.117 1378.41,229.033 1378.98,229.932 1379.55,231.226 1380.12,228.99 1380.69,228.167 1381.25,228.293 1381.82,225.24 1382.39,226.667 1382.96,226.967 1383.53,227.136 1384.1,227.493 1384.66,227.596 1385.23,228.865 1385.8,226.952 1386.37,230.26 1386.94,230.264 1387.51,229.403 1388.07,227.387 1388.64,229.426 1389.21,231.655 1389.78,230.487 1390.35,231.567 1390.92,232.523 1391.48,232.234 1392.05,230.064 1392.62,229.953 1393.19,229.952 1393.76,229.995 1394.33,235.051 1394.89,235.506 1395.46,232.061 1396.03,229.823 1396.6,229.017 1397.17,229.184 1397.74,229.281 1398.3,228.151 1398.87,227.42 1399.44,225.886 1400.01,228.21 1400.58,230.455 1401.15,231.378 1401.71,231.569 1402.28,230.496 1402.85,228.587 1403.42,228.731 1403.99,228.776 1404.56,227.949 1405.13,228.302 1405.69,230.587 1406.26,230.713 1406.83,232.008 1407.4,231.895 1407.97,231.811 1408.54,232.689 1409.1,232.362 1409.67,232.946 1410.24,231.823 1410.81,232.911 1411.38,233.975 1411.95,233.461 1412.51,232.16 1413.08,233.844 1413.65,232.435 1414.22,232.266 1414.79,231.114 1415.36,235.139 1415.92,232.874 1416.49,233.844 1417.06,231.397 1417.63,232.451 1418.2,234.252 1418.77,236.035 1419.33,237.563 1419.9,237.066 1420.47,236.56 1421.04,235.035 1421.61,234.578 1422.18,233.183 1422.74,231.979 1423.31,230.777 1423.88,232.834 1424.45,231.866 1425.02,233.907 1425.59,233.616 1426.15,233.176 1426.72,232.875 1427.29,234.803 1427.86,235.343 1428.43,232.735 1429,232.55 1429.56,231.178 1430.13,232.018 1430.7,231.671 1431.27,231.684 1431.84,229.348 1432.41,228.362 1432.97,228.392 1433.54,227.443 1434.11,229.427 1434.68,230.346 1435.25,229.111 1435.82,230.19 1436.38,230.958 1436.95,229.645 1437.52,228.56 1438.09,228.498 1438.66,228.457 1439.23,230.503 1439.79,229.489 1440.36,229.318 1440.93,232.407 1441.5,230.05 1442.07,230.125 1442.64,232.934 1443.2,231.431 1443.77,231.326 1444.34,230.121 1444.91,229.145 1445.48,227.15 1446.05,224.308 1446.61,224.471 1447.18,222.998 1447.75,224.289 1448.32,225.69 1448.89,226.081 1449.46,229.552 1450.02,232.501 1450.59,231.307 1451.16,231.184 1451.73,231.218 1452.3,228.101 1452.87,229.313 1453.43,230.344 1454,229.348 1454.57,228.309 1455.14,227.176 1455.71,227.315 1456.28,226.21 1456.84,226.493 1457.41,225.755 1457.98,225.284 1458.55,226.446 1459.12,226.657 1459.69,225.833 1460.25,226.243 1460.82,223.355 1461.39,224.956 1461.96,225.55 1462.53,226.946 1463.1,227.221 1463.66,227.709 1464.23,225.797 1464.8,227.422 1465.37,226.391 1465.94,224.678 1466.51,226.981 1467.07,228.314 1467.64,230.764 1468.21,226.727 1468.78,228.23 1469.35,231.469 1469.92,230.351 1470.48,232.524 1471.05,232.482 1471.62,232.447 1472.19,230.333 1472.76,229.364 1473.33,230.588 1473.89,230.732 1474.46,232.005 1475.03,232.079 1475.6,232.066 1476.17,232.881 1476.74,233.78 1477.31,235.549 1477.87,237.187 1478.44,238.566 1479.01,236.736 1479.58,236.583 1480.15,235.074 1480.72,233.613 1481.28,232.331 1481.85,232.037 1482.42,233.138 1482.99,234.341 1483.56,234.289 1484.13,232.956 1484.69,232.782 1485.26,232.503 1485.83,231.469 1486.4,231.585 1486.97,230.456 1487.54,231.426 1488.1,229.222 1488.67,227.264 1489.24,224.255 1489.81,222.61 1490.38,221.202 1490.95,222.881 1491.51,224.541 1492.08,226.114 1492.65,225.309 1493.22,225.362 1493.79,226.564 1494.36,228.813 1494.92,228.996 1495.49,232.172 1496.06,231.79 1496.63,231.763 1497.2,232.632 1497.77,231.642 1498.33,231.709 1498.9,230.725 1499.47,230.836 1500.04,229.865 1500.61,231.035 1501.18,230.311 1501.74,230.374 1502.31,229.358 1502.88,230.53 1503.45,230.587 1504.02,230.57 1504.59,229.745 1505.15,228.843 1505.72,227.149 1506.29,227.509 1506.86,227.727 1507.43,225.797 1508,229.125 1508.56,227.238 1509.13,225.413 1509.7,225.536 1510.27,225.971 1510.84,226.364 1511.41,228.852 1511.97,228.031 1512.54,229.987 1513.11,230.168 1513.68,229.077 1514.25,227.372 1514.82,228.761 1515.38,232.111 1515.95,230.04 1516.52,230.173 1517.09,235.548 1517.66,234.261 1518.23,234.979 1518.79,234.975 1519.36,234.857 1519.93,236.5 1520.5,238.353 1521.07,238.817 1521.64,238.233 1522.2,238.738 1522.77,235.831 1523.34,236.384 1523.91,236.006 1524.48,234.785 1525.05,233.673 1525.61,234.418 1526.18,233.238 1526.75,233.325 1527.32,232.134 1527.89,232.105 1528.46,232.049 1529.02,231.976 1529.59,231.856 1530.16,233.764 1530.73,233.404 1531.3,232.056 1531.87,229.922 1532.43,230.906 1533,232.939 1533.57,232.477 1534.14,231.172 1534.71,230.997 1535.28,229.62 1535.84,228.711 1536.41,227.715 1536.98,227.839 1537.55,229.029 1538.12,230.317 1538.69,230.368 1539.25,230.432 1539.82,230.367 1540.39,229.519 1540.96,229.712 1541.53,229.656 1542.1,230.591 1542.66,231.726 1543.23,231.515 1543.8,232.354 1544.37,231.117 1544.94,232.149 1545.51,234.05 1546.08,233.62 1546.64,231.378 1547.21,232.435 1547.78,232.041 1548.35,231.985 1548.92,230.865 1549.49,227.669 1550.05,228.085 1550.62,230.203 1551.19,232.436 1551.76,233.397 1552.33,234.266 1552.9,234.828 1553.46,234.358 1554.03,235.008 1554.6,235.59 1555.17,234.989 1555.74,236.755 1556.31,237.21 1556.87,235.499 1557.44,236.013 1558.01,236.425 1558.58,237.115 1559.15,237.503 1559.72,234.826 1560.28,234.387 1560.85,232.817 1561.42,230.483 1561.99,229.278 1562.56,228.03 1563.13,226.931 1563.69,225.836 1564.26,225.871 1564.83,225.906 1565.4,226.062 1565.97,226.21 1566.54,228.58 1567.1,228.497 1567.67,227.511 1568.24,227.637 1568.81,228.644 1569.38,229.802 1569.95,230.879 1570.51,228.672 1571.08,226.679 1571.65,227.008 1572.22,227.308 1572.79,227.4 1573.36,226.615 1573.92,228.109 1574.49,230.263 1575.06,232.349 1575.63,232.058 1576.2,233.018 1576.77,233.028 1577.33,232.834 1577.9,233.681 1578.47,232.324 1579.04,232.003 1579.61,233.724 1580.18,232.29 1580.74,230.057 1581.31,233.133 1581.88,231.658 1582.45,231.375 1583.02,231.227 1583.59,231.083 1584.15,229.9 1584.72,229.932 1585.29,227.95 1585.86,225.77 1586.43,227.025 1587,226.222 1587.56,225.546 1588.13,225.858 1588.7,228.225 1589.27,227.381 1589.84,228.581 1590.41,226.659 1590.97,225.848 1591.54,225.192 1592.11,225.477 1592.68,227.93 1593.25,228.209 1593.82,228.313 1594.38,228.284 1594.95,228.454 1595.52,230.544 1596.09,231.377 1596.66,231.344 1597.23,231.229 1597.79,233.197 1598.36,231.86 1598.93,232.795 1599.5,233.632 1600.07,232.348 1600.64,231.973 1601.2,231.582 1601.77,228.036 1602.34,228.054 1602.91,227.999 1603.48,228.276 1604.05,229.487 1604.61,229.523 1605.18,228.421 1605.75,229.47 1606.32,227.599 1606.89,226.787 1607.46,224.929 1608.02,225.287 1608.59,226.767 1609.16,226.993 1609.73,228.348 1610.3,227.637 1610.87,227.769 1611.43,227.991 1612,227.493 1612.57,228.704 1613.14,230.824 1613.71,229.664 1614.28,226.452 1614.84,225.971 1615.41,227.166 1615.98,226.362 1616.55,228.599 1617.12,230.722 1617.69,229.668 1618.26,230.605 1618.82,228.464 1619.39,230.739 1619.96,229.483 1620.53,229.43 1621.1,228.551 1621.67,229.649 1622.23,230.961 1622.8,232.764 1623.37,232.34 1623.94,234.044 1624.51,232.686 1625.08,229.655 1625.64,229.717 1626.21,229.683 1626.78,229.929 1627.35,229.105 1627.92,230.358 1628.49,230.403 1629.05,229.617 1629.62,229.706 1630.19,228.848 1630.76,230.07 1631.33,233.149 1631.9,230.839 1632.46,230.742 1633.03,229.983 1633.6,230.943 1634.17,230.214 1634.74,229.323 1635.31,229.277 1635.87,228.206 1636.44,229.356 1637.01,229.532 1637.58,228.514 1638.15,229.595 1638.72,227.971 1639.28,228.143 1639.85,227.18 1640.42,227.429 1640.99,227.431 1641.56,228.493 1642.13,228.697 1642.69,230.019 1643.26,230.35 1643.83,228.413 1644.4,227.721 1644.97,228.735 1645.54,232.116 1646.1,232.147 1646.67,231.028 1647.24,231.961 1647.81,234.874 1648.38,235.594 1648.95,233.352 1649.51,235.214 1650.08,232.677 1650.65,232.198 1651.22,231.902 1651.79,231.751 1652.36,232.495 1652.92,230.589 1653.49,230.768 1654.06,232.844 1654.63,233.728 1655.2,232.258 1655.77,233.166 1656.33,231.987 1656.9,230.131 1657.47,231.186 1658.04,230.074 1658.61,231.157 1659.18,232.98 1659.74,234.803 1660.31,235.408 1660.88,235.022 1661.45,233.445 1662.02,231.05 1662.59,232.08 1663.15,232.164 1663.72,231.971 1664.29,232.829 1664.86,231.647 1665.43,232.754 1666,230.45 1666.56,229.161 1667.13,228.264 1667.7,228.108 1668.27,224.879 1668.84,226.368 1669.41,229.686 1669.97,228.758 1670.54,228.076 1671.11,228.216 1671.68,229.318 1672.25,230.497 1672.82,230.224 1673.38,231.338 1673.95,230.105 1674.52,228.233 1675.09,227.491 1675.66,226.449 1676.23,227.621 1676.79,224.853 1677.36,227.386 1677.93,228.565 1678.5,228.866 1679.07,230.053 1679.64,232.247 1680.2,233.279 1680.77,231.892 1681.34,231.762 1681.91,228.629 1682.48,226.605 1683.05,225.775 1683.61,226.249 1684.18,226.666 1684.75,227.98 1685.32,229.158 1685.89,230.433 1686.46,228.391 1687.02,227.726 1687.59,229.065 1688.16,229.364 1688.73,229.545 1689.3,229.709 1689.87,231.953 1690.44,230.836 1691,232.873 1691.57,232.862 1692.14,233.882 1692.71,233.699 1693.28,231.306 1693.85,230.211 1694.41,231.223 1694.98,232.227 1695.55,231.2 1696.12,231.364 1696.69,230.179 1697.26,229.136 1697.82,229.361 1698.39,234.444 1698.96,235.16 1699.53,233.86 1700.1,234.477 1700.67,234.669 1701.23,233.36 1701.8,233.27 1702.37,233.066 1702.94,233.835 1703.51,233.473 1704.08,232.189 1704.64,230.792 1705.21,231.653 1705.78,232.731 1706.35,230.511 1706.92,228.372 1707.49,229.397 1708.05,228.179 1708.62,227.21 1709.19,227.207 1709.76,227.257 1710.33,227.317 1710.9,228.515 1711.46,228.686 1712.03,229.72 1712.6,229.747 1713.17,229.783 1713.74,227.966 1714.31,226.219 1714.87,227.523 1715.44,226.841 1716.01,229.184 1716.58,229.441 1717.15,227.624 1717.72,228.027 1718.28,226.211 1718.85,226.568 1719.42,228.925 1719.99,230.068 1720.56,230.214 1721.13,230.293 1721.69,231.456 1722.26,231.632 1722.83,232.742 1723.4,233.431 1723.97,235.284 1724.54,235.776 1725.1,235.452 1725.67,233.969 1726.24,233.64 1726.81,233.442 1727.38,232.202 1727.95,233.008 1728.51,227.912 1729.08,227.262 1729.65,224.468 1730.22,225.928 1730.79,226.312 1731.36,226.881 1731.92,228.238 1732.49,229.41 1733.06,229.533 1733.63,229.559 1734.2,230.52 1734.77,230.659 1735.33,235.698 1735.9,234.438 1736.47,234.046 1737.04,233.681 1737.61,231.674 1738.18,230.693 1738.74,231.493 1739.31,231.435 1739.88,230.315 1740.45,232.364 1741.02,233.202 1741.59,234.188 1742.15,233.98 1742.72,235.749 1743.29,237.31 1743.86,236.974 1744.43,236.264 1745,235.658 1745.56,232.248 1746.13,231.98 1746.7,229.73 1747.27,230.613 1747.84,231.549 1748.41,232.425 1748.97,231.129 1749.54,232.012 1750.11,231.763 1750.68,231.7 1751.25,231.665 1751.82,230.499 1752.38,230.297 1752.95,229.017 1753.52,229.101 1754.09,230.38 1754.66,230.266 1755.23,229.955 1755.79,230.992 1756.36,229.867 1756.93,229.875 1757.5,229.948 1758.07,227.78 1758.64,227.979 1759.21,228.175 1759.77,229.309 1760.34,227.096 1760.91,226.203 1761.48,224.138 1762.05,224.601 1762.62,226.029 1763.18,227.42 1763.75,227.643 1764.32,227.057 1764.89,231.402 1765.46,231.288 1766.03,230.053 1766.59,229.963 1767.16,231.082 1767.73,228.758 1768.3,228.042 1768.87,229.48 1769.44,232.585 1770,232.524 1770.57,232.399 1771.14,229.361 1771.71,230.311 1772.28,228.133 1772.85,229.267 1773.41,230.332 1773.98,229.335 1774.55,227.396 1775.12,227.581 1775.69,225.517 1776.26,225.958 1776.82,225.322 1777.39,224.43 1777.96,225.837 1778.53,226.276 1779.1,226.57 1779.67,224.665 1780.23,224.957 1780.8,227.604 1781.37,227.845 1781.94,229.202 1782.51,230.26 1783.08,231.264 1783.64,232.465 1784.21,229.261 1784.78,229.064 1785.35,231.372 1785.92,232.288 1786.49,233.172 1787.05,233.868 1787.62,232.532 1788.19,229.581 1788.76,227.534 1789.33,224.914 1789.9,223.18 1790.46,221.496 1791.03,223.329 1791.6,223.932 1792.17,222.619 1792.74,222.098 1793.31,222.799 1793.87,222.226 1794.44,223.935 1795.01,225.492 1795.58,226.13 1796.15,227.644 1796.72,228.986 1797.28,229.252 1797.85,229.455 1798.42,232.743 1798.99,232.777 1799.56,234.655 1800.13,235.36 1800.69,233.081 1801.26,235.134 1801.83,238.226 1802.4,236.782 1802.97,234.505 1803.54,235.573 1804.1,234.294 1804.67,233.916 1805.24,234.8 1805.81,233.52 1806.38,233.305 1806.95,233.078 1807.51,234.098 1808.08,234.708 1808.65,233.372 1809.22,232.213 1809.79,233.276 1810.36,234.128 1810.92,234.973 1811.49,233.79 1812.06,234.705 1812.63,234.473 1813.2,232.014 1813.77,232.217 1814.33,231.825 1814.9,231.841 1815.47,228.89 1816.04,228.936 1816.61,231.134 1817.18,230.003 1817.74,232.142 1818.31,232.974 1818.88,231.76 1819.45,231.704 1820.02,231.86 1820.59,228.865 1821.15,227.827 1821.72,225.876 1822.29,228.321 1822.86,230.555 1823.43,231.693 1824,234.685 1824.56,233.25 1825.13,233.023 1825.7,232.202 1826.27,231.077 1826.84,230.919 1827.41,233.062 1827.97,233.035 1828.54,227.635 1829.11,226.743 1829.68,227.163 1830.25,227.552 1830.82,226.888 1831.39,226.295 1831.95,225.571 1832.52,226.905 1833.09,229.1 1833.66,229.284 1834.23,230.289 1834.8,231.241 1835.36,231.187 1835.93,231.035 1836.5,230.94 1837.07,232.203 1837.64,234.128 1838.21,234.798 1838.77,234.386 1839.34,232.21 1839.91,232.158 1840.48,229.906 1841.05,228.977 1841.62,230.072 1842.18,229.984 1842.75,230.915 1843.32,230.979 1843.89,229.129 1844.46,227.307 1845.03,225.356 1845.59,225.91 1846.16,224.362 1846.73,226.78 1847.3,226.081 1847.87,228.438 1848.44,230.006 1849,230.109 1849.57,230.25 1850.14,230.242 1850.71,229.221 1851.28,227.976 1851.85,226.374 1852.41,226.618 1852.98,227.116 1853.55,228.534 1854.12,229.883 1854.69,230.19 1855.26,228.107 1855.82,226.13 1856.39,228.628 1856.96,230.067 1857.53,231.324 1858.1,233.338 1858.67,233.145 1859.23,232.085 1859.8,231.004 1860.37,232.113 1860.94,232.853 1861.51,232.72 1862.08,233.524 1862.64,234.395 1863.21,234.167 1863.78,233.092 1864.35,232.844 1864.92,231.537 1865.49,231.547 1866.05,232.601 1866.62,232.403 1867.19,234.193 1867.76,233.598 1868.33,234.429 1868.9,234.035 1869.46,231.494 1870.03,231.152 1870.6,231.322 1871.17,231.176 1871.74,229.16 1872.31,231.246 1872.87,231.35 1873.44,228.323 1874.01,227.541 1874.58,225.726 1875.15,228.291 1875.72,229.647 1876.28,229.718 1876.85,229.861 1877.42,233.004 1877.99,234.055 1878.56,233.784 1879.13,233.498 1879.69,233.488 1880.26,231.428 1880.83,232.613 1881.4,232.41 1881.97,231.595 1882.54,231.6 1883.1,230.443 1883.67,229.486 1884.24,230.438 1884.81,231.448 1885.38,232.517 1885.95,233.433 1886.51,232.193 1887.08,228.846 1887.65,228.178 1888.22,228.468 1888.79,227.867 1889.36,229.916 1889.92,232.148 1890.49,232.869 1891.06,237.866 1891.63,234.357 1892.2,233.101 1892.77,230.733 1893.33,232.9 1893.9,233.928 1894.47,233.488 1895.04,232.048 1895.61,232.011 1896.18,231.706 1896.74,233.674 1897.31,233.414 1897.88,230.977 1898.45,230.751 1899.02,232.982 1899.59,231.333 1900.16,231.069 1900.72,231.059 1901.29,231.899 1901.86,231.649 1902.43,232.548 1903,232.428 1903.57,232.048 1904.13,232.828 1904.7,232.676 1905.27,233.48 1905.84,234.293 1906.41,233.961 1906.98,231.606 1907.54,231.414 1908.11,230.159 1908.68,230.033 1909.25,230.043 1909.82,231.067 1910.39,230.758 1910.95,229.405 1911.52,228.473 1912.09,228.481 1912.66,228.661 1913.23,231.787 1913.8,232.571 1914.36,232.23 1914.93,232.026 1915.5,230.664 1916.07,232.603 1916.64,234.404 1917.21,235.105 1917.77,235.597 1918.34,237.192 1918.91,236.65 1919.48,235.324 1920.05,233.61 1920.62,232.347 1921.18,231.148 1921.75,231.93 1922.32,232.693 1922.89,232.159 1923.46,231.974 1924.03,231.71 1924.59,231.529 1925.16,233.557 1925.73,231.188 1926.3,229.717 1926.87,228.666 1927.44,229.981 1928,227.596 1928.57,228.749 1929.14,229.996 1929.71,229.881 1930.28,230.828 1930.85,232.667 1931.41,230.424 1931.98,229.172 1932.55,229.002 1933.12,230.127 1933.69,232.071 1934.26,229.643 1934.82,227.765 1935.39,227.951 1935.96,229.097 1936.53,229.154 1937.1,230.16 1937.67,229.948 1938.23,228.85 1938.8,227.962 1939.37,228.251 1939.94,228.189 1940.51,226.286 1941.08,227.576 1941.64,226.472 1942.21,226.547 1942.78,228.822 1943.35,228.777 1943.92,228.677 1944.49,229.828 1945.05,228.934 1945.62,228.904 1946.19,230.774 1946.76,229.839 1947.33,230.772 1947.9,231.622 1948.46,230.68 1949.03,230.564 1949.6,229.338 1950.17,228.228 1950.74,228.285 1951.31,228.476 1951.87,227.444 1952.44,227.544 1953.01,227.652 1953.58,226.827 1954.15,224.773 1954.72,226.989 1955.28,225.228 1955.85,224.435 1956.42,226.928 1956.99,225.257 1957.56,224.701 1958.13,226.329 1958.69,225.866 1959.26,226.466 1959.83,225.684 1960.4,225.016 1960.97,226.271 1961.54,227.574 1962.1,226.523 1962.67,227.873 1963.24,226.974 1963.81,229.173 1964.38,229.615 1964.95,229.784 1965.51,227.921 1966.08,227.199 1966.65,228.498 1967.22,230.662 1967.79,229.821 1968.36,226.639 1968.92,229.008 1969.49,229.293 1970.06,228.584 1970.63,227.783 1971.2,225.945 1971.77,224.367 1972.34,226.026 1972.9,225.374 1973.47,226.708 1974.04,227.875 1974.61,228.153 1975.18,228.378 1975.75,228.585 1976.31,228.751 1976.88,227.747 1977.45,230.175 1978.02,231.349 1978.59,231.23 1979.16,230.365 1979.72,233.843 1980.29,233.558 1980.86,231.358 1981.43,233.297 1982,232.224 1982.57,233.212 1983.13,234.304 1983.7,234.06 1984.27,233.851 1984.84,233.63 1985.41,235.486 1985.98,236.157 1986.54,233.646 1987.11,232.137 1987.68,232.402 1988.25,232.287 1988.82,231.301 1989.39,235.338 1989.95,235.85 1990.52,233.521 1991.09,235.26 1991.66,234.744 1992.23,234.382 1992.8,230.992 1993.36,230.908 1993.93,227.871 1994.5,225.967 1995.07,223.329 1995.64,226.824 1996.21,227.029 1996.77,226.21 1997.34,228.476 1997.91,228.595 1998.48,229.86 1999.05,231.862 1999.62,229.756 2000.18,229.802 2000.75,229.855 2001.32,228.841 2001.89,228.894 2002.46,226.854 2003.03,227.073 2003.59,226.275 2004.16,226.337 2004.73,225.606 2005.3,227.117 2005.87,228.542 2006.44,228.635 2007,229.977 2007.57,230.048 2008.14,231.441 2008.71,231.715 2009.28,230.624 2009.85,230.739 2010.41,230.911 2010.98,229.007 2011.55,229.046 2012.12,229.216 2012.69,230.083 2013.26,228.107 2013.82,228.089 2014.39,228.229 2014.96,228.345 2015.53,229.642 2016.1,231.794 2016.67,233.985 2017.23,232.546 2017.8,232.563 2018.37,234.499 2018.94,235.41 2019.51,232.974 2020.08,232.828 2020.64,232.521 2021.21,233.308 2021.78,232.915 2022.35,232.732 2022.92,233.52 2023.49,232.544 2024.05,232.201 2024.62,232.007 2025.19,231.716 2025.76,230.451 2026.33,230.632 2026.9,230.586 2027.46,230.574 2028.03,231.633 2028.6,232.603 2029.17,233.524 2029.74,234.467 2030.31,233.907 2030.87,233.577 2031.44,232.342 2032.01,232.205 2032.58,230.983 2033.15,233.091 2033.72,232.895 2034.28,233.837 2034.85,232.428 2035.42,232.133 2035.99,234.142 2036.56,233.03 2037.13,234.608 2037.69,234.253 2038.26,232.74 2038.83,231.29 2039.4,229.943 2039.97,232.032 2040.54,230.83 2041.11,231.842 2041.67,229.484 2042.24,229.618 2042.81,228.712 2043.38,228.721 2043.95,228.892 2044.52,225.91 2045.08,228.396 2045.65,229.527 2046.22,229.363 2046.79,229.279 2047.36,229.177 2047.93,230.48 2048.49,230.382 2049.06,231.441 2049.63,231.25 2050.2,230.029 2050.77,230.913 2051.34,231.787 2051.9,230.779 2052.47,230.848 2053.04,231.567 2053.61,229.463 2054.18,230.292 2054.75,229.191 2055.31,228.339 2055.88,226.686 2056.45,226.788 2057.02,226.147 2057.59,228.635 2058.16,227.703 2058.72,227.989 2059.29,226.916 2059.86,227.138 2060.43,227.317 2061,226.814 2061.57,228.081 2062.13,227.29 2062.7,230.495 2063.27,230.514 2063.84,229.421 2064.41,228.402 2064.98,228.449 2065.54,227.817 2066.11,226.933 2066.68,222.319 2067.25,219.926 2067.82,220.677 2068.39,220.331 2068.95,221.155 2069.52,222.204 2070.09,219.967 2070.66,219.895 2071.23,223.954 2071.8,228.52 2072.36,229.959 2072.93,229.129 2073.5,232.519 2074.07,234.543 2074.64,234.313 2075.21,235.262 2075.77,235.87 2076.34,237.644 2076.91,234.003 2077.48,234.932 2078.05,233.577 2078.62,234.546 2079.18,238.544 2079.75,237.204 2080.32,237.106 2080.89,235.88 2081.46,237.593 2082.03,235.941 2082.59,236.57 2083.16,233.02 2083.73,230.816 2084.3,232.881 2084.87,232.842 2085.44,232.692 2086,232.752 2086.57,231.54 2087.14,231.394 2087.71,230.367 2088.28,230.528 2088.85,232.808 2089.41,232.617 2089.98,233.563 2090.55,233.334 2091.12,233.163 2091.69,231.876 2092.26,231.805 2092.82,231.715 2093.39,230.763 2093.96,230.505 2094.53,229.514 2095.1,226.57 2095.67,224.662 2096.23,225.083 2096.8,225.415 2097.37,226.877 2097.94,227.103 2098.51,228.407 2099.08,228.607 2099.64,228.907 2100.21,226.03 2100.78,226.372 2101.35,226.651 2101.92,226.841 2102.49,229.178 2103.05,227.219 2103.62,227.515 2104.19,227.868 2104.76,229.289 2105.33,230.43 2105.9,231.454 2106.46,230.271 2107.03,230.231 2107.6,231.26 2108.17,229.111 2108.74,226.236 2109.31,227.542 2109.87,229.085 2110.44,229.206 2111.01,230.407 2111.58,232.433 2112.15,231.235 2112.72,232.244 2113.29,234.291 2113.85,235.028 2114.42,232.741 2114.99,233.627 2115.56,233.391 2116.13,234.251 2116.7,233.971 2117.26,230.442 2117.83,229.486 2118.4,232.828 2118.97,232.708 2119.54,232.691 2120.11,231.646 2120.67,231.431 2121.24,231.533 2121.81,230.789 2122.38,230.818 2122.95,232.826 2123.52,233.578 2124.08,233.138 2124.65,230.903 2125.22,230.891 2125.79,232.154 2126.36,230.123 2126.93,231.296 2127.49,232.158 2128.06,231.008 2128.63,229.68 2129.2,228.874 2129.77,228.025 2130.34,228.329 2130.9,228.67 2131.47,228.905 2132.04,230.06 2132.61,229.157 2133.18,229.075 2133.75,228.192 2134.31,226.289 2134.88,228.879 2135.45,228.827 2136.02,230.122 2136.59,229.944 2137.16,230.072 2137.72,228.03 2138.29,229.197 2138.86,228.433 2139.43,228.559 2140,230.712 2140.57,230.604 2141.13,230.472 2141.7,230.45 2142.27,231.402 2142.84,232.461 2143.41,231.31 2143.98,232.32 2144.54,233.146 2145.11,232.149 2145.68,230.989 2146.25,231.931 2146.82,231.069 2147.39,233.895 2147.95,234.744 2148.52,232.38 2149.09,233.538 2149.66,233.333 2150.23,231.344 2150.8,234.455 2151.36,233.217 2151.93,234.995 2152.5,234.665 2153.07,234.105 2153.64,233.758 2154.21,232.633 2154.77,232.31 2155.34,230.175 2155.91,231.004 2156.48,232.244 2157.05,231.974 2157.62,230.721 2158.18,230.718 2158.75,231.827 2159.32,232.664 2159.89,232.255 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.023 ± 0.017\n  with uncertainty of ± 0.0010665229774858027\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01256 ± (0.00276941, 0.00279194) (MC)\n  95% confidence interval: [-4.01809, -4.00689]) (MC)\n  linear error propagation: -4.01261 ± 0.00281517\n  |δ_y| = |0.00117249| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0125564018469735, val_l = 0.005533153959735415, val_u = 0.005664054041911726)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip030\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip030)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip031\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip030)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip032\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.83 2211.02,1150.83 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1003.68 2211.02,1003.68 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,856.53 2211.02,856.53 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,709.381 2211.02,709.381 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,562.233 2211.02,562.233 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,415.084 2211.02,415.084 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,267.935 2211.02,267.935 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.83 365.751,1150.83 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1003.68 365.751,1003.68 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,856.53 365.751,856.53 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,709.381 365.751,709.381 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,562.233 365.751,562.233 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,415.084 365.751,415.084 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,267.935 365.751,267.935 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M298.909 1136.63 Q295.298 1136.63 293.469 1140.19 Q291.664 1143.73 291.664 1150.86 Q291.664 1157.97 293.469 1161.53 Q295.298 1165.08 298.909 1165.08 Q302.543 1165.08 304.349 1161.53 Q306.177 1157.97 306.177 1150.86 Q306.177 1143.73 304.349 1140.19 Q302.543 1136.63 298.909 1136.63 M298.909 1132.92 Q304.719 1132.92 307.775 1137.53 Q310.853 1142.11 310.853 1150.86 Q310.853 1159.59 307.775 1164.2 Q304.719 1168.78 298.909 1168.78 Q293.099 1168.78 290.02 1164.2 Q286.964 1159.59 286.964 1150.86 Q286.964 1142.11 290.02 1137.53 Q293.099 1132.92 298.909 1132.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M259.557 1017.02 L267.196 1017.02 L267.196 990.658 L258.886 992.325 L258.886 988.066 L267.15 986.399 L271.826 986.399 L271.826 1017.02 L279.465 1017.02 L279.465 1020.96 L259.557 1020.96 L259.557 1017.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M298.909 989.478 Q295.298 989.478 293.469 993.043 Q291.664 996.584 291.664 1003.71 Q291.664 1010.82 293.469 1014.39 Q295.298 1017.93 298.909 1017.93 Q302.543 1017.93 304.349 1014.39 Q306.177 1010.82 306.177 1003.71 Q306.177 996.584 304.349 993.043 Q302.543 989.478 298.909 989.478 M298.909 985.774 Q304.719 985.774 307.775 990.381 Q310.853 994.964 310.853 1003.71 Q310.853 1012.44 307.775 1017.05 Q304.719 1021.63 298.909 1021.63 Q293.099 1021.63 290.02 1017.05 Q286.964 1012.44 286.964 1003.71 Q286.964 994.964 290.02 990.381 Q293.099 985.774 298.909 985.774 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M262.775 869.875 L279.094 869.875 L279.094 873.81 L257.15 873.81 L257.15 869.875 Q259.812 867.12 264.395 862.491 Q269.002 857.838 270.182 856.496 Q272.428 853.972 273.307 852.236 Q274.21 850.477 274.21 848.787 Q274.21 846.033 272.266 844.297 Q270.344 842.56 267.242 842.56 Q265.043 842.56 262.59 843.324 Q260.159 844.088 257.381 845.639 L257.381 840.917 Q260.205 839.783 262.659 839.204 Q265.113 838.625 267.15 838.625 Q272.52 838.625 275.715 841.31 Q278.909 843.996 278.909 848.486 Q278.909 850.616 278.099 852.537 Q277.312 854.435 275.205 857.028 Q274.627 857.699 271.525 860.917 Q268.423 864.111 262.775 869.875 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M298.909 842.329 Q295.298 842.329 293.469 845.894 Q291.664 849.435 291.664 856.565 Q291.664 863.671 293.469 867.236 Q295.298 870.778 298.909 870.778 Q302.543 870.778 304.349 867.236 Q306.177 863.671 306.177 856.565 Q306.177 849.435 304.349 845.894 Q302.543 842.329 298.909 842.329 M298.909 838.625 Q304.719 838.625 307.775 843.232 Q310.853 847.815 310.853 856.565 Q310.853 865.292 307.775 869.898 Q304.719 874.482 298.909 874.482 Q293.099 874.482 290.02 869.898 Q286.964 865.292 286.964 856.565 Q286.964 847.815 290.02 843.232 Q293.099 838.625 298.909 838.625 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M272.914 708.027 Q276.27 708.745 278.145 711.013 Q280.043 713.282 280.043 716.615 Q280.043 721.731 276.525 724.532 Q273.006 727.333 266.525 727.333 Q264.349 727.333 262.034 726.893 Q259.742 726.476 257.289 725.62 L257.289 721.106 Q259.233 722.24 261.548 722.819 Q263.863 723.398 266.386 723.398 Q270.784 723.398 273.076 721.661 Q275.39 719.925 275.39 716.615 Q275.39 713.56 273.238 711.847 Q271.108 710.111 267.289 710.111 L263.261 710.111 L263.261 706.268 L267.474 706.268 Q270.923 706.268 272.752 704.902 Q274.58 703.513 274.58 700.921 Q274.58 698.259 272.682 696.847 Q270.807 695.412 267.289 695.412 Q265.367 695.412 263.168 695.828 Q260.969 696.245 258.33 697.125 L258.33 692.958 Q260.992 692.217 263.307 691.847 Q265.645 691.476 267.705 691.476 Q273.029 691.476 276.131 693.907 Q279.233 696.314 279.233 700.435 Q279.233 703.305 277.59 705.296 Q275.946 707.263 272.914 708.027 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M298.909 695.18 Q295.298 695.18 293.469 698.745 Q291.664 702.287 291.664 709.416 Q291.664 716.523 293.469 720.087 Q295.298 723.629 298.909 723.629 Q302.543 723.629 304.349 720.087 Q306.177 716.523 306.177 709.416 Q306.177 702.287 304.349 698.745 Q302.543 695.18 298.909 695.18 M298.909 691.476 Q304.719 691.476 307.775 696.083 Q310.853 700.666 310.853 709.416 Q310.853 718.143 307.775 722.749 Q304.719 727.333 298.909 727.333 Q293.099 727.333 290.02 722.749 Q286.964 718.143 286.964 709.416 Q286.964 700.666 290.02 696.083 Q293.099 691.476 298.909 691.476 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M271.594 549.027 L259.789 567.476 L271.594 567.476 L271.594 549.027 M270.367 544.953 L276.247 544.953 L276.247 567.476 L281.177 567.476 L281.177 571.364 L276.247 571.364 L276.247 579.513 L271.594 579.513 L271.594 571.364 L255.992 571.364 L255.992 566.851 L270.367 544.953 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M298.909 548.031 Q295.298 548.031 293.469 551.596 Q291.664 555.138 291.664 562.267 Q291.664 569.374 293.469 572.938 Q295.298 576.48 298.909 576.48 Q302.543 576.48 304.349 572.938 Q306.177 569.374 306.177 562.267 Q306.177 555.138 304.349 551.596 Q302.543 548.031 298.909 548.031 M298.909 544.328 Q304.719 544.328 307.775 548.934 Q310.853 553.517 310.853 562.267 Q310.853 570.994 307.775 575.601 Q304.719 580.184 298.909 580.184 Q293.099 580.184 290.02 575.601 Q286.964 570.994 286.964 562.267 Q286.964 553.517 290.02 548.934 Q293.099 544.328 298.909 544.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M258.793 397.804 L277.15 397.804 L277.15 401.739 L263.076 401.739 L263.076 410.211 Q264.094 409.864 265.113 409.702 Q266.131 409.517 267.15 409.517 Q272.937 409.517 276.316 412.688 Q279.696 415.859 279.696 421.276 Q279.696 426.854 276.224 429.956 Q272.752 433.035 266.432 433.035 Q264.256 433.035 261.988 432.665 Q259.742 432.294 257.335 431.554 L257.335 426.854 Q259.418 427.989 261.641 428.544 Q263.863 429.1 266.34 429.1 Q270.344 429.1 272.682 426.993 Q275.02 424.887 275.02 421.276 Q275.02 417.665 272.682 415.558 Q270.344 413.452 266.34 413.452 Q264.465 413.452 262.59 413.868 Q260.738 414.285 258.793 415.165 L258.793 397.804 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M298.909 400.882 Q295.298 400.882 293.469 404.447 Q291.664 407.989 291.664 415.118 Q291.664 422.225 293.469 425.79 Q295.298 429.331 298.909 429.331 Q302.543 429.331 304.349 425.79 Q306.177 422.225 306.177 415.118 Q306.177 407.989 304.349 404.447 Q302.543 400.882 298.909 400.882 M298.909 397.179 Q304.719 397.179 307.775 401.785 Q310.853 406.368 310.853 415.118 Q310.853 423.845 307.775 428.452 Q304.719 433.035 298.909 433.035 Q293.099 433.035 290.02 428.452 Q286.964 423.845 286.964 415.118 Q286.964 406.368 290.02 401.785 Q293.099 397.179 298.909 397.179 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M269.326 266.071 Q266.178 266.071 264.326 268.224 Q262.497 270.377 262.497 274.127 Q262.497 277.854 264.326 280.03 Q266.178 282.182 269.326 282.182 Q272.474 282.182 274.303 280.03 Q276.154 277.854 276.154 274.127 Q276.154 270.377 274.303 268.224 Q272.474 266.071 269.326 266.071 M278.608 251.419 L278.608 255.678 Q276.849 254.845 275.043 254.405 Q273.261 253.965 271.502 253.965 Q266.872 253.965 264.418 257.09 Q261.988 260.215 261.641 266.534 Q263.006 264.521 265.066 263.456 Q267.127 262.368 269.603 262.368 Q274.812 262.368 277.821 265.539 Q280.853 268.687 280.853 274.127 Q280.853 279.451 277.705 282.669 Q274.557 285.886 269.326 285.886 Q263.33 285.886 260.159 281.303 Q256.988 276.696 256.988 267.97 Q256.988 259.775 260.877 254.914 Q264.766 250.03 271.316 250.03 Q273.076 250.03 274.858 250.377 Q276.664 250.724 278.608 251.419 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M298.909 253.734 Q295.298 253.734 293.469 257.298 Q291.664 260.84 291.664 267.97 Q291.664 275.076 293.469 278.641 Q295.298 282.182 298.909 282.182 Q302.543 282.182 304.349 278.641 Q306.177 275.076 306.177 267.97 Q306.177 260.84 304.349 257.298 Q302.543 253.734 298.909 253.734 M298.909 250.03 Q304.719 250.03 307.775 254.636 Q310.853 259.22 310.853 267.97 Q310.853 276.696 307.775 281.303 Q304.719 285.886 298.909 285.886 Q293.099 285.886 290.02 281.303 Q286.964 276.696 286.964 267.97 Q286.964 259.22 290.02 254.636 Q293.099 250.03 298.909 250.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip032)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1042.4 400.199,942.796 400.786,851.402 401.372,767.67 401.958,691.09 402.545,621.19 403.131,557.533 403.718,499.712 404.304,447.348 404.891,400.088 405.477,357.603 406.063,319.583 406.65,285.74 407.236,255.801 407.823,229.513 408.409,270.976 408.995,249.599 409.582,284.739 410.168,266.444 410.755,250.929 411.341,238.74 411.927,228.192 412.514,219.895 413.1,285.703 413.687,279.514 414.273,275.189 414.86,272.596 415.446,271.607 416.032,272.616 416.619,274.456 417.205,278.102 417.792,324.492 418.378,329.563 418.964,336.143 419.551,359.982 420.137,398.27 420.724,420.881 421.31,427.929 421.896,435.966 422.483,457.111 423.069,466.555 423.656,476.329 424.242,507.311 424.829,518.2 425.415,556.019 426.001,582.954 426.588,592.95 427.174,602.686 427.761,612.742 428.347,629.878 428.933,640.112 429.52,650.25 430.106,673.18 430.693,694.312 431.279,708.73 431.865,717.976 432.452,733.634 433.038,748.401 433.625,762.709 434.211,776.166 434.798,793.547 435.384,801.944 435.97,810.378 436.557,818.371 437.143,834.507 437.73,846.411 438.316,857.589 438.902,865.308 439.489,875.973 440.075,883.076 440.662,896.826 441.248,906.893 441.835,913.934 442.421,926.825 443.007,938.959 443.594,950.656 444.18,959.174 444.767,965.085 445.353,981.093 445.939,986.445 446.526,994.382 447.112,1001.96 447.699,1009.18 448.285,1018.56 448.871,1025.51 449.458,1029.8 450.044,1038.73 450.631,1046.97 451.217,1052.57 451.804,1060.51 452.39,1062.17 452.976,1068.04 453.563,1071.4 454.149,1081.17 454.736,1086.33 455.322,1095.14 455.908,1105.72 456.495,1108.44 457.081,1114.92 457.668,1121.09 458.254,1126.96 458.84,1128.9 459.427,1132.69 460.013,1139.77 460.6,1143.23 461.186,1149.87 461.773,1156.43 462.359,1159.43 462.945,1161.99 463.532,1163.07 464.118,1165.83 464.705,1166.85 465.291,1169.79 465.877,1172.36 466.464,1173.43 467.05,1176.11 467.637,1175.62 468.223,1179.71 468.809,1183.65 469.396,1187.66 469.982,1191.33 470.569,1192.2 471.155,1195.95 471.742,1197.85 472.328,1199.76 472.914,1201.7 473.501,1207.9 474.087,1208 474.674,1212.42 475.26,1214.11 475.846,1214.18 476.433,1214.23 477.019,1221.48 477.606,1222.74 478.192,1223.96 478.778,1222.21 479.365,1224.69 479.951,1227.04 480.538,1227.95 481.124,1228.89 481.711,1229.74 482.297,1229.47 482.883,1233.29 483.47,1232.83 484.056,1236.43 484.643,1235.68 485.229,1232.41 485.815,1233.48 486.402,1234.52 486.988,1233.96 487.575,1237.29 488.161,1236.93 488.748,1236.44 489.334,1238.47 489.92,1238 490.507,1235.99 491.093,1236.9 491.68,1237.57 492.266,1238.57 492.852,1236.68 493.439,1237.67 494.025,1237.17 494.612,1239.25 495.198,1238.78 495.784,1243.7 496.371,1244.17 496.957,1244.61 497.544,1247.65 498.13,1247.91 498.717,1246.78 499.303,1248.6 499.889,1248.69 500.476,1250.42 501.062,1249.48 501.649,1247.24 502.235,1247.46 502.821,1245.12 503.408,1242.94 503.994,1243.49 504.581,1244.06 505.167,1247.05 505.753,1247.33 506.34,1247.62 506.926,1250.53 507.513,1248.2 508.099,1247.27 508.686,1246.18 509.272,1245.26 509.858,1244.32 510.445,1245 511.031,1246.68 511.618,1246.82 512.204,1244.62 512.79,1244.98 513.377,1244.3 513.963,1245.95 514.55,1245.34 515.136,1245.73 515.722,1244.98 516.309,1242.96 516.895,1242.36 517.482,1239.45 518.068,1240.1 518.655,1241.84 519.241,1240.15 519.827,1240.59 520.414,1242.73 521,1242.21 521.587,1237.9 522.173,1236.37 522.759,1239.05 523.346,1237.15 523.932,1237.89 524.519,1241.15 525.105,1240.62 525.691,1239.15 526.278,1238.86 526.864,1238.8 527.451,1238.3 528.037,1236.53 528.624,1234.84 529.21,1233.56 529.796,1234.7 530.383,1237.1 530.969,1236.54 531.556,1234.87 532.142,1236.94 532.728,1238.8 533.315,1237.21 533.901,1236.68 534.488,1236.33 535.074,1233.62 535.661,1235.99 536.247,1235.53 536.833,1233.94 537.42,1233.68 538.006,1232.2 538.593,1232.25 539.179,1233.54 539.765,1232.01 540.352,1231.89 540.938,1232.88 541.525,1234.07 542.111,1231.23 542.697,1231.29 543.284,1233.38 543.87,1235.75 544.457,1234.2 545.043,1235.18 545.63,1233.48 546.216,1234.41 546.802,1236.52 547.389,1236.03 547.975,1235.49 548.562,1237.53 549.148,1239.39 549.734,1240.08 550.321,1239.55 550.907,1238.88 551.494,1237.05 552.08,1236.42 552.666,1239.34 553.253,1239.92 553.839,1238.99 554.426,1238.27 555.012,1237.85 555.599,1236.05 556.185,1235.25 556.771,1233.73 557.358,1233.22 557.944,1232.59 558.531,1236.83 559.117,1235.11 559.703,1234.76 560.29,1234.17 560.876,1235.7 561.463,1235.23 562.049,1236.06 562.635,1238.96 563.222,1240.48 563.808,1241.94 564.395,1241.1 564.981,1240.26 565.568,1239.56 566.154,1237.32 566.74,1237.97 567.327,1234.83 567.913,1235.36 568.5,1235.88 569.086,1236.31 569.672,1234.2 570.259,1234.77 570.845,1234.1 571.432,1233.63 572.018,1234.34 572.605,1232.57 573.191,1232.37 573.777,1232.09 574.364,1227.89 574.95,1226.34 575.537,1228.34 576.123,1230.89 576.709,1229.44 577.296,1227.76 577.882,1230.06 578.469,1229.95 579.055,1227.17 579.641,1220.92 580.228,1224.58 580.814,1223.51 581.401,1222.33 581.987,1221.34 582.574,1220.52 583.16,1219.48 583.746,1219.39 584.333,1219.79 584.919,1220.09 585.506,1222.52 586.092,1223.83 586.678,1227.56 587.265,1227.32 587.851,1225.84 588.438,1226.79 589.024,1229.07 589.61,1228.82 590.197,1228.69 590.783,1228.37 591.37,1230.56 591.956,1229.93 592.543,1230.91 593.129,1232.89 593.715,1233.62 594.302,1233.16 594.888,1232.48 595.475,1235.57 596.061,1237.36 596.647,1237.68 597.234,1235.83 597.82,1235.12 598.407,1238.15 598.993,1239.78 599.579,1241.47 600.166,1244.12 600.752,1241.7 601.339,1238.04 601.925,1238.26 602.512,1237.36 603.098,1238.93 603.684,1237.95 604.271,1237.02 604.857,1236.28 605.444,1236.79 606.03,1239.71 606.616,1239.94 607.203,1240.22 607.789,1238.14 608.376,1234.87 608.962,1231.61 609.548,1230.92 610.135,1230.56 610.721,1229.83 611.308,1230.71 611.894,1227.98 612.481,1228.84 613.067,1228.24 613.653,1227.69 614.24,1227.2 614.826,1225.38 615.413,1225.16 615.999,1226.12 616.585,1223.3 617.172,1224.11 617.758,1222.62 618.345,1221.26 618.931,1221.29 619.518,1221.24 620.104,1220.05 620.69,1221.28 621.277,1221.22 621.863,1221.21 622.45,1219.88 623.036,1219.83 623.622,1220.88 624.209,1221.92 624.795,1222.99 625.382,1222.78 625.968,1223.76 626.554,1223.49 627.141,1219.58 627.727,1218.23 628.314,1217.1 628.9,1218.57 629.487,1218.7 630.073,1217.46 630.659,1218.64 631.246,1218.81 631.832,1215.19 632.419,1216.84 633.005,1218.04 633.591,1218.21 634.178,1218.5 634.764,1219.81 635.351,1219.63 635.937,1219.65 636.523,1218.36 637.11,1218.44 637.696,1218.53 638.283,1222.09 638.869,1223.16 639.456,1224.2 640.042,1222.81 640.628,1221.46 641.215,1221.45 641.801,1220.07 642.388,1221.34 642.974,1224.87 643.56,1224.67 644.147,1224.34 644.733,1226.28 645.32,1227.18 645.906,1224.16 646.492,1222.37 647.079,1223.38 647.665,1224.48 648.252,1221.66 648.838,1221.26 649.425,1218.8 650.011,1218.92 650.597,1221.35 651.184,1220.35 651.77,1220.35 652.357,1217.72 652.943,1217.87 653.529,1216.62 654.116,1216.9 654.702,1216.89 655.289,1219.2 655.875,1220.34 656.462,1217.54 657.048,1218.51 657.634,1217.27 658.221,1215.98 658.807,1215.12 659.394,1216.35 659.98,1217.59 660.566,1216.31 661.153,1218.66 661.739,1219.45 662.326,1220.52 662.912,1220.38 663.498,1218.91 664.085,1218.99 664.671,1216.41 665.258,1215.28 665.844,1216.52 666.431,1211.94 667.017,1212.32 667.603,1212.44 668.19,1212.44 668.776,1213.91 669.363,1215.07 669.949,1217.66 670.535,1219.97 671.122,1219.83 671.708,1222.15 672.295,1225.5 672.881,1225.1 673.467,1228.52 674.054,1223.02 674.64,1222.86 675.227,1222.48 675.813,1221.09 676.4,1217.33 676.986,1218.61 677.572,1218.58 678.159,1219.68 678.745,1219.6 679.332,1219.26 679.918,1219.27 680.504,1219.06 681.091,1218.99 681.677,1218.89 682.264,1221.16 682.85,1220.73 683.436,1218.1 684.023,1216.58 684.609,1218.94 685.196,1218.82 685.782,1219.89 686.369,1219.86 686.955,1218.59 687.541,1219.87 688.128,1219.59 688.714,1220.56 689.301,1219.18 689.887,1218.85 690.473,1216.4 691.06,1218.69 691.646,1218.39 692.233,1219.35 692.819,1216.76 693.405,1216.76 693.992,1216.6 694.578,1215.43 695.165,1215.43 695.751,1216.78 696.338,1218.95 696.924,1218.85 697.51,1219.93 698.097,1219.54 698.683,1216.99 699.27,1216.06 699.856,1216.02 700.442,1216.89 701.029,1212.01 701.615,1211.23 702.202,1211.44 702.788,1211.39 703.375,1212.68 703.961,1214.07 704.547,1213.95 705.134,1213.09 705.72,1213.32 706.307,1209.95 706.893,1211.51 707.479,1211.88 708.066,1213.28 708.652,1212.16 709.239,1212.15 709.825,1213.82 710.411,1215 710.998,1213.83 711.584,1215.19 712.171,1216.33 712.757,1218.71 713.344,1218.49 713.93,1217.25 714.516,1216.07 715.103,1218.4 715.689,1216.99 716.276,1219.33 716.862,1218.96 717.448,1222.07 718.035,1219.38 718.621,1218.08 719.208,1216.92 719.794,1215.52 720.38,1215.45 720.967,1216.42 721.553,1216.18 722.14,1216.19 722.726,1217.19 723.313,1218.01 723.899,1221.56 724.485,1221.22 725.072,1220.92 725.658,1220.53 726.245,1220.25 726.831,1222.18 727.417,1222.92 728.004,1218.91 728.59,1218.45 729.177,1220.61 729.763,1220.45 730.349,1220.06 730.936,1221.97 731.522,1220.57 732.109,1219.01 732.695,1219.92 733.282,1218.26 733.868,1221.49 734.454,1221.24 735.041,1221.93 735.627,1222.94 736.214,1222.23 736.8,1221.89 737.386,1221.77 737.973,1219.2 738.559,1220.11 739.146,1219.83 739.732,1220.96 740.318,1219.09 740.905,1218.68 741.491,1219.61 742.078,1220.55 742.664,1220.23 743.251,1219.92 743.837,1219.54 744.423,1219.41 745.01,1220.24 745.596,1222.24 746.183,1223 746.769,1221.39 747.355,1219.66 747.942,1216.69 748.528,1217.85 749.115,1218.96 749.701,1218.58 750.288,1217.12 750.874,1216.82 751.46,1216.46 752.047,1215.33 752.633,1214 753.22,1215.15 753.806,1216.47 754.392,1215.26 754.979,1215.24 755.565,1216.29 756.152,1215.04 756.738,1214.94 757.324,1218.51 757.911,1215.75 758.497,1213.25 759.084,1212.07 759.67,1213.32 760.257,1211.85 760.843,1211.9 761.429,1212.86 762.016,1211.68 762.602,1209.56 763.189,1209.77 763.775,1211.13 764.361,1208.65 764.948,1209.81 765.534,1210.04 766.121,1212.41 766.707,1211.32 767.293,1211.32 767.88,1210.26 768.466,1212.59 769.053,1213.66 769.639,1214.84 770.226,1215.81 770.812,1214.48 771.398,1214.16 771.985,1214.22 772.571,1212.88 773.158,1212.54 773.744,1212.45 774.33,1215.18 774.917,1216.33 775.503,1216.13 776.09,1214.59 776.676,1213.29 777.262,1215.46 777.849,1216.63 778.435,1215.23 779.022,1212.72 779.608,1212.78 780.195,1215.16 780.781,1213.93 781.367,1212.54 781.954,1211.37 782.54,1212.94 783.127,1210.59 783.713,1213.13 784.299,1208.16 784.886,1210.8 785.472,1211.02 786.059,1211.24 786.645,1212.5 787.232,1212.71 787.818,1212.25 788.404,1212.32 788.991,1212.52 789.577,1211.36 790.164,1210.24 790.75,1210.53 791.336,1209.49 791.923,1209.7 792.509,1212.47 793.096,1212.35 793.682,1211.09 794.268,1211.3 794.855,1211.47 795.441,1209.05 796.028,1212.91 796.614,1214.01 797.201,1217.45 797.787,1214.9 798.373,1214.84 798.96,1216.04 799.546,1215.76 800.133,1217.83 800.719,1216.32 801.305,1213.75 801.892,1217.07 802.478,1215.47 803.065,1214.15 803.651,1212.91 804.237,1207.96 804.824,1208.15 805.41,1207.15 805.997,1207.65 806.583,1208.99 807.17,1209.24 807.756,1208.18 808.342,1210.84 808.929,1210.83 809.515,1210.86 810.102,1212.01 810.688,1212.04 811.274,1214.75 811.861,1214.73 812.447,1214.41 813.034,1216.75 813.62,1215.32 814.206,1215.15 814.793,1215.1 815.379,1213.65 815.966,1214.9 816.552,1213.52 817.139,1214.78 817.725,1213.2 818.311,1213.14 818.898,1211.82 819.484,1211.87 820.071,1212.42 820.657,1212.41 821.243,1212.26 821.83,1209.91 822.416,1212.31 823.003,1210.07 823.589,1210.49 824.175,1210.69 824.762,1209.93 825.348,1211.49 825.935,1212.7 826.521,1211.3 827.108,1210.21 827.694,1210.38 828.28,1210.62 828.867,1212.28 829.453,1214.85 830.04,1213.51 830.626,1214.67 831.212,1210.75 831.799,1212.02 832.385,1210.77 832.972,1212.05 833.558,1212.08 834.145,1213.3 834.731,1214.41 835.317,1216.68 835.904,1214 836.49,1213.92 837.077,1214.75 837.663,1215.83 838.249,1219.02 838.836,1216.15 839.422,1218.41 840.009,1219.61 840.595,1216.99 841.181,1217.79 841.768,1216.35 842.354,1213.84 842.941,1212.68 843.527,1212.43 844.114,1209.98 844.7,1210.05 845.286,1210.48 845.873,1211.72 846.459,1211.88 847.046,1212.81 847.632,1212.91 848.218,1214.03 848.805,1211.52 849.391,1213.02 849.978,1210.53 850.564,1210.47 851.15,1209.51 851.737,1209.61 852.323,1208.76 852.91,1208.84 853.496,1208.94 854.083,1212.79 854.669,1212.75 855.255,1211.97 855.842,1215.54 856.428,1214.16 857.015,1215.23 857.601,1214.94 858.187,1214.75 858.774,1215.85 859.36,1214.54 859.947,1214.12 860.533,1212.58 861.119,1211.3 861.706,1211.35 862.292,1210.13 862.879,1210.21 863.465,1211.65 864.052,1211.53 864.638,1211.53 865.224,1211.55 865.811,1210.36 866.397,1208.96 866.984,1208.92 867.57,1209.04 868.156,1209.15 868.743,1210.37 869.329,1210.41 869.916,1209.35 870.502,1209.3 871.089,1210.53 871.675,1209.31 872.261,1209.16 872.848,1208.05 873.434,1209.47 874.021,1211.91 874.607,1210.66 875.193,1209.82 875.78,1211.18 876.366,1211.26 876.953,1211.51 877.539,1210.48 878.125,1210.53 878.712,1211.92 879.298,1212.93 879.885,1211.75 880.471,1210.3 881.058,1210.11 881.644,1210.12 882.23,1211.51 882.817,1209.05 883.403,1207.91 883.99,1209.31 884.576,1204.83 885.162,1205.18 885.749,1205.42 886.335,1207.3 886.922,1206.39 887.508,1207.9 888.094,1208.13 888.681,1210.87 889.267,1211.86 889.854,1211.84 890.44,1212.05 891.027,1210.67 891.613,1212.01 892.199,1210.82 892.786,1212.02 893.372,1210.94 893.959,1211.97 894.545,1213.14 895.131,1213.11 895.718,1214.25 896.304,1215.23 896.891,1216.07 897.477,1215.48 898.063,1213 898.65,1212.92 899.236,1213.97 899.823,1213.87 900.409,1212.56 900.996,1212.24 901.582,1210.91 902.168,1213.34 902.755,1210.82 903.341,1210.9 903.928,1210.63 904.514,1209.61 905.1,1210.97 905.687,1210.93 906.273,1210.9 906.86,1208.41 907.446,1210.11 908.032,1211.47 908.619,1212.92 909.205,1212.57 909.792,1213.43 910.378,1215.78 910.965,1218.85 911.551,1217.45 912.137,1215.91 912.724,1213.35 913.31,1214.28 913.897,1215.39 914.483,1215.03 915.069,1214.91 915.656,1213.6 916.242,1214.69 916.829,1214.55 917.415,1220.21 918.002,1221.15 918.588,1222.08 919.174,1219.19 919.761,1220.03 920.347,1220.59 920.934,1218.53 921.52,1221.32 922.106,1220.78 922.693,1217.96 923.279,1219.82 923.866,1219.43 924.452,1216.84 925.038,1215.45 925.625,1213.02 926.211,1212.65 926.798,1212.52 927.384,1213.54 927.971,1213.62 928.557,1215.84 929.143,1215.46 929.73,1211.45 930.316,1210.24 930.903,1209.09 931.489,1210.31 932.075,1210.1 932.662,1211.46 933.248,1212.76 933.835,1212.84 934.421,1211.45 935.007,1207.67 935.594,1206.61 936.18,1208.16 936.767,1209.69 937.353,1208.34 937.94,1207.37 938.526,1207.53 939.112,1206.45 939.699,1204.17 940.285,1204.54 940.872,1206.07 941.458,1206.41 942.044,1207.94 942.631,1206.75 943.217,1205.85 943.804,1205.93 944.39,1206.27 944.976,1206.55 945.563,1207.78 946.149,1209.25 946.736,1210.59 947.322,1211.52 947.909,1211.22 948.495,1209.8 949.081,1211.03 949.668,1209.65 950.254,1208.47 950.841,1209.69 951.427,1209.84 952.013,1206.2 952.6,1206.14 953.186,1207.53 953.773,1205.17 954.359,1205.42 954.945,1205.91 955.532,1208.59 956.118,1209.79 956.705,1208.7 957.291,1211.31 957.878,1212.38 958.464,1212.14 959.05,1215.53 959.637,1216.62 960.223,1217.64 960.81,1214.86 961.396,1215.85 961.982,1214.56 962.569,1212.92 963.155,1212.68 963.742,1217.39 964.328,1217.16 964.915,1215.65 965.501,1216.73 966.087,1214.05 966.674,1216.17 967.26,1215.86 967.847,1214.6 968.433,1214.36 969.019,1211.82 969.606,1210.39 970.192,1210.26 970.779,1210.41 971.365,1211.61 971.951,1213.92 972.538,1213.69 973.124,1212.51 973.711,1211.35 974.297,1212.46 974.884,1212.41 975.47,1215.93 976.056,1218.93 976.643,1219.72 977.229,1217.96 977.816,1217.5 978.402,1219.47 978.988,1219.04 979.575,1221.09 980.161,1224 980.748,1222.21 981.334,1219.12 981.92,1218.54 982.507,1216.98 983.093,1216.74 983.68,1215.19 984.266,1212.66 984.853,1211.4 985.439,1212.47 986.025,1214.46 986.612,1213.1 987.198,1217.82 987.785,1217.24 988.371,1215.75 988.957,1217.84 989.544,1218.66 990.13,1216.96 990.717,1215.46 991.303,1216.42 991.889,1217.02 992.476,1216.72 993.062,1213.97 993.649,1214.89 994.235,1215.74 994.822,1214.15 995.408,1216.66 995.994,1216.3 996.581,1212.43 997.167,1207.43 997.754,1207.62 998.34,1203.05 998.926,1200.9 999.513,1201.22 1000.1,1201.55 1000.69,1202.98 1001.27,1203.23 1001.86,1204.86 1002.44,1204.03 1003.03,1201.79 1003.62,1203.55 1004.2,1202.67 1004.79,1203.16 1005.38,1206.16 1005.96,1205.1 1006.55,1205.12 1007.14,1206.65 1007.72,1208.2 1008.31,1208.31 1008.9,1208.28 1009.48,1211.02 1010.07,1209.91 1010.65,1212.43 1011.24,1213.88 1011.83,1213.95 1012.41,1212.77 1013,1212.57 1013.59,1212.34 1014.17,1209.64 1014.76,1208.59 1015.35,1209.96 1015.93,1208.83 1016.52,1209.09 1017.11,1208.18 1017.69,1207.09 1018.28,1206.08 1018.86,1202.69 1019.45,1204.21 1020.04,1204.93 1020.62,1203.01 1021.21,1203.44 1021.8,1203.76 1022.38,1203 1022.97,1204.39 1023.56,1207.32 1024.14,1207.41 1024.73,1208.73 1025.32,1207.45 1025.9,1206.67 1026.49,1209.21 1027.07,1211.96 1027.66,1214.13 1028.25,1213.88 1028.83,1210.12 1029.42,1209.24 1030.01,1210.66 1030.59,1212.9 1031.18,1212.66 1031.77,1212.33 1032.35,1214.61 1032.94,1212.94 1033.52,1211.81 1034.11,1213.13 1034.7,1211.56 1035.28,1209.22 1035.87,1210.32 1036.46,1210.4 1037.04,1213.06 1037.63,1215.23 1038.22,1216.41 1038.8,1214.9 1039.39,1214.83 1039.98,1217.96 1040.56,1216.32 1041.15,1217.26 1041.73,1218.11 1042.32,1218.79 1042.91,1217.19 1043.49,1215.58 1044.08,1216.42 1044.67,1216.12 1045.25,1213.16 1045.84,1217.71 1046.43,1214.71 1047.01,1215.72 1047.6,1216.74 1048.19,1217.52 1048.77,1216.97 1049.36,1216.5 1049.94,1216.43 1050.53,1214.91 1051.12,1214.76 1051.7,1214.46 1052.29,1214.24 1052.88,1211.67 1053.46,1211.7 1054.05,1212.94 1054.64,1209.4 1055.22,1209.46 1055.81,1207.24 1056.39,1204.95 1056.98,1205.28 1057.57,1205.74 1058.15,1206.16 1058.74,1207.52 1059.33,1207.78 1059.91,1210.25 1060.5,1210.1 1061.09,1207.66 1061.67,1206.63 1062.26,1207.83 1062.85,1207.83 1063.43,1206.72 1064.02,1207.77 1064.6,1208.92 1065.19,1209.05 1065.78,1211.57 1066.36,1212.26 1066.95,1212.15 1067.54,1206.1 1068.12,1206.29 1068.71,1206.34 1069.3,1206.55 1069.88,1205.56 1070.47,1204.82 1071.06,1205.04 1071.64,1204.19 1072.23,1209.28 1072.81,1210.98 1073.4,1211.06 1073.99,1209.75 1074.57,1211.01 1075.16,1208.77 1075.75,1210.09 1076.33,1211.37 1076.92,1211.23 1077.51,1207.41 1078.09,1207.45 1078.68,1207.58 1079.26,1207.77 1079.85,1206.76 1080.44,1206.93 1081.02,1204.54 1081.61,1205.9 1082.2,1207.27 1082.78,1206.15 1083.37,1205.17 1083.96,1205.15 1084.54,1205.49 1085.13,1208.02 1085.72,1206.94 1086.3,1207.13 1086.89,1206.32 1087.47,1205.4 1088.06,1206.73 1088.65,1207.83 1089.23,1207.69 1089.82,1208.89 1090.41,1207.71 1090.99,1207.93 1091.58,1208.08 1092.17,1208.13 1092.75,1206.15 1093.34,1207.58 1093.93,1209.03 1094.51,1210.24 1095.1,1210.31 1095.68,1210.29 1096.27,1211.53 1096.86,1212.96 1097.44,1210.93 1098.03,1208.65 1098.62,1209.99 1099.2,1210.02 1099.79,1211.41 1100.38,1211.63 1100.96,1209.18 1101.55,1210.44 1102.14,1210.78 1102.72,1209.44 1103.31,1206.99 1103.89,1208.19 1104.48,1207.15 1105.07,1204.92 1105.65,1205.03 1106.24,1205.34 1106.83,1204.38 1107.41,1202.35 1108,1203.96 1108.59,1204.24 1109.17,1206.74 1109.76,1206.97 1110.34,1208.26 1110.93,1208.65 1111.52,1209.03 1112.1,1211.29 1112.69,1211.45 1113.28,1210.04 1113.86,1210.28 1114.45,1209.21 1115.04,1210.51 1115.62,1209.23 1116.21,1207.99 1116.8,1208.16 1117.38,1208.35 1117.97,1207.35 1118.55,1207.76 1119.14,1209.22 1119.73,1209.36 1120.31,1207.14 1120.9,1206.28 1121.49,1203.24 1122.07,1203.81 1122.66,1205.45 1123.25,1206.04 1123.83,1209.03 1124.42,1208.97 1125.01,1210.56 1125.59,1208.21 1126.18,1208.21 1126.76,1208.22 1127.35,1208.44 1127.94,1209.73 1128.52,1209.96 1129.11,1211.32 1129.7,1209.01 1130.28,1208.85 1130.87,1208.87 1131.46,1209.05 1132.04,1207.97 1132.63,1208.28 1133.21,1210.88 1133.8,1207.24 1134.39,1208.74 1134.97,1208.91 1135.56,1205.23 1136.15,1204.41 1136.73,1204.78 1137.32,1207.25 1137.91,1207.43 1138.49,1205.23 1139.08,1205.6 1139.67,1207.05 1140.25,1209.41 1140.84,1211.67 1141.42,1212.55 1142.01,1211.23 1142.6,1211.17 1143.18,1211.01 1143.77,1212.09 1144.36,1213.23 1144.94,1214.1 1145.53,1215.22 1146.12,1215.21 1146.7,1214.79 1147.29,1213.26 1147.88,1211.92 1148.46,1210.39 1149.05,1209.38 1149.63,1208.21 1150.22,1205.9 1150.81,1207.33 1151.39,1208.44 1151.98,1209.89 1152.57,1212.3 1153.15,1212.22 1153.74,1210.87 1154.33,1209.53 1154.91,1207.36 1155.5,1207.31 1156.09,1206.25 1156.67,1205.27 1157.26,1206.62 1157.84,1208.06 1158.43,1208.14 1159.02,1208.46 1159.6,1208.55 1160.19,1208.71 1160.78,1208.66 1161.36,1209 1161.95,1208.79 1162.54,1208.73 1163.12,1207.65 1163.71,1208.87 1164.29,1210.25 1164.88,1211.51 1165.47,1210.27 1166.05,1211.6 1166.64,1211.21 1167.23,1209.84 1167.81,1209.59 1168.4,1210.89 1168.99,1209.49 1169.57,1209.27 1170.16,1209.2 1170.75,1210.55 1171.33,1209.22 1171.92,1209.36 1172.5,1210.55 1173.09,1210.49 1173.68,1206.92 1174.26,1205.71 1174.85,1206.16 1175.44,1207.94 1176.02,1208.28 1176.61,1210.5 1177.2,1212.95 1177.78,1215.34 1178.37,1214.02 1178.96,1215 1179.54,1215.87 1180.13,1218.17 1180.71,1220.27 1181.3,1219.74 1181.89,1220.53 1182.47,1220.22 1183.06,1218.11 1183.65,1217.61 1184.23,1217.4 1184.82,1217.08 1185.41,1216.64 1185.99,1216.23 1186.58,1212.2 1187.16,1215.67 1187.75,1212.76 1188.34,1212.79 1188.92,1210.4 1189.51,1209.05 1190.1,1207.97 1190.68,1210.7 1191.27,1209.44 1191.86,1210.89 1192.44,1208.62 1193.03,1207.6 1193.62,1206.13 1194.2,1206.15 1194.79,1207.68 1195.37,1206.59 1195.96,1208.06 1196.55,1208.08 1197.13,1208.34 1197.72,1206.05 1198.31,1204.95 1198.89,1205.22 1199.48,1204.61 1200.07,1204.71 1200.65,1203.92 1201.24,1204.6 1201.83,1204.68 1202.41,1203.58 1203,1202.35 1203.58,1201.38 1204.17,1201.72 1204.76,1202.05 1205.34,1202.47 1205.93,1201.79 1206.52,1200.97 1207.1,1201.45 1207.69,1204.42 1208.28,1204.84 1208.86,1205.14 1209.45,1206.63 1210.03,1210.77 1210.62,1209.64 1211.21,1206.06 1211.79,1207.39 1212.38,1207.89 1212.97,1210.55 1213.55,1210.58 1214.14,1209.35 1214.73,1207.09 1215.31,1209.76 1215.9,1210.93 1216.49,1210.58 1217.07,1211.9 1217.66,1211.86 1218.24,1211.89 1218.83,1213.91 1219.42,1211.27 1220,1212.12 1220.59,1213.21 1221.18,1213.03 1221.76,1211.52 1222.35,1212.89 1222.94,1215.17 1223.52,1211.28 1224.11,1212.71 1224.7,1211.43 1225.28,1211.09 1225.87,1211.32 1226.45,1209.78 1227.04,1210.73 1227.63,1210.67 1228.21,1211.66 1228.8,1213.97 1229.39,1214.81 1229.97,1214.57 1230.56,1215.23 1231.15,1213.58 1231.73,1214.52 1232.32,1214.36 1232.91,1214.27 1233.49,1216.51 1234.08,1214.95 1234.66,1214.61 1235.25,1214.37 1235.84,1214.34 1236.42,1212.76 1237.01,1212.59 1237.6,1212.26 1238.18,1211.94 1238.77,1212.87 1239.36,1210.11 1239.94,1207.81 1240.53,1207.91 1241.11,1205.88 1241.7,1203.96 1242.29,1205.4 1242.87,1205.86 1243.46,1206.17 1244.05,1206.66 1244.63,1205.62 1245.22,1205.68 1245.81,1205.91 1246.39,1207.31 1246.98,1207.54 1247.57,1206.4 1248.15,1207.79 1248.74,1208.85 1249.32,1208.87 1249.91,1208.87 1250.5,1207.6 1251.08,1207.51 1251.67,1208.77 1252.26,1209.79 1252.84,1213.31 1253.43,1213.2 1254.02,1216.7 1254.6,1217.34 1255.19,1215.34 1255.78,1214.81 1256.36,1215.72 1256.95,1214.14 1257.53,1213.64 1258.12,1213.58 1258.71,1211.14 1259.29,1212.25 1259.88,1214.18 1260.47,1210.1 1261.05,1212.07 1261.64,1210.81 1262.23,1209.67 1262.81,1214.37 1263.4,1214.21 1263.98,1215.25 1264.57,1218.3 1265.16,1216.77 1265.74,1217.54 1266.33,1215.82 1266.92,1214.45 1267.5,1212.7 1268.09,1210.4 1268.68,1211.48 1269.26,1209.06 1269.85,1208.86 1270.44,1211.29 1271.02,1212.61 1271.61,1212.51 1272.19,1207.32 1272.78,1206.33 1273.37,1206.64 1273.95,1208.98 1274.54,1208.96 1275.13,1207.67 1275.71,1213.76 1276.3,1212.47 1276.89,1210.96 1277.47,1212.13 1278.06,1211.12 1278.65,1209.88 1279.23,1208.32 1279.82,1210.54 1280.4,1208.25 1280.99,1208.24 1281.58,1206.04 1282.16,1206.38 1282.75,1209.18 1283.34,1207.91 1283.92,1212.77 1284.51,1213.8 1285.1,1210.91 1285.68,1209.98 1286.27,1209.95 1286.86,1208.66 1287.44,1208.78 1288.03,1211.11 1288.61,1209.51 1289.2,1209.46 1289.79,1210.76 1290.37,1210.8 1290.96,1213.28 1291.55,1212.01 1292.13,1211.53 1292.72,1212.52 1293.31,1211.19 1293.89,1211.09 1294.48,1213.48 1295.06,1216.8 1295.65,1217.73 1296.24,1218.51 1296.82,1217.04 1297.41,1216.66 1298,1213.87 1298.58,1213.68 1299.17,1212.16 1299.76,1211.96 1300.34,1210.78 1300.93,1210.62 1301.52,1208.37 1302.1,1207.34 1302.69,1206.21 1303.27,1208.79 1303.86,1208.98 1304.45,1211.46 1305.03,1208.9 1305.62,1207.55 1306.21,1209.92 1306.79,1207.18 1307.38,1207.45 1307.97,1208.46 1308.55,1210.94 1309.14,1209.78 1309.73,1207.13 1310.31,1207.24 1310.9,1203.89 1311.48,1205.31 1312.07,1205.47 1312.66,1206.71 1313.24,1206.54 1313.83,1208.09 1314.42,1209.31 1315,1209.49 1315.59,1210.85 1316.18,1213.16 1316.76,1211.83 1317.35,1210.62 1317.93,1210.67 1318.52,1210.74 1319.11,1211.76 1319.69,1210.36 1320.28,1212.98 1320.87,1211.82 1321.45,1211.68 1322.04,1210.37 1322.63,1209.38 1323.21,1209.41 1323.8,1209.55 1324.39,1212.02 1324.97,1210.8 1325.56,1209.82 1326.14,1210.97 1326.73,1208.57 1327.32,1206.04 1327.9,1205.13 1328.49,1205.41 1329.08,1208.15 1329.66,1205.91 1330.25,1206.07 1330.84,1206.53 1331.42,1206.61 1332.01,1206.69 1332.6,1206.69 1333.18,1207.82 1333.77,1209.17 1334.35,1205.65 1334.94,1205.61 1335.53,1204.55 1336.11,1205.03 1336.7,1204.13 1337.29,1206.68 1337.87,1206.81 1338.46,1210.86 1339.05,1212.13 1339.63,1212.12 1340.22,1213.28 1340.8,1213.05 1341.39,1212.87 1341.98,1212.7 1342.56,1212.31 1343.15,1212.24 1343.74,1212.26 1344.32,1211.11 1344.91,1210.03 1345.5,1210.11 1346.08,1210.15 1346.67,1211.38 1347.26,1209.91 1347.84,1210.91 1348.43,1209.73 1349.01,1212.08 1349.6,1211.99 1350.19,1211.77 1350.77,1211.53 1351.36,1211.4 1351.95,1211.52 1352.53,1210.51 1353.12,1209.01 1353.71,1211.6 1354.29,1212.58 1354.88,1212.49 1355.47,1216.08 1356.05,1214.54 1356.64,1214.28 1357.22,1214.16 1357.81,1213.82 1358.4,1213.77 1358.98,1212.35 1359.57,1214.61 1360.16,1210.84 1360.74,1210.84 1361.33,1211.85 1361.92,1214.21 1362.5,1211.91 1363.09,1209.33 1363.68,1210.67 1364.26,1209.41 1364.85,1208.26 1365.43,1208.55 1366.02,1211.04 1366.61,1211.18 1367.19,1211.19 1367.78,1211.15 1368.37,1205.25 1368.95,1204.61 1369.54,1208.52 1370.13,1211.09 1370.71,1212.04 1371.3,1211.88 1371.88,1211.8 1372.47,1213.14 1373.06,1214.04 1373.64,1215.88 1374.23,1213.29 1374.82,1210.72 1375.4,1209.65 1375.99,1209.4 1376.58,1210.62 1377.16,1212.85 1377.75,1212.72 1378.34,1212.7 1378.92,1213.7 1379.51,1213.35 1380.09,1210.73 1380.68,1210.58 1381.27,1209.06 1381.85,1209.16 1382.44,1209.22 1383.03,1208.17 1383.61,1208.49 1384.2,1207.77 1384.79,1209.02 1385.37,1207.72 1385.96,1206.42 1386.55,1206.93 1387.13,1208.38 1387.72,1206.38 1388.3,1207.94 1388.89,1208.09 1389.48,1209.39 1390.06,1204.67 1390.65,1207.21 1391.24,1206.02 1391.82,1208.8 1392.41,1207.55 1393,1205.4 1393.58,1203.22 1394.17,1201.3 1394.75,1201.72 1395.34,1202.16 1395.93,1203.8 1396.51,1204.23 1397.1,1205.77 1397.69,1207.11 1398.27,1208.47 1398.86,1206.06 1399.45,1207.14 1400.03,1204.72 1400.62,1204.98 1401.21,1205.42 1401.79,1205.71 1402.38,1203.4 1402.96,1202.66 1403.55,1205.6 1404.14,1205.76 1404.72,1207.31 1405.31,1206.32 1405.9,1206.68 1406.48,1206.64 1407.07,1209.33 1407.66,1210.5 1408.24,1210.51 1408.83,1211.66 1409.42,1209.42 1410,1208.37 1410.59,1209.81 1411.17,1208.58 1411.76,1207.69 1412.35,1209.21 1412.93,1210.49 1413.52,1210.6 1414.11,1210.69 1414.69,1208.36 1415.28,1209.53 1415.87,1209.75 1416.45,1206.18 1417.04,1208.88 1417.63,1208.8 1418.21,1205.53 1418.8,1207.22 1419.38,1207.32 1419.97,1208.71 1420.56,1209.85 1421.14,1212.2 1421.73,1215.57 1422.32,1215.52 1422.9,1217.36 1423.49,1216.03 1424.08,1214.55 1424.66,1214.2 1425.25,1210.26 1425.83,1206.84 1426.42,1208.19 1427.01,1208.31 1427.59,1208.25 1428.18,1211.86 1428.77,1210.51 1429.35,1209.33 1429.94,1210.49 1430.53,1211.72 1431.11,1213.09 1431.7,1213 1432.29,1214.35 1432.87,1214.12 1433.46,1215.06 1434.04,1215.71 1434.63,1214.48 1435.22,1214.33 1435.8,1215.37 1436.39,1215 1436.98,1218.44 1437.56,1216.74 1438.15,1216.18 1438.74,1214.67 1439.32,1214.43 1439.91,1213.93 1440.5,1216.21 1441.08,1214.43 1441.67,1215.7 1442.25,1217.77 1442.84,1215.23 1443.43,1213.76 1444.01,1210.96 1444.6,1215.64 1445.19,1213.98 1445.77,1210.26 1446.36,1211.54 1446.95,1209 1447.53,1209 1448.12,1208.99 1448.7,1211.41 1449.29,1212.54 1449.88,1211.14 1450.46,1210.97 1451.05,1209.48 1451.64,1209.35 1452.22,1209.33 1452.81,1208.34 1453.4,1207.23 1453.98,1205.08 1454.57,1203.04 1455.16,1201.27 1455.74,1203.23 1456.33,1203.26 1456.91,1204.89 1457.5,1206.49 1458.09,1207.91 1458.67,1208.21 1459.26,1206.89 1459.85,1205.42 1460.43,1205.39 1461.02,1206.86 1461.61,1207 1462.19,1207.27 1462.78,1208.43 1463.37,1208.27 1463.95,1209.56 1464.54,1208.43 1465.12,1210.97 1465.71,1213.28 1466.3,1216.84 1466.88,1218.88 1467.47,1220.69 1468.06,1218.95 1468.64,1217.2 1469.23,1215.51 1469.82,1216.54 1470.4,1216.6 1470.99,1215.32 1471.57,1212.79 1472.16,1212.61 1472.75,1208.94 1473.33,1209.35 1473.92,1209.35 1474.51,1208.3 1475.09,1209.41 1475.68,1209.3 1476.27,1210.42 1476.85,1210.28 1477.44,1211.4 1478.03,1210.05 1478.61,1210.88 1479.2,1210.8 1479.78,1211.99 1480.37,1210.65 1480.96,1210.58 1481.54,1210.59 1482.13,1211.55 1482.72,1212.61 1483.3,1214.62 1483.89,1214.27 1484.48,1214.09 1485.06,1216.39 1485.65,1212.63 1486.24,1214.85 1486.82,1217.04 1487.41,1217.01 1487.99,1216.61 1488.58,1216.26 1489.17,1213.46 1489.75,1214.45 1490.34,1212.23 1490.93,1212.03 1491.51,1213.3 1492.1,1215.31 1492.69,1213.77 1493.27,1209.9 1493.86,1212.27 1494.45,1212.13 1495.03,1205.85 1495.62,1207.24 1496.2,1206.31 1496.79,1206.21 1497.38,1206.25 1497.96,1204.22 1498.55,1201.9 1499.14,1201.18 1499.72,1201.67 1500.31,1200.9 1500.9,1204.12 1501.48,1203.34 1502.07,1203.65 1502.65,1204.95 1503.24,1206.15 1503.83,1205.2 1504.41,1206.49 1505,1206.32 1505.59,1207.65 1506.17,1207.64 1506.76,1207.67 1507.35,1207.71 1507.93,1207.82 1508.52,1205.55 1509.11,1205.9 1509.69,1207.4 1510.28,1209.85 1510.86,1208.72 1511.45,1206.33 1512.04,1206.81 1512.62,1208.29 1513.21,1208.47 1513.8,1210.06 1514.38,1211.14 1514.97,1212.34 1515.56,1212.25 1516.14,1210.93 1516.73,1209.46 1517.32,1209.4 1517.9,1209.33 1518.49,1209.4 1519.07,1210.39 1519.66,1210.18 1520.25,1210.26 1520.83,1209.19 1521.42,1207.86 1522.01,1208.08 1522.59,1207.07 1523.18,1208.47 1523.77,1207.25 1524.35,1204.99 1524.94,1205.41 1525.52,1207.95 1526.11,1206.7 1526.7,1207.11 1527.28,1207.14 1527.87,1208.41 1528.46,1212.12 1529.04,1211.69 1529.63,1209.28 1530.22,1206.68 1530.8,1205.51 1531.39,1204.43 1531.98,1203.68 1532.56,1204.13 1533.15,1203.28 1533.73,1202.49 1534.32,1203.07 1534.91,1200.9 1535.49,1200.22 1536.08,1202.07 1536.67,1201.35 1537.25,1200.74 1537.84,1199.79 1538.43,1199.18 1539.01,1202.15 1539.6,1202.56 1540.19,1204.31 1540.77,1206.98 1541.36,1208.38 1541.94,1209.85 1542.53,1211.18 1543.12,1212.54 1543.7,1212.6 1544.29,1212.66 1544.88,1212.58 1545.46,1212.51 1546.05,1209.85 1546.64,1209.99 1547.22,1211.18 1547.81,1211.1 1548.4,1209.99 1548.98,1208.68 1549.57,1207.44 1550.15,1210 1550.74,1212.35 1551.33,1212.05 1551.91,1211.78 1552.5,1211.75 1553.09,1212.73 1553.67,1211.08 1554.26,1208.62 1554.85,1206.19 1555.43,1206.49 1556.02,1205.33 1556.6,1205.25 1557.19,1205.42 1557.78,1204.37 1558.36,1205.88 1558.95,1206.21 1559.54,1204.17 1560.12,1205.77 1560.71,1208.33 1561.3,1204.74 1561.88,1206.4 1562.47,1206.71 1563.06,1206.86 1563.64,1207 1564.23,1208.37 1564.81,1208.34 1565.4,1210.66 1565.99,1213.24 1566.57,1211.89 1567.16,1212.9 1567.75,1213.78 1568.33,1213.53 1568.92,1210.88 1569.51,1211.91 1570.09,1210.59 1570.68,1212.86 1571.27,1213.89 1571.85,1214.75 1572.44,1214.54 1573.02,1211.8 1573.61,1211.53 1574.2,1211.46 1574.78,1211.54 1575.37,1211.39 1575.96,1209.01 1576.54,1208.03 1577.13,1208.05 1577.72,1208.16 1578.3,1205.84 1578.89,1207.34 1579.47,1206.21 1580.06,1205.18 1580.65,1206.61 1581.23,1207 1581.82,1207.42 1582.41,1211.52 1582.99,1211.55 1583.58,1211.67 1584.17,1211.4 1584.75,1210.04 1585.34,1210.02 1585.93,1211.32 1586.51,1210.15 1587.1,1212.34 1587.68,1213.35 1588.27,1215.59 1588.86,1215.3 1589.44,1213.7 1590.03,1213.52 1590.62,1212.02 1591.2,1212.89 1591.79,1212.8 1592.38,1212.6 1592.96,1213.24 1593.55,1211.89 1594.14,1209.46 1594.72,1210.8 1595.31,1214.55 1595.89,1215.2 1596.48,1213.92 1597.07,1214.92 1597.65,1212.42 1598.24,1209.98 1598.83,1211.2 1599.41,1210.13 1600,1212.62 1600.59,1210.01 1601.17,1211.47 1601.76,1211.55 1602.34,1212.59 1602.93,1211.36 1603.52,1209.85 1604.1,1207.73 1604.69,1208.17 1605.28,1206.13 1605.86,1207.64 1606.45,1211.12 1607.04,1211.06 1607.62,1211.12 1608.21,1210.85 1608.8,1211.82 1609.38,1210.39 1609.97,1210.33 1610.55,1211.25 1611.14,1211.16 1611.73,1212.18 1612.31,1210.79 1612.9,1207.21 1613.49,1209.84 1614.07,1209.94 1614.66,1210.82 1615.25,1209.71 1615.83,1210.54 1616.42,1211.59 1617.01,1211.66 1617.59,1212.93 1618.18,1211.65 1618.76,1211.46 1619.35,1212.67 1619.94,1211.45 1620.52,1213.36 1621.11,1213.22 1621.7,1214.39 1622.28,1214.17 1622.87,1214.24 1623.46,1213.07 1624.04,1212.87 1624.63,1211.37 1625.22,1211 1625.8,1213.25 1626.39,1214.1 1626.97,1212.98 1627.56,1209.08 1628.15,1209 1628.73,1210.27 1629.32,1209.17 1629.91,1205.73 1630.49,1204.78 1631.08,1207.28 1631.67,1205.04 1632.25,1207.89 1632.84,1208.4 1633.42,1208.7 1634.01,1208.85 1634.6,1207.95 1635.18,1210.12 1635.77,1209.91 1636.36,1207.48 1636.94,1206.39 1637.53,1208.03 1638.12,1206.93 1638.7,1208.24 1639.29,1210.37 1639.88,1209.14 1640.46,1210.42 1641.05,1209.16 1641.63,1207.02 1642.22,1204.83 1642.81,1204.02 1643.39,1204.36 1643.98,1206.09 1644.57,1208.82 1645.15,1207.6 1645.74,1207.47 1646.33,1207.65 1646.91,1206.61 1647.5,1207.94 1648.09,1206.61 1648.67,1209.25 1649.26,1210.75 1649.84,1211.82 1650.43,1212.05 1651.02,1215.85 1651.6,1214.25 1652.19,1210.48 1652.78,1211.58 1653.36,1212.41 1653.95,1212.3 1654.54,1211.07 1655.12,1209.72 1655.71,1210.03 1656.29,1208.74 1656.88,1210.15 1657.47,1212.34 1658.05,1213.25 1658.64,1214.53 1659.23,1213.25 1659.81,1216.53 1660.4,1213.72 1660.99,1212.41 1661.57,1212.1 1662.16,1210.76 1662.75,1208.21 1663.33,1206.96 1663.92,1208.51 1664.5,1208.63 1665.09,1212.25 1665.68,1214.64 1666.26,1215.69 1666.85,1215.24 1667.44,1214.85 1668.02,1213.41 1668.61,1212.1 1669.2,1210.64 1669.78,1213.02 1670.37,1213.84 1670.96,1212.34 1671.54,1212.02 1672.13,1211.83 1672.71,1211.66 1673.3,1209.06 1673.89,1210.33 1674.47,1207.94 1675.06,1207.9 1675.65,1206.65 1676.23,1206.78 1676.82,1209.5 1677.41,1210.75 1677.99,1209.58 1678.58,1208.39 1679.17,1209.54 1679.75,1209.33 1680.34,1210.69 1680.92,1211.91 1681.51,1211.68 1682.1,1205.77 1682.68,1204.84 1683.27,1206.25 1683.86,1205.45 1684.44,1205.13 1685.03,1206.56 1685.62,1206.6 1686.2,1206.77 1686.79,1205.81 1687.37,1206.16 1687.96,1207.59 1688.55,1209.18 1689.13,1208.16 1689.72,1206.87 1690.31,1209.41 1690.89,1211.9 1691.48,1210.75 1692.07,1212.19 1692.65,1213.37 1693.24,1213.44 1693.83,1213.46 1694.41,1213.46 1695,1212.14 1695.58,1211.98 1696.17,1210.82 1696.76,1210.8 1697.34,1210.77 1697.93,1212.9 1698.52,1214.98 1699.1,1213.56 1699.69,1214.42 1700.28,1211.78 1700.86,1211.51 1701.45,1213.64 1702.04,1213.24 1702.62,1215.4 1703.21,1215.08 1703.79,1212.43 1704.38,1211.13 1704.97,1210.97 1705.55,1210.88 1706.14,1209.53 1706.73,1209.3 1707.31,1207.97 1707.9,1207.11 1708.49,1204.88 1709.07,1204.19 1709.66,1204.44 1710.24,1206.06 1710.83,1206.36 1711.42,1206.52 1712,1207.9 1712.59,1206.92 1713.18,1212.8 1713.76,1213.61 1714.35,1216.92 1714.94,1215.36 1715.52,1215.02 1716.11,1214.45 1716.7,1212.95 1717.28,1211.64 1717.87,1211.52 1718.45,1211.51 1719.04,1210.41 1719.63,1210.24 1720.21,1204.35 1720.8,1205.7 1721.39,1206.07 1721.97,1206.41 1722.56,1208.68 1723.15,1209.79 1723.73,1208.85 1724.32,1208.89 1724.91,1210.18 1725.49,1207.79 1726.08,1206.76 1726.66,1205.55 1727.25,1205.7 1727.84,1203.55 1728.42,1201.6 1729.01,1201.83 1729.6,1202.51 1730.18,1203.09 1730.77,1206.96 1731.36,1207.23 1731.94,1209.81 1732.53,1208.8 1733.11,1207.7 1733.7,1206.65 1734.29,1208.12 1734.87,1207.07 1735.46,1207.32 1736.05,1207.37 1736.63,1207.38 1737.22,1208.71 1737.81,1208.94 1738.39,1210.43 1738.98,1210.36 1739.57,1208.91 1740.15,1209.04 1740.74,1209.4 1741.32,1208.2 1741.91,1209.5 1742.5,1209.5 1743.08,1209.43 1743.67,1211.96 1744.26,1211.79 1744.84,1211.62 1745.43,1210.35 1746.02,1212.95 1746.6,1214.06 1747.19,1216.55 1747.78,1216.15 1748.36,1214.63 1748.95,1213.11 1749.53,1212.92 1750.12,1213.67 1750.71,1208.68 1751.29,1208.79 1751.88,1210.21 1752.47,1210.32 1753.05,1209.03 1753.64,1211.72 1754.23,1212.59 1754.81,1210.97 1755.4,1207.37 1755.99,1207.39 1756.57,1207.49 1757.16,1210.99 1757.74,1209.9 1758.33,1212.44 1758.92,1211.17 1759.5,1209.96 1760.09,1211.12 1760.68,1213.4 1761.26,1213.25 1761.85,1215.71 1762.44,1215.31 1763.02,1216.15 1763.61,1217.3 1764.19,1215.8 1764.78,1215.4 1765.37,1215.15 1765.95,1217.45 1766.54,1217.24 1767.13,1214.29 1767.71,1214.07 1768.3,1212.55 1768.89,1211.35 1769.47,1210.18 1770.06,1208.76 1770.65,1212.45 1771.23,1212.7 1771.82,1210.04 1772.4,1208.95 1772.99,1207.87 1773.58,1207 1774.16,1208.48 1774.75,1211.87 1775.34,1214.27 1775.92,1217.37 1776.51,1219.51 1777.1,1221.62 1777.68,1219.7 1778.27,1219.16 1778.86,1220.83 1779.44,1221.61 1780.03,1220.99 1780.61,1221.82 1781.2,1220.03 1781.79,1218.37 1782.37,1217.74 1782.96,1216.08 1783.55,1214.58 1784.13,1214.31 1784.72,1214.1 1785.31,1210.28 1785.89,1210.19 1786.48,1207.94 1787.06,1207.02 1787.65,1209.57 1788.24,1207.11 1788.82,1203.37 1789.41,1204.89 1790,1207.41 1790.58,1206.06 1791.17,1207.44 1791.76,1207.79 1792.34,1206.68 1792.93,1208.07 1793.52,1208.25 1794.1,1208.45 1794.69,1207.2 1795.27,1206.4 1795.86,1207.86 1796.45,1209.15 1797.03,1207.86 1797.62,1206.8 1798.21,1205.73 1798.79,1207.01 1799.38,1205.86 1799.97,1206.03 1800.55,1208.81 1801.14,1208.54 1801.73,1208.95 1802.31,1208.9 1802.9,1212.31 1803.48,1212.29 1804.07,1209.76 1804.66,1211.06 1805.24,1208.57 1805.83,1207.56 1806.42,1208.92 1807,1208.95 1807.59,1208.74 1808.18,1212.2 1808.76,1213.44 1809.35,1215.76 1809.94,1213.03 1810.52,1210.47 1811.11,1209.14 1811.69,1205.62 1812.28,1207.19 1812.87,1207.39 1813.45,1208.29 1814.04,1209.56 1814.63,1209.73 1815.21,1207.22 1815.8,1207.19 1816.39,1213.42 1816.97,1214.52 1817.56,1214.11 1818.14,1213.74 1818.73,1214.57 1819.32,1215.34 1819.9,1216.27 1820.49,1214.83 1821.08,1212.36 1821.66,1212.18 1822.25,1211.03 1822.84,1209.92 1823.42,1209.97 1824.01,1210.13 1824.6,1210.22 1825.18,1208.74 1825.77,1206.45 1826.35,1205.58 1826.94,1205.96 1827.53,1208.41 1828.11,1208.43 1828.7,1211.01 1829.29,1212.1 1829.87,1210.86 1830.46,1210.97 1831.05,1209.9 1831.63,1209.81 1832.22,1211.95 1832.81,1214.1 1833.39,1216.43 1833.98,1215.9 1834.56,1217.8 1835.15,1215.13 1835.74,1216.03 1836.32,1213.39 1836.91,1211.61 1837.5,1211.5 1838.08,1211.34 1838.67,1211.35 1839.26,1212.54 1839.84,1214.02 1840.43,1215.93 1841.01,1215.74 1841.6,1215.25 1842.19,1213.67 1842.77,1212.15 1843.36,1211.8 1843.95,1214.23 1844.53,1216.58 1845.12,1213.77 1845.71,1212.14 1846.29,1210.68 1846.88,1208.31 1847.47,1208.46 1848.05,1209.64 1848.64,1210.86 1849.22,1209.55 1849.81,1208.65 1850.4,1208.75 1850.98,1207.75 1851.57,1206.66 1852.16,1206.84 1852.74,1208.01 1853.33,1208.24 1853.92,1209.71 1854.5,1209.67 1855.09,1208.41 1855.68,1208.59 1856.26,1206.45 1856.85,1207.06 1857.43,1206.02 1858.02,1206.39 1858.61,1209.27 1859.19,1209.64 1859.78,1209.43 1860.37,1209.58 1860.95,1211.91 1861.54,1209.5 1862.13,1209.36 1862.71,1212.87 1863.3,1213.82 1863.88,1215.99 1864.47,1213.12 1865.06,1211.59 1865.64,1211.53 1866.23,1211.37 1866.82,1207.72 1867.4,1206.43 1867.99,1206.67 1868.58,1206.92 1869.16,1206.86 1869.75,1209.2 1870.34,1207.79 1870.92,1207.97 1871.51,1208.88 1872.09,1208.85 1872.68,1210.17 1873.27,1211.28 1873.85,1210.19 1874.44,1209.01 1875.03,1207.74 1875.61,1206.62 1876.2,1208 1876.79,1211.86 1877.37,1212.67 1877.96,1212.39 1878.55,1213.13 1879.13,1210.8 1879.72,1208.21 1880.3,1207.33 1880.89,1201.42 1881.48,1205.36 1882.06,1206.74 1882.65,1209.44 1883.24,1206.9 1883.82,1205.64 1884.41,1206.08 1885,1207.69 1885.58,1207.69 1886.17,1208.01 1886.76,1205.68 1887.34,1205.91 1887.93,1208.69 1888.51,1208.93 1889.1,1206.32 1889.69,1208.19 1890.27,1208.48 1890.86,1208.47 1891.45,1207.48 1892.03,1207.73 1892.62,1206.66 1893.21,1206.74 1893.79,1207.14 1894.38,1206.19 1894.96,1206.32 1895.55,1205.32 1896.14,1204.3 1896.72,1204.6 1897.31,1207.27 1897.9,1207.46 1898.48,1208.9 1899.07,1209.06 1899.66,1209.05 1900.24,1207.87 1900.83,1208.21 1901.42,1209.78 1902,1210.89 1902.59,1210.92 1903.17,1210.75 1903.76,1207.15 1904.35,1206.2 1904.93,1206.55 1905.52,1206.75 1906.11,1208.3 1906.69,1206.03 1907.28,1203.87 1907.87,1202.96 1908.45,1202.28 1909.04,1200.29 1909.63,1200.77 1910.21,1202.18 1910.8,1204.07 1911.38,1205.47 1911.97,1206.83 1912.56,1205.9 1913.14,1204.97 1913.73,1205.54 1914.32,1205.72 1914.9,1205.99 1915.49,1206.17 1916.08,1203.78 1916.66,1206.47 1917.25,1208.16 1917.83,1209.4 1918.42,1207.91 1919.01,1210.7 1919.59,1209.42 1920.18,1208 1920.77,1208.15 1921.35,1207.05 1921.94,1204.9 1922.53,1207.46 1923.11,1208.92 1923.7,1209.15 1924.29,1207.87 1924.87,1205.61 1925.46,1208.4 1926.04,1210.6 1926.63,1210.44 1927.22,1209.17 1927.8,1209.13 1928.39,1207.98 1928.98,1208.24 1929.56,1209.53 1930.15,1210.59 1930.74,1210.31 1931.32,1210.43 1931.91,1212.69 1932.5,1211.29 1933.08,1212.64 1933.67,1212.64 1934.25,1210.08 1934.84,1210.17 1935.43,1210.32 1936.01,1209.02 1936.6,1210.07 1937.19,1210.14 1937.77,1208 1938.36,1209.08 1938.95,1208 1939.53,1207 1940.12,1208.07 1940.71,1208.2 1941.29,1209.63 1941.88,1210.94 1942.46,1210.93 1943.05,1210.75 1943.64,1211.99 1944.22,1211.94 1944.81,1211.88 1945.4,1212.9 1945.98,1215.37 1946.57,1212.93 1947.16,1215.05 1947.74,1216.08 1948.33,1213.33 1948.91,1215.34 1949.5,1216.11 1950.09,1214.35 1950.67,1214.98 1951.26,1214.38 1951.85,1215.38 1952.43,1216.26 1953.02,1214.93 1953.61,1213.51 1954.19,1214.79 1954.78,1213.31 1955.37,1214.42 1955.95,1211.94 1956.54,1211.45 1957.12,1211.27 1957.71,1213.45 1958.3,1214.35 1958.88,1212.91 1959.47,1210.43 1960.06,1211.41 1960.64,1215.12 1961.23,1212.45 1961.82,1212.15 1962.4,1213 1962.99,1213.97 1963.58,1216.17 1964.16,1218.1 1964.75,1216.31 1965.33,1217.17 1965.92,1215.73 1966.51,1214.46 1967.09,1214.2 1967.68,1213.98 1968.27,1213.79 1968.85,1213.64 1969.44,1214.84 1970.03,1212.08 1970.61,1210.71 1971.2,1210.83 1971.78,1211.82 1972.37,1207.76 1972.96,1208.01 1973.54,1210.51 1974.13,1208.22 1974.72,1209.41 1975.3,1208.21 1975.89,1206.87 1976.48,1207.07 1977.06,1207.23 1977.65,1207.41 1978.24,1205.16 1978.82,1204.26 1979.41,1207.07 1979.99,1208.75 1980.58,1208.4 1981.17,1208.49 1981.75,1209.6 1982.34,1204.86 1982.93,1204.15 1983.51,1206.75 1984.1,1204.64 1984.69,1205.13 1985.27,1205.46 1985.86,1209.32 1986.45,1209.41 1987.03,1212.93 1987.62,1215.2 1988.2,1218.36 1988.79,1214.47 1989.38,1214.31 1989.96,1215.34 1990.55,1212.8 1991.14,1212.71 1991.72,1211.27 1992.31,1208.95 1992.9,1211.37 1993.48,1211.33 1994.07,1211.29 1994.65,1212.48 1995.24,1212.45 1995.83,1214.86 1996.41,1214.68 1997,1215.68 1997.59,1215.71 1998.17,1216.65 1998.76,1215 1999.35,1213.42 1999.93,1213.35 2000.52,1211.83 2001.11,1211.76 2001.69,1210.14 2002.28,1209.8 2002.86,1211.04 2003.45,1210.9 2004.04,1210.69 2004.62,1212.9 2005.21,1212.88 2005.8,1212.72 2006.38,1211.73 2006.97,1214.04 2007.56,1214.11 2008.14,1214 2008.73,1213.92 2009.32,1212.45 2009.9,1209.96 2010.49,1207.37 2011.07,1208.97 2011.66,1208.9 2012.25,1206.59 2012.83,1205.43 2013.42,1208.16 2014.01,1208.27 2014.59,1208.57 2015.18,1207.61 2015.77,1208 2016.35,1208.15 2016.94,1207.18 2017.53,1208.25 2018.11,1208.6 2018.7,1208.78 2019.28,1209.09 2019.87,1210.53 2020.46,1210.32 2021.04,1210.37 2021.63,1210.38 2022.22,1209.14 2022.8,1207.98 2023.39,1206.85 2023.98,1205.67 2024.56,1206.24 2025.15,1206.54 2025.73,1207.91 2026.32,1208.03 2026.91,1209.41 2027.49,1206.94 2028.08,1207.1 2028.67,1205.94 2029.25,1207.51 2029.84,1207.81 2030.43,1205.42 2031.01,1206.64 2031.6,1204.73 2032.19,1205.05 2032.77,1206.73 2033.36,1208.37 2033.94,1209.92 2034.53,1207.49 2035.12,1208.86 2035.7,1207.66 2036.29,1210.38 2036.88,1210.24 2037.46,1211.32 2038.05,1211.34 2038.64,1211.18 2039.22,1214.68 2039.81,1211.9 2040.4,1210.62 2040.98,1210.84 2041.57,1210.96 2042.15,1211.1 2042.74,1209.61 2043.33,1209.72 2043.91,1208.49 2044.5,1208.69 2045.09,1210.09 2045.67,1209.07 2046.26,1208.04 2046.85,1209.18 2047.43,1209.09 2048.02,1208.24 2048.6,1210.67 2049.19,1209.72 2049.78,1211.01 2050.36,1212.02 2050.95,1213.99 2051.54,1213.96 2052.12,1214.78 2052.71,1211.99 2053.3,1213.11 2053.88,1212.84 2054.47,1214.14 2055.06,1213.96 2055.64,1213.83 2056.23,1214.48 2056.81,1213.09 2057.4,1214.07 2057.99,1210.41 2058.57,1210.38 2059.16,1211.65 2059.75,1212.86 2060.33,1212.85 2060.92,1213.63 2061.51,1214.71 2062.09,1220.14 2062.68,1223.09 2063.27,1222.46 2063.85,1223.08 2064.44,1222.36 2065.02,1221.35 2065.61,1224.12 2066.2,1224.44 2066.78,1219.99 2067.37,1214.84 2067.96,1213.21 2068.54,1214.18 2069.13,1210.26 2069.72,1207.84 2070.3,1208.02 2070.89,1206.82 2071.48,1205.99 2072.06,1203.79 2072.65,1207.88 2073.23,1206.72 2073.82,1208.2 2074.41,1206.99 2074.99,1202.21 2075.58,1203.59 2076.17,1203.55 2076.75,1204.84 2077.34,1202.7 2077.93,1204.47 2078.51,1203.61 2079.1,1207.62 2079.68,1210.13 2080.27,1207.71 2080.86,1207.7 2081.44,1207.82 2082.03,1207.7 2082.62,1209.06 2083.2,1209.2 2083.79,1210.38 2084.38,1210.19 2084.96,1207.53 2085.55,1207.69 2086.14,1206.54 2086.72,1206.73 2087.31,1206.86 2087.89,1208.3 2088.48,1208.35 2089.07,1208.42 2089.65,1209.5 2090.24,1209.8 2090.83,1210.95 2091.41,1214.39 2092,1216.69 2092.59,1216.33 2093.17,1216.07 2093.76,1214.49 2094.35,1214.3 2094.93,1212.86 2095.52,1212.67 2096.1,1212.37 2096.69,1215.74 2097.28,1215.44 2097.86,1215.21 2098.45,1215.08 2099.04,1212.44 2099.62,1214.75 2100.21,1214.47 2100.8,1214.13 2101.38,1212.53 2101.97,1211.23 2102.55,1210.03 2103.14,1211.39 2103.73,1211.44 2104.31,1210.24 2104.9,1212.73 2105.49,1216.1 2106.07,1214.67 2106.66,1212.95 2107.25,1212.83 2107.83,1211.46 2108.42,1209.1 2109.01,1210.45 2109.59,1209.25 2110.18,1206.82 2110.76,1205.87 2111.35,1208.43 2111.94,1207.34 2112.52,1207.55 2113.11,1206.47 2113.7,1206.71 2114.28,1210.75 2114.87,1211.86 2115.46,1207.98 2116.04,1208.07 2116.63,1208.03 2117.22,1209.2 2117.8,1209.42 2118.39,1209.28 2118.97,1210.12 2119.56,1210.08 2120.15,1207.73 2120.73,1206.79 2121.32,1207.23 2121.91,1209.78 2122.49,1209.78 2123.08,1208.29 2123.67,1210.62 2124.25,1209.26 2124.84,1208.23 2125.42,1209.54 2126.01,1211.07 2126.6,1212.02 2127.18,1213.04 2127.77,1212.75 2128.36,1212.4 2128.94,1212.16 2129.53,1210.85 2130.12,1211.91 2130.7,1212.03 2131.29,1213.09 2131.88,1215.35 2132.46,1212.43 2133.05,1212.53 2133.63,1211.06 2134.22,1211.27 2134.81,1211.13 2135.39,1213.51 2135.98,1212.21 2136.57,1213.13 2137.15,1213.02 2137.74,1210.56 2138.33,1210.68 2138.91,1210.83 2139.5,1210.85 2140.09,1209.74 2140.67,1208.48 2141.26,1209.77 2141.84,1208.57 2142.43,1207.57 2143.02,1208.67 2143.6,1209.98 2144.19,1208.87 2144.78,1209.84 2145.36,1206.52 2145.95,1205.45 2146.54,1208.11 2147.12,1206.71 2147.71,1206.88 2148.3,1209.13 2148.88,1205.48 2149.47,1206.83 2150.05,1204.69 2150.64,1204.97 2151.23,1205.53 2151.81,1205.85 2152.4,1207.08 2152.99,1207.41 2153.57,1209.86 2154.16,1208.89 2154.75,1207.43 2155.33,1207.71 2155.92,1209.13 2156.5,1209.13 2157.09,1207.83 2157.68,1206.82 2158.26,1207.24 \"/>\n<path clip-path=\"url(#clip032)\" d=\"M986.025 1210.28 L986.612 1210.28 L987.198 1210.28 L987.785 1210.28 L988.371 1210.28 L988.957 1210.28 L989.544 1210.28 L990.13 1210.28 L990.717 1210.28 L991.303 1210.28 L991.889 1210.28 L992.476 1210.28 L993.062 1210.28 L993.649 1210.28 L994.235 1210.28 L994.822 1210.28 L995.408 1210.28 L995.994 1210.28 L996.581 1210.28 L997.167 1210.28 L997.754 1210.28 L998.34 1210.28 L998.926 1210.28 L999.513 1210.28 L1000.1 1210.28 L1000.69 1210.28 L1001.27 1210.28 L1001.86 1210.28 L1002.44 1210.28 L1003.03 1210.28 L1003.62 1210.28 L1004.2 1210.28 L1004.79 1210.28 L1005.38 1210.28 L1005.96 1210.28 L1006.55 1210.28 L1007.14 1210.28 L1007.72 1210.28 L1008.31 1210.28 L1008.9 1210.28 L1009.48 1210.28 L1010.07 1210.28 L1010.65 1210.28 L1011.24 1210.28 L1011.83 1210.28 L1012.41 1210.28 L1013 1210.28 L1013.59 1210.28 L1014.17 1210.28 L1014.76 1210.28 L1015.35 1210.28 L1015.93 1210.28 L1016.52 1210.28 L1017.11 1210.28 L1017.69 1210.28 L1018.28 1210.28 L1018.86 1210.28 L1019.45 1210.28 L1020.04 1210.28 L1020.62 1210.28 L1021.21 1210.28 L1021.8 1210.28 L1022.38 1210.28 L1022.97 1210.28 L1023.56 1210.28 L1024.14 1210.28 L1024.73 1210.28 L1025.32 1210.28 L1025.9 1210.28 L1026.49 1210.28 L1027.07 1210.28 L1027.66 1210.28 L1028.25 1210.28 L1028.83 1210.28 L1029.42 1210.28 L1030.01 1210.28 L1030.59 1210.28 L1031.18 1210.28 L1031.77 1210.28 L1032.35 1210.28 L1032.94 1210.28 L1033.52 1210.28 L1034.11 1210.28 L1034.7 1210.28 L1035.28 1210.28 L1035.87 1210.28 L1036.46 1210.28 L1037.04 1210.28 L1037.63 1210.28 L1038.22 1210.28 L1038.8 1210.28 L1039.39 1210.28 L1039.98 1210.28 L1040.56 1210.28 L1041.15 1210.28 L1041.73 1210.28 L1042.32 1210.28 L1042.91 1210.28 L1043.49 1210.28 L1044.08 1210.28 L1044.67 1210.28 L1045.25 1210.28 L1045.84 1210.28 L1046.43 1210.28 L1047.01 1210.28 L1047.6 1210.28 L1048.19 1210.28 L1048.77 1210.28 L1049.36 1210.28 L1049.94 1210.28 L1050.53 1210.28 L1051.12 1210.28 L1051.7 1210.28 L1052.29 1210.28 L1052.88 1210.28 L1053.46 1210.28 L1054.05 1210.28 L1054.64 1210.28 L1055.22 1210.28 L1055.81 1210.28 L1056.39 1210.28 L1056.98 1210.28 L1057.57 1210.28 L1058.15 1210.28 L1058.74 1210.28 L1059.33 1210.28 L1059.91 1210.28 L1060.5 1210.28 L1061.09 1210.28 L1061.67 1210.28 L1062.26 1210.28 L1062.85 1210.28 L1063.43 1210.28 L1064.02 1210.28 L1064.6 1210.28 L1065.19 1210.28 L1065.78 1210.28 L1066.36 1210.28 L1066.95 1210.28 L1067.54 1210.28 L1068.12 1210.28 L1068.71 1210.28 L1069.3 1210.28 L1069.88 1210.28 L1070.47 1210.28 L1071.06 1210.28 L1071.64 1210.28 L1072.23 1210.28 L1072.81 1210.28 L1073.4 1210.28 L1073.99 1210.28 L1074.57 1210.28 L1075.16 1210.28 L1075.75 1210.28 L1076.33 1210.28 L1076.92 1210.28 L1077.51 1210.28 L1078.09 1210.28 L1078.68 1210.28 L1079.26 1210.28 L1079.85 1210.28 L1080.44 1210.28 L1081.02 1210.28 L1081.61 1210.28 L1082.2 1210.28 L1082.78 1210.28 L1083.37 1210.28 L1083.96 1210.28 L1084.54 1210.28 L1085.13 1210.28 L1085.72 1210.28 L1086.3 1210.28 L1086.89 1210.28 L1087.47 1210.28 L1088.06 1210.28 L1088.65 1210.28 L1089.23 1210.28 L1089.82 1210.28 L1090.41 1210.28 L1090.99 1210.28 L1091.58 1210.28 L1092.17 1210.28 L1092.75 1210.28 L1093.34 1210.28 L1093.93 1210.28 L1094.51 1210.28 L1095.1 1210.28 L1095.68 1210.28 L1096.27 1210.28 L1096.86 1210.28 L1097.44 1210.28 L1098.03 1210.28 L1098.62 1210.28 L1099.2 1210.28 L1099.79 1210.28 L1100.38 1210.28 L1100.96 1210.28 L1101.55 1210.28 L1102.14 1210.28 L1102.72 1210.28 L1103.31 1210.28 L1103.89 1210.28 L1104.48 1210.28 L1105.07 1210.28 L1105.65 1210.28 L1106.24 1210.28 L1106.83 1210.28 L1107.41 1210.28 L1108 1210.28 L1108.59 1210.28 L1109.17 1210.28 L1109.76 1210.28 L1110.34 1210.28 L1110.93 1210.28 L1111.52 1210.28 L1112.1 1210.28 L1112.69 1210.28 L1113.28 1210.28 L1113.86 1210.28 L1114.45 1210.28 L1115.04 1210.28 L1115.62 1210.28 L1116.21 1210.28 L1116.8 1210.28 L1117.38 1210.28 L1117.97 1210.28 L1118.55 1210.28 L1119.14 1210.28 L1119.73 1210.28 L1120.31 1210.28 L1120.9 1210.28 L1121.49 1210.28 L1122.07 1210.28 L1122.66 1210.28 L1123.25 1210.28 L1123.83 1210.28 L1124.42 1210.28 L1125.01 1210.28 L1125.59 1210.28 L1126.18 1210.28 L1126.76 1210.28 L1127.35 1210.28 L1127.94 1210.28 L1128.52 1210.28 L1129.11 1210.28 L1129.7 1210.28 L1130.28 1210.28 L1130.87 1210.28 L1131.46 1210.28 L1132.04 1210.28 L1132.63 1210.28 L1133.21 1210.28 L1133.8 1210.28 L1134.39 1210.28 L1134.97 1210.28 L1135.56 1210.28 L1136.15 1210.28 L1136.73 1210.28 L1137.32 1210.28 L1137.91 1210.28 L1138.49 1210.28 L1139.08 1210.28 L1139.67 1210.28 L1140.25 1210.28 L1140.84 1210.28 L1141.42 1210.28 L1142.01 1210.28 L1142.6 1210.28 L1143.18 1210.28 L1143.77 1210.28 L1144.36 1210.28 L1144.94 1210.28 L1145.53 1210.28 L1146.12 1210.28 L1146.7 1210.28 L1147.29 1210.28 L1147.88 1210.28 L1148.46 1210.28 L1149.05 1210.28 L1149.63 1210.28 L1150.22 1210.28 L1150.81 1210.28 L1151.39 1210.28 L1151.98 1210.28 L1152.57 1210.28 L1153.15 1210.28 L1153.74 1210.28 L1154.33 1210.28 L1154.91 1210.28 L1155.5 1210.28 L1156.09 1210.28 L1156.67 1210.28 L1157.26 1210.28 L1157.84 1210.28 L1158.43 1210.28 L1159.02 1210.28 L1159.6 1210.28 L1160.19 1210.28 L1160.78 1210.28 L1161.36 1210.28 L1161.95 1210.28 L1162.54 1210.28 L1163.12 1210.28 L1163.71 1210.28 L1164.29 1210.28 L1164.88 1210.28 L1165.47 1210.28 L1166.05 1210.28 L1166.64 1210.28 L1167.23 1210.28 L1167.81 1210.28 L1168.4 1210.28 L1168.99 1210.28 L1169.57 1210.28 L1170.16 1210.28 L1170.75 1210.28 L1171.33 1210.28 L1171.92 1210.28 L1172.5 1210.28 L1173.09 1210.28 L1173.68 1210.28 L1174.26 1210.28 L1174.85 1210.28 L1175.44 1210.28 L1176.02 1210.28 L1176.61 1210.28 L1177.2 1210.28 L1177.78 1210.28 L1178.37 1210.28 L1178.96 1210.28 L1179.54 1210.28 L1180.13 1210.28 L1180.71 1210.28 L1181.3 1210.28 L1181.89 1210.28 L1182.47 1210.28 L1183.06 1210.28 L1183.65 1210.28 L1184.23 1210.28 L1184.82 1210.28 L1185.41 1210.28 L1185.99 1210.28 L1186.58 1210.28 L1187.16 1210.28 L1187.75 1210.28 L1188.34 1210.28 L1188.92 1210.28 L1189.51 1210.28 L1190.1 1210.28 L1190.68 1210.28 L1191.27 1210.28 L1191.86 1210.28 L1192.44 1210.28 L1193.03 1210.28 L1193.62 1210.28 L1194.2 1210.28 L1194.79 1210.28 L1195.37 1210.28 L1195.96 1210.28 L1196.55 1210.28 L1197.13 1210.28 L1197.72 1210.28 L1198.31 1210.28 L1198.89 1210.28 L1199.48 1210.28 L1200.07 1210.28 L1200.65 1210.28 L1201.24 1210.28 L1201.83 1210.28 L1202.41 1210.28 L1203 1210.28 L1203.58 1210.28 L1204.17 1210.28 L1204.76 1210.28 L1205.34 1210.28 L1205.93 1210.28 L1206.52 1210.28 L1207.1 1210.28 L1207.69 1210.28 L1208.28 1210.28 L1208.86 1210.28 L1209.45 1210.28 L1210.03 1210.28 L1210.62 1210.28 L1211.21 1210.28 L1211.79 1210.28 L1212.38 1210.28 L1212.97 1210.28 L1213.55 1210.28 L1214.14 1210.28 L1214.73 1210.28 L1215.31 1210.28 L1215.9 1210.28 L1216.49 1210.28 L1217.07 1210.28 L1217.66 1210.28 L1218.24 1210.28 L1218.83 1210.28 L1219.42 1210.28 L1220 1210.28 L1220.59 1210.28 L1221.18 1210.28 L1221.76 1210.28 L1222.35 1210.28 L1222.94 1210.28 L1223.52 1210.28 L1224.11 1210.28 L1224.7 1210.28 L1225.28 1210.28 L1225.87 1210.28 L1226.45 1210.28 L1227.04 1210.28 L1227.63 1210.28 L1228.21 1210.28 L1228.8 1210.28 L1229.39 1210.28 L1229.97 1210.28 L1230.56 1210.28 L1231.15 1210.28 L1231.73 1210.28 L1232.32 1210.28 L1232.91 1210.28 L1233.49 1210.28 L1234.08 1210.28 L1234.66 1210.28 L1235.25 1210.28 L1235.84 1210.28 L1236.42 1210.28 L1237.01 1210.28 L1237.6 1210.28 L1238.18 1210.28 L1238.77 1210.28 L1239.36 1210.28 L1239.94 1210.28 L1240.53 1210.28 L1241.11 1210.28 L1241.7 1210.28 L1242.29 1210.28 L1242.87 1210.28 L1243.46 1210.28 L1244.05 1210.28 L1244.63 1210.28 L1245.22 1210.28 L1245.81 1210.28 L1246.39 1210.28 L1246.98 1210.28 L1247.57 1210.28 L1248.15 1210.28 L1248.74 1210.28 L1249.32 1210.28 L1249.91 1210.28 L1250.5 1210.28 L1251.08 1210.28 L1251.67 1210.28 L1252.26 1210.28 L1252.84 1210.28 L1253.43 1210.28 L1254.02 1210.28 L1254.6 1210.28 L1255.19 1210.28 L1255.78 1210.28 L1256.36 1210.28 L1256.95 1210.28 L1257.53 1210.28 L1258.12 1210.28 L1258.71 1210.28 L1259.29 1210.28 L1259.88 1210.28 L1260.47 1210.28 L1261.05 1210.28 L1261.64 1210.28 L1262.23 1210.28 L1262.81 1210.28 L1263.4 1210.28 L1263.98 1210.28 L1264.57 1210.28 L1265.16 1210.28 L1265.74 1210.28 L1266.33 1210.28 L1266.92 1210.28 L1267.5 1210.28 L1268.09 1210.28 L1268.68 1210.28 L1269.26 1210.28 L1269.85 1210.28 L1270.44 1210.28 L1271.02 1210.28 L1271.61 1210.28 L1272.19 1210.28 L1272.78 1210.28 L1273.37 1210.28 L1273.95 1210.28 L1274.54 1210.28 L1275.13 1210.28 L1275.71 1210.28 L1276.3 1210.28 L1276.89 1210.28 L1277.47 1210.28 L1278.06 1210.28 L1278.65 1210.28 L1279.23 1210.28 L1279.82 1210.28 L1280.4 1210.28 L1280.99 1210.28 L1281.58 1210.28 L1282.16 1210.28 L1282.75 1210.28 L1283.34 1210.28 L1283.92 1210.28 L1284.51 1210.28 L1285.1 1210.28 L1285.68 1210.28 L1286.27 1210.28 L1286.86 1210.28 L1287.44 1210.28 L1288.03 1210.28 L1288.61 1210.28 L1289.2 1210.28 L1289.79 1210.28 L1290.37 1210.28 L1290.96 1210.28 L1291.55 1210.28 L1292.13 1210.28 L1292.72 1210.28 L1293.31 1210.28 L1293.89 1210.28 L1294.48 1210.28 L1295.06 1210.28 L1295.65 1210.28 L1296.24 1210.28 L1296.82 1210.28 L1297.41 1210.28 L1298 1210.28 L1298.58 1210.28 L1299.17 1210.28 L1299.76 1210.28 L1300.34 1210.28 L1300.93 1210.28 L1301.52 1210.28 L1302.1 1210.28 L1302.69 1210.28 L1303.27 1210.28 L1303.86 1210.28 L1304.45 1210.28 L1305.03 1210.28 L1305.62 1210.28 L1306.21 1210.28 L1306.79 1210.28 L1307.38 1210.28 L1307.97 1210.28 L1308.55 1210.28 L1309.14 1210.28 L1309.73 1210.28 L1310.31 1210.28 L1310.9 1210.28 L1311.48 1210.28 L1312.07 1210.28 L1312.66 1210.28 L1313.24 1210.28 L1313.83 1210.28 L1314.42 1210.28 L1315 1210.28 L1315.59 1210.28 L1316.18 1210.28 L1316.76 1210.28 L1317.35 1210.28 L1317.93 1210.28 L1318.52 1210.28 L1319.11 1210.28 L1319.69 1210.28 L1320.28 1210.28 L1320.87 1210.28 L1321.45 1210.28 L1322.04 1210.28 L1322.63 1210.28 L1323.21 1210.28 L1323.8 1210.28 L1324.39 1210.28 L1324.97 1210.28 L1325.56 1210.28 L1326.14 1210.28 L1326.73 1210.28 L1327.32 1210.28 L1327.9 1210.28 L1328.49 1210.28 L1329.08 1210.28 L1329.66 1210.28 L1330.25 1210.28 L1330.84 1210.28 L1331.42 1210.28 L1332.01 1210.28 L1332.6 1210.28 L1333.18 1210.28 L1333.77 1210.28 L1334.35 1210.28 L1334.94 1210.28 L1335.53 1210.28 L1336.11 1210.28 L1336.7 1210.28 L1337.29 1210.28 L1337.87 1210.28 L1338.46 1210.28 L1339.05 1210.28 L1339.63 1210.28 L1340.22 1210.28 L1340.8 1210.28 L1341.39 1210.28 L1341.98 1210.28 L1342.56 1210.28 L1343.15 1210.28 L1343.74 1210.28 L1344.32 1210.28 L1344.91 1210.28 L1345.5 1210.28 L1346.08 1210.28 L1346.67 1210.28 L1347.26 1210.28 L1347.84 1210.28 L1348.43 1210.28 L1349.01 1210.28 L1349.6 1210.28 L1350.19 1210.28 L1350.77 1210.28 L1351.36 1210.28 L1351.95 1210.28 L1352.53 1210.28 L1353.12 1210.28 L1353.71 1210.28 L1354.29 1210.28 L1354.88 1210.28 L1355.47 1210.28 L1356.05 1210.28 L1356.64 1210.28 L1357.22 1210.28 L1357.81 1210.28 L1358.4 1210.28 L1358.98 1210.28 L1359.57 1210.28 L1360.16 1210.28 L1360.74 1210.28 L1361.33 1210.28 L1361.92 1210.28 L1362.5 1210.28 L1363.09 1210.28 L1363.68 1210.28 L1364.26 1210.28 L1364.85 1210.28 L1365.43 1210.28 L1366.02 1210.28 L1366.61 1210.28 L1367.19 1210.28 L1367.78 1210.28 L1368.37 1210.28 L1368.95 1210.28 L1369.54 1210.28 L1370.13 1210.28 L1370.71 1210.28 L1371.3 1210.28 L1371.88 1210.28 L1372.47 1210.28 L1373.06 1210.28 L1373.64 1210.28 L1374.23 1210.28 L1374.82 1210.28 L1375.4 1210.28 L1375.99 1210.28 L1376.58 1210.28 L1377.16 1210.28 L1377.75 1210.28 L1378.34 1210.28 L1378.92 1210.28 L1379.51 1210.28 L1380.09 1210.28 L1380.68 1210.28 L1381.27 1210.28 L1381.85 1210.28 L1382.44 1210.28 L1383.03 1210.28 L1383.61 1210.28 L1384.2 1210.28 L1384.79 1210.28 L1385.37 1210.28 L1385.96 1210.28 L1386.55 1210.28 L1387.13 1210.28 L1387.72 1210.28 L1388.3 1210.28 L1388.89 1210.28 L1389.48 1210.28 L1390.06 1210.28 L1390.65 1210.28 L1391.24 1210.28 L1391.82 1210.28 L1392.41 1210.28 L1393 1210.28 L1393.58 1210.28 L1394.17 1210.28 L1394.75 1210.28 L1395.34 1210.28 L1395.93 1210.28 L1396.51 1210.28 L1397.1 1210.28 L1397.69 1210.28 L1398.27 1210.28 L1398.86 1210.28 L1399.45 1210.28 L1400.03 1210.28 L1400.62 1210.28 L1401.21 1210.28 L1401.79 1210.28 L1402.38 1210.28 L1402.96 1210.28 L1403.55 1210.28 L1404.14 1210.28 L1404.72 1210.28 L1405.31 1210.28 L1405.9 1210.28 L1406.48 1210.28 L1407.07 1210.28 L1407.66 1210.28 L1408.24 1210.28 L1408.83 1210.28 L1409.42 1210.28 L1410 1210.28 L1410.59 1210.28 L1411.17 1210.28 L1411.76 1210.28 L1412.35 1210.28 L1412.93 1210.28 L1413.52 1210.28 L1414.11 1210.28 L1414.69 1210.28 L1415.28 1210.28 L1415.87 1210.28 L1416.45 1210.28 L1417.04 1210.28 L1417.63 1210.28 L1418.21 1210.28 L1418.8 1210.28 L1419.38 1210.28 L1419.97 1210.28 L1420.56 1210.28 L1421.14 1210.28 L1421.73 1210.28 L1422.32 1210.28 L1422.9 1210.28 L1423.49 1210.28 L1424.08 1210.28 L1424.66 1210.28 L1425.25 1210.28 L1425.83 1210.28 L1426.42 1210.28 L1427.01 1210.28 L1427.59 1210.28 L1428.18 1210.28 L1428.77 1210.28 L1429.35 1210.28 L1429.94 1210.28 L1430.53 1210.28 L1431.11 1210.28 L1431.7 1210.28 L1432.29 1210.28 L1432.87 1210.28 L1433.46 1210.28 L1434.04 1210.28 L1434.63 1210.28 L1435.22 1210.28 L1435.8 1210.28 L1436.39 1210.28 L1436.98 1210.28 L1437.56 1210.28 L1438.15 1210.28 L1438.74 1210.28 L1439.32 1210.28 L1439.91 1210.28 L1440.5 1210.28 L1441.08 1210.28 L1441.67 1210.28 L1442.25 1210.28 L1442.84 1210.28 L1443.43 1210.28 L1444.01 1210.28 L1444.6 1210.28 L1445.19 1210.28 L1445.77 1210.28 L1446.36 1210.28 L1446.95 1210.28 L1447.53 1210.28 L1448.12 1210.28 L1448.7 1210.28 L1449.29 1210.28 L1449.88 1210.28 L1450.46 1210.28 L1451.05 1210.28 L1451.64 1210.28 L1452.22 1210.28 L1452.81 1210.28 L1453.4 1210.28 L1453.98 1210.28 L1454.57 1210.28 L1455.16 1210.28 L1455.74 1210.28 L1456.33 1210.28 L1456.91 1210.28 L1457.5 1210.28 L1458.09 1210.28 L1458.67 1210.28 L1459.26 1210.28 L1459.85 1210.28 L1460.43 1210.28 L1461.02 1210.28 L1461.61 1210.28 L1462.19 1210.28 L1462.78 1210.28 L1463.37 1210.28 L1463.95 1210.28 L1464.54 1210.28 L1465.12 1210.28 L1465.71 1210.28 L1466.3 1210.28 L1466.88 1210.28 L1467.47 1210.28 L1468.06 1210.28 L1468.64 1210.28 L1469.23 1210.28 L1469.82 1210.28 L1470.4 1210.28 L1470.99 1210.28 L1471.57 1210.28 L1472.16 1210.28 L1472.75 1210.28 L1473.33 1210.28 L1473.92 1210.28 L1474.51 1210.28 L1475.09 1210.28 L1475.68 1210.28 L1476.27 1210.28 L1476.85 1210.28 L1477.44 1210.28 L1478.03 1210.28 L1478.61 1210.28 L1479.2 1210.28 L1479.78 1210.28 L1480.37 1210.28 L1480.96 1210.28 L1481.54 1210.28 L1482.13 1210.28 L1482.72 1210.28 L1483.3 1210.28 L1483.89 1210.28 L1484.48 1210.28 L1485.06 1210.28 L1485.65 1210.28 L1486.24 1210.28 L1486.82 1210.28 L1487.41 1210.28 L1487.99 1210.28 L1488.58 1210.28 L1489.17 1210.28 L1489.75 1210.28 L1490.34 1210.28 L1490.93 1210.28 L1491.51 1210.28 L1492.1 1210.28 L1492.69 1210.28 L1493.27 1210.28 L1493.86 1210.28 L1494.45 1210.28 L1495.03 1210.28 L1495.62 1210.28 L1496.2 1210.28 L1496.79 1210.28 L1497.38 1210.28 L1497.96 1210.28 L1498.55 1210.28 L1499.14 1210.28 L1499.72 1210.28 L1500.31 1210.28 L1500.9 1210.28 L1501.48 1210.28 L1502.07 1210.28 L1502.65 1210.28 L1503.24 1210.28 L1503.83 1210.28 L1504.41 1210.28 L1505 1210.28 L1505.59 1210.28 L1506.17 1210.28 L1506.76 1210.28 L1507.35 1210.28 L1507.93 1210.28 L1508.52 1210.28 L1509.11 1210.28 L1509.69 1210.28 L1510.28 1210.28 L1510.86 1210.28 L1511.45 1210.28 L1512.04 1210.28 L1512.62 1210.28 L1513.21 1210.28 L1513.8 1210.28 L1514.38 1210.28 L1514.97 1210.28 L1515.56 1210.28 L1516.14 1210.28 L1516.73 1210.28 L1517.32 1210.28 L1517.9 1210.28 L1518.49 1210.28 L1519.07 1210.28 L1519.66 1210.28 L1520.25 1210.28 L1520.83 1210.28 L1521.42 1210.28 L1522.01 1210.28 L1522.59 1210.28 L1523.18 1210.28 L1523.77 1210.28 L1524.35 1210.28 L1524.94 1210.28 L1525.52 1210.28 L1526.11 1210.28 L1526.7 1210.28 L1527.28 1210.28 L1527.87 1210.28 L1528.46 1210.28 L1529.04 1210.28 L1529.63 1210.28 L1530.22 1210.28 L1530.8 1210.28 L1531.39 1210.28 L1531.98 1210.28 L1532.56 1210.28 L1533.15 1210.28 L1533.73 1210.28 L1534.32 1210.28 L1534.91 1210.28 L1535.49 1210.28 L1536.08 1210.28 L1536.67 1210.28 L1537.25 1210.28 L1537.84 1210.28 L1538.43 1210.28 L1539.01 1210.28 L1539.6 1210.28 L1540.19 1210.28 L1540.77 1210.28 L1541.36 1210.28 L1541.94 1210.28 L1542.53 1210.28 L1543.12 1210.28 L1543.7 1210.28 L1544.29 1210.28 L1544.88 1210.28 L1545.46 1210.28 L1546.05 1210.28 L1546.64 1210.28 L1547.22 1210.28 L1547.81 1210.28 L1548.4 1210.28 L1548.98 1210.28 L1549.57 1210.28 L1550.15 1210.28 L1550.74 1210.28 L1551.33 1210.28 L1551.91 1210.28 L1552.5 1210.28 L1553.09 1210.28 L1553.67 1210.28 L1554.26 1210.28 L1554.85 1210.28 L1555.43 1210.28 L1556.02 1210.28 L1556.6 1210.28 L1557.19 1210.28 L1557.78 1210.28 L1558.36 1210.28 L1558.95 1210.28 L1559.54 1210.28 L1560.12 1210.28 L1560.71 1210.28 L1561.3 1210.28 L1561.88 1210.28 L1562.47 1210.28 L1563.06 1210.28 L1563.64 1210.28 L1564.23 1210.28 L1564.81 1210.28 L1565.4 1210.28 L1565.99 1210.28 L1566.57 1210.28 L1567.16 1210.28 L1567.75 1210.28 L1568.33 1210.28 L1568.92 1210.28 L1569.51 1210.28 L1570.09 1210.28 L1570.68 1210.28 L1571.27 1210.28 L1571.85 1210.28 L1572.44 1210.28 L1573.02 1210.28 L1573.61 1210.28 L1574.2 1210.28 L1574.78 1210.28 L1575.37 1210.28 L1575.96 1210.28 L1576.54 1210.28 L1577.13 1210.28 L1577.72 1210.28 L1578.3 1210.28 L1578.89 1210.28 L1579.47 1210.28 L1580.06 1210.28 L1580.65 1210.28 L1581.23 1210.28 L1581.82 1210.28 L1582.41 1210.28 L1582.99 1210.28 L1583.58 1210.28 L1584.17 1210.28 L1584.75 1210.28 L1585.34 1210.28 L1585.93 1210.28 L1586.51 1210.28 L1587.1 1210.28 L1587.68 1210.28 L1588.27 1210.28 L1588.86 1210.28 L1589.44 1210.28 L1590.03 1210.28 L1590.62 1210.28 L1591.2 1210.28 L1591.79 1210.28 L1592.38 1210.28 L1592.96 1210.28 L1593.55 1210.28 L1594.14 1210.28 L1594.72 1210.28 L1595.31 1210.28 L1595.89 1210.28 L1596.48 1210.28 L1597.07 1210.28 L1597.65 1210.28 L1598.24 1210.28 L1598.83 1210.28 L1599.41 1210.28 L1600 1210.28 L1600.59 1210.28 L1601.17 1210.28 L1601.76 1210.28 L1602.34 1210.28 L1602.93 1210.28 L1603.52 1210.28 L1604.1 1210.28 L1604.69 1210.28 L1605.28 1210.28 L1605.86 1210.28 L1606.45 1210.28 L1607.04 1210.28 L1607.62 1210.28 L1608.21 1210.28 L1608.8 1210.28 L1609.38 1210.28 L1609.97 1210.28 L1610.55 1210.28 L1611.14 1210.28 L1611.73 1210.28 L1612.31 1210.28 L1612.9 1210.28 L1613.49 1210.28 L1614.07 1210.28 L1614.66 1210.28 L1615.25 1210.28 L1615.83 1210.28 L1616.42 1210.28 L1617.01 1210.28 L1617.59 1210.28 L1618.18 1210.28 L1618.76 1210.28 L1619.35 1210.28 L1619.94 1210.28 L1620.52 1210.28 L1621.11 1210.28 L1621.7 1210.28 L1622.28 1210.28 L1622.87 1210.28 L1623.46 1210.28 L1624.04 1210.28 L1624.63 1210.28 L1625.22 1210.28 L1625.8 1210.28 L1626.39 1210.28 L1626.97 1210.28 L1627.56 1210.28 L1628.15 1210.28 L1628.73 1210.28 L1629.32 1210.28 L1629.91 1210.28 L1630.49 1210.28 L1631.08 1210.28 L1631.67 1210.28 L1632.25 1210.28 L1632.84 1210.28 L1633.42 1210.28 L1634.01 1210.28 L1634.6 1210.28 L1635.18 1210.28 L1635.77 1210.28 L1636.36 1210.28 L1636.94 1210.28 L1637.53 1210.28 L1638.12 1210.28 L1638.7 1210.28 L1639.29 1210.28 L1639.88 1210.28 L1640.46 1210.28 L1641.05 1210.28 L1641.63 1210.28 L1642.22 1210.28 L1642.81 1210.28 L1643.39 1210.28 L1643.98 1210.28 L1644.57 1210.28 L1645.15 1210.28 L1645.74 1210.28 L1646.33 1210.28 L1646.91 1210.28 L1647.5 1210.28 L1648.09 1210.28 L1648.67 1210.28 L1649.26 1210.28 L1649.84 1210.28 L1650.43 1210.28 L1651.02 1210.28 L1651.6 1210.28 L1652.19 1210.28 L1652.78 1210.28 L1653.36 1210.28 L1653.95 1210.28 L1654.54 1210.28 L1655.12 1210.28 L1655.71 1210.28 L1656.29 1210.28 L1656.88 1210.28 L1657.47 1210.28 L1658.05 1210.28 L1658.64 1210.28 L1659.23 1210.28 L1659.81 1210.28 L1660.4 1210.28 L1660.99 1210.28 L1661.57 1210.28 L1662.16 1210.28 L1662.75 1210.28 L1663.33 1210.28 L1663.92 1210.28 L1664.5 1210.28 L1665.09 1210.28 L1665.68 1210.28 L1666.26 1210.28 L1666.85 1210.28 L1667.44 1210.28 L1668.02 1210.28 L1668.61 1210.28 L1669.2 1210.28 L1669.78 1210.28 L1670.37 1210.28 L1670.96 1210.28 L1671.54 1210.28 L1672.13 1210.28 L1672.71 1210.28 L1673.3 1210.28 L1673.89 1210.28 L1674.47 1210.28 L1675.06 1210.28 L1675.65 1210.28 L1676.23 1210.28 L1676.82 1210.28 L1677.41 1210.28 L1677.99 1210.28 L1678.58 1210.28 L1679.17 1210.28 L1679.75 1210.28 L1680.34 1210.28 L1680.92 1210.28 L1681.51 1210.28 L1682.1 1210.28 L1682.68 1210.28 L1683.27 1210.28 L1683.86 1210.28 L1684.44 1210.28 L1685.03 1210.28 L1685.62 1210.28 L1686.2 1210.28 L1686.79 1210.28 L1687.37 1210.28 L1687.96 1210.28 L1688.55 1210.28 L1689.13 1210.28 L1689.72 1210.28 L1690.31 1210.28 L1690.89 1210.28 L1691.48 1210.28 L1692.07 1210.28 L1692.65 1210.28 L1693.24 1210.28 L1693.83 1210.28 L1694.41 1210.28 L1695 1210.28 L1695.58 1210.28 L1696.17 1210.28 L1696.76 1210.28 L1697.34 1210.28 L1697.93 1210.28 L1698.52 1210.28 L1699.1 1210.28 L1699.69 1210.28 L1700.28 1210.28 L1700.86 1210.28 L1701.45 1210.28 L1702.04 1210.28 L1702.62 1210.28 L1703.21 1210.28 L1703.79 1210.28 L1704.38 1210.28 L1704.97 1210.28 L1705.55 1210.28 L1706.14 1210.28 L1706.73 1210.28 L1707.31 1210.28 L1707.9 1210.28 L1708.49 1210.28 L1709.07 1210.28 L1709.66 1210.28 L1710.24 1210.28 L1710.83 1210.28 L1711.42 1210.28 L1712 1210.28 L1712.59 1210.28 L1713.18 1210.28 L1713.76 1210.28 L1714.35 1210.28 L1714.94 1210.28 L1715.52 1210.28 L1716.11 1210.28 L1716.7 1210.28 L1717.28 1210.28 L1717.87 1210.28 L1718.45 1210.28 L1719.04 1210.28 L1719.63 1210.28 L1720.21 1210.28 L1720.8 1210.28 L1721.39 1210.28 L1721.97 1210.28 L1722.56 1210.28 L1723.15 1210.28 L1723.73 1210.28 L1724.32 1210.28 L1724.91 1210.28 L1725.49 1210.28 L1726.08 1210.28 L1726.66 1210.28 L1727.25 1210.28 L1727.84 1210.28 L1728.42 1210.28 L1729.01 1210.28 L1729.6 1210.28 L1730.18 1210.28 L1730.77 1210.28 L1731.36 1210.28 L1731.94 1210.28 L1732.53 1210.28 L1733.11 1210.28 L1733.7 1210.28 L1734.29 1210.28 L1734.87 1210.28 L1735.46 1210.28 L1736.05 1210.28 L1736.63 1210.28 L1737.22 1210.28 L1737.81 1210.28 L1738.39 1210.28 L1738.98 1210.28 L1739.57 1210.28 L1740.15 1210.28 L1740.74 1210.28 L1741.32 1210.28 L1741.91 1210.28 L1742.5 1210.28 L1743.08 1210.28 L1743.67 1210.28 L1744.26 1210.28 L1744.84 1210.28 L1745.43 1210.28 L1746.02 1210.28 L1746.6 1210.28 L1747.19 1210.28 L1747.78 1210.28 L1748.36 1210.28 L1748.95 1210.28 L1749.53 1210.28 L1750.12 1210.28 L1750.71 1210.28 L1751.29 1210.28 L1751.88 1210.28 L1752.47 1210.28 L1753.05 1210.28 L1753.64 1210.28 L1754.23 1210.28 L1754.81 1210.28 L1755.4 1210.28 L1755.99 1210.28 L1756.57 1210.28 L1757.16 1210.28 L1757.74 1210.28 L1758.33 1210.28 L1758.92 1210.28 L1759.5 1210.28 L1760.09 1210.28 L1760.68 1210.28 L1761.26 1210.28 L1761.85 1210.28 L1762.44 1210.28 L1763.02 1210.28 L1763.61 1210.28 L1764.19 1210.28 L1764.78 1210.28 L1765.37 1210.28 L1765.95 1210.28 L1766.54 1210.28 L1767.13 1210.28 L1767.71 1210.28 L1768.3 1210.28 L1768.89 1210.28 L1769.47 1210.28 L1770.06 1210.28 L1770.65 1210.28 L1771.23 1210.28 L1771.82 1210.28 L1772.4 1210.28 L1772.99 1210.28 L1773.58 1210.28 L1774.16 1210.28 L1774.75 1210.28 L1775.34 1210.28 L1775.92 1210.28 L1776.51 1210.28 L1777.1 1210.28 L1777.68 1210.28 L1778.27 1210.28 L1778.86 1210.28 L1779.44 1210.28 L1780.03 1210.28 L1780.61 1210.28 L1781.2 1210.28 L1781.79 1210.28 L1782.37 1210.28 L1782.96 1210.28 L1783.55 1210.28 L1784.13 1210.28 L1784.72 1210.28 L1785.31 1210.28 L1785.89 1210.28 L1786.48 1210.28 L1787.06 1210.28 L1787.65 1210.28 L1788.24 1210.28 L1788.82 1210.28 L1789.41 1210.28 L1790 1210.28 L1790.58 1210.28 L1791.17 1210.28 L1791.76 1210.28 L1792.34 1210.28 L1792.93 1210.28 L1793.52 1210.28 L1794.1 1210.28 L1794.69 1210.28 L1795.27 1210.28 L1795.86 1210.28 L1796.45 1210.28 L1797.03 1210.28 L1797.62 1210.28 L1798.21 1210.28 L1798.79 1210.28 L1799.38 1210.28 L1799.97 1210.28 L1800.55 1210.28 L1801.14 1210.28 L1801.73 1210.28 L1802.31 1210.28 L1802.9 1210.28 L1803.48 1210.28 L1804.07 1210.28 L1804.66 1210.28 L1805.24 1210.28 L1805.83 1210.28 L1806.42 1210.28 L1807 1210.28 L1807.59 1210.28 L1808.18 1210.28 L1808.76 1210.28 L1809.35 1210.28 L1809.94 1210.28 L1810.52 1210.28 L1811.11 1210.28 L1811.69 1210.28 L1812.28 1210.28 L1812.87 1210.28 L1813.45 1210.28 L1814.04 1210.28 L1814.63 1210.28 L1815.21 1210.28 L1815.8 1210.28 L1816.39 1210.28 L1816.97 1210.28 L1817.56 1210.28 L1818.14 1210.28 L1818.73 1210.28 L1819.32 1210.28 L1819.9 1210.28 L1820.49 1210.28 L1821.08 1210.28 L1821.66 1210.28 L1822.25 1210.28 L1822.84 1210.28 L1823.42 1210.28 L1824.01 1210.28 L1824.6 1210.28 L1825.18 1210.28 L1825.77 1210.28 L1826.35 1210.28 L1826.94 1210.28 L1827.53 1210.28 L1828.11 1210.28 L1828.7 1210.28 L1829.29 1210.28 L1829.87 1210.28 L1830.46 1210.28 L1831.05 1210.28 L1831.63 1210.28 L1832.22 1210.28 L1832.81 1210.28 L1833.39 1210.28 L1833.98 1210.28 L1834.56 1210.28 L1835.15 1210.28 L1835.74 1210.28 L1836.32 1210.28 L1836.91 1210.28 L1837.5 1210.28 L1838.08 1210.28 L1838.67 1210.28 L1839.26 1210.28 L1839.84 1210.28 L1840.43 1210.28 L1841.01 1210.28 L1841.6 1210.28 L1842.19 1210.28 L1842.77 1210.28 L1843.36 1210.28 L1843.95 1210.28 L1844.53 1210.28 L1845.12 1210.28 L1845.71 1210.28 L1846.29 1210.28 L1846.88 1210.28 L1847.47 1210.28 L1848.05 1210.28 L1848.64 1210.28 L1849.22 1210.28 L1849.81 1210.28 L1850.4 1210.28 L1850.98 1210.28 L1851.57 1210.28 L1852.16 1210.28 L1852.74 1210.28 L1853.33 1210.28 L1853.92 1210.28 L1854.5 1210.28 L1855.09 1210.28 L1855.68 1210.28 L1856.26 1210.28 L1856.85 1210.28 L1857.43 1210.28 L1858.02 1210.28 L1858.61 1210.28 L1859.19 1210.28 L1859.78 1210.28 L1860.37 1210.28 L1860.95 1210.28 L1861.54 1210.28 L1862.13 1210.28 L1862.71 1210.28 L1863.3 1210.28 L1863.88 1210.28 L1864.47 1210.28 L1865.06 1210.28 L1865.64 1210.28 L1866.23 1210.28 L1866.82 1210.28 L1867.4 1210.28 L1867.99 1210.28 L1868.58 1210.28 L1869.16 1210.28 L1869.75 1210.28 L1870.34 1210.28 L1870.92 1210.28 L1871.51 1210.28 L1872.09 1210.28 L1872.68 1210.28 L1873.27 1210.28 L1873.85 1210.28 L1874.44 1210.28 L1875.03 1210.28 L1875.61 1210.28 L1876.2 1210.28 L1876.79 1210.28 L1877.37 1210.28 L1877.96 1210.28 L1878.55 1210.28 L1879.13 1210.28 L1879.72 1210.28 L1880.3 1210.28 L1880.89 1210.28 L1881.48 1210.28 L1882.06 1210.28 L1882.65 1210.28 L1883.24 1210.28 L1883.82 1210.28 L1884.41 1210.28 L1885 1210.28 L1885.58 1210.28 L1886.17 1210.28 L1886.76 1210.28 L1887.34 1210.28 L1887.93 1210.28 L1888.51 1210.28 L1889.1 1210.28 L1889.69 1210.28 L1890.27 1210.28 L1890.86 1210.28 L1891.45 1210.28 L1892.03 1210.28 L1892.62 1210.28 L1893.21 1210.28 L1893.79 1210.28 L1894.38 1210.28 L1894.96 1210.28 L1895.55 1210.28 L1896.14 1210.28 L1896.72 1210.28 L1897.31 1210.28 L1897.9 1210.28 L1898.48 1210.28 L1899.07 1210.28 L1899.66 1210.28 L1900.24 1210.28 L1900.83 1210.28 L1901.42 1210.28 L1902 1210.28 L1902.59 1210.28 L1903.17 1210.28 L1903.76 1210.28 L1904.35 1210.28 L1904.93 1210.28 L1905.52 1210.28 L1906.11 1210.28 L1906.69 1210.28 L1907.28 1210.28 L1907.87 1210.28 L1908.45 1210.28 L1909.04 1210.28 L1909.63 1210.28 L1910.21 1210.28 L1910.8 1210.28 L1911.38 1210.28 L1911.97 1210.28 L1912.56 1210.28 L1913.14 1210.28 L1913.73 1210.28 L1914.32 1210.28 L1914.9 1210.28 L1915.49 1210.28 L1916.08 1210.28 L1916.66 1210.28 L1917.25 1210.28 L1917.83 1210.28 L1918.42 1210.28 L1919.01 1210.28 L1919.59 1210.28 L1920.18 1210.28 L1920.77 1210.28 L1921.35 1210.28 L1921.94 1210.28 L1922.53 1210.28 L1923.11 1210.28 L1923.7 1210.28 L1924.29 1210.28 L1924.87 1210.28 L1925.46 1210.28 L1926.04 1210.28 L1926.63 1210.28 L1927.22 1210.28 L1927.8 1210.28 L1928.39 1210.28 L1928.98 1210.28 L1929.56 1210.28 L1930.15 1210.28 L1930.74 1210.28 L1931.32 1210.28 L1931.91 1210.28 L1932.5 1210.28 L1933.08 1210.28 L1933.67 1210.28 L1934.25 1210.28 L1934.84 1210.28 L1935.43 1210.28 L1936.01 1210.28 L1936.6 1210.28 L1937.19 1210.28 L1937.77 1210.28 L1938.36 1210.28 L1938.95 1210.28 L1939.53 1210.28 L1940.12 1210.28 L1940.71 1210.28 L1941.29 1210.28 L1941.88 1210.28 L1942.46 1210.28 L1943.05 1210.28 L1943.64 1210.28 L1944.22 1210.28 L1944.81 1210.28 L1945.4 1210.28 L1945.98 1210.28 L1946.57 1210.28 L1947.16 1210.28 L1947.74 1210.28 L1948.33 1210.28 L1948.91 1210.28 L1949.5 1210.28 L1950.09 1210.28 L1950.67 1210.28 L1951.26 1210.28 L1951.85 1210.28 L1952.43 1210.28 L1953.02 1210.28 L1953.61 1210.28 L1954.19 1210.28 L1954.78 1210.28 L1955.37 1210.28 L1955.95 1210.28 L1956.54 1210.28 L1957.12 1210.28 L1957.71 1210.28 L1958.3 1210.28 L1958.88 1210.28 L1959.47 1210.28 L1960.06 1210.28 L1960.64 1210.28 L1961.23 1210.28 L1961.82 1210.28 L1962.4 1210.28 L1962.99 1210.28 L1963.58 1210.28 L1964.16 1210.28 L1964.75 1210.28 L1965.33 1210.28 L1965.92 1210.28 L1966.51 1210.28 L1967.09 1210.28 L1967.68 1210.28 L1968.27 1210.28 L1968.85 1210.28 L1969.44 1210.28 L1970.03 1210.28 L1970.61 1210.28 L1971.2 1210.28 L1971.78 1210.28 L1972.37 1210.28 L1972.96 1210.28 L1973.54 1210.28 L1974.13 1210.28 L1974.72 1210.28 L1975.3 1210.28 L1975.89 1210.28 L1976.48 1210.28 L1977.06 1210.28 L1977.65 1210.28 L1978.24 1210.28 L1978.82 1210.28 L1979.41 1210.28 L1979.99 1210.28 L1980.58 1210.28 L1981.17 1210.28 L1981.75 1210.28 L1982.34 1210.28 L1982.93 1210.28 L1983.51 1210.28 L1984.1 1210.28 L1984.69 1210.28 L1985.27 1210.28 L1985.86 1210.28 L1986.45 1210.28 L1987.03 1210.28 L1987.62 1210.28 L1988.2 1210.28 L1988.79 1210.28 L1989.38 1210.28 L1989.96 1210.28 L1990.55 1210.28 L1991.14 1210.28 L1991.72 1210.28 L1992.31 1210.28 L1992.9 1210.28 L1993.48 1210.28 L1994.07 1210.28 L1994.65 1210.28 L1995.24 1210.28 L1995.83 1210.28 L1996.41 1210.28 L1997 1210.28 L1997.59 1210.28 L1998.17 1210.28 L1998.76 1210.28 L1999.35 1210.28 L1999.93 1210.28 L2000.52 1210.28 L2001.11 1210.28 L2001.69 1210.28 L2002.28 1210.28 L2002.86 1210.28 L2003.45 1210.28 L2004.04 1210.28 L2004.62 1210.28 L2005.21 1210.28 L2005.8 1210.28 L2006.38 1210.28 L2006.97 1210.28 L2007.56 1210.28 L2008.14 1210.28 L2008.73 1210.28 L2009.32 1210.28 L2009.9 1210.28 L2010.49 1210.28 L2011.07 1210.28 L2011.66 1210.28 L2012.25 1210.28 L2012.83 1210.28 L2013.42 1210.28 L2014.01 1210.28 L2014.59 1210.28 L2015.18 1210.28 L2015.77 1210.28 L2016.35 1210.28 L2016.94 1210.28 L2017.53 1210.28 L2018.11 1210.28 L2018.7 1210.28 L2019.28 1210.28 L2019.87 1210.28 L2020.46 1210.28 L2021.04 1210.28 L2021.63 1210.28 L2022.22 1210.28 L2022.8 1210.28 L2023.39 1210.28 L2023.98 1210.28 L2024.56 1210.28 L2025.15 1210.28 L2025.73 1210.28 L2026.32 1210.28 L2026.91 1210.28 L2027.49 1210.28 L2028.08 1210.28 L2028.67 1210.28 L2029.25 1210.28 L2029.84 1210.28 L2030.43 1210.28 L2031.01 1210.28 L2031.6 1210.28 L2032.19 1210.28 L2032.77 1210.28 L2033.36 1210.28 L2033.94 1210.28 L2034.53 1210.28 L2035.12 1210.28 L2035.7 1210.28 L2036.29 1210.28 L2036.88 1210.28 L2037.46 1210.28 L2038.05 1210.28 L2038.64 1210.28 L2039.22 1210.28 L2039.81 1210.28 L2040.4 1210.28 L2040.98 1210.28 L2041.57 1210.28 L2042.15 1210.28 L2042.74 1210.28 L2043.33 1210.28 L2043.91 1210.28 L2044.5 1210.28 L2045.09 1210.28 L2045.67 1210.28 L2046.26 1210.28 L2046.85 1210.28 L2047.43 1210.28 L2048.02 1210.28 L2048.6 1210.28 L2049.19 1210.28 L2049.78 1210.28 L2050.36 1210.28 L2050.95 1210.28 L2051.54 1210.28 L2052.12 1210.28 L2052.71 1210.28 L2053.3 1210.28 L2053.88 1210.28 L2054.47 1210.28 L2055.06 1210.28 L2055.64 1210.28 L2056.23 1210.28 L2056.81 1210.28 L2057.4 1210.28 L2057.99 1210.28 L2058.57 1210.28 L2059.16 1210.28 L2059.75 1210.28 L2060.33 1210.28 L2060.92 1210.28 L2061.51 1210.28 L2062.09 1210.28 L2062.68 1210.28 L2063.27 1210.28 L2063.85 1210.28 L2064.44 1210.28 L2065.02 1210.28 L2065.61 1210.28 L2066.2 1210.28 L2066.78 1210.28 L2067.37 1210.28 L2067.96 1210.28 L2068.54 1210.28 L2069.13 1210.28 L2069.72 1210.28 L2070.3 1210.28 L2070.89 1210.28 L2071.48 1210.28 L2072.06 1210.28 L2072.65 1210.28 L2073.23 1210.28 L2073.82 1210.28 L2074.41 1210.28 L2074.99 1210.28 L2075.58 1210.28 L2076.17 1210.28 L2076.75 1210.28 L2077.34 1210.28 L2077.93 1210.28 L2078.51 1210.28 L2079.1 1210.28 L2079.68 1210.28 L2080.27 1210.28 L2080.86 1210.28 L2081.44 1210.28 L2082.03 1210.28 L2082.62 1210.28 L2083.2 1210.28 L2083.79 1210.28 L2084.38 1210.28 L2084.96 1210.28 L2085.55 1210.28 L2086.14 1210.28 L2086.72 1210.28 L2087.31 1210.28 L2087.89 1210.28 L2088.48 1210.28 L2089.07 1210.28 L2089.65 1210.28 L2090.24 1210.28 L2090.83 1210.28 L2091.41 1210.28 L2092 1210.28 L2092.59 1210.28 L2093.17 1210.28 L2093.76 1210.28 L2094.35 1210.28 L2094.93 1210.28 L2095.52 1210.28 L2096.1 1210.28 L2096.69 1210.28 L2097.28 1210.28 L2097.86 1210.28 L2098.45 1210.28 L2099.04 1210.28 L2099.62 1210.28 L2100.21 1210.28 L2100.8 1210.28 L2101.38 1210.28 L2101.97 1210.28 L2102.55 1210.28 L2103.14 1210.28 L2103.73 1210.28 L2104.31 1210.28 L2104.9 1210.28 L2105.49 1210.28 L2106.07 1210.28 L2106.66 1210.28 L2107.25 1210.28 L2107.83 1210.28 L2108.42 1210.28 L2109.01 1210.28 L2109.59 1210.28 L2110.18 1210.28 L2110.76 1210.28 L2111.35 1210.28 L2111.94 1210.28 L2112.52 1210.28 L2113.11 1210.28 L2113.7 1210.28 L2114.28 1210.28 L2114.87 1210.28 L2115.46 1210.28 L2116.04 1210.28 L2116.63 1210.28 L2117.22 1210.28 L2117.8 1210.28 L2118.39 1210.28 L2118.97 1210.28 L2119.56 1210.28 L2120.15 1210.28 L2120.73 1210.28 L2121.32 1210.28 L2121.91 1210.28 L2122.49 1210.28 L2123.08 1210.28 L2123.67 1210.28 L2124.25 1210.28 L2124.84 1210.28 L2125.42 1210.28 L2126.01 1210.28 L2126.6 1210.28 L2127.18 1210.28 L2127.77 1210.28 L2128.36 1210.28 L2128.94 1210.28 L2129.53 1210.28 L2130.12 1210.28 L2130.7 1210.28 L2131.29 1210.28 L2131.88 1210.28 L2132.46 1210.28 L2133.05 1210.28 L2133.63 1210.28 L2134.22 1210.28 L2134.81 1210.28 L2135.39 1210.28 L2135.98 1210.28 L2136.57 1210.28 L2137.15 1210.28 L2137.74 1210.28 L2138.33 1210.28 L2138.91 1210.28 L2139.5 1210.28 L2140.09 1210.28 L2140.67 1210.28 L2141.26 1210.28 L2141.84 1210.28 L2142.43 1210.28 L2143.02 1210.28 L2143.6 1210.28 L2144.19 1210.28 L2144.78 1210.28 L2145.36 1210.28 L2145.95 1210.28 L2146.54 1210.28 L2147.12 1210.28 L2147.71 1210.28 L2148.3 1210.28 L2148.88 1210.28 L2149.47 1210.28 L2150.05 1210.28 L2150.64 1210.28 L2151.23 1210.28 L2151.81 1210.28 L2152.4 1210.28 L2152.99 1210.28 L2153.57 1210.28 L2154.16 1210.28 L2154.75 1210.28 L2155.33 1210.28 L2155.92 1210.28 L2156.5 1210.28 L2157.09 1210.28 L2157.68 1210.28 L2158.26 1210.28 L2158.26 1209.78 L2157.68 1209.78 L2157.09 1209.78 L2156.5 1209.78 L2155.92 1209.78 L2155.33 1209.78 L2154.75 1209.78 L2154.16 1209.78 L2153.57 1209.78 L2152.99 1209.78 L2152.4 1209.78 L2151.81 1209.78 L2151.23 1209.78 L2150.64 1209.78 L2150.05 1209.78 L2149.47 1209.78 L2148.88 1209.78 L2148.3 1209.78 L2147.71 1209.78 L2147.12 1209.78 L2146.54 1209.78 L2145.95 1209.78 L2145.36 1209.78 L2144.78 1209.78 L2144.19 1209.78 L2143.6 1209.78 L2143.02 1209.78 L2142.43 1209.78 L2141.84 1209.78 L2141.26 1209.78 L2140.67 1209.78 L2140.09 1209.78 L2139.5 1209.78 L2138.91 1209.78 L2138.33 1209.78 L2137.74 1209.78 L2137.15 1209.78 L2136.57 1209.78 L2135.98 1209.78 L2135.39 1209.78 L2134.81 1209.78 L2134.22 1209.78 L2133.63 1209.78 L2133.05 1209.78 L2132.46 1209.78 L2131.88 1209.78 L2131.29 1209.78 L2130.7 1209.78 L2130.12 1209.78 L2129.53 1209.78 L2128.94 1209.78 L2128.36 1209.78 L2127.77 1209.78 L2127.18 1209.78 L2126.6 1209.78 L2126.01 1209.78 L2125.42 1209.78 L2124.84 1209.78 L2124.25 1209.78 L2123.67 1209.78 L2123.08 1209.78 L2122.49 1209.78 L2121.91 1209.78 L2121.32 1209.78 L2120.73 1209.78 L2120.15 1209.78 L2119.56 1209.78 L2118.97 1209.78 L2118.39 1209.78 L2117.8 1209.78 L2117.22 1209.78 L2116.63 1209.78 L2116.04 1209.78 L2115.46 1209.78 L2114.87 1209.78 L2114.28 1209.78 L2113.7 1209.78 L2113.11 1209.78 L2112.52 1209.78 L2111.94 1209.78 L2111.35 1209.78 L2110.76 1209.78 L2110.18 1209.78 L2109.59 1209.78 L2109.01 1209.78 L2108.42 1209.78 L2107.83 1209.78 L2107.25 1209.78 L2106.66 1209.78 L2106.07 1209.78 L2105.49 1209.78 L2104.9 1209.78 L2104.31 1209.78 L2103.73 1209.78 L2103.14 1209.78 L2102.55 1209.78 L2101.97 1209.78 L2101.38 1209.78 L2100.8 1209.78 L2100.21 1209.78 L2099.62 1209.78 L2099.04 1209.78 L2098.45 1209.78 L2097.86 1209.78 L2097.28 1209.78 L2096.69 1209.78 L2096.1 1209.78 L2095.52 1209.78 L2094.93 1209.78 L2094.35 1209.78 L2093.76 1209.78 L2093.17 1209.78 L2092.59 1209.78 L2092 1209.78 L2091.41 1209.78 L2090.83 1209.78 L2090.24 1209.78 L2089.65 1209.78 L2089.07 1209.78 L2088.48 1209.78 L2087.89 1209.78 L2087.31 1209.78 L2086.72 1209.78 L2086.14 1209.78 L2085.55 1209.78 L2084.96 1209.78 L2084.38 1209.78 L2083.79 1209.78 L2083.2 1209.78 L2082.62 1209.78 L2082.03 1209.78 L2081.44 1209.78 L2080.86 1209.78 L2080.27 1209.78 L2079.68 1209.78 L2079.1 1209.78 L2078.51 1209.78 L2077.93 1209.78 L2077.34 1209.78 L2076.75 1209.78 L2076.17 1209.78 L2075.58 1209.78 L2074.99 1209.78 L2074.41 1209.78 L2073.82 1209.78 L2073.23 1209.78 L2072.65 1209.78 L2072.06 1209.78 L2071.48 1209.78 L2070.89 1209.78 L2070.3 1209.78 L2069.72 1209.78 L2069.13 1209.78 L2068.54 1209.78 L2067.96 1209.78 L2067.37 1209.78 L2066.78 1209.78 L2066.2 1209.78 L2065.61 1209.78 L2065.02 1209.78 L2064.44 1209.78 L2063.85 1209.78 L2063.27 1209.78 L2062.68 1209.78 L2062.09 1209.78 L2061.51 1209.78 L2060.92 1209.78 L2060.33 1209.78 L2059.75 1209.78 L2059.16 1209.78 L2058.57 1209.78 L2057.99 1209.78 L2057.4 1209.78 L2056.81 1209.78 L2056.23 1209.78 L2055.64 1209.78 L2055.06 1209.78 L2054.47 1209.78 L2053.88 1209.78 L2053.3 1209.78 L2052.71 1209.78 L2052.12 1209.78 L2051.54 1209.78 L2050.95 1209.78 L2050.36 1209.78 L2049.78 1209.78 L2049.19 1209.78 L2048.6 1209.78 L2048.02 1209.78 L2047.43 1209.78 L2046.85 1209.78 L2046.26 1209.78 L2045.67 1209.78 L2045.09 1209.78 L2044.5 1209.78 L2043.91 1209.78 L2043.33 1209.78 L2042.74 1209.78 L2042.15 1209.78 L2041.57 1209.78 L2040.98 1209.78 L2040.4 1209.78 L2039.81 1209.78 L2039.22 1209.78 L2038.64 1209.78 L2038.05 1209.78 L2037.46 1209.78 L2036.88 1209.78 L2036.29 1209.78 L2035.7 1209.78 L2035.12 1209.78 L2034.53 1209.78 L2033.94 1209.78 L2033.36 1209.78 L2032.77 1209.78 L2032.19 1209.78 L2031.6 1209.78 L2031.01 1209.78 L2030.43 1209.78 L2029.84 1209.78 L2029.25 1209.78 L2028.67 1209.78 L2028.08 1209.78 L2027.49 1209.78 L2026.91 1209.78 L2026.32 1209.78 L2025.73 1209.78 L2025.15 1209.78 L2024.56 1209.78 L2023.98 1209.78 L2023.39 1209.78 L2022.8 1209.78 L2022.22 1209.78 L2021.63 1209.78 L2021.04 1209.78 L2020.46 1209.78 L2019.87 1209.78 L2019.28 1209.78 L2018.7 1209.78 L2018.11 1209.78 L2017.53 1209.78 L2016.94 1209.78 L2016.35 1209.78 L2015.77 1209.78 L2015.18 1209.78 L2014.59 1209.78 L2014.01 1209.78 L2013.42 1209.78 L2012.83 1209.78 L2012.25 1209.78 L2011.66 1209.78 L2011.07 1209.78 L2010.49 1209.78 L2009.9 1209.78 L2009.32 1209.78 L2008.73 1209.78 L2008.14 1209.78 L2007.56 1209.78 L2006.97 1209.78 L2006.38 1209.78 L2005.8 1209.78 L2005.21 1209.78 L2004.62 1209.78 L2004.04 1209.78 L2003.45 1209.78 L2002.86 1209.78 L2002.28 1209.78 L2001.69 1209.78 L2001.11 1209.78 L2000.52 1209.78 L1999.93 1209.78 L1999.35 1209.78 L1998.76 1209.78 L1998.17 1209.78 L1997.59 1209.78 L1997 1209.78 L1996.41 1209.78 L1995.83 1209.78 L1995.24 1209.78 L1994.65 1209.78 L1994.07 1209.78 L1993.48 1209.78 L1992.9 1209.78 L1992.31 1209.78 L1991.72 1209.78 L1991.14 1209.78 L1990.55 1209.78 L1989.96 1209.78 L1989.38 1209.78 L1988.79 1209.78 L1988.2 1209.78 L1987.62 1209.78 L1987.03 1209.78 L1986.45 1209.78 L1985.86 1209.78 L1985.27 1209.78 L1984.69 1209.78 L1984.1 1209.78 L1983.51 1209.78 L1982.93 1209.78 L1982.34 1209.78 L1981.75 1209.78 L1981.17 1209.78 L1980.58 1209.78 L1979.99 1209.78 L1979.41 1209.78 L1978.82 1209.78 L1978.24 1209.78 L1977.65 1209.78 L1977.06 1209.78 L1976.48 1209.78 L1975.89 1209.78 L1975.3 1209.78 L1974.72 1209.78 L1974.13 1209.78 L1973.54 1209.78 L1972.96 1209.78 L1972.37 1209.78 L1971.78 1209.78 L1971.2 1209.78 L1970.61 1209.78 L1970.03 1209.78 L1969.44 1209.78 L1968.85 1209.78 L1968.27 1209.78 L1967.68 1209.78 L1967.09 1209.78 L1966.51 1209.78 L1965.92 1209.78 L1965.33 1209.78 L1964.75 1209.78 L1964.16 1209.78 L1963.58 1209.78 L1962.99 1209.78 L1962.4 1209.78 L1961.82 1209.78 L1961.23 1209.78 L1960.64 1209.78 L1960.06 1209.78 L1959.47 1209.78 L1958.88 1209.78 L1958.3 1209.78 L1957.71 1209.78 L1957.12 1209.78 L1956.54 1209.78 L1955.95 1209.78 L1955.37 1209.78 L1954.78 1209.78 L1954.19 1209.78 L1953.61 1209.78 L1953.02 1209.78 L1952.43 1209.78 L1951.85 1209.78 L1951.26 1209.78 L1950.67 1209.78 L1950.09 1209.78 L1949.5 1209.78 L1948.91 1209.78 L1948.33 1209.78 L1947.74 1209.78 L1947.16 1209.78 L1946.57 1209.78 L1945.98 1209.78 L1945.4 1209.78 L1944.81 1209.78 L1944.22 1209.78 L1943.64 1209.78 L1943.05 1209.78 L1942.46 1209.78 L1941.88 1209.78 L1941.29 1209.78 L1940.71 1209.78 L1940.12 1209.78 L1939.53 1209.78 L1938.95 1209.78 L1938.36 1209.78 L1937.77 1209.78 L1937.19 1209.78 L1936.6 1209.78 L1936.01 1209.78 L1935.43 1209.78 L1934.84 1209.78 L1934.25 1209.78 L1933.67 1209.78 L1933.08 1209.78 L1932.5 1209.78 L1931.91 1209.78 L1931.32 1209.78 L1930.74 1209.78 L1930.15 1209.78 L1929.56 1209.78 L1928.98 1209.78 L1928.39 1209.78 L1927.8 1209.78 L1927.22 1209.78 L1926.63 1209.78 L1926.04 1209.78 L1925.46 1209.78 L1924.87 1209.78 L1924.29 1209.78 L1923.7 1209.78 L1923.11 1209.78 L1922.53 1209.78 L1921.94 1209.78 L1921.35 1209.78 L1920.77 1209.78 L1920.18 1209.78 L1919.59 1209.78 L1919.01 1209.78 L1918.42 1209.78 L1917.83 1209.78 L1917.25 1209.78 L1916.66 1209.78 L1916.08 1209.78 L1915.49 1209.78 L1914.9 1209.78 L1914.32 1209.78 L1913.73 1209.78 L1913.14 1209.78 L1912.56 1209.78 L1911.97 1209.78 L1911.38 1209.78 L1910.8 1209.78 L1910.21 1209.78 L1909.63 1209.78 L1909.04 1209.78 L1908.45 1209.78 L1907.87 1209.78 L1907.28 1209.78 L1906.69 1209.78 L1906.11 1209.78 L1905.52 1209.78 L1904.93 1209.78 L1904.35 1209.78 L1903.76 1209.78 L1903.17 1209.78 L1902.59 1209.78 L1902 1209.78 L1901.42 1209.78 L1900.83 1209.78 L1900.24 1209.78 L1899.66 1209.78 L1899.07 1209.78 L1898.48 1209.78 L1897.9 1209.78 L1897.31 1209.78 L1896.72 1209.78 L1896.14 1209.78 L1895.55 1209.78 L1894.96 1209.78 L1894.38 1209.78 L1893.79 1209.78 L1893.21 1209.78 L1892.62 1209.78 L1892.03 1209.78 L1891.45 1209.78 L1890.86 1209.78 L1890.27 1209.78 L1889.69 1209.78 L1889.1 1209.78 L1888.51 1209.78 L1887.93 1209.78 L1887.34 1209.78 L1886.76 1209.78 L1886.17 1209.78 L1885.58 1209.78 L1885 1209.78 L1884.41 1209.78 L1883.82 1209.78 L1883.24 1209.78 L1882.65 1209.78 L1882.06 1209.78 L1881.48 1209.78 L1880.89 1209.78 L1880.3 1209.78 L1879.72 1209.78 L1879.13 1209.78 L1878.55 1209.78 L1877.96 1209.78 L1877.37 1209.78 L1876.79 1209.78 L1876.2 1209.78 L1875.61 1209.78 L1875.03 1209.78 L1874.44 1209.78 L1873.85 1209.78 L1873.27 1209.78 L1872.68 1209.78 L1872.09 1209.78 L1871.51 1209.78 L1870.92 1209.78 L1870.34 1209.78 L1869.75 1209.78 L1869.16 1209.78 L1868.58 1209.78 L1867.99 1209.78 L1867.4 1209.78 L1866.82 1209.78 L1866.23 1209.78 L1865.64 1209.78 L1865.06 1209.78 L1864.47 1209.78 L1863.88 1209.78 L1863.3 1209.78 L1862.71 1209.78 L1862.13 1209.78 L1861.54 1209.78 L1860.95 1209.78 L1860.37 1209.78 L1859.78 1209.78 L1859.19 1209.78 L1858.61 1209.78 L1858.02 1209.78 L1857.43 1209.78 L1856.85 1209.78 L1856.26 1209.78 L1855.68 1209.78 L1855.09 1209.78 L1854.5 1209.78 L1853.92 1209.78 L1853.33 1209.78 L1852.74 1209.78 L1852.16 1209.78 L1851.57 1209.78 L1850.98 1209.78 L1850.4 1209.78 L1849.81 1209.78 L1849.22 1209.78 L1848.64 1209.78 L1848.05 1209.78 L1847.47 1209.78 L1846.88 1209.78 L1846.29 1209.78 L1845.71 1209.78 L1845.12 1209.78 L1844.53 1209.78 L1843.95 1209.78 L1843.36 1209.78 L1842.77 1209.78 L1842.19 1209.78 L1841.6 1209.78 L1841.01 1209.78 L1840.43 1209.78 L1839.84 1209.78 L1839.26 1209.78 L1838.67 1209.78 L1838.08 1209.78 L1837.5 1209.78 L1836.91 1209.78 L1836.32 1209.78 L1835.74 1209.78 L1835.15 1209.78 L1834.56 1209.78 L1833.98 1209.78 L1833.39 1209.78 L1832.81 1209.78 L1832.22 1209.78 L1831.63 1209.78 L1831.05 1209.78 L1830.46 1209.78 L1829.87 1209.78 L1829.29 1209.78 L1828.7 1209.78 L1828.11 1209.78 L1827.53 1209.78 L1826.94 1209.78 L1826.35 1209.78 L1825.77 1209.78 L1825.18 1209.78 L1824.6 1209.78 L1824.01 1209.78 L1823.42 1209.78 L1822.84 1209.78 L1822.25 1209.78 L1821.66 1209.78 L1821.08 1209.78 L1820.49 1209.78 L1819.9 1209.78 L1819.32 1209.78 L1818.73 1209.78 L1818.14 1209.78 L1817.56 1209.78 L1816.97 1209.78 L1816.39 1209.78 L1815.8 1209.78 L1815.21 1209.78 L1814.63 1209.78 L1814.04 1209.78 L1813.45 1209.78 L1812.87 1209.78 L1812.28 1209.78 L1811.69 1209.78 L1811.11 1209.78 L1810.52 1209.78 L1809.94 1209.78 L1809.35 1209.78 L1808.76 1209.78 L1808.18 1209.78 L1807.59 1209.78 L1807 1209.78 L1806.42 1209.78 L1805.83 1209.78 L1805.24 1209.78 L1804.66 1209.78 L1804.07 1209.78 L1803.48 1209.78 L1802.9 1209.78 L1802.31 1209.78 L1801.73 1209.78 L1801.14 1209.78 L1800.55 1209.78 L1799.97 1209.78 L1799.38 1209.78 L1798.79 1209.78 L1798.21 1209.78 L1797.62 1209.78 L1797.03 1209.78 L1796.45 1209.78 L1795.86 1209.78 L1795.27 1209.78 L1794.69 1209.78 L1794.1 1209.78 L1793.52 1209.78 L1792.93 1209.78 L1792.34 1209.78 L1791.76 1209.78 L1791.17 1209.78 L1790.58 1209.78 L1790 1209.78 L1789.41 1209.78 L1788.82 1209.78 L1788.24 1209.78 L1787.65 1209.78 L1787.06 1209.78 L1786.48 1209.78 L1785.89 1209.78 L1785.31 1209.78 L1784.72 1209.78 L1784.13 1209.78 L1783.55 1209.78 L1782.96 1209.78 L1782.37 1209.78 L1781.79 1209.78 L1781.2 1209.78 L1780.61 1209.78 L1780.03 1209.78 L1779.44 1209.78 L1778.86 1209.78 L1778.27 1209.78 L1777.68 1209.78 L1777.1 1209.78 L1776.51 1209.78 L1775.92 1209.78 L1775.34 1209.78 L1774.75 1209.78 L1774.16 1209.78 L1773.58 1209.78 L1772.99 1209.78 L1772.4 1209.78 L1771.82 1209.78 L1771.23 1209.78 L1770.65 1209.78 L1770.06 1209.78 L1769.47 1209.78 L1768.89 1209.78 L1768.3 1209.78 L1767.71 1209.78 L1767.13 1209.78 L1766.54 1209.78 L1765.95 1209.78 L1765.37 1209.78 L1764.78 1209.78 L1764.19 1209.78 L1763.61 1209.78 L1763.02 1209.78 L1762.44 1209.78 L1761.85 1209.78 L1761.26 1209.78 L1760.68 1209.78 L1760.09 1209.78 L1759.5 1209.78 L1758.92 1209.78 L1758.33 1209.78 L1757.74 1209.78 L1757.16 1209.78 L1756.57 1209.78 L1755.99 1209.78 L1755.4 1209.78 L1754.81 1209.78 L1754.23 1209.78 L1753.64 1209.78 L1753.05 1209.78 L1752.47 1209.78 L1751.88 1209.78 L1751.29 1209.78 L1750.71 1209.78 L1750.12 1209.78 L1749.53 1209.78 L1748.95 1209.78 L1748.36 1209.78 L1747.78 1209.78 L1747.19 1209.78 L1746.6 1209.78 L1746.02 1209.78 L1745.43 1209.78 L1744.84 1209.78 L1744.26 1209.78 L1743.67 1209.78 L1743.08 1209.78 L1742.5 1209.78 L1741.91 1209.78 L1741.32 1209.78 L1740.74 1209.78 L1740.15 1209.78 L1739.57 1209.78 L1738.98 1209.78 L1738.39 1209.78 L1737.81 1209.78 L1737.22 1209.78 L1736.63 1209.78 L1736.05 1209.78 L1735.46 1209.78 L1734.87 1209.78 L1734.29 1209.78 L1733.7 1209.78 L1733.11 1209.78 L1732.53 1209.78 L1731.94 1209.78 L1731.36 1209.78 L1730.77 1209.78 L1730.18 1209.78 L1729.6 1209.78 L1729.01 1209.78 L1728.42 1209.78 L1727.84 1209.78 L1727.25 1209.78 L1726.66 1209.78 L1726.08 1209.78 L1725.49 1209.78 L1724.91 1209.78 L1724.32 1209.78 L1723.73 1209.78 L1723.15 1209.78 L1722.56 1209.78 L1721.97 1209.78 L1721.39 1209.78 L1720.8 1209.78 L1720.21 1209.78 L1719.63 1209.78 L1719.04 1209.78 L1718.45 1209.78 L1717.87 1209.78 L1717.28 1209.78 L1716.7 1209.78 L1716.11 1209.78 L1715.52 1209.78 L1714.94 1209.78 L1714.35 1209.78 L1713.76 1209.78 L1713.18 1209.78 L1712.59 1209.78 L1712 1209.78 L1711.42 1209.78 L1710.83 1209.78 L1710.24 1209.78 L1709.66 1209.78 L1709.07 1209.78 L1708.49 1209.78 L1707.9 1209.78 L1707.31 1209.78 L1706.73 1209.78 L1706.14 1209.78 L1705.55 1209.78 L1704.97 1209.78 L1704.38 1209.78 L1703.79 1209.78 L1703.21 1209.78 L1702.62 1209.78 L1702.04 1209.78 L1701.45 1209.78 L1700.86 1209.78 L1700.28 1209.78 L1699.69 1209.78 L1699.1 1209.78 L1698.52 1209.78 L1697.93 1209.78 L1697.34 1209.78 L1696.76 1209.78 L1696.17 1209.78 L1695.58 1209.78 L1695 1209.78 L1694.41 1209.78 L1693.83 1209.78 L1693.24 1209.78 L1692.65 1209.78 L1692.07 1209.78 L1691.48 1209.78 L1690.89 1209.78 L1690.31 1209.78 L1689.72 1209.78 L1689.13 1209.78 L1688.55 1209.78 L1687.96 1209.78 L1687.37 1209.78 L1686.79 1209.78 L1686.2 1209.78 L1685.62 1209.78 L1685.03 1209.78 L1684.44 1209.78 L1683.86 1209.78 L1683.27 1209.78 L1682.68 1209.78 L1682.1 1209.78 L1681.51 1209.78 L1680.92 1209.78 L1680.34 1209.78 L1679.75 1209.78 L1679.17 1209.78 L1678.58 1209.78 L1677.99 1209.78 L1677.41 1209.78 L1676.82 1209.78 L1676.23 1209.78 L1675.65 1209.78 L1675.06 1209.78 L1674.47 1209.78 L1673.89 1209.78 L1673.3 1209.78 L1672.71 1209.78 L1672.13 1209.78 L1671.54 1209.78 L1670.96 1209.78 L1670.37 1209.78 L1669.78 1209.78 L1669.2 1209.78 L1668.61 1209.78 L1668.02 1209.78 L1667.44 1209.78 L1666.85 1209.78 L1666.26 1209.78 L1665.68 1209.78 L1665.09 1209.78 L1664.5 1209.78 L1663.92 1209.78 L1663.33 1209.78 L1662.75 1209.78 L1662.16 1209.78 L1661.57 1209.78 L1660.99 1209.78 L1660.4 1209.78 L1659.81 1209.78 L1659.23 1209.78 L1658.64 1209.78 L1658.05 1209.78 L1657.47 1209.78 L1656.88 1209.78 L1656.29 1209.78 L1655.71 1209.78 L1655.12 1209.78 L1654.54 1209.78 L1653.95 1209.78 L1653.36 1209.78 L1652.78 1209.78 L1652.19 1209.78 L1651.6 1209.78 L1651.02 1209.78 L1650.43 1209.78 L1649.84 1209.78 L1649.26 1209.78 L1648.67 1209.78 L1648.09 1209.78 L1647.5 1209.78 L1646.91 1209.78 L1646.33 1209.78 L1645.74 1209.78 L1645.15 1209.78 L1644.57 1209.78 L1643.98 1209.78 L1643.39 1209.78 L1642.81 1209.78 L1642.22 1209.78 L1641.63 1209.78 L1641.05 1209.78 L1640.46 1209.78 L1639.88 1209.78 L1639.29 1209.78 L1638.7 1209.78 L1638.12 1209.78 L1637.53 1209.78 L1636.94 1209.78 L1636.36 1209.78 L1635.77 1209.78 L1635.18 1209.78 L1634.6 1209.78 L1634.01 1209.78 L1633.42 1209.78 L1632.84 1209.78 L1632.25 1209.78 L1631.67 1209.78 L1631.08 1209.78 L1630.49 1209.78 L1629.91 1209.78 L1629.32 1209.78 L1628.73 1209.78 L1628.15 1209.78 L1627.56 1209.78 L1626.97 1209.78 L1626.39 1209.78 L1625.8 1209.78 L1625.22 1209.78 L1624.63 1209.78 L1624.04 1209.78 L1623.46 1209.78 L1622.87 1209.78 L1622.28 1209.78 L1621.7 1209.78 L1621.11 1209.78 L1620.52 1209.78 L1619.94 1209.78 L1619.35 1209.78 L1618.76 1209.78 L1618.18 1209.78 L1617.59 1209.78 L1617.01 1209.78 L1616.42 1209.78 L1615.83 1209.78 L1615.25 1209.78 L1614.66 1209.78 L1614.07 1209.78 L1613.49 1209.78 L1612.9 1209.78 L1612.31 1209.78 L1611.73 1209.78 L1611.14 1209.78 L1610.55 1209.78 L1609.97 1209.78 L1609.38 1209.78 L1608.8 1209.78 L1608.21 1209.78 L1607.62 1209.78 L1607.04 1209.78 L1606.45 1209.78 L1605.86 1209.78 L1605.28 1209.78 L1604.69 1209.78 L1604.1 1209.78 L1603.52 1209.78 L1602.93 1209.78 L1602.34 1209.78 L1601.76 1209.78 L1601.17 1209.78 L1600.59 1209.78 L1600 1209.78 L1599.41 1209.78 L1598.83 1209.78 L1598.24 1209.78 L1597.65 1209.78 L1597.07 1209.78 L1596.48 1209.78 L1595.89 1209.78 L1595.31 1209.78 L1594.72 1209.78 L1594.14 1209.78 L1593.55 1209.78 L1592.96 1209.78 L1592.38 1209.78 L1591.79 1209.78 L1591.2 1209.78 L1590.62 1209.78 L1590.03 1209.78 L1589.44 1209.78 L1588.86 1209.78 L1588.27 1209.78 L1587.68 1209.78 L1587.1 1209.78 L1586.51 1209.78 L1585.93 1209.78 L1585.34 1209.78 L1584.75 1209.78 L1584.17 1209.78 L1583.58 1209.78 L1582.99 1209.78 L1582.41 1209.78 L1581.82 1209.78 L1581.23 1209.78 L1580.65 1209.78 L1580.06 1209.78 L1579.47 1209.78 L1578.89 1209.78 L1578.3 1209.78 L1577.72 1209.78 L1577.13 1209.78 L1576.54 1209.78 L1575.96 1209.78 L1575.37 1209.78 L1574.78 1209.78 L1574.2 1209.78 L1573.61 1209.78 L1573.02 1209.78 L1572.44 1209.78 L1571.85 1209.78 L1571.27 1209.78 L1570.68 1209.78 L1570.09 1209.78 L1569.51 1209.78 L1568.92 1209.78 L1568.33 1209.78 L1567.75 1209.78 L1567.16 1209.78 L1566.57 1209.78 L1565.99 1209.78 L1565.4 1209.78 L1564.81 1209.78 L1564.23 1209.78 L1563.64 1209.78 L1563.06 1209.78 L1562.47 1209.78 L1561.88 1209.78 L1561.3 1209.78 L1560.71 1209.78 L1560.12 1209.78 L1559.54 1209.78 L1558.95 1209.78 L1558.36 1209.78 L1557.78 1209.78 L1557.19 1209.78 L1556.6 1209.78 L1556.02 1209.78 L1555.43 1209.78 L1554.85 1209.78 L1554.26 1209.78 L1553.67 1209.78 L1553.09 1209.78 L1552.5 1209.78 L1551.91 1209.78 L1551.33 1209.78 L1550.74 1209.78 L1550.15 1209.78 L1549.57 1209.78 L1548.98 1209.78 L1548.4 1209.78 L1547.81 1209.78 L1547.22 1209.78 L1546.64 1209.78 L1546.05 1209.78 L1545.46 1209.78 L1544.88 1209.78 L1544.29 1209.78 L1543.7 1209.78 L1543.12 1209.78 L1542.53 1209.78 L1541.94 1209.78 L1541.36 1209.78 L1540.77 1209.78 L1540.19 1209.78 L1539.6 1209.78 L1539.01 1209.78 L1538.43 1209.78 L1537.84 1209.78 L1537.25 1209.78 L1536.67 1209.78 L1536.08 1209.78 L1535.49 1209.78 L1534.91 1209.78 L1534.32 1209.78 L1533.73 1209.78 L1533.15 1209.78 L1532.56 1209.78 L1531.98 1209.78 L1531.39 1209.78 L1530.8 1209.78 L1530.22 1209.78 L1529.63 1209.78 L1529.04 1209.78 L1528.46 1209.78 L1527.87 1209.78 L1527.28 1209.78 L1526.7 1209.78 L1526.11 1209.78 L1525.52 1209.78 L1524.94 1209.78 L1524.35 1209.78 L1523.77 1209.78 L1523.18 1209.78 L1522.59 1209.78 L1522.01 1209.78 L1521.42 1209.78 L1520.83 1209.78 L1520.25 1209.78 L1519.66 1209.78 L1519.07 1209.78 L1518.49 1209.78 L1517.9 1209.78 L1517.32 1209.78 L1516.73 1209.78 L1516.14 1209.78 L1515.56 1209.78 L1514.97 1209.78 L1514.38 1209.78 L1513.8 1209.78 L1513.21 1209.78 L1512.62 1209.78 L1512.04 1209.78 L1511.45 1209.78 L1510.86 1209.78 L1510.28 1209.78 L1509.69 1209.78 L1509.11 1209.78 L1508.52 1209.78 L1507.93 1209.78 L1507.35 1209.78 L1506.76 1209.78 L1506.17 1209.78 L1505.59 1209.78 L1505 1209.78 L1504.41 1209.78 L1503.83 1209.78 L1503.24 1209.78 L1502.65 1209.78 L1502.07 1209.78 L1501.48 1209.78 L1500.9 1209.78 L1500.31 1209.78 L1499.72 1209.78 L1499.14 1209.78 L1498.55 1209.78 L1497.96 1209.78 L1497.38 1209.78 L1496.79 1209.78 L1496.2 1209.78 L1495.62 1209.78 L1495.03 1209.78 L1494.45 1209.78 L1493.86 1209.78 L1493.27 1209.78 L1492.69 1209.78 L1492.1 1209.78 L1491.51 1209.78 L1490.93 1209.78 L1490.34 1209.78 L1489.75 1209.78 L1489.17 1209.78 L1488.58 1209.78 L1487.99 1209.78 L1487.41 1209.78 L1486.82 1209.78 L1486.24 1209.78 L1485.65 1209.78 L1485.06 1209.78 L1484.48 1209.78 L1483.89 1209.78 L1483.3 1209.78 L1482.72 1209.78 L1482.13 1209.78 L1481.54 1209.78 L1480.96 1209.78 L1480.37 1209.78 L1479.78 1209.78 L1479.2 1209.78 L1478.61 1209.78 L1478.03 1209.78 L1477.44 1209.78 L1476.85 1209.78 L1476.27 1209.78 L1475.68 1209.78 L1475.09 1209.78 L1474.51 1209.78 L1473.92 1209.78 L1473.33 1209.78 L1472.75 1209.78 L1472.16 1209.78 L1471.57 1209.78 L1470.99 1209.78 L1470.4 1209.78 L1469.82 1209.78 L1469.23 1209.78 L1468.64 1209.78 L1468.06 1209.78 L1467.47 1209.78 L1466.88 1209.78 L1466.3 1209.78 L1465.71 1209.78 L1465.12 1209.78 L1464.54 1209.78 L1463.95 1209.78 L1463.37 1209.78 L1462.78 1209.78 L1462.19 1209.78 L1461.61 1209.78 L1461.02 1209.78 L1460.43 1209.78 L1459.85 1209.78 L1459.26 1209.78 L1458.67 1209.78 L1458.09 1209.78 L1457.5 1209.78 L1456.91 1209.78 L1456.33 1209.78 L1455.74 1209.78 L1455.16 1209.78 L1454.57 1209.78 L1453.98 1209.78 L1453.4 1209.78 L1452.81 1209.78 L1452.22 1209.78 L1451.64 1209.78 L1451.05 1209.78 L1450.46 1209.78 L1449.88 1209.78 L1449.29 1209.78 L1448.7 1209.78 L1448.12 1209.78 L1447.53 1209.78 L1446.95 1209.78 L1446.36 1209.78 L1445.77 1209.78 L1445.19 1209.78 L1444.6 1209.78 L1444.01 1209.78 L1443.43 1209.78 L1442.84 1209.78 L1442.25 1209.78 L1441.67 1209.78 L1441.08 1209.78 L1440.5 1209.78 L1439.91 1209.78 L1439.32 1209.78 L1438.74 1209.78 L1438.15 1209.78 L1437.56 1209.78 L1436.98 1209.78 L1436.39 1209.78 L1435.8 1209.78 L1435.22 1209.78 L1434.63 1209.78 L1434.04 1209.78 L1433.46 1209.78 L1432.87 1209.78 L1432.29 1209.78 L1431.7 1209.78 L1431.11 1209.78 L1430.53 1209.78 L1429.94 1209.78 L1429.35 1209.78 L1428.77 1209.78 L1428.18 1209.78 L1427.59 1209.78 L1427.01 1209.78 L1426.42 1209.78 L1425.83 1209.78 L1425.25 1209.78 L1424.66 1209.78 L1424.08 1209.78 L1423.49 1209.78 L1422.9 1209.78 L1422.32 1209.78 L1421.73 1209.78 L1421.14 1209.78 L1420.56 1209.78 L1419.97 1209.78 L1419.38 1209.78 L1418.8 1209.78 L1418.21 1209.78 L1417.63 1209.78 L1417.04 1209.78 L1416.45 1209.78 L1415.87 1209.78 L1415.28 1209.78 L1414.69 1209.78 L1414.11 1209.78 L1413.52 1209.78 L1412.93 1209.78 L1412.35 1209.78 L1411.76 1209.78 L1411.17 1209.78 L1410.59 1209.78 L1410 1209.78 L1409.42 1209.78 L1408.83 1209.78 L1408.24 1209.78 L1407.66 1209.78 L1407.07 1209.78 L1406.48 1209.78 L1405.9 1209.78 L1405.31 1209.78 L1404.72 1209.78 L1404.14 1209.78 L1403.55 1209.78 L1402.96 1209.78 L1402.38 1209.78 L1401.79 1209.78 L1401.21 1209.78 L1400.62 1209.78 L1400.03 1209.78 L1399.45 1209.78 L1398.86 1209.78 L1398.27 1209.78 L1397.69 1209.78 L1397.1 1209.78 L1396.51 1209.78 L1395.93 1209.78 L1395.34 1209.78 L1394.75 1209.78 L1394.17 1209.78 L1393.58 1209.78 L1393 1209.78 L1392.41 1209.78 L1391.82 1209.78 L1391.24 1209.78 L1390.65 1209.78 L1390.06 1209.78 L1389.48 1209.78 L1388.89 1209.78 L1388.3 1209.78 L1387.72 1209.78 L1387.13 1209.78 L1386.55 1209.78 L1385.96 1209.78 L1385.37 1209.78 L1384.79 1209.78 L1384.2 1209.78 L1383.61 1209.78 L1383.03 1209.78 L1382.44 1209.78 L1381.85 1209.78 L1381.27 1209.78 L1380.68 1209.78 L1380.09 1209.78 L1379.51 1209.78 L1378.92 1209.78 L1378.34 1209.78 L1377.75 1209.78 L1377.16 1209.78 L1376.58 1209.78 L1375.99 1209.78 L1375.4 1209.78 L1374.82 1209.78 L1374.23 1209.78 L1373.64 1209.78 L1373.06 1209.78 L1372.47 1209.78 L1371.88 1209.78 L1371.3 1209.78 L1370.71 1209.78 L1370.13 1209.78 L1369.54 1209.78 L1368.95 1209.78 L1368.37 1209.78 L1367.78 1209.78 L1367.19 1209.78 L1366.61 1209.78 L1366.02 1209.78 L1365.43 1209.78 L1364.85 1209.78 L1364.26 1209.78 L1363.68 1209.78 L1363.09 1209.78 L1362.5 1209.78 L1361.92 1209.78 L1361.33 1209.78 L1360.74 1209.78 L1360.16 1209.78 L1359.57 1209.78 L1358.98 1209.78 L1358.4 1209.78 L1357.81 1209.78 L1357.22 1209.78 L1356.64 1209.78 L1356.05 1209.78 L1355.47 1209.78 L1354.88 1209.78 L1354.29 1209.78 L1353.71 1209.78 L1353.12 1209.78 L1352.53 1209.78 L1351.95 1209.78 L1351.36 1209.78 L1350.77 1209.78 L1350.19 1209.78 L1349.6 1209.78 L1349.01 1209.78 L1348.43 1209.78 L1347.84 1209.78 L1347.26 1209.78 L1346.67 1209.78 L1346.08 1209.78 L1345.5 1209.78 L1344.91 1209.78 L1344.32 1209.78 L1343.74 1209.78 L1343.15 1209.78 L1342.56 1209.78 L1341.98 1209.78 L1341.39 1209.78 L1340.8 1209.78 L1340.22 1209.78 L1339.63 1209.78 L1339.05 1209.78 L1338.46 1209.78 L1337.87 1209.78 L1337.29 1209.78 L1336.7 1209.78 L1336.11 1209.78 L1335.53 1209.78 L1334.94 1209.78 L1334.35 1209.78 L1333.77 1209.78 L1333.18 1209.78 L1332.6 1209.78 L1332.01 1209.78 L1331.42 1209.78 L1330.84 1209.78 L1330.25 1209.78 L1329.66 1209.78 L1329.08 1209.78 L1328.49 1209.78 L1327.9 1209.78 L1327.32 1209.78 L1326.73 1209.78 L1326.14 1209.78 L1325.56 1209.78 L1324.97 1209.78 L1324.39 1209.78 L1323.8 1209.78 L1323.21 1209.78 L1322.63 1209.78 L1322.04 1209.78 L1321.45 1209.78 L1320.87 1209.78 L1320.28 1209.78 L1319.69 1209.78 L1319.11 1209.78 L1318.52 1209.78 L1317.93 1209.78 L1317.35 1209.78 L1316.76 1209.78 L1316.18 1209.78 L1315.59 1209.78 L1315 1209.78 L1314.42 1209.78 L1313.83 1209.78 L1313.24 1209.78 L1312.66 1209.78 L1312.07 1209.78 L1311.48 1209.78 L1310.9 1209.78 L1310.31 1209.78 L1309.73 1209.78 L1309.14 1209.78 L1308.55 1209.78 L1307.97 1209.78 L1307.38 1209.78 L1306.79 1209.78 L1306.21 1209.78 L1305.62 1209.78 L1305.03 1209.78 L1304.45 1209.78 L1303.86 1209.78 L1303.27 1209.78 L1302.69 1209.78 L1302.1 1209.78 L1301.52 1209.78 L1300.93 1209.78 L1300.34 1209.78 L1299.76 1209.78 L1299.17 1209.78 L1298.58 1209.78 L1298 1209.78 L1297.41 1209.78 L1296.82 1209.78 L1296.24 1209.78 L1295.65 1209.78 L1295.06 1209.78 L1294.48 1209.78 L1293.89 1209.78 L1293.31 1209.78 L1292.72 1209.78 L1292.13 1209.78 L1291.55 1209.78 L1290.96 1209.78 L1290.37 1209.78 L1289.79 1209.78 L1289.2 1209.78 L1288.61 1209.78 L1288.03 1209.78 L1287.44 1209.78 L1286.86 1209.78 L1286.27 1209.78 L1285.68 1209.78 L1285.1 1209.78 L1284.51 1209.78 L1283.92 1209.78 L1283.34 1209.78 L1282.75 1209.78 L1282.16 1209.78 L1281.58 1209.78 L1280.99 1209.78 L1280.4 1209.78 L1279.82 1209.78 L1279.23 1209.78 L1278.65 1209.78 L1278.06 1209.78 L1277.47 1209.78 L1276.89 1209.78 L1276.3 1209.78 L1275.71 1209.78 L1275.13 1209.78 L1274.54 1209.78 L1273.95 1209.78 L1273.37 1209.78 L1272.78 1209.78 L1272.19 1209.78 L1271.61 1209.78 L1271.02 1209.78 L1270.44 1209.78 L1269.85 1209.78 L1269.26 1209.78 L1268.68 1209.78 L1268.09 1209.78 L1267.5 1209.78 L1266.92 1209.78 L1266.33 1209.78 L1265.74 1209.78 L1265.16 1209.78 L1264.57 1209.78 L1263.98 1209.78 L1263.4 1209.78 L1262.81 1209.78 L1262.23 1209.78 L1261.64 1209.78 L1261.05 1209.78 L1260.47 1209.78 L1259.88 1209.78 L1259.29 1209.78 L1258.71 1209.78 L1258.12 1209.78 L1257.53 1209.78 L1256.95 1209.78 L1256.36 1209.78 L1255.78 1209.78 L1255.19 1209.78 L1254.6 1209.78 L1254.02 1209.78 L1253.43 1209.78 L1252.84 1209.78 L1252.26 1209.78 L1251.67 1209.78 L1251.08 1209.78 L1250.5 1209.78 L1249.91 1209.78 L1249.32 1209.78 L1248.74 1209.78 L1248.15 1209.78 L1247.57 1209.78 L1246.98 1209.78 L1246.39 1209.78 L1245.81 1209.78 L1245.22 1209.78 L1244.63 1209.78 L1244.05 1209.78 L1243.46 1209.78 L1242.87 1209.78 L1242.29 1209.78 L1241.7 1209.78 L1241.11 1209.78 L1240.53 1209.78 L1239.94 1209.78 L1239.36 1209.78 L1238.77 1209.78 L1238.18 1209.78 L1237.6 1209.78 L1237.01 1209.78 L1236.42 1209.78 L1235.84 1209.78 L1235.25 1209.78 L1234.66 1209.78 L1234.08 1209.78 L1233.49 1209.78 L1232.91 1209.78 L1232.32 1209.78 L1231.73 1209.78 L1231.15 1209.78 L1230.56 1209.78 L1229.97 1209.78 L1229.39 1209.78 L1228.8 1209.78 L1228.21 1209.78 L1227.63 1209.78 L1227.04 1209.78 L1226.45 1209.78 L1225.87 1209.78 L1225.28 1209.78 L1224.7 1209.78 L1224.11 1209.78 L1223.52 1209.78 L1222.94 1209.78 L1222.35 1209.78 L1221.76 1209.78 L1221.18 1209.78 L1220.59 1209.78 L1220 1209.78 L1219.42 1209.78 L1218.83 1209.78 L1218.24 1209.78 L1217.66 1209.78 L1217.07 1209.78 L1216.49 1209.78 L1215.9 1209.78 L1215.31 1209.78 L1214.73 1209.78 L1214.14 1209.78 L1213.55 1209.78 L1212.97 1209.78 L1212.38 1209.78 L1211.79 1209.78 L1211.21 1209.78 L1210.62 1209.78 L1210.03 1209.78 L1209.45 1209.78 L1208.86 1209.78 L1208.28 1209.78 L1207.69 1209.78 L1207.1 1209.78 L1206.52 1209.78 L1205.93 1209.78 L1205.34 1209.78 L1204.76 1209.78 L1204.17 1209.78 L1203.58 1209.78 L1203 1209.78 L1202.41 1209.78 L1201.83 1209.78 L1201.24 1209.78 L1200.65 1209.78 L1200.07 1209.78 L1199.48 1209.78 L1198.89 1209.78 L1198.31 1209.78 L1197.72 1209.78 L1197.13 1209.78 L1196.55 1209.78 L1195.96 1209.78 L1195.37 1209.78 L1194.79 1209.78 L1194.2 1209.78 L1193.62 1209.78 L1193.03 1209.78 L1192.44 1209.78 L1191.86 1209.78 L1191.27 1209.78 L1190.68 1209.78 L1190.1 1209.78 L1189.51 1209.78 L1188.92 1209.78 L1188.34 1209.78 L1187.75 1209.78 L1187.16 1209.78 L1186.58 1209.78 L1185.99 1209.78 L1185.41 1209.78 L1184.82 1209.78 L1184.23 1209.78 L1183.65 1209.78 L1183.06 1209.78 L1182.47 1209.78 L1181.89 1209.78 L1181.3 1209.78 L1180.71 1209.78 L1180.13 1209.78 L1179.54 1209.78 L1178.96 1209.78 L1178.37 1209.78 L1177.78 1209.78 L1177.2 1209.78 L1176.61 1209.78 L1176.02 1209.78 L1175.44 1209.78 L1174.85 1209.78 L1174.26 1209.78 L1173.68 1209.78 L1173.09 1209.78 L1172.5 1209.78 L1171.92 1209.78 L1171.33 1209.78 L1170.75 1209.78 L1170.16 1209.78 L1169.57 1209.78 L1168.99 1209.78 L1168.4 1209.78 L1167.81 1209.78 L1167.23 1209.78 L1166.64 1209.78 L1166.05 1209.78 L1165.47 1209.78 L1164.88 1209.78 L1164.29 1209.78 L1163.71 1209.78 L1163.12 1209.78 L1162.54 1209.78 L1161.95 1209.78 L1161.36 1209.78 L1160.78 1209.78 L1160.19 1209.78 L1159.6 1209.78 L1159.02 1209.78 L1158.43 1209.78 L1157.84 1209.78 L1157.26 1209.78 L1156.67 1209.78 L1156.09 1209.78 L1155.5 1209.78 L1154.91 1209.78 L1154.33 1209.78 L1153.74 1209.78 L1153.15 1209.78 L1152.57 1209.78 L1151.98 1209.78 L1151.39 1209.78 L1150.81 1209.78 L1150.22 1209.78 L1149.63 1209.78 L1149.05 1209.78 L1148.46 1209.78 L1147.88 1209.78 L1147.29 1209.78 L1146.7 1209.78 L1146.12 1209.78 L1145.53 1209.78 L1144.94 1209.78 L1144.36 1209.78 L1143.77 1209.78 L1143.18 1209.78 L1142.6 1209.78 L1142.01 1209.78 L1141.42 1209.78 L1140.84 1209.78 L1140.25 1209.78 L1139.67 1209.78 L1139.08 1209.78 L1138.49 1209.78 L1137.91 1209.78 L1137.32 1209.78 L1136.73 1209.78 L1136.15 1209.78 L1135.56 1209.78 L1134.97 1209.78 L1134.39 1209.78 L1133.8 1209.78 L1133.21 1209.78 L1132.63 1209.78 L1132.04 1209.78 L1131.46 1209.78 L1130.87 1209.78 L1130.28 1209.78 L1129.7 1209.78 L1129.11 1209.78 L1128.52 1209.78 L1127.94 1209.78 L1127.35 1209.78 L1126.76 1209.78 L1126.18 1209.78 L1125.59 1209.78 L1125.01 1209.78 L1124.42 1209.78 L1123.83 1209.78 L1123.25 1209.78 L1122.66 1209.78 L1122.07 1209.78 L1121.49 1209.78 L1120.9 1209.78 L1120.31 1209.78 L1119.73 1209.78 L1119.14 1209.78 L1118.55 1209.78 L1117.97 1209.78 L1117.38 1209.78 L1116.8 1209.78 L1116.21 1209.78 L1115.62 1209.78 L1115.04 1209.78 L1114.45 1209.78 L1113.86 1209.78 L1113.28 1209.78 L1112.69 1209.78 L1112.1 1209.78 L1111.52 1209.78 L1110.93 1209.78 L1110.34 1209.78 L1109.76 1209.78 L1109.17 1209.78 L1108.59 1209.78 L1108 1209.78 L1107.41 1209.78 L1106.83 1209.78 L1106.24 1209.78 L1105.65 1209.78 L1105.07 1209.78 L1104.48 1209.78 L1103.89 1209.78 L1103.31 1209.78 L1102.72 1209.78 L1102.14 1209.78 L1101.55 1209.78 L1100.96 1209.78 L1100.38 1209.78 L1099.79 1209.78 L1099.2 1209.78 L1098.62 1209.78 L1098.03 1209.78 L1097.44 1209.78 L1096.86 1209.78 L1096.27 1209.78 L1095.68 1209.78 L1095.1 1209.78 L1094.51 1209.78 L1093.93 1209.78 L1093.34 1209.78 L1092.75 1209.78 L1092.17 1209.78 L1091.58 1209.78 L1090.99 1209.78 L1090.41 1209.78 L1089.82 1209.78 L1089.23 1209.78 L1088.65 1209.78 L1088.06 1209.78 L1087.47 1209.78 L1086.89 1209.78 L1086.3 1209.78 L1085.72 1209.78 L1085.13 1209.78 L1084.54 1209.78 L1083.96 1209.78 L1083.37 1209.78 L1082.78 1209.78 L1082.2 1209.78 L1081.61 1209.78 L1081.02 1209.78 L1080.44 1209.78 L1079.85 1209.78 L1079.26 1209.78 L1078.68 1209.78 L1078.09 1209.78 L1077.51 1209.78 L1076.92 1209.78 L1076.33 1209.78 L1075.75 1209.78 L1075.16 1209.78 L1074.57 1209.78 L1073.99 1209.78 L1073.4 1209.78 L1072.81 1209.78 L1072.23 1209.78 L1071.64 1209.78 L1071.06 1209.78 L1070.47 1209.78 L1069.88 1209.78 L1069.3 1209.78 L1068.71 1209.78 L1068.12 1209.78 L1067.54 1209.78 L1066.95 1209.78 L1066.36 1209.78 L1065.78 1209.78 L1065.19 1209.78 L1064.6 1209.78 L1064.02 1209.78 L1063.43 1209.78 L1062.85 1209.78 L1062.26 1209.78 L1061.67 1209.78 L1061.09 1209.78 L1060.5 1209.78 L1059.91 1209.78 L1059.33 1209.78 L1058.74 1209.78 L1058.15 1209.78 L1057.57 1209.78 L1056.98 1209.78 L1056.39 1209.78 L1055.81 1209.78 L1055.22 1209.78 L1054.64 1209.78 L1054.05 1209.78 L1053.46 1209.78 L1052.88 1209.78 L1052.29 1209.78 L1051.7 1209.78 L1051.12 1209.78 L1050.53 1209.78 L1049.94 1209.78 L1049.36 1209.78 L1048.77 1209.78 L1048.19 1209.78 L1047.6 1209.78 L1047.01 1209.78 L1046.43 1209.78 L1045.84 1209.78 L1045.25 1209.78 L1044.67 1209.78 L1044.08 1209.78 L1043.49 1209.78 L1042.91 1209.78 L1042.32 1209.78 L1041.73 1209.78 L1041.15 1209.78 L1040.56 1209.78 L1039.98 1209.78 L1039.39 1209.78 L1038.8 1209.78 L1038.22 1209.78 L1037.63 1209.78 L1037.04 1209.78 L1036.46 1209.78 L1035.87 1209.78 L1035.28 1209.78 L1034.7 1209.78 L1034.11 1209.78 L1033.52 1209.78 L1032.94 1209.78 L1032.35 1209.78 L1031.77 1209.78 L1031.18 1209.78 L1030.59 1209.78 L1030.01 1209.78 L1029.42 1209.78 L1028.83 1209.78 L1028.25 1209.78 L1027.66 1209.78 L1027.07 1209.78 L1026.49 1209.78 L1025.9 1209.78 L1025.32 1209.78 L1024.73 1209.78 L1024.14 1209.78 L1023.56 1209.78 L1022.97 1209.78 L1022.38 1209.78 L1021.8 1209.78 L1021.21 1209.78 L1020.62 1209.78 L1020.04 1209.78 L1019.45 1209.78 L1018.86 1209.78 L1018.28 1209.78 L1017.69 1209.78 L1017.11 1209.78 L1016.52 1209.78 L1015.93 1209.78 L1015.35 1209.78 L1014.76 1209.78 L1014.17 1209.78 L1013.59 1209.78 L1013 1209.78 L1012.41 1209.78 L1011.83 1209.78 L1011.24 1209.78 L1010.65 1209.78 L1010.07 1209.78 L1009.48 1209.78 L1008.9 1209.78 L1008.31 1209.78 L1007.72 1209.78 L1007.14 1209.78 L1006.55 1209.78 L1005.96 1209.78 L1005.38 1209.78 L1004.79 1209.78 L1004.2 1209.78 L1003.62 1209.78 L1003.03 1209.78 L1002.44 1209.78 L1001.86 1209.78 L1001.27 1209.78 L1000.69 1209.78 L1000.1 1209.78 L999.513 1209.78 L998.926 1209.78 L998.34 1209.78 L997.754 1209.78 L997.167 1209.78 L996.581 1209.78 L995.994 1209.78 L995.408 1209.78 L994.822 1209.78 L994.235 1209.78 L993.649 1209.78 L993.062 1209.78 L992.476 1209.78 L991.889 1209.78 L991.303 1209.78 L990.717 1209.78 L990.13 1209.78 L989.544 1209.78 L988.957 1209.78 L988.371 1209.78 L987.785 1209.78 L987.198 1209.78 L986.612 1209.78 L986.025 1209.78  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.03 986.612,1210.03 987.198,1210.03 987.785,1210.03 988.371,1210.03 988.957,1210.03 989.544,1210.03 990.13,1210.03 990.717,1210.03 991.303,1210.03 991.889,1210.03 992.476,1210.03 993.062,1210.03 993.649,1210.03 994.235,1210.03 994.822,1210.03 995.408,1210.03 995.994,1210.03 996.581,1210.03 997.167,1210.03 997.754,1210.03 998.34,1210.03 998.926,1210.03 999.513,1210.03 1000.1,1210.03 1000.69,1210.03 1001.27,1210.03 1001.86,1210.03 1002.44,1210.03 1003.03,1210.03 1003.62,1210.03 1004.2,1210.03 1004.79,1210.03 1005.38,1210.03 1005.96,1210.03 1006.55,1210.03 1007.14,1210.03 1007.72,1210.03 1008.31,1210.03 1008.9,1210.03 1009.48,1210.03 1010.07,1210.03 1010.65,1210.03 1011.24,1210.03 1011.83,1210.03 1012.41,1210.03 1013,1210.03 1013.59,1210.03 1014.17,1210.03 1014.76,1210.03 1015.35,1210.03 1015.93,1210.03 1016.52,1210.03 1017.11,1210.03 1017.69,1210.03 1018.28,1210.03 1018.86,1210.03 1019.45,1210.03 1020.04,1210.03 1020.62,1210.03 1021.21,1210.03 1021.8,1210.03 1022.38,1210.03 1022.97,1210.03 1023.56,1210.03 1024.14,1210.03 1024.73,1210.03 1025.32,1210.03 1025.9,1210.03 1026.49,1210.03 1027.07,1210.03 1027.66,1210.03 1028.25,1210.03 1028.83,1210.03 1029.42,1210.03 1030.01,1210.03 1030.59,1210.03 1031.18,1210.03 1031.77,1210.03 1032.35,1210.03 1032.94,1210.03 1033.52,1210.03 1034.11,1210.03 1034.7,1210.03 1035.28,1210.03 1035.87,1210.03 1036.46,1210.03 1037.04,1210.03 1037.63,1210.03 1038.22,1210.03 1038.8,1210.03 1039.39,1210.03 1039.98,1210.03 1040.56,1210.03 1041.15,1210.03 1041.73,1210.03 1042.32,1210.03 1042.91,1210.03 1043.49,1210.03 1044.08,1210.03 1044.67,1210.03 1045.25,1210.03 1045.84,1210.03 1046.43,1210.03 1047.01,1210.03 1047.6,1210.03 1048.19,1210.03 1048.77,1210.03 1049.36,1210.03 1049.94,1210.03 1050.53,1210.03 1051.12,1210.03 1051.7,1210.03 1052.29,1210.03 1052.88,1210.03 1053.46,1210.03 1054.05,1210.03 1054.64,1210.03 1055.22,1210.03 1055.81,1210.03 1056.39,1210.03 1056.98,1210.03 1057.57,1210.03 1058.15,1210.03 1058.74,1210.03 1059.33,1210.03 1059.91,1210.03 1060.5,1210.03 1061.09,1210.03 1061.67,1210.03 1062.26,1210.03 1062.85,1210.03 1063.43,1210.03 1064.02,1210.03 1064.6,1210.03 1065.19,1210.03 1065.78,1210.03 1066.36,1210.03 1066.95,1210.03 1067.54,1210.03 1068.12,1210.03 1068.71,1210.03 1069.3,1210.03 1069.88,1210.03 1070.47,1210.03 1071.06,1210.03 1071.64,1210.03 1072.23,1210.03 1072.81,1210.03 1073.4,1210.03 1073.99,1210.03 1074.57,1210.03 1075.16,1210.03 1075.75,1210.03 1076.33,1210.03 1076.92,1210.03 1077.51,1210.03 1078.09,1210.03 1078.68,1210.03 1079.26,1210.03 1079.85,1210.03 1080.44,1210.03 1081.02,1210.03 1081.61,1210.03 1082.2,1210.03 1082.78,1210.03 1083.37,1210.03 1083.96,1210.03 1084.54,1210.03 1085.13,1210.03 1085.72,1210.03 1086.3,1210.03 1086.89,1210.03 1087.47,1210.03 1088.06,1210.03 1088.65,1210.03 1089.23,1210.03 1089.82,1210.03 1090.41,1210.03 1090.99,1210.03 1091.58,1210.03 1092.17,1210.03 1092.75,1210.03 1093.34,1210.03 1093.93,1210.03 1094.51,1210.03 1095.1,1210.03 1095.68,1210.03 1096.27,1210.03 1096.86,1210.03 1097.44,1210.03 1098.03,1210.03 1098.62,1210.03 1099.2,1210.03 1099.79,1210.03 1100.38,1210.03 1100.96,1210.03 1101.55,1210.03 1102.14,1210.03 1102.72,1210.03 1103.31,1210.03 1103.89,1210.03 1104.48,1210.03 1105.07,1210.03 1105.65,1210.03 1106.24,1210.03 1106.83,1210.03 1107.41,1210.03 1108,1210.03 1108.59,1210.03 1109.17,1210.03 1109.76,1210.03 1110.34,1210.03 1110.93,1210.03 1111.52,1210.03 1112.1,1210.03 1112.69,1210.03 1113.28,1210.03 1113.86,1210.03 1114.45,1210.03 1115.04,1210.03 1115.62,1210.03 1116.21,1210.03 1116.8,1210.03 1117.38,1210.03 1117.97,1210.03 1118.55,1210.03 1119.14,1210.03 1119.73,1210.03 1120.31,1210.03 1120.9,1210.03 1121.49,1210.03 1122.07,1210.03 1122.66,1210.03 1123.25,1210.03 1123.83,1210.03 1124.42,1210.03 1125.01,1210.03 1125.59,1210.03 1126.18,1210.03 1126.76,1210.03 1127.35,1210.03 1127.94,1210.03 1128.52,1210.03 1129.11,1210.03 1129.7,1210.03 1130.28,1210.03 1130.87,1210.03 1131.46,1210.03 1132.04,1210.03 1132.63,1210.03 1133.21,1210.03 1133.8,1210.03 1134.39,1210.03 1134.97,1210.03 1135.56,1210.03 1136.15,1210.03 1136.73,1210.03 1137.32,1210.03 1137.91,1210.03 1138.49,1210.03 1139.08,1210.03 1139.67,1210.03 1140.25,1210.03 1140.84,1210.03 1141.42,1210.03 1142.01,1210.03 1142.6,1210.03 1143.18,1210.03 1143.77,1210.03 1144.36,1210.03 1144.94,1210.03 1145.53,1210.03 1146.12,1210.03 1146.7,1210.03 1147.29,1210.03 1147.88,1210.03 1148.46,1210.03 1149.05,1210.03 1149.63,1210.03 1150.22,1210.03 1150.81,1210.03 1151.39,1210.03 1151.98,1210.03 1152.57,1210.03 1153.15,1210.03 1153.74,1210.03 1154.33,1210.03 1154.91,1210.03 1155.5,1210.03 1156.09,1210.03 1156.67,1210.03 1157.26,1210.03 1157.84,1210.03 1158.43,1210.03 1159.02,1210.03 1159.6,1210.03 1160.19,1210.03 1160.78,1210.03 1161.36,1210.03 1161.95,1210.03 1162.54,1210.03 1163.12,1210.03 1163.71,1210.03 1164.29,1210.03 1164.88,1210.03 1165.47,1210.03 1166.05,1210.03 1166.64,1210.03 1167.23,1210.03 1167.81,1210.03 1168.4,1210.03 1168.99,1210.03 1169.57,1210.03 1170.16,1210.03 1170.75,1210.03 1171.33,1210.03 1171.92,1210.03 1172.5,1210.03 1173.09,1210.03 1173.68,1210.03 1174.26,1210.03 1174.85,1210.03 1175.44,1210.03 1176.02,1210.03 1176.61,1210.03 1177.2,1210.03 1177.78,1210.03 1178.37,1210.03 1178.96,1210.03 1179.54,1210.03 1180.13,1210.03 1180.71,1210.03 1181.3,1210.03 1181.89,1210.03 1182.47,1210.03 1183.06,1210.03 1183.65,1210.03 1184.23,1210.03 1184.82,1210.03 1185.41,1210.03 1185.99,1210.03 1186.58,1210.03 1187.16,1210.03 1187.75,1210.03 1188.34,1210.03 1188.92,1210.03 1189.51,1210.03 1190.1,1210.03 1190.68,1210.03 1191.27,1210.03 1191.86,1210.03 1192.44,1210.03 1193.03,1210.03 1193.62,1210.03 1194.2,1210.03 1194.79,1210.03 1195.37,1210.03 1195.96,1210.03 1196.55,1210.03 1197.13,1210.03 1197.72,1210.03 1198.31,1210.03 1198.89,1210.03 1199.48,1210.03 1200.07,1210.03 1200.65,1210.03 1201.24,1210.03 1201.83,1210.03 1202.41,1210.03 1203,1210.03 1203.58,1210.03 1204.17,1210.03 1204.76,1210.03 1205.34,1210.03 1205.93,1210.03 1206.52,1210.03 1207.1,1210.03 1207.69,1210.03 1208.28,1210.03 1208.86,1210.03 1209.45,1210.03 1210.03,1210.03 1210.62,1210.03 1211.21,1210.03 1211.79,1210.03 1212.38,1210.03 1212.97,1210.03 1213.55,1210.03 1214.14,1210.03 1214.73,1210.03 1215.31,1210.03 1215.9,1210.03 1216.49,1210.03 1217.07,1210.03 1217.66,1210.03 1218.24,1210.03 1218.83,1210.03 1219.42,1210.03 1220,1210.03 1220.59,1210.03 1221.18,1210.03 1221.76,1210.03 1222.35,1210.03 1222.94,1210.03 1223.52,1210.03 1224.11,1210.03 1224.7,1210.03 1225.28,1210.03 1225.87,1210.03 1226.45,1210.03 1227.04,1210.03 1227.63,1210.03 1228.21,1210.03 1228.8,1210.03 1229.39,1210.03 1229.97,1210.03 1230.56,1210.03 1231.15,1210.03 1231.73,1210.03 1232.32,1210.03 1232.91,1210.03 1233.49,1210.03 1234.08,1210.03 1234.66,1210.03 1235.25,1210.03 1235.84,1210.03 1236.42,1210.03 1237.01,1210.03 1237.6,1210.03 1238.18,1210.03 1238.77,1210.03 1239.36,1210.03 1239.94,1210.03 1240.53,1210.03 1241.11,1210.03 1241.7,1210.03 1242.29,1210.03 1242.87,1210.03 1243.46,1210.03 1244.05,1210.03 1244.63,1210.03 1245.22,1210.03 1245.81,1210.03 1246.39,1210.03 1246.98,1210.03 1247.57,1210.03 1248.15,1210.03 1248.74,1210.03 1249.32,1210.03 1249.91,1210.03 1250.5,1210.03 1251.08,1210.03 1251.67,1210.03 1252.26,1210.03 1252.84,1210.03 1253.43,1210.03 1254.02,1210.03 1254.6,1210.03 1255.19,1210.03 1255.78,1210.03 1256.36,1210.03 1256.95,1210.03 1257.53,1210.03 1258.12,1210.03 1258.71,1210.03 1259.29,1210.03 1259.88,1210.03 1260.47,1210.03 1261.05,1210.03 1261.64,1210.03 1262.23,1210.03 1262.81,1210.03 1263.4,1210.03 1263.98,1210.03 1264.57,1210.03 1265.16,1210.03 1265.74,1210.03 1266.33,1210.03 1266.92,1210.03 1267.5,1210.03 1268.09,1210.03 1268.68,1210.03 1269.26,1210.03 1269.85,1210.03 1270.44,1210.03 1271.02,1210.03 1271.61,1210.03 1272.19,1210.03 1272.78,1210.03 1273.37,1210.03 1273.95,1210.03 1274.54,1210.03 1275.13,1210.03 1275.71,1210.03 1276.3,1210.03 1276.89,1210.03 1277.47,1210.03 1278.06,1210.03 1278.65,1210.03 1279.23,1210.03 1279.82,1210.03 1280.4,1210.03 1280.99,1210.03 1281.58,1210.03 1282.16,1210.03 1282.75,1210.03 1283.34,1210.03 1283.92,1210.03 1284.51,1210.03 1285.1,1210.03 1285.68,1210.03 1286.27,1210.03 1286.86,1210.03 1287.44,1210.03 1288.03,1210.03 1288.61,1210.03 1289.2,1210.03 1289.79,1210.03 1290.37,1210.03 1290.96,1210.03 1291.55,1210.03 1292.13,1210.03 1292.72,1210.03 1293.31,1210.03 1293.89,1210.03 1294.48,1210.03 1295.06,1210.03 1295.65,1210.03 1296.24,1210.03 1296.82,1210.03 1297.41,1210.03 1298,1210.03 1298.58,1210.03 1299.17,1210.03 1299.76,1210.03 1300.34,1210.03 1300.93,1210.03 1301.52,1210.03 1302.1,1210.03 1302.69,1210.03 1303.27,1210.03 1303.86,1210.03 1304.45,1210.03 1305.03,1210.03 1305.62,1210.03 1306.21,1210.03 1306.79,1210.03 1307.38,1210.03 1307.97,1210.03 1308.55,1210.03 1309.14,1210.03 1309.73,1210.03 1310.31,1210.03 1310.9,1210.03 1311.48,1210.03 1312.07,1210.03 1312.66,1210.03 1313.24,1210.03 1313.83,1210.03 1314.42,1210.03 1315,1210.03 1315.59,1210.03 1316.18,1210.03 1316.76,1210.03 1317.35,1210.03 1317.93,1210.03 1318.52,1210.03 1319.11,1210.03 1319.69,1210.03 1320.28,1210.03 1320.87,1210.03 1321.45,1210.03 1322.04,1210.03 1322.63,1210.03 1323.21,1210.03 1323.8,1210.03 1324.39,1210.03 1324.97,1210.03 1325.56,1210.03 1326.14,1210.03 1326.73,1210.03 1327.32,1210.03 1327.9,1210.03 1328.49,1210.03 1329.08,1210.03 1329.66,1210.03 1330.25,1210.03 1330.84,1210.03 1331.42,1210.03 1332.01,1210.03 1332.6,1210.03 1333.18,1210.03 1333.77,1210.03 1334.35,1210.03 1334.94,1210.03 1335.53,1210.03 1336.11,1210.03 1336.7,1210.03 1337.29,1210.03 1337.87,1210.03 1338.46,1210.03 1339.05,1210.03 1339.63,1210.03 1340.22,1210.03 1340.8,1210.03 1341.39,1210.03 1341.98,1210.03 1342.56,1210.03 1343.15,1210.03 1343.74,1210.03 1344.32,1210.03 1344.91,1210.03 1345.5,1210.03 1346.08,1210.03 1346.67,1210.03 1347.26,1210.03 1347.84,1210.03 1348.43,1210.03 1349.01,1210.03 1349.6,1210.03 1350.19,1210.03 1350.77,1210.03 1351.36,1210.03 1351.95,1210.03 1352.53,1210.03 1353.12,1210.03 1353.71,1210.03 1354.29,1210.03 1354.88,1210.03 1355.47,1210.03 1356.05,1210.03 1356.64,1210.03 1357.22,1210.03 1357.81,1210.03 1358.4,1210.03 1358.98,1210.03 1359.57,1210.03 1360.16,1210.03 1360.74,1210.03 1361.33,1210.03 1361.92,1210.03 1362.5,1210.03 1363.09,1210.03 1363.68,1210.03 1364.26,1210.03 1364.85,1210.03 1365.43,1210.03 1366.02,1210.03 1366.61,1210.03 1367.19,1210.03 1367.78,1210.03 1368.37,1210.03 1368.95,1210.03 1369.54,1210.03 1370.13,1210.03 1370.71,1210.03 1371.3,1210.03 1371.88,1210.03 1372.47,1210.03 1373.06,1210.03 1373.64,1210.03 1374.23,1210.03 1374.82,1210.03 1375.4,1210.03 1375.99,1210.03 1376.58,1210.03 1377.16,1210.03 1377.75,1210.03 1378.34,1210.03 1378.92,1210.03 1379.51,1210.03 1380.09,1210.03 1380.68,1210.03 1381.27,1210.03 1381.85,1210.03 1382.44,1210.03 1383.03,1210.03 1383.61,1210.03 1384.2,1210.03 1384.79,1210.03 1385.37,1210.03 1385.96,1210.03 1386.55,1210.03 1387.13,1210.03 1387.72,1210.03 1388.3,1210.03 1388.89,1210.03 1389.48,1210.03 1390.06,1210.03 1390.65,1210.03 1391.24,1210.03 1391.82,1210.03 1392.41,1210.03 1393,1210.03 1393.58,1210.03 1394.17,1210.03 1394.75,1210.03 1395.34,1210.03 1395.93,1210.03 1396.51,1210.03 1397.1,1210.03 1397.69,1210.03 1398.27,1210.03 1398.86,1210.03 1399.45,1210.03 1400.03,1210.03 1400.62,1210.03 1401.21,1210.03 1401.79,1210.03 1402.38,1210.03 1402.96,1210.03 1403.55,1210.03 1404.14,1210.03 1404.72,1210.03 1405.31,1210.03 1405.9,1210.03 1406.48,1210.03 1407.07,1210.03 1407.66,1210.03 1408.24,1210.03 1408.83,1210.03 1409.42,1210.03 1410,1210.03 1410.59,1210.03 1411.17,1210.03 1411.76,1210.03 1412.35,1210.03 1412.93,1210.03 1413.52,1210.03 1414.11,1210.03 1414.69,1210.03 1415.28,1210.03 1415.87,1210.03 1416.45,1210.03 1417.04,1210.03 1417.63,1210.03 1418.21,1210.03 1418.8,1210.03 1419.38,1210.03 1419.97,1210.03 1420.56,1210.03 1421.14,1210.03 1421.73,1210.03 1422.32,1210.03 1422.9,1210.03 1423.49,1210.03 1424.08,1210.03 1424.66,1210.03 1425.25,1210.03 1425.83,1210.03 1426.42,1210.03 1427.01,1210.03 1427.59,1210.03 1428.18,1210.03 1428.77,1210.03 1429.35,1210.03 1429.94,1210.03 1430.53,1210.03 1431.11,1210.03 1431.7,1210.03 1432.29,1210.03 1432.87,1210.03 1433.46,1210.03 1434.04,1210.03 1434.63,1210.03 1435.22,1210.03 1435.8,1210.03 1436.39,1210.03 1436.98,1210.03 1437.56,1210.03 1438.15,1210.03 1438.74,1210.03 1439.32,1210.03 1439.91,1210.03 1440.5,1210.03 1441.08,1210.03 1441.67,1210.03 1442.25,1210.03 1442.84,1210.03 1443.43,1210.03 1444.01,1210.03 1444.6,1210.03 1445.19,1210.03 1445.77,1210.03 1446.36,1210.03 1446.95,1210.03 1447.53,1210.03 1448.12,1210.03 1448.7,1210.03 1449.29,1210.03 1449.88,1210.03 1450.46,1210.03 1451.05,1210.03 1451.64,1210.03 1452.22,1210.03 1452.81,1210.03 1453.4,1210.03 1453.98,1210.03 1454.57,1210.03 1455.16,1210.03 1455.74,1210.03 1456.33,1210.03 1456.91,1210.03 1457.5,1210.03 1458.09,1210.03 1458.67,1210.03 1459.26,1210.03 1459.85,1210.03 1460.43,1210.03 1461.02,1210.03 1461.61,1210.03 1462.19,1210.03 1462.78,1210.03 1463.37,1210.03 1463.95,1210.03 1464.54,1210.03 1465.12,1210.03 1465.71,1210.03 1466.3,1210.03 1466.88,1210.03 1467.47,1210.03 1468.06,1210.03 1468.64,1210.03 1469.23,1210.03 1469.82,1210.03 1470.4,1210.03 1470.99,1210.03 1471.57,1210.03 1472.16,1210.03 1472.75,1210.03 1473.33,1210.03 1473.92,1210.03 1474.51,1210.03 1475.09,1210.03 1475.68,1210.03 1476.27,1210.03 1476.85,1210.03 1477.44,1210.03 1478.03,1210.03 1478.61,1210.03 1479.2,1210.03 1479.78,1210.03 1480.37,1210.03 1480.96,1210.03 1481.54,1210.03 1482.13,1210.03 1482.72,1210.03 1483.3,1210.03 1483.89,1210.03 1484.48,1210.03 1485.06,1210.03 1485.65,1210.03 1486.24,1210.03 1486.82,1210.03 1487.41,1210.03 1487.99,1210.03 1488.58,1210.03 1489.17,1210.03 1489.75,1210.03 1490.34,1210.03 1490.93,1210.03 1491.51,1210.03 1492.1,1210.03 1492.69,1210.03 1493.27,1210.03 1493.86,1210.03 1494.45,1210.03 1495.03,1210.03 1495.62,1210.03 1496.2,1210.03 1496.79,1210.03 1497.38,1210.03 1497.96,1210.03 1498.55,1210.03 1499.14,1210.03 1499.72,1210.03 1500.31,1210.03 1500.9,1210.03 1501.48,1210.03 1502.07,1210.03 1502.65,1210.03 1503.24,1210.03 1503.83,1210.03 1504.41,1210.03 1505,1210.03 1505.59,1210.03 1506.17,1210.03 1506.76,1210.03 1507.35,1210.03 1507.93,1210.03 1508.52,1210.03 1509.11,1210.03 1509.69,1210.03 1510.28,1210.03 1510.86,1210.03 1511.45,1210.03 1512.04,1210.03 1512.62,1210.03 1513.21,1210.03 1513.8,1210.03 1514.38,1210.03 1514.97,1210.03 1515.56,1210.03 1516.14,1210.03 1516.73,1210.03 1517.32,1210.03 1517.9,1210.03 1518.49,1210.03 1519.07,1210.03 1519.66,1210.03 1520.25,1210.03 1520.83,1210.03 1521.42,1210.03 1522.01,1210.03 1522.59,1210.03 1523.18,1210.03 1523.77,1210.03 1524.35,1210.03 1524.94,1210.03 1525.52,1210.03 1526.11,1210.03 1526.7,1210.03 1527.28,1210.03 1527.87,1210.03 1528.46,1210.03 1529.04,1210.03 1529.63,1210.03 1530.22,1210.03 1530.8,1210.03 1531.39,1210.03 1531.98,1210.03 1532.56,1210.03 1533.15,1210.03 1533.73,1210.03 1534.32,1210.03 1534.91,1210.03 1535.49,1210.03 1536.08,1210.03 1536.67,1210.03 1537.25,1210.03 1537.84,1210.03 1538.43,1210.03 1539.01,1210.03 1539.6,1210.03 1540.19,1210.03 1540.77,1210.03 1541.36,1210.03 1541.94,1210.03 1542.53,1210.03 1543.12,1210.03 1543.7,1210.03 1544.29,1210.03 1544.88,1210.03 1545.46,1210.03 1546.05,1210.03 1546.64,1210.03 1547.22,1210.03 1547.81,1210.03 1548.4,1210.03 1548.98,1210.03 1549.57,1210.03 1550.15,1210.03 1550.74,1210.03 1551.33,1210.03 1551.91,1210.03 1552.5,1210.03 1553.09,1210.03 1553.67,1210.03 1554.26,1210.03 1554.85,1210.03 1555.43,1210.03 1556.02,1210.03 1556.6,1210.03 1557.19,1210.03 1557.78,1210.03 1558.36,1210.03 1558.95,1210.03 1559.54,1210.03 1560.12,1210.03 1560.71,1210.03 1561.3,1210.03 1561.88,1210.03 1562.47,1210.03 1563.06,1210.03 1563.64,1210.03 1564.23,1210.03 1564.81,1210.03 1565.4,1210.03 1565.99,1210.03 1566.57,1210.03 1567.16,1210.03 1567.75,1210.03 1568.33,1210.03 1568.92,1210.03 1569.51,1210.03 1570.09,1210.03 1570.68,1210.03 1571.27,1210.03 1571.85,1210.03 1572.44,1210.03 1573.02,1210.03 1573.61,1210.03 1574.2,1210.03 1574.78,1210.03 1575.37,1210.03 1575.96,1210.03 1576.54,1210.03 1577.13,1210.03 1577.72,1210.03 1578.3,1210.03 1578.89,1210.03 1579.47,1210.03 1580.06,1210.03 1580.65,1210.03 1581.23,1210.03 1581.82,1210.03 1582.41,1210.03 1582.99,1210.03 1583.58,1210.03 1584.17,1210.03 1584.75,1210.03 1585.34,1210.03 1585.93,1210.03 1586.51,1210.03 1587.1,1210.03 1587.68,1210.03 1588.27,1210.03 1588.86,1210.03 1589.44,1210.03 1590.03,1210.03 1590.62,1210.03 1591.2,1210.03 1591.79,1210.03 1592.38,1210.03 1592.96,1210.03 1593.55,1210.03 1594.14,1210.03 1594.72,1210.03 1595.31,1210.03 1595.89,1210.03 1596.48,1210.03 1597.07,1210.03 1597.65,1210.03 1598.24,1210.03 1598.83,1210.03 1599.41,1210.03 1600,1210.03 1600.59,1210.03 1601.17,1210.03 1601.76,1210.03 1602.34,1210.03 1602.93,1210.03 1603.52,1210.03 1604.1,1210.03 1604.69,1210.03 1605.28,1210.03 1605.86,1210.03 1606.45,1210.03 1607.04,1210.03 1607.62,1210.03 1608.21,1210.03 1608.8,1210.03 1609.38,1210.03 1609.97,1210.03 1610.55,1210.03 1611.14,1210.03 1611.73,1210.03 1612.31,1210.03 1612.9,1210.03 1613.49,1210.03 1614.07,1210.03 1614.66,1210.03 1615.25,1210.03 1615.83,1210.03 1616.42,1210.03 1617.01,1210.03 1617.59,1210.03 1618.18,1210.03 1618.76,1210.03 1619.35,1210.03 1619.94,1210.03 1620.52,1210.03 1621.11,1210.03 1621.7,1210.03 1622.28,1210.03 1622.87,1210.03 1623.46,1210.03 1624.04,1210.03 1624.63,1210.03 1625.22,1210.03 1625.8,1210.03 1626.39,1210.03 1626.97,1210.03 1627.56,1210.03 1628.15,1210.03 1628.73,1210.03 1629.32,1210.03 1629.91,1210.03 1630.49,1210.03 1631.08,1210.03 1631.67,1210.03 1632.25,1210.03 1632.84,1210.03 1633.42,1210.03 1634.01,1210.03 1634.6,1210.03 1635.18,1210.03 1635.77,1210.03 1636.36,1210.03 1636.94,1210.03 1637.53,1210.03 1638.12,1210.03 1638.7,1210.03 1639.29,1210.03 1639.88,1210.03 1640.46,1210.03 1641.05,1210.03 1641.63,1210.03 1642.22,1210.03 1642.81,1210.03 1643.39,1210.03 1643.98,1210.03 1644.57,1210.03 1645.15,1210.03 1645.74,1210.03 1646.33,1210.03 1646.91,1210.03 1647.5,1210.03 1648.09,1210.03 1648.67,1210.03 1649.26,1210.03 1649.84,1210.03 1650.43,1210.03 1651.02,1210.03 1651.6,1210.03 1652.19,1210.03 1652.78,1210.03 1653.36,1210.03 1653.95,1210.03 1654.54,1210.03 1655.12,1210.03 1655.71,1210.03 1656.29,1210.03 1656.88,1210.03 1657.47,1210.03 1658.05,1210.03 1658.64,1210.03 1659.23,1210.03 1659.81,1210.03 1660.4,1210.03 1660.99,1210.03 1661.57,1210.03 1662.16,1210.03 1662.75,1210.03 1663.33,1210.03 1663.92,1210.03 1664.5,1210.03 1665.09,1210.03 1665.68,1210.03 1666.26,1210.03 1666.85,1210.03 1667.44,1210.03 1668.02,1210.03 1668.61,1210.03 1669.2,1210.03 1669.78,1210.03 1670.37,1210.03 1670.96,1210.03 1671.54,1210.03 1672.13,1210.03 1672.71,1210.03 1673.3,1210.03 1673.89,1210.03 1674.47,1210.03 1675.06,1210.03 1675.65,1210.03 1676.23,1210.03 1676.82,1210.03 1677.41,1210.03 1677.99,1210.03 1678.58,1210.03 1679.17,1210.03 1679.75,1210.03 1680.34,1210.03 1680.92,1210.03 1681.51,1210.03 1682.1,1210.03 1682.68,1210.03 1683.27,1210.03 1683.86,1210.03 1684.44,1210.03 1685.03,1210.03 1685.62,1210.03 1686.2,1210.03 1686.79,1210.03 1687.37,1210.03 1687.96,1210.03 1688.55,1210.03 1689.13,1210.03 1689.72,1210.03 1690.31,1210.03 1690.89,1210.03 1691.48,1210.03 1692.07,1210.03 1692.65,1210.03 1693.24,1210.03 1693.83,1210.03 1694.41,1210.03 1695,1210.03 1695.58,1210.03 1696.17,1210.03 1696.76,1210.03 1697.34,1210.03 1697.93,1210.03 1698.52,1210.03 1699.1,1210.03 1699.69,1210.03 1700.28,1210.03 1700.86,1210.03 1701.45,1210.03 1702.04,1210.03 1702.62,1210.03 1703.21,1210.03 1703.79,1210.03 1704.38,1210.03 1704.97,1210.03 1705.55,1210.03 1706.14,1210.03 1706.73,1210.03 1707.31,1210.03 1707.9,1210.03 1708.49,1210.03 1709.07,1210.03 1709.66,1210.03 1710.24,1210.03 1710.83,1210.03 1711.42,1210.03 1712,1210.03 1712.59,1210.03 1713.18,1210.03 1713.76,1210.03 1714.35,1210.03 1714.94,1210.03 1715.52,1210.03 1716.11,1210.03 1716.7,1210.03 1717.28,1210.03 1717.87,1210.03 1718.45,1210.03 1719.04,1210.03 1719.63,1210.03 1720.21,1210.03 1720.8,1210.03 1721.39,1210.03 1721.97,1210.03 1722.56,1210.03 1723.15,1210.03 1723.73,1210.03 1724.32,1210.03 1724.91,1210.03 1725.49,1210.03 1726.08,1210.03 1726.66,1210.03 1727.25,1210.03 1727.84,1210.03 1728.42,1210.03 1729.01,1210.03 1729.6,1210.03 1730.18,1210.03 1730.77,1210.03 1731.36,1210.03 1731.94,1210.03 1732.53,1210.03 1733.11,1210.03 1733.7,1210.03 1734.29,1210.03 1734.87,1210.03 1735.46,1210.03 1736.05,1210.03 1736.63,1210.03 1737.22,1210.03 1737.81,1210.03 1738.39,1210.03 1738.98,1210.03 1739.57,1210.03 1740.15,1210.03 1740.74,1210.03 1741.32,1210.03 1741.91,1210.03 1742.5,1210.03 1743.08,1210.03 1743.67,1210.03 1744.26,1210.03 1744.84,1210.03 1745.43,1210.03 1746.02,1210.03 1746.6,1210.03 1747.19,1210.03 1747.78,1210.03 1748.36,1210.03 1748.95,1210.03 1749.53,1210.03 1750.12,1210.03 1750.71,1210.03 1751.29,1210.03 1751.88,1210.03 1752.47,1210.03 1753.05,1210.03 1753.64,1210.03 1754.23,1210.03 1754.81,1210.03 1755.4,1210.03 1755.99,1210.03 1756.57,1210.03 1757.16,1210.03 1757.74,1210.03 1758.33,1210.03 1758.92,1210.03 1759.5,1210.03 1760.09,1210.03 1760.68,1210.03 1761.26,1210.03 1761.85,1210.03 1762.44,1210.03 1763.02,1210.03 1763.61,1210.03 1764.19,1210.03 1764.78,1210.03 1765.37,1210.03 1765.95,1210.03 1766.54,1210.03 1767.13,1210.03 1767.71,1210.03 1768.3,1210.03 1768.89,1210.03 1769.47,1210.03 1770.06,1210.03 1770.65,1210.03 1771.23,1210.03 1771.82,1210.03 1772.4,1210.03 1772.99,1210.03 1773.58,1210.03 1774.16,1210.03 1774.75,1210.03 1775.34,1210.03 1775.92,1210.03 1776.51,1210.03 1777.1,1210.03 1777.68,1210.03 1778.27,1210.03 1778.86,1210.03 1779.44,1210.03 1780.03,1210.03 1780.61,1210.03 1781.2,1210.03 1781.79,1210.03 1782.37,1210.03 1782.96,1210.03 1783.55,1210.03 1784.13,1210.03 1784.72,1210.03 1785.31,1210.03 1785.89,1210.03 1786.48,1210.03 1787.06,1210.03 1787.65,1210.03 1788.24,1210.03 1788.82,1210.03 1789.41,1210.03 1790,1210.03 1790.58,1210.03 1791.17,1210.03 1791.76,1210.03 1792.34,1210.03 1792.93,1210.03 1793.52,1210.03 1794.1,1210.03 1794.69,1210.03 1795.27,1210.03 1795.86,1210.03 1796.45,1210.03 1797.03,1210.03 1797.62,1210.03 1798.21,1210.03 1798.79,1210.03 1799.38,1210.03 1799.97,1210.03 1800.55,1210.03 1801.14,1210.03 1801.73,1210.03 1802.31,1210.03 1802.9,1210.03 1803.48,1210.03 1804.07,1210.03 1804.66,1210.03 1805.24,1210.03 1805.83,1210.03 1806.42,1210.03 1807,1210.03 1807.59,1210.03 1808.18,1210.03 1808.76,1210.03 1809.35,1210.03 1809.94,1210.03 1810.52,1210.03 1811.11,1210.03 1811.69,1210.03 1812.28,1210.03 1812.87,1210.03 1813.45,1210.03 1814.04,1210.03 1814.63,1210.03 1815.21,1210.03 1815.8,1210.03 1816.39,1210.03 1816.97,1210.03 1817.56,1210.03 1818.14,1210.03 1818.73,1210.03 1819.32,1210.03 1819.9,1210.03 1820.49,1210.03 1821.08,1210.03 1821.66,1210.03 1822.25,1210.03 1822.84,1210.03 1823.42,1210.03 1824.01,1210.03 1824.6,1210.03 1825.18,1210.03 1825.77,1210.03 1826.35,1210.03 1826.94,1210.03 1827.53,1210.03 1828.11,1210.03 1828.7,1210.03 1829.29,1210.03 1829.87,1210.03 1830.46,1210.03 1831.05,1210.03 1831.63,1210.03 1832.22,1210.03 1832.81,1210.03 1833.39,1210.03 1833.98,1210.03 1834.56,1210.03 1835.15,1210.03 1835.74,1210.03 1836.32,1210.03 1836.91,1210.03 1837.5,1210.03 1838.08,1210.03 1838.67,1210.03 1839.26,1210.03 1839.84,1210.03 1840.43,1210.03 1841.01,1210.03 1841.6,1210.03 1842.19,1210.03 1842.77,1210.03 1843.36,1210.03 1843.95,1210.03 1844.53,1210.03 1845.12,1210.03 1845.71,1210.03 1846.29,1210.03 1846.88,1210.03 1847.47,1210.03 1848.05,1210.03 1848.64,1210.03 1849.22,1210.03 1849.81,1210.03 1850.4,1210.03 1850.98,1210.03 1851.57,1210.03 1852.16,1210.03 1852.74,1210.03 1853.33,1210.03 1853.92,1210.03 1854.5,1210.03 1855.09,1210.03 1855.68,1210.03 1856.26,1210.03 1856.85,1210.03 1857.43,1210.03 1858.02,1210.03 1858.61,1210.03 1859.19,1210.03 1859.78,1210.03 1860.37,1210.03 1860.95,1210.03 1861.54,1210.03 1862.13,1210.03 1862.71,1210.03 1863.3,1210.03 1863.88,1210.03 1864.47,1210.03 1865.06,1210.03 1865.64,1210.03 1866.23,1210.03 1866.82,1210.03 1867.4,1210.03 1867.99,1210.03 1868.58,1210.03 1869.16,1210.03 1869.75,1210.03 1870.34,1210.03 1870.92,1210.03 1871.51,1210.03 1872.09,1210.03 1872.68,1210.03 1873.27,1210.03 1873.85,1210.03 1874.44,1210.03 1875.03,1210.03 1875.61,1210.03 1876.2,1210.03 1876.79,1210.03 1877.37,1210.03 1877.96,1210.03 1878.55,1210.03 1879.13,1210.03 1879.72,1210.03 1880.3,1210.03 1880.89,1210.03 1881.48,1210.03 1882.06,1210.03 1882.65,1210.03 1883.24,1210.03 1883.82,1210.03 1884.41,1210.03 1885,1210.03 1885.58,1210.03 1886.17,1210.03 1886.76,1210.03 1887.34,1210.03 1887.93,1210.03 1888.51,1210.03 1889.1,1210.03 1889.69,1210.03 1890.27,1210.03 1890.86,1210.03 1891.45,1210.03 1892.03,1210.03 1892.62,1210.03 1893.21,1210.03 1893.79,1210.03 1894.38,1210.03 1894.96,1210.03 1895.55,1210.03 1896.14,1210.03 1896.72,1210.03 1897.31,1210.03 1897.9,1210.03 1898.48,1210.03 1899.07,1210.03 1899.66,1210.03 1900.24,1210.03 1900.83,1210.03 1901.42,1210.03 1902,1210.03 1902.59,1210.03 1903.17,1210.03 1903.76,1210.03 1904.35,1210.03 1904.93,1210.03 1905.52,1210.03 1906.11,1210.03 1906.69,1210.03 1907.28,1210.03 1907.87,1210.03 1908.45,1210.03 1909.04,1210.03 1909.63,1210.03 1910.21,1210.03 1910.8,1210.03 1911.38,1210.03 1911.97,1210.03 1912.56,1210.03 1913.14,1210.03 1913.73,1210.03 1914.32,1210.03 1914.9,1210.03 1915.49,1210.03 1916.08,1210.03 1916.66,1210.03 1917.25,1210.03 1917.83,1210.03 1918.42,1210.03 1919.01,1210.03 1919.59,1210.03 1920.18,1210.03 1920.77,1210.03 1921.35,1210.03 1921.94,1210.03 1922.53,1210.03 1923.11,1210.03 1923.7,1210.03 1924.29,1210.03 1924.87,1210.03 1925.46,1210.03 1926.04,1210.03 1926.63,1210.03 1927.22,1210.03 1927.8,1210.03 1928.39,1210.03 1928.98,1210.03 1929.56,1210.03 1930.15,1210.03 1930.74,1210.03 1931.32,1210.03 1931.91,1210.03 1932.5,1210.03 1933.08,1210.03 1933.67,1210.03 1934.25,1210.03 1934.84,1210.03 1935.43,1210.03 1936.01,1210.03 1936.6,1210.03 1937.19,1210.03 1937.77,1210.03 1938.36,1210.03 1938.95,1210.03 1939.53,1210.03 1940.12,1210.03 1940.71,1210.03 1941.29,1210.03 1941.88,1210.03 1942.46,1210.03 1943.05,1210.03 1943.64,1210.03 1944.22,1210.03 1944.81,1210.03 1945.4,1210.03 1945.98,1210.03 1946.57,1210.03 1947.16,1210.03 1947.74,1210.03 1948.33,1210.03 1948.91,1210.03 1949.5,1210.03 1950.09,1210.03 1950.67,1210.03 1951.26,1210.03 1951.85,1210.03 1952.43,1210.03 1953.02,1210.03 1953.61,1210.03 1954.19,1210.03 1954.78,1210.03 1955.37,1210.03 1955.95,1210.03 1956.54,1210.03 1957.12,1210.03 1957.71,1210.03 1958.3,1210.03 1958.88,1210.03 1959.47,1210.03 1960.06,1210.03 1960.64,1210.03 1961.23,1210.03 1961.82,1210.03 1962.4,1210.03 1962.99,1210.03 1963.58,1210.03 1964.16,1210.03 1964.75,1210.03 1965.33,1210.03 1965.92,1210.03 1966.51,1210.03 1967.09,1210.03 1967.68,1210.03 1968.27,1210.03 1968.85,1210.03 1969.44,1210.03 1970.03,1210.03 1970.61,1210.03 1971.2,1210.03 1971.78,1210.03 1972.37,1210.03 1972.96,1210.03 1973.54,1210.03 1974.13,1210.03 1974.72,1210.03 1975.3,1210.03 1975.89,1210.03 1976.48,1210.03 1977.06,1210.03 1977.65,1210.03 1978.24,1210.03 1978.82,1210.03 1979.41,1210.03 1979.99,1210.03 1980.58,1210.03 1981.17,1210.03 1981.75,1210.03 1982.34,1210.03 1982.93,1210.03 1983.51,1210.03 1984.1,1210.03 1984.69,1210.03 1985.27,1210.03 1985.86,1210.03 1986.45,1210.03 1987.03,1210.03 1987.62,1210.03 1988.2,1210.03 1988.79,1210.03 1989.38,1210.03 1989.96,1210.03 1990.55,1210.03 1991.14,1210.03 1991.72,1210.03 1992.31,1210.03 1992.9,1210.03 1993.48,1210.03 1994.07,1210.03 1994.65,1210.03 1995.24,1210.03 1995.83,1210.03 1996.41,1210.03 1997,1210.03 1997.59,1210.03 1998.17,1210.03 1998.76,1210.03 1999.35,1210.03 1999.93,1210.03 2000.52,1210.03 2001.11,1210.03 2001.69,1210.03 2002.28,1210.03 2002.86,1210.03 2003.45,1210.03 2004.04,1210.03 2004.62,1210.03 2005.21,1210.03 2005.8,1210.03 2006.38,1210.03 2006.97,1210.03 2007.56,1210.03 2008.14,1210.03 2008.73,1210.03 2009.32,1210.03 2009.9,1210.03 2010.49,1210.03 2011.07,1210.03 2011.66,1210.03 2012.25,1210.03 2012.83,1210.03 2013.42,1210.03 2014.01,1210.03 2014.59,1210.03 2015.18,1210.03 2015.77,1210.03 2016.35,1210.03 2016.94,1210.03 2017.53,1210.03 2018.11,1210.03 2018.7,1210.03 2019.28,1210.03 2019.87,1210.03 2020.46,1210.03 2021.04,1210.03 2021.63,1210.03 2022.22,1210.03 2022.8,1210.03 2023.39,1210.03 2023.98,1210.03 2024.56,1210.03 2025.15,1210.03 2025.73,1210.03 2026.32,1210.03 2026.91,1210.03 2027.49,1210.03 2028.08,1210.03 2028.67,1210.03 2029.25,1210.03 2029.84,1210.03 2030.43,1210.03 2031.01,1210.03 2031.6,1210.03 2032.19,1210.03 2032.77,1210.03 2033.36,1210.03 2033.94,1210.03 2034.53,1210.03 2035.12,1210.03 2035.7,1210.03 2036.29,1210.03 2036.88,1210.03 2037.46,1210.03 2038.05,1210.03 2038.64,1210.03 2039.22,1210.03 2039.81,1210.03 2040.4,1210.03 2040.98,1210.03 2041.57,1210.03 2042.15,1210.03 2042.74,1210.03 2043.33,1210.03 2043.91,1210.03 2044.5,1210.03 2045.09,1210.03 2045.67,1210.03 2046.26,1210.03 2046.85,1210.03 2047.43,1210.03 2048.02,1210.03 2048.6,1210.03 2049.19,1210.03 2049.78,1210.03 2050.36,1210.03 2050.95,1210.03 2051.54,1210.03 2052.12,1210.03 2052.71,1210.03 2053.3,1210.03 2053.88,1210.03 2054.47,1210.03 2055.06,1210.03 2055.64,1210.03 2056.23,1210.03 2056.81,1210.03 2057.4,1210.03 2057.99,1210.03 2058.57,1210.03 2059.16,1210.03 2059.75,1210.03 2060.33,1210.03 2060.92,1210.03 2061.51,1210.03 2062.09,1210.03 2062.68,1210.03 2063.27,1210.03 2063.85,1210.03 2064.44,1210.03 2065.02,1210.03 2065.61,1210.03 2066.2,1210.03 2066.78,1210.03 2067.37,1210.03 2067.96,1210.03 2068.54,1210.03 2069.13,1210.03 2069.72,1210.03 2070.3,1210.03 2070.89,1210.03 2071.48,1210.03 2072.06,1210.03 2072.65,1210.03 2073.23,1210.03 2073.82,1210.03 2074.41,1210.03 2074.99,1210.03 2075.58,1210.03 2076.17,1210.03 2076.75,1210.03 2077.34,1210.03 2077.93,1210.03 2078.51,1210.03 2079.1,1210.03 2079.68,1210.03 2080.27,1210.03 2080.86,1210.03 2081.44,1210.03 2082.03,1210.03 2082.62,1210.03 2083.2,1210.03 2083.79,1210.03 2084.38,1210.03 2084.96,1210.03 2085.55,1210.03 2086.14,1210.03 2086.72,1210.03 2087.31,1210.03 2087.89,1210.03 2088.48,1210.03 2089.07,1210.03 2089.65,1210.03 2090.24,1210.03 2090.83,1210.03 2091.41,1210.03 2092,1210.03 2092.59,1210.03 2093.17,1210.03 2093.76,1210.03 2094.35,1210.03 2094.93,1210.03 2095.52,1210.03 2096.1,1210.03 2096.69,1210.03 2097.28,1210.03 2097.86,1210.03 2098.45,1210.03 2099.04,1210.03 2099.62,1210.03 2100.21,1210.03 2100.8,1210.03 2101.38,1210.03 2101.97,1210.03 2102.55,1210.03 2103.14,1210.03 2103.73,1210.03 2104.31,1210.03 2104.9,1210.03 2105.49,1210.03 2106.07,1210.03 2106.66,1210.03 2107.25,1210.03 2107.83,1210.03 2108.42,1210.03 2109.01,1210.03 2109.59,1210.03 2110.18,1210.03 2110.76,1210.03 2111.35,1210.03 2111.94,1210.03 2112.52,1210.03 2113.11,1210.03 2113.7,1210.03 2114.28,1210.03 2114.87,1210.03 2115.46,1210.03 2116.04,1210.03 2116.63,1210.03 2117.22,1210.03 2117.8,1210.03 2118.39,1210.03 2118.97,1210.03 2119.56,1210.03 2120.15,1210.03 2120.73,1210.03 2121.32,1210.03 2121.91,1210.03 2122.49,1210.03 2123.08,1210.03 2123.67,1210.03 2124.25,1210.03 2124.84,1210.03 2125.42,1210.03 2126.01,1210.03 2126.6,1210.03 2127.18,1210.03 2127.77,1210.03 2128.36,1210.03 2128.94,1210.03 2129.53,1210.03 2130.12,1210.03 2130.7,1210.03 2131.29,1210.03 2131.88,1210.03 2132.46,1210.03 2133.05,1210.03 2133.63,1210.03 2134.22,1210.03 2134.81,1210.03 2135.39,1210.03 2135.98,1210.03 2136.57,1210.03 2137.15,1210.03 2137.74,1210.03 2138.33,1210.03 2138.91,1210.03 2139.5,1210.03 2140.09,1210.03 2140.67,1210.03 2141.26,1210.03 2141.84,1210.03 2142.43,1210.03 2143.02,1210.03 2143.6,1210.03 2144.19,1210.03 2144.78,1210.03 2145.36,1210.03 2145.95,1210.03 2146.54,1210.03 2147.12,1210.03 2147.71,1210.03 2148.3,1210.03 2148.88,1210.03 2149.47,1210.03 2150.05,1210.03 2150.64,1210.03 2151.23,1210.03 2151.81,1210.03 2152.4,1210.03 2152.99,1210.03 2153.57,1210.03 2154.16,1210.03 2154.75,1210.03 2155.33,1210.03 2155.92,1210.03 2156.5,1210.03 2157.09,1210.03 2157.68,1210.03 2158.26,1210.03 \"/>\n<path clip-path=\"url(#clip032)\" d=\"M986.025 1209.95 L986.612 1209.95 L987.198 1209.95 L987.785 1209.95 L988.371 1209.95 L988.957 1209.95 L989.544 1209.95 L990.13 1209.95 L990.717 1209.95 L991.303 1209.95 L991.889 1209.95 L992.476 1209.95 L993.062 1209.95 L993.649 1209.95 L994.235 1209.95 L994.822 1209.95 L995.408 1209.95 L995.994 1209.95 L996.581 1209.95 L997.167 1209.95 L997.754 1209.95 L998.34 1209.95 L998.926 1209.95 L999.513 1209.95 L1000.1 1209.95 L1000.69 1209.95 L1001.27 1209.95 L1001.86 1209.95 L1002.44 1209.95 L1003.03 1209.95 L1003.62 1209.95 L1004.2 1209.95 L1004.79 1209.95 L1005.38 1209.95 L1005.96 1209.95 L1006.55 1209.95 L1007.14 1209.95 L1007.72 1209.95 L1008.31 1209.95 L1008.9 1209.95 L1009.48 1209.95 L1010.07 1209.95 L1010.65 1209.95 L1011.24 1209.95 L1011.83 1209.95 L1012.41 1209.95 L1013 1209.95 L1013.59 1209.95 L1014.17 1209.95 L1014.76 1209.95 L1015.35 1209.95 L1015.93 1209.95 L1016.52 1209.95 L1017.11 1209.95 L1017.69 1209.95 L1018.28 1209.95 L1018.86 1209.95 L1019.45 1209.95 L1020.04 1209.95 L1020.62 1209.95 L1021.21 1209.95 L1021.8 1209.95 L1022.38 1209.95 L1022.97 1209.95 L1023.56 1209.95 L1024.14 1209.95 L1024.73 1209.95 L1025.32 1209.95 L1025.9 1209.95 L1026.49 1209.95 L1027.07 1209.95 L1027.66 1209.95 L1028.25 1209.95 L1028.83 1209.95 L1029.42 1209.95 L1030.01 1209.95 L1030.59 1209.95 L1031.18 1209.95 L1031.77 1209.95 L1032.35 1209.95 L1032.94 1209.95 L1033.52 1209.95 L1034.11 1209.95 L1034.7 1209.95 L1035.28 1209.95 L1035.87 1209.95 L1036.46 1209.95 L1037.04 1209.95 L1037.63 1209.95 L1038.22 1209.95 L1038.8 1209.95 L1039.39 1209.95 L1039.98 1209.95 L1040.56 1209.95 L1041.15 1209.95 L1041.73 1209.95 L1042.32 1209.95 L1042.91 1209.95 L1043.49 1209.95 L1044.08 1209.95 L1044.67 1209.95 L1045.25 1209.95 L1045.84 1209.95 L1046.43 1209.95 L1047.01 1209.95 L1047.6 1209.95 L1048.19 1209.95 L1048.77 1209.95 L1049.36 1209.95 L1049.94 1209.95 L1050.53 1209.95 L1051.12 1209.95 L1051.7 1209.95 L1052.29 1209.95 L1052.88 1209.95 L1053.46 1209.95 L1054.05 1209.95 L1054.64 1209.95 L1055.22 1209.95 L1055.81 1209.95 L1056.39 1209.95 L1056.98 1209.95 L1057.57 1209.95 L1058.15 1209.95 L1058.74 1209.95 L1059.33 1209.95 L1059.91 1209.95 L1060.5 1209.95 L1061.09 1209.95 L1061.67 1209.95 L1062.26 1209.95 L1062.85 1209.95 L1063.43 1209.95 L1064.02 1209.95 L1064.6 1209.95 L1065.19 1209.95 L1065.78 1209.95 L1066.36 1209.95 L1066.95 1209.95 L1067.54 1209.95 L1068.12 1209.95 L1068.71 1209.95 L1069.3 1209.95 L1069.88 1209.95 L1070.47 1209.95 L1071.06 1209.95 L1071.64 1209.95 L1072.23 1209.95 L1072.81 1209.95 L1073.4 1209.95 L1073.99 1209.95 L1074.57 1209.95 L1075.16 1209.95 L1075.75 1209.95 L1076.33 1209.95 L1076.92 1209.95 L1077.51 1209.95 L1078.09 1209.95 L1078.68 1209.95 L1079.26 1209.95 L1079.85 1209.95 L1080.44 1209.95 L1081.02 1209.95 L1081.61 1209.95 L1082.2 1209.95 L1082.78 1209.95 L1083.37 1209.95 L1083.96 1209.95 L1084.54 1209.95 L1085.13 1209.95 L1085.72 1209.95 L1086.3 1209.95 L1086.89 1209.95 L1087.47 1209.95 L1088.06 1209.95 L1088.65 1209.95 L1089.23 1209.95 L1089.82 1209.95 L1090.41 1209.95 L1090.99 1209.95 L1091.58 1209.95 L1092.17 1209.95 L1092.75 1209.95 L1093.34 1209.95 L1093.93 1209.95 L1094.51 1209.95 L1095.1 1209.95 L1095.68 1209.95 L1096.27 1209.95 L1096.86 1209.95 L1097.44 1209.95 L1098.03 1209.95 L1098.62 1209.95 L1099.2 1209.95 L1099.79 1209.95 L1100.38 1209.95 L1100.96 1209.95 L1101.55 1209.95 L1102.14 1209.95 L1102.72 1209.95 L1103.31 1209.95 L1103.89 1209.95 L1104.48 1209.95 L1105.07 1209.95 L1105.65 1209.95 L1106.24 1209.95 L1106.83 1209.95 L1107.41 1209.95 L1108 1209.95 L1108.59 1209.95 L1109.17 1209.95 L1109.76 1209.95 L1110.34 1209.95 L1110.93 1209.95 L1111.52 1209.95 L1112.1 1209.95 L1112.69 1209.95 L1113.28 1209.95 L1113.86 1209.95 L1114.45 1209.95 L1115.04 1209.95 L1115.62 1209.95 L1116.21 1209.95 L1116.8 1209.95 L1117.38 1209.95 L1117.97 1209.95 L1118.55 1209.95 L1119.14 1209.95 L1119.73 1209.95 L1120.31 1209.95 L1120.9 1209.95 L1121.49 1209.95 L1122.07 1209.95 L1122.66 1209.95 L1123.25 1209.95 L1123.83 1209.95 L1124.42 1209.95 L1125.01 1209.95 L1125.59 1209.95 L1126.18 1209.95 L1126.76 1209.95 L1127.35 1209.95 L1127.94 1209.95 L1128.52 1209.95 L1129.11 1209.95 L1129.7 1209.95 L1130.28 1209.95 L1130.87 1209.95 L1131.46 1209.95 L1132.04 1209.95 L1132.63 1209.95 L1133.21 1209.95 L1133.8 1209.95 L1134.39 1209.95 L1134.97 1209.95 L1135.56 1209.95 L1136.15 1209.95 L1136.73 1209.95 L1137.32 1209.95 L1137.91 1209.95 L1138.49 1209.95 L1139.08 1209.95 L1139.67 1209.95 L1140.25 1209.95 L1140.84 1209.95 L1141.42 1209.95 L1142.01 1209.95 L1142.6 1209.95 L1143.18 1209.95 L1143.77 1209.95 L1144.36 1209.95 L1144.94 1209.95 L1145.53 1209.95 L1146.12 1209.95 L1146.7 1209.95 L1147.29 1209.95 L1147.88 1209.95 L1148.46 1209.95 L1149.05 1209.95 L1149.63 1209.95 L1150.22 1209.95 L1150.81 1209.95 L1151.39 1209.95 L1151.98 1209.95 L1152.57 1209.95 L1153.15 1209.95 L1153.74 1209.95 L1154.33 1209.95 L1154.91 1209.95 L1155.5 1209.95 L1156.09 1209.95 L1156.67 1209.95 L1157.26 1209.95 L1157.84 1209.95 L1158.43 1209.95 L1159.02 1209.95 L1159.6 1209.95 L1160.19 1209.95 L1160.78 1209.95 L1161.36 1209.95 L1161.95 1209.95 L1162.54 1209.95 L1163.12 1209.95 L1163.71 1209.95 L1164.29 1209.95 L1164.88 1209.95 L1165.47 1209.95 L1166.05 1209.95 L1166.64 1209.95 L1167.23 1209.95 L1167.81 1209.95 L1168.4 1209.95 L1168.99 1209.95 L1169.57 1209.95 L1170.16 1209.95 L1170.75 1209.95 L1171.33 1209.95 L1171.92 1209.95 L1172.5 1209.95 L1173.09 1209.95 L1173.68 1209.95 L1174.26 1209.95 L1174.85 1209.95 L1175.44 1209.95 L1176.02 1209.95 L1176.61 1209.95 L1177.2 1209.95 L1177.78 1209.95 L1178.37 1209.95 L1178.96 1209.95 L1179.54 1209.95 L1180.13 1209.95 L1180.71 1209.95 L1181.3 1209.95 L1181.89 1209.95 L1182.47 1209.95 L1183.06 1209.95 L1183.65 1209.95 L1184.23 1209.95 L1184.82 1209.95 L1185.41 1209.95 L1185.99 1209.95 L1186.58 1209.95 L1187.16 1209.95 L1187.75 1209.95 L1188.34 1209.95 L1188.92 1209.95 L1189.51 1209.95 L1190.1 1209.95 L1190.68 1209.95 L1191.27 1209.95 L1191.86 1209.95 L1192.44 1209.95 L1193.03 1209.95 L1193.62 1209.95 L1194.2 1209.95 L1194.79 1209.95 L1195.37 1209.95 L1195.96 1209.95 L1196.55 1209.95 L1197.13 1209.95 L1197.72 1209.95 L1198.31 1209.95 L1198.89 1209.95 L1199.48 1209.95 L1200.07 1209.95 L1200.65 1209.95 L1201.24 1209.95 L1201.83 1209.95 L1202.41 1209.95 L1203 1209.95 L1203.58 1209.95 L1204.17 1209.95 L1204.76 1209.95 L1205.34 1209.95 L1205.93 1209.95 L1206.52 1209.95 L1207.1 1209.95 L1207.69 1209.95 L1208.28 1209.95 L1208.86 1209.95 L1209.45 1209.95 L1210.03 1209.95 L1210.62 1209.95 L1211.21 1209.95 L1211.79 1209.95 L1212.38 1209.95 L1212.97 1209.95 L1213.55 1209.95 L1214.14 1209.95 L1214.73 1209.95 L1215.31 1209.95 L1215.9 1209.95 L1216.49 1209.95 L1217.07 1209.95 L1217.66 1209.95 L1218.24 1209.95 L1218.83 1209.95 L1219.42 1209.95 L1220 1209.95 L1220.59 1209.95 L1221.18 1209.95 L1221.76 1209.95 L1222.35 1209.95 L1222.94 1209.95 L1223.52 1209.95 L1224.11 1209.95 L1224.7 1209.95 L1225.28 1209.95 L1225.87 1209.95 L1226.45 1209.95 L1227.04 1209.95 L1227.63 1209.95 L1228.21 1209.95 L1228.8 1209.95 L1229.39 1209.95 L1229.97 1209.95 L1230.56 1209.95 L1231.15 1209.95 L1231.73 1209.95 L1232.32 1209.95 L1232.91 1209.95 L1233.49 1209.95 L1234.08 1209.95 L1234.66 1209.95 L1235.25 1209.95 L1235.84 1209.95 L1236.42 1209.95 L1237.01 1209.95 L1237.6 1209.95 L1238.18 1209.95 L1238.77 1209.95 L1239.36 1209.95 L1239.94 1209.95 L1240.53 1209.95 L1241.11 1209.95 L1241.7 1209.95 L1242.29 1209.95 L1242.87 1209.95 L1243.46 1209.95 L1244.05 1209.95 L1244.63 1209.95 L1245.22 1209.95 L1245.81 1209.95 L1246.39 1209.95 L1246.98 1209.95 L1247.57 1209.95 L1248.15 1209.95 L1248.74 1209.95 L1249.32 1209.95 L1249.91 1209.95 L1250.5 1209.95 L1251.08 1209.95 L1251.67 1209.95 L1252.26 1209.95 L1252.84 1209.95 L1253.43 1209.95 L1254.02 1209.95 L1254.6 1209.95 L1255.19 1209.95 L1255.78 1209.95 L1256.36 1209.95 L1256.95 1209.95 L1257.53 1209.95 L1258.12 1209.95 L1258.71 1209.95 L1259.29 1209.95 L1259.88 1209.95 L1260.47 1209.95 L1261.05 1209.95 L1261.64 1209.95 L1262.23 1209.95 L1262.81 1209.95 L1263.4 1209.95 L1263.98 1209.95 L1264.57 1209.95 L1265.16 1209.95 L1265.74 1209.95 L1266.33 1209.95 L1266.92 1209.95 L1267.5 1209.95 L1268.09 1209.95 L1268.68 1209.95 L1269.26 1209.95 L1269.85 1209.95 L1270.44 1209.95 L1271.02 1209.95 L1271.61 1209.95 L1272.19 1209.95 L1272.78 1209.95 L1273.37 1209.95 L1273.95 1209.95 L1274.54 1209.95 L1275.13 1209.95 L1275.71 1209.95 L1276.3 1209.95 L1276.89 1209.95 L1277.47 1209.95 L1278.06 1209.95 L1278.65 1209.95 L1279.23 1209.95 L1279.82 1209.95 L1280.4 1209.95 L1280.99 1209.95 L1281.58 1209.95 L1282.16 1209.95 L1282.75 1209.95 L1283.34 1209.95 L1283.92 1209.95 L1284.51 1209.95 L1285.1 1209.95 L1285.68 1209.95 L1286.27 1209.95 L1286.86 1209.95 L1287.44 1209.95 L1288.03 1209.95 L1288.61 1209.95 L1289.2 1209.95 L1289.79 1209.95 L1290.37 1209.95 L1290.96 1209.95 L1291.55 1209.95 L1292.13 1209.95 L1292.72 1209.95 L1293.31 1209.95 L1293.89 1209.95 L1294.48 1209.95 L1295.06 1209.95 L1295.65 1209.95 L1296.24 1209.95 L1296.82 1209.95 L1297.41 1209.95 L1298 1209.95 L1298.58 1209.95 L1299.17 1209.95 L1299.76 1209.95 L1300.34 1209.95 L1300.93 1209.95 L1301.52 1209.95 L1302.1 1209.95 L1302.69 1209.95 L1303.27 1209.95 L1303.86 1209.95 L1304.45 1209.95 L1305.03 1209.95 L1305.62 1209.95 L1306.21 1209.95 L1306.79 1209.95 L1307.38 1209.95 L1307.97 1209.95 L1308.55 1209.95 L1309.14 1209.95 L1309.73 1209.95 L1310.31 1209.95 L1310.9 1209.95 L1311.48 1209.95 L1312.07 1209.95 L1312.66 1209.95 L1313.24 1209.95 L1313.83 1209.95 L1314.42 1209.95 L1315 1209.95 L1315.59 1209.95 L1316.18 1209.95 L1316.76 1209.95 L1317.35 1209.95 L1317.93 1209.95 L1318.52 1209.95 L1319.11 1209.95 L1319.69 1209.95 L1320.28 1209.95 L1320.87 1209.95 L1321.45 1209.95 L1322.04 1209.95 L1322.63 1209.95 L1323.21 1209.95 L1323.8 1209.95 L1324.39 1209.95 L1324.97 1209.95 L1325.56 1209.95 L1326.14 1209.95 L1326.73 1209.95 L1327.32 1209.95 L1327.9 1209.95 L1328.49 1209.95 L1329.08 1209.95 L1329.66 1209.95 L1330.25 1209.95 L1330.84 1209.95 L1331.42 1209.95 L1332.01 1209.95 L1332.6 1209.95 L1333.18 1209.95 L1333.77 1209.95 L1334.35 1209.95 L1334.94 1209.95 L1335.53 1209.95 L1336.11 1209.95 L1336.7 1209.95 L1337.29 1209.95 L1337.87 1209.95 L1338.46 1209.95 L1339.05 1209.95 L1339.63 1209.95 L1340.22 1209.95 L1340.8 1209.95 L1341.39 1209.95 L1341.98 1209.95 L1342.56 1209.95 L1343.15 1209.95 L1343.74 1209.95 L1344.32 1209.95 L1344.91 1209.95 L1345.5 1209.95 L1346.08 1209.95 L1346.67 1209.95 L1347.26 1209.95 L1347.84 1209.95 L1348.43 1209.95 L1349.01 1209.95 L1349.6 1209.95 L1350.19 1209.95 L1350.77 1209.95 L1351.36 1209.95 L1351.95 1209.95 L1352.53 1209.95 L1353.12 1209.95 L1353.71 1209.95 L1354.29 1209.95 L1354.88 1209.95 L1355.47 1209.95 L1356.05 1209.95 L1356.64 1209.95 L1357.22 1209.95 L1357.81 1209.95 L1358.4 1209.95 L1358.98 1209.95 L1359.57 1209.95 L1360.16 1209.95 L1360.74 1209.95 L1361.33 1209.95 L1361.92 1209.95 L1362.5 1209.95 L1363.09 1209.95 L1363.68 1209.95 L1364.26 1209.95 L1364.85 1209.95 L1365.43 1209.95 L1366.02 1209.95 L1366.61 1209.95 L1367.19 1209.95 L1367.78 1209.95 L1368.37 1209.95 L1368.95 1209.95 L1369.54 1209.95 L1370.13 1209.95 L1370.71 1209.95 L1371.3 1209.95 L1371.88 1209.95 L1372.47 1209.95 L1373.06 1209.95 L1373.64 1209.95 L1374.23 1209.95 L1374.82 1209.95 L1375.4 1209.95 L1375.99 1209.95 L1376.58 1209.95 L1377.16 1209.95 L1377.75 1209.95 L1378.34 1209.95 L1378.92 1209.95 L1379.51 1209.95 L1380.09 1209.95 L1380.68 1209.95 L1381.27 1209.95 L1381.85 1209.95 L1382.44 1209.95 L1383.03 1209.95 L1383.61 1209.95 L1384.2 1209.95 L1384.79 1209.95 L1385.37 1209.95 L1385.96 1209.95 L1386.55 1209.95 L1387.13 1209.95 L1387.72 1209.95 L1388.3 1209.95 L1388.89 1209.95 L1389.48 1209.95 L1390.06 1209.95 L1390.65 1209.95 L1391.24 1209.95 L1391.82 1209.95 L1392.41 1209.95 L1393 1209.95 L1393.58 1209.95 L1394.17 1209.95 L1394.75 1209.95 L1395.34 1209.95 L1395.93 1209.95 L1396.51 1209.95 L1397.1 1209.95 L1397.69 1209.95 L1398.27 1209.95 L1398.86 1209.95 L1399.45 1209.95 L1400.03 1209.95 L1400.62 1209.95 L1401.21 1209.95 L1401.79 1209.95 L1402.38 1209.95 L1402.96 1209.95 L1403.55 1209.95 L1404.14 1209.95 L1404.72 1209.95 L1405.31 1209.95 L1405.9 1209.95 L1406.48 1209.95 L1407.07 1209.95 L1407.66 1209.95 L1408.24 1209.95 L1408.83 1209.95 L1409.42 1209.95 L1410 1209.95 L1410.59 1209.95 L1411.17 1209.95 L1411.76 1209.95 L1412.35 1209.95 L1412.93 1209.95 L1413.52 1209.95 L1414.11 1209.95 L1414.69 1209.95 L1415.28 1209.95 L1415.87 1209.95 L1416.45 1209.95 L1417.04 1209.95 L1417.63 1209.95 L1418.21 1209.95 L1418.8 1209.95 L1419.38 1209.95 L1419.97 1209.95 L1420.56 1209.95 L1421.14 1209.95 L1421.73 1209.95 L1422.32 1209.95 L1422.9 1209.95 L1423.49 1209.95 L1424.08 1209.95 L1424.66 1209.95 L1425.25 1209.95 L1425.83 1209.95 L1426.42 1209.95 L1427.01 1209.95 L1427.59 1209.95 L1428.18 1209.95 L1428.77 1209.95 L1429.35 1209.95 L1429.94 1209.95 L1430.53 1209.95 L1431.11 1209.95 L1431.7 1209.95 L1432.29 1209.95 L1432.87 1209.95 L1433.46 1209.95 L1434.04 1209.95 L1434.63 1209.95 L1435.22 1209.95 L1435.8 1209.95 L1436.39 1209.95 L1436.98 1209.95 L1437.56 1209.95 L1438.15 1209.95 L1438.74 1209.95 L1439.32 1209.95 L1439.91 1209.95 L1440.5 1209.95 L1441.08 1209.95 L1441.67 1209.95 L1442.25 1209.95 L1442.84 1209.95 L1443.43 1209.95 L1444.01 1209.95 L1444.6 1209.95 L1445.19 1209.95 L1445.77 1209.95 L1446.36 1209.95 L1446.95 1209.95 L1447.53 1209.95 L1448.12 1209.95 L1448.7 1209.95 L1449.29 1209.95 L1449.88 1209.95 L1450.46 1209.95 L1451.05 1209.95 L1451.64 1209.95 L1452.22 1209.95 L1452.81 1209.95 L1453.4 1209.95 L1453.98 1209.95 L1454.57 1209.95 L1455.16 1209.95 L1455.74 1209.95 L1456.33 1209.95 L1456.91 1209.95 L1457.5 1209.95 L1458.09 1209.95 L1458.67 1209.95 L1459.26 1209.95 L1459.85 1209.95 L1460.43 1209.95 L1461.02 1209.95 L1461.61 1209.95 L1462.19 1209.95 L1462.78 1209.95 L1463.37 1209.95 L1463.95 1209.95 L1464.54 1209.95 L1465.12 1209.95 L1465.71 1209.95 L1466.3 1209.95 L1466.88 1209.95 L1467.47 1209.95 L1468.06 1209.95 L1468.64 1209.95 L1469.23 1209.95 L1469.82 1209.95 L1470.4 1209.95 L1470.99 1209.95 L1471.57 1209.95 L1472.16 1209.95 L1472.75 1209.95 L1473.33 1209.95 L1473.92 1209.95 L1474.51 1209.95 L1475.09 1209.95 L1475.68 1209.95 L1476.27 1209.95 L1476.85 1209.95 L1477.44 1209.95 L1478.03 1209.95 L1478.61 1209.95 L1479.2 1209.95 L1479.78 1209.95 L1480.37 1209.95 L1480.96 1209.95 L1481.54 1209.95 L1482.13 1209.95 L1482.72 1209.95 L1483.3 1209.95 L1483.89 1209.95 L1484.48 1209.95 L1485.06 1209.95 L1485.65 1209.95 L1486.24 1209.95 L1486.82 1209.95 L1487.41 1209.95 L1487.99 1209.95 L1488.58 1209.95 L1489.17 1209.95 L1489.75 1209.95 L1490.34 1209.95 L1490.93 1209.95 L1491.51 1209.95 L1492.1 1209.95 L1492.69 1209.95 L1493.27 1209.95 L1493.86 1209.95 L1494.45 1209.95 L1495.03 1209.95 L1495.62 1209.95 L1496.2 1209.95 L1496.79 1209.95 L1497.38 1209.95 L1497.96 1209.95 L1498.55 1209.95 L1499.14 1209.95 L1499.72 1209.95 L1500.31 1209.95 L1500.9 1209.95 L1501.48 1209.95 L1502.07 1209.95 L1502.65 1209.95 L1503.24 1209.95 L1503.83 1209.95 L1504.41 1209.95 L1505 1209.95 L1505.59 1209.95 L1506.17 1209.95 L1506.76 1209.95 L1507.35 1209.95 L1507.93 1209.95 L1508.52 1209.95 L1509.11 1209.95 L1509.69 1209.95 L1510.28 1209.95 L1510.86 1209.95 L1511.45 1209.95 L1512.04 1209.95 L1512.62 1209.95 L1513.21 1209.95 L1513.8 1209.95 L1514.38 1209.95 L1514.97 1209.95 L1515.56 1209.95 L1516.14 1209.95 L1516.73 1209.95 L1517.32 1209.95 L1517.9 1209.95 L1518.49 1209.95 L1519.07 1209.95 L1519.66 1209.95 L1520.25 1209.95 L1520.83 1209.95 L1521.42 1209.95 L1522.01 1209.95 L1522.59 1209.95 L1523.18 1209.95 L1523.77 1209.95 L1524.35 1209.95 L1524.94 1209.95 L1525.52 1209.95 L1526.11 1209.95 L1526.7 1209.95 L1527.28 1209.95 L1527.87 1209.95 L1528.46 1209.95 L1529.04 1209.95 L1529.63 1209.95 L1530.22 1209.95 L1530.8 1209.95 L1531.39 1209.95 L1531.98 1209.95 L1532.56 1209.95 L1533.15 1209.95 L1533.73 1209.95 L1534.32 1209.95 L1534.91 1209.95 L1535.49 1209.95 L1536.08 1209.95 L1536.67 1209.95 L1537.25 1209.95 L1537.84 1209.95 L1538.43 1209.95 L1539.01 1209.95 L1539.6 1209.95 L1540.19 1209.95 L1540.77 1209.95 L1541.36 1209.95 L1541.94 1209.95 L1542.53 1209.95 L1543.12 1209.95 L1543.7 1209.95 L1544.29 1209.95 L1544.88 1209.95 L1545.46 1209.95 L1546.05 1209.95 L1546.64 1209.95 L1547.22 1209.95 L1547.81 1209.95 L1548.4 1209.95 L1548.98 1209.95 L1549.57 1209.95 L1550.15 1209.95 L1550.74 1209.95 L1551.33 1209.95 L1551.91 1209.95 L1552.5 1209.95 L1553.09 1209.95 L1553.67 1209.95 L1554.26 1209.95 L1554.85 1209.95 L1555.43 1209.95 L1556.02 1209.95 L1556.6 1209.95 L1557.19 1209.95 L1557.78 1209.95 L1558.36 1209.95 L1558.95 1209.95 L1559.54 1209.95 L1560.12 1209.95 L1560.71 1209.95 L1561.3 1209.95 L1561.88 1209.95 L1562.47 1209.95 L1563.06 1209.95 L1563.64 1209.95 L1564.23 1209.95 L1564.81 1209.95 L1565.4 1209.95 L1565.99 1209.95 L1566.57 1209.95 L1567.16 1209.95 L1567.75 1209.95 L1568.33 1209.95 L1568.92 1209.95 L1569.51 1209.95 L1570.09 1209.95 L1570.68 1209.95 L1571.27 1209.95 L1571.85 1209.95 L1572.44 1209.95 L1573.02 1209.95 L1573.61 1209.95 L1574.2 1209.95 L1574.78 1209.95 L1575.37 1209.95 L1575.96 1209.95 L1576.54 1209.95 L1577.13 1209.95 L1577.72 1209.95 L1578.3 1209.95 L1578.89 1209.95 L1579.47 1209.95 L1580.06 1209.95 L1580.65 1209.95 L1581.23 1209.95 L1581.82 1209.95 L1582.41 1209.95 L1582.99 1209.95 L1583.58 1209.95 L1584.17 1209.95 L1584.75 1209.95 L1585.34 1209.95 L1585.93 1209.95 L1586.51 1209.95 L1587.1 1209.95 L1587.68 1209.95 L1588.27 1209.95 L1588.86 1209.95 L1589.44 1209.95 L1590.03 1209.95 L1590.62 1209.95 L1591.2 1209.95 L1591.79 1209.95 L1592.38 1209.95 L1592.96 1209.95 L1593.55 1209.95 L1594.14 1209.95 L1594.72 1209.95 L1595.31 1209.95 L1595.89 1209.95 L1596.48 1209.95 L1597.07 1209.95 L1597.65 1209.95 L1598.24 1209.95 L1598.83 1209.95 L1599.41 1209.95 L1600 1209.95 L1600.59 1209.95 L1601.17 1209.95 L1601.76 1209.95 L1602.34 1209.95 L1602.93 1209.95 L1603.52 1209.95 L1604.1 1209.95 L1604.69 1209.95 L1605.28 1209.95 L1605.86 1209.95 L1606.45 1209.95 L1607.04 1209.95 L1607.62 1209.95 L1608.21 1209.95 L1608.8 1209.95 L1609.38 1209.95 L1609.97 1209.95 L1610.55 1209.95 L1611.14 1209.95 L1611.73 1209.95 L1612.31 1209.95 L1612.9 1209.95 L1613.49 1209.95 L1614.07 1209.95 L1614.66 1209.95 L1615.25 1209.95 L1615.83 1209.95 L1616.42 1209.95 L1617.01 1209.95 L1617.59 1209.95 L1618.18 1209.95 L1618.76 1209.95 L1619.35 1209.95 L1619.94 1209.95 L1620.52 1209.95 L1621.11 1209.95 L1621.7 1209.95 L1622.28 1209.95 L1622.87 1209.95 L1623.46 1209.95 L1624.04 1209.95 L1624.63 1209.95 L1625.22 1209.95 L1625.8 1209.95 L1626.39 1209.95 L1626.97 1209.95 L1627.56 1209.95 L1628.15 1209.95 L1628.73 1209.95 L1629.32 1209.95 L1629.91 1209.95 L1630.49 1209.95 L1631.08 1209.95 L1631.67 1209.95 L1632.25 1209.95 L1632.84 1209.95 L1633.42 1209.95 L1634.01 1209.95 L1634.6 1209.95 L1635.18 1209.95 L1635.77 1209.95 L1636.36 1209.95 L1636.94 1209.95 L1637.53 1209.95 L1638.12 1209.95 L1638.7 1209.95 L1639.29 1209.95 L1639.88 1209.95 L1640.46 1209.95 L1641.05 1209.95 L1641.63 1209.95 L1642.22 1209.95 L1642.81 1209.95 L1643.39 1209.95 L1643.98 1209.95 L1644.57 1209.95 L1645.15 1209.95 L1645.74 1209.95 L1646.33 1209.95 L1646.91 1209.95 L1647.5 1209.95 L1648.09 1209.95 L1648.67 1209.95 L1649.26 1209.95 L1649.84 1209.95 L1650.43 1209.95 L1651.02 1209.95 L1651.6 1209.95 L1652.19 1209.95 L1652.78 1209.95 L1653.36 1209.95 L1653.95 1209.95 L1654.54 1209.95 L1655.12 1209.95 L1655.71 1209.95 L1656.29 1209.95 L1656.88 1209.95 L1657.47 1209.95 L1658.05 1209.95 L1658.64 1209.95 L1659.23 1209.95 L1659.81 1209.95 L1660.4 1209.95 L1660.99 1209.95 L1661.57 1209.95 L1662.16 1209.95 L1662.75 1209.95 L1663.33 1209.95 L1663.92 1209.95 L1664.5 1209.95 L1665.09 1209.95 L1665.68 1209.95 L1666.26 1209.95 L1666.85 1209.95 L1667.44 1209.95 L1668.02 1209.95 L1668.61 1209.95 L1669.2 1209.95 L1669.78 1209.95 L1670.37 1209.95 L1670.96 1209.95 L1671.54 1209.95 L1672.13 1209.95 L1672.71 1209.95 L1673.3 1209.95 L1673.89 1209.95 L1674.47 1209.95 L1675.06 1209.95 L1675.65 1209.95 L1676.23 1209.95 L1676.82 1209.95 L1677.41 1209.95 L1677.99 1209.95 L1678.58 1209.95 L1679.17 1209.95 L1679.75 1209.95 L1680.34 1209.95 L1680.92 1209.95 L1681.51 1209.95 L1682.1 1209.95 L1682.68 1209.95 L1683.27 1209.95 L1683.86 1209.95 L1684.44 1209.95 L1685.03 1209.95 L1685.62 1209.95 L1686.2 1209.95 L1686.79 1209.95 L1687.37 1209.95 L1687.96 1209.95 L1688.55 1209.95 L1689.13 1209.95 L1689.72 1209.95 L1690.31 1209.95 L1690.89 1209.95 L1691.48 1209.95 L1692.07 1209.95 L1692.65 1209.95 L1693.24 1209.95 L1693.83 1209.95 L1694.41 1209.95 L1695 1209.95 L1695.58 1209.95 L1696.17 1209.95 L1696.76 1209.95 L1697.34 1209.95 L1697.93 1209.95 L1698.52 1209.95 L1699.1 1209.95 L1699.69 1209.95 L1700.28 1209.95 L1700.86 1209.95 L1701.45 1209.95 L1702.04 1209.95 L1702.62 1209.95 L1703.21 1209.95 L1703.79 1209.95 L1704.38 1209.95 L1704.97 1209.95 L1705.55 1209.95 L1706.14 1209.95 L1706.73 1209.95 L1707.31 1209.95 L1707.9 1209.95 L1708.49 1209.95 L1709.07 1209.95 L1709.66 1209.95 L1710.24 1209.95 L1710.83 1209.95 L1711.42 1209.95 L1712 1209.95 L1712.59 1209.95 L1713.18 1209.95 L1713.76 1209.95 L1714.35 1209.95 L1714.94 1209.95 L1715.52 1209.95 L1716.11 1209.95 L1716.7 1209.95 L1717.28 1209.95 L1717.87 1209.95 L1718.45 1209.95 L1719.04 1209.95 L1719.63 1209.95 L1720.21 1209.95 L1720.8 1209.95 L1721.39 1209.95 L1721.97 1209.95 L1722.56 1209.95 L1723.15 1209.95 L1723.73 1209.95 L1724.32 1209.95 L1724.91 1209.95 L1725.49 1209.95 L1726.08 1209.95 L1726.66 1209.95 L1727.25 1209.95 L1727.84 1209.95 L1728.42 1209.95 L1729.01 1209.95 L1729.6 1209.95 L1730.18 1209.95 L1730.77 1209.95 L1731.36 1209.95 L1731.94 1209.95 L1732.53 1209.95 L1733.11 1209.95 L1733.7 1209.95 L1734.29 1209.95 L1734.87 1209.95 L1735.46 1209.95 L1736.05 1209.95 L1736.63 1209.95 L1737.22 1209.95 L1737.81 1209.95 L1738.39 1209.95 L1738.98 1209.95 L1739.57 1209.95 L1740.15 1209.95 L1740.74 1209.95 L1741.32 1209.95 L1741.91 1209.95 L1742.5 1209.95 L1743.08 1209.95 L1743.67 1209.95 L1744.26 1209.95 L1744.84 1209.95 L1745.43 1209.95 L1746.02 1209.95 L1746.6 1209.95 L1747.19 1209.95 L1747.78 1209.95 L1748.36 1209.95 L1748.95 1209.95 L1749.53 1209.95 L1750.12 1209.95 L1750.71 1209.95 L1751.29 1209.95 L1751.88 1209.95 L1752.47 1209.95 L1753.05 1209.95 L1753.64 1209.95 L1754.23 1209.95 L1754.81 1209.95 L1755.4 1209.95 L1755.99 1209.95 L1756.57 1209.95 L1757.16 1209.95 L1757.74 1209.95 L1758.33 1209.95 L1758.92 1209.95 L1759.5 1209.95 L1760.09 1209.95 L1760.68 1209.95 L1761.26 1209.95 L1761.85 1209.95 L1762.44 1209.95 L1763.02 1209.95 L1763.61 1209.95 L1764.19 1209.95 L1764.78 1209.95 L1765.37 1209.95 L1765.95 1209.95 L1766.54 1209.95 L1767.13 1209.95 L1767.71 1209.95 L1768.3 1209.95 L1768.89 1209.95 L1769.47 1209.95 L1770.06 1209.95 L1770.65 1209.95 L1771.23 1209.95 L1771.82 1209.95 L1772.4 1209.95 L1772.99 1209.95 L1773.58 1209.95 L1774.16 1209.95 L1774.75 1209.95 L1775.34 1209.95 L1775.92 1209.95 L1776.51 1209.95 L1777.1 1209.95 L1777.68 1209.95 L1778.27 1209.95 L1778.86 1209.95 L1779.44 1209.95 L1780.03 1209.95 L1780.61 1209.95 L1781.2 1209.95 L1781.79 1209.95 L1782.37 1209.95 L1782.96 1209.95 L1783.55 1209.95 L1784.13 1209.95 L1784.72 1209.95 L1785.31 1209.95 L1785.89 1209.95 L1786.48 1209.95 L1787.06 1209.95 L1787.65 1209.95 L1788.24 1209.95 L1788.82 1209.95 L1789.41 1209.95 L1790 1209.95 L1790.58 1209.95 L1791.17 1209.95 L1791.76 1209.95 L1792.34 1209.95 L1792.93 1209.95 L1793.52 1209.95 L1794.1 1209.95 L1794.69 1209.95 L1795.27 1209.95 L1795.86 1209.95 L1796.45 1209.95 L1797.03 1209.95 L1797.62 1209.95 L1798.21 1209.95 L1798.79 1209.95 L1799.38 1209.95 L1799.97 1209.95 L1800.55 1209.95 L1801.14 1209.95 L1801.73 1209.95 L1802.31 1209.95 L1802.9 1209.95 L1803.48 1209.95 L1804.07 1209.95 L1804.66 1209.95 L1805.24 1209.95 L1805.83 1209.95 L1806.42 1209.95 L1807 1209.95 L1807.59 1209.95 L1808.18 1209.95 L1808.76 1209.95 L1809.35 1209.95 L1809.94 1209.95 L1810.52 1209.95 L1811.11 1209.95 L1811.69 1209.95 L1812.28 1209.95 L1812.87 1209.95 L1813.45 1209.95 L1814.04 1209.95 L1814.63 1209.95 L1815.21 1209.95 L1815.8 1209.95 L1816.39 1209.95 L1816.97 1209.95 L1817.56 1209.95 L1818.14 1209.95 L1818.73 1209.95 L1819.32 1209.95 L1819.9 1209.95 L1820.49 1209.95 L1821.08 1209.95 L1821.66 1209.95 L1822.25 1209.95 L1822.84 1209.95 L1823.42 1209.95 L1824.01 1209.95 L1824.6 1209.95 L1825.18 1209.95 L1825.77 1209.95 L1826.35 1209.95 L1826.94 1209.95 L1827.53 1209.95 L1828.11 1209.95 L1828.7 1209.95 L1829.29 1209.95 L1829.87 1209.95 L1830.46 1209.95 L1831.05 1209.95 L1831.63 1209.95 L1832.22 1209.95 L1832.81 1209.95 L1833.39 1209.95 L1833.98 1209.95 L1834.56 1209.95 L1835.15 1209.95 L1835.74 1209.95 L1836.32 1209.95 L1836.91 1209.95 L1837.5 1209.95 L1838.08 1209.95 L1838.67 1209.95 L1839.26 1209.95 L1839.84 1209.95 L1840.43 1209.95 L1841.01 1209.95 L1841.6 1209.95 L1842.19 1209.95 L1842.77 1209.95 L1843.36 1209.95 L1843.95 1209.95 L1844.53 1209.95 L1845.12 1209.95 L1845.71 1209.95 L1846.29 1209.95 L1846.88 1209.95 L1847.47 1209.95 L1848.05 1209.95 L1848.64 1209.95 L1849.22 1209.95 L1849.81 1209.95 L1850.4 1209.95 L1850.98 1209.95 L1851.57 1209.95 L1852.16 1209.95 L1852.74 1209.95 L1853.33 1209.95 L1853.92 1209.95 L1854.5 1209.95 L1855.09 1209.95 L1855.68 1209.95 L1856.26 1209.95 L1856.85 1209.95 L1857.43 1209.95 L1858.02 1209.95 L1858.61 1209.95 L1859.19 1209.95 L1859.78 1209.95 L1860.37 1209.95 L1860.95 1209.95 L1861.54 1209.95 L1862.13 1209.95 L1862.71 1209.95 L1863.3 1209.95 L1863.88 1209.95 L1864.47 1209.95 L1865.06 1209.95 L1865.64 1209.95 L1866.23 1209.95 L1866.82 1209.95 L1867.4 1209.95 L1867.99 1209.95 L1868.58 1209.95 L1869.16 1209.95 L1869.75 1209.95 L1870.34 1209.95 L1870.92 1209.95 L1871.51 1209.95 L1872.09 1209.95 L1872.68 1209.95 L1873.27 1209.95 L1873.85 1209.95 L1874.44 1209.95 L1875.03 1209.95 L1875.61 1209.95 L1876.2 1209.95 L1876.79 1209.95 L1877.37 1209.95 L1877.96 1209.95 L1878.55 1209.95 L1879.13 1209.95 L1879.72 1209.95 L1880.3 1209.95 L1880.89 1209.95 L1881.48 1209.95 L1882.06 1209.95 L1882.65 1209.95 L1883.24 1209.95 L1883.82 1209.95 L1884.41 1209.95 L1885 1209.95 L1885.58 1209.95 L1886.17 1209.95 L1886.76 1209.95 L1887.34 1209.95 L1887.93 1209.95 L1888.51 1209.95 L1889.1 1209.95 L1889.69 1209.95 L1890.27 1209.95 L1890.86 1209.95 L1891.45 1209.95 L1892.03 1209.95 L1892.62 1209.95 L1893.21 1209.95 L1893.79 1209.95 L1894.38 1209.95 L1894.96 1209.95 L1895.55 1209.95 L1896.14 1209.95 L1896.72 1209.95 L1897.31 1209.95 L1897.9 1209.95 L1898.48 1209.95 L1899.07 1209.95 L1899.66 1209.95 L1900.24 1209.95 L1900.83 1209.95 L1901.42 1209.95 L1902 1209.95 L1902.59 1209.95 L1903.17 1209.95 L1903.76 1209.95 L1904.35 1209.95 L1904.93 1209.95 L1905.52 1209.95 L1906.11 1209.95 L1906.69 1209.95 L1907.28 1209.95 L1907.87 1209.95 L1908.45 1209.95 L1909.04 1209.95 L1909.63 1209.95 L1910.21 1209.95 L1910.8 1209.95 L1911.38 1209.95 L1911.97 1209.95 L1912.56 1209.95 L1913.14 1209.95 L1913.73 1209.95 L1914.32 1209.95 L1914.9 1209.95 L1915.49 1209.95 L1916.08 1209.95 L1916.66 1209.95 L1917.25 1209.95 L1917.83 1209.95 L1918.42 1209.95 L1919.01 1209.95 L1919.59 1209.95 L1920.18 1209.95 L1920.77 1209.95 L1921.35 1209.95 L1921.94 1209.95 L1922.53 1209.95 L1923.11 1209.95 L1923.7 1209.95 L1924.29 1209.95 L1924.87 1209.95 L1925.46 1209.95 L1926.04 1209.95 L1926.63 1209.95 L1927.22 1209.95 L1927.8 1209.95 L1928.39 1209.95 L1928.98 1209.95 L1929.56 1209.95 L1930.15 1209.95 L1930.74 1209.95 L1931.32 1209.95 L1931.91 1209.95 L1932.5 1209.95 L1933.08 1209.95 L1933.67 1209.95 L1934.25 1209.95 L1934.84 1209.95 L1935.43 1209.95 L1936.01 1209.95 L1936.6 1209.95 L1937.19 1209.95 L1937.77 1209.95 L1938.36 1209.95 L1938.95 1209.95 L1939.53 1209.95 L1940.12 1209.95 L1940.71 1209.95 L1941.29 1209.95 L1941.88 1209.95 L1942.46 1209.95 L1943.05 1209.95 L1943.64 1209.95 L1944.22 1209.95 L1944.81 1209.95 L1945.4 1209.95 L1945.98 1209.95 L1946.57 1209.95 L1947.16 1209.95 L1947.74 1209.95 L1948.33 1209.95 L1948.91 1209.95 L1949.5 1209.95 L1950.09 1209.95 L1950.67 1209.95 L1951.26 1209.95 L1951.85 1209.95 L1952.43 1209.95 L1953.02 1209.95 L1953.61 1209.95 L1954.19 1209.95 L1954.78 1209.95 L1955.37 1209.95 L1955.95 1209.95 L1956.54 1209.95 L1957.12 1209.95 L1957.71 1209.95 L1958.3 1209.95 L1958.88 1209.95 L1959.47 1209.95 L1960.06 1209.95 L1960.64 1209.95 L1961.23 1209.95 L1961.82 1209.95 L1962.4 1209.95 L1962.99 1209.95 L1963.58 1209.95 L1964.16 1209.95 L1964.75 1209.95 L1965.33 1209.95 L1965.92 1209.95 L1966.51 1209.95 L1967.09 1209.95 L1967.68 1209.95 L1968.27 1209.95 L1968.85 1209.95 L1969.44 1209.95 L1970.03 1209.95 L1970.61 1209.95 L1971.2 1209.95 L1971.78 1209.95 L1972.37 1209.95 L1972.96 1209.95 L1973.54 1209.95 L1974.13 1209.95 L1974.72 1209.95 L1975.3 1209.95 L1975.89 1209.95 L1976.48 1209.95 L1977.06 1209.95 L1977.65 1209.95 L1978.24 1209.95 L1978.82 1209.95 L1979.41 1209.95 L1979.99 1209.95 L1980.58 1209.95 L1981.17 1209.95 L1981.75 1209.95 L1982.34 1209.95 L1982.93 1209.95 L1983.51 1209.95 L1984.1 1209.95 L1984.69 1209.95 L1985.27 1209.95 L1985.86 1209.95 L1986.45 1209.95 L1987.03 1209.95 L1987.62 1209.95 L1988.2 1209.95 L1988.79 1209.95 L1989.38 1209.95 L1989.96 1209.95 L1990.55 1209.95 L1991.14 1209.95 L1991.72 1209.95 L1992.31 1209.95 L1992.9 1209.95 L1993.48 1209.95 L1994.07 1209.95 L1994.65 1209.95 L1995.24 1209.95 L1995.83 1209.95 L1996.41 1209.95 L1997 1209.95 L1997.59 1209.95 L1998.17 1209.95 L1998.76 1209.95 L1999.35 1209.95 L1999.93 1209.95 L2000.52 1209.95 L2001.11 1209.95 L2001.69 1209.95 L2002.28 1209.95 L2002.86 1209.95 L2003.45 1209.95 L2004.04 1209.95 L2004.62 1209.95 L2005.21 1209.95 L2005.8 1209.95 L2006.38 1209.95 L2006.97 1209.95 L2007.56 1209.95 L2008.14 1209.95 L2008.73 1209.95 L2009.32 1209.95 L2009.9 1209.95 L2010.49 1209.95 L2011.07 1209.95 L2011.66 1209.95 L2012.25 1209.95 L2012.83 1209.95 L2013.42 1209.95 L2014.01 1209.95 L2014.59 1209.95 L2015.18 1209.95 L2015.77 1209.95 L2016.35 1209.95 L2016.94 1209.95 L2017.53 1209.95 L2018.11 1209.95 L2018.7 1209.95 L2019.28 1209.95 L2019.87 1209.95 L2020.46 1209.95 L2021.04 1209.95 L2021.63 1209.95 L2022.22 1209.95 L2022.8 1209.95 L2023.39 1209.95 L2023.98 1209.95 L2024.56 1209.95 L2025.15 1209.95 L2025.73 1209.95 L2026.32 1209.95 L2026.91 1209.95 L2027.49 1209.95 L2028.08 1209.95 L2028.67 1209.95 L2029.25 1209.95 L2029.84 1209.95 L2030.43 1209.95 L2031.01 1209.95 L2031.6 1209.95 L2032.19 1209.95 L2032.77 1209.95 L2033.36 1209.95 L2033.94 1209.95 L2034.53 1209.95 L2035.12 1209.95 L2035.7 1209.95 L2036.29 1209.95 L2036.88 1209.95 L2037.46 1209.95 L2038.05 1209.95 L2038.64 1209.95 L2039.22 1209.95 L2039.81 1209.95 L2040.4 1209.95 L2040.98 1209.95 L2041.57 1209.95 L2042.15 1209.95 L2042.74 1209.95 L2043.33 1209.95 L2043.91 1209.95 L2044.5 1209.95 L2045.09 1209.95 L2045.67 1209.95 L2046.26 1209.95 L2046.85 1209.95 L2047.43 1209.95 L2048.02 1209.95 L2048.6 1209.95 L2049.19 1209.95 L2049.78 1209.95 L2050.36 1209.95 L2050.95 1209.95 L2051.54 1209.95 L2052.12 1209.95 L2052.71 1209.95 L2053.3 1209.95 L2053.88 1209.95 L2054.47 1209.95 L2055.06 1209.95 L2055.64 1209.95 L2056.23 1209.95 L2056.81 1209.95 L2057.4 1209.95 L2057.99 1209.95 L2058.57 1209.95 L2059.16 1209.95 L2059.75 1209.95 L2060.33 1209.95 L2060.92 1209.95 L2061.51 1209.95 L2062.09 1209.95 L2062.68 1209.95 L2063.27 1209.95 L2063.85 1209.95 L2064.44 1209.95 L2065.02 1209.95 L2065.61 1209.95 L2066.2 1209.95 L2066.78 1209.95 L2067.37 1209.95 L2067.96 1209.95 L2068.54 1209.95 L2069.13 1209.95 L2069.72 1209.95 L2070.3 1209.95 L2070.89 1209.95 L2071.48 1209.95 L2072.06 1209.95 L2072.65 1209.95 L2073.23 1209.95 L2073.82 1209.95 L2074.41 1209.95 L2074.99 1209.95 L2075.58 1209.95 L2076.17 1209.95 L2076.75 1209.95 L2077.34 1209.95 L2077.93 1209.95 L2078.51 1209.95 L2079.1 1209.95 L2079.68 1209.95 L2080.27 1209.95 L2080.86 1209.95 L2081.44 1209.95 L2082.03 1209.95 L2082.62 1209.95 L2083.2 1209.95 L2083.79 1209.95 L2084.38 1209.95 L2084.96 1209.95 L2085.55 1209.95 L2086.14 1209.95 L2086.72 1209.95 L2087.31 1209.95 L2087.89 1209.95 L2088.48 1209.95 L2089.07 1209.95 L2089.65 1209.95 L2090.24 1209.95 L2090.83 1209.95 L2091.41 1209.95 L2092 1209.95 L2092.59 1209.95 L2093.17 1209.95 L2093.76 1209.95 L2094.35 1209.95 L2094.93 1209.95 L2095.52 1209.95 L2096.1 1209.95 L2096.69 1209.95 L2097.28 1209.95 L2097.86 1209.95 L2098.45 1209.95 L2099.04 1209.95 L2099.62 1209.95 L2100.21 1209.95 L2100.8 1209.95 L2101.38 1209.95 L2101.97 1209.95 L2102.55 1209.95 L2103.14 1209.95 L2103.73 1209.95 L2104.31 1209.95 L2104.9 1209.95 L2105.49 1209.95 L2106.07 1209.95 L2106.66 1209.95 L2107.25 1209.95 L2107.83 1209.95 L2108.42 1209.95 L2109.01 1209.95 L2109.59 1209.95 L2110.18 1209.95 L2110.76 1209.95 L2111.35 1209.95 L2111.94 1209.95 L2112.52 1209.95 L2113.11 1209.95 L2113.7 1209.95 L2114.28 1209.95 L2114.87 1209.95 L2115.46 1209.95 L2116.04 1209.95 L2116.63 1209.95 L2117.22 1209.95 L2117.8 1209.95 L2118.39 1209.95 L2118.97 1209.95 L2119.56 1209.95 L2120.15 1209.95 L2120.73 1209.95 L2121.32 1209.95 L2121.91 1209.95 L2122.49 1209.95 L2123.08 1209.95 L2123.67 1209.95 L2124.25 1209.95 L2124.84 1209.95 L2125.42 1209.95 L2126.01 1209.95 L2126.6 1209.95 L2127.18 1209.95 L2127.77 1209.95 L2128.36 1209.95 L2128.94 1209.95 L2129.53 1209.95 L2130.12 1209.95 L2130.7 1209.95 L2131.29 1209.95 L2131.88 1209.95 L2132.46 1209.95 L2133.05 1209.95 L2133.63 1209.95 L2134.22 1209.95 L2134.81 1209.95 L2135.39 1209.95 L2135.98 1209.95 L2136.57 1209.95 L2137.15 1209.95 L2137.74 1209.95 L2138.33 1209.95 L2138.91 1209.95 L2139.5 1209.95 L2140.09 1209.95 L2140.67 1209.95 L2141.26 1209.95 L2141.84 1209.95 L2142.43 1209.95 L2143.02 1209.95 L2143.6 1209.95 L2144.19 1209.95 L2144.78 1209.95 L2145.36 1209.95 L2145.95 1209.95 L2146.54 1209.95 L2147.12 1209.95 L2147.71 1209.95 L2148.3 1209.95 L2148.88 1209.95 L2149.47 1209.95 L2150.05 1209.95 L2150.64 1209.95 L2151.23 1209.95 L2151.81 1209.95 L2152.4 1209.95 L2152.99 1209.95 L2153.57 1209.95 L2154.16 1209.95 L2154.75 1209.95 L2155.33 1209.95 L2155.92 1209.95 L2156.5 1209.95 L2157.09 1209.95 L2157.68 1209.95 L2158.26 1209.95 L2158.26 1209.79 L2157.68 1209.79 L2157.09 1209.79 L2156.5 1209.79 L2155.92 1209.79 L2155.33 1209.79 L2154.75 1209.79 L2154.16 1209.79 L2153.57 1209.79 L2152.99 1209.79 L2152.4 1209.79 L2151.81 1209.79 L2151.23 1209.79 L2150.64 1209.79 L2150.05 1209.79 L2149.47 1209.79 L2148.88 1209.79 L2148.3 1209.79 L2147.71 1209.79 L2147.12 1209.79 L2146.54 1209.79 L2145.95 1209.79 L2145.36 1209.79 L2144.78 1209.79 L2144.19 1209.79 L2143.6 1209.79 L2143.02 1209.79 L2142.43 1209.79 L2141.84 1209.79 L2141.26 1209.79 L2140.67 1209.79 L2140.09 1209.79 L2139.5 1209.79 L2138.91 1209.79 L2138.33 1209.79 L2137.74 1209.79 L2137.15 1209.79 L2136.57 1209.79 L2135.98 1209.79 L2135.39 1209.79 L2134.81 1209.79 L2134.22 1209.79 L2133.63 1209.79 L2133.05 1209.79 L2132.46 1209.79 L2131.88 1209.79 L2131.29 1209.79 L2130.7 1209.79 L2130.12 1209.79 L2129.53 1209.79 L2128.94 1209.79 L2128.36 1209.79 L2127.77 1209.79 L2127.18 1209.79 L2126.6 1209.79 L2126.01 1209.79 L2125.42 1209.79 L2124.84 1209.79 L2124.25 1209.79 L2123.67 1209.79 L2123.08 1209.79 L2122.49 1209.79 L2121.91 1209.79 L2121.32 1209.79 L2120.73 1209.79 L2120.15 1209.79 L2119.56 1209.79 L2118.97 1209.79 L2118.39 1209.79 L2117.8 1209.79 L2117.22 1209.79 L2116.63 1209.79 L2116.04 1209.79 L2115.46 1209.79 L2114.87 1209.79 L2114.28 1209.79 L2113.7 1209.79 L2113.11 1209.79 L2112.52 1209.79 L2111.94 1209.79 L2111.35 1209.79 L2110.76 1209.79 L2110.18 1209.79 L2109.59 1209.79 L2109.01 1209.79 L2108.42 1209.79 L2107.83 1209.79 L2107.25 1209.79 L2106.66 1209.79 L2106.07 1209.79 L2105.49 1209.79 L2104.9 1209.79 L2104.31 1209.79 L2103.73 1209.79 L2103.14 1209.79 L2102.55 1209.79 L2101.97 1209.79 L2101.38 1209.79 L2100.8 1209.79 L2100.21 1209.79 L2099.62 1209.79 L2099.04 1209.79 L2098.45 1209.79 L2097.86 1209.79 L2097.28 1209.79 L2096.69 1209.79 L2096.1 1209.79 L2095.52 1209.79 L2094.93 1209.79 L2094.35 1209.79 L2093.76 1209.79 L2093.17 1209.79 L2092.59 1209.79 L2092 1209.79 L2091.41 1209.79 L2090.83 1209.79 L2090.24 1209.79 L2089.65 1209.79 L2089.07 1209.79 L2088.48 1209.79 L2087.89 1209.79 L2087.31 1209.79 L2086.72 1209.79 L2086.14 1209.79 L2085.55 1209.79 L2084.96 1209.79 L2084.38 1209.79 L2083.79 1209.79 L2083.2 1209.79 L2082.62 1209.79 L2082.03 1209.79 L2081.44 1209.79 L2080.86 1209.79 L2080.27 1209.79 L2079.68 1209.79 L2079.1 1209.79 L2078.51 1209.79 L2077.93 1209.79 L2077.34 1209.79 L2076.75 1209.79 L2076.17 1209.79 L2075.58 1209.79 L2074.99 1209.79 L2074.41 1209.79 L2073.82 1209.79 L2073.23 1209.79 L2072.65 1209.79 L2072.06 1209.79 L2071.48 1209.79 L2070.89 1209.79 L2070.3 1209.79 L2069.72 1209.79 L2069.13 1209.79 L2068.54 1209.79 L2067.96 1209.79 L2067.37 1209.79 L2066.78 1209.79 L2066.2 1209.79 L2065.61 1209.79 L2065.02 1209.79 L2064.44 1209.79 L2063.85 1209.79 L2063.27 1209.79 L2062.68 1209.79 L2062.09 1209.79 L2061.51 1209.79 L2060.92 1209.79 L2060.33 1209.79 L2059.75 1209.79 L2059.16 1209.79 L2058.57 1209.79 L2057.99 1209.79 L2057.4 1209.79 L2056.81 1209.79 L2056.23 1209.79 L2055.64 1209.79 L2055.06 1209.79 L2054.47 1209.79 L2053.88 1209.79 L2053.3 1209.79 L2052.71 1209.79 L2052.12 1209.79 L2051.54 1209.79 L2050.95 1209.79 L2050.36 1209.79 L2049.78 1209.79 L2049.19 1209.79 L2048.6 1209.79 L2048.02 1209.79 L2047.43 1209.79 L2046.85 1209.79 L2046.26 1209.79 L2045.67 1209.79 L2045.09 1209.79 L2044.5 1209.79 L2043.91 1209.79 L2043.33 1209.79 L2042.74 1209.79 L2042.15 1209.79 L2041.57 1209.79 L2040.98 1209.79 L2040.4 1209.79 L2039.81 1209.79 L2039.22 1209.79 L2038.64 1209.79 L2038.05 1209.79 L2037.46 1209.79 L2036.88 1209.79 L2036.29 1209.79 L2035.7 1209.79 L2035.12 1209.79 L2034.53 1209.79 L2033.94 1209.79 L2033.36 1209.79 L2032.77 1209.79 L2032.19 1209.79 L2031.6 1209.79 L2031.01 1209.79 L2030.43 1209.79 L2029.84 1209.79 L2029.25 1209.79 L2028.67 1209.79 L2028.08 1209.79 L2027.49 1209.79 L2026.91 1209.79 L2026.32 1209.79 L2025.73 1209.79 L2025.15 1209.79 L2024.56 1209.79 L2023.98 1209.79 L2023.39 1209.79 L2022.8 1209.79 L2022.22 1209.79 L2021.63 1209.79 L2021.04 1209.79 L2020.46 1209.79 L2019.87 1209.79 L2019.28 1209.79 L2018.7 1209.79 L2018.11 1209.79 L2017.53 1209.79 L2016.94 1209.79 L2016.35 1209.79 L2015.77 1209.79 L2015.18 1209.79 L2014.59 1209.79 L2014.01 1209.79 L2013.42 1209.79 L2012.83 1209.79 L2012.25 1209.79 L2011.66 1209.79 L2011.07 1209.79 L2010.49 1209.79 L2009.9 1209.79 L2009.32 1209.79 L2008.73 1209.79 L2008.14 1209.79 L2007.56 1209.79 L2006.97 1209.79 L2006.38 1209.79 L2005.8 1209.79 L2005.21 1209.79 L2004.62 1209.79 L2004.04 1209.79 L2003.45 1209.79 L2002.86 1209.79 L2002.28 1209.79 L2001.69 1209.79 L2001.11 1209.79 L2000.52 1209.79 L1999.93 1209.79 L1999.35 1209.79 L1998.76 1209.79 L1998.17 1209.79 L1997.59 1209.79 L1997 1209.79 L1996.41 1209.79 L1995.83 1209.79 L1995.24 1209.79 L1994.65 1209.79 L1994.07 1209.79 L1993.48 1209.79 L1992.9 1209.79 L1992.31 1209.79 L1991.72 1209.79 L1991.14 1209.79 L1990.55 1209.79 L1989.96 1209.79 L1989.38 1209.79 L1988.79 1209.79 L1988.2 1209.79 L1987.62 1209.79 L1987.03 1209.79 L1986.45 1209.79 L1985.86 1209.79 L1985.27 1209.79 L1984.69 1209.79 L1984.1 1209.79 L1983.51 1209.79 L1982.93 1209.79 L1982.34 1209.79 L1981.75 1209.79 L1981.17 1209.79 L1980.58 1209.79 L1979.99 1209.79 L1979.41 1209.79 L1978.82 1209.79 L1978.24 1209.79 L1977.65 1209.79 L1977.06 1209.79 L1976.48 1209.79 L1975.89 1209.79 L1975.3 1209.79 L1974.72 1209.79 L1974.13 1209.79 L1973.54 1209.79 L1972.96 1209.79 L1972.37 1209.79 L1971.78 1209.79 L1971.2 1209.79 L1970.61 1209.79 L1970.03 1209.79 L1969.44 1209.79 L1968.85 1209.79 L1968.27 1209.79 L1967.68 1209.79 L1967.09 1209.79 L1966.51 1209.79 L1965.92 1209.79 L1965.33 1209.79 L1964.75 1209.79 L1964.16 1209.79 L1963.58 1209.79 L1962.99 1209.79 L1962.4 1209.79 L1961.82 1209.79 L1961.23 1209.79 L1960.64 1209.79 L1960.06 1209.79 L1959.47 1209.79 L1958.88 1209.79 L1958.3 1209.79 L1957.71 1209.79 L1957.12 1209.79 L1956.54 1209.79 L1955.95 1209.79 L1955.37 1209.79 L1954.78 1209.79 L1954.19 1209.79 L1953.61 1209.79 L1953.02 1209.79 L1952.43 1209.79 L1951.85 1209.79 L1951.26 1209.79 L1950.67 1209.79 L1950.09 1209.79 L1949.5 1209.79 L1948.91 1209.79 L1948.33 1209.79 L1947.74 1209.79 L1947.16 1209.79 L1946.57 1209.79 L1945.98 1209.79 L1945.4 1209.79 L1944.81 1209.79 L1944.22 1209.79 L1943.64 1209.79 L1943.05 1209.79 L1942.46 1209.79 L1941.88 1209.79 L1941.29 1209.79 L1940.71 1209.79 L1940.12 1209.79 L1939.53 1209.79 L1938.95 1209.79 L1938.36 1209.79 L1937.77 1209.79 L1937.19 1209.79 L1936.6 1209.79 L1936.01 1209.79 L1935.43 1209.79 L1934.84 1209.79 L1934.25 1209.79 L1933.67 1209.79 L1933.08 1209.79 L1932.5 1209.79 L1931.91 1209.79 L1931.32 1209.79 L1930.74 1209.79 L1930.15 1209.79 L1929.56 1209.79 L1928.98 1209.79 L1928.39 1209.79 L1927.8 1209.79 L1927.22 1209.79 L1926.63 1209.79 L1926.04 1209.79 L1925.46 1209.79 L1924.87 1209.79 L1924.29 1209.79 L1923.7 1209.79 L1923.11 1209.79 L1922.53 1209.79 L1921.94 1209.79 L1921.35 1209.79 L1920.77 1209.79 L1920.18 1209.79 L1919.59 1209.79 L1919.01 1209.79 L1918.42 1209.79 L1917.83 1209.79 L1917.25 1209.79 L1916.66 1209.79 L1916.08 1209.79 L1915.49 1209.79 L1914.9 1209.79 L1914.32 1209.79 L1913.73 1209.79 L1913.14 1209.79 L1912.56 1209.79 L1911.97 1209.79 L1911.38 1209.79 L1910.8 1209.79 L1910.21 1209.79 L1909.63 1209.79 L1909.04 1209.79 L1908.45 1209.79 L1907.87 1209.79 L1907.28 1209.79 L1906.69 1209.79 L1906.11 1209.79 L1905.52 1209.79 L1904.93 1209.79 L1904.35 1209.79 L1903.76 1209.79 L1903.17 1209.79 L1902.59 1209.79 L1902 1209.79 L1901.42 1209.79 L1900.83 1209.79 L1900.24 1209.79 L1899.66 1209.79 L1899.07 1209.79 L1898.48 1209.79 L1897.9 1209.79 L1897.31 1209.79 L1896.72 1209.79 L1896.14 1209.79 L1895.55 1209.79 L1894.96 1209.79 L1894.38 1209.79 L1893.79 1209.79 L1893.21 1209.79 L1892.62 1209.79 L1892.03 1209.79 L1891.45 1209.79 L1890.86 1209.79 L1890.27 1209.79 L1889.69 1209.79 L1889.1 1209.79 L1888.51 1209.79 L1887.93 1209.79 L1887.34 1209.79 L1886.76 1209.79 L1886.17 1209.79 L1885.58 1209.79 L1885 1209.79 L1884.41 1209.79 L1883.82 1209.79 L1883.24 1209.79 L1882.65 1209.79 L1882.06 1209.79 L1881.48 1209.79 L1880.89 1209.79 L1880.3 1209.79 L1879.72 1209.79 L1879.13 1209.79 L1878.55 1209.79 L1877.96 1209.79 L1877.37 1209.79 L1876.79 1209.79 L1876.2 1209.79 L1875.61 1209.79 L1875.03 1209.79 L1874.44 1209.79 L1873.85 1209.79 L1873.27 1209.79 L1872.68 1209.79 L1872.09 1209.79 L1871.51 1209.79 L1870.92 1209.79 L1870.34 1209.79 L1869.75 1209.79 L1869.16 1209.79 L1868.58 1209.79 L1867.99 1209.79 L1867.4 1209.79 L1866.82 1209.79 L1866.23 1209.79 L1865.64 1209.79 L1865.06 1209.79 L1864.47 1209.79 L1863.88 1209.79 L1863.3 1209.79 L1862.71 1209.79 L1862.13 1209.79 L1861.54 1209.79 L1860.95 1209.79 L1860.37 1209.79 L1859.78 1209.79 L1859.19 1209.79 L1858.61 1209.79 L1858.02 1209.79 L1857.43 1209.79 L1856.85 1209.79 L1856.26 1209.79 L1855.68 1209.79 L1855.09 1209.79 L1854.5 1209.79 L1853.92 1209.79 L1853.33 1209.79 L1852.74 1209.79 L1852.16 1209.79 L1851.57 1209.79 L1850.98 1209.79 L1850.4 1209.79 L1849.81 1209.79 L1849.22 1209.79 L1848.64 1209.79 L1848.05 1209.79 L1847.47 1209.79 L1846.88 1209.79 L1846.29 1209.79 L1845.71 1209.79 L1845.12 1209.79 L1844.53 1209.79 L1843.95 1209.79 L1843.36 1209.79 L1842.77 1209.79 L1842.19 1209.79 L1841.6 1209.79 L1841.01 1209.79 L1840.43 1209.79 L1839.84 1209.79 L1839.26 1209.79 L1838.67 1209.79 L1838.08 1209.79 L1837.5 1209.79 L1836.91 1209.79 L1836.32 1209.79 L1835.74 1209.79 L1835.15 1209.79 L1834.56 1209.79 L1833.98 1209.79 L1833.39 1209.79 L1832.81 1209.79 L1832.22 1209.79 L1831.63 1209.79 L1831.05 1209.79 L1830.46 1209.79 L1829.87 1209.79 L1829.29 1209.79 L1828.7 1209.79 L1828.11 1209.79 L1827.53 1209.79 L1826.94 1209.79 L1826.35 1209.79 L1825.77 1209.79 L1825.18 1209.79 L1824.6 1209.79 L1824.01 1209.79 L1823.42 1209.79 L1822.84 1209.79 L1822.25 1209.79 L1821.66 1209.79 L1821.08 1209.79 L1820.49 1209.79 L1819.9 1209.79 L1819.32 1209.79 L1818.73 1209.79 L1818.14 1209.79 L1817.56 1209.79 L1816.97 1209.79 L1816.39 1209.79 L1815.8 1209.79 L1815.21 1209.79 L1814.63 1209.79 L1814.04 1209.79 L1813.45 1209.79 L1812.87 1209.79 L1812.28 1209.79 L1811.69 1209.79 L1811.11 1209.79 L1810.52 1209.79 L1809.94 1209.79 L1809.35 1209.79 L1808.76 1209.79 L1808.18 1209.79 L1807.59 1209.79 L1807 1209.79 L1806.42 1209.79 L1805.83 1209.79 L1805.24 1209.79 L1804.66 1209.79 L1804.07 1209.79 L1803.48 1209.79 L1802.9 1209.79 L1802.31 1209.79 L1801.73 1209.79 L1801.14 1209.79 L1800.55 1209.79 L1799.97 1209.79 L1799.38 1209.79 L1798.79 1209.79 L1798.21 1209.79 L1797.62 1209.79 L1797.03 1209.79 L1796.45 1209.79 L1795.86 1209.79 L1795.27 1209.79 L1794.69 1209.79 L1794.1 1209.79 L1793.52 1209.79 L1792.93 1209.79 L1792.34 1209.79 L1791.76 1209.79 L1791.17 1209.79 L1790.58 1209.79 L1790 1209.79 L1789.41 1209.79 L1788.82 1209.79 L1788.24 1209.79 L1787.65 1209.79 L1787.06 1209.79 L1786.48 1209.79 L1785.89 1209.79 L1785.31 1209.79 L1784.72 1209.79 L1784.13 1209.79 L1783.55 1209.79 L1782.96 1209.79 L1782.37 1209.79 L1781.79 1209.79 L1781.2 1209.79 L1780.61 1209.79 L1780.03 1209.79 L1779.44 1209.79 L1778.86 1209.79 L1778.27 1209.79 L1777.68 1209.79 L1777.1 1209.79 L1776.51 1209.79 L1775.92 1209.79 L1775.34 1209.79 L1774.75 1209.79 L1774.16 1209.79 L1773.58 1209.79 L1772.99 1209.79 L1772.4 1209.79 L1771.82 1209.79 L1771.23 1209.79 L1770.65 1209.79 L1770.06 1209.79 L1769.47 1209.79 L1768.89 1209.79 L1768.3 1209.79 L1767.71 1209.79 L1767.13 1209.79 L1766.54 1209.79 L1765.95 1209.79 L1765.37 1209.79 L1764.78 1209.79 L1764.19 1209.79 L1763.61 1209.79 L1763.02 1209.79 L1762.44 1209.79 L1761.85 1209.79 L1761.26 1209.79 L1760.68 1209.79 L1760.09 1209.79 L1759.5 1209.79 L1758.92 1209.79 L1758.33 1209.79 L1757.74 1209.79 L1757.16 1209.79 L1756.57 1209.79 L1755.99 1209.79 L1755.4 1209.79 L1754.81 1209.79 L1754.23 1209.79 L1753.64 1209.79 L1753.05 1209.79 L1752.47 1209.79 L1751.88 1209.79 L1751.29 1209.79 L1750.71 1209.79 L1750.12 1209.79 L1749.53 1209.79 L1748.95 1209.79 L1748.36 1209.79 L1747.78 1209.79 L1747.19 1209.79 L1746.6 1209.79 L1746.02 1209.79 L1745.43 1209.79 L1744.84 1209.79 L1744.26 1209.79 L1743.67 1209.79 L1743.08 1209.79 L1742.5 1209.79 L1741.91 1209.79 L1741.32 1209.79 L1740.74 1209.79 L1740.15 1209.79 L1739.57 1209.79 L1738.98 1209.79 L1738.39 1209.79 L1737.81 1209.79 L1737.22 1209.79 L1736.63 1209.79 L1736.05 1209.79 L1735.46 1209.79 L1734.87 1209.79 L1734.29 1209.79 L1733.7 1209.79 L1733.11 1209.79 L1732.53 1209.79 L1731.94 1209.79 L1731.36 1209.79 L1730.77 1209.79 L1730.18 1209.79 L1729.6 1209.79 L1729.01 1209.79 L1728.42 1209.79 L1727.84 1209.79 L1727.25 1209.79 L1726.66 1209.79 L1726.08 1209.79 L1725.49 1209.79 L1724.91 1209.79 L1724.32 1209.79 L1723.73 1209.79 L1723.15 1209.79 L1722.56 1209.79 L1721.97 1209.79 L1721.39 1209.79 L1720.8 1209.79 L1720.21 1209.79 L1719.63 1209.79 L1719.04 1209.79 L1718.45 1209.79 L1717.87 1209.79 L1717.28 1209.79 L1716.7 1209.79 L1716.11 1209.79 L1715.52 1209.79 L1714.94 1209.79 L1714.35 1209.79 L1713.76 1209.79 L1713.18 1209.79 L1712.59 1209.79 L1712 1209.79 L1711.42 1209.79 L1710.83 1209.79 L1710.24 1209.79 L1709.66 1209.79 L1709.07 1209.79 L1708.49 1209.79 L1707.9 1209.79 L1707.31 1209.79 L1706.73 1209.79 L1706.14 1209.79 L1705.55 1209.79 L1704.97 1209.79 L1704.38 1209.79 L1703.79 1209.79 L1703.21 1209.79 L1702.62 1209.79 L1702.04 1209.79 L1701.45 1209.79 L1700.86 1209.79 L1700.28 1209.79 L1699.69 1209.79 L1699.1 1209.79 L1698.52 1209.79 L1697.93 1209.79 L1697.34 1209.79 L1696.76 1209.79 L1696.17 1209.79 L1695.58 1209.79 L1695 1209.79 L1694.41 1209.79 L1693.83 1209.79 L1693.24 1209.79 L1692.65 1209.79 L1692.07 1209.79 L1691.48 1209.79 L1690.89 1209.79 L1690.31 1209.79 L1689.72 1209.79 L1689.13 1209.79 L1688.55 1209.79 L1687.96 1209.79 L1687.37 1209.79 L1686.79 1209.79 L1686.2 1209.79 L1685.62 1209.79 L1685.03 1209.79 L1684.44 1209.79 L1683.86 1209.79 L1683.27 1209.79 L1682.68 1209.79 L1682.1 1209.79 L1681.51 1209.79 L1680.92 1209.79 L1680.34 1209.79 L1679.75 1209.79 L1679.17 1209.79 L1678.58 1209.79 L1677.99 1209.79 L1677.41 1209.79 L1676.82 1209.79 L1676.23 1209.79 L1675.65 1209.79 L1675.06 1209.79 L1674.47 1209.79 L1673.89 1209.79 L1673.3 1209.79 L1672.71 1209.79 L1672.13 1209.79 L1671.54 1209.79 L1670.96 1209.79 L1670.37 1209.79 L1669.78 1209.79 L1669.2 1209.79 L1668.61 1209.79 L1668.02 1209.79 L1667.44 1209.79 L1666.85 1209.79 L1666.26 1209.79 L1665.68 1209.79 L1665.09 1209.79 L1664.5 1209.79 L1663.92 1209.79 L1663.33 1209.79 L1662.75 1209.79 L1662.16 1209.79 L1661.57 1209.79 L1660.99 1209.79 L1660.4 1209.79 L1659.81 1209.79 L1659.23 1209.79 L1658.64 1209.79 L1658.05 1209.79 L1657.47 1209.79 L1656.88 1209.79 L1656.29 1209.79 L1655.71 1209.79 L1655.12 1209.79 L1654.54 1209.79 L1653.95 1209.79 L1653.36 1209.79 L1652.78 1209.79 L1652.19 1209.79 L1651.6 1209.79 L1651.02 1209.79 L1650.43 1209.79 L1649.84 1209.79 L1649.26 1209.79 L1648.67 1209.79 L1648.09 1209.79 L1647.5 1209.79 L1646.91 1209.79 L1646.33 1209.79 L1645.74 1209.79 L1645.15 1209.79 L1644.57 1209.79 L1643.98 1209.79 L1643.39 1209.79 L1642.81 1209.79 L1642.22 1209.79 L1641.63 1209.79 L1641.05 1209.79 L1640.46 1209.79 L1639.88 1209.79 L1639.29 1209.79 L1638.7 1209.79 L1638.12 1209.79 L1637.53 1209.79 L1636.94 1209.79 L1636.36 1209.79 L1635.77 1209.79 L1635.18 1209.79 L1634.6 1209.79 L1634.01 1209.79 L1633.42 1209.79 L1632.84 1209.79 L1632.25 1209.79 L1631.67 1209.79 L1631.08 1209.79 L1630.49 1209.79 L1629.91 1209.79 L1629.32 1209.79 L1628.73 1209.79 L1628.15 1209.79 L1627.56 1209.79 L1626.97 1209.79 L1626.39 1209.79 L1625.8 1209.79 L1625.22 1209.79 L1624.63 1209.79 L1624.04 1209.79 L1623.46 1209.79 L1622.87 1209.79 L1622.28 1209.79 L1621.7 1209.79 L1621.11 1209.79 L1620.52 1209.79 L1619.94 1209.79 L1619.35 1209.79 L1618.76 1209.79 L1618.18 1209.79 L1617.59 1209.79 L1617.01 1209.79 L1616.42 1209.79 L1615.83 1209.79 L1615.25 1209.79 L1614.66 1209.79 L1614.07 1209.79 L1613.49 1209.79 L1612.9 1209.79 L1612.31 1209.79 L1611.73 1209.79 L1611.14 1209.79 L1610.55 1209.79 L1609.97 1209.79 L1609.38 1209.79 L1608.8 1209.79 L1608.21 1209.79 L1607.62 1209.79 L1607.04 1209.79 L1606.45 1209.79 L1605.86 1209.79 L1605.28 1209.79 L1604.69 1209.79 L1604.1 1209.79 L1603.52 1209.79 L1602.93 1209.79 L1602.34 1209.79 L1601.76 1209.79 L1601.17 1209.79 L1600.59 1209.79 L1600 1209.79 L1599.41 1209.79 L1598.83 1209.79 L1598.24 1209.79 L1597.65 1209.79 L1597.07 1209.79 L1596.48 1209.79 L1595.89 1209.79 L1595.31 1209.79 L1594.72 1209.79 L1594.14 1209.79 L1593.55 1209.79 L1592.96 1209.79 L1592.38 1209.79 L1591.79 1209.79 L1591.2 1209.79 L1590.62 1209.79 L1590.03 1209.79 L1589.44 1209.79 L1588.86 1209.79 L1588.27 1209.79 L1587.68 1209.79 L1587.1 1209.79 L1586.51 1209.79 L1585.93 1209.79 L1585.34 1209.79 L1584.75 1209.79 L1584.17 1209.79 L1583.58 1209.79 L1582.99 1209.79 L1582.41 1209.79 L1581.82 1209.79 L1581.23 1209.79 L1580.65 1209.79 L1580.06 1209.79 L1579.47 1209.79 L1578.89 1209.79 L1578.3 1209.79 L1577.72 1209.79 L1577.13 1209.79 L1576.54 1209.79 L1575.96 1209.79 L1575.37 1209.79 L1574.78 1209.79 L1574.2 1209.79 L1573.61 1209.79 L1573.02 1209.79 L1572.44 1209.79 L1571.85 1209.79 L1571.27 1209.79 L1570.68 1209.79 L1570.09 1209.79 L1569.51 1209.79 L1568.92 1209.79 L1568.33 1209.79 L1567.75 1209.79 L1567.16 1209.79 L1566.57 1209.79 L1565.99 1209.79 L1565.4 1209.79 L1564.81 1209.79 L1564.23 1209.79 L1563.64 1209.79 L1563.06 1209.79 L1562.47 1209.79 L1561.88 1209.79 L1561.3 1209.79 L1560.71 1209.79 L1560.12 1209.79 L1559.54 1209.79 L1558.95 1209.79 L1558.36 1209.79 L1557.78 1209.79 L1557.19 1209.79 L1556.6 1209.79 L1556.02 1209.79 L1555.43 1209.79 L1554.85 1209.79 L1554.26 1209.79 L1553.67 1209.79 L1553.09 1209.79 L1552.5 1209.79 L1551.91 1209.79 L1551.33 1209.79 L1550.74 1209.79 L1550.15 1209.79 L1549.57 1209.79 L1548.98 1209.79 L1548.4 1209.79 L1547.81 1209.79 L1547.22 1209.79 L1546.64 1209.79 L1546.05 1209.79 L1545.46 1209.79 L1544.88 1209.79 L1544.29 1209.79 L1543.7 1209.79 L1543.12 1209.79 L1542.53 1209.79 L1541.94 1209.79 L1541.36 1209.79 L1540.77 1209.79 L1540.19 1209.79 L1539.6 1209.79 L1539.01 1209.79 L1538.43 1209.79 L1537.84 1209.79 L1537.25 1209.79 L1536.67 1209.79 L1536.08 1209.79 L1535.49 1209.79 L1534.91 1209.79 L1534.32 1209.79 L1533.73 1209.79 L1533.15 1209.79 L1532.56 1209.79 L1531.98 1209.79 L1531.39 1209.79 L1530.8 1209.79 L1530.22 1209.79 L1529.63 1209.79 L1529.04 1209.79 L1528.46 1209.79 L1527.87 1209.79 L1527.28 1209.79 L1526.7 1209.79 L1526.11 1209.79 L1525.52 1209.79 L1524.94 1209.79 L1524.35 1209.79 L1523.77 1209.79 L1523.18 1209.79 L1522.59 1209.79 L1522.01 1209.79 L1521.42 1209.79 L1520.83 1209.79 L1520.25 1209.79 L1519.66 1209.79 L1519.07 1209.79 L1518.49 1209.79 L1517.9 1209.79 L1517.32 1209.79 L1516.73 1209.79 L1516.14 1209.79 L1515.56 1209.79 L1514.97 1209.79 L1514.38 1209.79 L1513.8 1209.79 L1513.21 1209.79 L1512.62 1209.79 L1512.04 1209.79 L1511.45 1209.79 L1510.86 1209.79 L1510.28 1209.79 L1509.69 1209.79 L1509.11 1209.79 L1508.52 1209.79 L1507.93 1209.79 L1507.35 1209.79 L1506.76 1209.79 L1506.17 1209.79 L1505.59 1209.79 L1505 1209.79 L1504.41 1209.79 L1503.83 1209.79 L1503.24 1209.79 L1502.65 1209.79 L1502.07 1209.79 L1501.48 1209.79 L1500.9 1209.79 L1500.31 1209.79 L1499.72 1209.79 L1499.14 1209.79 L1498.55 1209.79 L1497.96 1209.79 L1497.38 1209.79 L1496.79 1209.79 L1496.2 1209.79 L1495.62 1209.79 L1495.03 1209.79 L1494.45 1209.79 L1493.86 1209.79 L1493.27 1209.79 L1492.69 1209.79 L1492.1 1209.79 L1491.51 1209.79 L1490.93 1209.79 L1490.34 1209.79 L1489.75 1209.79 L1489.17 1209.79 L1488.58 1209.79 L1487.99 1209.79 L1487.41 1209.79 L1486.82 1209.79 L1486.24 1209.79 L1485.65 1209.79 L1485.06 1209.79 L1484.48 1209.79 L1483.89 1209.79 L1483.3 1209.79 L1482.72 1209.79 L1482.13 1209.79 L1481.54 1209.79 L1480.96 1209.79 L1480.37 1209.79 L1479.78 1209.79 L1479.2 1209.79 L1478.61 1209.79 L1478.03 1209.79 L1477.44 1209.79 L1476.85 1209.79 L1476.27 1209.79 L1475.68 1209.79 L1475.09 1209.79 L1474.51 1209.79 L1473.92 1209.79 L1473.33 1209.79 L1472.75 1209.79 L1472.16 1209.79 L1471.57 1209.79 L1470.99 1209.79 L1470.4 1209.79 L1469.82 1209.79 L1469.23 1209.79 L1468.64 1209.79 L1468.06 1209.79 L1467.47 1209.79 L1466.88 1209.79 L1466.3 1209.79 L1465.71 1209.79 L1465.12 1209.79 L1464.54 1209.79 L1463.95 1209.79 L1463.37 1209.79 L1462.78 1209.79 L1462.19 1209.79 L1461.61 1209.79 L1461.02 1209.79 L1460.43 1209.79 L1459.85 1209.79 L1459.26 1209.79 L1458.67 1209.79 L1458.09 1209.79 L1457.5 1209.79 L1456.91 1209.79 L1456.33 1209.79 L1455.74 1209.79 L1455.16 1209.79 L1454.57 1209.79 L1453.98 1209.79 L1453.4 1209.79 L1452.81 1209.79 L1452.22 1209.79 L1451.64 1209.79 L1451.05 1209.79 L1450.46 1209.79 L1449.88 1209.79 L1449.29 1209.79 L1448.7 1209.79 L1448.12 1209.79 L1447.53 1209.79 L1446.95 1209.79 L1446.36 1209.79 L1445.77 1209.79 L1445.19 1209.79 L1444.6 1209.79 L1444.01 1209.79 L1443.43 1209.79 L1442.84 1209.79 L1442.25 1209.79 L1441.67 1209.79 L1441.08 1209.79 L1440.5 1209.79 L1439.91 1209.79 L1439.32 1209.79 L1438.74 1209.79 L1438.15 1209.79 L1437.56 1209.79 L1436.98 1209.79 L1436.39 1209.79 L1435.8 1209.79 L1435.22 1209.79 L1434.63 1209.79 L1434.04 1209.79 L1433.46 1209.79 L1432.87 1209.79 L1432.29 1209.79 L1431.7 1209.79 L1431.11 1209.79 L1430.53 1209.79 L1429.94 1209.79 L1429.35 1209.79 L1428.77 1209.79 L1428.18 1209.79 L1427.59 1209.79 L1427.01 1209.79 L1426.42 1209.79 L1425.83 1209.79 L1425.25 1209.79 L1424.66 1209.79 L1424.08 1209.79 L1423.49 1209.79 L1422.9 1209.79 L1422.32 1209.79 L1421.73 1209.79 L1421.14 1209.79 L1420.56 1209.79 L1419.97 1209.79 L1419.38 1209.79 L1418.8 1209.79 L1418.21 1209.79 L1417.63 1209.79 L1417.04 1209.79 L1416.45 1209.79 L1415.87 1209.79 L1415.28 1209.79 L1414.69 1209.79 L1414.11 1209.79 L1413.52 1209.79 L1412.93 1209.79 L1412.35 1209.79 L1411.76 1209.79 L1411.17 1209.79 L1410.59 1209.79 L1410 1209.79 L1409.42 1209.79 L1408.83 1209.79 L1408.24 1209.79 L1407.66 1209.79 L1407.07 1209.79 L1406.48 1209.79 L1405.9 1209.79 L1405.31 1209.79 L1404.72 1209.79 L1404.14 1209.79 L1403.55 1209.79 L1402.96 1209.79 L1402.38 1209.79 L1401.79 1209.79 L1401.21 1209.79 L1400.62 1209.79 L1400.03 1209.79 L1399.45 1209.79 L1398.86 1209.79 L1398.27 1209.79 L1397.69 1209.79 L1397.1 1209.79 L1396.51 1209.79 L1395.93 1209.79 L1395.34 1209.79 L1394.75 1209.79 L1394.17 1209.79 L1393.58 1209.79 L1393 1209.79 L1392.41 1209.79 L1391.82 1209.79 L1391.24 1209.79 L1390.65 1209.79 L1390.06 1209.79 L1389.48 1209.79 L1388.89 1209.79 L1388.3 1209.79 L1387.72 1209.79 L1387.13 1209.79 L1386.55 1209.79 L1385.96 1209.79 L1385.37 1209.79 L1384.79 1209.79 L1384.2 1209.79 L1383.61 1209.79 L1383.03 1209.79 L1382.44 1209.79 L1381.85 1209.79 L1381.27 1209.79 L1380.68 1209.79 L1380.09 1209.79 L1379.51 1209.79 L1378.92 1209.79 L1378.34 1209.79 L1377.75 1209.79 L1377.16 1209.79 L1376.58 1209.79 L1375.99 1209.79 L1375.4 1209.79 L1374.82 1209.79 L1374.23 1209.79 L1373.64 1209.79 L1373.06 1209.79 L1372.47 1209.79 L1371.88 1209.79 L1371.3 1209.79 L1370.71 1209.79 L1370.13 1209.79 L1369.54 1209.79 L1368.95 1209.79 L1368.37 1209.79 L1367.78 1209.79 L1367.19 1209.79 L1366.61 1209.79 L1366.02 1209.79 L1365.43 1209.79 L1364.85 1209.79 L1364.26 1209.79 L1363.68 1209.79 L1363.09 1209.79 L1362.5 1209.79 L1361.92 1209.79 L1361.33 1209.79 L1360.74 1209.79 L1360.16 1209.79 L1359.57 1209.79 L1358.98 1209.79 L1358.4 1209.79 L1357.81 1209.79 L1357.22 1209.79 L1356.64 1209.79 L1356.05 1209.79 L1355.47 1209.79 L1354.88 1209.79 L1354.29 1209.79 L1353.71 1209.79 L1353.12 1209.79 L1352.53 1209.79 L1351.95 1209.79 L1351.36 1209.79 L1350.77 1209.79 L1350.19 1209.79 L1349.6 1209.79 L1349.01 1209.79 L1348.43 1209.79 L1347.84 1209.79 L1347.26 1209.79 L1346.67 1209.79 L1346.08 1209.79 L1345.5 1209.79 L1344.91 1209.79 L1344.32 1209.79 L1343.74 1209.79 L1343.15 1209.79 L1342.56 1209.79 L1341.98 1209.79 L1341.39 1209.79 L1340.8 1209.79 L1340.22 1209.79 L1339.63 1209.79 L1339.05 1209.79 L1338.46 1209.79 L1337.87 1209.79 L1337.29 1209.79 L1336.7 1209.79 L1336.11 1209.79 L1335.53 1209.79 L1334.94 1209.79 L1334.35 1209.79 L1333.77 1209.79 L1333.18 1209.79 L1332.6 1209.79 L1332.01 1209.79 L1331.42 1209.79 L1330.84 1209.79 L1330.25 1209.79 L1329.66 1209.79 L1329.08 1209.79 L1328.49 1209.79 L1327.9 1209.79 L1327.32 1209.79 L1326.73 1209.79 L1326.14 1209.79 L1325.56 1209.79 L1324.97 1209.79 L1324.39 1209.79 L1323.8 1209.79 L1323.21 1209.79 L1322.63 1209.79 L1322.04 1209.79 L1321.45 1209.79 L1320.87 1209.79 L1320.28 1209.79 L1319.69 1209.79 L1319.11 1209.79 L1318.52 1209.79 L1317.93 1209.79 L1317.35 1209.79 L1316.76 1209.79 L1316.18 1209.79 L1315.59 1209.79 L1315 1209.79 L1314.42 1209.79 L1313.83 1209.79 L1313.24 1209.79 L1312.66 1209.79 L1312.07 1209.79 L1311.48 1209.79 L1310.9 1209.79 L1310.31 1209.79 L1309.73 1209.79 L1309.14 1209.79 L1308.55 1209.79 L1307.97 1209.79 L1307.38 1209.79 L1306.79 1209.79 L1306.21 1209.79 L1305.62 1209.79 L1305.03 1209.79 L1304.45 1209.79 L1303.86 1209.79 L1303.27 1209.79 L1302.69 1209.79 L1302.1 1209.79 L1301.52 1209.79 L1300.93 1209.79 L1300.34 1209.79 L1299.76 1209.79 L1299.17 1209.79 L1298.58 1209.79 L1298 1209.79 L1297.41 1209.79 L1296.82 1209.79 L1296.24 1209.79 L1295.65 1209.79 L1295.06 1209.79 L1294.48 1209.79 L1293.89 1209.79 L1293.31 1209.79 L1292.72 1209.79 L1292.13 1209.79 L1291.55 1209.79 L1290.96 1209.79 L1290.37 1209.79 L1289.79 1209.79 L1289.2 1209.79 L1288.61 1209.79 L1288.03 1209.79 L1287.44 1209.79 L1286.86 1209.79 L1286.27 1209.79 L1285.68 1209.79 L1285.1 1209.79 L1284.51 1209.79 L1283.92 1209.79 L1283.34 1209.79 L1282.75 1209.79 L1282.16 1209.79 L1281.58 1209.79 L1280.99 1209.79 L1280.4 1209.79 L1279.82 1209.79 L1279.23 1209.79 L1278.65 1209.79 L1278.06 1209.79 L1277.47 1209.79 L1276.89 1209.79 L1276.3 1209.79 L1275.71 1209.79 L1275.13 1209.79 L1274.54 1209.79 L1273.95 1209.79 L1273.37 1209.79 L1272.78 1209.79 L1272.19 1209.79 L1271.61 1209.79 L1271.02 1209.79 L1270.44 1209.79 L1269.85 1209.79 L1269.26 1209.79 L1268.68 1209.79 L1268.09 1209.79 L1267.5 1209.79 L1266.92 1209.79 L1266.33 1209.79 L1265.74 1209.79 L1265.16 1209.79 L1264.57 1209.79 L1263.98 1209.79 L1263.4 1209.79 L1262.81 1209.79 L1262.23 1209.79 L1261.64 1209.79 L1261.05 1209.79 L1260.47 1209.79 L1259.88 1209.79 L1259.29 1209.79 L1258.71 1209.79 L1258.12 1209.79 L1257.53 1209.79 L1256.95 1209.79 L1256.36 1209.79 L1255.78 1209.79 L1255.19 1209.79 L1254.6 1209.79 L1254.02 1209.79 L1253.43 1209.79 L1252.84 1209.79 L1252.26 1209.79 L1251.67 1209.79 L1251.08 1209.79 L1250.5 1209.79 L1249.91 1209.79 L1249.32 1209.79 L1248.74 1209.79 L1248.15 1209.79 L1247.57 1209.79 L1246.98 1209.79 L1246.39 1209.79 L1245.81 1209.79 L1245.22 1209.79 L1244.63 1209.79 L1244.05 1209.79 L1243.46 1209.79 L1242.87 1209.79 L1242.29 1209.79 L1241.7 1209.79 L1241.11 1209.79 L1240.53 1209.79 L1239.94 1209.79 L1239.36 1209.79 L1238.77 1209.79 L1238.18 1209.79 L1237.6 1209.79 L1237.01 1209.79 L1236.42 1209.79 L1235.84 1209.79 L1235.25 1209.79 L1234.66 1209.79 L1234.08 1209.79 L1233.49 1209.79 L1232.91 1209.79 L1232.32 1209.79 L1231.73 1209.79 L1231.15 1209.79 L1230.56 1209.79 L1229.97 1209.79 L1229.39 1209.79 L1228.8 1209.79 L1228.21 1209.79 L1227.63 1209.79 L1227.04 1209.79 L1226.45 1209.79 L1225.87 1209.79 L1225.28 1209.79 L1224.7 1209.79 L1224.11 1209.79 L1223.52 1209.79 L1222.94 1209.79 L1222.35 1209.79 L1221.76 1209.79 L1221.18 1209.79 L1220.59 1209.79 L1220 1209.79 L1219.42 1209.79 L1218.83 1209.79 L1218.24 1209.79 L1217.66 1209.79 L1217.07 1209.79 L1216.49 1209.79 L1215.9 1209.79 L1215.31 1209.79 L1214.73 1209.79 L1214.14 1209.79 L1213.55 1209.79 L1212.97 1209.79 L1212.38 1209.79 L1211.79 1209.79 L1211.21 1209.79 L1210.62 1209.79 L1210.03 1209.79 L1209.45 1209.79 L1208.86 1209.79 L1208.28 1209.79 L1207.69 1209.79 L1207.1 1209.79 L1206.52 1209.79 L1205.93 1209.79 L1205.34 1209.79 L1204.76 1209.79 L1204.17 1209.79 L1203.58 1209.79 L1203 1209.79 L1202.41 1209.79 L1201.83 1209.79 L1201.24 1209.79 L1200.65 1209.79 L1200.07 1209.79 L1199.48 1209.79 L1198.89 1209.79 L1198.31 1209.79 L1197.72 1209.79 L1197.13 1209.79 L1196.55 1209.79 L1195.96 1209.79 L1195.37 1209.79 L1194.79 1209.79 L1194.2 1209.79 L1193.62 1209.79 L1193.03 1209.79 L1192.44 1209.79 L1191.86 1209.79 L1191.27 1209.79 L1190.68 1209.79 L1190.1 1209.79 L1189.51 1209.79 L1188.92 1209.79 L1188.34 1209.79 L1187.75 1209.79 L1187.16 1209.79 L1186.58 1209.79 L1185.99 1209.79 L1185.41 1209.79 L1184.82 1209.79 L1184.23 1209.79 L1183.65 1209.79 L1183.06 1209.79 L1182.47 1209.79 L1181.89 1209.79 L1181.3 1209.79 L1180.71 1209.79 L1180.13 1209.79 L1179.54 1209.79 L1178.96 1209.79 L1178.37 1209.79 L1177.78 1209.79 L1177.2 1209.79 L1176.61 1209.79 L1176.02 1209.79 L1175.44 1209.79 L1174.85 1209.79 L1174.26 1209.79 L1173.68 1209.79 L1173.09 1209.79 L1172.5 1209.79 L1171.92 1209.79 L1171.33 1209.79 L1170.75 1209.79 L1170.16 1209.79 L1169.57 1209.79 L1168.99 1209.79 L1168.4 1209.79 L1167.81 1209.79 L1167.23 1209.79 L1166.64 1209.79 L1166.05 1209.79 L1165.47 1209.79 L1164.88 1209.79 L1164.29 1209.79 L1163.71 1209.79 L1163.12 1209.79 L1162.54 1209.79 L1161.95 1209.79 L1161.36 1209.79 L1160.78 1209.79 L1160.19 1209.79 L1159.6 1209.79 L1159.02 1209.79 L1158.43 1209.79 L1157.84 1209.79 L1157.26 1209.79 L1156.67 1209.79 L1156.09 1209.79 L1155.5 1209.79 L1154.91 1209.79 L1154.33 1209.79 L1153.74 1209.79 L1153.15 1209.79 L1152.57 1209.79 L1151.98 1209.79 L1151.39 1209.79 L1150.81 1209.79 L1150.22 1209.79 L1149.63 1209.79 L1149.05 1209.79 L1148.46 1209.79 L1147.88 1209.79 L1147.29 1209.79 L1146.7 1209.79 L1146.12 1209.79 L1145.53 1209.79 L1144.94 1209.79 L1144.36 1209.79 L1143.77 1209.79 L1143.18 1209.79 L1142.6 1209.79 L1142.01 1209.79 L1141.42 1209.79 L1140.84 1209.79 L1140.25 1209.79 L1139.67 1209.79 L1139.08 1209.79 L1138.49 1209.79 L1137.91 1209.79 L1137.32 1209.79 L1136.73 1209.79 L1136.15 1209.79 L1135.56 1209.79 L1134.97 1209.79 L1134.39 1209.79 L1133.8 1209.79 L1133.21 1209.79 L1132.63 1209.79 L1132.04 1209.79 L1131.46 1209.79 L1130.87 1209.79 L1130.28 1209.79 L1129.7 1209.79 L1129.11 1209.79 L1128.52 1209.79 L1127.94 1209.79 L1127.35 1209.79 L1126.76 1209.79 L1126.18 1209.79 L1125.59 1209.79 L1125.01 1209.79 L1124.42 1209.79 L1123.83 1209.79 L1123.25 1209.79 L1122.66 1209.79 L1122.07 1209.79 L1121.49 1209.79 L1120.9 1209.79 L1120.31 1209.79 L1119.73 1209.79 L1119.14 1209.79 L1118.55 1209.79 L1117.97 1209.79 L1117.38 1209.79 L1116.8 1209.79 L1116.21 1209.79 L1115.62 1209.79 L1115.04 1209.79 L1114.45 1209.79 L1113.86 1209.79 L1113.28 1209.79 L1112.69 1209.79 L1112.1 1209.79 L1111.52 1209.79 L1110.93 1209.79 L1110.34 1209.79 L1109.76 1209.79 L1109.17 1209.79 L1108.59 1209.79 L1108 1209.79 L1107.41 1209.79 L1106.83 1209.79 L1106.24 1209.79 L1105.65 1209.79 L1105.07 1209.79 L1104.48 1209.79 L1103.89 1209.79 L1103.31 1209.79 L1102.72 1209.79 L1102.14 1209.79 L1101.55 1209.79 L1100.96 1209.79 L1100.38 1209.79 L1099.79 1209.79 L1099.2 1209.79 L1098.62 1209.79 L1098.03 1209.79 L1097.44 1209.79 L1096.86 1209.79 L1096.27 1209.79 L1095.68 1209.79 L1095.1 1209.79 L1094.51 1209.79 L1093.93 1209.79 L1093.34 1209.79 L1092.75 1209.79 L1092.17 1209.79 L1091.58 1209.79 L1090.99 1209.79 L1090.41 1209.79 L1089.82 1209.79 L1089.23 1209.79 L1088.65 1209.79 L1088.06 1209.79 L1087.47 1209.79 L1086.89 1209.79 L1086.3 1209.79 L1085.72 1209.79 L1085.13 1209.79 L1084.54 1209.79 L1083.96 1209.79 L1083.37 1209.79 L1082.78 1209.79 L1082.2 1209.79 L1081.61 1209.79 L1081.02 1209.79 L1080.44 1209.79 L1079.85 1209.79 L1079.26 1209.79 L1078.68 1209.79 L1078.09 1209.79 L1077.51 1209.79 L1076.92 1209.79 L1076.33 1209.79 L1075.75 1209.79 L1075.16 1209.79 L1074.57 1209.79 L1073.99 1209.79 L1073.4 1209.79 L1072.81 1209.79 L1072.23 1209.79 L1071.64 1209.79 L1071.06 1209.79 L1070.47 1209.79 L1069.88 1209.79 L1069.3 1209.79 L1068.71 1209.79 L1068.12 1209.79 L1067.54 1209.79 L1066.95 1209.79 L1066.36 1209.79 L1065.78 1209.79 L1065.19 1209.79 L1064.6 1209.79 L1064.02 1209.79 L1063.43 1209.79 L1062.85 1209.79 L1062.26 1209.79 L1061.67 1209.79 L1061.09 1209.79 L1060.5 1209.79 L1059.91 1209.79 L1059.33 1209.79 L1058.74 1209.79 L1058.15 1209.79 L1057.57 1209.79 L1056.98 1209.79 L1056.39 1209.79 L1055.81 1209.79 L1055.22 1209.79 L1054.64 1209.79 L1054.05 1209.79 L1053.46 1209.79 L1052.88 1209.79 L1052.29 1209.79 L1051.7 1209.79 L1051.12 1209.79 L1050.53 1209.79 L1049.94 1209.79 L1049.36 1209.79 L1048.77 1209.79 L1048.19 1209.79 L1047.6 1209.79 L1047.01 1209.79 L1046.43 1209.79 L1045.84 1209.79 L1045.25 1209.79 L1044.67 1209.79 L1044.08 1209.79 L1043.49 1209.79 L1042.91 1209.79 L1042.32 1209.79 L1041.73 1209.79 L1041.15 1209.79 L1040.56 1209.79 L1039.98 1209.79 L1039.39 1209.79 L1038.8 1209.79 L1038.22 1209.79 L1037.63 1209.79 L1037.04 1209.79 L1036.46 1209.79 L1035.87 1209.79 L1035.28 1209.79 L1034.7 1209.79 L1034.11 1209.79 L1033.52 1209.79 L1032.94 1209.79 L1032.35 1209.79 L1031.77 1209.79 L1031.18 1209.79 L1030.59 1209.79 L1030.01 1209.79 L1029.42 1209.79 L1028.83 1209.79 L1028.25 1209.79 L1027.66 1209.79 L1027.07 1209.79 L1026.49 1209.79 L1025.9 1209.79 L1025.32 1209.79 L1024.73 1209.79 L1024.14 1209.79 L1023.56 1209.79 L1022.97 1209.79 L1022.38 1209.79 L1021.8 1209.79 L1021.21 1209.79 L1020.62 1209.79 L1020.04 1209.79 L1019.45 1209.79 L1018.86 1209.79 L1018.28 1209.79 L1017.69 1209.79 L1017.11 1209.79 L1016.52 1209.79 L1015.93 1209.79 L1015.35 1209.79 L1014.76 1209.79 L1014.17 1209.79 L1013.59 1209.79 L1013 1209.79 L1012.41 1209.79 L1011.83 1209.79 L1011.24 1209.79 L1010.65 1209.79 L1010.07 1209.79 L1009.48 1209.79 L1008.9 1209.79 L1008.31 1209.79 L1007.72 1209.79 L1007.14 1209.79 L1006.55 1209.79 L1005.96 1209.79 L1005.38 1209.79 L1004.79 1209.79 L1004.2 1209.79 L1003.62 1209.79 L1003.03 1209.79 L1002.44 1209.79 L1001.86 1209.79 L1001.27 1209.79 L1000.69 1209.79 L1000.1 1209.79 L999.513 1209.79 L998.926 1209.79 L998.34 1209.79 L997.754 1209.79 L997.167 1209.79 L996.581 1209.79 L995.994 1209.79 L995.408 1209.79 L994.822 1209.79 L994.235 1209.79 L993.649 1209.79 L993.062 1209.79 L992.476 1209.79 L991.889 1209.79 L991.303 1209.79 L990.717 1209.79 L990.13 1209.79 L989.544 1209.79 L988.957 1209.79 L988.371 1209.79 L987.785 1209.79 L987.198 1209.79 L986.612 1209.79 L986.025 1209.79  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.87 986.612,1209.87 987.198,1209.87 987.785,1209.87 988.371,1209.87 988.957,1209.87 989.544,1209.87 990.13,1209.87 990.717,1209.87 991.303,1209.87 991.889,1209.87 992.476,1209.87 993.062,1209.87 993.649,1209.87 994.235,1209.87 994.822,1209.87 995.408,1209.87 995.994,1209.87 996.581,1209.87 997.167,1209.87 997.754,1209.87 998.34,1209.87 998.926,1209.87 999.513,1209.87 1000.1,1209.87 1000.69,1209.87 1001.27,1209.87 1001.86,1209.87 1002.44,1209.87 1003.03,1209.87 1003.62,1209.87 1004.2,1209.87 1004.79,1209.87 1005.38,1209.87 1005.96,1209.87 1006.55,1209.87 1007.14,1209.87 1007.72,1209.87 1008.31,1209.87 1008.9,1209.87 1009.48,1209.87 1010.07,1209.87 1010.65,1209.87 1011.24,1209.87 1011.83,1209.87 1012.41,1209.87 1013,1209.87 1013.59,1209.87 1014.17,1209.87 1014.76,1209.87 1015.35,1209.87 1015.93,1209.87 1016.52,1209.87 1017.11,1209.87 1017.69,1209.87 1018.28,1209.87 1018.86,1209.87 1019.45,1209.87 1020.04,1209.87 1020.62,1209.87 1021.21,1209.87 1021.8,1209.87 1022.38,1209.87 1022.97,1209.87 1023.56,1209.87 1024.14,1209.87 1024.73,1209.87 1025.32,1209.87 1025.9,1209.87 1026.49,1209.87 1027.07,1209.87 1027.66,1209.87 1028.25,1209.87 1028.83,1209.87 1029.42,1209.87 1030.01,1209.87 1030.59,1209.87 1031.18,1209.87 1031.77,1209.87 1032.35,1209.87 1032.94,1209.87 1033.52,1209.87 1034.11,1209.87 1034.7,1209.87 1035.28,1209.87 1035.87,1209.87 1036.46,1209.87 1037.04,1209.87 1037.63,1209.87 1038.22,1209.87 1038.8,1209.87 1039.39,1209.87 1039.98,1209.87 1040.56,1209.87 1041.15,1209.87 1041.73,1209.87 1042.32,1209.87 1042.91,1209.87 1043.49,1209.87 1044.08,1209.87 1044.67,1209.87 1045.25,1209.87 1045.84,1209.87 1046.43,1209.87 1047.01,1209.87 1047.6,1209.87 1048.19,1209.87 1048.77,1209.87 1049.36,1209.87 1049.94,1209.87 1050.53,1209.87 1051.12,1209.87 1051.7,1209.87 1052.29,1209.87 1052.88,1209.87 1053.46,1209.87 1054.05,1209.87 1054.64,1209.87 1055.22,1209.87 1055.81,1209.87 1056.39,1209.87 1056.98,1209.87 1057.57,1209.87 1058.15,1209.87 1058.74,1209.87 1059.33,1209.87 1059.91,1209.87 1060.5,1209.87 1061.09,1209.87 1061.67,1209.87 1062.26,1209.87 1062.85,1209.87 1063.43,1209.87 1064.02,1209.87 1064.6,1209.87 1065.19,1209.87 1065.78,1209.87 1066.36,1209.87 1066.95,1209.87 1067.54,1209.87 1068.12,1209.87 1068.71,1209.87 1069.3,1209.87 1069.88,1209.87 1070.47,1209.87 1071.06,1209.87 1071.64,1209.87 1072.23,1209.87 1072.81,1209.87 1073.4,1209.87 1073.99,1209.87 1074.57,1209.87 1075.16,1209.87 1075.75,1209.87 1076.33,1209.87 1076.92,1209.87 1077.51,1209.87 1078.09,1209.87 1078.68,1209.87 1079.26,1209.87 1079.85,1209.87 1080.44,1209.87 1081.02,1209.87 1081.61,1209.87 1082.2,1209.87 1082.78,1209.87 1083.37,1209.87 1083.96,1209.87 1084.54,1209.87 1085.13,1209.87 1085.72,1209.87 1086.3,1209.87 1086.89,1209.87 1087.47,1209.87 1088.06,1209.87 1088.65,1209.87 1089.23,1209.87 1089.82,1209.87 1090.41,1209.87 1090.99,1209.87 1091.58,1209.87 1092.17,1209.87 1092.75,1209.87 1093.34,1209.87 1093.93,1209.87 1094.51,1209.87 1095.1,1209.87 1095.68,1209.87 1096.27,1209.87 1096.86,1209.87 1097.44,1209.87 1098.03,1209.87 1098.62,1209.87 1099.2,1209.87 1099.79,1209.87 1100.38,1209.87 1100.96,1209.87 1101.55,1209.87 1102.14,1209.87 1102.72,1209.87 1103.31,1209.87 1103.89,1209.87 1104.48,1209.87 1105.07,1209.87 1105.65,1209.87 1106.24,1209.87 1106.83,1209.87 1107.41,1209.87 1108,1209.87 1108.59,1209.87 1109.17,1209.87 1109.76,1209.87 1110.34,1209.87 1110.93,1209.87 1111.52,1209.87 1112.1,1209.87 1112.69,1209.87 1113.28,1209.87 1113.86,1209.87 1114.45,1209.87 1115.04,1209.87 1115.62,1209.87 1116.21,1209.87 1116.8,1209.87 1117.38,1209.87 1117.97,1209.87 1118.55,1209.87 1119.14,1209.87 1119.73,1209.87 1120.31,1209.87 1120.9,1209.87 1121.49,1209.87 1122.07,1209.87 1122.66,1209.87 1123.25,1209.87 1123.83,1209.87 1124.42,1209.87 1125.01,1209.87 1125.59,1209.87 1126.18,1209.87 1126.76,1209.87 1127.35,1209.87 1127.94,1209.87 1128.52,1209.87 1129.11,1209.87 1129.7,1209.87 1130.28,1209.87 1130.87,1209.87 1131.46,1209.87 1132.04,1209.87 1132.63,1209.87 1133.21,1209.87 1133.8,1209.87 1134.39,1209.87 1134.97,1209.87 1135.56,1209.87 1136.15,1209.87 1136.73,1209.87 1137.32,1209.87 1137.91,1209.87 1138.49,1209.87 1139.08,1209.87 1139.67,1209.87 1140.25,1209.87 1140.84,1209.87 1141.42,1209.87 1142.01,1209.87 1142.6,1209.87 1143.18,1209.87 1143.77,1209.87 1144.36,1209.87 1144.94,1209.87 1145.53,1209.87 1146.12,1209.87 1146.7,1209.87 1147.29,1209.87 1147.88,1209.87 1148.46,1209.87 1149.05,1209.87 1149.63,1209.87 1150.22,1209.87 1150.81,1209.87 1151.39,1209.87 1151.98,1209.87 1152.57,1209.87 1153.15,1209.87 1153.74,1209.87 1154.33,1209.87 1154.91,1209.87 1155.5,1209.87 1156.09,1209.87 1156.67,1209.87 1157.26,1209.87 1157.84,1209.87 1158.43,1209.87 1159.02,1209.87 1159.6,1209.87 1160.19,1209.87 1160.78,1209.87 1161.36,1209.87 1161.95,1209.87 1162.54,1209.87 1163.12,1209.87 1163.71,1209.87 1164.29,1209.87 1164.88,1209.87 1165.47,1209.87 1166.05,1209.87 1166.64,1209.87 1167.23,1209.87 1167.81,1209.87 1168.4,1209.87 1168.99,1209.87 1169.57,1209.87 1170.16,1209.87 1170.75,1209.87 1171.33,1209.87 1171.92,1209.87 1172.5,1209.87 1173.09,1209.87 1173.68,1209.87 1174.26,1209.87 1174.85,1209.87 1175.44,1209.87 1176.02,1209.87 1176.61,1209.87 1177.2,1209.87 1177.78,1209.87 1178.37,1209.87 1178.96,1209.87 1179.54,1209.87 1180.13,1209.87 1180.71,1209.87 1181.3,1209.87 1181.89,1209.87 1182.47,1209.87 1183.06,1209.87 1183.65,1209.87 1184.23,1209.87 1184.82,1209.87 1185.41,1209.87 1185.99,1209.87 1186.58,1209.87 1187.16,1209.87 1187.75,1209.87 1188.34,1209.87 1188.92,1209.87 1189.51,1209.87 1190.1,1209.87 1190.68,1209.87 1191.27,1209.87 1191.86,1209.87 1192.44,1209.87 1193.03,1209.87 1193.62,1209.87 1194.2,1209.87 1194.79,1209.87 1195.37,1209.87 1195.96,1209.87 1196.55,1209.87 1197.13,1209.87 1197.72,1209.87 1198.31,1209.87 1198.89,1209.87 1199.48,1209.87 1200.07,1209.87 1200.65,1209.87 1201.24,1209.87 1201.83,1209.87 1202.41,1209.87 1203,1209.87 1203.58,1209.87 1204.17,1209.87 1204.76,1209.87 1205.34,1209.87 1205.93,1209.87 1206.52,1209.87 1207.1,1209.87 1207.69,1209.87 1208.28,1209.87 1208.86,1209.87 1209.45,1209.87 1210.03,1209.87 1210.62,1209.87 1211.21,1209.87 1211.79,1209.87 1212.38,1209.87 1212.97,1209.87 1213.55,1209.87 1214.14,1209.87 1214.73,1209.87 1215.31,1209.87 1215.9,1209.87 1216.49,1209.87 1217.07,1209.87 1217.66,1209.87 1218.24,1209.87 1218.83,1209.87 1219.42,1209.87 1220,1209.87 1220.59,1209.87 1221.18,1209.87 1221.76,1209.87 1222.35,1209.87 1222.94,1209.87 1223.52,1209.87 1224.11,1209.87 1224.7,1209.87 1225.28,1209.87 1225.87,1209.87 1226.45,1209.87 1227.04,1209.87 1227.63,1209.87 1228.21,1209.87 1228.8,1209.87 1229.39,1209.87 1229.97,1209.87 1230.56,1209.87 1231.15,1209.87 1231.73,1209.87 1232.32,1209.87 1232.91,1209.87 1233.49,1209.87 1234.08,1209.87 1234.66,1209.87 1235.25,1209.87 1235.84,1209.87 1236.42,1209.87 1237.01,1209.87 1237.6,1209.87 1238.18,1209.87 1238.77,1209.87 1239.36,1209.87 1239.94,1209.87 1240.53,1209.87 1241.11,1209.87 1241.7,1209.87 1242.29,1209.87 1242.87,1209.87 1243.46,1209.87 1244.05,1209.87 1244.63,1209.87 1245.22,1209.87 1245.81,1209.87 1246.39,1209.87 1246.98,1209.87 1247.57,1209.87 1248.15,1209.87 1248.74,1209.87 1249.32,1209.87 1249.91,1209.87 1250.5,1209.87 1251.08,1209.87 1251.67,1209.87 1252.26,1209.87 1252.84,1209.87 1253.43,1209.87 1254.02,1209.87 1254.6,1209.87 1255.19,1209.87 1255.78,1209.87 1256.36,1209.87 1256.95,1209.87 1257.53,1209.87 1258.12,1209.87 1258.71,1209.87 1259.29,1209.87 1259.88,1209.87 1260.47,1209.87 1261.05,1209.87 1261.64,1209.87 1262.23,1209.87 1262.81,1209.87 1263.4,1209.87 1263.98,1209.87 1264.57,1209.87 1265.16,1209.87 1265.74,1209.87 1266.33,1209.87 1266.92,1209.87 1267.5,1209.87 1268.09,1209.87 1268.68,1209.87 1269.26,1209.87 1269.85,1209.87 1270.44,1209.87 1271.02,1209.87 1271.61,1209.87 1272.19,1209.87 1272.78,1209.87 1273.37,1209.87 1273.95,1209.87 1274.54,1209.87 1275.13,1209.87 1275.71,1209.87 1276.3,1209.87 1276.89,1209.87 1277.47,1209.87 1278.06,1209.87 1278.65,1209.87 1279.23,1209.87 1279.82,1209.87 1280.4,1209.87 1280.99,1209.87 1281.58,1209.87 1282.16,1209.87 1282.75,1209.87 1283.34,1209.87 1283.92,1209.87 1284.51,1209.87 1285.1,1209.87 1285.68,1209.87 1286.27,1209.87 1286.86,1209.87 1287.44,1209.87 1288.03,1209.87 1288.61,1209.87 1289.2,1209.87 1289.79,1209.87 1290.37,1209.87 1290.96,1209.87 1291.55,1209.87 1292.13,1209.87 1292.72,1209.87 1293.31,1209.87 1293.89,1209.87 1294.48,1209.87 1295.06,1209.87 1295.65,1209.87 1296.24,1209.87 1296.82,1209.87 1297.41,1209.87 1298,1209.87 1298.58,1209.87 1299.17,1209.87 1299.76,1209.87 1300.34,1209.87 1300.93,1209.87 1301.52,1209.87 1302.1,1209.87 1302.69,1209.87 1303.27,1209.87 1303.86,1209.87 1304.45,1209.87 1305.03,1209.87 1305.62,1209.87 1306.21,1209.87 1306.79,1209.87 1307.38,1209.87 1307.97,1209.87 1308.55,1209.87 1309.14,1209.87 1309.73,1209.87 1310.31,1209.87 1310.9,1209.87 1311.48,1209.87 1312.07,1209.87 1312.66,1209.87 1313.24,1209.87 1313.83,1209.87 1314.42,1209.87 1315,1209.87 1315.59,1209.87 1316.18,1209.87 1316.76,1209.87 1317.35,1209.87 1317.93,1209.87 1318.52,1209.87 1319.11,1209.87 1319.69,1209.87 1320.28,1209.87 1320.87,1209.87 1321.45,1209.87 1322.04,1209.87 1322.63,1209.87 1323.21,1209.87 1323.8,1209.87 1324.39,1209.87 1324.97,1209.87 1325.56,1209.87 1326.14,1209.87 1326.73,1209.87 1327.32,1209.87 1327.9,1209.87 1328.49,1209.87 1329.08,1209.87 1329.66,1209.87 1330.25,1209.87 1330.84,1209.87 1331.42,1209.87 1332.01,1209.87 1332.6,1209.87 1333.18,1209.87 1333.77,1209.87 1334.35,1209.87 1334.94,1209.87 1335.53,1209.87 1336.11,1209.87 1336.7,1209.87 1337.29,1209.87 1337.87,1209.87 1338.46,1209.87 1339.05,1209.87 1339.63,1209.87 1340.22,1209.87 1340.8,1209.87 1341.39,1209.87 1341.98,1209.87 1342.56,1209.87 1343.15,1209.87 1343.74,1209.87 1344.32,1209.87 1344.91,1209.87 1345.5,1209.87 1346.08,1209.87 1346.67,1209.87 1347.26,1209.87 1347.84,1209.87 1348.43,1209.87 1349.01,1209.87 1349.6,1209.87 1350.19,1209.87 1350.77,1209.87 1351.36,1209.87 1351.95,1209.87 1352.53,1209.87 1353.12,1209.87 1353.71,1209.87 1354.29,1209.87 1354.88,1209.87 1355.47,1209.87 1356.05,1209.87 1356.64,1209.87 1357.22,1209.87 1357.81,1209.87 1358.4,1209.87 1358.98,1209.87 1359.57,1209.87 1360.16,1209.87 1360.74,1209.87 1361.33,1209.87 1361.92,1209.87 1362.5,1209.87 1363.09,1209.87 1363.68,1209.87 1364.26,1209.87 1364.85,1209.87 1365.43,1209.87 1366.02,1209.87 1366.61,1209.87 1367.19,1209.87 1367.78,1209.87 1368.37,1209.87 1368.95,1209.87 1369.54,1209.87 1370.13,1209.87 1370.71,1209.87 1371.3,1209.87 1371.88,1209.87 1372.47,1209.87 1373.06,1209.87 1373.64,1209.87 1374.23,1209.87 1374.82,1209.87 1375.4,1209.87 1375.99,1209.87 1376.58,1209.87 1377.16,1209.87 1377.75,1209.87 1378.34,1209.87 1378.92,1209.87 1379.51,1209.87 1380.09,1209.87 1380.68,1209.87 1381.27,1209.87 1381.85,1209.87 1382.44,1209.87 1383.03,1209.87 1383.61,1209.87 1384.2,1209.87 1384.79,1209.87 1385.37,1209.87 1385.96,1209.87 1386.55,1209.87 1387.13,1209.87 1387.72,1209.87 1388.3,1209.87 1388.89,1209.87 1389.48,1209.87 1390.06,1209.87 1390.65,1209.87 1391.24,1209.87 1391.82,1209.87 1392.41,1209.87 1393,1209.87 1393.58,1209.87 1394.17,1209.87 1394.75,1209.87 1395.34,1209.87 1395.93,1209.87 1396.51,1209.87 1397.1,1209.87 1397.69,1209.87 1398.27,1209.87 1398.86,1209.87 1399.45,1209.87 1400.03,1209.87 1400.62,1209.87 1401.21,1209.87 1401.79,1209.87 1402.38,1209.87 1402.96,1209.87 1403.55,1209.87 1404.14,1209.87 1404.72,1209.87 1405.31,1209.87 1405.9,1209.87 1406.48,1209.87 1407.07,1209.87 1407.66,1209.87 1408.24,1209.87 1408.83,1209.87 1409.42,1209.87 1410,1209.87 1410.59,1209.87 1411.17,1209.87 1411.76,1209.87 1412.35,1209.87 1412.93,1209.87 1413.52,1209.87 1414.11,1209.87 1414.69,1209.87 1415.28,1209.87 1415.87,1209.87 1416.45,1209.87 1417.04,1209.87 1417.63,1209.87 1418.21,1209.87 1418.8,1209.87 1419.38,1209.87 1419.97,1209.87 1420.56,1209.87 1421.14,1209.87 1421.73,1209.87 1422.32,1209.87 1422.9,1209.87 1423.49,1209.87 1424.08,1209.87 1424.66,1209.87 1425.25,1209.87 1425.83,1209.87 1426.42,1209.87 1427.01,1209.87 1427.59,1209.87 1428.18,1209.87 1428.77,1209.87 1429.35,1209.87 1429.94,1209.87 1430.53,1209.87 1431.11,1209.87 1431.7,1209.87 1432.29,1209.87 1432.87,1209.87 1433.46,1209.87 1434.04,1209.87 1434.63,1209.87 1435.22,1209.87 1435.8,1209.87 1436.39,1209.87 1436.98,1209.87 1437.56,1209.87 1438.15,1209.87 1438.74,1209.87 1439.32,1209.87 1439.91,1209.87 1440.5,1209.87 1441.08,1209.87 1441.67,1209.87 1442.25,1209.87 1442.84,1209.87 1443.43,1209.87 1444.01,1209.87 1444.6,1209.87 1445.19,1209.87 1445.77,1209.87 1446.36,1209.87 1446.95,1209.87 1447.53,1209.87 1448.12,1209.87 1448.7,1209.87 1449.29,1209.87 1449.88,1209.87 1450.46,1209.87 1451.05,1209.87 1451.64,1209.87 1452.22,1209.87 1452.81,1209.87 1453.4,1209.87 1453.98,1209.87 1454.57,1209.87 1455.16,1209.87 1455.74,1209.87 1456.33,1209.87 1456.91,1209.87 1457.5,1209.87 1458.09,1209.87 1458.67,1209.87 1459.26,1209.87 1459.85,1209.87 1460.43,1209.87 1461.02,1209.87 1461.61,1209.87 1462.19,1209.87 1462.78,1209.87 1463.37,1209.87 1463.95,1209.87 1464.54,1209.87 1465.12,1209.87 1465.71,1209.87 1466.3,1209.87 1466.88,1209.87 1467.47,1209.87 1468.06,1209.87 1468.64,1209.87 1469.23,1209.87 1469.82,1209.87 1470.4,1209.87 1470.99,1209.87 1471.57,1209.87 1472.16,1209.87 1472.75,1209.87 1473.33,1209.87 1473.92,1209.87 1474.51,1209.87 1475.09,1209.87 1475.68,1209.87 1476.27,1209.87 1476.85,1209.87 1477.44,1209.87 1478.03,1209.87 1478.61,1209.87 1479.2,1209.87 1479.78,1209.87 1480.37,1209.87 1480.96,1209.87 1481.54,1209.87 1482.13,1209.87 1482.72,1209.87 1483.3,1209.87 1483.89,1209.87 1484.48,1209.87 1485.06,1209.87 1485.65,1209.87 1486.24,1209.87 1486.82,1209.87 1487.41,1209.87 1487.99,1209.87 1488.58,1209.87 1489.17,1209.87 1489.75,1209.87 1490.34,1209.87 1490.93,1209.87 1491.51,1209.87 1492.1,1209.87 1492.69,1209.87 1493.27,1209.87 1493.86,1209.87 1494.45,1209.87 1495.03,1209.87 1495.62,1209.87 1496.2,1209.87 1496.79,1209.87 1497.38,1209.87 1497.96,1209.87 1498.55,1209.87 1499.14,1209.87 1499.72,1209.87 1500.31,1209.87 1500.9,1209.87 1501.48,1209.87 1502.07,1209.87 1502.65,1209.87 1503.24,1209.87 1503.83,1209.87 1504.41,1209.87 1505,1209.87 1505.59,1209.87 1506.17,1209.87 1506.76,1209.87 1507.35,1209.87 1507.93,1209.87 1508.52,1209.87 1509.11,1209.87 1509.69,1209.87 1510.28,1209.87 1510.86,1209.87 1511.45,1209.87 1512.04,1209.87 1512.62,1209.87 1513.21,1209.87 1513.8,1209.87 1514.38,1209.87 1514.97,1209.87 1515.56,1209.87 1516.14,1209.87 1516.73,1209.87 1517.32,1209.87 1517.9,1209.87 1518.49,1209.87 1519.07,1209.87 1519.66,1209.87 1520.25,1209.87 1520.83,1209.87 1521.42,1209.87 1522.01,1209.87 1522.59,1209.87 1523.18,1209.87 1523.77,1209.87 1524.35,1209.87 1524.94,1209.87 1525.52,1209.87 1526.11,1209.87 1526.7,1209.87 1527.28,1209.87 1527.87,1209.87 1528.46,1209.87 1529.04,1209.87 1529.63,1209.87 1530.22,1209.87 1530.8,1209.87 1531.39,1209.87 1531.98,1209.87 1532.56,1209.87 1533.15,1209.87 1533.73,1209.87 1534.32,1209.87 1534.91,1209.87 1535.49,1209.87 1536.08,1209.87 1536.67,1209.87 1537.25,1209.87 1537.84,1209.87 1538.43,1209.87 1539.01,1209.87 1539.6,1209.87 1540.19,1209.87 1540.77,1209.87 1541.36,1209.87 1541.94,1209.87 1542.53,1209.87 1543.12,1209.87 1543.7,1209.87 1544.29,1209.87 1544.88,1209.87 1545.46,1209.87 1546.05,1209.87 1546.64,1209.87 1547.22,1209.87 1547.81,1209.87 1548.4,1209.87 1548.98,1209.87 1549.57,1209.87 1550.15,1209.87 1550.74,1209.87 1551.33,1209.87 1551.91,1209.87 1552.5,1209.87 1553.09,1209.87 1553.67,1209.87 1554.26,1209.87 1554.85,1209.87 1555.43,1209.87 1556.02,1209.87 1556.6,1209.87 1557.19,1209.87 1557.78,1209.87 1558.36,1209.87 1558.95,1209.87 1559.54,1209.87 1560.12,1209.87 1560.71,1209.87 1561.3,1209.87 1561.88,1209.87 1562.47,1209.87 1563.06,1209.87 1563.64,1209.87 1564.23,1209.87 1564.81,1209.87 1565.4,1209.87 1565.99,1209.87 1566.57,1209.87 1567.16,1209.87 1567.75,1209.87 1568.33,1209.87 1568.92,1209.87 1569.51,1209.87 1570.09,1209.87 1570.68,1209.87 1571.27,1209.87 1571.85,1209.87 1572.44,1209.87 1573.02,1209.87 1573.61,1209.87 1574.2,1209.87 1574.78,1209.87 1575.37,1209.87 1575.96,1209.87 1576.54,1209.87 1577.13,1209.87 1577.72,1209.87 1578.3,1209.87 1578.89,1209.87 1579.47,1209.87 1580.06,1209.87 1580.65,1209.87 1581.23,1209.87 1581.82,1209.87 1582.41,1209.87 1582.99,1209.87 1583.58,1209.87 1584.17,1209.87 1584.75,1209.87 1585.34,1209.87 1585.93,1209.87 1586.51,1209.87 1587.1,1209.87 1587.68,1209.87 1588.27,1209.87 1588.86,1209.87 1589.44,1209.87 1590.03,1209.87 1590.62,1209.87 1591.2,1209.87 1591.79,1209.87 1592.38,1209.87 1592.96,1209.87 1593.55,1209.87 1594.14,1209.87 1594.72,1209.87 1595.31,1209.87 1595.89,1209.87 1596.48,1209.87 1597.07,1209.87 1597.65,1209.87 1598.24,1209.87 1598.83,1209.87 1599.41,1209.87 1600,1209.87 1600.59,1209.87 1601.17,1209.87 1601.76,1209.87 1602.34,1209.87 1602.93,1209.87 1603.52,1209.87 1604.1,1209.87 1604.69,1209.87 1605.28,1209.87 1605.86,1209.87 1606.45,1209.87 1607.04,1209.87 1607.62,1209.87 1608.21,1209.87 1608.8,1209.87 1609.38,1209.87 1609.97,1209.87 1610.55,1209.87 1611.14,1209.87 1611.73,1209.87 1612.31,1209.87 1612.9,1209.87 1613.49,1209.87 1614.07,1209.87 1614.66,1209.87 1615.25,1209.87 1615.83,1209.87 1616.42,1209.87 1617.01,1209.87 1617.59,1209.87 1618.18,1209.87 1618.76,1209.87 1619.35,1209.87 1619.94,1209.87 1620.52,1209.87 1621.11,1209.87 1621.7,1209.87 1622.28,1209.87 1622.87,1209.87 1623.46,1209.87 1624.04,1209.87 1624.63,1209.87 1625.22,1209.87 1625.8,1209.87 1626.39,1209.87 1626.97,1209.87 1627.56,1209.87 1628.15,1209.87 1628.73,1209.87 1629.32,1209.87 1629.91,1209.87 1630.49,1209.87 1631.08,1209.87 1631.67,1209.87 1632.25,1209.87 1632.84,1209.87 1633.42,1209.87 1634.01,1209.87 1634.6,1209.87 1635.18,1209.87 1635.77,1209.87 1636.36,1209.87 1636.94,1209.87 1637.53,1209.87 1638.12,1209.87 1638.7,1209.87 1639.29,1209.87 1639.88,1209.87 1640.46,1209.87 1641.05,1209.87 1641.63,1209.87 1642.22,1209.87 1642.81,1209.87 1643.39,1209.87 1643.98,1209.87 1644.57,1209.87 1645.15,1209.87 1645.74,1209.87 1646.33,1209.87 1646.91,1209.87 1647.5,1209.87 1648.09,1209.87 1648.67,1209.87 1649.26,1209.87 1649.84,1209.87 1650.43,1209.87 1651.02,1209.87 1651.6,1209.87 1652.19,1209.87 1652.78,1209.87 1653.36,1209.87 1653.95,1209.87 1654.54,1209.87 1655.12,1209.87 1655.71,1209.87 1656.29,1209.87 1656.88,1209.87 1657.47,1209.87 1658.05,1209.87 1658.64,1209.87 1659.23,1209.87 1659.81,1209.87 1660.4,1209.87 1660.99,1209.87 1661.57,1209.87 1662.16,1209.87 1662.75,1209.87 1663.33,1209.87 1663.92,1209.87 1664.5,1209.87 1665.09,1209.87 1665.68,1209.87 1666.26,1209.87 1666.85,1209.87 1667.44,1209.87 1668.02,1209.87 1668.61,1209.87 1669.2,1209.87 1669.78,1209.87 1670.37,1209.87 1670.96,1209.87 1671.54,1209.87 1672.13,1209.87 1672.71,1209.87 1673.3,1209.87 1673.89,1209.87 1674.47,1209.87 1675.06,1209.87 1675.65,1209.87 1676.23,1209.87 1676.82,1209.87 1677.41,1209.87 1677.99,1209.87 1678.58,1209.87 1679.17,1209.87 1679.75,1209.87 1680.34,1209.87 1680.92,1209.87 1681.51,1209.87 1682.1,1209.87 1682.68,1209.87 1683.27,1209.87 1683.86,1209.87 1684.44,1209.87 1685.03,1209.87 1685.62,1209.87 1686.2,1209.87 1686.79,1209.87 1687.37,1209.87 1687.96,1209.87 1688.55,1209.87 1689.13,1209.87 1689.72,1209.87 1690.31,1209.87 1690.89,1209.87 1691.48,1209.87 1692.07,1209.87 1692.65,1209.87 1693.24,1209.87 1693.83,1209.87 1694.41,1209.87 1695,1209.87 1695.58,1209.87 1696.17,1209.87 1696.76,1209.87 1697.34,1209.87 1697.93,1209.87 1698.52,1209.87 1699.1,1209.87 1699.69,1209.87 1700.28,1209.87 1700.86,1209.87 1701.45,1209.87 1702.04,1209.87 1702.62,1209.87 1703.21,1209.87 1703.79,1209.87 1704.38,1209.87 1704.97,1209.87 1705.55,1209.87 1706.14,1209.87 1706.73,1209.87 1707.31,1209.87 1707.9,1209.87 1708.49,1209.87 1709.07,1209.87 1709.66,1209.87 1710.24,1209.87 1710.83,1209.87 1711.42,1209.87 1712,1209.87 1712.59,1209.87 1713.18,1209.87 1713.76,1209.87 1714.35,1209.87 1714.94,1209.87 1715.52,1209.87 1716.11,1209.87 1716.7,1209.87 1717.28,1209.87 1717.87,1209.87 1718.45,1209.87 1719.04,1209.87 1719.63,1209.87 1720.21,1209.87 1720.8,1209.87 1721.39,1209.87 1721.97,1209.87 1722.56,1209.87 1723.15,1209.87 1723.73,1209.87 1724.32,1209.87 1724.91,1209.87 1725.49,1209.87 1726.08,1209.87 1726.66,1209.87 1727.25,1209.87 1727.84,1209.87 1728.42,1209.87 1729.01,1209.87 1729.6,1209.87 1730.18,1209.87 1730.77,1209.87 1731.36,1209.87 1731.94,1209.87 1732.53,1209.87 1733.11,1209.87 1733.7,1209.87 1734.29,1209.87 1734.87,1209.87 1735.46,1209.87 1736.05,1209.87 1736.63,1209.87 1737.22,1209.87 1737.81,1209.87 1738.39,1209.87 1738.98,1209.87 1739.57,1209.87 1740.15,1209.87 1740.74,1209.87 1741.32,1209.87 1741.91,1209.87 1742.5,1209.87 1743.08,1209.87 1743.67,1209.87 1744.26,1209.87 1744.84,1209.87 1745.43,1209.87 1746.02,1209.87 1746.6,1209.87 1747.19,1209.87 1747.78,1209.87 1748.36,1209.87 1748.95,1209.87 1749.53,1209.87 1750.12,1209.87 1750.71,1209.87 1751.29,1209.87 1751.88,1209.87 1752.47,1209.87 1753.05,1209.87 1753.64,1209.87 1754.23,1209.87 1754.81,1209.87 1755.4,1209.87 1755.99,1209.87 1756.57,1209.87 1757.16,1209.87 1757.74,1209.87 1758.33,1209.87 1758.92,1209.87 1759.5,1209.87 1760.09,1209.87 1760.68,1209.87 1761.26,1209.87 1761.85,1209.87 1762.44,1209.87 1763.02,1209.87 1763.61,1209.87 1764.19,1209.87 1764.78,1209.87 1765.37,1209.87 1765.95,1209.87 1766.54,1209.87 1767.13,1209.87 1767.71,1209.87 1768.3,1209.87 1768.89,1209.87 1769.47,1209.87 1770.06,1209.87 1770.65,1209.87 1771.23,1209.87 1771.82,1209.87 1772.4,1209.87 1772.99,1209.87 1773.58,1209.87 1774.16,1209.87 1774.75,1209.87 1775.34,1209.87 1775.92,1209.87 1776.51,1209.87 1777.1,1209.87 1777.68,1209.87 1778.27,1209.87 1778.86,1209.87 1779.44,1209.87 1780.03,1209.87 1780.61,1209.87 1781.2,1209.87 1781.79,1209.87 1782.37,1209.87 1782.96,1209.87 1783.55,1209.87 1784.13,1209.87 1784.72,1209.87 1785.31,1209.87 1785.89,1209.87 1786.48,1209.87 1787.06,1209.87 1787.65,1209.87 1788.24,1209.87 1788.82,1209.87 1789.41,1209.87 1790,1209.87 1790.58,1209.87 1791.17,1209.87 1791.76,1209.87 1792.34,1209.87 1792.93,1209.87 1793.52,1209.87 1794.1,1209.87 1794.69,1209.87 1795.27,1209.87 1795.86,1209.87 1796.45,1209.87 1797.03,1209.87 1797.62,1209.87 1798.21,1209.87 1798.79,1209.87 1799.38,1209.87 1799.97,1209.87 1800.55,1209.87 1801.14,1209.87 1801.73,1209.87 1802.31,1209.87 1802.9,1209.87 1803.48,1209.87 1804.07,1209.87 1804.66,1209.87 1805.24,1209.87 1805.83,1209.87 1806.42,1209.87 1807,1209.87 1807.59,1209.87 1808.18,1209.87 1808.76,1209.87 1809.35,1209.87 1809.94,1209.87 1810.52,1209.87 1811.11,1209.87 1811.69,1209.87 1812.28,1209.87 1812.87,1209.87 1813.45,1209.87 1814.04,1209.87 1814.63,1209.87 1815.21,1209.87 1815.8,1209.87 1816.39,1209.87 1816.97,1209.87 1817.56,1209.87 1818.14,1209.87 1818.73,1209.87 1819.32,1209.87 1819.9,1209.87 1820.49,1209.87 1821.08,1209.87 1821.66,1209.87 1822.25,1209.87 1822.84,1209.87 1823.42,1209.87 1824.01,1209.87 1824.6,1209.87 1825.18,1209.87 1825.77,1209.87 1826.35,1209.87 1826.94,1209.87 1827.53,1209.87 1828.11,1209.87 1828.7,1209.87 1829.29,1209.87 1829.87,1209.87 1830.46,1209.87 1831.05,1209.87 1831.63,1209.87 1832.22,1209.87 1832.81,1209.87 1833.39,1209.87 1833.98,1209.87 1834.56,1209.87 1835.15,1209.87 1835.74,1209.87 1836.32,1209.87 1836.91,1209.87 1837.5,1209.87 1838.08,1209.87 1838.67,1209.87 1839.26,1209.87 1839.84,1209.87 1840.43,1209.87 1841.01,1209.87 1841.6,1209.87 1842.19,1209.87 1842.77,1209.87 1843.36,1209.87 1843.95,1209.87 1844.53,1209.87 1845.12,1209.87 1845.71,1209.87 1846.29,1209.87 1846.88,1209.87 1847.47,1209.87 1848.05,1209.87 1848.64,1209.87 1849.22,1209.87 1849.81,1209.87 1850.4,1209.87 1850.98,1209.87 1851.57,1209.87 1852.16,1209.87 1852.74,1209.87 1853.33,1209.87 1853.92,1209.87 1854.5,1209.87 1855.09,1209.87 1855.68,1209.87 1856.26,1209.87 1856.85,1209.87 1857.43,1209.87 1858.02,1209.87 1858.61,1209.87 1859.19,1209.87 1859.78,1209.87 1860.37,1209.87 1860.95,1209.87 1861.54,1209.87 1862.13,1209.87 1862.71,1209.87 1863.3,1209.87 1863.88,1209.87 1864.47,1209.87 1865.06,1209.87 1865.64,1209.87 1866.23,1209.87 1866.82,1209.87 1867.4,1209.87 1867.99,1209.87 1868.58,1209.87 1869.16,1209.87 1869.75,1209.87 1870.34,1209.87 1870.92,1209.87 1871.51,1209.87 1872.09,1209.87 1872.68,1209.87 1873.27,1209.87 1873.85,1209.87 1874.44,1209.87 1875.03,1209.87 1875.61,1209.87 1876.2,1209.87 1876.79,1209.87 1877.37,1209.87 1877.96,1209.87 1878.55,1209.87 1879.13,1209.87 1879.72,1209.87 1880.3,1209.87 1880.89,1209.87 1881.48,1209.87 1882.06,1209.87 1882.65,1209.87 1883.24,1209.87 1883.82,1209.87 1884.41,1209.87 1885,1209.87 1885.58,1209.87 1886.17,1209.87 1886.76,1209.87 1887.34,1209.87 1887.93,1209.87 1888.51,1209.87 1889.1,1209.87 1889.69,1209.87 1890.27,1209.87 1890.86,1209.87 1891.45,1209.87 1892.03,1209.87 1892.62,1209.87 1893.21,1209.87 1893.79,1209.87 1894.38,1209.87 1894.96,1209.87 1895.55,1209.87 1896.14,1209.87 1896.72,1209.87 1897.31,1209.87 1897.9,1209.87 1898.48,1209.87 1899.07,1209.87 1899.66,1209.87 1900.24,1209.87 1900.83,1209.87 1901.42,1209.87 1902,1209.87 1902.59,1209.87 1903.17,1209.87 1903.76,1209.87 1904.35,1209.87 1904.93,1209.87 1905.52,1209.87 1906.11,1209.87 1906.69,1209.87 1907.28,1209.87 1907.87,1209.87 1908.45,1209.87 1909.04,1209.87 1909.63,1209.87 1910.21,1209.87 1910.8,1209.87 1911.38,1209.87 1911.97,1209.87 1912.56,1209.87 1913.14,1209.87 1913.73,1209.87 1914.32,1209.87 1914.9,1209.87 1915.49,1209.87 1916.08,1209.87 1916.66,1209.87 1917.25,1209.87 1917.83,1209.87 1918.42,1209.87 1919.01,1209.87 1919.59,1209.87 1920.18,1209.87 1920.77,1209.87 1921.35,1209.87 1921.94,1209.87 1922.53,1209.87 1923.11,1209.87 1923.7,1209.87 1924.29,1209.87 1924.87,1209.87 1925.46,1209.87 1926.04,1209.87 1926.63,1209.87 1927.22,1209.87 1927.8,1209.87 1928.39,1209.87 1928.98,1209.87 1929.56,1209.87 1930.15,1209.87 1930.74,1209.87 1931.32,1209.87 1931.91,1209.87 1932.5,1209.87 1933.08,1209.87 1933.67,1209.87 1934.25,1209.87 1934.84,1209.87 1935.43,1209.87 1936.01,1209.87 1936.6,1209.87 1937.19,1209.87 1937.77,1209.87 1938.36,1209.87 1938.95,1209.87 1939.53,1209.87 1940.12,1209.87 1940.71,1209.87 1941.29,1209.87 1941.88,1209.87 1942.46,1209.87 1943.05,1209.87 1943.64,1209.87 1944.22,1209.87 1944.81,1209.87 1945.4,1209.87 1945.98,1209.87 1946.57,1209.87 1947.16,1209.87 1947.74,1209.87 1948.33,1209.87 1948.91,1209.87 1949.5,1209.87 1950.09,1209.87 1950.67,1209.87 1951.26,1209.87 1951.85,1209.87 1952.43,1209.87 1953.02,1209.87 1953.61,1209.87 1954.19,1209.87 1954.78,1209.87 1955.37,1209.87 1955.95,1209.87 1956.54,1209.87 1957.12,1209.87 1957.71,1209.87 1958.3,1209.87 1958.88,1209.87 1959.47,1209.87 1960.06,1209.87 1960.64,1209.87 1961.23,1209.87 1961.82,1209.87 1962.4,1209.87 1962.99,1209.87 1963.58,1209.87 1964.16,1209.87 1964.75,1209.87 1965.33,1209.87 1965.92,1209.87 1966.51,1209.87 1967.09,1209.87 1967.68,1209.87 1968.27,1209.87 1968.85,1209.87 1969.44,1209.87 1970.03,1209.87 1970.61,1209.87 1971.2,1209.87 1971.78,1209.87 1972.37,1209.87 1972.96,1209.87 1973.54,1209.87 1974.13,1209.87 1974.72,1209.87 1975.3,1209.87 1975.89,1209.87 1976.48,1209.87 1977.06,1209.87 1977.65,1209.87 1978.24,1209.87 1978.82,1209.87 1979.41,1209.87 1979.99,1209.87 1980.58,1209.87 1981.17,1209.87 1981.75,1209.87 1982.34,1209.87 1982.93,1209.87 1983.51,1209.87 1984.1,1209.87 1984.69,1209.87 1985.27,1209.87 1985.86,1209.87 1986.45,1209.87 1987.03,1209.87 1987.62,1209.87 1988.2,1209.87 1988.79,1209.87 1989.38,1209.87 1989.96,1209.87 1990.55,1209.87 1991.14,1209.87 1991.72,1209.87 1992.31,1209.87 1992.9,1209.87 1993.48,1209.87 1994.07,1209.87 1994.65,1209.87 1995.24,1209.87 1995.83,1209.87 1996.41,1209.87 1997,1209.87 1997.59,1209.87 1998.17,1209.87 1998.76,1209.87 1999.35,1209.87 1999.93,1209.87 2000.52,1209.87 2001.11,1209.87 2001.69,1209.87 2002.28,1209.87 2002.86,1209.87 2003.45,1209.87 2004.04,1209.87 2004.62,1209.87 2005.21,1209.87 2005.8,1209.87 2006.38,1209.87 2006.97,1209.87 2007.56,1209.87 2008.14,1209.87 2008.73,1209.87 2009.32,1209.87 2009.9,1209.87 2010.49,1209.87 2011.07,1209.87 2011.66,1209.87 2012.25,1209.87 2012.83,1209.87 2013.42,1209.87 2014.01,1209.87 2014.59,1209.87 2015.18,1209.87 2015.77,1209.87 2016.35,1209.87 2016.94,1209.87 2017.53,1209.87 2018.11,1209.87 2018.7,1209.87 2019.28,1209.87 2019.87,1209.87 2020.46,1209.87 2021.04,1209.87 2021.63,1209.87 2022.22,1209.87 2022.8,1209.87 2023.39,1209.87 2023.98,1209.87 2024.56,1209.87 2025.15,1209.87 2025.73,1209.87 2026.32,1209.87 2026.91,1209.87 2027.49,1209.87 2028.08,1209.87 2028.67,1209.87 2029.25,1209.87 2029.84,1209.87 2030.43,1209.87 2031.01,1209.87 2031.6,1209.87 2032.19,1209.87 2032.77,1209.87 2033.36,1209.87 2033.94,1209.87 2034.53,1209.87 2035.12,1209.87 2035.7,1209.87 2036.29,1209.87 2036.88,1209.87 2037.46,1209.87 2038.05,1209.87 2038.64,1209.87 2039.22,1209.87 2039.81,1209.87 2040.4,1209.87 2040.98,1209.87 2041.57,1209.87 2042.15,1209.87 2042.74,1209.87 2043.33,1209.87 2043.91,1209.87 2044.5,1209.87 2045.09,1209.87 2045.67,1209.87 2046.26,1209.87 2046.85,1209.87 2047.43,1209.87 2048.02,1209.87 2048.6,1209.87 2049.19,1209.87 2049.78,1209.87 2050.36,1209.87 2050.95,1209.87 2051.54,1209.87 2052.12,1209.87 2052.71,1209.87 2053.3,1209.87 2053.88,1209.87 2054.47,1209.87 2055.06,1209.87 2055.64,1209.87 2056.23,1209.87 2056.81,1209.87 2057.4,1209.87 2057.99,1209.87 2058.57,1209.87 2059.16,1209.87 2059.75,1209.87 2060.33,1209.87 2060.92,1209.87 2061.51,1209.87 2062.09,1209.87 2062.68,1209.87 2063.27,1209.87 2063.85,1209.87 2064.44,1209.87 2065.02,1209.87 2065.61,1209.87 2066.2,1209.87 2066.78,1209.87 2067.37,1209.87 2067.96,1209.87 2068.54,1209.87 2069.13,1209.87 2069.72,1209.87 2070.3,1209.87 2070.89,1209.87 2071.48,1209.87 2072.06,1209.87 2072.65,1209.87 2073.23,1209.87 2073.82,1209.87 2074.41,1209.87 2074.99,1209.87 2075.58,1209.87 2076.17,1209.87 2076.75,1209.87 2077.34,1209.87 2077.93,1209.87 2078.51,1209.87 2079.1,1209.87 2079.68,1209.87 2080.27,1209.87 2080.86,1209.87 2081.44,1209.87 2082.03,1209.87 2082.62,1209.87 2083.2,1209.87 2083.79,1209.87 2084.38,1209.87 2084.96,1209.87 2085.55,1209.87 2086.14,1209.87 2086.72,1209.87 2087.31,1209.87 2087.89,1209.87 2088.48,1209.87 2089.07,1209.87 2089.65,1209.87 2090.24,1209.87 2090.83,1209.87 2091.41,1209.87 2092,1209.87 2092.59,1209.87 2093.17,1209.87 2093.76,1209.87 2094.35,1209.87 2094.93,1209.87 2095.52,1209.87 2096.1,1209.87 2096.69,1209.87 2097.28,1209.87 2097.86,1209.87 2098.45,1209.87 2099.04,1209.87 2099.62,1209.87 2100.21,1209.87 2100.8,1209.87 2101.38,1209.87 2101.97,1209.87 2102.55,1209.87 2103.14,1209.87 2103.73,1209.87 2104.31,1209.87 2104.9,1209.87 2105.49,1209.87 2106.07,1209.87 2106.66,1209.87 2107.25,1209.87 2107.83,1209.87 2108.42,1209.87 2109.01,1209.87 2109.59,1209.87 2110.18,1209.87 2110.76,1209.87 2111.35,1209.87 2111.94,1209.87 2112.52,1209.87 2113.11,1209.87 2113.7,1209.87 2114.28,1209.87 2114.87,1209.87 2115.46,1209.87 2116.04,1209.87 2116.63,1209.87 2117.22,1209.87 2117.8,1209.87 2118.39,1209.87 2118.97,1209.87 2119.56,1209.87 2120.15,1209.87 2120.73,1209.87 2121.32,1209.87 2121.91,1209.87 2122.49,1209.87 2123.08,1209.87 2123.67,1209.87 2124.25,1209.87 2124.84,1209.87 2125.42,1209.87 2126.01,1209.87 2126.6,1209.87 2127.18,1209.87 2127.77,1209.87 2128.36,1209.87 2128.94,1209.87 2129.53,1209.87 2130.12,1209.87 2130.7,1209.87 2131.29,1209.87 2131.88,1209.87 2132.46,1209.87 2133.05,1209.87 2133.63,1209.87 2134.22,1209.87 2134.81,1209.87 2135.39,1209.87 2135.98,1209.87 2136.57,1209.87 2137.15,1209.87 2137.74,1209.87 2138.33,1209.87 2138.91,1209.87 2139.5,1209.87 2140.09,1209.87 2140.67,1209.87 2141.26,1209.87 2141.84,1209.87 2142.43,1209.87 2143.02,1209.87 2143.6,1209.87 2144.19,1209.87 2144.78,1209.87 2145.36,1209.87 2145.95,1209.87 2146.54,1209.87 2147.12,1209.87 2147.71,1209.87 2148.3,1209.87 2148.88,1209.87 2149.47,1209.87 2150.05,1209.87 2150.64,1209.87 2151.23,1209.87 2151.81,1209.87 2152.4,1209.87 2152.99,1209.87 2153.57,1209.87 2154.16,1209.87 2154.75,1209.87 2155.33,1209.87 2155.92,1209.87 2156.5,1209.87 2157.09,1209.87 2157.68,1209.87 2158.26,1209.87 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.89,1193.5 1399.9,899.083 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1225.87 985.439,1193.5 2158.26,1193.5 2158.26,1225.87 985.439,1225.87 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip030)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip030)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip033\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip033)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-11990.8 169.943,-12279.3 170.503,-11805 171.062,-12051.9 171.621,-12261.4 172.18,-12425.9 172.74,-12568.3 173.299,-12680.3 173.858,-11792 174.417,-11875.5 174.977,-11933.9 175.536,-11968.9 176.095,-11982.2 176.655,-11968.6 177.214,-11943.8 177.773,-11894.6 178.332,-11268.4 178.892,-11199.9 179.451,-11111.1 180.01,-10789.3 180.569,-10272.5 181.129,-9967.23 181.688,-9872.1 182.247,-9763.61 182.806,-9478.18 183.366,-9350.7 183.925,-9218.77 184.484,-8800.55 185.043,-8653.56 185.603,-8143.06 186.162,-7779.46 186.721,-7644.53 187.28,-7513.12 187.84,-7377.37 188.399,-7146.06 188.958,-7007.91 189.517,-6871.07 190.077,-6561.54 190.636,-6276.28 191.195,-6081.67 191.754,-5956.86 192.314,-5745.49 192.873,-5546.16 193.432,-5353.02 193.991,-5171.37 194.551,-4936.74 195.11,-4823.4 195.669,-4709.55 196.228,-4601.66 196.788,-4383.84 197.347,-4223.16 197.906,-4072.26 198.465,-3968.07 199.025,-3824.1 199.584,-3728.23 200.143,-3542.62 200.702,-3406.73 201.262,-3311.69 201.821,-3137.68 202.38,-2973.89 202.939,-2815.99 203.499,-2701.01 204.058,-2621.22 204.617,-2405.13 205.176,-2332.89 205.736,-2225.75 206.295,-2123.47 206.854,-2025.99 207.413,-1899.36 207.973,-1805.51 208.532,-1747.67 209.091,-1627.16 209.65,-1515.88 210.21,-1440.24 210.769,-1333.04 211.328,-1310.65 211.887,-1231.52 212.447,-1186.06 213.006,-1054.28 213.565,-984.518 214.124,-865.588 214.684,-722.847 215.243,-686.123 215.802,-598.668 216.361,-515.342 216.921,-436.056 217.48,-409.959 218.039,-358.838 218.598,-263.2 219.158,-216.544 219.717,-126.878 220.276,-38.2504 220.835,2.18296 221.395,36.7619 221.954,51.2692 222.513,88.6334 223.072,102.282 223.632,142.092 224.191,176.754 224.75,191.129 225.309,227.343 225.869,220.657 226.428,275.907 226.987,329.136 227.546,383.281 228.106,432.826 228.665,444.533 229.224,495.134 229.783,520.76 230.343,546.61 230.902,572.803 231.461,656.47 232.02,657.789 232.58,717.467 233.139,740.242 233.698,741.168 234.257,741.946 234.817,839.804 235.376,856.794 235.935,873.219 236.494,849.635 237.054,883.152 237.613,914.856 238.172,927.048 238.731,939.747 239.291,951.31 239.85,947.624 240.409,999.211 240.968,993.013 241.528,1041.64 242.087,1031.39 242.646,987.25 243.205,1001.76 243.765,1015.8 244.324,1008.2 244.883,1053.23 245.442,1048.28 246.002,1041.67 246.561,1069.17 247.12,1062.79 247.679,1035.69 248.239,1047.97 248.798,1056.91 249.357,1070.46 249.916,1044.95 250.476,1058.3 251.035,1051.61 251.594,1079.66 252.153,1073.35 252.713,1139.65 253.272,1146.06 253.831,1151.94 254.39,1192.99 254.95,1196.55 255.509,1181.32 256.068,1205.92 256.627,1207.07 257.187,1230.49 257.746,1217.79 258.305,1187.43 258.864,1190.43 259.424,1158.82 259.983,1129.48 260.542,1136.89 261.101,1144.52 261.661,1184.96 262.22,1188.7 262.779,1192.59 263.338,1231.89 263.898,1200.47 264.457,1187.94 265.016,1173.19 265.575,1160.83 266.135,1148.05 266.694,1157.31 267.253,1179.94 267.812,1181.87 268.372,1152.09 268.931,1157.02 269.49,1147.78 270.049,1170.02 270.609,1161.91 271.168,1167.16 271.727,1157.04 272.286,1129.79 272.846,1121.68 273.405,1082.29 273.964,1091.1 274.523,1114.64 275.083,1091.78 275.642,1097.79 276.201,1126.62 276.76,1119.62 277.32,1061.41 277.879,1040.71 278.438,1076.91 278.997,1051.35 279.557,1061.23 280.116,1105.33 280.675,1098.14 281.234,1078.28 281.794,1074.36 282.353,1073.51 282.912,1066.89 283.471,1042.89 284.031,1020.17 284.59,1002.84 285.149,1018.18 285.708,1050.62 286.268,1043.05 286.827,1020.53 287.386,1048.48 287.945,1073.52 288.505,1052.06 289.064,1044.96 289.623,1040.29 290.182,1003.61 290.742,1035.69 291.301,1029.47 291.86,1008.01 292.419,1004.5 292.979,984.43 293.538,985.131 294.097,1002.58 294.656,981.945 295.216,980.276 295.775,993.672 296.334,1009.67 296.893,971.432 297.453,972.179 298.012,1000.35 298.571,1032.36 299.13,1011.49 299.69,1024.64 300.249,1001.72 300.808,1014.38 301.368,1042.78 301.927,1036.23 302.486,1028.88 303.045,1056.47 303.605,1081.52 304.164,1090.83 304.723,1083.76 305.282,1074.61 305.842,1049.89 306.401,1041.4 306.96,1080.83 307.519,1088.7 308.079,1076.17 308.638,1066.43 309.197,1060.75 309.756,1036.48 310.316,1025.7 310.875,1005.09 311.434,998.268 311.993,989.733 312.553,1046.91 313.112,1023.76 313.671,1019.06 314.23,1011.06 314.79,1031.76 315.349,1025.42 315.908,1036.65 316.467,1075.74 317.027,1096.29 317.586,1115.89 318.145,1104.6 318.704,1093.34 319.264,1083.89 319.823,1053.66 320.382,1062.4 320.941,1019.97 321.501,1027.14 322.06,1034.21 322.619,1039.9 323.178,1011.49 323.738,1019.11 324.297,1010.1 324.856,1003.78 325.415,1013.36 325.975,989.411 326.534,986.768 327.093,982.989 327.652,926.293 328.212,905.434 328.771,932.383 329.33,966.816 329.889,947.281 330.449,924.591 331.008,955.652 331.567,954.157 332.126,916.529 332.686,832.211 333.245,881.605 333.804,867.172 334.363,851.194 334.923,837.83 335.482,826.764 336.041,812.813 336.6,811.627 337.16,816.982 337.719,820.949 338.278,853.821 338.837,871.436 339.397,921.849 339.956,918.625 340.515,898.619 341.074,911.425 341.634,942.197 342.193,938.83 342.752,937.045 343.311,932.751 343.871,962.362 344.43,953.883 344.989,967.022 345.548,993.787 346.108,1003.7 346.667,997.408 347.226,988.287 347.785,1030.01 348.345,1054.19 348.904,1058.47 349.463,1033.5 350.022,1023.89 350.582,1064.74 351.141,1086.75 351.7,1109.55 352.259,1145.41 352.819,1112.67 353.378,1063.27 353.937,1066.31 354.496,1054.14 355.056,1075.34 355.615,1062.04 356.174,1049.6 356.733,1039.6 357.293,1046.46 357.852,1085.86 358.411,1089 358.97,1092.77 359.53,1064.63 360.089,1020.46 360.648,976.47 361.207,967.227 361.767,962.298 362.326,952.477 362.885,964.376 363.444,927.57 364.004,939.073 364.563,931.06 365.122,923.645 365.681,916.971 366.241,892.385 366.8,889.463 367.359,902.37 367.918,864.302 368.478,875.266 369.037,855.116 369.596,836.866 370.155,837.2 370.715,836.578 371.274,820.512 371.833,837.045 372.392,836.213 372.952,836.066 373.511,818.156 374.07,817.457 374.629,831.661 375.189,845.691 375.748,860.178 376.307,857.373 376.866,870.513 377.426,866.965 377.985,814.058 378.544,795.915 379.103,780.657 379.663,800.46 380.222,802.275 380.781,785.542 381.34,801.473 381.9,803.718 382.459,754.929 383.018,777.122 383.577,793.375 384.137,795.691 384.696,799.479 385.255,817.164 385.814,814.767 386.374,815.081 386.933,797.662 387.492,798.706 388.051,799.896 388.611,847.95 389.17,862.43 389.729,876.547 390.288,857.761 390.848,839.485 391.407,839.346 391.966,820.768 392.525,837.82 393.085,885.472 393.644,882.843 394.203,878.352 394.762,904.538 395.322,916.662 395.881,875.963 396.44,851.766 396.999,865.48 397.559,880.285 398.118,842.15 398.677,836.843 399.236,803.634 399.796,805.151 400.355,837.963 400.914,824.573 401.473,824.49 402.033,789.045 402.592,791.075 403.151,774.126 403.71,777.984 404.27,777.82 404.829,808.978 405.388,824.353 405.947,786.554 406.507,799.663 407.066,782.88 407.625,765.506 408.184,753.878 408.744,770.462 409.303,787.324 409.862,769.927 410.421,801.751 410.981,812.409 411.54,826.755 412.099,824.948 412.658,805.093 413.218,806.112 413.777,771.286 414.336,756.145 414.895,772.751 415.455,710.943 416.014,716.124 416.573,717.786 417.132,717.781 417.692,737.625 418.251,753.206 418.81,788.266 419.369,819.387 419.929,817.555 420.488,848.779 421.047,894.019 421.606,888.587 422.166,934.853 422.725,860.511 423.284,858.355 423.843,853.285 424.403,834.5 424.962,783.791 425.521,801.027 426.08,800.624 426.64,815.483 427.199,814.388 427.758,809.872 428.318,809.938 428.877,807.105 429.436,806.133 429.995,804.803 430.555,835.514 431.114,829.697 431.673,794.191 432.232,773.626 432.792,805.432 433.351,803.799 433.91,818.263 434.469,817.95 435.029,800.696 435.588,817.993 436.147,814.288 436.706,827.403 437.266,808.764 437.825,804.24 438.384,771.245 438.943,802.125 439.503,798.127 440.062,810.956 440.621,776.108 441.18,776.125 441.74,773.962 442.299,758.17 442.858,758.151 443.417,776.268 443.977,805.661 444.536,804.244 445.095,818.807 445.654,813.618 446.214,779.215 446.773,766.67 447.332,766.096 447.891,777.839 448.451,711.925 449.01,701.403 449.569,704.192 450.128,703.539 450.688,720.98 451.247,739.726 451.806,738.168 452.365,726.488 452.925,729.657 453.484,684.09 454.043,705.208 454.602,710.216 455.162,729.073 455.721,713.933 456.28,713.856 456.839,736.313 457.399,752.319 457.958,736.476 458.517,754.911 459.076,770.299 459.636,802.405 460.195,799.464 460.754,782.737 461.313,766.694 461.873,798.259 462.432,779.209 462.991,810.752 463.55,805.789 464.11,847.692 464.669,811.476 465.228,793.936 465.787,778.195 466.347,759.295 466.906,758.405 467.465,771.431 468.024,768.184 468.584,768.312 469.143,781.882 469.702,792.966 470.261,840.846 470.821,836.328 471.38,832.184 471.939,826.968 472.498,823.231 473.058,849.176 473.617,859.196 474.176,805.033 474.735,798.804 475.295,827.968 475.854,825.887 476.413,820.555 476.972,846.321 477.532,827.508 478.091,806.379 478.65,818.754 479.209,796.306 479.769,839.949 480.328,836.552 480.887,845.795 481.446,859.516 482.006,849.853 482.565,845.328 483.124,843.738 483.683,809.035 484.243,821.322 484.802,817.519 485.361,832.725 485.92,807.45 486.48,801.918 487.039,814.54 487.598,827.198 488.157,822.89 488.717,818.779 489.276,813.591 489.835,811.803 490.394,822.981 490.954,850.046 491.513,860.345 492.072,838.536 492.631,815.243 493.191,775.115 493.75,790.811 494.309,805.728 494.868,800.679 495.428,780.941 495.987,776.83 496.546,771.99 497.105,756.728 497.665,738.765 498.224,754.287 498.783,772.192 499.342,755.854 499.902,755.483 500.461,769.73 501.02,752.784 501.579,751.484 502.139,799.625 502.698,762.405 503.257,728.659 503.816,712.779 504.376,729.639 504.935,709.78 505.494,710.518 506.053,723.373 506.613,707.516 507.172,678.805 507.731,681.744 508.29,700.089 508.85,666.602 509.409,682.294 509.968,685.303 510.527,717.336 511.087,702.61 511.646,702.616 512.205,688.318 512.764,719.732 513.324,734.232 513.883,750.184 514.442,763.29 515.001,745.27 515.561,741.024 516.12,741.837 516.679,723.704 517.238,719.095 517.798,717.897 518.357,754.699 518.916,770.253 519.475,767.582 520.035,746.769 520.594,729.164 521.153,758.457 521.712,774.341 522.272,755.376 522.831,721.551 523.39,722.273 523.949,754.407 524.509,737.859 525.068,719.107 525.627,703.295 526.186,724.53 526.746,692.74 527.305,727.002 527.864,659.908 528.423,695.619 528.983,698.519 529.542,701.557 530.101,718.584 530.66,721.326 531.22,715.154 531.779,716.1 532.338,718.76 532.897,703.114 533.457,688.07 534.016,691.957 534.575,677.89 535.134,680.696 535.694,718.095 536.253,716.568 536.812,699.507 537.371,702.391 537.931,704.594 538.49,671.956 539.049,724.105 539.608,738.904 540.168,785.382 540.727,750.916 541.286,750.166 541.845,766.311 542.405,762.617 542.964,790.508 543.523,770.129 544.082,735.36 544.642,780.21 545.201,758.644 545.76,740.842 546.319,724.131 546.879,657.272 547.438,659.9 547.997,646.345 548.556,653.077 549.116,671.189 549.675,674.529 550.234,660.182 550.793,696.132 551.353,695.965 551.912,696.394 552.471,711.968 553.031,712.283 553.59,748.862 554.149,748.65 554.708,744.291 555.268,775.906 555.827,756.611 556.386,754.351 556.945,753.666 557.505,734.086 558.064,750.948 558.623,732.305 559.182,749.371 559.742,727.961 560.301,727.175 560.86,709.311 561.419,710.1 561.979,717.465 562.538,717.277 563.097,715.361 563.656,683.651 564.216,716.001 564.775,685.753 565.334,691.423 565.893,694.087 566.453,683.831 567.012,704.983 567.571,721.314 568.13,702.373 568.69,687.698 569.249,689.91 569.808,693.174 570.367,715.571 570.927,750.254 571.486,732.235 572.045,747.818 572.604,694.912 573.164,712.118 573.723,695.178 574.282,712.491 574.841,712.881 575.401,729.364 575.96,744.385 576.519,775.008 577.078,738.743 577.638,737.728 578.197,748.898 578.756,763.508 579.315,806.614 579.875,767.779 580.434,798.302 580.993,814.513 581.552,779.159 582.112,789.984 582.671,770.512 583.23,736.684 583.789,721.042 584.349,717.675 584.908,684.497 585.467,685.49 586.026,691.336 586.586,708.078 587.145,710.166 587.704,722.777 588.263,724.023 588.823,739.154 589.382,705.271 589.941,725.508 590.5,691.906 591.06,691.172 591.619,678.157 592.178,679.508 592.737,668.054 593.297,669.154 593.856,670.481 594.415,722.432 594.974,721.987 595.534,711.443 596.093,759.557 596.652,740.975 597.211,755.372 597.771,751.426 598.33,748.991 598.889,763.759 599.448,746.046 600.008,740.355 600.567,719.572 601.126,702.416 601.685,702.976 602.245,686.516 602.804,687.589 603.363,707.105 603.922,705.469 604.482,705.459 605.041,705.709 605.6,689.645 606.159,670.789 606.719,670.249 607.278,671.793 607.837,673.328 608.396,689.751 608.956,690.339 609.515,675.991 610.074,675.348 610.633,691.946 611.193,675.5 611.752,673.415 612.311,658.425 612.87,677.716 613.43,710.608 613.989,693.678 614.548,682.421 615.107,700.726 615.667,701.773 616.226,705.185 616.785,691.253 617.344,691.972 617.904,710.725 618.463,724.422 619.022,708.419 619.581,688.85 620.141,686.357 620.7,686.373 621.259,705.255 621.818,671.999 622.378,656.657 622.937,675.497 623.496,615.008 624.055,619.72 624.615,622.979 625.174,648.346 625.733,636.067 626.292,656.419 626.852,659.611 627.411,696.576 627.97,709.93 628.529,709.694 629.089,712.442 629.648,693.831 630.207,711.909 630.766,695.837 631.326,712.056 631.885,697.481 632.444,711.422 633.003,727.14 633.563,726.825 634.122,742.181 634.681,755.418 635.24,766.718 635.8,758.809 636.359,725.356 636.918,724.224 637.477,738.358 638.037,737.003 638.596,719.369 639.155,715.057 639.714,697.047 640.274,729.85 640.833,695.891 641.392,696.967 641.951,693.29 642.511,679.606 643.07,697.864 643.629,697.358 644.188,696.958 644.748,663.408 645.307,686.344 645.866,704.625 646.425,724.182 646.985,719.454 647.544,731.115 648.103,762.775 648.662,804.241 649.222,785.402 649.781,764.538 650.34,730.095 650.899,742.536 651.459,757.632 652.018,752.7 652.577,751.076 653.136,733.385 653.696,748.099 654.255,746.168 654.814,822.59 655.373,835.36 655.933,847.934 656.492,808.857 657.051,820.192 657.61,827.744 658.17,799.999 658.729,837.561 659.288,830.284 659.847,792.257 660.407,817.374 660.966,812.061 661.525,777.158 662.084,758.316 662.644,725.635 663.203,720.619 663.762,718.768 664.321,732.544 664.881,733.62 665.44,763.589 665.999,758.445 666.558,704.349 667.118,688.023 667.677,672.469 668.236,689.036 668.795,686.206 669.355,704.568 669.914,722.125 670.473,723.158 671.032,704.442 671.592,653.33 672.151,639.101 672.71,660.015 673.269,680.662 673.829,662.396 674.388,649.263 674.947,651.473 675.506,636.835 676.066,606.152 676.625,611.044 677.184,631.709 677.743,636.297 678.303,657.063 678.862,640.973 679.421,628.778 679.981,629.801 680.54,634.453 681.099,638.271 681.658,654.896 682.218,674.64 682.777,692.749 683.336,705.35 683.895,701.226 684.455,682.159 685.014,698.717 685.573,680.102 686.132,664.093 686.692,680.659 687.251,682.652 687.81,633.509 688.369,632.762 688.929,651.521 689.488,619.617 690.047,622.919 690.606,629.543 691.166,665.816 691.725,681.99 692.284,667.224 692.843,702.44 693.403,716.925 693.962,713.631 694.521,759.477 695.08,774.162 695.64,787.892 696.199,750.454 696.758,763.796 697.317,746.4 697.877,724.192 698.436,721.017 698.995,784.513 699.554,781.419 700.114,761.131 700.673,775.616 701.232,739.535 701.791,768.143 702.351,763.88 702.91,746.841 703.469,743.704 704.028,709.356 704.588,690.129 705.147,688.268 705.706,690.291 706.265,706.526 706.825,737.704 707.384,734.678 707.943,718.628 708.502,703.023 709.062,718.054 709.621,717.353 710.18,764.885 710.739,805.39 711.299,816.029 711.858,792.292 712.417,786.043 712.976,812.623 713.536,806.853 714.095,834.452 714.654,873.841 715.213,849.64 715.773,807.959 716.332,800.113 716.891,779.076 717.45,775.785 718.01,754.905 718.569,720.715 719.128,703.74 719.687,718.171 720.247,745.063 720.806,726.646 721.365,790.396 721.924,782.551 722.484,762.376 723.043,790.689 723.602,801.752 724.161,778.735 724.721,758.455 725.28,771.531 725.839,779.589 726.398,775.493 726.958,738.431 727.517,750.789 728.076,762.251 728.635,740.802 729.195,774.716 729.754,769.798 730.313,717.542 730.872,650.073 731.432,652.66 731.991,590.94 732.55,562.02 733.109,566.282 733.669,570.685 734.228,590.051 734.787,593.368 735.346,615.382 735.906,604.158 736.465,573.933 737.024,597.766 737.583,585.809 738.143,592.498 738.702,632.983 739.261,618.685 739.82,618.905 740.38,639.553 740.939,660.542 741.498,661.951 742.057,661.618 742.617,698.517 743.176,683.637 743.735,717.601 744.294,737.223 744.854,738.151 745.413,722.203 745.972,719.49 746.531,716.342 747.091,679.882 747.65,665.793 748.209,684.333 748.768,669.034 749.328,672.487 749.887,660.273 750.446,645.468 751.005,631.958 751.565,586.16 752.124,606.688 752.683,616.302 753.242,590.479 753.802,596.198 754.361,600.626 754.92,590.345 755.479,609.081 756.039,648.571 756.598,649.845 757.157,667.728 757.716,650.44 758.276,639.836 758.835,674.076 759.394,711.258 759.953,740.613 760.513,737.12 761.072,686.386 761.631,674.521 762.19,693.73 762.75,723.891 763.309,720.697 763.868,716.23 764.427,746.972 764.987,724.481 765.546,709.181 766.105,727.073 766.664,705.88 767.224,674.28 767.783,689.147 768.342,690.169 768.901,726.102 769.461,755.36 770.02,771.378 770.579,750.95 771.138,749.978 771.698,792.229 772.257,770.125 772.816,782.842 773.375,794.232 773.935,803.432 774.494,781.826 775.053,760.106 775.612,771.517 776.172,767.392 776.731,727.403 777.29,788.86 777.849,748.343 778.409,761.957 778.968,775.743 779.527,786.371 780.086,778.862 780.646,772.551 781.205,771.551 781.764,751.066 782.323,749.02 782.883,744.944 783.442,741.995 784.001,707.413 784.56,707.714 785.12,724.469 785.679,676.696 786.238,677.499 786.797,647.617 787.357,616.686 787.916,621.051 788.475,627.3 789.034,632.978 789.594,651.397 790.153,654.907 790.712,688.203 791.271,686.163 791.831,653.182 792.39,639.3 792.949,655.479 793.508,655.524 794.068,640.48 794.627,654.74 795.186,670.194 795.745,671.976 796.305,706.045 796.864,715.287 797.423,713.824 797.982,632.198 798.542,634.705 799.101,635.418 799.66,638.302 800.219,624.821 800.779,614.909 801.338,617.86 801.897,606.349 802.456,675.053 803.016,698.063 803.575,699.104 804.134,681.417 804.693,698.46 805.253,668.137 805.812,686.04 806.371,703.272 806.931,701.397 807.49,649.785 808.049,650.396 808.608,652.184 809.168,654.715 809.727,641.099 810.286,643.407 810.845,611.126 811.405,629.47 811.964,647.888 812.523,632.852 813.082,619.655 813.642,619.368 814.201,623.932 814.76,658.041 815.319,643.505 815.879,646.093 816.438,635.131 816.997,622.664 817.556,640.617 818.116,655.532 818.675,653.58 819.234,669.815 819.793,653.93 820.353,656.8 820.912,658.841 821.471,659.599 822.03,632.844 822.59,652.099 823.149,671.76 823.708,688.103 824.267,688.933 824.827,688.77 825.386,705.492 825.945,724.719 826.504,697.416 827.064,666.574 827.623,684.713 828.182,685.05 828.741,703.845 829.301,706.781 829.86,673.676 830.419,690.69 830.978,695.358 831.538,677.279 832.097,644.11 832.656,660.324 833.215,646.368 833.775,616.218 834.334,617.692 834.893,621.92 835.452,608.912 836.012,581.476 836.571,603.279 837.13,607.071 837.689,640.735 838.249,643.965 838.808,661.371 839.367,666.598 839.926,671.664 840.486,702.196 841.045,704.373 841.604,685.335 842.163,688.579 842.723,674.128 843.282,691.648 843.841,674.462 844.4,657.72 844.96,659.969 845.519,662.535 846.078,649.006 846.637,654.573 847.197,674.215 847.756,676.102 848.315,646.24 848.874,634.635 849.434,593.505 849.993,601.243 850.552,623.331 851.111,631.344 851.671,671.709 852.23,670.938 852.789,692.366 853.348,660.645 853.908,660.644 854.467,660.716 855.026,663.816 855.585,681.127 856.145,684.296 856.704,702.677 857.263,671.486 857.822,669.295 858.382,669.583 858.941,671.925 859.5,657.358 860.059,661.569 860.619,696.633 861.178,647.609 861.737,667.817 862.296,670.157 862.856,620.423 863.415,609.376 863.974,614.301 864.533,647.634 865.093,650.11 865.652,620.465 866.211,625.348 866.77,644.992 867.33,676.809 867.889,707.318 868.448,719.22 869.007,701.418 869.567,700.601 870.126,698.374 870.685,713.019 871.244,728.402 871.804,740.112 872.363,755.303 872.922,755.172 873.481,749.415 874.041,728.791 874.6,710.789 875.159,690.05 875.718,676.382 876.278,660.666 876.837,629.459 877.396,648.803 877.955,663.791 878.515,683.385 879.074,715.896 879.633,714.761 880.192,696.558 880.752,678.495 881.311,649.17 881.87,648.492 882.429,634.225 882.989,620.99 883.548,639.194 884.107,658.587 884.666,659.677 885.226,664.069 885.785,665.168 886.344,667.327 886.903,666.664 887.463,671.311 888.022,668.541 888.581,667.623 889.14,653.098 889.7,669.563 890.259,688.155 890.818,705.22 891.377,688.488 891.937,706.443 892.496,701.149 893.055,682.595 893.614,679.252 894.174,696.761 894.733,677.91 895.292,674.996 895.851,674.051 896.411,692.243 896.97,674.33 897.529,676.231 898.088,692.208 898.648,691.374 899.207,643.296 899.766,626.833 900.325,633.036 900.885,657.001 901.444,661.647 902.003,691.539 902.562,724.609 903.122,756.941 903.681,739.094 904.24,752.335 904.799,764.044 905.359,795.105 905.918,823.497 906.477,816.262 907.036,826.965 907.596,822.716 908.155,794.293 908.714,787.53 909.273,784.635 909.833,780.325 910.392,774.47 910.951,768.954 911.51,714.497 912.07,761.358 912.629,722.071 913.188,722.529 913.747,690.183 914.307,671.948 914.866,657.461 915.425,694.287 915.984,677.256 916.544,696.766 917.103,666.242 917.662,652.424 918.221,632.573 918.781,632.81 919.34,653.476 919.899,638.815 920.458,658.583 921.018,658.914 921.577,662.377 922.136,631.487 922.695,616.594 923.255,620.288 923.814,612.095 924.373,613.389 924.932,602.701 925.492,611.922 926.051,612.993 926.61,598.164 927.169,581.486 927.729,568.439 928.288,573.054 928.847,577.518 929.406,583.187 929.966,573.981 930.525,562.964 931.084,569.384 931.644,609.55 932.203,615.184 932.762,619.17 933.321,639.376 933.881,695.25 934.44,679.998 934.999,631.591 935.558,649.599 936.118,656.258 936.677,692.186 937.236,692.618 937.795,675.966 938.355,645.581 938.914,681.573 939.473,697.303 940.032,692.601 940.592,710.4 941.151,709.964 941.71,710.386 942.269,737.556 942.829,701.941 943.388,713.416 943.947,728.146 944.506,725.732 945.066,705.266 945.625,723.764 946.184,754.562 946.743,702.151 947.303,721.343 947.862,704.057 948.421,699.544 948.98,702.597 949.54,681.857 950.099,694.666 950.658,693.798 951.217,707.25 951.777,738.396 952.336,749.693 952.895,746.506 953.454,755.432 954.014,733.076 954.573,745.823 955.132,743.677 955.691,742.444 956.251,772.625 956.81,751.666 957.369,746.985 957.928,743.792 958.488,743.381 959.047,722.066 959.606,719.718 960.165,715.264 960.725,710.93 961.284,723.57 961.843,686.247 962.402,655.309 962.962,656.558 963.521,629.228 964.08,603.31 964.639,622.685 965.199,628.987 965.758,633.081 966.317,639.695 966.876,625.722 967.436,626.536 967.995,629.6 968.554,648.55 969.113,651.644 969.673,636.215 970.232,654.977 970.791,669.236 971.35,669.546 971.91,669.539 972.469,652.357 973.028,651.13 973.587,668.247 974.147,681.975 974.706,729.494 975.265,728.05 975.824,775.274 976.384,783.879 976.943,756.896 977.502,749.783 978.061,761.965 978.621,740.737 979.18,733.995 979.739,733.125 980.298,700.189 980.858,715.198 981.417,741.183 981.976,686.119 982.535,712.78 983.095,695.706 983.654,680.297 984.213,743.792 984.772,741.669 985.332,755.66 985.891,796.909 986.45,776.209 987.009,786.638 987.569,763.375 988.128,744.82 988.687,721.244 989.246,690.211 989.806,704.742 990.365,672.11 990.924,669.365 991.483,702.216 992.043,720.098 992.602,718.69 993.161,648.651 993.72,635.216 994.28,639.442 994.839,671.082 995.398,670.807 995.957,653.335 996.517,735.546 997.076,718.192 997.635,697.787 998.194,713.564 998.754,699.956 999.313,683.163 999.872,662.075 1000.43,692.034 1000.99,661.194 1001.55,661.114 1002.11,631.353 1002.67,635.987 1003.23,673.723 1003.79,656.611 1004.35,722.176 1004.91,736.101 1005.46,697.038 1006.02,684.541 1006.58,684.181 1007.14,666.776 1007.7,668.314 1008.26,699.772 1008.82,678.25 1009.38,677.479 1009.94,695.01 1010.5,695.667 1011.06,729.123 1011.62,711.957 1012.18,705.496 1012.73,718.762 1013.29,700.837 1013.85,699.58 1014.41,731.805 1014.97,776.557 1015.53,789.205 1016.09,799.675 1016.65,779.809 1017.21,774.771 1017.77,737.102 1018.33,734.526 1018.89,713.992 1019.45,711.224 1020.01,695.347 1020.56,693.162 1021.12,662.778 1021.68,648.966 1022.24,633.596 1022.8,668.447 1023.36,671.039 1023.92,704.55 1024.48,669.897 1025.04,651.768 1025.6,683.765 1026.16,646.791 1026.72,650.446 1027.28,664.058 1027.83,697.54 1028.39,681.805 1028.95,646.034 1029.51,647.578 1030.07,602.341 1030.63,621.501 1031.19,623.703 1031.75,640.461 1032.31,638.097 1032.87,659.083 1033.43,675.432 1033.99,677.956 1034.55,696.348 1035.1,727.432 1035.66,709.489 1036.22,693.213 1036.78,693.845 1037.34,694.739 1037.9,708.522 1038.46,689.674 1039.02,724.979 1039.58,709.347 1040.14,707.478 1040.7,689.805 1041.26,676.462 1041.82,676.895 1042.38,678.713 1042.93,712.08 1043.49,695.615 1044.05,682.353 1044.61,697.939 1045.17,665.549 1045.73,631.394 1046.29,619.129 1046.85,622.848 1047.41,659.774 1047.97,629.538 1048.53,631.823 1049.09,638.019 1049.65,638.994 1050.2,640.13 1050.76,640.105 1051.32,655.378 1051.88,673.592 1052.44,626.047 1053,625.526 1053.56,611.202 1054.12,617.674 1054.68,605.562 1055.24,639.995 1055.8,641.69 1056.36,696.397 1056.92,713.508 1057.48,713.389 1058.03,729.064 1058.59,725.95 1059.15,723.51 1059.71,721.23 1060.27,715.923 1060.83,715.095 1061.39,715.328 1061.95,699.813 1062.51,685.278 1063.07,686.298 1063.63,686.802 1064.19,703.429 1064.75,683.578 1065.3,697.052 1065.86,681.175 1066.42,712.943 1066.98,711.611 1067.54,708.638 1068.1,705.494 1068.66,703.661 1069.22,705.374 1069.78,691.659 1070.34,671.445 1070.9,706.347 1071.46,719.693 1072.02,718.39 1072.57,766.894 1073.13,746.134 1073.69,742.575 1074.25,740.965 1074.81,736.364 1075.37,735.652 1075.93,716.59 1076.49,747.067 1077.05,696.188 1077.61,696.161 1078.17,709.736 1078.73,741.686 1079.29,710.594 1079.85,675.828 1080.4,693.817 1080.96,676.786 1081.52,661.356 1082.08,665.257 1082.64,698.836 1083.2,700.687 1083.76,700.835 1084.32,700.287 1084.88,620.709 1085.44,612.073 1086,664.869 1086.56,699.564 1087.12,712.412 1087.67,710.21 1088.23,709.051 1088.79,727.13 1089.35,739.286 1089.91,764.24 1090.47,729.193 1091.03,694.59 1091.59,680.03 1092.15,676.728 1092.71,693.243 1093.27,723.218 1093.83,721.5 1094.39,721.303 1094.94,734.779 1095.5,729.994 1096.06,694.722 1096.62,692.681 1097.18,672.185 1097.74,673.459 1098.3,674.328 1098.86,660.045 1099.42,664.481 1099.98,654.677 1100.54,671.584 1101.1,653.98 1101.66,636.421 1102.22,643.426 1102.77,662.99 1103.33,635.881 1103.89,657.034 1104.45,659.065 1105.01,676.626 1105.57,612.911 1106.13,647.198 1106.69,631.134 1107.25,668.627 1107.81,651.724 1108.37,622.672 1108.93,593.299 1109.49,567.364 1110.04,573.014 1110.6,578.951 1111.16,601.149 1111.72,606.945 1112.28,627.659 1112.84,645.765 1113.4,664.208 1113.96,631.685 1114.52,646.174 1115.08,613.539 1115.64,617.048 1116.2,622.987 1116.76,626.872 1117.31,595.672 1117.87,585.777 1118.43,625.414 1118.99,627.601 1119.55,648.535 1120.11,635.066 1120.67,640.03 1121.23,639.425 1121.79,675.77 1122.35,691.574 1122.91,691.731 1123.47,707.229 1124.03,676.988 1124.59,662.844 1125.14,682.27 1125.7,665.696 1126.26,653.666 1126.82,674.139 1127.38,691.417 1127.94,692.954 1128.5,694.179 1129.06,662.623 1129.62,678.526 1130.18,681.485 1130.74,633.202 1131.3,669.688 1131.86,668.603 1132.41,624.456 1132.97,647.347 1133.53,648.683 1134.09,667.343 1134.65,682.771 1135.21,714.468 1135.77,759.965 1136.33,759.276 1136.89,784.122 1137.45,766.206 1138.01,746.171 1138.57,741.479 1139.13,688.352 1139.68,642.195 1140.24,660.345 1140.8,661.998 1141.36,661.217 1141.92,709.947 1142.48,691.626 1143.04,675.734 1143.6,691.408 1144.16,708.04 1144.72,726.46 1145.28,725.268 1145.84,743.533 1146.4,740.39 1146.96,753.149 1147.51,761.943 1148.07,745.31 1148.63,743.215 1149.19,757.273 1149.75,752.256 1150.31,798.714 1150.87,775.835 1151.43,768.208 1151.99,747.825 1152.55,744.566 1153.11,737.893 1153.67,768.687 1154.23,744.633 1154.78,761.698 1155.34,789.75 1155.9,755.444 1156.46,735.568 1157.02,697.709 1157.58,760.981 1158.14,738.534 1158.7,688.283 1159.26,705.545 1159.82,671.334 1160.38,671.338 1160.94,671.231 1161.5,703.882 1162.05,719.131 1162.61,700.197 1163.17,697.875 1163.73,677.728 1164.29,676.063 1164.85,675.739 1165.41,662.376 1165.97,647.426 1166.53,618.434 1167.09,590.917 1167.65,566.954 1168.21,593.415 1168.77,593.879 1169.33,615.824 1169.88,637.439 1170.44,656.658 1171,660.679 1171.56,642.817 1172.12,622.978 1172.68,622.585 1173.24,642.412 1173.8,644.35 1174.36,648.011 1174.92,663.645 1175.48,661.49 1176.04,678.886 1176.6,663.603 1177.15,697.946 1177.71,729.037 1178.27,777.109 1178.83,804.693 1179.39,829.057 1179.95,805.674 1180.51,782.031 1181.07,759.204 1181.63,773.135 1182.19,773.854 1182.75,756.576 1183.31,722.471 1183.87,720.076 1184.43,670.547 1184.98,676.007 1185.54,675.993 1186.1,661.882 1186.66,676.779 1187.22,675.335 1187.78,690.427 1188.34,688.572 1188.9,703.694 1189.46,685.458 1190.02,696.65 1190.58,695.673 1191.14,711.65 1191.7,693.535 1192.25,692.598 1192.81,692.807 1193.37,705.727 1193.93,720.083 1194.49,747.146 1195.05,742.498 1195.61,739.961 1196.17,771.03 1196.73,720.248 1197.29,750.254 1197.85,779.818 1198.41,779.423 1198.97,774.099 1199.52,769.302 1200.08,731.502 1200.64,744.872 1201.2,714.873 1201.76,712.145 1202.32,729.353 1202.88,756.524 1203.44,735.654 1204,683.454 1204.56,715.511 1205.12,713.53 1205.68,628.851 1206.24,647.578 1206.8,635.038 1207.35,633.69 1207.91,634.13 1208.47,606.763 1209.03,575.533 1209.59,565.713 1210.15,572.347 1210.71,561.911 1211.27,605.369 1211.83,594.939 1212.39,599.052 1212.95,616.61 1213.51,632.806 1214.07,620.038 1214.62,637.41 1215.18,635.152 1215.74,653.028 1216.3,652.94 1216.86,653.295 1217.42,653.928 1217.98,655.331 1218.54,624.784 1219.1,629.425 1219.66,649.74 1220.22,682.815 1220.78,667.481 1221.34,635.286 1221.89,641.783 1222.45,661.693 1223.01,664.201 1223.57,685.664 1224.13,700.193 1224.69,716.336 1225.25,715.205 1225.81,697.316 1226.37,677.479 1226.93,676.709 1227.49,675.7 1228.05,676.708 1228.61,690.052 1229.17,687.271 1229.72,688.361 1230.28,673.881 1230.84,655.955 1231.4,658.866 1231.96,645.292 1232.52,664.172 1233.08,647.7 1233.64,617.165 1234.2,622.826 1234.76,657.152 1235.32,640.207 1235.88,645.769 1236.44,646.147 1236.99,663.283 1237.55,713.358 1238.11,707.664 1238.67,675.089 1239.23,639.99 1239.79,624.211 1240.35,609.565 1240.91,599.482 1241.47,605.532 1242.03,594.046 1242.59,583.415 1243.15,591.293 1243.71,561.946 1244.26,552.781 1244.82,577.736 1245.38,568.025 1245.94,559.759 1246.5,546.969 1247.06,538.748 1247.62,578.888 1248.18,584.442 1248.74,607.984 1249.3,643.982 1249.86,662.91 1250.42,682.847 1250.98,700.796 1251.54,719.031 1252.09,719.873 1252.65,720.718 1253.21,719.654 1253.77,718.662 1254.33,682.777 1254.89,684.627 1255.45,700.692 1256.01,699.593 1256.57,684.643 1257.13,666.978 1257.69,650.221 1258.25,684.762 1258.81,716.554 1259.36,712.538 1259.92,708.868 1260.48,708.371 1261.04,721.607 1261.6,699.332 1262.16,666.181 1262.72,633.376 1263.28,637.36 1263.84,621.721 1264.4,620.745 1264.96,622.985 1265.52,608.864 1266.08,629.254 1266.63,633.712 1267.19,606.071 1267.75,627.655 1268.31,662.22 1268.87,613.869 1269.43,636.271 1269.99,640.334 1270.55,642.359 1271.11,644.357 1271.67,662.757 1272.23,662.405 1272.79,693.676 1273.35,728.593 1273.91,710.347 1274.46,723.976 1275.02,735.839 1275.58,732.446 1276.14,696.719 1276.7,710.634 1277.26,692.718 1277.82,723.429 1278.38,737.281 1278.94,748.953 1279.5,746.078 1280.06,709.151 1280.62,705.518 1281.18,704.552 1281.73,705.652 1282.29,703.634 1282.85,671.377 1283.41,658.222 1283.97,658.437 1284.53,659.949 1285.09,628.672 1285.65,648.872 1286.21,633.691 1286.77,619.735 1287.33,638.98 1287.89,644.289 1288.45,649.957 1289,705.322 1289.56,705.766 1290.12,707.342 1290.68,703.738 1291.24,685.363 1291.8,685.081 1292.36,702.649 1292.92,686.782 1293.48,716.441 1294.04,730.024 1294.6,760.238 1295.16,756.312 1295.72,734.695 1296.28,732.268 1296.83,712.05 1297.39,723.835 1297.95,722.612 1298.51,719.926 1299.07,728.485 1299.63,710.367 1300.19,677.55 1300.75,695.663 1301.31,746.289 1301.87,755.043 1302.43,737.672 1302.99,751.266 1303.55,717.412 1304.1,684.589 1304.66,701.056 1305.22,686.55 1305.78,720.136 1306.34,684.962 1306.9,704.604 1307.46,705.709 1308.02,719.808 1308.58,703.131 1309.14,682.721 1309.7,654.137 1310.26,660.087 1310.82,632.613 1311.38,652.893 1311.93,699.902 1312.49,699.143 1313.05,699.884 1313.61,696.237 1314.17,709.33 1314.73,690.03 1315.29,689.319 1315.85,701.675 1316.41,700.515 1316.97,714.206 1317.53,695.48 1318.09,647.086 1318.65,682.615 1319.2,684.001 1319.76,695.835 1320.32,680.854 1320.88,692.149 1321.44,706.213 1322,707.251 1322.56,724.414 1323.12,707.028 1323.68,704.577 1324.24,720.828 1324.8,704.425 1325.36,730.173 1325.92,728.211 1326.47,744.017 1327.03,741.093 1327.59,741.977 1328.15,726.219 1328.71,723.595 1329.27,703.345 1329.83,698.244 1330.39,728.691 1330.95,740.163 1331.51,725.063 1332.07,672.401 1332.63,671.373 1333.19,688.447 1333.75,673.561 1334.3,627.122 1334.86,614.353 1335.42,648.136 1335.98,617.826 1336.54,656.374 1337.1,663.221 1337.66,667.323 1338.22,669.229 1338.78,657.084 1339.34,686.454 1339.9,683.566 1340.46,650.752 1341.02,636.045 1341.57,658.194 1342.13,643.301 1342.69,661.026 1343.25,689.736 1343.81,673.213 1344.37,690.468 1344.93,673.532 1345.49,644.557 1346.05,614.995 1346.61,604.059 1347.17,608.616 1347.73,632.081 1348.29,668.868 1348.84,652.437 1349.4,650.598 1349.96,653.093 1350.52,639.068 1351.08,656.94 1351.64,639.105 1352.2,674.656 1352.76,694.908 1353.32,709.375 1353.88,712.463 1354.44,763.77 1355,742.154 1355.56,691.317 1356.12,706.102 1356.67,717.314 1357.23,715.826 1357.79,699.193 1358.35,680.985 1358.91,685.247 1359.47,667.764 1360.03,686.866 1360.59,716.358 1361.15,728.673 1361.71,745.899 1362.27,728.735 1362.83,772.948 1363.39,734.965 1363.94,717.389 1364.5,713.221 1365.06,695.032 1365.62,660.6 1366.18,643.76 1366.74,664.725 1367.3,666.31 1367.86,715.149 1368.42,747.446 1368.98,761.605 1369.54,755.596 1370.1,750.334 1370.66,730.875 1371.21,713.116 1371.77,693.449 1372.33,725.531 1372.89,736.58 1373.45,716.379 1374.01,712.083 1374.57,709.553 1375.13,707.241 1375.69,672.132 1376.25,689.239 1376.81,657.005 1377.37,656.412 1377.93,639.55 1378.49,641.358 1379.04,678.05 1379.6,694.998 1380.16,679.13 1380.72,663.059 1381.28,678.658 1381.84,675.823 1382.4,694.178 1382.96,710.634 1383.52,707.485 1384.08,627.718 1384.64,615.155 1385.2,634.21 1385.76,623.403 1386.31,619.101 1386.87,638.436 1387.43,638.943 1387.99,641.254 1388.55,628.296 1389.11,632.94 1389.67,652.229 1390.23,673.683 1390.79,660 1391.35,642.623 1391.91,676.847 1392.47,710.421 1393.03,694.947 1393.58,714.389 1394.14,730.259 1394.7,731.285 1395.26,731.474 1395.82,731.5 1396.38,713.649 1396.94,711.543 1397.5,695.818 1398.06,695.6 1398.62,695.224 1399.18,723.942 1399.74,752.081 1400.3,732.925 1400.86,744.504 1401.41,708.815 1401.97,705.151 1402.53,733.966 1403.09,728.492 1403.65,757.692 1404.21,753.389 1404.77,717.584 1405.33,700.074 1405.89,697.867 1406.45,696.687 1407.01,678.407 1407.57,675.297 1408.13,657.425 1408.68,645.827 1409.24,615.629 1409.8,606.333 1410.36,609.8 1410.92,631.645 1411.48,635.736 1412.04,637.86 1412.6,656.461 1413.16,643.187 1413.72,722.537 1414.28,733.494 1414.84,778.217 1415.4,757.181 1415.95,752.55 1416.51,744.879 1417.07,724.674 1417.63,706.926 1418.19,705.285 1418.75,705.139 1419.31,690.282 1419.87,688.063 1420.43,608.493 1420.99,626.766 1421.55,631.692 1422.11,636.324 1422.67,666.942 1423.23,681.998 1423.78,669.305 1424.34,669.88 1424.9,687.177 1425.46,654.932 1426.02,641.109 1426.58,624.681 1427.14,626.785 1427.7,597.732 1428.26,571.38 1428.82,574.541 1429.38,583.742 1429.94,591.509 1430.5,643.709 1431.05,647.353 1431.61,682.264 1432.17,668.585 1432.73,653.775 1433.29,639.611 1433.85,659.397 1434.41,645.255 1434.97,648.678 1435.53,649.249 1436.09,649.393 1436.65,667.349 1437.21,670.488 1437.77,690.636 1438.33,689.733 1438.88,670.034 1439.44,671.825 1440,676.745 1440.56,660.57 1441.12,678.072 1441.68,678.11 1442.24,677.124 1442.8,711.307 1443.36,708.978 1443.92,706.642 1444.48,689.525 1445.04,724.577 1445.6,739.599 1446.15,773.199 1446.71,767.872 1447.27,747.302 1447.83,726.842 1448.39,724.254 1448.95,734.282 1449.51,667.044 1450.07,668.533 1450.63,687.674 1451.19,689.193 1451.75,671.727 1452.31,708.046 1452.87,719.787 1453.42,697.919 1453.98,649.327 1454.54,649.615 1455.1,650.925 1455.66,698.107 1456.22,683.487 1456.78,717.725 1457.34,700.618 1457.9,684.218 1458.46,699.899 1459.02,730.673 1459.58,728.68 1460.14,761.894 1460.7,756.486 1461.25,767.801 1461.81,783.315 1462.37,763.13 1462.93,757.647 1463.49,754.31 1464.05,785.315 1464.61,782.506 1465.17,742.705 1465.73,739.768 1466.29,719.242 1466.85,702.985 1467.41,687.215 1467.97,668.033 1468.52,717.816 1469.08,721.257 1469.64,685.356 1470.2,670.63 1470.76,656.1 1471.32,644.257 1471.88,664.254 1472.44,710.042 1473,742.422 1473.56,784.348 1474.12,813.138 1474.68,841.629 1475.24,815.752 1475.79,808.491 1476.35,830.995 1476.91,841.516 1477.47,833.116 1478.03,844.384 1478.59,820.199 1479.15,797.823 1479.71,789.347 1480.27,766.918 1480.83,746.691 1481.39,742.951 1481.95,740.109 1482.51,688.637 1483.07,687.37 1483.62,656.998 1484.18,644.544 1484.74,678.971 1485.3,645.743 1485.86,595.336 1486.42,615.78 1486.98,649.796 1487.54,631.644 1488.1,650.255 1488.66,655.011 1489.22,639.955 1489.78,658.805 1490.34,661.22 1490.89,663.9 1491.45,646.974 1492.01,636.196 1492.57,655.942 1493.13,673.3 1493.69,655.97 1494.25,641.635 1494.81,627.124 1495.37,644.39 1495.93,628.899 1496.49,631.228 1497.05,668.749 1497.61,665.035 1498.16,670.646 1498.72,669.948 1499.28,715.928 1499.84,715.66 1500.4,681.541 1500.96,699.107 1501.52,665.548 1502.08,651.895 1502.64,670.223 1503.2,670.684 1503.76,667.821 1504.32,714.479 1504.88,731.23 1505.44,762.604 1505.99,725.658 1506.55,691.182 1507.11,673.217 1507.67,625.628 1508.23,646.943 1508.79,649.631 1509.35,661.762 1509.91,678.926 1510.47,681.195 1511.03,647.26 1511.59,646.864 1512.15,730.982 1512.71,745.807 1513.26,740.348 1513.82,735.245 1514.38,746.524 1514.94,756.891 1515.5,769.489 1516.06,750.071 1516.62,716.697 1517.18,714.202 1517.74,698.742 1518.3,683.789 1518.86,684.37 1519.42,686.526 1519.98,687.818 1520.53,667.746 1521.09,636.834 1521.65,625.096 1522.21,630.241 1522.77,663.32 1523.33,663.57 1523.89,698.472 1524.45,713.216 1525.01,696.436 1525.57,697.922 1526.13,683.406 1526.69,682.228 1527.25,711.133 1527.81,740.123 1528.36,771.628 1528.92,764.512 1529.48,790.109 1530.04,754.1 1530.6,766.163 1531.16,730.526 1531.72,706.5 1532.28,704.995 1532.84,702.856 1533.4,703.025 1533.96,719.119 1534.52,739.021 1535.08,764.891 1535.63,762.288 1536.19,755.643 1536.75,734.412 1537.31,713.78 1537.87,709.103 1538.43,741.891 1538.99,773.589 1539.55,735.724 1540.11,713.646 1540.67,693.964 1541.23,661.937 1541.79,664.067 1542.35,679.92 1542.9,696.422 1543.46,678.775 1544.02,666.578 1544.58,667.908 1545.14,654.499 1545.7,639.784 1546.26,642.148 1546.82,657.946 1547.38,661.012 1547.94,680.85 1548.5,680.329 1549.06,663.376 1549.62,665.798 1550.18,636.943 1550.73,645.166 1551.29,631.046 1551.85,636.021 1552.41,674.945 1552.97,679.988 1553.53,677.085 1554.09,679.093 1554.65,710.553 1555.21,678.115 1555.77,676.21 1556.33,723.505 1556.89,736.404 1557.45,765.728 1558,726.946 1558.56,706.299 1559.12,705.41 1559.68,703.363 1560.24,654.039 1560.8,636.643 1561.36,639.791 1561.92,643.244 1562.48,642.437 1563.04,673.951 1563.6,654.962 1564.16,657.468 1564.72,669.683 1565.28,669.237 1565.83,687.072 1566.39,702.095 1566.95,687.399 1567.51,671.487 1568.07,654.322 1568.63,639.219 1569.19,657.823 1569.75,709.927 1570.31,720.88 1570.87,717.014 1571.43,727.034 1571.99,695.627 1572.55,660.635 1573.1,648.733 1573.66,568.979 1574.22,622.173 1574.78,640.753 1575.34,677.219 1575.9,642.985 1576.46,625.989 1577.02,631.841 1577.58,653.578 1578.14,653.646 1578.7,657.955 1579.26,626.509 1579.82,629.593 1580.37,667.071 1580.93,670.43 1581.49,635.178 1582.05,660.362 1582.61,664.227 1583.17,664.165 1583.73,650.731 1584.29,654.2 1584.85,639.655 1585.41,640.866 1585.97,646.226 1586.53,633.427 1587.09,635.066 1587.65,621.668 1588.2,607.892 1588.76,611.919 1589.32,647.942 1589.88,650.585 1590.44,670.016 1591,672.073 1591.56,672.017 1592.12,656.006 1592.68,660.672 1593.24,681.828 1593.8,696.771 1594.36,697.235 1594.92,694.994 1595.47,646.36 1596.03,633.571 1596.59,638.273 1597.15,640.91 1597.71,661.843 1598.27,631.233 1598.83,602.12 1599.39,589.807 1599.95,580.578 1600.51,553.724 1601.07,560.193 1601.63,579.234 1602.19,604.763 1602.74,623.694 1603.3,641.972 1603.86,629.418 1604.42,616.918 1604.98,624.613 1605.54,626.983 1606.1,630.646 1606.66,633.091 1607.22,600.779 1607.78,637.133 1608.34,660.018 1608.9,676.737 1609.46,656.6 1610.02,694.19 1610.57,676.944 1611.13,657.854 1611.69,659.777 1612.25,645.043 1612.81,615.944 1613.37,650.558 1613.93,670.226 1614.49,673.272 1615.05,656.005 1615.61,625.487 1616.17,663.172 1616.73,692.901 1617.29,690.788 1617.84,673.537 1618.4,673.042 1618.96,657.606 1619.52,661.008 1620.08,678.406 1620.64,692.812 1621.2,689.019 1621.76,690.659 1622.32,721.165 1622.88,702.2 1623.44,720.387 1624,720.406 1624.56,685.899 1625.11,687.083 1625.67,689.146 1626.23,671.597 1626.79,685.817 1627.35,686.727 1627.91,657.784 1628.47,672.379 1629.03,657.87 1629.59,644.358 1630.15,658.814 1630.71,660.549 1631.27,679.769 1631.83,697.52 1632.39,697.295 1632.94,694.943 1633.5,711.715 1634.06,711.047 1634.62,710.239 1635.18,724.013 1635.74,757.269 1636.3,724.294 1636.86,752.927 1637.42,766.909 1637.98,729.705 1638.54,756.945 1639.1,767.219 1639.66,743.487 1640.21,751.985 1640.77,743.97 1641.33,757.428 1641.89,769.34 1642.45,751.34 1643.01,732.173 1643.57,749.52 1644.13,729.529 1644.69,744.411 1645.25,710.945 1645.81,704.369 1646.37,701.948 1646.93,731.396 1647.48,743.476 1648.04,724.073 1648.6,690.653 1649.16,703.787 1649.72,753.904 1650.28,717.894 1650.84,713.837 1651.4,725.313 1651.96,738.444 1652.52,768.057 1653.08,794.113 1653.64,770.003 1654.2,781.55 1654.76,762.199 1655.31,745.016 1655.87,741.439 1656.43,738.594 1656.99,735.957 1657.55,733.91 1658.11,750.17 1658.67,712.843 1659.23,694.424 1659.79,696.005 1660.35,709.355 1660.91,654.564 1661.47,657.99 1662.03,691.691 1662.58,660.83 1663.14,676.849 1663.7,660.701 1664.26,642.6 1664.82,645.235 1665.38,647.391 1665.94,649.811 1666.5,619.499 1667.06,607.301 1667.62,645.191 1668.18,667.972 1668.74,663.262 1669.3,664.45 1669.85,679.393 1670.41,615.424 1670.97,605.803 1671.53,640.892 1672.09,612.475 1672.65,619.118 1673.21,623.476 1673.77,675.685 1674.33,676.829 1674.89,724.389 1675.45,755.014 1676.01,797.624 1676.57,745.11 1677.13,742.99 1677.68,756.853 1678.24,722.602 1678.8,721.324 1679.36,701.998 1679.92,670.653 1680.48,703.329 1681.04,702.814 1681.6,702.153 1682.16,718.244 1682.72,717.893 1683.28,750.359 1683.84,748.01 1684.4,761.532 1684.95,761.828 1685.51,774.52 1686.07,752.317 1686.63,730.968 1687.19,730.072 1687.75,709.533 1688.31,708.532 1688.87,686.715 1689.43,682.081 1689.99,698.845 1690.55,696.962 1691.11,694.139 1691.67,723.919 1692.23,723.734 1692.78,721.465 1693.34,708.194 1693.9,739.327 1694.46,740.319 1695.02,738.834 1695.58,737.67 1696.14,717.93 1696.7,684.295 1697.26,649.303 1697.82,670.9 1698.38,669.954 1698.94,638.74 1699.5,623.073 1700.05,659.973 1700.61,661.485 1701.17,665.564 1701.73,652.498 1702.29,657.785 1702.85,659.894 1703.41,646.743 1703.97,661.16 1704.53,665.908 1705.09,668.396 1705.65,672.472 1706.21,691.974 1706.77,689.115 1707.32,689.763 1707.88,689.883 1708.44,673.157 1709,657.48 1709.56,642.284 1710.12,626.416 1710.68,634.006 1711.24,638.126 1711.8,656.6 1712.36,658.16 1712.92,676.841 1713.48,643.453 1714.04,645.695 1714.6,630.066 1715.15,651.224 1715.71,655.242 1716.27,623.017 1716.83,639.393 1717.39,613.67 1717.95,617.967 1718.51,640.654 1719.07,662.761 1719.63,683.675 1720.19,650.928 1720.75,669.352 1721.31,653.28 1721.87,689.93 1722.42,688.095 1722.98,702.578 1723.54,702.949 1724.1,700.77 1724.66,747.995 1725.22,710.401 1725.78,693.235 1726.34,696.084 1726.9,697.713 1727.46,699.654 1728.02,679.542 1728.58,681.062 1729.14,664.396 1729.69,667.067 1730.25,686.009 1730.81,672.226 1731.37,658.297 1731.93,673.723 1732.49,672.525 1733.05,661.056 1733.61,693.787 1734.17,681.046 1734.73,698.385 1735.29,712.133 1735.85,738.689 1736.41,738.217 1736.97,749.372 1737.52,711.65 1738.08,726.817 1738.64,723.163 1739.2,740.736 1739.76,738.309 1740.32,736.512 1740.88,745.345 1741.44,726.573 1742,739.686 1742.56,690.298 1743.12,689.961 1743.68,707.109 1744.24,723.41 1744.79,723.288 1745.35,733.793 1745.91,748.45 1746.47,821.685 1747.03,861.471 1747.59,852.973 1748.15,861.35 1748.71,851.593 1749.27,838.07 1749.83,875.451 1750.39,879.761 1750.95,819.658 1751.51,750.101 1752.06,728.074 1752.62,741.242 1753.18,688.278 1753.74,655.689 1754.3,658.036 1754.86,641.828 1755.42,630.707 1755.98,600.943 1756.54,656.257 1757.1,640.482 1757.66,660.461 1758.22,644.174 1758.78,579.625 1759.34,598.33 1759.89,597.776 1760.45,615.088 1761.01,586.275 1761.57,610.194 1762.13,598.523 1762.69,652.695 1763.25,686.594 1763.81,653.937 1764.37,653.773 1764.93,655.391 1765.49,653.725 1766.05,672.09 1766.61,674.026 1767.16,689.881 1767.72,687.347 1768.28,651.406 1768.84,653.659 1769.4,638.06 1769.96,640.689 1770.52,642.473 1771.08,661.896 1771.64,662.548 1772.2,663.537 1772.76,678.109 1773.32,682.053 1773.88,697.593 1774.43,744.058 1774.99,775.119 1775.55,770.29 1776.11,766.712 1776.67,745.353 1777.23,742.875 1777.79,723.428 1778.35,720.904 1778.91,716.733 1779.47,762.324 1780.03,758.295 1780.59,755.163 1781.15,753.326 1781.71,717.744 1782.26,748.875 1782.82,745.193 1783.38,740.553 1783.94,719.009 1784.5,701.407 1785.06,685.273 1785.62,703.563 1786.18,704.219 1786.74,688.089 1787.3,721.602 1787.86,767.099 1788.42,747.903 1788.98,724.562 1789.53,723.062 1790.09,704.536 1790.65,672.631 1791.21,690.872 1791.77,674.711 1792.33,641.852 1792.89,629.006 1793.45,663.66 1794.01,648.966 1794.57,651.678 1795.13,637.173 1795.69,640.407 1796.25,694.896 1796.8,709.91 1797.36,657.59 1797.92,658.716 1798.48,658.276 1799.04,674.033 1799.6,677.029 1800.16,675.097 1800.72,686.454 1801.28,685.873 1801.84,654.105 1802.4,641.488 1802.96,647.45 1803.52,681.802 1804.08,681.826 1804.63,661.78 1805.19,693.212 1805.75,674.835 1806.31,660.973 1806.87,678.531 1807.43,699.226 1807.99,712.112 1808.55,725.906 1809.11,721.866 1809.67,717.142 1810.23,713.977 1810.79,696.276 1811.35,710.579 1811.9,712.24 1812.46,726.504 1813.02,757.03 1813.58,717.651 1814.14,718.932 1814.7,699.063 1815.26,701.94 1815.82,700.061 1816.38,732.244 1816.94,714.645 1817.5,727.006 1818.06,725.633 1818.62,692.349 1819.18,693.948 1819.73,695.952 1820.29,696.278 1820.85,681.263 1821.41,664.271 1821.97,681.767 1822.53,665.571 1823.09,651.941 1823.65,666.81 1824.21,684.524 1824.77,669.516 1825.33,682.605 1825.89,637.849 1826.45,623.361 1827,659.308 1827.56,640.446 1828.12,642.702 1828.68,673.125 1829.24,623.784 1829.8,642.066 1830.36,613.123 1830.92,616.902 1831.48,624.425 1832.04,628.75 1832.6,645.449 1833.16,649.853 1833.72,682.869 1834.27,669.883 1834.83,650.159 1835.39,653.839 1835.95,673.088 1836.51,673.026 1837.07,655.455 1837.63,641.824 1838.19,647.572 \"/>\n<path clip-path=\"url(#clip033)\" d=\"M720.247 688.56 L720.806 688.56 L721.365 688.56 L721.924 688.56 L722.484 688.56 L723.043 688.56 L723.602 688.56 L724.161 688.56 L724.721 688.56 L725.28 688.56 L725.839 688.56 L726.398 688.56 L726.958 688.56 L727.517 688.56 L728.076 688.56 L728.635 688.56 L729.195 688.56 L729.754 688.56 L730.313 688.56 L730.872 688.56 L731.432 688.56 L731.991 688.56 L732.55 688.56 L733.109 688.56 L733.669 688.56 L734.228 688.56 L734.787 688.56 L735.346 688.56 L735.906 688.56 L736.465 688.56 L737.024 688.56 L737.583 688.56 L738.143 688.56 L738.702 688.56 L739.261 688.56 L739.82 688.56 L740.38 688.56 L740.939 688.56 L741.498 688.56 L742.057 688.56 L742.617 688.56 L743.176 688.56 L743.735 688.56 L744.294 688.56 L744.854 688.56 L745.413 688.56 L745.972 688.56 L746.531 688.56 L747.091 688.56 L747.65 688.56 L748.209 688.56 L748.768 688.56 L749.328 688.56 L749.887 688.56 L750.446 688.56 L751.005 688.56 L751.565 688.56 L752.124 688.56 L752.683 688.56 L753.242 688.56 L753.802 688.56 L754.361 688.56 L754.92 688.56 L755.479 688.56 L756.039 688.56 L756.598 688.56 L757.157 688.56 L757.716 688.56 L758.276 688.56 L758.835 688.56 L759.394 688.56 L759.953 688.56 L760.513 688.56 L761.072 688.56 L761.631 688.56 L762.19 688.56 L762.75 688.56 L763.309 688.56 L763.868 688.56 L764.427 688.56 L764.987 688.56 L765.546 688.56 L766.105 688.56 L766.664 688.56 L767.224 688.56 L767.783 688.56 L768.342 688.56 L768.901 688.56 L769.461 688.56 L770.02 688.56 L770.579 688.56 L771.138 688.56 L771.698 688.56 L772.257 688.56 L772.816 688.56 L773.375 688.56 L773.935 688.56 L774.494 688.56 L775.053 688.56 L775.612 688.56 L776.172 688.56 L776.731 688.56 L777.29 688.56 L777.849 688.56 L778.409 688.56 L778.968 688.56 L779.527 688.56 L780.086 688.56 L780.646 688.56 L781.205 688.56 L781.764 688.56 L782.323 688.56 L782.883 688.56 L783.442 688.56 L784.001 688.56 L784.56 688.56 L785.12 688.56 L785.679 688.56 L786.238 688.56 L786.797 688.56 L787.357 688.56 L787.916 688.56 L788.475 688.56 L789.034 688.56 L789.594 688.56 L790.153 688.56 L790.712 688.56 L791.271 688.56 L791.831 688.56 L792.39 688.56 L792.949 688.56 L793.508 688.56 L794.068 688.56 L794.627 688.56 L795.186 688.56 L795.745 688.56 L796.305 688.56 L796.864 688.56 L797.423 688.56 L797.982 688.56 L798.542 688.56 L799.101 688.56 L799.66 688.56 L800.219 688.56 L800.779 688.56 L801.338 688.56 L801.897 688.56 L802.456 688.56 L803.016 688.56 L803.575 688.56 L804.134 688.56 L804.693 688.56 L805.253 688.56 L805.812 688.56 L806.371 688.56 L806.931 688.56 L807.49 688.56 L808.049 688.56 L808.608 688.56 L809.168 688.56 L809.727 688.56 L810.286 688.56 L810.845 688.56 L811.405 688.56 L811.964 688.56 L812.523 688.56 L813.082 688.56 L813.642 688.56 L814.201 688.56 L814.76 688.56 L815.319 688.56 L815.879 688.56 L816.438 688.56 L816.997 688.56 L817.556 688.56 L818.116 688.56 L818.675 688.56 L819.234 688.56 L819.793 688.56 L820.353 688.56 L820.912 688.56 L821.471 688.56 L822.03 688.56 L822.59 688.56 L823.149 688.56 L823.708 688.56 L824.267 688.56 L824.827 688.56 L825.386 688.56 L825.945 688.56 L826.504 688.56 L827.064 688.56 L827.623 688.56 L828.182 688.56 L828.741 688.56 L829.301 688.56 L829.86 688.56 L830.419 688.56 L830.978 688.56 L831.538 688.56 L832.097 688.56 L832.656 688.56 L833.215 688.56 L833.775 688.56 L834.334 688.56 L834.893 688.56 L835.452 688.56 L836.012 688.56 L836.571 688.56 L837.13 688.56 L837.689 688.56 L838.249 688.56 L838.808 688.56 L839.367 688.56 L839.926 688.56 L840.486 688.56 L841.045 688.56 L841.604 688.56 L842.163 688.56 L842.723 688.56 L843.282 688.56 L843.841 688.56 L844.4 688.56 L844.96 688.56 L845.519 688.56 L846.078 688.56 L846.637 688.56 L847.197 688.56 L847.756 688.56 L848.315 688.56 L848.874 688.56 L849.434 688.56 L849.993 688.56 L850.552 688.56 L851.111 688.56 L851.671 688.56 L852.23 688.56 L852.789 688.56 L853.348 688.56 L853.908 688.56 L854.467 688.56 L855.026 688.56 L855.585 688.56 L856.145 688.56 L856.704 688.56 L857.263 688.56 L857.822 688.56 L858.382 688.56 L858.941 688.56 L859.5 688.56 L860.059 688.56 L860.619 688.56 L861.178 688.56 L861.737 688.56 L862.296 688.56 L862.856 688.56 L863.415 688.56 L863.974 688.56 L864.533 688.56 L865.093 688.56 L865.652 688.56 L866.211 688.56 L866.77 688.56 L867.33 688.56 L867.889 688.56 L868.448 688.56 L869.007 688.56 L869.567 688.56 L870.126 688.56 L870.685 688.56 L871.244 688.56 L871.804 688.56 L872.363 688.56 L872.922 688.56 L873.481 688.56 L874.041 688.56 L874.6 688.56 L875.159 688.56 L875.718 688.56 L876.278 688.56 L876.837 688.56 L877.396 688.56 L877.955 688.56 L878.515 688.56 L879.074 688.56 L879.633 688.56 L880.192 688.56 L880.752 688.56 L881.311 688.56 L881.87 688.56 L882.429 688.56 L882.989 688.56 L883.548 688.56 L884.107 688.56 L884.666 688.56 L885.226 688.56 L885.785 688.56 L886.344 688.56 L886.903 688.56 L887.463 688.56 L888.022 688.56 L888.581 688.56 L889.14 688.56 L889.7 688.56 L890.259 688.56 L890.818 688.56 L891.377 688.56 L891.937 688.56 L892.496 688.56 L893.055 688.56 L893.614 688.56 L894.174 688.56 L894.733 688.56 L895.292 688.56 L895.851 688.56 L896.411 688.56 L896.97 688.56 L897.529 688.56 L898.088 688.56 L898.648 688.56 L899.207 688.56 L899.766 688.56 L900.325 688.56 L900.885 688.56 L901.444 688.56 L902.003 688.56 L902.562 688.56 L903.122 688.56 L903.681 688.56 L904.24 688.56 L904.799 688.56 L905.359 688.56 L905.918 688.56 L906.477 688.56 L907.036 688.56 L907.596 688.56 L908.155 688.56 L908.714 688.56 L909.273 688.56 L909.833 688.56 L910.392 688.56 L910.951 688.56 L911.51 688.56 L912.07 688.56 L912.629 688.56 L913.188 688.56 L913.747 688.56 L914.307 688.56 L914.866 688.56 L915.425 688.56 L915.984 688.56 L916.544 688.56 L917.103 688.56 L917.662 688.56 L918.221 688.56 L918.781 688.56 L919.34 688.56 L919.899 688.56 L920.458 688.56 L921.018 688.56 L921.577 688.56 L922.136 688.56 L922.695 688.56 L923.255 688.56 L923.814 688.56 L924.373 688.56 L924.932 688.56 L925.492 688.56 L926.051 688.56 L926.61 688.56 L927.169 688.56 L927.729 688.56 L928.288 688.56 L928.847 688.56 L929.406 688.56 L929.966 688.56 L930.525 688.56 L931.084 688.56 L931.644 688.56 L932.203 688.56 L932.762 688.56 L933.321 688.56 L933.881 688.56 L934.44 688.56 L934.999 688.56 L935.558 688.56 L936.118 688.56 L936.677 688.56 L937.236 688.56 L937.795 688.56 L938.355 688.56 L938.914 688.56 L939.473 688.56 L940.032 688.56 L940.592 688.56 L941.151 688.56 L941.71 688.56 L942.269 688.56 L942.829 688.56 L943.388 688.56 L943.947 688.56 L944.506 688.56 L945.066 688.56 L945.625 688.56 L946.184 688.56 L946.743 688.56 L947.303 688.56 L947.862 688.56 L948.421 688.56 L948.98 688.56 L949.54 688.56 L950.099 688.56 L950.658 688.56 L951.217 688.56 L951.777 688.56 L952.336 688.56 L952.895 688.56 L953.454 688.56 L954.014 688.56 L954.573 688.56 L955.132 688.56 L955.691 688.56 L956.251 688.56 L956.81 688.56 L957.369 688.56 L957.928 688.56 L958.488 688.56 L959.047 688.56 L959.606 688.56 L960.165 688.56 L960.725 688.56 L961.284 688.56 L961.843 688.56 L962.402 688.56 L962.962 688.56 L963.521 688.56 L964.08 688.56 L964.639 688.56 L965.199 688.56 L965.758 688.56 L966.317 688.56 L966.876 688.56 L967.436 688.56 L967.995 688.56 L968.554 688.56 L969.113 688.56 L969.673 688.56 L970.232 688.56 L970.791 688.56 L971.35 688.56 L971.91 688.56 L972.469 688.56 L973.028 688.56 L973.587 688.56 L974.147 688.56 L974.706 688.56 L975.265 688.56 L975.824 688.56 L976.384 688.56 L976.943 688.56 L977.502 688.56 L978.061 688.56 L978.621 688.56 L979.18 688.56 L979.739 688.56 L980.298 688.56 L980.858 688.56 L981.417 688.56 L981.976 688.56 L982.535 688.56 L983.095 688.56 L983.654 688.56 L984.213 688.56 L984.772 688.56 L985.332 688.56 L985.891 688.56 L986.45 688.56 L987.009 688.56 L987.569 688.56 L988.128 688.56 L988.687 688.56 L989.246 688.56 L989.806 688.56 L990.365 688.56 L990.924 688.56 L991.483 688.56 L992.043 688.56 L992.602 688.56 L993.161 688.56 L993.72 688.56 L994.28 688.56 L994.839 688.56 L995.398 688.56 L995.957 688.56 L996.517 688.56 L997.076 688.56 L997.635 688.56 L998.194 688.56 L998.754 688.56 L999.313 688.56 L999.872 688.56 L1000.43 688.56 L1000.99 688.56 L1001.55 688.56 L1002.11 688.56 L1002.67 688.56 L1003.23 688.56 L1003.79 688.56 L1004.35 688.56 L1004.91 688.56 L1005.46 688.56 L1006.02 688.56 L1006.58 688.56 L1007.14 688.56 L1007.7 688.56 L1008.26 688.56 L1008.82 688.56 L1009.38 688.56 L1009.94 688.56 L1010.5 688.56 L1011.06 688.56 L1011.62 688.56 L1012.18 688.56 L1012.73 688.56 L1013.29 688.56 L1013.85 688.56 L1014.41 688.56 L1014.97 688.56 L1015.53 688.56 L1016.09 688.56 L1016.65 688.56 L1017.21 688.56 L1017.77 688.56 L1018.33 688.56 L1018.89 688.56 L1019.45 688.56 L1020.01 688.56 L1020.56 688.56 L1021.12 688.56 L1021.68 688.56 L1022.24 688.56 L1022.8 688.56 L1023.36 688.56 L1023.92 688.56 L1024.48 688.56 L1025.04 688.56 L1025.6 688.56 L1026.16 688.56 L1026.72 688.56 L1027.28 688.56 L1027.83 688.56 L1028.39 688.56 L1028.95 688.56 L1029.51 688.56 L1030.07 688.56 L1030.63 688.56 L1031.19 688.56 L1031.75 688.56 L1032.31 688.56 L1032.87 688.56 L1033.43 688.56 L1033.99 688.56 L1034.55 688.56 L1035.1 688.56 L1035.66 688.56 L1036.22 688.56 L1036.78 688.56 L1037.34 688.56 L1037.9 688.56 L1038.46 688.56 L1039.02 688.56 L1039.58 688.56 L1040.14 688.56 L1040.7 688.56 L1041.26 688.56 L1041.82 688.56 L1042.38 688.56 L1042.93 688.56 L1043.49 688.56 L1044.05 688.56 L1044.61 688.56 L1045.17 688.56 L1045.73 688.56 L1046.29 688.56 L1046.85 688.56 L1047.41 688.56 L1047.97 688.56 L1048.53 688.56 L1049.09 688.56 L1049.65 688.56 L1050.2 688.56 L1050.76 688.56 L1051.32 688.56 L1051.88 688.56 L1052.44 688.56 L1053 688.56 L1053.56 688.56 L1054.12 688.56 L1054.68 688.56 L1055.24 688.56 L1055.8 688.56 L1056.36 688.56 L1056.92 688.56 L1057.48 688.56 L1058.03 688.56 L1058.59 688.56 L1059.15 688.56 L1059.71 688.56 L1060.27 688.56 L1060.83 688.56 L1061.39 688.56 L1061.95 688.56 L1062.51 688.56 L1063.07 688.56 L1063.63 688.56 L1064.19 688.56 L1064.75 688.56 L1065.3 688.56 L1065.86 688.56 L1066.42 688.56 L1066.98 688.56 L1067.54 688.56 L1068.1 688.56 L1068.66 688.56 L1069.22 688.56 L1069.78 688.56 L1070.34 688.56 L1070.9 688.56 L1071.46 688.56 L1072.02 688.56 L1072.57 688.56 L1073.13 688.56 L1073.69 688.56 L1074.25 688.56 L1074.81 688.56 L1075.37 688.56 L1075.93 688.56 L1076.49 688.56 L1077.05 688.56 L1077.61 688.56 L1078.17 688.56 L1078.73 688.56 L1079.29 688.56 L1079.85 688.56 L1080.4 688.56 L1080.96 688.56 L1081.52 688.56 L1082.08 688.56 L1082.64 688.56 L1083.2 688.56 L1083.76 688.56 L1084.32 688.56 L1084.88 688.56 L1085.44 688.56 L1086 688.56 L1086.56 688.56 L1087.12 688.56 L1087.67 688.56 L1088.23 688.56 L1088.79 688.56 L1089.35 688.56 L1089.91 688.56 L1090.47 688.56 L1091.03 688.56 L1091.59 688.56 L1092.15 688.56 L1092.71 688.56 L1093.27 688.56 L1093.83 688.56 L1094.39 688.56 L1094.94 688.56 L1095.5 688.56 L1096.06 688.56 L1096.62 688.56 L1097.18 688.56 L1097.74 688.56 L1098.3 688.56 L1098.86 688.56 L1099.42 688.56 L1099.98 688.56 L1100.54 688.56 L1101.1 688.56 L1101.66 688.56 L1102.22 688.56 L1102.77 688.56 L1103.33 688.56 L1103.89 688.56 L1104.45 688.56 L1105.01 688.56 L1105.57 688.56 L1106.13 688.56 L1106.69 688.56 L1107.25 688.56 L1107.81 688.56 L1108.37 688.56 L1108.93 688.56 L1109.49 688.56 L1110.04 688.56 L1110.6 688.56 L1111.16 688.56 L1111.72 688.56 L1112.28 688.56 L1112.84 688.56 L1113.4 688.56 L1113.96 688.56 L1114.52 688.56 L1115.08 688.56 L1115.64 688.56 L1116.2 688.56 L1116.76 688.56 L1117.31 688.56 L1117.87 688.56 L1118.43 688.56 L1118.99 688.56 L1119.55 688.56 L1120.11 688.56 L1120.67 688.56 L1121.23 688.56 L1121.79 688.56 L1122.35 688.56 L1122.91 688.56 L1123.47 688.56 L1124.03 688.56 L1124.59 688.56 L1125.14 688.56 L1125.7 688.56 L1126.26 688.56 L1126.82 688.56 L1127.38 688.56 L1127.94 688.56 L1128.5 688.56 L1129.06 688.56 L1129.62 688.56 L1130.18 688.56 L1130.74 688.56 L1131.3 688.56 L1131.86 688.56 L1132.41 688.56 L1132.97 688.56 L1133.53 688.56 L1134.09 688.56 L1134.65 688.56 L1135.21 688.56 L1135.77 688.56 L1136.33 688.56 L1136.89 688.56 L1137.45 688.56 L1138.01 688.56 L1138.57 688.56 L1139.13 688.56 L1139.68 688.56 L1140.24 688.56 L1140.8 688.56 L1141.36 688.56 L1141.92 688.56 L1142.48 688.56 L1143.04 688.56 L1143.6 688.56 L1144.16 688.56 L1144.72 688.56 L1145.28 688.56 L1145.84 688.56 L1146.4 688.56 L1146.96 688.56 L1147.51 688.56 L1148.07 688.56 L1148.63 688.56 L1149.19 688.56 L1149.75 688.56 L1150.31 688.56 L1150.87 688.56 L1151.43 688.56 L1151.99 688.56 L1152.55 688.56 L1153.11 688.56 L1153.67 688.56 L1154.23 688.56 L1154.78 688.56 L1155.34 688.56 L1155.9 688.56 L1156.46 688.56 L1157.02 688.56 L1157.58 688.56 L1158.14 688.56 L1158.7 688.56 L1159.26 688.56 L1159.82 688.56 L1160.38 688.56 L1160.94 688.56 L1161.5 688.56 L1162.05 688.56 L1162.61 688.56 L1163.17 688.56 L1163.73 688.56 L1164.29 688.56 L1164.85 688.56 L1165.41 688.56 L1165.97 688.56 L1166.53 688.56 L1167.09 688.56 L1167.65 688.56 L1168.21 688.56 L1168.77 688.56 L1169.33 688.56 L1169.88 688.56 L1170.44 688.56 L1171 688.56 L1171.56 688.56 L1172.12 688.56 L1172.68 688.56 L1173.24 688.56 L1173.8 688.56 L1174.36 688.56 L1174.92 688.56 L1175.48 688.56 L1176.04 688.56 L1176.6 688.56 L1177.15 688.56 L1177.71 688.56 L1178.27 688.56 L1178.83 688.56 L1179.39 688.56 L1179.95 688.56 L1180.51 688.56 L1181.07 688.56 L1181.63 688.56 L1182.19 688.56 L1182.75 688.56 L1183.31 688.56 L1183.87 688.56 L1184.43 688.56 L1184.98 688.56 L1185.54 688.56 L1186.1 688.56 L1186.66 688.56 L1187.22 688.56 L1187.78 688.56 L1188.34 688.56 L1188.9 688.56 L1189.46 688.56 L1190.02 688.56 L1190.58 688.56 L1191.14 688.56 L1191.7 688.56 L1192.25 688.56 L1192.81 688.56 L1193.37 688.56 L1193.93 688.56 L1194.49 688.56 L1195.05 688.56 L1195.61 688.56 L1196.17 688.56 L1196.73 688.56 L1197.29 688.56 L1197.85 688.56 L1198.41 688.56 L1198.97 688.56 L1199.52 688.56 L1200.08 688.56 L1200.64 688.56 L1201.2 688.56 L1201.76 688.56 L1202.32 688.56 L1202.88 688.56 L1203.44 688.56 L1204 688.56 L1204.56 688.56 L1205.12 688.56 L1205.68 688.56 L1206.24 688.56 L1206.8 688.56 L1207.35 688.56 L1207.91 688.56 L1208.47 688.56 L1209.03 688.56 L1209.59 688.56 L1210.15 688.56 L1210.71 688.56 L1211.27 688.56 L1211.83 688.56 L1212.39 688.56 L1212.95 688.56 L1213.51 688.56 L1214.07 688.56 L1214.62 688.56 L1215.18 688.56 L1215.74 688.56 L1216.3 688.56 L1216.86 688.56 L1217.42 688.56 L1217.98 688.56 L1218.54 688.56 L1219.1 688.56 L1219.66 688.56 L1220.22 688.56 L1220.78 688.56 L1221.34 688.56 L1221.89 688.56 L1222.45 688.56 L1223.01 688.56 L1223.57 688.56 L1224.13 688.56 L1224.69 688.56 L1225.25 688.56 L1225.81 688.56 L1226.37 688.56 L1226.93 688.56 L1227.49 688.56 L1228.05 688.56 L1228.61 688.56 L1229.17 688.56 L1229.72 688.56 L1230.28 688.56 L1230.84 688.56 L1231.4 688.56 L1231.96 688.56 L1232.52 688.56 L1233.08 688.56 L1233.64 688.56 L1234.2 688.56 L1234.76 688.56 L1235.32 688.56 L1235.88 688.56 L1236.44 688.56 L1236.99 688.56 L1237.55 688.56 L1238.11 688.56 L1238.67 688.56 L1239.23 688.56 L1239.79 688.56 L1240.35 688.56 L1240.91 688.56 L1241.47 688.56 L1242.03 688.56 L1242.59 688.56 L1243.15 688.56 L1243.71 688.56 L1244.26 688.56 L1244.82 688.56 L1245.38 688.56 L1245.94 688.56 L1246.5 688.56 L1247.06 688.56 L1247.62 688.56 L1248.18 688.56 L1248.74 688.56 L1249.3 688.56 L1249.86 688.56 L1250.42 688.56 L1250.98 688.56 L1251.54 688.56 L1252.09 688.56 L1252.65 688.56 L1253.21 688.56 L1253.77 688.56 L1254.33 688.56 L1254.89 688.56 L1255.45 688.56 L1256.01 688.56 L1256.57 688.56 L1257.13 688.56 L1257.69 688.56 L1258.25 688.56 L1258.81 688.56 L1259.36 688.56 L1259.92 688.56 L1260.48 688.56 L1261.04 688.56 L1261.6 688.56 L1262.16 688.56 L1262.72 688.56 L1263.28 688.56 L1263.84 688.56 L1264.4 688.56 L1264.96 688.56 L1265.52 688.56 L1266.08 688.56 L1266.63 688.56 L1267.19 688.56 L1267.75 688.56 L1268.31 688.56 L1268.87 688.56 L1269.43 688.56 L1269.99 688.56 L1270.55 688.56 L1271.11 688.56 L1271.67 688.56 L1272.23 688.56 L1272.79 688.56 L1273.35 688.56 L1273.91 688.56 L1274.46 688.56 L1275.02 688.56 L1275.58 688.56 L1276.14 688.56 L1276.7 688.56 L1277.26 688.56 L1277.82 688.56 L1278.38 688.56 L1278.94 688.56 L1279.5 688.56 L1280.06 688.56 L1280.62 688.56 L1281.18 688.56 L1281.73 688.56 L1282.29 688.56 L1282.85 688.56 L1283.41 688.56 L1283.97 688.56 L1284.53 688.56 L1285.09 688.56 L1285.65 688.56 L1286.21 688.56 L1286.77 688.56 L1287.33 688.56 L1287.89 688.56 L1288.45 688.56 L1289 688.56 L1289.56 688.56 L1290.12 688.56 L1290.68 688.56 L1291.24 688.56 L1291.8 688.56 L1292.36 688.56 L1292.92 688.56 L1293.48 688.56 L1294.04 688.56 L1294.6 688.56 L1295.16 688.56 L1295.72 688.56 L1296.28 688.56 L1296.83 688.56 L1297.39 688.56 L1297.95 688.56 L1298.51 688.56 L1299.07 688.56 L1299.63 688.56 L1300.19 688.56 L1300.75 688.56 L1301.31 688.56 L1301.87 688.56 L1302.43 688.56 L1302.99 688.56 L1303.55 688.56 L1304.1 688.56 L1304.66 688.56 L1305.22 688.56 L1305.78 688.56 L1306.34 688.56 L1306.9 688.56 L1307.46 688.56 L1308.02 688.56 L1308.58 688.56 L1309.14 688.56 L1309.7 688.56 L1310.26 688.56 L1310.82 688.56 L1311.38 688.56 L1311.93 688.56 L1312.49 688.56 L1313.05 688.56 L1313.61 688.56 L1314.17 688.56 L1314.73 688.56 L1315.29 688.56 L1315.85 688.56 L1316.41 688.56 L1316.97 688.56 L1317.53 688.56 L1318.09 688.56 L1318.65 688.56 L1319.2 688.56 L1319.76 688.56 L1320.32 688.56 L1320.88 688.56 L1321.44 688.56 L1322 688.56 L1322.56 688.56 L1323.12 688.56 L1323.68 688.56 L1324.24 688.56 L1324.8 688.56 L1325.36 688.56 L1325.92 688.56 L1326.47 688.56 L1327.03 688.56 L1327.59 688.56 L1328.15 688.56 L1328.71 688.56 L1329.27 688.56 L1329.83 688.56 L1330.39 688.56 L1330.95 688.56 L1331.51 688.56 L1332.07 688.56 L1332.63 688.56 L1333.19 688.56 L1333.75 688.56 L1334.3 688.56 L1334.86 688.56 L1335.42 688.56 L1335.98 688.56 L1336.54 688.56 L1337.1 688.56 L1337.66 688.56 L1338.22 688.56 L1338.78 688.56 L1339.34 688.56 L1339.9 688.56 L1340.46 688.56 L1341.02 688.56 L1341.57 688.56 L1342.13 688.56 L1342.69 688.56 L1343.25 688.56 L1343.81 688.56 L1344.37 688.56 L1344.93 688.56 L1345.49 688.56 L1346.05 688.56 L1346.61 688.56 L1347.17 688.56 L1347.73 688.56 L1348.29 688.56 L1348.84 688.56 L1349.4 688.56 L1349.96 688.56 L1350.52 688.56 L1351.08 688.56 L1351.64 688.56 L1352.2 688.56 L1352.76 688.56 L1353.32 688.56 L1353.88 688.56 L1354.44 688.56 L1355 688.56 L1355.56 688.56 L1356.12 688.56 L1356.67 688.56 L1357.23 688.56 L1357.79 688.56 L1358.35 688.56 L1358.91 688.56 L1359.47 688.56 L1360.03 688.56 L1360.59 688.56 L1361.15 688.56 L1361.71 688.56 L1362.27 688.56 L1362.83 688.56 L1363.39 688.56 L1363.94 688.56 L1364.5 688.56 L1365.06 688.56 L1365.62 688.56 L1366.18 688.56 L1366.74 688.56 L1367.3 688.56 L1367.86 688.56 L1368.42 688.56 L1368.98 688.56 L1369.54 688.56 L1370.1 688.56 L1370.66 688.56 L1371.21 688.56 L1371.77 688.56 L1372.33 688.56 L1372.89 688.56 L1373.45 688.56 L1374.01 688.56 L1374.57 688.56 L1375.13 688.56 L1375.69 688.56 L1376.25 688.56 L1376.81 688.56 L1377.37 688.56 L1377.93 688.56 L1378.49 688.56 L1379.04 688.56 L1379.6 688.56 L1380.16 688.56 L1380.72 688.56 L1381.28 688.56 L1381.84 688.56 L1382.4 688.56 L1382.96 688.56 L1383.52 688.56 L1384.08 688.56 L1384.64 688.56 L1385.2 688.56 L1385.76 688.56 L1386.31 688.56 L1386.87 688.56 L1387.43 688.56 L1387.99 688.56 L1388.55 688.56 L1389.11 688.56 L1389.67 688.56 L1390.23 688.56 L1390.79 688.56 L1391.35 688.56 L1391.91 688.56 L1392.47 688.56 L1393.03 688.56 L1393.58 688.56 L1394.14 688.56 L1394.7 688.56 L1395.26 688.56 L1395.82 688.56 L1396.38 688.56 L1396.94 688.56 L1397.5 688.56 L1398.06 688.56 L1398.62 688.56 L1399.18 688.56 L1399.74 688.56 L1400.3 688.56 L1400.86 688.56 L1401.41 688.56 L1401.97 688.56 L1402.53 688.56 L1403.09 688.56 L1403.65 688.56 L1404.21 688.56 L1404.77 688.56 L1405.33 688.56 L1405.89 688.56 L1406.45 688.56 L1407.01 688.56 L1407.57 688.56 L1408.13 688.56 L1408.68 688.56 L1409.24 688.56 L1409.8 688.56 L1410.36 688.56 L1410.92 688.56 L1411.48 688.56 L1412.04 688.56 L1412.6 688.56 L1413.16 688.56 L1413.72 688.56 L1414.28 688.56 L1414.84 688.56 L1415.4 688.56 L1415.95 688.56 L1416.51 688.56 L1417.07 688.56 L1417.63 688.56 L1418.19 688.56 L1418.75 688.56 L1419.31 688.56 L1419.87 688.56 L1420.43 688.56 L1420.99 688.56 L1421.55 688.56 L1422.11 688.56 L1422.67 688.56 L1423.23 688.56 L1423.78 688.56 L1424.34 688.56 L1424.9 688.56 L1425.46 688.56 L1426.02 688.56 L1426.58 688.56 L1427.14 688.56 L1427.7 688.56 L1428.26 688.56 L1428.82 688.56 L1429.38 688.56 L1429.94 688.56 L1430.5 688.56 L1431.05 688.56 L1431.61 688.56 L1432.17 688.56 L1432.73 688.56 L1433.29 688.56 L1433.85 688.56 L1434.41 688.56 L1434.97 688.56 L1435.53 688.56 L1436.09 688.56 L1436.65 688.56 L1437.21 688.56 L1437.77 688.56 L1438.33 688.56 L1438.88 688.56 L1439.44 688.56 L1440 688.56 L1440.56 688.56 L1441.12 688.56 L1441.68 688.56 L1442.24 688.56 L1442.8 688.56 L1443.36 688.56 L1443.92 688.56 L1444.48 688.56 L1445.04 688.56 L1445.6 688.56 L1446.15 688.56 L1446.71 688.56 L1447.27 688.56 L1447.83 688.56 L1448.39 688.56 L1448.95 688.56 L1449.51 688.56 L1450.07 688.56 L1450.63 688.56 L1451.19 688.56 L1451.75 688.56 L1452.31 688.56 L1452.87 688.56 L1453.42 688.56 L1453.98 688.56 L1454.54 688.56 L1455.1 688.56 L1455.66 688.56 L1456.22 688.56 L1456.78 688.56 L1457.34 688.56 L1457.9 688.56 L1458.46 688.56 L1459.02 688.56 L1459.58 688.56 L1460.14 688.56 L1460.7 688.56 L1461.25 688.56 L1461.81 688.56 L1462.37 688.56 L1462.93 688.56 L1463.49 688.56 L1464.05 688.56 L1464.61 688.56 L1465.17 688.56 L1465.73 688.56 L1466.29 688.56 L1466.85 688.56 L1467.41 688.56 L1467.97 688.56 L1468.52 688.56 L1469.08 688.56 L1469.64 688.56 L1470.2 688.56 L1470.76 688.56 L1471.32 688.56 L1471.88 688.56 L1472.44 688.56 L1473 688.56 L1473.56 688.56 L1474.12 688.56 L1474.68 688.56 L1475.24 688.56 L1475.79 688.56 L1476.35 688.56 L1476.91 688.56 L1477.47 688.56 L1478.03 688.56 L1478.59 688.56 L1479.15 688.56 L1479.71 688.56 L1480.27 688.56 L1480.83 688.56 L1481.39 688.56 L1481.95 688.56 L1482.51 688.56 L1483.07 688.56 L1483.62 688.56 L1484.18 688.56 L1484.74 688.56 L1485.3 688.56 L1485.86 688.56 L1486.42 688.56 L1486.98 688.56 L1487.54 688.56 L1488.1 688.56 L1488.66 688.56 L1489.22 688.56 L1489.78 688.56 L1490.34 688.56 L1490.89 688.56 L1491.45 688.56 L1492.01 688.56 L1492.57 688.56 L1493.13 688.56 L1493.69 688.56 L1494.25 688.56 L1494.81 688.56 L1495.37 688.56 L1495.93 688.56 L1496.49 688.56 L1497.05 688.56 L1497.61 688.56 L1498.16 688.56 L1498.72 688.56 L1499.28 688.56 L1499.84 688.56 L1500.4 688.56 L1500.96 688.56 L1501.52 688.56 L1502.08 688.56 L1502.64 688.56 L1503.2 688.56 L1503.76 688.56 L1504.32 688.56 L1504.88 688.56 L1505.44 688.56 L1505.99 688.56 L1506.55 688.56 L1507.11 688.56 L1507.67 688.56 L1508.23 688.56 L1508.79 688.56 L1509.35 688.56 L1509.91 688.56 L1510.47 688.56 L1511.03 688.56 L1511.59 688.56 L1512.15 688.56 L1512.71 688.56 L1513.26 688.56 L1513.82 688.56 L1514.38 688.56 L1514.94 688.56 L1515.5 688.56 L1516.06 688.56 L1516.62 688.56 L1517.18 688.56 L1517.74 688.56 L1518.3 688.56 L1518.86 688.56 L1519.42 688.56 L1519.98 688.56 L1520.53 688.56 L1521.09 688.56 L1521.65 688.56 L1522.21 688.56 L1522.77 688.56 L1523.33 688.56 L1523.89 688.56 L1524.45 688.56 L1525.01 688.56 L1525.57 688.56 L1526.13 688.56 L1526.69 688.56 L1527.25 688.56 L1527.81 688.56 L1528.36 688.56 L1528.92 688.56 L1529.48 688.56 L1530.04 688.56 L1530.6 688.56 L1531.16 688.56 L1531.72 688.56 L1532.28 688.56 L1532.84 688.56 L1533.4 688.56 L1533.96 688.56 L1534.52 688.56 L1535.08 688.56 L1535.63 688.56 L1536.19 688.56 L1536.75 688.56 L1537.31 688.56 L1537.87 688.56 L1538.43 688.56 L1538.99 688.56 L1539.55 688.56 L1540.11 688.56 L1540.67 688.56 L1541.23 688.56 L1541.79 688.56 L1542.35 688.56 L1542.9 688.56 L1543.46 688.56 L1544.02 688.56 L1544.58 688.56 L1545.14 688.56 L1545.7 688.56 L1546.26 688.56 L1546.82 688.56 L1547.38 688.56 L1547.94 688.56 L1548.5 688.56 L1549.06 688.56 L1549.62 688.56 L1550.18 688.56 L1550.73 688.56 L1551.29 688.56 L1551.85 688.56 L1552.41 688.56 L1552.97 688.56 L1553.53 688.56 L1554.09 688.56 L1554.65 688.56 L1555.21 688.56 L1555.77 688.56 L1556.33 688.56 L1556.89 688.56 L1557.45 688.56 L1558 688.56 L1558.56 688.56 L1559.12 688.56 L1559.68 688.56 L1560.24 688.56 L1560.8 688.56 L1561.36 688.56 L1561.92 688.56 L1562.48 688.56 L1563.04 688.56 L1563.6 688.56 L1564.16 688.56 L1564.72 688.56 L1565.28 688.56 L1565.83 688.56 L1566.39 688.56 L1566.95 688.56 L1567.51 688.56 L1568.07 688.56 L1568.63 688.56 L1569.19 688.56 L1569.75 688.56 L1570.31 688.56 L1570.87 688.56 L1571.43 688.56 L1571.99 688.56 L1572.55 688.56 L1573.1 688.56 L1573.66 688.56 L1574.22 688.56 L1574.78 688.56 L1575.34 688.56 L1575.9 688.56 L1576.46 688.56 L1577.02 688.56 L1577.58 688.56 L1578.14 688.56 L1578.7 688.56 L1579.26 688.56 L1579.82 688.56 L1580.37 688.56 L1580.93 688.56 L1581.49 688.56 L1582.05 688.56 L1582.61 688.56 L1583.17 688.56 L1583.73 688.56 L1584.29 688.56 L1584.85 688.56 L1585.41 688.56 L1585.97 688.56 L1586.53 688.56 L1587.09 688.56 L1587.65 688.56 L1588.2 688.56 L1588.76 688.56 L1589.32 688.56 L1589.88 688.56 L1590.44 688.56 L1591 688.56 L1591.56 688.56 L1592.12 688.56 L1592.68 688.56 L1593.24 688.56 L1593.8 688.56 L1594.36 688.56 L1594.92 688.56 L1595.47 688.56 L1596.03 688.56 L1596.59 688.56 L1597.15 688.56 L1597.71 688.56 L1598.27 688.56 L1598.83 688.56 L1599.39 688.56 L1599.95 688.56 L1600.51 688.56 L1601.07 688.56 L1601.63 688.56 L1602.19 688.56 L1602.74 688.56 L1603.3 688.56 L1603.86 688.56 L1604.42 688.56 L1604.98 688.56 L1605.54 688.56 L1606.1 688.56 L1606.66 688.56 L1607.22 688.56 L1607.78 688.56 L1608.34 688.56 L1608.9 688.56 L1609.46 688.56 L1610.02 688.56 L1610.57 688.56 L1611.13 688.56 L1611.69 688.56 L1612.25 688.56 L1612.81 688.56 L1613.37 688.56 L1613.93 688.56 L1614.49 688.56 L1615.05 688.56 L1615.61 688.56 L1616.17 688.56 L1616.73 688.56 L1617.29 688.56 L1617.84 688.56 L1618.4 688.56 L1618.96 688.56 L1619.52 688.56 L1620.08 688.56 L1620.64 688.56 L1621.2 688.56 L1621.76 688.56 L1622.32 688.56 L1622.88 688.56 L1623.44 688.56 L1624 688.56 L1624.56 688.56 L1625.11 688.56 L1625.67 688.56 L1626.23 688.56 L1626.79 688.56 L1627.35 688.56 L1627.91 688.56 L1628.47 688.56 L1629.03 688.56 L1629.59 688.56 L1630.15 688.56 L1630.71 688.56 L1631.27 688.56 L1631.83 688.56 L1632.39 688.56 L1632.94 688.56 L1633.5 688.56 L1634.06 688.56 L1634.62 688.56 L1635.18 688.56 L1635.74 688.56 L1636.3 688.56 L1636.86 688.56 L1637.42 688.56 L1637.98 688.56 L1638.54 688.56 L1639.1 688.56 L1639.66 688.56 L1640.21 688.56 L1640.77 688.56 L1641.33 688.56 L1641.89 688.56 L1642.45 688.56 L1643.01 688.56 L1643.57 688.56 L1644.13 688.56 L1644.69 688.56 L1645.25 688.56 L1645.81 688.56 L1646.37 688.56 L1646.93 688.56 L1647.48 688.56 L1648.04 688.56 L1648.6 688.56 L1649.16 688.56 L1649.72 688.56 L1650.28 688.56 L1650.84 688.56 L1651.4 688.56 L1651.96 688.56 L1652.52 688.56 L1653.08 688.56 L1653.64 688.56 L1654.2 688.56 L1654.76 688.56 L1655.31 688.56 L1655.87 688.56 L1656.43 688.56 L1656.99 688.56 L1657.55 688.56 L1658.11 688.56 L1658.67 688.56 L1659.23 688.56 L1659.79 688.56 L1660.35 688.56 L1660.91 688.56 L1661.47 688.56 L1662.03 688.56 L1662.58 688.56 L1663.14 688.56 L1663.7 688.56 L1664.26 688.56 L1664.82 688.56 L1665.38 688.56 L1665.94 688.56 L1666.5 688.56 L1667.06 688.56 L1667.62 688.56 L1668.18 688.56 L1668.74 688.56 L1669.3 688.56 L1669.85 688.56 L1670.41 688.56 L1670.97 688.56 L1671.53 688.56 L1672.09 688.56 L1672.65 688.56 L1673.21 688.56 L1673.77 688.56 L1674.33 688.56 L1674.89 688.56 L1675.45 688.56 L1676.01 688.56 L1676.57 688.56 L1677.13 688.56 L1677.68 688.56 L1678.24 688.56 L1678.8 688.56 L1679.36 688.56 L1679.92 688.56 L1680.48 688.56 L1681.04 688.56 L1681.6 688.56 L1682.16 688.56 L1682.72 688.56 L1683.28 688.56 L1683.84 688.56 L1684.4 688.56 L1684.95 688.56 L1685.51 688.56 L1686.07 688.56 L1686.63 688.56 L1687.19 688.56 L1687.75 688.56 L1688.31 688.56 L1688.87 688.56 L1689.43 688.56 L1689.99 688.56 L1690.55 688.56 L1691.11 688.56 L1691.67 688.56 L1692.23 688.56 L1692.78 688.56 L1693.34 688.56 L1693.9 688.56 L1694.46 688.56 L1695.02 688.56 L1695.58 688.56 L1696.14 688.56 L1696.7 688.56 L1697.26 688.56 L1697.82 688.56 L1698.38 688.56 L1698.94 688.56 L1699.5 688.56 L1700.05 688.56 L1700.61 688.56 L1701.17 688.56 L1701.73 688.56 L1702.29 688.56 L1702.85 688.56 L1703.41 688.56 L1703.97 688.56 L1704.53 688.56 L1705.09 688.56 L1705.65 688.56 L1706.21 688.56 L1706.77 688.56 L1707.32 688.56 L1707.88 688.56 L1708.44 688.56 L1709 688.56 L1709.56 688.56 L1710.12 688.56 L1710.68 688.56 L1711.24 688.56 L1711.8 688.56 L1712.36 688.56 L1712.92 688.56 L1713.48 688.56 L1714.04 688.56 L1714.6 688.56 L1715.15 688.56 L1715.71 688.56 L1716.27 688.56 L1716.83 688.56 L1717.39 688.56 L1717.95 688.56 L1718.51 688.56 L1719.07 688.56 L1719.63 688.56 L1720.19 688.56 L1720.75 688.56 L1721.31 688.56 L1721.87 688.56 L1722.42 688.56 L1722.98 688.56 L1723.54 688.56 L1724.1 688.56 L1724.66 688.56 L1725.22 688.56 L1725.78 688.56 L1726.34 688.56 L1726.9 688.56 L1727.46 688.56 L1728.02 688.56 L1728.58 688.56 L1729.14 688.56 L1729.69 688.56 L1730.25 688.56 L1730.81 688.56 L1731.37 688.56 L1731.93 688.56 L1732.49 688.56 L1733.05 688.56 L1733.61 688.56 L1734.17 688.56 L1734.73 688.56 L1735.29 688.56 L1735.85 688.56 L1736.41 688.56 L1736.97 688.56 L1737.52 688.56 L1738.08 688.56 L1738.64 688.56 L1739.2 688.56 L1739.76 688.56 L1740.32 688.56 L1740.88 688.56 L1741.44 688.56 L1742 688.56 L1742.56 688.56 L1743.12 688.56 L1743.68 688.56 L1744.24 688.56 L1744.79 688.56 L1745.35 688.56 L1745.91 688.56 L1746.47 688.56 L1747.03 688.56 L1747.59 688.56 L1748.15 688.56 L1748.71 688.56 L1749.27 688.56 L1749.83 688.56 L1750.39 688.56 L1750.95 688.56 L1751.51 688.56 L1752.06 688.56 L1752.62 688.56 L1753.18 688.56 L1753.74 688.56 L1754.3 688.56 L1754.86 688.56 L1755.42 688.56 L1755.98 688.56 L1756.54 688.56 L1757.1 688.56 L1757.66 688.56 L1758.22 688.56 L1758.78 688.56 L1759.34 688.56 L1759.89 688.56 L1760.45 688.56 L1761.01 688.56 L1761.57 688.56 L1762.13 688.56 L1762.69 688.56 L1763.25 688.56 L1763.81 688.56 L1764.37 688.56 L1764.93 688.56 L1765.49 688.56 L1766.05 688.56 L1766.61 688.56 L1767.16 688.56 L1767.72 688.56 L1768.28 688.56 L1768.84 688.56 L1769.4 688.56 L1769.96 688.56 L1770.52 688.56 L1771.08 688.56 L1771.64 688.56 L1772.2 688.56 L1772.76 688.56 L1773.32 688.56 L1773.88 688.56 L1774.43 688.56 L1774.99 688.56 L1775.55 688.56 L1776.11 688.56 L1776.67 688.56 L1777.23 688.56 L1777.79 688.56 L1778.35 688.56 L1778.91 688.56 L1779.47 688.56 L1780.03 688.56 L1780.59 688.56 L1781.15 688.56 L1781.71 688.56 L1782.26 688.56 L1782.82 688.56 L1783.38 688.56 L1783.94 688.56 L1784.5 688.56 L1785.06 688.56 L1785.62 688.56 L1786.18 688.56 L1786.74 688.56 L1787.3 688.56 L1787.86 688.56 L1788.42 688.56 L1788.98 688.56 L1789.53 688.56 L1790.09 688.56 L1790.65 688.56 L1791.21 688.56 L1791.77 688.56 L1792.33 688.56 L1792.89 688.56 L1793.45 688.56 L1794.01 688.56 L1794.57 688.56 L1795.13 688.56 L1795.69 688.56 L1796.25 688.56 L1796.8 688.56 L1797.36 688.56 L1797.92 688.56 L1798.48 688.56 L1799.04 688.56 L1799.6 688.56 L1800.16 688.56 L1800.72 688.56 L1801.28 688.56 L1801.84 688.56 L1802.4 688.56 L1802.96 688.56 L1803.52 688.56 L1804.08 688.56 L1804.63 688.56 L1805.19 688.56 L1805.75 688.56 L1806.31 688.56 L1806.87 688.56 L1807.43 688.56 L1807.99 688.56 L1808.55 688.56 L1809.11 688.56 L1809.67 688.56 L1810.23 688.56 L1810.79 688.56 L1811.35 688.56 L1811.9 688.56 L1812.46 688.56 L1813.02 688.56 L1813.58 688.56 L1814.14 688.56 L1814.7 688.56 L1815.26 688.56 L1815.82 688.56 L1816.38 688.56 L1816.94 688.56 L1817.5 688.56 L1818.06 688.56 L1818.62 688.56 L1819.18 688.56 L1819.73 688.56 L1820.29 688.56 L1820.85 688.56 L1821.41 688.56 L1821.97 688.56 L1822.53 688.56 L1823.09 688.56 L1823.65 688.56 L1824.21 688.56 L1824.77 688.56 L1825.33 688.56 L1825.89 688.56 L1826.45 688.56 L1827 688.56 L1827.56 688.56 L1828.12 688.56 L1828.68 688.56 L1829.24 688.56 L1829.8 688.56 L1830.36 688.56 L1830.92 688.56 L1831.48 688.56 L1832.04 688.56 L1832.6 688.56 L1833.16 688.56 L1833.72 688.56 L1834.27 688.56 L1834.83 688.56 L1835.39 688.56 L1835.95 688.56 L1836.51 688.56 L1837.07 688.56 L1837.63 688.56 L1838.19 688.56 L1838.19 681.888 L1837.63 681.888 L1837.07 681.888 L1836.51 681.888 L1835.95 681.888 L1835.39 681.888 L1834.83 681.888 L1834.27 681.888 L1833.72 681.888 L1833.16 681.888 L1832.6 681.888 L1832.04 681.888 L1831.48 681.888 L1830.92 681.888 L1830.36 681.888 L1829.8 681.888 L1829.24 681.888 L1828.68 681.888 L1828.12 681.888 L1827.56 681.888 L1827 681.888 L1826.45 681.888 L1825.89 681.888 L1825.33 681.888 L1824.77 681.888 L1824.21 681.888 L1823.65 681.888 L1823.09 681.888 L1822.53 681.888 L1821.97 681.888 L1821.41 681.888 L1820.85 681.888 L1820.29 681.888 L1819.73 681.888 L1819.18 681.888 L1818.62 681.888 L1818.06 681.888 L1817.5 681.888 L1816.94 681.888 L1816.38 681.888 L1815.82 681.888 L1815.26 681.888 L1814.7 681.888 L1814.14 681.888 L1813.58 681.888 L1813.02 681.888 L1812.46 681.888 L1811.9 681.888 L1811.35 681.888 L1810.79 681.888 L1810.23 681.888 L1809.67 681.888 L1809.11 681.888 L1808.55 681.888 L1807.99 681.888 L1807.43 681.888 L1806.87 681.888 L1806.31 681.888 L1805.75 681.888 L1805.19 681.888 L1804.63 681.888 L1804.08 681.888 L1803.52 681.888 L1802.96 681.888 L1802.4 681.888 L1801.84 681.888 L1801.28 681.888 L1800.72 681.888 L1800.16 681.888 L1799.6 681.888 L1799.04 681.888 L1798.48 681.888 L1797.92 681.888 L1797.36 681.888 L1796.8 681.888 L1796.25 681.888 L1795.69 681.888 L1795.13 681.888 L1794.57 681.888 L1794.01 681.888 L1793.45 681.888 L1792.89 681.888 L1792.33 681.888 L1791.77 681.888 L1791.21 681.888 L1790.65 681.888 L1790.09 681.888 L1789.53 681.888 L1788.98 681.888 L1788.42 681.888 L1787.86 681.888 L1787.3 681.888 L1786.74 681.888 L1786.18 681.888 L1785.62 681.888 L1785.06 681.888 L1784.5 681.888 L1783.94 681.888 L1783.38 681.888 L1782.82 681.888 L1782.26 681.888 L1781.71 681.888 L1781.15 681.888 L1780.59 681.888 L1780.03 681.888 L1779.47 681.888 L1778.91 681.888 L1778.35 681.888 L1777.79 681.888 L1777.23 681.888 L1776.67 681.888 L1776.11 681.888 L1775.55 681.888 L1774.99 681.888 L1774.43 681.888 L1773.88 681.888 L1773.32 681.888 L1772.76 681.888 L1772.2 681.888 L1771.64 681.888 L1771.08 681.888 L1770.52 681.888 L1769.96 681.888 L1769.4 681.888 L1768.84 681.888 L1768.28 681.888 L1767.72 681.888 L1767.16 681.888 L1766.61 681.888 L1766.05 681.888 L1765.49 681.888 L1764.93 681.888 L1764.37 681.888 L1763.81 681.888 L1763.25 681.888 L1762.69 681.888 L1762.13 681.888 L1761.57 681.888 L1761.01 681.888 L1760.45 681.888 L1759.89 681.888 L1759.34 681.888 L1758.78 681.888 L1758.22 681.888 L1757.66 681.888 L1757.1 681.888 L1756.54 681.888 L1755.98 681.888 L1755.42 681.888 L1754.86 681.888 L1754.3 681.888 L1753.74 681.888 L1753.18 681.888 L1752.62 681.888 L1752.06 681.888 L1751.51 681.888 L1750.95 681.888 L1750.39 681.888 L1749.83 681.888 L1749.27 681.888 L1748.71 681.888 L1748.15 681.888 L1747.59 681.888 L1747.03 681.888 L1746.47 681.888 L1745.91 681.888 L1745.35 681.888 L1744.79 681.888 L1744.24 681.888 L1743.68 681.888 L1743.12 681.888 L1742.56 681.888 L1742 681.888 L1741.44 681.888 L1740.88 681.888 L1740.32 681.888 L1739.76 681.888 L1739.2 681.888 L1738.64 681.888 L1738.08 681.888 L1737.52 681.888 L1736.97 681.888 L1736.41 681.888 L1735.85 681.888 L1735.29 681.888 L1734.73 681.888 L1734.17 681.888 L1733.61 681.888 L1733.05 681.888 L1732.49 681.888 L1731.93 681.888 L1731.37 681.888 L1730.81 681.888 L1730.25 681.888 L1729.69 681.888 L1729.14 681.888 L1728.58 681.888 L1728.02 681.888 L1727.46 681.888 L1726.9 681.888 L1726.34 681.888 L1725.78 681.888 L1725.22 681.888 L1724.66 681.888 L1724.1 681.888 L1723.54 681.888 L1722.98 681.888 L1722.42 681.888 L1721.87 681.888 L1721.31 681.888 L1720.75 681.888 L1720.19 681.888 L1719.63 681.888 L1719.07 681.888 L1718.51 681.888 L1717.95 681.888 L1717.39 681.888 L1716.83 681.888 L1716.27 681.888 L1715.71 681.888 L1715.15 681.888 L1714.6 681.888 L1714.04 681.888 L1713.48 681.888 L1712.92 681.888 L1712.36 681.888 L1711.8 681.888 L1711.24 681.888 L1710.68 681.888 L1710.12 681.888 L1709.56 681.888 L1709 681.888 L1708.44 681.888 L1707.88 681.888 L1707.32 681.888 L1706.77 681.888 L1706.21 681.888 L1705.65 681.888 L1705.09 681.888 L1704.53 681.888 L1703.97 681.888 L1703.41 681.888 L1702.85 681.888 L1702.29 681.888 L1701.73 681.888 L1701.17 681.888 L1700.61 681.888 L1700.05 681.888 L1699.5 681.888 L1698.94 681.888 L1698.38 681.888 L1697.82 681.888 L1697.26 681.888 L1696.7 681.888 L1696.14 681.888 L1695.58 681.888 L1695.02 681.888 L1694.46 681.888 L1693.9 681.888 L1693.34 681.888 L1692.78 681.888 L1692.23 681.888 L1691.67 681.888 L1691.11 681.888 L1690.55 681.888 L1689.99 681.888 L1689.43 681.888 L1688.87 681.888 L1688.31 681.888 L1687.75 681.888 L1687.19 681.888 L1686.63 681.888 L1686.07 681.888 L1685.51 681.888 L1684.95 681.888 L1684.4 681.888 L1683.84 681.888 L1683.28 681.888 L1682.72 681.888 L1682.16 681.888 L1681.6 681.888 L1681.04 681.888 L1680.48 681.888 L1679.92 681.888 L1679.36 681.888 L1678.8 681.888 L1678.24 681.888 L1677.68 681.888 L1677.13 681.888 L1676.57 681.888 L1676.01 681.888 L1675.45 681.888 L1674.89 681.888 L1674.33 681.888 L1673.77 681.888 L1673.21 681.888 L1672.65 681.888 L1672.09 681.888 L1671.53 681.888 L1670.97 681.888 L1670.41 681.888 L1669.85 681.888 L1669.3 681.888 L1668.74 681.888 L1668.18 681.888 L1667.62 681.888 L1667.06 681.888 L1666.5 681.888 L1665.94 681.888 L1665.38 681.888 L1664.82 681.888 L1664.26 681.888 L1663.7 681.888 L1663.14 681.888 L1662.58 681.888 L1662.03 681.888 L1661.47 681.888 L1660.91 681.888 L1660.35 681.888 L1659.79 681.888 L1659.23 681.888 L1658.67 681.888 L1658.11 681.888 L1657.55 681.888 L1656.99 681.888 L1656.43 681.888 L1655.87 681.888 L1655.31 681.888 L1654.76 681.888 L1654.2 681.888 L1653.64 681.888 L1653.08 681.888 L1652.52 681.888 L1651.96 681.888 L1651.4 681.888 L1650.84 681.888 L1650.28 681.888 L1649.72 681.888 L1649.16 681.888 L1648.6 681.888 L1648.04 681.888 L1647.48 681.888 L1646.93 681.888 L1646.37 681.888 L1645.81 681.888 L1645.25 681.888 L1644.69 681.888 L1644.13 681.888 L1643.57 681.888 L1643.01 681.888 L1642.45 681.888 L1641.89 681.888 L1641.33 681.888 L1640.77 681.888 L1640.21 681.888 L1639.66 681.888 L1639.1 681.888 L1638.54 681.888 L1637.98 681.888 L1637.42 681.888 L1636.86 681.888 L1636.3 681.888 L1635.74 681.888 L1635.18 681.888 L1634.62 681.888 L1634.06 681.888 L1633.5 681.888 L1632.94 681.888 L1632.39 681.888 L1631.83 681.888 L1631.27 681.888 L1630.71 681.888 L1630.15 681.888 L1629.59 681.888 L1629.03 681.888 L1628.47 681.888 L1627.91 681.888 L1627.35 681.888 L1626.79 681.888 L1626.23 681.888 L1625.67 681.888 L1625.11 681.888 L1624.56 681.888 L1624 681.888 L1623.44 681.888 L1622.88 681.888 L1622.32 681.888 L1621.76 681.888 L1621.2 681.888 L1620.64 681.888 L1620.08 681.888 L1619.52 681.888 L1618.96 681.888 L1618.4 681.888 L1617.84 681.888 L1617.29 681.888 L1616.73 681.888 L1616.17 681.888 L1615.61 681.888 L1615.05 681.888 L1614.49 681.888 L1613.93 681.888 L1613.37 681.888 L1612.81 681.888 L1612.25 681.888 L1611.69 681.888 L1611.13 681.888 L1610.57 681.888 L1610.02 681.888 L1609.46 681.888 L1608.9 681.888 L1608.34 681.888 L1607.78 681.888 L1607.22 681.888 L1606.66 681.888 L1606.1 681.888 L1605.54 681.888 L1604.98 681.888 L1604.42 681.888 L1603.86 681.888 L1603.3 681.888 L1602.74 681.888 L1602.19 681.888 L1601.63 681.888 L1601.07 681.888 L1600.51 681.888 L1599.95 681.888 L1599.39 681.888 L1598.83 681.888 L1598.27 681.888 L1597.71 681.888 L1597.15 681.888 L1596.59 681.888 L1596.03 681.888 L1595.47 681.888 L1594.92 681.888 L1594.36 681.888 L1593.8 681.888 L1593.24 681.888 L1592.68 681.888 L1592.12 681.888 L1591.56 681.888 L1591 681.888 L1590.44 681.888 L1589.88 681.888 L1589.32 681.888 L1588.76 681.888 L1588.2 681.888 L1587.65 681.888 L1587.09 681.888 L1586.53 681.888 L1585.97 681.888 L1585.41 681.888 L1584.85 681.888 L1584.29 681.888 L1583.73 681.888 L1583.17 681.888 L1582.61 681.888 L1582.05 681.888 L1581.49 681.888 L1580.93 681.888 L1580.37 681.888 L1579.82 681.888 L1579.26 681.888 L1578.7 681.888 L1578.14 681.888 L1577.58 681.888 L1577.02 681.888 L1576.46 681.888 L1575.9 681.888 L1575.34 681.888 L1574.78 681.888 L1574.22 681.888 L1573.66 681.888 L1573.1 681.888 L1572.55 681.888 L1571.99 681.888 L1571.43 681.888 L1570.87 681.888 L1570.31 681.888 L1569.75 681.888 L1569.19 681.888 L1568.63 681.888 L1568.07 681.888 L1567.51 681.888 L1566.95 681.888 L1566.39 681.888 L1565.83 681.888 L1565.28 681.888 L1564.72 681.888 L1564.16 681.888 L1563.6 681.888 L1563.04 681.888 L1562.48 681.888 L1561.92 681.888 L1561.36 681.888 L1560.8 681.888 L1560.24 681.888 L1559.68 681.888 L1559.12 681.888 L1558.56 681.888 L1558 681.888 L1557.45 681.888 L1556.89 681.888 L1556.33 681.888 L1555.77 681.888 L1555.21 681.888 L1554.65 681.888 L1554.09 681.888 L1553.53 681.888 L1552.97 681.888 L1552.41 681.888 L1551.85 681.888 L1551.29 681.888 L1550.73 681.888 L1550.18 681.888 L1549.62 681.888 L1549.06 681.888 L1548.5 681.888 L1547.94 681.888 L1547.38 681.888 L1546.82 681.888 L1546.26 681.888 L1545.7 681.888 L1545.14 681.888 L1544.58 681.888 L1544.02 681.888 L1543.46 681.888 L1542.9 681.888 L1542.35 681.888 L1541.79 681.888 L1541.23 681.888 L1540.67 681.888 L1540.11 681.888 L1539.55 681.888 L1538.99 681.888 L1538.43 681.888 L1537.87 681.888 L1537.31 681.888 L1536.75 681.888 L1536.19 681.888 L1535.63 681.888 L1535.08 681.888 L1534.52 681.888 L1533.96 681.888 L1533.4 681.888 L1532.84 681.888 L1532.28 681.888 L1531.72 681.888 L1531.16 681.888 L1530.6 681.888 L1530.04 681.888 L1529.48 681.888 L1528.92 681.888 L1528.36 681.888 L1527.81 681.888 L1527.25 681.888 L1526.69 681.888 L1526.13 681.888 L1525.57 681.888 L1525.01 681.888 L1524.45 681.888 L1523.89 681.888 L1523.33 681.888 L1522.77 681.888 L1522.21 681.888 L1521.65 681.888 L1521.09 681.888 L1520.53 681.888 L1519.98 681.888 L1519.42 681.888 L1518.86 681.888 L1518.3 681.888 L1517.74 681.888 L1517.18 681.888 L1516.62 681.888 L1516.06 681.888 L1515.5 681.888 L1514.94 681.888 L1514.38 681.888 L1513.82 681.888 L1513.26 681.888 L1512.71 681.888 L1512.15 681.888 L1511.59 681.888 L1511.03 681.888 L1510.47 681.888 L1509.91 681.888 L1509.35 681.888 L1508.79 681.888 L1508.23 681.888 L1507.67 681.888 L1507.11 681.888 L1506.55 681.888 L1505.99 681.888 L1505.44 681.888 L1504.88 681.888 L1504.32 681.888 L1503.76 681.888 L1503.2 681.888 L1502.64 681.888 L1502.08 681.888 L1501.52 681.888 L1500.96 681.888 L1500.4 681.888 L1499.84 681.888 L1499.28 681.888 L1498.72 681.888 L1498.16 681.888 L1497.61 681.888 L1497.05 681.888 L1496.49 681.888 L1495.93 681.888 L1495.37 681.888 L1494.81 681.888 L1494.25 681.888 L1493.69 681.888 L1493.13 681.888 L1492.57 681.888 L1492.01 681.888 L1491.45 681.888 L1490.89 681.888 L1490.34 681.888 L1489.78 681.888 L1489.22 681.888 L1488.66 681.888 L1488.1 681.888 L1487.54 681.888 L1486.98 681.888 L1486.42 681.888 L1485.86 681.888 L1485.3 681.888 L1484.74 681.888 L1484.18 681.888 L1483.62 681.888 L1483.07 681.888 L1482.51 681.888 L1481.95 681.888 L1481.39 681.888 L1480.83 681.888 L1480.27 681.888 L1479.71 681.888 L1479.15 681.888 L1478.59 681.888 L1478.03 681.888 L1477.47 681.888 L1476.91 681.888 L1476.35 681.888 L1475.79 681.888 L1475.24 681.888 L1474.68 681.888 L1474.12 681.888 L1473.56 681.888 L1473 681.888 L1472.44 681.888 L1471.88 681.888 L1471.32 681.888 L1470.76 681.888 L1470.2 681.888 L1469.64 681.888 L1469.08 681.888 L1468.52 681.888 L1467.97 681.888 L1467.41 681.888 L1466.85 681.888 L1466.29 681.888 L1465.73 681.888 L1465.17 681.888 L1464.61 681.888 L1464.05 681.888 L1463.49 681.888 L1462.93 681.888 L1462.37 681.888 L1461.81 681.888 L1461.25 681.888 L1460.7 681.888 L1460.14 681.888 L1459.58 681.888 L1459.02 681.888 L1458.46 681.888 L1457.9 681.888 L1457.34 681.888 L1456.78 681.888 L1456.22 681.888 L1455.66 681.888 L1455.1 681.888 L1454.54 681.888 L1453.98 681.888 L1453.42 681.888 L1452.87 681.888 L1452.31 681.888 L1451.75 681.888 L1451.19 681.888 L1450.63 681.888 L1450.07 681.888 L1449.51 681.888 L1448.95 681.888 L1448.39 681.888 L1447.83 681.888 L1447.27 681.888 L1446.71 681.888 L1446.15 681.888 L1445.6 681.888 L1445.04 681.888 L1444.48 681.888 L1443.92 681.888 L1443.36 681.888 L1442.8 681.888 L1442.24 681.888 L1441.68 681.888 L1441.12 681.888 L1440.56 681.888 L1440 681.888 L1439.44 681.888 L1438.88 681.888 L1438.33 681.888 L1437.77 681.888 L1437.21 681.888 L1436.65 681.888 L1436.09 681.888 L1435.53 681.888 L1434.97 681.888 L1434.41 681.888 L1433.85 681.888 L1433.29 681.888 L1432.73 681.888 L1432.17 681.888 L1431.61 681.888 L1431.05 681.888 L1430.5 681.888 L1429.94 681.888 L1429.38 681.888 L1428.82 681.888 L1428.26 681.888 L1427.7 681.888 L1427.14 681.888 L1426.58 681.888 L1426.02 681.888 L1425.46 681.888 L1424.9 681.888 L1424.34 681.888 L1423.78 681.888 L1423.23 681.888 L1422.67 681.888 L1422.11 681.888 L1421.55 681.888 L1420.99 681.888 L1420.43 681.888 L1419.87 681.888 L1419.31 681.888 L1418.75 681.888 L1418.19 681.888 L1417.63 681.888 L1417.07 681.888 L1416.51 681.888 L1415.95 681.888 L1415.4 681.888 L1414.84 681.888 L1414.28 681.888 L1413.72 681.888 L1413.16 681.888 L1412.6 681.888 L1412.04 681.888 L1411.48 681.888 L1410.92 681.888 L1410.36 681.888 L1409.8 681.888 L1409.24 681.888 L1408.68 681.888 L1408.13 681.888 L1407.57 681.888 L1407.01 681.888 L1406.45 681.888 L1405.89 681.888 L1405.33 681.888 L1404.77 681.888 L1404.21 681.888 L1403.65 681.888 L1403.09 681.888 L1402.53 681.888 L1401.97 681.888 L1401.41 681.888 L1400.86 681.888 L1400.3 681.888 L1399.74 681.888 L1399.18 681.888 L1398.62 681.888 L1398.06 681.888 L1397.5 681.888 L1396.94 681.888 L1396.38 681.888 L1395.82 681.888 L1395.26 681.888 L1394.7 681.888 L1394.14 681.888 L1393.58 681.888 L1393.03 681.888 L1392.47 681.888 L1391.91 681.888 L1391.35 681.888 L1390.79 681.888 L1390.23 681.888 L1389.67 681.888 L1389.11 681.888 L1388.55 681.888 L1387.99 681.888 L1387.43 681.888 L1386.87 681.888 L1386.31 681.888 L1385.76 681.888 L1385.2 681.888 L1384.64 681.888 L1384.08 681.888 L1383.52 681.888 L1382.96 681.888 L1382.4 681.888 L1381.84 681.888 L1381.28 681.888 L1380.72 681.888 L1380.16 681.888 L1379.6 681.888 L1379.04 681.888 L1378.49 681.888 L1377.93 681.888 L1377.37 681.888 L1376.81 681.888 L1376.25 681.888 L1375.69 681.888 L1375.13 681.888 L1374.57 681.888 L1374.01 681.888 L1373.45 681.888 L1372.89 681.888 L1372.33 681.888 L1371.77 681.888 L1371.21 681.888 L1370.66 681.888 L1370.1 681.888 L1369.54 681.888 L1368.98 681.888 L1368.42 681.888 L1367.86 681.888 L1367.3 681.888 L1366.74 681.888 L1366.18 681.888 L1365.62 681.888 L1365.06 681.888 L1364.5 681.888 L1363.94 681.888 L1363.39 681.888 L1362.83 681.888 L1362.27 681.888 L1361.71 681.888 L1361.15 681.888 L1360.59 681.888 L1360.03 681.888 L1359.47 681.888 L1358.91 681.888 L1358.35 681.888 L1357.79 681.888 L1357.23 681.888 L1356.67 681.888 L1356.12 681.888 L1355.56 681.888 L1355 681.888 L1354.44 681.888 L1353.88 681.888 L1353.32 681.888 L1352.76 681.888 L1352.2 681.888 L1351.64 681.888 L1351.08 681.888 L1350.52 681.888 L1349.96 681.888 L1349.4 681.888 L1348.84 681.888 L1348.29 681.888 L1347.73 681.888 L1347.17 681.888 L1346.61 681.888 L1346.05 681.888 L1345.49 681.888 L1344.93 681.888 L1344.37 681.888 L1343.81 681.888 L1343.25 681.888 L1342.69 681.888 L1342.13 681.888 L1341.57 681.888 L1341.02 681.888 L1340.46 681.888 L1339.9 681.888 L1339.34 681.888 L1338.78 681.888 L1338.22 681.888 L1337.66 681.888 L1337.1 681.888 L1336.54 681.888 L1335.98 681.888 L1335.42 681.888 L1334.86 681.888 L1334.3 681.888 L1333.75 681.888 L1333.19 681.888 L1332.63 681.888 L1332.07 681.888 L1331.51 681.888 L1330.95 681.888 L1330.39 681.888 L1329.83 681.888 L1329.27 681.888 L1328.71 681.888 L1328.15 681.888 L1327.59 681.888 L1327.03 681.888 L1326.47 681.888 L1325.92 681.888 L1325.36 681.888 L1324.8 681.888 L1324.24 681.888 L1323.68 681.888 L1323.12 681.888 L1322.56 681.888 L1322 681.888 L1321.44 681.888 L1320.88 681.888 L1320.32 681.888 L1319.76 681.888 L1319.2 681.888 L1318.65 681.888 L1318.09 681.888 L1317.53 681.888 L1316.97 681.888 L1316.41 681.888 L1315.85 681.888 L1315.29 681.888 L1314.73 681.888 L1314.17 681.888 L1313.61 681.888 L1313.05 681.888 L1312.49 681.888 L1311.93 681.888 L1311.38 681.888 L1310.82 681.888 L1310.26 681.888 L1309.7 681.888 L1309.14 681.888 L1308.58 681.888 L1308.02 681.888 L1307.46 681.888 L1306.9 681.888 L1306.34 681.888 L1305.78 681.888 L1305.22 681.888 L1304.66 681.888 L1304.1 681.888 L1303.55 681.888 L1302.99 681.888 L1302.43 681.888 L1301.87 681.888 L1301.31 681.888 L1300.75 681.888 L1300.19 681.888 L1299.63 681.888 L1299.07 681.888 L1298.51 681.888 L1297.95 681.888 L1297.39 681.888 L1296.83 681.888 L1296.28 681.888 L1295.72 681.888 L1295.16 681.888 L1294.6 681.888 L1294.04 681.888 L1293.48 681.888 L1292.92 681.888 L1292.36 681.888 L1291.8 681.888 L1291.24 681.888 L1290.68 681.888 L1290.12 681.888 L1289.56 681.888 L1289 681.888 L1288.45 681.888 L1287.89 681.888 L1287.33 681.888 L1286.77 681.888 L1286.21 681.888 L1285.65 681.888 L1285.09 681.888 L1284.53 681.888 L1283.97 681.888 L1283.41 681.888 L1282.85 681.888 L1282.29 681.888 L1281.73 681.888 L1281.18 681.888 L1280.62 681.888 L1280.06 681.888 L1279.5 681.888 L1278.94 681.888 L1278.38 681.888 L1277.82 681.888 L1277.26 681.888 L1276.7 681.888 L1276.14 681.888 L1275.58 681.888 L1275.02 681.888 L1274.46 681.888 L1273.91 681.888 L1273.35 681.888 L1272.79 681.888 L1272.23 681.888 L1271.67 681.888 L1271.11 681.888 L1270.55 681.888 L1269.99 681.888 L1269.43 681.888 L1268.87 681.888 L1268.31 681.888 L1267.75 681.888 L1267.19 681.888 L1266.63 681.888 L1266.08 681.888 L1265.52 681.888 L1264.96 681.888 L1264.4 681.888 L1263.84 681.888 L1263.28 681.888 L1262.72 681.888 L1262.16 681.888 L1261.6 681.888 L1261.04 681.888 L1260.48 681.888 L1259.92 681.888 L1259.36 681.888 L1258.81 681.888 L1258.25 681.888 L1257.69 681.888 L1257.13 681.888 L1256.57 681.888 L1256.01 681.888 L1255.45 681.888 L1254.89 681.888 L1254.33 681.888 L1253.77 681.888 L1253.21 681.888 L1252.65 681.888 L1252.09 681.888 L1251.54 681.888 L1250.98 681.888 L1250.42 681.888 L1249.86 681.888 L1249.3 681.888 L1248.74 681.888 L1248.18 681.888 L1247.62 681.888 L1247.06 681.888 L1246.5 681.888 L1245.94 681.888 L1245.38 681.888 L1244.82 681.888 L1244.26 681.888 L1243.71 681.888 L1243.15 681.888 L1242.59 681.888 L1242.03 681.888 L1241.47 681.888 L1240.91 681.888 L1240.35 681.888 L1239.79 681.888 L1239.23 681.888 L1238.67 681.888 L1238.11 681.888 L1237.55 681.888 L1236.99 681.888 L1236.44 681.888 L1235.88 681.888 L1235.32 681.888 L1234.76 681.888 L1234.2 681.888 L1233.64 681.888 L1233.08 681.888 L1232.52 681.888 L1231.96 681.888 L1231.4 681.888 L1230.84 681.888 L1230.28 681.888 L1229.72 681.888 L1229.17 681.888 L1228.61 681.888 L1228.05 681.888 L1227.49 681.888 L1226.93 681.888 L1226.37 681.888 L1225.81 681.888 L1225.25 681.888 L1224.69 681.888 L1224.13 681.888 L1223.57 681.888 L1223.01 681.888 L1222.45 681.888 L1221.89 681.888 L1221.34 681.888 L1220.78 681.888 L1220.22 681.888 L1219.66 681.888 L1219.1 681.888 L1218.54 681.888 L1217.98 681.888 L1217.42 681.888 L1216.86 681.888 L1216.3 681.888 L1215.74 681.888 L1215.18 681.888 L1214.62 681.888 L1214.07 681.888 L1213.51 681.888 L1212.95 681.888 L1212.39 681.888 L1211.83 681.888 L1211.27 681.888 L1210.71 681.888 L1210.15 681.888 L1209.59 681.888 L1209.03 681.888 L1208.47 681.888 L1207.91 681.888 L1207.35 681.888 L1206.8 681.888 L1206.24 681.888 L1205.68 681.888 L1205.12 681.888 L1204.56 681.888 L1204 681.888 L1203.44 681.888 L1202.88 681.888 L1202.32 681.888 L1201.76 681.888 L1201.2 681.888 L1200.64 681.888 L1200.08 681.888 L1199.52 681.888 L1198.97 681.888 L1198.41 681.888 L1197.85 681.888 L1197.29 681.888 L1196.73 681.888 L1196.17 681.888 L1195.61 681.888 L1195.05 681.888 L1194.49 681.888 L1193.93 681.888 L1193.37 681.888 L1192.81 681.888 L1192.25 681.888 L1191.7 681.888 L1191.14 681.888 L1190.58 681.888 L1190.02 681.888 L1189.46 681.888 L1188.9 681.888 L1188.34 681.888 L1187.78 681.888 L1187.22 681.888 L1186.66 681.888 L1186.1 681.888 L1185.54 681.888 L1184.98 681.888 L1184.43 681.888 L1183.87 681.888 L1183.31 681.888 L1182.75 681.888 L1182.19 681.888 L1181.63 681.888 L1181.07 681.888 L1180.51 681.888 L1179.95 681.888 L1179.39 681.888 L1178.83 681.888 L1178.27 681.888 L1177.71 681.888 L1177.15 681.888 L1176.6 681.888 L1176.04 681.888 L1175.48 681.888 L1174.92 681.888 L1174.36 681.888 L1173.8 681.888 L1173.24 681.888 L1172.68 681.888 L1172.12 681.888 L1171.56 681.888 L1171 681.888 L1170.44 681.888 L1169.88 681.888 L1169.33 681.888 L1168.77 681.888 L1168.21 681.888 L1167.65 681.888 L1167.09 681.888 L1166.53 681.888 L1165.97 681.888 L1165.41 681.888 L1164.85 681.888 L1164.29 681.888 L1163.73 681.888 L1163.17 681.888 L1162.61 681.888 L1162.05 681.888 L1161.5 681.888 L1160.94 681.888 L1160.38 681.888 L1159.82 681.888 L1159.26 681.888 L1158.7 681.888 L1158.14 681.888 L1157.58 681.888 L1157.02 681.888 L1156.46 681.888 L1155.9 681.888 L1155.34 681.888 L1154.78 681.888 L1154.23 681.888 L1153.67 681.888 L1153.11 681.888 L1152.55 681.888 L1151.99 681.888 L1151.43 681.888 L1150.87 681.888 L1150.31 681.888 L1149.75 681.888 L1149.19 681.888 L1148.63 681.888 L1148.07 681.888 L1147.51 681.888 L1146.96 681.888 L1146.4 681.888 L1145.84 681.888 L1145.28 681.888 L1144.72 681.888 L1144.16 681.888 L1143.6 681.888 L1143.04 681.888 L1142.48 681.888 L1141.92 681.888 L1141.36 681.888 L1140.8 681.888 L1140.24 681.888 L1139.68 681.888 L1139.13 681.888 L1138.57 681.888 L1138.01 681.888 L1137.45 681.888 L1136.89 681.888 L1136.33 681.888 L1135.77 681.888 L1135.21 681.888 L1134.65 681.888 L1134.09 681.888 L1133.53 681.888 L1132.97 681.888 L1132.41 681.888 L1131.86 681.888 L1131.3 681.888 L1130.74 681.888 L1130.18 681.888 L1129.62 681.888 L1129.06 681.888 L1128.5 681.888 L1127.94 681.888 L1127.38 681.888 L1126.82 681.888 L1126.26 681.888 L1125.7 681.888 L1125.14 681.888 L1124.59 681.888 L1124.03 681.888 L1123.47 681.888 L1122.91 681.888 L1122.35 681.888 L1121.79 681.888 L1121.23 681.888 L1120.67 681.888 L1120.11 681.888 L1119.55 681.888 L1118.99 681.888 L1118.43 681.888 L1117.87 681.888 L1117.31 681.888 L1116.76 681.888 L1116.2 681.888 L1115.64 681.888 L1115.08 681.888 L1114.52 681.888 L1113.96 681.888 L1113.4 681.888 L1112.84 681.888 L1112.28 681.888 L1111.72 681.888 L1111.16 681.888 L1110.6 681.888 L1110.04 681.888 L1109.49 681.888 L1108.93 681.888 L1108.37 681.888 L1107.81 681.888 L1107.25 681.888 L1106.69 681.888 L1106.13 681.888 L1105.57 681.888 L1105.01 681.888 L1104.45 681.888 L1103.89 681.888 L1103.33 681.888 L1102.77 681.888 L1102.22 681.888 L1101.66 681.888 L1101.1 681.888 L1100.54 681.888 L1099.98 681.888 L1099.42 681.888 L1098.86 681.888 L1098.3 681.888 L1097.74 681.888 L1097.18 681.888 L1096.62 681.888 L1096.06 681.888 L1095.5 681.888 L1094.94 681.888 L1094.39 681.888 L1093.83 681.888 L1093.27 681.888 L1092.71 681.888 L1092.15 681.888 L1091.59 681.888 L1091.03 681.888 L1090.47 681.888 L1089.91 681.888 L1089.35 681.888 L1088.79 681.888 L1088.23 681.888 L1087.67 681.888 L1087.12 681.888 L1086.56 681.888 L1086 681.888 L1085.44 681.888 L1084.88 681.888 L1084.32 681.888 L1083.76 681.888 L1083.2 681.888 L1082.64 681.888 L1082.08 681.888 L1081.52 681.888 L1080.96 681.888 L1080.4 681.888 L1079.85 681.888 L1079.29 681.888 L1078.73 681.888 L1078.17 681.888 L1077.61 681.888 L1077.05 681.888 L1076.49 681.888 L1075.93 681.888 L1075.37 681.888 L1074.81 681.888 L1074.25 681.888 L1073.69 681.888 L1073.13 681.888 L1072.57 681.888 L1072.02 681.888 L1071.46 681.888 L1070.9 681.888 L1070.34 681.888 L1069.78 681.888 L1069.22 681.888 L1068.66 681.888 L1068.1 681.888 L1067.54 681.888 L1066.98 681.888 L1066.42 681.888 L1065.86 681.888 L1065.3 681.888 L1064.75 681.888 L1064.19 681.888 L1063.63 681.888 L1063.07 681.888 L1062.51 681.888 L1061.95 681.888 L1061.39 681.888 L1060.83 681.888 L1060.27 681.888 L1059.71 681.888 L1059.15 681.888 L1058.59 681.888 L1058.03 681.888 L1057.48 681.888 L1056.92 681.888 L1056.36 681.888 L1055.8 681.888 L1055.24 681.888 L1054.68 681.888 L1054.12 681.888 L1053.56 681.888 L1053 681.888 L1052.44 681.888 L1051.88 681.888 L1051.32 681.888 L1050.76 681.888 L1050.2 681.888 L1049.65 681.888 L1049.09 681.888 L1048.53 681.888 L1047.97 681.888 L1047.41 681.888 L1046.85 681.888 L1046.29 681.888 L1045.73 681.888 L1045.17 681.888 L1044.61 681.888 L1044.05 681.888 L1043.49 681.888 L1042.93 681.888 L1042.38 681.888 L1041.82 681.888 L1041.26 681.888 L1040.7 681.888 L1040.14 681.888 L1039.58 681.888 L1039.02 681.888 L1038.46 681.888 L1037.9 681.888 L1037.34 681.888 L1036.78 681.888 L1036.22 681.888 L1035.66 681.888 L1035.1 681.888 L1034.55 681.888 L1033.99 681.888 L1033.43 681.888 L1032.87 681.888 L1032.31 681.888 L1031.75 681.888 L1031.19 681.888 L1030.63 681.888 L1030.07 681.888 L1029.51 681.888 L1028.95 681.888 L1028.39 681.888 L1027.83 681.888 L1027.28 681.888 L1026.72 681.888 L1026.16 681.888 L1025.6 681.888 L1025.04 681.888 L1024.48 681.888 L1023.92 681.888 L1023.36 681.888 L1022.8 681.888 L1022.24 681.888 L1021.68 681.888 L1021.12 681.888 L1020.56 681.888 L1020.01 681.888 L1019.45 681.888 L1018.89 681.888 L1018.33 681.888 L1017.77 681.888 L1017.21 681.888 L1016.65 681.888 L1016.09 681.888 L1015.53 681.888 L1014.97 681.888 L1014.41 681.888 L1013.85 681.888 L1013.29 681.888 L1012.73 681.888 L1012.18 681.888 L1011.62 681.888 L1011.06 681.888 L1010.5 681.888 L1009.94 681.888 L1009.38 681.888 L1008.82 681.888 L1008.26 681.888 L1007.7 681.888 L1007.14 681.888 L1006.58 681.888 L1006.02 681.888 L1005.46 681.888 L1004.91 681.888 L1004.35 681.888 L1003.79 681.888 L1003.23 681.888 L1002.67 681.888 L1002.11 681.888 L1001.55 681.888 L1000.99 681.888 L1000.43 681.888 L999.872 681.888 L999.313 681.888 L998.754 681.888 L998.194 681.888 L997.635 681.888 L997.076 681.888 L996.517 681.888 L995.957 681.888 L995.398 681.888 L994.839 681.888 L994.28 681.888 L993.72 681.888 L993.161 681.888 L992.602 681.888 L992.043 681.888 L991.483 681.888 L990.924 681.888 L990.365 681.888 L989.806 681.888 L989.246 681.888 L988.687 681.888 L988.128 681.888 L987.569 681.888 L987.009 681.888 L986.45 681.888 L985.891 681.888 L985.332 681.888 L984.772 681.888 L984.213 681.888 L983.654 681.888 L983.095 681.888 L982.535 681.888 L981.976 681.888 L981.417 681.888 L980.858 681.888 L980.298 681.888 L979.739 681.888 L979.18 681.888 L978.621 681.888 L978.061 681.888 L977.502 681.888 L976.943 681.888 L976.384 681.888 L975.824 681.888 L975.265 681.888 L974.706 681.888 L974.147 681.888 L973.587 681.888 L973.028 681.888 L972.469 681.888 L971.91 681.888 L971.35 681.888 L970.791 681.888 L970.232 681.888 L969.673 681.888 L969.113 681.888 L968.554 681.888 L967.995 681.888 L967.436 681.888 L966.876 681.888 L966.317 681.888 L965.758 681.888 L965.199 681.888 L964.639 681.888 L964.08 681.888 L963.521 681.888 L962.962 681.888 L962.402 681.888 L961.843 681.888 L961.284 681.888 L960.725 681.888 L960.165 681.888 L959.606 681.888 L959.047 681.888 L958.488 681.888 L957.928 681.888 L957.369 681.888 L956.81 681.888 L956.251 681.888 L955.691 681.888 L955.132 681.888 L954.573 681.888 L954.014 681.888 L953.454 681.888 L952.895 681.888 L952.336 681.888 L951.777 681.888 L951.217 681.888 L950.658 681.888 L950.099 681.888 L949.54 681.888 L948.98 681.888 L948.421 681.888 L947.862 681.888 L947.303 681.888 L946.743 681.888 L946.184 681.888 L945.625 681.888 L945.066 681.888 L944.506 681.888 L943.947 681.888 L943.388 681.888 L942.829 681.888 L942.269 681.888 L941.71 681.888 L941.151 681.888 L940.592 681.888 L940.032 681.888 L939.473 681.888 L938.914 681.888 L938.355 681.888 L937.795 681.888 L937.236 681.888 L936.677 681.888 L936.118 681.888 L935.558 681.888 L934.999 681.888 L934.44 681.888 L933.881 681.888 L933.321 681.888 L932.762 681.888 L932.203 681.888 L931.644 681.888 L931.084 681.888 L930.525 681.888 L929.966 681.888 L929.406 681.888 L928.847 681.888 L928.288 681.888 L927.729 681.888 L927.169 681.888 L926.61 681.888 L926.051 681.888 L925.492 681.888 L924.932 681.888 L924.373 681.888 L923.814 681.888 L923.255 681.888 L922.695 681.888 L922.136 681.888 L921.577 681.888 L921.018 681.888 L920.458 681.888 L919.899 681.888 L919.34 681.888 L918.781 681.888 L918.221 681.888 L917.662 681.888 L917.103 681.888 L916.544 681.888 L915.984 681.888 L915.425 681.888 L914.866 681.888 L914.307 681.888 L913.747 681.888 L913.188 681.888 L912.629 681.888 L912.07 681.888 L911.51 681.888 L910.951 681.888 L910.392 681.888 L909.833 681.888 L909.273 681.888 L908.714 681.888 L908.155 681.888 L907.596 681.888 L907.036 681.888 L906.477 681.888 L905.918 681.888 L905.359 681.888 L904.799 681.888 L904.24 681.888 L903.681 681.888 L903.122 681.888 L902.562 681.888 L902.003 681.888 L901.444 681.888 L900.885 681.888 L900.325 681.888 L899.766 681.888 L899.207 681.888 L898.648 681.888 L898.088 681.888 L897.529 681.888 L896.97 681.888 L896.411 681.888 L895.851 681.888 L895.292 681.888 L894.733 681.888 L894.174 681.888 L893.614 681.888 L893.055 681.888 L892.496 681.888 L891.937 681.888 L891.377 681.888 L890.818 681.888 L890.259 681.888 L889.7 681.888 L889.14 681.888 L888.581 681.888 L888.022 681.888 L887.463 681.888 L886.903 681.888 L886.344 681.888 L885.785 681.888 L885.226 681.888 L884.666 681.888 L884.107 681.888 L883.548 681.888 L882.989 681.888 L882.429 681.888 L881.87 681.888 L881.311 681.888 L880.752 681.888 L880.192 681.888 L879.633 681.888 L879.074 681.888 L878.515 681.888 L877.955 681.888 L877.396 681.888 L876.837 681.888 L876.278 681.888 L875.718 681.888 L875.159 681.888 L874.6 681.888 L874.041 681.888 L873.481 681.888 L872.922 681.888 L872.363 681.888 L871.804 681.888 L871.244 681.888 L870.685 681.888 L870.126 681.888 L869.567 681.888 L869.007 681.888 L868.448 681.888 L867.889 681.888 L867.33 681.888 L866.77 681.888 L866.211 681.888 L865.652 681.888 L865.093 681.888 L864.533 681.888 L863.974 681.888 L863.415 681.888 L862.856 681.888 L862.296 681.888 L861.737 681.888 L861.178 681.888 L860.619 681.888 L860.059 681.888 L859.5 681.888 L858.941 681.888 L858.382 681.888 L857.822 681.888 L857.263 681.888 L856.704 681.888 L856.145 681.888 L855.585 681.888 L855.026 681.888 L854.467 681.888 L853.908 681.888 L853.348 681.888 L852.789 681.888 L852.23 681.888 L851.671 681.888 L851.111 681.888 L850.552 681.888 L849.993 681.888 L849.434 681.888 L848.874 681.888 L848.315 681.888 L847.756 681.888 L847.197 681.888 L846.637 681.888 L846.078 681.888 L845.519 681.888 L844.96 681.888 L844.4 681.888 L843.841 681.888 L843.282 681.888 L842.723 681.888 L842.163 681.888 L841.604 681.888 L841.045 681.888 L840.486 681.888 L839.926 681.888 L839.367 681.888 L838.808 681.888 L838.249 681.888 L837.689 681.888 L837.13 681.888 L836.571 681.888 L836.012 681.888 L835.452 681.888 L834.893 681.888 L834.334 681.888 L833.775 681.888 L833.215 681.888 L832.656 681.888 L832.097 681.888 L831.538 681.888 L830.978 681.888 L830.419 681.888 L829.86 681.888 L829.301 681.888 L828.741 681.888 L828.182 681.888 L827.623 681.888 L827.064 681.888 L826.504 681.888 L825.945 681.888 L825.386 681.888 L824.827 681.888 L824.267 681.888 L823.708 681.888 L823.149 681.888 L822.59 681.888 L822.03 681.888 L821.471 681.888 L820.912 681.888 L820.353 681.888 L819.793 681.888 L819.234 681.888 L818.675 681.888 L818.116 681.888 L817.556 681.888 L816.997 681.888 L816.438 681.888 L815.879 681.888 L815.319 681.888 L814.76 681.888 L814.201 681.888 L813.642 681.888 L813.082 681.888 L812.523 681.888 L811.964 681.888 L811.405 681.888 L810.845 681.888 L810.286 681.888 L809.727 681.888 L809.168 681.888 L808.608 681.888 L808.049 681.888 L807.49 681.888 L806.931 681.888 L806.371 681.888 L805.812 681.888 L805.253 681.888 L804.693 681.888 L804.134 681.888 L803.575 681.888 L803.016 681.888 L802.456 681.888 L801.897 681.888 L801.338 681.888 L800.779 681.888 L800.219 681.888 L799.66 681.888 L799.101 681.888 L798.542 681.888 L797.982 681.888 L797.423 681.888 L796.864 681.888 L796.305 681.888 L795.745 681.888 L795.186 681.888 L794.627 681.888 L794.068 681.888 L793.508 681.888 L792.949 681.888 L792.39 681.888 L791.831 681.888 L791.271 681.888 L790.712 681.888 L790.153 681.888 L789.594 681.888 L789.034 681.888 L788.475 681.888 L787.916 681.888 L787.357 681.888 L786.797 681.888 L786.238 681.888 L785.679 681.888 L785.12 681.888 L784.56 681.888 L784.001 681.888 L783.442 681.888 L782.883 681.888 L782.323 681.888 L781.764 681.888 L781.205 681.888 L780.646 681.888 L780.086 681.888 L779.527 681.888 L778.968 681.888 L778.409 681.888 L777.849 681.888 L777.29 681.888 L776.731 681.888 L776.172 681.888 L775.612 681.888 L775.053 681.888 L774.494 681.888 L773.935 681.888 L773.375 681.888 L772.816 681.888 L772.257 681.888 L771.698 681.888 L771.138 681.888 L770.579 681.888 L770.02 681.888 L769.461 681.888 L768.901 681.888 L768.342 681.888 L767.783 681.888 L767.224 681.888 L766.664 681.888 L766.105 681.888 L765.546 681.888 L764.987 681.888 L764.427 681.888 L763.868 681.888 L763.309 681.888 L762.75 681.888 L762.19 681.888 L761.631 681.888 L761.072 681.888 L760.513 681.888 L759.953 681.888 L759.394 681.888 L758.835 681.888 L758.276 681.888 L757.716 681.888 L757.157 681.888 L756.598 681.888 L756.039 681.888 L755.479 681.888 L754.92 681.888 L754.361 681.888 L753.802 681.888 L753.242 681.888 L752.683 681.888 L752.124 681.888 L751.565 681.888 L751.005 681.888 L750.446 681.888 L749.887 681.888 L749.328 681.888 L748.768 681.888 L748.209 681.888 L747.65 681.888 L747.091 681.888 L746.531 681.888 L745.972 681.888 L745.413 681.888 L744.854 681.888 L744.294 681.888 L743.735 681.888 L743.176 681.888 L742.617 681.888 L742.057 681.888 L741.498 681.888 L740.939 681.888 L740.38 681.888 L739.82 681.888 L739.261 681.888 L738.702 681.888 L738.143 681.888 L737.583 681.888 L737.024 681.888 L736.465 681.888 L735.906 681.888 L735.346 681.888 L734.787 681.888 L734.228 681.888 L733.669 681.888 L733.109 681.888 L732.55 681.888 L731.991 681.888 L731.432 681.888 L730.872 681.888 L730.313 681.888 L729.754 681.888 L729.195 681.888 L728.635 681.888 L728.076 681.888 L727.517 681.888 L726.958 681.888 L726.398 681.888 L725.839 681.888 L725.28 681.888 L724.721 681.888 L724.161 681.888 L723.602 681.888 L723.043 681.888 L722.484 681.888 L721.924 681.888 L721.365 681.888 L720.806 681.888 L720.247 681.888  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.224 720.806,685.224 721.365,685.224 721.924,685.224 722.484,685.224 723.043,685.224 723.602,685.224 724.161,685.224 724.721,685.224 725.28,685.224 725.839,685.224 726.398,685.224 726.958,685.224 727.517,685.224 728.076,685.224 728.635,685.224 729.195,685.224 729.754,685.224 730.313,685.224 730.872,685.224 731.432,685.224 731.991,685.224 732.55,685.224 733.109,685.224 733.669,685.224 734.228,685.224 734.787,685.224 735.346,685.224 735.906,685.224 736.465,685.224 737.024,685.224 737.583,685.224 738.143,685.224 738.702,685.224 739.261,685.224 739.82,685.224 740.38,685.224 740.939,685.224 741.498,685.224 742.057,685.224 742.617,685.224 743.176,685.224 743.735,685.224 744.294,685.224 744.854,685.224 745.413,685.224 745.972,685.224 746.531,685.224 747.091,685.224 747.65,685.224 748.209,685.224 748.768,685.224 749.328,685.224 749.887,685.224 750.446,685.224 751.005,685.224 751.565,685.224 752.124,685.224 752.683,685.224 753.242,685.224 753.802,685.224 754.361,685.224 754.92,685.224 755.479,685.224 756.039,685.224 756.598,685.224 757.157,685.224 757.716,685.224 758.276,685.224 758.835,685.224 759.394,685.224 759.953,685.224 760.513,685.224 761.072,685.224 761.631,685.224 762.19,685.224 762.75,685.224 763.309,685.224 763.868,685.224 764.427,685.224 764.987,685.224 765.546,685.224 766.105,685.224 766.664,685.224 767.224,685.224 767.783,685.224 768.342,685.224 768.901,685.224 769.461,685.224 770.02,685.224 770.579,685.224 771.138,685.224 771.698,685.224 772.257,685.224 772.816,685.224 773.375,685.224 773.935,685.224 774.494,685.224 775.053,685.224 775.612,685.224 776.172,685.224 776.731,685.224 777.29,685.224 777.849,685.224 778.409,685.224 778.968,685.224 779.527,685.224 780.086,685.224 780.646,685.224 781.205,685.224 781.764,685.224 782.323,685.224 782.883,685.224 783.442,685.224 784.001,685.224 784.56,685.224 785.12,685.224 785.679,685.224 786.238,685.224 786.797,685.224 787.357,685.224 787.916,685.224 788.475,685.224 789.034,685.224 789.594,685.224 790.153,685.224 790.712,685.224 791.271,685.224 791.831,685.224 792.39,685.224 792.949,685.224 793.508,685.224 794.068,685.224 794.627,685.224 795.186,685.224 795.745,685.224 796.305,685.224 796.864,685.224 797.423,685.224 797.982,685.224 798.542,685.224 799.101,685.224 799.66,685.224 800.219,685.224 800.779,685.224 801.338,685.224 801.897,685.224 802.456,685.224 803.016,685.224 803.575,685.224 804.134,685.224 804.693,685.224 805.253,685.224 805.812,685.224 806.371,685.224 806.931,685.224 807.49,685.224 808.049,685.224 808.608,685.224 809.168,685.224 809.727,685.224 810.286,685.224 810.845,685.224 811.405,685.224 811.964,685.224 812.523,685.224 813.082,685.224 813.642,685.224 814.201,685.224 814.76,685.224 815.319,685.224 815.879,685.224 816.438,685.224 816.997,685.224 817.556,685.224 818.116,685.224 818.675,685.224 819.234,685.224 819.793,685.224 820.353,685.224 820.912,685.224 821.471,685.224 822.03,685.224 822.59,685.224 823.149,685.224 823.708,685.224 824.267,685.224 824.827,685.224 825.386,685.224 825.945,685.224 826.504,685.224 827.064,685.224 827.623,685.224 828.182,685.224 828.741,685.224 829.301,685.224 829.86,685.224 830.419,685.224 830.978,685.224 831.538,685.224 832.097,685.224 832.656,685.224 833.215,685.224 833.775,685.224 834.334,685.224 834.893,685.224 835.452,685.224 836.012,685.224 836.571,685.224 837.13,685.224 837.689,685.224 838.249,685.224 838.808,685.224 839.367,685.224 839.926,685.224 840.486,685.224 841.045,685.224 841.604,685.224 842.163,685.224 842.723,685.224 843.282,685.224 843.841,685.224 844.4,685.224 844.96,685.224 845.519,685.224 846.078,685.224 846.637,685.224 847.197,685.224 847.756,685.224 848.315,685.224 848.874,685.224 849.434,685.224 849.993,685.224 850.552,685.224 851.111,685.224 851.671,685.224 852.23,685.224 852.789,685.224 853.348,685.224 853.908,685.224 854.467,685.224 855.026,685.224 855.585,685.224 856.145,685.224 856.704,685.224 857.263,685.224 857.822,685.224 858.382,685.224 858.941,685.224 859.5,685.224 860.059,685.224 860.619,685.224 861.178,685.224 861.737,685.224 862.296,685.224 862.856,685.224 863.415,685.224 863.974,685.224 864.533,685.224 865.093,685.224 865.652,685.224 866.211,685.224 866.77,685.224 867.33,685.224 867.889,685.224 868.448,685.224 869.007,685.224 869.567,685.224 870.126,685.224 870.685,685.224 871.244,685.224 871.804,685.224 872.363,685.224 872.922,685.224 873.481,685.224 874.041,685.224 874.6,685.224 875.159,685.224 875.718,685.224 876.278,685.224 876.837,685.224 877.396,685.224 877.955,685.224 878.515,685.224 879.074,685.224 879.633,685.224 880.192,685.224 880.752,685.224 881.311,685.224 881.87,685.224 882.429,685.224 882.989,685.224 883.548,685.224 884.107,685.224 884.666,685.224 885.226,685.224 885.785,685.224 886.344,685.224 886.903,685.224 887.463,685.224 888.022,685.224 888.581,685.224 889.14,685.224 889.7,685.224 890.259,685.224 890.818,685.224 891.377,685.224 891.937,685.224 892.496,685.224 893.055,685.224 893.614,685.224 894.174,685.224 894.733,685.224 895.292,685.224 895.851,685.224 896.411,685.224 896.97,685.224 897.529,685.224 898.088,685.224 898.648,685.224 899.207,685.224 899.766,685.224 900.325,685.224 900.885,685.224 901.444,685.224 902.003,685.224 902.562,685.224 903.122,685.224 903.681,685.224 904.24,685.224 904.799,685.224 905.359,685.224 905.918,685.224 906.477,685.224 907.036,685.224 907.596,685.224 908.155,685.224 908.714,685.224 909.273,685.224 909.833,685.224 910.392,685.224 910.951,685.224 911.51,685.224 912.07,685.224 912.629,685.224 913.188,685.224 913.747,685.224 914.307,685.224 914.866,685.224 915.425,685.224 915.984,685.224 916.544,685.224 917.103,685.224 917.662,685.224 918.221,685.224 918.781,685.224 919.34,685.224 919.899,685.224 920.458,685.224 921.018,685.224 921.577,685.224 922.136,685.224 922.695,685.224 923.255,685.224 923.814,685.224 924.373,685.224 924.932,685.224 925.492,685.224 926.051,685.224 926.61,685.224 927.169,685.224 927.729,685.224 928.288,685.224 928.847,685.224 929.406,685.224 929.966,685.224 930.525,685.224 931.084,685.224 931.644,685.224 932.203,685.224 932.762,685.224 933.321,685.224 933.881,685.224 934.44,685.224 934.999,685.224 935.558,685.224 936.118,685.224 936.677,685.224 937.236,685.224 937.795,685.224 938.355,685.224 938.914,685.224 939.473,685.224 940.032,685.224 940.592,685.224 941.151,685.224 941.71,685.224 942.269,685.224 942.829,685.224 943.388,685.224 943.947,685.224 944.506,685.224 945.066,685.224 945.625,685.224 946.184,685.224 946.743,685.224 947.303,685.224 947.862,685.224 948.421,685.224 948.98,685.224 949.54,685.224 950.099,685.224 950.658,685.224 951.217,685.224 951.777,685.224 952.336,685.224 952.895,685.224 953.454,685.224 954.014,685.224 954.573,685.224 955.132,685.224 955.691,685.224 956.251,685.224 956.81,685.224 957.369,685.224 957.928,685.224 958.488,685.224 959.047,685.224 959.606,685.224 960.165,685.224 960.725,685.224 961.284,685.224 961.843,685.224 962.402,685.224 962.962,685.224 963.521,685.224 964.08,685.224 964.639,685.224 965.199,685.224 965.758,685.224 966.317,685.224 966.876,685.224 967.436,685.224 967.995,685.224 968.554,685.224 969.113,685.224 969.673,685.224 970.232,685.224 970.791,685.224 971.35,685.224 971.91,685.224 972.469,685.224 973.028,685.224 973.587,685.224 974.147,685.224 974.706,685.224 975.265,685.224 975.824,685.224 976.384,685.224 976.943,685.224 977.502,685.224 978.061,685.224 978.621,685.224 979.18,685.224 979.739,685.224 980.298,685.224 980.858,685.224 981.417,685.224 981.976,685.224 982.535,685.224 983.095,685.224 983.654,685.224 984.213,685.224 984.772,685.224 985.332,685.224 985.891,685.224 986.45,685.224 987.009,685.224 987.569,685.224 988.128,685.224 988.687,685.224 989.246,685.224 989.806,685.224 990.365,685.224 990.924,685.224 991.483,685.224 992.043,685.224 992.602,685.224 993.161,685.224 993.72,685.224 994.28,685.224 994.839,685.224 995.398,685.224 995.957,685.224 996.517,685.224 997.076,685.224 997.635,685.224 998.194,685.224 998.754,685.224 999.313,685.224 999.872,685.224 1000.43,685.224 1000.99,685.224 1001.55,685.224 1002.11,685.224 1002.67,685.224 1003.23,685.224 1003.79,685.224 1004.35,685.224 1004.91,685.224 1005.46,685.224 1006.02,685.224 1006.58,685.224 1007.14,685.224 1007.7,685.224 1008.26,685.224 1008.82,685.224 1009.38,685.224 1009.94,685.224 1010.5,685.224 1011.06,685.224 1011.62,685.224 1012.18,685.224 1012.73,685.224 1013.29,685.224 1013.85,685.224 1014.41,685.224 1014.97,685.224 1015.53,685.224 1016.09,685.224 1016.65,685.224 1017.21,685.224 1017.77,685.224 1018.33,685.224 1018.89,685.224 1019.45,685.224 1020.01,685.224 1020.56,685.224 1021.12,685.224 1021.68,685.224 1022.24,685.224 1022.8,685.224 1023.36,685.224 1023.92,685.224 1024.48,685.224 1025.04,685.224 1025.6,685.224 1026.16,685.224 1026.72,685.224 1027.28,685.224 1027.83,685.224 1028.39,685.224 1028.95,685.224 1029.51,685.224 1030.07,685.224 1030.63,685.224 1031.19,685.224 1031.75,685.224 1032.31,685.224 1032.87,685.224 1033.43,685.224 1033.99,685.224 1034.55,685.224 1035.1,685.224 1035.66,685.224 1036.22,685.224 1036.78,685.224 1037.34,685.224 1037.9,685.224 1038.46,685.224 1039.02,685.224 1039.58,685.224 1040.14,685.224 1040.7,685.224 1041.26,685.224 1041.82,685.224 1042.38,685.224 1042.93,685.224 1043.49,685.224 1044.05,685.224 1044.61,685.224 1045.17,685.224 1045.73,685.224 1046.29,685.224 1046.85,685.224 1047.41,685.224 1047.97,685.224 1048.53,685.224 1049.09,685.224 1049.65,685.224 1050.2,685.224 1050.76,685.224 1051.32,685.224 1051.88,685.224 1052.44,685.224 1053,685.224 1053.56,685.224 1054.12,685.224 1054.68,685.224 1055.24,685.224 1055.8,685.224 1056.36,685.224 1056.92,685.224 1057.48,685.224 1058.03,685.224 1058.59,685.224 1059.15,685.224 1059.71,685.224 1060.27,685.224 1060.83,685.224 1061.39,685.224 1061.95,685.224 1062.51,685.224 1063.07,685.224 1063.63,685.224 1064.19,685.224 1064.75,685.224 1065.3,685.224 1065.86,685.224 1066.42,685.224 1066.98,685.224 1067.54,685.224 1068.1,685.224 1068.66,685.224 1069.22,685.224 1069.78,685.224 1070.34,685.224 1070.9,685.224 1071.46,685.224 1072.02,685.224 1072.57,685.224 1073.13,685.224 1073.69,685.224 1074.25,685.224 1074.81,685.224 1075.37,685.224 1075.93,685.224 1076.49,685.224 1077.05,685.224 1077.61,685.224 1078.17,685.224 1078.73,685.224 1079.29,685.224 1079.85,685.224 1080.4,685.224 1080.96,685.224 1081.52,685.224 1082.08,685.224 1082.64,685.224 1083.2,685.224 1083.76,685.224 1084.32,685.224 1084.88,685.224 1085.44,685.224 1086,685.224 1086.56,685.224 1087.12,685.224 1087.67,685.224 1088.23,685.224 1088.79,685.224 1089.35,685.224 1089.91,685.224 1090.47,685.224 1091.03,685.224 1091.59,685.224 1092.15,685.224 1092.71,685.224 1093.27,685.224 1093.83,685.224 1094.39,685.224 1094.94,685.224 1095.5,685.224 1096.06,685.224 1096.62,685.224 1097.18,685.224 1097.74,685.224 1098.3,685.224 1098.86,685.224 1099.42,685.224 1099.98,685.224 1100.54,685.224 1101.1,685.224 1101.66,685.224 1102.22,685.224 1102.77,685.224 1103.33,685.224 1103.89,685.224 1104.45,685.224 1105.01,685.224 1105.57,685.224 1106.13,685.224 1106.69,685.224 1107.25,685.224 1107.81,685.224 1108.37,685.224 1108.93,685.224 1109.49,685.224 1110.04,685.224 1110.6,685.224 1111.16,685.224 1111.72,685.224 1112.28,685.224 1112.84,685.224 1113.4,685.224 1113.96,685.224 1114.52,685.224 1115.08,685.224 1115.64,685.224 1116.2,685.224 1116.76,685.224 1117.31,685.224 1117.87,685.224 1118.43,685.224 1118.99,685.224 1119.55,685.224 1120.11,685.224 1120.67,685.224 1121.23,685.224 1121.79,685.224 1122.35,685.224 1122.91,685.224 1123.47,685.224 1124.03,685.224 1124.59,685.224 1125.14,685.224 1125.7,685.224 1126.26,685.224 1126.82,685.224 1127.38,685.224 1127.94,685.224 1128.5,685.224 1129.06,685.224 1129.62,685.224 1130.18,685.224 1130.74,685.224 1131.3,685.224 1131.86,685.224 1132.41,685.224 1132.97,685.224 1133.53,685.224 1134.09,685.224 1134.65,685.224 1135.21,685.224 1135.77,685.224 1136.33,685.224 1136.89,685.224 1137.45,685.224 1138.01,685.224 1138.57,685.224 1139.13,685.224 1139.68,685.224 1140.24,685.224 1140.8,685.224 1141.36,685.224 1141.92,685.224 1142.48,685.224 1143.04,685.224 1143.6,685.224 1144.16,685.224 1144.72,685.224 1145.28,685.224 1145.84,685.224 1146.4,685.224 1146.96,685.224 1147.51,685.224 1148.07,685.224 1148.63,685.224 1149.19,685.224 1149.75,685.224 1150.31,685.224 1150.87,685.224 1151.43,685.224 1151.99,685.224 1152.55,685.224 1153.11,685.224 1153.67,685.224 1154.23,685.224 1154.78,685.224 1155.34,685.224 1155.9,685.224 1156.46,685.224 1157.02,685.224 1157.58,685.224 1158.14,685.224 1158.7,685.224 1159.26,685.224 1159.82,685.224 1160.38,685.224 1160.94,685.224 1161.5,685.224 1162.05,685.224 1162.61,685.224 1163.17,685.224 1163.73,685.224 1164.29,685.224 1164.85,685.224 1165.41,685.224 1165.97,685.224 1166.53,685.224 1167.09,685.224 1167.65,685.224 1168.21,685.224 1168.77,685.224 1169.33,685.224 1169.88,685.224 1170.44,685.224 1171,685.224 1171.56,685.224 1172.12,685.224 1172.68,685.224 1173.24,685.224 1173.8,685.224 1174.36,685.224 1174.92,685.224 1175.48,685.224 1176.04,685.224 1176.6,685.224 1177.15,685.224 1177.71,685.224 1178.27,685.224 1178.83,685.224 1179.39,685.224 1179.95,685.224 1180.51,685.224 1181.07,685.224 1181.63,685.224 1182.19,685.224 1182.75,685.224 1183.31,685.224 1183.87,685.224 1184.43,685.224 1184.98,685.224 1185.54,685.224 1186.1,685.224 1186.66,685.224 1187.22,685.224 1187.78,685.224 1188.34,685.224 1188.9,685.224 1189.46,685.224 1190.02,685.224 1190.58,685.224 1191.14,685.224 1191.7,685.224 1192.25,685.224 1192.81,685.224 1193.37,685.224 1193.93,685.224 1194.49,685.224 1195.05,685.224 1195.61,685.224 1196.17,685.224 1196.73,685.224 1197.29,685.224 1197.85,685.224 1198.41,685.224 1198.97,685.224 1199.52,685.224 1200.08,685.224 1200.64,685.224 1201.2,685.224 1201.76,685.224 1202.32,685.224 1202.88,685.224 1203.44,685.224 1204,685.224 1204.56,685.224 1205.12,685.224 1205.68,685.224 1206.24,685.224 1206.8,685.224 1207.35,685.224 1207.91,685.224 1208.47,685.224 1209.03,685.224 1209.59,685.224 1210.15,685.224 1210.71,685.224 1211.27,685.224 1211.83,685.224 1212.39,685.224 1212.95,685.224 1213.51,685.224 1214.07,685.224 1214.62,685.224 1215.18,685.224 1215.74,685.224 1216.3,685.224 1216.86,685.224 1217.42,685.224 1217.98,685.224 1218.54,685.224 1219.1,685.224 1219.66,685.224 1220.22,685.224 1220.78,685.224 1221.34,685.224 1221.89,685.224 1222.45,685.224 1223.01,685.224 1223.57,685.224 1224.13,685.224 1224.69,685.224 1225.25,685.224 1225.81,685.224 1226.37,685.224 1226.93,685.224 1227.49,685.224 1228.05,685.224 1228.61,685.224 1229.17,685.224 1229.72,685.224 1230.28,685.224 1230.84,685.224 1231.4,685.224 1231.96,685.224 1232.52,685.224 1233.08,685.224 1233.64,685.224 1234.2,685.224 1234.76,685.224 1235.32,685.224 1235.88,685.224 1236.44,685.224 1236.99,685.224 1237.55,685.224 1238.11,685.224 1238.67,685.224 1239.23,685.224 1239.79,685.224 1240.35,685.224 1240.91,685.224 1241.47,685.224 1242.03,685.224 1242.59,685.224 1243.15,685.224 1243.71,685.224 1244.26,685.224 1244.82,685.224 1245.38,685.224 1245.94,685.224 1246.5,685.224 1247.06,685.224 1247.62,685.224 1248.18,685.224 1248.74,685.224 1249.3,685.224 1249.86,685.224 1250.42,685.224 1250.98,685.224 1251.54,685.224 1252.09,685.224 1252.65,685.224 1253.21,685.224 1253.77,685.224 1254.33,685.224 1254.89,685.224 1255.45,685.224 1256.01,685.224 1256.57,685.224 1257.13,685.224 1257.69,685.224 1258.25,685.224 1258.81,685.224 1259.36,685.224 1259.92,685.224 1260.48,685.224 1261.04,685.224 1261.6,685.224 1262.16,685.224 1262.72,685.224 1263.28,685.224 1263.84,685.224 1264.4,685.224 1264.96,685.224 1265.52,685.224 1266.08,685.224 1266.63,685.224 1267.19,685.224 1267.75,685.224 1268.31,685.224 1268.87,685.224 1269.43,685.224 1269.99,685.224 1270.55,685.224 1271.11,685.224 1271.67,685.224 1272.23,685.224 1272.79,685.224 1273.35,685.224 1273.91,685.224 1274.46,685.224 1275.02,685.224 1275.58,685.224 1276.14,685.224 1276.7,685.224 1277.26,685.224 1277.82,685.224 1278.38,685.224 1278.94,685.224 1279.5,685.224 1280.06,685.224 1280.62,685.224 1281.18,685.224 1281.73,685.224 1282.29,685.224 1282.85,685.224 1283.41,685.224 1283.97,685.224 1284.53,685.224 1285.09,685.224 1285.65,685.224 1286.21,685.224 1286.77,685.224 1287.33,685.224 1287.89,685.224 1288.45,685.224 1289,685.224 1289.56,685.224 1290.12,685.224 1290.68,685.224 1291.24,685.224 1291.8,685.224 1292.36,685.224 1292.92,685.224 1293.48,685.224 1294.04,685.224 1294.6,685.224 1295.16,685.224 1295.72,685.224 1296.28,685.224 1296.83,685.224 1297.39,685.224 1297.95,685.224 1298.51,685.224 1299.07,685.224 1299.63,685.224 1300.19,685.224 1300.75,685.224 1301.31,685.224 1301.87,685.224 1302.43,685.224 1302.99,685.224 1303.55,685.224 1304.1,685.224 1304.66,685.224 1305.22,685.224 1305.78,685.224 1306.34,685.224 1306.9,685.224 1307.46,685.224 1308.02,685.224 1308.58,685.224 1309.14,685.224 1309.7,685.224 1310.26,685.224 1310.82,685.224 1311.38,685.224 1311.93,685.224 1312.49,685.224 1313.05,685.224 1313.61,685.224 1314.17,685.224 1314.73,685.224 1315.29,685.224 1315.85,685.224 1316.41,685.224 1316.97,685.224 1317.53,685.224 1318.09,685.224 1318.65,685.224 1319.2,685.224 1319.76,685.224 1320.32,685.224 1320.88,685.224 1321.44,685.224 1322,685.224 1322.56,685.224 1323.12,685.224 1323.68,685.224 1324.24,685.224 1324.8,685.224 1325.36,685.224 1325.92,685.224 1326.47,685.224 1327.03,685.224 1327.59,685.224 1328.15,685.224 1328.71,685.224 1329.27,685.224 1329.83,685.224 1330.39,685.224 1330.95,685.224 1331.51,685.224 1332.07,685.224 1332.63,685.224 1333.19,685.224 1333.75,685.224 1334.3,685.224 1334.86,685.224 1335.42,685.224 1335.98,685.224 1336.54,685.224 1337.1,685.224 1337.66,685.224 1338.22,685.224 1338.78,685.224 1339.34,685.224 1339.9,685.224 1340.46,685.224 1341.02,685.224 1341.57,685.224 1342.13,685.224 1342.69,685.224 1343.25,685.224 1343.81,685.224 1344.37,685.224 1344.93,685.224 1345.49,685.224 1346.05,685.224 1346.61,685.224 1347.17,685.224 1347.73,685.224 1348.29,685.224 1348.84,685.224 1349.4,685.224 1349.96,685.224 1350.52,685.224 1351.08,685.224 1351.64,685.224 1352.2,685.224 1352.76,685.224 1353.32,685.224 1353.88,685.224 1354.44,685.224 1355,685.224 1355.56,685.224 1356.12,685.224 1356.67,685.224 1357.23,685.224 1357.79,685.224 1358.35,685.224 1358.91,685.224 1359.47,685.224 1360.03,685.224 1360.59,685.224 1361.15,685.224 1361.71,685.224 1362.27,685.224 1362.83,685.224 1363.39,685.224 1363.94,685.224 1364.5,685.224 1365.06,685.224 1365.62,685.224 1366.18,685.224 1366.74,685.224 1367.3,685.224 1367.86,685.224 1368.42,685.224 1368.98,685.224 1369.54,685.224 1370.1,685.224 1370.66,685.224 1371.21,685.224 1371.77,685.224 1372.33,685.224 1372.89,685.224 1373.45,685.224 1374.01,685.224 1374.57,685.224 1375.13,685.224 1375.69,685.224 1376.25,685.224 1376.81,685.224 1377.37,685.224 1377.93,685.224 1378.49,685.224 1379.04,685.224 1379.6,685.224 1380.16,685.224 1380.72,685.224 1381.28,685.224 1381.84,685.224 1382.4,685.224 1382.96,685.224 1383.52,685.224 1384.08,685.224 1384.64,685.224 1385.2,685.224 1385.76,685.224 1386.31,685.224 1386.87,685.224 1387.43,685.224 1387.99,685.224 1388.55,685.224 1389.11,685.224 1389.67,685.224 1390.23,685.224 1390.79,685.224 1391.35,685.224 1391.91,685.224 1392.47,685.224 1393.03,685.224 1393.58,685.224 1394.14,685.224 1394.7,685.224 1395.26,685.224 1395.82,685.224 1396.38,685.224 1396.94,685.224 1397.5,685.224 1398.06,685.224 1398.62,685.224 1399.18,685.224 1399.74,685.224 1400.3,685.224 1400.86,685.224 1401.41,685.224 1401.97,685.224 1402.53,685.224 1403.09,685.224 1403.65,685.224 1404.21,685.224 1404.77,685.224 1405.33,685.224 1405.89,685.224 1406.45,685.224 1407.01,685.224 1407.57,685.224 1408.13,685.224 1408.68,685.224 1409.24,685.224 1409.8,685.224 1410.36,685.224 1410.92,685.224 1411.48,685.224 1412.04,685.224 1412.6,685.224 1413.16,685.224 1413.72,685.224 1414.28,685.224 1414.84,685.224 1415.4,685.224 1415.95,685.224 1416.51,685.224 1417.07,685.224 1417.63,685.224 1418.19,685.224 1418.75,685.224 1419.31,685.224 1419.87,685.224 1420.43,685.224 1420.99,685.224 1421.55,685.224 1422.11,685.224 1422.67,685.224 1423.23,685.224 1423.78,685.224 1424.34,685.224 1424.9,685.224 1425.46,685.224 1426.02,685.224 1426.58,685.224 1427.14,685.224 1427.7,685.224 1428.26,685.224 1428.82,685.224 1429.38,685.224 1429.94,685.224 1430.5,685.224 1431.05,685.224 1431.61,685.224 1432.17,685.224 1432.73,685.224 1433.29,685.224 1433.85,685.224 1434.41,685.224 1434.97,685.224 1435.53,685.224 1436.09,685.224 1436.65,685.224 1437.21,685.224 1437.77,685.224 1438.33,685.224 1438.88,685.224 1439.44,685.224 1440,685.224 1440.56,685.224 1441.12,685.224 1441.68,685.224 1442.24,685.224 1442.8,685.224 1443.36,685.224 1443.92,685.224 1444.48,685.224 1445.04,685.224 1445.6,685.224 1446.15,685.224 1446.71,685.224 1447.27,685.224 1447.83,685.224 1448.39,685.224 1448.95,685.224 1449.51,685.224 1450.07,685.224 1450.63,685.224 1451.19,685.224 1451.75,685.224 1452.31,685.224 1452.87,685.224 1453.42,685.224 1453.98,685.224 1454.54,685.224 1455.1,685.224 1455.66,685.224 1456.22,685.224 1456.78,685.224 1457.34,685.224 1457.9,685.224 1458.46,685.224 1459.02,685.224 1459.58,685.224 1460.14,685.224 1460.7,685.224 1461.25,685.224 1461.81,685.224 1462.37,685.224 1462.93,685.224 1463.49,685.224 1464.05,685.224 1464.61,685.224 1465.17,685.224 1465.73,685.224 1466.29,685.224 1466.85,685.224 1467.41,685.224 1467.97,685.224 1468.52,685.224 1469.08,685.224 1469.64,685.224 1470.2,685.224 1470.76,685.224 1471.32,685.224 1471.88,685.224 1472.44,685.224 1473,685.224 1473.56,685.224 1474.12,685.224 1474.68,685.224 1475.24,685.224 1475.79,685.224 1476.35,685.224 1476.91,685.224 1477.47,685.224 1478.03,685.224 1478.59,685.224 1479.15,685.224 1479.71,685.224 1480.27,685.224 1480.83,685.224 1481.39,685.224 1481.95,685.224 1482.51,685.224 1483.07,685.224 1483.62,685.224 1484.18,685.224 1484.74,685.224 1485.3,685.224 1485.86,685.224 1486.42,685.224 1486.98,685.224 1487.54,685.224 1488.1,685.224 1488.66,685.224 1489.22,685.224 1489.78,685.224 1490.34,685.224 1490.89,685.224 1491.45,685.224 1492.01,685.224 1492.57,685.224 1493.13,685.224 1493.69,685.224 1494.25,685.224 1494.81,685.224 1495.37,685.224 1495.93,685.224 1496.49,685.224 1497.05,685.224 1497.61,685.224 1498.16,685.224 1498.72,685.224 1499.28,685.224 1499.84,685.224 1500.4,685.224 1500.96,685.224 1501.52,685.224 1502.08,685.224 1502.64,685.224 1503.2,685.224 1503.76,685.224 1504.32,685.224 1504.88,685.224 1505.44,685.224 1505.99,685.224 1506.55,685.224 1507.11,685.224 1507.67,685.224 1508.23,685.224 1508.79,685.224 1509.35,685.224 1509.91,685.224 1510.47,685.224 1511.03,685.224 1511.59,685.224 1512.15,685.224 1512.71,685.224 1513.26,685.224 1513.82,685.224 1514.38,685.224 1514.94,685.224 1515.5,685.224 1516.06,685.224 1516.62,685.224 1517.18,685.224 1517.74,685.224 1518.3,685.224 1518.86,685.224 1519.42,685.224 1519.98,685.224 1520.53,685.224 1521.09,685.224 1521.65,685.224 1522.21,685.224 1522.77,685.224 1523.33,685.224 1523.89,685.224 1524.45,685.224 1525.01,685.224 1525.57,685.224 1526.13,685.224 1526.69,685.224 1527.25,685.224 1527.81,685.224 1528.36,685.224 1528.92,685.224 1529.48,685.224 1530.04,685.224 1530.6,685.224 1531.16,685.224 1531.72,685.224 1532.28,685.224 1532.84,685.224 1533.4,685.224 1533.96,685.224 1534.52,685.224 1535.08,685.224 1535.63,685.224 1536.19,685.224 1536.75,685.224 1537.31,685.224 1537.87,685.224 1538.43,685.224 1538.99,685.224 1539.55,685.224 1540.11,685.224 1540.67,685.224 1541.23,685.224 1541.79,685.224 1542.35,685.224 1542.9,685.224 1543.46,685.224 1544.02,685.224 1544.58,685.224 1545.14,685.224 1545.7,685.224 1546.26,685.224 1546.82,685.224 1547.38,685.224 1547.94,685.224 1548.5,685.224 1549.06,685.224 1549.62,685.224 1550.18,685.224 1550.73,685.224 1551.29,685.224 1551.85,685.224 1552.41,685.224 1552.97,685.224 1553.53,685.224 1554.09,685.224 1554.65,685.224 1555.21,685.224 1555.77,685.224 1556.33,685.224 1556.89,685.224 1557.45,685.224 1558,685.224 1558.56,685.224 1559.12,685.224 1559.68,685.224 1560.24,685.224 1560.8,685.224 1561.36,685.224 1561.92,685.224 1562.48,685.224 1563.04,685.224 1563.6,685.224 1564.16,685.224 1564.72,685.224 1565.28,685.224 1565.83,685.224 1566.39,685.224 1566.95,685.224 1567.51,685.224 1568.07,685.224 1568.63,685.224 1569.19,685.224 1569.75,685.224 1570.31,685.224 1570.87,685.224 1571.43,685.224 1571.99,685.224 1572.55,685.224 1573.1,685.224 1573.66,685.224 1574.22,685.224 1574.78,685.224 1575.34,685.224 1575.9,685.224 1576.46,685.224 1577.02,685.224 1577.58,685.224 1578.14,685.224 1578.7,685.224 1579.26,685.224 1579.82,685.224 1580.37,685.224 1580.93,685.224 1581.49,685.224 1582.05,685.224 1582.61,685.224 1583.17,685.224 1583.73,685.224 1584.29,685.224 1584.85,685.224 1585.41,685.224 1585.97,685.224 1586.53,685.224 1587.09,685.224 1587.65,685.224 1588.2,685.224 1588.76,685.224 1589.32,685.224 1589.88,685.224 1590.44,685.224 1591,685.224 1591.56,685.224 1592.12,685.224 1592.68,685.224 1593.24,685.224 1593.8,685.224 1594.36,685.224 1594.92,685.224 1595.47,685.224 1596.03,685.224 1596.59,685.224 1597.15,685.224 1597.71,685.224 1598.27,685.224 1598.83,685.224 1599.39,685.224 1599.95,685.224 1600.51,685.224 1601.07,685.224 1601.63,685.224 1602.19,685.224 1602.74,685.224 1603.3,685.224 1603.86,685.224 1604.42,685.224 1604.98,685.224 1605.54,685.224 1606.1,685.224 1606.66,685.224 1607.22,685.224 1607.78,685.224 1608.34,685.224 1608.9,685.224 1609.46,685.224 1610.02,685.224 1610.57,685.224 1611.13,685.224 1611.69,685.224 1612.25,685.224 1612.81,685.224 1613.37,685.224 1613.93,685.224 1614.49,685.224 1615.05,685.224 1615.61,685.224 1616.17,685.224 1616.73,685.224 1617.29,685.224 1617.84,685.224 1618.4,685.224 1618.96,685.224 1619.52,685.224 1620.08,685.224 1620.64,685.224 1621.2,685.224 1621.76,685.224 1622.32,685.224 1622.88,685.224 1623.44,685.224 1624,685.224 1624.56,685.224 1625.11,685.224 1625.67,685.224 1626.23,685.224 1626.79,685.224 1627.35,685.224 1627.91,685.224 1628.47,685.224 1629.03,685.224 1629.59,685.224 1630.15,685.224 1630.71,685.224 1631.27,685.224 1631.83,685.224 1632.39,685.224 1632.94,685.224 1633.5,685.224 1634.06,685.224 1634.62,685.224 1635.18,685.224 1635.74,685.224 1636.3,685.224 1636.86,685.224 1637.42,685.224 1637.98,685.224 1638.54,685.224 1639.1,685.224 1639.66,685.224 1640.21,685.224 1640.77,685.224 1641.33,685.224 1641.89,685.224 1642.45,685.224 1643.01,685.224 1643.57,685.224 1644.13,685.224 1644.69,685.224 1645.25,685.224 1645.81,685.224 1646.37,685.224 1646.93,685.224 1647.48,685.224 1648.04,685.224 1648.6,685.224 1649.16,685.224 1649.72,685.224 1650.28,685.224 1650.84,685.224 1651.4,685.224 1651.96,685.224 1652.52,685.224 1653.08,685.224 1653.64,685.224 1654.2,685.224 1654.76,685.224 1655.31,685.224 1655.87,685.224 1656.43,685.224 1656.99,685.224 1657.55,685.224 1658.11,685.224 1658.67,685.224 1659.23,685.224 1659.79,685.224 1660.35,685.224 1660.91,685.224 1661.47,685.224 1662.03,685.224 1662.58,685.224 1663.14,685.224 1663.7,685.224 1664.26,685.224 1664.82,685.224 1665.38,685.224 1665.94,685.224 1666.5,685.224 1667.06,685.224 1667.62,685.224 1668.18,685.224 1668.74,685.224 1669.3,685.224 1669.85,685.224 1670.41,685.224 1670.97,685.224 1671.53,685.224 1672.09,685.224 1672.65,685.224 1673.21,685.224 1673.77,685.224 1674.33,685.224 1674.89,685.224 1675.45,685.224 1676.01,685.224 1676.57,685.224 1677.13,685.224 1677.68,685.224 1678.24,685.224 1678.8,685.224 1679.36,685.224 1679.92,685.224 1680.48,685.224 1681.04,685.224 1681.6,685.224 1682.16,685.224 1682.72,685.224 1683.28,685.224 1683.84,685.224 1684.4,685.224 1684.95,685.224 1685.51,685.224 1686.07,685.224 1686.63,685.224 1687.19,685.224 1687.75,685.224 1688.31,685.224 1688.87,685.224 1689.43,685.224 1689.99,685.224 1690.55,685.224 1691.11,685.224 1691.67,685.224 1692.23,685.224 1692.78,685.224 1693.34,685.224 1693.9,685.224 1694.46,685.224 1695.02,685.224 1695.58,685.224 1696.14,685.224 1696.7,685.224 1697.26,685.224 1697.82,685.224 1698.38,685.224 1698.94,685.224 1699.5,685.224 1700.05,685.224 1700.61,685.224 1701.17,685.224 1701.73,685.224 1702.29,685.224 1702.85,685.224 1703.41,685.224 1703.97,685.224 1704.53,685.224 1705.09,685.224 1705.65,685.224 1706.21,685.224 1706.77,685.224 1707.32,685.224 1707.88,685.224 1708.44,685.224 1709,685.224 1709.56,685.224 1710.12,685.224 1710.68,685.224 1711.24,685.224 1711.8,685.224 1712.36,685.224 1712.92,685.224 1713.48,685.224 1714.04,685.224 1714.6,685.224 1715.15,685.224 1715.71,685.224 1716.27,685.224 1716.83,685.224 1717.39,685.224 1717.95,685.224 1718.51,685.224 1719.07,685.224 1719.63,685.224 1720.19,685.224 1720.75,685.224 1721.31,685.224 1721.87,685.224 1722.42,685.224 1722.98,685.224 1723.54,685.224 1724.1,685.224 1724.66,685.224 1725.22,685.224 1725.78,685.224 1726.34,685.224 1726.9,685.224 1727.46,685.224 1728.02,685.224 1728.58,685.224 1729.14,685.224 1729.69,685.224 1730.25,685.224 1730.81,685.224 1731.37,685.224 1731.93,685.224 1732.49,685.224 1733.05,685.224 1733.61,685.224 1734.17,685.224 1734.73,685.224 1735.29,685.224 1735.85,685.224 1736.41,685.224 1736.97,685.224 1737.52,685.224 1738.08,685.224 1738.64,685.224 1739.2,685.224 1739.76,685.224 1740.32,685.224 1740.88,685.224 1741.44,685.224 1742,685.224 1742.56,685.224 1743.12,685.224 1743.68,685.224 1744.24,685.224 1744.79,685.224 1745.35,685.224 1745.91,685.224 1746.47,685.224 1747.03,685.224 1747.59,685.224 1748.15,685.224 1748.71,685.224 1749.27,685.224 1749.83,685.224 1750.39,685.224 1750.95,685.224 1751.51,685.224 1752.06,685.224 1752.62,685.224 1753.18,685.224 1753.74,685.224 1754.3,685.224 1754.86,685.224 1755.42,685.224 1755.98,685.224 1756.54,685.224 1757.1,685.224 1757.66,685.224 1758.22,685.224 1758.78,685.224 1759.34,685.224 1759.89,685.224 1760.45,685.224 1761.01,685.224 1761.57,685.224 1762.13,685.224 1762.69,685.224 1763.25,685.224 1763.81,685.224 1764.37,685.224 1764.93,685.224 1765.49,685.224 1766.05,685.224 1766.61,685.224 1767.16,685.224 1767.72,685.224 1768.28,685.224 1768.84,685.224 1769.4,685.224 1769.96,685.224 1770.52,685.224 1771.08,685.224 1771.64,685.224 1772.2,685.224 1772.76,685.224 1773.32,685.224 1773.88,685.224 1774.43,685.224 1774.99,685.224 1775.55,685.224 1776.11,685.224 1776.67,685.224 1777.23,685.224 1777.79,685.224 1778.35,685.224 1778.91,685.224 1779.47,685.224 1780.03,685.224 1780.59,685.224 1781.15,685.224 1781.71,685.224 1782.26,685.224 1782.82,685.224 1783.38,685.224 1783.94,685.224 1784.5,685.224 1785.06,685.224 1785.62,685.224 1786.18,685.224 1786.74,685.224 1787.3,685.224 1787.86,685.224 1788.42,685.224 1788.98,685.224 1789.53,685.224 1790.09,685.224 1790.65,685.224 1791.21,685.224 1791.77,685.224 1792.33,685.224 1792.89,685.224 1793.45,685.224 1794.01,685.224 1794.57,685.224 1795.13,685.224 1795.69,685.224 1796.25,685.224 1796.8,685.224 1797.36,685.224 1797.92,685.224 1798.48,685.224 1799.04,685.224 1799.6,685.224 1800.16,685.224 1800.72,685.224 1801.28,685.224 1801.84,685.224 1802.4,685.224 1802.96,685.224 1803.52,685.224 1804.08,685.224 1804.63,685.224 1805.19,685.224 1805.75,685.224 1806.31,685.224 1806.87,685.224 1807.43,685.224 1807.99,685.224 1808.55,685.224 1809.11,685.224 1809.67,685.224 1810.23,685.224 1810.79,685.224 1811.35,685.224 1811.9,685.224 1812.46,685.224 1813.02,685.224 1813.58,685.224 1814.14,685.224 1814.7,685.224 1815.26,685.224 1815.82,685.224 1816.38,685.224 1816.94,685.224 1817.5,685.224 1818.06,685.224 1818.62,685.224 1819.18,685.224 1819.73,685.224 1820.29,685.224 1820.85,685.224 1821.41,685.224 1821.97,685.224 1822.53,685.224 1823.09,685.224 1823.65,685.224 1824.21,685.224 1824.77,685.224 1825.33,685.224 1825.89,685.224 1826.45,685.224 1827,685.224 1827.56,685.224 1828.12,685.224 1828.68,685.224 1829.24,685.224 1829.8,685.224 1830.36,685.224 1830.92,685.224 1831.48,685.224 1832.04,685.224 1832.6,685.224 1833.16,685.224 1833.72,685.224 1834.27,685.224 1834.83,685.224 1835.39,685.224 1835.95,685.224 1836.51,685.224 1837.07,685.224 1837.63,685.224 1838.19,685.224 \"/>\n<path clip-path=\"url(#clip033)\" d=\"M720.247 684.182 L720.806 684.182 L721.365 684.182 L721.924 684.182 L722.484 684.182 L723.043 684.182 L723.602 684.182 L724.161 684.182 L724.721 684.182 L725.28 684.182 L725.839 684.182 L726.398 684.182 L726.958 684.182 L727.517 684.182 L728.076 684.182 L728.635 684.182 L729.195 684.182 L729.754 684.182 L730.313 684.182 L730.872 684.182 L731.432 684.182 L731.991 684.182 L732.55 684.182 L733.109 684.182 L733.669 684.182 L734.228 684.182 L734.787 684.182 L735.346 684.182 L735.906 684.182 L736.465 684.182 L737.024 684.182 L737.583 684.182 L738.143 684.182 L738.702 684.182 L739.261 684.182 L739.82 684.182 L740.38 684.182 L740.939 684.182 L741.498 684.182 L742.057 684.182 L742.617 684.182 L743.176 684.182 L743.735 684.182 L744.294 684.182 L744.854 684.182 L745.413 684.182 L745.972 684.182 L746.531 684.182 L747.091 684.182 L747.65 684.182 L748.209 684.182 L748.768 684.182 L749.328 684.182 L749.887 684.182 L750.446 684.182 L751.005 684.182 L751.565 684.182 L752.124 684.182 L752.683 684.182 L753.242 684.182 L753.802 684.182 L754.361 684.182 L754.92 684.182 L755.479 684.182 L756.039 684.182 L756.598 684.182 L757.157 684.182 L757.716 684.182 L758.276 684.182 L758.835 684.182 L759.394 684.182 L759.953 684.182 L760.513 684.182 L761.072 684.182 L761.631 684.182 L762.19 684.182 L762.75 684.182 L763.309 684.182 L763.868 684.182 L764.427 684.182 L764.987 684.182 L765.546 684.182 L766.105 684.182 L766.664 684.182 L767.224 684.182 L767.783 684.182 L768.342 684.182 L768.901 684.182 L769.461 684.182 L770.02 684.182 L770.579 684.182 L771.138 684.182 L771.698 684.182 L772.257 684.182 L772.816 684.182 L773.375 684.182 L773.935 684.182 L774.494 684.182 L775.053 684.182 L775.612 684.182 L776.172 684.182 L776.731 684.182 L777.29 684.182 L777.849 684.182 L778.409 684.182 L778.968 684.182 L779.527 684.182 L780.086 684.182 L780.646 684.182 L781.205 684.182 L781.764 684.182 L782.323 684.182 L782.883 684.182 L783.442 684.182 L784.001 684.182 L784.56 684.182 L785.12 684.182 L785.679 684.182 L786.238 684.182 L786.797 684.182 L787.357 684.182 L787.916 684.182 L788.475 684.182 L789.034 684.182 L789.594 684.182 L790.153 684.182 L790.712 684.182 L791.271 684.182 L791.831 684.182 L792.39 684.182 L792.949 684.182 L793.508 684.182 L794.068 684.182 L794.627 684.182 L795.186 684.182 L795.745 684.182 L796.305 684.182 L796.864 684.182 L797.423 684.182 L797.982 684.182 L798.542 684.182 L799.101 684.182 L799.66 684.182 L800.219 684.182 L800.779 684.182 L801.338 684.182 L801.897 684.182 L802.456 684.182 L803.016 684.182 L803.575 684.182 L804.134 684.182 L804.693 684.182 L805.253 684.182 L805.812 684.182 L806.371 684.182 L806.931 684.182 L807.49 684.182 L808.049 684.182 L808.608 684.182 L809.168 684.182 L809.727 684.182 L810.286 684.182 L810.845 684.182 L811.405 684.182 L811.964 684.182 L812.523 684.182 L813.082 684.182 L813.642 684.182 L814.201 684.182 L814.76 684.182 L815.319 684.182 L815.879 684.182 L816.438 684.182 L816.997 684.182 L817.556 684.182 L818.116 684.182 L818.675 684.182 L819.234 684.182 L819.793 684.182 L820.353 684.182 L820.912 684.182 L821.471 684.182 L822.03 684.182 L822.59 684.182 L823.149 684.182 L823.708 684.182 L824.267 684.182 L824.827 684.182 L825.386 684.182 L825.945 684.182 L826.504 684.182 L827.064 684.182 L827.623 684.182 L828.182 684.182 L828.741 684.182 L829.301 684.182 L829.86 684.182 L830.419 684.182 L830.978 684.182 L831.538 684.182 L832.097 684.182 L832.656 684.182 L833.215 684.182 L833.775 684.182 L834.334 684.182 L834.893 684.182 L835.452 684.182 L836.012 684.182 L836.571 684.182 L837.13 684.182 L837.689 684.182 L838.249 684.182 L838.808 684.182 L839.367 684.182 L839.926 684.182 L840.486 684.182 L841.045 684.182 L841.604 684.182 L842.163 684.182 L842.723 684.182 L843.282 684.182 L843.841 684.182 L844.4 684.182 L844.96 684.182 L845.519 684.182 L846.078 684.182 L846.637 684.182 L847.197 684.182 L847.756 684.182 L848.315 684.182 L848.874 684.182 L849.434 684.182 L849.993 684.182 L850.552 684.182 L851.111 684.182 L851.671 684.182 L852.23 684.182 L852.789 684.182 L853.348 684.182 L853.908 684.182 L854.467 684.182 L855.026 684.182 L855.585 684.182 L856.145 684.182 L856.704 684.182 L857.263 684.182 L857.822 684.182 L858.382 684.182 L858.941 684.182 L859.5 684.182 L860.059 684.182 L860.619 684.182 L861.178 684.182 L861.737 684.182 L862.296 684.182 L862.856 684.182 L863.415 684.182 L863.974 684.182 L864.533 684.182 L865.093 684.182 L865.652 684.182 L866.211 684.182 L866.77 684.182 L867.33 684.182 L867.889 684.182 L868.448 684.182 L869.007 684.182 L869.567 684.182 L870.126 684.182 L870.685 684.182 L871.244 684.182 L871.804 684.182 L872.363 684.182 L872.922 684.182 L873.481 684.182 L874.041 684.182 L874.6 684.182 L875.159 684.182 L875.718 684.182 L876.278 684.182 L876.837 684.182 L877.396 684.182 L877.955 684.182 L878.515 684.182 L879.074 684.182 L879.633 684.182 L880.192 684.182 L880.752 684.182 L881.311 684.182 L881.87 684.182 L882.429 684.182 L882.989 684.182 L883.548 684.182 L884.107 684.182 L884.666 684.182 L885.226 684.182 L885.785 684.182 L886.344 684.182 L886.903 684.182 L887.463 684.182 L888.022 684.182 L888.581 684.182 L889.14 684.182 L889.7 684.182 L890.259 684.182 L890.818 684.182 L891.377 684.182 L891.937 684.182 L892.496 684.182 L893.055 684.182 L893.614 684.182 L894.174 684.182 L894.733 684.182 L895.292 684.182 L895.851 684.182 L896.411 684.182 L896.97 684.182 L897.529 684.182 L898.088 684.182 L898.648 684.182 L899.207 684.182 L899.766 684.182 L900.325 684.182 L900.885 684.182 L901.444 684.182 L902.003 684.182 L902.562 684.182 L903.122 684.182 L903.681 684.182 L904.24 684.182 L904.799 684.182 L905.359 684.182 L905.918 684.182 L906.477 684.182 L907.036 684.182 L907.596 684.182 L908.155 684.182 L908.714 684.182 L909.273 684.182 L909.833 684.182 L910.392 684.182 L910.951 684.182 L911.51 684.182 L912.07 684.182 L912.629 684.182 L913.188 684.182 L913.747 684.182 L914.307 684.182 L914.866 684.182 L915.425 684.182 L915.984 684.182 L916.544 684.182 L917.103 684.182 L917.662 684.182 L918.221 684.182 L918.781 684.182 L919.34 684.182 L919.899 684.182 L920.458 684.182 L921.018 684.182 L921.577 684.182 L922.136 684.182 L922.695 684.182 L923.255 684.182 L923.814 684.182 L924.373 684.182 L924.932 684.182 L925.492 684.182 L926.051 684.182 L926.61 684.182 L927.169 684.182 L927.729 684.182 L928.288 684.182 L928.847 684.182 L929.406 684.182 L929.966 684.182 L930.525 684.182 L931.084 684.182 L931.644 684.182 L932.203 684.182 L932.762 684.182 L933.321 684.182 L933.881 684.182 L934.44 684.182 L934.999 684.182 L935.558 684.182 L936.118 684.182 L936.677 684.182 L937.236 684.182 L937.795 684.182 L938.355 684.182 L938.914 684.182 L939.473 684.182 L940.032 684.182 L940.592 684.182 L941.151 684.182 L941.71 684.182 L942.269 684.182 L942.829 684.182 L943.388 684.182 L943.947 684.182 L944.506 684.182 L945.066 684.182 L945.625 684.182 L946.184 684.182 L946.743 684.182 L947.303 684.182 L947.862 684.182 L948.421 684.182 L948.98 684.182 L949.54 684.182 L950.099 684.182 L950.658 684.182 L951.217 684.182 L951.777 684.182 L952.336 684.182 L952.895 684.182 L953.454 684.182 L954.014 684.182 L954.573 684.182 L955.132 684.182 L955.691 684.182 L956.251 684.182 L956.81 684.182 L957.369 684.182 L957.928 684.182 L958.488 684.182 L959.047 684.182 L959.606 684.182 L960.165 684.182 L960.725 684.182 L961.284 684.182 L961.843 684.182 L962.402 684.182 L962.962 684.182 L963.521 684.182 L964.08 684.182 L964.639 684.182 L965.199 684.182 L965.758 684.182 L966.317 684.182 L966.876 684.182 L967.436 684.182 L967.995 684.182 L968.554 684.182 L969.113 684.182 L969.673 684.182 L970.232 684.182 L970.791 684.182 L971.35 684.182 L971.91 684.182 L972.469 684.182 L973.028 684.182 L973.587 684.182 L974.147 684.182 L974.706 684.182 L975.265 684.182 L975.824 684.182 L976.384 684.182 L976.943 684.182 L977.502 684.182 L978.061 684.182 L978.621 684.182 L979.18 684.182 L979.739 684.182 L980.298 684.182 L980.858 684.182 L981.417 684.182 L981.976 684.182 L982.535 684.182 L983.095 684.182 L983.654 684.182 L984.213 684.182 L984.772 684.182 L985.332 684.182 L985.891 684.182 L986.45 684.182 L987.009 684.182 L987.569 684.182 L988.128 684.182 L988.687 684.182 L989.246 684.182 L989.806 684.182 L990.365 684.182 L990.924 684.182 L991.483 684.182 L992.043 684.182 L992.602 684.182 L993.161 684.182 L993.72 684.182 L994.28 684.182 L994.839 684.182 L995.398 684.182 L995.957 684.182 L996.517 684.182 L997.076 684.182 L997.635 684.182 L998.194 684.182 L998.754 684.182 L999.313 684.182 L999.872 684.182 L1000.43 684.182 L1000.99 684.182 L1001.55 684.182 L1002.11 684.182 L1002.67 684.182 L1003.23 684.182 L1003.79 684.182 L1004.35 684.182 L1004.91 684.182 L1005.46 684.182 L1006.02 684.182 L1006.58 684.182 L1007.14 684.182 L1007.7 684.182 L1008.26 684.182 L1008.82 684.182 L1009.38 684.182 L1009.94 684.182 L1010.5 684.182 L1011.06 684.182 L1011.62 684.182 L1012.18 684.182 L1012.73 684.182 L1013.29 684.182 L1013.85 684.182 L1014.41 684.182 L1014.97 684.182 L1015.53 684.182 L1016.09 684.182 L1016.65 684.182 L1017.21 684.182 L1017.77 684.182 L1018.33 684.182 L1018.89 684.182 L1019.45 684.182 L1020.01 684.182 L1020.56 684.182 L1021.12 684.182 L1021.68 684.182 L1022.24 684.182 L1022.8 684.182 L1023.36 684.182 L1023.92 684.182 L1024.48 684.182 L1025.04 684.182 L1025.6 684.182 L1026.16 684.182 L1026.72 684.182 L1027.28 684.182 L1027.83 684.182 L1028.39 684.182 L1028.95 684.182 L1029.51 684.182 L1030.07 684.182 L1030.63 684.182 L1031.19 684.182 L1031.75 684.182 L1032.31 684.182 L1032.87 684.182 L1033.43 684.182 L1033.99 684.182 L1034.55 684.182 L1035.1 684.182 L1035.66 684.182 L1036.22 684.182 L1036.78 684.182 L1037.34 684.182 L1037.9 684.182 L1038.46 684.182 L1039.02 684.182 L1039.58 684.182 L1040.14 684.182 L1040.7 684.182 L1041.26 684.182 L1041.82 684.182 L1042.38 684.182 L1042.93 684.182 L1043.49 684.182 L1044.05 684.182 L1044.61 684.182 L1045.17 684.182 L1045.73 684.182 L1046.29 684.182 L1046.85 684.182 L1047.41 684.182 L1047.97 684.182 L1048.53 684.182 L1049.09 684.182 L1049.65 684.182 L1050.2 684.182 L1050.76 684.182 L1051.32 684.182 L1051.88 684.182 L1052.44 684.182 L1053 684.182 L1053.56 684.182 L1054.12 684.182 L1054.68 684.182 L1055.24 684.182 L1055.8 684.182 L1056.36 684.182 L1056.92 684.182 L1057.48 684.182 L1058.03 684.182 L1058.59 684.182 L1059.15 684.182 L1059.71 684.182 L1060.27 684.182 L1060.83 684.182 L1061.39 684.182 L1061.95 684.182 L1062.51 684.182 L1063.07 684.182 L1063.63 684.182 L1064.19 684.182 L1064.75 684.182 L1065.3 684.182 L1065.86 684.182 L1066.42 684.182 L1066.98 684.182 L1067.54 684.182 L1068.1 684.182 L1068.66 684.182 L1069.22 684.182 L1069.78 684.182 L1070.34 684.182 L1070.9 684.182 L1071.46 684.182 L1072.02 684.182 L1072.57 684.182 L1073.13 684.182 L1073.69 684.182 L1074.25 684.182 L1074.81 684.182 L1075.37 684.182 L1075.93 684.182 L1076.49 684.182 L1077.05 684.182 L1077.61 684.182 L1078.17 684.182 L1078.73 684.182 L1079.29 684.182 L1079.85 684.182 L1080.4 684.182 L1080.96 684.182 L1081.52 684.182 L1082.08 684.182 L1082.64 684.182 L1083.2 684.182 L1083.76 684.182 L1084.32 684.182 L1084.88 684.182 L1085.44 684.182 L1086 684.182 L1086.56 684.182 L1087.12 684.182 L1087.67 684.182 L1088.23 684.182 L1088.79 684.182 L1089.35 684.182 L1089.91 684.182 L1090.47 684.182 L1091.03 684.182 L1091.59 684.182 L1092.15 684.182 L1092.71 684.182 L1093.27 684.182 L1093.83 684.182 L1094.39 684.182 L1094.94 684.182 L1095.5 684.182 L1096.06 684.182 L1096.62 684.182 L1097.18 684.182 L1097.74 684.182 L1098.3 684.182 L1098.86 684.182 L1099.42 684.182 L1099.98 684.182 L1100.54 684.182 L1101.1 684.182 L1101.66 684.182 L1102.22 684.182 L1102.77 684.182 L1103.33 684.182 L1103.89 684.182 L1104.45 684.182 L1105.01 684.182 L1105.57 684.182 L1106.13 684.182 L1106.69 684.182 L1107.25 684.182 L1107.81 684.182 L1108.37 684.182 L1108.93 684.182 L1109.49 684.182 L1110.04 684.182 L1110.6 684.182 L1111.16 684.182 L1111.72 684.182 L1112.28 684.182 L1112.84 684.182 L1113.4 684.182 L1113.96 684.182 L1114.52 684.182 L1115.08 684.182 L1115.64 684.182 L1116.2 684.182 L1116.76 684.182 L1117.31 684.182 L1117.87 684.182 L1118.43 684.182 L1118.99 684.182 L1119.55 684.182 L1120.11 684.182 L1120.67 684.182 L1121.23 684.182 L1121.79 684.182 L1122.35 684.182 L1122.91 684.182 L1123.47 684.182 L1124.03 684.182 L1124.59 684.182 L1125.14 684.182 L1125.7 684.182 L1126.26 684.182 L1126.82 684.182 L1127.38 684.182 L1127.94 684.182 L1128.5 684.182 L1129.06 684.182 L1129.62 684.182 L1130.18 684.182 L1130.74 684.182 L1131.3 684.182 L1131.86 684.182 L1132.41 684.182 L1132.97 684.182 L1133.53 684.182 L1134.09 684.182 L1134.65 684.182 L1135.21 684.182 L1135.77 684.182 L1136.33 684.182 L1136.89 684.182 L1137.45 684.182 L1138.01 684.182 L1138.57 684.182 L1139.13 684.182 L1139.68 684.182 L1140.24 684.182 L1140.8 684.182 L1141.36 684.182 L1141.92 684.182 L1142.48 684.182 L1143.04 684.182 L1143.6 684.182 L1144.16 684.182 L1144.72 684.182 L1145.28 684.182 L1145.84 684.182 L1146.4 684.182 L1146.96 684.182 L1147.51 684.182 L1148.07 684.182 L1148.63 684.182 L1149.19 684.182 L1149.75 684.182 L1150.31 684.182 L1150.87 684.182 L1151.43 684.182 L1151.99 684.182 L1152.55 684.182 L1153.11 684.182 L1153.67 684.182 L1154.23 684.182 L1154.78 684.182 L1155.34 684.182 L1155.9 684.182 L1156.46 684.182 L1157.02 684.182 L1157.58 684.182 L1158.14 684.182 L1158.7 684.182 L1159.26 684.182 L1159.82 684.182 L1160.38 684.182 L1160.94 684.182 L1161.5 684.182 L1162.05 684.182 L1162.61 684.182 L1163.17 684.182 L1163.73 684.182 L1164.29 684.182 L1164.85 684.182 L1165.41 684.182 L1165.97 684.182 L1166.53 684.182 L1167.09 684.182 L1167.65 684.182 L1168.21 684.182 L1168.77 684.182 L1169.33 684.182 L1169.88 684.182 L1170.44 684.182 L1171 684.182 L1171.56 684.182 L1172.12 684.182 L1172.68 684.182 L1173.24 684.182 L1173.8 684.182 L1174.36 684.182 L1174.92 684.182 L1175.48 684.182 L1176.04 684.182 L1176.6 684.182 L1177.15 684.182 L1177.71 684.182 L1178.27 684.182 L1178.83 684.182 L1179.39 684.182 L1179.95 684.182 L1180.51 684.182 L1181.07 684.182 L1181.63 684.182 L1182.19 684.182 L1182.75 684.182 L1183.31 684.182 L1183.87 684.182 L1184.43 684.182 L1184.98 684.182 L1185.54 684.182 L1186.1 684.182 L1186.66 684.182 L1187.22 684.182 L1187.78 684.182 L1188.34 684.182 L1188.9 684.182 L1189.46 684.182 L1190.02 684.182 L1190.58 684.182 L1191.14 684.182 L1191.7 684.182 L1192.25 684.182 L1192.81 684.182 L1193.37 684.182 L1193.93 684.182 L1194.49 684.182 L1195.05 684.182 L1195.61 684.182 L1196.17 684.182 L1196.73 684.182 L1197.29 684.182 L1197.85 684.182 L1198.41 684.182 L1198.97 684.182 L1199.52 684.182 L1200.08 684.182 L1200.64 684.182 L1201.2 684.182 L1201.76 684.182 L1202.32 684.182 L1202.88 684.182 L1203.44 684.182 L1204 684.182 L1204.56 684.182 L1205.12 684.182 L1205.68 684.182 L1206.24 684.182 L1206.8 684.182 L1207.35 684.182 L1207.91 684.182 L1208.47 684.182 L1209.03 684.182 L1209.59 684.182 L1210.15 684.182 L1210.71 684.182 L1211.27 684.182 L1211.83 684.182 L1212.39 684.182 L1212.95 684.182 L1213.51 684.182 L1214.07 684.182 L1214.62 684.182 L1215.18 684.182 L1215.74 684.182 L1216.3 684.182 L1216.86 684.182 L1217.42 684.182 L1217.98 684.182 L1218.54 684.182 L1219.1 684.182 L1219.66 684.182 L1220.22 684.182 L1220.78 684.182 L1221.34 684.182 L1221.89 684.182 L1222.45 684.182 L1223.01 684.182 L1223.57 684.182 L1224.13 684.182 L1224.69 684.182 L1225.25 684.182 L1225.81 684.182 L1226.37 684.182 L1226.93 684.182 L1227.49 684.182 L1228.05 684.182 L1228.61 684.182 L1229.17 684.182 L1229.72 684.182 L1230.28 684.182 L1230.84 684.182 L1231.4 684.182 L1231.96 684.182 L1232.52 684.182 L1233.08 684.182 L1233.64 684.182 L1234.2 684.182 L1234.76 684.182 L1235.32 684.182 L1235.88 684.182 L1236.44 684.182 L1236.99 684.182 L1237.55 684.182 L1238.11 684.182 L1238.67 684.182 L1239.23 684.182 L1239.79 684.182 L1240.35 684.182 L1240.91 684.182 L1241.47 684.182 L1242.03 684.182 L1242.59 684.182 L1243.15 684.182 L1243.71 684.182 L1244.26 684.182 L1244.82 684.182 L1245.38 684.182 L1245.94 684.182 L1246.5 684.182 L1247.06 684.182 L1247.62 684.182 L1248.18 684.182 L1248.74 684.182 L1249.3 684.182 L1249.86 684.182 L1250.42 684.182 L1250.98 684.182 L1251.54 684.182 L1252.09 684.182 L1252.65 684.182 L1253.21 684.182 L1253.77 684.182 L1254.33 684.182 L1254.89 684.182 L1255.45 684.182 L1256.01 684.182 L1256.57 684.182 L1257.13 684.182 L1257.69 684.182 L1258.25 684.182 L1258.81 684.182 L1259.36 684.182 L1259.92 684.182 L1260.48 684.182 L1261.04 684.182 L1261.6 684.182 L1262.16 684.182 L1262.72 684.182 L1263.28 684.182 L1263.84 684.182 L1264.4 684.182 L1264.96 684.182 L1265.52 684.182 L1266.08 684.182 L1266.63 684.182 L1267.19 684.182 L1267.75 684.182 L1268.31 684.182 L1268.87 684.182 L1269.43 684.182 L1269.99 684.182 L1270.55 684.182 L1271.11 684.182 L1271.67 684.182 L1272.23 684.182 L1272.79 684.182 L1273.35 684.182 L1273.91 684.182 L1274.46 684.182 L1275.02 684.182 L1275.58 684.182 L1276.14 684.182 L1276.7 684.182 L1277.26 684.182 L1277.82 684.182 L1278.38 684.182 L1278.94 684.182 L1279.5 684.182 L1280.06 684.182 L1280.62 684.182 L1281.18 684.182 L1281.73 684.182 L1282.29 684.182 L1282.85 684.182 L1283.41 684.182 L1283.97 684.182 L1284.53 684.182 L1285.09 684.182 L1285.65 684.182 L1286.21 684.182 L1286.77 684.182 L1287.33 684.182 L1287.89 684.182 L1288.45 684.182 L1289 684.182 L1289.56 684.182 L1290.12 684.182 L1290.68 684.182 L1291.24 684.182 L1291.8 684.182 L1292.36 684.182 L1292.92 684.182 L1293.48 684.182 L1294.04 684.182 L1294.6 684.182 L1295.16 684.182 L1295.72 684.182 L1296.28 684.182 L1296.83 684.182 L1297.39 684.182 L1297.95 684.182 L1298.51 684.182 L1299.07 684.182 L1299.63 684.182 L1300.19 684.182 L1300.75 684.182 L1301.31 684.182 L1301.87 684.182 L1302.43 684.182 L1302.99 684.182 L1303.55 684.182 L1304.1 684.182 L1304.66 684.182 L1305.22 684.182 L1305.78 684.182 L1306.34 684.182 L1306.9 684.182 L1307.46 684.182 L1308.02 684.182 L1308.58 684.182 L1309.14 684.182 L1309.7 684.182 L1310.26 684.182 L1310.82 684.182 L1311.38 684.182 L1311.93 684.182 L1312.49 684.182 L1313.05 684.182 L1313.61 684.182 L1314.17 684.182 L1314.73 684.182 L1315.29 684.182 L1315.85 684.182 L1316.41 684.182 L1316.97 684.182 L1317.53 684.182 L1318.09 684.182 L1318.65 684.182 L1319.2 684.182 L1319.76 684.182 L1320.32 684.182 L1320.88 684.182 L1321.44 684.182 L1322 684.182 L1322.56 684.182 L1323.12 684.182 L1323.68 684.182 L1324.24 684.182 L1324.8 684.182 L1325.36 684.182 L1325.92 684.182 L1326.47 684.182 L1327.03 684.182 L1327.59 684.182 L1328.15 684.182 L1328.71 684.182 L1329.27 684.182 L1329.83 684.182 L1330.39 684.182 L1330.95 684.182 L1331.51 684.182 L1332.07 684.182 L1332.63 684.182 L1333.19 684.182 L1333.75 684.182 L1334.3 684.182 L1334.86 684.182 L1335.42 684.182 L1335.98 684.182 L1336.54 684.182 L1337.1 684.182 L1337.66 684.182 L1338.22 684.182 L1338.78 684.182 L1339.34 684.182 L1339.9 684.182 L1340.46 684.182 L1341.02 684.182 L1341.57 684.182 L1342.13 684.182 L1342.69 684.182 L1343.25 684.182 L1343.81 684.182 L1344.37 684.182 L1344.93 684.182 L1345.49 684.182 L1346.05 684.182 L1346.61 684.182 L1347.17 684.182 L1347.73 684.182 L1348.29 684.182 L1348.84 684.182 L1349.4 684.182 L1349.96 684.182 L1350.52 684.182 L1351.08 684.182 L1351.64 684.182 L1352.2 684.182 L1352.76 684.182 L1353.32 684.182 L1353.88 684.182 L1354.44 684.182 L1355 684.182 L1355.56 684.182 L1356.12 684.182 L1356.67 684.182 L1357.23 684.182 L1357.79 684.182 L1358.35 684.182 L1358.91 684.182 L1359.47 684.182 L1360.03 684.182 L1360.59 684.182 L1361.15 684.182 L1361.71 684.182 L1362.27 684.182 L1362.83 684.182 L1363.39 684.182 L1363.94 684.182 L1364.5 684.182 L1365.06 684.182 L1365.62 684.182 L1366.18 684.182 L1366.74 684.182 L1367.3 684.182 L1367.86 684.182 L1368.42 684.182 L1368.98 684.182 L1369.54 684.182 L1370.1 684.182 L1370.66 684.182 L1371.21 684.182 L1371.77 684.182 L1372.33 684.182 L1372.89 684.182 L1373.45 684.182 L1374.01 684.182 L1374.57 684.182 L1375.13 684.182 L1375.69 684.182 L1376.25 684.182 L1376.81 684.182 L1377.37 684.182 L1377.93 684.182 L1378.49 684.182 L1379.04 684.182 L1379.6 684.182 L1380.16 684.182 L1380.72 684.182 L1381.28 684.182 L1381.84 684.182 L1382.4 684.182 L1382.96 684.182 L1383.52 684.182 L1384.08 684.182 L1384.64 684.182 L1385.2 684.182 L1385.76 684.182 L1386.31 684.182 L1386.87 684.182 L1387.43 684.182 L1387.99 684.182 L1388.55 684.182 L1389.11 684.182 L1389.67 684.182 L1390.23 684.182 L1390.79 684.182 L1391.35 684.182 L1391.91 684.182 L1392.47 684.182 L1393.03 684.182 L1393.58 684.182 L1394.14 684.182 L1394.7 684.182 L1395.26 684.182 L1395.82 684.182 L1396.38 684.182 L1396.94 684.182 L1397.5 684.182 L1398.06 684.182 L1398.62 684.182 L1399.18 684.182 L1399.74 684.182 L1400.3 684.182 L1400.86 684.182 L1401.41 684.182 L1401.97 684.182 L1402.53 684.182 L1403.09 684.182 L1403.65 684.182 L1404.21 684.182 L1404.77 684.182 L1405.33 684.182 L1405.89 684.182 L1406.45 684.182 L1407.01 684.182 L1407.57 684.182 L1408.13 684.182 L1408.68 684.182 L1409.24 684.182 L1409.8 684.182 L1410.36 684.182 L1410.92 684.182 L1411.48 684.182 L1412.04 684.182 L1412.6 684.182 L1413.16 684.182 L1413.72 684.182 L1414.28 684.182 L1414.84 684.182 L1415.4 684.182 L1415.95 684.182 L1416.51 684.182 L1417.07 684.182 L1417.63 684.182 L1418.19 684.182 L1418.75 684.182 L1419.31 684.182 L1419.87 684.182 L1420.43 684.182 L1420.99 684.182 L1421.55 684.182 L1422.11 684.182 L1422.67 684.182 L1423.23 684.182 L1423.78 684.182 L1424.34 684.182 L1424.9 684.182 L1425.46 684.182 L1426.02 684.182 L1426.58 684.182 L1427.14 684.182 L1427.7 684.182 L1428.26 684.182 L1428.82 684.182 L1429.38 684.182 L1429.94 684.182 L1430.5 684.182 L1431.05 684.182 L1431.61 684.182 L1432.17 684.182 L1432.73 684.182 L1433.29 684.182 L1433.85 684.182 L1434.41 684.182 L1434.97 684.182 L1435.53 684.182 L1436.09 684.182 L1436.65 684.182 L1437.21 684.182 L1437.77 684.182 L1438.33 684.182 L1438.88 684.182 L1439.44 684.182 L1440 684.182 L1440.56 684.182 L1441.12 684.182 L1441.68 684.182 L1442.24 684.182 L1442.8 684.182 L1443.36 684.182 L1443.92 684.182 L1444.48 684.182 L1445.04 684.182 L1445.6 684.182 L1446.15 684.182 L1446.71 684.182 L1447.27 684.182 L1447.83 684.182 L1448.39 684.182 L1448.95 684.182 L1449.51 684.182 L1450.07 684.182 L1450.63 684.182 L1451.19 684.182 L1451.75 684.182 L1452.31 684.182 L1452.87 684.182 L1453.42 684.182 L1453.98 684.182 L1454.54 684.182 L1455.1 684.182 L1455.66 684.182 L1456.22 684.182 L1456.78 684.182 L1457.34 684.182 L1457.9 684.182 L1458.46 684.182 L1459.02 684.182 L1459.58 684.182 L1460.14 684.182 L1460.7 684.182 L1461.25 684.182 L1461.81 684.182 L1462.37 684.182 L1462.93 684.182 L1463.49 684.182 L1464.05 684.182 L1464.61 684.182 L1465.17 684.182 L1465.73 684.182 L1466.29 684.182 L1466.85 684.182 L1467.41 684.182 L1467.97 684.182 L1468.52 684.182 L1469.08 684.182 L1469.64 684.182 L1470.2 684.182 L1470.76 684.182 L1471.32 684.182 L1471.88 684.182 L1472.44 684.182 L1473 684.182 L1473.56 684.182 L1474.12 684.182 L1474.68 684.182 L1475.24 684.182 L1475.79 684.182 L1476.35 684.182 L1476.91 684.182 L1477.47 684.182 L1478.03 684.182 L1478.59 684.182 L1479.15 684.182 L1479.71 684.182 L1480.27 684.182 L1480.83 684.182 L1481.39 684.182 L1481.95 684.182 L1482.51 684.182 L1483.07 684.182 L1483.62 684.182 L1484.18 684.182 L1484.74 684.182 L1485.3 684.182 L1485.86 684.182 L1486.42 684.182 L1486.98 684.182 L1487.54 684.182 L1488.1 684.182 L1488.66 684.182 L1489.22 684.182 L1489.78 684.182 L1490.34 684.182 L1490.89 684.182 L1491.45 684.182 L1492.01 684.182 L1492.57 684.182 L1493.13 684.182 L1493.69 684.182 L1494.25 684.182 L1494.81 684.182 L1495.37 684.182 L1495.93 684.182 L1496.49 684.182 L1497.05 684.182 L1497.61 684.182 L1498.16 684.182 L1498.72 684.182 L1499.28 684.182 L1499.84 684.182 L1500.4 684.182 L1500.96 684.182 L1501.52 684.182 L1502.08 684.182 L1502.64 684.182 L1503.2 684.182 L1503.76 684.182 L1504.32 684.182 L1504.88 684.182 L1505.44 684.182 L1505.99 684.182 L1506.55 684.182 L1507.11 684.182 L1507.67 684.182 L1508.23 684.182 L1508.79 684.182 L1509.35 684.182 L1509.91 684.182 L1510.47 684.182 L1511.03 684.182 L1511.59 684.182 L1512.15 684.182 L1512.71 684.182 L1513.26 684.182 L1513.82 684.182 L1514.38 684.182 L1514.94 684.182 L1515.5 684.182 L1516.06 684.182 L1516.62 684.182 L1517.18 684.182 L1517.74 684.182 L1518.3 684.182 L1518.86 684.182 L1519.42 684.182 L1519.98 684.182 L1520.53 684.182 L1521.09 684.182 L1521.65 684.182 L1522.21 684.182 L1522.77 684.182 L1523.33 684.182 L1523.89 684.182 L1524.45 684.182 L1525.01 684.182 L1525.57 684.182 L1526.13 684.182 L1526.69 684.182 L1527.25 684.182 L1527.81 684.182 L1528.36 684.182 L1528.92 684.182 L1529.48 684.182 L1530.04 684.182 L1530.6 684.182 L1531.16 684.182 L1531.72 684.182 L1532.28 684.182 L1532.84 684.182 L1533.4 684.182 L1533.96 684.182 L1534.52 684.182 L1535.08 684.182 L1535.63 684.182 L1536.19 684.182 L1536.75 684.182 L1537.31 684.182 L1537.87 684.182 L1538.43 684.182 L1538.99 684.182 L1539.55 684.182 L1540.11 684.182 L1540.67 684.182 L1541.23 684.182 L1541.79 684.182 L1542.35 684.182 L1542.9 684.182 L1543.46 684.182 L1544.02 684.182 L1544.58 684.182 L1545.14 684.182 L1545.7 684.182 L1546.26 684.182 L1546.82 684.182 L1547.38 684.182 L1547.94 684.182 L1548.5 684.182 L1549.06 684.182 L1549.62 684.182 L1550.18 684.182 L1550.73 684.182 L1551.29 684.182 L1551.85 684.182 L1552.41 684.182 L1552.97 684.182 L1553.53 684.182 L1554.09 684.182 L1554.65 684.182 L1555.21 684.182 L1555.77 684.182 L1556.33 684.182 L1556.89 684.182 L1557.45 684.182 L1558 684.182 L1558.56 684.182 L1559.12 684.182 L1559.68 684.182 L1560.24 684.182 L1560.8 684.182 L1561.36 684.182 L1561.92 684.182 L1562.48 684.182 L1563.04 684.182 L1563.6 684.182 L1564.16 684.182 L1564.72 684.182 L1565.28 684.182 L1565.83 684.182 L1566.39 684.182 L1566.95 684.182 L1567.51 684.182 L1568.07 684.182 L1568.63 684.182 L1569.19 684.182 L1569.75 684.182 L1570.31 684.182 L1570.87 684.182 L1571.43 684.182 L1571.99 684.182 L1572.55 684.182 L1573.1 684.182 L1573.66 684.182 L1574.22 684.182 L1574.78 684.182 L1575.34 684.182 L1575.9 684.182 L1576.46 684.182 L1577.02 684.182 L1577.58 684.182 L1578.14 684.182 L1578.7 684.182 L1579.26 684.182 L1579.82 684.182 L1580.37 684.182 L1580.93 684.182 L1581.49 684.182 L1582.05 684.182 L1582.61 684.182 L1583.17 684.182 L1583.73 684.182 L1584.29 684.182 L1584.85 684.182 L1585.41 684.182 L1585.97 684.182 L1586.53 684.182 L1587.09 684.182 L1587.65 684.182 L1588.2 684.182 L1588.76 684.182 L1589.32 684.182 L1589.88 684.182 L1590.44 684.182 L1591 684.182 L1591.56 684.182 L1592.12 684.182 L1592.68 684.182 L1593.24 684.182 L1593.8 684.182 L1594.36 684.182 L1594.92 684.182 L1595.47 684.182 L1596.03 684.182 L1596.59 684.182 L1597.15 684.182 L1597.71 684.182 L1598.27 684.182 L1598.83 684.182 L1599.39 684.182 L1599.95 684.182 L1600.51 684.182 L1601.07 684.182 L1601.63 684.182 L1602.19 684.182 L1602.74 684.182 L1603.3 684.182 L1603.86 684.182 L1604.42 684.182 L1604.98 684.182 L1605.54 684.182 L1606.1 684.182 L1606.66 684.182 L1607.22 684.182 L1607.78 684.182 L1608.34 684.182 L1608.9 684.182 L1609.46 684.182 L1610.02 684.182 L1610.57 684.182 L1611.13 684.182 L1611.69 684.182 L1612.25 684.182 L1612.81 684.182 L1613.37 684.182 L1613.93 684.182 L1614.49 684.182 L1615.05 684.182 L1615.61 684.182 L1616.17 684.182 L1616.73 684.182 L1617.29 684.182 L1617.84 684.182 L1618.4 684.182 L1618.96 684.182 L1619.52 684.182 L1620.08 684.182 L1620.64 684.182 L1621.2 684.182 L1621.76 684.182 L1622.32 684.182 L1622.88 684.182 L1623.44 684.182 L1624 684.182 L1624.56 684.182 L1625.11 684.182 L1625.67 684.182 L1626.23 684.182 L1626.79 684.182 L1627.35 684.182 L1627.91 684.182 L1628.47 684.182 L1629.03 684.182 L1629.59 684.182 L1630.15 684.182 L1630.71 684.182 L1631.27 684.182 L1631.83 684.182 L1632.39 684.182 L1632.94 684.182 L1633.5 684.182 L1634.06 684.182 L1634.62 684.182 L1635.18 684.182 L1635.74 684.182 L1636.3 684.182 L1636.86 684.182 L1637.42 684.182 L1637.98 684.182 L1638.54 684.182 L1639.1 684.182 L1639.66 684.182 L1640.21 684.182 L1640.77 684.182 L1641.33 684.182 L1641.89 684.182 L1642.45 684.182 L1643.01 684.182 L1643.57 684.182 L1644.13 684.182 L1644.69 684.182 L1645.25 684.182 L1645.81 684.182 L1646.37 684.182 L1646.93 684.182 L1647.48 684.182 L1648.04 684.182 L1648.6 684.182 L1649.16 684.182 L1649.72 684.182 L1650.28 684.182 L1650.84 684.182 L1651.4 684.182 L1651.96 684.182 L1652.52 684.182 L1653.08 684.182 L1653.64 684.182 L1654.2 684.182 L1654.76 684.182 L1655.31 684.182 L1655.87 684.182 L1656.43 684.182 L1656.99 684.182 L1657.55 684.182 L1658.11 684.182 L1658.67 684.182 L1659.23 684.182 L1659.79 684.182 L1660.35 684.182 L1660.91 684.182 L1661.47 684.182 L1662.03 684.182 L1662.58 684.182 L1663.14 684.182 L1663.7 684.182 L1664.26 684.182 L1664.82 684.182 L1665.38 684.182 L1665.94 684.182 L1666.5 684.182 L1667.06 684.182 L1667.62 684.182 L1668.18 684.182 L1668.74 684.182 L1669.3 684.182 L1669.85 684.182 L1670.41 684.182 L1670.97 684.182 L1671.53 684.182 L1672.09 684.182 L1672.65 684.182 L1673.21 684.182 L1673.77 684.182 L1674.33 684.182 L1674.89 684.182 L1675.45 684.182 L1676.01 684.182 L1676.57 684.182 L1677.13 684.182 L1677.68 684.182 L1678.24 684.182 L1678.8 684.182 L1679.36 684.182 L1679.92 684.182 L1680.48 684.182 L1681.04 684.182 L1681.6 684.182 L1682.16 684.182 L1682.72 684.182 L1683.28 684.182 L1683.84 684.182 L1684.4 684.182 L1684.95 684.182 L1685.51 684.182 L1686.07 684.182 L1686.63 684.182 L1687.19 684.182 L1687.75 684.182 L1688.31 684.182 L1688.87 684.182 L1689.43 684.182 L1689.99 684.182 L1690.55 684.182 L1691.11 684.182 L1691.67 684.182 L1692.23 684.182 L1692.78 684.182 L1693.34 684.182 L1693.9 684.182 L1694.46 684.182 L1695.02 684.182 L1695.58 684.182 L1696.14 684.182 L1696.7 684.182 L1697.26 684.182 L1697.82 684.182 L1698.38 684.182 L1698.94 684.182 L1699.5 684.182 L1700.05 684.182 L1700.61 684.182 L1701.17 684.182 L1701.73 684.182 L1702.29 684.182 L1702.85 684.182 L1703.41 684.182 L1703.97 684.182 L1704.53 684.182 L1705.09 684.182 L1705.65 684.182 L1706.21 684.182 L1706.77 684.182 L1707.32 684.182 L1707.88 684.182 L1708.44 684.182 L1709 684.182 L1709.56 684.182 L1710.12 684.182 L1710.68 684.182 L1711.24 684.182 L1711.8 684.182 L1712.36 684.182 L1712.92 684.182 L1713.48 684.182 L1714.04 684.182 L1714.6 684.182 L1715.15 684.182 L1715.71 684.182 L1716.27 684.182 L1716.83 684.182 L1717.39 684.182 L1717.95 684.182 L1718.51 684.182 L1719.07 684.182 L1719.63 684.182 L1720.19 684.182 L1720.75 684.182 L1721.31 684.182 L1721.87 684.182 L1722.42 684.182 L1722.98 684.182 L1723.54 684.182 L1724.1 684.182 L1724.66 684.182 L1725.22 684.182 L1725.78 684.182 L1726.34 684.182 L1726.9 684.182 L1727.46 684.182 L1728.02 684.182 L1728.58 684.182 L1729.14 684.182 L1729.69 684.182 L1730.25 684.182 L1730.81 684.182 L1731.37 684.182 L1731.93 684.182 L1732.49 684.182 L1733.05 684.182 L1733.61 684.182 L1734.17 684.182 L1734.73 684.182 L1735.29 684.182 L1735.85 684.182 L1736.41 684.182 L1736.97 684.182 L1737.52 684.182 L1738.08 684.182 L1738.64 684.182 L1739.2 684.182 L1739.76 684.182 L1740.32 684.182 L1740.88 684.182 L1741.44 684.182 L1742 684.182 L1742.56 684.182 L1743.12 684.182 L1743.68 684.182 L1744.24 684.182 L1744.79 684.182 L1745.35 684.182 L1745.91 684.182 L1746.47 684.182 L1747.03 684.182 L1747.59 684.182 L1748.15 684.182 L1748.71 684.182 L1749.27 684.182 L1749.83 684.182 L1750.39 684.182 L1750.95 684.182 L1751.51 684.182 L1752.06 684.182 L1752.62 684.182 L1753.18 684.182 L1753.74 684.182 L1754.3 684.182 L1754.86 684.182 L1755.42 684.182 L1755.98 684.182 L1756.54 684.182 L1757.1 684.182 L1757.66 684.182 L1758.22 684.182 L1758.78 684.182 L1759.34 684.182 L1759.89 684.182 L1760.45 684.182 L1761.01 684.182 L1761.57 684.182 L1762.13 684.182 L1762.69 684.182 L1763.25 684.182 L1763.81 684.182 L1764.37 684.182 L1764.93 684.182 L1765.49 684.182 L1766.05 684.182 L1766.61 684.182 L1767.16 684.182 L1767.72 684.182 L1768.28 684.182 L1768.84 684.182 L1769.4 684.182 L1769.96 684.182 L1770.52 684.182 L1771.08 684.182 L1771.64 684.182 L1772.2 684.182 L1772.76 684.182 L1773.32 684.182 L1773.88 684.182 L1774.43 684.182 L1774.99 684.182 L1775.55 684.182 L1776.11 684.182 L1776.67 684.182 L1777.23 684.182 L1777.79 684.182 L1778.35 684.182 L1778.91 684.182 L1779.47 684.182 L1780.03 684.182 L1780.59 684.182 L1781.15 684.182 L1781.71 684.182 L1782.26 684.182 L1782.82 684.182 L1783.38 684.182 L1783.94 684.182 L1784.5 684.182 L1785.06 684.182 L1785.62 684.182 L1786.18 684.182 L1786.74 684.182 L1787.3 684.182 L1787.86 684.182 L1788.42 684.182 L1788.98 684.182 L1789.53 684.182 L1790.09 684.182 L1790.65 684.182 L1791.21 684.182 L1791.77 684.182 L1792.33 684.182 L1792.89 684.182 L1793.45 684.182 L1794.01 684.182 L1794.57 684.182 L1795.13 684.182 L1795.69 684.182 L1796.25 684.182 L1796.8 684.182 L1797.36 684.182 L1797.92 684.182 L1798.48 684.182 L1799.04 684.182 L1799.6 684.182 L1800.16 684.182 L1800.72 684.182 L1801.28 684.182 L1801.84 684.182 L1802.4 684.182 L1802.96 684.182 L1803.52 684.182 L1804.08 684.182 L1804.63 684.182 L1805.19 684.182 L1805.75 684.182 L1806.31 684.182 L1806.87 684.182 L1807.43 684.182 L1807.99 684.182 L1808.55 684.182 L1809.11 684.182 L1809.67 684.182 L1810.23 684.182 L1810.79 684.182 L1811.35 684.182 L1811.9 684.182 L1812.46 684.182 L1813.02 684.182 L1813.58 684.182 L1814.14 684.182 L1814.7 684.182 L1815.26 684.182 L1815.82 684.182 L1816.38 684.182 L1816.94 684.182 L1817.5 684.182 L1818.06 684.182 L1818.62 684.182 L1819.18 684.182 L1819.73 684.182 L1820.29 684.182 L1820.85 684.182 L1821.41 684.182 L1821.97 684.182 L1822.53 684.182 L1823.09 684.182 L1823.65 684.182 L1824.21 684.182 L1824.77 684.182 L1825.33 684.182 L1825.89 684.182 L1826.45 684.182 L1827 684.182 L1827.56 684.182 L1828.12 684.182 L1828.68 684.182 L1829.24 684.182 L1829.8 684.182 L1830.36 684.182 L1830.92 684.182 L1831.48 684.182 L1832.04 684.182 L1832.6 684.182 L1833.16 684.182 L1833.72 684.182 L1834.27 684.182 L1834.83 684.182 L1835.39 684.182 L1835.95 684.182 L1836.51 684.182 L1837.07 684.182 L1837.63 684.182 L1838.19 684.182 L1838.19 681.957 L1837.63 681.957 L1837.07 681.957 L1836.51 681.957 L1835.95 681.957 L1835.39 681.957 L1834.83 681.957 L1834.27 681.957 L1833.72 681.957 L1833.16 681.957 L1832.6 681.957 L1832.04 681.957 L1831.48 681.957 L1830.92 681.957 L1830.36 681.957 L1829.8 681.957 L1829.24 681.957 L1828.68 681.957 L1828.12 681.957 L1827.56 681.957 L1827 681.957 L1826.45 681.957 L1825.89 681.957 L1825.33 681.957 L1824.77 681.957 L1824.21 681.957 L1823.65 681.957 L1823.09 681.957 L1822.53 681.957 L1821.97 681.957 L1821.41 681.957 L1820.85 681.957 L1820.29 681.957 L1819.73 681.957 L1819.18 681.957 L1818.62 681.957 L1818.06 681.957 L1817.5 681.957 L1816.94 681.957 L1816.38 681.957 L1815.82 681.957 L1815.26 681.957 L1814.7 681.957 L1814.14 681.957 L1813.58 681.957 L1813.02 681.957 L1812.46 681.957 L1811.9 681.957 L1811.35 681.957 L1810.79 681.957 L1810.23 681.957 L1809.67 681.957 L1809.11 681.957 L1808.55 681.957 L1807.99 681.957 L1807.43 681.957 L1806.87 681.957 L1806.31 681.957 L1805.75 681.957 L1805.19 681.957 L1804.63 681.957 L1804.08 681.957 L1803.52 681.957 L1802.96 681.957 L1802.4 681.957 L1801.84 681.957 L1801.28 681.957 L1800.72 681.957 L1800.16 681.957 L1799.6 681.957 L1799.04 681.957 L1798.48 681.957 L1797.92 681.957 L1797.36 681.957 L1796.8 681.957 L1796.25 681.957 L1795.69 681.957 L1795.13 681.957 L1794.57 681.957 L1794.01 681.957 L1793.45 681.957 L1792.89 681.957 L1792.33 681.957 L1791.77 681.957 L1791.21 681.957 L1790.65 681.957 L1790.09 681.957 L1789.53 681.957 L1788.98 681.957 L1788.42 681.957 L1787.86 681.957 L1787.3 681.957 L1786.74 681.957 L1786.18 681.957 L1785.62 681.957 L1785.06 681.957 L1784.5 681.957 L1783.94 681.957 L1783.38 681.957 L1782.82 681.957 L1782.26 681.957 L1781.71 681.957 L1781.15 681.957 L1780.59 681.957 L1780.03 681.957 L1779.47 681.957 L1778.91 681.957 L1778.35 681.957 L1777.79 681.957 L1777.23 681.957 L1776.67 681.957 L1776.11 681.957 L1775.55 681.957 L1774.99 681.957 L1774.43 681.957 L1773.88 681.957 L1773.32 681.957 L1772.76 681.957 L1772.2 681.957 L1771.64 681.957 L1771.08 681.957 L1770.52 681.957 L1769.96 681.957 L1769.4 681.957 L1768.84 681.957 L1768.28 681.957 L1767.72 681.957 L1767.16 681.957 L1766.61 681.957 L1766.05 681.957 L1765.49 681.957 L1764.93 681.957 L1764.37 681.957 L1763.81 681.957 L1763.25 681.957 L1762.69 681.957 L1762.13 681.957 L1761.57 681.957 L1761.01 681.957 L1760.45 681.957 L1759.89 681.957 L1759.34 681.957 L1758.78 681.957 L1758.22 681.957 L1757.66 681.957 L1757.1 681.957 L1756.54 681.957 L1755.98 681.957 L1755.42 681.957 L1754.86 681.957 L1754.3 681.957 L1753.74 681.957 L1753.18 681.957 L1752.62 681.957 L1752.06 681.957 L1751.51 681.957 L1750.95 681.957 L1750.39 681.957 L1749.83 681.957 L1749.27 681.957 L1748.71 681.957 L1748.15 681.957 L1747.59 681.957 L1747.03 681.957 L1746.47 681.957 L1745.91 681.957 L1745.35 681.957 L1744.79 681.957 L1744.24 681.957 L1743.68 681.957 L1743.12 681.957 L1742.56 681.957 L1742 681.957 L1741.44 681.957 L1740.88 681.957 L1740.32 681.957 L1739.76 681.957 L1739.2 681.957 L1738.64 681.957 L1738.08 681.957 L1737.52 681.957 L1736.97 681.957 L1736.41 681.957 L1735.85 681.957 L1735.29 681.957 L1734.73 681.957 L1734.17 681.957 L1733.61 681.957 L1733.05 681.957 L1732.49 681.957 L1731.93 681.957 L1731.37 681.957 L1730.81 681.957 L1730.25 681.957 L1729.69 681.957 L1729.14 681.957 L1728.58 681.957 L1728.02 681.957 L1727.46 681.957 L1726.9 681.957 L1726.34 681.957 L1725.78 681.957 L1725.22 681.957 L1724.66 681.957 L1724.1 681.957 L1723.54 681.957 L1722.98 681.957 L1722.42 681.957 L1721.87 681.957 L1721.31 681.957 L1720.75 681.957 L1720.19 681.957 L1719.63 681.957 L1719.07 681.957 L1718.51 681.957 L1717.95 681.957 L1717.39 681.957 L1716.83 681.957 L1716.27 681.957 L1715.71 681.957 L1715.15 681.957 L1714.6 681.957 L1714.04 681.957 L1713.48 681.957 L1712.92 681.957 L1712.36 681.957 L1711.8 681.957 L1711.24 681.957 L1710.68 681.957 L1710.12 681.957 L1709.56 681.957 L1709 681.957 L1708.44 681.957 L1707.88 681.957 L1707.32 681.957 L1706.77 681.957 L1706.21 681.957 L1705.65 681.957 L1705.09 681.957 L1704.53 681.957 L1703.97 681.957 L1703.41 681.957 L1702.85 681.957 L1702.29 681.957 L1701.73 681.957 L1701.17 681.957 L1700.61 681.957 L1700.05 681.957 L1699.5 681.957 L1698.94 681.957 L1698.38 681.957 L1697.82 681.957 L1697.26 681.957 L1696.7 681.957 L1696.14 681.957 L1695.58 681.957 L1695.02 681.957 L1694.46 681.957 L1693.9 681.957 L1693.34 681.957 L1692.78 681.957 L1692.23 681.957 L1691.67 681.957 L1691.11 681.957 L1690.55 681.957 L1689.99 681.957 L1689.43 681.957 L1688.87 681.957 L1688.31 681.957 L1687.75 681.957 L1687.19 681.957 L1686.63 681.957 L1686.07 681.957 L1685.51 681.957 L1684.95 681.957 L1684.4 681.957 L1683.84 681.957 L1683.28 681.957 L1682.72 681.957 L1682.16 681.957 L1681.6 681.957 L1681.04 681.957 L1680.48 681.957 L1679.92 681.957 L1679.36 681.957 L1678.8 681.957 L1678.24 681.957 L1677.68 681.957 L1677.13 681.957 L1676.57 681.957 L1676.01 681.957 L1675.45 681.957 L1674.89 681.957 L1674.33 681.957 L1673.77 681.957 L1673.21 681.957 L1672.65 681.957 L1672.09 681.957 L1671.53 681.957 L1670.97 681.957 L1670.41 681.957 L1669.85 681.957 L1669.3 681.957 L1668.74 681.957 L1668.18 681.957 L1667.62 681.957 L1667.06 681.957 L1666.5 681.957 L1665.94 681.957 L1665.38 681.957 L1664.82 681.957 L1664.26 681.957 L1663.7 681.957 L1663.14 681.957 L1662.58 681.957 L1662.03 681.957 L1661.47 681.957 L1660.91 681.957 L1660.35 681.957 L1659.79 681.957 L1659.23 681.957 L1658.67 681.957 L1658.11 681.957 L1657.55 681.957 L1656.99 681.957 L1656.43 681.957 L1655.87 681.957 L1655.31 681.957 L1654.76 681.957 L1654.2 681.957 L1653.64 681.957 L1653.08 681.957 L1652.52 681.957 L1651.96 681.957 L1651.4 681.957 L1650.84 681.957 L1650.28 681.957 L1649.72 681.957 L1649.16 681.957 L1648.6 681.957 L1648.04 681.957 L1647.48 681.957 L1646.93 681.957 L1646.37 681.957 L1645.81 681.957 L1645.25 681.957 L1644.69 681.957 L1644.13 681.957 L1643.57 681.957 L1643.01 681.957 L1642.45 681.957 L1641.89 681.957 L1641.33 681.957 L1640.77 681.957 L1640.21 681.957 L1639.66 681.957 L1639.1 681.957 L1638.54 681.957 L1637.98 681.957 L1637.42 681.957 L1636.86 681.957 L1636.3 681.957 L1635.74 681.957 L1635.18 681.957 L1634.62 681.957 L1634.06 681.957 L1633.5 681.957 L1632.94 681.957 L1632.39 681.957 L1631.83 681.957 L1631.27 681.957 L1630.71 681.957 L1630.15 681.957 L1629.59 681.957 L1629.03 681.957 L1628.47 681.957 L1627.91 681.957 L1627.35 681.957 L1626.79 681.957 L1626.23 681.957 L1625.67 681.957 L1625.11 681.957 L1624.56 681.957 L1624 681.957 L1623.44 681.957 L1622.88 681.957 L1622.32 681.957 L1621.76 681.957 L1621.2 681.957 L1620.64 681.957 L1620.08 681.957 L1619.52 681.957 L1618.96 681.957 L1618.4 681.957 L1617.84 681.957 L1617.29 681.957 L1616.73 681.957 L1616.17 681.957 L1615.61 681.957 L1615.05 681.957 L1614.49 681.957 L1613.93 681.957 L1613.37 681.957 L1612.81 681.957 L1612.25 681.957 L1611.69 681.957 L1611.13 681.957 L1610.57 681.957 L1610.02 681.957 L1609.46 681.957 L1608.9 681.957 L1608.34 681.957 L1607.78 681.957 L1607.22 681.957 L1606.66 681.957 L1606.1 681.957 L1605.54 681.957 L1604.98 681.957 L1604.42 681.957 L1603.86 681.957 L1603.3 681.957 L1602.74 681.957 L1602.19 681.957 L1601.63 681.957 L1601.07 681.957 L1600.51 681.957 L1599.95 681.957 L1599.39 681.957 L1598.83 681.957 L1598.27 681.957 L1597.71 681.957 L1597.15 681.957 L1596.59 681.957 L1596.03 681.957 L1595.47 681.957 L1594.92 681.957 L1594.36 681.957 L1593.8 681.957 L1593.24 681.957 L1592.68 681.957 L1592.12 681.957 L1591.56 681.957 L1591 681.957 L1590.44 681.957 L1589.88 681.957 L1589.32 681.957 L1588.76 681.957 L1588.2 681.957 L1587.65 681.957 L1587.09 681.957 L1586.53 681.957 L1585.97 681.957 L1585.41 681.957 L1584.85 681.957 L1584.29 681.957 L1583.73 681.957 L1583.17 681.957 L1582.61 681.957 L1582.05 681.957 L1581.49 681.957 L1580.93 681.957 L1580.37 681.957 L1579.82 681.957 L1579.26 681.957 L1578.7 681.957 L1578.14 681.957 L1577.58 681.957 L1577.02 681.957 L1576.46 681.957 L1575.9 681.957 L1575.34 681.957 L1574.78 681.957 L1574.22 681.957 L1573.66 681.957 L1573.1 681.957 L1572.55 681.957 L1571.99 681.957 L1571.43 681.957 L1570.87 681.957 L1570.31 681.957 L1569.75 681.957 L1569.19 681.957 L1568.63 681.957 L1568.07 681.957 L1567.51 681.957 L1566.95 681.957 L1566.39 681.957 L1565.83 681.957 L1565.28 681.957 L1564.72 681.957 L1564.16 681.957 L1563.6 681.957 L1563.04 681.957 L1562.48 681.957 L1561.92 681.957 L1561.36 681.957 L1560.8 681.957 L1560.24 681.957 L1559.68 681.957 L1559.12 681.957 L1558.56 681.957 L1558 681.957 L1557.45 681.957 L1556.89 681.957 L1556.33 681.957 L1555.77 681.957 L1555.21 681.957 L1554.65 681.957 L1554.09 681.957 L1553.53 681.957 L1552.97 681.957 L1552.41 681.957 L1551.85 681.957 L1551.29 681.957 L1550.73 681.957 L1550.18 681.957 L1549.62 681.957 L1549.06 681.957 L1548.5 681.957 L1547.94 681.957 L1547.38 681.957 L1546.82 681.957 L1546.26 681.957 L1545.7 681.957 L1545.14 681.957 L1544.58 681.957 L1544.02 681.957 L1543.46 681.957 L1542.9 681.957 L1542.35 681.957 L1541.79 681.957 L1541.23 681.957 L1540.67 681.957 L1540.11 681.957 L1539.55 681.957 L1538.99 681.957 L1538.43 681.957 L1537.87 681.957 L1537.31 681.957 L1536.75 681.957 L1536.19 681.957 L1535.63 681.957 L1535.08 681.957 L1534.52 681.957 L1533.96 681.957 L1533.4 681.957 L1532.84 681.957 L1532.28 681.957 L1531.72 681.957 L1531.16 681.957 L1530.6 681.957 L1530.04 681.957 L1529.48 681.957 L1528.92 681.957 L1528.36 681.957 L1527.81 681.957 L1527.25 681.957 L1526.69 681.957 L1526.13 681.957 L1525.57 681.957 L1525.01 681.957 L1524.45 681.957 L1523.89 681.957 L1523.33 681.957 L1522.77 681.957 L1522.21 681.957 L1521.65 681.957 L1521.09 681.957 L1520.53 681.957 L1519.98 681.957 L1519.42 681.957 L1518.86 681.957 L1518.3 681.957 L1517.74 681.957 L1517.18 681.957 L1516.62 681.957 L1516.06 681.957 L1515.5 681.957 L1514.94 681.957 L1514.38 681.957 L1513.82 681.957 L1513.26 681.957 L1512.71 681.957 L1512.15 681.957 L1511.59 681.957 L1511.03 681.957 L1510.47 681.957 L1509.91 681.957 L1509.35 681.957 L1508.79 681.957 L1508.23 681.957 L1507.67 681.957 L1507.11 681.957 L1506.55 681.957 L1505.99 681.957 L1505.44 681.957 L1504.88 681.957 L1504.32 681.957 L1503.76 681.957 L1503.2 681.957 L1502.64 681.957 L1502.08 681.957 L1501.52 681.957 L1500.96 681.957 L1500.4 681.957 L1499.84 681.957 L1499.28 681.957 L1498.72 681.957 L1498.16 681.957 L1497.61 681.957 L1497.05 681.957 L1496.49 681.957 L1495.93 681.957 L1495.37 681.957 L1494.81 681.957 L1494.25 681.957 L1493.69 681.957 L1493.13 681.957 L1492.57 681.957 L1492.01 681.957 L1491.45 681.957 L1490.89 681.957 L1490.34 681.957 L1489.78 681.957 L1489.22 681.957 L1488.66 681.957 L1488.1 681.957 L1487.54 681.957 L1486.98 681.957 L1486.42 681.957 L1485.86 681.957 L1485.3 681.957 L1484.74 681.957 L1484.18 681.957 L1483.62 681.957 L1483.07 681.957 L1482.51 681.957 L1481.95 681.957 L1481.39 681.957 L1480.83 681.957 L1480.27 681.957 L1479.71 681.957 L1479.15 681.957 L1478.59 681.957 L1478.03 681.957 L1477.47 681.957 L1476.91 681.957 L1476.35 681.957 L1475.79 681.957 L1475.24 681.957 L1474.68 681.957 L1474.12 681.957 L1473.56 681.957 L1473 681.957 L1472.44 681.957 L1471.88 681.957 L1471.32 681.957 L1470.76 681.957 L1470.2 681.957 L1469.64 681.957 L1469.08 681.957 L1468.52 681.957 L1467.97 681.957 L1467.41 681.957 L1466.85 681.957 L1466.29 681.957 L1465.73 681.957 L1465.17 681.957 L1464.61 681.957 L1464.05 681.957 L1463.49 681.957 L1462.93 681.957 L1462.37 681.957 L1461.81 681.957 L1461.25 681.957 L1460.7 681.957 L1460.14 681.957 L1459.58 681.957 L1459.02 681.957 L1458.46 681.957 L1457.9 681.957 L1457.34 681.957 L1456.78 681.957 L1456.22 681.957 L1455.66 681.957 L1455.1 681.957 L1454.54 681.957 L1453.98 681.957 L1453.42 681.957 L1452.87 681.957 L1452.31 681.957 L1451.75 681.957 L1451.19 681.957 L1450.63 681.957 L1450.07 681.957 L1449.51 681.957 L1448.95 681.957 L1448.39 681.957 L1447.83 681.957 L1447.27 681.957 L1446.71 681.957 L1446.15 681.957 L1445.6 681.957 L1445.04 681.957 L1444.48 681.957 L1443.92 681.957 L1443.36 681.957 L1442.8 681.957 L1442.24 681.957 L1441.68 681.957 L1441.12 681.957 L1440.56 681.957 L1440 681.957 L1439.44 681.957 L1438.88 681.957 L1438.33 681.957 L1437.77 681.957 L1437.21 681.957 L1436.65 681.957 L1436.09 681.957 L1435.53 681.957 L1434.97 681.957 L1434.41 681.957 L1433.85 681.957 L1433.29 681.957 L1432.73 681.957 L1432.17 681.957 L1431.61 681.957 L1431.05 681.957 L1430.5 681.957 L1429.94 681.957 L1429.38 681.957 L1428.82 681.957 L1428.26 681.957 L1427.7 681.957 L1427.14 681.957 L1426.58 681.957 L1426.02 681.957 L1425.46 681.957 L1424.9 681.957 L1424.34 681.957 L1423.78 681.957 L1423.23 681.957 L1422.67 681.957 L1422.11 681.957 L1421.55 681.957 L1420.99 681.957 L1420.43 681.957 L1419.87 681.957 L1419.31 681.957 L1418.75 681.957 L1418.19 681.957 L1417.63 681.957 L1417.07 681.957 L1416.51 681.957 L1415.95 681.957 L1415.4 681.957 L1414.84 681.957 L1414.28 681.957 L1413.72 681.957 L1413.16 681.957 L1412.6 681.957 L1412.04 681.957 L1411.48 681.957 L1410.92 681.957 L1410.36 681.957 L1409.8 681.957 L1409.24 681.957 L1408.68 681.957 L1408.13 681.957 L1407.57 681.957 L1407.01 681.957 L1406.45 681.957 L1405.89 681.957 L1405.33 681.957 L1404.77 681.957 L1404.21 681.957 L1403.65 681.957 L1403.09 681.957 L1402.53 681.957 L1401.97 681.957 L1401.41 681.957 L1400.86 681.957 L1400.3 681.957 L1399.74 681.957 L1399.18 681.957 L1398.62 681.957 L1398.06 681.957 L1397.5 681.957 L1396.94 681.957 L1396.38 681.957 L1395.82 681.957 L1395.26 681.957 L1394.7 681.957 L1394.14 681.957 L1393.58 681.957 L1393.03 681.957 L1392.47 681.957 L1391.91 681.957 L1391.35 681.957 L1390.79 681.957 L1390.23 681.957 L1389.67 681.957 L1389.11 681.957 L1388.55 681.957 L1387.99 681.957 L1387.43 681.957 L1386.87 681.957 L1386.31 681.957 L1385.76 681.957 L1385.2 681.957 L1384.64 681.957 L1384.08 681.957 L1383.52 681.957 L1382.96 681.957 L1382.4 681.957 L1381.84 681.957 L1381.28 681.957 L1380.72 681.957 L1380.16 681.957 L1379.6 681.957 L1379.04 681.957 L1378.49 681.957 L1377.93 681.957 L1377.37 681.957 L1376.81 681.957 L1376.25 681.957 L1375.69 681.957 L1375.13 681.957 L1374.57 681.957 L1374.01 681.957 L1373.45 681.957 L1372.89 681.957 L1372.33 681.957 L1371.77 681.957 L1371.21 681.957 L1370.66 681.957 L1370.1 681.957 L1369.54 681.957 L1368.98 681.957 L1368.42 681.957 L1367.86 681.957 L1367.3 681.957 L1366.74 681.957 L1366.18 681.957 L1365.62 681.957 L1365.06 681.957 L1364.5 681.957 L1363.94 681.957 L1363.39 681.957 L1362.83 681.957 L1362.27 681.957 L1361.71 681.957 L1361.15 681.957 L1360.59 681.957 L1360.03 681.957 L1359.47 681.957 L1358.91 681.957 L1358.35 681.957 L1357.79 681.957 L1357.23 681.957 L1356.67 681.957 L1356.12 681.957 L1355.56 681.957 L1355 681.957 L1354.44 681.957 L1353.88 681.957 L1353.32 681.957 L1352.76 681.957 L1352.2 681.957 L1351.64 681.957 L1351.08 681.957 L1350.52 681.957 L1349.96 681.957 L1349.4 681.957 L1348.84 681.957 L1348.29 681.957 L1347.73 681.957 L1347.17 681.957 L1346.61 681.957 L1346.05 681.957 L1345.49 681.957 L1344.93 681.957 L1344.37 681.957 L1343.81 681.957 L1343.25 681.957 L1342.69 681.957 L1342.13 681.957 L1341.57 681.957 L1341.02 681.957 L1340.46 681.957 L1339.9 681.957 L1339.34 681.957 L1338.78 681.957 L1338.22 681.957 L1337.66 681.957 L1337.1 681.957 L1336.54 681.957 L1335.98 681.957 L1335.42 681.957 L1334.86 681.957 L1334.3 681.957 L1333.75 681.957 L1333.19 681.957 L1332.63 681.957 L1332.07 681.957 L1331.51 681.957 L1330.95 681.957 L1330.39 681.957 L1329.83 681.957 L1329.27 681.957 L1328.71 681.957 L1328.15 681.957 L1327.59 681.957 L1327.03 681.957 L1326.47 681.957 L1325.92 681.957 L1325.36 681.957 L1324.8 681.957 L1324.24 681.957 L1323.68 681.957 L1323.12 681.957 L1322.56 681.957 L1322 681.957 L1321.44 681.957 L1320.88 681.957 L1320.32 681.957 L1319.76 681.957 L1319.2 681.957 L1318.65 681.957 L1318.09 681.957 L1317.53 681.957 L1316.97 681.957 L1316.41 681.957 L1315.85 681.957 L1315.29 681.957 L1314.73 681.957 L1314.17 681.957 L1313.61 681.957 L1313.05 681.957 L1312.49 681.957 L1311.93 681.957 L1311.38 681.957 L1310.82 681.957 L1310.26 681.957 L1309.7 681.957 L1309.14 681.957 L1308.58 681.957 L1308.02 681.957 L1307.46 681.957 L1306.9 681.957 L1306.34 681.957 L1305.78 681.957 L1305.22 681.957 L1304.66 681.957 L1304.1 681.957 L1303.55 681.957 L1302.99 681.957 L1302.43 681.957 L1301.87 681.957 L1301.31 681.957 L1300.75 681.957 L1300.19 681.957 L1299.63 681.957 L1299.07 681.957 L1298.51 681.957 L1297.95 681.957 L1297.39 681.957 L1296.83 681.957 L1296.28 681.957 L1295.72 681.957 L1295.16 681.957 L1294.6 681.957 L1294.04 681.957 L1293.48 681.957 L1292.92 681.957 L1292.36 681.957 L1291.8 681.957 L1291.24 681.957 L1290.68 681.957 L1290.12 681.957 L1289.56 681.957 L1289 681.957 L1288.45 681.957 L1287.89 681.957 L1287.33 681.957 L1286.77 681.957 L1286.21 681.957 L1285.65 681.957 L1285.09 681.957 L1284.53 681.957 L1283.97 681.957 L1283.41 681.957 L1282.85 681.957 L1282.29 681.957 L1281.73 681.957 L1281.18 681.957 L1280.62 681.957 L1280.06 681.957 L1279.5 681.957 L1278.94 681.957 L1278.38 681.957 L1277.82 681.957 L1277.26 681.957 L1276.7 681.957 L1276.14 681.957 L1275.58 681.957 L1275.02 681.957 L1274.46 681.957 L1273.91 681.957 L1273.35 681.957 L1272.79 681.957 L1272.23 681.957 L1271.67 681.957 L1271.11 681.957 L1270.55 681.957 L1269.99 681.957 L1269.43 681.957 L1268.87 681.957 L1268.31 681.957 L1267.75 681.957 L1267.19 681.957 L1266.63 681.957 L1266.08 681.957 L1265.52 681.957 L1264.96 681.957 L1264.4 681.957 L1263.84 681.957 L1263.28 681.957 L1262.72 681.957 L1262.16 681.957 L1261.6 681.957 L1261.04 681.957 L1260.48 681.957 L1259.92 681.957 L1259.36 681.957 L1258.81 681.957 L1258.25 681.957 L1257.69 681.957 L1257.13 681.957 L1256.57 681.957 L1256.01 681.957 L1255.45 681.957 L1254.89 681.957 L1254.33 681.957 L1253.77 681.957 L1253.21 681.957 L1252.65 681.957 L1252.09 681.957 L1251.54 681.957 L1250.98 681.957 L1250.42 681.957 L1249.86 681.957 L1249.3 681.957 L1248.74 681.957 L1248.18 681.957 L1247.62 681.957 L1247.06 681.957 L1246.5 681.957 L1245.94 681.957 L1245.38 681.957 L1244.82 681.957 L1244.26 681.957 L1243.71 681.957 L1243.15 681.957 L1242.59 681.957 L1242.03 681.957 L1241.47 681.957 L1240.91 681.957 L1240.35 681.957 L1239.79 681.957 L1239.23 681.957 L1238.67 681.957 L1238.11 681.957 L1237.55 681.957 L1236.99 681.957 L1236.44 681.957 L1235.88 681.957 L1235.32 681.957 L1234.76 681.957 L1234.2 681.957 L1233.64 681.957 L1233.08 681.957 L1232.52 681.957 L1231.96 681.957 L1231.4 681.957 L1230.84 681.957 L1230.28 681.957 L1229.72 681.957 L1229.17 681.957 L1228.61 681.957 L1228.05 681.957 L1227.49 681.957 L1226.93 681.957 L1226.37 681.957 L1225.81 681.957 L1225.25 681.957 L1224.69 681.957 L1224.13 681.957 L1223.57 681.957 L1223.01 681.957 L1222.45 681.957 L1221.89 681.957 L1221.34 681.957 L1220.78 681.957 L1220.22 681.957 L1219.66 681.957 L1219.1 681.957 L1218.54 681.957 L1217.98 681.957 L1217.42 681.957 L1216.86 681.957 L1216.3 681.957 L1215.74 681.957 L1215.18 681.957 L1214.62 681.957 L1214.07 681.957 L1213.51 681.957 L1212.95 681.957 L1212.39 681.957 L1211.83 681.957 L1211.27 681.957 L1210.71 681.957 L1210.15 681.957 L1209.59 681.957 L1209.03 681.957 L1208.47 681.957 L1207.91 681.957 L1207.35 681.957 L1206.8 681.957 L1206.24 681.957 L1205.68 681.957 L1205.12 681.957 L1204.56 681.957 L1204 681.957 L1203.44 681.957 L1202.88 681.957 L1202.32 681.957 L1201.76 681.957 L1201.2 681.957 L1200.64 681.957 L1200.08 681.957 L1199.52 681.957 L1198.97 681.957 L1198.41 681.957 L1197.85 681.957 L1197.29 681.957 L1196.73 681.957 L1196.17 681.957 L1195.61 681.957 L1195.05 681.957 L1194.49 681.957 L1193.93 681.957 L1193.37 681.957 L1192.81 681.957 L1192.25 681.957 L1191.7 681.957 L1191.14 681.957 L1190.58 681.957 L1190.02 681.957 L1189.46 681.957 L1188.9 681.957 L1188.34 681.957 L1187.78 681.957 L1187.22 681.957 L1186.66 681.957 L1186.1 681.957 L1185.54 681.957 L1184.98 681.957 L1184.43 681.957 L1183.87 681.957 L1183.31 681.957 L1182.75 681.957 L1182.19 681.957 L1181.63 681.957 L1181.07 681.957 L1180.51 681.957 L1179.95 681.957 L1179.39 681.957 L1178.83 681.957 L1178.27 681.957 L1177.71 681.957 L1177.15 681.957 L1176.6 681.957 L1176.04 681.957 L1175.48 681.957 L1174.92 681.957 L1174.36 681.957 L1173.8 681.957 L1173.24 681.957 L1172.68 681.957 L1172.12 681.957 L1171.56 681.957 L1171 681.957 L1170.44 681.957 L1169.88 681.957 L1169.33 681.957 L1168.77 681.957 L1168.21 681.957 L1167.65 681.957 L1167.09 681.957 L1166.53 681.957 L1165.97 681.957 L1165.41 681.957 L1164.85 681.957 L1164.29 681.957 L1163.73 681.957 L1163.17 681.957 L1162.61 681.957 L1162.05 681.957 L1161.5 681.957 L1160.94 681.957 L1160.38 681.957 L1159.82 681.957 L1159.26 681.957 L1158.7 681.957 L1158.14 681.957 L1157.58 681.957 L1157.02 681.957 L1156.46 681.957 L1155.9 681.957 L1155.34 681.957 L1154.78 681.957 L1154.23 681.957 L1153.67 681.957 L1153.11 681.957 L1152.55 681.957 L1151.99 681.957 L1151.43 681.957 L1150.87 681.957 L1150.31 681.957 L1149.75 681.957 L1149.19 681.957 L1148.63 681.957 L1148.07 681.957 L1147.51 681.957 L1146.96 681.957 L1146.4 681.957 L1145.84 681.957 L1145.28 681.957 L1144.72 681.957 L1144.16 681.957 L1143.6 681.957 L1143.04 681.957 L1142.48 681.957 L1141.92 681.957 L1141.36 681.957 L1140.8 681.957 L1140.24 681.957 L1139.68 681.957 L1139.13 681.957 L1138.57 681.957 L1138.01 681.957 L1137.45 681.957 L1136.89 681.957 L1136.33 681.957 L1135.77 681.957 L1135.21 681.957 L1134.65 681.957 L1134.09 681.957 L1133.53 681.957 L1132.97 681.957 L1132.41 681.957 L1131.86 681.957 L1131.3 681.957 L1130.74 681.957 L1130.18 681.957 L1129.62 681.957 L1129.06 681.957 L1128.5 681.957 L1127.94 681.957 L1127.38 681.957 L1126.82 681.957 L1126.26 681.957 L1125.7 681.957 L1125.14 681.957 L1124.59 681.957 L1124.03 681.957 L1123.47 681.957 L1122.91 681.957 L1122.35 681.957 L1121.79 681.957 L1121.23 681.957 L1120.67 681.957 L1120.11 681.957 L1119.55 681.957 L1118.99 681.957 L1118.43 681.957 L1117.87 681.957 L1117.31 681.957 L1116.76 681.957 L1116.2 681.957 L1115.64 681.957 L1115.08 681.957 L1114.52 681.957 L1113.96 681.957 L1113.4 681.957 L1112.84 681.957 L1112.28 681.957 L1111.72 681.957 L1111.16 681.957 L1110.6 681.957 L1110.04 681.957 L1109.49 681.957 L1108.93 681.957 L1108.37 681.957 L1107.81 681.957 L1107.25 681.957 L1106.69 681.957 L1106.13 681.957 L1105.57 681.957 L1105.01 681.957 L1104.45 681.957 L1103.89 681.957 L1103.33 681.957 L1102.77 681.957 L1102.22 681.957 L1101.66 681.957 L1101.1 681.957 L1100.54 681.957 L1099.98 681.957 L1099.42 681.957 L1098.86 681.957 L1098.3 681.957 L1097.74 681.957 L1097.18 681.957 L1096.62 681.957 L1096.06 681.957 L1095.5 681.957 L1094.94 681.957 L1094.39 681.957 L1093.83 681.957 L1093.27 681.957 L1092.71 681.957 L1092.15 681.957 L1091.59 681.957 L1091.03 681.957 L1090.47 681.957 L1089.91 681.957 L1089.35 681.957 L1088.79 681.957 L1088.23 681.957 L1087.67 681.957 L1087.12 681.957 L1086.56 681.957 L1086 681.957 L1085.44 681.957 L1084.88 681.957 L1084.32 681.957 L1083.76 681.957 L1083.2 681.957 L1082.64 681.957 L1082.08 681.957 L1081.52 681.957 L1080.96 681.957 L1080.4 681.957 L1079.85 681.957 L1079.29 681.957 L1078.73 681.957 L1078.17 681.957 L1077.61 681.957 L1077.05 681.957 L1076.49 681.957 L1075.93 681.957 L1075.37 681.957 L1074.81 681.957 L1074.25 681.957 L1073.69 681.957 L1073.13 681.957 L1072.57 681.957 L1072.02 681.957 L1071.46 681.957 L1070.9 681.957 L1070.34 681.957 L1069.78 681.957 L1069.22 681.957 L1068.66 681.957 L1068.1 681.957 L1067.54 681.957 L1066.98 681.957 L1066.42 681.957 L1065.86 681.957 L1065.3 681.957 L1064.75 681.957 L1064.19 681.957 L1063.63 681.957 L1063.07 681.957 L1062.51 681.957 L1061.95 681.957 L1061.39 681.957 L1060.83 681.957 L1060.27 681.957 L1059.71 681.957 L1059.15 681.957 L1058.59 681.957 L1058.03 681.957 L1057.48 681.957 L1056.92 681.957 L1056.36 681.957 L1055.8 681.957 L1055.24 681.957 L1054.68 681.957 L1054.12 681.957 L1053.56 681.957 L1053 681.957 L1052.44 681.957 L1051.88 681.957 L1051.32 681.957 L1050.76 681.957 L1050.2 681.957 L1049.65 681.957 L1049.09 681.957 L1048.53 681.957 L1047.97 681.957 L1047.41 681.957 L1046.85 681.957 L1046.29 681.957 L1045.73 681.957 L1045.17 681.957 L1044.61 681.957 L1044.05 681.957 L1043.49 681.957 L1042.93 681.957 L1042.38 681.957 L1041.82 681.957 L1041.26 681.957 L1040.7 681.957 L1040.14 681.957 L1039.58 681.957 L1039.02 681.957 L1038.46 681.957 L1037.9 681.957 L1037.34 681.957 L1036.78 681.957 L1036.22 681.957 L1035.66 681.957 L1035.1 681.957 L1034.55 681.957 L1033.99 681.957 L1033.43 681.957 L1032.87 681.957 L1032.31 681.957 L1031.75 681.957 L1031.19 681.957 L1030.63 681.957 L1030.07 681.957 L1029.51 681.957 L1028.95 681.957 L1028.39 681.957 L1027.83 681.957 L1027.28 681.957 L1026.72 681.957 L1026.16 681.957 L1025.6 681.957 L1025.04 681.957 L1024.48 681.957 L1023.92 681.957 L1023.36 681.957 L1022.8 681.957 L1022.24 681.957 L1021.68 681.957 L1021.12 681.957 L1020.56 681.957 L1020.01 681.957 L1019.45 681.957 L1018.89 681.957 L1018.33 681.957 L1017.77 681.957 L1017.21 681.957 L1016.65 681.957 L1016.09 681.957 L1015.53 681.957 L1014.97 681.957 L1014.41 681.957 L1013.85 681.957 L1013.29 681.957 L1012.73 681.957 L1012.18 681.957 L1011.62 681.957 L1011.06 681.957 L1010.5 681.957 L1009.94 681.957 L1009.38 681.957 L1008.82 681.957 L1008.26 681.957 L1007.7 681.957 L1007.14 681.957 L1006.58 681.957 L1006.02 681.957 L1005.46 681.957 L1004.91 681.957 L1004.35 681.957 L1003.79 681.957 L1003.23 681.957 L1002.67 681.957 L1002.11 681.957 L1001.55 681.957 L1000.99 681.957 L1000.43 681.957 L999.872 681.957 L999.313 681.957 L998.754 681.957 L998.194 681.957 L997.635 681.957 L997.076 681.957 L996.517 681.957 L995.957 681.957 L995.398 681.957 L994.839 681.957 L994.28 681.957 L993.72 681.957 L993.161 681.957 L992.602 681.957 L992.043 681.957 L991.483 681.957 L990.924 681.957 L990.365 681.957 L989.806 681.957 L989.246 681.957 L988.687 681.957 L988.128 681.957 L987.569 681.957 L987.009 681.957 L986.45 681.957 L985.891 681.957 L985.332 681.957 L984.772 681.957 L984.213 681.957 L983.654 681.957 L983.095 681.957 L982.535 681.957 L981.976 681.957 L981.417 681.957 L980.858 681.957 L980.298 681.957 L979.739 681.957 L979.18 681.957 L978.621 681.957 L978.061 681.957 L977.502 681.957 L976.943 681.957 L976.384 681.957 L975.824 681.957 L975.265 681.957 L974.706 681.957 L974.147 681.957 L973.587 681.957 L973.028 681.957 L972.469 681.957 L971.91 681.957 L971.35 681.957 L970.791 681.957 L970.232 681.957 L969.673 681.957 L969.113 681.957 L968.554 681.957 L967.995 681.957 L967.436 681.957 L966.876 681.957 L966.317 681.957 L965.758 681.957 L965.199 681.957 L964.639 681.957 L964.08 681.957 L963.521 681.957 L962.962 681.957 L962.402 681.957 L961.843 681.957 L961.284 681.957 L960.725 681.957 L960.165 681.957 L959.606 681.957 L959.047 681.957 L958.488 681.957 L957.928 681.957 L957.369 681.957 L956.81 681.957 L956.251 681.957 L955.691 681.957 L955.132 681.957 L954.573 681.957 L954.014 681.957 L953.454 681.957 L952.895 681.957 L952.336 681.957 L951.777 681.957 L951.217 681.957 L950.658 681.957 L950.099 681.957 L949.54 681.957 L948.98 681.957 L948.421 681.957 L947.862 681.957 L947.303 681.957 L946.743 681.957 L946.184 681.957 L945.625 681.957 L945.066 681.957 L944.506 681.957 L943.947 681.957 L943.388 681.957 L942.829 681.957 L942.269 681.957 L941.71 681.957 L941.151 681.957 L940.592 681.957 L940.032 681.957 L939.473 681.957 L938.914 681.957 L938.355 681.957 L937.795 681.957 L937.236 681.957 L936.677 681.957 L936.118 681.957 L935.558 681.957 L934.999 681.957 L934.44 681.957 L933.881 681.957 L933.321 681.957 L932.762 681.957 L932.203 681.957 L931.644 681.957 L931.084 681.957 L930.525 681.957 L929.966 681.957 L929.406 681.957 L928.847 681.957 L928.288 681.957 L927.729 681.957 L927.169 681.957 L926.61 681.957 L926.051 681.957 L925.492 681.957 L924.932 681.957 L924.373 681.957 L923.814 681.957 L923.255 681.957 L922.695 681.957 L922.136 681.957 L921.577 681.957 L921.018 681.957 L920.458 681.957 L919.899 681.957 L919.34 681.957 L918.781 681.957 L918.221 681.957 L917.662 681.957 L917.103 681.957 L916.544 681.957 L915.984 681.957 L915.425 681.957 L914.866 681.957 L914.307 681.957 L913.747 681.957 L913.188 681.957 L912.629 681.957 L912.07 681.957 L911.51 681.957 L910.951 681.957 L910.392 681.957 L909.833 681.957 L909.273 681.957 L908.714 681.957 L908.155 681.957 L907.596 681.957 L907.036 681.957 L906.477 681.957 L905.918 681.957 L905.359 681.957 L904.799 681.957 L904.24 681.957 L903.681 681.957 L903.122 681.957 L902.562 681.957 L902.003 681.957 L901.444 681.957 L900.885 681.957 L900.325 681.957 L899.766 681.957 L899.207 681.957 L898.648 681.957 L898.088 681.957 L897.529 681.957 L896.97 681.957 L896.411 681.957 L895.851 681.957 L895.292 681.957 L894.733 681.957 L894.174 681.957 L893.614 681.957 L893.055 681.957 L892.496 681.957 L891.937 681.957 L891.377 681.957 L890.818 681.957 L890.259 681.957 L889.7 681.957 L889.14 681.957 L888.581 681.957 L888.022 681.957 L887.463 681.957 L886.903 681.957 L886.344 681.957 L885.785 681.957 L885.226 681.957 L884.666 681.957 L884.107 681.957 L883.548 681.957 L882.989 681.957 L882.429 681.957 L881.87 681.957 L881.311 681.957 L880.752 681.957 L880.192 681.957 L879.633 681.957 L879.074 681.957 L878.515 681.957 L877.955 681.957 L877.396 681.957 L876.837 681.957 L876.278 681.957 L875.718 681.957 L875.159 681.957 L874.6 681.957 L874.041 681.957 L873.481 681.957 L872.922 681.957 L872.363 681.957 L871.804 681.957 L871.244 681.957 L870.685 681.957 L870.126 681.957 L869.567 681.957 L869.007 681.957 L868.448 681.957 L867.889 681.957 L867.33 681.957 L866.77 681.957 L866.211 681.957 L865.652 681.957 L865.093 681.957 L864.533 681.957 L863.974 681.957 L863.415 681.957 L862.856 681.957 L862.296 681.957 L861.737 681.957 L861.178 681.957 L860.619 681.957 L860.059 681.957 L859.5 681.957 L858.941 681.957 L858.382 681.957 L857.822 681.957 L857.263 681.957 L856.704 681.957 L856.145 681.957 L855.585 681.957 L855.026 681.957 L854.467 681.957 L853.908 681.957 L853.348 681.957 L852.789 681.957 L852.23 681.957 L851.671 681.957 L851.111 681.957 L850.552 681.957 L849.993 681.957 L849.434 681.957 L848.874 681.957 L848.315 681.957 L847.756 681.957 L847.197 681.957 L846.637 681.957 L846.078 681.957 L845.519 681.957 L844.96 681.957 L844.4 681.957 L843.841 681.957 L843.282 681.957 L842.723 681.957 L842.163 681.957 L841.604 681.957 L841.045 681.957 L840.486 681.957 L839.926 681.957 L839.367 681.957 L838.808 681.957 L838.249 681.957 L837.689 681.957 L837.13 681.957 L836.571 681.957 L836.012 681.957 L835.452 681.957 L834.893 681.957 L834.334 681.957 L833.775 681.957 L833.215 681.957 L832.656 681.957 L832.097 681.957 L831.538 681.957 L830.978 681.957 L830.419 681.957 L829.86 681.957 L829.301 681.957 L828.741 681.957 L828.182 681.957 L827.623 681.957 L827.064 681.957 L826.504 681.957 L825.945 681.957 L825.386 681.957 L824.827 681.957 L824.267 681.957 L823.708 681.957 L823.149 681.957 L822.59 681.957 L822.03 681.957 L821.471 681.957 L820.912 681.957 L820.353 681.957 L819.793 681.957 L819.234 681.957 L818.675 681.957 L818.116 681.957 L817.556 681.957 L816.997 681.957 L816.438 681.957 L815.879 681.957 L815.319 681.957 L814.76 681.957 L814.201 681.957 L813.642 681.957 L813.082 681.957 L812.523 681.957 L811.964 681.957 L811.405 681.957 L810.845 681.957 L810.286 681.957 L809.727 681.957 L809.168 681.957 L808.608 681.957 L808.049 681.957 L807.49 681.957 L806.931 681.957 L806.371 681.957 L805.812 681.957 L805.253 681.957 L804.693 681.957 L804.134 681.957 L803.575 681.957 L803.016 681.957 L802.456 681.957 L801.897 681.957 L801.338 681.957 L800.779 681.957 L800.219 681.957 L799.66 681.957 L799.101 681.957 L798.542 681.957 L797.982 681.957 L797.423 681.957 L796.864 681.957 L796.305 681.957 L795.745 681.957 L795.186 681.957 L794.627 681.957 L794.068 681.957 L793.508 681.957 L792.949 681.957 L792.39 681.957 L791.831 681.957 L791.271 681.957 L790.712 681.957 L790.153 681.957 L789.594 681.957 L789.034 681.957 L788.475 681.957 L787.916 681.957 L787.357 681.957 L786.797 681.957 L786.238 681.957 L785.679 681.957 L785.12 681.957 L784.56 681.957 L784.001 681.957 L783.442 681.957 L782.883 681.957 L782.323 681.957 L781.764 681.957 L781.205 681.957 L780.646 681.957 L780.086 681.957 L779.527 681.957 L778.968 681.957 L778.409 681.957 L777.849 681.957 L777.29 681.957 L776.731 681.957 L776.172 681.957 L775.612 681.957 L775.053 681.957 L774.494 681.957 L773.935 681.957 L773.375 681.957 L772.816 681.957 L772.257 681.957 L771.698 681.957 L771.138 681.957 L770.579 681.957 L770.02 681.957 L769.461 681.957 L768.901 681.957 L768.342 681.957 L767.783 681.957 L767.224 681.957 L766.664 681.957 L766.105 681.957 L765.546 681.957 L764.987 681.957 L764.427 681.957 L763.868 681.957 L763.309 681.957 L762.75 681.957 L762.19 681.957 L761.631 681.957 L761.072 681.957 L760.513 681.957 L759.953 681.957 L759.394 681.957 L758.835 681.957 L758.276 681.957 L757.716 681.957 L757.157 681.957 L756.598 681.957 L756.039 681.957 L755.479 681.957 L754.92 681.957 L754.361 681.957 L753.802 681.957 L753.242 681.957 L752.683 681.957 L752.124 681.957 L751.565 681.957 L751.005 681.957 L750.446 681.957 L749.887 681.957 L749.328 681.957 L748.768 681.957 L748.209 681.957 L747.65 681.957 L747.091 681.957 L746.531 681.957 L745.972 681.957 L745.413 681.957 L744.854 681.957 L744.294 681.957 L743.735 681.957 L743.176 681.957 L742.617 681.957 L742.057 681.957 L741.498 681.957 L740.939 681.957 L740.38 681.957 L739.82 681.957 L739.261 681.957 L738.702 681.957 L738.143 681.957 L737.583 681.957 L737.024 681.957 L736.465 681.957 L735.906 681.957 L735.346 681.957 L734.787 681.957 L734.228 681.957 L733.669 681.957 L733.109 681.957 L732.55 681.957 L731.991 681.957 L731.432 681.957 L730.872 681.957 L730.313 681.957 L729.754 681.957 L729.195 681.957 L728.635 681.957 L728.076 681.957 L727.517 681.957 L726.958 681.957 L726.398 681.957 L725.839 681.957 L725.28 681.957 L724.721 681.957 L724.161 681.957 L723.602 681.957 L723.043 681.957 L722.484 681.957 L721.924 681.957 L721.365 681.957 L720.806 681.957 L720.247 681.957  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip033)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.083 720.806,683.083 721.365,683.083 721.924,683.083 722.484,683.083 723.043,683.083 723.602,683.083 724.161,683.083 724.721,683.083 725.28,683.083 725.839,683.083 726.398,683.083 726.958,683.083 727.517,683.083 728.076,683.083 728.635,683.083 729.195,683.083 729.754,683.083 730.313,683.083 730.872,683.083 731.432,683.083 731.991,683.083 732.55,683.083 733.109,683.083 733.669,683.083 734.228,683.083 734.787,683.083 735.346,683.083 735.906,683.083 736.465,683.083 737.024,683.083 737.583,683.083 738.143,683.083 738.702,683.083 739.261,683.083 739.82,683.083 740.38,683.083 740.939,683.083 741.498,683.083 742.057,683.083 742.617,683.083 743.176,683.083 743.735,683.083 744.294,683.083 744.854,683.083 745.413,683.083 745.972,683.083 746.531,683.083 747.091,683.083 747.65,683.083 748.209,683.083 748.768,683.083 749.328,683.083 749.887,683.083 750.446,683.083 751.005,683.083 751.565,683.083 752.124,683.083 752.683,683.083 753.242,683.083 753.802,683.083 754.361,683.083 754.92,683.083 755.479,683.083 756.039,683.083 756.598,683.083 757.157,683.083 757.716,683.083 758.276,683.083 758.835,683.083 759.394,683.083 759.953,683.083 760.513,683.083 761.072,683.083 761.631,683.083 762.19,683.083 762.75,683.083 763.309,683.083 763.868,683.083 764.427,683.083 764.987,683.083 765.546,683.083 766.105,683.083 766.664,683.083 767.224,683.083 767.783,683.083 768.342,683.083 768.901,683.083 769.461,683.083 770.02,683.083 770.579,683.083 771.138,683.083 771.698,683.083 772.257,683.083 772.816,683.083 773.375,683.083 773.935,683.083 774.494,683.083 775.053,683.083 775.612,683.083 776.172,683.083 776.731,683.083 777.29,683.083 777.849,683.083 778.409,683.083 778.968,683.083 779.527,683.083 780.086,683.083 780.646,683.083 781.205,683.083 781.764,683.083 782.323,683.083 782.883,683.083 783.442,683.083 784.001,683.083 784.56,683.083 785.12,683.083 785.679,683.083 786.238,683.083 786.797,683.083 787.357,683.083 787.916,683.083 788.475,683.083 789.034,683.083 789.594,683.083 790.153,683.083 790.712,683.083 791.271,683.083 791.831,683.083 792.39,683.083 792.949,683.083 793.508,683.083 794.068,683.083 794.627,683.083 795.186,683.083 795.745,683.083 796.305,683.083 796.864,683.083 797.423,683.083 797.982,683.083 798.542,683.083 799.101,683.083 799.66,683.083 800.219,683.083 800.779,683.083 801.338,683.083 801.897,683.083 802.456,683.083 803.016,683.083 803.575,683.083 804.134,683.083 804.693,683.083 805.253,683.083 805.812,683.083 806.371,683.083 806.931,683.083 807.49,683.083 808.049,683.083 808.608,683.083 809.168,683.083 809.727,683.083 810.286,683.083 810.845,683.083 811.405,683.083 811.964,683.083 812.523,683.083 813.082,683.083 813.642,683.083 814.201,683.083 814.76,683.083 815.319,683.083 815.879,683.083 816.438,683.083 816.997,683.083 817.556,683.083 818.116,683.083 818.675,683.083 819.234,683.083 819.793,683.083 820.353,683.083 820.912,683.083 821.471,683.083 822.03,683.083 822.59,683.083 823.149,683.083 823.708,683.083 824.267,683.083 824.827,683.083 825.386,683.083 825.945,683.083 826.504,683.083 827.064,683.083 827.623,683.083 828.182,683.083 828.741,683.083 829.301,683.083 829.86,683.083 830.419,683.083 830.978,683.083 831.538,683.083 832.097,683.083 832.656,683.083 833.215,683.083 833.775,683.083 834.334,683.083 834.893,683.083 835.452,683.083 836.012,683.083 836.571,683.083 837.13,683.083 837.689,683.083 838.249,683.083 838.808,683.083 839.367,683.083 839.926,683.083 840.486,683.083 841.045,683.083 841.604,683.083 842.163,683.083 842.723,683.083 843.282,683.083 843.841,683.083 844.4,683.083 844.96,683.083 845.519,683.083 846.078,683.083 846.637,683.083 847.197,683.083 847.756,683.083 848.315,683.083 848.874,683.083 849.434,683.083 849.993,683.083 850.552,683.083 851.111,683.083 851.671,683.083 852.23,683.083 852.789,683.083 853.348,683.083 853.908,683.083 854.467,683.083 855.026,683.083 855.585,683.083 856.145,683.083 856.704,683.083 857.263,683.083 857.822,683.083 858.382,683.083 858.941,683.083 859.5,683.083 860.059,683.083 860.619,683.083 861.178,683.083 861.737,683.083 862.296,683.083 862.856,683.083 863.415,683.083 863.974,683.083 864.533,683.083 865.093,683.083 865.652,683.083 866.211,683.083 866.77,683.083 867.33,683.083 867.889,683.083 868.448,683.083 869.007,683.083 869.567,683.083 870.126,683.083 870.685,683.083 871.244,683.083 871.804,683.083 872.363,683.083 872.922,683.083 873.481,683.083 874.041,683.083 874.6,683.083 875.159,683.083 875.718,683.083 876.278,683.083 876.837,683.083 877.396,683.083 877.955,683.083 878.515,683.083 879.074,683.083 879.633,683.083 880.192,683.083 880.752,683.083 881.311,683.083 881.87,683.083 882.429,683.083 882.989,683.083 883.548,683.083 884.107,683.083 884.666,683.083 885.226,683.083 885.785,683.083 886.344,683.083 886.903,683.083 887.463,683.083 888.022,683.083 888.581,683.083 889.14,683.083 889.7,683.083 890.259,683.083 890.818,683.083 891.377,683.083 891.937,683.083 892.496,683.083 893.055,683.083 893.614,683.083 894.174,683.083 894.733,683.083 895.292,683.083 895.851,683.083 896.411,683.083 896.97,683.083 897.529,683.083 898.088,683.083 898.648,683.083 899.207,683.083 899.766,683.083 900.325,683.083 900.885,683.083 901.444,683.083 902.003,683.083 902.562,683.083 903.122,683.083 903.681,683.083 904.24,683.083 904.799,683.083 905.359,683.083 905.918,683.083 906.477,683.083 907.036,683.083 907.596,683.083 908.155,683.083 908.714,683.083 909.273,683.083 909.833,683.083 910.392,683.083 910.951,683.083 911.51,683.083 912.07,683.083 912.629,683.083 913.188,683.083 913.747,683.083 914.307,683.083 914.866,683.083 915.425,683.083 915.984,683.083 916.544,683.083 917.103,683.083 917.662,683.083 918.221,683.083 918.781,683.083 919.34,683.083 919.899,683.083 920.458,683.083 921.018,683.083 921.577,683.083 922.136,683.083 922.695,683.083 923.255,683.083 923.814,683.083 924.373,683.083 924.932,683.083 925.492,683.083 926.051,683.083 926.61,683.083 927.169,683.083 927.729,683.083 928.288,683.083 928.847,683.083 929.406,683.083 929.966,683.083 930.525,683.083 931.084,683.083 931.644,683.083 932.203,683.083 932.762,683.083 933.321,683.083 933.881,683.083 934.44,683.083 934.999,683.083 935.558,683.083 936.118,683.083 936.677,683.083 937.236,683.083 937.795,683.083 938.355,683.083 938.914,683.083 939.473,683.083 940.032,683.083 940.592,683.083 941.151,683.083 941.71,683.083 942.269,683.083 942.829,683.083 943.388,683.083 943.947,683.083 944.506,683.083 945.066,683.083 945.625,683.083 946.184,683.083 946.743,683.083 947.303,683.083 947.862,683.083 948.421,683.083 948.98,683.083 949.54,683.083 950.099,683.083 950.658,683.083 951.217,683.083 951.777,683.083 952.336,683.083 952.895,683.083 953.454,683.083 954.014,683.083 954.573,683.083 955.132,683.083 955.691,683.083 956.251,683.083 956.81,683.083 957.369,683.083 957.928,683.083 958.488,683.083 959.047,683.083 959.606,683.083 960.165,683.083 960.725,683.083 961.284,683.083 961.843,683.083 962.402,683.083 962.962,683.083 963.521,683.083 964.08,683.083 964.639,683.083 965.199,683.083 965.758,683.083 966.317,683.083 966.876,683.083 967.436,683.083 967.995,683.083 968.554,683.083 969.113,683.083 969.673,683.083 970.232,683.083 970.791,683.083 971.35,683.083 971.91,683.083 972.469,683.083 973.028,683.083 973.587,683.083 974.147,683.083 974.706,683.083 975.265,683.083 975.824,683.083 976.384,683.083 976.943,683.083 977.502,683.083 978.061,683.083 978.621,683.083 979.18,683.083 979.739,683.083 980.298,683.083 980.858,683.083 981.417,683.083 981.976,683.083 982.535,683.083 983.095,683.083 983.654,683.083 984.213,683.083 984.772,683.083 985.332,683.083 985.891,683.083 986.45,683.083 987.009,683.083 987.569,683.083 988.128,683.083 988.687,683.083 989.246,683.083 989.806,683.083 990.365,683.083 990.924,683.083 991.483,683.083 992.043,683.083 992.602,683.083 993.161,683.083 993.72,683.083 994.28,683.083 994.839,683.083 995.398,683.083 995.957,683.083 996.517,683.083 997.076,683.083 997.635,683.083 998.194,683.083 998.754,683.083 999.313,683.083 999.872,683.083 1000.43,683.083 1000.99,683.083 1001.55,683.083 1002.11,683.083 1002.67,683.083 1003.23,683.083 1003.79,683.083 1004.35,683.083 1004.91,683.083 1005.46,683.083 1006.02,683.083 1006.58,683.083 1007.14,683.083 1007.7,683.083 1008.26,683.083 1008.82,683.083 1009.38,683.083 1009.94,683.083 1010.5,683.083 1011.06,683.083 1011.62,683.083 1012.18,683.083 1012.73,683.083 1013.29,683.083 1013.85,683.083 1014.41,683.083 1014.97,683.083 1015.53,683.083 1016.09,683.083 1016.65,683.083 1017.21,683.083 1017.77,683.083 1018.33,683.083 1018.89,683.083 1019.45,683.083 1020.01,683.083 1020.56,683.083 1021.12,683.083 1021.68,683.083 1022.24,683.083 1022.8,683.083 1023.36,683.083 1023.92,683.083 1024.48,683.083 1025.04,683.083 1025.6,683.083 1026.16,683.083 1026.72,683.083 1027.28,683.083 1027.83,683.083 1028.39,683.083 1028.95,683.083 1029.51,683.083 1030.07,683.083 1030.63,683.083 1031.19,683.083 1031.75,683.083 1032.31,683.083 1032.87,683.083 1033.43,683.083 1033.99,683.083 1034.55,683.083 1035.1,683.083 1035.66,683.083 1036.22,683.083 1036.78,683.083 1037.34,683.083 1037.9,683.083 1038.46,683.083 1039.02,683.083 1039.58,683.083 1040.14,683.083 1040.7,683.083 1041.26,683.083 1041.82,683.083 1042.38,683.083 1042.93,683.083 1043.49,683.083 1044.05,683.083 1044.61,683.083 1045.17,683.083 1045.73,683.083 1046.29,683.083 1046.85,683.083 1047.41,683.083 1047.97,683.083 1048.53,683.083 1049.09,683.083 1049.65,683.083 1050.2,683.083 1050.76,683.083 1051.32,683.083 1051.88,683.083 1052.44,683.083 1053,683.083 1053.56,683.083 1054.12,683.083 1054.68,683.083 1055.24,683.083 1055.8,683.083 1056.36,683.083 1056.92,683.083 1057.48,683.083 1058.03,683.083 1058.59,683.083 1059.15,683.083 1059.71,683.083 1060.27,683.083 1060.83,683.083 1061.39,683.083 1061.95,683.083 1062.51,683.083 1063.07,683.083 1063.63,683.083 1064.19,683.083 1064.75,683.083 1065.3,683.083 1065.86,683.083 1066.42,683.083 1066.98,683.083 1067.54,683.083 1068.1,683.083 1068.66,683.083 1069.22,683.083 1069.78,683.083 1070.34,683.083 1070.9,683.083 1071.46,683.083 1072.02,683.083 1072.57,683.083 1073.13,683.083 1073.69,683.083 1074.25,683.083 1074.81,683.083 1075.37,683.083 1075.93,683.083 1076.49,683.083 1077.05,683.083 1077.61,683.083 1078.17,683.083 1078.73,683.083 1079.29,683.083 1079.85,683.083 1080.4,683.083 1080.96,683.083 1081.52,683.083 1082.08,683.083 1082.64,683.083 1083.2,683.083 1083.76,683.083 1084.32,683.083 1084.88,683.083 1085.44,683.083 1086,683.083 1086.56,683.083 1087.12,683.083 1087.67,683.083 1088.23,683.083 1088.79,683.083 1089.35,683.083 1089.91,683.083 1090.47,683.083 1091.03,683.083 1091.59,683.083 1092.15,683.083 1092.71,683.083 1093.27,683.083 1093.83,683.083 1094.39,683.083 1094.94,683.083 1095.5,683.083 1096.06,683.083 1096.62,683.083 1097.18,683.083 1097.74,683.083 1098.3,683.083 1098.86,683.083 1099.42,683.083 1099.98,683.083 1100.54,683.083 1101.1,683.083 1101.66,683.083 1102.22,683.083 1102.77,683.083 1103.33,683.083 1103.89,683.083 1104.45,683.083 1105.01,683.083 1105.57,683.083 1106.13,683.083 1106.69,683.083 1107.25,683.083 1107.81,683.083 1108.37,683.083 1108.93,683.083 1109.49,683.083 1110.04,683.083 1110.6,683.083 1111.16,683.083 1111.72,683.083 1112.28,683.083 1112.84,683.083 1113.4,683.083 1113.96,683.083 1114.52,683.083 1115.08,683.083 1115.64,683.083 1116.2,683.083 1116.76,683.083 1117.31,683.083 1117.87,683.083 1118.43,683.083 1118.99,683.083 1119.55,683.083 1120.11,683.083 1120.67,683.083 1121.23,683.083 1121.79,683.083 1122.35,683.083 1122.91,683.083 1123.47,683.083 1124.03,683.083 1124.59,683.083 1125.14,683.083 1125.7,683.083 1126.26,683.083 1126.82,683.083 1127.38,683.083 1127.94,683.083 1128.5,683.083 1129.06,683.083 1129.62,683.083 1130.18,683.083 1130.74,683.083 1131.3,683.083 1131.86,683.083 1132.41,683.083 1132.97,683.083 1133.53,683.083 1134.09,683.083 1134.65,683.083 1135.21,683.083 1135.77,683.083 1136.33,683.083 1136.89,683.083 1137.45,683.083 1138.01,683.083 1138.57,683.083 1139.13,683.083 1139.68,683.083 1140.24,683.083 1140.8,683.083 1141.36,683.083 1141.92,683.083 1142.48,683.083 1143.04,683.083 1143.6,683.083 1144.16,683.083 1144.72,683.083 1145.28,683.083 1145.84,683.083 1146.4,683.083 1146.96,683.083 1147.51,683.083 1148.07,683.083 1148.63,683.083 1149.19,683.083 1149.75,683.083 1150.31,683.083 1150.87,683.083 1151.43,683.083 1151.99,683.083 1152.55,683.083 1153.11,683.083 1153.67,683.083 1154.23,683.083 1154.78,683.083 1155.34,683.083 1155.9,683.083 1156.46,683.083 1157.02,683.083 1157.58,683.083 1158.14,683.083 1158.7,683.083 1159.26,683.083 1159.82,683.083 1160.38,683.083 1160.94,683.083 1161.5,683.083 1162.05,683.083 1162.61,683.083 1163.17,683.083 1163.73,683.083 1164.29,683.083 1164.85,683.083 1165.41,683.083 1165.97,683.083 1166.53,683.083 1167.09,683.083 1167.65,683.083 1168.21,683.083 1168.77,683.083 1169.33,683.083 1169.88,683.083 1170.44,683.083 1171,683.083 1171.56,683.083 1172.12,683.083 1172.68,683.083 1173.24,683.083 1173.8,683.083 1174.36,683.083 1174.92,683.083 1175.48,683.083 1176.04,683.083 1176.6,683.083 1177.15,683.083 1177.71,683.083 1178.27,683.083 1178.83,683.083 1179.39,683.083 1179.95,683.083 1180.51,683.083 1181.07,683.083 1181.63,683.083 1182.19,683.083 1182.75,683.083 1183.31,683.083 1183.87,683.083 1184.43,683.083 1184.98,683.083 1185.54,683.083 1186.1,683.083 1186.66,683.083 1187.22,683.083 1187.78,683.083 1188.34,683.083 1188.9,683.083 1189.46,683.083 1190.02,683.083 1190.58,683.083 1191.14,683.083 1191.7,683.083 1192.25,683.083 1192.81,683.083 1193.37,683.083 1193.93,683.083 1194.49,683.083 1195.05,683.083 1195.61,683.083 1196.17,683.083 1196.73,683.083 1197.29,683.083 1197.85,683.083 1198.41,683.083 1198.97,683.083 1199.52,683.083 1200.08,683.083 1200.64,683.083 1201.2,683.083 1201.76,683.083 1202.32,683.083 1202.88,683.083 1203.44,683.083 1204,683.083 1204.56,683.083 1205.12,683.083 1205.68,683.083 1206.24,683.083 1206.8,683.083 1207.35,683.083 1207.91,683.083 1208.47,683.083 1209.03,683.083 1209.59,683.083 1210.15,683.083 1210.71,683.083 1211.27,683.083 1211.83,683.083 1212.39,683.083 1212.95,683.083 1213.51,683.083 1214.07,683.083 1214.62,683.083 1215.18,683.083 1215.74,683.083 1216.3,683.083 1216.86,683.083 1217.42,683.083 1217.98,683.083 1218.54,683.083 1219.1,683.083 1219.66,683.083 1220.22,683.083 1220.78,683.083 1221.34,683.083 1221.89,683.083 1222.45,683.083 1223.01,683.083 1223.57,683.083 1224.13,683.083 1224.69,683.083 1225.25,683.083 1225.81,683.083 1226.37,683.083 1226.93,683.083 1227.49,683.083 1228.05,683.083 1228.61,683.083 1229.17,683.083 1229.72,683.083 1230.28,683.083 1230.84,683.083 1231.4,683.083 1231.96,683.083 1232.52,683.083 1233.08,683.083 1233.64,683.083 1234.2,683.083 1234.76,683.083 1235.32,683.083 1235.88,683.083 1236.44,683.083 1236.99,683.083 1237.55,683.083 1238.11,683.083 1238.67,683.083 1239.23,683.083 1239.79,683.083 1240.35,683.083 1240.91,683.083 1241.47,683.083 1242.03,683.083 1242.59,683.083 1243.15,683.083 1243.71,683.083 1244.26,683.083 1244.82,683.083 1245.38,683.083 1245.94,683.083 1246.5,683.083 1247.06,683.083 1247.62,683.083 1248.18,683.083 1248.74,683.083 1249.3,683.083 1249.86,683.083 1250.42,683.083 1250.98,683.083 1251.54,683.083 1252.09,683.083 1252.65,683.083 1253.21,683.083 1253.77,683.083 1254.33,683.083 1254.89,683.083 1255.45,683.083 1256.01,683.083 1256.57,683.083 1257.13,683.083 1257.69,683.083 1258.25,683.083 1258.81,683.083 1259.36,683.083 1259.92,683.083 1260.48,683.083 1261.04,683.083 1261.6,683.083 1262.16,683.083 1262.72,683.083 1263.28,683.083 1263.84,683.083 1264.4,683.083 1264.96,683.083 1265.52,683.083 1266.08,683.083 1266.63,683.083 1267.19,683.083 1267.75,683.083 1268.31,683.083 1268.87,683.083 1269.43,683.083 1269.99,683.083 1270.55,683.083 1271.11,683.083 1271.67,683.083 1272.23,683.083 1272.79,683.083 1273.35,683.083 1273.91,683.083 1274.46,683.083 1275.02,683.083 1275.58,683.083 1276.14,683.083 1276.7,683.083 1277.26,683.083 1277.82,683.083 1278.38,683.083 1278.94,683.083 1279.5,683.083 1280.06,683.083 1280.62,683.083 1281.18,683.083 1281.73,683.083 1282.29,683.083 1282.85,683.083 1283.41,683.083 1283.97,683.083 1284.53,683.083 1285.09,683.083 1285.65,683.083 1286.21,683.083 1286.77,683.083 1287.33,683.083 1287.89,683.083 1288.45,683.083 1289,683.083 1289.56,683.083 1290.12,683.083 1290.68,683.083 1291.24,683.083 1291.8,683.083 1292.36,683.083 1292.92,683.083 1293.48,683.083 1294.04,683.083 1294.6,683.083 1295.16,683.083 1295.72,683.083 1296.28,683.083 1296.83,683.083 1297.39,683.083 1297.95,683.083 1298.51,683.083 1299.07,683.083 1299.63,683.083 1300.19,683.083 1300.75,683.083 1301.31,683.083 1301.87,683.083 1302.43,683.083 1302.99,683.083 1303.55,683.083 1304.1,683.083 1304.66,683.083 1305.22,683.083 1305.78,683.083 1306.34,683.083 1306.9,683.083 1307.46,683.083 1308.02,683.083 1308.58,683.083 1309.14,683.083 1309.7,683.083 1310.26,683.083 1310.82,683.083 1311.38,683.083 1311.93,683.083 1312.49,683.083 1313.05,683.083 1313.61,683.083 1314.17,683.083 1314.73,683.083 1315.29,683.083 1315.85,683.083 1316.41,683.083 1316.97,683.083 1317.53,683.083 1318.09,683.083 1318.65,683.083 1319.2,683.083 1319.76,683.083 1320.32,683.083 1320.88,683.083 1321.44,683.083 1322,683.083 1322.56,683.083 1323.12,683.083 1323.68,683.083 1324.24,683.083 1324.8,683.083 1325.36,683.083 1325.92,683.083 1326.47,683.083 1327.03,683.083 1327.59,683.083 1328.15,683.083 1328.71,683.083 1329.27,683.083 1329.83,683.083 1330.39,683.083 1330.95,683.083 1331.51,683.083 1332.07,683.083 1332.63,683.083 1333.19,683.083 1333.75,683.083 1334.3,683.083 1334.86,683.083 1335.42,683.083 1335.98,683.083 1336.54,683.083 1337.1,683.083 1337.66,683.083 1338.22,683.083 1338.78,683.083 1339.34,683.083 1339.9,683.083 1340.46,683.083 1341.02,683.083 1341.57,683.083 1342.13,683.083 1342.69,683.083 1343.25,683.083 1343.81,683.083 1344.37,683.083 1344.93,683.083 1345.49,683.083 1346.05,683.083 1346.61,683.083 1347.17,683.083 1347.73,683.083 1348.29,683.083 1348.84,683.083 1349.4,683.083 1349.96,683.083 1350.52,683.083 1351.08,683.083 1351.64,683.083 1352.2,683.083 1352.76,683.083 1353.32,683.083 1353.88,683.083 1354.44,683.083 1355,683.083 1355.56,683.083 1356.12,683.083 1356.67,683.083 1357.23,683.083 1357.79,683.083 1358.35,683.083 1358.91,683.083 1359.47,683.083 1360.03,683.083 1360.59,683.083 1361.15,683.083 1361.71,683.083 1362.27,683.083 1362.83,683.083 1363.39,683.083 1363.94,683.083 1364.5,683.083 1365.06,683.083 1365.62,683.083 1366.18,683.083 1366.74,683.083 1367.3,683.083 1367.86,683.083 1368.42,683.083 1368.98,683.083 1369.54,683.083 1370.1,683.083 1370.66,683.083 1371.21,683.083 1371.77,683.083 1372.33,683.083 1372.89,683.083 1373.45,683.083 1374.01,683.083 1374.57,683.083 1375.13,683.083 1375.69,683.083 1376.25,683.083 1376.81,683.083 1377.37,683.083 1377.93,683.083 1378.49,683.083 1379.04,683.083 1379.6,683.083 1380.16,683.083 1380.72,683.083 1381.28,683.083 1381.84,683.083 1382.4,683.083 1382.96,683.083 1383.52,683.083 1384.08,683.083 1384.64,683.083 1385.2,683.083 1385.76,683.083 1386.31,683.083 1386.87,683.083 1387.43,683.083 1387.99,683.083 1388.55,683.083 1389.11,683.083 1389.67,683.083 1390.23,683.083 1390.79,683.083 1391.35,683.083 1391.91,683.083 1392.47,683.083 1393.03,683.083 1393.58,683.083 1394.14,683.083 1394.7,683.083 1395.26,683.083 1395.82,683.083 1396.38,683.083 1396.94,683.083 1397.5,683.083 1398.06,683.083 1398.62,683.083 1399.18,683.083 1399.74,683.083 1400.3,683.083 1400.86,683.083 1401.41,683.083 1401.97,683.083 1402.53,683.083 1403.09,683.083 1403.65,683.083 1404.21,683.083 1404.77,683.083 1405.33,683.083 1405.89,683.083 1406.45,683.083 1407.01,683.083 1407.57,683.083 1408.13,683.083 1408.68,683.083 1409.24,683.083 1409.8,683.083 1410.36,683.083 1410.92,683.083 1411.48,683.083 1412.04,683.083 1412.6,683.083 1413.16,683.083 1413.72,683.083 1414.28,683.083 1414.84,683.083 1415.4,683.083 1415.95,683.083 1416.51,683.083 1417.07,683.083 1417.63,683.083 1418.19,683.083 1418.75,683.083 1419.31,683.083 1419.87,683.083 1420.43,683.083 1420.99,683.083 1421.55,683.083 1422.11,683.083 1422.67,683.083 1423.23,683.083 1423.78,683.083 1424.34,683.083 1424.9,683.083 1425.46,683.083 1426.02,683.083 1426.58,683.083 1427.14,683.083 1427.7,683.083 1428.26,683.083 1428.82,683.083 1429.38,683.083 1429.94,683.083 1430.5,683.083 1431.05,683.083 1431.61,683.083 1432.17,683.083 1432.73,683.083 1433.29,683.083 1433.85,683.083 1434.41,683.083 1434.97,683.083 1435.53,683.083 1436.09,683.083 1436.65,683.083 1437.21,683.083 1437.77,683.083 1438.33,683.083 1438.88,683.083 1439.44,683.083 1440,683.083 1440.56,683.083 1441.12,683.083 1441.68,683.083 1442.24,683.083 1442.8,683.083 1443.36,683.083 1443.92,683.083 1444.48,683.083 1445.04,683.083 1445.6,683.083 1446.15,683.083 1446.71,683.083 1447.27,683.083 1447.83,683.083 1448.39,683.083 1448.95,683.083 1449.51,683.083 1450.07,683.083 1450.63,683.083 1451.19,683.083 1451.75,683.083 1452.31,683.083 1452.87,683.083 1453.42,683.083 1453.98,683.083 1454.54,683.083 1455.1,683.083 1455.66,683.083 1456.22,683.083 1456.78,683.083 1457.34,683.083 1457.9,683.083 1458.46,683.083 1459.02,683.083 1459.58,683.083 1460.14,683.083 1460.7,683.083 1461.25,683.083 1461.81,683.083 1462.37,683.083 1462.93,683.083 1463.49,683.083 1464.05,683.083 1464.61,683.083 1465.17,683.083 1465.73,683.083 1466.29,683.083 1466.85,683.083 1467.41,683.083 1467.97,683.083 1468.52,683.083 1469.08,683.083 1469.64,683.083 1470.2,683.083 1470.76,683.083 1471.32,683.083 1471.88,683.083 1472.44,683.083 1473,683.083 1473.56,683.083 1474.12,683.083 1474.68,683.083 1475.24,683.083 1475.79,683.083 1476.35,683.083 1476.91,683.083 1477.47,683.083 1478.03,683.083 1478.59,683.083 1479.15,683.083 1479.71,683.083 1480.27,683.083 1480.83,683.083 1481.39,683.083 1481.95,683.083 1482.51,683.083 1483.07,683.083 1483.62,683.083 1484.18,683.083 1484.74,683.083 1485.3,683.083 1485.86,683.083 1486.42,683.083 1486.98,683.083 1487.54,683.083 1488.1,683.083 1488.66,683.083 1489.22,683.083 1489.78,683.083 1490.34,683.083 1490.89,683.083 1491.45,683.083 1492.01,683.083 1492.57,683.083 1493.13,683.083 1493.69,683.083 1494.25,683.083 1494.81,683.083 1495.37,683.083 1495.93,683.083 1496.49,683.083 1497.05,683.083 1497.61,683.083 1498.16,683.083 1498.72,683.083 1499.28,683.083 1499.84,683.083 1500.4,683.083 1500.96,683.083 1501.52,683.083 1502.08,683.083 1502.64,683.083 1503.2,683.083 1503.76,683.083 1504.32,683.083 1504.88,683.083 1505.44,683.083 1505.99,683.083 1506.55,683.083 1507.11,683.083 1507.67,683.083 1508.23,683.083 1508.79,683.083 1509.35,683.083 1509.91,683.083 1510.47,683.083 1511.03,683.083 1511.59,683.083 1512.15,683.083 1512.71,683.083 1513.26,683.083 1513.82,683.083 1514.38,683.083 1514.94,683.083 1515.5,683.083 1516.06,683.083 1516.62,683.083 1517.18,683.083 1517.74,683.083 1518.3,683.083 1518.86,683.083 1519.42,683.083 1519.98,683.083 1520.53,683.083 1521.09,683.083 1521.65,683.083 1522.21,683.083 1522.77,683.083 1523.33,683.083 1523.89,683.083 1524.45,683.083 1525.01,683.083 1525.57,683.083 1526.13,683.083 1526.69,683.083 1527.25,683.083 1527.81,683.083 1528.36,683.083 1528.92,683.083 1529.48,683.083 1530.04,683.083 1530.6,683.083 1531.16,683.083 1531.72,683.083 1532.28,683.083 1532.84,683.083 1533.4,683.083 1533.96,683.083 1534.52,683.083 1535.08,683.083 1535.63,683.083 1536.19,683.083 1536.75,683.083 1537.31,683.083 1537.87,683.083 1538.43,683.083 1538.99,683.083 1539.55,683.083 1540.11,683.083 1540.67,683.083 1541.23,683.083 1541.79,683.083 1542.35,683.083 1542.9,683.083 1543.46,683.083 1544.02,683.083 1544.58,683.083 1545.14,683.083 1545.7,683.083 1546.26,683.083 1546.82,683.083 1547.38,683.083 1547.94,683.083 1548.5,683.083 1549.06,683.083 1549.62,683.083 1550.18,683.083 1550.73,683.083 1551.29,683.083 1551.85,683.083 1552.41,683.083 1552.97,683.083 1553.53,683.083 1554.09,683.083 1554.65,683.083 1555.21,683.083 1555.77,683.083 1556.33,683.083 1556.89,683.083 1557.45,683.083 1558,683.083 1558.56,683.083 1559.12,683.083 1559.68,683.083 1560.24,683.083 1560.8,683.083 1561.36,683.083 1561.92,683.083 1562.48,683.083 1563.04,683.083 1563.6,683.083 1564.16,683.083 1564.72,683.083 1565.28,683.083 1565.83,683.083 1566.39,683.083 1566.95,683.083 1567.51,683.083 1568.07,683.083 1568.63,683.083 1569.19,683.083 1569.75,683.083 1570.31,683.083 1570.87,683.083 1571.43,683.083 1571.99,683.083 1572.55,683.083 1573.1,683.083 1573.66,683.083 1574.22,683.083 1574.78,683.083 1575.34,683.083 1575.9,683.083 1576.46,683.083 1577.02,683.083 1577.58,683.083 1578.14,683.083 1578.7,683.083 1579.26,683.083 1579.82,683.083 1580.37,683.083 1580.93,683.083 1581.49,683.083 1582.05,683.083 1582.61,683.083 1583.17,683.083 1583.73,683.083 1584.29,683.083 1584.85,683.083 1585.41,683.083 1585.97,683.083 1586.53,683.083 1587.09,683.083 1587.65,683.083 1588.2,683.083 1588.76,683.083 1589.32,683.083 1589.88,683.083 1590.44,683.083 1591,683.083 1591.56,683.083 1592.12,683.083 1592.68,683.083 1593.24,683.083 1593.8,683.083 1594.36,683.083 1594.92,683.083 1595.47,683.083 1596.03,683.083 1596.59,683.083 1597.15,683.083 1597.71,683.083 1598.27,683.083 1598.83,683.083 1599.39,683.083 1599.95,683.083 1600.51,683.083 1601.07,683.083 1601.63,683.083 1602.19,683.083 1602.74,683.083 1603.3,683.083 1603.86,683.083 1604.42,683.083 1604.98,683.083 1605.54,683.083 1606.1,683.083 1606.66,683.083 1607.22,683.083 1607.78,683.083 1608.34,683.083 1608.9,683.083 1609.46,683.083 1610.02,683.083 1610.57,683.083 1611.13,683.083 1611.69,683.083 1612.25,683.083 1612.81,683.083 1613.37,683.083 1613.93,683.083 1614.49,683.083 1615.05,683.083 1615.61,683.083 1616.17,683.083 1616.73,683.083 1617.29,683.083 1617.84,683.083 1618.4,683.083 1618.96,683.083 1619.52,683.083 1620.08,683.083 1620.64,683.083 1621.2,683.083 1621.76,683.083 1622.32,683.083 1622.88,683.083 1623.44,683.083 1624,683.083 1624.56,683.083 1625.11,683.083 1625.67,683.083 1626.23,683.083 1626.79,683.083 1627.35,683.083 1627.91,683.083 1628.47,683.083 1629.03,683.083 1629.59,683.083 1630.15,683.083 1630.71,683.083 1631.27,683.083 1631.83,683.083 1632.39,683.083 1632.94,683.083 1633.5,683.083 1634.06,683.083 1634.62,683.083 1635.18,683.083 1635.74,683.083 1636.3,683.083 1636.86,683.083 1637.42,683.083 1637.98,683.083 1638.54,683.083 1639.1,683.083 1639.66,683.083 1640.21,683.083 1640.77,683.083 1641.33,683.083 1641.89,683.083 1642.45,683.083 1643.01,683.083 1643.57,683.083 1644.13,683.083 1644.69,683.083 1645.25,683.083 1645.81,683.083 1646.37,683.083 1646.93,683.083 1647.48,683.083 1648.04,683.083 1648.6,683.083 1649.16,683.083 1649.72,683.083 1650.28,683.083 1650.84,683.083 1651.4,683.083 1651.96,683.083 1652.52,683.083 1653.08,683.083 1653.64,683.083 1654.2,683.083 1654.76,683.083 1655.31,683.083 1655.87,683.083 1656.43,683.083 1656.99,683.083 1657.55,683.083 1658.11,683.083 1658.67,683.083 1659.23,683.083 1659.79,683.083 1660.35,683.083 1660.91,683.083 1661.47,683.083 1662.03,683.083 1662.58,683.083 1663.14,683.083 1663.7,683.083 1664.26,683.083 1664.82,683.083 1665.38,683.083 1665.94,683.083 1666.5,683.083 1667.06,683.083 1667.62,683.083 1668.18,683.083 1668.74,683.083 1669.3,683.083 1669.85,683.083 1670.41,683.083 1670.97,683.083 1671.53,683.083 1672.09,683.083 1672.65,683.083 1673.21,683.083 1673.77,683.083 1674.33,683.083 1674.89,683.083 1675.45,683.083 1676.01,683.083 1676.57,683.083 1677.13,683.083 1677.68,683.083 1678.24,683.083 1678.8,683.083 1679.36,683.083 1679.92,683.083 1680.48,683.083 1681.04,683.083 1681.6,683.083 1682.16,683.083 1682.72,683.083 1683.28,683.083 1683.84,683.083 1684.4,683.083 1684.95,683.083 1685.51,683.083 1686.07,683.083 1686.63,683.083 1687.19,683.083 1687.75,683.083 1688.31,683.083 1688.87,683.083 1689.43,683.083 1689.99,683.083 1690.55,683.083 1691.11,683.083 1691.67,683.083 1692.23,683.083 1692.78,683.083 1693.34,683.083 1693.9,683.083 1694.46,683.083 1695.02,683.083 1695.58,683.083 1696.14,683.083 1696.7,683.083 1697.26,683.083 1697.82,683.083 1698.38,683.083 1698.94,683.083 1699.5,683.083 1700.05,683.083 1700.61,683.083 1701.17,683.083 1701.73,683.083 1702.29,683.083 1702.85,683.083 1703.41,683.083 1703.97,683.083 1704.53,683.083 1705.09,683.083 1705.65,683.083 1706.21,683.083 1706.77,683.083 1707.32,683.083 1707.88,683.083 1708.44,683.083 1709,683.083 1709.56,683.083 1710.12,683.083 1710.68,683.083 1711.24,683.083 1711.8,683.083 1712.36,683.083 1712.92,683.083 1713.48,683.083 1714.04,683.083 1714.6,683.083 1715.15,683.083 1715.71,683.083 1716.27,683.083 1716.83,683.083 1717.39,683.083 1717.95,683.083 1718.51,683.083 1719.07,683.083 1719.63,683.083 1720.19,683.083 1720.75,683.083 1721.31,683.083 1721.87,683.083 1722.42,683.083 1722.98,683.083 1723.54,683.083 1724.1,683.083 1724.66,683.083 1725.22,683.083 1725.78,683.083 1726.34,683.083 1726.9,683.083 1727.46,683.083 1728.02,683.083 1728.58,683.083 1729.14,683.083 1729.69,683.083 1730.25,683.083 1730.81,683.083 1731.37,683.083 1731.93,683.083 1732.49,683.083 1733.05,683.083 1733.61,683.083 1734.17,683.083 1734.73,683.083 1735.29,683.083 1735.85,683.083 1736.41,683.083 1736.97,683.083 1737.52,683.083 1738.08,683.083 1738.64,683.083 1739.2,683.083 1739.76,683.083 1740.32,683.083 1740.88,683.083 1741.44,683.083 1742,683.083 1742.56,683.083 1743.12,683.083 1743.68,683.083 1744.24,683.083 1744.79,683.083 1745.35,683.083 1745.91,683.083 1746.47,683.083 1747.03,683.083 1747.59,683.083 1748.15,683.083 1748.71,683.083 1749.27,683.083 1749.83,683.083 1750.39,683.083 1750.95,683.083 1751.51,683.083 1752.06,683.083 1752.62,683.083 1753.18,683.083 1753.74,683.083 1754.3,683.083 1754.86,683.083 1755.42,683.083 1755.98,683.083 1756.54,683.083 1757.1,683.083 1757.66,683.083 1758.22,683.083 1758.78,683.083 1759.34,683.083 1759.89,683.083 1760.45,683.083 1761.01,683.083 1761.57,683.083 1762.13,683.083 1762.69,683.083 1763.25,683.083 1763.81,683.083 1764.37,683.083 1764.93,683.083 1765.49,683.083 1766.05,683.083 1766.61,683.083 1767.16,683.083 1767.72,683.083 1768.28,683.083 1768.84,683.083 1769.4,683.083 1769.96,683.083 1770.52,683.083 1771.08,683.083 1771.64,683.083 1772.2,683.083 1772.76,683.083 1773.32,683.083 1773.88,683.083 1774.43,683.083 1774.99,683.083 1775.55,683.083 1776.11,683.083 1776.67,683.083 1777.23,683.083 1777.79,683.083 1778.35,683.083 1778.91,683.083 1779.47,683.083 1780.03,683.083 1780.59,683.083 1781.15,683.083 1781.71,683.083 1782.26,683.083 1782.82,683.083 1783.38,683.083 1783.94,683.083 1784.5,683.083 1785.06,683.083 1785.62,683.083 1786.18,683.083 1786.74,683.083 1787.3,683.083 1787.86,683.083 1788.42,683.083 1788.98,683.083 1789.53,683.083 1790.09,683.083 1790.65,683.083 1791.21,683.083 1791.77,683.083 1792.33,683.083 1792.89,683.083 1793.45,683.083 1794.01,683.083 1794.57,683.083 1795.13,683.083 1795.69,683.083 1796.25,683.083 1796.8,683.083 1797.36,683.083 1797.92,683.083 1798.48,683.083 1799.04,683.083 1799.6,683.083 1800.16,683.083 1800.72,683.083 1801.28,683.083 1801.84,683.083 1802.4,683.083 1802.96,683.083 1803.52,683.083 1804.08,683.083 1804.63,683.083 1805.19,683.083 1805.75,683.083 1806.31,683.083 1806.87,683.083 1807.43,683.083 1807.99,683.083 1808.55,683.083 1809.11,683.083 1809.67,683.083 1810.23,683.083 1810.79,683.083 1811.35,683.083 1811.9,683.083 1812.46,683.083 1813.02,683.083 1813.58,683.083 1814.14,683.083 1814.7,683.083 1815.26,683.083 1815.82,683.083 1816.38,683.083 1816.94,683.083 1817.5,683.083 1818.06,683.083 1818.62,683.083 1819.18,683.083 1819.73,683.083 1820.29,683.083 1820.85,683.083 1821.41,683.083 1821.97,683.083 1822.53,683.083 1823.09,683.083 1823.65,683.083 1824.21,683.083 1824.77,683.083 1825.33,683.083 1825.89,683.083 1826.45,683.083 1827,683.083 1827.56,683.083 1828.12,683.083 1828.68,683.083 1829.24,683.083 1829.8,683.083 1830.36,683.083 1830.92,683.083 1831.48,683.083 1832.04,683.083 1832.6,683.083 1833.16,683.083 1833.72,683.083 1834.27,683.083 1834.83,683.083 1835.39,683.083 1835.95,683.083 1836.51,683.083 1837.07,683.083 1837.63,683.083 1838.19,683.083 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.023338376780797 ± 0.016795620645075462\nProjected Energy: -4.0125564018469735 ± (0.005533153959735415, 0.005664054041911726)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.490376</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.57e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4457e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.187e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.243e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.745e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.706e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133655\n -0.7590191922770906\n  0.13584182219622143\n  0.15789998694608798\n  0.8767114411781343\n  1.5305929970973313\n  1.5835732611867384\n  3.072870330325866\n  3.1256726539518285\n  4.862107221562173\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
