var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20853320849327037 ± 0.001578647463884154\n   G2(1) = 0.9185451756217415 ± 0.0006548003005892009\n   G2(2) = 0.9826567052526498 ± 0.000540853179662651\n   G2(3) = 0.9890630297579468 ± 0.0008960966186154799\n   G2(4) = 0.9826567052526498 ± 0.000540853179662651\n   G2(5) = 0.9185451756217415 ± 0.0006548003005892009\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9862419651594254 ± 0.12740280581787206\n   Replica 2: -3.990981784547647 ± 0.12635056864267447\n   Replica 3: -4.056716721467453 ± 0.1287012239299878\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip490\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip491\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip492\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.21 2211.02,1003.21 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.586 2211.02,745.586 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.962 2211.02,487.962 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.339 2211.02,230.339 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.21 423.181,1003.21 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.586 423.181,745.586 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.962 423.181,487.962 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.339 423.181,230.339 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M290.043 1016.55 L306.363 1016.55 L306.363 1020.49 L284.418 1020.49 L284.418 1016.55 Q287.08 1013.8 291.664 1009.17 Q296.27 1004.52 297.451 1003.18 Q299.696 1000.65 300.576 998.916 Q301.478 997.157 301.478 995.467 Q301.478 992.712 299.534 990.976 Q297.613 989.24 294.511 989.24 Q292.312 989.24 289.858 990.004 Q287.427 990.768 284.65 992.319 L284.65 987.596 Q287.474 986.462 289.927 985.884 Q292.381 985.305 294.418 985.305 Q299.789 985.305 302.983 987.99 Q306.177 990.675 306.177 995.166 Q306.177 997.296 305.367 999.217 Q304.58 1001.11 302.474 1003.71 Q301.895 1004.38 298.793 1007.6 Q295.691 1010.79 290.043 1016.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M316.224 985.93 L334.58 985.93 L334.58 989.865 L320.506 989.865 L320.506 998.337 Q321.524 997.99 322.543 997.828 Q323.562 997.643 324.58 997.643 Q330.367 997.643 333.747 1000.81 Q337.126 1003.99 337.126 1009.4 Q337.126 1014.98 333.654 1018.08 Q330.182 1021.16 323.862 1021.16 Q321.687 1021.16 319.418 1020.79 Q317.173 1020.42 314.765 1019.68 L314.765 1014.98 Q316.849 1016.11 319.071 1016.67 Q321.293 1017.23 323.77 1017.23 Q327.774 1017.23 330.112 1015.12 Q332.45 1013.01 332.45 1009.4 Q332.45 1005.79 330.112 1003.68 Q327.774 1001.58 323.77 1001.58 Q321.895 1001.58 320.02 1001.99 Q318.168 1002.41 316.224 1003.29 L316.224 985.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 989.009 Q352.728 989.009 350.899 992.573 Q349.094 996.115 349.094 1003.24 Q349.094 1010.35 350.899 1013.92 Q352.728 1017.46 356.339 1017.46 Q359.973 1017.46 361.779 1013.92 Q363.608 1010.35 363.608 1003.24 Q363.608 996.115 361.779 992.573 Q359.973 989.009 356.339 989.009 M356.339 985.305 Q362.149 985.305 365.205 989.911 Q368.284 994.495 368.284 1003.24 Q368.284 1011.97 365.205 1016.58 Q362.149 1021.16 356.339 1021.16 Q350.529 1021.16 347.45 1016.58 Q344.395 1011.97 344.395 1003.24 Q344.395 994.495 347.45 989.911 Q350.529 985.305 356.339 985.305 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M286.062 728.306 L304.418 728.306 L304.418 732.241 L290.344 732.241 L290.344 740.713 Q291.363 740.366 292.381 740.204 Q293.4 740.019 294.418 740.019 Q300.205 740.019 303.585 743.19 Q306.964 746.362 306.964 751.778 Q306.964 757.357 303.492 760.459 Q300.02 763.537 293.701 763.537 Q291.525 763.537 289.256 763.167 Q287.011 762.797 284.603 762.056 L284.603 757.357 Q286.687 758.491 288.909 759.047 Q291.131 759.602 293.608 759.602 Q297.613 759.602 299.951 757.496 Q302.288 755.389 302.288 751.778 Q302.288 748.167 299.951 746.061 Q297.613 743.954 293.608 743.954 Q291.733 743.954 289.858 744.371 Q288.006 744.788 286.062 745.667 L286.062 728.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M326.177 731.385 Q322.566 731.385 320.737 734.95 Q318.932 738.491 318.932 745.621 Q318.932 752.727 320.737 756.292 Q322.566 759.834 326.177 759.834 Q329.811 759.834 331.617 756.292 Q333.446 752.727 333.446 745.621 Q333.446 738.491 331.617 734.95 Q329.811 731.385 326.177 731.385 M326.177 727.681 Q331.987 727.681 335.043 732.288 Q338.122 736.871 338.122 745.621 Q338.122 754.348 335.043 758.954 Q331.987 763.537 326.177 763.537 Q320.367 763.537 317.288 758.954 Q314.233 754.348 314.233 745.621 Q314.233 736.871 317.288 732.288 Q320.367 727.681 326.177 727.681 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 731.385 Q352.728 731.385 350.899 734.95 Q349.094 738.491 349.094 745.621 Q349.094 752.727 350.899 756.292 Q352.728 759.834 356.339 759.834 Q359.973 759.834 361.779 756.292 Q363.608 752.727 363.608 745.621 Q363.608 738.491 361.779 734.95 Q359.973 731.385 356.339 731.385 M356.339 727.681 Q362.149 727.681 365.205 732.288 Q368.284 736.871 368.284 745.621 Q368.284 754.348 365.205 758.954 Q362.149 763.537 356.339 763.537 Q350.529 763.537 347.45 758.954 Q344.395 754.348 344.395 745.621 Q344.395 736.871 347.45 732.288 Q350.529 727.681 356.339 727.681 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M284.835 470.682 L307.057 470.682 L307.057 472.673 L294.511 505.242 L289.627 505.242 L301.432 474.618 L284.835 474.618 L284.835 470.682 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M316.224 470.682 L334.58 470.682 L334.58 474.618 L320.506 474.618 L320.506 483.09 Q321.524 482.743 322.543 482.581 Q323.562 482.395 324.58 482.395 Q330.367 482.395 333.747 485.567 Q337.126 488.738 337.126 494.155 Q337.126 499.733 333.654 502.835 Q330.182 505.914 323.862 505.914 Q321.687 505.914 319.418 505.543 Q317.173 505.173 314.765 504.432 L314.765 499.733 Q316.849 500.867 319.071 501.423 Q321.293 501.979 323.77 501.979 Q327.774 501.979 330.112 499.872 Q332.45 497.766 332.45 494.155 Q332.45 490.543 330.112 488.437 Q327.774 486.331 323.77 486.331 Q321.895 486.331 320.02 486.747 Q318.168 487.164 316.224 488.043 L316.224 470.682 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 473.761 Q352.728 473.761 350.899 477.326 Q349.094 480.868 349.094 487.997 Q349.094 495.104 350.899 498.668 Q352.728 502.21 356.339 502.21 Q359.973 502.21 361.779 498.668 Q363.608 495.104 363.608 487.997 Q363.608 480.868 361.779 477.326 Q359.973 473.761 356.339 473.761 M356.339 470.057 Q362.149 470.057 365.205 474.664 Q368.284 479.247 368.284 487.997 Q368.284 496.724 365.205 501.33 Q362.149 505.914 356.339 505.914 Q350.529 505.914 347.45 501.33 Q344.395 496.724 344.395 487.997 Q344.395 479.247 347.45 474.664 Q350.529 470.057 356.339 470.057 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M256.664 243.684 L264.303 243.684 L264.303 217.318 L255.992 218.985 L255.992 214.725 L264.256 213.059 L268.932 213.059 L268.932 243.684 L276.571 243.684 L276.571 247.619 L256.664 247.619 L256.664 243.684 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M296.015 216.137 Q292.404 216.137 290.576 219.702 Q288.77 223.244 288.77 230.373 Q288.77 237.48 290.576 241.045 Q292.404 244.586 296.015 244.586 Q299.65 244.586 301.455 241.045 Q303.284 237.48 303.284 230.373 Q303.284 223.244 301.455 219.702 Q299.65 216.137 296.015 216.137 M296.015 212.434 Q301.826 212.434 304.881 217.04 Q307.96 221.624 307.96 230.373 Q307.96 239.1 304.881 243.707 Q301.826 248.29 296.015 248.29 Q290.205 248.29 287.127 243.707 Q284.071 239.1 284.071 230.373 Q284.071 221.624 287.127 217.04 Q290.205 212.434 296.015 212.434 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M326.177 216.137 Q322.566 216.137 320.737 219.702 Q318.932 223.244 318.932 230.373 Q318.932 237.48 320.737 241.045 Q322.566 244.586 326.177 244.586 Q329.811 244.586 331.617 241.045 Q333.446 237.48 333.446 230.373 Q333.446 223.244 331.617 219.702 Q329.811 216.137 326.177 216.137 M326.177 212.434 Q331.987 212.434 335.043 217.04 Q338.122 221.624 338.122 230.373 Q338.122 239.1 335.043 243.707 Q331.987 248.29 326.177 248.29 Q320.367 248.29 317.288 243.707 Q314.233 239.1 314.233 230.373 Q314.233 221.624 317.288 217.04 Q320.367 212.434 326.177 212.434 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 216.137 Q352.728 216.137 350.899 219.702 Q349.094 223.244 349.094 230.373 Q349.094 237.48 350.899 241.045 Q352.728 244.586 356.339 244.586 Q359.973 244.586 361.779 241.045 Q363.608 237.48 363.608 230.373 Q363.608 223.244 361.779 219.702 Q359.973 216.137 356.339 216.137 M356.339 212.434 Q362.149 212.434 365.205 217.04 Q368.284 221.624 368.284 230.373 Q368.284 239.1 365.205 243.707 Q362.149 248.29 356.339 248.29 Q350.529 248.29 347.45 243.707 Q344.395 239.1 344.395 230.373 Q344.395 221.624 347.45 217.04 Q350.529 212.434 356.339 212.434 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip492)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.339 4017.76,230.339 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1244.96 462.238,1244.12 462.806,1243.21 463.375,1241.18 463.943,1240.09 464.511,1238.89 465.08,1236.57 465.648,1235.17 466.216,1233.64 466.785,1232 467.353,1230.24 467.921,1228.34 468.49,1226.29 469.058,1224.09 469.626,1221.73 470.195,1218.19 470.763,1214.52 471.331,1211.68 471.9,1208.68 472.468,1203.37 473.036,1198.9 473.605,1195.3 474.173,1189.42 474.741,1185.35 475.31,1180.95 475.878,1175.37 476.446,1170.6 477.015,1162.47 477.583,1157.32 478.152,1150.82 478.72,1144.11 479.288,1137.25 479.857,1131.22 480.425,1123.93 480.993,1116.48 481.562,1108.78 482.13,1100.91 482.698,1093.83 483.267,1086.55 483.835,1079.06 484.403,1070.24 484.972,1061.4 485.54,1052.37 486.108,1044.22 486.677,1034.87 487.245,1025.41 487.813,1016.78 488.382,1006.94 488.95,994.982 489.518,986.075 490.087,976.046 490.655,966.878 491.224,954.535 491.792,945.331 492.36,935.034 492.929,923.616 493.497,910.153 494.065,897.85 494.634,886.453 495.202,877.22 495.77,866.845 496.339,857.337 496.907,846.9 497.475,837.475 498.044,823.908 498.612,814.69 499.18,804.335 499.749,793.96 500.317,783.712 500.885,773.374 501.454,763.14 502.022,753.956 502.59,741.824 503.159,732.975 503.727,724.037 504.295,715.214 504.864,706.398 505.432,694.65 506.001,686.155 506.569,674.729 507.137,664.273 507.706,656.062 508.274,646.991 508.842,637.994 509.411,629.08 509.979,619.43 510.547,608.868 511.116,599.258 511.684,591.865 512.252,584.49 512.821,575.127 513.389,563.063 513.957,555.457 514.526,546.956 515.094,540.633 515.662,533.549 516.231,527.367 516.799,520.183 517.367,512.38 517.936,502.524 518.504,492.986 519.072,488.948 519.641,482.842 520.209,475.818 520.778,468.548 521.346,461.805 521.914,455.349 522.483,449.773 523.051,444.467 523.619,440.379 524.188,436.261 524.756,431.17 525.324,426.092 525.893,419.187 526.461,414.562 527.029,410.02 527.598,405.831 528.166,402.535 528.734,398.378 529.303,395.219 529.871,388.918 530.439,383.031 531.008,379.773 531.576,376.239 532.144,372.867 532.713,369.456 533.281,368.394 533.85,366.141 534.418,362.9 534.986,358.55 535.555,356.367 536.123,353.429 536.691,351.283 537.26,348.246 537.828,347.419 538.396,345.259 538.965,343.286 539.533,339.163 540.101,335.232 540.67,333.396 541.238,330.532 541.806,325.494 542.375,318.838 542.943,318.881 543.511,318.644 544.08,315.241 544.648,312.133 545.216,310.236 545.785,308.294 546.353,307.42 546.921,305.437 547.49,303.567 548.058,301.662 548.627,297.913 549.195,298.485 549.763,298.617 550.332,294.698 550.9,292.012 551.468,292.449 552.037,289.87 552.605,288.35 553.173,287.823 553.742,287.145 554.31,287.657 554.878,287.883 555.447,288.214 556.015,286.446 556.583,285.602 557.152,283.914 557.72,281.277 558.288,279.745 558.857,280.21 559.425,277.661 559.993,276.046 560.562,274.814 561.13,275.455 561.698,275.051 562.267,275.65 562.835,273.004 563.404,272.564 563.972,272.468 564.54,271.175 565.109,270.015 565.677,270.693 566.245,267.169 566.814,266.024 567.382,264.642 567.95,263.748 568.519,263.051 569.087,263.227 569.655,262.202 570.224,260.215 570.792,260.278 571.36,262.194 571.929,260.04 572.497,260.058 573.065,258.926 573.634,259.065 574.202,258.068 574.77,257.148 575.339,258.342 575.907,258.338 576.476,259.272 577.044,255.004 577.612,256.232 578.181,257.256 578.749,257.259 579.317,256.002 579.886,254.955 580.454,254.12 581.022,255.4 581.591,255.484 582.159,254.446 582.727,253.769 583.296,253.512 583.864,254.422 584.432,255.317 585.001,255.035 585.569,253.913 586.137,250.642 586.706,251.559 587.274,252.952 587.842,253.857 588.411,254.822 588.979,256.595 589.547,257.204 590.116,257.826 590.684,258.248 591.253,258.646 591.821,258.946 592.389,257.903 592.958,254.124 593.526,253.567 594.094,252.311 594.663,249.787 595.231,246.741 595.799,244.668 596.368,243.799 596.936,245.016 597.504,245.087 598.073,244.176 598.641,245.336 599.209,245.349 599.778,244.307 600.346,244.351 600.914,242.31 601.483,243.315 602.051,245.329 602.619,244.324 603.188,242.205 603.756,243.265 604.325,242.207 604.893,242.25 605.461,244.313 606.03,243.095 606.598,243.438 607.166,243.457 607.735,242.546 608.303,242.554 608.871,241.641 609.44,240.932 610.008,241.233 610.576,242.329 611.145,239.158 611.713,239.206 612.281,239.482 612.85,237.655 613.418,240.021 613.986,238.115 614.555,239.389 615.123,240.595 615.691,240.795 616.26,240.776 616.828,239.644 617.396,237.915 617.965,238.154 618.533,239.561 619.102,239.728 619.67,239.67 620.238,238.924 620.807,239.279 621.375,238.515 621.943,237.641 622.512,239.884 623.08,240.005 623.648,238.209 624.217,237.224 624.785,237.412 625.353,238.708 625.922,237.941 626.49,238.362 627.058,239.533 627.627,238.448 628.195,236.567 628.763,235.853 629.332,236.17 629.9,234.581 630.468,237.113 631.037,237.386 631.605,236.505 632.173,234.628 632.742,234.992 633.31,232.259 633.879,233.018 634.447,234.494 635.015,233.587 635.584,233.998 636.152,232.516 636.72,234.323 637.289,232.776 637.857,233.362 638.425,235.129 638.994,237.578 639.562,238.587 640.13,237.715 640.699,237.931 641.267,238.069 641.835,238.063 642.404,237.007 642.972,237.312 643.54,237.372 644.109,239.557 644.677,241.427 645.245,240.192 645.814,237.961 646.382,237.117 646.951,236.169 647.519,236.295 648.087,236.259 648.656,238.566 649.224,238.542 649.792,238.313 650.361,236.27 650.929,234.316 651.497,234.662 652.066,235.685 652.634,235.801 653.202,234.99 653.771,235.249 654.339,235.618 654.907,233.757 655.476,236.288 656.044,234.437 656.612,238.667 657.181,234.922 657.749,235.056 658.317,237.337 658.886,237.313 659.454,233.428 660.022,234.632 660.591,234.625 661.159,233.717 661.728,233.875 662.296,234.267 662.864,235.577 663.433,232.703 664.001,231.94 664.569,232.423 665.138,232.647 665.706,232.764 666.274,232.212 666.843,232.683 667.411,234.026 667.979,232.388 668.548,232.852 669.116,235.415 669.684,235.475 670.253,235.663 670.821,236.761 671.389,236.74 671.958,240.814 672.526,237.648 673.094,240.845 673.663,241.764 674.231,240.514 674.799,242.177 675.368,241.935 675.936,240.531 676.505,239.176 677.073,238.17 677.641,238.934 678.21,237.603 678.778,239.535 679.346,239.398 679.915,239.247 680.483,239.06 681.051,236.767 681.62,236.688 682.188,236.641 682.756,236.599 683.325,237.739 683.893,238.508 684.461,239.286 685.03,237.073 685.598,235.894 686.166,233.774 686.735,232.667 687.303,231.631 687.871,230.718 688.44,229.932 689.008,231.376 689.577,232.643 690.145,232.859 690.713,234.028 691.282,234.241 691.85,232.429 692.418,232.583 692.987,230.819 693.555,232.193 694.123,230.295 694.692,230.606 695.26,231.864 695.828,232.297 696.397,233.633 696.965,233.693 697.533,233.643 698.102,232.663 698.67,230.582 699.238,230.75 699.807,233.055 700.375,232.026 700.943,231.081 701.512,229.328 702.08,227.695 702.648,229.102 703.217,230.462 703.785,231.865 704.354,233.31 704.922,233.416 705.49,231.406 706.059,229.429 706.627,228.972 707.195,228.57 707.764,227.02 708.332,227.5 708.9,229.193 709.469,228.568 710.037,230.143 710.605,229.569 711.174,228.958 711.742,229.208 712.31,230.72 712.879,231.275 713.447,230.361 714.015,230.806 714.584,232.152 715.152,231.431 715.72,232.55 716.289,233.753 716.857,234.928 717.425,233.78 717.994,234.908 718.562,235.845 719.131,235.581 719.699,233.445 720.267,233.772 720.836,232.88 721.404,230.865 721.972,230.026 722.541,227.157 723.109,226.557 723.677,228.158 724.246,227.589 724.814,227.075 725.382,229.677 725.951,230.029 726.519,228.412 727.087,230.867 727.656,232.104 728.224,232.265 728.792,232.568 729.361,232.528 729.929,234.599 730.497,233.704 731.066,233.755 731.634,236.063 732.203,235.076 732.771,236.42 733.339,237.599 733.908,239.621 734.476,239.268 735.044,237.986 735.613,237.695 736.181,236.392 736.749,237.221 737.318,237.154 737.886,238.031 738.454,237.855 739.023,239.575 739.591,238.326 740.159,239.107 740.728,239.759 741.296,237.398 741.864,238.162 742.433,236.692 743.001,237.342 743.569,238.142 744.138,237.756 744.706,237.487 745.274,238.207 745.843,236.831 746.411,235.642 746.98,234.336 747.548,233.289 748.116,233.269 748.685,233.287 749.253,233.345 749.821,233.477 750.39,232.43 750.958,232.19 751.526,231.246 752.095,232.517 752.663,231.462 753.231,231.523 753.8,228.619 754.368,227.952 754.936,228.198 755.505,229.843 756.073,230.009 756.641,229.134 757.21,228.318 757.778,230.506 758.346,228.892 758.915,229.029 759.483,230.219 760.052,230.547 760.62,229.581 761.188,228.817 761.757,227.076 762.325,227.451 762.893,225.846 763.462,227.467 764.03,227.893 764.598,228.279 765.167,228.589 765.735,228.904 766.303,229.281 766.872,231.441 767.44,231.59 768.008,231.773 768.577,233.076 769.145,233.135 769.713,233.214 770.282,233.359 770.85,233.377 771.418,232.476 771.987,234.444 772.555,239.554 773.123,239.015 773.692,238.657 774.26,236.051 774.829,235.961 775.397,236.789 775.965,236.47 776.534,236.18 777.102,236.224 777.67,234.702 778.239,233.362 778.807,233.298 779.375,232.908 779.944,232.844 780.512,234.884 781.08,233.619 781.649,232.492 782.217,232.282 782.785,231.273 783.354,231.296 783.922,229.298 784.49,229.704 785.059,230.118 785.627,230.34 786.195,230.338 786.764,232.545 787.332,232.7 787.9,231.468 788.469,232.477 789.037,233.434 789.606,236.423 790.174,234.989 790.742,233.65 791.311,232.496 791.879,235.456 792.447,235.324 793.016,235.037 793.584,234.947 794.152,230.67 794.721,230.888 795.289,231.8 795.857,230.75 796.426,231.77 796.994,232.857 797.562,233.799 798.131,234.842 798.699,233.453 799.267,234.279 799.836,233.777 800.404,232.501 800.972,232.356 801.541,230.076 802.109,227.845 802.678,228.977 803.246,228.863 803.814,230.183 804.383,228.228 804.951,230.437 805.519,230.459 806.088,229.464 806.656,231.806 807.224,230.839 807.793,230.687 808.361,231.857 808.929,233.835 809.498,231.686 810.066,230.592 810.634,229.494 811.203,228.57 811.771,230.851 812.339,232.929 812.908,232.794 813.476,231.669 814.044,230.758 814.613,232.732 815.181,233.653 815.749,233.452 816.318,234.422 816.886,232.241 817.455,232.026 818.023,230.77 818.591,229.684 819.16,228.698 819.728,228.867 820.296,230.071 820.865,230.217 821.433,231.467 822.001,229.199 822.57,230.306 823.138,231.686 823.706,232.514 824.275,231.274 824.843,231.097 825.411,230.313 825.98,230.341 826.548,231.204 827.116,231.088 827.685,231.08 828.253,230.174 828.821,232.36 829.39,232.423 829.958,233.208 830.526,233.048 831.095,232.804 831.663,232.753 832.232,233.627 832.8,233.39 833.368,232.23 833.937,231.028 834.505,229.994 835.073,230.126 835.642,230.131 836.21,229.342 836.778,231.607 837.347,231.436 837.915,231.248 838.483,231.349 839.052,229.403 839.62,230.571 840.188,228.445 840.757,226.67 841.325,227.06 841.893,226.328 842.462,226.634 843.03,227.909 843.598,229.297 844.167,228.271 844.735,227.421 845.304,230.636 845.872,230.674 846.44,231.494 847.009,230.452 847.577,231.559 848.145,233.669 848.714,233.474 849.282,232.203 849.85,231.073 850.419,231.398 850.987,232.606 851.555,233.43 852.124,232.29 852.692,232.342 853.26,231.921 853.829,232.913 854.397,233.759 854.965,234.626 855.534,234.56 856.102,233.237 856.67,229.974 857.239,230.109 857.807,230.077 858.375,228.98 858.944,228.197 859.512,228.251 860.081,229.417 860.649,229.578 861.217,230.636 861.786,232.856 862.354,231.489 862.922,230.332 863.491,229.319 864.059,227.306 864.627,223.335 865.196,225.041 865.764,227.559 866.332,228.892 866.901,229.949 867.469,229.11 868.037,228.112 868.606,228.161 869.174,230.431 869.742,229.578 870.311,229.888 870.879,227.866 871.447,228.065 872.016,228.137 872.584,227.432 873.152,228.785 873.721,230.067 874.289,230.196 874.858,229.183 875.426,229.351 875.994,229.5 876.563,228.572 877.131,227.705 877.699,226.998 878.268,228.33 878.836,229.696 879.404,232.002 879.973,231.977 880.541,231.933 881.109,231.881 881.678,230.68 882.246,230.673 882.814,229.825 883.383,228.694 883.951,230.92 884.519,230.739 885.088,229.882 885.656,230.946 886.224,231.201 886.793,234.312 887.361,232.988 887.93,234.149 888.498,234.173 889.066,231.751 889.635,233.728 890.203,232.613 890.771,233.761 891.34,235.916 891.908,235.74 892.476,236.574 893.045,238.451 893.613,238.183 894.181,236.608 894.75,237.237 895.318,235.85 895.886,236.598 896.455,235.155 897.023,235.417 897.591,234.109 898.16,232.841 898.728,230.728 899.296,229.715 899.865,228.624 900.433,227.663 901.001,228.878 901.57,225.991 902.138,226.501 902.707,227.64 903.275,227.886 903.843,229.986 904.412,232.236 904.98,233.053 905.548,233.957 906.117,232.638 906.685,233.571 907.253,233.39 907.822,232.002 908.39,231.941 908.958,235.058 909.527,232.699 910.095,233.725 910.663,234.453 911.232,235.327 911.8,233.915 912.368,232.708 912.937,232.317 913.505,233.08 914.073,233.016 914.642,233.759 915.21,234.348 915.779,231.83 916.347,232.607 916.915,233.595 917.484,234.346 918.052,235.175 918.62,235.748 919.189,235.169 919.757,234.843 920.325,234.433 920.894,233.025 921.462,233.918 922.03,235.508 922.599,236.049 923.167,235.567 923.735,234.986 924.304,232.71 924.872,234.723 925.44,234.451 926.009,234.892 926.577,234.581 927.145,234.22 927.714,234.646 928.282,234.162 928.85,233.933 929.419,234.664 929.987,234.155 930.556,233.908 931.124,232.448 931.692,231.134 932.261,229.946 932.829,228.701 933.397,227.69 933.966,227.718 934.534,228.682 935.102,228.705 935.671,227.691 936.239,226.705 936.807,227.968 937.376,227.925 937.944,228.023 938.512,229.265 939.081,227.378 939.649,225.386 940.217,225.632 940.786,223.958 941.354,222.228 941.922,221.638 942.491,221.2 943.059,221.845 943.627,222.554 944.196,222.923 944.764,223.479 945.333,224.895 945.901,225.173 946.469,225.38 947.038,223.889 947.606,223.391 948.174,223.033 948.743,222.302 949.311,224.123 949.879,224.464 950.448,225.05 951.016,225.631 951.584,223.95 952.153,223.39 952.721,223.913 953.289,225.511 953.858,226.868 954.426,227.036 954.994,228.491 955.563,229.764 956.131,229.67 956.699,228.711 957.268,230.012 957.836,229.329 958.405,229.605 958.973,228.835 959.541,231.325 960.11,231.419 960.678,230.484 961.246,230.506 961.815,232.561 962.383,232.396 962.951,232.273 963.52,232.149 964.088,232.071 964.656,236.094 965.225,236.604 965.793,235.028 966.361,233.586 966.93,233.451 967.498,233.22 968.066,232.921 968.635,232.802 969.203,231.631 969.771,232.685 970.34,231.399 970.908,231.427 971.476,229.326 972.045,229.383 972.613,230.588 973.182,230.488 973.75,232.52 974.318,232.644 974.887,234.622 975.455,235.244 976.023,234.825 976.592,236.812 977.16,235.333 977.728,236.102 978.297,235.677 978.865,234.206 979.433,233.803 980.002,233.723 980.57,234.494 981.138,233.218 981.707,230.252 982.275,229.166 982.843,229.117 983.412,229.324 983.98,230.193 984.548,231.265 985.117,229.141 985.685,230.488 986.253,231.691 986.822,231.427 987.39,231.26 987.959,233.011 988.527,231.934 989.095,230.655 989.664,232.598 990.232,231.569 990.8,232.738 991.369,231.575 991.937,230.642 992.505,230.613 993.074,226.468 993.642,224.75 994.21,226.059 994.779,226.18 995.347,227.698 995.915,228.967 996.484,228.072 997.052,229.42 997.62,230.455 998.189,230.421 998.757,231.475 999.325,230.58 999.894,230.562 1000.46,231.806 1001.03,230.657 1001.6,229.621 1002.17,229.662 1002.74,230.004 1003.3,231.039 1003.87,230.895 1004.44,230.608 1005.01,231.62 1005.58,231.614 1006.15,233.703 1006.71,232.428 1007.28,231.171 1007.85,231.062 1008.42,232.114 1008.99,229.913 1009.56,229.964 1010.12,227.821 1010.69,226.988 1011.26,226.069 1011.83,225.487 1012.4,223.066 1012.97,220.458 1013.53,221.191 1014.1,221.833 1014.67,220.757 1015.24,220.487 1015.81,221.238 1016.38,219.895 1016.94,221.969 1017.51,224.7 1018.08,224.06 1018.65,223.403 1019.22,224.988 1019.79,224.426 1020.35,225.924 1020.92,225.393 1021.49,224.735 1022.06,226.191 1022.63,225.753 1023.2,227.439 1023.76,225.86 1024.33,228.167 1024.9,228.234 1025.47,229.82 1026.04,233.296 1026.61,234.198 1027.17,235.339 1027.74,236.182 1028.31,234.771 1028.88,233.698 1029.45,233.684 1030.02,235.73 1030.58,235.385 1031.15,236.133 1031.72,237.771 1032.29,237.528 1032.86,238.174 1033.43,237.893 1033.99,234.623 1034.56,233.495 1035.13,234.27 1035.7,232.952 1036.27,233.772 1036.84,233.355 1037.4,232.47 1037.97,233.459 1038.54,233.232 1039.11,232.271 1039.68,232.41 1040.25,233.3 1040.81,234.126 1041.38,233.683 1041.95,232.438 1042.52,231.32 1043.09,233.566 1043.66,233.478 1044.22,233.365 1044.79,231.976 1045.36,229.705 1045.93,229.693 1046.5,232.896 1047.07,231.887 1047.63,233.887 1048.2,234.62 1048.77,235.265 1049.34,236.899 1049.91,237.404 1050.48,239.139 1051.05,239.553 1051.61,240.144 1052.18,238.121 1052.75,235.401 1053.32,234.87 1053.89,233.6 1054.46,232.374 1055.02,233.138 1055.59,230.759 1056.16,231.455 1056.73,227.208 1057.3,226.349 1057.87,224.411 1058.43,225.579 1059,220.697 1059.57,221.373 1060.14,222.096 1060.71,224.68 1061.28,225.416 1061.84,225.859 1062.41,226.317 1062.98,226.701 1063.55,221.811 1064.12,220.089 1064.69,220.808 1065.25,223.582 1065.82,224.054 1066.39,224.56 1066.96,223.18 1067.53,223.656 1068.1,223.206 1068.66,223.631 1069.23,224.114 1069.8,222.706 1070.37,225.711 1070.94,228.519 1071.51,229.934 1072.07,231.191 1072.64,232.353 1073.21,233.474 1073.78,232.402 1074.35,231.441 1074.92,231.474 1075.48,231.433 1076.05,230.676 1076.62,229.97 1077.19,230.192 1077.76,231.271 1078.33,233.502 1078.89,233.381 1079.46,233.337 1080.03,235.311 1080.6,230.921 1081.17,229.996 1081.74,230.064 1082.3,229.946 1082.87,230.222 1083.44,228.368 1084.01,231.561 1084.58,231.996 1085.15,232.048 1085.71,231.968 1086.28,230.858 1086.85,230.028 1087.42,232.183 1087.99,230.155 1088.56,230.272 1089.12,232.418 1089.69,233.162 1090.26,232.992 1090.83,233.906 1091.4,233.479 1091.97,235.5 1092.53,235.004 1093.1,232.761 1093.67,231.706 1094.24,232.862 1094.81,231.792 1095.38,231.953 1095.94,233.952 1096.51,233.43 1097.08,235.338 1097.65,235.812 1098.22,233.107 1098.79,235.037 1099.35,234.663 1099.92,231.237 1100.49,230.307 1101.06,232.327 1101.63,234.299 1102.2,235.13 1102.76,234.844 1103.33,234.46 1103.9,234.155 1104.47,233.806 1105.04,232.46 1105.61,232.33 1106.17,233.212 1106.74,234.274 1107.31,233.914 1107.88,233.473 1108.45,234.19 1109.02,236.592 1109.58,237.131 1110.15,236.481 1110.72,236.022 1111.29,234.703 1111.86,233.222 1112.43,231.888 1112.99,231.741 1113.56,230.448 1114.13,231.416 1114.7,232.124 1115.27,232.134 1115.84,232.918 1116.4,232.646 1116.97,232.53 1117.54,230.105 1118.11,229.028 1118.68,227.7 1119.25,228.626 1119.81,227.669 1120.38,226.742 1120.95,229.991 1121.52,230.162 1122.09,230.159 1122.66,231.238 1123.23,231.184 1123.79,229.152 1124.36,230.487 1124.93,230.409 1125.5,230.263 1126.07,229.136 1126.64,229.322 1127.2,231.252 1127.77,231.275 1128.34,229.162 1128.91,230.189 1129.48,229.017 1130.05,229.114 1130.61,229.876 1131.18,232.809 1131.75,232.614 1132.32,231.481 1132.89,232.154 1133.46,233.819 1134.02,232.389 1134.59,232.402 1135.16,229.193 1135.73,229.307 1136.3,230.676 1136.87,228.534 1137.43,227.519 1138,227.527 1138.57,228.817 1139.14,227.912 1139.71,226.071 1140.28,226.395 1140.84,228.644 1141.41,225.779 1141.98,221.728 1142.55,221.533 1143.12,223.195 1143.69,223.697 1144.25,223.887 1144.82,223.439 1145.39,225.057 1145.96,227.632 1146.53,225.729 1147.1,226.01 1147.66,226.127 1148.23,226.466 1148.8,224.66 1149.37,225.988 1149.94,226.376 1150.51,226.619 1151.07,229.952 1151.64,229.886 1152.21,231.079 1152.78,229.876 1153.35,230.067 1153.92,231.077 1154.48,230.947 1155.05,230.01 1155.62,230.076 1156.19,231.278 1156.76,230.174 1157.33,233.401 1157.89,234.203 1158.46,232.951 1159.03,232.785 1159.6,233.765 1160.17,233.812 1160.74,232.56 1161.3,231.387 1161.87,232.427 1162.44,231.377 1163.01,232.552 1163.58,230.384 1164.15,229.403 1164.71,229.378 1165.28,230.699 1165.85,228.669 1166.42,227.682 1166.99,228.863 1167.56,228.976 1168.12,228.098 1168.69,226.386 1169.26,227.899 1169.83,228.181 1170.4,229.222 1170.97,231.303 1171.53,230.193 1172.1,230.003 1172.67,228.973 1173.24,229.25 1173.81,228.514 1174.38,229.931 1174.94,233.053 1175.51,234.023 1176.08,233.728 1176.65,229.674 1177.22,230.951 1177.79,230.987 1178.35,229.696 1178.92,228.852 1179.49,225.864 1180.06,228.31 1180.63,229.692 1181.2,228.914 1181.76,229.233 1182.33,231.589 1182.9,230.31 1183.47,231.51 1184.04,229.472 1184.61,228.401 1185.17,227.619 1185.74,229.919 1186.31,229.154 1186.88,230.352 1187.45,231.666 1188.02,232.734 1188.58,232.409 1189.15,234.213 1189.72,235.083 1190.29,234.941 1190.86,234.642 1191.43,236.383 1192,238.034 1192.56,237.676 1193.13,237.035 1193.7,236.693 1194.27,234.381 1194.84,232.004 1195.41,231.999 1195.97,230.709 1196.54,230.695 1197.11,229.546 1197.68,228.611 1198.25,227.804 1198.82,228.89 1199.38,227.894 1199.95,227.822 1200.52,227.815 1201.09,227.157 1201.66,228.464 1202.23,228.444 1202.79,228.548 1203.36,228.731 1203.93,226.805 1204.5,229.02 1205.07,228.125 1205.64,228.282 1206.2,228.16 1206.77,227.348 1207.34,228.617 1207.91,227.634 1208.48,227.953 1209.05,229.128 1209.61,228.065 1210.18,229.387 1210.75,228.503 1211.32,229.666 1211.89,230.717 1212.46,230.869 1213.02,234.057 1213.59,232.898 1214.16,233.759 1214.73,234.502 1215.3,234.259 1215.87,235.041 1216.43,231.618 1217,230.675 1217.57,230.513 1218.14,230.37 1218.71,230.464 1219.28,229.264 1219.84,229.528 1220.41,229.611 1220.98,230.724 1221.55,231.757 1222.12,231.597 1222.69,229.487 1223.25,225.708 1223.82,225.165 1224.39,226.929 1224.96,229.439 1225.53,230.472 1226.1,227.409 1226.66,228.731 1227.23,231.062 1227.8,229.091 1228.37,228.252 1228.94,227.543 1229.51,231.085 1230.07,229.935 1230.64,230.026 1231.21,231.032 1231.78,230.041 1232.35,230.036 1232.92,229.135 1233.48,232.326 1234.05,233.438 1234.62,234.338 1235.19,234.948 1235.76,232.748 1236.33,233.682 1236.89,233.258 1237.46,230.988 1238.03,228.868 1238.6,228.944 1239.17,228.199 1239.74,228.333 1240.3,228.445 1240.87,229.682 1241.44,230.669 1242.01,229.493 1242.58,232.407 1243.15,233.393 1243.71,234.362 1244.28,238.308 1244.85,238.784 1245.42,238.34 1245.99,238.534 1246.56,238.956 1247.12,238.421 1247.69,237.912 1248.26,237.294 1248.83,236.709 1249.4,237.124 1249.97,234.752 1250.53,232.411 1251.1,231.333 1251.67,234.523 1252.24,236.255 1252.81,235.677 1253.38,235.284 1253.94,233.996 1254.51,234.851 1255.08,234.513 1255.65,234.127 1256.22,235.869 1256.79,237.25 1257.35,236.57 1257.92,235.999 1258.49,235.486 1259.06,235.87 1259.63,235.153 1260.2,236.086 1260.76,236.801 1261.33,235.018 1261.9,236.579 1262.47,235.768 1263.04,234.181 1263.61,233.642 1264.18,233.426 1264.74,230.919 1265.31,230.557 1265.88,229.301 1266.45,229.164 1267.02,227.963 1267.59,226.734 1268.15,227.854 1268.72,227.787 1269.29,226.774 1269.86,228.709 1270.43,229.694 1271,228.354 1271.56,229.494 1272.13,229.47 1272.7,229.287 1273.27,227.249 1273.84,227.375 1274.41,228.29 1274.97,229.373 1275.54,229.364 1276.11,228.097 1276.68,227.918 1277.25,227.993 1277.82,228.037 1278.38,229.152 1278.95,228.065 1279.52,227.061 1280.09,226.939 1280.66,228.069 1281.23,224.147 1281.79,224.313 1282.36,225.87 1282.93,224.974 1283.5,227.314 1284.07,226.282 1284.64,226.455 1285.2,225.749 1285.77,227.15 1286.34,227.462 1286.91,227.755 1287.48,228.049 1288.05,228.124 1288.61,228.597 1289.18,227.513 1289.75,225.599 1290.32,226.027 1290.89,226.29 1291.46,227.534 1292.02,225.557 1292.59,225.814 1293.16,224.02 1293.73,226.244 1294.3,228.398 1294.87,227.41 1295.43,228.496 1296,229.826 1296.57,227.902 1297.14,226.894 1297.71,227.011 1298.28,228.226 1298.84,228.411 1299.41,227.767 1299.98,227.016 1300.55,227.393 1301.12,229.793 1301.69,230.928 1302.25,230.811 1302.82,228.782 1303.39,228.901 1303.96,228.079 1304.53,229.377 1305.1,228.609 1305.66,229.724 1306.23,224.557 1306.8,225.83 1307.37,228.471 1307.94,229.466 1308.51,231.744 1309.07,233.759 1309.64,234.501 1310.21,231.236 1310.78,231.054 1311.35,230.09 1311.92,230.236 1312.48,230.127 1313.05,231.149 1313.62,231.201 1314.19,232.359 1314.76,232.183 1315.33,232.047 1315.89,230.819 1316.46,230.969 1317.03,231.104 1317.6,231.985 1318.17,232.658 1318.74,231.667 1319.3,231.469 1319.87,231.315 1320.44,231.23 1321.01,232.309 1321.58,230.162 1322.15,231.126 1322.71,232.116 1323.28,231.987 1323.85,229.665 1324.42,230.84 1324.99,229.493 1325.56,228.608 1326.12,228.865 1326.69,227.991 1327.26,227.018 1327.83,227.064 1328.4,227.484 1328.97,227.863 1329.53,226.052 1330.1,228.174 1330.67,228.174 1331.24,227.274 1331.81,226.556 1332.38,226.872 1332.94,227.018 1333.51,227.342 1334.08,227.596 1334.65,224.525 1335.22,222.782 1335.79,223.383 1336.36,224.97 1336.92,224.337 1337.49,224.714 1338.06,226.284 1338.63,227.634 1339.2,228.152 1339.77,229.545 1340.33,229.426 1340.9,229.735 1341.47,232.073 1342.04,231.022 1342.61,231.137 1343.18,232.188 1343.74,231.102 1344.31,231.157 1344.88,232.347 1345.45,232.358 1346.02,235.275 1346.59,235.095 1347.15,232.747 1347.72,231.547 1348.29,230.559 1348.86,230.5 1349.43,232.765 1350,232.65 1350.56,233.621 1351.13,233.389 1351.7,234.187 1352.27,234.123 1352.84,233.844 1353.41,230.328 1353.97,231.543 1354.54,233.476 1355.11,232.373 1355.68,231.384 1356.25,230.244 1356.82,228.179 1357.38,229.192 1357.95,230.172 1358.52,230.255 1359.09,231.131 1359.66,230.931 1360.23,232.825 1360.79,233.906 1361.36,232.719 1361.93,232.715 1362.5,231.528 1363.07,232.764 1363.64,230.477 1364.2,230.294 1364.77,227.056 1365.34,227.34 1365.91,228.818 1366.48,230.929 1367.05,233.042 1367.61,229.905 1368.18,227.909 1368.75,226.063 1369.32,227.5 1369.89,228.666 1370.46,227.8 1371.02,229.031 1371.59,231.293 1372.16,234.394 1372.73,233.997 1373.3,233.696 1373.87,233.708 1374.43,231.626 1375,230.665 1375.57,229.848 1376.14,230.856 1376.71,230.656 1377.28,228.308 1377.84,229.434 1378.41,228.434 1378.98,231.591 1379.55,234.626 1380.12,235.324 1380.69,234.953 1381.25,236.7 1381.82,237.188 1382.39,237.728 1382.96,238.428 1383.53,237.82 1384.1,234.061 1384.66,232.829 1385.23,232.599 1385.8,233.435 1386.37,234.48 1386.94,235.048 1387.51,235.943 1388.07,235.558 1388.64,237.222 1389.21,233.74 1389.78,233.429 1390.35,232.152 1390.92,229.044 1391.48,228.975 1392.05,226.861 1392.62,227.004 1393.19,226.062 1393.76,226.352 1394.33,224.53 1394.89,227.043 1395.46,229.189 1396.03,229.235 1396.6,229.107 1397.17,229.165 1397.74,229.352 1398.3,229.071 1398.87,228.119 1399.44,229.478 1400.01,231.705 1400.58,232.833 1401.15,231.614 1401.71,232.59 1402.28,231.397 1402.85,232.472 1403.42,232.197 1403.99,231.889 1404.56,231.602 1405.13,232.546 1405.69,233.499 1406.26,234.302 1406.83,235.174 1407.4,236.748 1407.97,235.122 1408.54,235.769 1409.1,234.156 1409.67,233.784 1410.24,233.436 1410.81,233.102 1411.38,230.703 1411.95,234.585 1412.51,235.181 1413.08,233.809 1413.65,232.546 1414.22,232.456 1414.79,230.239 1415.36,229.989 1415.92,229.893 1416.49,228.865 1417.06,231.061 1417.63,232.815 1418.2,232.559 1418.77,232.647 1419.33,232.378 1419.9,231.378 1420.47,232.551 1421.04,232.279 1421.61,233.02 1422.18,231.686 1422.74,231.327 1423.31,232.188 1423.88,233.01 1424.45,231.73 1425.02,232.542 1425.59,232.207 1426.15,234.154 1426.72,233.439 1427.29,232.019 1427.86,231.742 1428.43,230.533 1429,228.304 1429.56,229.428 1430.13,231.42 1430.7,231.269 1431.27,230.882 1431.84,229.667 1432.41,230.736 1432.97,228.503 1433.54,227.327 1434.11,227.445 1434.68,228.531 1435.25,227.62 1435.82,224.576 1436.38,223.815 1436.95,224.117 1437.52,223.433 1438.09,225.155 1438.66,225.306 1439.23,224.619 1439.79,224.099 1440.36,224.546 1440.93,225.019 1441.5,225.359 1442.07,226.885 1442.64,226.199 1443.2,225.459 1443.77,226.943 1444.34,226.321 1444.91,227.412 1445.48,226.837 1446.05,225.86 1446.61,226.131 1447.18,226.365 1447.75,227.61 1448.32,227.61 1448.89,226.8 1449.46,227.981 1450.02,226.229 1450.59,227.592 1451.16,227.788 1451.73,227.943 1452.3,226.966 1452.87,227.18 1453.43,226.604 1454,225.834 1454.57,223.988 1455.14,225.594 1455.71,227.091 1456.28,226.5 1456.84,226.722 1457.41,226.967 1457.98,225.328 1458.55,225.888 1459.12,227.219 1459.69,228.37 1460.25,228.398 1460.82,230.665 1461.39,230.749 1461.96,228.796 1462.53,228.945 1463.1,226.169 1463.66,227.402 1464.23,226.674 1464.8,225.732 1465.37,227.135 1465.94,227.473 1466.51,229.983 1467.07,227.004 1467.64,227.315 1468.21,225.818 1468.78,226.206 1469.35,228.564 1469.92,228.656 1470.48,229.769 1471.05,228.6 1471.62,228.989 1472.19,229.131 1472.76,230.297 1473.33,230.144 1473.89,228.259 1474.46,228.529 1475.03,231.82 1475.6,232.832 1476.17,233.098 1476.74,233.023 1477.31,233.863 1477.87,235.953 1478.44,234.621 1479.01,233.407 1479.58,233.286 1480.15,234.261 1480.72,235.051 1481.28,235.915 1481.85,238.483 1482.42,237.994 1482.99,238.36 1483.56,236.661 1484.13,236.397 1484.69,237.086 1485.26,236.735 1485.83,236.312 1486.4,236.853 1486.97,233.12 1487.54,233.905 1488.1,236.642 1488.67,236.059 1489.24,233.802 1489.81,233.296 1490.38,232.949 1490.95,232.776 1491.51,234.642 1492.08,233.565 1492.65,233.215 1493.22,235.064 1493.79,235.752 1494.36,235.288 1494.92,234.838 1495.49,233.526 1496.06,234.05 1496.63,233.597 1497.2,233.294 1497.77,232.085 1498.33,234.144 1498.9,234.936 1499.47,233.353 1500.04,233.02 1500.61,232.785 1501.18,232.505 1501.74,233.607 1502.31,232.175 1502.88,231.948 1503.45,230.644 1504.02,229.496 1504.59,229.327 1505.15,228.923 1505.72,229.948 1506.29,230.587 1506.86,231.359 1507.43,229.336 1508,230.433 1508.56,229.23 1509.13,229.169 1509.7,228.971 1510.27,231.783 1510.84,231.6 1511.41,231.548 1511.97,230.214 1512.54,230.126 1513.11,228.146 1513.68,228.193 1514.25,227.373 1514.82,226.327 1515.38,225.45 1515.95,226.7 1516.52,227.772 1517.09,227.755 1517.66,227.626 1518.23,225.605 1518.79,225.921 1519.36,225.243 1519.93,224.351 1520.5,226.908 1521.07,229.453 1521.64,229.723 1522.2,230.859 1522.77,230.771 1523.34,229.567 1523.91,227.489 1524.48,226.578 1525.05,226.696 1525.61,226.942 1526.18,225.112 1526.75,226.237 1527.32,225.517 1527.89,227.966 1528.46,228.086 1529.02,228.461 1529.59,226.573 1530.16,226.983 1530.73,226.322 1531.3,227.7 1531.87,226.878 1532.43,227.253 1533,228.532 1533.57,230.723 1534.14,229.752 1534.71,231.736 1535.28,229.53 1535.84,228.422 1536.41,227.25 1536.98,227.53 1537.55,227.83 1538.12,228.149 1538.69,228.46 1539.25,227.664 1539.82,226.041 1540.39,227.394 1540.96,228.59 1541.53,228.772 1542.1,230.145 1542.66,230.274 1543.23,232.283 1543.8,235.244 1544.37,237.17 1544.94,235.915 1545.51,233.487 1546.08,232.329 1546.64,234.22 1547.21,233.862 1547.78,233.691 1548.35,234.481 1548.92,232.064 1549.49,231.86 1550.05,229.589 1550.62,229.755 1551.19,227.744 1551.76,229.95 1552.33,231.06 1552.9,229.009 1553.46,230.309 1554.03,230.254 1554.6,230.514 1555.17,228.359 1555.74,227.32 1556.31,227.739 1556.87,226.894 1557.44,226.124 1558.01,225.456 1558.58,225.658 1559.15,226.128 1559.72,227.258 1560.28,226.537 1560.85,225.758 1561.42,227.38 1561.99,227.646 1562.56,224.932 1563.13,224.375 1563.69,226.071 1564.26,225.617 1564.83,225.992 1565.4,222.332 1565.97,222.149 1566.54,222.876 1567.1,225.727 1567.67,226.306 1568.24,226.584 1568.81,227.882 1569.38,230.217 1569.95,229.492 1570.51,228.866 1571.08,226.965 1571.65,228.134 1572.22,228.306 1572.79,229.629 1573.36,229.818 1573.92,229.928 1574.49,230.14 1575.06,229.119 1575.63,229.408 1576.2,230.647 1576.77,231.692 1577.33,231.675 1577.9,229.433 1578.47,230.644 1579.04,229.691 1579.61,228.956 1580.18,228.123 1580.74,230.429 1581.31,231.74 1581.88,231.752 1582.45,230.914 1583.02,230.061 1583.59,229.486 1584.15,229.831 1584.72,229.987 1585.29,231.256 1585.86,234.564 1586.43,234.758 1587,237.682 1587.56,235.452 1588.13,238.305 1588.7,237.805 1589.27,239.46 1589.84,239.031 1590.41,238.562 1590.97,238.135 1591.54,234.591 1592.11,235.368 1592.68,235.016 1593.25,234.776 1593.82,233.321 1594.38,235.292 1594.95,236.007 1595.52,234.712 1596.09,235.431 1596.66,235.067 1597.23,235.686 1597.79,235.028 1598.36,231.645 1598.93,231.372 1599.5,231.313 1600.07,232.362 1600.64,232.207 1601.2,230.947 1601.77,234.013 1602.34,232.773 1602.91,230.507 1603.48,231.358 1604.05,231.107 1604.61,231.944 1605.18,231.682 1605.75,232.591 1606.32,231.37 1606.89,230.167 1607.46,230.103 1608.02,230.159 1608.59,229.015 1609.16,229.924 1609.73,227.807 1610.3,226.921 1610.87,229.221 1611.43,229.628 1612,229.856 1612.57,228.817 1613.14,229.901 1613.71,228.927 1614.28,229.189 1614.84,230.395 1615.41,231.248 1615.98,233.161 1616.55,232.807 1617.12,232.608 1617.69,232.406 1618.26,234.284 1618.82,234.103 1619.39,233.858 1619.96,233.52 1620.53,233.23 1621.1,233.056 1621.67,231.72 1622.23,234.784 1622.8,234.527 1623.37,233.937 1623.94,232.443 1624.51,228.999 1625.08,229.013 1625.64,229.018 1626.21,229.086 1626.78,228.286 1627.35,226.305 1627.92,224.499 1628.49,225.222 1629.05,226.68 1629.62,226.85 1630.19,229.228 1630.76,227.32 1631.33,227.423 1631.9,225.303 1632.46,224.604 1633.03,225.012 1633.6,226.252 1634.17,227.536 1634.74,228.71 1635.31,229.666 1635.87,231.921 1636.44,231.809 1637.01,230.708 1637.58,232.799 1638.15,232.615 1638.72,230.495 1639.28,230.224 1639.85,231.355 1640.42,231.291 1640.99,231.301 1641.56,230.28 1642.13,233.316 1642.69,233.157 1643.26,229.689 1643.83,228.539 1644.4,226.581 1644.97,227.893 1645.54,229.059 1646.1,228.239 1646.67,230.266 1647.24,232.65 1647.81,232.604 1648.38,232.595 1648.95,232.511 1649.51,232.302 1650.08,230.031 1650.65,232.145 1651.22,231.919 1651.79,231.744 1652.36,232.671 1652.92,231.481 1653.49,229.279 1654.06,228.287 1654.63,229.326 1655.2,230.52 1655.77,232.452 1656.33,233.258 1656.9,232.892 1657.47,230.932 1658.04,231.964 1658.61,230.787 1659.18,229.762 1659.74,229.762 1660.31,230.676 1660.88,229.464 1661.45,229.409 1662.02,229.51 1662.59,231.47 1663.15,231.634 1663.72,231.615 1664.29,230.432 1664.86,229.265 1665.43,227.396 1666,229.719 1666.56,228.641 1667.13,227.683 1667.7,227.956 1668.27,229.149 1668.84,228.264 1669.41,228.211 1669.97,227.521 1670.54,227.638 1671.11,225.667 1671.68,225.837 1672.25,226.213 1672.82,228.739 1673.38,227.838 1673.95,229.165 1674.52,227.466 1675.09,230.158 1675.66,230.073 1676.23,231.194 1676.79,232.341 1677.36,230.245 1677.93,230.304 1678.5,232.501 1679.07,232.215 1679.64,232.966 1680.2,232.527 1680.77,231.035 1681.34,231.731 1681.91,227.657 1682.48,225.832 1683.05,228.245 1683.61,228.376 1684.18,229.59 1684.75,229.401 1685.32,227.552 1685.89,227.905 1686.46,229.044 1687.02,228.202 1687.59,229.177 1688.16,229.177 1688.73,228.458 1689.3,228.661 1689.87,228.812 1690.44,228.051 1691,230.3 1691.57,231.368 1692.14,231.059 1692.71,234.059 1693.28,233.909 1693.85,231.826 1694.41,231.491 1694.98,232.318 1695.55,235.412 1696.12,234.041 1696.69,236.103 1697.26,235.824 1697.82,234.504 1698.39,233.987 1698.96,231.763 1699.53,230.655 1700.1,231.545 1700.67,230.693 1701.23,230.661 1701.8,229.439 1702.37,230.545 1702.94,230.458 1703.51,231.608 1704.08,231.454 1704.64,231.263 1705.21,226.903 1705.78,226.047 1706.35,227.501 1706.92,227.735 1707.49,224.828 1708.05,225.038 1708.62,226.371 1709.19,226.654 1709.76,228.027 1710.33,227.132 1710.9,227.542 1711.46,229.814 1712.03,230.712 1712.6,230.852 1713.17,231.859 1713.74,230.808 1714.31,232.844 1714.87,231.693 1715.44,231.752 1716.01,230.794 1716.58,230.453 1717.15,231.51 1717.72,230.481 1718.28,230.564 1718.85,230.524 1719.42,231.639 1719.99,232.702 1720.56,231.658 1721.13,231.345 1721.69,231.363 1722.26,230.459 1722.83,230.562 1723.4,229.643 1723.97,228.886 1724.54,227.051 1725.1,227.189 1725.67,228.605 1726.24,228.831 1726.81,231.29 1727.38,231.349 1727.95,230.315 1728.51,230.117 1729.08,232.391 1729.65,231.239 1730.22,232.209 1730.79,232.19 1731.36,233.033 1731.92,235.586 1732.49,235.074 1733.06,233.669 1733.63,232.418 1734.2,231.115 1734.77,231.996 1735.33,231.855 1735.9,229.544 1736.47,228.623 1737.04,229.685 1737.61,228.73 1738.18,228.918 1738.74,228.129 1739.31,229.414 1739.88,228.381 1740.45,228.534 1741.02,228.76 1741.59,227.093 1742.15,230.421 1742.72,231.53 1743.29,231.764 1743.86,236.979 1744.43,237.414 1745,237.033 1745.56,236.511 1746.13,236.07 1746.7,234.639 1747.27,233.313 1747.84,231.226 1748.41,232.02 1748.97,232.933 1749.54,234.96 1750.11,234.663 1750.68,235.259 1751.25,235.819 1751.82,235.148 1752.38,234.839 1752.95,234.653 1753.52,232.391 1754.09,229.154 1754.66,230.181 1755.23,228.143 1755.79,225.036 1756.36,225.257 1756.93,225.832 1757.5,223.752 1758.07,224.273 1758.64,223.727 1759.21,223.366 1759.77,224.892 1760.34,226.156 1760.91,226.524 1761.48,228.821 1762.05,228.968 1762.62,227.971 1763.18,227.134 1763.75,227.292 1764.32,229.445 1764.89,228.497 1765.46,229.57 1766.03,231.888 1766.59,229.782 1767.16,231.721 1767.73,232.657 1768.3,234.672 1768.87,235.5 1769.44,237.242 1770,236.623 1770.57,235.126 1771.14,236.821 1771.71,236.34 1772.28,237.896 1772.85,236.364 1773.41,233.702 1773.98,233.62 1774.55,233.461 1775.12,233.052 1775.69,232.839 1776.26,234.723 1776.82,232.405 1777.39,233.169 1777.96,230.909 1778.53,229.729 1779.1,230.854 1779.67,229.672 1780.23,230.766 1780.8,229.438 1781.37,229.21 1781.94,227.394 1782.51,225.583 1783.08,223.695 1783.64,225.259 1784.21,224.541 1784.78,226.182 1785.35,225.484 1785.92,224.812 1786.49,222.94 1787.05,223.369 1787.62,223.601 1788.19,226.892 1788.76,226.138 1789.33,225.514 1789.9,226.842 1790.46,227.274 1791.03,227.601 1791.6,226.471 1792.17,226.888 1792.74,229.201 1793.31,229.196 1793.87,231.256 1794.44,231.308 1795.01,233.155 1795.58,232.92 1796.15,233.937 1796.72,233.616 1797.28,232.523 1797.85,230.325 1798.42,231.373 1798.99,230.302 1799.56,230.396 1800.13,231.406 1800.69,231.086 1801.26,231.251 1801.83,229.132 1802.4,230.402 1802.97,228.369 1803.54,229.566 1804.1,230.649 1804.67,229.559 1805.24,231.547 1805.81,234.88 1806.38,234.565 1806.95,234.158 1807.51,232.748 1808.08,230.69 1808.65,230.546 1809.22,232.58 1809.79,232.449 1810.36,231.342 1810.92,232.373 1811.49,229.9 1812.06,229.869 1812.63,228.788 1813.2,226.73 1813.77,226.85 1814.33,229.092 1814.9,228.095 1815.47,229.221 1816.04,230.347 1816.61,231.344 1817.18,231.393 1817.74,232.316 1818.31,231.144 1818.88,228.049 1819.45,231.17 1820.02,230.029 1820.59,230.122 1821.15,230.26 1821.72,226.996 1822.29,228.104 1822.86,229.424 1823.43,229.436 1824,228.399 1824.56,226.585 1825.13,228.109 1825.7,228.1 1826.27,228.168 1826.84,228.314 1827.41,230.576 1827.97,230.41 1828.54,228.343 1829.11,226.51 1829.68,226.633 1830.25,227.948 1830.82,228.305 1831.39,228.325 1831.95,229.47 1832.52,229.349 1833.09,230.563 1833.66,231.941 1834.23,231.611 1834.8,232.656 1835.36,231.503 1835.93,232.119 1836.5,233.885 1837.07,230.573 1837.64,231.663 1838.21,230.755 1838.77,230.546 1839.34,231.562 1839.91,234.491 1840.48,233.003 1841.05,233.843 1841.62,233.675 1842.18,233.28 1842.75,232.96 1843.32,232.883 1843.89,231.948 1844.46,234.012 1845.03,233.744 1845.59,232.334 1846.16,232.294 1846.73,232.282 1847.3,233.168 1847.87,233.236 1848.44,232.893 1849,232.595 1849.57,232.297 1850.14,229.032 1850.71,228.139 1851.28,228.231 1851.85,230.697 1852.41,230.575 1852.98,228.315 1853.55,228.012 1854.12,228.212 1854.69,229.211 1855.26,230.407 1855.82,233.407 1856.39,234.127 1856.96,232.576 1857.53,231.43 1858.1,231.428 1858.67,231.192 1859.23,231.894 1859.8,231.452 1860.37,229.252 1860.94,229.285 1861.51,232.491 1862.08,230.247 1862.64,227.205 1863.21,230.527 1863.78,231.634 1864.35,230.431 1864.92,231.269 1865.49,228.075 1866.05,231.22 1866.62,227.229 1867.19,229.36 1867.76,229.549 1868.33,228.525 1868.9,228.629 1869.46,232.838 1870.03,232.37 1870.6,232.183 1871.17,231.896 1871.74,232.872 1872.31,231.641 1872.87,231.56 1873.44,230.413 1874.01,227.174 1874.58,226.412 1875.15,225.599 1875.72,225.913 1876.28,226.32 1876.85,225.561 1877.42,226.674 1877.99,228.025 1878.56,225.078 1879.13,226.573 1879.69,227.757 1880.26,228.837 1880.83,227.729 1881.4,226.561 1881.97,225.815 1882.54,225.104 1883.1,224.381 1883.67,223.863 1884.24,225.41 1884.81,225.707 1885.38,228.411 1885.95,227.408 1886.51,226.646 1887.08,225.78 1887.65,224.976 1888.22,223.507 1888.79,223.003 1889.36,224.661 1889.92,226.188 1890.49,227.5 1891.06,228.031 1891.63,227.438 1892.2,227.731 1892.77,229.07 1893.33,229.276 1893.9,230.465 1894.47,232.502 1895.04,230.44 1895.61,229.236 1896.18,229.456 1896.74,227.541 1897.31,227.922 1897.88,227.214 1898.45,227.626 1899.02,231.275 1899.59,232.475 1900.16,232.686 1900.72,232.688 1901.29,233.878 1901.86,233.833 1902.43,234.742 1903,231.495 1903.57,231.471 1904.13,230.639 1904.7,230.784 1905.27,229.948 1905.84,232.32 1906.41,232.256 1906.98,231.907 1907.54,229.885 1908.11,228.014 1908.68,226.318 1909.25,225.659 1909.82,229.015 1910.39,228.968 1910.95,229.026 1911.52,229.196 1912.09,229.311 1912.66,231.434 1913.23,229.496 1913.8,230.599 1914.36,229.876 1914.93,229.89 1915.5,229.143 1916.07,231.379 1916.64,232.418 1917.21,234.285 1917.77,236.251 1918.34,236.155 1918.91,234.655 1919.48,234.633 1920.05,234.479 1920.62,233.535 1921.18,232.562 1921.75,232.471 1922.32,233.359 1922.89,233.102 1923.46,232.989 1924.03,235.129 1924.59,236.771 1925.16,237.178 1925.73,236.791 1926.3,238.401 1926.87,236.807 1927.44,237.253 1928,237.798 1928.57,236.56 1929.14,234.975 1929.71,234.503 1930.28,234.196 1930.85,234.983 1931.41,232.663 1931.98,233.427 1932.55,230.957 1933.12,229.803 1933.69,231.079 1934.26,229.991 1934.82,228.11 1935.39,227.327 1935.96,227.648 1936.53,227.941 1937.1,228.983 1937.67,233.095 1938.23,233.925 1938.8,234.571 1939.37,233.181 1939.94,231.471 1940.51,230.627 1941.08,230.723 1941.64,231.864 1942.21,230.546 1942.78,230.538 1943.35,232.635 1943.92,233.476 1944.49,233.247 1945.05,234.106 1945.62,233.763 1946.19,234.347 1946.76,237.055 1947.33,233.478 1947.9,230.22 1948.46,228.291 1949.03,228.375 1949.6,227.466 1950.17,227.694 1950.74,228.776 1951.31,228.555 1951.87,230.727 1952.44,230.781 1953.01,230.601 1953.58,232.685 1954.15,231.587 1954.72,231.352 1955.28,231.316 1955.85,232.365 1956.42,233.127 1956.99,233.82 1957.56,232.572 1958.13,231.235 1958.69,232.296 1959.26,232.937 1959.83,231.586 1960.4,229.247 1960.97,226.368 1961.54,227.007 1962.1,227.354 1962.67,228.565 1963.24,229.695 1963.81,228.975 1964.38,230.013 1964.95,227.885 1965.51,225.969 1966.08,224.059 1966.65,225.535 1967.22,225.809 1967.79,228.18 1968.36,229.343 1968.92,230.226 1969.49,233.054 1970.06,233.807 1970.63,232.419 1971.2,233.348 1971.77,232.032 1972.34,231.827 1972.9,231.471 1973.47,230.214 1974.04,227.184 1974.61,230.543 1975.18,232.513 1975.75,233.416 1976.31,234.312 1976.88,231.789 1977.45,230.497 1978.02,230.474 1978.59,229.343 1979.16,230.367 1979.72,227.994 1980.29,227.115 1980.86,226.128 1981.43,228.568 1982,229.811 1982.57,228.908 1983.13,227.763 1983.7,226.967 1984.27,226.234 1984.84,223.165 1985.41,224.696 1985.98,224.975 1986.54,223.206 1987.11,223.766 1987.68,224.127 1988.25,222.562 1988.82,224.217 1989.39,224.684 1989.95,225.11 1990.52,224.345 1991.09,224.61 1991.66,227.207 1992.23,228.493 1992.8,229.799 1993.36,228.732 1993.93,228.989 1994.5,229.871 1995.07,229.88 1995.64,230.001 1996.21,231.113 1996.77,232.191 1997.34,236.318 1997.91,236.906 1998.48,237.552 1999.05,237.064 1999.62,238.534 2000.18,235.896 2000.75,235.661 2001.32,235.388 2001.89,232.763 2002.46,230.264 2003.03,229.009 2003.59,229.295 2004.16,228.208 2004.73,228.507 2005.3,229.734 2005.87,230.663 2006.44,231.641 2007,229.439 2007.57,228.249 2008.14,229.573 2008.71,229.719 2009.28,230.689 2009.85,230.568 2010.41,230.565 2010.98,230.474 2011.55,230.475 2012.12,228.137 2012.69,227.368 2013.26,228.707 2013.82,228.847 2014.39,229.719 2014.96,231.707 2015.53,231.618 2016.1,231.541 2016.67,230.306 2017.23,230.223 2017.8,231.372 2018.37,228.191 2018.94,227.452 2019.51,226.602 2020.08,227.925 2020.64,227.121 2021.21,225.617 2021.78,225.115 2022.35,226.429 2022.92,224.798 2023.49,225.352 2024.05,225.597 2024.62,229.502 2025.19,229.683 2025.76,233.023 2026.33,232.862 2026.9,231.81 2027.46,232.884 2028.03,232.651 2028.6,232.477 2029.17,233.592 2029.74,234.356 2030.31,235.348 2030.87,234.982 2031.44,234.691 2032.01,234.653 2032.58,236.449 2033.15,237.035 2033.72,231.477 2034.28,231.364 2034.85,230.108 2035.42,230.105 2035.99,229.215 2036.56,227.465 2037.13,227.547 2037.69,227.797 2038.26,231.059 2038.83,230.807 2039.4,230.905 2039.97,231.776 2040.54,232.594 2041.11,233.363 2041.67,233.95 2042.24,230.541 2042.81,230.364 2043.38,232.409 2043.95,231.266 2044.52,232.085 2045.08,229.646 2045.65,230.655 2046.22,230.591 2046.79,229.226 2047.36,230.537 2047.93,230.416 2048.49,232.416 2049.06,231.275 2049.63,229.08 2050.2,231.114 2050.77,231.139 2051.34,231.046 2051.9,229.841 2052.47,229.845 2053.04,232.114 2053.61,233.267 2054.18,233.01 2054.75,233.216 2055.31,231.928 2055.88,231.63 2056.45,234.673 2057.02,234.196 2057.59,235.838 2058.16,234.507 2058.72,233.055 2059.29,232.946 2059.86,229.641 2060.43,229.751 2061,229.539 2061.57,230.673 2062.13,229.579 2062.7,226.557 2063.27,226.701 2063.84,226.943 2064.41,227.196 2064.98,225.394 2065.54,226.796 2066.11,227.865 2066.68,229.261 2067.25,229.414 2067.82,230.404 2068.39,232.295 2068.95,233.091 2069.52,232.929 2070.09,231.79 2070.66,230.854 2071.23,231.837 2071.8,233.833 2072.36,234.365 2072.93,233.747 2073.5,234.335 2074.07,232.874 2074.64,231.692 2075.21,231.576 2075.77,231.615 2076.34,232.652 2076.91,234.438 2077.48,235.109 2078.05,234.669 2078.62,234.293 2079.18,234.067 2079.75,233.731 2080.32,229.997 2080.89,230.046 2081.46,225.759 2082.03,225.04 2082.59,226.356 2083.16,226.792 2083.73,226.107 2084.3,228.316 2084.87,231.51 2085.44,230.378 2086,230.433 2086.57,228.464 2087.14,229.639 2087.71,226.498 2088.28,225.594 2088.85,224.756 2089.41,224.212 2089.98,225.537 2090.55,222.701 2091.12,225.164 2091.69,225.866 2092.26,226.139 2092.82,227.502 2093.39,228.682 2093.96,228.939 2094.53,228.266 2095.1,227.245 2095.67,228.627 2096.23,228.846 2096.8,228.855 2097.37,230.171 2097.94,228.984 2098.51,229.054 2099.08,229.292 2099.64,228.357 2100.21,228.316 2100.78,228.63 2101.35,231.866 2101.92,230.713 2102.49,230.7 2103.05,230.704 2103.62,233.535 2104.19,233.134 2104.76,235.046 2105.33,232.709 2105.9,232.785 2106.46,234.45 2107.03,233.216 2107.6,236.812 2108.17,237.359 2108.74,239.975 2109.31,239.132 2109.87,238.344 2110.44,236.527 2111.01,236.903 2111.58,237.61 2112.15,235.956 2112.72,235.606 2113.29,236.048 2113.85,236.696 2114.42,233.86 2114.99,232.66 2115.56,232.451 2116.13,231.132 2116.7,230.849 2117.26,230.551 2117.83,229.269 2118.4,228.232 2118.97,228.337 2119.54,228.53 2120.11,227.436 2120.67,226.432 2121.24,227.707 2121.81,227.686 2122.38,225.86 2122.95,226.312 2123.52,225.45 2124.08,227.687 2124.65,229.887 2125.22,229.713 2125.79,227.635 2126.36,226.764 2126.93,226.798 2127.49,225.945 2128.06,226.349 2128.63,225.473 2129.2,222.698 2129.77,223.237 2130.34,223.723 2130.9,225.027 2131.47,225.439 2132.04,225.643 2132.61,225.867 2133.18,226.342 2133.75,224.425 2134.31,224.989 2134.88,224.151 2135.45,226.57 2136.02,225.738 2136.59,225.015 2137.16,225.541 2137.72,225.941 2138.29,226.308 2138.86,226.579 2139.43,225.865 2140,226.221 2140.57,226.495 2141.13,225.885 2141.7,228.395 2142.27,230.537 2142.84,230.744 2143.41,235.112 2143.98,236.999 2144.54,236.542 2145.11,237.213 2145.68,237.767 2146.25,238.3 2146.82,239.782 2147.39,237.924 2147.95,237.439 2148.52,236.959 2149.09,235.41 2149.66,232.842 2150.23,231.4 2150.8,232.218 2151.36,232.001 2151.93,232.757 2152.5,229.583 2153.07,232.599 2153.64,231.543 2154.21,231.374 2154.77,227.211 2155.34,227.515 2155.91,228.54 2156.48,228.734 2157.05,230.127 2157.62,229.923 2158.18,229.888 2158.75,230.757 2159.32,231.671 2159.89,230.808 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.022\n  with uncertainty of ± 0.00203327973602466\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01536 ± (0.00228123, 0.0023543) (MC)\n  95% confidence interval: [-4.02004, -4.01101]) (MC)\n  linear error propagation: -4.01535 ± 0.00230158\n  |δ_y| = |0.00127507| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015359790097239, val_l = 0.004683497761160282, val_u = 0.004348231240305367)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip520\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip520)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip521\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip520)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip522\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1153.25 2211.02,1153.25 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1001.13 2211.02,1001.13 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,849.015 2211.02,849.015 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,696.9 2211.02,696.9 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,544.784 2211.02,544.784 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,392.668 2211.02,392.668 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,240.552 2211.02,240.552 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1153.25 365.751,1153.25 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1001.13 365.751,1001.13 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,849.015 365.751,849.015 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,696.9 365.751,696.9 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,544.784 365.751,544.784 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,392.668 365.751,392.668 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,240.552 365.751,240.552 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M298.909 1139.05 Q295.298 1139.05 293.469 1142.61 Q291.664 1146.15 291.664 1153.28 Q291.664 1160.39 293.469 1163.95 Q295.298 1167.49 298.909 1167.49 Q302.543 1167.49 304.349 1163.95 Q306.177 1160.39 306.177 1153.28 Q306.177 1146.15 304.349 1142.61 Q302.543 1139.05 298.909 1139.05 M298.909 1135.34 Q304.719 1135.34 307.775 1139.95 Q310.853 1144.53 310.853 1153.28 Q310.853 1162.01 307.775 1166.62 Q304.719 1171.2 298.909 1171.2 Q293.099 1171.2 290.02 1166.62 Q286.964 1162.01 286.964 1153.28 Q286.964 1144.53 290.02 1139.95 Q293.099 1135.34 298.909 1135.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M259.557 1014.48 L267.196 1014.48 L267.196 988.11 L258.886 989.777 L258.886 985.518 L267.15 983.851 L271.826 983.851 L271.826 1014.48 L279.465 1014.48 L279.465 1018.41 L259.557 1018.41 L259.557 1014.48 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 986.93 Q295.298 986.93 293.469 990.495 Q291.664 994.036 291.664 1001.17 Q291.664 1008.27 293.469 1011.84 Q295.298 1015.38 298.909 1015.38 Q302.543 1015.38 304.349 1011.84 Q306.177 1008.27 306.177 1001.17 Q306.177 994.036 304.349 990.495 Q302.543 986.93 298.909 986.93 M298.909 983.226 Q304.719 983.226 307.775 987.833 Q310.853 992.416 310.853 1001.17 Q310.853 1009.89 307.775 1014.5 Q304.719 1019.08 298.909 1019.08 Q293.099 1019.08 290.02 1014.5 Q286.964 1009.89 286.964 1001.17 Q286.964 992.416 290.02 987.833 Q293.099 983.226 298.909 983.226 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M262.775 862.36 L279.094 862.36 L279.094 866.295 L257.15 866.295 L257.15 862.36 Q259.812 859.606 264.395 854.976 Q269.002 850.323 270.182 848.981 Q272.428 846.458 273.307 844.721 Q274.21 842.962 274.21 841.272 Q274.21 838.518 272.266 836.782 Q270.344 835.046 267.242 835.046 Q265.043 835.046 262.59 835.809 Q260.159 836.573 257.381 838.124 L257.381 833.402 Q260.205 832.268 262.659 831.689 Q265.113 831.11 267.15 831.11 Q272.52 831.11 275.715 833.796 Q278.909 836.481 278.909 840.971 Q278.909 843.101 278.099 845.022 Q277.312 846.921 275.205 849.513 Q274.627 850.184 271.525 853.402 Q268.423 856.596 262.775 862.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 834.814 Q295.298 834.814 293.469 838.379 Q291.664 841.921 291.664 849.05 Q291.664 856.157 293.469 859.721 Q295.298 863.263 298.909 863.263 Q302.543 863.263 304.349 859.721 Q306.177 856.157 306.177 849.05 Q306.177 841.921 304.349 838.379 Q302.543 834.814 298.909 834.814 M298.909 831.11 Q304.719 831.11 307.775 835.717 Q310.853 840.3 310.853 849.05 Q310.853 857.777 307.775 862.383 Q304.719 866.967 298.909 866.967 Q293.099 866.967 290.02 862.383 Q286.964 857.777 286.964 849.05 Q286.964 840.3 290.02 835.717 Q293.099 831.11 298.909 831.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M272.914 695.545 Q276.27 696.263 278.145 698.532 Q280.043 700.8 280.043 704.133 Q280.043 709.249 276.525 712.05 Q273.006 714.851 266.525 714.851 Q264.349 714.851 262.034 714.411 Q259.742 713.994 257.289 713.138 L257.289 708.624 Q259.233 709.758 261.548 710.337 Q263.863 710.916 266.386 710.916 Q270.784 710.916 273.076 709.18 Q275.39 707.444 275.39 704.133 Q275.39 701.078 273.238 699.365 Q271.108 697.629 267.289 697.629 L263.261 697.629 L263.261 693.786 L267.474 693.786 Q270.923 693.786 272.752 692.42 Q274.58 691.032 274.58 688.439 Q274.58 685.777 272.682 684.365 Q270.807 682.93 267.289 682.93 Q265.367 682.93 263.168 683.346 Q260.969 683.763 258.33 684.643 L258.33 680.476 Q260.992 679.735 263.307 679.365 Q265.645 678.995 267.705 678.995 Q273.029 678.995 276.131 681.425 Q279.233 683.833 279.233 687.953 Q279.233 690.823 277.59 692.814 Q275.946 694.782 272.914 695.545 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 682.698 Q295.298 682.698 293.469 686.263 Q291.664 689.805 291.664 696.934 Q291.664 704.041 293.469 707.606 Q295.298 711.147 298.909 711.147 Q302.543 711.147 304.349 707.606 Q306.177 704.041 306.177 696.934 Q306.177 689.805 304.349 686.263 Q302.543 682.698 298.909 682.698 M298.909 678.995 Q304.719 678.995 307.775 683.601 Q310.853 688.184 310.853 696.934 Q310.853 705.661 307.775 710.268 Q304.719 714.851 298.909 714.851 Q293.099 714.851 290.02 710.268 Q286.964 705.661 286.964 696.934 Q286.964 688.184 290.02 683.601 Q293.099 678.995 298.909 678.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M271.594 531.578 L259.789 550.027 L271.594 550.027 L271.594 531.578 M270.367 527.504 L276.247 527.504 L276.247 550.027 L281.177 550.027 L281.177 553.916 L276.247 553.916 L276.247 562.064 L271.594 562.064 L271.594 553.916 L255.992 553.916 L255.992 549.402 L270.367 527.504 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 530.582 Q295.298 530.582 293.469 534.147 Q291.664 537.689 291.664 544.818 Q291.664 551.925 293.469 555.49 Q295.298 559.031 298.909 559.031 Q302.543 559.031 304.349 555.49 Q306.177 551.925 306.177 544.818 Q306.177 537.689 304.349 534.147 Q302.543 530.582 298.909 530.582 M298.909 526.879 Q304.719 526.879 307.775 531.485 Q310.853 536.069 310.853 544.818 Q310.853 553.545 307.775 558.152 Q304.719 562.735 298.909 562.735 Q293.099 562.735 290.02 558.152 Q286.964 553.545 286.964 544.818 Q286.964 536.069 290.02 531.485 Q293.099 526.879 298.909 526.879 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M258.793 375.388 L277.15 375.388 L277.15 379.323 L263.076 379.323 L263.076 387.795 Q264.094 387.448 265.113 387.286 Q266.131 387.101 267.15 387.101 Q272.937 387.101 276.316 390.272 Q279.696 393.443 279.696 398.86 Q279.696 404.439 276.224 407.541 Q272.752 410.619 266.432 410.619 Q264.256 410.619 261.988 410.249 Q259.742 409.878 257.335 409.138 L257.335 404.439 Q259.418 405.573 261.641 406.128 Q263.863 406.684 266.34 406.684 Q270.344 406.684 272.682 404.578 Q275.02 402.471 275.02 398.86 Q275.02 395.249 272.682 393.142 Q270.344 391.036 266.34 391.036 Q264.465 391.036 262.59 391.453 Q260.738 391.869 258.793 392.749 L258.793 375.388 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 378.467 Q295.298 378.467 293.469 382.031 Q291.664 385.573 291.664 392.703 Q291.664 399.809 293.469 403.374 Q295.298 406.916 298.909 406.916 Q302.543 406.916 304.349 403.374 Q306.177 399.809 306.177 392.703 Q306.177 385.573 304.349 382.031 Q302.543 378.467 298.909 378.467 M298.909 374.763 Q304.719 374.763 307.775 379.369 Q310.853 383.953 310.853 392.703 Q310.853 401.429 307.775 406.036 Q304.719 410.619 298.909 410.619 Q293.099 410.619 290.02 406.036 Q286.964 401.429 286.964 392.703 Q286.964 383.953 290.02 379.369 Q293.099 374.763 298.909 374.763 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M269.326 238.689 Q266.178 238.689 264.326 240.841 Q262.497 242.994 262.497 246.744 Q262.497 250.471 264.326 252.647 Q266.178 254.8 269.326 254.8 Q272.474 254.8 274.303 252.647 Q276.154 250.471 276.154 246.744 Q276.154 242.994 274.303 240.841 Q272.474 238.689 269.326 238.689 M278.608 224.036 L278.608 228.295 Q276.849 227.462 275.043 227.022 Q273.261 226.582 271.502 226.582 Q266.872 226.582 264.418 229.707 Q261.988 232.832 261.641 239.152 Q263.006 237.138 265.066 236.073 Q267.127 234.985 269.603 234.985 Q274.812 234.985 277.821 238.156 Q280.853 241.304 280.853 246.744 Q280.853 252.068 277.705 255.286 Q274.557 258.503 269.326 258.503 Q263.33 258.503 260.159 253.92 Q256.988 249.314 256.988 240.587 Q256.988 232.392 260.877 227.531 Q264.766 222.647 271.316 222.647 Q273.076 222.647 274.858 222.994 Q276.664 223.342 278.608 224.036 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 226.351 Q295.298 226.351 293.469 229.916 Q291.664 233.457 291.664 240.587 Q291.664 247.693 293.469 251.258 Q295.298 254.8 298.909 254.8 Q302.543 254.8 304.349 251.258 Q306.177 247.693 306.177 240.587 Q306.177 233.457 304.349 229.916 Q302.543 226.351 298.909 226.351 M298.909 222.647 Q304.719 222.647 307.775 227.254 Q310.853 231.837 310.853 240.587 Q310.853 249.314 307.775 253.92 Q304.719 258.503 298.909 258.503 Q293.099 258.503 290.02 253.92 Q286.964 249.314 286.964 240.587 Q286.964 231.837 290.02 227.254 Q293.099 222.647 298.909 222.647 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip522)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1041.16 400.199,938.193 400.786,843.714 401.372,757.156 401.958,677.991 402.545,605.732 403.131,539.926 403.718,480.153 404.304,426.021 404.891,377.166 405.477,333.247 406.063,377.241 406.65,339.622 407.236,305.083 407.823,341.34 408.409,311.639 408.995,286.596 409.582,317.642 410.168,295.864 410.755,278.157 411.341,262.151 411.927,248.773 412.514,237.843 413.1,229.738 413.687,223.727 414.273,219.895 414.86,247.903 415.446,272.852 416.032,271.176 416.619,270.585 417.205,318.27 417.792,341.123 418.378,342.863 418.964,382.422 419.551,386.293 420.137,392.994 420.724,414.572 421.31,421.4 421.896,469.105 422.483,475.346 423.069,494.99 423.656,514.03 424.242,531.919 424.829,539.439 425.415,556.917 426.001,573.495 426.588,590.224 427.174,606.23 427.761,614.652 428.347,623.37 428.933,632.341 429.52,648.902 430.106,664.135 430.693,679.114 431.279,687.824 431.865,702.306 432.452,716.296 433.038,725.023 433.625,739.041 434.211,762.078 434.798,770.008 435.384,782.336 435.97,790.366 436.557,810.892 437.143,818.113 437.73,829.171 438.316,843.9 438.902,865.305 439.489,881.869 440.075,894.847 440.662,900.445 441.248,909.519 441.835,915.717 442.421,924.596 443.007,930.344 443.594,947.848 444.18,952.877 444.767,960.984 445.353,969.063 445.939,976.745 446.526,984.611 447.112,992.181 447.699,997.164 448.285,1009.25 448.871,1013.55 449.458,1018.11 450.044,1022.47 450.631,1026.89 451.217,1037.83 451.804,1041.74 452.39,1051.96 452.976,1060.18 453.563,1063.84 454.149,1069.35 454.736,1074.8 455.322,1080.19 455.908,1087.09 456.495,1095.83 457.081,1102.85 457.668,1105.86 458.254,1108.95 458.84,1115.77 459.427,1127.5 460.013,1131.47 460.6,1137.11 461.186,1139.13 461.773,1142.56 462.359,1144.58 462.945,1148.4 463.532,1153.37 464.118,1161.83 464.705,1169.88 465.291,1169.23 465.877,1171.98 466.464,1176.29 467.05,1181.11 467.637,1185.24 468.223,1189.03 468.809,1191.6 469.396,1193.87 469.982,1194.4 470.569,1195.06 471.155,1197.28 471.742,1199.58 472.328,1204.67 472.914,1206.55 473.501,1208.4 474.087,1209.83 474.674,1210.06 475.26,1211.61 475.846,1211.82 476.433,1216.58 477.019,1220.86 477.606,1221.56 478.192,1222.71 478.778,1223.72 479.365,1224.86 479.951,1222.81 480.538,1222.43 481.124,1223.48 481.711,1226.13 482.297,1225.9 482.883,1226.75 483.47,1226.58 484.056,1227.68 484.643,1225.85 485.229,1225.84 485.815,1225.64 486.402,1228.38 486.988,1230.95 487.575,1230.79 488.161,1232.06 488.748,1236.27 489.334,1242.71 489.92,1240.47 490.507,1238.6 491.093,1240.89 491.68,1242.87 492.266,1243.34 492.852,1243.91 493.439,1243.13 494.025,1243.82 494.612,1244.4 495.198,1245.08 495.784,1248.17 496.371,1245.79 496.957,1243.95 497.544,1247.33 498.13,1249.2 498.717,1247.14 499.303,1248.93 499.889,1249.42 500.476,1248.68 501.062,1248.15 501.649,1246.12 502.235,1244.44 502.821,1242.62 503.408,1243.47 503.994,1243.18 504.581,1243.98 505.167,1246.03 505.753,1246.74 506.34,1244.95 506.926,1246.97 507.513,1247.86 508.099,1248.31 508.686,1246.43 509.272,1245.84 509.858,1244.01 510.445,1246.25 511.031,1245.77 511.618,1244.87 512.204,1245.48 512.79,1245.95 513.377,1244.14 513.963,1247.58 514.55,1248.12 515.136,1248.99 515.722,1249.28 516.309,1249.34 516.895,1248.34 517.482,1248.83 518.068,1250.53 518.655,1249.73 519.241,1246.64 519.827,1248.55 520.414,1247.81 521,1248.5 521.587,1247.65 522.173,1248.19 522.759,1248.67 523.346,1246.55 523.932,1245.88 524.519,1244.06 525.105,1248.64 525.691,1246.54 526.278,1244.65 526.864,1244 527.451,1244.91 528.037,1245.59 528.624,1246.03 529.21,1243.88 529.796,1243.18 530.383,1243.86 530.969,1244.12 531.556,1243.88 532.142,1242.2 532.728,1240.52 533.315,1240.27 533.901,1241.07 534.488,1244.53 535.074,1242.92 535.661,1240.7 536.247,1239.04 536.833,1237.29 537.42,1234.51 538.006,1233.13 538.593,1231.72 539.179,1230.54 539.765,1229.38 540.352,1228.33 540.938,1228.94 541.525,1232.94 542.111,1233.06 542.697,1234.05 543.284,1236.63 543.87,1239.9 544.457,1242.05 545.043,1242.77 545.63,1240.96 546.216,1240.53 546.802,1241.29 547.389,1239.54 547.975,1239.17 548.562,1240.08 549.148,1239.7 549.734,1241.86 550.321,1240.35 550.907,1237.58 551.494,1238.45 552.08,1240.7 552.666,1239.13 553.253,1240.11 553.839,1239.77 554.426,1236.98 555.012,1238.13 555.599,1237.41 556.185,1237.07 556.771,1237.87 557.358,1237.57 557.944,1238.4 558.531,1238.99 559.117,1238.37 559.703,1236.78 560.29,1240.35 560.876,1240.08 561.463,1239.54 562.049,1241.54 562.635,1238.49 563.222,1240.58 563.808,1238.85 564.395,1237.17 564.981,1236.68 565.568,1236.45 566.154,1237.58 566.74,1239.46 567.327,1238.99 567.913,1237.1 568.5,1236.68 569.086,1236.52 569.672,1237.21 570.259,1236.57 570.845,1237.29 571.432,1238.16 572.018,1235.26 572.605,1234.89 573.191,1236.84 573.777,1237.85 574.364,1237.46 574.95,1235.72 575.537,1236.45 576.123,1235.76 576.709,1234.14 577.296,1235.24 577.882,1237.33 578.469,1238.05 579.055,1237.54 579.641,1239.32 580.228,1236.16 580.814,1235.66 581.401,1236.57 581.987,1238.69 582.574,1238.15 583.16,1241.34 583.746,1240.38 584.333,1238.53 584.919,1239.53 585.506,1238.96 586.092,1240.66 586.678,1238.43 587.265,1240.2 587.851,1239.44 588.438,1237.23 589.024,1234.15 589.61,1232.75 590.197,1233.61 590.783,1233.18 591.37,1232.83 591.956,1232.65 592.543,1233.75 593.129,1233.22 593.715,1232.99 594.302,1230.17 594.888,1227.67 595.475,1228.91 596.061,1231.39 596.647,1232.23 597.234,1233.22 597.82,1232.93 598.407,1232.83 598.993,1229.89 599.579,1229.73 600.166,1229.81 600.752,1232.1 601.339,1234.32 601.925,1233.81 602.512,1232.47 603.098,1232.2 603.684,1233.06 604.271,1232.63 604.857,1232.07 605.444,1234.2 606.03,1231.05 606.616,1233.15 607.203,1227.93 607.789,1232.27 608.376,1232 608.962,1229.13 609.548,1228.99 610.135,1233.53 610.721,1232 611.308,1231.91 611.894,1232.9 612.481,1232.63 613.067,1232.07 613.653,1230.39 614.24,1233.75 614.826,1234.61 615.413,1233.99 615.999,1233.67 616.585,1233.47 617.172,1234.08 617.758,1233.47 618.345,1231.79 618.931,1233.68 619.518,1233.07 620.104,1229.92 620.69,1229.72 621.277,1229.37 621.863,1227.92 622.45,1227.79 623.036,1222.69 623.622,1226.29 624.209,1222.23 624.795,1220.86 625.382,1222.12 625.968,1219.85 626.554,1219.86 627.141,1221.3 627.727,1222.7 628.314,1223.71 628.9,1222.6 629.487,1224.01 630.073,1221.49 630.659,1221.44 631.246,1221.41 631.832,1221.43 632.419,1224 633.005,1223.95 633.591,1223.85 634.178,1223.75 634.764,1222.22 635.351,1221.11 635.937,1219.98 636.523,1222.45 637.11,1223.72 637.696,1226.15 638.283,1227.41 638.869,1228.6 639.456,1229.67 640.042,1230.61 640.628,1228.88 641.215,1227.33 641.801,1227.01 642.388,1225.54 642.974,1225.2 643.56,1227.29 644.147,1227.06 644.733,1229.13 645.32,1227.46 645.906,1229.71 646.492,1229.33 647.079,1227.81 647.665,1227.25 648.252,1225.59 648.838,1225.44 649.425,1225.42 650.011,1226.53 650.597,1228.98 651.184,1228.77 651.77,1225.98 652.357,1227.16 652.943,1228.26 653.529,1230.36 654.116,1232.34 654.702,1230.71 655.289,1229.11 655.875,1227.41 656.462,1225.63 657.048,1225.43 657.634,1227.79 658.221,1230.14 658.807,1230.71 659.394,1231.23 659.98,1233.13 660.566,1232.64 661.153,1230.67 661.739,1231.45 662.326,1229.59 662.912,1230.29 663.498,1231.04 664.085,1230.77 664.671,1228.98 665.258,1228.3 665.844,1229.38 666.431,1228.84 667.017,1227.21 667.603,1228.04 668.19,1226.66 668.776,1225.16 669.363,1223.65 669.949,1224.93 670.535,1223.49 671.122,1222.25 671.708,1222.43 672.295,1224.89 672.881,1224.43 673.467,1225.42 674.054,1227.79 674.64,1228.79 675.227,1232.25 675.813,1233.04 676.4,1231.21 676.986,1231.94 677.572,1232.63 678.159,1229.58 678.745,1229.17 679.332,1231.12 679.918,1228.21 680.504,1226.71 681.091,1226.47 681.677,1226.06 682.264,1226.06 682.85,1223.5 683.436,1224.48 684.023,1224.34 684.609,1221.47 685.196,1222.53 685.782,1220.79 686.369,1219.21 686.955,1216.59 687.541,1216.8 688.128,1218.14 688.714,1218.31 689.301,1219.72 689.887,1218.57 690.473,1218.49 691.06,1217.26 691.646,1217.29 692.233,1215.03 692.819,1216.33 693.405,1215.19 693.992,1214.19 694.578,1216.83 695.165,1215.74 695.751,1217.33 696.338,1216.39 696.924,1215.26 697.51,1215.54 698.097,1215.69 698.683,1214.65 699.27,1216.13 699.856,1217.42 700.442,1218.87 701.029,1220.04 701.615,1220 702.202,1219.91 702.788,1219.77 703.375,1219.54 703.961,1220.73 704.547,1220.97 705.134,1222.06 705.72,1220.51 706.307,1221.73 706.893,1221.63 707.479,1225.1 708.066,1225.94 708.652,1225.7 709.239,1223.77 709.825,1223.58 710.411,1224.64 710.998,1225.65 711.584,1223.07 712.171,1225.01 712.757,1224.88 713.344,1223.48 713.93,1223.08 714.516,1224.24 715.103,1225.18 715.689,1227.31 716.276,1226.93 716.862,1228.93 717.448,1227.09 718.035,1226.64 718.621,1226.24 719.208,1225.91 719.794,1225.58 720.38,1225.16 720.967,1222.58 721.553,1222.37 722.14,1222.12 722.726,1220.52 723.313,1220.38 723.899,1220.22 724.485,1219.98 725.072,1219.88 725.658,1220.9 726.245,1218.47 726.831,1212.18 727.417,1212.61 728.004,1212.84 728.59,1215.81 729.177,1215.78 729.763,1214.64 730.349,1214.88 730.936,1215.08 731.522,1214.89 732.109,1216.6 732.695,1218.11 733.282,1218.12 733.868,1218.52 734.454,1218.54 735.041,1216.01 735.627,1217.43 736.214,1218.72 736.8,1218.92 737.386,1220.09 737.973,1220.04 738.559,1222.42 739.146,1221.96 739.732,1221.48 740.318,1221.22 740.905,1221.22 741.491,1218.56 742.078,1218.32 742.664,1219.75 743.251,1218.5 743.837,1217.3 744.423,1213.61 745.01,1215.2 745.596,1216.71 746.183,1218.02 746.769,1214.4 747.355,1214.43 747.942,1214.66 748.528,1214.66 749.115,1219.72 749.701,1219.45 750.288,1218.33 750.874,1219.56 751.46,1218.32 752.047,1216.98 752.633,1215.78 753.22,1214.44 753.806,1216.01 754.392,1214.94 754.979,1215.45 755.565,1216.91 756.152,1217.04 756.738,1219.74 757.324,1222.43 757.911,1221.13 758.497,1221.29 759.084,1219.74 759.67,1222.1 760.257,1219.49 760.843,1219.46 761.429,1220.65 762.016,1217.85 762.602,1218.98 763.189,1219.16 763.775,1217.74 764.361,1215.31 764.948,1217.82 765.534,1219.11 766.121,1220.43 766.707,1221.56 767.293,1218.86 767.88,1216.34 768.466,1216.44 769.053,1217.74 769.639,1218.8 770.226,1216.41 770.812,1215.24 771.398,1215.41 771.985,1214.16 772.571,1216.7 773.158,1216.92 773.744,1218.39 774.33,1219.69 774.917,1220.89 775.503,1220.72 776.09,1219.31 776.676,1219.14 777.262,1217.64 777.849,1220.34 778.435,1219.04 779.022,1217.37 779.608,1216.34 780.195,1217.79 780.781,1217.98 781.367,1218.91 781.954,1218.87 782.54,1217.83 783.127,1217.95 783.713,1217.94 784.299,1219.02 784.886,1216.39 785.472,1216.26 786.059,1215.27 786.645,1215.39 787.232,1215.62 787.818,1215.62 788.404,1214.51 788.991,1214.72 789.577,1216.05 790.164,1217.45 790.75,1218.68 791.336,1218.53 791.923,1218.53 792.509,1219.49 793.096,1216.78 793.682,1216.96 794.268,1217.16 794.855,1217.02 795.441,1219.34 796.028,1217.95 796.614,1220.5 797.201,1222.68 797.787,1222.3 798.373,1223.26 798.96,1222.98 799.546,1221.54 800.133,1219.93 800.719,1221.19 801.305,1222.26 801.892,1218.46 802.478,1218.4 803.065,1217.41 803.651,1218.64 804.237,1217.3 804.824,1214.72 805.41,1214.88 805.997,1216.34 806.583,1217.66 807.17,1217.25 807.756,1215.77 808.342,1214.72 808.929,1216.02 809.515,1215.91 810.102,1216.37 810.688,1215.14 811.274,1214.06 811.861,1212.93 812.447,1212.91 813.034,1214.41 813.62,1218.27 814.206,1218.12 814.793,1218.16 815.379,1219.49 815.966,1220.46 816.552,1220.45 817.139,1219.1 817.725,1218.92 818.311,1217.67 818.898,1214.98 819.484,1216.57 820.071,1217.94 820.657,1219.16 821.243,1221.6 821.83,1226.43 822.416,1224.56 823.003,1221.66 823.589,1220.12 824.175,1218.89 824.762,1219.9 825.348,1221.13 825.935,1221.13 826.521,1218.45 827.108,1219.47 827.694,1219.12 828.28,1221.56 828.867,1221.38 829.453,1221.35 830.04,1222.24 830.626,1220.69 831.212,1219.18 831.799,1219.03 832.385,1220.25 832.972,1220.08 833.558,1219.92 834.145,1221.06 834.731,1222.14 835.317,1223.06 835.904,1221.53 836.49,1219.94 837.077,1217.17 837.663,1217.17 838.249,1217.18 838.836,1217.2 839.422,1218.62 840.009,1218.62 840.595,1219.63 841.181,1221 841.768,1218.36 842.354,1218.57 842.941,1219.59 843.527,1218.32 844.114,1218 844.7,1214.22 845.286,1215.73 845.873,1214.26 846.459,1214.14 847.046,1216.97 847.632,1214.55 848.218,1215.82 848.805,1214.38 849.391,1211.69 849.978,1211.77 850.564,1210.64 851.15,1208.21 851.737,1208.34 852.323,1210.07 852.91,1209.16 853.496,1210.67 854.083,1209.64 854.669,1211.24 855.255,1210.81 855.842,1212.27 856.428,1213.71 857.015,1216.2 857.601,1217.41 858.187,1218.74 858.774,1219.93 859.36,1218.54 859.947,1222.04 860.533,1221.53 861.119,1220.25 861.706,1220.02 862.292,1217.55 862.879,1214.85 863.465,1213.82 864.052,1212.66 864.638,1214.17 865.224,1212.99 865.811,1213.13 866.397,1214.73 866.984,1214.77 867.57,1210.96 868.156,1213.7 868.743,1212.41 869.329,1211.45 869.916,1210.29 870.502,1211.88 871.089,1213.26 871.675,1213.67 872.261,1212.7 872.848,1212.72 873.434,1211.76 874.021,1210.96 874.607,1213.91 875.193,1212.94 875.78,1211.69 876.366,1210.7 876.953,1209.61 877.539,1208.8 878.125,1209.37 878.712,1209.65 879.298,1210.04 879.885,1211.65 880.471,1210.5 881.058,1208.49 881.644,1207.72 882.23,1208.17 882.817,1208.75 883.403,1211.39 883.99,1208.9 884.576,1209.12 885.162,1208.49 885.749,1208.76 886.335,1209.1 886.922,1208.49 887.508,1208.97 888.094,1209.16 888.681,1208.19 889.267,1208.7 889.854,1208.91 890.44,1210.59 891.027,1212.13 891.613,1213.54 892.199,1215.05 892.786,1216.3 893.372,1216.33 893.959,1215.23 894.545,1215.24 895.131,1216.5 895.718,1217.75 896.304,1216.32 896.891,1216.42 897.477,1216.36 898.063,1214.92 898.65,1217.22 899.236,1219.68 899.823,1219.5 900.409,1221.62 900.996,1223.84 901.582,1224.73 902.168,1225.46 902.755,1224.9 903.341,1224.26 903.928,1224 904.514,1223.51 905.1,1221.97 905.687,1221.77 906.273,1221.64 906.86,1223.54 907.446,1224.29 908.032,1224.88 908.619,1225.93 909.205,1223.94 909.792,1223.68 910.378,1223.12 910.965,1222.54 911.551,1224.67 912.137,1225.49 912.724,1225.03 913.31,1223.26 913.897,1221.75 914.483,1221.63 915.069,1219.96 915.656,1218.47 916.242,1218.6 916.829,1219.77 917.415,1218.24 918.002,1219.07 918.588,1218.76 919.174,1219.71 919.761,1216.74 920.347,1216.61 920.934,1217.71 921.52,1217.68 922.106,1215.2 922.693,1215.34 923.279,1215.44 923.866,1215.55 924.452,1215.6 925.038,1210.69 925.625,1209.94 926.211,1211.7 926.798,1213.33 927.384,1213.42 927.971,1213.62 928.557,1213.92 929.143,1214 929.73,1215.35 930.316,1214.05 930.903,1215.55 931.489,1215.49 932.075,1217.99 932.662,1217.95 933.248,1216.52 933.835,1216.64 934.421,1214.18 935.007,1213.98 935.594,1211.53 936.18,1210.68 936.767,1211.07 937.353,1208.56 937.94,1210.2 938.526,1209.15 939.112,1209.53 939.699,1211.18 940.285,1211.57 940.872,1211.59 941.458,1210.58 942.044,1212.02 942.631,1215.53 943.217,1216.84 943.804,1216.93 944.39,1216.71 944.976,1215.68 945.563,1214.4 946.149,1216.93 946.736,1215.34 947.322,1213.89 947.909,1214.17 948.495,1214.35 949.081,1212.21 949.668,1213.45 950.254,1214.95 950.841,1212.6 951.427,1213.79 952.013,1212.35 952.6,1213.7 953.186,1214.79 953.773,1214.82 954.359,1219.8 954.945,1221.95 955.532,1220.51 956.118,1220.47 956.705,1218.74 957.291,1217.28 957.878,1218.39 958.464,1216.82 959.05,1215.6 959.637,1215.64 960.223,1214.36 960.81,1215.41 961.396,1215.43 961.982,1213.93 962.569,1215.28 963.155,1216.52 963.742,1216.48 964.328,1216.09 964.915,1214.85 965.501,1215.01 966.087,1215.34 966.674,1214.11 967.26,1214.09 967.847,1211.54 968.433,1213 969.019,1214.47 969.606,1214.58 970.192,1213.29 970.779,1215.9 971.365,1215.85 971.951,1218.44 972.538,1219.5 973.124,1220.68 973.711,1221.48 974.297,1224.49 974.884,1227.78 975.47,1227.14 976.056,1226.58 976.643,1228.07 977.229,1228.62 977.816,1227.95 978.402,1229.77 978.988,1227.54 979.575,1224.47 980.161,1225.37 980.748,1226.3 981.334,1224.57 981.92,1225.37 982.507,1223.71 983.093,1224.45 983.68,1225.36 984.266,1223.74 984.853,1224.36 985.439,1222.45 986.025,1224.41 986.612,1221.75 987.198,1221.72 987.785,1219.86 988.371,1215.68 988.957,1214.52 989.544,1213.05 990.13,1211.91 990.717,1213.48 991.303,1214.67 991.889,1214.61 992.476,1212.06 993.062,1212.35 993.649,1211.32 994.235,1209.2 994.822,1209.32 995.408,1208.36 995.994,1208.52 996.581,1212.3 997.167,1213.56 997.754,1212.55 998.34,1214.05 998.926,1213 999.513,1213.42 1000.1,1214.42 1000.69,1213.17 1001.27,1213.37 1001.86,1214.46 1002.44,1214.25 1003.03,1213.13 1003.62,1212.06 1004.2,1212.51 1004.79,1213.93 1005.38,1215.23 1005.96,1212.49 1006.55,1212.53 1007.14,1212.59 1007.72,1214.19 1008.31,1216.89 1008.9,1216.92 1009.48,1213.07 1010.07,1214.23 1010.65,1211.78 1011.24,1210.81 1011.83,1209.93 1012.41,1207.83 1013,1207.06 1013.59,1204.79 1014.17,1204.08 1014.76,1203.14 1015.35,1205.37 1015.93,1208.48 1016.52,1209 1017.11,1210.43 1017.69,1211.83 1018.28,1210.86 1018.86,1213.67 1019.45,1212.82 1020.04,1217.9 1020.62,1219.01 1021.21,1221.42 1021.8,1220.16 1022.38,1226.12 1022.97,1225.54 1023.56,1224.88 1024.14,1221.98 1024.73,1221.24 1025.32,1220.82 1025.9,1220.38 1026.49,1220.01 1027.07,1225.95 1027.66,1228.21 1028.25,1227.59 1028.83,1224.5 1029.42,1224.09 1030.01,1223.64 1030.59,1225.42 1031.18,1225.02 1031.77,1225.72 1032.35,1225.38 1032.94,1224.96 1033.52,1226.79 1034.11,1223.37 1034.7,1220.11 1035.28,1218.45 1035.87,1216.94 1036.46,1215.52 1037.04,1214.12 1037.63,1215.34 1038.22,1216.45 1038.8,1216.39 1039.39,1216.41 1039.98,1217.3 1040.56,1218.14 1041.15,1217.88 1041.73,1216.58 1042.32,1213.87 1042.91,1213.94 1043.49,1213.92 1044.08,1211.46 1044.67,1216.65 1045.25,1217.75 1045.84,1217.67 1046.43,1217.82 1047.01,1217.5 1047.6,1219.73 1048.19,1215.93 1048.77,1215.38 1049.36,1215.28 1049.94,1215.33 1050.53,1216.64 1051.12,1217.62 1051.7,1215.03 1052.29,1217.43 1052.88,1217.3 1053.46,1214.71 1054.05,1213.76 1054.64,1213.9 1055.22,1212.74 1055.81,1213.17 1056.39,1210.65 1056.98,1211.13 1057.57,1213.73 1058.15,1214.94 1058.74,1213.52 1059.33,1214.75 1059.91,1214.52 1060.5,1212.07 1061.09,1212.61 1061.67,1210.23 1062.26,1209.54 1062.85,1212.68 1063.43,1210.28 1064.02,1210.62 1064.6,1214.66 1065.19,1215.76 1065.78,1213.32 1066.36,1210.89 1066.95,1209.79 1067.54,1210.03 1068.12,1210.39 1068.71,1210.66 1069.3,1210.99 1069.88,1212.53 1070.47,1212.64 1071.06,1211.53 1071.64,1210.17 1072.23,1210.52 1072.81,1210.97 1073.4,1210.02 1073.99,1207.03 1074.57,1206.22 1075.16,1206.85 1075.75,1207.26 1076.33,1208.72 1076.92,1210.41 1077.51,1211.95 1078.09,1212.09 1078.68,1213.62 1079.26,1212.45 1079.85,1211.57 1080.44,1211.52 1081.02,1210.53 1081.61,1210.8 1082.2,1210.88 1082.78,1213.75 1083.37,1215.05 1083.96,1216.68 1084.54,1215.63 1085.13,1216.82 1085.72,1218 1086.3,1214.18 1086.89,1213.98 1087.47,1213.99 1088.06,1212.69 1088.65,1212.73 1089.23,1215.16 1089.82,1213.58 1090.41,1213.67 1090.99,1213.85 1091.58,1215.21 1092.17,1215.01 1092.75,1212.71 1093.34,1212.66 1093.93,1215.18 1094.51,1213.97 1095.1,1215.39 1095.68,1215.3 1096.27,1214.42 1096.86,1210.89 1097.44,1211.07 1098.03,1212.38 1098.62,1211.54 1099.2,1209.49 1099.79,1211.13 1100.38,1211.07 1100.96,1214.89 1101.55,1214.78 1102.14,1213.15 1102.72,1215.72 1103.31,1216.98 1103.89,1217.04 1104.48,1215.56 1105.07,1216.68 1105.65,1218.95 1106.24,1218.66 1106.83,1216.05 1107.41,1219.53 1108,1224.49 1108.59,1224.92 1109.17,1223.14 1109.76,1222.71 1110.34,1222.64 1110.93,1223.33 1111.52,1221.55 1112.1,1218.59 1112.69,1220.94 1113.28,1220.71 1113.86,1220.67 1114.45,1220.36 1115.04,1222.62 1115.62,1221.16 1116.21,1220.8 1116.8,1220.6 1117.38,1216.68 1117.97,1216.77 1118.55,1215.34 1119.14,1216.77 1119.73,1216.56 1120.31,1215.35 1120.9,1215.49 1121.49,1216.6 1122.07,1216.53 1122.66,1215.08 1123.25,1216.39 1123.83,1212.5 1124.42,1211.46 1125.01,1212.89 1125.59,1213.02 1126.18,1211.78 1126.76,1211.64 1127.35,1213.07 1127.94,1214.44 1128.52,1213.16 1129.11,1214.37 1129.7,1212.93 1130.28,1215.49 1130.87,1216.67 1131.46,1216.73 1132.04,1215.16 1132.63,1217.59 1133.21,1218.82 1133.8,1217.46 1134.39,1217.36 1134.97,1218.45 1135.56,1220.56 1136.15,1218.83 1136.73,1218.55 1137.32,1217.35 1137.91,1214.87 1138.49,1216.19 1139.08,1216.42 1139.67,1217.67 1140.25,1217.37 1140.84,1218.28 1141.42,1216.61 1142.01,1212.86 1142.6,1211.62 1143.18,1211.89 1143.77,1216.7 1144.36,1215.18 1144.94,1215.12 1145.53,1216.66 1146.12,1217.69 1146.7,1221.32 1147.29,1218.48 1147.88,1216.87 1148.46,1217.82 1149.05,1217.47 1149.63,1214.66 1150.22,1216.17 1150.81,1214.73 1151.39,1217.15 1151.98,1218.46 1152.57,1219.45 1153.15,1216.75 1153.74,1217.68 1154.33,1216.26 1154.91,1214.68 1155.5,1213.36 1156.09,1213.69 1156.67,1211.47 1157.26,1210.32 1157.84,1210.38 1158.43,1210.63 1159.02,1208.42 1159.6,1206.28 1160.19,1206.53 1160.78,1207.13 1161.36,1207.39 1161.95,1210.04 1162.54,1212.81 1163.12,1212.78 1163.71,1214.3 1164.29,1214.3 1164.88,1215.68 1165.47,1216.82 1166.05,1217.83 1166.64,1216.59 1167.23,1217.82 1167.81,1217.97 1168.4,1218.03 1168.99,1218.88 1169.57,1217.39 1170.16,1217.46 1170.75,1217.37 1171.33,1217.2 1171.92,1219.55 1172.5,1216.97 1173.09,1218.08 1173.68,1217.94 1174.26,1218.14 1174.85,1219.16 1175.44,1217.71 1176.02,1218.93 1176.61,1218.61 1177.2,1217.26 1177.78,1218.56 1178.37,1217.03 1178.96,1218.11 1179.54,1216.76 1180.13,1215.51 1180.71,1215.31 1181.3,1211.45 1181.89,1212.77 1182.47,1211.67 1183.06,1210.69 1183.65,1210.88 1184.23,1209.84 1184.82,1213.87 1185.41,1214.97 1185.99,1215.16 1186.58,1215.33 1187.16,1215.21 1187.75,1216.66 1188.34,1216.36 1188.92,1216.28 1189.51,1214.96 1190.1,1213.71 1190.68,1213.86 1191.27,1216.38 1191.86,1220.94 1192.44,1221.7 1193.03,1219.7 1193.62,1216.77 1194.2,1215.54 1194.79,1219.22 1195.37,1217.71 1195.96,1214.94 1196.55,1217.29 1197.13,1218.33 1197.72,1219.23 1198.31,1215.04 1198.89,1216.4 1199.48,1216.3 1200.07,1215.1 1200.65,1216.28 1201.24,1216.29 1201.83,1217.38 1202.41,1213.57 1203,1212.17 1203.58,1211.01 1204.17,1210.18 1204.76,1212.73 1205.34,1211.55 1205.93,1211.98 1206.52,1214.65 1207.1,1217.19 1207.69,1217.13 1208.28,1218.06 1208.86,1217.95 1209.45,1217.86 1210.03,1216.42 1210.62,1215.24 1211.21,1216.65 1211.79,1213.16 1212.38,1211.92 1212.97,1210.68 1213.55,1205.8 1214.14,1205.03 1214.73,1205.37 1215.31,1204.95 1215.9,1204.24 1216.49,1204.69 1217.07,1205.11 1217.66,1205.68 1218.24,1206.23 1218.83,1205.57 1219.42,1208.29 1220,1211.01 1220.59,1212.26 1221.18,1208.39 1221.76,1206.19 1222.35,1206.75 1222.94,1207.1 1223.52,1208.54 1224.11,1207.42 1224.7,1207.72 1225.28,1208.09 1225.87,1205.89 1226.45,1204.09 1227.04,1204.75 1227.63,1205.29 1228.21,1205.78 1228.8,1205.19 1229.39,1205.93 1229.97,1204.69 1230.56,1203.68 1231.15,1205.69 1231.73,1203.69 1232.32,1204.52 1232.91,1206.31 1233.49,1206.88 1234.08,1207.06 1234.66,1210.01 1235.25,1210.43 1235.84,1211.94 1236.42,1212.13 1237.01,1213.6 1237.6,1215.13 1238.18,1213.87 1238.77,1214.01 1239.36,1215.29 1239.94,1213.05 1240.53,1211.9 1241.11,1213.53 1241.7,1212.2 1242.29,1212.25 1242.87,1212.49 1243.46,1214.97 1244.05,1214.89 1244.63,1213.86 1245.22,1212.61 1245.81,1212.64 1246.39,1214.19 1246.98,1214.45 1247.57,1214.42 1248.15,1214.42 1248.74,1213.14 1249.32,1214.47 1249.91,1215.73 1250.5,1215.96 1251.08,1214.68 1251.67,1219.44 1252.26,1219.38 1252.84,1217.66 1253.43,1218.84 1254.02,1216.16 1254.6,1217.47 1255.19,1217.36 1255.78,1218.3 1256.36,1216.72 1256.95,1216.42 1257.53,1216.14 1258.12,1215.85 1258.71,1215.81 1259.29,1215.29 1259.88,1216.64 1260.47,1219 1261.05,1218.6 1261.64,1218.39 1262.23,1216.99 1262.81,1219.43 1263.4,1219.23 1263.98,1221.49 1264.57,1218.97 1265.16,1216.48 1265.74,1217.71 1266.33,1216.48 1266.92,1214.92 1267.5,1217.25 1268.09,1218.52 1268.68,1218.46 1269.26,1217.08 1269.85,1216.9 1270.44,1217.72 1271.02,1218.69 1271.61,1218.31 1272.19,1215.49 1272.78,1214.14 1273.37,1214.27 1273.95,1216.7 1274.54,1216.59 1275.13,1217.61 1275.71,1216.11 1276.3,1217.05 1276.89,1215.75 1277.47,1221.97 1278.06,1220.58 1278.65,1217.52 1279.23,1216.36 1279.82,1213.64 1280.4,1211.17 1280.99,1210.2 1281.58,1214.04 1282.16,1214.24 1282.75,1215.38 1283.34,1215.21 1283.92,1215.35 1284.51,1214.12 1285.1,1214.04 1285.68,1212.62 1286.27,1212.79 1286.86,1212.91 1287.44,1214.35 1288.03,1214.15 1288.61,1213.98 1289.2,1212.9 1289.79,1212.04 1290.37,1213.19 1290.96,1213.39 1291.55,1213.55 1292.13,1213.63 1292.72,1212.31 1293.31,1214.85 1293.89,1213.69 1294.48,1212.48 1295.06,1212.6 1295.65,1215.35 1296.24,1213.96 1296.82,1215.57 1297.41,1216.65 1298,1216.38 1298.58,1217.47 1299.17,1218.69 1299.76,1218.71 1300.34,1218.29 1300.93,1217.9 1301.52,1220.13 1302.1,1217.68 1302.69,1217.74 1303.27,1218.87 1303.86,1219.8 1304.45,1219.51 1305.03,1219.42 1305.62,1219.11 1306.21,1218.87 1306.79,1222.62 1307.38,1224.85 1307.97,1224.3 1308.55,1222.57 1309.14,1223.45 1309.73,1223.14 1310.31,1221.39 1310.9,1219.87 1311.48,1219.31 1312.07,1217.68 1312.66,1217.85 1313.24,1217.5 1313.83,1214.69 1314.42,1215.92 1315,1215.77 1315.59,1214.48 1316.18,1215.74 1316.76,1215.66 1317.35,1214.2 1317.93,1214.15 1318.52,1210.57 1319.11,1210.67 1319.69,1213.4 1320.28,1214.79 1320.87,1215.95 1321.45,1216.02 1322.04,1213.28 1322.63,1213.36 1323.21,1212.14 1323.8,1212.34 1324.39,1211.3 1324.97,1211.29 1325.56,1211.54 1326.14,1215.69 1326.73,1214.23 1327.32,1211.87 1327.9,1213.13 1328.49,1214.27 1329.08,1215.62 1329.66,1218.11 1330.25,1216.94 1330.84,1215.79 1331.42,1215.69 1332.01,1214.64 1332.6,1214.86 1333.18,1212.56 1333.77,1211.2 1334.35,1212.55 1334.94,1212.5 1335.53,1213.87 1336.11,1212.35 1336.7,1215.05 1337.29,1215.27 1337.87,1219.17 1338.46,1218.9 1339.05,1217.2 1339.63,1214.69 1340.22,1212.13 1340.8,1215.85 1341.39,1218.26 1341.98,1220.53 1342.56,1218.91 1343.15,1217.57 1343.74,1218.65 1344.32,1217.23 1344.91,1214.54 1345.5,1210.77 1346.08,1211.16 1346.67,1211.43 1347.26,1211.34 1347.84,1213.77 1348.43,1214.9 1349.01,1215.88 1349.6,1214.67 1350.19,1214.9 1350.77,1217.72 1351.36,1216.42 1351.95,1217.64 1352.53,1213.88 1353.12,1210.19 1353.71,1209.24 1354.29,1209.57 1354.88,1207.35 1355.47,1206.61 1356.05,1205.79 1356.64,1204.76 1357.22,1205.31 1357.81,1209.69 1358.4,1211.09 1358.98,1211.31 1359.57,1210.24 1360.16,1208.91 1360.74,1208.12 1361.33,1206.92 1361.92,1207.26 1362.5,1205.12 1363.09,1209.17 1363.68,1209.47 1364.26,1210.93 1364.85,1214.64 1365.43,1214.75 1366.02,1217.32 1366.61,1217.23 1367.19,1218.44 1367.78,1218.19 1368.37,1220.47 1368.95,1217.6 1369.54,1215.09 1370.13,1215.07 1370.71,1215.25 1371.3,1215.21 1371.88,1215.01 1372.47,1215.37 1373.06,1216.55 1373.64,1214.96 1374.23,1212.3 1374.82,1210.91 1375.4,1212.32 1375.99,1211.11 1376.58,1212.5 1377.16,1211.17 1377.75,1211.46 1378.34,1211.78 1378.92,1212.09 1379.51,1210.92 1380.09,1209.72 1380.68,1208.68 1381.27,1207.53 1381.85,1205.51 1382.44,1207.32 1383.03,1206.43 1383.61,1208.25 1384.2,1208.61 1384.79,1208.95 1385.37,1209.28 1385.96,1212.11 1386.55,1207.41 1387.13,1206.59 1387.72,1208.14 1388.3,1209.58 1388.89,1209.64 1389.48,1212.26 1390.06,1212.56 1390.65,1212.69 1391.24,1213.93 1391.82,1211.32 1392.41,1209.19 1393,1209.44 1393.58,1209.28 1394.17,1209.55 1394.75,1210.71 1395.34,1209.27 1395.93,1209.55 1396.51,1208.61 1397.1,1210.15 1397.69,1210.55 1398.27,1209.49 1398.86,1208.46 1399.45,1209.94 1400.03,1208.93 1400.62,1209.28 1401.21,1206.88 1401.79,1207.66 1402.38,1209.3 1402.96,1209.59 1403.55,1211.02 1404.14,1213.69 1404.72,1212.39 1405.31,1210.01 1405.9,1210.17 1406.48,1210.61 1407.07,1212.06 1407.66,1210.79 1408.24,1213.47 1408.83,1214.93 1409.42,1214.86 1410,1213.62 1410.59,1214.76 1411.17,1218.47 1411.76,1219.52 1412.35,1219.31 1412.93,1220.28 1413.52,1218.38 1414.11,1218.32 1414.69,1219.26 1415.28,1220.02 1415.87,1219.63 1416.45,1219.2 1417.04,1218.92 1417.63,1217.2 1418.21,1218.11 1418.8,1219.09 1419.38,1217.43 1419.97,1218.25 1420.56,1217.04 1421.14,1217.8 1421.73,1219.05 1422.32,1218.83 1422.9,1218.65 1423.49,1217.25 1424.08,1217.32 1424.66,1218.35 1425.25,1217.02 1425.83,1219.18 1426.42,1217.64 1427.01,1217.47 1427.59,1217.34 1428.18,1218.57 1428.77,1218.39 1429.35,1219.16 1429.94,1220.17 1430.53,1222.49 1431.11,1220.71 1431.7,1219.03 1432.29,1219.82 1432.87,1219.64 1433.46,1219.43 1434.04,1221.48 1434.63,1220.92 1435.22,1219.43 1435.8,1218.12 1436.39,1218.13 1436.98,1215.45 1437.56,1215.34 1438.15,1217.68 1438.74,1217.54 1439.32,1220.91 1439.91,1219.53 1440.5,1220.47 1441.08,1221.69 1441.67,1220.11 1442.25,1219.78 1442.84,1216.83 1443.43,1220.42 1444.01,1220.13 1444.6,1221.99 1445.19,1221.64 1445.77,1218.9 1446.36,1218.83 1446.95,1217.53 1447.53,1218.95 1448.12,1218.53 1448.7,1218.39 1449.29,1217.01 1449.88,1217.2 1450.46,1219.47 1451.05,1219.19 1451.64,1215.27 1452.22,1214.02 1452.81,1213.64 1453.4,1213.66 1453.98,1212.58 1454.57,1209.97 1455.16,1211.45 1455.74,1212.82 1456.33,1212.89 1456.91,1211.64 1457.5,1210.59 1458.09,1209.44 1458.67,1206.19 1459.26,1206.59 1459.85,1205.97 1460.43,1207.84 1461.02,1208.01 1461.61,1207.03 1462.19,1207.29 1462.78,1207.65 1463.37,1206.86 1463.95,1211.22 1464.54,1210.21 1465.12,1206.81 1465.71,1207.37 1466.3,1209.96 1466.88,1210.49 1467.47,1210.84 1468.06,1210.99 1468.64,1208.67 1469.23,1209.87 1469.82,1210.22 1470.4,1207.92 1470.99,1206.97 1471.57,1207.41 1472.16,1207.83 1472.75,1209.31 1473.33,1208.6 1473.92,1209.06 1474.51,1209.35 1475.09,1210.74 1475.68,1208.21 1476.27,1207.17 1476.85,1208.97 1477.44,1209.3 1478.03,1209.52 1478.61,1209.8 1479.2,1208.42 1479.78,1210.07 1480.37,1210.3 1480.96,1211.84 1481.54,1213.21 1482.13,1213.44 1482.72,1213.95 1483.3,1212.75 1483.89,1211.99 1484.48,1211.05 1485.06,1213.46 1485.65,1212.17 1486.24,1213.61 1486.82,1213.71 1487.41,1213.98 1487.99,1210.62 1488.58,1210.81 1489.17,1210.84 1489.75,1212.42 1490.34,1212.53 1490.93,1214.92 1491.51,1214.91 1492.1,1215.95 1492.69,1217.27 1493.27,1218.42 1493.86,1217.03 1494.45,1215.83 1495.03,1215.91 1495.62,1216.13 1496.2,1218.62 1496.79,1218.35 1497.38,1219.27 1497.96,1220.46 1498.55,1217.53 1499.14,1214.56 1499.72,1214.25 1500.31,1212.9 1500.9,1212.99 1501.48,1214.43 1502.07,1216.95 1502.65,1218.11 1503.24,1218.06 1503.83,1217.85 1504.41,1220.12 1505,1218.9 1505.59,1219.86 1506.17,1217.03 1506.76,1216.94 1507.35,1216.54 1507.93,1218.86 1508.52,1218.45 1509.11,1219.32 1509.69,1217.77 1510.28,1218.81 1510.86,1218.45 1511.45,1216.98 1512.04,1214.39 1512.62,1215.55 1513.21,1213.17 1513.8,1215.8 1514.38,1217.15 1514.97,1218.6 1515.56,1218.34 1516.14,1218.04 1516.73,1217.72 1517.32,1217.4 1517.9,1218.4 1518.49,1220.41 1519.07,1218.89 1519.66,1217.52 1520.25,1217.34 1520.83,1215.73 1521.42,1215.58 1522.01,1213.15 1522.59,1209.53 1523.18,1207.08 1523.77,1208.44 1524.35,1211.25 1524.94,1212.57 1525.52,1210.24 1526.11,1210.58 1526.7,1210.7 1527.28,1209.67 1527.87,1212.49 1528.46,1212.69 1529.04,1215.39 1529.63,1215.21 1530.22,1217.65 1530.8,1215.05 1531.39,1213.72 1531.98,1216.18 1532.56,1214.64 1533.15,1214.71 1533.73,1214.4 1534.32,1216.99 1534.91,1218.28 1535.49,1217.85 1536.08,1218.93 1536.67,1219.93 1537.25,1220.83 1537.84,1220.71 1538.43,1220.25 1539.01,1219 1539.6,1219.94 1540.19,1220.96 1540.77,1219.12 1541.36,1218.87 1541.94,1222.19 1542.53,1222.98 1543.12,1221.09 1543.7,1221.74 1544.29,1221.4 1544.88,1225.88 1545.46,1226.29 1546.05,1225.61 1546.64,1222.38 1547.22,1221.79 1547.81,1221.55 1548.4,1220.08 1548.98,1217.33 1549.57,1218.21 1550.15,1218.98 1550.74,1221.3 1551.33,1219.97 1551.91,1219.82 1552.5,1218.28 1553.09,1218.06 1553.67,1217.94 1554.26,1217.7 1554.85,1218.93 1555.43,1218.61 1556.02,1217.14 1556.6,1215.88 1557.19,1215.86 1557.78,1218.54 1558.36,1217.1 1558.95,1218.24 1559.54,1219.14 1560.12,1220.17 1560.71,1217.45 1561.3,1215.87 1561.88,1215.82 1562.47,1216.8 1563.06,1217.81 1563.64,1218.51 1564.23,1218.11 1564.81,1217.94 1565.4,1216.42 1565.99,1212.4 1566.57,1212.07 1567.16,1208.42 1567.75,1210.95 1568.33,1207.37 1568.92,1207.79 1569.51,1205.6 1570.09,1205.91 1570.68,1206.27 1571.27,1206.59 1571.85,1210.7 1572.44,1209.66 1573.02,1209.97 1573.61,1210.15 1574.2,1211.8 1574.78,1209.35 1575.37,1208.36 1575.96,1209.8 1576.54,1208.82 1577.13,1209.14 1577.72,1208.28 1578.3,1208.95 1578.89,1212.93 1579.47,1213.23 1580.06,1213.27 1580.65,1211.98 1581.23,1212.12 1581.82,1213.6 1582.41,1209.88 1582.99,1211.3 1583.58,1213.97 1584.17,1212.94 1584.75,1213.22 1585.34,1212.19 1585.93,1212.47 1586.51,1211.34 1587.1,1212.76 1587.68,1214.19 1588.27,1214.27 1588.86,1214.21 1589.44,1215.59 1590.03,1214.52 1590.62,1217.08 1591.2,1218.2 1591.79,1215.52 1592.38,1215.06 1592.96,1214.8 1593.55,1216.06 1594.14,1214.79 1594.72,1215.97 1595.31,1215.69 1595.89,1214.27 1596.48,1213.24 1597.07,1210.91 1597.65,1211.27 1598.24,1211.45 1598.83,1211.64 1599.41,1209.32 1600,1209.45 1600.59,1209.66 1601.17,1209.98 1601.76,1210.26 1602.34,1210.4 1602.93,1211.95 1603.52,1208.21 1604.1,1208.42 1604.69,1209.03 1605.28,1210.75 1605.86,1214.85 1606.45,1214.87 1607.04,1214.89 1607.62,1214.84 1608.21,1215.83 1608.8,1218.26 1609.38,1220.52 1609.97,1219.79 1610.55,1218.16 1611.14,1218.05 1611.73,1215.27 1612.31,1217.59 1612.9,1217.54 1613.49,1220.15 1614.07,1221.11 1614.66,1220.75 1615.25,1219.39 1615.83,1217.95 1616.42,1216.6 1617.01,1215.49 1617.59,1212.79 1618.18,1212.89 1618.76,1214.18 1619.35,1211.65 1619.94,1211.81 1620.52,1214.32 1621.11,1214.64 1621.7,1213.28 1622.28,1213.33 1622.87,1213.3 1623.46,1214.5 1624.04,1210.84 1624.63,1210.96 1625.22,1215.08 1625.8,1216.48 1626.39,1218.87 1626.97,1217.39 1627.56,1216.04 1628.15,1217.06 1628.73,1214.67 1629.32,1211.8 1629.91,1211.8 1630.49,1211.75 1631.08,1211.8 1631.67,1212 1632.25,1214.69 1632.84,1212.15 1633.42,1212.38 1634.01,1212.56 1634.6,1211.4 1635.18,1212.79 1635.77,1215.41 1636.36,1216.63 1636.94,1215.43 1637.53,1214.01 1638.12,1211.68 1638.7,1210.66 1639.29,1211.03 1639.88,1213.33 1640.46,1212.08 1641.05,1213.46 1641.63,1214.68 1642.22,1214.69 1642.81,1213.61 1643.39,1215.06 1643.98,1215.15 1644.57,1215.05 1645.15,1212.7 1645.74,1212.48 1646.33,1212.47 1646.91,1213.87 1647.5,1215.27 1648.09,1217.54 1648.67,1214.82 1649.26,1216.13 1649.84,1217.32 1650.43,1217.06 1651.02,1215.68 1651.6,1216.77 1652.19,1216.88 1652.78,1217.76 1653.36,1217.69 1653.95,1220.12 1654.54,1220.02 1655.12,1219.68 1655.71,1216.74 1656.29,1217.86 1656.88,1216.33 1657.47,1218.4 1658.05,1215.23 1658.64,1215.33 1659.23,1213.99 1659.81,1212.59 1660.4,1215.07 1660.99,1215 1661.57,1212.35 1662.16,1212.64 1662.75,1211.69 1663.33,1212.16 1663.92,1213.91 1664.5,1213.05 1665.09,1217.92 1665.68,1220.18 1666.26,1217.39 1666.85,1217.28 1667.44,1215.86 1668.02,1216.11 1668.61,1218.35 1669.2,1218 1669.78,1216.68 1670.37,1217.73 1670.96,1216.6 1671.54,1216.63 1672.13,1217.52 1672.71,1217.32 1673.3,1217.18 1673.89,1218.13 1674.47,1215.48 1675.06,1214.2 1675.65,1214.54 1676.23,1210.9 1676.82,1211 1677.41,1213.43 1677.99,1213.8 1678.58,1212.77 1679.17,1208.99 1679.75,1210.52 1680.34,1207.94 1680.92,1208.14 1681.51,1209.61 1682.1,1210.14 1682.68,1212.74 1683.27,1214.04 1683.86,1212.96 1684.44,1213.96 1685.03,1213.99 1685.62,1215.45 1686.2,1214.14 1686.79,1214.24 1687.37,1212.85 1687.96,1213.01 1688.55,1213.21 1689.13,1218.43 1689.72,1219.54 1690.31,1217.9 1690.89,1217.68 1691.48,1221.23 1692.07,1221.11 1692.65,1219.64 1693.24,1219.39 1693.83,1217.83 1694.41,1218.96 1695,1218.54 1695.58,1215.88 1696.17,1214.81 1696.76,1214.63 1697.34,1213.4 1697.93,1214.63 1698.52,1212.17 1699.1,1213.5 1699.69,1213.39 1700.28,1214.52 1700.86,1214.92 1701.45,1213.64 1702.04,1214.85 1702.62,1214.75 1703.21,1214.79 1703.79,1213.44 1704.38,1212.13 1704.97,1213.33 1705.55,1213.68 1706.14,1213.64 1706.73,1214.7 1707.31,1214.57 1707.9,1215.67 1708.49,1216.6 1709.07,1218.84 1709.66,1218.75 1710.24,1217.13 1710.83,1216.9 1711.42,1213.97 1712,1213.88 1712.59,1215.1 1713.18,1215.34 1713.76,1212.6 1714.35,1213.94 1714.94,1212.75 1715.52,1212.73 1716.11,1211.67 1716.7,1208.52 1717.28,1209.01 1717.87,1210.6 1718.45,1212.03 1719.04,1213.55 1719.63,1212.47 1720.21,1212.6 1720.8,1215.35 1721.39,1216.48 1721.97,1215.24 1722.56,1216.41 1723.15,1216.22 1723.73,1217.2 1724.32,1215.71 1724.91,1216.97 1725.49,1216.83 1726.08,1216.61 1726.66,1218.65 1727.25,1214.72 1727.84,1213.38 1728.42,1213.07 1729.01,1206.73 1729.6,1206.05 1730.18,1206.34 1730.77,1206.81 1731.36,1207.2 1731.94,1208.8 1732.53,1210.3 1733.11,1212.75 1733.7,1211.77 1734.29,1210.63 1734.87,1208.12 1735.46,1208.37 1736.05,1207.54 1736.63,1206.75 1737.22,1207.43 1737.81,1207.69 1738.39,1207.81 1738.98,1210.44 1739.57,1214.29 1740.15,1213.08 1740.74,1215.54 1741.32,1219.32 1741.91,1219.18 1742.5,1218.61 1743.08,1221.21 1743.67,1220.74 1744.26,1221.54 1744.84,1222.12 1745.43,1220.46 1746.02,1219.07 1746.6,1218.73 1747.19,1216.06 1747.78,1215.92 1748.36,1217.15 1748.95,1218.21 1749.53,1218.1 1750.12,1215.58 1750.71,1216.74 1751.29,1215.5 1751.88,1212.72 1752.47,1215.22 1753.05,1212.9 1753.64,1211.74 1754.23,1209.25 1754.81,1208.14 1755.4,1205.91 1755.99,1206.5 1756.57,1208.16 1757.16,1206 1757.74,1206.42 1758.33,1204.4 1758.92,1206.07 1759.5,1209.15 1760.09,1209.17 1760.68,1209.29 1761.26,1209.71 1761.85,1209.9 1762.44,1207.56 1763.02,1210.26 1763.61,1209.29 1764.19,1211.95 1764.78,1213.36 1765.37,1212.02 1765.95,1213.43 1766.54,1212.13 1767.13,1213.72 1767.71,1214.01 1768.3,1216.22 1768.89,1218.46 1769.47,1220.84 1770.06,1219.12 1770.65,1220.1 1771.23,1218.27 1771.82,1219.2 1772.4,1220.12 1772.99,1222.5 1773.58,1222.16 1774.16,1222.04 1774.75,1218.26 1775.34,1219.24 1775.92,1220.09 1776.51,1218.61 1777.1,1218.18 1777.68,1217.85 1778.27,1219.28 1778.86,1218.87 1779.44,1216.17 1780.03,1216.2 1780.61,1213.75 1781.2,1213.66 1781.79,1211.41 1782.37,1211.63 1782.96,1210.34 1783.55,1210.64 1784.13,1211.88 1784.72,1214.48 1785.31,1213.22 1785.89,1214.49 1786.48,1214.37 1787.06,1213.15 1787.65,1213.51 1788.24,1213.3 1788.82,1215.83 1789.41,1214.33 1790,1216.77 1790.58,1215.38 1791.17,1214.09 1791.76,1215.4 1792.34,1213.02 1792.93,1208.97 1793.52,1209.24 1794.1,1209.63 1794.69,1211.25 1795.27,1213.67 1795.86,1213.84 1796.45,1211.38 1797.03,1211.48 1797.62,1212.77 1798.21,1211.5 1798.79,1214.44 1799.38,1214.48 1799.97,1215.8 1800.55,1218.3 1801.14,1218.25 1801.73,1215.63 1802.31,1216.86 1802.9,1215.56 1803.48,1214.23 1804.07,1213.03 1804.66,1212.95 1805.24,1211.81 1805.83,1213.18 1806.42,1216.88 1807,1213.18 1807.59,1214.53 1808.18,1214.43 1808.76,1214.27 1809.35,1218.2 1809.94,1216.94 1810.52,1215.41 1811.11,1215.42 1811.69,1216.68 1812.28,1218.91 1812.87,1217.17 1813.45,1217.23 1814.04,1217.2 1814.63,1217.08 1815.21,1214.4 1815.8,1214.6 1816.39,1217.08 1816.97,1219.33 1817.56,1219.27 1818.14,1217.78 1818.73,1217.41 1819.32,1217.43 1819.9,1216.1 1820.49,1216.27 1821.08,1214.83 1821.66,1213.17 1822.25,1213.53 1822.84,1212.23 1823.42,1213.57 1824.01,1212.8 1824.6,1210.63 1825.18,1214.54 1825.77,1213.22 1826.35,1214.28 1826.94,1214.52 1827.53,1213.29 1828.11,1209.73 1828.7,1211.43 1829.29,1210.35 1829.87,1210.47 1830.46,1210.87 1831.05,1211.19 1831.63,1211.22 1832.22,1212.29 1832.81,1209.75 1833.39,1209.99 1833.98,1211.61 1834.56,1211.61 1835.15,1211.58 1835.74,1210.47 1836.32,1210.32 1836.91,1210.66 1837.5,1210.96 1838.08,1211.27 1838.67,1215.16 1839.26,1216.26 1839.84,1216.2 1840.43,1213.29 1841.01,1213.42 1841.6,1216.14 1842.19,1216.55 1842.77,1216.36 1843.36,1215.21 1843.95,1213.8 1844.53,1210.18 1845.12,1209.24 1845.71,1211.02 1846.29,1212.35 1846.88,1212.33 1847.47,1212.59 1848.05,1211.72 1848.64,1212.22 1849.22,1214.84 1849.81,1214.83 1850.4,1210.99 1850.98,1213.64 1851.57,1217.3 1852.16,1213.38 1852.74,1212.04 1853.33,1213.46 1853.92,1212.45 1854.5,1216.27 1855.09,1212.54 1855.68,1217.32 1856.26,1214.83 1856.85,1214.63 1857.43,1215.88 1858.02,1215.8 1858.61,1210.76 1859.19,1211.27 1859.78,1211.45 1860.37,1211.75 1860.95,1210.54 1861.54,1211.96 1862.13,1212.03 1862.71,1213.38 1863.3,1217.28 1863.88,1218.27 1864.47,1219.33 1865.06,1219.07 1865.64,1218.68 1866.23,1219.69 1866.82,1218.47 1867.4,1216.93 1867.99,1220.52 1868.58,1218.85 1869.16,1217.52 1869.75,1216.28 1870.34,1217.65 1870.92,1219.11 1871.51,1220.1 1872.09,1221.06 1872.68,1222.05 1873.27,1222.81 1873.85,1221.11 1874.44,1220.87 1875.03,1217.73 1875.61,1218.98 1876.2,1219.96 1876.79,1221.09 1877.37,1222.16 1877.96,1224.05 1878.55,1224.81 1879.13,1223 1879.72,1221.3 1880.3,1219.82 1880.89,1219.25 1881.48,1220.02 1882.06,1219.74 1882.65,1218.19 1883.24,1217.97 1883.82,1216.56 1884.41,1214.1 1885,1216.54 1885.58,1217.99 1886.17,1217.75 1886.76,1220.07 1887.34,1219.68 1887.93,1220.59 1888.51,1220.17 1889.1,1215.84 1889.69,1214.37 1890.27,1214.06 1890.86,1214.01 1891.45,1212.51 1892.03,1212.48 1892.62,1211.3 1893.21,1215.12 1893.79,1215.12 1894.38,1216.1 1894.96,1215.92 1895.55,1216.91 1896.14,1214.06 1896.72,1214.09 1897.31,1214.47 1897.9,1216.87 1898.48,1219.13 1899.07,1221.22 1899.66,1222.11 1900.24,1218.18 1900.83,1218.27 1901.42,1218.24 1902,1218.06 1902.59,1217.95 1903.17,1215.42 1903.76,1217.73 1904.35,1216.42 1904.93,1217.28 1905.52,1217.28 1906.11,1218.19 1906.69,1215.52 1907.28,1214.24 1907.87,1211.94 1908.45,1209.47 1909.04,1209.44 1909.63,1211.12 1910.21,1211.04 1910.8,1211.13 1911.38,1212.17 1911.97,1213.27 1912.56,1213.33 1913.14,1212.21 1913.73,1212.45 1914.32,1212.52 1914.9,1209.87 1915.49,1207.77 1916.08,1207.12 1916.66,1207.43 1917.25,1205.32 1917.83,1207.06 1918.42,1206.37 1919.01,1205.54 1919.59,1206.87 1920.18,1208.64 1920.77,1209.1 1921.35,1209.37 1921.94,1208.33 1922.53,1211.03 1923.11,1210.05 1923.7,1212.95 1924.29,1214.33 1924.87,1212.81 1925.46,1214.1 1926.04,1216.37 1926.63,1217.36 1927.22,1217.05 1927.8,1216.76 1928.39,1215.56 1928.98,1210.64 1929.56,1209.57 1930.15,1208.71 1930.74,1210.29 1931.32,1212.28 1931.91,1213.27 1932.5,1213.15 1933.08,1211.77 1933.67,1213.32 1934.25,1213.32 1934.84,1210.79 1935.43,1209.72 1936.01,1209.92 1936.6,1208.81 1937.19,1209.14 1937.77,1208.35 1938.36,1204.98 1938.95,1209.15 1939.53,1213.01 1940.12,1215.33 1940.71,1215.28 1941.29,1216.42 1941.88,1216.21 1942.46,1214.97 1943.05,1215.27 1943.64,1212.7 1944.22,1212.63 1944.81,1212.83 1945.4,1210.31 1945.98,1211.58 1946.57,1211.84 1947.16,1211.86 1947.74,1210.57 1948.33,1209.6 1948.91,1208.7 1949.5,1210.12 1950.09,1211.68 1950.67,1210.38 1951.26,1209.56 1951.85,1211.13 1952.43,1213.92 1953.02,1217.4 1953.61,1216.73 1954.19,1216.39 1954.78,1215.01 1955.37,1213.69 1955.95,1214.57 1956.54,1213.35 1957.12,1215.92 1957.71,1218.28 1958.3,1220.67 1958.88,1219.05 1959.47,1218.84 1960.06,1216.1 1960.64,1214.75 1961.23,1213.71 1961.82,1210.3 1962.4,1209.33 1962.99,1210.92 1963.58,1209.75 1964.16,1211.27 1964.75,1211.47 1965.33,1211.87 1965.92,1213.36 1966.51,1217 1967.09,1213.04 1967.68,1210.66 1968.27,1209.52 1968.85,1208.36 1969.44,1211.31 1970.03,1212.84 1970.61,1212.86 1971.2,1214.22 1971.78,1213.01 1972.37,1215.86 1972.96,1216.97 1973.54,1218.24 1974.13,1215.4 1974.72,1213.95 1975.3,1215.05 1975.89,1216.46 1976.48,1217.48 1977.06,1218.44 1977.65,1222.21 1978.24,1220.55 1978.82,1220.34 1979.41,1222.59 1979.99,1222.09 1980.58,1221.81 1981.17,1223.83 1981.75,1222.03 1982.34,1221.61 1982.93,1221.24 1983.51,1222.28 1984.1,1222.1 1984.69,1219.12 1985.27,1217.65 1985.86,1216.12 1986.45,1217.42 1987.03,1217.15 1987.62,1216.12 1988.2,1216.12 1988.79,1215.98 1989.38,1214.65 1989.96,1213.33 1990.55,1208.3 1991.14,1207.45 1991.72,1206.51 1992.31,1206.93 1992.9,1204.98 1993.48,1207.99 1994.07,1208.14 1994.65,1208.35 1995.24,1211.4 1995.83,1214.36 1996.41,1215.87 1997,1215.56 1997.59,1216.89 1998.17,1216.58 1998.76,1215.15 1999.35,1214.04 1999.93,1212.85 2000.52,1215.48 2001.11,1216.93 2001.69,1215.39 2002.28,1215.23 2002.86,1214.07 2003.45,1214.21 2004.04,1214.21 2004.62,1214.31 2005.21,1214.31 2005.8,1217.12 2006.38,1218.1 2006.97,1216.56 2007.56,1216.43 2008.14,1215.41 2008.73,1213.03 2009.32,1213.11 2009.9,1213.17 2010.49,1214.63 2011.07,1214.73 2011.66,1213.35 2012.25,1217.15 2012.83,1218.09 2013.42,1219.18 2014.01,1217.68 2014.59,1218.7 2015.18,1220.58 2015.77,1221.3 2016.35,1219.84 2016.94,1221.89 2017.53,1221.36 2018.11,1221.18 2018.7,1216.6 2019.28,1216.4 2019.87,1212.39 2020.46,1212.52 2021.04,1213.73 2021.63,1212.4 2022.22,1212.62 2022.8,1212.78 2023.39,1211.38 2023.98,1210.38 2024.56,1209.09 2025.15,1209.41 2025.73,1209.65 2026.32,1209.6 2026.91,1207.32 2027.49,1206.46 2028.08,1213.03 2028.67,1213.14 2029.25,1214.62 2029.84,1214.63 2030.43,1215.71 2031.01,1217.84 2031.6,1217.81 2032.19,1217.58 2032.77,1213.71 2033.36,1214 2033.94,1213.87 2034.53,1212.8 2035.12,1211.78 2035.7,1210.8 2036.29,1210.02 2036.88,1214.05 2037.46,1214.26 2038.05,1211.79 2038.64,1213.12 2039.22,1212.11 2039.81,1215.01 2040.4,1213.81 2040.98,1213.88 2041.57,1215.52 2042.15,1213.97 2042.74,1214.11 2043.33,1211.69 2043.91,1213.02 2044.5,1215.64 2045.09,1213.22 2045.67,1213.17 2046.26,1213.27 2046.85,1214.7 2047.43,1214.71 2048.02,1211.98 2048.6,1210.55 2049.19,1210.79 2049.78,1210.48 2050.36,1211.97 2050.95,1212.29 2051.54,1208.58 2052.12,1209.06 2052.71,1206.98 2053.3,1208.46 2053.88,1210.12 2054.47,1210.18 2055.06,1214.11 2055.64,1213.99 2056.23,1214.26 2056.81,1212.91 2057.4,1214.22 2057.99,1217.87 2058.57,1217.79 2059.16,1217.58 2059.75,1217.36 2060.33,1219.6 2060.92,1218.03 2061.51,1216.83 2062.09,1215.21 2062.68,1215.05 2063.27,1213.88 2063.85,1211.6 2064.44,1210.59 2065.02,1210.72 2065.61,1212.04 2066.2,1213.13 2066.78,1211.93 2067.37,1209.49 2067.96,1208.76 2068.54,1209.41 2069.13,1208.62 2069.72,1210.29 2070.3,1211.66 2070.89,1211.77 2071.48,1211.69 2072.06,1210.41 2072.65,1208.2 2073.23,1207.29 2073.82,1207.71 2074.41,1208.06 2074.99,1208.24 2075.58,1208.56 2076.17,1212.98 2076.75,1212.93 2077.34,1218.09 2077.93,1219.06 2078.51,1217.61 2079.1,1217.18 2079.68,1218.08 2080.27,1215.53 2080.86,1211.73 2081.44,1213.07 2082.03,1213 2082.62,1215.37 2083.2,1214 2083.79,1217.79 2084.38,1218.97 2084.96,1220.08 2085.55,1220.86 2086.14,1219.42 2086.72,1222.93 2087.31,1220.16 2087.89,1219.44 2088.48,1219.22 2089.07,1217.68 2089.65,1216.33 2090.24,1216.06 2090.83,1216.9 2091.41,1218.18 2092,1216.59 2092.59,1216.37 2093.17,1216.39 2093.76,1214.84 2094.35,1216.28 2094.93,1216.23 2095.52,1215.97 2096.1,1217.12 2096.69,1217.21 2097.28,1216.88 2097.86,1213.03 2098.45,1214.38 2099.04,1214.39 2099.62,1214.37 2100.21,1210.95 2100.8,1211.36 2101.38,1208.98 2101.97,1211.69 2102.55,1211.55 2103.14,1209.48 2103.73,1210.87 2104.31,1206.45 2104.9,1205.64 2105.49,1202.29 2106.07,1203.09 2106.66,1203.84 2107.25,1205.85 2107.83,1205.25 2108.42,1204.23 2109.01,1206.07 2109.59,1206.36 2110.18,1205.7 2110.76,1204.78 2111.35,1208.06 2111.94,1209.43 2112.52,1209.62 2113.11,1211.16 2113.7,1211.49 2114.28,1211.83 2114.87,1213.37 2115.46,1214.65 2116.04,1214.57 2116.63,1214.38 2117.22,1215.74 2117.8,1217.01 2118.39,1215.58 2118.97,1215.66 2119.56,1217.92 2120.15,1217.48 2120.73,1218.61 2121.32,1216.04 2121.91,1213.46 2122.49,1213.68 2123.08,1216.19 2123.67,1217.3 2124.25,1217.34 2124.84,1218.45 2125.42,1218.07 2126.01,1219.21 2126.6,1222.65 2127.18,1222.19 2127.77,1221.77 2128.36,1220.37 2128.94,1220 2129.53,1219.87 2130.12,1219.71 2130.7,1219.25 2131.29,1221.64 2131.88,1221.1 2132.46,1222.23 2133.05,1219.48 2133.63,1220.57 2134.22,1221.54 2134.81,1221.04 2135.39,1220.67 2135.98,1220.33 2136.57,1220.1 2137.15,1221.05 2137.74,1220.73 2138.33,1220.49 2138.91,1221.32 2139.5,1218.41 2140.09,1215.87 2140.67,1215.62 2141.26,1210.34 2141.84,1207.94 2142.43,1208.33 2143.02,1207.37 2143.6,1206.54 2144.19,1205.72 2144.78,1203.73 2145.36,1205.76 2145.95,1206.17 2146.54,1206.58 2147.12,1208.3 2147.71,1211.29 2148.3,1212.97 2148.88,1211.95 2149.47,1212.17 2150.05,1211.22 2150.64,1214.99 2151.23,1211.37 2151.81,1212.59 2152.4,1212.77 2152.99,1217.75 2153.57,1217.46 2154.16,1216.3 2154.75,1216.11 2155.33,1214.47 2155.92,1214.72 2156.5,1214.77 2157.09,1213.73 2157.68,1212.62 2158.26,1213.63 \"/>\n<path clip-path=\"url(#clip522)\" d=\"M986.025 1214.81 L986.612 1214.81 L987.198 1214.81 L987.785 1214.81 L988.371 1214.81 L988.957 1214.81 L989.544 1214.81 L990.13 1214.81 L990.717 1214.81 L991.303 1214.81 L991.889 1214.81 L992.476 1214.81 L993.062 1214.81 L993.649 1214.81 L994.235 1214.81 L994.822 1214.81 L995.408 1214.81 L995.994 1214.81 L996.581 1214.81 L997.167 1214.81 L997.754 1214.81 L998.34 1214.81 L998.926 1214.81 L999.513 1214.81 L1000.1 1214.81 L1000.69 1214.81 L1001.27 1214.81 L1001.86 1214.81 L1002.44 1214.81 L1003.03 1214.81 L1003.62 1214.81 L1004.2 1214.81 L1004.79 1214.81 L1005.38 1214.81 L1005.96 1214.81 L1006.55 1214.81 L1007.14 1214.81 L1007.72 1214.81 L1008.31 1214.81 L1008.9 1214.81 L1009.48 1214.81 L1010.07 1214.81 L1010.65 1214.81 L1011.24 1214.81 L1011.83 1214.81 L1012.41 1214.81 L1013 1214.81 L1013.59 1214.81 L1014.17 1214.81 L1014.76 1214.81 L1015.35 1214.81 L1015.93 1214.81 L1016.52 1214.81 L1017.11 1214.81 L1017.69 1214.81 L1018.28 1214.81 L1018.86 1214.81 L1019.45 1214.81 L1020.04 1214.81 L1020.62 1214.81 L1021.21 1214.81 L1021.8 1214.81 L1022.38 1214.81 L1022.97 1214.81 L1023.56 1214.81 L1024.14 1214.81 L1024.73 1214.81 L1025.32 1214.81 L1025.9 1214.81 L1026.49 1214.81 L1027.07 1214.81 L1027.66 1214.81 L1028.25 1214.81 L1028.83 1214.81 L1029.42 1214.81 L1030.01 1214.81 L1030.59 1214.81 L1031.18 1214.81 L1031.77 1214.81 L1032.35 1214.81 L1032.94 1214.81 L1033.52 1214.81 L1034.11 1214.81 L1034.7 1214.81 L1035.28 1214.81 L1035.87 1214.81 L1036.46 1214.81 L1037.04 1214.81 L1037.63 1214.81 L1038.22 1214.81 L1038.8 1214.81 L1039.39 1214.81 L1039.98 1214.81 L1040.56 1214.81 L1041.15 1214.81 L1041.73 1214.81 L1042.32 1214.81 L1042.91 1214.81 L1043.49 1214.81 L1044.08 1214.81 L1044.67 1214.81 L1045.25 1214.81 L1045.84 1214.81 L1046.43 1214.81 L1047.01 1214.81 L1047.6 1214.81 L1048.19 1214.81 L1048.77 1214.81 L1049.36 1214.81 L1049.94 1214.81 L1050.53 1214.81 L1051.12 1214.81 L1051.7 1214.81 L1052.29 1214.81 L1052.88 1214.81 L1053.46 1214.81 L1054.05 1214.81 L1054.64 1214.81 L1055.22 1214.81 L1055.81 1214.81 L1056.39 1214.81 L1056.98 1214.81 L1057.57 1214.81 L1058.15 1214.81 L1058.74 1214.81 L1059.33 1214.81 L1059.91 1214.81 L1060.5 1214.81 L1061.09 1214.81 L1061.67 1214.81 L1062.26 1214.81 L1062.85 1214.81 L1063.43 1214.81 L1064.02 1214.81 L1064.6 1214.81 L1065.19 1214.81 L1065.78 1214.81 L1066.36 1214.81 L1066.95 1214.81 L1067.54 1214.81 L1068.12 1214.81 L1068.71 1214.81 L1069.3 1214.81 L1069.88 1214.81 L1070.47 1214.81 L1071.06 1214.81 L1071.64 1214.81 L1072.23 1214.81 L1072.81 1214.81 L1073.4 1214.81 L1073.99 1214.81 L1074.57 1214.81 L1075.16 1214.81 L1075.75 1214.81 L1076.33 1214.81 L1076.92 1214.81 L1077.51 1214.81 L1078.09 1214.81 L1078.68 1214.81 L1079.26 1214.81 L1079.85 1214.81 L1080.44 1214.81 L1081.02 1214.81 L1081.61 1214.81 L1082.2 1214.81 L1082.78 1214.81 L1083.37 1214.81 L1083.96 1214.81 L1084.54 1214.81 L1085.13 1214.81 L1085.72 1214.81 L1086.3 1214.81 L1086.89 1214.81 L1087.47 1214.81 L1088.06 1214.81 L1088.65 1214.81 L1089.23 1214.81 L1089.82 1214.81 L1090.41 1214.81 L1090.99 1214.81 L1091.58 1214.81 L1092.17 1214.81 L1092.75 1214.81 L1093.34 1214.81 L1093.93 1214.81 L1094.51 1214.81 L1095.1 1214.81 L1095.68 1214.81 L1096.27 1214.81 L1096.86 1214.81 L1097.44 1214.81 L1098.03 1214.81 L1098.62 1214.81 L1099.2 1214.81 L1099.79 1214.81 L1100.38 1214.81 L1100.96 1214.81 L1101.55 1214.81 L1102.14 1214.81 L1102.72 1214.81 L1103.31 1214.81 L1103.89 1214.81 L1104.48 1214.81 L1105.07 1214.81 L1105.65 1214.81 L1106.24 1214.81 L1106.83 1214.81 L1107.41 1214.81 L1108 1214.81 L1108.59 1214.81 L1109.17 1214.81 L1109.76 1214.81 L1110.34 1214.81 L1110.93 1214.81 L1111.52 1214.81 L1112.1 1214.81 L1112.69 1214.81 L1113.28 1214.81 L1113.86 1214.81 L1114.45 1214.81 L1115.04 1214.81 L1115.62 1214.81 L1116.21 1214.81 L1116.8 1214.81 L1117.38 1214.81 L1117.97 1214.81 L1118.55 1214.81 L1119.14 1214.81 L1119.73 1214.81 L1120.31 1214.81 L1120.9 1214.81 L1121.49 1214.81 L1122.07 1214.81 L1122.66 1214.81 L1123.25 1214.81 L1123.83 1214.81 L1124.42 1214.81 L1125.01 1214.81 L1125.59 1214.81 L1126.18 1214.81 L1126.76 1214.81 L1127.35 1214.81 L1127.94 1214.81 L1128.52 1214.81 L1129.11 1214.81 L1129.7 1214.81 L1130.28 1214.81 L1130.87 1214.81 L1131.46 1214.81 L1132.04 1214.81 L1132.63 1214.81 L1133.21 1214.81 L1133.8 1214.81 L1134.39 1214.81 L1134.97 1214.81 L1135.56 1214.81 L1136.15 1214.81 L1136.73 1214.81 L1137.32 1214.81 L1137.91 1214.81 L1138.49 1214.81 L1139.08 1214.81 L1139.67 1214.81 L1140.25 1214.81 L1140.84 1214.81 L1141.42 1214.81 L1142.01 1214.81 L1142.6 1214.81 L1143.18 1214.81 L1143.77 1214.81 L1144.36 1214.81 L1144.94 1214.81 L1145.53 1214.81 L1146.12 1214.81 L1146.7 1214.81 L1147.29 1214.81 L1147.88 1214.81 L1148.46 1214.81 L1149.05 1214.81 L1149.63 1214.81 L1150.22 1214.81 L1150.81 1214.81 L1151.39 1214.81 L1151.98 1214.81 L1152.57 1214.81 L1153.15 1214.81 L1153.74 1214.81 L1154.33 1214.81 L1154.91 1214.81 L1155.5 1214.81 L1156.09 1214.81 L1156.67 1214.81 L1157.26 1214.81 L1157.84 1214.81 L1158.43 1214.81 L1159.02 1214.81 L1159.6 1214.81 L1160.19 1214.81 L1160.78 1214.81 L1161.36 1214.81 L1161.95 1214.81 L1162.54 1214.81 L1163.12 1214.81 L1163.71 1214.81 L1164.29 1214.81 L1164.88 1214.81 L1165.47 1214.81 L1166.05 1214.81 L1166.64 1214.81 L1167.23 1214.81 L1167.81 1214.81 L1168.4 1214.81 L1168.99 1214.81 L1169.57 1214.81 L1170.16 1214.81 L1170.75 1214.81 L1171.33 1214.81 L1171.92 1214.81 L1172.5 1214.81 L1173.09 1214.81 L1173.68 1214.81 L1174.26 1214.81 L1174.85 1214.81 L1175.44 1214.81 L1176.02 1214.81 L1176.61 1214.81 L1177.2 1214.81 L1177.78 1214.81 L1178.37 1214.81 L1178.96 1214.81 L1179.54 1214.81 L1180.13 1214.81 L1180.71 1214.81 L1181.3 1214.81 L1181.89 1214.81 L1182.47 1214.81 L1183.06 1214.81 L1183.65 1214.81 L1184.23 1214.81 L1184.82 1214.81 L1185.41 1214.81 L1185.99 1214.81 L1186.58 1214.81 L1187.16 1214.81 L1187.75 1214.81 L1188.34 1214.81 L1188.92 1214.81 L1189.51 1214.81 L1190.1 1214.81 L1190.68 1214.81 L1191.27 1214.81 L1191.86 1214.81 L1192.44 1214.81 L1193.03 1214.81 L1193.62 1214.81 L1194.2 1214.81 L1194.79 1214.81 L1195.37 1214.81 L1195.96 1214.81 L1196.55 1214.81 L1197.13 1214.81 L1197.72 1214.81 L1198.31 1214.81 L1198.89 1214.81 L1199.48 1214.81 L1200.07 1214.81 L1200.65 1214.81 L1201.24 1214.81 L1201.83 1214.81 L1202.41 1214.81 L1203 1214.81 L1203.58 1214.81 L1204.17 1214.81 L1204.76 1214.81 L1205.34 1214.81 L1205.93 1214.81 L1206.52 1214.81 L1207.1 1214.81 L1207.69 1214.81 L1208.28 1214.81 L1208.86 1214.81 L1209.45 1214.81 L1210.03 1214.81 L1210.62 1214.81 L1211.21 1214.81 L1211.79 1214.81 L1212.38 1214.81 L1212.97 1214.81 L1213.55 1214.81 L1214.14 1214.81 L1214.73 1214.81 L1215.31 1214.81 L1215.9 1214.81 L1216.49 1214.81 L1217.07 1214.81 L1217.66 1214.81 L1218.24 1214.81 L1218.83 1214.81 L1219.42 1214.81 L1220 1214.81 L1220.59 1214.81 L1221.18 1214.81 L1221.76 1214.81 L1222.35 1214.81 L1222.94 1214.81 L1223.52 1214.81 L1224.11 1214.81 L1224.7 1214.81 L1225.28 1214.81 L1225.87 1214.81 L1226.45 1214.81 L1227.04 1214.81 L1227.63 1214.81 L1228.21 1214.81 L1228.8 1214.81 L1229.39 1214.81 L1229.97 1214.81 L1230.56 1214.81 L1231.15 1214.81 L1231.73 1214.81 L1232.32 1214.81 L1232.91 1214.81 L1233.49 1214.81 L1234.08 1214.81 L1234.66 1214.81 L1235.25 1214.81 L1235.84 1214.81 L1236.42 1214.81 L1237.01 1214.81 L1237.6 1214.81 L1238.18 1214.81 L1238.77 1214.81 L1239.36 1214.81 L1239.94 1214.81 L1240.53 1214.81 L1241.11 1214.81 L1241.7 1214.81 L1242.29 1214.81 L1242.87 1214.81 L1243.46 1214.81 L1244.05 1214.81 L1244.63 1214.81 L1245.22 1214.81 L1245.81 1214.81 L1246.39 1214.81 L1246.98 1214.81 L1247.57 1214.81 L1248.15 1214.81 L1248.74 1214.81 L1249.32 1214.81 L1249.91 1214.81 L1250.5 1214.81 L1251.08 1214.81 L1251.67 1214.81 L1252.26 1214.81 L1252.84 1214.81 L1253.43 1214.81 L1254.02 1214.81 L1254.6 1214.81 L1255.19 1214.81 L1255.78 1214.81 L1256.36 1214.81 L1256.95 1214.81 L1257.53 1214.81 L1258.12 1214.81 L1258.71 1214.81 L1259.29 1214.81 L1259.88 1214.81 L1260.47 1214.81 L1261.05 1214.81 L1261.64 1214.81 L1262.23 1214.81 L1262.81 1214.81 L1263.4 1214.81 L1263.98 1214.81 L1264.57 1214.81 L1265.16 1214.81 L1265.74 1214.81 L1266.33 1214.81 L1266.92 1214.81 L1267.5 1214.81 L1268.09 1214.81 L1268.68 1214.81 L1269.26 1214.81 L1269.85 1214.81 L1270.44 1214.81 L1271.02 1214.81 L1271.61 1214.81 L1272.19 1214.81 L1272.78 1214.81 L1273.37 1214.81 L1273.95 1214.81 L1274.54 1214.81 L1275.13 1214.81 L1275.71 1214.81 L1276.3 1214.81 L1276.89 1214.81 L1277.47 1214.81 L1278.06 1214.81 L1278.65 1214.81 L1279.23 1214.81 L1279.82 1214.81 L1280.4 1214.81 L1280.99 1214.81 L1281.58 1214.81 L1282.16 1214.81 L1282.75 1214.81 L1283.34 1214.81 L1283.92 1214.81 L1284.51 1214.81 L1285.1 1214.81 L1285.68 1214.81 L1286.27 1214.81 L1286.86 1214.81 L1287.44 1214.81 L1288.03 1214.81 L1288.61 1214.81 L1289.2 1214.81 L1289.79 1214.81 L1290.37 1214.81 L1290.96 1214.81 L1291.55 1214.81 L1292.13 1214.81 L1292.72 1214.81 L1293.31 1214.81 L1293.89 1214.81 L1294.48 1214.81 L1295.06 1214.81 L1295.65 1214.81 L1296.24 1214.81 L1296.82 1214.81 L1297.41 1214.81 L1298 1214.81 L1298.58 1214.81 L1299.17 1214.81 L1299.76 1214.81 L1300.34 1214.81 L1300.93 1214.81 L1301.52 1214.81 L1302.1 1214.81 L1302.69 1214.81 L1303.27 1214.81 L1303.86 1214.81 L1304.45 1214.81 L1305.03 1214.81 L1305.62 1214.81 L1306.21 1214.81 L1306.79 1214.81 L1307.38 1214.81 L1307.97 1214.81 L1308.55 1214.81 L1309.14 1214.81 L1309.73 1214.81 L1310.31 1214.81 L1310.9 1214.81 L1311.48 1214.81 L1312.07 1214.81 L1312.66 1214.81 L1313.24 1214.81 L1313.83 1214.81 L1314.42 1214.81 L1315 1214.81 L1315.59 1214.81 L1316.18 1214.81 L1316.76 1214.81 L1317.35 1214.81 L1317.93 1214.81 L1318.52 1214.81 L1319.11 1214.81 L1319.69 1214.81 L1320.28 1214.81 L1320.87 1214.81 L1321.45 1214.81 L1322.04 1214.81 L1322.63 1214.81 L1323.21 1214.81 L1323.8 1214.81 L1324.39 1214.81 L1324.97 1214.81 L1325.56 1214.81 L1326.14 1214.81 L1326.73 1214.81 L1327.32 1214.81 L1327.9 1214.81 L1328.49 1214.81 L1329.08 1214.81 L1329.66 1214.81 L1330.25 1214.81 L1330.84 1214.81 L1331.42 1214.81 L1332.01 1214.81 L1332.6 1214.81 L1333.18 1214.81 L1333.77 1214.81 L1334.35 1214.81 L1334.94 1214.81 L1335.53 1214.81 L1336.11 1214.81 L1336.7 1214.81 L1337.29 1214.81 L1337.87 1214.81 L1338.46 1214.81 L1339.05 1214.81 L1339.63 1214.81 L1340.22 1214.81 L1340.8 1214.81 L1341.39 1214.81 L1341.98 1214.81 L1342.56 1214.81 L1343.15 1214.81 L1343.74 1214.81 L1344.32 1214.81 L1344.91 1214.81 L1345.5 1214.81 L1346.08 1214.81 L1346.67 1214.81 L1347.26 1214.81 L1347.84 1214.81 L1348.43 1214.81 L1349.01 1214.81 L1349.6 1214.81 L1350.19 1214.81 L1350.77 1214.81 L1351.36 1214.81 L1351.95 1214.81 L1352.53 1214.81 L1353.12 1214.81 L1353.71 1214.81 L1354.29 1214.81 L1354.88 1214.81 L1355.47 1214.81 L1356.05 1214.81 L1356.64 1214.81 L1357.22 1214.81 L1357.81 1214.81 L1358.4 1214.81 L1358.98 1214.81 L1359.57 1214.81 L1360.16 1214.81 L1360.74 1214.81 L1361.33 1214.81 L1361.92 1214.81 L1362.5 1214.81 L1363.09 1214.81 L1363.68 1214.81 L1364.26 1214.81 L1364.85 1214.81 L1365.43 1214.81 L1366.02 1214.81 L1366.61 1214.81 L1367.19 1214.81 L1367.78 1214.81 L1368.37 1214.81 L1368.95 1214.81 L1369.54 1214.81 L1370.13 1214.81 L1370.71 1214.81 L1371.3 1214.81 L1371.88 1214.81 L1372.47 1214.81 L1373.06 1214.81 L1373.64 1214.81 L1374.23 1214.81 L1374.82 1214.81 L1375.4 1214.81 L1375.99 1214.81 L1376.58 1214.81 L1377.16 1214.81 L1377.75 1214.81 L1378.34 1214.81 L1378.92 1214.81 L1379.51 1214.81 L1380.09 1214.81 L1380.68 1214.81 L1381.27 1214.81 L1381.85 1214.81 L1382.44 1214.81 L1383.03 1214.81 L1383.61 1214.81 L1384.2 1214.81 L1384.79 1214.81 L1385.37 1214.81 L1385.96 1214.81 L1386.55 1214.81 L1387.13 1214.81 L1387.72 1214.81 L1388.3 1214.81 L1388.89 1214.81 L1389.48 1214.81 L1390.06 1214.81 L1390.65 1214.81 L1391.24 1214.81 L1391.82 1214.81 L1392.41 1214.81 L1393 1214.81 L1393.58 1214.81 L1394.17 1214.81 L1394.75 1214.81 L1395.34 1214.81 L1395.93 1214.81 L1396.51 1214.81 L1397.1 1214.81 L1397.69 1214.81 L1398.27 1214.81 L1398.86 1214.81 L1399.45 1214.81 L1400.03 1214.81 L1400.62 1214.81 L1401.21 1214.81 L1401.79 1214.81 L1402.38 1214.81 L1402.96 1214.81 L1403.55 1214.81 L1404.14 1214.81 L1404.72 1214.81 L1405.31 1214.81 L1405.9 1214.81 L1406.48 1214.81 L1407.07 1214.81 L1407.66 1214.81 L1408.24 1214.81 L1408.83 1214.81 L1409.42 1214.81 L1410 1214.81 L1410.59 1214.81 L1411.17 1214.81 L1411.76 1214.81 L1412.35 1214.81 L1412.93 1214.81 L1413.52 1214.81 L1414.11 1214.81 L1414.69 1214.81 L1415.28 1214.81 L1415.87 1214.81 L1416.45 1214.81 L1417.04 1214.81 L1417.63 1214.81 L1418.21 1214.81 L1418.8 1214.81 L1419.38 1214.81 L1419.97 1214.81 L1420.56 1214.81 L1421.14 1214.81 L1421.73 1214.81 L1422.32 1214.81 L1422.9 1214.81 L1423.49 1214.81 L1424.08 1214.81 L1424.66 1214.81 L1425.25 1214.81 L1425.83 1214.81 L1426.42 1214.81 L1427.01 1214.81 L1427.59 1214.81 L1428.18 1214.81 L1428.77 1214.81 L1429.35 1214.81 L1429.94 1214.81 L1430.53 1214.81 L1431.11 1214.81 L1431.7 1214.81 L1432.29 1214.81 L1432.87 1214.81 L1433.46 1214.81 L1434.04 1214.81 L1434.63 1214.81 L1435.22 1214.81 L1435.8 1214.81 L1436.39 1214.81 L1436.98 1214.81 L1437.56 1214.81 L1438.15 1214.81 L1438.74 1214.81 L1439.32 1214.81 L1439.91 1214.81 L1440.5 1214.81 L1441.08 1214.81 L1441.67 1214.81 L1442.25 1214.81 L1442.84 1214.81 L1443.43 1214.81 L1444.01 1214.81 L1444.6 1214.81 L1445.19 1214.81 L1445.77 1214.81 L1446.36 1214.81 L1446.95 1214.81 L1447.53 1214.81 L1448.12 1214.81 L1448.7 1214.81 L1449.29 1214.81 L1449.88 1214.81 L1450.46 1214.81 L1451.05 1214.81 L1451.64 1214.81 L1452.22 1214.81 L1452.81 1214.81 L1453.4 1214.81 L1453.98 1214.81 L1454.57 1214.81 L1455.16 1214.81 L1455.74 1214.81 L1456.33 1214.81 L1456.91 1214.81 L1457.5 1214.81 L1458.09 1214.81 L1458.67 1214.81 L1459.26 1214.81 L1459.85 1214.81 L1460.43 1214.81 L1461.02 1214.81 L1461.61 1214.81 L1462.19 1214.81 L1462.78 1214.81 L1463.37 1214.81 L1463.95 1214.81 L1464.54 1214.81 L1465.12 1214.81 L1465.71 1214.81 L1466.3 1214.81 L1466.88 1214.81 L1467.47 1214.81 L1468.06 1214.81 L1468.64 1214.81 L1469.23 1214.81 L1469.82 1214.81 L1470.4 1214.81 L1470.99 1214.81 L1471.57 1214.81 L1472.16 1214.81 L1472.75 1214.81 L1473.33 1214.81 L1473.92 1214.81 L1474.51 1214.81 L1475.09 1214.81 L1475.68 1214.81 L1476.27 1214.81 L1476.85 1214.81 L1477.44 1214.81 L1478.03 1214.81 L1478.61 1214.81 L1479.2 1214.81 L1479.78 1214.81 L1480.37 1214.81 L1480.96 1214.81 L1481.54 1214.81 L1482.13 1214.81 L1482.72 1214.81 L1483.3 1214.81 L1483.89 1214.81 L1484.48 1214.81 L1485.06 1214.81 L1485.65 1214.81 L1486.24 1214.81 L1486.82 1214.81 L1487.41 1214.81 L1487.99 1214.81 L1488.58 1214.81 L1489.17 1214.81 L1489.75 1214.81 L1490.34 1214.81 L1490.93 1214.81 L1491.51 1214.81 L1492.1 1214.81 L1492.69 1214.81 L1493.27 1214.81 L1493.86 1214.81 L1494.45 1214.81 L1495.03 1214.81 L1495.62 1214.81 L1496.2 1214.81 L1496.79 1214.81 L1497.38 1214.81 L1497.96 1214.81 L1498.55 1214.81 L1499.14 1214.81 L1499.72 1214.81 L1500.31 1214.81 L1500.9 1214.81 L1501.48 1214.81 L1502.07 1214.81 L1502.65 1214.81 L1503.24 1214.81 L1503.83 1214.81 L1504.41 1214.81 L1505 1214.81 L1505.59 1214.81 L1506.17 1214.81 L1506.76 1214.81 L1507.35 1214.81 L1507.93 1214.81 L1508.52 1214.81 L1509.11 1214.81 L1509.69 1214.81 L1510.28 1214.81 L1510.86 1214.81 L1511.45 1214.81 L1512.04 1214.81 L1512.62 1214.81 L1513.21 1214.81 L1513.8 1214.81 L1514.38 1214.81 L1514.97 1214.81 L1515.56 1214.81 L1516.14 1214.81 L1516.73 1214.81 L1517.32 1214.81 L1517.9 1214.81 L1518.49 1214.81 L1519.07 1214.81 L1519.66 1214.81 L1520.25 1214.81 L1520.83 1214.81 L1521.42 1214.81 L1522.01 1214.81 L1522.59 1214.81 L1523.18 1214.81 L1523.77 1214.81 L1524.35 1214.81 L1524.94 1214.81 L1525.52 1214.81 L1526.11 1214.81 L1526.7 1214.81 L1527.28 1214.81 L1527.87 1214.81 L1528.46 1214.81 L1529.04 1214.81 L1529.63 1214.81 L1530.22 1214.81 L1530.8 1214.81 L1531.39 1214.81 L1531.98 1214.81 L1532.56 1214.81 L1533.15 1214.81 L1533.73 1214.81 L1534.32 1214.81 L1534.91 1214.81 L1535.49 1214.81 L1536.08 1214.81 L1536.67 1214.81 L1537.25 1214.81 L1537.84 1214.81 L1538.43 1214.81 L1539.01 1214.81 L1539.6 1214.81 L1540.19 1214.81 L1540.77 1214.81 L1541.36 1214.81 L1541.94 1214.81 L1542.53 1214.81 L1543.12 1214.81 L1543.7 1214.81 L1544.29 1214.81 L1544.88 1214.81 L1545.46 1214.81 L1546.05 1214.81 L1546.64 1214.81 L1547.22 1214.81 L1547.81 1214.81 L1548.4 1214.81 L1548.98 1214.81 L1549.57 1214.81 L1550.15 1214.81 L1550.74 1214.81 L1551.33 1214.81 L1551.91 1214.81 L1552.5 1214.81 L1553.09 1214.81 L1553.67 1214.81 L1554.26 1214.81 L1554.85 1214.81 L1555.43 1214.81 L1556.02 1214.81 L1556.6 1214.81 L1557.19 1214.81 L1557.78 1214.81 L1558.36 1214.81 L1558.95 1214.81 L1559.54 1214.81 L1560.12 1214.81 L1560.71 1214.81 L1561.3 1214.81 L1561.88 1214.81 L1562.47 1214.81 L1563.06 1214.81 L1563.64 1214.81 L1564.23 1214.81 L1564.81 1214.81 L1565.4 1214.81 L1565.99 1214.81 L1566.57 1214.81 L1567.16 1214.81 L1567.75 1214.81 L1568.33 1214.81 L1568.92 1214.81 L1569.51 1214.81 L1570.09 1214.81 L1570.68 1214.81 L1571.27 1214.81 L1571.85 1214.81 L1572.44 1214.81 L1573.02 1214.81 L1573.61 1214.81 L1574.2 1214.81 L1574.78 1214.81 L1575.37 1214.81 L1575.96 1214.81 L1576.54 1214.81 L1577.13 1214.81 L1577.72 1214.81 L1578.3 1214.81 L1578.89 1214.81 L1579.47 1214.81 L1580.06 1214.81 L1580.65 1214.81 L1581.23 1214.81 L1581.82 1214.81 L1582.41 1214.81 L1582.99 1214.81 L1583.58 1214.81 L1584.17 1214.81 L1584.75 1214.81 L1585.34 1214.81 L1585.93 1214.81 L1586.51 1214.81 L1587.1 1214.81 L1587.68 1214.81 L1588.27 1214.81 L1588.86 1214.81 L1589.44 1214.81 L1590.03 1214.81 L1590.62 1214.81 L1591.2 1214.81 L1591.79 1214.81 L1592.38 1214.81 L1592.96 1214.81 L1593.55 1214.81 L1594.14 1214.81 L1594.72 1214.81 L1595.31 1214.81 L1595.89 1214.81 L1596.48 1214.81 L1597.07 1214.81 L1597.65 1214.81 L1598.24 1214.81 L1598.83 1214.81 L1599.41 1214.81 L1600 1214.81 L1600.59 1214.81 L1601.17 1214.81 L1601.76 1214.81 L1602.34 1214.81 L1602.93 1214.81 L1603.52 1214.81 L1604.1 1214.81 L1604.69 1214.81 L1605.28 1214.81 L1605.86 1214.81 L1606.45 1214.81 L1607.04 1214.81 L1607.62 1214.81 L1608.21 1214.81 L1608.8 1214.81 L1609.38 1214.81 L1609.97 1214.81 L1610.55 1214.81 L1611.14 1214.81 L1611.73 1214.81 L1612.31 1214.81 L1612.9 1214.81 L1613.49 1214.81 L1614.07 1214.81 L1614.66 1214.81 L1615.25 1214.81 L1615.83 1214.81 L1616.42 1214.81 L1617.01 1214.81 L1617.59 1214.81 L1618.18 1214.81 L1618.76 1214.81 L1619.35 1214.81 L1619.94 1214.81 L1620.52 1214.81 L1621.11 1214.81 L1621.7 1214.81 L1622.28 1214.81 L1622.87 1214.81 L1623.46 1214.81 L1624.04 1214.81 L1624.63 1214.81 L1625.22 1214.81 L1625.8 1214.81 L1626.39 1214.81 L1626.97 1214.81 L1627.56 1214.81 L1628.15 1214.81 L1628.73 1214.81 L1629.32 1214.81 L1629.91 1214.81 L1630.49 1214.81 L1631.08 1214.81 L1631.67 1214.81 L1632.25 1214.81 L1632.84 1214.81 L1633.42 1214.81 L1634.01 1214.81 L1634.6 1214.81 L1635.18 1214.81 L1635.77 1214.81 L1636.36 1214.81 L1636.94 1214.81 L1637.53 1214.81 L1638.12 1214.81 L1638.7 1214.81 L1639.29 1214.81 L1639.88 1214.81 L1640.46 1214.81 L1641.05 1214.81 L1641.63 1214.81 L1642.22 1214.81 L1642.81 1214.81 L1643.39 1214.81 L1643.98 1214.81 L1644.57 1214.81 L1645.15 1214.81 L1645.74 1214.81 L1646.33 1214.81 L1646.91 1214.81 L1647.5 1214.81 L1648.09 1214.81 L1648.67 1214.81 L1649.26 1214.81 L1649.84 1214.81 L1650.43 1214.81 L1651.02 1214.81 L1651.6 1214.81 L1652.19 1214.81 L1652.78 1214.81 L1653.36 1214.81 L1653.95 1214.81 L1654.54 1214.81 L1655.12 1214.81 L1655.71 1214.81 L1656.29 1214.81 L1656.88 1214.81 L1657.47 1214.81 L1658.05 1214.81 L1658.64 1214.81 L1659.23 1214.81 L1659.81 1214.81 L1660.4 1214.81 L1660.99 1214.81 L1661.57 1214.81 L1662.16 1214.81 L1662.75 1214.81 L1663.33 1214.81 L1663.92 1214.81 L1664.5 1214.81 L1665.09 1214.81 L1665.68 1214.81 L1666.26 1214.81 L1666.85 1214.81 L1667.44 1214.81 L1668.02 1214.81 L1668.61 1214.81 L1669.2 1214.81 L1669.78 1214.81 L1670.37 1214.81 L1670.96 1214.81 L1671.54 1214.81 L1672.13 1214.81 L1672.71 1214.81 L1673.3 1214.81 L1673.89 1214.81 L1674.47 1214.81 L1675.06 1214.81 L1675.65 1214.81 L1676.23 1214.81 L1676.82 1214.81 L1677.41 1214.81 L1677.99 1214.81 L1678.58 1214.81 L1679.17 1214.81 L1679.75 1214.81 L1680.34 1214.81 L1680.92 1214.81 L1681.51 1214.81 L1682.1 1214.81 L1682.68 1214.81 L1683.27 1214.81 L1683.86 1214.81 L1684.44 1214.81 L1685.03 1214.81 L1685.62 1214.81 L1686.2 1214.81 L1686.79 1214.81 L1687.37 1214.81 L1687.96 1214.81 L1688.55 1214.81 L1689.13 1214.81 L1689.72 1214.81 L1690.31 1214.81 L1690.89 1214.81 L1691.48 1214.81 L1692.07 1214.81 L1692.65 1214.81 L1693.24 1214.81 L1693.83 1214.81 L1694.41 1214.81 L1695 1214.81 L1695.58 1214.81 L1696.17 1214.81 L1696.76 1214.81 L1697.34 1214.81 L1697.93 1214.81 L1698.52 1214.81 L1699.1 1214.81 L1699.69 1214.81 L1700.28 1214.81 L1700.86 1214.81 L1701.45 1214.81 L1702.04 1214.81 L1702.62 1214.81 L1703.21 1214.81 L1703.79 1214.81 L1704.38 1214.81 L1704.97 1214.81 L1705.55 1214.81 L1706.14 1214.81 L1706.73 1214.81 L1707.31 1214.81 L1707.9 1214.81 L1708.49 1214.81 L1709.07 1214.81 L1709.66 1214.81 L1710.24 1214.81 L1710.83 1214.81 L1711.42 1214.81 L1712 1214.81 L1712.59 1214.81 L1713.18 1214.81 L1713.76 1214.81 L1714.35 1214.81 L1714.94 1214.81 L1715.52 1214.81 L1716.11 1214.81 L1716.7 1214.81 L1717.28 1214.81 L1717.87 1214.81 L1718.45 1214.81 L1719.04 1214.81 L1719.63 1214.81 L1720.21 1214.81 L1720.8 1214.81 L1721.39 1214.81 L1721.97 1214.81 L1722.56 1214.81 L1723.15 1214.81 L1723.73 1214.81 L1724.32 1214.81 L1724.91 1214.81 L1725.49 1214.81 L1726.08 1214.81 L1726.66 1214.81 L1727.25 1214.81 L1727.84 1214.81 L1728.42 1214.81 L1729.01 1214.81 L1729.6 1214.81 L1730.18 1214.81 L1730.77 1214.81 L1731.36 1214.81 L1731.94 1214.81 L1732.53 1214.81 L1733.11 1214.81 L1733.7 1214.81 L1734.29 1214.81 L1734.87 1214.81 L1735.46 1214.81 L1736.05 1214.81 L1736.63 1214.81 L1737.22 1214.81 L1737.81 1214.81 L1738.39 1214.81 L1738.98 1214.81 L1739.57 1214.81 L1740.15 1214.81 L1740.74 1214.81 L1741.32 1214.81 L1741.91 1214.81 L1742.5 1214.81 L1743.08 1214.81 L1743.67 1214.81 L1744.26 1214.81 L1744.84 1214.81 L1745.43 1214.81 L1746.02 1214.81 L1746.6 1214.81 L1747.19 1214.81 L1747.78 1214.81 L1748.36 1214.81 L1748.95 1214.81 L1749.53 1214.81 L1750.12 1214.81 L1750.71 1214.81 L1751.29 1214.81 L1751.88 1214.81 L1752.47 1214.81 L1753.05 1214.81 L1753.64 1214.81 L1754.23 1214.81 L1754.81 1214.81 L1755.4 1214.81 L1755.99 1214.81 L1756.57 1214.81 L1757.16 1214.81 L1757.74 1214.81 L1758.33 1214.81 L1758.92 1214.81 L1759.5 1214.81 L1760.09 1214.81 L1760.68 1214.81 L1761.26 1214.81 L1761.85 1214.81 L1762.44 1214.81 L1763.02 1214.81 L1763.61 1214.81 L1764.19 1214.81 L1764.78 1214.81 L1765.37 1214.81 L1765.95 1214.81 L1766.54 1214.81 L1767.13 1214.81 L1767.71 1214.81 L1768.3 1214.81 L1768.89 1214.81 L1769.47 1214.81 L1770.06 1214.81 L1770.65 1214.81 L1771.23 1214.81 L1771.82 1214.81 L1772.4 1214.81 L1772.99 1214.81 L1773.58 1214.81 L1774.16 1214.81 L1774.75 1214.81 L1775.34 1214.81 L1775.92 1214.81 L1776.51 1214.81 L1777.1 1214.81 L1777.68 1214.81 L1778.27 1214.81 L1778.86 1214.81 L1779.44 1214.81 L1780.03 1214.81 L1780.61 1214.81 L1781.2 1214.81 L1781.79 1214.81 L1782.37 1214.81 L1782.96 1214.81 L1783.55 1214.81 L1784.13 1214.81 L1784.72 1214.81 L1785.31 1214.81 L1785.89 1214.81 L1786.48 1214.81 L1787.06 1214.81 L1787.65 1214.81 L1788.24 1214.81 L1788.82 1214.81 L1789.41 1214.81 L1790 1214.81 L1790.58 1214.81 L1791.17 1214.81 L1791.76 1214.81 L1792.34 1214.81 L1792.93 1214.81 L1793.52 1214.81 L1794.1 1214.81 L1794.69 1214.81 L1795.27 1214.81 L1795.86 1214.81 L1796.45 1214.81 L1797.03 1214.81 L1797.62 1214.81 L1798.21 1214.81 L1798.79 1214.81 L1799.38 1214.81 L1799.97 1214.81 L1800.55 1214.81 L1801.14 1214.81 L1801.73 1214.81 L1802.31 1214.81 L1802.9 1214.81 L1803.48 1214.81 L1804.07 1214.81 L1804.66 1214.81 L1805.24 1214.81 L1805.83 1214.81 L1806.42 1214.81 L1807 1214.81 L1807.59 1214.81 L1808.18 1214.81 L1808.76 1214.81 L1809.35 1214.81 L1809.94 1214.81 L1810.52 1214.81 L1811.11 1214.81 L1811.69 1214.81 L1812.28 1214.81 L1812.87 1214.81 L1813.45 1214.81 L1814.04 1214.81 L1814.63 1214.81 L1815.21 1214.81 L1815.8 1214.81 L1816.39 1214.81 L1816.97 1214.81 L1817.56 1214.81 L1818.14 1214.81 L1818.73 1214.81 L1819.32 1214.81 L1819.9 1214.81 L1820.49 1214.81 L1821.08 1214.81 L1821.66 1214.81 L1822.25 1214.81 L1822.84 1214.81 L1823.42 1214.81 L1824.01 1214.81 L1824.6 1214.81 L1825.18 1214.81 L1825.77 1214.81 L1826.35 1214.81 L1826.94 1214.81 L1827.53 1214.81 L1828.11 1214.81 L1828.7 1214.81 L1829.29 1214.81 L1829.87 1214.81 L1830.46 1214.81 L1831.05 1214.81 L1831.63 1214.81 L1832.22 1214.81 L1832.81 1214.81 L1833.39 1214.81 L1833.98 1214.81 L1834.56 1214.81 L1835.15 1214.81 L1835.74 1214.81 L1836.32 1214.81 L1836.91 1214.81 L1837.5 1214.81 L1838.08 1214.81 L1838.67 1214.81 L1839.26 1214.81 L1839.84 1214.81 L1840.43 1214.81 L1841.01 1214.81 L1841.6 1214.81 L1842.19 1214.81 L1842.77 1214.81 L1843.36 1214.81 L1843.95 1214.81 L1844.53 1214.81 L1845.12 1214.81 L1845.71 1214.81 L1846.29 1214.81 L1846.88 1214.81 L1847.47 1214.81 L1848.05 1214.81 L1848.64 1214.81 L1849.22 1214.81 L1849.81 1214.81 L1850.4 1214.81 L1850.98 1214.81 L1851.57 1214.81 L1852.16 1214.81 L1852.74 1214.81 L1853.33 1214.81 L1853.92 1214.81 L1854.5 1214.81 L1855.09 1214.81 L1855.68 1214.81 L1856.26 1214.81 L1856.85 1214.81 L1857.43 1214.81 L1858.02 1214.81 L1858.61 1214.81 L1859.19 1214.81 L1859.78 1214.81 L1860.37 1214.81 L1860.95 1214.81 L1861.54 1214.81 L1862.13 1214.81 L1862.71 1214.81 L1863.3 1214.81 L1863.88 1214.81 L1864.47 1214.81 L1865.06 1214.81 L1865.64 1214.81 L1866.23 1214.81 L1866.82 1214.81 L1867.4 1214.81 L1867.99 1214.81 L1868.58 1214.81 L1869.16 1214.81 L1869.75 1214.81 L1870.34 1214.81 L1870.92 1214.81 L1871.51 1214.81 L1872.09 1214.81 L1872.68 1214.81 L1873.27 1214.81 L1873.85 1214.81 L1874.44 1214.81 L1875.03 1214.81 L1875.61 1214.81 L1876.2 1214.81 L1876.79 1214.81 L1877.37 1214.81 L1877.96 1214.81 L1878.55 1214.81 L1879.13 1214.81 L1879.72 1214.81 L1880.3 1214.81 L1880.89 1214.81 L1881.48 1214.81 L1882.06 1214.81 L1882.65 1214.81 L1883.24 1214.81 L1883.82 1214.81 L1884.41 1214.81 L1885 1214.81 L1885.58 1214.81 L1886.17 1214.81 L1886.76 1214.81 L1887.34 1214.81 L1887.93 1214.81 L1888.51 1214.81 L1889.1 1214.81 L1889.69 1214.81 L1890.27 1214.81 L1890.86 1214.81 L1891.45 1214.81 L1892.03 1214.81 L1892.62 1214.81 L1893.21 1214.81 L1893.79 1214.81 L1894.38 1214.81 L1894.96 1214.81 L1895.55 1214.81 L1896.14 1214.81 L1896.72 1214.81 L1897.31 1214.81 L1897.9 1214.81 L1898.48 1214.81 L1899.07 1214.81 L1899.66 1214.81 L1900.24 1214.81 L1900.83 1214.81 L1901.42 1214.81 L1902 1214.81 L1902.59 1214.81 L1903.17 1214.81 L1903.76 1214.81 L1904.35 1214.81 L1904.93 1214.81 L1905.52 1214.81 L1906.11 1214.81 L1906.69 1214.81 L1907.28 1214.81 L1907.87 1214.81 L1908.45 1214.81 L1909.04 1214.81 L1909.63 1214.81 L1910.21 1214.81 L1910.8 1214.81 L1911.38 1214.81 L1911.97 1214.81 L1912.56 1214.81 L1913.14 1214.81 L1913.73 1214.81 L1914.32 1214.81 L1914.9 1214.81 L1915.49 1214.81 L1916.08 1214.81 L1916.66 1214.81 L1917.25 1214.81 L1917.83 1214.81 L1918.42 1214.81 L1919.01 1214.81 L1919.59 1214.81 L1920.18 1214.81 L1920.77 1214.81 L1921.35 1214.81 L1921.94 1214.81 L1922.53 1214.81 L1923.11 1214.81 L1923.7 1214.81 L1924.29 1214.81 L1924.87 1214.81 L1925.46 1214.81 L1926.04 1214.81 L1926.63 1214.81 L1927.22 1214.81 L1927.8 1214.81 L1928.39 1214.81 L1928.98 1214.81 L1929.56 1214.81 L1930.15 1214.81 L1930.74 1214.81 L1931.32 1214.81 L1931.91 1214.81 L1932.5 1214.81 L1933.08 1214.81 L1933.67 1214.81 L1934.25 1214.81 L1934.84 1214.81 L1935.43 1214.81 L1936.01 1214.81 L1936.6 1214.81 L1937.19 1214.81 L1937.77 1214.81 L1938.36 1214.81 L1938.95 1214.81 L1939.53 1214.81 L1940.12 1214.81 L1940.71 1214.81 L1941.29 1214.81 L1941.88 1214.81 L1942.46 1214.81 L1943.05 1214.81 L1943.64 1214.81 L1944.22 1214.81 L1944.81 1214.81 L1945.4 1214.81 L1945.98 1214.81 L1946.57 1214.81 L1947.16 1214.81 L1947.74 1214.81 L1948.33 1214.81 L1948.91 1214.81 L1949.5 1214.81 L1950.09 1214.81 L1950.67 1214.81 L1951.26 1214.81 L1951.85 1214.81 L1952.43 1214.81 L1953.02 1214.81 L1953.61 1214.81 L1954.19 1214.81 L1954.78 1214.81 L1955.37 1214.81 L1955.95 1214.81 L1956.54 1214.81 L1957.12 1214.81 L1957.71 1214.81 L1958.3 1214.81 L1958.88 1214.81 L1959.47 1214.81 L1960.06 1214.81 L1960.64 1214.81 L1961.23 1214.81 L1961.82 1214.81 L1962.4 1214.81 L1962.99 1214.81 L1963.58 1214.81 L1964.16 1214.81 L1964.75 1214.81 L1965.33 1214.81 L1965.92 1214.81 L1966.51 1214.81 L1967.09 1214.81 L1967.68 1214.81 L1968.27 1214.81 L1968.85 1214.81 L1969.44 1214.81 L1970.03 1214.81 L1970.61 1214.81 L1971.2 1214.81 L1971.78 1214.81 L1972.37 1214.81 L1972.96 1214.81 L1973.54 1214.81 L1974.13 1214.81 L1974.72 1214.81 L1975.3 1214.81 L1975.89 1214.81 L1976.48 1214.81 L1977.06 1214.81 L1977.65 1214.81 L1978.24 1214.81 L1978.82 1214.81 L1979.41 1214.81 L1979.99 1214.81 L1980.58 1214.81 L1981.17 1214.81 L1981.75 1214.81 L1982.34 1214.81 L1982.93 1214.81 L1983.51 1214.81 L1984.1 1214.81 L1984.69 1214.81 L1985.27 1214.81 L1985.86 1214.81 L1986.45 1214.81 L1987.03 1214.81 L1987.62 1214.81 L1988.2 1214.81 L1988.79 1214.81 L1989.38 1214.81 L1989.96 1214.81 L1990.55 1214.81 L1991.14 1214.81 L1991.72 1214.81 L1992.31 1214.81 L1992.9 1214.81 L1993.48 1214.81 L1994.07 1214.81 L1994.65 1214.81 L1995.24 1214.81 L1995.83 1214.81 L1996.41 1214.81 L1997 1214.81 L1997.59 1214.81 L1998.17 1214.81 L1998.76 1214.81 L1999.35 1214.81 L1999.93 1214.81 L2000.52 1214.81 L2001.11 1214.81 L2001.69 1214.81 L2002.28 1214.81 L2002.86 1214.81 L2003.45 1214.81 L2004.04 1214.81 L2004.62 1214.81 L2005.21 1214.81 L2005.8 1214.81 L2006.38 1214.81 L2006.97 1214.81 L2007.56 1214.81 L2008.14 1214.81 L2008.73 1214.81 L2009.32 1214.81 L2009.9 1214.81 L2010.49 1214.81 L2011.07 1214.81 L2011.66 1214.81 L2012.25 1214.81 L2012.83 1214.81 L2013.42 1214.81 L2014.01 1214.81 L2014.59 1214.81 L2015.18 1214.81 L2015.77 1214.81 L2016.35 1214.81 L2016.94 1214.81 L2017.53 1214.81 L2018.11 1214.81 L2018.7 1214.81 L2019.28 1214.81 L2019.87 1214.81 L2020.46 1214.81 L2021.04 1214.81 L2021.63 1214.81 L2022.22 1214.81 L2022.8 1214.81 L2023.39 1214.81 L2023.98 1214.81 L2024.56 1214.81 L2025.15 1214.81 L2025.73 1214.81 L2026.32 1214.81 L2026.91 1214.81 L2027.49 1214.81 L2028.08 1214.81 L2028.67 1214.81 L2029.25 1214.81 L2029.84 1214.81 L2030.43 1214.81 L2031.01 1214.81 L2031.6 1214.81 L2032.19 1214.81 L2032.77 1214.81 L2033.36 1214.81 L2033.94 1214.81 L2034.53 1214.81 L2035.12 1214.81 L2035.7 1214.81 L2036.29 1214.81 L2036.88 1214.81 L2037.46 1214.81 L2038.05 1214.81 L2038.64 1214.81 L2039.22 1214.81 L2039.81 1214.81 L2040.4 1214.81 L2040.98 1214.81 L2041.57 1214.81 L2042.15 1214.81 L2042.74 1214.81 L2043.33 1214.81 L2043.91 1214.81 L2044.5 1214.81 L2045.09 1214.81 L2045.67 1214.81 L2046.26 1214.81 L2046.85 1214.81 L2047.43 1214.81 L2048.02 1214.81 L2048.6 1214.81 L2049.19 1214.81 L2049.78 1214.81 L2050.36 1214.81 L2050.95 1214.81 L2051.54 1214.81 L2052.12 1214.81 L2052.71 1214.81 L2053.3 1214.81 L2053.88 1214.81 L2054.47 1214.81 L2055.06 1214.81 L2055.64 1214.81 L2056.23 1214.81 L2056.81 1214.81 L2057.4 1214.81 L2057.99 1214.81 L2058.57 1214.81 L2059.16 1214.81 L2059.75 1214.81 L2060.33 1214.81 L2060.92 1214.81 L2061.51 1214.81 L2062.09 1214.81 L2062.68 1214.81 L2063.27 1214.81 L2063.85 1214.81 L2064.44 1214.81 L2065.02 1214.81 L2065.61 1214.81 L2066.2 1214.81 L2066.78 1214.81 L2067.37 1214.81 L2067.96 1214.81 L2068.54 1214.81 L2069.13 1214.81 L2069.72 1214.81 L2070.3 1214.81 L2070.89 1214.81 L2071.48 1214.81 L2072.06 1214.81 L2072.65 1214.81 L2073.23 1214.81 L2073.82 1214.81 L2074.41 1214.81 L2074.99 1214.81 L2075.58 1214.81 L2076.17 1214.81 L2076.75 1214.81 L2077.34 1214.81 L2077.93 1214.81 L2078.51 1214.81 L2079.1 1214.81 L2079.68 1214.81 L2080.27 1214.81 L2080.86 1214.81 L2081.44 1214.81 L2082.03 1214.81 L2082.62 1214.81 L2083.2 1214.81 L2083.79 1214.81 L2084.38 1214.81 L2084.96 1214.81 L2085.55 1214.81 L2086.14 1214.81 L2086.72 1214.81 L2087.31 1214.81 L2087.89 1214.81 L2088.48 1214.81 L2089.07 1214.81 L2089.65 1214.81 L2090.24 1214.81 L2090.83 1214.81 L2091.41 1214.81 L2092 1214.81 L2092.59 1214.81 L2093.17 1214.81 L2093.76 1214.81 L2094.35 1214.81 L2094.93 1214.81 L2095.52 1214.81 L2096.1 1214.81 L2096.69 1214.81 L2097.28 1214.81 L2097.86 1214.81 L2098.45 1214.81 L2099.04 1214.81 L2099.62 1214.81 L2100.21 1214.81 L2100.8 1214.81 L2101.38 1214.81 L2101.97 1214.81 L2102.55 1214.81 L2103.14 1214.81 L2103.73 1214.81 L2104.31 1214.81 L2104.9 1214.81 L2105.49 1214.81 L2106.07 1214.81 L2106.66 1214.81 L2107.25 1214.81 L2107.83 1214.81 L2108.42 1214.81 L2109.01 1214.81 L2109.59 1214.81 L2110.18 1214.81 L2110.76 1214.81 L2111.35 1214.81 L2111.94 1214.81 L2112.52 1214.81 L2113.11 1214.81 L2113.7 1214.81 L2114.28 1214.81 L2114.87 1214.81 L2115.46 1214.81 L2116.04 1214.81 L2116.63 1214.81 L2117.22 1214.81 L2117.8 1214.81 L2118.39 1214.81 L2118.97 1214.81 L2119.56 1214.81 L2120.15 1214.81 L2120.73 1214.81 L2121.32 1214.81 L2121.91 1214.81 L2122.49 1214.81 L2123.08 1214.81 L2123.67 1214.81 L2124.25 1214.81 L2124.84 1214.81 L2125.42 1214.81 L2126.01 1214.81 L2126.6 1214.81 L2127.18 1214.81 L2127.77 1214.81 L2128.36 1214.81 L2128.94 1214.81 L2129.53 1214.81 L2130.12 1214.81 L2130.7 1214.81 L2131.29 1214.81 L2131.88 1214.81 L2132.46 1214.81 L2133.05 1214.81 L2133.63 1214.81 L2134.22 1214.81 L2134.81 1214.81 L2135.39 1214.81 L2135.98 1214.81 L2136.57 1214.81 L2137.15 1214.81 L2137.74 1214.81 L2138.33 1214.81 L2138.91 1214.81 L2139.5 1214.81 L2140.09 1214.81 L2140.67 1214.81 L2141.26 1214.81 L2141.84 1214.81 L2142.43 1214.81 L2143.02 1214.81 L2143.6 1214.81 L2144.19 1214.81 L2144.78 1214.81 L2145.36 1214.81 L2145.95 1214.81 L2146.54 1214.81 L2147.12 1214.81 L2147.71 1214.81 L2148.3 1214.81 L2148.88 1214.81 L2149.47 1214.81 L2150.05 1214.81 L2150.64 1214.81 L2151.23 1214.81 L2151.81 1214.81 L2152.4 1214.81 L2152.99 1214.81 L2153.57 1214.81 L2154.16 1214.81 L2154.75 1214.81 L2155.33 1214.81 L2155.92 1214.81 L2156.5 1214.81 L2157.09 1214.81 L2157.68 1214.81 L2158.26 1214.81 L2158.26 1214.13 L2157.68 1214.13 L2157.09 1214.13 L2156.5 1214.13 L2155.92 1214.13 L2155.33 1214.13 L2154.75 1214.13 L2154.16 1214.13 L2153.57 1214.13 L2152.99 1214.13 L2152.4 1214.13 L2151.81 1214.13 L2151.23 1214.13 L2150.64 1214.13 L2150.05 1214.13 L2149.47 1214.13 L2148.88 1214.13 L2148.3 1214.13 L2147.71 1214.13 L2147.12 1214.13 L2146.54 1214.13 L2145.95 1214.13 L2145.36 1214.13 L2144.78 1214.13 L2144.19 1214.13 L2143.6 1214.13 L2143.02 1214.13 L2142.43 1214.13 L2141.84 1214.13 L2141.26 1214.13 L2140.67 1214.13 L2140.09 1214.13 L2139.5 1214.13 L2138.91 1214.13 L2138.33 1214.13 L2137.74 1214.13 L2137.15 1214.13 L2136.57 1214.13 L2135.98 1214.13 L2135.39 1214.13 L2134.81 1214.13 L2134.22 1214.13 L2133.63 1214.13 L2133.05 1214.13 L2132.46 1214.13 L2131.88 1214.13 L2131.29 1214.13 L2130.7 1214.13 L2130.12 1214.13 L2129.53 1214.13 L2128.94 1214.13 L2128.36 1214.13 L2127.77 1214.13 L2127.18 1214.13 L2126.6 1214.13 L2126.01 1214.13 L2125.42 1214.13 L2124.84 1214.13 L2124.25 1214.13 L2123.67 1214.13 L2123.08 1214.13 L2122.49 1214.13 L2121.91 1214.13 L2121.32 1214.13 L2120.73 1214.13 L2120.15 1214.13 L2119.56 1214.13 L2118.97 1214.13 L2118.39 1214.13 L2117.8 1214.13 L2117.22 1214.13 L2116.63 1214.13 L2116.04 1214.13 L2115.46 1214.13 L2114.87 1214.13 L2114.28 1214.13 L2113.7 1214.13 L2113.11 1214.13 L2112.52 1214.13 L2111.94 1214.13 L2111.35 1214.13 L2110.76 1214.13 L2110.18 1214.13 L2109.59 1214.13 L2109.01 1214.13 L2108.42 1214.13 L2107.83 1214.13 L2107.25 1214.13 L2106.66 1214.13 L2106.07 1214.13 L2105.49 1214.13 L2104.9 1214.13 L2104.31 1214.13 L2103.73 1214.13 L2103.14 1214.13 L2102.55 1214.13 L2101.97 1214.13 L2101.38 1214.13 L2100.8 1214.13 L2100.21 1214.13 L2099.62 1214.13 L2099.04 1214.13 L2098.45 1214.13 L2097.86 1214.13 L2097.28 1214.13 L2096.69 1214.13 L2096.1 1214.13 L2095.52 1214.13 L2094.93 1214.13 L2094.35 1214.13 L2093.76 1214.13 L2093.17 1214.13 L2092.59 1214.13 L2092 1214.13 L2091.41 1214.13 L2090.83 1214.13 L2090.24 1214.13 L2089.65 1214.13 L2089.07 1214.13 L2088.48 1214.13 L2087.89 1214.13 L2087.31 1214.13 L2086.72 1214.13 L2086.14 1214.13 L2085.55 1214.13 L2084.96 1214.13 L2084.38 1214.13 L2083.79 1214.13 L2083.2 1214.13 L2082.62 1214.13 L2082.03 1214.13 L2081.44 1214.13 L2080.86 1214.13 L2080.27 1214.13 L2079.68 1214.13 L2079.1 1214.13 L2078.51 1214.13 L2077.93 1214.13 L2077.34 1214.13 L2076.75 1214.13 L2076.17 1214.13 L2075.58 1214.13 L2074.99 1214.13 L2074.41 1214.13 L2073.82 1214.13 L2073.23 1214.13 L2072.65 1214.13 L2072.06 1214.13 L2071.48 1214.13 L2070.89 1214.13 L2070.3 1214.13 L2069.72 1214.13 L2069.13 1214.13 L2068.54 1214.13 L2067.96 1214.13 L2067.37 1214.13 L2066.78 1214.13 L2066.2 1214.13 L2065.61 1214.13 L2065.02 1214.13 L2064.44 1214.13 L2063.85 1214.13 L2063.27 1214.13 L2062.68 1214.13 L2062.09 1214.13 L2061.51 1214.13 L2060.92 1214.13 L2060.33 1214.13 L2059.75 1214.13 L2059.16 1214.13 L2058.57 1214.13 L2057.99 1214.13 L2057.4 1214.13 L2056.81 1214.13 L2056.23 1214.13 L2055.64 1214.13 L2055.06 1214.13 L2054.47 1214.13 L2053.88 1214.13 L2053.3 1214.13 L2052.71 1214.13 L2052.12 1214.13 L2051.54 1214.13 L2050.95 1214.13 L2050.36 1214.13 L2049.78 1214.13 L2049.19 1214.13 L2048.6 1214.13 L2048.02 1214.13 L2047.43 1214.13 L2046.85 1214.13 L2046.26 1214.13 L2045.67 1214.13 L2045.09 1214.13 L2044.5 1214.13 L2043.91 1214.13 L2043.33 1214.13 L2042.74 1214.13 L2042.15 1214.13 L2041.57 1214.13 L2040.98 1214.13 L2040.4 1214.13 L2039.81 1214.13 L2039.22 1214.13 L2038.64 1214.13 L2038.05 1214.13 L2037.46 1214.13 L2036.88 1214.13 L2036.29 1214.13 L2035.7 1214.13 L2035.12 1214.13 L2034.53 1214.13 L2033.94 1214.13 L2033.36 1214.13 L2032.77 1214.13 L2032.19 1214.13 L2031.6 1214.13 L2031.01 1214.13 L2030.43 1214.13 L2029.84 1214.13 L2029.25 1214.13 L2028.67 1214.13 L2028.08 1214.13 L2027.49 1214.13 L2026.91 1214.13 L2026.32 1214.13 L2025.73 1214.13 L2025.15 1214.13 L2024.56 1214.13 L2023.98 1214.13 L2023.39 1214.13 L2022.8 1214.13 L2022.22 1214.13 L2021.63 1214.13 L2021.04 1214.13 L2020.46 1214.13 L2019.87 1214.13 L2019.28 1214.13 L2018.7 1214.13 L2018.11 1214.13 L2017.53 1214.13 L2016.94 1214.13 L2016.35 1214.13 L2015.77 1214.13 L2015.18 1214.13 L2014.59 1214.13 L2014.01 1214.13 L2013.42 1214.13 L2012.83 1214.13 L2012.25 1214.13 L2011.66 1214.13 L2011.07 1214.13 L2010.49 1214.13 L2009.9 1214.13 L2009.32 1214.13 L2008.73 1214.13 L2008.14 1214.13 L2007.56 1214.13 L2006.97 1214.13 L2006.38 1214.13 L2005.8 1214.13 L2005.21 1214.13 L2004.62 1214.13 L2004.04 1214.13 L2003.45 1214.13 L2002.86 1214.13 L2002.28 1214.13 L2001.69 1214.13 L2001.11 1214.13 L2000.52 1214.13 L1999.93 1214.13 L1999.35 1214.13 L1998.76 1214.13 L1998.17 1214.13 L1997.59 1214.13 L1997 1214.13 L1996.41 1214.13 L1995.83 1214.13 L1995.24 1214.13 L1994.65 1214.13 L1994.07 1214.13 L1993.48 1214.13 L1992.9 1214.13 L1992.31 1214.13 L1991.72 1214.13 L1991.14 1214.13 L1990.55 1214.13 L1989.96 1214.13 L1989.38 1214.13 L1988.79 1214.13 L1988.2 1214.13 L1987.62 1214.13 L1987.03 1214.13 L1986.45 1214.13 L1985.86 1214.13 L1985.27 1214.13 L1984.69 1214.13 L1984.1 1214.13 L1983.51 1214.13 L1982.93 1214.13 L1982.34 1214.13 L1981.75 1214.13 L1981.17 1214.13 L1980.58 1214.13 L1979.99 1214.13 L1979.41 1214.13 L1978.82 1214.13 L1978.24 1214.13 L1977.65 1214.13 L1977.06 1214.13 L1976.48 1214.13 L1975.89 1214.13 L1975.3 1214.13 L1974.72 1214.13 L1974.13 1214.13 L1973.54 1214.13 L1972.96 1214.13 L1972.37 1214.13 L1971.78 1214.13 L1971.2 1214.13 L1970.61 1214.13 L1970.03 1214.13 L1969.44 1214.13 L1968.85 1214.13 L1968.27 1214.13 L1967.68 1214.13 L1967.09 1214.13 L1966.51 1214.13 L1965.92 1214.13 L1965.33 1214.13 L1964.75 1214.13 L1964.16 1214.13 L1963.58 1214.13 L1962.99 1214.13 L1962.4 1214.13 L1961.82 1214.13 L1961.23 1214.13 L1960.64 1214.13 L1960.06 1214.13 L1959.47 1214.13 L1958.88 1214.13 L1958.3 1214.13 L1957.71 1214.13 L1957.12 1214.13 L1956.54 1214.13 L1955.95 1214.13 L1955.37 1214.13 L1954.78 1214.13 L1954.19 1214.13 L1953.61 1214.13 L1953.02 1214.13 L1952.43 1214.13 L1951.85 1214.13 L1951.26 1214.13 L1950.67 1214.13 L1950.09 1214.13 L1949.5 1214.13 L1948.91 1214.13 L1948.33 1214.13 L1947.74 1214.13 L1947.16 1214.13 L1946.57 1214.13 L1945.98 1214.13 L1945.4 1214.13 L1944.81 1214.13 L1944.22 1214.13 L1943.64 1214.13 L1943.05 1214.13 L1942.46 1214.13 L1941.88 1214.13 L1941.29 1214.13 L1940.71 1214.13 L1940.12 1214.13 L1939.53 1214.13 L1938.95 1214.13 L1938.36 1214.13 L1937.77 1214.13 L1937.19 1214.13 L1936.6 1214.13 L1936.01 1214.13 L1935.43 1214.13 L1934.84 1214.13 L1934.25 1214.13 L1933.67 1214.13 L1933.08 1214.13 L1932.5 1214.13 L1931.91 1214.13 L1931.32 1214.13 L1930.74 1214.13 L1930.15 1214.13 L1929.56 1214.13 L1928.98 1214.13 L1928.39 1214.13 L1927.8 1214.13 L1927.22 1214.13 L1926.63 1214.13 L1926.04 1214.13 L1925.46 1214.13 L1924.87 1214.13 L1924.29 1214.13 L1923.7 1214.13 L1923.11 1214.13 L1922.53 1214.13 L1921.94 1214.13 L1921.35 1214.13 L1920.77 1214.13 L1920.18 1214.13 L1919.59 1214.13 L1919.01 1214.13 L1918.42 1214.13 L1917.83 1214.13 L1917.25 1214.13 L1916.66 1214.13 L1916.08 1214.13 L1915.49 1214.13 L1914.9 1214.13 L1914.32 1214.13 L1913.73 1214.13 L1913.14 1214.13 L1912.56 1214.13 L1911.97 1214.13 L1911.38 1214.13 L1910.8 1214.13 L1910.21 1214.13 L1909.63 1214.13 L1909.04 1214.13 L1908.45 1214.13 L1907.87 1214.13 L1907.28 1214.13 L1906.69 1214.13 L1906.11 1214.13 L1905.52 1214.13 L1904.93 1214.13 L1904.35 1214.13 L1903.76 1214.13 L1903.17 1214.13 L1902.59 1214.13 L1902 1214.13 L1901.42 1214.13 L1900.83 1214.13 L1900.24 1214.13 L1899.66 1214.13 L1899.07 1214.13 L1898.48 1214.13 L1897.9 1214.13 L1897.31 1214.13 L1896.72 1214.13 L1896.14 1214.13 L1895.55 1214.13 L1894.96 1214.13 L1894.38 1214.13 L1893.79 1214.13 L1893.21 1214.13 L1892.62 1214.13 L1892.03 1214.13 L1891.45 1214.13 L1890.86 1214.13 L1890.27 1214.13 L1889.69 1214.13 L1889.1 1214.13 L1888.51 1214.13 L1887.93 1214.13 L1887.34 1214.13 L1886.76 1214.13 L1886.17 1214.13 L1885.58 1214.13 L1885 1214.13 L1884.41 1214.13 L1883.82 1214.13 L1883.24 1214.13 L1882.65 1214.13 L1882.06 1214.13 L1881.48 1214.13 L1880.89 1214.13 L1880.3 1214.13 L1879.72 1214.13 L1879.13 1214.13 L1878.55 1214.13 L1877.96 1214.13 L1877.37 1214.13 L1876.79 1214.13 L1876.2 1214.13 L1875.61 1214.13 L1875.03 1214.13 L1874.44 1214.13 L1873.85 1214.13 L1873.27 1214.13 L1872.68 1214.13 L1872.09 1214.13 L1871.51 1214.13 L1870.92 1214.13 L1870.34 1214.13 L1869.75 1214.13 L1869.16 1214.13 L1868.58 1214.13 L1867.99 1214.13 L1867.4 1214.13 L1866.82 1214.13 L1866.23 1214.13 L1865.64 1214.13 L1865.06 1214.13 L1864.47 1214.13 L1863.88 1214.13 L1863.3 1214.13 L1862.71 1214.13 L1862.13 1214.13 L1861.54 1214.13 L1860.95 1214.13 L1860.37 1214.13 L1859.78 1214.13 L1859.19 1214.13 L1858.61 1214.13 L1858.02 1214.13 L1857.43 1214.13 L1856.85 1214.13 L1856.26 1214.13 L1855.68 1214.13 L1855.09 1214.13 L1854.5 1214.13 L1853.92 1214.13 L1853.33 1214.13 L1852.74 1214.13 L1852.16 1214.13 L1851.57 1214.13 L1850.98 1214.13 L1850.4 1214.13 L1849.81 1214.13 L1849.22 1214.13 L1848.64 1214.13 L1848.05 1214.13 L1847.47 1214.13 L1846.88 1214.13 L1846.29 1214.13 L1845.71 1214.13 L1845.12 1214.13 L1844.53 1214.13 L1843.95 1214.13 L1843.36 1214.13 L1842.77 1214.13 L1842.19 1214.13 L1841.6 1214.13 L1841.01 1214.13 L1840.43 1214.13 L1839.84 1214.13 L1839.26 1214.13 L1838.67 1214.13 L1838.08 1214.13 L1837.5 1214.13 L1836.91 1214.13 L1836.32 1214.13 L1835.74 1214.13 L1835.15 1214.13 L1834.56 1214.13 L1833.98 1214.13 L1833.39 1214.13 L1832.81 1214.13 L1832.22 1214.13 L1831.63 1214.13 L1831.05 1214.13 L1830.46 1214.13 L1829.87 1214.13 L1829.29 1214.13 L1828.7 1214.13 L1828.11 1214.13 L1827.53 1214.13 L1826.94 1214.13 L1826.35 1214.13 L1825.77 1214.13 L1825.18 1214.13 L1824.6 1214.13 L1824.01 1214.13 L1823.42 1214.13 L1822.84 1214.13 L1822.25 1214.13 L1821.66 1214.13 L1821.08 1214.13 L1820.49 1214.13 L1819.9 1214.13 L1819.32 1214.13 L1818.73 1214.13 L1818.14 1214.13 L1817.56 1214.13 L1816.97 1214.13 L1816.39 1214.13 L1815.8 1214.13 L1815.21 1214.13 L1814.63 1214.13 L1814.04 1214.13 L1813.45 1214.13 L1812.87 1214.13 L1812.28 1214.13 L1811.69 1214.13 L1811.11 1214.13 L1810.52 1214.13 L1809.94 1214.13 L1809.35 1214.13 L1808.76 1214.13 L1808.18 1214.13 L1807.59 1214.13 L1807 1214.13 L1806.42 1214.13 L1805.83 1214.13 L1805.24 1214.13 L1804.66 1214.13 L1804.07 1214.13 L1803.48 1214.13 L1802.9 1214.13 L1802.31 1214.13 L1801.73 1214.13 L1801.14 1214.13 L1800.55 1214.13 L1799.97 1214.13 L1799.38 1214.13 L1798.79 1214.13 L1798.21 1214.13 L1797.62 1214.13 L1797.03 1214.13 L1796.45 1214.13 L1795.86 1214.13 L1795.27 1214.13 L1794.69 1214.13 L1794.1 1214.13 L1793.52 1214.13 L1792.93 1214.13 L1792.34 1214.13 L1791.76 1214.13 L1791.17 1214.13 L1790.58 1214.13 L1790 1214.13 L1789.41 1214.13 L1788.82 1214.13 L1788.24 1214.13 L1787.65 1214.13 L1787.06 1214.13 L1786.48 1214.13 L1785.89 1214.13 L1785.31 1214.13 L1784.72 1214.13 L1784.13 1214.13 L1783.55 1214.13 L1782.96 1214.13 L1782.37 1214.13 L1781.79 1214.13 L1781.2 1214.13 L1780.61 1214.13 L1780.03 1214.13 L1779.44 1214.13 L1778.86 1214.13 L1778.27 1214.13 L1777.68 1214.13 L1777.1 1214.13 L1776.51 1214.13 L1775.92 1214.13 L1775.34 1214.13 L1774.75 1214.13 L1774.16 1214.13 L1773.58 1214.13 L1772.99 1214.13 L1772.4 1214.13 L1771.82 1214.13 L1771.23 1214.13 L1770.65 1214.13 L1770.06 1214.13 L1769.47 1214.13 L1768.89 1214.13 L1768.3 1214.13 L1767.71 1214.13 L1767.13 1214.13 L1766.54 1214.13 L1765.95 1214.13 L1765.37 1214.13 L1764.78 1214.13 L1764.19 1214.13 L1763.61 1214.13 L1763.02 1214.13 L1762.44 1214.13 L1761.85 1214.13 L1761.26 1214.13 L1760.68 1214.13 L1760.09 1214.13 L1759.5 1214.13 L1758.92 1214.13 L1758.33 1214.13 L1757.74 1214.13 L1757.16 1214.13 L1756.57 1214.13 L1755.99 1214.13 L1755.4 1214.13 L1754.81 1214.13 L1754.23 1214.13 L1753.64 1214.13 L1753.05 1214.13 L1752.47 1214.13 L1751.88 1214.13 L1751.29 1214.13 L1750.71 1214.13 L1750.12 1214.13 L1749.53 1214.13 L1748.95 1214.13 L1748.36 1214.13 L1747.78 1214.13 L1747.19 1214.13 L1746.6 1214.13 L1746.02 1214.13 L1745.43 1214.13 L1744.84 1214.13 L1744.26 1214.13 L1743.67 1214.13 L1743.08 1214.13 L1742.5 1214.13 L1741.91 1214.13 L1741.32 1214.13 L1740.74 1214.13 L1740.15 1214.13 L1739.57 1214.13 L1738.98 1214.13 L1738.39 1214.13 L1737.81 1214.13 L1737.22 1214.13 L1736.63 1214.13 L1736.05 1214.13 L1735.46 1214.13 L1734.87 1214.13 L1734.29 1214.13 L1733.7 1214.13 L1733.11 1214.13 L1732.53 1214.13 L1731.94 1214.13 L1731.36 1214.13 L1730.77 1214.13 L1730.18 1214.13 L1729.6 1214.13 L1729.01 1214.13 L1728.42 1214.13 L1727.84 1214.13 L1727.25 1214.13 L1726.66 1214.13 L1726.08 1214.13 L1725.49 1214.13 L1724.91 1214.13 L1724.32 1214.13 L1723.73 1214.13 L1723.15 1214.13 L1722.56 1214.13 L1721.97 1214.13 L1721.39 1214.13 L1720.8 1214.13 L1720.21 1214.13 L1719.63 1214.13 L1719.04 1214.13 L1718.45 1214.13 L1717.87 1214.13 L1717.28 1214.13 L1716.7 1214.13 L1716.11 1214.13 L1715.52 1214.13 L1714.94 1214.13 L1714.35 1214.13 L1713.76 1214.13 L1713.18 1214.13 L1712.59 1214.13 L1712 1214.13 L1711.42 1214.13 L1710.83 1214.13 L1710.24 1214.13 L1709.66 1214.13 L1709.07 1214.13 L1708.49 1214.13 L1707.9 1214.13 L1707.31 1214.13 L1706.73 1214.13 L1706.14 1214.13 L1705.55 1214.13 L1704.97 1214.13 L1704.38 1214.13 L1703.79 1214.13 L1703.21 1214.13 L1702.62 1214.13 L1702.04 1214.13 L1701.45 1214.13 L1700.86 1214.13 L1700.28 1214.13 L1699.69 1214.13 L1699.1 1214.13 L1698.52 1214.13 L1697.93 1214.13 L1697.34 1214.13 L1696.76 1214.13 L1696.17 1214.13 L1695.58 1214.13 L1695 1214.13 L1694.41 1214.13 L1693.83 1214.13 L1693.24 1214.13 L1692.65 1214.13 L1692.07 1214.13 L1691.48 1214.13 L1690.89 1214.13 L1690.31 1214.13 L1689.72 1214.13 L1689.13 1214.13 L1688.55 1214.13 L1687.96 1214.13 L1687.37 1214.13 L1686.79 1214.13 L1686.2 1214.13 L1685.62 1214.13 L1685.03 1214.13 L1684.44 1214.13 L1683.86 1214.13 L1683.27 1214.13 L1682.68 1214.13 L1682.1 1214.13 L1681.51 1214.13 L1680.92 1214.13 L1680.34 1214.13 L1679.75 1214.13 L1679.17 1214.13 L1678.58 1214.13 L1677.99 1214.13 L1677.41 1214.13 L1676.82 1214.13 L1676.23 1214.13 L1675.65 1214.13 L1675.06 1214.13 L1674.47 1214.13 L1673.89 1214.13 L1673.3 1214.13 L1672.71 1214.13 L1672.13 1214.13 L1671.54 1214.13 L1670.96 1214.13 L1670.37 1214.13 L1669.78 1214.13 L1669.2 1214.13 L1668.61 1214.13 L1668.02 1214.13 L1667.44 1214.13 L1666.85 1214.13 L1666.26 1214.13 L1665.68 1214.13 L1665.09 1214.13 L1664.5 1214.13 L1663.92 1214.13 L1663.33 1214.13 L1662.75 1214.13 L1662.16 1214.13 L1661.57 1214.13 L1660.99 1214.13 L1660.4 1214.13 L1659.81 1214.13 L1659.23 1214.13 L1658.64 1214.13 L1658.05 1214.13 L1657.47 1214.13 L1656.88 1214.13 L1656.29 1214.13 L1655.71 1214.13 L1655.12 1214.13 L1654.54 1214.13 L1653.95 1214.13 L1653.36 1214.13 L1652.78 1214.13 L1652.19 1214.13 L1651.6 1214.13 L1651.02 1214.13 L1650.43 1214.13 L1649.84 1214.13 L1649.26 1214.13 L1648.67 1214.13 L1648.09 1214.13 L1647.5 1214.13 L1646.91 1214.13 L1646.33 1214.13 L1645.74 1214.13 L1645.15 1214.13 L1644.57 1214.13 L1643.98 1214.13 L1643.39 1214.13 L1642.81 1214.13 L1642.22 1214.13 L1641.63 1214.13 L1641.05 1214.13 L1640.46 1214.13 L1639.88 1214.13 L1639.29 1214.13 L1638.7 1214.13 L1638.12 1214.13 L1637.53 1214.13 L1636.94 1214.13 L1636.36 1214.13 L1635.77 1214.13 L1635.18 1214.13 L1634.6 1214.13 L1634.01 1214.13 L1633.42 1214.13 L1632.84 1214.13 L1632.25 1214.13 L1631.67 1214.13 L1631.08 1214.13 L1630.49 1214.13 L1629.91 1214.13 L1629.32 1214.13 L1628.73 1214.13 L1628.15 1214.13 L1627.56 1214.13 L1626.97 1214.13 L1626.39 1214.13 L1625.8 1214.13 L1625.22 1214.13 L1624.63 1214.13 L1624.04 1214.13 L1623.46 1214.13 L1622.87 1214.13 L1622.28 1214.13 L1621.7 1214.13 L1621.11 1214.13 L1620.52 1214.13 L1619.94 1214.13 L1619.35 1214.13 L1618.76 1214.13 L1618.18 1214.13 L1617.59 1214.13 L1617.01 1214.13 L1616.42 1214.13 L1615.83 1214.13 L1615.25 1214.13 L1614.66 1214.13 L1614.07 1214.13 L1613.49 1214.13 L1612.9 1214.13 L1612.31 1214.13 L1611.73 1214.13 L1611.14 1214.13 L1610.55 1214.13 L1609.97 1214.13 L1609.38 1214.13 L1608.8 1214.13 L1608.21 1214.13 L1607.62 1214.13 L1607.04 1214.13 L1606.45 1214.13 L1605.86 1214.13 L1605.28 1214.13 L1604.69 1214.13 L1604.1 1214.13 L1603.52 1214.13 L1602.93 1214.13 L1602.34 1214.13 L1601.76 1214.13 L1601.17 1214.13 L1600.59 1214.13 L1600 1214.13 L1599.41 1214.13 L1598.83 1214.13 L1598.24 1214.13 L1597.65 1214.13 L1597.07 1214.13 L1596.48 1214.13 L1595.89 1214.13 L1595.31 1214.13 L1594.72 1214.13 L1594.14 1214.13 L1593.55 1214.13 L1592.96 1214.13 L1592.38 1214.13 L1591.79 1214.13 L1591.2 1214.13 L1590.62 1214.13 L1590.03 1214.13 L1589.44 1214.13 L1588.86 1214.13 L1588.27 1214.13 L1587.68 1214.13 L1587.1 1214.13 L1586.51 1214.13 L1585.93 1214.13 L1585.34 1214.13 L1584.75 1214.13 L1584.17 1214.13 L1583.58 1214.13 L1582.99 1214.13 L1582.41 1214.13 L1581.82 1214.13 L1581.23 1214.13 L1580.65 1214.13 L1580.06 1214.13 L1579.47 1214.13 L1578.89 1214.13 L1578.3 1214.13 L1577.72 1214.13 L1577.13 1214.13 L1576.54 1214.13 L1575.96 1214.13 L1575.37 1214.13 L1574.78 1214.13 L1574.2 1214.13 L1573.61 1214.13 L1573.02 1214.13 L1572.44 1214.13 L1571.85 1214.13 L1571.27 1214.13 L1570.68 1214.13 L1570.09 1214.13 L1569.51 1214.13 L1568.92 1214.13 L1568.33 1214.13 L1567.75 1214.13 L1567.16 1214.13 L1566.57 1214.13 L1565.99 1214.13 L1565.4 1214.13 L1564.81 1214.13 L1564.23 1214.13 L1563.64 1214.13 L1563.06 1214.13 L1562.47 1214.13 L1561.88 1214.13 L1561.3 1214.13 L1560.71 1214.13 L1560.12 1214.13 L1559.54 1214.13 L1558.95 1214.13 L1558.36 1214.13 L1557.78 1214.13 L1557.19 1214.13 L1556.6 1214.13 L1556.02 1214.13 L1555.43 1214.13 L1554.85 1214.13 L1554.26 1214.13 L1553.67 1214.13 L1553.09 1214.13 L1552.5 1214.13 L1551.91 1214.13 L1551.33 1214.13 L1550.74 1214.13 L1550.15 1214.13 L1549.57 1214.13 L1548.98 1214.13 L1548.4 1214.13 L1547.81 1214.13 L1547.22 1214.13 L1546.64 1214.13 L1546.05 1214.13 L1545.46 1214.13 L1544.88 1214.13 L1544.29 1214.13 L1543.7 1214.13 L1543.12 1214.13 L1542.53 1214.13 L1541.94 1214.13 L1541.36 1214.13 L1540.77 1214.13 L1540.19 1214.13 L1539.6 1214.13 L1539.01 1214.13 L1538.43 1214.13 L1537.84 1214.13 L1537.25 1214.13 L1536.67 1214.13 L1536.08 1214.13 L1535.49 1214.13 L1534.91 1214.13 L1534.32 1214.13 L1533.73 1214.13 L1533.15 1214.13 L1532.56 1214.13 L1531.98 1214.13 L1531.39 1214.13 L1530.8 1214.13 L1530.22 1214.13 L1529.63 1214.13 L1529.04 1214.13 L1528.46 1214.13 L1527.87 1214.13 L1527.28 1214.13 L1526.7 1214.13 L1526.11 1214.13 L1525.52 1214.13 L1524.94 1214.13 L1524.35 1214.13 L1523.77 1214.13 L1523.18 1214.13 L1522.59 1214.13 L1522.01 1214.13 L1521.42 1214.13 L1520.83 1214.13 L1520.25 1214.13 L1519.66 1214.13 L1519.07 1214.13 L1518.49 1214.13 L1517.9 1214.13 L1517.32 1214.13 L1516.73 1214.13 L1516.14 1214.13 L1515.56 1214.13 L1514.97 1214.13 L1514.38 1214.13 L1513.8 1214.13 L1513.21 1214.13 L1512.62 1214.13 L1512.04 1214.13 L1511.45 1214.13 L1510.86 1214.13 L1510.28 1214.13 L1509.69 1214.13 L1509.11 1214.13 L1508.52 1214.13 L1507.93 1214.13 L1507.35 1214.13 L1506.76 1214.13 L1506.17 1214.13 L1505.59 1214.13 L1505 1214.13 L1504.41 1214.13 L1503.83 1214.13 L1503.24 1214.13 L1502.65 1214.13 L1502.07 1214.13 L1501.48 1214.13 L1500.9 1214.13 L1500.31 1214.13 L1499.72 1214.13 L1499.14 1214.13 L1498.55 1214.13 L1497.96 1214.13 L1497.38 1214.13 L1496.79 1214.13 L1496.2 1214.13 L1495.62 1214.13 L1495.03 1214.13 L1494.45 1214.13 L1493.86 1214.13 L1493.27 1214.13 L1492.69 1214.13 L1492.1 1214.13 L1491.51 1214.13 L1490.93 1214.13 L1490.34 1214.13 L1489.75 1214.13 L1489.17 1214.13 L1488.58 1214.13 L1487.99 1214.13 L1487.41 1214.13 L1486.82 1214.13 L1486.24 1214.13 L1485.65 1214.13 L1485.06 1214.13 L1484.48 1214.13 L1483.89 1214.13 L1483.3 1214.13 L1482.72 1214.13 L1482.13 1214.13 L1481.54 1214.13 L1480.96 1214.13 L1480.37 1214.13 L1479.78 1214.13 L1479.2 1214.13 L1478.61 1214.13 L1478.03 1214.13 L1477.44 1214.13 L1476.85 1214.13 L1476.27 1214.13 L1475.68 1214.13 L1475.09 1214.13 L1474.51 1214.13 L1473.92 1214.13 L1473.33 1214.13 L1472.75 1214.13 L1472.16 1214.13 L1471.57 1214.13 L1470.99 1214.13 L1470.4 1214.13 L1469.82 1214.13 L1469.23 1214.13 L1468.64 1214.13 L1468.06 1214.13 L1467.47 1214.13 L1466.88 1214.13 L1466.3 1214.13 L1465.71 1214.13 L1465.12 1214.13 L1464.54 1214.13 L1463.95 1214.13 L1463.37 1214.13 L1462.78 1214.13 L1462.19 1214.13 L1461.61 1214.13 L1461.02 1214.13 L1460.43 1214.13 L1459.85 1214.13 L1459.26 1214.13 L1458.67 1214.13 L1458.09 1214.13 L1457.5 1214.13 L1456.91 1214.13 L1456.33 1214.13 L1455.74 1214.13 L1455.16 1214.13 L1454.57 1214.13 L1453.98 1214.13 L1453.4 1214.13 L1452.81 1214.13 L1452.22 1214.13 L1451.64 1214.13 L1451.05 1214.13 L1450.46 1214.13 L1449.88 1214.13 L1449.29 1214.13 L1448.7 1214.13 L1448.12 1214.13 L1447.53 1214.13 L1446.95 1214.13 L1446.36 1214.13 L1445.77 1214.13 L1445.19 1214.13 L1444.6 1214.13 L1444.01 1214.13 L1443.43 1214.13 L1442.84 1214.13 L1442.25 1214.13 L1441.67 1214.13 L1441.08 1214.13 L1440.5 1214.13 L1439.91 1214.13 L1439.32 1214.13 L1438.74 1214.13 L1438.15 1214.13 L1437.56 1214.13 L1436.98 1214.13 L1436.39 1214.13 L1435.8 1214.13 L1435.22 1214.13 L1434.63 1214.13 L1434.04 1214.13 L1433.46 1214.13 L1432.87 1214.13 L1432.29 1214.13 L1431.7 1214.13 L1431.11 1214.13 L1430.53 1214.13 L1429.94 1214.13 L1429.35 1214.13 L1428.77 1214.13 L1428.18 1214.13 L1427.59 1214.13 L1427.01 1214.13 L1426.42 1214.13 L1425.83 1214.13 L1425.25 1214.13 L1424.66 1214.13 L1424.08 1214.13 L1423.49 1214.13 L1422.9 1214.13 L1422.32 1214.13 L1421.73 1214.13 L1421.14 1214.13 L1420.56 1214.13 L1419.97 1214.13 L1419.38 1214.13 L1418.8 1214.13 L1418.21 1214.13 L1417.63 1214.13 L1417.04 1214.13 L1416.45 1214.13 L1415.87 1214.13 L1415.28 1214.13 L1414.69 1214.13 L1414.11 1214.13 L1413.52 1214.13 L1412.93 1214.13 L1412.35 1214.13 L1411.76 1214.13 L1411.17 1214.13 L1410.59 1214.13 L1410 1214.13 L1409.42 1214.13 L1408.83 1214.13 L1408.24 1214.13 L1407.66 1214.13 L1407.07 1214.13 L1406.48 1214.13 L1405.9 1214.13 L1405.31 1214.13 L1404.72 1214.13 L1404.14 1214.13 L1403.55 1214.13 L1402.96 1214.13 L1402.38 1214.13 L1401.79 1214.13 L1401.21 1214.13 L1400.62 1214.13 L1400.03 1214.13 L1399.45 1214.13 L1398.86 1214.13 L1398.27 1214.13 L1397.69 1214.13 L1397.1 1214.13 L1396.51 1214.13 L1395.93 1214.13 L1395.34 1214.13 L1394.75 1214.13 L1394.17 1214.13 L1393.58 1214.13 L1393 1214.13 L1392.41 1214.13 L1391.82 1214.13 L1391.24 1214.13 L1390.65 1214.13 L1390.06 1214.13 L1389.48 1214.13 L1388.89 1214.13 L1388.3 1214.13 L1387.72 1214.13 L1387.13 1214.13 L1386.55 1214.13 L1385.96 1214.13 L1385.37 1214.13 L1384.79 1214.13 L1384.2 1214.13 L1383.61 1214.13 L1383.03 1214.13 L1382.44 1214.13 L1381.85 1214.13 L1381.27 1214.13 L1380.68 1214.13 L1380.09 1214.13 L1379.51 1214.13 L1378.92 1214.13 L1378.34 1214.13 L1377.75 1214.13 L1377.16 1214.13 L1376.58 1214.13 L1375.99 1214.13 L1375.4 1214.13 L1374.82 1214.13 L1374.23 1214.13 L1373.64 1214.13 L1373.06 1214.13 L1372.47 1214.13 L1371.88 1214.13 L1371.3 1214.13 L1370.71 1214.13 L1370.13 1214.13 L1369.54 1214.13 L1368.95 1214.13 L1368.37 1214.13 L1367.78 1214.13 L1367.19 1214.13 L1366.61 1214.13 L1366.02 1214.13 L1365.43 1214.13 L1364.85 1214.13 L1364.26 1214.13 L1363.68 1214.13 L1363.09 1214.13 L1362.5 1214.13 L1361.92 1214.13 L1361.33 1214.13 L1360.74 1214.13 L1360.16 1214.13 L1359.57 1214.13 L1358.98 1214.13 L1358.4 1214.13 L1357.81 1214.13 L1357.22 1214.13 L1356.64 1214.13 L1356.05 1214.13 L1355.47 1214.13 L1354.88 1214.13 L1354.29 1214.13 L1353.71 1214.13 L1353.12 1214.13 L1352.53 1214.13 L1351.95 1214.13 L1351.36 1214.13 L1350.77 1214.13 L1350.19 1214.13 L1349.6 1214.13 L1349.01 1214.13 L1348.43 1214.13 L1347.84 1214.13 L1347.26 1214.13 L1346.67 1214.13 L1346.08 1214.13 L1345.5 1214.13 L1344.91 1214.13 L1344.32 1214.13 L1343.74 1214.13 L1343.15 1214.13 L1342.56 1214.13 L1341.98 1214.13 L1341.39 1214.13 L1340.8 1214.13 L1340.22 1214.13 L1339.63 1214.13 L1339.05 1214.13 L1338.46 1214.13 L1337.87 1214.13 L1337.29 1214.13 L1336.7 1214.13 L1336.11 1214.13 L1335.53 1214.13 L1334.94 1214.13 L1334.35 1214.13 L1333.77 1214.13 L1333.18 1214.13 L1332.6 1214.13 L1332.01 1214.13 L1331.42 1214.13 L1330.84 1214.13 L1330.25 1214.13 L1329.66 1214.13 L1329.08 1214.13 L1328.49 1214.13 L1327.9 1214.13 L1327.32 1214.13 L1326.73 1214.13 L1326.14 1214.13 L1325.56 1214.13 L1324.97 1214.13 L1324.39 1214.13 L1323.8 1214.13 L1323.21 1214.13 L1322.63 1214.13 L1322.04 1214.13 L1321.45 1214.13 L1320.87 1214.13 L1320.28 1214.13 L1319.69 1214.13 L1319.11 1214.13 L1318.52 1214.13 L1317.93 1214.13 L1317.35 1214.13 L1316.76 1214.13 L1316.18 1214.13 L1315.59 1214.13 L1315 1214.13 L1314.42 1214.13 L1313.83 1214.13 L1313.24 1214.13 L1312.66 1214.13 L1312.07 1214.13 L1311.48 1214.13 L1310.9 1214.13 L1310.31 1214.13 L1309.73 1214.13 L1309.14 1214.13 L1308.55 1214.13 L1307.97 1214.13 L1307.38 1214.13 L1306.79 1214.13 L1306.21 1214.13 L1305.62 1214.13 L1305.03 1214.13 L1304.45 1214.13 L1303.86 1214.13 L1303.27 1214.13 L1302.69 1214.13 L1302.1 1214.13 L1301.52 1214.13 L1300.93 1214.13 L1300.34 1214.13 L1299.76 1214.13 L1299.17 1214.13 L1298.58 1214.13 L1298 1214.13 L1297.41 1214.13 L1296.82 1214.13 L1296.24 1214.13 L1295.65 1214.13 L1295.06 1214.13 L1294.48 1214.13 L1293.89 1214.13 L1293.31 1214.13 L1292.72 1214.13 L1292.13 1214.13 L1291.55 1214.13 L1290.96 1214.13 L1290.37 1214.13 L1289.79 1214.13 L1289.2 1214.13 L1288.61 1214.13 L1288.03 1214.13 L1287.44 1214.13 L1286.86 1214.13 L1286.27 1214.13 L1285.68 1214.13 L1285.1 1214.13 L1284.51 1214.13 L1283.92 1214.13 L1283.34 1214.13 L1282.75 1214.13 L1282.16 1214.13 L1281.58 1214.13 L1280.99 1214.13 L1280.4 1214.13 L1279.82 1214.13 L1279.23 1214.13 L1278.65 1214.13 L1278.06 1214.13 L1277.47 1214.13 L1276.89 1214.13 L1276.3 1214.13 L1275.71 1214.13 L1275.13 1214.13 L1274.54 1214.13 L1273.95 1214.13 L1273.37 1214.13 L1272.78 1214.13 L1272.19 1214.13 L1271.61 1214.13 L1271.02 1214.13 L1270.44 1214.13 L1269.85 1214.13 L1269.26 1214.13 L1268.68 1214.13 L1268.09 1214.13 L1267.5 1214.13 L1266.92 1214.13 L1266.33 1214.13 L1265.74 1214.13 L1265.16 1214.13 L1264.57 1214.13 L1263.98 1214.13 L1263.4 1214.13 L1262.81 1214.13 L1262.23 1214.13 L1261.64 1214.13 L1261.05 1214.13 L1260.47 1214.13 L1259.88 1214.13 L1259.29 1214.13 L1258.71 1214.13 L1258.12 1214.13 L1257.53 1214.13 L1256.95 1214.13 L1256.36 1214.13 L1255.78 1214.13 L1255.19 1214.13 L1254.6 1214.13 L1254.02 1214.13 L1253.43 1214.13 L1252.84 1214.13 L1252.26 1214.13 L1251.67 1214.13 L1251.08 1214.13 L1250.5 1214.13 L1249.91 1214.13 L1249.32 1214.13 L1248.74 1214.13 L1248.15 1214.13 L1247.57 1214.13 L1246.98 1214.13 L1246.39 1214.13 L1245.81 1214.13 L1245.22 1214.13 L1244.63 1214.13 L1244.05 1214.13 L1243.46 1214.13 L1242.87 1214.13 L1242.29 1214.13 L1241.7 1214.13 L1241.11 1214.13 L1240.53 1214.13 L1239.94 1214.13 L1239.36 1214.13 L1238.77 1214.13 L1238.18 1214.13 L1237.6 1214.13 L1237.01 1214.13 L1236.42 1214.13 L1235.84 1214.13 L1235.25 1214.13 L1234.66 1214.13 L1234.08 1214.13 L1233.49 1214.13 L1232.91 1214.13 L1232.32 1214.13 L1231.73 1214.13 L1231.15 1214.13 L1230.56 1214.13 L1229.97 1214.13 L1229.39 1214.13 L1228.8 1214.13 L1228.21 1214.13 L1227.63 1214.13 L1227.04 1214.13 L1226.45 1214.13 L1225.87 1214.13 L1225.28 1214.13 L1224.7 1214.13 L1224.11 1214.13 L1223.52 1214.13 L1222.94 1214.13 L1222.35 1214.13 L1221.76 1214.13 L1221.18 1214.13 L1220.59 1214.13 L1220 1214.13 L1219.42 1214.13 L1218.83 1214.13 L1218.24 1214.13 L1217.66 1214.13 L1217.07 1214.13 L1216.49 1214.13 L1215.9 1214.13 L1215.31 1214.13 L1214.73 1214.13 L1214.14 1214.13 L1213.55 1214.13 L1212.97 1214.13 L1212.38 1214.13 L1211.79 1214.13 L1211.21 1214.13 L1210.62 1214.13 L1210.03 1214.13 L1209.45 1214.13 L1208.86 1214.13 L1208.28 1214.13 L1207.69 1214.13 L1207.1 1214.13 L1206.52 1214.13 L1205.93 1214.13 L1205.34 1214.13 L1204.76 1214.13 L1204.17 1214.13 L1203.58 1214.13 L1203 1214.13 L1202.41 1214.13 L1201.83 1214.13 L1201.24 1214.13 L1200.65 1214.13 L1200.07 1214.13 L1199.48 1214.13 L1198.89 1214.13 L1198.31 1214.13 L1197.72 1214.13 L1197.13 1214.13 L1196.55 1214.13 L1195.96 1214.13 L1195.37 1214.13 L1194.79 1214.13 L1194.2 1214.13 L1193.62 1214.13 L1193.03 1214.13 L1192.44 1214.13 L1191.86 1214.13 L1191.27 1214.13 L1190.68 1214.13 L1190.1 1214.13 L1189.51 1214.13 L1188.92 1214.13 L1188.34 1214.13 L1187.75 1214.13 L1187.16 1214.13 L1186.58 1214.13 L1185.99 1214.13 L1185.41 1214.13 L1184.82 1214.13 L1184.23 1214.13 L1183.65 1214.13 L1183.06 1214.13 L1182.47 1214.13 L1181.89 1214.13 L1181.3 1214.13 L1180.71 1214.13 L1180.13 1214.13 L1179.54 1214.13 L1178.96 1214.13 L1178.37 1214.13 L1177.78 1214.13 L1177.2 1214.13 L1176.61 1214.13 L1176.02 1214.13 L1175.44 1214.13 L1174.85 1214.13 L1174.26 1214.13 L1173.68 1214.13 L1173.09 1214.13 L1172.5 1214.13 L1171.92 1214.13 L1171.33 1214.13 L1170.75 1214.13 L1170.16 1214.13 L1169.57 1214.13 L1168.99 1214.13 L1168.4 1214.13 L1167.81 1214.13 L1167.23 1214.13 L1166.64 1214.13 L1166.05 1214.13 L1165.47 1214.13 L1164.88 1214.13 L1164.29 1214.13 L1163.71 1214.13 L1163.12 1214.13 L1162.54 1214.13 L1161.95 1214.13 L1161.36 1214.13 L1160.78 1214.13 L1160.19 1214.13 L1159.6 1214.13 L1159.02 1214.13 L1158.43 1214.13 L1157.84 1214.13 L1157.26 1214.13 L1156.67 1214.13 L1156.09 1214.13 L1155.5 1214.13 L1154.91 1214.13 L1154.33 1214.13 L1153.74 1214.13 L1153.15 1214.13 L1152.57 1214.13 L1151.98 1214.13 L1151.39 1214.13 L1150.81 1214.13 L1150.22 1214.13 L1149.63 1214.13 L1149.05 1214.13 L1148.46 1214.13 L1147.88 1214.13 L1147.29 1214.13 L1146.7 1214.13 L1146.12 1214.13 L1145.53 1214.13 L1144.94 1214.13 L1144.36 1214.13 L1143.77 1214.13 L1143.18 1214.13 L1142.6 1214.13 L1142.01 1214.13 L1141.42 1214.13 L1140.84 1214.13 L1140.25 1214.13 L1139.67 1214.13 L1139.08 1214.13 L1138.49 1214.13 L1137.91 1214.13 L1137.32 1214.13 L1136.73 1214.13 L1136.15 1214.13 L1135.56 1214.13 L1134.97 1214.13 L1134.39 1214.13 L1133.8 1214.13 L1133.21 1214.13 L1132.63 1214.13 L1132.04 1214.13 L1131.46 1214.13 L1130.87 1214.13 L1130.28 1214.13 L1129.7 1214.13 L1129.11 1214.13 L1128.52 1214.13 L1127.94 1214.13 L1127.35 1214.13 L1126.76 1214.13 L1126.18 1214.13 L1125.59 1214.13 L1125.01 1214.13 L1124.42 1214.13 L1123.83 1214.13 L1123.25 1214.13 L1122.66 1214.13 L1122.07 1214.13 L1121.49 1214.13 L1120.9 1214.13 L1120.31 1214.13 L1119.73 1214.13 L1119.14 1214.13 L1118.55 1214.13 L1117.97 1214.13 L1117.38 1214.13 L1116.8 1214.13 L1116.21 1214.13 L1115.62 1214.13 L1115.04 1214.13 L1114.45 1214.13 L1113.86 1214.13 L1113.28 1214.13 L1112.69 1214.13 L1112.1 1214.13 L1111.52 1214.13 L1110.93 1214.13 L1110.34 1214.13 L1109.76 1214.13 L1109.17 1214.13 L1108.59 1214.13 L1108 1214.13 L1107.41 1214.13 L1106.83 1214.13 L1106.24 1214.13 L1105.65 1214.13 L1105.07 1214.13 L1104.48 1214.13 L1103.89 1214.13 L1103.31 1214.13 L1102.72 1214.13 L1102.14 1214.13 L1101.55 1214.13 L1100.96 1214.13 L1100.38 1214.13 L1099.79 1214.13 L1099.2 1214.13 L1098.62 1214.13 L1098.03 1214.13 L1097.44 1214.13 L1096.86 1214.13 L1096.27 1214.13 L1095.68 1214.13 L1095.1 1214.13 L1094.51 1214.13 L1093.93 1214.13 L1093.34 1214.13 L1092.75 1214.13 L1092.17 1214.13 L1091.58 1214.13 L1090.99 1214.13 L1090.41 1214.13 L1089.82 1214.13 L1089.23 1214.13 L1088.65 1214.13 L1088.06 1214.13 L1087.47 1214.13 L1086.89 1214.13 L1086.3 1214.13 L1085.72 1214.13 L1085.13 1214.13 L1084.54 1214.13 L1083.96 1214.13 L1083.37 1214.13 L1082.78 1214.13 L1082.2 1214.13 L1081.61 1214.13 L1081.02 1214.13 L1080.44 1214.13 L1079.85 1214.13 L1079.26 1214.13 L1078.68 1214.13 L1078.09 1214.13 L1077.51 1214.13 L1076.92 1214.13 L1076.33 1214.13 L1075.75 1214.13 L1075.16 1214.13 L1074.57 1214.13 L1073.99 1214.13 L1073.4 1214.13 L1072.81 1214.13 L1072.23 1214.13 L1071.64 1214.13 L1071.06 1214.13 L1070.47 1214.13 L1069.88 1214.13 L1069.3 1214.13 L1068.71 1214.13 L1068.12 1214.13 L1067.54 1214.13 L1066.95 1214.13 L1066.36 1214.13 L1065.78 1214.13 L1065.19 1214.13 L1064.6 1214.13 L1064.02 1214.13 L1063.43 1214.13 L1062.85 1214.13 L1062.26 1214.13 L1061.67 1214.13 L1061.09 1214.13 L1060.5 1214.13 L1059.91 1214.13 L1059.33 1214.13 L1058.74 1214.13 L1058.15 1214.13 L1057.57 1214.13 L1056.98 1214.13 L1056.39 1214.13 L1055.81 1214.13 L1055.22 1214.13 L1054.64 1214.13 L1054.05 1214.13 L1053.46 1214.13 L1052.88 1214.13 L1052.29 1214.13 L1051.7 1214.13 L1051.12 1214.13 L1050.53 1214.13 L1049.94 1214.13 L1049.36 1214.13 L1048.77 1214.13 L1048.19 1214.13 L1047.6 1214.13 L1047.01 1214.13 L1046.43 1214.13 L1045.84 1214.13 L1045.25 1214.13 L1044.67 1214.13 L1044.08 1214.13 L1043.49 1214.13 L1042.91 1214.13 L1042.32 1214.13 L1041.73 1214.13 L1041.15 1214.13 L1040.56 1214.13 L1039.98 1214.13 L1039.39 1214.13 L1038.8 1214.13 L1038.22 1214.13 L1037.63 1214.13 L1037.04 1214.13 L1036.46 1214.13 L1035.87 1214.13 L1035.28 1214.13 L1034.7 1214.13 L1034.11 1214.13 L1033.52 1214.13 L1032.94 1214.13 L1032.35 1214.13 L1031.77 1214.13 L1031.18 1214.13 L1030.59 1214.13 L1030.01 1214.13 L1029.42 1214.13 L1028.83 1214.13 L1028.25 1214.13 L1027.66 1214.13 L1027.07 1214.13 L1026.49 1214.13 L1025.9 1214.13 L1025.32 1214.13 L1024.73 1214.13 L1024.14 1214.13 L1023.56 1214.13 L1022.97 1214.13 L1022.38 1214.13 L1021.8 1214.13 L1021.21 1214.13 L1020.62 1214.13 L1020.04 1214.13 L1019.45 1214.13 L1018.86 1214.13 L1018.28 1214.13 L1017.69 1214.13 L1017.11 1214.13 L1016.52 1214.13 L1015.93 1214.13 L1015.35 1214.13 L1014.76 1214.13 L1014.17 1214.13 L1013.59 1214.13 L1013 1214.13 L1012.41 1214.13 L1011.83 1214.13 L1011.24 1214.13 L1010.65 1214.13 L1010.07 1214.13 L1009.48 1214.13 L1008.9 1214.13 L1008.31 1214.13 L1007.72 1214.13 L1007.14 1214.13 L1006.55 1214.13 L1005.96 1214.13 L1005.38 1214.13 L1004.79 1214.13 L1004.2 1214.13 L1003.62 1214.13 L1003.03 1214.13 L1002.44 1214.13 L1001.86 1214.13 L1001.27 1214.13 L1000.69 1214.13 L1000.1 1214.13 L999.513 1214.13 L998.926 1214.13 L998.34 1214.13 L997.754 1214.13 L997.167 1214.13 L996.581 1214.13 L995.994 1214.13 L995.408 1214.13 L994.822 1214.13 L994.235 1214.13 L993.649 1214.13 L993.062 1214.13 L992.476 1214.13 L991.889 1214.13 L991.303 1214.13 L990.717 1214.13 L990.13 1214.13 L989.544 1214.13 L988.957 1214.13 L988.371 1214.13 L987.785 1214.13 L987.198 1214.13 L986.612 1214.13 L986.025 1214.13  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.47 986.612,1214.47 987.198,1214.47 987.785,1214.47 988.371,1214.47 988.957,1214.47 989.544,1214.47 990.13,1214.47 990.717,1214.47 991.303,1214.47 991.889,1214.47 992.476,1214.47 993.062,1214.47 993.649,1214.47 994.235,1214.47 994.822,1214.47 995.408,1214.47 995.994,1214.47 996.581,1214.47 997.167,1214.47 997.754,1214.47 998.34,1214.47 998.926,1214.47 999.513,1214.47 1000.1,1214.47 1000.69,1214.47 1001.27,1214.47 1001.86,1214.47 1002.44,1214.47 1003.03,1214.47 1003.62,1214.47 1004.2,1214.47 1004.79,1214.47 1005.38,1214.47 1005.96,1214.47 1006.55,1214.47 1007.14,1214.47 1007.72,1214.47 1008.31,1214.47 1008.9,1214.47 1009.48,1214.47 1010.07,1214.47 1010.65,1214.47 1011.24,1214.47 1011.83,1214.47 1012.41,1214.47 1013,1214.47 1013.59,1214.47 1014.17,1214.47 1014.76,1214.47 1015.35,1214.47 1015.93,1214.47 1016.52,1214.47 1017.11,1214.47 1017.69,1214.47 1018.28,1214.47 1018.86,1214.47 1019.45,1214.47 1020.04,1214.47 1020.62,1214.47 1021.21,1214.47 1021.8,1214.47 1022.38,1214.47 1022.97,1214.47 1023.56,1214.47 1024.14,1214.47 1024.73,1214.47 1025.32,1214.47 1025.9,1214.47 1026.49,1214.47 1027.07,1214.47 1027.66,1214.47 1028.25,1214.47 1028.83,1214.47 1029.42,1214.47 1030.01,1214.47 1030.59,1214.47 1031.18,1214.47 1031.77,1214.47 1032.35,1214.47 1032.94,1214.47 1033.52,1214.47 1034.11,1214.47 1034.7,1214.47 1035.28,1214.47 1035.87,1214.47 1036.46,1214.47 1037.04,1214.47 1037.63,1214.47 1038.22,1214.47 1038.8,1214.47 1039.39,1214.47 1039.98,1214.47 1040.56,1214.47 1041.15,1214.47 1041.73,1214.47 1042.32,1214.47 1042.91,1214.47 1043.49,1214.47 1044.08,1214.47 1044.67,1214.47 1045.25,1214.47 1045.84,1214.47 1046.43,1214.47 1047.01,1214.47 1047.6,1214.47 1048.19,1214.47 1048.77,1214.47 1049.36,1214.47 1049.94,1214.47 1050.53,1214.47 1051.12,1214.47 1051.7,1214.47 1052.29,1214.47 1052.88,1214.47 1053.46,1214.47 1054.05,1214.47 1054.64,1214.47 1055.22,1214.47 1055.81,1214.47 1056.39,1214.47 1056.98,1214.47 1057.57,1214.47 1058.15,1214.47 1058.74,1214.47 1059.33,1214.47 1059.91,1214.47 1060.5,1214.47 1061.09,1214.47 1061.67,1214.47 1062.26,1214.47 1062.85,1214.47 1063.43,1214.47 1064.02,1214.47 1064.6,1214.47 1065.19,1214.47 1065.78,1214.47 1066.36,1214.47 1066.95,1214.47 1067.54,1214.47 1068.12,1214.47 1068.71,1214.47 1069.3,1214.47 1069.88,1214.47 1070.47,1214.47 1071.06,1214.47 1071.64,1214.47 1072.23,1214.47 1072.81,1214.47 1073.4,1214.47 1073.99,1214.47 1074.57,1214.47 1075.16,1214.47 1075.75,1214.47 1076.33,1214.47 1076.92,1214.47 1077.51,1214.47 1078.09,1214.47 1078.68,1214.47 1079.26,1214.47 1079.85,1214.47 1080.44,1214.47 1081.02,1214.47 1081.61,1214.47 1082.2,1214.47 1082.78,1214.47 1083.37,1214.47 1083.96,1214.47 1084.54,1214.47 1085.13,1214.47 1085.72,1214.47 1086.3,1214.47 1086.89,1214.47 1087.47,1214.47 1088.06,1214.47 1088.65,1214.47 1089.23,1214.47 1089.82,1214.47 1090.41,1214.47 1090.99,1214.47 1091.58,1214.47 1092.17,1214.47 1092.75,1214.47 1093.34,1214.47 1093.93,1214.47 1094.51,1214.47 1095.1,1214.47 1095.68,1214.47 1096.27,1214.47 1096.86,1214.47 1097.44,1214.47 1098.03,1214.47 1098.62,1214.47 1099.2,1214.47 1099.79,1214.47 1100.38,1214.47 1100.96,1214.47 1101.55,1214.47 1102.14,1214.47 1102.72,1214.47 1103.31,1214.47 1103.89,1214.47 1104.48,1214.47 1105.07,1214.47 1105.65,1214.47 1106.24,1214.47 1106.83,1214.47 1107.41,1214.47 1108,1214.47 1108.59,1214.47 1109.17,1214.47 1109.76,1214.47 1110.34,1214.47 1110.93,1214.47 1111.52,1214.47 1112.1,1214.47 1112.69,1214.47 1113.28,1214.47 1113.86,1214.47 1114.45,1214.47 1115.04,1214.47 1115.62,1214.47 1116.21,1214.47 1116.8,1214.47 1117.38,1214.47 1117.97,1214.47 1118.55,1214.47 1119.14,1214.47 1119.73,1214.47 1120.31,1214.47 1120.9,1214.47 1121.49,1214.47 1122.07,1214.47 1122.66,1214.47 1123.25,1214.47 1123.83,1214.47 1124.42,1214.47 1125.01,1214.47 1125.59,1214.47 1126.18,1214.47 1126.76,1214.47 1127.35,1214.47 1127.94,1214.47 1128.52,1214.47 1129.11,1214.47 1129.7,1214.47 1130.28,1214.47 1130.87,1214.47 1131.46,1214.47 1132.04,1214.47 1132.63,1214.47 1133.21,1214.47 1133.8,1214.47 1134.39,1214.47 1134.97,1214.47 1135.56,1214.47 1136.15,1214.47 1136.73,1214.47 1137.32,1214.47 1137.91,1214.47 1138.49,1214.47 1139.08,1214.47 1139.67,1214.47 1140.25,1214.47 1140.84,1214.47 1141.42,1214.47 1142.01,1214.47 1142.6,1214.47 1143.18,1214.47 1143.77,1214.47 1144.36,1214.47 1144.94,1214.47 1145.53,1214.47 1146.12,1214.47 1146.7,1214.47 1147.29,1214.47 1147.88,1214.47 1148.46,1214.47 1149.05,1214.47 1149.63,1214.47 1150.22,1214.47 1150.81,1214.47 1151.39,1214.47 1151.98,1214.47 1152.57,1214.47 1153.15,1214.47 1153.74,1214.47 1154.33,1214.47 1154.91,1214.47 1155.5,1214.47 1156.09,1214.47 1156.67,1214.47 1157.26,1214.47 1157.84,1214.47 1158.43,1214.47 1159.02,1214.47 1159.6,1214.47 1160.19,1214.47 1160.78,1214.47 1161.36,1214.47 1161.95,1214.47 1162.54,1214.47 1163.12,1214.47 1163.71,1214.47 1164.29,1214.47 1164.88,1214.47 1165.47,1214.47 1166.05,1214.47 1166.64,1214.47 1167.23,1214.47 1167.81,1214.47 1168.4,1214.47 1168.99,1214.47 1169.57,1214.47 1170.16,1214.47 1170.75,1214.47 1171.33,1214.47 1171.92,1214.47 1172.5,1214.47 1173.09,1214.47 1173.68,1214.47 1174.26,1214.47 1174.85,1214.47 1175.44,1214.47 1176.02,1214.47 1176.61,1214.47 1177.2,1214.47 1177.78,1214.47 1178.37,1214.47 1178.96,1214.47 1179.54,1214.47 1180.13,1214.47 1180.71,1214.47 1181.3,1214.47 1181.89,1214.47 1182.47,1214.47 1183.06,1214.47 1183.65,1214.47 1184.23,1214.47 1184.82,1214.47 1185.41,1214.47 1185.99,1214.47 1186.58,1214.47 1187.16,1214.47 1187.75,1214.47 1188.34,1214.47 1188.92,1214.47 1189.51,1214.47 1190.1,1214.47 1190.68,1214.47 1191.27,1214.47 1191.86,1214.47 1192.44,1214.47 1193.03,1214.47 1193.62,1214.47 1194.2,1214.47 1194.79,1214.47 1195.37,1214.47 1195.96,1214.47 1196.55,1214.47 1197.13,1214.47 1197.72,1214.47 1198.31,1214.47 1198.89,1214.47 1199.48,1214.47 1200.07,1214.47 1200.65,1214.47 1201.24,1214.47 1201.83,1214.47 1202.41,1214.47 1203,1214.47 1203.58,1214.47 1204.17,1214.47 1204.76,1214.47 1205.34,1214.47 1205.93,1214.47 1206.52,1214.47 1207.1,1214.47 1207.69,1214.47 1208.28,1214.47 1208.86,1214.47 1209.45,1214.47 1210.03,1214.47 1210.62,1214.47 1211.21,1214.47 1211.79,1214.47 1212.38,1214.47 1212.97,1214.47 1213.55,1214.47 1214.14,1214.47 1214.73,1214.47 1215.31,1214.47 1215.9,1214.47 1216.49,1214.47 1217.07,1214.47 1217.66,1214.47 1218.24,1214.47 1218.83,1214.47 1219.42,1214.47 1220,1214.47 1220.59,1214.47 1221.18,1214.47 1221.76,1214.47 1222.35,1214.47 1222.94,1214.47 1223.52,1214.47 1224.11,1214.47 1224.7,1214.47 1225.28,1214.47 1225.87,1214.47 1226.45,1214.47 1227.04,1214.47 1227.63,1214.47 1228.21,1214.47 1228.8,1214.47 1229.39,1214.47 1229.97,1214.47 1230.56,1214.47 1231.15,1214.47 1231.73,1214.47 1232.32,1214.47 1232.91,1214.47 1233.49,1214.47 1234.08,1214.47 1234.66,1214.47 1235.25,1214.47 1235.84,1214.47 1236.42,1214.47 1237.01,1214.47 1237.6,1214.47 1238.18,1214.47 1238.77,1214.47 1239.36,1214.47 1239.94,1214.47 1240.53,1214.47 1241.11,1214.47 1241.7,1214.47 1242.29,1214.47 1242.87,1214.47 1243.46,1214.47 1244.05,1214.47 1244.63,1214.47 1245.22,1214.47 1245.81,1214.47 1246.39,1214.47 1246.98,1214.47 1247.57,1214.47 1248.15,1214.47 1248.74,1214.47 1249.32,1214.47 1249.91,1214.47 1250.5,1214.47 1251.08,1214.47 1251.67,1214.47 1252.26,1214.47 1252.84,1214.47 1253.43,1214.47 1254.02,1214.47 1254.6,1214.47 1255.19,1214.47 1255.78,1214.47 1256.36,1214.47 1256.95,1214.47 1257.53,1214.47 1258.12,1214.47 1258.71,1214.47 1259.29,1214.47 1259.88,1214.47 1260.47,1214.47 1261.05,1214.47 1261.64,1214.47 1262.23,1214.47 1262.81,1214.47 1263.4,1214.47 1263.98,1214.47 1264.57,1214.47 1265.16,1214.47 1265.74,1214.47 1266.33,1214.47 1266.92,1214.47 1267.5,1214.47 1268.09,1214.47 1268.68,1214.47 1269.26,1214.47 1269.85,1214.47 1270.44,1214.47 1271.02,1214.47 1271.61,1214.47 1272.19,1214.47 1272.78,1214.47 1273.37,1214.47 1273.95,1214.47 1274.54,1214.47 1275.13,1214.47 1275.71,1214.47 1276.3,1214.47 1276.89,1214.47 1277.47,1214.47 1278.06,1214.47 1278.65,1214.47 1279.23,1214.47 1279.82,1214.47 1280.4,1214.47 1280.99,1214.47 1281.58,1214.47 1282.16,1214.47 1282.75,1214.47 1283.34,1214.47 1283.92,1214.47 1284.51,1214.47 1285.1,1214.47 1285.68,1214.47 1286.27,1214.47 1286.86,1214.47 1287.44,1214.47 1288.03,1214.47 1288.61,1214.47 1289.2,1214.47 1289.79,1214.47 1290.37,1214.47 1290.96,1214.47 1291.55,1214.47 1292.13,1214.47 1292.72,1214.47 1293.31,1214.47 1293.89,1214.47 1294.48,1214.47 1295.06,1214.47 1295.65,1214.47 1296.24,1214.47 1296.82,1214.47 1297.41,1214.47 1298,1214.47 1298.58,1214.47 1299.17,1214.47 1299.76,1214.47 1300.34,1214.47 1300.93,1214.47 1301.52,1214.47 1302.1,1214.47 1302.69,1214.47 1303.27,1214.47 1303.86,1214.47 1304.45,1214.47 1305.03,1214.47 1305.62,1214.47 1306.21,1214.47 1306.79,1214.47 1307.38,1214.47 1307.97,1214.47 1308.55,1214.47 1309.14,1214.47 1309.73,1214.47 1310.31,1214.47 1310.9,1214.47 1311.48,1214.47 1312.07,1214.47 1312.66,1214.47 1313.24,1214.47 1313.83,1214.47 1314.42,1214.47 1315,1214.47 1315.59,1214.47 1316.18,1214.47 1316.76,1214.47 1317.35,1214.47 1317.93,1214.47 1318.52,1214.47 1319.11,1214.47 1319.69,1214.47 1320.28,1214.47 1320.87,1214.47 1321.45,1214.47 1322.04,1214.47 1322.63,1214.47 1323.21,1214.47 1323.8,1214.47 1324.39,1214.47 1324.97,1214.47 1325.56,1214.47 1326.14,1214.47 1326.73,1214.47 1327.32,1214.47 1327.9,1214.47 1328.49,1214.47 1329.08,1214.47 1329.66,1214.47 1330.25,1214.47 1330.84,1214.47 1331.42,1214.47 1332.01,1214.47 1332.6,1214.47 1333.18,1214.47 1333.77,1214.47 1334.35,1214.47 1334.94,1214.47 1335.53,1214.47 1336.11,1214.47 1336.7,1214.47 1337.29,1214.47 1337.87,1214.47 1338.46,1214.47 1339.05,1214.47 1339.63,1214.47 1340.22,1214.47 1340.8,1214.47 1341.39,1214.47 1341.98,1214.47 1342.56,1214.47 1343.15,1214.47 1343.74,1214.47 1344.32,1214.47 1344.91,1214.47 1345.5,1214.47 1346.08,1214.47 1346.67,1214.47 1347.26,1214.47 1347.84,1214.47 1348.43,1214.47 1349.01,1214.47 1349.6,1214.47 1350.19,1214.47 1350.77,1214.47 1351.36,1214.47 1351.95,1214.47 1352.53,1214.47 1353.12,1214.47 1353.71,1214.47 1354.29,1214.47 1354.88,1214.47 1355.47,1214.47 1356.05,1214.47 1356.64,1214.47 1357.22,1214.47 1357.81,1214.47 1358.4,1214.47 1358.98,1214.47 1359.57,1214.47 1360.16,1214.47 1360.74,1214.47 1361.33,1214.47 1361.92,1214.47 1362.5,1214.47 1363.09,1214.47 1363.68,1214.47 1364.26,1214.47 1364.85,1214.47 1365.43,1214.47 1366.02,1214.47 1366.61,1214.47 1367.19,1214.47 1367.78,1214.47 1368.37,1214.47 1368.95,1214.47 1369.54,1214.47 1370.13,1214.47 1370.71,1214.47 1371.3,1214.47 1371.88,1214.47 1372.47,1214.47 1373.06,1214.47 1373.64,1214.47 1374.23,1214.47 1374.82,1214.47 1375.4,1214.47 1375.99,1214.47 1376.58,1214.47 1377.16,1214.47 1377.75,1214.47 1378.34,1214.47 1378.92,1214.47 1379.51,1214.47 1380.09,1214.47 1380.68,1214.47 1381.27,1214.47 1381.85,1214.47 1382.44,1214.47 1383.03,1214.47 1383.61,1214.47 1384.2,1214.47 1384.79,1214.47 1385.37,1214.47 1385.96,1214.47 1386.55,1214.47 1387.13,1214.47 1387.72,1214.47 1388.3,1214.47 1388.89,1214.47 1389.48,1214.47 1390.06,1214.47 1390.65,1214.47 1391.24,1214.47 1391.82,1214.47 1392.41,1214.47 1393,1214.47 1393.58,1214.47 1394.17,1214.47 1394.75,1214.47 1395.34,1214.47 1395.93,1214.47 1396.51,1214.47 1397.1,1214.47 1397.69,1214.47 1398.27,1214.47 1398.86,1214.47 1399.45,1214.47 1400.03,1214.47 1400.62,1214.47 1401.21,1214.47 1401.79,1214.47 1402.38,1214.47 1402.96,1214.47 1403.55,1214.47 1404.14,1214.47 1404.72,1214.47 1405.31,1214.47 1405.9,1214.47 1406.48,1214.47 1407.07,1214.47 1407.66,1214.47 1408.24,1214.47 1408.83,1214.47 1409.42,1214.47 1410,1214.47 1410.59,1214.47 1411.17,1214.47 1411.76,1214.47 1412.35,1214.47 1412.93,1214.47 1413.52,1214.47 1414.11,1214.47 1414.69,1214.47 1415.28,1214.47 1415.87,1214.47 1416.45,1214.47 1417.04,1214.47 1417.63,1214.47 1418.21,1214.47 1418.8,1214.47 1419.38,1214.47 1419.97,1214.47 1420.56,1214.47 1421.14,1214.47 1421.73,1214.47 1422.32,1214.47 1422.9,1214.47 1423.49,1214.47 1424.08,1214.47 1424.66,1214.47 1425.25,1214.47 1425.83,1214.47 1426.42,1214.47 1427.01,1214.47 1427.59,1214.47 1428.18,1214.47 1428.77,1214.47 1429.35,1214.47 1429.94,1214.47 1430.53,1214.47 1431.11,1214.47 1431.7,1214.47 1432.29,1214.47 1432.87,1214.47 1433.46,1214.47 1434.04,1214.47 1434.63,1214.47 1435.22,1214.47 1435.8,1214.47 1436.39,1214.47 1436.98,1214.47 1437.56,1214.47 1438.15,1214.47 1438.74,1214.47 1439.32,1214.47 1439.91,1214.47 1440.5,1214.47 1441.08,1214.47 1441.67,1214.47 1442.25,1214.47 1442.84,1214.47 1443.43,1214.47 1444.01,1214.47 1444.6,1214.47 1445.19,1214.47 1445.77,1214.47 1446.36,1214.47 1446.95,1214.47 1447.53,1214.47 1448.12,1214.47 1448.7,1214.47 1449.29,1214.47 1449.88,1214.47 1450.46,1214.47 1451.05,1214.47 1451.64,1214.47 1452.22,1214.47 1452.81,1214.47 1453.4,1214.47 1453.98,1214.47 1454.57,1214.47 1455.16,1214.47 1455.74,1214.47 1456.33,1214.47 1456.91,1214.47 1457.5,1214.47 1458.09,1214.47 1458.67,1214.47 1459.26,1214.47 1459.85,1214.47 1460.43,1214.47 1461.02,1214.47 1461.61,1214.47 1462.19,1214.47 1462.78,1214.47 1463.37,1214.47 1463.95,1214.47 1464.54,1214.47 1465.12,1214.47 1465.71,1214.47 1466.3,1214.47 1466.88,1214.47 1467.47,1214.47 1468.06,1214.47 1468.64,1214.47 1469.23,1214.47 1469.82,1214.47 1470.4,1214.47 1470.99,1214.47 1471.57,1214.47 1472.16,1214.47 1472.75,1214.47 1473.33,1214.47 1473.92,1214.47 1474.51,1214.47 1475.09,1214.47 1475.68,1214.47 1476.27,1214.47 1476.85,1214.47 1477.44,1214.47 1478.03,1214.47 1478.61,1214.47 1479.2,1214.47 1479.78,1214.47 1480.37,1214.47 1480.96,1214.47 1481.54,1214.47 1482.13,1214.47 1482.72,1214.47 1483.3,1214.47 1483.89,1214.47 1484.48,1214.47 1485.06,1214.47 1485.65,1214.47 1486.24,1214.47 1486.82,1214.47 1487.41,1214.47 1487.99,1214.47 1488.58,1214.47 1489.17,1214.47 1489.75,1214.47 1490.34,1214.47 1490.93,1214.47 1491.51,1214.47 1492.1,1214.47 1492.69,1214.47 1493.27,1214.47 1493.86,1214.47 1494.45,1214.47 1495.03,1214.47 1495.62,1214.47 1496.2,1214.47 1496.79,1214.47 1497.38,1214.47 1497.96,1214.47 1498.55,1214.47 1499.14,1214.47 1499.72,1214.47 1500.31,1214.47 1500.9,1214.47 1501.48,1214.47 1502.07,1214.47 1502.65,1214.47 1503.24,1214.47 1503.83,1214.47 1504.41,1214.47 1505,1214.47 1505.59,1214.47 1506.17,1214.47 1506.76,1214.47 1507.35,1214.47 1507.93,1214.47 1508.52,1214.47 1509.11,1214.47 1509.69,1214.47 1510.28,1214.47 1510.86,1214.47 1511.45,1214.47 1512.04,1214.47 1512.62,1214.47 1513.21,1214.47 1513.8,1214.47 1514.38,1214.47 1514.97,1214.47 1515.56,1214.47 1516.14,1214.47 1516.73,1214.47 1517.32,1214.47 1517.9,1214.47 1518.49,1214.47 1519.07,1214.47 1519.66,1214.47 1520.25,1214.47 1520.83,1214.47 1521.42,1214.47 1522.01,1214.47 1522.59,1214.47 1523.18,1214.47 1523.77,1214.47 1524.35,1214.47 1524.94,1214.47 1525.52,1214.47 1526.11,1214.47 1526.7,1214.47 1527.28,1214.47 1527.87,1214.47 1528.46,1214.47 1529.04,1214.47 1529.63,1214.47 1530.22,1214.47 1530.8,1214.47 1531.39,1214.47 1531.98,1214.47 1532.56,1214.47 1533.15,1214.47 1533.73,1214.47 1534.32,1214.47 1534.91,1214.47 1535.49,1214.47 1536.08,1214.47 1536.67,1214.47 1537.25,1214.47 1537.84,1214.47 1538.43,1214.47 1539.01,1214.47 1539.6,1214.47 1540.19,1214.47 1540.77,1214.47 1541.36,1214.47 1541.94,1214.47 1542.53,1214.47 1543.12,1214.47 1543.7,1214.47 1544.29,1214.47 1544.88,1214.47 1545.46,1214.47 1546.05,1214.47 1546.64,1214.47 1547.22,1214.47 1547.81,1214.47 1548.4,1214.47 1548.98,1214.47 1549.57,1214.47 1550.15,1214.47 1550.74,1214.47 1551.33,1214.47 1551.91,1214.47 1552.5,1214.47 1553.09,1214.47 1553.67,1214.47 1554.26,1214.47 1554.85,1214.47 1555.43,1214.47 1556.02,1214.47 1556.6,1214.47 1557.19,1214.47 1557.78,1214.47 1558.36,1214.47 1558.95,1214.47 1559.54,1214.47 1560.12,1214.47 1560.71,1214.47 1561.3,1214.47 1561.88,1214.47 1562.47,1214.47 1563.06,1214.47 1563.64,1214.47 1564.23,1214.47 1564.81,1214.47 1565.4,1214.47 1565.99,1214.47 1566.57,1214.47 1567.16,1214.47 1567.75,1214.47 1568.33,1214.47 1568.92,1214.47 1569.51,1214.47 1570.09,1214.47 1570.68,1214.47 1571.27,1214.47 1571.85,1214.47 1572.44,1214.47 1573.02,1214.47 1573.61,1214.47 1574.2,1214.47 1574.78,1214.47 1575.37,1214.47 1575.96,1214.47 1576.54,1214.47 1577.13,1214.47 1577.72,1214.47 1578.3,1214.47 1578.89,1214.47 1579.47,1214.47 1580.06,1214.47 1580.65,1214.47 1581.23,1214.47 1581.82,1214.47 1582.41,1214.47 1582.99,1214.47 1583.58,1214.47 1584.17,1214.47 1584.75,1214.47 1585.34,1214.47 1585.93,1214.47 1586.51,1214.47 1587.1,1214.47 1587.68,1214.47 1588.27,1214.47 1588.86,1214.47 1589.44,1214.47 1590.03,1214.47 1590.62,1214.47 1591.2,1214.47 1591.79,1214.47 1592.38,1214.47 1592.96,1214.47 1593.55,1214.47 1594.14,1214.47 1594.72,1214.47 1595.31,1214.47 1595.89,1214.47 1596.48,1214.47 1597.07,1214.47 1597.65,1214.47 1598.24,1214.47 1598.83,1214.47 1599.41,1214.47 1600,1214.47 1600.59,1214.47 1601.17,1214.47 1601.76,1214.47 1602.34,1214.47 1602.93,1214.47 1603.52,1214.47 1604.1,1214.47 1604.69,1214.47 1605.28,1214.47 1605.86,1214.47 1606.45,1214.47 1607.04,1214.47 1607.62,1214.47 1608.21,1214.47 1608.8,1214.47 1609.38,1214.47 1609.97,1214.47 1610.55,1214.47 1611.14,1214.47 1611.73,1214.47 1612.31,1214.47 1612.9,1214.47 1613.49,1214.47 1614.07,1214.47 1614.66,1214.47 1615.25,1214.47 1615.83,1214.47 1616.42,1214.47 1617.01,1214.47 1617.59,1214.47 1618.18,1214.47 1618.76,1214.47 1619.35,1214.47 1619.94,1214.47 1620.52,1214.47 1621.11,1214.47 1621.7,1214.47 1622.28,1214.47 1622.87,1214.47 1623.46,1214.47 1624.04,1214.47 1624.63,1214.47 1625.22,1214.47 1625.8,1214.47 1626.39,1214.47 1626.97,1214.47 1627.56,1214.47 1628.15,1214.47 1628.73,1214.47 1629.32,1214.47 1629.91,1214.47 1630.49,1214.47 1631.08,1214.47 1631.67,1214.47 1632.25,1214.47 1632.84,1214.47 1633.42,1214.47 1634.01,1214.47 1634.6,1214.47 1635.18,1214.47 1635.77,1214.47 1636.36,1214.47 1636.94,1214.47 1637.53,1214.47 1638.12,1214.47 1638.7,1214.47 1639.29,1214.47 1639.88,1214.47 1640.46,1214.47 1641.05,1214.47 1641.63,1214.47 1642.22,1214.47 1642.81,1214.47 1643.39,1214.47 1643.98,1214.47 1644.57,1214.47 1645.15,1214.47 1645.74,1214.47 1646.33,1214.47 1646.91,1214.47 1647.5,1214.47 1648.09,1214.47 1648.67,1214.47 1649.26,1214.47 1649.84,1214.47 1650.43,1214.47 1651.02,1214.47 1651.6,1214.47 1652.19,1214.47 1652.78,1214.47 1653.36,1214.47 1653.95,1214.47 1654.54,1214.47 1655.12,1214.47 1655.71,1214.47 1656.29,1214.47 1656.88,1214.47 1657.47,1214.47 1658.05,1214.47 1658.64,1214.47 1659.23,1214.47 1659.81,1214.47 1660.4,1214.47 1660.99,1214.47 1661.57,1214.47 1662.16,1214.47 1662.75,1214.47 1663.33,1214.47 1663.92,1214.47 1664.5,1214.47 1665.09,1214.47 1665.68,1214.47 1666.26,1214.47 1666.85,1214.47 1667.44,1214.47 1668.02,1214.47 1668.61,1214.47 1669.2,1214.47 1669.78,1214.47 1670.37,1214.47 1670.96,1214.47 1671.54,1214.47 1672.13,1214.47 1672.71,1214.47 1673.3,1214.47 1673.89,1214.47 1674.47,1214.47 1675.06,1214.47 1675.65,1214.47 1676.23,1214.47 1676.82,1214.47 1677.41,1214.47 1677.99,1214.47 1678.58,1214.47 1679.17,1214.47 1679.75,1214.47 1680.34,1214.47 1680.92,1214.47 1681.51,1214.47 1682.1,1214.47 1682.68,1214.47 1683.27,1214.47 1683.86,1214.47 1684.44,1214.47 1685.03,1214.47 1685.62,1214.47 1686.2,1214.47 1686.79,1214.47 1687.37,1214.47 1687.96,1214.47 1688.55,1214.47 1689.13,1214.47 1689.72,1214.47 1690.31,1214.47 1690.89,1214.47 1691.48,1214.47 1692.07,1214.47 1692.65,1214.47 1693.24,1214.47 1693.83,1214.47 1694.41,1214.47 1695,1214.47 1695.58,1214.47 1696.17,1214.47 1696.76,1214.47 1697.34,1214.47 1697.93,1214.47 1698.52,1214.47 1699.1,1214.47 1699.69,1214.47 1700.28,1214.47 1700.86,1214.47 1701.45,1214.47 1702.04,1214.47 1702.62,1214.47 1703.21,1214.47 1703.79,1214.47 1704.38,1214.47 1704.97,1214.47 1705.55,1214.47 1706.14,1214.47 1706.73,1214.47 1707.31,1214.47 1707.9,1214.47 1708.49,1214.47 1709.07,1214.47 1709.66,1214.47 1710.24,1214.47 1710.83,1214.47 1711.42,1214.47 1712,1214.47 1712.59,1214.47 1713.18,1214.47 1713.76,1214.47 1714.35,1214.47 1714.94,1214.47 1715.52,1214.47 1716.11,1214.47 1716.7,1214.47 1717.28,1214.47 1717.87,1214.47 1718.45,1214.47 1719.04,1214.47 1719.63,1214.47 1720.21,1214.47 1720.8,1214.47 1721.39,1214.47 1721.97,1214.47 1722.56,1214.47 1723.15,1214.47 1723.73,1214.47 1724.32,1214.47 1724.91,1214.47 1725.49,1214.47 1726.08,1214.47 1726.66,1214.47 1727.25,1214.47 1727.84,1214.47 1728.42,1214.47 1729.01,1214.47 1729.6,1214.47 1730.18,1214.47 1730.77,1214.47 1731.36,1214.47 1731.94,1214.47 1732.53,1214.47 1733.11,1214.47 1733.7,1214.47 1734.29,1214.47 1734.87,1214.47 1735.46,1214.47 1736.05,1214.47 1736.63,1214.47 1737.22,1214.47 1737.81,1214.47 1738.39,1214.47 1738.98,1214.47 1739.57,1214.47 1740.15,1214.47 1740.74,1214.47 1741.32,1214.47 1741.91,1214.47 1742.5,1214.47 1743.08,1214.47 1743.67,1214.47 1744.26,1214.47 1744.84,1214.47 1745.43,1214.47 1746.02,1214.47 1746.6,1214.47 1747.19,1214.47 1747.78,1214.47 1748.36,1214.47 1748.95,1214.47 1749.53,1214.47 1750.12,1214.47 1750.71,1214.47 1751.29,1214.47 1751.88,1214.47 1752.47,1214.47 1753.05,1214.47 1753.64,1214.47 1754.23,1214.47 1754.81,1214.47 1755.4,1214.47 1755.99,1214.47 1756.57,1214.47 1757.16,1214.47 1757.74,1214.47 1758.33,1214.47 1758.92,1214.47 1759.5,1214.47 1760.09,1214.47 1760.68,1214.47 1761.26,1214.47 1761.85,1214.47 1762.44,1214.47 1763.02,1214.47 1763.61,1214.47 1764.19,1214.47 1764.78,1214.47 1765.37,1214.47 1765.95,1214.47 1766.54,1214.47 1767.13,1214.47 1767.71,1214.47 1768.3,1214.47 1768.89,1214.47 1769.47,1214.47 1770.06,1214.47 1770.65,1214.47 1771.23,1214.47 1771.82,1214.47 1772.4,1214.47 1772.99,1214.47 1773.58,1214.47 1774.16,1214.47 1774.75,1214.47 1775.34,1214.47 1775.92,1214.47 1776.51,1214.47 1777.1,1214.47 1777.68,1214.47 1778.27,1214.47 1778.86,1214.47 1779.44,1214.47 1780.03,1214.47 1780.61,1214.47 1781.2,1214.47 1781.79,1214.47 1782.37,1214.47 1782.96,1214.47 1783.55,1214.47 1784.13,1214.47 1784.72,1214.47 1785.31,1214.47 1785.89,1214.47 1786.48,1214.47 1787.06,1214.47 1787.65,1214.47 1788.24,1214.47 1788.82,1214.47 1789.41,1214.47 1790,1214.47 1790.58,1214.47 1791.17,1214.47 1791.76,1214.47 1792.34,1214.47 1792.93,1214.47 1793.52,1214.47 1794.1,1214.47 1794.69,1214.47 1795.27,1214.47 1795.86,1214.47 1796.45,1214.47 1797.03,1214.47 1797.62,1214.47 1798.21,1214.47 1798.79,1214.47 1799.38,1214.47 1799.97,1214.47 1800.55,1214.47 1801.14,1214.47 1801.73,1214.47 1802.31,1214.47 1802.9,1214.47 1803.48,1214.47 1804.07,1214.47 1804.66,1214.47 1805.24,1214.47 1805.83,1214.47 1806.42,1214.47 1807,1214.47 1807.59,1214.47 1808.18,1214.47 1808.76,1214.47 1809.35,1214.47 1809.94,1214.47 1810.52,1214.47 1811.11,1214.47 1811.69,1214.47 1812.28,1214.47 1812.87,1214.47 1813.45,1214.47 1814.04,1214.47 1814.63,1214.47 1815.21,1214.47 1815.8,1214.47 1816.39,1214.47 1816.97,1214.47 1817.56,1214.47 1818.14,1214.47 1818.73,1214.47 1819.32,1214.47 1819.9,1214.47 1820.49,1214.47 1821.08,1214.47 1821.66,1214.47 1822.25,1214.47 1822.84,1214.47 1823.42,1214.47 1824.01,1214.47 1824.6,1214.47 1825.18,1214.47 1825.77,1214.47 1826.35,1214.47 1826.94,1214.47 1827.53,1214.47 1828.11,1214.47 1828.7,1214.47 1829.29,1214.47 1829.87,1214.47 1830.46,1214.47 1831.05,1214.47 1831.63,1214.47 1832.22,1214.47 1832.81,1214.47 1833.39,1214.47 1833.98,1214.47 1834.56,1214.47 1835.15,1214.47 1835.74,1214.47 1836.32,1214.47 1836.91,1214.47 1837.5,1214.47 1838.08,1214.47 1838.67,1214.47 1839.26,1214.47 1839.84,1214.47 1840.43,1214.47 1841.01,1214.47 1841.6,1214.47 1842.19,1214.47 1842.77,1214.47 1843.36,1214.47 1843.95,1214.47 1844.53,1214.47 1845.12,1214.47 1845.71,1214.47 1846.29,1214.47 1846.88,1214.47 1847.47,1214.47 1848.05,1214.47 1848.64,1214.47 1849.22,1214.47 1849.81,1214.47 1850.4,1214.47 1850.98,1214.47 1851.57,1214.47 1852.16,1214.47 1852.74,1214.47 1853.33,1214.47 1853.92,1214.47 1854.5,1214.47 1855.09,1214.47 1855.68,1214.47 1856.26,1214.47 1856.85,1214.47 1857.43,1214.47 1858.02,1214.47 1858.61,1214.47 1859.19,1214.47 1859.78,1214.47 1860.37,1214.47 1860.95,1214.47 1861.54,1214.47 1862.13,1214.47 1862.71,1214.47 1863.3,1214.47 1863.88,1214.47 1864.47,1214.47 1865.06,1214.47 1865.64,1214.47 1866.23,1214.47 1866.82,1214.47 1867.4,1214.47 1867.99,1214.47 1868.58,1214.47 1869.16,1214.47 1869.75,1214.47 1870.34,1214.47 1870.92,1214.47 1871.51,1214.47 1872.09,1214.47 1872.68,1214.47 1873.27,1214.47 1873.85,1214.47 1874.44,1214.47 1875.03,1214.47 1875.61,1214.47 1876.2,1214.47 1876.79,1214.47 1877.37,1214.47 1877.96,1214.47 1878.55,1214.47 1879.13,1214.47 1879.72,1214.47 1880.3,1214.47 1880.89,1214.47 1881.48,1214.47 1882.06,1214.47 1882.65,1214.47 1883.24,1214.47 1883.82,1214.47 1884.41,1214.47 1885,1214.47 1885.58,1214.47 1886.17,1214.47 1886.76,1214.47 1887.34,1214.47 1887.93,1214.47 1888.51,1214.47 1889.1,1214.47 1889.69,1214.47 1890.27,1214.47 1890.86,1214.47 1891.45,1214.47 1892.03,1214.47 1892.62,1214.47 1893.21,1214.47 1893.79,1214.47 1894.38,1214.47 1894.96,1214.47 1895.55,1214.47 1896.14,1214.47 1896.72,1214.47 1897.31,1214.47 1897.9,1214.47 1898.48,1214.47 1899.07,1214.47 1899.66,1214.47 1900.24,1214.47 1900.83,1214.47 1901.42,1214.47 1902,1214.47 1902.59,1214.47 1903.17,1214.47 1903.76,1214.47 1904.35,1214.47 1904.93,1214.47 1905.52,1214.47 1906.11,1214.47 1906.69,1214.47 1907.28,1214.47 1907.87,1214.47 1908.45,1214.47 1909.04,1214.47 1909.63,1214.47 1910.21,1214.47 1910.8,1214.47 1911.38,1214.47 1911.97,1214.47 1912.56,1214.47 1913.14,1214.47 1913.73,1214.47 1914.32,1214.47 1914.9,1214.47 1915.49,1214.47 1916.08,1214.47 1916.66,1214.47 1917.25,1214.47 1917.83,1214.47 1918.42,1214.47 1919.01,1214.47 1919.59,1214.47 1920.18,1214.47 1920.77,1214.47 1921.35,1214.47 1921.94,1214.47 1922.53,1214.47 1923.11,1214.47 1923.7,1214.47 1924.29,1214.47 1924.87,1214.47 1925.46,1214.47 1926.04,1214.47 1926.63,1214.47 1927.22,1214.47 1927.8,1214.47 1928.39,1214.47 1928.98,1214.47 1929.56,1214.47 1930.15,1214.47 1930.74,1214.47 1931.32,1214.47 1931.91,1214.47 1932.5,1214.47 1933.08,1214.47 1933.67,1214.47 1934.25,1214.47 1934.84,1214.47 1935.43,1214.47 1936.01,1214.47 1936.6,1214.47 1937.19,1214.47 1937.77,1214.47 1938.36,1214.47 1938.95,1214.47 1939.53,1214.47 1940.12,1214.47 1940.71,1214.47 1941.29,1214.47 1941.88,1214.47 1942.46,1214.47 1943.05,1214.47 1943.64,1214.47 1944.22,1214.47 1944.81,1214.47 1945.4,1214.47 1945.98,1214.47 1946.57,1214.47 1947.16,1214.47 1947.74,1214.47 1948.33,1214.47 1948.91,1214.47 1949.5,1214.47 1950.09,1214.47 1950.67,1214.47 1951.26,1214.47 1951.85,1214.47 1952.43,1214.47 1953.02,1214.47 1953.61,1214.47 1954.19,1214.47 1954.78,1214.47 1955.37,1214.47 1955.95,1214.47 1956.54,1214.47 1957.12,1214.47 1957.71,1214.47 1958.3,1214.47 1958.88,1214.47 1959.47,1214.47 1960.06,1214.47 1960.64,1214.47 1961.23,1214.47 1961.82,1214.47 1962.4,1214.47 1962.99,1214.47 1963.58,1214.47 1964.16,1214.47 1964.75,1214.47 1965.33,1214.47 1965.92,1214.47 1966.51,1214.47 1967.09,1214.47 1967.68,1214.47 1968.27,1214.47 1968.85,1214.47 1969.44,1214.47 1970.03,1214.47 1970.61,1214.47 1971.2,1214.47 1971.78,1214.47 1972.37,1214.47 1972.96,1214.47 1973.54,1214.47 1974.13,1214.47 1974.72,1214.47 1975.3,1214.47 1975.89,1214.47 1976.48,1214.47 1977.06,1214.47 1977.65,1214.47 1978.24,1214.47 1978.82,1214.47 1979.41,1214.47 1979.99,1214.47 1980.58,1214.47 1981.17,1214.47 1981.75,1214.47 1982.34,1214.47 1982.93,1214.47 1983.51,1214.47 1984.1,1214.47 1984.69,1214.47 1985.27,1214.47 1985.86,1214.47 1986.45,1214.47 1987.03,1214.47 1987.62,1214.47 1988.2,1214.47 1988.79,1214.47 1989.38,1214.47 1989.96,1214.47 1990.55,1214.47 1991.14,1214.47 1991.72,1214.47 1992.31,1214.47 1992.9,1214.47 1993.48,1214.47 1994.07,1214.47 1994.65,1214.47 1995.24,1214.47 1995.83,1214.47 1996.41,1214.47 1997,1214.47 1997.59,1214.47 1998.17,1214.47 1998.76,1214.47 1999.35,1214.47 1999.93,1214.47 2000.52,1214.47 2001.11,1214.47 2001.69,1214.47 2002.28,1214.47 2002.86,1214.47 2003.45,1214.47 2004.04,1214.47 2004.62,1214.47 2005.21,1214.47 2005.8,1214.47 2006.38,1214.47 2006.97,1214.47 2007.56,1214.47 2008.14,1214.47 2008.73,1214.47 2009.32,1214.47 2009.9,1214.47 2010.49,1214.47 2011.07,1214.47 2011.66,1214.47 2012.25,1214.47 2012.83,1214.47 2013.42,1214.47 2014.01,1214.47 2014.59,1214.47 2015.18,1214.47 2015.77,1214.47 2016.35,1214.47 2016.94,1214.47 2017.53,1214.47 2018.11,1214.47 2018.7,1214.47 2019.28,1214.47 2019.87,1214.47 2020.46,1214.47 2021.04,1214.47 2021.63,1214.47 2022.22,1214.47 2022.8,1214.47 2023.39,1214.47 2023.98,1214.47 2024.56,1214.47 2025.15,1214.47 2025.73,1214.47 2026.32,1214.47 2026.91,1214.47 2027.49,1214.47 2028.08,1214.47 2028.67,1214.47 2029.25,1214.47 2029.84,1214.47 2030.43,1214.47 2031.01,1214.47 2031.6,1214.47 2032.19,1214.47 2032.77,1214.47 2033.36,1214.47 2033.94,1214.47 2034.53,1214.47 2035.12,1214.47 2035.7,1214.47 2036.29,1214.47 2036.88,1214.47 2037.46,1214.47 2038.05,1214.47 2038.64,1214.47 2039.22,1214.47 2039.81,1214.47 2040.4,1214.47 2040.98,1214.47 2041.57,1214.47 2042.15,1214.47 2042.74,1214.47 2043.33,1214.47 2043.91,1214.47 2044.5,1214.47 2045.09,1214.47 2045.67,1214.47 2046.26,1214.47 2046.85,1214.47 2047.43,1214.47 2048.02,1214.47 2048.6,1214.47 2049.19,1214.47 2049.78,1214.47 2050.36,1214.47 2050.95,1214.47 2051.54,1214.47 2052.12,1214.47 2052.71,1214.47 2053.3,1214.47 2053.88,1214.47 2054.47,1214.47 2055.06,1214.47 2055.64,1214.47 2056.23,1214.47 2056.81,1214.47 2057.4,1214.47 2057.99,1214.47 2058.57,1214.47 2059.16,1214.47 2059.75,1214.47 2060.33,1214.47 2060.92,1214.47 2061.51,1214.47 2062.09,1214.47 2062.68,1214.47 2063.27,1214.47 2063.85,1214.47 2064.44,1214.47 2065.02,1214.47 2065.61,1214.47 2066.2,1214.47 2066.78,1214.47 2067.37,1214.47 2067.96,1214.47 2068.54,1214.47 2069.13,1214.47 2069.72,1214.47 2070.3,1214.47 2070.89,1214.47 2071.48,1214.47 2072.06,1214.47 2072.65,1214.47 2073.23,1214.47 2073.82,1214.47 2074.41,1214.47 2074.99,1214.47 2075.58,1214.47 2076.17,1214.47 2076.75,1214.47 2077.34,1214.47 2077.93,1214.47 2078.51,1214.47 2079.1,1214.47 2079.68,1214.47 2080.27,1214.47 2080.86,1214.47 2081.44,1214.47 2082.03,1214.47 2082.62,1214.47 2083.2,1214.47 2083.79,1214.47 2084.38,1214.47 2084.96,1214.47 2085.55,1214.47 2086.14,1214.47 2086.72,1214.47 2087.31,1214.47 2087.89,1214.47 2088.48,1214.47 2089.07,1214.47 2089.65,1214.47 2090.24,1214.47 2090.83,1214.47 2091.41,1214.47 2092,1214.47 2092.59,1214.47 2093.17,1214.47 2093.76,1214.47 2094.35,1214.47 2094.93,1214.47 2095.52,1214.47 2096.1,1214.47 2096.69,1214.47 2097.28,1214.47 2097.86,1214.47 2098.45,1214.47 2099.04,1214.47 2099.62,1214.47 2100.21,1214.47 2100.8,1214.47 2101.38,1214.47 2101.97,1214.47 2102.55,1214.47 2103.14,1214.47 2103.73,1214.47 2104.31,1214.47 2104.9,1214.47 2105.49,1214.47 2106.07,1214.47 2106.66,1214.47 2107.25,1214.47 2107.83,1214.47 2108.42,1214.47 2109.01,1214.47 2109.59,1214.47 2110.18,1214.47 2110.76,1214.47 2111.35,1214.47 2111.94,1214.47 2112.52,1214.47 2113.11,1214.47 2113.7,1214.47 2114.28,1214.47 2114.87,1214.47 2115.46,1214.47 2116.04,1214.47 2116.63,1214.47 2117.22,1214.47 2117.8,1214.47 2118.39,1214.47 2118.97,1214.47 2119.56,1214.47 2120.15,1214.47 2120.73,1214.47 2121.32,1214.47 2121.91,1214.47 2122.49,1214.47 2123.08,1214.47 2123.67,1214.47 2124.25,1214.47 2124.84,1214.47 2125.42,1214.47 2126.01,1214.47 2126.6,1214.47 2127.18,1214.47 2127.77,1214.47 2128.36,1214.47 2128.94,1214.47 2129.53,1214.47 2130.12,1214.47 2130.7,1214.47 2131.29,1214.47 2131.88,1214.47 2132.46,1214.47 2133.05,1214.47 2133.63,1214.47 2134.22,1214.47 2134.81,1214.47 2135.39,1214.47 2135.98,1214.47 2136.57,1214.47 2137.15,1214.47 2137.74,1214.47 2138.33,1214.47 2138.91,1214.47 2139.5,1214.47 2140.09,1214.47 2140.67,1214.47 2141.26,1214.47 2141.84,1214.47 2142.43,1214.47 2143.02,1214.47 2143.6,1214.47 2144.19,1214.47 2144.78,1214.47 2145.36,1214.47 2145.95,1214.47 2146.54,1214.47 2147.12,1214.47 2147.71,1214.47 2148.3,1214.47 2148.88,1214.47 2149.47,1214.47 2150.05,1214.47 2150.64,1214.47 2151.23,1214.47 2151.81,1214.47 2152.4,1214.47 2152.99,1214.47 2153.57,1214.47 2154.16,1214.47 2154.75,1214.47 2155.33,1214.47 2155.92,1214.47 2156.5,1214.47 2157.09,1214.47 2157.68,1214.47 2158.26,1214.47 \"/>\n<path clip-path=\"url(#clip522)\" d=\"M986.025 1214.4 L986.612 1214.4 L987.198 1214.4 L987.785 1214.4 L988.371 1214.4 L988.957 1214.4 L989.544 1214.4 L990.13 1214.4 L990.717 1214.4 L991.303 1214.4 L991.889 1214.4 L992.476 1214.4 L993.062 1214.4 L993.649 1214.4 L994.235 1214.4 L994.822 1214.4 L995.408 1214.4 L995.994 1214.4 L996.581 1214.4 L997.167 1214.4 L997.754 1214.4 L998.34 1214.4 L998.926 1214.4 L999.513 1214.4 L1000.1 1214.4 L1000.69 1214.4 L1001.27 1214.4 L1001.86 1214.4 L1002.44 1214.4 L1003.03 1214.4 L1003.62 1214.4 L1004.2 1214.4 L1004.79 1214.4 L1005.38 1214.4 L1005.96 1214.4 L1006.55 1214.4 L1007.14 1214.4 L1007.72 1214.4 L1008.31 1214.4 L1008.9 1214.4 L1009.48 1214.4 L1010.07 1214.4 L1010.65 1214.4 L1011.24 1214.4 L1011.83 1214.4 L1012.41 1214.4 L1013 1214.4 L1013.59 1214.4 L1014.17 1214.4 L1014.76 1214.4 L1015.35 1214.4 L1015.93 1214.4 L1016.52 1214.4 L1017.11 1214.4 L1017.69 1214.4 L1018.28 1214.4 L1018.86 1214.4 L1019.45 1214.4 L1020.04 1214.4 L1020.62 1214.4 L1021.21 1214.4 L1021.8 1214.4 L1022.38 1214.4 L1022.97 1214.4 L1023.56 1214.4 L1024.14 1214.4 L1024.73 1214.4 L1025.32 1214.4 L1025.9 1214.4 L1026.49 1214.4 L1027.07 1214.4 L1027.66 1214.4 L1028.25 1214.4 L1028.83 1214.4 L1029.42 1214.4 L1030.01 1214.4 L1030.59 1214.4 L1031.18 1214.4 L1031.77 1214.4 L1032.35 1214.4 L1032.94 1214.4 L1033.52 1214.4 L1034.11 1214.4 L1034.7 1214.4 L1035.28 1214.4 L1035.87 1214.4 L1036.46 1214.4 L1037.04 1214.4 L1037.63 1214.4 L1038.22 1214.4 L1038.8 1214.4 L1039.39 1214.4 L1039.98 1214.4 L1040.56 1214.4 L1041.15 1214.4 L1041.73 1214.4 L1042.32 1214.4 L1042.91 1214.4 L1043.49 1214.4 L1044.08 1214.4 L1044.67 1214.4 L1045.25 1214.4 L1045.84 1214.4 L1046.43 1214.4 L1047.01 1214.4 L1047.6 1214.4 L1048.19 1214.4 L1048.77 1214.4 L1049.36 1214.4 L1049.94 1214.4 L1050.53 1214.4 L1051.12 1214.4 L1051.7 1214.4 L1052.29 1214.4 L1052.88 1214.4 L1053.46 1214.4 L1054.05 1214.4 L1054.64 1214.4 L1055.22 1214.4 L1055.81 1214.4 L1056.39 1214.4 L1056.98 1214.4 L1057.57 1214.4 L1058.15 1214.4 L1058.74 1214.4 L1059.33 1214.4 L1059.91 1214.4 L1060.5 1214.4 L1061.09 1214.4 L1061.67 1214.4 L1062.26 1214.4 L1062.85 1214.4 L1063.43 1214.4 L1064.02 1214.4 L1064.6 1214.4 L1065.19 1214.4 L1065.78 1214.4 L1066.36 1214.4 L1066.95 1214.4 L1067.54 1214.4 L1068.12 1214.4 L1068.71 1214.4 L1069.3 1214.4 L1069.88 1214.4 L1070.47 1214.4 L1071.06 1214.4 L1071.64 1214.4 L1072.23 1214.4 L1072.81 1214.4 L1073.4 1214.4 L1073.99 1214.4 L1074.57 1214.4 L1075.16 1214.4 L1075.75 1214.4 L1076.33 1214.4 L1076.92 1214.4 L1077.51 1214.4 L1078.09 1214.4 L1078.68 1214.4 L1079.26 1214.4 L1079.85 1214.4 L1080.44 1214.4 L1081.02 1214.4 L1081.61 1214.4 L1082.2 1214.4 L1082.78 1214.4 L1083.37 1214.4 L1083.96 1214.4 L1084.54 1214.4 L1085.13 1214.4 L1085.72 1214.4 L1086.3 1214.4 L1086.89 1214.4 L1087.47 1214.4 L1088.06 1214.4 L1088.65 1214.4 L1089.23 1214.4 L1089.82 1214.4 L1090.41 1214.4 L1090.99 1214.4 L1091.58 1214.4 L1092.17 1214.4 L1092.75 1214.4 L1093.34 1214.4 L1093.93 1214.4 L1094.51 1214.4 L1095.1 1214.4 L1095.68 1214.4 L1096.27 1214.4 L1096.86 1214.4 L1097.44 1214.4 L1098.03 1214.4 L1098.62 1214.4 L1099.2 1214.4 L1099.79 1214.4 L1100.38 1214.4 L1100.96 1214.4 L1101.55 1214.4 L1102.14 1214.4 L1102.72 1214.4 L1103.31 1214.4 L1103.89 1214.4 L1104.48 1214.4 L1105.07 1214.4 L1105.65 1214.4 L1106.24 1214.4 L1106.83 1214.4 L1107.41 1214.4 L1108 1214.4 L1108.59 1214.4 L1109.17 1214.4 L1109.76 1214.4 L1110.34 1214.4 L1110.93 1214.4 L1111.52 1214.4 L1112.1 1214.4 L1112.69 1214.4 L1113.28 1214.4 L1113.86 1214.4 L1114.45 1214.4 L1115.04 1214.4 L1115.62 1214.4 L1116.21 1214.4 L1116.8 1214.4 L1117.38 1214.4 L1117.97 1214.4 L1118.55 1214.4 L1119.14 1214.4 L1119.73 1214.4 L1120.31 1214.4 L1120.9 1214.4 L1121.49 1214.4 L1122.07 1214.4 L1122.66 1214.4 L1123.25 1214.4 L1123.83 1214.4 L1124.42 1214.4 L1125.01 1214.4 L1125.59 1214.4 L1126.18 1214.4 L1126.76 1214.4 L1127.35 1214.4 L1127.94 1214.4 L1128.52 1214.4 L1129.11 1214.4 L1129.7 1214.4 L1130.28 1214.4 L1130.87 1214.4 L1131.46 1214.4 L1132.04 1214.4 L1132.63 1214.4 L1133.21 1214.4 L1133.8 1214.4 L1134.39 1214.4 L1134.97 1214.4 L1135.56 1214.4 L1136.15 1214.4 L1136.73 1214.4 L1137.32 1214.4 L1137.91 1214.4 L1138.49 1214.4 L1139.08 1214.4 L1139.67 1214.4 L1140.25 1214.4 L1140.84 1214.4 L1141.42 1214.4 L1142.01 1214.4 L1142.6 1214.4 L1143.18 1214.4 L1143.77 1214.4 L1144.36 1214.4 L1144.94 1214.4 L1145.53 1214.4 L1146.12 1214.4 L1146.7 1214.4 L1147.29 1214.4 L1147.88 1214.4 L1148.46 1214.4 L1149.05 1214.4 L1149.63 1214.4 L1150.22 1214.4 L1150.81 1214.4 L1151.39 1214.4 L1151.98 1214.4 L1152.57 1214.4 L1153.15 1214.4 L1153.74 1214.4 L1154.33 1214.4 L1154.91 1214.4 L1155.5 1214.4 L1156.09 1214.4 L1156.67 1214.4 L1157.26 1214.4 L1157.84 1214.4 L1158.43 1214.4 L1159.02 1214.4 L1159.6 1214.4 L1160.19 1214.4 L1160.78 1214.4 L1161.36 1214.4 L1161.95 1214.4 L1162.54 1214.4 L1163.12 1214.4 L1163.71 1214.4 L1164.29 1214.4 L1164.88 1214.4 L1165.47 1214.4 L1166.05 1214.4 L1166.64 1214.4 L1167.23 1214.4 L1167.81 1214.4 L1168.4 1214.4 L1168.99 1214.4 L1169.57 1214.4 L1170.16 1214.4 L1170.75 1214.4 L1171.33 1214.4 L1171.92 1214.4 L1172.5 1214.4 L1173.09 1214.4 L1173.68 1214.4 L1174.26 1214.4 L1174.85 1214.4 L1175.44 1214.4 L1176.02 1214.4 L1176.61 1214.4 L1177.2 1214.4 L1177.78 1214.4 L1178.37 1214.4 L1178.96 1214.4 L1179.54 1214.4 L1180.13 1214.4 L1180.71 1214.4 L1181.3 1214.4 L1181.89 1214.4 L1182.47 1214.4 L1183.06 1214.4 L1183.65 1214.4 L1184.23 1214.4 L1184.82 1214.4 L1185.41 1214.4 L1185.99 1214.4 L1186.58 1214.4 L1187.16 1214.4 L1187.75 1214.4 L1188.34 1214.4 L1188.92 1214.4 L1189.51 1214.4 L1190.1 1214.4 L1190.68 1214.4 L1191.27 1214.4 L1191.86 1214.4 L1192.44 1214.4 L1193.03 1214.4 L1193.62 1214.4 L1194.2 1214.4 L1194.79 1214.4 L1195.37 1214.4 L1195.96 1214.4 L1196.55 1214.4 L1197.13 1214.4 L1197.72 1214.4 L1198.31 1214.4 L1198.89 1214.4 L1199.48 1214.4 L1200.07 1214.4 L1200.65 1214.4 L1201.24 1214.4 L1201.83 1214.4 L1202.41 1214.4 L1203 1214.4 L1203.58 1214.4 L1204.17 1214.4 L1204.76 1214.4 L1205.34 1214.4 L1205.93 1214.4 L1206.52 1214.4 L1207.1 1214.4 L1207.69 1214.4 L1208.28 1214.4 L1208.86 1214.4 L1209.45 1214.4 L1210.03 1214.4 L1210.62 1214.4 L1211.21 1214.4 L1211.79 1214.4 L1212.38 1214.4 L1212.97 1214.4 L1213.55 1214.4 L1214.14 1214.4 L1214.73 1214.4 L1215.31 1214.4 L1215.9 1214.4 L1216.49 1214.4 L1217.07 1214.4 L1217.66 1214.4 L1218.24 1214.4 L1218.83 1214.4 L1219.42 1214.4 L1220 1214.4 L1220.59 1214.4 L1221.18 1214.4 L1221.76 1214.4 L1222.35 1214.4 L1222.94 1214.4 L1223.52 1214.4 L1224.11 1214.4 L1224.7 1214.4 L1225.28 1214.4 L1225.87 1214.4 L1226.45 1214.4 L1227.04 1214.4 L1227.63 1214.4 L1228.21 1214.4 L1228.8 1214.4 L1229.39 1214.4 L1229.97 1214.4 L1230.56 1214.4 L1231.15 1214.4 L1231.73 1214.4 L1232.32 1214.4 L1232.91 1214.4 L1233.49 1214.4 L1234.08 1214.4 L1234.66 1214.4 L1235.25 1214.4 L1235.84 1214.4 L1236.42 1214.4 L1237.01 1214.4 L1237.6 1214.4 L1238.18 1214.4 L1238.77 1214.4 L1239.36 1214.4 L1239.94 1214.4 L1240.53 1214.4 L1241.11 1214.4 L1241.7 1214.4 L1242.29 1214.4 L1242.87 1214.4 L1243.46 1214.4 L1244.05 1214.4 L1244.63 1214.4 L1245.22 1214.4 L1245.81 1214.4 L1246.39 1214.4 L1246.98 1214.4 L1247.57 1214.4 L1248.15 1214.4 L1248.74 1214.4 L1249.32 1214.4 L1249.91 1214.4 L1250.5 1214.4 L1251.08 1214.4 L1251.67 1214.4 L1252.26 1214.4 L1252.84 1214.4 L1253.43 1214.4 L1254.02 1214.4 L1254.6 1214.4 L1255.19 1214.4 L1255.78 1214.4 L1256.36 1214.4 L1256.95 1214.4 L1257.53 1214.4 L1258.12 1214.4 L1258.71 1214.4 L1259.29 1214.4 L1259.88 1214.4 L1260.47 1214.4 L1261.05 1214.4 L1261.64 1214.4 L1262.23 1214.4 L1262.81 1214.4 L1263.4 1214.4 L1263.98 1214.4 L1264.57 1214.4 L1265.16 1214.4 L1265.74 1214.4 L1266.33 1214.4 L1266.92 1214.4 L1267.5 1214.4 L1268.09 1214.4 L1268.68 1214.4 L1269.26 1214.4 L1269.85 1214.4 L1270.44 1214.4 L1271.02 1214.4 L1271.61 1214.4 L1272.19 1214.4 L1272.78 1214.4 L1273.37 1214.4 L1273.95 1214.4 L1274.54 1214.4 L1275.13 1214.4 L1275.71 1214.4 L1276.3 1214.4 L1276.89 1214.4 L1277.47 1214.4 L1278.06 1214.4 L1278.65 1214.4 L1279.23 1214.4 L1279.82 1214.4 L1280.4 1214.4 L1280.99 1214.4 L1281.58 1214.4 L1282.16 1214.4 L1282.75 1214.4 L1283.34 1214.4 L1283.92 1214.4 L1284.51 1214.4 L1285.1 1214.4 L1285.68 1214.4 L1286.27 1214.4 L1286.86 1214.4 L1287.44 1214.4 L1288.03 1214.4 L1288.61 1214.4 L1289.2 1214.4 L1289.79 1214.4 L1290.37 1214.4 L1290.96 1214.4 L1291.55 1214.4 L1292.13 1214.4 L1292.72 1214.4 L1293.31 1214.4 L1293.89 1214.4 L1294.48 1214.4 L1295.06 1214.4 L1295.65 1214.4 L1296.24 1214.4 L1296.82 1214.4 L1297.41 1214.4 L1298 1214.4 L1298.58 1214.4 L1299.17 1214.4 L1299.76 1214.4 L1300.34 1214.4 L1300.93 1214.4 L1301.52 1214.4 L1302.1 1214.4 L1302.69 1214.4 L1303.27 1214.4 L1303.86 1214.4 L1304.45 1214.4 L1305.03 1214.4 L1305.62 1214.4 L1306.21 1214.4 L1306.79 1214.4 L1307.38 1214.4 L1307.97 1214.4 L1308.55 1214.4 L1309.14 1214.4 L1309.73 1214.4 L1310.31 1214.4 L1310.9 1214.4 L1311.48 1214.4 L1312.07 1214.4 L1312.66 1214.4 L1313.24 1214.4 L1313.83 1214.4 L1314.42 1214.4 L1315 1214.4 L1315.59 1214.4 L1316.18 1214.4 L1316.76 1214.4 L1317.35 1214.4 L1317.93 1214.4 L1318.52 1214.4 L1319.11 1214.4 L1319.69 1214.4 L1320.28 1214.4 L1320.87 1214.4 L1321.45 1214.4 L1322.04 1214.4 L1322.63 1214.4 L1323.21 1214.4 L1323.8 1214.4 L1324.39 1214.4 L1324.97 1214.4 L1325.56 1214.4 L1326.14 1214.4 L1326.73 1214.4 L1327.32 1214.4 L1327.9 1214.4 L1328.49 1214.4 L1329.08 1214.4 L1329.66 1214.4 L1330.25 1214.4 L1330.84 1214.4 L1331.42 1214.4 L1332.01 1214.4 L1332.6 1214.4 L1333.18 1214.4 L1333.77 1214.4 L1334.35 1214.4 L1334.94 1214.4 L1335.53 1214.4 L1336.11 1214.4 L1336.7 1214.4 L1337.29 1214.4 L1337.87 1214.4 L1338.46 1214.4 L1339.05 1214.4 L1339.63 1214.4 L1340.22 1214.4 L1340.8 1214.4 L1341.39 1214.4 L1341.98 1214.4 L1342.56 1214.4 L1343.15 1214.4 L1343.74 1214.4 L1344.32 1214.4 L1344.91 1214.4 L1345.5 1214.4 L1346.08 1214.4 L1346.67 1214.4 L1347.26 1214.4 L1347.84 1214.4 L1348.43 1214.4 L1349.01 1214.4 L1349.6 1214.4 L1350.19 1214.4 L1350.77 1214.4 L1351.36 1214.4 L1351.95 1214.4 L1352.53 1214.4 L1353.12 1214.4 L1353.71 1214.4 L1354.29 1214.4 L1354.88 1214.4 L1355.47 1214.4 L1356.05 1214.4 L1356.64 1214.4 L1357.22 1214.4 L1357.81 1214.4 L1358.4 1214.4 L1358.98 1214.4 L1359.57 1214.4 L1360.16 1214.4 L1360.74 1214.4 L1361.33 1214.4 L1361.92 1214.4 L1362.5 1214.4 L1363.09 1214.4 L1363.68 1214.4 L1364.26 1214.4 L1364.85 1214.4 L1365.43 1214.4 L1366.02 1214.4 L1366.61 1214.4 L1367.19 1214.4 L1367.78 1214.4 L1368.37 1214.4 L1368.95 1214.4 L1369.54 1214.4 L1370.13 1214.4 L1370.71 1214.4 L1371.3 1214.4 L1371.88 1214.4 L1372.47 1214.4 L1373.06 1214.4 L1373.64 1214.4 L1374.23 1214.4 L1374.82 1214.4 L1375.4 1214.4 L1375.99 1214.4 L1376.58 1214.4 L1377.16 1214.4 L1377.75 1214.4 L1378.34 1214.4 L1378.92 1214.4 L1379.51 1214.4 L1380.09 1214.4 L1380.68 1214.4 L1381.27 1214.4 L1381.85 1214.4 L1382.44 1214.4 L1383.03 1214.4 L1383.61 1214.4 L1384.2 1214.4 L1384.79 1214.4 L1385.37 1214.4 L1385.96 1214.4 L1386.55 1214.4 L1387.13 1214.4 L1387.72 1214.4 L1388.3 1214.4 L1388.89 1214.4 L1389.48 1214.4 L1390.06 1214.4 L1390.65 1214.4 L1391.24 1214.4 L1391.82 1214.4 L1392.41 1214.4 L1393 1214.4 L1393.58 1214.4 L1394.17 1214.4 L1394.75 1214.4 L1395.34 1214.4 L1395.93 1214.4 L1396.51 1214.4 L1397.1 1214.4 L1397.69 1214.4 L1398.27 1214.4 L1398.86 1214.4 L1399.45 1214.4 L1400.03 1214.4 L1400.62 1214.4 L1401.21 1214.4 L1401.79 1214.4 L1402.38 1214.4 L1402.96 1214.4 L1403.55 1214.4 L1404.14 1214.4 L1404.72 1214.4 L1405.31 1214.4 L1405.9 1214.4 L1406.48 1214.4 L1407.07 1214.4 L1407.66 1214.4 L1408.24 1214.4 L1408.83 1214.4 L1409.42 1214.4 L1410 1214.4 L1410.59 1214.4 L1411.17 1214.4 L1411.76 1214.4 L1412.35 1214.4 L1412.93 1214.4 L1413.52 1214.4 L1414.11 1214.4 L1414.69 1214.4 L1415.28 1214.4 L1415.87 1214.4 L1416.45 1214.4 L1417.04 1214.4 L1417.63 1214.4 L1418.21 1214.4 L1418.8 1214.4 L1419.38 1214.4 L1419.97 1214.4 L1420.56 1214.4 L1421.14 1214.4 L1421.73 1214.4 L1422.32 1214.4 L1422.9 1214.4 L1423.49 1214.4 L1424.08 1214.4 L1424.66 1214.4 L1425.25 1214.4 L1425.83 1214.4 L1426.42 1214.4 L1427.01 1214.4 L1427.59 1214.4 L1428.18 1214.4 L1428.77 1214.4 L1429.35 1214.4 L1429.94 1214.4 L1430.53 1214.4 L1431.11 1214.4 L1431.7 1214.4 L1432.29 1214.4 L1432.87 1214.4 L1433.46 1214.4 L1434.04 1214.4 L1434.63 1214.4 L1435.22 1214.4 L1435.8 1214.4 L1436.39 1214.4 L1436.98 1214.4 L1437.56 1214.4 L1438.15 1214.4 L1438.74 1214.4 L1439.32 1214.4 L1439.91 1214.4 L1440.5 1214.4 L1441.08 1214.4 L1441.67 1214.4 L1442.25 1214.4 L1442.84 1214.4 L1443.43 1214.4 L1444.01 1214.4 L1444.6 1214.4 L1445.19 1214.4 L1445.77 1214.4 L1446.36 1214.4 L1446.95 1214.4 L1447.53 1214.4 L1448.12 1214.4 L1448.7 1214.4 L1449.29 1214.4 L1449.88 1214.4 L1450.46 1214.4 L1451.05 1214.4 L1451.64 1214.4 L1452.22 1214.4 L1452.81 1214.4 L1453.4 1214.4 L1453.98 1214.4 L1454.57 1214.4 L1455.16 1214.4 L1455.74 1214.4 L1456.33 1214.4 L1456.91 1214.4 L1457.5 1214.4 L1458.09 1214.4 L1458.67 1214.4 L1459.26 1214.4 L1459.85 1214.4 L1460.43 1214.4 L1461.02 1214.4 L1461.61 1214.4 L1462.19 1214.4 L1462.78 1214.4 L1463.37 1214.4 L1463.95 1214.4 L1464.54 1214.4 L1465.12 1214.4 L1465.71 1214.4 L1466.3 1214.4 L1466.88 1214.4 L1467.47 1214.4 L1468.06 1214.4 L1468.64 1214.4 L1469.23 1214.4 L1469.82 1214.4 L1470.4 1214.4 L1470.99 1214.4 L1471.57 1214.4 L1472.16 1214.4 L1472.75 1214.4 L1473.33 1214.4 L1473.92 1214.4 L1474.51 1214.4 L1475.09 1214.4 L1475.68 1214.4 L1476.27 1214.4 L1476.85 1214.4 L1477.44 1214.4 L1478.03 1214.4 L1478.61 1214.4 L1479.2 1214.4 L1479.78 1214.4 L1480.37 1214.4 L1480.96 1214.4 L1481.54 1214.4 L1482.13 1214.4 L1482.72 1214.4 L1483.3 1214.4 L1483.89 1214.4 L1484.48 1214.4 L1485.06 1214.4 L1485.65 1214.4 L1486.24 1214.4 L1486.82 1214.4 L1487.41 1214.4 L1487.99 1214.4 L1488.58 1214.4 L1489.17 1214.4 L1489.75 1214.4 L1490.34 1214.4 L1490.93 1214.4 L1491.51 1214.4 L1492.1 1214.4 L1492.69 1214.4 L1493.27 1214.4 L1493.86 1214.4 L1494.45 1214.4 L1495.03 1214.4 L1495.62 1214.4 L1496.2 1214.4 L1496.79 1214.4 L1497.38 1214.4 L1497.96 1214.4 L1498.55 1214.4 L1499.14 1214.4 L1499.72 1214.4 L1500.31 1214.4 L1500.9 1214.4 L1501.48 1214.4 L1502.07 1214.4 L1502.65 1214.4 L1503.24 1214.4 L1503.83 1214.4 L1504.41 1214.4 L1505 1214.4 L1505.59 1214.4 L1506.17 1214.4 L1506.76 1214.4 L1507.35 1214.4 L1507.93 1214.4 L1508.52 1214.4 L1509.11 1214.4 L1509.69 1214.4 L1510.28 1214.4 L1510.86 1214.4 L1511.45 1214.4 L1512.04 1214.4 L1512.62 1214.4 L1513.21 1214.4 L1513.8 1214.4 L1514.38 1214.4 L1514.97 1214.4 L1515.56 1214.4 L1516.14 1214.4 L1516.73 1214.4 L1517.32 1214.4 L1517.9 1214.4 L1518.49 1214.4 L1519.07 1214.4 L1519.66 1214.4 L1520.25 1214.4 L1520.83 1214.4 L1521.42 1214.4 L1522.01 1214.4 L1522.59 1214.4 L1523.18 1214.4 L1523.77 1214.4 L1524.35 1214.4 L1524.94 1214.4 L1525.52 1214.4 L1526.11 1214.4 L1526.7 1214.4 L1527.28 1214.4 L1527.87 1214.4 L1528.46 1214.4 L1529.04 1214.4 L1529.63 1214.4 L1530.22 1214.4 L1530.8 1214.4 L1531.39 1214.4 L1531.98 1214.4 L1532.56 1214.4 L1533.15 1214.4 L1533.73 1214.4 L1534.32 1214.4 L1534.91 1214.4 L1535.49 1214.4 L1536.08 1214.4 L1536.67 1214.4 L1537.25 1214.4 L1537.84 1214.4 L1538.43 1214.4 L1539.01 1214.4 L1539.6 1214.4 L1540.19 1214.4 L1540.77 1214.4 L1541.36 1214.4 L1541.94 1214.4 L1542.53 1214.4 L1543.12 1214.4 L1543.7 1214.4 L1544.29 1214.4 L1544.88 1214.4 L1545.46 1214.4 L1546.05 1214.4 L1546.64 1214.4 L1547.22 1214.4 L1547.81 1214.4 L1548.4 1214.4 L1548.98 1214.4 L1549.57 1214.4 L1550.15 1214.4 L1550.74 1214.4 L1551.33 1214.4 L1551.91 1214.4 L1552.5 1214.4 L1553.09 1214.4 L1553.67 1214.4 L1554.26 1214.4 L1554.85 1214.4 L1555.43 1214.4 L1556.02 1214.4 L1556.6 1214.4 L1557.19 1214.4 L1557.78 1214.4 L1558.36 1214.4 L1558.95 1214.4 L1559.54 1214.4 L1560.12 1214.4 L1560.71 1214.4 L1561.3 1214.4 L1561.88 1214.4 L1562.47 1214.4 L1563.06 1214.4 L1563.64 1214.4 L1564.23 1214.4 L1564.81 1214.4 L1565.4 1214.4 L1565.99 1214.4 L1566.57 1214.4 L1567.16 1214.4 L1567.75 1214.4 L1568.33 1214.4 L1568.92 1214.4 L1569.51 1214.4 L1570.09 1214.4 L1570.68 1214.4 L1571.27 1214.4 L1571.85 1214.4 L1572.44 1214.4 L1573.02 1214.4 L1573.61 1214.4 L1574.2 1214.4 L1574.78 1214.4 L1575.37 1214.4 L1575.96 1214.4 L1576.54 1214.4 L1577.13 1214.4 L1577.72 1214.4 L1578.3 1214.4 L1578.89 1214.4 L1579.47 1214.4 L1580.06 1214.4 L1580.65 1214.4 L1581.23 1214.4 L1581.82 1214.4 L1582.41 1214.4 L1582.99 1214.4 L1583.58 1214.4 L1584.17 1214.4 L1584.75 1214.4 L1585.34 1214.4 L1585.93 1214.4 L1586.51 1214.4 L1587.1 1214.4 L1587.68 1214.4 L1588.27 1214.4 L1588.86 1214.4 L1589.44 1214.4 L1590.03 1214.4 L1590.62 1214.4 L1591.2 1214.4 L1591.79 1214.4 L1592.38 1214.4 L1592.96 1214.4 L1593.55 1214.4 L1594.14 1214.4 L1594.72 1214.4 L1595.31 1214.4 L1595.89 1214.4 L1596.48 1214.4 L1597.07 1214.4 L1597.65 1214.4 L1598.24 1214.4 L1598.83 1214.4 L1599.41 1214.4 L1600 1214.4 L1600.59 1214.4 L1601.17 1214.4 L1601.76 1214.4 L1602.34 1214.4 L1602.93 1214.4 L1603.52 1214.4 L1604.1 1214.4 L1604.69 1214.4 L1605.28 1214.4 L1605.86 1214.4 L1606.45 1214.4 L1607.04 1214.4 L1607.62 1214.4 L1608.21 1214.4 L1608.8 1214.4 L1609.38 1214.4 L1609.97 1214.4 L1610.55 1214.4 L1611.14 1214.4 L1611.73 1214.4 L1612.31 1214.4 L1612.9 1214.4 L1613.49 1214.4 L1614.07 1214.4 L1614.66 1214.4 L1615.25 1214.4 L1615.83 1214.4 L1616.42 1214.4 L1617.01 1214.4 L1617.59 1214.4 L1618.18 1214.4 L1618.76 1214.4 L1619.35 1214.4 L1619.94 1214.4 L1620.52 1214.4 L1621.11 1214.4 L1621.7 1214.4 L1622.28 1214.4 L1622.87 1214.4 L1623.46 1214.4 L1624.04 1214.4 L1624.63 1214.4 L1625.22 1214.4 L1625.8 1214.4 L1626.39 1214.4 L1626.97 1214.4 L1627.56 1214.4 L1628.15 1214.4 L1628.73 1214.4 L1629.32 1214.4 L1629.91 1214.4 L1630.49 1214.4 L1631.08 1214.4 L1631.67 1214.4 L1632.25 1214.4 L1632.84 1214.4 L1633.42 1214.4 L1634.01 1214.4 L1634.6 1214.4 L1635.18 1214.4 L1635.77 1214.4 L1636.36 1214.4 L1636.94 1214.4 L1637.53 1214.4 L1638.12 1214.4 L1638.7 1214.4 L1639.29 1214.4 L1639.88 1214.4 L1640.46 1214.4 L1641.05 1214.4 L1641.63 1214.4 L1642.22 1214.4 L1642.81 1214.4 L1643.39 1214.4 L1643.98 1214.4 L1644.57 1214.4 L1645.15 1214.4 L1645.74 1214.4 L1646.33 1214.4 L1646.91 1214.4 L1647.5 1214.4 L1648.09 1214.4 L1648.67 1214.4 L1649.26 1214.4 L1649.84 1214.4 L1650.43 1214.4 L1651.02 1214.4 L1651.6 1214.4 L1652.19 1214.4 L1652.78 1214.4 L1653.36 1214.4 L1653.95 1214.4 L1654.54 1214.4 L1655.12 1214.4 L1655.71 1214.4 L1656.29 1214.4 L1656.88 1214.4 L1657.47 1214.4 L1658.05 1214.4 L1658.64 1214.4 L1659.23 1214.4 L1659.81 1214.4 L1660.4 1214.4 L1660.99 1214.4 L1661.57 1214.4 L1662.16 1214.4 L1662.75 1214.4 L1663.33 1214.4 L1663.92 1214.4 L1664.5 1214.4 L1665.09 1214.4 L1665.68 1214.4 L1666.26 1214.4 L1666.85 1214.4 L1667.44 1214.4 L1668.02 1214.4 L1668.61 1214.4 L1669.2 1214.4 L1669.78 1214.4 L1670.37 1214.4 L1670.96 1214.4 L1671.54 1214.4 L1672.13 1214.4 L1672.71 1214.4 L1673.3 1214.4 L1673.89 1214.4 L1674.47 1214.4 L1675.06 1214.4 L1675.65 1214.4 L1676.23 1214.4 L1676.82 1214.4 L1677.41 1214.4 L1677.99 1214.4 L1678.58 1214.4 L1679.17 1214.4 L1679.75 1214.4 L1680.34 1214.4 L1680.92 1214.4 L1681.51 1214.4 L1682.1 1214.4 L1682.68 1214.4 L1683.27 1214.4 L1683.86 1214.4 L1684.44 1214.4 L1685.03 1214.4 L1685.62 1214.4 L1686.2 1214.4 L1686.79 1214.4 L1687.37 1214.4 L1687.96 1214.4 L1688.55 1214.4 L1689.13 1214.4 L1689.72 1214.4 L1690.31 1214.4 L1690.89 1214.4 L1691.48 1214.4 L1692.07 1214.4 L1692.65 1214.4 L1693.24 1214.4 L1693.83 1214.4 L1694.41 1214.4 L1695 1214.4 L1695.58 1214.4 L1696.17 1214.4 L1696.76 1214.4 L1697.34 1214.4 L1697.93 1214.4 L1698.52 1214.4 L1699.1 1214.4 L1699.69 1214.4 L1700.28 1214.4 L1700.86 1214.4 L1701.45 1214.4 L1702.04 1214.4 L1702.62 1214.4 L1703.21 1214.4 L1703.79 1214.4 L1704.38 1214.4 L1704.97 1214.4 L1705.55 1214.4 L1706.14 1214.4 L1706.73 1214.4 L1707.31 1214.4 L1707.9 1214.4 L1708.49 1214.4 L1709.07 1214.4 L1709.66 1214.4 L1710.24 1214.4 L1710.83 1214.4 L1711.42 1214.4 L1712 1214.4 L1712.59 1214.4 L1713.18 1214.4 L1713.76 1214.4 L1714.35 1214.4 L1714.94 1214.4 L1715.52 1214.4 L1716.11 1214.4 L1716.7 1214.4 L1717.28 1214.4 L1717.87 1214.4 L1718.45 1214.4 L1719.04 1214.4 L1719.63 1214.4 L1720.21 1214.4 L1720.8 1214.4 L1721.39 1214.4 L1721.97 1214.4 L1722.56 1214.4 L1723.15 1214.4 L1723.73 1214.4 L1724.32 1214.4 L1724.91 1214.4 L1725.49 1214.4 L1726.08 1214.4 L1726.66 1214.4 L1727.25 1214.4 L1727.84 1214.4 L1728.42 1214.4 L1729.01 1214.4 L1729.6 1214.4 L1730.18 1214.4 L1730.77 1214.4 L1731.36 1214.4 L1731.94 1214.4 L1732.53 1214.4 L1733.11 1214.4 L1733.7 1214.4 L1734.29 1214.4 L1734.87 1214.4 L1735.46 1214.4 L1736.05 1214.4 L1736.63 1214.4 L1737.22 1214.4 L1737.81 1214.4 L1738.39 1214.4 L1738.98 1214.4 L1739.57 1214.4 L1740.15 1214.4 L1740.74 1214.4 L1741.32 1214.4 L1741.91 1214.4 L1742.5 1214.4 L1743.08 1214.4 L1743.67 1214.4 L1744.26 1214.4 L1744.84 1214.4 L1745.43 1214.4 L1746.02 1214.4 L1746.6 1214.4 L1747.19 1214.4 L1747.78 1214.4 L1748.36 1214.4 L1748.95 1214.4 L1749.53 1214.4 L1750.12 1214.4 L1750.71 1214.4 L1751.29 1214.4 L1751.88 1214.4 L1752.47 1214.4 L1753.05 1214.4 L1753.64 1214.4 L1754.23 1214.4 L1754.81 1214.4 L1755.4 1214.4 L1755.99 1214.4 L1756.57 1214.4 L1757.16 1214.4 L1757.74 1214.4 L1758.33 1214.4 L1758.92 1214.4 L1759.5 1214.4 L1760.09 1214.4 L1760.68 1214.4 L1761.26 1214.4 L1761.85 1214.4 L1762.44 1214.4 L1763.02 1214.4 L1763.61 1214.4 L1764.19 1214.4 L1764.78 1214.4 L1765.37 1214.4 L1765.95 1214.4 L1766.54 1214.4 L1767.13 1214.4 L1767.71 1214.4 L1768.3 1214.4 L1768.89 1214.4 L1769.47 1214.4 L1770.06 1214.4 L1770.65 1214.4 L1771.23 1214.4 L1771.82 1214.4 L1772.4 1214.4 L1772.99 1214.4 L1773.58 1214.4 L1774.16 1214.4 L1774.75 1214.4 L1775.34 1214.4 L1775.92 1214.4 L1776.51 1214.4 L1777.1 1214.4 L1777.68 1214.4 L1778.27 1214.4 L1778.86 1214.4 L1779.44 1214.4 L1780.03 1214.4 L1780.61 1214.4 L1781.2 1214.4 L1781.79 1214.4 L1782.37 1214.4 L1782.96 1214.4 L1783.55 1214.4 L1784.13 1214.4 L1784.72 1214.4 L1785.31 1214.4 L1785.89 1214.4 L1786.48 1214.4 L1787.06 1214.4 L1787.65 1214.4 L1788.24 1214.4 L1788.82 1214.4 L1789.41 1214.4 L1790 1214.4 L1790.58 1214.4 L1791.17 1214.4 L1791.76 1214.4 L1792.34 1214.4 L1792.93 1214.4 L1793.52 1214.4 L1794.1 1214.4 L1794.69 1214.4 L1795.27 1214.4 L1795.86 1214.4 L1796.45 1214.4 L1797.03 1214.4 L1797.62 1214.4 L1798.21 1214.4 L1798.79 1214.4 L1799.38 1214.4 L1799.97 1214.4 L1800.55 1214.4 L1801.14 1214.4 L1801.73 1214.4 L1802.31 1214.4 L1802.9 1214.4 L1803.48 1214.4 L1804.07 1214.4 L1804.66 1214.4 L1805.24 1214.4 L1805.83 1214.4 L1806.42 1214.4 L1807 1214.4 L1807.59 1214.4 L1808.18 1214.4 L1808.76 1214.4 L1809.35 1214.4 L1809.94 1214.4 L1810.52 1214.4 L1811.11 1214.4 L1811.69 1214.4 L1812.28 1214.4 L1812.87 1214.4 L1813.45 1214.4 L1814.04 1214.4 L1814.63 1214.4 L1815.21 1214.4 L1815.8 1214.4 L1816.39 1214.4 L1816.97 1214.4 L1817.56 1214.4 L1818.14 1214.4 L1818.73 1214.4 L1819.32 1214.4 L1819.9 1214.4 L1820.49 1214.4 L1821.08 1214.4 L1821.66 1214.4 L1822.25 1214.4 L1822.84 1214.4 L1823.42 1214.4 L1824.01 1214.4 L1824.6 1214.4 L1825.18 1214.4 L1825.77 1214.4 L1826.35 1214.4 L1826.94 1214.4 L1827.53 1214.4 L1828.11 1214.4 L1828.7 1214.4 L1829.29 1214.4 L1829.87 1214.4 L1830.46 1214.4 L1831.05 1214.4 L1831.63 1214.4 L1832.22 1214.4 L1832.81 1214.4 L1833.39 1214.4 L1833.98 1214.4 L1834.56 1214.4 L1835.15 1214.4 L1835.74 1214.4 L1836.32 1214.4 L1836.91 1214.4 L1837.5 1214.4 L1838.08 1214.4 L1838.67 1214.4 L1839.26 1214.4 L1839.84 1214.4 L1840.43 1214.4 L1841.01 1214.4 L1841.6 1214.4 L1842.19 1214.4 L1842.77 1214.4 L1843.36 1214.4 L1843.95 1214.4 L1844.53 1214.4 L1845.12 1214.4 L1845.71 1214.4 L1846.29 1214.4 L1846.88 1214.4 L1847.47 1214.4 L1848.05 1214.4 L1848.64 1214.4 L1849.22 1214.4 L1849.81 1214.4 L1850.4 1214.4 L1850.98 1214.4 L1851.57 1214.4 L1852.16 1214.4 L1852.74 1214.4 L1853.33 1214.4 L1853.92 1214.4 L1854.5 1214.4 L1855.09 1214.4 L1855.68 1214.4 L1856.26 1214.4 L1856.85 1214.4 L1857.43 1214.4 L1858.02 1214.4 L1858.61 1214.4 L1859.19 1214.4 L1859.78 1214.4 L1860.37 1214.4 L1860.95 1214.4 L1861.54 1214.4 L1862.13 1214.4 L1862.71 1214.4 L1863.3 1214.4 L1863.88 1214.4 L1864.47 1214.4 L1865.06 1214.4 L1865.64 1214.4 L1866.23 1214.4 L1866.82 1214.4 L1867.4 1214.4 L1867.99 1214.4 L1868.58 1214.4 L1869.16 1214.4 L1869.75 1214.4 L1870.34 1214.4 L1870.92 1214.4 L1871.51 1214.4 L1872.09 1214.4 L1872.68 1214.4 L1873.27 1214.4 L1873.85 1214.4 L1874.44 1214.4 L1875.03 1214.4 L1875.61 1214.4 L1876.2 1214.4 L1876.79 1214.4 L1877.37 1214.4 L1877.96 1214.4 L1878.55 1214.4 L1879.13 1214.4 L1879.72 1214.4 L1880.3 1214.4 L1880.89 1214.4 L1881.48 1214.4 L1882.06 1214.4 L1882.65 1214.4 L1883.24 1214.4 L1883.82 1214.4 L1884.41 1214.4 L1885 1214.4 L1885.58 1214.4 L1886.17 1214.4 L1886.76 1214.4 L1887.34 1214.4 L1887.93 1214.4 L1888.51 1214.4 L1889.1 1214.4 L1889.69 1214.4 L1890.27 1214.4 L1890.86 1214.4 L1891.45 1214.4 L1892.03 1214.4 L1892.62 1214.4 L1893.21 1214.4 L1893.79 1214.4 L1894.38 1214.4 L1894.96 1214.4 L1895.55 1214.4 L1896.14 1214.4 L1896.72 1214.4 L1897.31 1214.4 L1897.9 1214.4 L1898.48 1214.4 L1899.07 1214.4 L1899.66 1214.4 L1900.24 1214.4 L1900.83 1214.4 L1901.42 1214.4 L1902 1214.4 L1902.59 1214.4 L1903.17 1214.4 L1903.76 1214.4 L1904.35 1214.4 L1904.93 1214.4 L1905.52 1214.4 L1906.11 1214.4 L1906.69 1214.4 L1907.28 1214.4 L1907.87 1214.4 L1908.45 1214.4 L1909.04 1214.4 L1909.63 1214.4 L1910.21 1214.4 L1910.8 1214.4 L1911.38 1214.4 L1911.97 1214.4 L1912.56 1214.4 L1913.14 1214.4 L1913.73 1214.4 L1914.32 1214.4 L1914.9 1214.4 L1915.49 1214.4 L1916.08 1214.4 L1916.66 1214.4 L1917.25 1214.4 L1917.83 1214.4 L1918.42 1214.4 L1919.01 1214.4 L1919.59 1214.4 L1920.18 1214.4 L1920.77 1214.4 L1921.35 1214.4 L1921.94 1214.4 L1922.53 1214.4 L1923.11 1214.4 L1923.7 1214.4 L1924.29 1214.4 L1924.87 1214.4 L1925.46 1214.4 L1926.04 1214.4 L1926.63 1214.4 L1927.22 1214.4 L1927.8 1214.4 L1928.39 1214.4 L1928.98 1214.4 L1929.56 1214.4 L1930.15 1214.4 L1930.74 1214.4 L1931.32 1214.4 L1931.91 1214.4 L1932.5 1214.4 L1933.08 1214.4 L1933.67 1214.4 L1934.25 1214.4 L1934.84 1214.4 L1935.43 1214.4 L1936.01 1214.4 L1936.6 1214.4 L1937.19 1214.4 L1937.77 1214.4 L1938.36 1214.4 L1938.95 1214.4 L1939.53 1214.4 L1940.12 1214.4 L1940.71 1214.4 L1941.29 1214.4 L1941.88 1214.4 L1942.46 1214.4 L1943.05 1214.4 L1943.64 1214.4 L1944.22 1214.4 L1944.81 1214.4 L1945.4 1214.4 L1945.98 1214.4 L1946.57 1214.4 L1947.16 1214.4 L1947.74 1214.4 L1948.33 1214.4 L1948.91 1214.4 L1949.5 1214.4 L1950.09 1214.4 L1950.67 1214.4 L1951.26 1214.4 L1951.85 1214.4 L1952.43 1214.4 L1953.02 1214.4 L1953.61 1214.4 L1954.19 1214.4 L1954.78 1214.4 L1955.37 1214.4 L1955.95 1214.4 L1956.54 1214.4 L1957.12 1214.4 L1957.71 1214.4 L1958.3 1214.4 L1958.88 1214.4 L1959.47 1214.4 L1960.06 1214.4 L1960.64 1214.4 L1961.23 1214.4 L1961.82 1214.4 L1962.4 1214.4 L1962.99 1214.4 L1963.58 1214.4 L1964.16 1214.4 L1964.75 1214.4 L1965.33 1214.4 L1965.92 1214.4 L1966.51 1214.4 L1967.09 1214.4 L1967.68 1214.4 L1968.27 1214.4 L1968.85 1214.4 L1969.44 1214.4 L1970.03 1214.4 L1970.61 1214.4 L1971.2 1214.4 L1971.78 1214.4 L1972.37 1214.4 L1972.96 1214.4 L1973.54 1214.4 L1974.13 1214.4 L1974.72 1214.4 L1975.3 1214.4 L1975.89 1214.4 L1976.48 1214.4 L1977.06 1214.4 L1977.65 1214.4 L1978.24 1214.4 L1978.82 1214.4 L1979.41 1214.4 L1979.99 1214.4 L1980.58 1214.4 L1981.17 1214.4 L1981.75 1214.4 L1982.34 1214.4 L1982.93 1214.4 L1983.51 1214.4 L1984.1 1214.4 L1984.69 1214.4 L1985.27 1214.4 L1985.86 1214.4 L1986.45 1214.4 L1987.03 1214.4 L1987.62 1214.4 L1988.2 1214.4 L1988.79 1214.4 L1989.38 1214.4 L1989.96 1214.4 L1990.55 1214.4 L1991.14 1214.4 L1991.72 1214.4 L1992.31 1214.4 L1992.9 1214.4 L1993.48 1214.4 L1994.07 1214.4 L1994.65 1214.4 L1995.24 1214.4 L1995.83 1214.4 L1996.41 1214.4 L1997 1214.4 L1997.59 1214.4 L1998.17 1214.4 L1998.76 1214.4 L1999.35 1214.4 L1999.93 1214.4 L2000.52 1214.4 L2001.11 1214.4 L2001.69 1214.4 L2002.28 1214.4 L2002.86 1214.4 L2003.45 1214.4 L2004.04 1214.4 L2004.62 1214.4 L2005.21 1214.4 L2005.8 1214.4 L2006.38 1214.4 L2006.97 1214.4 L2007.56 1214.4 L2008.14 1214.4 L2008.73 1214.4 L2009.32 1214.4 L2009.9 1214.4 L2010.49 1214.4 L2011.07 1214.4 L2011.66 1214.4 L2012.25 1214.4 L2012.83 1214.4 L2013.42 1214.4 L2014.01 1214.4 L2014.59 1214.4 L2015.18 1214.4 L2015.77 1214.4 L2016.35 1214.4 L2016.94 1214.4 L2017.53 1214.4 L2018.11 1214.4 L2018.7 1214.4 L2019.28 1214.4 L2019.87 1214.4 L2020.46 1214.4 L2021.04 1214.4 L2021.63 1214.4 L2022.22 1214.4 L2022.8 1214.4 L2023.39 1214.4 L2023.98 1214.4 L2024.56 1214.4 L2025.15 1214.4 L2025.73 1214.4 L2026.32 1214.4 L2026.91 1214.4 L2027.49 1214.4 L2028.08 1214.4 L2028.67 1214.4 L2029.25 1214.4 L2029.84 1214.4 L2030.43 1214.4 L2031.01 1214.4 L2031.6 1214.4 L2032.19 1214.4 L2032.77 1214.4 L2033.36 1214.4 L2033.94 1214.4 L2034.53 1214.4 L2035.12 1214.4 L2035.7 1214.4 L2036.29 1214.4 L2036.88 1214.4 L2037.46 1214.4 L2038.05 1214.4 L2038.64 1214.4 L2039.22 1214.4 L2039.81 1214.4 L2040.4 1214.4 L2040.98 1214.4 L2041.57 1214.4 L2042.15 1214.4 L2042.74 1214.4 L2043.33 1214.4 L2043.91 1214.4 L2044.5 1214.4 L2045.09 1214.4 L2045.67 1214.4 L2046.26 1214.4 L2046.85 1214.4 L2047.43 1214.4 L2048.02 1214.4 L2048.6 1214.4 L2049.19 1214.4 L2049.78 1214.4 L2050.36 1214.4 L2050.95 1214.4 L2051.54 1214.4 L2052.12 1214.4 L2052.71 1214.4 L2053.3 1214.4 L2053.88 1214.4 L2054.47 1214.4 L2055.06 1214.4 L2055.64 1214.4 L2056.23 1214.4 L2056.81 1214.4 L2057.4 1214.4 L2057.99 1214.4 L2058.57 1214.4 L2059.16 1214.4 L2059.75 1214.4 L2060.33 1214.4 L2060.92 1214.4 L2061.51 1214.4 L2062.09 1214.4 L2062.68 1214.4 L2063.27 1214.4 L2063.85 1214.4 L2064.44 1214.4 L2065.02 1214.4 L2065.61 1214.4 L2066.2 1214.4 L2066.78 1214.4 L2067.37 1214.4 L2067.96 1214.4 L2068.54 1214.4 L2069.13 1214.4 L2069.72 1214.4 L2070.3 1214.4 L2070.89 1214.4 L2071.48 1214.4 L2072.06 1214.4 L2072.65 1214.4 L2073.23 1214.4 L2073.82 1214.4 L2074.41 1214.4 L2074.99 1214.4 L2075.58 1214.4 L2076.17 1214.4 L2076.75 1214.4 L2077.34 1214.4 L2077.93 1214.4 L2078.51 1214.4 L2079.1 1214.4 L2079.68 1214.4 L2080.27 1214.4 L2080.86 1214.4 L2081.44 1214.4 L2082.03 1214.4 L2082.62 1214.4 L2083.2 1214.4 L2083.79 1214.4 L2084.38 1214.4 L2084.96 1214.4 L2085.55 1214.4 L2086.14 1214.4 L2086.72 1214.4 L2087.31 1214.4 L2087.89 1214.4 L2088.48 1214.4 L2089.07 1214.4 L2089.65 1214.4 L2090.24 1214.4 L2090.83 1214.4 L2091.41 1214.4 L2092 1214.4 L2092.59 1214.4 L2093.17 1214.4 L2093.76 1214.4 L2094.35 1214.4 L2094.93 1214.4 L2095.52 1214.4 L2096.1 1214.4 L2096.69 1214.4 L2097.28 1214.4 L2097.86 1214.4 L2098.45 1214.4 L2099.04 1214.4 L2099.62 1214.4 L2100.21 1214.4 L2100.8 1214.4 L2101.38 1214.4 L2101.97 1214.4 L2102.55 1214.4 L2103.14 1214.4 L2103.73 1214.4 L2104.31 1214.4 L2104.9 1214.4 L2105.49 1214.4 L2106.07 1214.4 L2106.66 1214.4 L2107.25 1214.4 L2107.83 1214.4 L2108.42 1214.4 L2109.01 1214.4 L2109.59 1214.4 L2110.18 1214.4 L2110.76 1214.4 L2111.35 1214.4 L2111.94 1214.4 L2112.52 1214.4 L2113.11 1214.4 L2113.7 1214.4 L2114.28 1214.4 L2114.87 1214.4 L2115.46 1214.4 L2116.04 1214.4 L2116.63 1214.4 L2117.22 1214.4 L2117.8 1214.4 L2118.39 1214.4 L2118.97 1214.4 L2119.56 1214.4 L2120.15 1214.4 L2120.73 1214.4 L2121.32 1214.4 L2121.91 1214.4 L2122.49 1214.4 L2123.08 1214.4 L2123.67 1214.4 L2124.25 1214.4 L2124.84 1214.4 L2125.42 1214.4 L2126.01 1214.4 L2126.6 1214.4 L2127.18 1214.4 L2127.77 1214.4 L2128.36 1214.4 L2128.94 1214.4 L2129.53 1214.4 L2130.12 1214.4 L2130.7 1214.4 L2131.29 1214.4 L2131.88 1214.4 L2132.46 1214.4 L2133.05 1214.4 L2133.63 1214.4 L2134.22 1214.4 L2134.81 1214.4 L2135.39 1214.4 L2135.98 1214.4 L2136.57 1214.4 L2137.15 1214.4 L2137.74 1214.4 L2138.33 1214.4 L2138.91 1214.4 L2139.5 1214.4 L2140.09 1214.4 L2140.67 1214.4 L2141.26 1214.4 L2141.84 1214.4 L2142.43 1214.4 L2143.02 1214.4 L2143.6 1214.4 L2144.19 1214.4 L2144.78 1214.4 L2145.36 1214.4 L2145.95 1214.4 L2146.54 1214.4 L2147.12 1214.4 L2147.71 1214.4 L2148.3 1214.4 L2148.88 1214.4 L2149.47 1214.4 L2150.05 1214.4 L2150.64 1214.4 L2151.23 1214.4 L2151.81 1214.4 L2152.4 1214.4 L2152.99 1214.4 L2153.57 1214.4 L2154.16 1214.4 L2154.75 1214.4 L2155.33 1214.4 L2155.92 1214.4 L2156.5 1214.4 L2157.09 1214.4 L2157.68 1214.4 L2158.26 1214.4 L2158.26 1214.26 L2157.68 1214.26 L2157.09 1214.26 L2156.5 1214.26 L2155.92 1214.26 L2155.33 1214.26 L2154.75 1214.26 L2154.16 1214.26 L2153.57 1214.26 L2152.99 1214.26 L2152.4 1214.26 L2151.81 1214.26 L2151.23 1214.26 L2150.64 1214.26 L2150.05 1214.26 L2149.47 1214.26 L2148.88 1214.26 L2148.3 1214.26 L2147.71 1214.26 L2147.12 1214.26 L2146.54 1214.26 L2145.95 1214.26 L2145.36 1214.26 L2144.78 1214.26 L2144.19 1214.26 L2143.6 1214.26 L2143.02 1214.26 L2142.43 1214.26 L2141.84 1214.26 L2141.26 1214.26 L2140.67 1214.26 L2140.09 1214.26 L2139.5 1214.26 L2138.91 1214.26 L2138.33 1214.26 L2137.74 1214.26 L2137.15 1214.26 L2136.57 1214.26 L2135.98 1214.26 L2135.39 1214.26 L2134.81 1214.26 L2134.22 1214.26 L2133.63 1214.26 L2133.05 1214.26 L2132.46 1214.26 L2131.88 1214.26 L2131.29 1214.26 L2130.7 1214.26 L2130.12 1214.26 L2129.53 1214.26 L2128.94 1214.26 L2128.36 1214.26 L2127.77 1214.26 L2127.18 1214.26 L2126.6 1214.26 L2126.01 1214.26 L2125.42 1214.26 L2124.84 1214.26 L2124.25 1214.26 L2123.67 1214.26 L2123.08 1214.26 L2122.49 1214.26 L2121.91 1214.26 L2121.32 1214.26 L2120.73 1214.26 L2120.15 1214.26 L2119.56 1214.26 L2118.97 1214.26 L2118.39 1214.26 L2117.8 1214.26 L2117.22 1214.26 L2116.63 1214.26 L2116.04 1214.26 L2115.46 1214.26 L2114.87 1214.26 L2114.28 1214.26 L2113.7 1214.26 L2113.11 1214.26 L2112.52 1214.26 L2111.94 1214.26 L2111.35 1214.26 L2110.76 1214.26 L2110.18 1214.26 L2109.59 1214.26 L2109.01 1214.26 L2108.42 1214.26 L2107.83 1214.26 L2107.25 1214.26 L2106.66 1214.26 L2106.07 1214.26 L2105.49 1214.26 L2104.9 1214.26 L2104.31 1214.26 L2103.73 1214.26 L2103.14 1214.26 L2102.55 1214.26 L2101.97 1214.26 L2101.38 1214.26 L2100.8 1214.26 L2100.21 1214.26 L2099.62 1214.26 L2099.04 1214.26 L2098.45 1214.26 L2097.86 1214.26 L2097.28 1214.26 L2096.69 1214.26 L2096.1 1214.26 L2095.52 1214.26 L2094.93 1214.26 L2094.35 1214.26 L2093.76 1214.26 L2093.17 1214.26 L2092.59 1214.26 L2092 1214.26 L2091.41 1214.26 L2090.83 1214.26 L2090.24 1214.26 L2089.65 1214.26 L2089.07 1214.26 L2088.48 1214.26 L2087.89 1214.26 L2087.31 1214.26 L2086.72 1214.26 L2086.14 1214.26 L2085.55 1214.26 L2084.96 1214.26 L2084.38 1214.26 L2083.79 1214.26 L2083.2 1214.26 L2082.62 1214.26 L2082.03 1214.26 L2081.44 1214.26 L2080.86 1214.26 L2080.27 1214.26 L2079.68 1214.26 L2079.1 1214.26 L2078.51 1214.26 L2077.93 1214.26 L2077.34 1214.26 L2076.75 1214.26 L2076.17 1214.26 L2075.58 1214.26 L2074.99 1214.26 L2074.41 1214.26 L2073.82 1214.26 L2073.23 1214.26 L2072.65 1214.26 L2072.06 1214.26 L2071.48 1214.26 L2070.89 1214.26 L2070.3 1214.26 L2069.72 1214.26 L2069.13 1214.26 L2068.54 1214.26 L2067.96 1214.26 L2067.37 1214.26 L2066.78 1214.26 L2066.2 1214.26 L2065.61 1214.26 L2065.02 1214.26 L2064.44 1214.26 L2063.85 1214.26 L2063.27 1214.26 L2062.68 1214.26 L2062.09 1214.26 L2061.51 1214.26 L2060.92 1214.26 L2060.33 1214.26 L2059.75 1214.26 L2059.16 1214.26 L2058.57 1214.26 L2057.99 1214.26 L2057.4 1214.26 L2056.81 1214.26 L2056.23 1214.26 L2055.64 1214.26 L2055.06 1214.26 L2054.47 1214.26 L2053.88 1214.26 L2053.3 1214.26 L2052.71 1214.26 L2052.12 1214.26 L2051.54 1214.26 L2050.95 1214.26 L2050.36 1214.26 L2049.78 1214.26 L2049.19 1214.26 L2048.6 1214.26 L2048.02 1214.26 L2047.43 1214.26 L2046.85 1214.26 L2046.26 1214.26 L2045.67 1214.26 L2045.09 1214.26 L2044.5 1214.26 L2043.91 1214.26 L2043.33 1214.26 L2042.74 1214.26 L2042.15 1214.26 L2041.57 1214.26 L2040.98 1214.26 L2040.4 1214.26 L2039.81 1214.26 L2039.22 1214.26 L2038.64 1214.26 L2038.05 1214.26 L2037.46 1214.26 L2036.88 1214.26 L2036.29 1214.26 L2035.7 1214.26 L2035.12 1214.26 L2034.53 1214.26 L2033.94 1214.26 L2033.36 1214.26 L2032.77 1214.26 L2032.19 1214.26 L2031.6 1214.26 L2031.01 1214.26 L2030.43 1214.26 L2029.84 1214.26 L2029.25 1214.26 L2028.67 1214.26 L2028.08 1214.26 L2027.49 1214.26 L2026.91 1214.26 L2026.32 1214.26 L2025.73 1214.26 L2025.15 1214.26 L2024.56 1214.26 L2023.98 1214.26 L2023.39 1214.26 L2022.8 1214.26 L2022.22 1214.26 L2021.63 1214.26 L2021.04 1214.26 L2020.46 1214.26 L2019.87 1214.26 L2019.28 1214.26 L2018.7 1214.26 L2018.11 1214.26 L2017.53 1214.26 L2016.94 1214.26 L2016.35 1214.26 L2015.77 1214.26 L2015.18 1214.26 L2014.59 1214.26 L2014.01 1214.26 L2013.42 1214.26 L2012.83 1214.26 L2012.25 1214.26 L2011.66 1214.26 L2011.07 1214.26 L2010.49 1214.26 L2009.9 1214.26 L2009.32 1214.26 L2008.73 1214.26 L2008.14 1214.26 L2007.56 1214.26 L2006.97 1214.26 L2006.38 1214.26 L2005.8 1214.26 L2005.21 1214.26 L2004.62 1214.26 L2004.04 1214.26 L2003.45 1214.26 L2002.86 1214.26 L2002.28 1214.26 L2001.69 1214.26 L2001.11 1214.26 L2000.52 1214.26 L1999.93 1214.26 L1999.35 1214.26 L1998.76 1214.26 L1998.17 1214.26 L1997.59 1214.26 L1997 1214.26 L1996.41 1214.26 L1995.83 1214.26 L1995.24 1214.26 L1994.65 1214.26 L1994.07 1214.26 L1993.48 1214.26 L1992.9 1214.26 L1992.31 1214.26 L1991.72 1214.26 L1991.14 1214.26 L1990.55 1214.26 L1989.96 1214.26 L1989.38 1214.26 L1988.79 1214.26 L1988.2 1214.26 L1987.62 1214.26 L1987.03 1214.26 L1986.45 1214.26 L1985.86 1214.26 L1985.27 1214.26 L1984.69 1214.26 L1984.1 1214.26 L1983.51 1214.26 L1982.93 1214.26 L1982.34 1214.26 L1981.75 1214.26 L1981.17 1214.26 L1980.58 1214.26 L1979.99 1214.26 L1979.41 1214.26 L1978.82 1214.26 L1978.24 1214.26 L1977.65 1214.26 L1977.06 1214.26 L1976.48 1214.26 L1975.89 1214.26 L1975.3 1214.26 L1974.72 1214.26 L1974.13 1214.26 L1973.54 1214.26 L1972.96 1214.26 L1972.37 1214.26 L1971.78 1214.26 L1971.2 1214.26 L1970.61 1214.26 L1970.03 1214.26 L1969.44 1214.26 L1968.85 1214.26 L1968.27 1214.26 L1967.68 1214.26 L1967.09 1214.26 L1966.51 1214.26 L1965.92 1214.26 L1965.33 1214.26 L1964.75 1214.26 L1964.16 1214.26 L1963.58 1214.26 L1962.99 1214.26 L1962.4 1214.26 L1961.82 1214.26 L1961.23 1214.26 L1960.64 1214.26 L1960.06 1214.26 L1959.47 1214.26 L1958.88 1214.26 L1958.3 1214.26 L1957.71 1214.26 L1957.12 1214.26 L1956.54 1214.26 L1955.95 1214.26 L1955.37 1214.26 L1954.78 1214.26 L1954.19 1214.26 L1953.61 1214.26 L1953.02 1214.26 L1952.43 1214.26 L1951.85 1214.26 L1951.26 1214.26 L1950.67 1214.26 L1950.09 1214.26 L1949.5 1214.26 L1948.91 1214.26 L1948.33 1214.26 L1947.74 1214.26 L1947.16 1214.26 L1946.57 1214.26 L1945.98 1214.26 L1945.4 1214.26 L1944.81 1214.26 L1944.22 1214.26 L1943.64 1214.26 L1943.05 1214.26 L1942.46 1214.26 L1941.88 1214.26 L1941.29 1214.26 L1940.71 1214.26 L1940.12 1214.26 L1939.53 1214.26 L1938.95 1214.26 L1938.36 1214.26 L1937.77 1214.26 L1937.19 1214.26 L1936.6 1214.26 L1936.01 1214.26 L1935.43 1214.26 L1934.84 1214.26 L1934.25 1214.26 L1933.67 1214.26 L1933.08 1214.26 L1932.5 1214.26 L1931.91 1214.26 L1931.32 1214.26 L1930.74 1214.26 L1930.15 1214.26 L1929.56 1214.26 L1928.98 1214.26 L1928.39 1214.26 L1927.8 1214.26 L1927.22 1214.26 L1926.63 1214.26 L1926.04 1214.26 L1925.46 1214.26 L1924.87 1214.26 L1924.29 1214.26 L1923.7 1214.26 L1923.11 1214.26 L1922.53 1214.26 L1921.94 1214.26 L1921.35 1214.26 L1920.77 1214.26 L1920.18 1214.26 L1919.59 1214.26 L1919.01 1214.26 L1918.42 1214.26 L1917.83 1214.26 L1917.25 1214.26 L1916.66 1214.26 L1916.08 1214.26 L1915.49 1214.26 L1914.9 1214.26 L1914.32 1214.26 L1913.73 1214.26 L1913.14 1214.26 L1912.56 1214.26 L1911.97 1214.26 L1911.38 1214.26 L1910.8 1214.26 L1910.21 1214.26 L1909.63 1214.26 L1909.04 1214.26 L1908.45 1214.26 L1907.87 1214.26 L1907.28 1214.26 L1906.69 1214.26 L1906.11 1214.26 L1905.52 1214.26 L1904.93 1214.26 L1904.35 1214.26 L1903.76 1214.26 L1903.17 1214.26 L1902.59 1214.26 L1902 1214.26 L1901.42 1214.26 L1900.83 1214.26 L1900.24 1214.26 L1899.66 1214.26 L1899.07 1214.26 L1898.48 1214.26 L1897.9 1214.26 L1897.31 1214.26 L1896.72 1214.26 L1896.14 1214.26 L1895.55 1214.26 L1894.96 1214.26 L1894.38 1214.26 L1893.79 1214.26 L1893.21 1214.26 L1892.62 1214.26 L1892.03 1214.26 L1891.45 1214.26 L1890.86 1214.26 L1890.27 1214.26 L1889.69 1214.26 L1889.1 1214.26 L1888.51 1214.26 L1887.93 1214.26 L1887.34 1214.26 L1886.76 1214.26 L1886.17 1214.26 L1885.58 1214.26 L1885 1214.26 L1884.41 1214.26 L1883.82 1214.26 L1883.24 1214.26 L1882.65 1214.26 L1882.06 1214.26 L1881.48 1214.26 L1880.89 1214.26 L1880.3 1214.26 L1879.72 1214.26 L1879.13 1214.26 L1878.55 1214.26 L1877.96 1214.26 L1877.37 1214.26 L1876.79 1214.26 L1876.2 1214.26 L1875.61 1214.26 L1875.03 1214.26 L1874.44 1214.26 L1873.85 1214.26 L1873.27 1214.26 L1872.68 1214.26 L1872.09 1214.26 L1871.51 1214.26 L1870.92 1214.26 L1870.34 1214.26 L1869.75 1214.26 L1869.16 1214.26 L1868.58 1214.26 L1867.99 1214.26 L1867.4 1214.26 L1866.82 1214.26 L1866.23 1214.26 L1865.64 1214.26 L1865.06 1214.26 L1864.47 1214.26 L1863.88 1214.26 L1863.3 1214.26 L1862.71 1214.26 L1862.13 1214.26 L1861.54 1214.26 L1860.95 1214.26 L1860.37 1214.26 L1859.78 1214.26 L1859.19 1214.26 L1858.61 1214.26 L1858.02 1214.26 L1857.43 1214.26 L1856.85 1214.26 L1856.26 1214.26 L1855.68 1214.26 L1855.09 1214.26 L1854.5 1214.26 L1853.92 1214.26 L1853.33 1214.26 L1852.74 1214.26 L1852.16 1214.26 L1851.57 1214.26 L1850.98 1214.26 L1850.4 1214.26 L1849.81 1214.26 L1849.22 1214.26 L1848.64 1214.26 L1848.05 1214.26 L1847.47 1214.26 L1846.88 1214.26 L1846.29 1214.26 L1845.71 1214.26 L1845.12 1214.26 L1844.53 1214.26 L1843.95 1214.26 L1843.36 1214.26 L1842.77 1214.26 L1842.19 1214.26 L1841.6 1214.26 L1841.01 1214.26 L1840.43 1214.26 L1839.84 1214.26 L1839.26 1214.26 L1838.67 1214.26 L1838.08 1214.26 L1837.5 1214.26 L1836.91 1214.26 L1836.32 1214.26 L1835.74 1214.26 L1835.15 1214.26 L1834.56 1214.26 L1833.98 1214.26 L1833.39 1214.26 L1832.81 1214.26 L1832.22 1214.26 L1831.63 1214.26 L1831.05 1214.26 L1830.46 1214.26 L1829.87 1214.26 L1829.29 1214.26 L1828.7 1214.26 L1828.11 1214.26 L1827.53 1214.26 L1826.94 1214.26 L1826.35 1214.26 L1825.77 1214.26 L1825.18 1214.26 L1824.6 1214.26 L1824.01 1214.26 L1823.42 1214.26 L1822.84 1214.26 L1822.25 1214.26 L1821.66 1214.26 L1821.08 1214.26 L1820.49 1214.26 L1819.9 1214.26 L1819.32 1214.26 L1818.73 1214.26 L1818.14 1214.26 L1817.56 1214.26 L1816.97 1214.26 L1816.39 1214.26 L1815.8 1214.26 L1815.21 1214.26 L1814.63 1214.26 L1814.04 1214.26 L1813.45 1214.26 L1812.87 1214.26 L1812.28 1214.26 L1811.69 1214.26 L1811.11 1214.26 L1810.52 1214.26 L1809.94 1214.26 L1809.35 1214.26 L1808.76 1214.26 L1808.18 1214.26 L1807.59 1214.26 L1807 1214.26 L1806.42 1214.26 L1805.83 1214.26 L1805.24 1214.26 L1804.66 1214.26 L1804.07 1214.26 L1803.48 1214.26 L1802.9 1214.26 L1802.31 1214.26 L1801.73 1214.26 L1801.14 1214.26 L1800.55 1214.26 L1799.97 1214.26 L1799.38 1214.26 L1798.79 1214.26 L1798.21 1214.26 L1797.62 1214.26 L1797.03 1214.26 L1796.45 1214.26 L1795.86 1214.26 L1795.27 1214.26 L1794.69 1214.26 L1794.1 1214.26 L1793.52 1214.26 L1792.93 1214.26 L1792.34 1214.26 L1791.76 1214.26 L1791.17 1214.26 L1790.58 1214.26 L1790 1214.26 L1789.41 1214.26 L1788.82 1214.26 L1788.24 1214.26 L1787.65 1214.26 L1787.06 1214.26 L1786.48 1214.26 L1785.89 1214.26 L1785.31 1214.26 L1784.72 1214.26 L1784.13 1214.26 L1783.55 1214.26 L1782.96 1214.26 L1782.37 1214.26 L1781.79 1214.26 L1781.2 1214.26 L1780.61 1214.26 L1780.03 1214.26 L1779.44 1214.26 L1778.86 1214.26 L1778.27 1214.26 L1777.68 1214.26 L1777.1 1214.26 L1776.51 1214.26 L1775.92 1214.26 L1775.34 1214.26 L1774.75 1214.26 L1774.16 1214.26 L1773.58 1214.26 L1772.99 1214.26 L1772.4 1214.26 L1771.82 1214.26 L1771.23 1214.26 L1770.65 1214.26 L1770.06 1214.26 L1769.47 1214.26 L1768.89 1214.26 L1768.3 1214.26 L1767.71 1214.26 L1767.13 1214.26 L1766.54 1214.26 L1765.95 1214.26 L1765.37 1214.26 L1764.78 1214.26 L1764.19 1214.26 L1763.61 1214.26 L1763.02 1214.26 L1762.44 1214.26 L1761.85 1214.26 L1761.26 1214.26 L1760.68 1214.26 L1760.09 1214.26 L1759.5 1214.26 L1758.92 1214.26 L1758.33 1214.26 L1757.74 1214.26 L1757.16 1214.26 L1756.57 1214.26 L1755.99 1214.26 L1755.4 1214.26 L1754.81 1214.26 L1754.23 1214.26 L1753.64 1214.26 L1753.05 1214.26 L1752.47 1214.26 L1751.88 1214.26 L1751.29 1214.26 L1750.71 1214.26 L1750.12 1214.26 L1749.53 1214.26 L1748.95 1214.26 L1748.36 1214.26 L1747.78 1214.26 L1747.19 1214.26 L1746.6 1214.26 L1746.02 1214.26 L1745.43 1214.26 L1744.84 1214.26 L1744.26 1214.26 L1743.67 1214.26 L1743.08 1214.26 L1742.5 1214.26 L1741.91 1214.26 L1741.32 1214.26 L1740.74 1214.26 L1740.15 1214.26 L1739.57 1214.26 L1738.98 1214.26 L1738.39 1214.26 L1737.81 1214.26 L1737.22 1214.26 L1736.63 1214.26 L1736.05 1214.26 L1735.46 1214.26 L1734.87 1214.26 L1734.29 1214.26 L1733.7 1214.26 L1733.11 1214.26 L1732.53 1214.26 L1731.94 1214.26 L1731.36 1214.26 L1730.77 1214.26 L1730.18 1214.26 L1729.6 1214.26 L1729.01 1214.26 L1728.42 1214.26 L1727.84 1214.26 L1727.25 1214.26 L1726.66 1214.26 L1726.08 1214.26 L1725.49 1214.26 L1724.91 1214.26 L1724.32 1214.26 L1723.73 1214.26 L1723.15 1214.26 L1722.56 1214.26 L1721.97 1214.26 L1721.39 1214.26 L1720.8 1214.26 L1720.21 1214.26 L1719.63 1214.26 L1719.04 1214.26 L1718.45 1214.26 L1717.87 1214.26 L1717.28 1214.26 L1716.7 1214.26 L1716.11 1214.26 L1715.52 1214.26 L1714.94 1214.26 L1714.35 1214.26 L1713.76 1214.26 L1713.18 1214.26 L1712.59 1214.26 L1712 1214.26 L1711.42 1214.26 L1710.83 1214.26 L1710.24 1214.26 L1709.66 1214.26 L1709.07 1214.26 L1708.49 1214.26 L1707.9 1214.26 L1707.31 1214.26 L1706.73 1214.26 L1706.14 1214.26 L1705.55 1214.26 L1704.97 1214.26 L1704.38 1214.26 L1703.79 1214.26 L1703.21 1214.26 L1702.62 1214.26 L1702.04 1214.26 L1701.45 1214.26 L1700.86 1214.26 L1700.28 1214.26 L1699.69 1214.26 L1699.1 1214.26 L1698.52 1214.26 L1697.93 1214.26 L1697.34 1214.26 L1696.76 1214.26 L1696.17 1214.26 L1695.58 1214.26 L1695 1214.26 L1694.41 1214.26 L1693.83 1214.26 L1693.24 1214.26 L1692.65 1214.26 L1692.07 1214.26 L1691.48 1214.26 L1690.89 1214.26 L1690.31 1214.26 L1689.72 1214.26 L1689.13 1214.26 L1688.55 1214.26 L1687.96 1214.26 L1687.37 1214.26 L1686.79 1214.26 L1686.2 1214.26 L1685.62 1214.26 L1685.03 1214.26 L1684.44 1214.26 L1683.86 1214.26 L1683.27 1214.26 L1682.68 1214.26 L1682.1 1214.26 L1681.51 1214.26 L1680.92 1214.26 L1680.34 1214.26 L1679.75 1214.26 L1679.17 1214.26 L1678.58 1214.26 L1677.99 1214.26 L1677.41 1214.26 L1676.82 1214.26 L1676.23 1214.26 L1675.65 1214.26 L1675.06 1214.26 L1674.47 1214.26 L1673.89 1214.26 L1673.3 1214.26 L1672.71 1214.26 L1672.13 1214.26 L1671.54 1214.26 L1670.96 1214.26 L1670.37 1214.26 L1669.78 1214.26 L1669.2 1214.26 L1668.61 1214.26 L1668.02 1214.26 L1667.44 1214.26 L1666.85 1214.26 L1666.26 1214.26 L1665.68 1214.26 L1665.09 1214.26 L1664.5 1214.26 L1663.92 1214.26 L1663.33 1214.26 L1662.75 1214.26 L1662.16 1214.26 L1661.57 1214.26 L1660.99 1214.26 L1660.4 1214.26 L1659.81 1214.26 L1659.23 1214.26 L1658.64 1214.26 L1658.05 1214.26 L1657.47 1214.26 L1656.88 1214.26 L1656.29 1214.26 L1655.71 1214.26 L1655.12 1214.26 L1654.54 1214.26 L1653.95 1214.26 L1653.36 1214.26 L1652.78 1214.26 L1652.19 1214.26 L1651.6 1214.26 L1651.02 1214.26 L1650.43 1214.26 L1649.84 1214.26 L1649.26 1214.26 L1648.67 1214.26 L1648.09 1214.26 L1647.5 1214.26 L1646.91 1214.26 L1646.33 1214.26 L1645.74 1214.26 L1645.15 1214.26 L1644.57 1214.26 L1643.98 1214.26 L1643.39 1214.26 L1642.81 1214.26 L1642.22 1214.26 L1641.63 1214.26 L1641.05 1214.26 L1640.46 1214.26 L1639.88 1214.26 L1639.29 1214.26 L1638.7 1214.26 L1638.12 1214.26 L1637.53 1214.26 L1636.94 1214.26 L1636.36 1214.26 L1635.77 1214.26 L1635.18 1214.26 L1634.6 1214.26 L1634.01 1214.26 L1633.42 1214.26 L1632.84 1214.26 L1632.25 1214.26 L1631.67 1214.26 L1631.08 1214.26 L1630.49 1214.26 L1629.91 1214.26 L1629.32 1214.26 L1628.73 1214.26 L1628.15 1214.26 L1627.56 1214.26 L1626.97 1214.26 L1626.39 1214.26 L1625.8 1214.26 L1625.22 1214.26 L1624.63 1214.26 L1624.04 1214.26 L1623.46 1214.26 L1622.87 1214.26 L1622.28 1214.26 L1621.7 1214.26 L1621.11 1214.26 L1620.52 1214.26 L1619.94 1214.26 L1619.35 1214.26 L1618.76 1214.26 L1618.18 1214.26 L1617.59 1214.26 L1617.01 1214.26 L1616.42 1214.26 L1615.83 1214.26 L1615.25 1214.26 L1614.66 1214.26 L1614.07 1214.26 L1613.49 1214.26 L1612.9 1214.26 L1612.31 1214.26 L1611.73 1214.26 L1611.14 1214.26 L1610.55 1214.26 L1609.97 1214.26 L1609.38 1214.26 L1608.8 1214.26 L1608.21 1214.26 L1607.62 1214.26 L1607.04 1214.26 L1606.45 1214.26 L1605.86 1214.26 L1605.28 1214.26 L1604.69 1214.26 L1604.1 1214.26 L1603.52 1214.26 L1602.93 1214.26 L1602.34 1214.26 L1601.76 1214.26 L1601.17 1214.26 L1600.59 1214.26 L1600 1214.26 L1599.41 1214.26 L1598.83 1214.26 L1598.24 1214.26 L1597.65 1214.26 L1597.07 1214.26 L1596.48 1214.26 L1595.89 1214.26 L1595.31 1214.26 L1594.72 1214.26 L1594.14 1214.26 L1593.55 1214.26 L1592.96 1214.26 L1592.38 1214.26 L1591.79 1214.26 L1591.2 1214.26 L1590.62 1214.26 L1590.03 1214.26 L1589.44 1214.26 L1588.86 1214.26 L1588.27 1214.26 L1587.68 1214.26 L1587.1 1214.26 L1586.51 1214.26 L1585.93 1214.26 L1585.34 1214.26 L1584.75 1214.26 L1584.17 1214.26 L1583.58 1214.26 L1582.99 1214.26 L1582.41 1214.26 L1581.82 1214.26 L1581.23 1214.26 L1580.65 1214.26 L1580.06 1214.26 L1579.47 1214.26 L1578.89 1214.26 L1578.3 1214.26 L1577.72 1214.26 L1577.13 1214.26 L1576.54 1214.26 L1575.96 1214.26 L1575.37 1214.26 L1574.78 1214.26 L1574.2 1214.26 L1573.61 1214.26 L1573.02 1214.26 L1572.44 1214.26 L1571.85 1214.26 L1571.27 1214.26 L1570.68 1214.26 L1570.09 1214.26 L1569.51 1214.26 L1568.92 1214.26 L1568.33 1214.26 L1567.75 1214.26 L1567.16 1214.26 L1566.57 1214.26 L1565.99 1214.26 L1565.4 1214.26 L1564.81 1214.26 L1564.23 1214.26 L1563.64 1214.26 L1563.06 1214.26 L1562.47 1214.26 L1561.88 1214.26 L1561.3 1214.26 L1560.71 1214.26 L1560.12 1214.26 L1559.54 1214.26 L1558.95 1214.26 L1558.36 1214.26 L1557.78 1214.26 L1557.19 1214.26 L1556.6 1214.26 L1556.02 1214.26 L1555.43 1214.26 L1554.85 1214.26 L1554.26 1214.26 L1553.67 1214.26 L1553.09 1214.26 L1552.5 1214.26 L1551.91 1214.26 L1551.33 1214.26 L1550.74 1214.26 L1550.15 1214.26 L1549.57 1214.26 L1548.98 1214.26 L1548.4 1214.26 L1547.81 1214.26 L1547.22 1214.26 L1546.64 1214.26 L1546.05 1214.26 L1545.46 1214.26 L1544.88 1214.26 L1544.29 1214.26 L1543.7 1214.26 L1543.12 1214.26 L1542.53 1214.26 L1541.94 1214.26 L1541.36 1214.26 L1540.77 1214.26 L1540.19 1214.26 L1539.6 1214.26 L1539.01 1214.26 L1538.43 1214.26 L1537.84 1214.26 L1537.25 1214.26 L1536.67 1214.26 L1536.08 1214.26 L1535.49 1214.26 L1534.91 1214.26 L1534.32 1214.26 L1533.73 1214.26 L1533.15 1214.26 L1532.56 1214.26 L1531.98 1214.26 L1531.39 1214.26 L1530.8 1214.26 L1530.22 1214.26 L1529.63 1214.26 L1529.04 1214.26 L1528.46 1214.26 L1527.87 1214.26 L1527.28 1214.26 L1526.7 1214.26 L1526.11 1214.26 L1525.52 1214.26 L1524.94 1214.26 L1524.35 1214.26 L1523.77 1214.26 L1523.18 1214.26 L1522.59 1214.26 L1522.01 1214.26 L1521.42 1214.26 L1520.83 1214.26 L1520.25 1214.26 L1519.66 1214.26 L1519.07 1214.26 L1518.49 1214.26 L1517.9 1214.26 L1517.32 1214.26 L1516.73 1214.26 L1516.14 1214.26 L1515.56 1214.26 L1514.97 1214.26 L1514.38 1214.26 L1513.8 1214.26 L1513.21 1214.26 L1512.62 1214.26 L1512.04 1214.26 L1511.45 1214.26 L1510.86 1214.26 L1510.28 1214.26 L1509.69 1214.26 L1509.11 1214.26 L1508.52 1214.26 L1507.93 1214.26 L1507.35 1214.26 L1506.76 1214.26 L1506.17 1214.26 L1505.59 1214.26 L1505 1214.26 L1504.41 1214.26 L1503.83 1214.26 L1503.24 1214.26 L1502.65 1214.26 L1502.07 1214.26 L1501.48 1214.26 L1500.9 1214.26 L1500.31 1214.26 L1499.72 1214.26 L1499.14 1214.26 L1498.55 1214.26 L1497.96 1214.26 L1497.38 1214.26 L1496.79 1214.26 L1496.2 1214.26 L1495.62 1214.26 L1495.03 1214.26 L1494.45 1214.26 L1493.86 1214.26 L1493.27 1214.26 L1492.69 1214.26 L1492.1 1214.26 L1491.51 1214.26 L1490.93 1214.26 L1490.34 1214.26 L1489.75 1214.26 L1489.17 1214.26 L1488.58 1214.26 L1487.99 1214.26 L1487.41 1214.26 L1486.82 1214.26 L1486.24 1214.26 L1485.65 1214.26 L1485.06 1214.26 L1484.48 1214.26 L1483.89 1214.26 L1483.3 1214.26 L1482.72 1214.26 L1482.13 1214.26 L1481.54 1214.26 L1480.96 1214.26 L1480.37 1214.26 L1479.78 1214.26 L1479.2 1214.26 L1478.61 1214.26 L1478.03 1214.26 L1477.44 1214.26 L1476.85 1214.26 L1476.27 1214.26 L1475.68 1214.26 L1475.09 1214.26 L1474.51 1214.26 L1473.92 1214.26 L1473.33 1214.26 L1472.75 1214.26 L1472.16 1214.26 L1471.57 1214.26 L1470.99 1214.26 L1470.4 1214.26 L1469.82 1214.26 L1469.23 1214.26 L1468.64 1214.26 L1468.06 1214.26 L1467.47 1214.26 L1466.88 1214.26 L1466.3 1214.26 L1465.71 1214.26 L1465.12 1214.26 L1464.54 1214.26 L1463.95 1214.26 L1463.37 1214.26 L1462.78 1214.26 L1462.19 1214.26 L1461.61 1214.26 L1461.02 1214.26 L1460.43 1214.26 L1459.85 1214.26 L1459.26 1214.26 L1458.67 1214.26 L1458.09 1214.26 L1457.5 1214.26 L1456.91 1214.26 L1456.33 1214.26 L1455.74 1214.26 L1455.16 1214.26 L1454.57 1214.26 L1453.98 1214.26 L1453.4 1214.26 L1452.81 1214.26 L1452.22 1214.26 L1451.64 1214.26 L1451.05 1214.26 L1450.46 1214.26 L1449.88 1214.26 L1449.29 1214.26 L1448.7 1214.26 L1448.12 1214.26 L1447.53 1214.26 L1446.95 1214.26 L1446.36 1214.26 L1445.77 1214.26 L1445.19 1214.26 L1444.6 1214.26 L1444.01 1214.26 L1443.43 1214.26 L1442.84 1214.26 L1442.25 1214.26 L1441.67 1214.26 L1441.08 1214.26 L1440.5 1214.26 L1439.91 1214.26 L1439.32 1214.26 L1438.74 1214.26 L1438.15 1214.26 L1437.56 1214.26 L1436.98 1214.26 L1436.39 1214.26 L1435.8 1214.26 L1435.22 1214.26 L1434.63 1214.26 L1434.04 1214.26 L1433.46 1214.26 L1432.87 1214.26 L1432.29 1214.26 L1431.7 1214.26 L1431.11 1214.26 L1430.53 1214.26 L1429.94 1214.26 L1429.35 1214.26 L1428.77 1214.26 L1428.18 1214.26 L1427.59 1214.26 L1427.01 1214.26 L1426.42 1214.26 L1425.83 1214.26 L1425.25 1214.26 L1424.66 1214.26 L1424.08 1214.26 L1423.49 1214.26 L1422.9 1214.26 L1422.32 1214.26 L1421.73 1214.26 L1421.14 1214.26 L1420.56 1214.26 L1419.97 1214.26 L1419.38 1214.26 L1418.8 1214.26 L1418.21 1214.26 L1417.63 1214.26 L1417.04 1214.26 L1416.45 1214.26 L1415.87 1214.26 L1415.28 1214.26 L1414.69 1214.26 L1414.11 1214.26 L1413.52 1214.26 L1412.93 1214.26 L1412.35 1214.26 L1411.76 1214.26 L1411.17 1214.26 L1410.59 1214.26 L1410 1214.26 L1409.42 1214.26 L1408.83 1214.26 L1408.24 1214.26 L1407.66 1214.26 L1407.07 1214.26 L1406.48 1214.26 L1405.9 1214.26 L1405.31 1214.26 L1404.72 1214.26 L1404.14 1214.26 L1403.55 1214.26 L1402.96 1214.26 L1402.38 1214.26 L1401.79 1214.26 L1401.21 1214.26 L1400.62 1214.26 L1400.03 1214.26 L1399.45 1214.26 L1398.86 1214.26 L1398.27 1214.26 L1397.69 1214.26 L1397.1 1214.26 L1396.51 1214.26 L1395.93 1214.26 L1395.34 1214.26 L1394.75 1214.26 L1394.17 1214.26 L1393.58 1214.26 L1393 1214.26 L1392.41 1214.26 L1391.82 1214.26 L1391.24 1214.26 L1390.65 1214.26 L1390.06 1214.26 L1389.48 1214.26 L1388.89 1214.26 L1388.3 1214.26 L1387.72 1214.26 L1387.13 1214.26 L1386.55 1214.26 L1385.96 1214.26 L1385.37 1214.26 L1384.79 1214.26 L1384.2 1214.26 L1383.61 1214.26 L1383.03 1214.26 L1382.44 1214.26 L1381.85 1214.26 L1381.27 1214.26 L1380.68 1214.26 L1380.09 1214.26 L1379.51 1214.26 L1378.92 1214.26 L1378.34 1214.26 L1377.75 1214.26 L1377.16 1214.26 L1376.58 1214.26 L1375.99 1214.26 L1375.4 1214.26 L1374.82 1214.26 L1374.23 1214.26 L1373.64 1214.26 L1373.06 1214.26 L1372.47 1214.26 L1371.88 1214.26 L1371.3 1214.26 L1370.71 1214.26 L1370.13 1214.26 L1369.54 1214.26 L1368.95 1214.26 L1368.37 1214.26 L1367.78 1214.26 L1367.19 1214.26 L1366.61 1214.26 L1366.02 1214.26 L1365.43 1214.26 L1364.85 1214.26 L1364.26 1214.26 L1363.68 1214.26 L1363.09 1214.26 L1362.5 1214.26 L1361.92 1214.26 L1361.33 1214.26 L1360.74 1214.26 L1360.16 1214.26 L1359.57 1214.26 L1358.98 1214.26 L1358.4 1214.26 L1357.81 1214.26 L1357.22 1214.26 L1356.64 1214.26 L1356.05 1214.26 L1355.47 1214.26 L1354.88 1214.26 L1354.29 1214.26 L1353.71 1214.26 L1353.12 1214.26 L1352.53 1214.26 L1351.95 1214.26 L1351.36 1214.26 L1350.77 1214.26 L1350.19 1214.26 L1349.6 1214.26 L1349.01 1214.26 L1348.43 1214.26 L1347.84 1214.26 L1347.26 1214.26 L1346.67 1214.26 L1346.08 1214.26 L1345.5 1214.26 L1344.91 1214.26 L1344.32 1214.26 L1343.74 1214.26 L1343.15 1214.26 L1342.56 1214.26 L1341.98 1214.26 L1341.39 1214.26 L1340.8 1214.26 L1340.22 1214.26 L1339.63 1214.26 L1339.05 1214.26 L1338.46 1214.26 L1337.87 1214.26 L1337.29 1214.26 L1336.7 1214.26 L1336.11 1214.26 L1335.53 1214.26 L1334.94 1214.26 L1334.35 1214.26 L1333.77 1214.26 L1333.18 1214.26 L1332.6 1214.26 L1332.01 1214.26 L1331.42 1214.26 L1330.84 1214.26 L1330.25 1214.26 L1329.66 1214.26 L1329.08 1214.26 L1328.49 1214.26 L1327.9 1214.26 L1327.32 1214.26 L1326.73 1214.26 L1326.14 1214.26 L1325.56 1214.26 L1324.97 1214.26 L1324.39 1214.26 L1323.8 1214.26 L1323.21 1214.26 L1322.63 1214.26 L1322.04 1214.26 L1321.45 1214.26 L1320.87 1214.26 L1320.28 1214.26 L1319.69 1214.26 L1319.11 1214.26 L1318.52 1214.26 L1317.93 1214.26 L1317.35 1214.26 L1316.76 1214.26 L1316.18 1214.26 L1315.59 1214.26 L1315 1214.26 L1314.42 1214.26 L1313.83 1214.26 L1313.24 1214.26 L1312.66 1214.26 L1312.07 1214.26 L1311.48 1214.26 L1310.9 1214.26 L1310.31 1214.26 L1309.73 1214.26 L1309.14 1214.26 L1308.55 1214.26 L1307.97 1214.26 L1307.38 1214.26 L1306.79 1214.26 L1306.21 1214.26 L1305.62 1214.26 L1305.03 1214.26 L1304.45 1214.26 L1303.86 1214.26 L1303.27 1214.26 L1302.69 1214.26 L1302.1 1214.26 L1301.52 1214.26 L1300.93 1214.26 L1300.34 1214.26 L1299.76 1214.26 L1299.17 1214.26 L1298.58 1214.26 L1298 1214.26 L1297.41 1214.26 L1296.82 1214.26 L1296.24 1214.26 L1295.65 1214.26 L1295.06 1214.26 L1294.48 1214.26 L1293.89 1214.26 L1293.31 1214.26 L1292.72 1214.26 L1292.13 1214.26 L1291.55 1214.26 L1290.96 1214.26 L1290.37 1214.26 L1289.79 1214.26 L1289.2 1214.26 L1288.61 1214.26 L1288.03 1214.26 L1287.44 1214.26 L1286.86 1214.26 L1286.27 1214.26 L1285.68 1214.26 L1285.1 1214.26 L1284.51 1214.26 L1283.92 1214.26 L1283.34 1214.26 L1282.75 1214.26 L1282.16 1214.26 L1281.58 1214.26 L1280.99 1214.26 L1280.4 1214.26 L1279.82 1214.26 L1279.23 1214.26 L1278.65 1214.26 L1278.06 1214.26 L1277.47 1214.26 L1276.89 1214.26 L1276.3 1214.26 L1275.71 1214.26 L1275.13 1214.26 L1274.54 1214.26 L1273.95 1214.26 L1273.37 1214.26 L1272.78 1214.26 L1272.19 1214.26 L1271.61 1214.26 L1271.02 1214.26 L1270.44 1214.26 L1269.85 1214.26 L1269.26 1214.26 L1268.68 1214.26 L1268.09 1214.26 L1267.5 1214.26 L1266.92 1214.26 L1266.33 1214.26 L1265.74 1214.26 L1265.16 1214.26 L1264.57 1214.26 L1263.98 1214.26 L1263.4 1214.26 L1262.81 1214.26 L1262.23 1214.26 L1261.64 1214.26 L1261.05 1214.26 L1260.47 1214.26 L1259.88 1214.26 L1259.29 1214.26 L1258.71 1214.26 L1258.12 1214.26 L1257.53 1214.26 L1256.95 1214.26 L1256.36 1214.26 L1255.78 1214.26 L1255.19 1214.26 L1254.6 1214.26 L1254.02 1214.26 L1253.43 1214.26 L1252.84 1214.26 L1252.26 1214.26 L1251.67 1214.26 L1251.08 1214.26 L1250.5 1214.26 L1249.91 1214.26 L1249.32 1214.26 L1248.74 1214.26 L1248.15 1214.26 L1247.57 1214.26 L1246.98 1214.26 L1246.39 1214.26 L1245.81 1214.26 L1245.22 1214.26 L1244.63 1214.26 L1244.05 1214.26 L1243.46 1214.26 L1242.87 1214.26 L1242.29 1214.26 L1241.7 1214.26 L1241.11 1214.26 L1240.53 1214.26 L1239.94 1214.26 L1239.36 1214.26 L1238.77 1214.26 L1238.18 1214.26 L1237.6 1214.26 L1237.01 1214.26 L1236.42 1214.26 L1235.84 1214.26 L1235.25 1214.26 L1234.66 1214.26 L1234.08 1214.26 L1233.49 1214.26 L1232.91 1214.26 L1232.32 1214.26 L1231.73 1214.26 L1231.15 1214.26 L1230.56 1214.26 L1229.97 1214.26 L1229.39 1214.26 L1228.8 1214.26 L1228.21 1214.26 L1227.63 1214.26 L1227.04 1214.26 L1226.45 1214.26 L1225.87 1214.26 L1225.28 1214.26 L1224.7 1214.26 L1224.11 1214.26 L1223.52 1214.26 L1222.94 1214.26 L1222.35 1214.26 L1221.76 1214.26 L1221.18 1214.26 L1220.59 1214.26 L1220 1214.26 L1219.42 1214.26 L1218.83 1214.26 L1218.24 1214.26 L1217.66 1214.26 L1217.07 1214.26 L1216.49 1214.26 L1215.9 1214.26 L1215.31 1214.26 L1214.73 1214.26 L1214.14 1214.26 L1213.55 1214.26 L1212.97 1214.26 L1212.38 1214.26 L1211.79 1214.26 L1211.21 1214.26 L1210.62 1214.26 L1210.03 1214.26 L1209.45 1214.26 L1208.86 1214.26 L1208.28 1214.26 L1207.69 1214.26 L1207.1 1214.26 L1206.52 1214.26 L1205.93 1214.26 L1205.34 1214.26 L1204.76 1214.26 L1204.17 1214.26 L1203.58 1214.26 L1203 1214.26 L1202.41 1214.26 L1201.83 1214.26 L1201.24 1214.26 L1200.65 1214.26 L1200.07 1214.26 L1199.48 1214.26 L1198.89 1214.26 L1198.31 1214.26 L1197.72 1214.26 L1197.13 1214.26 L1196.55 1214.26 L1195.96 1214.26 L1195.37 1214.26 L1194.79 1214.26 L1194.2 1214.26 L1193.62 1214.26 L1193.03 1214.26 L1192.44 1214.26 L1191.86 1214.26 L1191.27 1214.26 L1190.68 1214.26 L1190.1 1214.26 L1189.51 1214.26 L1188.92 1214.26 L1188.34 1214.26 L1187.75 1214.26 L1187.16 1214.26 L1186.58 1214.26 L1185.99 1214.26 L1185.41 1214.26 L1184.82 1214.26 L1184.23 1214.26 L1183.65 1214.26 L1183.06 1214.26 L1182.47 1214.26 L1181.89 1214.26 L1181.3 1214.26 L1180.71 1214.26 L1180.13 1214.26 L1179.54 1214.26 L1178.96 1214.26 L1178.37 1214.26 L1177.78 1214.26 L1177.2 1214.26 L1176.61 1214.26 L1176.02 1214.26 L1175.44 1214.26 L1174.85 1214.26 L1174.26 1214.26 L1173.68 1214.26 L1173.09 1214.26 L1172.5 1214.26 L1171.92 1214.26 L1171.33 1214.26 L1170.75 1214.26 L1170.16 1214.26 L1169.57 1214.26 L1168.99 1214.26 L1168.4 1214.26 L1167.81 1214.26 L1167.23 1214.26 L1166.64 1214.26 L1166.05 1214.26 L1165.47 1214.26 L1164.88 1214.26 L1164.29 1214.26 L1163.71 1214.26 L1163.12 1214.26 L1162.54 1214.26 L1161.95 1214.26 L1161.36 1214.26 L1160.78 1214.26 L1160.19 1214.26 L1159.6 1214.26 L1159.02 1214.26 L1158.43 1214.26 L1157.84 1214.26 L1157.26 1214.26 L1156.67 1214.26 L1156.09 1214.26 L1155.5 1214.26 L1154.91 1214.26 L1154.33 1214.26 L1153.74 1214.26 L1153.15 1214.26 L1152.57 1214.26 L1151.98 1214.26 L1151.39 1214.26 L1150.81 1214.26 L1150.22 1214.26 L1149.63 1214.26 L1149.05 1214.26 L1148.46 1214.26 L1147.88 1214.26 L1147.29 1214.26 L1146.7 1214.26 L1146.12 1214.26 L1145.53 1214.26 L1144.94 1214.26 L1144.36 1214.26 L1143.77 1214.26 L1143.18 1214.26 L1142.6 1214.26 L1142.01 1214.26 L1141.42 1214.26 L1140.84 1214.26 L1140.25 1214.26 L1139.67 1214.26 L1139.08 1214.26 L1138.49 1214.26 L1137.91 1214.26 L1137.32 1214.26 L1136.73 1214.26 L1136.15 1214.26 L1135.56 1214.26 L1134.97 1214.26 L1134.39 1214.26 L1133.8 1214.26 L1133.21 1214.26 L1132.63 1214.26 L1132.04 1214.26 L1131.46 1214.26 L1130.87 1214.26 L1130.28 1214.26 L1129.7 1214.26 L1129.11 1214.26 L1128.52 1214.26 L1127.94 1214.26 L1127.35 1214.26 L1126.76 1214.26 L1126.18 1214.26 L1125.59 1214.26 L1125.01 1214.26 L1124.42 1214.26 L1123.83 1214.26 L1123.25 1214.26 L1122.66 1214.26 L1122.07 1214.26 L1121.49 1214.26 L1120.9 1214.26 L1120.31 1214.26 L1119.73 1214.26 L1119.14 1214.26 L1118.55 1214.26 L1117.97 1214.26 L1117.38 1214.26 L1116.8 1214.26 L1116.21 1214.26 L1115.62 1214.26 L1115.04 1214.26 L1114.45 1214.26 L1113.86 1214.26 L1113.28 1214.26 L1112.69 1214.26 L1112.1 1214.26 L1111.52 1214.26 L1110.93 1214.26 L1110.34 1214.26 L1109.76 1214.26 L1109.17 1214.26 L1108.59 1214.26 L1108 1214.26 L1107.41 1214.26 L1106.83 1214.26 L1106.24 1214.26 L1105.65 1214.26 L1105.07 1214.26 L1104.48 1214.26 L1103.89 1214.26 L1103.31 1214.26 L1102.72 1214.26 L1102.14 1214.26 L1101.55 1214.26 L1100.96 1214.26 L1100.38 1214.26 L1099.79 1214.26 L1099.2 1214.26 L1098.62 1214.26 L1098.03 1214.26 L1097.44 1214.26 L1096.86 1214.26 L1096.27 1214.26 L1095.68 1214.26 L1095.1 1214.26 L1094.51 1214.26 L1093.93 1214.26 L1093.34 1214.26 L1092.75 1214.26 L1092.17 1214.26 L1091.58 1214.26 L1090.99 1214.26 L1090.41 1214.26 L1089.82 1214.26 L1089.23 1214.26 L1088.65 1214.26 L1088.06 1214.26 L1087.47 1214.26 L1086.89 1214.26 L1086.3 1214.26 L1085.72 1214.26 L1085.13 1214.26 L1084.54 1214.26 L1083.96 1214.26 L1083.37 1214.26 L1082.78 1214.26 L1082.2 1214.26 L1081.61 1214.26 L1081.02 1214.26 L1080.44 1214.26 L1079.85 1214.26 L1079.26 1214.26 L1078.68 1214.26 L1078.09 1214.26 L1077.51 1214.26 L1076.92 1214.26 L1076.33 1214.26 L1075.75 1214.26 L1075.16 1214.26 L1074.57 1214.26 L1073.99 1214.26 L1073.4 1214.26 L1072.81 1214.26 L1072.23 1214.26 L1071.64 1214.26 L1071.06 1214.26 L1070.47 1214.26 L1069.88 1214.26 L1069.3 1214.26 L1068.71 1214.26 L1068.12 1214.26 L1067.54 1214.26 L1066.95 1214.26 L1066.36 1214.26 L1065.78 1214.26 L1065.19 1214.26 L1064.6 1214.26 L1064.02 1214.26 L1063.43 1214.26 L1062.85 1214.26 L1062.26 1214.26 L1061.67 1214.26 L1061.09 1214.26 L1060.5 1214.26 L1059.91 1214.26 L1059.33 1214.26 L1058.74 1214.26 L1058.15 1214.26 L1057.57 1214.26 L1056.98 1214.26 L1056.39 1214.26 L1055.81 1214.26 L1055.22 1214.26 L1054.64 1214.26 L1054.05 1214.26 L1053.46 1214.26 L1052.88 1214.26 L1052.29 1214.26 L1051.7 1214.26 L1051.12 1214.26 L1050.53 1214.26 L1049.94 1214.26 L1049.36 1214.26 L1048.77 1214.26 L1048.19 1214.26 L1047.6 1214.26 L1047.01 1214.26 L1046.43 1214.26 L1045.84 1214.26 L1045.25 1214.26 L1044.67 1214.26 L1044.08 1214.26 L1043.49 1214.26 L1042.91 1214.26 L1042.32 1214.26 L1041.73 1214.26 L1041.15 1214.26 L1040.56 1214.26 L1039.98 1214.26 L1039.39 1214.26 L1038.8 1214.26 L1038.22 1214.26 L1037.63 1214.26 L1037.04 1214.26 L1036.46 1214.26 L1035.87 1214.26 L1035.28 1214.26 L1034.7 1214.26 L1034.11 1214.26 L1033.52 1214.26 L1032.94 1214.26 L1032.35 1214.26 L1031.77 1214.26 L1031.18 1214.26 L1030.59 1214.26 L1030.01 1214.26 L1029.42 1214.26 L1028.83 1214.26 L1028.25 1214.26 L1027.66 1214.26 L1027.07 1214.26 L1026.49 1214.26 L1025.9 1214.26 L1025.32 1214.26 L1024.73 1214.26 L1024.14 1214.26 L1023.56 1214.26 L1022.97 1214.26 L1022.38 1214.26 L1021.8 1214.26 L1021.21 1214.26 L1020.62 1214.26 L1020.04 1214.26 L1019.45 1214.26 L1018.86 1214.26 L1018.28 1214.26 L1017.69 1214.26 L1017.11 1214.26 L1016.52 1214.26 L1015.93 1214.26 L1015.35 1214.26 L1014.76 1214.26 L1014.17 1214.26 L1013.59 1214.26 L1013 1214.26 L1012.41 1214.26 L1011.83 1214.26 L1011.24 1214.26 L1010.65 1214.26 L1010.07 1214.26 L1009.48 1214.26 L1008.9 1214.26 L1008.31 1214.26 L1007.72 1214.26 L1007.14 1214.26 L1006.55 1214.26 L1005.96 1214.26 L1005.38 1214.26 L1004.79 1214.26 L1004.2 1214.26 L1003.62 1214.26 L1003.03 1214.26 L1002.44 1214.26 L1001.86 1214.26 L1001.27 1214.26 L1000.69 1214.26 L1000.1 1214.26 L999.513 1214.26 L998.926 1214.26 L998.34 1214.26 L997.754 1214.26 L997.167 1214.26 L996.581 1214.26 L995.994 1214.26 L995.408 1214.26 L994.822 1214.26 L994.235 1214.26 L993.649 1214.26 L993.062 1214.26 L992.476 1214.26 L991.889 1214.26 L991.303 1214.26 L990.717 1214.26 L990.13 1214.26 L989.544 1214.26 L988.957 1214.26 L988.371 1214.26 L987.785 1214.26 L987.198 1214.26 L986.612 1214.26 L986.025 1214.26  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.33 986.612,1214.33 987.198,1214.33 987.785,1214.33 988.371,1214.33 988.957,1214.33 989.544,1214.33 990.13,1214.33 990.717,1214.33 991.303,1214.33 991.889,1214.33 992.476,1214.33 993.062,1214.33 993.649,1214.33 994.235,1214.33 994.822,1214.33 995.408,1214.33 995.994,1214.33 996.581,1214.33 997.167,1214.33 997.754,1214.33 998.34,1214.33 998.926,1214.33 999.513,1214.33 1000.1,1214.33 1000.69,1214.33 1001.27,1214.33 1001.86,1214.33 1002.44,1214.33 1003.03,1214.33 1003.62,1214.33 1004.2,1214.33 1004.79,1214.33 1005.38,1214.33 1005.96,1214.33 1006.55,1214.33 1007.14,1214.33 1007.72,1214.33 1008.31,1214.33 1008.9,1214.33 1009.48,1214.33 1010.07,1214.33 1010.65,1214.33 1011.24,1214.33 1011.83,1214.33 1012.41,1214.33 1013,1214.33 1013.59,1214.33 1014.17,1214.33 1014.76,1214.33 1015.35,1214.33 1015.93,1214.33 1016.52,1214.33 1017.11,1214.33 1017.69,1214.33 1018.28,1214.33 1018.86,1214.33 1019.45,1214.33 1020.04,1214.33 1020.62,1214.33 1021.21,1214.33 1021.8,1214.33 1022.38,1214.33 1022.97,1214.33 1023.56,1214.33 1024.14,1214.33 1024.73,1214.33 1025.32,1214.33 1025.9,1214.33 1026.49,1214.33 1027.07,1214.33 1027.66,1214.33 1028.25,1214.33 1028.83,1214.33 1029.42,1214.33 1030.01,1214.33 1030.59,1214.33 1031.18,1214.33 1031.77,1214.33 1032.35,1214.33 1032.94,1214.33 1033.52,1214.33 1034.11,1214.33 1034.7,1214.33 1035.28,1214.33 1035.87,1214.33 1036.46,1214.33 1037.04,1214.33 1037.63,1214.33 1038.22,1214.33 1038.8,1214.33 1039.39,1214.33 1039.98,1214.33 1040.56,1214.33 1041.15,1214.33 1041.73,1214.33 1042.32,1214.33 1042.91,1214.33 1043.49,1214.33 1044.08,1214.33 1044.67,1214.33 1045.25,1214.33 1045.84,1214.33 1046.43,1214.33 1047.01,1214.33 1047.6,1214.33 1048.19,1214.33 1048.77,1214.33 1049.36,1214.33 1049.94,1214.33 1050.53,1214.33 1051.12,1214.33 1051.7,1214.33 1052.29,1214.33 1052.88,1214.33 1053.46,1214.33 1054.05,1214.33 1054.64,1214.33 1055.22,1214.33 1055.81,1214.33 1056.39,1214.33 1056.98,1214.33 1057.57,1214.33 1058.15,1214.33 1058.74,1214.33 1059.33,1214.33 1059.91,1214.33 1060.5,1214.33 1061.09,1214.33 1061.67,1214.33 1062.26,1214.33 1062.85,1214.33 1063.43,1214.33 1064.02,1214.33 1064.6,1214.33 1065.19,1214.33 1065.78,1214.33 1066.36,1214.33 1066.95,1214.33 1067.54,1214.33 1068.12,1214.33 1068.71,1214.33 1069.3,1214.33 1069.88,1214.33 1070.47,1214.33 1071.06,1214.33 1071.64,1214.33 1072.23,1214.33 1072.81,1214.33 1073.4,1214.33 1073.99,1214.33 1074.57,1214.33 1075.16,1214.33 1075.75,1214.33 1076.33,1214.33 1076.92,1214.33 1077.51,1214.33 1078.09,1214.33 1078.68,1214.33 1079.26,1214.33 1079.85,1214.33 1080.44,1214.33 1081.02,1214.33 1081.61,1214.33 1082.2,1214.33 1082.78,1214.33 1083.37,1214.33 1083.96,1214.33 1084.54,1214.33 1085.13,1214.33 1085.72,1214.33 1086.3,1214.33 1086.89,1214.33 1087.47,1214.33 1088.06,1214.33 1088.65,1214.33 1089.23,1214.33 1089.82,1214.33 1090.41,1214.33 1090.99,1214.33 1091.58,1214.33 1092.17,1214.33 1092.75,1214.33 1093.34,1214.33 1093.93,1214.33 1094.51,1214.33 1095.1,1214.33 1095.68,1214.33 1096.27,1214.33 1096.86,1214.33 1097.44,1214.33 1098.03,1214.33 1098.62,1214.33 1099.2,1214.33 1099.79,1214.33 1100.38,1214.33 1100.96,1214.33 1101.55,1214.33 1102.14,1214.33 1102.72,1214.33 1103.31,1214.33 1103.89,1214.33 1104.48,1214.33 1105.07,1214.33 1105.65,1214.33 1106.24,1214.33 1106.83,1214.33 1107.41,1214.33 1108,1214.33 1108.59,1214.33 1109.17,1214.33 1109.76,1214.33 1110.34,1214.33 1110.93,1214.33 1111.52,1214.33 1112.1,1214.33 1112.69,1214.33 1113.28,1214.33 1113.86,1214.33 1114.45,1214.33 1115.04,1214.33 1115.62,1214.33 1116.21,1214.33 1116.8,1214.33 1117.38,1214.33 1117.97,1214.33 1118.55,1214.33 1119.14,1214.33 1119.73,1214.33 1120.31,1214.33 1120.9,1214.33 1121.49,1214.33 1122.07,1214.33 1122.66,1214.33 1123.25,1214.33 1123.83,1214.33 1124.42,1214.33 1125.01,1214.33 1125.59,1214.33 1126.18,1214.33 1126.76,1214.33 1127.35,1214.33 1127.94,1214.33 1128.52,1214.33 1129.11,1214.33 1129.7,1214.33 1130.28,1214.33 1130.87,1214.33 1131.46,1214.33 1132.04,1214.33 1132.63,1214.33 1133.21,1214.33 1133.8,1214.33 1134.39,1214.33 1134.97,1214.33 1135.56,1214.33 1136.15,1214.33 1136.73,1214.33 1137.32,1214.33 1137.91,1214.33 1138.49,1214.33 1139.08,1214.33 1139.67,1214.33 1140.25,1214.33 1140.84,1214.33 1141.42,1214.33 1142.01,1214.33 1142.6,1214.33 1143.18,1214.33 1143.77,1214.33 1144.36,1214.33 1144.94,1214.33 1145.53,1214.33 1146.12,1214.33 1146.7,1214.33 1147.29,1214.33 1147.88,1214.33 1148.46,1214.33 1149.05,1214.33 1149.63,1214.33 1150.22,1214.33 1150.81,1214.33 1151.39,1214.33 1151.98,1214.33 1152.57,1214.33 1153.15,1214.33 1153.74,1214.33 1154.33,1214.33 1154.91,1214.33 1155.5,1214.33 1156.09,1214.33 1156.67,1214.33 1157.26,1214.33 1157.84,1214.33 1158.43,1214.33 1159.02,1214.33 1159.6,1214.33 1160.19,1214.33 1160.78,1214.33 1161.36,1214.33 1161.95,1214.33 1162.54,1214.33 1163.12,1214.33 1163.71,1214.33 1164.29,1214.33 1164.88,1214.33 1165.47,1214.33 1166.05,1214.33 1166.64,1214.33 1167.23,1214.33 1167.81,1214.33 1168.4,1214.33 1168.99,1214.33 1169.57,1214.33 1170.16,1214.33 1170.75,1214.33 1171.33,1214.33 1171.92,1214.33 1172.5,1214.33 1173.09,1214.33 1173.68,1214.33 1174.26,1214.33 1174.85,1214.33 1175.44,1214.33 1176.02,1214.33 1176.61,1214.33 1177.2,1214.33 1177.78,1214.33 1178.37,1214.33 1178.96,1214.33 1179.54,1214.33 1180.13,1214.33 1180.71,1214.33 1181.3,1214.33 1181.89,1214.33 1182.47,1214.33 1183.06,1214.33 1183.65,1214.33 1184.23,1214.33 1184.82,1214.33 1185.41,1214.33 1185.99,1214.33 1186.58,1214.33 1187.16,1214.33 1187.75,1214.33 1188.34,1214.33 1188.92,1214.33 1189.51,1214.33 1190.1,1214.33 1190.68,1214.33 1191.27,1214.33 1191.86,1214.33 1192.44,1214.33 1193.03,1214.33 1193.62,1214.33 1194.2,1214.33 1194.79,1214.33 1195.37,1214.33 1195.96,1214.33 1196.55,1214.33 1197.13,1214.33 1197.72,1214.33 1198.31,1214.33 1198.89,1214.33 1199.48,1214.33 1200.07,1214.33 1200.65,1214.33 1201.24,1214.33 1201.83,1214.33 1202.41,1214.33 1203,1214.33 1203.58,1214.33 1204.17,1214.33 1204.76,1214.33 1205.34,1214.33 1205.93,1214.33 1206.52,1214.33 1207.1,1214.33 1207.69,1214.33 1208.28,1214.33 1208.86,1214.33 1209.45,1214.33 1210.03,1214.33 1210.62,1214.33 1211.21,1214.33 1211.79,1214.33 1212.38,1214.33 1212.97,1214.33 1213.55,1214.33 1214.14,1214.33 1214.73,1214.33 1215.31,1214.33 1215.9,1214.33 1216.49,1214.33 1217.07,1214.33 1217.66,1214.33 1218.24,1214.33 1218.83,1214.33 1219.42,1214.33 1220,1214.33 1220.59,1214.33 1221.18,1214.33 1221.76,1214.33 1222.35,1214.33 1222.94,1214.33 1223.52,1214.33 1224.11,1214.33 1224.7,1214.33 1225.28,1214.33 1225.87,1214.33 1226.45,1214.33 1227.04,1214.33 1227.63,1214.33 1228.21,1214.33 1228.8,1214.33 1229.39,1214.33 1229.97,1214.33 1230.56,1214.33 1231.15,1214.33 1231.73,1214.33 1232.32,1214.33 1232.91,1214.33 1233.49,1214.33 1234.08,1214.33 1234.66,1214.33 1235.25,1214.33 1235.84,1214.33 1236.42,1214.33 1237.01,1214.33 1237.6,1214.33 1238.18,1214.33 1238.77,1214.33 1239.36,1214.33 1239.94,1214.33 1240.53,1214.33 1241.11,1214.33 1241.7,1214.33 1242.29,1214.33 1242.87,1214.33 1243.46,1214.33 1244.05,1214.33 1244.63,1214.33 1245.22,1214.33 1245.81,1214.33 1246.39,1214.33 1246.98,1214.33 1247.57,1214.33 1248.15,1214.33 1248.74,1214.33 1249.32,1214.33 1249.91,1214.33 1250.5,1214.33 1251.08,1214.33 1251.67,1214.33 1252.26,1214.33 1252.84,1214.33 1253.43,1214.33 1254.02,1214.33 1254.6,1214.33 1255.19,1214.33 1255.78,1214.33 1256.36,1214.33 1256.95,1214.33 1257.53,1214.33 1258.12,1214.33 1258.71,1214.33 1259.29,1214.33 1259.88,1214.33 1260.47,1214.33 1261.05,1214.33 1261.64,1214.33 1262.23,1214.33 1262.81,1214.33 1263.4,1214.33 1263.98,1214.33 1264.57,1214.33 1265.16,1214.33 1265.74,1214.33 1266.33,1214.33 1266.92,1214.33 1267.5,1214.33 1268.09,1214.33 1268.68,1214.33 1269.26,1214.33 1269.85,1214.33 1270.44,1214.33 1271.02,1214.33 1271.61,1214.33 1272.19,1214.33 1272.78,1214.33 1273.37,1214.33 1273.95,1214.33 1274.54,1214.33 1275.13,1214.33 1275.71,1214.33 1276.3,1214.33 1276.89,1214.33 1277.47,1214.33 1278.06,1214.33 1278.65,1214.33 1279.23,1214.33 1279.82,1214.33 1280.4,1214.33 1280.99,1214.33 1281.58,1214.33 1282.16,1214.33 1282.75,1214.33 1283.34,1214.33 1283.92,1214.33 1284.51,1214.33 1285.1,1214.33 1285.68,1214.33 1286.27,1214.33 1286.86,1214.33 1287.44,1214.33 1288.03,1214.33 1288.61,1214.33 1289.2,1214.33 1289.79,1214.33 1290.37,1214.33 1290.96,1214.33 1291.55,1214.33 1292.13,1214.33 1292.72,1214.33 1293.31,1214.33 1293.89,1214.33 1294.48,1214.33 1295.06,1214.33 1295.65,1214.33 1296.24,1214.33 1296.82,1214.33 1297.41,1214.33 1298,1214.33 1298.58,1214.33 1299.17,1214.33 1299.76,1214.33 1300.34,1214.33 1300.93,1214.33 1301.52,1214.33 1302.1,1214.33 1302.69,1214.33 1303.27,1214.33 1303.86,1214.33 1304.45,1214.33 1305.03,1214.33 1305.62,1214.33 1306.21,1214.33 1306.79,1214.33 1307.38,1214.33 1307.97,1214.33 1308.55,1214.33 1309.14,1214.33 1309.73,1214.33 1310.31,1214.33 1310.9,1214.33 1311.48,1214.33 1312.07,1214.33 1312.66,1214.33 1313.24,1214.33 1313.83,1214.33 1314.42,1214.33 1315,1214.33 1315.59,1214.33 1316.18,1214.33 1316.76,1214.33 1317.35,1214.33 1317.93,1214.33 1318.52,1214.33 1319.11,1214.33 1319.69,1214.33 1320.28,1214.33 1320.87,1214.33 1321.45,1214.33 1322.04,1214.33 1322.63,1214.33 1323.21,1214.33 1323.8,1214.33 1324.39,1214.33 1324.97,1214.33 1325.56,1214.33 1326.14,1214.33 1326.73,1214.33 1327.32,1214.33 1327.9,1214.33 1328.49,1214.33 1329.08,1214.33 1329.66,1214.33 1330.25,1214.33 1330.84,1214.33 1331.42,1214.33 1332.01,1214.33 1332.6,1214.33 1333.18,1214.33 1333.77,1214.33 1334.35,1214.33 1334.94,1214.33 1335.53,1214.33 1336.11,1214.33 1336.7,1214.33 1337.29,1214.33 1337.87,1214.33 1338.46,1214.33 1339.05,1214.33 1339.63,1214.33 1340.22,1214.33 1340.8,1214.33 1341.39,1214.33 1341.98,1214.33 1342.56,1214.33 1343.15,1214.33 1343.74,1214.33 1344.32,1214.33 1344.91,1214.33 1345.5,1214.33 1346.08,1214.33 1346.67,1214.33 1347.26,1214.33 1347.84,1214.33 1348.43,1214.33 1349.01,1214.33 1349.6,1214.33 1350.19,1214.33 1350.77,1214.33 1351.36,1214.33 1351.95,1214.33 1352.53,1214.33 1353.12,1214.33 1353.71,1214.33 1354.29,1214.33 1354.88,1214.33 1355.47,1214.33 1356.05,1214.33 1356.64,1214.33 1357.22,1214.33 1357.81,1214.33 1358.4,1214.33 1358.98,1214.33 1359.57,1214.33 1360.16,1214.33 1360.74,1214.33 1361.33,1214.33 1361.92,1214.33 1362.5,1214.33 1363.09,1214.33 1363.68,1214.33 1364.26,1214.33 1364.85,1214.33 1365.43,1214.33 1366.02,1214.33 1366.61,1214.33 1367.19,1214.33 1367.78,1214.33 1368.37,1214.33 1368.95,1214.33 1369.54,1214.33 1370.13,1214.33 1370.71,1214.33 1371.3,1214.33 1371.88,1214.33 1372.47,1214.33 1373.06,1214.33 1373.64,1214.33 1374.23,1214.33 1374.82,1214.33 1375.4,1214.33 1375.99,1214.33 1376.58,1214.33 1377.16,1214.33 1377.75,1214.33 1378.34,1214.33 1378.92,1214.33 1379.51,1214.33 1380.09,1214.33 1380.68,1214.33 1381.27,1214.33 1381.85,1214.33 1382.44,1214.33 1383.03,1214.33 1383.61,1214.33 1384.2,1214.33 1384.79,1214.33 1385.37,1214.33 1385.96,1214.33 1386.55,1214.33 1387.13,1214.33 1387.72,1214.33 1388.3,1214.33 1388.89,1214.33 1389.48,1214.33 1390.06,1214.33 1390.65,1214.33 1391.24,1214.33 1391.82,1214.33 1392.41,1214.33 1393,1214.33 1393.58,1214.33 1394.17,1214.33 1394.75,1214.33 1395.34,1214.33 1395.93,1214.33 1396.51,1214.33 1397.1,1214.33 1397.69,1214.33 1398.27,1214.33 1398.86,1214.33 1399.45,1214.33 1400.03,1214.33 1400.62,1214.33 1401.21,1214.33 1401.79,1214.33 1402.38,1214.33 1402.96,1214.33 1403.55,1214.33 1404.14,1214.33 1404.72,1214.33 1405.31,1214.33 1405.9,1214.33 1406.48,1214.33 1407.07,1214.33 1407.66,1214.33 1408.24,1214.33 1408.83,1214.33 1409.42,1214.33 1410,1214.33 1410.59,1214.33 1411.17,1214.33 1411.76,1214.33 1412.35,1214.33 1412.93,1214.33 1413.52,1214.33 1414.11,1214.33 1414.69,1214.33 1415.28,1214.33 1415.87,1214.33 1416.45,1214.33 1417.04,1214.33 1417.63,1214.33 1418.21,1214.33 1418.8,1214.33 1419.38,1214.33 1419.97,1214.33 1420.56,1214.33 1421.14,1214.33 1421.73,1214.33 1422.32,1214.33 1422.9,1214.33 1423.49,1214.33 1424.08,1214.33 1424.66,1214.33 1425.25,1214.33 1425.83,1214.33 1426.42,1214.33 1427.01,1214.33 1427.59,1214.33 1428.18,1214.33 1428.77,1214.33 1429.35,1214.33 1429.94,1214.33 1430.53,1214.33 1431.11,1214.33 1431.7,1214.33 1432.29,1214.33 1432.87,1214.33 1433.46,1214.33 1434.04,1214.33 1434.63,1214.33 1435.22,1214.33 1435.8,1214.33 1436.39,1214.33 1436.98,1214.33 1437.56,1214.33 1438.15,1214.33 1438.74,1214.33 1439.32,1214.33 1439.91,1214.33 1440.5,1214.33 1441.08,1214.33 1441.67,1214.33 1442.25,1214.33 1442.84,1214.33 1443.43,1214.33 1444.01,1214.33 1444.6,1214.33 1445.19,1214.33 1445.77,1214.33 1446.36,1214.33 1446.95,1214.33 1447.53,1214.33 1448.12,1214.33 1448.7,1214.33 1449.29,1214.33 1449.88,1214.33 1450.46,1214.33 1451.05,1214.33 1451.64,1214.33 1452.22,1214.33 1452.81,1214.33 1453.4,1214.33 1453.98,1214.33 1454.57,1214.33 1455.16,1214.33 1455.74,1214.33 1456.33,1214.33 1456.91,1214.33 1457.5,1214.33 1458.09,1214.33 1458.67,1214.33 1459.26,1214.33 1459.85,1214.33 1460.43,1214.33 1461.02,1214.33 1461.61,1214.33 1462.19,1214.33 1462.78,1214.33 1463.37,1214.33 1463.95,1214.33 1464.54,1214.33 1465.12,1214.33 1465.71,1214.33 1466.3,1214.33 1466.88,1214.33 1467.47,1214.33 1468.06,1214.33 1468.64,1214.33 1469.23,1214.33 1469.82,1214.33 1470.4,1214.33 1470.99,1214.33 1471.57,1214.33 1472.16,1214.33 1472.75,1214.33 1473.33,1214.33 1473.92,1214.33 1474.51,1214.33 1475.09,1214.33 1475.68,1214.33 1476.27,1214.33 1476.85,1214.33 1477.44,1214.33 1478.03,1214.33 1478.61,1214.33 1479.2,1214.33 1479.78,1214.33 1480.37,1214.33 1480.96,1214.33 1481.54,1214.33 1482.13,1214.33 1482.72,1214.33 1483.3,1214.33 1483.89,1214.33 1484.48,1214.33 1485.06,1214.33 1485.65,1214.33 1486.24,1214.33 1486.82,1214.33 1487.41,1214.33 1487.99,1214.33 1488.58,1214.33 1489.17,1214.33 1489.75,1214.33 1490.34,1214.33 1490.93,1214.33 1491.51,1214.33 1492.1,1214.33 1492.69,1214.33 1493.27,1214.33 1493.86,1214.33 1494.45,1214.33 1495.03,1214.33 1495.62,1214.33 1496.2,1214.33 1496.79,1214.33 1497.38,1214.33 1497.96,1214.33 1498.55,1214.33 1499.14,1214.33 1499.72,1214.33 1500.31,1214.33 1500.9,1214.33 1501.48,1214.33 1502.07,1214.33 1502.65,1214.33 1503.24,1214.33 1503.83,1214.33 1504.41,1214.33 1505,1214.33 1505.59,1214.33 1506.17,1214.33 1506.76,1214.33 1507.35,1214.33 1507.93,1214.33 1508.52,1214.33 1509.11,1214.33 1509.69,1214.33 1510.28,1214.33 1510.86,1214.33 1511.45,1214.33 1512.04,1214.33 1512.62,1214.33 1513.21,1214.33 1513.8,1214.33 1514.38,1214.33 1514.97,1214.33 1515.56,1214.33 1516.14,1214.33 1516.73,1214.33 1517.32,1214.33 1517.9,1214.33 1518.49,1214.33 1519.07,1214.33 1519.66,1214.33 1520.25,1214.33 1520.83,1214.33 1521.42,1214.33 1522.01,1214.33 1522.59,1214.33 1523.18,1214.33 1523.77,1214.33 1524.35,1214.33 1524.94,1214.33 1525.52,1214.33 1526.11,1214.33 1526.7,1214.33 1527.28,1214.33 1527.87,1214.33 1528.46,1214.33 1529.04,1214.33 1529.63,1214.33 1530.22,1214.33 1530.8,1214.33 1531.39,1214.33 1531.98,1214.33 1532.56,1214.33 1533.15,1214.33 1533.73,1214.33 1534.32,1214.33 1534.91,1214.33 1535.49,1214.33 1536.08,1214.33 1536.67,1214.33 1537.25,1214.33 1537.84,1214.33 1538.43,1214.33 1539.01,1214.33 1539.6,1214.33 1540.19,1214.33 1540.77,1214.33 1541.36,1214.33 1541.94,1214.33 1542.53,1214.33 1543.12,1214.33 1543.7,1214.33 1544.29,1214.33 1544.88,1214.33 1545.46,1214.33 1546.05,1214.33 1546.64,1214.33 1547.22,1214.33 1547.81,1214.33 1548.4,1214.33 1548.98,1214.33 1549.57,1214.33 1550.15,1214.33 1550.74,1214.33 1551.33,1214.33 1551.91,1214.33 1552.5,1214.33 1553.09,1214.33 1553.67,1214.33 1554.26,1214.33 1554.85,1214.33 1555.43,1214.33 1556.02,1214.33 1556.6,1214.33 1557.19,1214.33 1557.78,1214.33 1558.36,1214.33 1558.95,1214.33 1559.54,1214.33 1560.12,1214.33 1560.71,1214.33 1561.3,1214.33 1561.88,1214.33 1562.47,1214.33 1563.06,1214.33 1563.64,1214.33 1564.23,1214.33 1564.81,1214.33 1565.4,1214.33 1565.99,1214.33 1566.57,1214.33 1567.16,1214.33 1567.75,1214.33 1568.33,1214.33 1568.92,1214.33 1569.51,1214.33 1570.09,1214.33 1570.68,1214.33 1571.27,1214.33 1571.85,1214.33 1572.44,1214.33 1573.02,1214.33 1573.61,1214.33 1574.2,1214.33 1574.78,1214.33 1575.37,1214.33 1575.96,1214.33 1576.54,1214.33 1577.13,1214.33 1577.72,1214.33 1578.3,1214.33 1578.89,1214.33 1579.47,1214.33 1580.06,1214.33 1580.65,1214.33 1581.23,1214.33 1581.82,1214.33 1582.41,1214.33 1582.99,1214.33 1583.58,1214.33 1584.17,1214.33 1584.75,1214.33 1585.34,1214.33 1585.93,1214.33 1586.51,1214.33 1587.1,1214.33 1587.68,1214.33 1588.27,1214.33 1588.86,1214.33 1589.44,1214.33 1590.03,1214.33 1590.62,1214.33 1591.2,1214.33 1591.79,1214.33 1592.38,1214.33 1592.96,1214.33 1593.55,1214.33 1594.14,1214.33 1594.72,1214.33 1595.31,1214.33 1595.89,1214.33 1596.48,1214.33 1597.07,1214.33 1597.65,1214.33 1598.24,1214.33 1598.83,1214.33 1599.41,1214.33 1600,1214.33 1600.59,1214.33 1601.17,1214.33 1601.76,1214.33 1602.34,1214.33 1602.93,1214.33 1603.52,1214.33 1604.1,1214.33 1604.69,1214.33 1605.28,1214.33 1605.86,1214.33 1606.45,1214.33 1607.04,1214.33 1607.62,1214.33 1608.21,1214.33 1608.8,1214.33 1609.38,1214.33 1609.97,1214.33 1610.55,1214.33 1611.14,1214.33 1611.73,1214.33 1612.31,1214.33 1612.9,1214.33 1613.49,1214.33 1614.07,1214.33 1614.66,1214.33 1615.25,1214.33 1615.83,1214.33 1616.42,1214.33 1617.01,1214.33 1617.59,1214.33 1618.18,1214.33 1618.76,1214.33 1619.35,1214.33 1619.94,1214.33 1620.52,1214.33 1621.11,1214.33 1621.7,1214.33 1622.28,1214.33 1622.87,1214.33 1623.46,1214.33 1624.04,1214.33 1624.63,1214.33 1625.22,1214.33 1625.8,1214.33 1626.39,1214.33 1626.97,1214.33 1627.56,1214.33 1628.15,1214.33 1628.73,1214.33 1629.32,1214.33 1629.91,1214.33 1630.49,1214.33 1631.08,1214.33 1631.67,1214.33 1632.25,1214.33 1632.84,1214.33 1633.42,1214.33 1634.01,1214.33 1634.6,1214.33 1635.18,1214.33 1635.77,1214.33 1636.36,1214.33 1636.94,1214.33 1637.53,1214.33 1638.12,1214.33 1638.7,1214.33 1639.29,1214.33 1639.88,1214.33 1640.46,1214.33 1641.05,1214.33 1641.63,1214.33 1642.22,1214.33 1642.81,1214.33 1643.39,1214.33 1643.98,1214.33 1644.57,1214.33 1645.15,1214.33 1645.74,1214.33 1646.33,1214.33 1646.91,1214.33 1647.5,1214.33 1648.09,1214.33 1648.67,1214.33 1649.26,1214.33 1649.84,1214.33 1650.43,1214.33 1651.02,1214.33 1651.6,1214.33 1652.19,1214.33 1652.78,1214.33 1653.36,1214.33 1653.95,1214.33 1654.54,1214.33 1655.12,1214.33 1655.71,1214.33 1656.29,1214.33 1656.88,1214.33 1657.47,1214.33 1658.05,1214.33 1658.64,1214.33 1659.23,1214.33 1659.81,1214.33 1660.4,1214.33 1660.99,1214.33 1661.57,1214.33 1662.16,1214.33 1662.75,1214.33 1663.33,1214.33 1663.92,1214.33 1664.5,1214.33 1665.09,1214.33 1665.68,1214.33 1666.26,1214.33 1666.85,1214.33 1667.44,1214.33 1668.02,1214.33 1668.61,1214.33 1669.2,1214.33 1669.78,1214.33 1670.37,1214.33 1670.96,1214.33 1671.54,1214.33 1672.13,1214.33 1672.71,1214.33 1673.3,1214.33 1673.89,1214.33 1674.47,1214.33 1675.06,1214.33 1675.65,1214.33 1676.23,1214.33 1676.82,1214.33 1677.41,1214.33 1677.99,1214.33 1678.58,1214.33 1679.17,1214.33 1679.75,1214.33 1680.34,1214.33 1680.92,1214.33 1681.51,1214.33 1682.1,1214.33 1682.68,1214.33 1683.27,1214.33 1683.86,1214.33 1684.44,1214.33 1685.03,1214.33 1685.62,1214.33 1686.2,1214.33 1686.79,1214.33 1687.37,1214.33 1687.96,1214.33 1688.55,1214.33 1689.13,1214.33 1689.72,1214.33 1690.31,1214.33 1690.89,1214.33 1691.48,1214.33 1692.07,1214.33 1692.65,1214.33 1693.24,1214.33 1693.83,1214.33 1694.41,1214.33 1695,1214.33 1695.58,1214.33 1696.17,1214.33 1696.76,1214.33 1697.34,1214.33 1697.93,1214.33 1698.52,1214.33 1699.1,1214.33 1699.69,1214.33 1700.28,1214.33 1700.86,1214.33 1701.45,1214.33 1702.04,1214.33 1702.62,1214.33 1703.21,1214.33 1703.79,1214.33 1704.38,1214.33 1704.97,1214.33 1705.55,1214.33 1706.14,1214.33 1706.73,1214.33 1707.31,1214.33 1707.9,1214.33 1708.49,1214.33 1709.07,1214.33 1709.66,1214.33 1710.24,1214.33 1710.83,1214.33 1711.42,1214.33 1712,1214.33 1712.59,1214.33 1713.18,1214.33 1713.76,1214.33 1714.35,1214.33 1714.94,1214.33 1715.52,1214.33 1716.11,1214.33 1716.7,1214.33 1717.28,1214.33 1717.87,1214.33 1718.45,1214.33 1719.04,1214.33 1719.63,1214.33 1720.21,1214.33 1720.8,1214.33 1721.39,1214.33 1721.97,1214.33 1722.56,1214.33 1723.15,1214.33 1723.73,1214.33 1724.32,1214.33 1724.91,1214.33 1725.49,1214.33 1726.08,1214.33 1726.66,1214.33 1727.25,1214.33 1727.84,1214.33 1728.42,1214.33 1729.01,1214.33 1729.6,1214.33 1730.18,1214.33 1730.77,1214.33 1731.36,1214.33 1731.94,1214.33 1732.53,1214.33 1733.11,1214.33 1733.7,1214.33 1734.29,1214.33 1734.87,1214.33 1735.46,1214.33 1736.05,1214.33 1736.63,1214.33 1737.22,1214.33 1737.81,1214.33 1738.39,1214.33 1738.98,1214.33 1739.57,1214.33 1740.15,1214.33 1740.74,1214.33 1741.32,1214.33 1741.91,1214.33 1742.5,1214.33 1743.08,1214.33 1743.67,1214.33 1744.26,1214.33 1744.84,1214.33 1745.43,1214.33 1746.02,1214.33 1746.6,1214.33 1747.19,1214.33 1747.78,1214.33 1748.36,1214.33 1748.95,1214.33 1749.53,1214.33 1750.12,1214.33 1750.71,1214.33 1751.29,1214.33 1751.88,1214.33 1752.47,1214.33 1753.05,1214.33 1753.64,1214.33 1754.23,1214.33 1754.81,1214.33 1755.4,1214.33 1755.99,1214.33 1756.57,1214.33 1757.16,1214.33 1757.74,1214.33 1758.33,1214.33 1758.92,1214.33 1759.5,1214.33 1760.09,1214.33 1760.68,1214.33 1761.26,1214.33 1761.85,1214.33 1762.44,1214.33 1763.02,1214.33 1763.61,1214.33 1764.19,1214.33 1764.78,1214.33 1765.37,1214.33 1765.95,1214.33 1766.54,1214.33 1767.13,1214.33 1767.71,1214.33 1768.3,1214.33 1768.89,1214.33 1769.47,1214.33 1770.06,1214.33 1770.65,1214.33 1771.23,1214.33 1771.82,1214.33 1772.4,1214.33 1772.99,1214.33 1773.58,1214.33 1774.16,1214.33 1774.75,1214.33 1775.34,1214.33 1775.92,1214.33 1776.51,1214.33 1777.1,1214.33 1777.68,1214.33 1778.27,1214.33 1778.86,1214.33 1779.44,1214.33 1780.03,1214.33 1780.61,1214.33 1781.2,1214.33 1781.79,1214.33 1782.37,1214.33 1782.96,1214.33 1783.55,1214.33 1784.13,1214.33 1784.72,1214.33 1785.31,1214.33 1785.89,1214.33 1786.48,1214.33 1787.06,1214.33 1787.65,1214.33 1788.24,1214.33 1788.82,1214.33 1789.41,1214.33 1790,1214.33 1790.58,1214.33 1791.17,1214.33 1791.76,1214.33 1792.34,1214.33 1792.93,1214.33 1793.52,1214.33 1794.1,1214.33 1794.69,1214.33 1795.27,1214.33 1795.86,1214.33 1796.45,1214.33 1797.03,1214.33 1797.62,1214.33 1798.21,1214.33 1798.79,1214.33 1799.38,1214.33 1799.97,1214.33 1800.55,1214.33 1801.14,1214.33 1801.73,1214.33 1802.31,1214.33 1802.9,1214.33 1803.48,1214.33 1804.07,1214.33 1804.66,1214.33 1805.24,1214.33 1805.83,1214.33 1806.42,1214.33 1807,1214.33 1807.59,1214.33 1808.18,1214.33 1808.76,1214.33 1809.35,1214.33 1809.94,1214.33 1810.52,1214.33 1811.11,1214.33 1811.69,1214.33 1812.28,1214.33 1812.87,1214.33 1813.45,1214.33 1814.04,1214.33 1814.63,1214.33 1815.21,1214.33 1815.8,1214.33 1816.39,1214.33 1816.97,1214.33 1817.56,1214.33 1818.14,1214.33 1818.73,1214.33 1819.32,1214.33 1819.9,1214.33 1820.49,1214.33 1821.08,1214.33 1821.66,1214.33 1822.25,1214.33 1822.84,1214.33 1823.42,1214.33 1824.01,1214.33 1824.6,1214.33 1825.18,1214.33 1825.77,1214.33 1826.35,1214.33 1826.94,1214.33 1827.53,1214.33 1828.11,1214.33 1828.7,1214.33 1829.29,1214.33 1829.87,1214.33 1830.46,1214.33 1831.05,1214.33 1831.63,1214.33 1832.22,1214.33 1832.81,1214.33 1833.39,1214.33 1833.98,1214.33 1834.56,1214.33 1835.15,1214.33 1835.74,1214.33 1836.32,1214.33 1836.91,1214.33 1837.5,1214.33 1838.08,1214.33 1838.67,1214.33 1839.26,1214.33 1839.84,1214.33 1840.43,1214.33 1841.01,1214.33 1841.6,1214.33 1842.19,1214.33 1842.77,1214.33 1843.36,1214.33 1843.95,1214.33 1844.53,1214.33 1845.12,1214.33 1845.71,1214.33 1846.29,1214.33 1846.88,1214.33 1847.47,1214.33 1848.05,1214.33 1848.64,1214.33 1849.22,1214.33 1849.81,1214.33 1850.4,1214.33 1850.98,1214.33 1851.57,1214.33 1852.16,1214.33 1852.74,1214.33 1853.33,1214.33 1853.92,1214.33 1854.5,1214.33 1855.09,1214.33 1855.68,1214.33 1856.26,1214.33 1856.85,1214.33 1857.43,1214.33 1858.02,1214.33 1858.61,1214.33 1859.19,1214.33 1859.78,1214.33 1860.37,1214.33 1860.95,1214.33 1861.54,1214.33 1862.13,1214.33 1862.71,1214.33 1863.3,1214.33 1863.88,1214.33 1864.47,1214.33 1865.06,1214.33 1865.64,1214.33 1866.23,1214.33 1866.82,1214.33 1867.4,1214.33 1867.99,1214.33 1868.58,1214.33 1869.16,1214.33 1869.75,1214.33 1870.34,1214.33 1870.92,1214.33 1871.51,1214.33 1872.09,1214.33 1872.68,1214.33 1873.27,1214.33 1873.85,1214.33 1874.44,1214.33 1875.03,1214.33 1875.61,1214.33 1876.2,1214.33 1876.79,1214.33 1877.37,1214.33 1877.96,1214.33 1878.55,1214.33 1879.13,1214.33 1879.72,1214.33 1880.3,1214.33 1880.89,1214.33 1881.48,1214.33 1882.06,1214.33 1882.65,1214.33 1883.24,1214.33 1883.82,1214.33 1884.41,1214.33 1885,1214.33 1885.58,1214.33 1886.17,1214.33 1886.76,1214.33 1887.34,1214.33 1887.93,1214.33 1888.51,1214.33 1889.1,1214.33 1889.69,1214.33 1890.27,1214.33 1890.86,1214.33 1891.45,1214.33 1892.03,1214.33 1892.62,1214.33 1893.21,1214.33 1893.79,1214.33 1894.38,1214.33 1894.96,1214.33 1895.55,1214.33 1896.14,1214.33 1896.72,1214.33 1897.31,1214.33 1897.9,1214.33 1898.48,1214.33 1899.07,1214.33 1899.66,1214.33 1900.24,1214.33 1900.83,1214.33 1901.42,1214.33 1902,1214.33 1902.59,1214.33 1903.17,1214.33 1903.76,1214.33 1904.35,1214.33 1904.93,1214.33 1905.52,1214.33 1906.11,1214.33 1906.69,1214.33 1907.28,1214.33 1907.87,1214.33 1908.45,1214.33 1909.04,1214.33 1909.63,1214.33 1910.21,1214.33 1910.8,1214.33 1911.38,1214.33 1911.97,1214.33 1912.56,1214.33 1913.14,1214.33 1913.73,1214.33 1914.32,1214.33 1914.9,1214.33 1915.49,1214.33 1916.08,1214.33 1916.66,1214.33 1917.25,1214.33 1917.83,1214.33 1918.42,1214.33 1919.01,1214.33 1919.59,1214.33 1920.18,1214.33 1920.77,1214.33 1921.35,1214.33 1921.94,1214.33 1922.53,1214.33 1923.11,1214.33 1923.7,1214.33 1924.29,1214.33 1924.87,1214.33 1925.46,1214.33 1926.04,1214.33 1926.63,1214.33 1927.22,1214.33 1927.8,1214.33 1928.39,1214.33 1928.98,1214.33 1929.56,1214.33 1930.15,1214.33 1930.74,1214.33 1931.32,1214.33 1931.91,1214.33 1932.5,1214.33 1933.08,1214.33 1933.67,1214.33 1934.25,1214.33 1934.84,1214.33 1935.43,1214.33 1936.01,1214.33 1936.6,1214.33 1937.19,1214.33 1937.77,1214.33 1938.36,1214.33 1938.95,1214.33 1939.53,1214.33 1940.12,1214.33 1940.71,1214.33 1941.29,1214.33 1941.88,1214.33 1942.46,1214.33 1943.05,1214.33 1943.64,1214.33 1944.22,1214.33 1944.81,1214.33 1945.4,1214.33 1945.98,1214.33 1946.57,1214.33 1947.16,1214.33 1947.74,1214.33 1948.33,1214.33 1948.91,1214.33 1949.5,1214.33 1950.09,1214.33 1950.67,1214.33 1951.26,1214.33 1951.85,1214.33 1952.43,1214.33 1953.02,1214.33 1953.61,1214.33 1954.19,1214.33 1954.78,1214.33 1955.37,1214.33 1955.95,1214.33 1956.54,1214.33 1957.12,1214.33 1957.71,1214.33 1958.3,1214.33 1958.88,1214.33 1959.47,1214.33 1960.06,1214.33 1960.64,1214.33 1961.23,1214.33 1961.82,1214.33 1962.4,1214.33 1962.99,1214.33 1963.58,1214.33 1964.16,1214.33 1964.75,1214.33 1965.33,1214.33 1965.92,1214.33 1966.51,1214.33 1967.09,1214.33 1967.68,1214.33 1968.27,1214.33 1968.85,1214.33 1969.44,1214.33 1970.03,1214.33 1970.61,1214.33 1971.2,1214.33 1971.78,1214.33 1972.37,1214.33 1972.96,1214.33 1973.54,1214.33 1974.13,1214.33 1974.72,1214.33 1975.3,1214.33 1975.89,1214.33 1976.48,1214.33 1977.06,1214.33 1977.65,1214.33 1978.24,1214.33 1978.82,1214.33 1979.41,1214.33 1979.99,1214.33 1980.58,1214.33 1981.17,1214.33 1981.75,1214.33 1982.34,1214.33 1982.93,1214.33 1983.51,1214.33 1984.1,1214.33 1984.69,1214.33 1985.27,1214.33 1985.86,1214.33 1986.45,1214.33 1987.03,1214.33 1987.62,1214.33 1988.2,1214.33 1988.79,1214.33 1989.38,1214.33 1989.96,1214.33 1990.55,1214.33 1991.14,1214.33 1991.72,1214.33 1992.31,1214.33 1992.9,1214.33 1993.48,1214.33 1994.07,1214.33 1994.65,1214.33 1995.24,1214.33 1995.83,1214.33 1996.41,1214.33 1997,1214.33 1997.59,1214.33 1998.17,1214.33 1998.76,1214.33 1999.35,1214.33 1999.93,1214.33 2000.52,1214.33 2001.11,1214.33 2001.69,1214.33 2002.28,1214.33 2002.86,1214.33 2003.45,1214.33 2004.04,1214.33 2004.62,1214.33 2005.21,1214.33 2005.8,1214.33 2006.38,1214.33 2006.97,1214.33 2007.56,1214.33 2008.14,1214.33 2008.73,1214.33 2009.32,1214.33 2009.9,1214.33 2010.49,1214.33 2011.07,1214.33 2011.66,1214.33 2012.25,1214.33 2012.83,1214.33 2013.42,1214.33 2014.01,1214.33 2014.59,1214.33 2015.18,1214.33 2015.77,1214.33 2016.35,1214.33 2016.94,1214.33 2017.53,1214.33 2018.11,1214.33 2018.7,1214.33 2019.28,1214.33 2019.87,1214.33 2020.46,1214.33 2021.04,1214.33 2021.63,1214.33 2022.22,1214.33 2022.8,1214.33 2023.39,1214.33 2023.98,1214.33 2024.56,1214.33 2025.15,1214.33 2025.73,1214.33 2026.32,1214.33 2026.91,1214.33 2027.49,1214.33 2028.08,1214.33 2028.67,1214.33 2029.25,1214.33 2029.84,1214.33 2030.43,1214.33 2031.01,1214.33 2031.6,1214.33 2032.19,1214.33 2032.77,1214.33 2033.36,1214.33 2033.94,1214.33 2034.53,1214.33 2035.12,1214.33 2035.7,1214.33 2036.29,1214.33 2036.88,1214.33 2037.46,1214.33 2038.05,1214.33 2038.64,1214.33 2039.22,1214.33 2039.81,1214.33 2040.4,1214.33 2040.98,1214.33 2041.57,1214.33 2042.15,1214.33 2042.74,1214.33 2043.33,1214.33 2043.91,1214.33 2044.5,1214.33 2045.09,1214.33 2045.67,1214.33 2046.26,1214.33 2046.85,1214.33 2047.43,1214.33 2048.02,1214.33 2048.6,1214.33 2049.19,1214.33 2049.78,1214.33 2050.36,1214.33 2050.95,1214.33 2051.54,1214.33 2052.12,1214.33 2052.71,1214.33 2053.3,1214.33 2053.88,1214.33 2054.47,1214.33 2055.06,1214.33 2055.64,1214.33 2056.23,1214.33 2056.81,1214.33 2057.4,1214.33 2057.99,1214.33 2058.57,1214.33 2059.16,1214.33 2059.75,1214.33 2060.33,1214.33 2060.92,1214.33 2061.51,1214.33 2062.09,1214.33 2062.68,1214.33 2063.27,1214.33 2063.85,1214.33 2064.44,1214.33 2065.02,1214.33 2065.61,1214.33 2066.2,1214.33 2066.78,1214.33 2067.37,1214.33 2067.96,1214.33 2068.54,1214.33 2069.13,1214.33 2069.72,1214.33 2070.3,1214.33 2070.89,1214.33 2071.48,1214.33 2072.06,1214.33 2072.65,1214.33 2073.23,1214.33 2073.82,1214.33 2074.41,1214.33 2074.99,1214.33 2075.58,1214.33 2076.17,1214.33 2076.75,1214.33 2077.34,1214.33 2077.93,1214.33 2078.51,1214.33 2079.1,1214.33 2079.68,1214.33 2080.27,1214.33 2080.86,1214.33 2081.44,1214.33 2082.03,1214.33 2082.62,1214.33 2083.2,1214.33 2083.79,1214.33 2084.38,1214.33 2084.96,1214.33 2085.55,1214.33 2086.14,1214.33 2086.72,1214.33 2087.31,1214.33 2087.89,1214.33 2088.48,1214.33 2089.07,1214.33 2089.65,1214.33 2090.24,1214.33 2090.83,1214.33 2091.41,1214.33 2092,1214.33 2092.59,1214.33 2093.17,1214.33 2093.76,1214.33 2094.35,1214.33 2094.93,1214.33 2095.52,1214.33 2096.1,1214.33 2096.69,1214.33 2097.28,1214.33 2097.86,1214.33 2098.45,1214.33 2099.04,1214.33 2099.62,1214.33 2100.21,1214.33 2100.8,1214.33 2101.38,1214.33 2101.97,1214.33 2102.55,1214.33 2103.14,1214.33 2103.73,1214.33 2104.31,1214.33 2104.9,1214.33 2105.49,1214.33 2106.07,1214.33 2106.66,1214.33 2107.25,1214.33 2107.83,1214.33 2108.42,1214.33 2109.01,1214.33 2109.59,1214.33 2110.18,1214.33 2110.76,1214.33 2111.35,1214.33 2111.94,1214.33 2112.52,1214.33 2113.11,1214.33 2113.7,1214.33 2114.28,1214.33 2114.87,1214.33 2115.46,1214.33 2116.04,1214.33 2116.63,1214.33 2117.22,1214.33 2117.8,1214.33 2118.39,1214.33 2118.97,1214.33 2119.56,1214.33 2120.15,1214.33 2120.73,1214.33 2121.32,1214.33 2121.91,1214.33 2122.49,1214.33 2123.08,1214.33 2123.67,1214.33 2124.25,1214.33 2124.84,1214.33 2125.42,1214.33 2126.01,1214.33 2126.6,1214.33 2127.18,1214.33 2127.77,1214.33 2128.36,1214.33 2128.94,1214.33 2129.53,1214.33 2130.12,1214.33 2130.7,1214.33 2131.29,1214.33 2131.88,1214.33 2132.46,1214.33 2133.05,1214.33 2133.63,1214.33 2134.22,1214.33 2134.81,1214.33 2135.39,1214.33 2135.98,1214.33 2136.57,1214.33 2137.15,1214.33 2137.74,1214.33 2138.33,1214.33 2138.91,1214.33 2139.5,1214.33 2140.09,1214.33 2140.67,1214.33 2141.26,1214.33 2141.84,1214.33 2142.43,1214.33 2143.02,1214.33 2143.6,1214.33 2144.19,1214.33 2144.78,1214.33 2145.36,1214.33 2145.95,1214.33 2146.54,1214.33 2147.12,1214.33 2147.71,1214.33 2148.3,1214.33 2148.88,1214.33 2149.47,1214.33 2150.05,1214.33 2150.64,1214.33 2151.23,1214.33 2151.81,1214.33 2152.4,1214.33 2152.99,1214.33 2153.57,1214.33 2154.16,1214.33 2154.75,1214.33 2155.33,1214.33 2155.92,1214.33 2156.5,1214.33 2157.09,1214.33 2157.68,1214.33 2158.26,1214.33 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.66,1197.36 1398.9,899.083 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.83 985.439,1197.36 2158.26,1197.36 2158.26,1230.83 985.439,1230.83 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip523\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip523)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-10246.9 167.706,-10738.2 168.266,-11189.2 168.825,-10715.7 169.384,-11103.6 169.943,-11430.6 170.503,-11025.2 171.062,-11309.5 171.621,-11540.8 172.18,-11749.8 172.74,-11924.5 173.299,-12067.2 173.858,-12173 174.417,-12251.5 174.977,-12301.5 175.536,-11935.8 176.095,-11610 176.655,-11631.9 177.214,-11639.6 177.773,-11017 178.332,-10718.6 178.892,-10695.8 179.451,-10179.3 180.01,-10128.7 180.569,-10041.2 181.129,-9759.47 181.688,-9670.32 182.247,-9047.39 182.806,-8965.89 183.366,-8709.38 183.925,-8460.76 184.484,-8227.16 185.043,-8128.97 185.603,-7900.75 186.162,-7684.27 186.721,-7465.83 187.28,-7256.82 187.84,-7146.85 188.399,-7033.01 188.958,-6915.87 189.517,-6699.62 190.077,-6500.71 190.636,-6305.11 191.195,-6191.37 191.754,-6002.28 192.314,-5819.59 192.873,-5705.64 193.432,-5522.59 193.991,-5221.78 194.551,-5118.23 195.11,-4957.25 195.669,-4852.4 196.228,-4584.37 196.788,-4490.08 197.347,-4345.69 197.906,-4153.35 198.465,-3873.85 199.025,-3657.56 199.584,-3488.09 200.143,-3415 200.702,-3296.51 201.262,-3215.58 201.821,-3099.63 202.38,-3024.58 202.939,-2796.02 203.499,-2730.34 204.058,-2624.48 204.617,-2519 205.176,-2418.69 205.736,-2315.97 206.295,-2217.12 206.854,-2152.06 207.413,-1994.19 207.973,-1938.15 208.532,-1878.59 209.091,-1821.61 209.65,-1763.92 210.21,-1621.04 210.769,-1570 211.328,-1436.49 211.887,-1329.21 212.447,-1281.37 213.006,-1209.46 213.565,-1138.26 214.124,-1067.95 214.684,-977.746 215.243,-863.702 215.802,-772.029 216.361,-732.746 216.921,-692.352 217.48,-603.343 218.039,-450.117 218.598,-398.306 219.158,-324.608 219.717,-298.332 220.276,-253.54 220.835,-227.098 221.395,-177.183 221.954,-112.277 222.513,-1.86403 223.072,103.257 223.632,94.7607 224.191,130.655 224.75,186.992 225.309,249.946 225.869,303.762 226.428,353.338 226.987,386.869 227.546,416.453 228.106,423.379 228.665,432.099 229.224,461.007 229.783,491.016 230.343,557.588 230.902,582.08 231.461,606.234 232.02,624.961 232.58,627.978 233.139,648.184 233.698,650.881 234.257,713.018 234.817,768.978 235.376,778.056 235.935,793.158 236.494,806.304 237.054,821.134 237.613,794.347 238.172,789.487 238.731,803.184 239.291,837.766 239.85,834.702 240.409,845.807 240.968,843.665 241.528,858.025 242.087,834.082 242.646,834.037 243.205,831.351 243.765,867.118 244.324,900.635 244.883,898.633 245.442,915.131 246.002,970.163 246.561,1054.29 247.12,1025.02 247.679,1000.55 248.239,1030.52 248.798,1056.38 249.357,1062.48 249.916,1069.9 250.476,1059.76 251.035,1068.73 251.594,1076.37 252.153,1085.17 252.713,1125.61 253.272,1094.42 253.831,1070.45 254.39,1114.55 254.95,1139.05 255.509,1112.13 256.068,1135.48 256.627,1141.92 257.187,1132.28 257.746,1125.34 258.305,1098.79 258.864,1076.83 259.424,1053.07 259.983,1064.12 260.542,1060.37 261.101,1070.87 261.661,1097.61 262.22,1106.83 262.779,1083.53 263.338,1109.83 263.898,1121.49 264.457,1127.34 265.016,1102.79 265.575,1095.19 266.135,1071.25 266.694,1100.43 267.253,1094.22 267.812,1082.49 268.372,1090.41 268.931,1096.54 269.49,1072.97 270.049,1117.86 270.609,1124.96 271.168,1136.27 271.727,1140.04 272.286,1140.89 272.846,1127.79 273.405,1134.12 273.964,1156.35 274.523,1145.99 275.083,1105.55 275.642,1130.5 276.201,1120.9 276.76,1129.92 277.32,1118.74 277.879,1125.87 278.438,1132.07 278.997,1104.39 279.557,1095.7 280.116,1071.84 280.675,1131.72 281.234,1104.21 281.794,1079.59 282.353,1071.15 282.912,1083.01 283.471,1091.88 284.031,1097.65 284.59,1069.6 285.149,1060.42 285.708,1069.29 286.268,1072.68 286.827,1069.51 287.386,1047.63 287.945,1025.68 288.505,1022.44 289.064,1032.79 289.623,1078.01 290.182,1056.96 290.742,1027.96 291.301,1006.35 291.86,983.474 292.419,947.24 292.979,929.205 293.538,910.768 294.097,895.358 294.656,880.192 295.216,866.485 295.775,874.404 296.334,926.75 296.893,928.293 297.453,941.241 298.012,974.9 298.571,1017.6 299.13,1045.61 299.69,1055.02 300.249,1031.42 300.808,1025.73 301.368,1035.69 301.927,1012.88 302.486,1008.01 303.045,1019.97 303.605,1014.94 304.164,1043.1 304.723,1023.38 305.282,987.243 305.842,998.626 306.401,1028.03 306.96,1007.48 307.519,1020.31 308.079,1015.93 308.638,979.389 309.197,994.456 309.756,985.029 310.316,980.662 310.875,991.1 311.434,987.183 311.993,997.92 312.553,1005.69 313.112,997.625 313.671,976.809 314.23,1023.48 314.79,1019.98 315.349,1012.86 315.908,1038.98 316.467,999.204 317.027,1026.44 317.586,1003.83 318.145,981.877 318.704,975.518 319.264,972.577 319.823,987.327 320.382,1011.86 320.941,1005.72 321.501,980.984 322.06,975.486 322.619,973.487 323.178,982.447 323.738,974.149 324.297,983.499 324.856,994.816 325.415,956.986 325.975,952.114 326.534,977.605 327.093,990.766 327.652,985.661 328.212,962.932 328.771,972.509 329.33,963.483 329.889,942.419 330.449,956.778 331.008,984.062 331.567,993.429 332.126,986.705 332.686,1010.03 333.245,968.672 333.804,962.251 334.363,974.023 334.923,1001.78 335.482,994.717 336.041,1036.39 336.6,1023.84 337.16,999.717 337.719,1012.76 338.278,1005.26 338.837,1027.51 339.397,998.334 339.956,1021.5 340.515,1011.52 341.074,982.688 341.634,942.45 342.193,924.218 342.752,935.484 343.311,929.784 343.871,925.251 344.43,922.943 344.989,937.288 345.548,930.386 346.108,927.287 346.667,890.475 347.226,857.914 347.785,874.098 348.345,906.43 348.904,917.432 349.463,930.337 350.022,926.55 350.582,925.275 351.141,886.903 351.7,884.747 352.259,885.826 352.819,915.711 353.378,944.765 353.937,938.06 354.496,920.562 355.056,917.08 355.615,928.209 356.174,922.683 356.733,915.322 357.293,943.082 357.852,902.036 358.411,929.465 358.97,861.26 359.53,917.957 360.089,914.415 360.648,876.877 361.207,875.091 361.767,934.347 362.326,914.387 362.885,913.171 363.444,926.175 364.004,922.642 364.563,915.356 365.122,893.443 365.681,937.203 366.241,948.493 366.8,940.39 367.359,936.209 367.918,933.655 368.478,941.609 369.037,933.607 369.596,911.694 370.155,936.387 370.715,928.447 371.274,887.207 371.833,884.688 372.392,880.132 372.952,861.109 373.511,859.455 374.07,792.878 374.629,839.85 375.189,786.867 375.748,768.999 376.307,785.336 376.866,755.736 377.426,755.917 377.985,774.632 378.544,792.993 379.103,806.196 379.663,791.66 380.222,810.096 380.781,777.226 381.34,776.544 381.9,776.141 382.459,776.342 383.018,809.969 383.577,809.236 384.137,808.023 384.696,806.733 385.255,786.737 385.814,772.261 386.374,757.391 386.933,789.706 387.492,806.267 388.051,838.044 388.611,854.446 389.17,870.051 389.729,884.022 390.288,896.272 390.848,873.672 391.407,853.398 391.966,849.281 392.525,830.055 393.085,825.553 393.644,852.938 394.203,849.851 394.762,876.944 395.322,855.169 395.881,884.469 396.44,879.6 396.999,859.709 397.559,852.416 398.118,830.735 398.677,828.773 399.236,828.531 399.796,842.971 400.355,875.014 400.914,872.294 401.473,835.863 402.033,851.245 402.592,865.601 403.151,892.949 403.71,918.89 404.27,897.623 404.829,876.631 405.388,854.504 405.947,831.25 406.507,828.663 407.066,859.384 407.625,890.154 408.184,897.625 408.744,904.361 409.303,929.213 409.862,922.712 410.421,897.011 410.981,907.179 411.54,882.978 412.099,892.057 412.658,901.899 413.218,898.401 413.777,874.974 414.336,866.115 414.895,880.205 415.455,873.208 416.014,851.868 416.573,862.663 417.132,844.692 417.692,825.038 418.251,805.426 418.81,822.14 419.369,803.267 419.929,787.049 420.488,789.511 421.047,821.628 421.606,815.516 422.166,828.519 422.725,859.472 423.284,872.509 423.843,917.653 424.403,928.036 424.962,904.098 425.521,913.69 426.08,922.609 426.64,882.76 427.199,877.439 427.758,902.928 428.318,864.932 428.877,845.295 429.436,842.223 429.995,836.839 430.555,836.783 431.114,803.437 431.673,816.251 432.232,814.402 432.792,776.893 433.351,790.724 433.91,768.002 434.469,747.451 435.029,713.144 435.588,715.87 436.147,733.432 436.706,735.687 437.266,754.027 437.825,739.045 438.384,737.964 438.943,721.969 439.503,722.377 440.062,692.776 440.621,709.729 441.18,694.864 441.74,681.81 442.299,716.322 442.858,702.04 443.417,722.895 443.977,710.629 444.536,695.795 445.095,699.501 445.654,701.461 446.214,687.834 446.773,707.2 447.332,723.993 447.891,742.989 448.451,758.278 449.01,757.694 449.569,756.504 450.128,754.673 450.688,751.655 451.247,767.21 451.806,770.341 452.365,784.638 452.925,764.338 453.484,780.288 454.043,778.972 454.602,824.273 455.162,835.271 455.721,832.142 456.28,806.971 456.839,804.506 457.399,818.365 457.958,831.547 458.517,797.791 459.076,823.105 459.636,821.395 460.195,803.094 460.754,797.983 461.313,813.103 461.873,825.338 462.432,853.124 462.991,848.259 463.55,874.299 464.11,850.268 464.669,844.481 465.228,839.168 465.787,834.933 466.347,830.527 466.906,825.058 467.465,791.4 468.024,788.721 468.584,785.452 469.143,764.47 469.702,762.686 470.261,760.577 470.821,757.404 471.38,756.191 471.939,769.46 472.498,737.748 473.058,655.586 473.617,661.279 474.176,664.281 474.735,702.976 475.295,702.627 475.854,687.781 476.413,690.848 476.972,693.527 477.532,691.025 478.091,713.264 478.65,733.067 479.209,733.154 479.769,738.39 480.328,738.594 480.887,705.633 481.446,724.202 482.006,740.95 482.565,743.602 483.124,758.897 483.683,758.25 484.243,789.372 484.802,783.321 485.361,776.995 485.92,773.584 486.48,773.601 487.039,738.86 487.598,735.731 488.157,754.41 488.717,738.172 489.276,722.418 489.835,674.247 490.394,695.026 490.954,714.738 491.513,731.912 492.072,684.529 492.631,685.026 493.191,688.017 493.75,687.99 494.309,754.004 494.868,750.477 495.428,735.946 495.987,752.025 496.546,735.844 497.105,718.261 497.665,702.621 498.224,685.09 498.783,705.626 499.342,691.629 499.902,698.339 500.461,717.391 501.02,719.008 501.579,754.283 502.139,789.41 502.698,772.411 503.257,774.619 503.816,754.317 504.376,785.094 504.935,751.024 505.494,750.656 506.053,766.258 506.613,729.675 507.172,744.452 507.731,746.691 508.29,728.163 508.85,696.508 509.409,729.304 509.968,746.114 510.527,763.293 511.087,778.074 511.646,742.771 512.205,709.867 512.764,711.201 513.324,728.174 513.883,742.108 514.442,710.875 515.001,695.612 515.561,697.764 516.12,681.493 516.679,714.642 517.238,717.435 517.798,736.692 518.357,753.634 518.916,769.333 519.475,767.175 520.035,748.719 520.594,746.492 521.153,726.864 521.712,762.187 522.272,745.14 522.831,723.43 523.39,709.972 523.949,728.838 524.509,731.326 525.068,743.429 525.627,743 526.186,729.424 526.746,730.969 527.305,730.869 527.864,744.891 528.423,710.538 528.983,708.917 529.542,695.898 530.101,697.529 530.66,700.549 531.22,700.583 531.779,686.053 532.338,688.786 532.897,706.129 533.457,724.477 534.016,740.528 534.575,738.56 535.134,738.538 535.694,751.008 536.253,715.691 536.812,717.986 537.371,720.603 537.931,718.74 538.49,749.044 539.049,730.965 539.608,764.301 540.168,792.733 540.727,787.75 541.286,800.232 541.845,796.664 542.405,777.813 542.964,756.761 543.523,773.204 544.082,787.175 544.642,737.571 545.201,736.873 545.76,723.864 546.319,739.908 546.879,722.454 547.438,688.819 547.997,690.873 548.556,709.945 549.116,727.15 549.675,721.817 550.234,702.461 550.793,688.758 551.353,705.786 551.912,704.354 552.471,710.373 553.031,694.25 553.59,680.119 554.149,665.369 554.708,665.093 555.268,684.66 555.827,735.15 556.386,733.145 556.945,733.719 557.505,751.035 558.064,763.757 558.623,763.562 559.182,745.9 559.742,743.646 560.301,727.243 560.86,692.191 561.419,712.951 561.979,730.807 562.538,746.73 563.097,778.649 563.656,841.739 564.216,817.217 564.775,779.389 565.334,759.33 565.893,743.168 566.453,756.464 567.012,772.513 567.571,772.439 568.13,737.433 568.69,750.816 569.249,746.182 569.808,778.08 570.367,775.72 570.927,775.283 571.486,787.023 572.045,766.683 572.604,747.017 573.164,745.077 573.723,761.043 574.282,758.758 574.841,756.716 575.401,771.56 575.96,785.716 576.519,797.618 577.078,777.751 577.638,756.91 578.197,720.812 578.756,720.701 579.315,720.885 579.875,721.204 580.434,739.645 580.993,739.653 581.552,752.876 582.112,770.813 582.671,736.318 583.23,738.992 583.789,752.345 584.349,735.758 584.908,731.556 585.467,682.243 586.026,701.9 586.586,682.766 587.145,681.208 587.704,718.214 588.263,686.615 588.823,703.143 589.382,684.349 589.941,649.243 590.5,650.306 591.06,635.429 591.619,603.774 592.178,605.509 592.737,628.032 593.297,616.13 593.856,635.941 594.415,622.411 594.974,643.294 595.534,637.665 596.093,656.753 596.652,675.599 597.211,708.111 597.771,723.916 598.33,741.247 598.889,756.863 599.448,738.608 600.008,784.346 600.567,777.698 601.126,761.011 601.685,757.981 602.245,725.751 602.804,690.443 603.363,676.985 603.922,661.89 604.482,681.565 605.041,666.142 605.6,668.011 606.159,688.945 606.719,689.389 607.278,639.717 607.837,675.497 608.396,658.584 608.956,646.036 609.515,630.968 610.074,651.72 610.633,669.664 611.193,675.096 611.752,662.45 612.311,662.604 612.87,650.063 613.43,639.709 613.989,678.185 614.548,665.474 615.107,649.19 615.667,636.33 616.226,621.998 616.785,611.443 617.344,618.933 617.904,622.594 618.463,627.665 619.022,648.629 619.581,633.706 620.141,607.481 620.7,597.327 621.259,603.182 621.818,610.756 622.378,645.241 622.937,612.746 623.496,615.676 624.055,607.447 624.615,610.956 625.174,615.341 625.733,607.419 626.292,613.72 626.852,616.155 627.411,603.51 627.97,610.209 628.529,612.924 629.089,634.852 629.648,654.89 630.207,673.347 630.766,693.029 631.326,709.402 631.885,709.782 632.444,695.451 633.003,695.602 633.563,712.024 634.122,728.3 634.681,709.601 635.24,711.02 635.8,710.222 636.359,691.431 636.918,721.377 637.477,753.504 638.037,751.182 638.596,778.808 639.155,807.802 639.714,819.489 640.274,828.992 640.833,821.736 641.392,813.28 641.951,809.914 642.511,803.515 643.07,783.477 643.629,780.802 644.188,779.148 644.748,804.006 645.307,813.766 645.866,821.497 646.425,835.158 646.985,809.18 647.544,805.753 648.103,798.397 648.662,790.934 649.222,818.673 649.781,829.394 650.34,823.361 650.899,800.326 651.459,780.552 652.018,778.989 652.577,757.182 653.136,737.753 653.696,739.412 654.255,754.688 654.814,734.744 655.373,745.572 655.933,741.541 656.492,753.876 657.051,715.18 657.61,713.398 658.17,727.783 658.729,727.392 659.288,694.983 659.847,696.895 660.407,698.192 660.966,699.555 661.525,700.219 662.084,636.181 662.644,626.324 663.203,649.321 663.762,670.635 664.321,671.763 664.881,674.443 665.44,678.262 665.999,679.345 666.558,697.042 667.118,680.032 667.677,699.569 668.236,698.799 668.795,731.513 669.355,730.924 669.914,712.271 670.473,713.779 671.032,681.726 671.592,679.094 672.151,647.178 672.71,636.034 673.269,641.133 673.829,608.321 674.388,629.711 674.947,616.013 675.506,620.954 676.066,642.541 676.625,647.702 677.184,647.906 677.743,634.678 678.303,653.533 678.862,699.363 679.421,716.46 679.981,717.589 680.54,714.723 681.099,701.362 681.658,684.552 682.218,717.666 682.777,696.853 683.336,677.882 683.895,681.609 684.455,683.91 685.014,656.038 685.573,672.182 686.132,691.835 686.692,661.129 687.251,676.647 687.81,657.841 688.369,675.439 688.929,689.729 689.488,690.096 690.047,755.098 690.606,783.187 691.166,764.417 691.725,763.833 692.284,741.32 692.843,722.214 693.403,736.686 693.962,716.208 694.521,700.225 695.08,700.724 695.64,684.104 696.199,697.843 696.758,698.056 697.317,678.411 697.877,696.032 698.436,712.239 698.995,711.811 699.554,706.645 700.114,690.458 700.673,692.514 701.232,696.856 701.791,680.837 702.351,680.544 702.91,647.224 703.469,666.28 704.028,685.448 704.588,686.907 705.147,670.105 705.706,704.2 706.265,703.528 706.825,737.311 707.384,751.155 707.943,766.585 708.502,777.002 709.062,816.364 709.621,859.271 710.18,850.888 710.739,843.687 711.299,863.07 711.858,870.216 712.417,861.537 712.976,885.252 713.536,856.138 714.095,816.035 714.654,827.792 715.213,839.984 715.773,817.328 716.332,827.778 716.891,806.15 717.45,815.821 718.01,827.642 718.569,806.563 719.128,814.706 719.687,789.685 720.247,815.33 720.806,780.534 721.365,780.153 721.924,755.899 722.484,701.314 723.043,686.174 723.602,666.956 724.161,652.083 724.721,672.577 725.28,688.145 725.839,687.326 726.398,653.972 726.958,657.77 727.517,644.383 728.076,616.654 728.635,618.196 729.195,605.736 729.754,607.771 730.313,657.16 730.872,673.644 731.432,660.439 731.991,680.022 732.55,666.283 733.109,671.789 733.669,684.82 734.228,668.564 734.787,671.182 735.346,685.434 735.906,682.645 736.465,667.987 737.024,654.037 737.583,659.859 738.143,678.45 738.702,695.423 739.261,659.713 739.82,660.109 740.38,660.924 740.939,681.88 741.498,717.116 742.057,717.491 742.617,667.266 743.176,682.383 743.735,650.366 744.294,637.701 744.854,626.184 745.413,598.815 745.972,588.793 746.531,559.099 747.091,549.805 747.65,537.574 748.209,566.634 748.768,607.276 749.328,614.102 749.887,632.751 750.446,651.067 751.005,638.397 751.565,675.005 752.124,663.92 752.683,730.312 753.242,744.744 753.802,776.303 754.361,759.859 754.92,837.574 755.479,830.002 756.039,821.476 756.598,783.629 757.157,773.864 757.716,768.441 758.276,762.647 758.835,757.866 759.394,835.445 759.953,864.896 760.513,856.84 761.072,816.479 761.631,811.181 762.19,805.21 762.75,828.544 763.309,823.313 763.868,832.398 764.427,827.957 764.987,822.464 765.546,846.371 766.105,801.729 766.664,759.135 767.224,737.461 767.783,717.803 768.342,699.242 768.901,680.948 769.461,696.877 770.02,711.383 770.579,710.524 771.138,710.823 771.698,722.401 772.257,733.395 772.816,730.023 773.375,713.086 773.935,677.64 774.494,678.565 775.053,678.329 775.612,646.229 776.172,713.934 776.731,728.296 777.29,727.336 777.849,729.279 778.409,725.061 778.968,754.222 779.527,704.635 780.086,697.393 780.646,696.065 781.205,696.796 781.764,713.778 782.323,726.667 782.883,692.852 783.442,724.195 784.001,722.423 784.56,688.655 785.12,676.283 785.679,678.093 786.238,662.858 786.797,668.487 787.357,635.605 787.916,641.843 788.475,675.796 789.034,691.671 789.594,673.042 790.153,689.129 790.712,686.136 791.271,654.125 791.831,661.239 792.39,630.157 792.949,621.114 793.508,662.143 794.068,630.824 794.627,635.28 795.186,687.965 795.745,702.325 796.305,670.522 796.864,638.814 797.423,624.457 797.982,627.497 798.542,632.169 799.101,635.703 799.66,640.042 800.219,660.202 800.779,661.595 801.338,647.073 801.897,629.419 802.456,633.891 803.016,639.739 803.575,627.462 804.134,588.303 804.693,577.834 805.253,586.022 805.812,591.389 806.371,610.484 806.931,632.511 807.49,652.64 808.049,654.486 808.608,674.405 809.168,659.129 809.727,647.65 810.286,646.942 810.845,634.025 811.405,637.518 811.964,638.627 812.523,676.142 813.082,693.134 813.642,714.393 814.201,700.66 814.76,716.214 815.319,731.565 815.879,681.677 816.438,679.09 816.997,679.191 817.556,662.272 818.116,662.844 818.675,694.539 819.234,673.917 819.793,675.1 820.353,677.381 820.912,695.108 821.471,692.567 822.03,662.524 822.59,661.869 823.149,694.818 823.708,679.033 824.267,697.508 824.827,696.39 825.386,684.793 825.945,638.755 826.504,641.067 827.064,658.21 827.623,647.258 828.182,620.443 828.741,641.918 829.301,641.088 829.86,690.94 830.419,689.502 830.978,668.303 831.538,701.863 832.097,718.343 832.656,719.093 833.215,699.708 833.775,714.378 834.334,743.993 834.893,740.224 835.452,706.165 836.012,751.613 836.571,816.332 837.13,822.025 837.689,798.779 838.249,793.137 838.808,792.208 839.367,801.186 839.926,778.009 840.486,739.295 841.045,769.948 841.604,766.972 842.163,766.472 842.723,762.447 843.282,791.918 843.841,772.88 844.4,768.14 844.96,765.559 845.519,714.387 846.078,715.533 846.637,696.903 847.197,715.599 847.756,712.74 848.315,696.936 848.874,698.763 849.434,713.303 849.993,712.374 850.552,693.534 851.111,710.621 851.671,659.847 852.23,646.244 852.789,664.809 853.348,666.618 853.908,650.4 854.467,648.601 855.026,667.273 855.585,685.065 856.145,668.355 856.704,684.263 857.263,665.43 857.822,698.885 858.382,714.289 858.941,714.967 859.5,694.493 860.059,726.295 860.619,742.297 861.178,724.587 861.737,723.265 862.296,737.46 862.856,765.001 863.415,742.498 863.974,738.825 864.533,723.138 865.093,690.749 865.652,707.924 866.211,710.962 866.77,727.252 867.33,723.31 867.889,735.217 868.448,713.511 869.007,664.478 869.567,648.33 870.126,651.851 870.685,714.656 871.244,694.765 871.804,694.013 872.363,714.127 872.922,727.585 873.481,774.907 874.041,737.926 874.6,716.843 875.159,729.269 875.718,724.697 876.278,687.974 876.837,707.727 877.396,688.847 877.955,720.543 878.515,737.627 879.074,750.494 879.633,715.217 880.192,727.362 880.752,708.896 881.311,688.224 881.87,670.987 882.429,675.367 882.989,646.27 883.548,631.325 884.107,632.101 884.666,635.409 885.226,606.562 885.785,578.546 886.344,581.829 886.903,589.713 887.463,593.052 888.022,627.646 888.581,663.877 889.14,663.446 889.7,683.25 890.259,683.344 890.818,701.308 891.377,716.235 891.937,729.432 892.496,713.171 893.055,729.255 893.614,731.143 894.174,732.021 894.733,743.117 895.292,723.599 895.851,724.487 896.411,723.433 896.97,721.113 897.529,751.832 898.088,718.161 898.648,732.616 899.207,730.836 899.766,733.384 900.325,746.8 900.885,727.795 901.444,743.767 902.003,739.589 902.562,721.881 903.122,738.933 903.681,718.881 904.24,733.059 904.799,715.357 905.359,699.039 905.918,696.52 906.477,646.12 907.036,663.252 907.596,648.884 908.155,636.098 908.714,638.648 909.273,625.088 909.833,677.622 910.392,692.079 910.951,694.513 911.51,696.714 912.07,695.217 912.629,714.058 913.188,710.226 913.747,709.175 914.307,691.898 914.866,675.527 915.425,677.597 915.984,710.412 916.544,769.958 917.103,779.87 917.662,753.83 918.221,715.49 918.781,699.528 919.34,747.595 919.899,727.748 920.458,691.603 921.018,722.366 921.577,735.929 922.136,747.699 922.695,692.896 923.255,710.771 923.814,709.458 924.373,693.725 924.932,709.105 925.492,709.268 926.051,723.532 926.61,673.689 927.169,655.536 927.729,640.374 928.288,629.514 928.847,662.813 929.406,647.333 929.966,652.989 930.525,687.849 931.084,720.99 931.644,720.248 932.203,732.373 932.762,730.929 933.321,729.788 933.881,710.935 934.44,695.614 934.999,714.002 935.558,668.412 936.118,652.228 936.677,635.988 937.236,572.316 937.795,562.295 938.355,566.72 938.914,561.17 939.473,551.939 940.032,557.75 940.592,563.322 941.151,570.768 941.71,577.88 942.269,569.343 942.829,604.746 943.388,640.324 943.947,656.662 944.506,606.057 945.066,577.382 945.625,584.7 946.184,589.252 946.743,608.078 947.303,593.444 947.862,597.385 948.421,602.184 948.98,573.5 949.54,549.94 950.099,558.564 950.658,565.658 951.217,572.026 951.777,564.366 952.336,573.993 952.895,557.753 953.454,544.653 954.014,570.858 954.573,544.723 955.132,555.617 955.691,579.015 956.251,586.335 956.81,588.729 957.369,627.272 957.928,632.796 958.488,652.465 959.047,654.943 959.606,674.162 960.165,694.176 960.725,677.719 961.284,679.533 961.843,696.206 962.402,666.945 962.962,651.971 963.521,673.221 964.08,655.928 964.639,656.562 965.199,659.706 965.758,692.022 966.317,690.998 966.876,677.558 967.436,661.171 967.995,661.619 968.554,681.815 969.113,685.307 969.673,684.872 970.232,684.917 970.791,668.105 971.35,685.54 971.91,701.994 972.469,704.917 973.028,688.243 973.587,750.368 974.147,749.676 974.706,727.163 975.265,742.579 975.824,707.571 976.384,724.681 976.943,723.219 977.502,735.475 978.061,714.921 978.621,711.009 979.18,707.307 979.739,703.494 980.298,703.01 980.858,696.267 981.417,713.816 981.976,744.694 982.535,739.448 983.095,736.644 983.654,718.393 984.213,750.233 984.772,747.686 985.332,777.153 985.891,744.28 986.45,711.771 987.009,727.87 987.569,711.731 988.128,691.4 988.687,721.779 989.246,738.339 989.806,737.56 990.365,719.53 990.924,717.279 991.483,727.975 992.043,740.546 992.602,735.666 993.161,698.886 993.72,681.198 994.28,682.859 994.839,714.609 995.398,713.223 995.957,726.572 996.517,706.874 997.076,719.235 997.635,702.254 998.194,783.464 998.754,765.314 999.313,725.294 999.872,710.237 1000.43,674.668 1000.99,642.475 1001.55,629.702 1002.11,679.892 1002.67,682.481 1003.23,697.429 1003.79,695.208 1004.35,696.957 1004.91,680.931 1005.46,679.863 1006.02,661.371 1006.58,663.519 1007.14,665.086 1007.7,683.897 1008.26,681.384 1008.82,679.073 1009.38,664.966 1009.94,653.839 1010.5,668.745 1011.06,671.452 1011.62,673.531 1012.18,674.56 1012.73,657.291 1013.29,690.487 1013.85,675.371 1014.41,659.544 1014.97,661.026 1015.53,697.054 1016.09,678.782 1016.65,699.814 1017.21,713.968 1017.77,710.47 1018.33,724.651 1018.89,740.633 1019.45,740.936 1020.01,735.349 1020.56,730.28 1021.12,759.446 1021.68,727.486 1022.24,728.152 1022.8,742.946 1023.36,755.139 1023.92,751.361 1024.48,750.129 1025.04,746.078 1025.6,743.013 1026.16,791.965 1026.72,820.981 1027.28,813.916 1027.83,791.249 1028.39,802.801 1028.95,798.755 1029.51,775.908 1030.07,755.98 1030.63,748.683 1031.19,727.48 1031.75,729.605 1032.31,725.024 1032.87,688.419 1033.43,704.426 1033.99,702.417 1034.55,685.613 1035.1,702.153 1035.66,701.05 1036.22,682.044 1036.78,681.264 1037.34,634.596 1037.9,635.91 1038.46,671.499 1039.02,689.671 1039.58,704.854 1040.14,705.71 1040.7,669.983 1041.26,671.056 1041.82,655.019 1042.38,657.669 1042.93,644.126 1043.49,643.948 1044.05,647.185 1044.61,701.496 1045.17,682.379 1045.73,651.539 1046.29,667.969 1046.85,682.915 1047.41,700.535 1047.97,733.013 1048.53,717.761 1049.09,702.72 1049.65,701.461 1050.2,687.703 1050.76,690.601 1051.32,660.598 1051.88,642.765 1052.44,660.389 1053,659.727 1053.56,677.695 1054.12,657.852 1054.68,693.108 1055.24,695.949 1055.8,746.817 1056.36,743.374 1056.92,721.103 1057.48,688.37 1058.03,654.899 1058.59,703.475 1059.15,734.955 1059.71,764.636 1060.27,743.436 1060.83,726.015 1061.39,740.116 1061.95,721.576 1062.51,686.408 1063.07,637.218 1063.63,642.224 1064.19,645.857 1064.75,644.617 1065.3,676.409 1065.86,691.141 1066.42,703.89 1066.98,688.178 1067.54,691.169 1068.1,727.966 1068.66,710.914 1069.22,726.899 1069.78,677.844 1070.34,629.591 1070.9,617.241 1071.46,621.567 1072.02,592.505 1072.57,582.815 1073.13,572.148 1073.69,558.761 1074.25,565.9 1074.81,623.031 1075.37,641.314 1075.93,644.178 1076.49,630.29 1077.05,612.843 1077.61,602.582 1078.17,586.982 1078.73,591.332 1079.29,563.388 1079.85,616.304 1080.4,620.163 1080.96,639.343 1081.52,687.685 1082.08,689.171 1082.64,722.763 1083.2,721.58 1083.76,737.38 1084.32,734.146 1084.88,763.898 1085.44,726.325 1086,693.661 1086.56,693.293 1087.12,695.648 1087.67,695.112 1088.23,692.539 1088.79,697.258 1089.35,712.604 1089.91,691.944 1090.47,657.16 1091.03,638.967 1091.59,657.409 1092.15,641.639 1092.71,659.73 1093.27,642.473 1093.83,646.156 1094.39,650.425 1094.94,654.476 1095.5,639.201 1096.06,623.491 1096.62,609.855 1097.18,594.852 1097.74,568.458 1098.3,592.198 1098.86,580.49 1099.42,604.291 1099.98,608.987 1100.54,613.411 1101.1,617.724 1101.66,654.654 1102.22,593.347 1102.77,582.632 1103.33,602.791 1103.89,621.65 1104.45,622.379 1105.01,656.629 1105.57,660.596 1106.13,662.216 1106.69,678.495 1107.25,644.426 1107.81,616.576 1108.37,619.84 1108.93,617.769 1109.49,621.298 1110.04,636.429 1110.6,617.624 1111.16,621.22 1111.72,608.949 1112.28,629.142 1112.84,634.372 1113.4,620.512 1113.96,606.991 1114.52,626.332 1115.08,613.104 1115.64,617.706 1116.2,586.416 1116.76,596.522 1117.31,617.964 1117.87,621.799 1118.43,640.393 1118.99,675.373 1119.55,658.336 1120.11,627.28 1120.67,629.326 1121.23,635.143 1121.79,654.083 1122.35,637.478 1122.91,672.441 1123.47,691.474 1124.03,690.549 1124.59,674.389 1125.14,689.241 1125.7,737.773 1126.26,751.442 1126.82,748.727 1127.38,761.333 1127.94,736.514 1128.5,735.756 1129.06,748.05 1129.62,757.938 1130.18,752.863 1130.74,747.254 1131.3,743.571 1131.86,721.198 1132.41,733.005 1132.97,745.876 1133.53,724.117 1134.09,734.913 1134.65,719.057 1135.21,728.972 1135.77,745.356 1136.33,742.496 1136.89,740.123 1137.45,721.823 1138.01,722.669 1138.57,736.207 1139.13,718.771 1139.68,746.968 1140.24,726.867 1140.8,724.634 1141.36,722.992 1141.92,739.051 1142.48,736.735 1143.04,746.737 1143.6,759.95 1144.16,790.221 1144.72,767.047 1145.28,745.048 1145.84,755.31 1146.4,753.016 1146.96,750.299 1147.51,777.004 1148.07,769.778 1148.63,750.291 1149.19,733.186 1149.75,733.357 1150.31,698.322 1150.87,696.91 1151.43,727.486 1151.99,725.61 1152.55,769.597 1153.11,751.551 1153.67,763.859 1154.23,779.749 1154.78,759.185 1155.34,754.87 1155.9,716.332 1156.46,763.216 1157.02,759.373 1157.58,783.765 1158.14,779.066 1158.7,743.357 1159.26,742.461 1159.82,725.502 1160.38,744.036 1160.94,738.457 1161.5,736.656 1162.05,718.692 1162.61,721.108 1163.17,750.794 1163.73,747.197 1164.29,695.99 1164.85,679.592 1165.41,674.623 1165.97,674.958 1166.53,660.873 1167.09,626.762 1167.65,646.078 1168.21,663.913 1168.77,664.874 1169.33,648.584 1169.88,634.89 1170.44,619.783 1171,577.393 1171.56,582.629 1172.12,574.459 1172.68,598.872 1173.24,601.096 1173.8,588.325 1174.36,591.796 1174.92,596.506 1175.48,586.102 1176.04,643.063 1176.6,629.82 1177.15,585.456 1177.71,592.732 1178.27,626.616 1178.83,633.544 1179.39,638.096 1179.95,640.015 1180.51,609.822 1181.07,625.489 1181.63,630.023 1182.19,599.936 1182.75,587.604 1183.31,593.257 1183.87,598.843 1184.43,618.165 1184.98,608.906 1185.54,614.91 1186.1,618.685 1186.66,636.828 1187.22,603.82 1187.78,590.138 1188.34,613.707 1188.9,618.03 1189.46,620.913 1190.02,624.569 1190.58,606.519 1191.14,628.084 1191.7,631.104 1192.25,651.129 1192.81,669.088 1193.37,672 1193.93,678.664 1194.49,662.987 1195.05,653.061 1195.61,640.832 1196.17,672.342 1196.73,655.41 1197.29,674.284 1197.85,675.586 1198.41,679.063 1198.97,635.241 1199.52,637.688 1200.08,638.114 1200.64,658.729 1201.2,660.163 1201.76,691.327 1202.32,691.269 1202.88,704.798 1203.44,722.11 1204,737.073 1204.56,718.996 1205.12,703.306 1205.68,704.369 1206.24,707.185 1206.8,739.686 1207.35,736.205 1207.91,748.172 1208.47,763.695 1209.03,725.507 1209.59,686.62 1210.15,682.641 1210.71,664.964 1211.27,666.198 1211.83,684.985 1212.39,717.862 1212.95,733.016 1213.51,732.332 1214.07,729.595 1214.62,759.305 1215.18,743.291 1215.74,755.826 1216.3,718.935 1216.86,717.775 1217.42,712.588 1217.98,742.772 1218.54,737.507 1219.1,748.897 1219.66,728.538 1220.22,742.233 1220.78,737.421 1221.34,718.305 1221.89,684.432 1222.45,699.572 1223.01,668.548 1223.57,702.821 1224.13,720.471 1224.69,739.444 1225.25,736.016 1225.81,732.174 1226.37,727.934 1226.93,723.721 1227.49,736.793 1228.05,763.063 1228.61,743.185 1229.17,725.319 1229.72,722.997 1230.28,701.909 1230.84,699.944 1231.4,668.323 1231.96,621.006 1232.52,589.025 1233.08,606.77 1233.64,643.394 1234.2,660.672 1234.76,630.238 1235.32,634.693 1235.88,636.298 1236.44,622.793 1236.99,659.637 1237.55,662.318 1238.11,697.581 1238.67,695.208 1239.23,726.965 1239.79,693.114 1240.35,675.771 1240.91,707.807 1241.47,687.776 1242.03,688.652 1242.59,684.593 1243.15,718.402 1243.71,735.311 1244.26,729.674 1244.82,743.715 1245.38,756.854 1245.94,768.614 1246.5,766.94 1247.06,761.02 1247.62,744.614 1248.18,756.87 1248.74,770.235 1249.3,746.232 1249.86,742.971 1250.42,786.322 1250.98,796.687 1251.54,771.987 1252.09,780.402 1252.65,775.981 1253.21,834.549 1253.77,839.87 1254.33,831.034 1254.89,788.74 1255.45,781.094 1256.01,777.979 1256.57,758.78 1257.13,722.855 1257.69,734.283 1258.25,744.388 1258.81,774.666 1259.36,757.366 1259.92,755.355 1260.48,735.192 1261.04,732.437 1261.6,730.876 1262.16,727.662 1262.72,743.785 1263.28,739.613 1263.84,720.418 1264.4,703.871 1264.96,703.717 1265.52,738.587 1266.08,719.812 1266.63,734.706 1267.19,746.457 1267.75,759.964 1268.31,724.412 1268.87,703.755 1269.43,703.124 1269.99,715.886 1270.55,729.136 1271.11,738.252 1271.67,733.091 1272.23,730.791 1272.79,710.939 1273.35,658.493 1273.91,654.131 1274.46,606.51 1275.02,639.521 1275.58,592.781 1276.14,598.23 1276.7,569.689 1277.26,573.673 1277.82,578.413 1278.38,582.636 1278.94,636.296 1279.5,622.7 1280.06,626.706 1280.62,629.052 1281.18,650.653 1281.73,618.608 1282.29,605.778 1282.85,624.485 1283.41,611.776 1283.97,615.959 1284.53,604.705 1285.09,613.461 1285.65,665.376 1286.21,669.274 1286.77,669.877 1287.33,653.046 1287.89,654.871 1288.45,674.142 1289,625.621 1289.56,644.055 1290.12,678.981 1290.68,665.538 1291.24,669.181 1291.8,655.761 1292.36,659.394 1292.92,644.656 1293.48,663.194 1294.04,681.811 1294.6,682.873 1295.16,682.061 1295.72,700.099 1296.28,686.212 1296.83,719.598 1297.39,734.269 1297.95,699.219 1298.51,693.177 1299.07,689.812 1299.63,706.278 1300.19,689.727 1300.75,705.156 1301.31,701.486 1301.87,682.875 1302.43,669.429 1302.99,639.005 1303.55,643.724 1304.1,646.094 1304.66,648.578 1305.22,618.315 1305.78,619.959 1306.34,622.655 1306.9,626.901 1307.46,630.5 1308.02,632.348 1308.58,652.57 1309.14,603.805 1309.7,606.493 1310.26,614.512 1310.82,636.962 1311.38,690.506 1311.93,690.704 1312.49,691.034 1313.05,690.369 1313.61,703.315 1314.17,735.012 1314.73,764.525 1315.29,755.007 1315.85,733.747 1316.41,732.218 1316.97,695.974 1317.53,726.256 1318.09,725.578 1318.65,759.694 1319.2,772.172 1319.76,767.557 1320.32,749.775 1320.88,730.905 1321.44,713.348 1322,698.826 1322.56,663.549 1323.12,664.829 1323.68,681.711 1324.24,648.653 1324.8,650.803 1325.36,683.482 1325.92,687.701 1326.47,669.931 1327.03,670.633 1327.59,670.176 1328.15,685.945 1328.71,638.152 1329.27,639.73 1329.83,693.466 1330.39,711.729 1330.95,742.999 1331.51,723.588 1332.07,706.039 1332.63,719.304 1333.19,688.11 1333.75,650.595 1334.3,650.596 1334.86,650.04 1335.42,650.662 1335.98,653.295 1336.54,688.43 1337.1,655.261 1337.66,658.264 1338.22,660.53 1338.78,645.479 1339.34,663.51 1339.9,697.793 1340.46,713.697 1341.02,698.01 1341.57,679.558 1342.13,649.081 1342.69,635.726 1343.25,640.591 1343.81,670.682 1344.37,654.243 1344.93,672.277 1345.49,688.257 1346.05,688.439 1346.61,674.231 1347.17,693.185 1347.73,694.324 1348.29,693.032 1348.84,662.443 1349.4,659.523 1349.96,659.409 1350.52,677.647 1351.08,695.966 1351.64,725.634 1352.2,690.057 1352.76,707.187 1353.32,722.746 1353.88,719.288 1354.44,701.279 1355,715.552 1355.56,717.02 1356.12,728.5 1356.67,727.533 1357.23,759.265 1357.79,758.033 1358.35,753.537 1358.91,715.183 1359.47,729.821 1360.03,709.753 1360.59,736.789 1361.15,695.383 1361.71,696.78 1362.27,679.234 1362.83,660.896 1363.39,693.283 1363.94,692.374 1364.5,657.8 1365.06,661.645 1365.62,649.215 1366.18,655.326 1366.74,678.156 1367.3,666.989 1367.86,730.594 1368.42,760.016 1368.98,723.574 1369.54,722.159 1370.1,703.703 1370.66,706.897 1371.21,736.217 1371.77,731.544 1372.33,714.412 1372.89,728.022 1373.45,713.37 1374.01,713.727 1374.57,725.387 1375.13,722.781 1375.69,720.921 1376.25,733.344 1376.81,698.716 1377.37,681.922 1377.93,686.468 1378.49,638.949 1379.04,640.178 1379.6,671.907 1380.16,676.731 1380.72,663.345 1381.28,613.897 1381.84,633.987 1382.4,600.26 1382.96,602.9 1383.52,622.06 1384.08,628.925 1384.64,662.866 1385.2,679.879 1385.76,665.776 1386.31,678.808 1386.87,679.207 1387.43,698.324 1387.99,681.205 1388.55,682.509 1389.11,664.373 1389.67,666.407 1390.23,669.062 1390.79,737.279 1391.35,751.751 1391.91,730.286 1392.47,727.486 1393.03,773.834 1393.58,772.24 1394.14,752.998 1394.7,749.783 1395.26,729.392 1395.82,744.138 1396.38,738.692 1396.94,703.872 1397.5,689.917 1398.06,687.594 1398.62,671.579 1399.18,687.654 1399.74,655.44 1400.3,672.818 1400.86,671.468 1401.41,686.106 1401.97,691.328 1402.53,674.656 1403.09,690.49 1403.65,689.152 1404.21,689.708 1404.77,672.104 1405.33,654.952 1405.89,670.67 1406.45,675.197 1407.01,674.604 1407.57,688.507 1408.13,686.851 1408.68,701.24 1409.24,713.334 1409.8,742.585 1410.36,741.428 1410.92,720.18 1411.48,717.177 1412.04,678.975 1412.6,677.749 1413.16,693.7 1413.72,696.833 1414.28,661.094 1414.84,678.604 1415.4,663.049 1415.95,662.78 1416.51,648.915 1417.07,607.765 1417.63,614.237 1418.19,634.96 1418.75,653.656 1419.31,673.542 1419.87,659.43 1420.43,661.142 1420.99,697.036 1421.55,711.746 1422.11,695.587 1422.67,710.802 1423.23,708.342 1423.78,721.165 1424.34,701.673 1424.9,718.176 1425.46,716.38 1426.02,713.391 1426.58,740.037 1427.14,688.769 1427.7,671.288 1428.26,667.241 1428.82,584.446 1429.38,575.505 1429.94,579.343 1430.5,585.545 1431.05,590.603 1431.61,611.445 1432.17,631.053 1432.73,663.016 1433.29,650.242 1433.85,635.338 1434.41,602.531 1434.97,605.801 1435.53,595.046 1436.09,584.67 1436.65,593.583 1437.21,596.986 1437.77,598.534 1438.33,632.879 1438.88,683.189 1439.44,667.414 1440,699.479 1440.56,748.841 1441.12,747.014 1441.68,739.582 1442.24,773.513 1442.8,767.383 1443.36,777.787 1443.92,785.46 1444.48,763.742 1445.04,745.626 1445.6,741.154 1446.15,706.286 1446.71,704.453 1447.27,720.525 1447.83,734.38 1448.39,732.898 1448.95,700.036 1449.51,715.2 1450.07,698.908 1450.63,662.675 1451.19,695.334 1451.75,664.994 1452.31,649.828 1452.87,617.317 1453.42,602.884 1453.98,573.742 1454.54,581.404 1455.1,603.127 1455.66,574.84 1456.22,580.442 1456.78,553.951 1457.34,575.871 1457.9,616.074 1458.46,616.322 1459.02,617.812 1459.58,623.309 1460.14,625.828 1460.7,595.319 1461.25,630.54 1461.81,617.864 1462.37,652.584 1462.93,670.972 1463.49,653.471 1464.05,671.896 1464.61,654.896 1465.17,675.656 1465.73,679.513 1466.29,708.366 1466.85,737.649 1467.41,768.651 1467.97,746.228 1468.52,759.027 1469.08,735.117 1469.64,747.333 1470.2,759.342 1470.76,790.308 1471.32,785.878 1471.88,784.395 1472.44,734.957 1473,747.833 1473.56,758.901 1474.12,739.57 1474.68,733.885 1475.24,729.697 1475.79,748.25 1476.35,742.915 1476.91,707.667 1477.47,708.101 1478.03,676.049 1478.59,674.949 1479.15,645.547 1479.71,648.389 1480.27,631.546 1480.83,635.504 1481.39,651.728 1481.95,685.665 1482.51,669.164 1483.07,685.704 1483.62,684.24 1484.18,668.333 1484.74,673.028 1485.3,670.205 1485.86,703.243 1486.42,683.65 1486.98,715.579 1487.54,697.384 1488.1,680.591 1488.66,697.644 1489.22,666.611 1489.78,613.667 1490.34,617.229 1490.89,622.359 1491.45,643.424 1492.01,675.088 1492.57,677.254 1493.13,645.152 1493.69,646.523 1494.25,663.317 1494.81,646.758 1495.37,685.064 1495.93,685.687 1496.49,702.817 1497.05,735.58 1497.61,734.817 1498.16,700.708 1498.72,716.74 1499.28,699.758 1499.84,682.391 1500.4,666.704 1500.96,665.623 1501.52,650.76 1502.08,668.6 1502.64,717.005 1503.2,668.659 1503.76,686.352 1504.32,684.975 1504.88,682.884 1505.44,734.149 1505.99,717.803 1506.55,697.77 1507.11,697.857 1507.67,714.422 1508.23,743.469 1508.79,720.723 1509.35,721.559 1509.91,721.182 1510.47,719.554 1511.03,684.64 1511.59,687.164 1512.15,719.628 1512.71,748.987 1513.26,748.241 1513.82,728.766 1514.38,723.898 1514.94,724.203 1515.5,706.842 1516.06,709.011 1516.62,690.228 1517.18,668.476 1517.74,673.17 1518.3,656.314 1518.86,673.774 1519.42,663.703 1519.98,635.313 1520.53,686.393 1521.09,669.169 1521.65,683.053 1522.21,686.212 1522.77,670.161 1523.33,623.586 1523.89,645.783 1524.45,631.713 1525.01,633.287 1525.57,638.478 1526.13,642.632 1526.69,643.032 1527.25,656.981 1527.81,623.935 1528.36,627.032 1528.92,648.221 1529.48,648.224 1530.04,647.816 1530.6,633.243 1531.16,631.302 1531.72,635.814 1532.28,639.72 1532.84,643.72 1533.4,694.493 1533.96,708.911 1534.52,708.143 1535.08,670.039 1535.63,671.851 1536.19,707.299 1536.75,712.682 1537.31,710.25 1537.87,695.214 1538.43,676.772 1538.99,629.488 1539.55,617.181 1540.11,640.472 1540.67,657.836 1541.23,657.528 1541.79,660.907 1542.35,649.598 1542.9,656.075 1543.46,690.339 1544.02,690.151 1544.58,640.017 1545.14,674.69 1545.7,722.486 1546.26,671.273 1546.82,653.797 1547.38,672.331 1547.94,659.109 1548.5,709.027 1549.06,660.301 1549.62,722.728 1550.18,690.232 1550.73,687.561 1551.29,703.89 1551.85,702.824 1552.41,637.116 1552.97,643.728 1553.53,646.043 1554.09,649.997 1554.65,634.135 1555.21,652.754 1555.77,653.619 1556.33,671.304 1556.89,722.151 1557.45,735.07 1558,749.007 1558.56,745.553 1559.12,740.529 1559.68,753.661 1560.24,737.703 1560.8,717.634 1561.36,764.539 1561.92,742.746 1562.48,725.337 1563.04,709.175 1563.6,727.034 1564.16,746.144 1564.72,758.992 1565.28,771.524 1565.83,784.439 1566.39,794.373 1566.95,772.167 1567.51,769.027 1568.07,728.055 1568.63,744.399 1569.19,757.246 1569.75,771.939 1570.31,785.935 1570.87,810.558 1571.43,820.53 1571.99,796.869 1572.55,774.707 1573.1,755.422 1573.66,747.964 1574.22,757.983 1574.78,754.278 1575.34,734.05 1575.9,731.215 1576.46,712.847 1577.02,680.732 1577.58,712.539 1578.14,731.436 1578.7,728.316 1579.26,758.651 1579.82,753.53 1580.37,765.391 1580.93,759.891 1581.49,703.37 1582.05,684.181 1582.61,680.203 1583.17,679.439 1583.73,659.951 1584.29,659.559 1584.85,644.132 1585.41,693.979 1585.97,694.008 1586.53,706.745 1587.09,704.377 1587.65,717.39 1588.2,680.166 1588.76,680.568 1589.32,685.48 1589.88,716.813 1590.44,746.338 1591,773.647 1591.56,785.206 1592.12,734.009 1592.68,735.157 1593.24,734.68 1593.8,732.413 1594.36,730.949 1594.92,697.874 1595.47,728.028 1596.03,710.936 1596.59,722.224 1597.15,722.153 1597.71,734.03 1598.27,699.235 1598.83,682.548 1599.39,652.448 1599.95,620.163 1600.51,619.847 1601.07,641.76 1601.63,640.768 1602.19,641.874 1602.74,655.497 1603.3,669.866 1603.86,670.607 1604.42,655.944 1604.98,659.073 1605.54,660.001 1606.1,625.395 1606.66,597.954 1607.22,589.52 1607.78,593.519 1608.34,566.019 1608.9,588.775 1609.46,579.71 1610.02,568.951 1610.57,586.232 1611.13,609.382 1611.69,615.405 1612.25,618.964 1612.81,605.331 1613.37,640.521 1613.93,627.744 1614.49,665.722 1615.05,683.683 1615.61,663.769 1616.17,680.656 1616.73,710.317 1617.29,723.292 1617.84,719.171 1618.4,715.414 1618.96,699.783 1619.52,635.488 1620.08,621.545 1620.64,610.238 1621.2,630.859 1621.76,656.928 1622.32,669.865 1622.88,668.271 1623.44,650.193 1624,670.471 1624.56,670.529 1625.11,637.447 1625.67,623.478 1626.23,626.108 1626.79,611.658 1627.35,615.911 1627.91,605.631 1628.47,561.582 1629.03,616.035 1629.59,666.388 1630.15,696.725 1630.71,696.037 1631.27,710.907 1631.83,708.217 1632.39,692.054 1632.94,696.007 1633.5,662.413 1634.06,661.438 1634.62,664.131 1635.18,631.237 1635.74,647.814 1636.3,651.119 1636.86,651.386 1637.42,634.562 1637.98,621.918 1638.54,610.127 1639.1,628.739 1639.66,649.11 1640.21,632.113 1640.77,621.409 1641.33,641.9 1641.89,678.307 1642.45,723.804 1643.01,715.015 1643.57,710.603 1644.13,692.514 1644.69,675.315 1645.25,686.82 1645.81,670.927 1646.37,704.461 1646.93,735.251 1647.48,766.485 1648.04,745.319 1648.6,742.507 1649.16,706.727 1649.72,689.131 1650.28,675.55 1650.84,631.051 1651.4,618.34 1651.96,639.153 1652.52,623.871 1653.08,643.685 1653.64,646.385 1654.2,651.543 1654.76,670.963 1655.31,718.585 1655.87,666.805 1656.43,635.722 1656.99,620.813 1657.55,605.711 1658.11,644.27 1658.67,664.163 1659.23,664.482 1659.79,682.219 1660.35,666.434 1660.91,703.7 1661.47,718.204 1662.03,734.676 1662.58,697.701 1663.14,678.717 1663.7,693.072 1664.26,711.483 1664.82,724.765 1665.38,737.289 1665.94,786.558 1666.5,764.836 1667.06,762.205 1667.62,791.513 1668.18,784.959 1668.74,781.334 1669.3,807.683 1669.85,784.225 1670.41,778.798 1670.97,773.869 1671.53,787.454 1672.09,785.147 1672.65,746.241 1673.21,727.026 1673.77,707.081 1674.33,724.015 1674.89,720.466 1675.45,707.017 1676.01,707.03 1676.57,705.266 1677.13,687.876 1677.68,670.651 1678.24,604.93 1678.8,593.776 1679.36,581.517 1679.92,587.012 1680.48,561.63 1681.04,600.863 1681.6,602.86 1682.16,605.539 1682.72,645.417 1683.28,684.017 1683.84,703.761 1684.4,699.678 1684.95,717.067 1685.51,713.029 1686.07,694.325 1686.63,679.907 1687.19,664.406 1687.75,698.652 1688.31,717.619 1688.87,697.454 1689.43,695.406 1689.99,680.338 1690.55,682.13 1691.11,682.104 1691.67,683.47 1692.23,683.418 1692.78,720.112 1693.34,732.858 1693.9,712.755 1694.46,711.059 1695.02,697.813 1695.58,666.731 1696.14,667.705 1696.7,668.528 1697.26,687.585 1697.82,688.912 1698.38,670.854 1698.94,720.555 1699.5,732.809 1700.05,747.024 1700.61,727.422 1701.17,740.782 1701.73,765.33 1702.29,774.642 1702.85,755.669 1703.41,782.409 1703.97,775.457 1704.53,773.147 1705.09,713.355 1705.65,710.763 1706.21,658.376 1706.77,660.099 1707.32,675.9 1707.88,658.513 1708.44,661.404 1709,663.43 1709.56,645.19 1710.12,632.116 1710.68,615.214 1711.24,619.437 1711.8,622.604 1712.36,621.864 1712.92,592.141 1713.48,580.968 1714.04,666.653 1714.6,668.078 1715.15,687.528 1715.71,687.643 1716.27,701.708 1716.83,729.526 1717.39,729.117 1717.95,726.058 1718.51,675.578 1719.07,679.324 1719.63,677.638 1720.19,663.745 1720.75,650.421 1721.31,637.594 1721.87,627.394 1722.42,680.007 1722.98,682.723 1723.54,650.515 1724.1,667.88 1724.66,654.697 1725.22,692.541 1725.78,676.894 1726.34,677.802 1726.9,699.18 1727.46,678.919 1728.02,680.76 1728.58,649.24 1729.14,666.576 1729.69,700.808 1730.25,669.204 1730.81,668.58 1731.37,669.783 1731.93,688.527 1732.49,688.618 1733.05,653.054 1733.61,634.335 1734.17,637.491 1734.73,633.411 1735.29,652.824 1735.85,657.029 1736.41,608.632 1736.97,614.829 1737.52,587.692 1738.08,607.03 1738.64,628.654 1739.2,629.533 1739.76,680.76 1740.32,679.237 1740.88,682.764 1741.44,665.173 1742,682.279 1742.56,729.936 1743.12,728.845 1743.68,726.169 1744.24,723.25 1744.79,752.448 1745.35,732.006 1745.91,716.336 1746.47,695.175 1747.03,693.105 1747.59,677.829 1748.15,648.03 1748.71,634.88 1749.27,636.584 1749.83,653.734 1750.39,668.025 1750.95,652.383 1751.51,620.449 1752.06,610.979 1752.62,619.485 1753.18,609.155 1753.74,630.973 1754.3,648.815 1754.86,650.229 1755.42,649.235 1755.98,632.496 1756.54,603.596 1757.1,591.732 1757.66,597.21 1758.22,601.817 1758.78,604.155 1759.34,608.301 1759.89,666.08 1760.45,665.415 1761.01,732.779 1761.57,745.434 1762.13,726.457 1762.69,720.861 1763.25,732.682 1763.81,699.347 1764.37,649.743 1764.93,667.199 1765.49,666.329 1766.05,697.245 1766.61,679.36 1767.16,728.875 1767.72,744.217 1768.28,758.785 1768.84,769.008 1769.4,750.171 1769.96,795.986 1770.52,759.826 1771.08,750.432 1771.64,747.526 1772.2,727.466 1772.76,709.807 1773.32,706.281 1773.88,717.29 1774.43,733.947 1774.99,713.218 1775.55,710.301 1776.11,710.62 1776.67,690.39 1777.23,709.105 1777.79,708.426 1778.35,705.071 1778.91,720.088 1779.47,721.339 1780.03,717.03 1780.59,666.666 1781.15,684.338 1781.71,684.433 1782.26,684.252 1782.82,639.541 1783.38,644.873 1783.94,613.83 1784.5,649.256 1785.06,647.324 1785.62,620.308 1786.18,638.513 1786.74,580.806 1787.3,570.139 1787.86,526.48 1788.42,536.872 1788.98,546.652 1789.53,572.956 1790.09,565.092 1790.65,551.856 1791.21,575.794 1791.77,579.587 1792.33,570.965 1792.89,558.952 1793.45,601.798 1794.01,619.642 1794.57,622.219 1795.13,642.337 1795.69,646.552 1796.25,651.084 1796.8,671.18 1797.36,687.793 1797.92,686.784 1798.48,684.381 1799.04,702.111 1799.6,718.732 1800.16,699.953 1800.72,701.096 1801.28,730.535 1801.84,724.83 1802.4,739.571 1802.96,706.006 1803.52,672.279 1804.08,675.158 1804.63,707.975 1805.19,722.467 1805.75,723.035 1806.31,737.499 1806.87,732.521 1807.43,747.46 1807.99,792.341 1808.55,786.27 1809.11,780.866 1809.67,762.502 1810.23,757.693 1810.79,756.008 1811.35,753.938 1811.9,747.881 1812.46,779.107 1813.02,772.107 1813.58,786.855 1814.14,750.904 1814.7,765.096 1815.26,777.828 1815.82,771.236 1816.38,766.449 1816.94,762.053 1817.5,759.047 1818.06,771.38 1818.62,767.185 1819.18,764.163 1819.73,774.899 1820.29,736.913 1820.85,703.846 1821.41,700.532 1821.97,631.54 1822.53,600.21 1823.09,605.388 1823.65,592.839 1824.21,581.935 1824.77,571.197 1825.33,545.225 1825.89,571.768 1826.45,577.104 1827,582.504 1827.56,604.952 1828.12,643.935 1828.68,665.87 1829.24,652.661 1829.8,655.503 1830.36,643.083 1830.92,692.295 1831.48,645.054 1832.04,660.985 1832.6,663.285 1833.16,728.375 1833.72,724.566 1834.27,709.358 1834.83,706.859 1835.39,685.473 1835.95,688.738 1836.51,689.422 1837.07,675.888 1837.63,661.365 1838.19,674.551 \"/>\n<path clip-path=\"url(#clip523)\" d=\"M720.247 689.981 L720.806 689.981 L721.365 689.981 L721.924 689.981 L722.484 689.981 L723.043 689.981 L723.602 689.981 L724.161 689.981 L724.721 689.981 L725.28 689.981 L725.839 689.981 L726.398 689.981 L726.958 689.981 L727.517 689.981 L728.076 689.981 L728.635 689.981 L729.195 689.981 L729.754 689.981 L730.313 689.981 L730.872 689.981 L731.432 689.981 L731.991 689.981 L732.55 689.981 L733.109 689.981 L733.669 689.981 L734.228 689.981 L734.787 689.981 L735.346 689.981 L735.906 689.981 L736.465 689.981 L737.024 689.981 L737.583 689.981 L738.143 689.981 L738.702 689.981 L739.261 689.981 L739.82 689.981 L740.38 689.981 L740.939 689.981 L741.498 689.981 L742.057 689.981 L742.617 689.981 L743.176 689.981 L743.735 689.981 L744.294 689.981 L744.854 689.981 L745.413 689.981 L745.972 689.981 L746.531 689.981 L747.091 689.981 L747.65 689.981 L748.209 689.981 L748.768 689.981 L749.328 689.981 L749.887 689.981 L750.446 689.981 L751.005 689.981 L751.565 689.981 L752.124 689.981 L752.683 689.981 L753.242 689.981 L753.802 689.981 L754.361 689.981 L754.92 689.981 L755.479 689.981 L756.039 689.981 L756.598 689.981 L757.157 689.981 L757.716 689.981 L758.276 689.981 L758.835 689.981 L759.394 689.981 L759.953 689.981 L760.513 689.981 L761.072 689.981 L761.631 689.981 L762.19 689.981 L762.75 689.981 L763.309 689.981 L763.868 689.981 L764.427 689.981 L764.987 689.981 L765.546 689.981 L766.105 689.981 L766.664 689.981 L767.224 689.981 L767.783 689.981 L768.342 689.981 L768.901 689.981 L769.461 689.981 L770.02 689.981 L770.579 689.981 L771.138 689.981 L771.698 689.981 L772.257 689.981 L772.816 689.981 L773.375 689.981 L773.935 689.981 L774.494 689.981 L775.053 689.981 L775.612 689.981 L776.172 689.981 L776.731 689.981 L777.29 689.981 L777.849 689.981 L778.409 689.981 L778.968 689.981 L779.527 689.981 L780.086 689.981 L780.646 689.981 L781.205 689.981 L781.764 689.981 L782.323 689.981 L782.883 689.981 L783.442 689.981 L784.001 689.981 L784.56 689.981 L785.12 689.981 L785.679 689.981 L786.238 689.981 L786.797 689.981 L787.357 689.981 L787.916 689.981 L788.475 689.981 L789.034 689.981 L789.594 689.981 L790.153 689.981 L790.712 689.981 L791.271 689.981 L791.831 689.981 L792.39 689.981 L792.949 689.981 L793.508 689.981 L794.068 689.981 L794.627 689.981 L795.186 689.981 L795.745 689.981 L796.305 689.981 L796.864 689.981 L797.423 689.981 L797.982 689.981 L798.542 689.981 L799.101 689.981 L799.66 689.981 L800.219 689.981 L800.779 689.981 L801.338 689.981 L801.897 689.981 L802.456 689.981 L803.016 689.981 L803.575 689.981 L804.134 689.981 L804.693 689.981 L805.253 689.981 L805.812 689.981 L806.371 689.981 L806.931 689.981 L807.49 689.981 L808.049 689.981 L808.608 689.981 L809.168 689.981 L809.727 689.981 L810.286 689.981 L810.845 689.981 L811.405 689.981 L811.964 689.981 L812.523 689.981 L813.082 689.981 L813.642 689.981 L814.201 689.981 L814.76 689.981 L815.319 689.981 L815.879 689.981 L816.438 689.981 L816.997 689.981 L817.556 689.981 L818.116 689.981 L818.675 689.981 L819.234 689.981 L819.793 689.981 L820.353 689.981 L820.912 689.981 L821.471 689.981 L822.03 689.981 L822.59 689.981 L823.149 689.981 L823.708 689.981 L824.267 689.981 L824.827 689.981 L825.386 689.981 L825.945 689.981 L826.504 689.981 L827.064 689.981 L827.623 689.981 L828.182 689.981 L828.741 689.981 L829.301 689.981 L829.86 689.981 L830.419 689.981 L830.978 689.981 L831.538 689.981 L832.097 689.981 L832.656 689.981 L833.215 689.981 L833.775 689.981 L834.334 689.981 L834.893 689.981 L835.452 689.981 L836.012 689.981 L836.571 689.981 L837.13 689.981 L837.689 689.981 L838.249 689.981 L838.808 689.981 L839.367 689.981 L839.926 689.981 L840.486 689.981 L841.045 689.981 L841.604 689.981 L842.163 689.981 L842.723 689.981 L843.282 689.981 L843.841 689.981 L844.4 689.981 L844.96 689.981 L845.519 689.981 L846.078 689.981 L846.637 689.981 L847.197 689.981 L847.756 689.981 L848.315 689.981 L848.874 689.981 L849.434 689.981 L849.993 689.981 L850.552 689.981 L851.111 689.981 L851.671 689.981 L852.23 689.981 L852.789 689.981 L853.348 689.981 L853.908 689.981 L854.467 689.981 L855.026 689.981 L855.585 689.981 L856.145 689.981 L856.704 689.981 L857.263 689.981 L857.822 689.981 L858.382 689.981 L858.941 689.981 L859.5 689.981 L860.059 689.981 L860.619 689.981 L861.178 689.981 L861.737 689.981 L862.296 689.981 L862.856 689.981 L863.415 689.981 L863.974 689.981 L864.533 689.981 L865.093 689.981 L865.652 689.981 L866.211 689.981 L866.77 689.981 L867.33 689.981 L867.889 689.981 L868.448 689.981 L869.007 689.981 L869.567 689.981 L870.126 689.981 L870.685 689.981 L871.244 689.981 L871.804 689.981 L872.363 689.981 L872.922 689.981 L873.481 689.981 L874.041 689.981 L874.6 689.981 L875.159 689.981 L875.718 689.981 L876.278 689.981 L876.837 689.981 L877.396 689.981 L877.955 689.981 L878.515 689.981 L879.074 689.981 L879.633 689.981 L880.192 689.981 L880.752 689.981 L881.311 689.981 L881.87 689.981 L882.429 689.981 L882.989 689.981 L883.548 689.981 L884.107 689.981 L884.666 689.981 L885.226 689.981 L885.785 689.981 L886.344 689.981 L886.903 689.981 L887.463 689.981 L888.022 689.981 L888.581 689.981 L889.14 689.981 L889.7 689.981 L890.259 689.981 L890.818 689.981 L891.377 689.981 L891.937 689.981 L892.496 689.981 L893.055 689.981 L893.614 689.981 L894.174 689.981 L894.733 689.981 L895.292 689.981 L895.851 689.981 L896.411 689.981 L896.97 689.981 L897.529 689.981 L898.088 689.981 L898.648 689.981 L899.207 689.981 L899.766 689.981 L900.325 689.981 L900.885 689.981 L901.444 689.981 L902.003 689.981 L902.562 689.981 L903.122 689.981 L903.681 689.981 L904.24 689.981 L904.799 689.981 L905.359 689.981 L905.918 689.981 L906.477 689.981 L907.036 689.981 L907.596 689.981 L908.155 689.981 L908.714 689.981 L909.273 689.981 L909.833 689.981 L910.392 689.981 L910.951 689.981 L911.51 689.981 L912.07 689.981 L912.629 689.981 L913.188 689.981 L913.747 689.981 L914.307 689.981 L914.866 689.981 L915.425 689.981 L915.984 689.981 L916.544 689.981 L917.103 689.981 L917.662 689.981 L918.221 689.981 L918.781 689.981 L919.34 689.981 L919.899 689.981 L920.458 689.981 L921.018 689.981 L921.577 689.981 L922.136 689.981 L922.695 689.981 L923.255 689.981 L923.814 689.981 L924.373 689.981 L924.932 689.981 L925.492 689.981 L926.051 689.981 L926.61 689.981 L927.169 689.981 L927.729 689.981 L928.288 689.981 L928.847 689.981 L929.406 689.981 L929.966 689.981 L930.525 689.981 L931.084 689.981 L931.644 689.981 L932.203 689.981 L932.762 689.981 L933.321 689.981 L933.881 689.981 L934.44 689.981 L934.999 689.981 L935.558 689.981 L936.118 689.981 L936.677 689.981 L937.236 689.981 L937.795 689.981 L938.355 689.981 L938.914 689.981 L939.473 689.981 L940.032 689.981 L940.592 689.981 L941.151 689.981 L941.71 689.981 L942.269 689.981 L942.829 689.981 L943.388 689.981 L943.947 689.981 L944.506 689.981 L945.066 689.981 L945.625 689.981 L946.184 689.981 L946.743 689.981 L947.303 689.981 L947.862 689.981 L948.421 689.981 L948.98 689.981 L949.54 689.981 L950.099 689.981 L950.658 689.981 L951.217 689.981 L951.777 689.981 L952.336 689.981 L952.895 689.981 L953.454 689.981 L954.014 689.981 L954.573 689.981 L955.132 689.981 L955.691 689.981 L956.251 689.981 L956.81 689.981 L957.369 689.981 L957.928 689.981 L958.488 689.981 L959.047 689.981 L959.606 689.981 L960.165 689.981 L960.725 689.981 L961.284 689.981 L961.843 689.981 L962.402 689.981 L962.962 689.981 L963.521 689.981 L964.08 689.981 L964.639 689.981 L965.199 689.981 L965.758 689.981 L966.317 689.981 L966.876 689.981 L967.436 689.981 L967.995 689.981 L968.554 689.981 L969.113 689.981 L969.673 689.981 L970.232 689.981 L970.791 689.981 L971.35 689.981 L971.91 689.981 L972.469 689.981 L973.028 689.981 L973.587 689.981 L974.147 689.981 L974.706 689.981 L975.265 689.981 L975.824 689.981 L976.384 689.981 L976.943 689.981 L977.502 689.981 L978.061 689.981 L978.621 689.981 L979.18 689.981 L979.739 689.981 L980.298 689.981 L980.858 689.981 L981.417 689.981 L981.976 689.981 L982.535 689.981 L983.095 689.981 L983.654 689.981 L984.213 689.981 L984.772 689.981 L985.332 689.981 L985.891 689.981 L986.45 689.981 L987.009 689.981 L987.569 689.981 L988.128 689.981 L988.687 689.981 L989.246 689.981 L989.806 689.981 L990.365 689.981 L990.924 689.981 L991.483 689.981 L992.043 689.981 L992.602 689.981 L993.161 689.981 L993.72 689.981 L994.28 689.981 L994.839 689.981 L995.398 689.981 L995.957 689.981 L996.517 689.981 L997.076 689.981 L997.635 689.981 L998.194 689.981 L998.754 689.981 L999.313 689.981 L999.872 689.981 L1000.43 689.981 L1000.99 689.981 L1001.55 689.981 L1002.11 689.981 L1002.67 689.981 L1003.23 689.981 L1003.79 689.981 L1004.35 689.981 L1004.91 689.981 L1005.46 689.981 L1006.02 689.981 L1006.58 689.981 L1007.14 689.981 L1007.7 689.981 L1008.26 689.981 L1008.82 689.981 L1009.38 689.981 L1009.94 689.981 L1010.5 689.981 L1011.06 689.981 L1011.62 689.981 L1012.18 689.981 L1012.73 689.981 L1013.29 689.981 L1013.85 689.981 L1014.41 689.981 L1014.97 689.981 L1015.53 689.981 L1016.09 689.981 L1016.65 689.981 L1017.21 689.981 L1017.77 689.981 L1018.33 689.981 L1018.89 689.981 L1019.45 689.981 L1020.01 689.981 L1020.56 689.981 L1021.12 689.981 L1021.68 689.981 L1022.24 689.981 L1022.8 689.981 L1023.36 689.981 L1023.92 689.981 L1024.48 689.981 L1025.04 689.981 L1025.6 689.981 L1026.16 689.981 L1026.72 689.981 L1027.28 689.981 L1027.83 689.981 L1028.39 689.981 L1028.95 689.981 L1029.51 689.981 L1030.07 689.981 L1030.63 689.981 L1031.19 689.981 L1031.75 689.981 L1032.31 689.981 L1032.87 689.981 L1033.43 689.981 L1033.99 689.981 L1034.55 689.981 L1035.1 689.981 L1035.66 689.981 L1036.22 689.981 L1036.78 689.981 L1037.34 689.981 L1037.9 689.981 L1038.46 689.981 L1039.02 689.981 L1039.58 689.981 L1040.14 689.981 L1040.7 689.981 L1041.26 689.981 L1041.82 689.981 L1042.38 689.981 L1042.93 689.981 L1043.49 689.981 L1044.05 689.981 L1044.61 689.981 L1045.17 689.981 L1045.73 689.981 L1046.29 689.981 L1046.85 689.981 L1047.41 689.981 L1047.97 689.981 L1048.53 689.981 L1049.09 689.981 L1049.65 689.981 L1050.2 689.981 L1050.76 689.981 L1051.32 689.981 L1051.88 689.981 L1052.44 689.981 L1053 689.981 L1053.56 689.981 L1054.12 689.981 L1054.68 689.981 L1055.24 689.981 L1055.8 689.981 L1056.36 689.981 L1056.92 689.981 L1057.48 689.981 L1058.03 689.981 L1058.59 689.981 L1059.15 689.981 L1059.71 689.981 L1060.27 689.981 L1060.83 689.981 L1061.39 689.981 L1061.95 689.981 L1062.51 689.981 L1063.07 689.981 L1063.63 689.981 L1064.19 689.981 L1064.75 689.981 L1065.3 689.981 L1065.86 689.981 L1066.42 689.981 L1066.98 689.981 L1067.54 689.981 L1068.1 689.981 L1068.66 689.981 L1069.22 689.981 L1069.78 689.981 L1070.34 689.981 L1070.9 689.981 L1071.46 689.981 L1072.02 689.981 L1072.57 689.981 L1073.13 689.981 L1073.69 689.981 L1074.25 689.981 L1074.81 689.981 L1075.37 689.981 L1075.93 689.981 L1076.49 689.981 L1077.05 689.981 L1077.61 689.981 L1078.17 689.981 L1078.73 689.981 L1079.29 689.981 L1079.85 689.981 L1080.4 689.981 L1080.96 689.981 L1081.52 689.981 L1082.08 689.981 L1082.64 689.981 L1083.2 689.981 L1083.76 689.981 L1084.32 689.981 L1084.88 689.981 L1085.44 689.981 L1086 689.981 L1086.56 689.981 L1087.12 689.981 L1087.67 689.981 L1088.23 689.981 L1088.79 689.981 L1089.35 689.981 L1089.91 689.981 L1090.47 689.981 L1091.03 689.981 L1091.59 689.981 L1092.15 689.981 L1092.71 689.981 L1093.27 689.981 L1093.83 689.981 L1094.39 689.981 L1094.94 689.981 L1095.5 689.981 L1096.06 689.981 L1096.62 689.981 L1097.18 689.981 L1097.74 689.981 L1098.3 689.981 L1098.86 689.981 L1099.42 689.981 L1099.98 689.981 L1100.54 689.981 L1101.1 689.981 L1101.66 689.981 L1102.22 689.981 L1102.77 689.981 L1103.33 689.981 L1103.89 689.981 L1104.45 689.981 L1105.01 689.981 L1105.57 689.981 L1106.13 689.981 L1106.69 689.981 L1107.25 689.981 L1107.81 689.981 L1108.37 689.981 L1108.93 689.981 L1109.49 689.981 L1110.04 689.981 L1110.6 689.981 L1111.16 689.981 L1111.72 689.981 L1112.28 689.981 L1112.84 689.981 L1113.4 689.981 L1113.96 689.981 L1114.52 689.981 L1115.08 689.981 L1115.64 689.981 L1116.2 689.981 L1116.76 689.981 L1117.31 689.981 L1117.87 689.981 L1118.43 689.981 L1118.99 689.981 L1119.55 689.981 L1120.11 689.981 L1120.67 689.981 L1121.23 689.981 L1121.79 689.981 L1122.35 689.981 L1122.91 689.981 L1123.47 689.981 L1124.03 689.981 L1124.59 689.981 L1125.14 689.981 L1125.7 689.981 L1126.26 689.981 L1126.82 689.981 L1127.38 689.981 L1127.94 689.981 L1128.5 689.981 L1129.06 689.981 L1129.62 689.981 L1130.18 689.981 L1130.74 689.981 L1131.3 689.981 L1131.86 689.981 L1132.41 689.981 L1132.97 689.981 L1133.53 689.981 L1134.09 689.981 L1134.65 689.981 L1135.21 689.981 L1135.77 689.981 L1136.33 689.981 L1136.89 689.981 L1137.45 689.981 L1138.01 689.981 L1138.57 689.981 L1139.13 689.981 L1139.68 689.981 L1140.24 689.981 L1140.8 689.981 L1141.36 689.981 L1141.92 689.981 L1142.48 689.981 L1143.04 689.981 L1143.6 689.981 L1144.16 689.981 L1144.72 689.981 L1145.28 689.981 L1145.84 689.981 L1146.4 689.981 L1146.96 689.981 L1147.51 689.981 L1148.07 689.981 L1148.63 689.981 L1149.19 689.981 L1149.75 689.981 L1150.31 689.981 L1150.87 689.981 L1151.43 689.981 L1151.99 689.981 L1152.55 689.981 L1153.11 689.981 L1153.67 689.981 L1154.23 689.981 L1154.78 689.981 L1155.34 689.981 L1155.9 689.981 L1156.46 689.981 L1157.02 689.981 L1157.58 689.981 L1158.14 689.981 L1158.7 689.981 L1159.26 689.981 L1159.82 689.981 L1160.38 689.981 L1160.94 689.981 L1161.5 689.981 L1162.05 689.981 L1162.61 689.981 L1163.17 689.981 L1163.73 689.981 L1164.29 689.981 L1164.85 689.981 L1165.41 689.981 L1165.97 689.981 L1166.53 689.981 L1167.09 689.981 L1167.65 689.981 L1168.21 689.981 L1168.77 689.981 L1169.33 689.981 L1169.88 689.981 L1170.44 689.981 L1171 689.981 L1171.56 689.981 L1172.12 689.981 L1172.68 689.981 L1173.24 689.981 L1173.8 689.981 L1174.36 689.981 L1174.92 689.981 L1175.48 689.981 L1176.04 689.981 L1176.6 689.981 L1177.15 689.981 L1177.71 689.981 L1178.27 689.981 L1178.83 689.981 L1179.39 689.981 L1179.95 689.981 L1180.51 689.981 L1181.07 689.981 L1181.63 689.981 L1182.19 689.981 L1182.75 689.981 L1183.31 689.981 L1183.87 689.981 L1184.43 689.981 L1184.98 689.981 L1185.54 689.981 L1186.1 689.981 L1186.66 689.981 L1187.22 689.981 L1187.78 689.981 L1188.34 689.981 L1188.9 689.981 L1189.46 689.981 L1190.02 689.981 L1190.58 689.981 L1191.14 689.981 L1191.7 689.981 L1192.25 689.981 L1192.81 689.981 L1193.37 689.981 L1193.93 689.981 L1194.49 689.981 L1195.05 689.981 L1195.61 689.981 L1196.17 689.981 L1196.73 689.981 L1197.29 689.981 L1197.85 689.981 L1198.41 689.981 L1198.97 689.981 L1199.52 689.981 L1200.08 689.981 L1200.64 689.981 L1201.2 689.981 L1201.76 689.981 L1202.32 689.981 L1202.88 689.981 L1203.44 689.981 L1204 689.981 L1204.56 689.981 L1205.12 689.981 L1205.68 689.981 L1206.24 689.981 L1206.8 689.981 L1207.35 689.981 L1207.91 689.981 L1208.47 689.981 L1209.03 689.981 L1209.59 689.981 L1210.15 689.981 L1210.71 689.981 L1211.27 689.981 L1211.83 689.981 L1212.39 689.981 L1212.95 689.981 L1213.51 689.981 L1214.07 689.981 L1214.62 689.981 L1215.18 689.981 L1215.74 689.981 L1216.3 689.981 L1216.86 689.981 L1217.42 689.981 L1217.98 689.981 L1218.54 689.981 L1219.1 689.981 L1219.66 689.981 L1220.22 689.981 L1220.78 689.981 L1221.34 689.981 L1221.89 689.981 L1222.45 689.981 L1223.01 689.981 L1223.57 689.981 L1224.13 689.981 L1224.69 689.981 L1225.25 689.981 L1225.81 689.981 L1226.37 689.981 L1226.93 689.981 L1227.49 689.981 L1228.05 689.981 L1228.61 689.981 L1229.17 689.981 L1229.72 689.981 L1230.28 689.981 L1230.84 689.981 L1231.4 689.981 L1231.96 689.981 L1232.52 689.981 L1233.08 689.981 L1233.64 689.981 L1234.2 689.981 L1234.76 689.981 L1235.32 689.981 L1235.88 689.981 L1236.44 689.981 L1236.99 689.981 L1237.55 689.981 L1238.11 689.981 L1238.67 689.981 L1239.23 689.981 L1239.79 689.981 L1240.35 689.981 L1240.91 689.981 L1241.47 689.981 L1242.03 689.981 L1242.59 689.981 L1243.15 689.981 L1243.71 689.981 L1244.26 689.981 L1244.82 689.981 L1245.38 689.981 L1245.94 689.981 L1246.5 689.981 L1247.06 689.981 L1247.62 689.981 L1248.18 689.981 L1248.74 689.981 L1249.3 689.981 L1249.86 689.981 L1250.42 689.981 L1250.98 689.981 L1251.54 689.981 L1252.09 689.981 L1252.65 689.981 L1253.21 689.981 L1253.77 689.981 L1254.33 689.981 L1254.89 689.981 L1255.45 689.981 L1256.01 689.981 L1256.57 689.981 L1257.13 689.981 L1257.69 689.981 L1258.25 689.981 L1258.81 689.981 L1259.36 689.981 L1259.92 689.981 L1260.48 689.981 L1261.04 689.981 L1261.6 689.981 L1262.16 689.981 L1262.72 689.981 L1263.28 689.981 L1263.84 689.981 L1264.4 689.981 L1264.96 689.981 L1265.52 689.981 L1266.08 689.981 L1266.63 689.981 L1267.19 689.981 L1267.75 689.981 L1268.31 689.981 L1268.87 689.981 L1269.43 689.981 L1269.99 689.981 L1270.55 689.981 L1271.11 689.981 L1271.67 689.981 L1272.23 689.981 L1272.79 689.981 L1273.35 689.981 L1273.91 689.981 L1274.46 689.981 L1275.02 689.981 L1275.58 689.981 L1276.14 689.981 L1276.7 689.981 L1277.26 689.981 L1277.82 689.981 L1278.38 689.981 L1278.94 689.981 L1279.5 689.981 L1280.06 689.981 L1280.62 689.981 L1281.18 689.981 L1281.73 689.981 L1282.29 689.981 L1282.85 689.981 L1283.41 689.981 L1283.97 689.981 L1284.53 689.981 L1285.09 689.981 L1285.65 689.981 L1286.21 689.981 L1286.77 689.981 L1287.33 689.981 L1287.89 689.981 L1288.45 689.981 L1289 689.981 L1289.56 689.981 L1290.12 689.981 L1290.68 689.981 L1291.24 689.981 L1291.8 689.981 L1292.36 689.981 L1292.92 689.981 L1293.48 689.981 L1294.04 689.981 L1294.6 689.981 L1295.16 689.981 L1295.72 689.981 L1296.28 689.981 L1296.83 689.981 L1297.39 689.981 L1297.95 689.981 L1298.51 689.981 L1299.07 689.981 L1299.63 689.981 L1300.19 689.981 L1300.75 689.981 L1301.31 689.981 L1301.87 689.981 L1302.43 689.981 L1302.99 689.981 L1303.55 689.981 L1304.1 689.981 L1304.66 689.981 L1305.22 689.981 L1305.78 689.981 L1306.34 689.981 L1306.9 689.981 L1307.46 689.981 L1308.02 689.981 L1308.58 689.981 L1309.14 689.981 L1309.7 689.981 L1310.26 689.981 L1310.82 689.981 L1311.38 689.981 L1311.93 689.981 L1312.49 689.981 L1313.05 689.981 L1313.61 689.981 L1314.17 689.981 L1314.73 689.981 L1315.29 689.981 L1315.85 689.981 L1316.41 689.981 L1316.97 689.981 L1317.53 689.981 L1318.09 689.981 L1318.65 689.981 L1319.2 689.981 L1319.76 689.981 L1320.32 689.981 L1320.88 689.981 L1321.44 689.981 L1322 689.981 L1322.56 689.981 L1323.12 689.981 L1323.68 689.981 L1324.24 689.981 L1324.8 689.981 L1325.36 689.981 L1325.92 689.981 L1326.47 689.981 L1327.03 689.981 L1327.59 689.981 L1328.15 689.981 L1328.71 689.981 L1329.27 689.981 L1329.83 689.981 L1330.39 689.981 L1330.95 689.981 L1331.51 689.981 L1332.07 689.981 L1332.63 689.981 L1333.19 689.981 L1333.75 689.981 L1334.3 689.981 L1334.86 689.981 L1335.42 689.981 L1335.98 689.981 L1336.54 689.981 L1337.1 689.981 L1337.66 689.981 L1338.22 689.981 L1338.78 689.981 L1339.34 689.981 L1339.9 689.981 L1340.46 689.981 L1341.02 689.981 L1341.57 689.981 L1342.13 689.981 L1342.69 689.981 L1343.25 689.981 L1343.81 689.981 L1344.37 689.981 L1344.93 689.981 L1345.49 689.981 L1346.05 689.981 L1346.61 689.981 L1347.17 689.981 L1347.73 689.981 L1348.29 689.981 L1348.84 689.981 L1349.4 689.981 L1349.96 689.981 L1350.52 689.981 L1351.08 689.981 L1351.64 689.981 L1352.2 689.981 L1352.76 689.981 L1353.32 689.981 L1353.88 689.981 L1354.44 689.981 L1355 689.981 L1355.56 689.981 L1356.12 689.981 L1356.67 689.981 L1357.23 689.981 L1357.79 689.981 L1358.35 689.981 L1358.91 689.981 L1359.47 689.981 L1360.03 689.981 L1360.59 689.981 L1361.15 689.981 L1361.71 689.981 L1362.27 689.981 L1362.83 689.981 L1363.39 689.981 L1363.94 689.981 L1364.5 689.981 L1365.06 689.981 L1365.62 689.981 L1366.18 689.981 L1366.74 689.981 L1367.3 689.981 L1367.86 689.981 L1368.42 689.981 L1368.98 689.981 L1369.54 689.981 L1370.1 689.981 L1370.66 689.981 L1371.21 689.981 L1371.77 689.981 L1372.33 689.981 L1372.89 689.981 L1373.45 689.981 L1374.01 689.981 L1374.57 689.981 L1375.13 689.981 L1375.69 689.981 L1376.25 689.981 L1376.81 689.981 L1377.37 689.981 L1377.93 689.981 L1378.49 689.981 L1379.04 689.981 L1379.6 689.981 L1380.16 689.981 L1380.72 689.981 L1381.28 689.981 L1381.84 689.981 L1382.4 689.981 L1382.96 689.981 L1383.52 689.981 L1384.08 689.981 L1384.64 689.981 L1385.2 689.981 L1385.76 689.981 L1386.31 689.981 L1386.87 689.981 L1387.43 689.981 L1387.99 689.981 L1388.55 689.981 L1389.11 689.981 L1389.67 689.981 L1390.23 689.981 L1390.79 689.981 L1391.35 689.981 L1391.91 689.981 L1392.47 689.981 L1393.03 689.981 L1393.58 689.981 L1394.14 689.981 L1394.7 689.981 L1395.26 689.981 L1395.82 689.981 L1396.38 689.981 L1396.94 689.981 L1397.5 689.981 L1398.06 689.981 L1398.62 689.981 L1399.18 689.981 L1399.74 689.981 L1400.3 689.981 L1400.86 689.981 L1401.41 689.981 L1401.97 689.981 L1402.53 689.981 L1403.09 689.981 L1403.65 689.981 L1404.21 689.981 L1404.77 689.981 L1405.33 689.981 L1405.89 689.981 L1406.45 689.981 L1407.01 689.981 L1407.57 689.981 L1408.13 689.981 L1408.68 689.981 L1409.24 689.981 L1409.8 689.981 L1410.36 689.981 L1410.92 689.981 L1411.48 689.981 L1412.04 689.981 L1412.6 689.981 L1413.16 689.981 L1413.72 689.981 L1414.28 689.981 L1414.84 689.981 L1415.4 689.981 L1415.95 689.981 L1416.51 689.981 L1417.07 689.981 L1417.63 689.981 L1418.19 689.981 L1418.75 689.981 L1419.31 689.981 L1419.87 689.981 L1420.43 689.981 L1420.99 689.981 L1421.55 689.981 L1422.11 689.981 L1422.67 689.981 L1423.23 689.981 L1423.78 689.981 L1424.34 689.981 L1424.9 689.981 L1425.46 689.981 L1426.02 689.981 L1426.58 689.981 L1427.14 689.981 L1427.7 689.981 L1428.26 689.981 L1428.82 689.981 L1429.38 689.981 L1429.94 689.981 L1430.5 689.981 L1431.05 689.981 L1431.61 689.981 L1432.17 689.981 L1432.73 689.981 L1433.29 689.981 L1433.85 689.981 L1434.41 689.981 L1434.97 689.981 L1435.53 689.981 L1436.09 689.981 L1436.65 689.981 L1437.21 689.981 L1437.77 689.981 L1438.33 689.981 L1438.88 689.981 L1439.44 689.981 L1440 689.981 L1440.56 689.981 L1441.12 689.981 L1441.68 689.981 L1442.24 689.981 L1442.8 689.981 L1443.36 689.981 L1443.92 689.981 L1444.48 689.981 L1445.04 689.981 L1445.6 689.981 L1446.15 689.981 L1446.71 689.981 L1447.27 689.981 L1447.83 689.981 L1448.39 689.981 L1448.95 689.981 L1449.51 689.981 L1450.07 689.981 L1450.63 689.981 L1451.19 689.981 L1451.75 689.981 L1452.31 689.981 L1452.87 689.981 L1453.42 689.981 L1453.98 689.981 L1454.54 689.981 L1455.1 689.981 L1455.66 689.981 L1456.22 689.981 L1456.78 689.981 L1457.34 689.981 L1457.9 689.981 L1458.46 689.981 L1459.02 689.981 L1459.58 689.981 L1460.14 689.981 L1460.7 689.981 L1461.25 689.981 L1461.81 689.981 L1462.37 689.981 L1462.93 689.981 L1463.49 689.981 L1464.05 689.981 L1464.61 689.981 L1465.17 689.981 L1465.73 689.981 L1466.29 689.981 L1466.85 689.981 L1467.41 689.981 L1467.97 689.981 L1468.52 689.981 L1469.08 689.981 L1469.64 689.981 L1470.2 689.981 L1470.76 689.981 L1471.32 689.981 L1471.88 689.981 L1472.44 689.981 L1473 689.981 L1473.56 689.981 L1474.12 689.981 L1474.68 689.981 L1475.24 689.981 L1475.79 689.981 L1476.35 689.981 L1476.91 689.981 L1477.47 689.981 L1478.03 689.981 L1478.59 689.981 L1479.15 689.981 L1479.71 689.981 L1480.27 689.981 L1480.83 689.981 L1481.39 689.981 L1481.95 689.981 L1482.51 689.981 L1483.07 689.981 L1483.62 689.981 L1484.18 689.981 L1484.74 689.981 L1485.3 689.981 L1485.86 689.981 L1486.42 689.981 L1486.98 689.981 L1487.54 689.981 L1488.1 689.981 L1488.66 689.981 L1489.22 689.981 L1489.78 689.981 L1490.34 689.981 L1490.89 689.981 L1491.45 689.981 L1492.01 689.981 L1492.57 689.981 L1493.13 689.981 L1493.69 689.981 L1494.25 689.981 L1494.81 689.981 L1495.37 689.981 L1495.93 689.981 L1496.49 689.981 L1497.05 689.981 L1497.61 689.981 L1498.16 689.981 L1498.72 689.981 L1499.28 689.981 L1499.84 689.981 L1500.4 689.981 L1500.96 689.981 L1501.52 689.981 L1502.08 689.981 L1502.64 689.981 L1503.2 689.981 L1503.76 689.981 L1504.32 689.981 L1504.88 689.981 L1505.44 689.981 L1505.99 689.981 L1506.55 689.981 L1507.11 689.981 L1507.67 689.981 L1508.23 689.981 L1508.79 689.981 L1509.35 689.981 L1509.91 689.981 L1510.47 689.981 L1511.03 689.981 L1511.59 689.981 L1512.15 689.981 L1512.71 689.981 L1513.26 689.981 L1513.82 689.981 L1514.38 689.981 L1514.94 689.981 L1515.5 689.981 L1516.06 689.981 L1516.62 689.981 L1517.18 689.981 L1517.74 689.981 L1518.3 689.981 L1518.86 689.981 L1519.42 689.981 L1519.98 689.981 L1520.53 689.981 L1521.09 689.981 L1521.65 689.981 L1522.21 689.981 L1522.77 689.981 L1523.33 689.981 L1523.89 689.981 L1524.45 689.981 L1525.01 689.981 L1525.57 689.981 L1526.13 689.981 L1526.69 689.981 L1527.25 689.981 L1527.81 689.981 L1528.36 689.981 L1528.92 689.981 L1529.48 689.981 L1530.04 689.981 L1530.6 689.981 L1531.16 689.981 L1531.72 689.981 L1532.28 689.981 L1532.84 689.981 L1533.4 689.981 L1533.96 689.981 L1534.52 689.981 L1535.08 689.981 L1535.63 689.981 L1536.19 689.981 L1536.75 689.981 L1537.31 689.981 L1537.87 689.981 L1538.43 689.981 L1538.99 689.981 L1539.55 689.981 L1540.11 689.981 L1540.67 689.981 L1541.23 689.981 L1541.79 689.981 L1542.35 689.981 L1542.9 689.981 L1543.46 689.981 L1544.02 689.981 L1544.58 689.981 L1545.14 689.981 L1545.7 689.981 L1546.26 689.981 L1546.82 689.981 L1547.38 689.981 L1547.94 689.981 L1548.5 689.981 L1549.06 689.981 L1549.62 689.981 L1550.18 689.981 L1550.73 689.981 L1551.29 689.981 L1551.85 689.981 L1552.41 689.981 L1552.97 689.981 L1553.53 689.981 L1554.09 689.981 L1554.65 689.981 L1555.21 689.981 L1555.77 689.981 L1556.33 689.981 L1556.89 689.981 L1557.45 689.981 L1558 689.981 L1558.56 689.981 L1559.12 689.981 L1559.68 689.981 L1560.24 689.981 L1560.8 689.981 L1561.36 689.981 L1561.92 689.981 L1562.48 689.981 L1563.04 689.981 L1563.6 689.981 L1564.16 689.981 L1564.72 689.981 L1565.28 689.981 L1565.83 689.981 L1566.39 689.981 L1566.95 689.981 L1567.51 689.981 L1568.07 689.981 L1568.63 689.981 L1569.19 689.981 L1569.75 689.981 L1570.31 689.981 L1570.87 689.981 L1571.43 689.981 L1571.99 689.981 L1572.55 689.981 L1573.1 689.981 L1573.66 689.981 L1574.22 689.981 L1574.78 689.981 L1575.34 689.981 L1575.9 689.981 L1576.46 689.981 L1577.02 689.981 L1577.58 689.981 L1578.14 689.981 L1578.7 689.981 L1579.26 689.981 L1579.82 689.981 L1580.37 689.981 L1580.93 689.981 L1581.49 689.981 L1582.05 689.981 L1582.61 689.981 L1583.17 689.981 L1583.73 689.981 L1584.29 689.981 L1584.85 689.981 L1585.41 689.981 L1585.97 689.981 L1586.53 689.981 L1587.09 689.981 L1587.65 689.981 L1588.2 689.981 L1588.76 689.981 L1589.32 689.981 L1589.88 689.981 L1590.44 689.981 L1591 689.981 L1591.56 689.981 L1592.12 689.981 L1592.68 689.981 L1593.24 689.981 L1593.8 689.981 L1594.36 689.981 L1594.92 689.981 L1595.47 689.981 L1596.03 689.981 L1596.59 689.981 L1597.15 689.981 L1597.71 689.981 L1598.27 689.981 L1598.83 689.981 L1599.39 689.981 L1599.95 689.981 L1600.51 689.981 L1601.07 689.981 L1601.63 689.981 L1602.19 689.981 L1602.74 689.981 L1603.3 689.981 L1603.86 689.981 L1604.42 689.981 L1604.98 689.981 L1605.54 689.981 L1606.1 689.981 L1606.66 689.981 L1607.22 689.981 L1607.78 689.981 L1608.34 689.981 L1608.9 689.981 L1609.46 689.981 L1610.02 689.981 L1610.57 689.981 L1611.13 689.981 L1611.69 689.981 L1612.25 689.981 L1612.81 689.981 L1613.37 689.981 L1613.93 689.981 L1614.49 689.981 L1615.05 689.981 L1615.61 689.981 L1616.17 689.981 L1616.73 689.981 L1617.29 689.981 L1617.84 689.981 L1618.4 689.981 L1618.96 689.981 L1619.52 689.981 L1620.08 689.981 L1620.64 689.981 L1621.2 689.981 L1621.76 689.981 L1622.32 689.981 L1622.88 689.981 L1623.44 689.981 L1624 689.981 L1624.56 689.981 L1625.11 689.981 L1625.67 689.981 L1626.23 689.981 L1626.79 689.981 L1627.35 689.981 L1627.91 689.981 L1628.47 689.981 L1629.03 689.981 L1629.59 689.981 L1630.15 689.981 L1630.71 689.981 L1631.27 689.981 L1631.83 689.981 L1632.39 689.981 L1632.94 689.981 L1633.5 689.981 L1634.06 689.981 L1634.62 689.981 L1635.18 689.981 L1635.74 689.981 L1636.3 689.981 L1636.86 689.981 L1637.42 689.981 L1637.98 689.981 L1638.54 689.981 L1639.1 689.981 L1639.66 689.981 L1640.21 689.981 L1640.77 689.981 L1641.33 689.981 L1641.89 689.981 L1642.45 689.981 L1643.01 689.981 L1643.57 689.981 L1644.13 689.981 L1644.69 689.981 L1645.25 689.981 L1645.81 689.981 L1646.37 689.981 L1646.93 689.981 L1647.48 689.981 L1648.04 689.981 L1648.6 689.981 L1649.16 689.981 L1649.72 689.981 L1650.28 689.981 L1650.84 689.981 L1651.4 689.981 L1651.96 689.981 L1652.52 689.981 L1653.08 689.981 L1653.64 689.981 L1654.2 689.981 L1654.76 689.981 L1655.31 689.981 L1655.87 689.981 L1656.43 689.981 L1656.99 689.981 L1657.55 689.981 L1658.11 689.981 L1658.67 689.981 L1659.23 689.981 L1659.79 689.981 L1660.35 689.981 L1660.91 689.981 L1661.47 689.981 L1662.03 689.981 L1662.58 689.981 L1663.14 689.981 L1663.7 689.981 L1664.26 689.981 L1664.82 689.981 L1665.38 689.981 L1665.94 689.981 L1666.5 689.981 L1667.06 689.981 L1667.62 689.981 L1668.18 689.981 L1668.74 689.981 L1669.3 689.981 L1669.85 689.981 L1670.41 689.981 L1670.97 689.981 L1671.53 689.981 L1672.09 689.981 L1672.65 689.981 L1673.21 689.981 L1673.77 689.981 L1674.33 689.981 L1674.89 689.981 L1675.45 689.981 L1676.01 689.981 L1676.57 689.981 L1677.13 689.981 L1677.68 689.981 L1678.24 689.981 L1678.8 689.981 L1679.36 689.981 L1679.92 689.981 L1680.48 689.981 L1681.04 689.981 L1681.6 689.981 L1682.16 689.981 L1682.72 689.981 L1683.28 689.981 L1683.84 689.981 L1684.4 689.981 L1684.95 689.981 L1685.51 689.981 L1686.07 689.981 L1686.63 689.981 L1687.19 689.981 L1687.75 689.981 L1688.31 689.981 L1688.87 689.981 L1689.43 689.981 L1689.99 689.981 L1690.55 689.981 L1691.11 689.981 L1691.67 689.981 L1692.23 689.981 L1692.78 689.981 L1693.34 689.981 L1693.9 689.981 L1694.46 689.981 L1695.02 689.981 L1695.58 689.981 L1696.14 689.981 L1696.7 689.981 L1697.26 689.981 L1697.82 689.981 L1698.38 689.981 L1698.94 689.981 L1699.5 689.981 L1700.05 689.981 L1700.61 689.981 L1701.17 689.981 L1701.73 689.981 L1702.29 689.981 L1702.85 689.981 L1703.41 689.981 L1703.97 689.981 L1704.53 689.981 L1705.09 689.981 L1705.65 689.981 L1706.21 689.981 L1706.77 689.981 L1707.32 689.981 L1707.88 689.981 L1708.44 689.981 L1709 689.981 L1709.56 689.981 L1710.12 689.981 L1710.68 689.981 L1711.24 689.981 L1711.8 689.981 L1712.36 689.981 L1712.92 689.981 L1713.48 689.981 L1714.04 689.981 L1714.6 689.981 L1715.15 689.981 L1715.71 689.981 L1716.27 689.981 L1716.83 689.981 L1717.39 689.981 L1717.95 689.981 L1718.51 689.981 L1719.07 689.981 L1719.63 689.981 L1720.19 689.981 L1720.75 689.981 L1721.31 689.981 L1721.87 689.981 L1722.42 689.981 L1722.98 689.981 L1723.54 689.981 L1724.1 689.981 L1724.66 689.981 L1725.22 689.981 L1725.78 689.981 L1726.34 689.981 L1726.9 689.981 L1727.46 689.981 L1728.02 689.981 L1728.58 689.981 L1729.14 689.981 L1729.69 689.981 L1730.25 689.981 L1730.81 689.981 L1731.37 689.981 L1731.93 689.981 L1732.49 689.981 L1733.05 689.981 L1733.61 689.981 L1734.17 689.981 L1734.73 689.981 L1735.29 689.981 L1735.85 689.981 L1736.41 689.981 L1736.97 689.981 L1737.52 689.981 L1738.08 689.981 L1738.64 689.981 L1739.2 689.981 L1739.76 689.981 L1740.32 689.981 L1740.88 689.981 L1741.44 689.981 L1742 689.981 L1742.56 689.981 L1743.12 689.981 L1743.68 689.981 L1744.24 689.981 L1744.79 689.981 L1745.35 689.981 L1745.91 689.981 L1746.47 689.981 L1747.03 689.981 L1747.59 689.981 L1748.15 689.981 L1748.71 689.981 L1749.27 689.981 L1749.83 689.981 L1750.39 689.981 L1750.95 689.981 L1751.51 689.981 L1752.06 689.981 L1752.62 689.981 L1753.18 689.981 L1753.74 689.981 L1754.3 689.981 L1754.86 689.981 L1755.42 689.981 L1755.98 689.981 L1756.54 689.981 L1757.1 689.981 L1757.66 689.981 L1758.22 689.981 L1758.78 689.981 L1759.34 689.981 L1759.89 689.981 L1760.45 689.981 L1761.01 689.981 L1761.57 689.981 L1762.13 689.981 L1762.69 689.981 L1763.25 689.981 L1763.81 689.981 L1764.37 689.981 L1764.93 689.981 L1765.49 689.981 L1766.05 689.981 L1766.61 689.981 L1767.16 689.981 L1767.72 689.981 L1768.28 689.981 L1768.84 689.981 L1769.4 689.981 L1769.96 689.981 L1770.52 689.981 L1771.08 689.981 L1771.64 689.981 L1772.2 689.981 L1772.76 689.981 L1773.32 689.981 L1773.88 689.981 L1774.43 689.981 L1774.99 689.981 L1775.55 689.981 L1776.11 689.981 L1776.67 689.981 L1777.23 689.981 L1777.79 689.981 L1778.35 689.981 L1778.91 689.981 L1779.47 689.981 L1780.03 689.981 L1780.59 689.981 L1781.15 689.981 L1781.71 689.981 L1782.26 689.981 L1782.82 689.981 L1783.38 689.981 L1783.94 689.981 L1784.5 689.981 L1785.06 689.981 L1785.62 689.981 L1786.18 689.981 L1786.74 689.981 L1787.3 689.981 L1787.86 689.981 L1788.42 689.981 L1788.98 689.981 L1789.53 689.981 L1790.09 689.981 L1790.65 689.981 L1791.21 689.981 L1791.77 689.981 L1792.33 689.981 L1792.89 689.981 L1793.45 689.981 L1794.01 689.981 L1794.57 689.981 L1795.13 689.981 L1795.69 689.981 L1796.25 689.981 L1796.8 689.981 L1797.36 689.981 L1797.92 689.981 L1798.48 689.981 L1799.04 689.981 L1799.6 689.981 L1800.16 689.981 L1800.72 689.981 L1801.28 689.981 L1801.84 689.981 L1802.4 689.981 L1802.96 689.981 L1803.52 689.981 L1804.08 689.981 L1804.63 689.981 L1805.19 689.981 L1805.75 689.981 L1806.31 689.981 L1806.87 689.981 L1807.43 689.981 L1807.99 689.981 L1808.55 689.981 L1809.11 689.981 L1809.67 689.981 L1810.23 689.981 L1810.79 689.981 L1811.35 689.981 L1811.9 689.981 L1812.46 689.981 L1813.02 689.981 L1813.58 689.981 L1814.14 689.981 L1814.7 689.981 L1815.26 689.981 L1815.82 689.981 L1816.38 689.981 L1816.94 689.981 L1817.5 689.981 L1818.06 689.981 L1818.62 689.981 L1819.18 689.981 L1819.73 689.981 L1820.29 689.981 L1820.85 689.981 L1821.41 689.981 L1821.97 689.981 L1822.53 689.981 L1823.09 689.981 L1823.65 689.981 L1824.21 689.981 L1824.77 689.981 L1825.33 689.981 L1825.89 689.981 L1826.45 689.981 L1827 689.981 L1827.56 689.981 L1828.12 689.981 L1828.68 689.981 L1829.24 689.981 L1829.8 689.981 L1830.36 689.981 L1830.92 689.981 L1831.48 689.981 L1832.04 689.981 L1832.6 689.981 L1833.16 689.981 L1833.72 689.981 L1834.27 689.981 L1834.83 689.981 L1835.39 689.981 L1835.95 689.981 L1836.51 689.981 L1837.07 689.981 L1837.63 689.981 L1838.19 689.981 L1838.19 681.059 L1837.63 681.059 L1837.07 681.059 L1836.51 681.059 L1835.95 681.059 L1835.39 681.059 L1834.83 681.059 L1834.27 681.059 L1833.72 681.059 L1833.16 681.059 L1832.6 681.059 L1832.04 681.059 L1831.48 681.059 L1830.92 681.059 L1830.36 681.059 L1829.8 681.059 L1829.24 681.059 L1828.68 681.059 L1828.12 681.059 L1827.56 681.059 L1827 681.059 L1826.45 681.059 L1825.89 681.059 L1825.33 681.059 L1824.77 681.059 L1824.21 681.059 L1823.65 681.059 L1823.09 681.059 L1822.53 681.059 L1821.97 681.059 L1821.41 681.059 L1820.85 681.059 L1820.29 681.059 L1819.73 681.059 L1819.18 681.059 L1818.62 681.059 L1818.06 681.059 L1817.5 681.059 L1816.94 681.059 L1816.38 681.059 L1815.82 681.059 L1815.26 681.059 L1814.7 681.059 L1814.14 681.059 L1813.58 681.059 L1813.02 681.059 L1812.46 681.059 L1811.9 681.059 L1811.35 681.059 L1810.79 681.059 L1810.23 681.059 L1809.67 681.059 L1809.11 681.059 L1808.55 681.059 L1807.99 681.059 L1807.43 681.059 L1806.87 681.059 L1806.31 681.059 L1805.75 681.059 L1805.19 681.059 L1804.63 681.059 L1804.08 681.059 L1803.52 681.059 L1802.96 681.059 L1802.4 681.059 L1801.84 681.059 L1801.28 681.059 L1800.72 681.059 L1800.16 681.059 L1799.6 681.059 L1799.04 681.059 L1798.48 681.059 L1797.92 681.059 L1797.36 681.059 L1796.8 681.059 L1796.25 681.059 L1795.69 681.059 L1795.13 681.059 L1794.57 681.059 L1794.01 681.059 L1793.45 681.059 L1792.89 681.059 L1792.33 681.059 L1791.77 681.059 L1791.21 681.059 L1790.65 681.059 L1790.09 681.059 L1789.53 681.059 L1788.98 681.059 L1788.42 681.059 L1787.86 681.059 L1787.3 681.059 L1786.74 681.059 L1786.18 681.059 L1785.62 681.059 L1785.06 681.059 L1784.5 681.059 L1783.94 681.059 L1783.38 681.059 L1782.82 681.059 L1782.26 681.059 L1781.71 681.059 L1781.15 681.059 L1780.59 681.059 L1780.03 681.059 L1779.47 681.059 L1778.91 681.059 L1778.35 681.059 L1777.79 681.059 L1777.23 681.059 L1776.67 681.059 L1776.11 681.059 L1775.55 681.059 L1774.99 681.059 L1774.43 681.059 L1773.88 681.059 L1773.32 681.059 L1772.76 681.059 L1772.2 681.059 L1771.64 681.059 L1771.08 681.059 L1770.52 681.059 L1769.96 681.059 L1769.4 681.059 L1768.84 681.059 L1768.28 681.059 L1767.72 681.059 L1767.16 681.059 L1766.61 681.059 L1766.05 681.059 L1765.49 681.059 L1764.93 681.059 L1764.37 681.059 L1763.81 681.059 L1763.25 681.059 L1762.69 681.059 L1762.13 681.059 L1761.57 681.059 L1761.01 681.059 L1760.45 681.059 L1759.89 681.059 L1759.34 681.059 L1758.78 681.059 L1758.22 681.059 L1757.66 681.059 L1757.1 681.059 L1756.54 681.059 L1755.98 681.059 L1755.42 681.059 L1754.86 681.059 L1754.3 681.059 L1753.74 681.059 L1753.18 681.059 L1752.62 681.059 L1752.06 681.059 L1751.51 681.059 L1750.95 681.059 L1750.39 681.059 L1749.83 681.059 L1749.27 681.059 L1748.71 681.059 L1748.15 681.059 L1747.59 681.059 L1747.03 681.059 L1746.47 681.059 L1745.91 681.059 L1745.35 681.059 L1744.79 681.059 L1744.24 681.059 L1743.68 681.059 L1743.12 681.059 L1742.56 681.059 L1742 681.059 L1741.44 681.059 L1740.88 681.059 L1740.32 681.059 L1739.76 681.059 L1739.2 681.059 L1738.64 681.059 L1738.08 681.059 L1737.52 681.059 L1736.97 681.059 L1736.41 681.059 L1735.85 681.059 L1735.29 681.059 L1734.73 681.059 L1734.17 681.059 L1733.61 681.059 L1733.05 681.059 L1732.49 681.059 L1731.93 681.059 L1731.37 681.059 L1730.81 681.059 L1730.25 681.059 L1729.69 681.059 L1729.14 681.059 L1728.58 681.059 L1728.02 681.059 L1727.46 681.059 L1726.9 681.059 L1726.34 681.059 L1725.78 681.059 L1725.22 681.059 L1724.66 681.059 L1724.1 681.059 L1723.54 681.059 L1722.98 681.059 L1722.42 681.059 L1721.87 681.059 L1721.31 681.059 L1720.75 681.059 L1720.19 681.059 L1719.63 681.059 L1719.07 681.059 L1718.51 681.059 L1717.95 681.059 L1717.39 681.059 L1716.83 681.059 L1716.27 681.059 L1715.71 681.059 L1715.15 681.059 L1714.6 681.059 L1714.04 681.059 L1713.48 681.059 L1712.92 681.059 L1712.36 681.059 L1711.8 681.059 L1711.24 681.059 L1710.68 681.059 L1710.12 681.059 L1709.56 681.059 L1709 681.059 L1708.44 681.059 L1707.88 681.059 L1707.32 681.059 L1706.77 681.059 L1706.21 681.059 L1705.65 681.059 L1705.09 681.059 L1704.53 681.059 L1703.97 681.059 L1703.41 681.059 L1702.85 681.059 L1702.29 681.059 L1701.73 681.059 L1701.17 681.059 L1700.61 681.059 L1700.05 681.059 L1699.5 681.059 L1698.94 681.059 L1698.38 681.059 L1697.82 681.059 L1697.26 681.059 L1696.7 681.059 L1696.14 681.059 L1695.58 681.059 L1695.02 681.059 L1694.46 681.059 L1693.9 681.059 L1693.34 681.059 L1692.78 681.059 L1692.23 681.059 L1691.67 681.059 L1691.11 681.059 L1690.55 681.059 L1689.99 681.059 L1689.43 681.059 L1688.87 681.059 L1688.31 681.059 L1687.75 681.059 L1687.19 681.059 L1686.63 681.059 L1686.07 681.059 L1685.51 681.059 L1684.95 681.059 L1684.4 681.059 L1683.84 681.059 L1683.28 681.059 L1682.72 681.059 L1682.16 681.059 L1681.6 681.059 L1681.04 681.059 L1680.48 681.059 L1679.92 681.059 L1679.36 681.059 L1678.8 681.059 L1678.24 681.059 L1677.68 681.059 L1677.13 681.059 L1676.57 681.059 L1676.01 681.059 L1675.45 681.059 L1674.89 681.059 L1674.33 681.059 L1673.77 681.059 L1673.21 681.059 L1672.65 681.059 L1672.09 681.059 L1671.53 681.059 L1670.97 681.059 L1670.41 681.059 L1669.85 681.059 L1669.3 681.059 L1668.74 681.059 L1668.18 681.059 L1667.62 681.059 L1667.06 681.059 L1666.5 681.059 L1665.94 681.059 L1665.38 681.059 L1664.82 681.059 L1664.26 681.059 L1663.7 681.059 L1663.14 681.059 L1662.58 681.059 L1662.03 681.059 L1661.47 681.059 L1660.91 681.059 L1660.35 681.059 L1659.79 681.059 L1659.23 681.059 L1658.67 681.059 L1658.11 681.059 L1657.55 681.059 L1656.99 681.059 L1656.43 681.059 L1655.87 681.059 L1655.31 681.059 L1654.76 681.059 L1654.2 681.059 L1653.64 681.059 L1653.08 681.059 L1652.52 681.059 L1651.96 681.059 L1651.4 681.059 L1650.84 681.059 L1650.28 681.059 L1649.72 681.059 L1649.16 681.059 L1648.6 681.059 L1648.04 681.059 L1647.48 681.059 L1646.93 681.059 L1646.37 681.059 L1645.81 681.059 L1645.25 681.059 L1644.69 681.059 L1644.13 681.059 L1643.57 681.059 L1643.01 681.059 L1642.45 681.059 L1641.89 681.059 L1641.33 681.059 L1640.77 681.059 L1640.21 681.059 L1639.66 681.059 L1639.1 681.059 L1638.54 681.059 L1637.98 681.059 L1637.42 681.059 L1636.86 681.059 L1636.3 681.059 L1635.74 681.059 L1635.18 681.059 L1634.62 681.059 L1634.06 681.059 L1633.5 681.059 L1632.94 681.059 L1632.39 681.059 L1631.83 681.059 L1631.27 681.059 L1630.71 681.059 L1630.15 681.059 L1629.59 681.059 L1629.03 681.059 L1628.47 681.059 L1627.91 681.059 L1627.35 681.059 L1626.79 681.059 L1626.23 681.059 L1625.67 681.059 L1625.11 681.059 L1624.56 681.059 L1624 681.059 L1623.44 681.059 L1622.88 681.059 L1622.32 681.059 L1621.76 681.059 L1621.2 681.059 L1620.64 681.059 L1620.08 681.059 L1619.52 681.059 L1618.96 681.059 L1618.4 681.059 L1617.84 681.059 L1617.29 681.059 L1616.73 681.059 L1616.17 681.059 L1615.61 681.059 L1615.05 681.059 L1614.49 681.059 L1613.93 681.059 L1613.37 681.059 L1612.81 681.059 L1612.25 681.059 L1611.69 681.059 L1611.13 681.059 L1610.57 681.059 L1610.02 681.059 L1609.46 681.059 L1608.9 681.059 L1608.34 681.059 L1607.78 681.059 L1607.22 681.059 L1606.66 681.059 L1606.1 681.059 L1605.54 681.059 L1604.98 681.059 L1604.42 681.059 L1603.86 681.059 L1603.3 681.059 L1602.74 681.059 L1602.19 681.059 L1601.63 681.059 L1601.07 681.059 L1600.51 681.059 L1599.95 681.059 L1599.39 681.059 L1598.83 681.059 L1598.27 681.059 L1597.71 681.059 L1597.15 681.059 L1596.59 681.059 L1596.03 681.059 L1595.47 681.059 L1594.92 681.059 L1594.36 681.059 L1593.8 681.059 L1593.24 681.059 L1592.68 681.059 L1592.12 681.059 L1591.56 681.059 L1591 681.059 L1590.44 681.059 L1589.88 681.059 L1589.32 681.059 L1588.76 681.059 L1588.2 681.059 L1587.65 681.059 L1587.09 681.059 L1586.53 681.059 L1585.97 681.059 L1585.41 681.059 L1584.85 681.059 L1584.29 681.059 L1583.73 681.059 L1583.17 681.059 L1582.61 681.059 L1582.05 681.059 L1581.49 681.059 L1580.93 681.059 L1580.37 681.059 L1579.82 681.059 L1579.26 681.059 L1578.7 681.059 L1578.14 681.059 L1577.58 681.059 L1577.02 681.059 L1576.46 681.059 L1575.9 681.059 L1575.34 681.059 L1574.78 681.059 L1574.22 681.059 L1573.66 681.059 L1573.1 681.059 L1572.55 681.059 L1571.99 681.059 L1571.43 681.059 L1570.87 681.059 L1570.31 681.059 L1569.75 681.059 L1569.19 681.059 L1568.63 681.059 L1568.07 681.059 L1567.51 681.059 L1566.95 681.059 L1566.39 681.059 L1565.83 681.059 L1565.28 681.059 L1564.72 681.059 L1564.16 681.059 L1563.6 681.059 L1563.04 681.059 L1562.48 681.059 L1561.92 681.059 L1561.36 681.059 L1560.8 681.059 L1560.24 681.059 L1559.68 681.059 L1559.12 681.059 L1558.56 681.059 L1558 681.059 L1557.45 681.059 L1556.89 681.059 L1556.33 681.059 L1555.77 681.059 L1555.21 681.059 L1554.65 681.059 L1554.09 681.059 L1553.53 681.059 L1552.97 681.059 L1552.41 681.059 L1551.85 681.059 L1551.29 681.059 L1550.73 681.059 L1550.18 681.059 L1549.62 681.059 L1549.06 681.059 L1548.5 681.059 L1547.94 681.059 L1547.38 681.059 L1546.82 681.059 L1546.26 681.059 L1545.7 681.059 L1545.14 681.059 L1544.58 681.059 L1544.02 681.059 L1543.46 681.059 L1542.9 681.059 L1542.35 681.059 L1541.79 681.059 L1541.23 681.059 L1540.67 681.059 L1540.11 681.059 L1539.55 681.059 L1538.99 681.059 L1538.43 681.059 L1537.87 681.059 L1537.31 681.059 L1536.75 681.059 L1536.19 681.059 L1535.63 681.059 L1535.08 681.059 L1534.52 681.059 L1533.96 681.059 L1533.4 681.059 L1532.84 681.059 L1532.28 681.059 L1531.72 681.059 L1531.16 681.059 L1530.6 681.059 L1530.04 681.059 L1529.48 681.059 L1528.92 681.059 L1528.36 681.059 L1527.81 681.059 L1527.25 681.059 L1526.69 681.059 L1526.13 681.059 L1525.57 681.059 L1525.01 681.059 L1524.45 681.059 L1523.89 681.059 L1523.33 681.059 L1522.77 681.059 L1522.21 681.059 L1521.65 681.059 L1521.09 681.059 L1520.53 681.059 L1519.98 681.059 L1519.42 681.059 L1518.86 681.059 L1518.3 681.059 L1517.74 681.059 L1517.18 681.059 L1516.62 681.059 L1516.06 681.059 L1515.5 681.059 L1514.94 681.059 L1514.38 681.059 L1513.82 681.059 L1513.26 681.059 L1512.71 681.059 L1512.15 681.059 L1511.59 681.059 L1511.03 681.059 L1510.47 681.059 L1509.91 681.059 L1509.35 681.059 L1508.79 681.059 L1508.23 681.059 L1507.67 681.059 L1507.11 681.059 L1506.55 681.059 L1505.99 681.059 L1505.44 681.059 L1504.88 681.059 L1504.32 681.059 L1503.76 681.059 L1503.2 681.059 L1502.64 681.059 L1502.08 681.059 L1501.52 681.059 L1500.96 681.059 L1500.4 681.059 L1499.84 681.059 L1499.28 681.059 L1498.72 681.059 L1498.16 681.059 L1497.61 681.059 L1497.05 681.059 L1496.49 681.059 L1495.93 681.059 L1495.37 681.059 L1494.81 681.059 L1494.25 681.059 L1493.69 681.059 L1493.13 681.059 L1492.57 681.059 L1492.01 681.059 L1491.45 681.059 L1490.89 681.059 L1490.34 681.059 L1489.78 681.059 L1489.22 681.059 L1488.66 681.059 L1488.1 681.059 L1487.54 681.059 L1486.98 681.059 L1486.42 681.059 L1485.86 681.059 L1485.3 681.059 L1484.74 681.059 L1484.18 681.059 L1483.62 681.059 L1483.07 681.059 L1482.51 681.059 L1481.95 681.059 L1481.39 681.059 L1480.83 681.059 L1480.27 681.059 L1479.71 681.059 L1479.15 681.059 L1478.59 681.059 L1478.03 681.059 L1477.47 681.059 L1476.91 681.059 L1476.35 681.059 L1475.79 681.059 L1475.24 681.059 L1474.68 681.059 L1474.12 681.059 L1473.56 681.059 L1473 681.059 L1472.44 681.059 L1471.88 681.059 L1471.32 681.059 L1470.76 681.059 L1470.2 681.059 L1469.64 681.059 L1469.08 681.059 L1468.52 681.059 L1467.97 681.059 L1467.41 681.059 L1466.85 681.059 L1466.29 681.059 L1465.73 681.059 L1465.17 681.059 L1464.61 681.059 L1464.05 681.059 L1463.49 681.059 L1462.93 681.059 L1462.37 681.059 L1461.81 681.059 L1461.25 681.059 L1460.7 681.059 L1460.14 681.059 L1459.58 681.059 L1459.02 681.059 L1458.46 681.059 L1457.9 681.059 L1457.34 681.059 L1456.78 681.059 L1456.22 681.059 L1455.66 681.059 L1455.1 681.059 L1454.54 681.059 L1453.98 681.059 L1453.42 681.059 L1452.87 681.059 L1452.31 681.059 L1451.75 681.059 L1451.19 681.059 L1450.63 681.059 L1450.07 681.059 L1449.51 681.059 L1448.95 681.059 L1448.39 681.059 L1447.83 681.059 L1447.27 681.059 L1446.71 681.059 L1446.15 681.059 L1445.6 681.059 L1445.04 681.059 L1444.48 681.059 L1443.92 681.059 L1443.36 681.059 L1442.8 681.059 L1442.24 681.059 L1441.68 681.059 L1441.12 681.059 L1440.56 681.059 L1440 681.059 L1439.44 681.059 L1438.88 681.059 L1438.33 681.059 L1437.77 681.059 L1437.21 681.059 L1436.65 681.059 L1436.09 681.059 L1435.53 681.059 L1434.97 681.059 L1434.41 681.059 L1433.85 681.059 L1433.29 681.059 L1432.73 681.059 L1432.17 681.059 L1431.61 681.059 L1431.05 681.059 L1430.5 681.059 L1429.94 681.059 L1429.38 681.059 L1428.82 681.059 L1428.26 681.059 L1427.7 681.059 L1427.14 681.059 L1426.58 681.059 L1426.02 681.059 L1425.46 681.059 L1424.9 681.059 L1424.34 681.059 L1423.78 681.059 L1423.23 681.059 L1422.67 681.059 L1422.11 681.059 L1421.55 681.059 L1420.99 681.059 L1420.43 681.059 L1419.87 681.059 L1419.31 681.059 L1418.75 681.059 L1418.19 681.059 L1417.63 681.059 L1417.07 681.059 L1416.51 681.059 L1415.95 681.059 L1415.4 681.059 L1414.84 681.059 L1414.28 681.059 L1413.72 681.059 L1413.16 681.059 L1412.6 681.059 L1412.04 681.059 L1411.48 681.059 L1410.92 681.059 L1410.36 681.059 L1409.8 681.059 L1409.24 681.059 L1408.68 681.059 L1408.13 681.059 L1407.57 681.059 L1407.01 681.059 L1406.45 681.059 L1405.89 681.059 L1405.33 681.059 L1404.77 681.059 L1404.21 681.059 L1403.65 681.059 L1403.09 681.059 L1402.53 681.059 L1401.97 681.059 L1401.41 681.059 L1400.86 681.059 L1400.3 681.059 L1399.74 681.059 L1399.18 681.059 L1398.62 681.059 L1398.06 681.059 L1397.5 681.059 L1396.94 681.059 L1396.38 681.059 L1395.82 681.059 L1395.26 681.059 L1394.7 681.059 L1394.14 681.059 L1393.58 681.059 L1393.03 681.059 L1392.47 681.059 L1391.91 681.059 L1391.35 681.059 L1390.79 681.059 L1390.23 681.059 L1389.67 681.059 L1389.11 681.059 L1388.55 681.059 L1387.99 681.059 L1387.43 681.059 L1386.87 681.059 L1386.31 681.059 L1385.76 681.059 L1385.2 681.059 L1384.64 681.059 L1384.08 681.059 L1383.52 681.059 L1382.96 681.059 L1382.4 681.059 L1381.84 681.059 L1381.28 681.059 L1380.72 681.059 L1380.16 681.059 L1379.6 681.059 L1379.04 681.059 L1378.49 681.059 L1377.93 681.059 L1377.37 681.059 L1376.81 681.059 L1376.25 681.059 L1375.69 681.059 L1375.13 681.059 L1374.57 681.059 L1374.01 681.059 L1373.45 681.059 L1372.89 681.059 L1372.33 681.059 L1371.77 681.059 L1371.21 681.059 L1370.66 681.059 L1370.1 681.059 L1369.54 681.059 L1368.98 681.059 L1368.42 681.059 L1367.86 681.059 L1367.3 681.059 L1366.74 681.059 L1366.18 681.059 L1365.62 681.059 L1365.06 681.059 L1364.5 681.059 L1363.94 681.059 L1363.39 681.059 L1362.83 681.059 L1362.27 681.059 L1361.71 681.059 L1361.15 681.059 L1360.59 681.059 L1360.03 681.059 L1359.47 681.059 L1358.91 681.059 L1358.35 681.059 L1357.79 681.059 L1357.23 681.059 L1356.67 681.059 L1356.12 681.059 L1355.56 681.059 L1355 681.059 L1354.44 681.059 L1353.88 681.059 L1353.32 681.059 L1352.76 681.059 L1352.2 681.059 L1351.64 681.059 L1351.08 681.059 L1350.52 681.059 L1349.96 681.059 L1349.4 681.059 L1348.84 681.059 L1348.29 681.059 L1347.73 681.059 L1347.17 681.059 L1346.61 681.059 L1346.05 681.059 L1345.49 681.059 L1344.93 681.059 L1344.37 681.059 L1343.81 681.059 L1343.25 681.059 L1342.69 681.059 L1342.13 681.059 L1341.57 681.059 L1341.02 681.059 L1340.46 681.059 L1339.9 681.059 L1339.34 681.059 L1338.78 681.059 L1338.22 681.059 L1337.66 681.059 L1337.1 681.059 L1336.54 681.059 L1335.98 681.059 L1335.42 681.059 L1334.86 681.059 L1334.3 681.059 L1333.75 681.059 L1333.19 681.059 L1332.63 681.059 L1332.07 681.059 L1331.51 681.059 L1330.95 681.059 L1330.39 681.059 L1329.83 681.059 L1329.27 681.059 L1328.71 681.059 L1328.15 681.059 L1327.59 681.059 L1327.03 681.059 L1326.47 681.059 L1325.92 681.059 L1325.36 681.059 L1324.8 681.059 L1324.24 681.059 L1323.68 681.059 L1323.12 681.059 L1322.56 681.059 L1322 681.059 L1321.44 681.059 L1320.88 681.059 L1320.32 681.059 L1319.76 681.059 L1319.2 681.059 L1318.65 681.059 L1318.09 681.059 L1317.53 681.059 L1316.97 681.059 L1316.41 681.059 L1315.85 681.059 L1315.29 681.059 L1314.73 681.059 L1314.17 681.059 L1313.61 681.059 L1313.05 681.059 L1312.49 681.059 L1311.93 681.059 L1311.38 681.059 L1310.82 681.059 L1310.26 681.059 L1309.7 681.059 L1309.14 681.059 L1308.58 681.059 L1308.02 681.059 L1307.46 681.059 L1306.9 681.059 L1306.34 681.059 L1305.78 681.059 L1305.22 681.059 L1304.66 681.059 L1304.1 681.059 L1303.55 681.059 L1302.99 681.059 L1302.43 681.059 L1301.87 681.059 L1301.31 681.059 L1300.75 681.059 L1300.19 681.059 L1299.63 681.059 L1299.07 681.059 L1298.51 681.059 L1297.95 681.059 L1297.39 681.059 L1296.83 681.059 L1296.28 681.059 L1295.72 681.059 L1295.16 681.059 L1294.6 681.059 L1294.04 681.059 L1293.48 681.059 L1292.92 681.059 L1292.36 681.059 L1291.8 681.059 L1291.24 681.059 L1290.68 681.059 L1290.12 681.059 L1289.56 681.059 L1289 681.059 L1288.45 681.059 L1287.89 681.059 L1287.33 681.059 L1286.77 681.059 L1286.21 681.059 L1285.65 681.059 L1285.09 681.059 L1284.53 681.059 L1283.97 681.059 L1283.41 681.059 L1282.85 681.059 L1282.29 681.059 L1281.73 681.059 L1281.18 681.059 L1280.62 681.059 L1280.06 681.059 L1279.5 681.059 L1278.94 681.059 L1278.38 681.059 L1277.82 681.059 L1277.26 681.059 L1276.7 681.059 L1276.14 681.059 L1275.58 681.059 L1275.02 681.059 L1274.46 681.059 L1273.91 681.059 L1273.35 681.059 L1272.79 681.059 L1272.23 681.059 L1271.67 681.059 L1271.11 681.059 L1270.55 681.059 L1269.99 681.059 L1269.43 681.059 L1268.87 681.059 L1268.31 681.059 L1267.75 681.059 L1267.19 681.059 L1266.63 681.059 L1266.08 681.059 L1265.52 681.059 L1264.96 681.059 L1264.4 681.059 L1263.84 681.059 L1263.28 681.059 L1262.72 681.059 L1262.16 681.059 L1261.6 681.059 L1261.04 681.059 L1260.48 681.059 L1259.92 681.059 L1259.36 681.059 L1258.81 681.059 L1258.25 681.059 L1257.69 681.059 L1257.13 681.059 L1256.57 681.059 L1256.01 681.059 L1255.45 681.059 L1254.89 681.059 L1254.33 681.059 L1253.77 681.059 L1253.21 681.059 L1252.65 681.059 L1252.09 681.059 L1251.54 681.059 L1250.98 681.059 L1250.42 681.059 L1249.86 681.059 L1249.3 681.059 L1248.74 681.059 L1248.18 681.059 L1247.62 681.059 L1247.06 681.059 L1246.5 681.059 L1245.94 681.059 L1245.38 681.059 L1244.82 681.059 L1244.26 681.059 L1243.71 681.059 L1243.15 681.059 L1242.59 681.059 L1242.03 681.059 L1241.47 681.059 L1240.91 681.059 L1240.35 681.059 L1239.79 681.059 L1239.23 681.059 L1238.67 681.059 L1238.11 681.059 L1237.55 681.059 L1236.99 681.059 L1236.44 681.059 L1235.88 681.059 L1235.32 681.059 L1234.76 681.059 L1234.2 681.059 L1233.64 681.059 L1233.08 681.059 L1232.52 681.059 L1231.96 681.059 L1231.4 681.059 L1230.84 681.059 L1230.28 681.059 L1229.72 681.059 L1229.17 681.059 L1228.61 681.059 L1228.05 681.059 L1227.49 681.059 L1226.93 681.059 L1226.37 681.059 L1225.81 681.059 L1225.25 681.059 L1224.69 681.059 L1224.13 681.059 L1223.57 681.059 L1223.01 681.059 L1222.45 681.059 L1221.89 681.059 L1221.34 681.059 L1220.78 681.059 L1220.22 681.059 L1219.66 681.059 L1219.1 681.059 L1218.54 681.059 L1217.98 681.059 L1217.42 681.059 L1216.86 681.059 L1216.3 681.059 L1215.74 681.059 L1215.18 681.059 L1214.62 681.059 L1214.07 681.059 L1213.51 681.059 L1212.95 681.059 L1212.39 681.059 L1211.83 681.059 L1211.27 681.059 L1210.71 681.059 L1210.15 681.059 L1209.59 681.059 L1209.03 681.059 L1208.47 681.059 L1207.91 681.059 L1207.35 681.059 L1206.8 681.059 L1206.24 681.059 L1205.68 681.059 L1205.12 681.059 L1204.56 681.059 L1204 681.059 L1203.44 681.059 L1202.88 681.059 L1202.32 681.059 L1201.76 681.059 L1201.2 681.059 L1200.64 681.059 L1200.08 681.059 L1199.52 681.059 L1198.97 681.059 L1198.41 681.059 L1197.85 681.059 L1197.29 681.059 L1196.73 681.059 L1196.17 681.059 L1195.61 681.059 L1195.05 681.059 L1194.49 681.059 L1193.93 681.059 L1193.37 681.059 L1192.81 681.059 L1192.25 681.059 L1191.7 681.059 L1191.14 681.059 L1190.58 681.059 L1190.02 681.059 L1189.46 681.059 L1188.9 681.059 L1188.34 681.059 L1187.78 681.059 L1187.22 681.059 L1186.66 681.059 L1186.1 681.059 L1185.54 681.059 L1184.98 681.059 L1184.43 681.059 L1183.87 681.059 L1183.31 681.059 L1182.75 681.059 L1182.19 681.059 L1181.63 681.059 L1181.07 681.059 L1180.51 681.059 L1179.95 681.059 L1179.39 681.059 L1178.83 681.059 L1178.27 681.059 L1177.71 681.059 L1177.15 681.059 L1176.6 681.059 L1176.04 681.059 L1175.48 681.059 L1174.92 681.059 L1174.36 681.059 L1173.8 681.059 L1173.24 681.059 L1172.68 681.059 L1172.12 681.059 L1171.56 681.059 L1171 681.059 L1170.44 681.059 L1169.88 681.059 L1169.33 681.059 L1168.77 681.059 L1168.21 681.059 L1167.65 681.059 L1167.09 681.059 L1166.53 681.059 L1165.97 681.059 L1165.41 681.059 L1164.85 681.059 L1164.29 681.059 L1163.73 681.059 L1163.17 681.059 L1162.61 681.059 L1162.05 681.059 L1161.5 681.059 L1160.94 681.059 L1160.38 681.059 L1159.82 681.059 L1159.26 681.059 L1158.7 681.059 L1158.14 681.059 L1157.58 681.059 L1157.02 681.059 L1156.46 681.059 L1155.9 681.059 L1155.34 681.059 L1154.78 681.059 L1154.23 681.059 L1153.67 681.059 L1153.11 681.059 L1152.55 681.059 L1151.99 681.059 L1151.43 681.059 L1150.87 681.059 L1150.31 681.059 L1149.75 681.059 L1149.19 681.059 L1148.63 681.059 L1148.07 681.059 L1147.51 681.059 L1146.96 681.059 L1146.4 681.059 L1145.84 681.059 L1145.28 681.059 L1144.72 681.059 L1144.16 681.059 L1143.6 681.059 L1143.04 681.059 L1142.48 681.059 L1141.92 681.059 L1141.36 681.059 L1140.8 681.059 L1140.24 681.059 L1139.68 681.059 L1139.13 681.059 L1138.57 681.059 L1138.01 681.059 L1137.45 681.059 L1136.89 681.059 L1136.33 681.059 L1135.77 681.059 L1135.21 681.059 L1134.65 681.059 L1134.09 681.059 L1133.53 681.059 L1132.97 681.059 L1132.41 681.059 L1131.86 681.059 L1131.3 681.059 L1130.74 681.059 L1130.18 681.059 L1129.62 681.059 L1129.06 681.059 L1128.5 681.059 L1127.94 681.059 L1127.38 681.059 L1126.82 681.059 L1126.26 681.059 L1125.7 681.059 L1125.14 681.059 L1124.59 681.059 L1124.03 681.059 L1123.47 681.059 L1122.91 681.059 L1122.35 681.059 L1121.79 681.059 L1121.23 681.059 L1120.67 681.059 L1120.11 681.059 L1119.55 681.059 L1118.99 681.059 L1118.43 681.059 L1117.87 681.059 L1117.31 681.059 L1116.76 681.059 L1116.2 681.059 L1115.64 681.059 L1115.08 681.059 L1114.52 681.059 L1113.96 681.059 L1113.4 681.059 L1112.84 681.059 L1112.28 681.059 L1111.72 681.059 L1111.16 681.059 L1110.6 681.059 L1110.04 681.059 L1109.49 681.059 L1108.93 681.059 L1108.37 681.059 L1107.81 681.059 L1107.25 681.059 L1106.69 681.059 L1106.13 681.059 L1105.57 681.059 L1105.01 681.059 L1104.45 681.059 L1103.89 681.059 L1103.33 681.059 L1102.77 681.059 L1102.22 681.059 L1101.66 681.059 L1101.1 681.059 L1100.54 681.059 L1099.98 681.059 L1099.42 681.059 L1098.86 681.059 L1098.3 681.059 L1097.74 681.059 L1097.18 681.059 L1096.62 681.059 L1096.06 681.059 L1095.5 681.059 L1094.94 681.059 L1094.39 681.059 L1093.83 681.059 L1093.27 681.059 L1092.71 681.059 L1092.15 681.059 L1091.59 681.059 L1091.03 681.059 L1090.47 681.059 L1089.91 681.059 L1089.35 681.059 L1088.79 681.059 L1088.23 681.059 L1087.67 681.059 L1087.12 681.059 L1086.56 681.059 L1086 681.059 L1085.44 681.059 L1084.88 681.059 L1084.32 681.059 L1083.76 681.059 L1083.2 681.059 L1082.64 681.059 L1082.08 681.059 L1081.52 681.059 L1080.96 681.059 L1080.4 681.059 L1079.85 681.059 L1079.29 681.059 L1078.73 681.059 L1078.17 681.059 L1077.61 681.059 L1077.05 681.059 L1076.49 681.059 L1075.93 681.059 L1075.37 681.059 L1074.81 681.059 L1074.25 681.059 L1073.69 681.059 L1073.13 681.059 L1072.57 681.059 L1072.02 681.059 L1071.46 681.059 L1070.9 681.059 L1070.34 681.059 L1069.78 681.059 L1069.22 681.059 L1068.66 681.059 L1068.1 681.059 L1067.54 681.059 L1066.98 681.059 L1066.42 681.059 L1065.86 681.059 L1065.3 681.059 L1064.75 681.059 L1064.19 681.059 L1063.63 681.059 L1063.07 681.059 L1062.51 681.059 L1061.95 681.059 L1061.39 681.059 L1060.83 681.059 L1060.27 681.059 L1059.71 681.059 L1059.15 681.059 L1058.59 681.059 L1058.03 681.059 L1057.48 681.059 L1056.92 681.059 L1056.36 681.059 L1055.8 681.059 L1055.24 681.059 L1054.68 681.059 L1054.12 681.059 L1053.56 681.059 L1053 681.059 L1052.44 681.059 L1051.88 681.059 L1051.32 681.059 L1050.76 681.059 L1050.2 681.059 L1049.65 681.059 L1049.09 681.059 L1048.53 681.059 L1047.97 681.059 L1047.41 681.059 L1046.85 681.059 L1046.29 681.059 L1045.73 681.059 L1045.17 681.059 L1044.61 681.059 L1044.05 681.059 L1043.49 681.059 L1042.93 681.059 L1042.38 681.059 L1041.82 681.059 L1041.26 681.059 L1040.7 681.059 L1040.14 681.059 L1039.58 681.059 L1039.02 681.059 L1038.46 681.059 L1037.9 681.059 L1037.34 681.059 L1036.78 681.059 L1036.22 681.059 L1035.66 681.059 L1035.1 681.059 L1034.55 681.059 L1033.99 681.059 L1033.43 681.059 L1032.87 681.059 L1032.31 681.059 L1031.75 681.059 L1031.19 681.059 L1030.63 681.059 L1030.07 681.059 L1029.51 681.059 L1028.95 681.059 L1028.39 681.059 L1027.83 681.059 L1027.28 681.059 L1026.72 681.059 L1026.16 681.059 L1025.6 681.059 L1025.04 681.059 L1024.48 681.059 L1023.92 681.059 L1023.36 681.059 L1022.8 681.059 L1022.24 681.059 L1021.68 681.059 L1021.12 681.059 L1020.56 681.059 L1020.01 681.059 L1019.45 681.059 L1018.89 681.059 L1018.33 681.059 L1017.77 681.059 L1017.21 681.059 L1016.65 681.059 L1016.09 681.059 L1015.53 681.059 L1014.97 681.059 L1014.41 681.059 L1013.85 681.059 L1013.29 681.059 L1012.73 681.059 L1012.18 681.059 L1011.62 681.059 L1011.06 681.059 L1010.5 681.059 L1009.94 681.059 L1009.38 681.059 L1008.82 681.059 L1008.26 681.059 L1007.7 681.059 L1007.14 681.059 L1006.58 681.059 L1006.02 681.059 L1005.46 681.059 L1004.91 681.059 L1004.35 681.059 L1003.79 681.059 L1003.23 681.059 L1002.67 681.059 L1002.11 681.059 L1001.55 681.059 L1000.99 681.059 L1000.43 681.059 L999.872 681.059 L999.313 681.059 L998.754 681.059 L998.194 681.059 L997.635 681.059 L997.076 681.059 L996.517 681.059 L995.957 681.059 L995.398 681.059 L994.839 681.059 L994.28 681.059 L993.72 681.059 L993.161 681.059 L992.602 681.059 L992.043 681.059 L991.483 681.059 L990.924 681.059 L990.365 681.059 L989.806 681.059 L989.246 681.059 L988.687 681.059 L988.128 681.059 L987.569 681.059 L987.009 681.059 L986.45 681.059 L985.891 681.059 L985.332 681.059 L984.772 681.059 L984.213 681.059 L983.654 681.059 L983.095 681.059 L982.535 681.059 L981.976 681.059 L981.417 681.059 L980.858 681.059 L980.298 681.059 L979.739 681.059 L979.18 681.059 L978.621 681.059 L978.061 681.059 L977.502 681.059 L976.943 681.059 L976.384 681.059 L975.824 681.059 L975.265 681.059 L974.706 681.059 L974.147 681.059 L973.587 681.059 L973.028 681.059 L972.469 681.059 L971.91 681.059 L971.35 681.059 L970.791 681.059 L970.232 681.059 L969.673 681.059 L969.113 681.059 L968.554 681.059 L967.995 681.059 L967.436 681.059 L966.876 681.059 L966.317 681.059 L965.758 681.059 L965.199 681.059 L964.639 681.059 L964.08 681.059 L963.521 681.059 L962.962 681.059 L962.402 681.059 L961.843 681.059 L961.284 681.059 L960.725 681.059 L960.165 681.059 L959.606 681.059 L959.047 681.059 L958.488 681.059 L957.928 681.059 L957.369 681.059 L956.81 681.059 L956.251 681.059 L955.691 681.059 L955.132 681.059 L954.573 681.059 L954.014 681.059 L953.454 681.059 L952.895 681.059 L952.336 681.059 L951.777 681.059 L951.217 681.059 L950.658 681.059 L950.099 681.059 L949.54 681.059 L948.98 681.059 L948.421 681.059 L947.862 681.059 L947.303 681.059 L946.743 681.059 L946.184 681.059 L945.625 681.059 L945.066 681.059 L944.506 681.059 L943.947 681.059 L943.388 681.059 L942.829 681.059 L942.269 681.059 L941.71 681.059 L941.151 681.059 L940.592 681.059 L940.032 681.059 L939.473 681.059 L938.914 681.059 L938.355 681.059 L937.795 681.059 L937.236 681.059 L936.677 681.059 L936.118 681.059 L935.558 681.059 L934.999 681.059 L934.44 681.059 L933.881 681.059 L933.321 681.059 L932.762 681.059 L932.203 681.059 L931.644 681.059 L931.084 681.059 L930.525 681.059 L929.966 681.059 L929.406 681.059 L928.847 681.059 L928.288 681.059 L927.729 681.059 L927.169 681.059 L926.61 681.059 L926.051 681.059 L925.492 681.059 L924.932 681.059 L924.373 681.059 L923.814 681.059 L923.255 681.059 L922.695 681.059 L922.136 681.059 L921.577 681.059 L921.018 681.059 L920.458 681.059 L919.899 681.059 L919.34 681.059 L918.781 681.059 L918.221 681.059 L917.662 681.059 L917.103 681.059 L916.544 681.059 L915.984 681.059 L915.425 681.059 L914.866 681.059 L914.307 681.059 L913.747 681.059 L913.188 681.059 L912.629 681.059 L912.07 681.059 L911.51 681.059 L910.951 681.059 L910.392 681.059 L909.833 681.059 L909.273 681.059 L908.714 681.059 L908.155 681.059 L907.596 681.059 L907.036 681.059 L906.477 681.059 L905.918 681.059 L905.359 681.059 L904.799 681.059 L904.24 681.059 L903.681 681.059 L903.122 681.059 L902.562 681.059 L902.003 681.059 L901.444 681.059 L900.885 681.059 L900.325 681.059 L899.766 681.059 L899.207 681.059 L898.648 681.059 L898.088 681.059 L897.529 681.059 L896.97 681.059 L896.411 681.059 L895.851 681.059 L895.292 681.059 L894.733 681.059 L894.174 681.059 L893.614 681.059 L893.055 681.059 L892.496 681.059 L891.937 681.059 L891.377 681.059 L890.818 681.059 L890.259 681.059 L889.7 681.059 L889.14 681.059 L888.581 681.059 L888.022 681.059 L887.463 681.059 L886.903 681.059 L886.344 681.059 L885.785 681.059 L885.226 681.059 L884.666 681.059 L884.107 681.059 L883.548 681.059 L882.989 681.059 L882.429 681.059 L881.87 681.059 L881.311 681.059 L880.752 681.059 L880.192 681.059 L879.633 681.059 L879.074 681.059 L878.515 681.059 L877.955 681.059 L877.396 681.059 L876.837 681.059 L876.278 681.059 L875.718 681.059 L875.159 681.059 L874.6 681.059 L874.041 681.059 L873.481 681.059 L872.922 681.059 L872.363 681.059 L871.804 681.059 L871.244 681.059 L870.685 681.059 L870.126 681.059 L869.567 681.059 L869.007 681.059 L868.448 681.059 L867.889 681.059 L867.33 681.059 L866.77 681.059 L866.211 681.059 L865.652 681.059 L865.093 681.059 L864.533 681.059 L863.974 681.059 L863.415 681.059 L862.856 681.059 L862.296 681.059 L861.737 681.059 L861.178 681.059 L860.619 681.059 L860.059 681.059 L859.5 681.059 L858.941 681.059 L858.382 681.059 L857.822 681.059 L857.263 681.059 L856.704 681.059 L856.145 681.059 L855.585 681.059 L855.026 681.059 L854.467 681.059 L853.908 681.059 L853.348 681.059 L852.789 681.059 L852.23 681.059 L851.671 681.059 L851.111 681.059 L850.552 681.059 L849.993 681.059 L849.434 681.059 L848.874 681.059 L848.315 681.059 L847.756 681.059 L847.197 681.059 L846.637 681.059 L846.078 681.059 L845.519 681.059 L844.96 681.059 L844.4 681.059 L843.841 681.059 L843.282 681.059 L842.723 681.059 L842.163 681.059 L841.604 681.059 L841.045 681.059 L840.486 681.059 L839.926 681.059 L839.367 681.059 L838.808 681.059 L838.249 681.059 L837.689 681.059 L837.13 681.059 L836.571 681.059 L836.012 681.059 L835.452 681.059 L834.893 681.059 L834.334 681.059 L833.775 681.059 L833.215 681.059 L832.656 681.059 L832.097 681.059 L831.538 681.059 L830.978 681.059 L830.419 681.059 L829.86 681.059 L829.301 681.059 L828.741 681.059 L828.182 681.059 L827.623 681.059 L827.064 681.059 L826.504 681.059 L825.945 681.059 L825.386 681.059 L824.827 681.059 L824.267 681.059 L823.708 681.059 L823.149 681.059 L822.59 681.059 L822.03 681.059 L821.471 681.059 L820.912 681.059 L820.353 681.059 L819.793 681.059 L819.234 681.059 L818.675 681.059 L818.116 681.059 L817.556 681.059 L816.997 681.059 L816.438 681.059 L815.879 681.059 L815.319 681.059 L814.76 681.059 L814.201 681.059 L813.642 681.059 L813.082 681.059 L812.523 681.059 L811.964 681.059 L811.405 681.059 L810.845 681.059 L810.286 681.059 L809.727 681.059 L809.168 681.059 L808.608 681.059 L808.049 681.059 L807.49 681.059 L806.931 681.059 L806.371 681.059 L805.812 681.059 L805.253 681.059 L804.693 681.059 L804.134 681.059 L803.575 681.059 L803.016 681.059 L802.456 681.059 L801.897 681.059 L801.338 681.059 L800.779 681.059 L800.219 681.059 L799.66 681.059 L799.101 681.059 L798.542 681.059 L797.982 681.059 L797.423 681.059 L796.864 681.059 L796.305 681.059 L795.745 681.059 L795.186 681.059 L794.627 681.059 L794.068 681.059 L793.508 681.059 L792.949 681.059 L792.39 681.059 L791.831 681.059 L791.271 681.059 L790.712 681.059 L790.153 681.059 L789.594 681.059 L789.034 681.059 L788.475 681.059 L787.916 681.059 L787.357 681.059 L786.797 681.059 L786.238 681.059 L785.679 681.059 L785.12 681.059 L784.56 681.059 L784.001 681.059 L783.442 681.059 L782.883 681.059 L782.323 681.059 L781.764 681.059 L781.205 681.059 L780.646 681.059 L780.086 681.059 L779.527 681.059 L778.968 681.059 L778.409 681.059 L777.849 681.059 L777.29 681.059 L776.731 681.059 L776.172 681.059 L775.612 681.059 L775.053 681.059 L774.494 681.059 L773.935 681.059 L773.375 681.059 L772.816 681.059 L772.257 681.059 L771.698 681.059 L771.138 681.059 L770.579 681.059 L770.02 681.059 L769.461 681.059 L768.901 681.059 L768.342 681.059 L767.783 681.059 L767.224 681.059 L766.664 681.059 L766.105 681.059 L765.546 681.059 L764.987 681.059 L764.427 681.059 L763.868 681.059 L763.309 681.059 L762.75 681.059 L762.19 681.059 L761.631 681.059 L761.072 681.059 L760.513 681.059 L759.953 681.059 L759.394 681.059 L758.835 681.059 L758.276 681.059 L757.716 681.059 L757.157 681.059 L756.598 681.059 L756.039 681.059 L755.479 681.059 L754.92 681.059 L754.361 681.059 L753.802 681.059 L753.242 681.059 L752.683 681.059 L752.124 681.059 L751.565 681.059 L751.005 681.059 L750.446 681.059 L749.887 681.059 L749.328 681.059 L748.768 681.059 L748.209 681.059 L747.65 681.059 L747.091 681.059 L746.531 681.059 L745.972 681.059 L745.413 681.059 L744.854 681.059 L744.294 681.059 L743.735 681.059 L743.176 681.059 L742.617 681.059 L742.057 681.059 L741.498 681.059 L740.939 681.059 L740.38 681.059 L739.82 681.059 L739.261 681.059 L738.702 681.059 L738.143 681.059 L737.583 681.059 L737.024 681.059 L736.465 681.059 L735.906 681.059 L735.346 681.059 L734.787 681.059 L734.228 681.059 L733.669 681.059 L733.109 681.059 L732.55 681.059 L731.991 681.059 L731.432 681.059 L730.872 681.059 L730.313 681.059 L729.754 681.059 L729.195 681.059 L728.635 681.059 L728.076 681.059 L727.517 681.059 L726.958 681.059 L726.398 681.059 L725.839 681.059 L725.28 681.059 L724.721 681.059 L724.161 681.059 L723.602 681.059 L723.043 681.059 L722.484 681.059 L721.924 681.059 L721.365 681.059 L720.806 681.059 L720.247 681.059  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.52 720.806,685.52 721.365,685.52 721.924,685.52 722.484,685.52 723.043,685.52 723.602,685.52 724.161,685.52 724.721,685.52 725.28,685.52 725.839,685.52 726.398,685.52 726.958,685.52 727.517,685.52 728.076,685.52 728.635,685.52 729.195,685.52 729.754,685.52 730.313,685.52 730.872,685.52 731.432,685.52 731.991,685.52 732.55,685.52 733.109,685.52 733.669,685.52 734.228,685.52 734.787,685.52 735.346,685.52 735.906,685.52 736.465,685.52 737.024,685.52 737.583,685.52 738.143,685.52 738.702,685.52 739.261,685.52 739.82,685.52 740.38,685.52 740.939,685.52 741.498,685.52 742.057,685.52 742.617,685.52 743.176,685.52 743.735,685.52 744.294,685.52 744.854,685.52 745.413,685.52 745.972,685.52 746.531,685.52 747.091,685.52 747.65,685.52 748.209,685.52 748.768,685.52 749.328,685.52 749.887,685.52 750.446,685.52 751.005,685.52 751.565,685.52 752.124,685.52 752.683,685.52 753.242,685.52 753.802,685.52 754.361,685.52 754.92,685.52 755.479,685.52 756.039,685.52 756.598,685.52 757.157,685.52 757.716,685.52 758.276,685.52 758.835,685.52 759.394,685.52 759.953,685.52 760.513,685.52 761.072,685.52 761.631,685.52 762.19,685.52 762.75,685.52 763.309,685.52 763.868,685.52 764.427,685.52 764.987,685.52 765.546,685.52 766.105,685.52 766.664,685.52 767.224,685.52 767.783,685.52 768.342,685.52 768.901,685.52 769.461,685.52 770.02,685.52 770.579,685.52 771.138,685.52 771.698,685.52 772.257,685.52 772.816,685.52 773.375,685.52 773.935,685.52 774.494,685.52 775.053,685.52 775.612,685.52 776.172,685.52 776.731,685.52 777.29,685.52 777.849,685.52 778.409,685.52 778.968,685.52 779.527,685.52 780.086,685.52 780.646,685.52 781.205,685.52 781.764,685.52 782.323,685.52 782.883,685.52 783.442,685.52 784.001,685.52 784.56,685.52 785.12,685.52 785.679,685.52 786.238,685.52 786.797,685.52 787.357,685.52 787.916,685.52 788.475,685.52 789.034,685.52 789.594,685.52 790.153,685.52 790.712,685.52 791.271,685.52 791.831,685.52 792.39,685.52 792.949,685.52 793.508,685.52 794.068,685.52 794.627,685.52 795.186,685.52 795.745,685.52 796.305,685.52 796.864,685.52 797.423,685.52 797.982,685.52 798.542,685.52 799.101,685.52 799.66,685.52 800.219,685.52 800.779,685.52 801.338,685.52 801.897,685.52 802.456,685.52 803.016,685.52 803.575,685.52 804.134,685.52 804.693,685.52 805.253,685.52 805.812,685.52 806.371,685.52 806.931,685.52 807.49,685.52 808.049,685.52 808.608,685.52 809.168,685.52 809.727,685.52 810.286,685.52 810.845,685.52 811.405,685.52 811.964,685.52 812.523,685.52 813.082,685.52 813.642,685.52 814.201,685.52 814.76,685.52 815.319,685.52 815.879,685.52 816.438,685.52 816.997,685.52 817.556,685.52 818.116,685.52 818.675,685.52 819.234,685.52 819.793,685.52 820.353,685.52 820.912,685.52 821.471,685.52 822.03,685.52 822.59,685.52 823.149,685.52 823.708,685.52 824.267,685.52 824.827,685.52 825.386,685.52 825.945,685.52 826.504,685.52 827.064,685.52 827.623,685.52 828.182,685.52 828.741,685.52 829.301,685.52 829.86,685.52 830.419,685.52 830.978,685.52 831.538,685.52 832.097,685.52 832.656,685.52 833.215,685.52 833.775,685.52 834.334,685.52 834.893,685.52 835.452,685.52 836.012,685.52 836.571,685.52 837.13,685.52 837.689,685.52 838.249,685.52 838.808,685.52 839.367,685.52 839.926,685.52 840.486,685.52 841.045,685.52 841.604,685.52 842.163,685.52 842.723,685.52 843.282,685.52 843.841,685.52 844.4,685.52 844.96,685.52 845.519,685.52 846.078,685.52 846.637,685.52 847.197,685.52 847.756,685.52 848.315,685.52 848.874,685.52 849.434,685.52 849.993,685.52 850.552,685.52 851.111,685.52 851.671,685.52 852.23,685.52 852.789,685.52 853.348,685.52 853.908,685.52 854.467,685.52 855.026,685.52 855.585,685.52 856.145,685.52 856.704,685.52 857.263,685.52 857.822,685.52 858.382,685.52 858.941,685.52 859.5,685.52 860.059,685.52 860.619,685.52 861.178,685.52 861.737,685.52 862.296,685.52 862.856,685.52 863.415,685.52 863.974,685.52 864.533,685.52 865.093,685.52 865.652,685.52 866.211,685.52 866.77,685.52 867.33,685.52 867.889,685.52 868.448,685.52 869.007,685.52 869.567,685.52 870.126,685.52 870.685,685.52 871.244,685.52 871.804,685.52 872.363,685.52 872.922,685.52 873.481,685.52 874.041,685.52 874.6,685.52 875.159,685.52 875.718,685.52 876.278,685.52 876.837,685.52 877.396,685.52 877.955,685.52 878.515,685.52 879.074,685.52 879.633,685.52 880.192,685.52 880.752,685.52 881.311,685.52 881.87,685.52 882.429,685.52 882.989,685.52 883.548,685.52 884.107,685.52 884.666,685.52 885.226,685.52 885.785,685.52 886.344,685.52 886.903,685.52 887.463,685.52 888.022,685.52 888.581,685.52 889.14,685.52 889.7,685.52 890.259,685.52 890.818,685.52 891.377,685.52 891.937,685.52 892.496,685.52 893.055,685.52 893.614,685.52 894.174,685.52 894.733,685.52 895.292,685.52 895.851,685.52 896.411,685.52 896.97,685.52 897.529,685.52 898.088,685.52 898.648,685.52 899.207,685.52 899.766,685.52 900.325,685.52 900.885,685.52 901.444,685.52 902.003,685.52 902.562,685.52 903.122,685.52 903.681,685.52 904.24,685.52 904.799,685.52 905.359,685.52 905.918,685.52 906.477,685.52 907.036,685.52 907.596,685.52 908.155,685.52 908.714,685.52 909.273,685.52 909.833,685.52 910.392,685.52 910.951,685.52 911.51,685.52 912.07,685.52 912.629,685.52 913.188,685.52 913.747,685.52 914.307,685.52 914.866,685.52 915.425,685.52 915.984,685.52 916.544,685.52 917.103,685.52 917.662,685.52 918.221,685.52 918.781,685.52 919.34,685.52 919.899,685.52 920.458,685.52 921.018,685.52 921.577,685.52 922.136,685.52 922.695,685.52 923.255,685.52 923.814,685.52 924.373,685.52 924.932,685.52 925.492,685.52 926.051,685.52 926.61,685.52 927.169,685.52 927.729,685.52 928.288,685.52 928.847,685.52 929.406,685.52 929.966,685.52 930.525,685.52 931.084,685.52 931.644,685.52 932.203,685.52 932.762,685.52 933.321,685.52 933.881,685.52 934.44,685.52 934.999,685.52 935.558,685.52 936.118,685.52 936.677,685.52 937.236,685.52 937.795,685.52 938.355,685.52 938.914,685.52 939.473,685.52 940.032,685.52 940.592,685.52 941.151,685.52 941.71,685.52 942.269,685.52 942.829,685.52 943.388,685.52 943.947,685.52 944.506,685.52 945.066,685.52 945.625,685.52 946.184,685.52 946.743,685.52 947.303,685.52 947.862,685.52 948.421,685.52 948.98,685.52 949.54,685.52 950.099,685.52 950.658,685.52 951.217,685.52 951.777,685.52 952.336,685.52 952.895,685.52 953.454,685.52 954.014,685.52 954.573,685.52 955.132,685.52 955.691,685.52 956.251,685.52 956.81,685.52 957.369,685.52 957.928,685.52 958.488,685.52 959.047,685.52 959.606,685.52 960.165,685.52 960.725,685.52 961.284,685.52 961.843,685.52 962.402,685.52 962.962,685.52 963.521,685.52 964.08,685.52 964.639,685.52 965.199,685.52 965.758,685.52 966.317,685.52 966.876,685.52 967.436,685.52 967.995,685.52 968.554,685.52 969.113,685.52 969.673,685.52 970.232,685.52 970.791,685.52 971.35,685.52 971.91,685.52 972.469,685.52 973.028,685.52 973.587,685.52 974.147,685.52 974.706,685.52 975.265,685.52 975.824,685.52 976.384,685.52 976.943,685.52 977.502,685.52 978.061,685.52 978.621,685.52 979.18,685.52 979.739,685.52 980.298,685.52 980.858,685.52 981.417,685.52 981.976,685.52 982.535,685.52 983.095,685.52 983.654,685.52 984.213,685.52 984.772,685.52 985.332,685.52 985.891,685.52 986.45,685.52 987.009,685.52 987.569,685.52 988.128,685.52 988.687,685.52 989.246,685.52 989.806,685.52 990.365,685.52 990.924,685.52 991.483,685.52 992.043,685.52 992.602,685.52 993.161,685.52 993.72,685.52 994.28,685.52 994.839,685.52 995.398,685.52 995.957,685.52 996.517,685.52 997.076,685.52 997.635,685.52 998.194,685.52 998.754,685.52 999.313,685.52 999.872,685.52 1000.43,685.52 1000.99,685.52 1001.55,685.52 1002.11,685.52 1002.67,685.52 1003.23,685.52 1003.79,685.52 1004.35,685.52 1004.91,685.52 1005.46,685.52 1006.02,685.52 1006.58,685.52 1007.14,685.52 1007.7,685.52 1008.26,685.52 1008.82,685.52 1009.38,685.52 1009.94,685.52 1010.5,685.52 1011.06,685.52 1011.62,685.52 1012.18,685.52 1012.73,685.52 1013.29,685.52 1013.85,685.52 1014.41,685.52 1014.97,685.52 1015.53,685.52 1016.09,685.52 1016.65,685.52 1017.21,685.52 1017.77,685.52 1018.33,685.52 1018.89,685.52 1019.45,685.52 1020.01,685.52 1020.56,685.52 1021.12,685.52 1021.68,685.52 1022.24,685.52 1022.8,685.52 1023.36,685.52 1023.92,685.52 1024.48,685.52 1025.04,685.52 1025.6,685.52 1026.16,685.52 1026.72,685.52 1027.28,685.52 1027.83,685.52 1028.39,685.52 1028.95,685.52 1029.51,685.52 1030.07,685.52 1030.63,685.52 1031.19,685.52 1031.75,685.52 1032.31,685.52 1032.87,685.52 1033.43,685.52 1033.99,685.52 1034.55,685.52 1035.1,685.52 1035.66,685.52 1036.22,685.52 1036.78,685.52 1037.34,685.52 1037.9,685.52 1038.46,685.52 1039.02,685.52 1039.58,685.52 1040.14,685.52 1040.7,685.52 1041.26,685.52 1041.82,685.52 1042.38,685.52 1042.93,685.52 1043.49,685.52 1044.05,685.52 1044.61,685.52 1045.17,685.52 1045.73,685.52 1046.29,685.52 1046.85,685.52 1047.41,685.52 1047.97,685.52 1048.53,685.52 1049.09,685.52 1049.65,685.52 1050.2,685.52 1050.76,685.52 1051.32,685.52 1051.88,685.52 1052.44,685.52 1053,685.52 1053.56,685.52 1054.12,685.52 1054.68,685.52 1055.24,685.52 1055.8,685.52 1056.36,685.52 1056.92,685.52 1057.48,685.52 1058.03,685.52 1058.59,685.52 1059.15,685.52 1059.71,685.52 1060.27,685.52 1060.83,685.52 1061.39,685.52 1061.95,685.52 1062.51,685.52 1063.07,685.52 1063.63,685.52 1064.19,685.52 1064.75,685.52 1065.3,685.52 1065.86,685.52 1066.42,685.52 1066.98,685.52 1067.54,685.52 1068.1,685.52 1068.66,685.52 1069.22,685.52 1069.78,685.52 1070.34,685.52 1070.9,685.52 1071.46,685.52 1072.02,685.52 1072.57,685.52 1073.13,685.52 1073.69,685.52 1074.25,685.52 1074.81,685.52 1075.37,685.52 1075.93,685.52 1076.49,685.52 1077.05,685.52 1077.61,685.52 1078.17,685.52 1078.73,685.52 1079.29,685.52 1079.85,685.52 1080.4,685.52 1080.96,685.52 1081.52,685.52 1082.08,685.52 1082.64,685.52 1083.2,685.52 1083.76,685.52 1084.32,685.52 1084.88,685.52 1085.44,685.52 1086,685.52 1086.56,685.52 1087.12,685.52 1087.67,685.52 1088.23,685.52 1088.79,685.52 1089.35,685.52 1089.91,685.52 1090.47,685.52 1091.03,685.52 1091.59,685.52 1092.15,685.52 1092.71,685.52 1093.27,685.52 1093.83,685.52 1094.39,685.52 1094.94,685.52 1095.5,685.52 1096.06,685.52 1096.62,685.52 1097.18,685.52 1097.74,685.52 1098.3,685.52 1098.86,685.52 1099.42,685.52 1099.98,685.52 1100.54,685.52 1101.1,685.52 1101.66,685.52 1102.22,685.52 1102.77,685.52 1103.33,685.52 1103.89,685.52 1104.45,685.52 1105.01,685.52 1105.57,685.52 1106.13,685.52 1106.69,685.52 1107.25,685.52 1107.81,685.52 1108.37,685.52 1108.93,685.52 1109.49,685.52 1110.04,685.52 1110.6,685.52 1111.16,685.52 1111.72,685.52 1112.28,685.52 1112.84,685.52 1113.4,685.52 1113.96,685.52 1114.52,685.52 1115.08,685.52 1115.64,685.52 1116.2,685.52 1116.76,685.52 1117.31,685.52 1117.87,685.52 1118.43,685.52 1118.99,685.52 1119.55,685.52 1120.11,685.52 1120.67,685.52 1121.23,685.52 1121.79,685.52 1122.35,685.52 1122.91,685.52 1123.47,685.52 1124.03,685.52 1124.59,685.52 1125.14,685.52 1125.7,685.52 1126.26,685.52 1126.82,685.52 1127.38,685.52 1127.94,685.52 1128.5,685.52 1129.06,685.52 1129.62,685.52 1130.18,685.52 1130.74,685.52 1131.3,685.52 1131.86,685.52 1132.41,685.52 1132.97,685.52 1133.53,685.52 1134.09,685.52 1134.65,685.52 1135.21,685.52 1135.77,685.52 1136.33,685.52 1136.89,685.52 1137.45,685.52 1138.01,685.52 1138.57,685.52 1139.13,685.52 1139.68,685.52 1140.24,685.52 1140.8,685.52 1141.36,685.52 1141.92,685.52 1142.48,685.52 1143.04,685.52 1143.6,685.52 1144.16,685.52 1144.72,685.52 1145.28,685.52 1145.84,685.52 1146.4,685.52 1146.96,685.52 1147.51,685.52 1148.07,685.52 1148.63,685.52 1149.19,685.52 1149.75,685.52 1150.31,685.52 1150.87,685.52 1151.43,685.52 1151.99,685.52 1152.55,685.52 1153.11,685.52 1153.67,685.52 1154.23,685.52 1154.78,685.52 1155.34,685.52 1155.9,685.52 1156.46,685.52 1157.02,685.52 1157.58,685.52 1158.14,685.52 1158.7,685.52 1159.26,685.52 1159.82,685.52 1160.38,685.52 1160.94,685.52 1161.5,685.52 1162.05,685.52 1162.61,685.52 1163.17,685.52 1163.73,685.52 1164.29,685.52 1164.85,685.52 1165.41,685.52 1165.97,685.52 1166.53,685.52 1167.09,685.52 1167.65,685.52 1168.21,685.52 1168.77,685.52 1169.33,685.52 1169.88,685.52 1170.44,685.52 1171,685.52 1171.56,685.52 1172.12,685.52 1172.68,685.52 1173.24,685.52 1173.8,685.52 1174.36,685.52 1174.92,685.52 1175.48,685.52 1176.04,685.52 1176.6,685.52 1177.15,685.52 1177.71,685.52 1178.27,685.52 1178.83,685.52 1179.39,685.52 1179.95,685.52 1180.51,685.52 1181.07,685.52 1181.63,685.52 1182.19,685.52 1182.75,685.52 1183.31,685.52 1183.87,685.52 1184.43,685.52 1184.98,685.52 1185.54,685.52 1186.1,685.52 1186.66,685.52 1187.22,685.52 1187.78,685.52 1188.34,685.52 1188.9,685.52 1189.46,685.52 1190.02,685.52 1190.58,685.52 1191.14,685.52 1191.7,685.52 1192.25,685.52 1192.81,685.52 1193.37,685.52 1193.93,685.52 1194.49,685.52 1195.05,685.52 1195.61,685.52 1196.17,685.52 1196.73,685.52 1197.29,685.52 1197.85,685.52 1198.41,685.52 1198.97,685.52 1199.52,685.52 1200.08,685.52 1200.64,685.52 1201.2,685.52 1201.76,685.52 1202.32,685.52 1202.88,685.52 1203.44,685.52 1204,685.52 1204.56,685.52 1205.12,685.52 1205.68,685.52 1206.24,685.52 1206.8,685.52 1207.35,685.52 1207.91,685.52 1208.47,685.52 1209.03,685.52 1209.59,685.52 1210.15,685.52 1210.71,685.52 1211.27,685.52 1211.83,685.52 1212.39,685.52 1212.95,685.52 1213.51,685.52 1214.07,685.52 1214.62,685.52 1215.18,685.52 1215.74,685.52 1216.3,685.52 1216.86,685.52 1217.42,685.52 1217.98,685.52 1218.54,685.52 1219.1,685.52 1219.66,685.52 1220.22,685.52 1220.78,685.52 1221.34,685.52 1221.89,685.52 1222.45,685.52 1223.01,685.52 1223.57,685.52 1224.13,685.52 1224.69,685.52 1225.25,685.52 1225.81,685.52 1226.37,685.52 1226.93,685.52 1227.49,685.52 1228.05,685.52 1228.61,685.52 1229.17,685.52 1229.72,685.52 1230.28,685.52 1230.84,685.52 1231.4,685.52 1231.96,685.52 1232.52,685.52 1233.08,685.52 1233.64,685.52 1234.2,685.52 1234.76,685.52 1235.32,685.52 1235.88,685.52 1236.44,685.52 1236.99,685.52 1237.55,685.52 1238.11,685.52 1238.67,685.52 1239.23,685.52 1239.79,685.52 1240.35,685.52 1240.91,685.52 1241.47,685.52 1242.03,685.52 1242.59,685.52 1243.15,685.52 1243.71,685.52 1244.26,685.52 1244.82,685.52 1245.38,685.52 1245.94,685.52 1246.5,685.52 1247.06,685.52 1247.62,685.52 1248.18,685.52 1248.74,685.52 1249.3,685.52 1249.86,685.52 1250.42,685.52 1250.98,685.52 1251.54,685.52 1252.09,685.52 1252.65,685.52 1253.21,685.52 1253.77,685.52 1254.33,685.52 1254.89,685.52 1255.45,685.52 1256.01,685.52 1256.57,685.52 1257.13,685.52 1257.69,685.52 1258.25,685.52 1258.81,685.52 1259.36,685.52 1259.92,685.52 1260.48,685.52 1261.04,685.52 1261.6,685.52 1262.16,685.52 1262.72,685.52 1263.28,685.52 1263.84,685.52 1264.4,685.52 1264.96,685.52 1265.52,685.52 1266.08,685.52 1266.63,685.52 1267.19,685.52 1267.75,685.52 1268.31,685.52 1268.87,685.52 1269.43,685.52 1269.99,685.52 1270.55,685.52 1271.11,685.52 1271.67,685.52 1272.23,685.52 1272.79,685.52 1273.35,685.52 1273.91,685.52 1274.46,685.52 1275.02,685.52 1275.58,685.52 1276.14,685.52 1276.7,685.52 1277.26,685.52 1277.82,685.52 1278.38,685.52 1278.94,685.52 1279.5,685.52 1280.06,685.52 1280.62,685.52 1281.18,685.52 1281.73,685.52 1282.29,685.52 1282.85,685.52 1283.41,685.52 1283.97,685.52 1284.53,685.52 1285.09,685.52 1285.65,685.52 1286.21,685.52 1286.77,685.52 1287.33,685.52 1287.89,685.52 1288.45,685.52 1289,685.52 1289.56,685.52 1290.12,685.52 1290.68,685.52 1291.24,685.52 1291.8,685.52 1292.36,685.52 1292.92,685.52 1293.48,685.52 1294.04,685.52 1294.6,685.52 1295.16,685.52 1295.72,685.52 1296.28,685.52 1296.83,685.52 1297.39,685.52 1297.95,685.52 1298.51,685.52 1299.07,685.52 1299.63,685.52 1300.19,685.52 1300.75,685.52 1301.31,685.52 1301.87,685.52 1302.43,685.52 1302.99,685.52 1303.55,685.52 1304.1,685.52 1304.66,685.52 1305.22,685.52 1305.78,685.52 1306.34,685.52 1306.9,685.52 1307.46,685.52 1308.02,685.52 1308.58,685.52 1309.14,685.52 1309.7,685.52 1310.26,685.52 1310.82,685.52 1311.38,685.52 1311.93,685.52 1312.49,685.52 1313.05,685.52 1313.61,685.52 1314.17,685.52 1314.73,685.52 1315.29,685.52 1315.85,685.52 1316.41,685.52 1316.97,685.52 1317.53,685.52 1318.09,685.52 1318.65,685.52 1319.2,685.52 1319.76,685.52 1320.32,685.52 1320.88,685.52 1321.44,685.52 1322,685.52 1322.56,685.52 1323.12,685.52 1323.68,685.52 1324.24,685.52 1324.8,685.52 1325.36,685.52 1325.92,685.52 1326.47,685.52 1327.03,685.52 1327.59,685.52 1328.15,685.52 1328.71,685.52 1329.27,685.52 1329.83,685.52 1330.39,685.52 1330.95,685.52 1331.51,685.52 1332.07,685.52 1332.63,685.52 1333.19,685.52 1333.75,685.52 1334.3,685.52 1334.86,685.52 1335.42,685.52 1335.98,685.52 1336.54,685.52 1337.1,685.52 1337.66,685.52 1338.22,685.52 1338.78,685.52 1339.34,685.52 1339.9,685.52 1340.46,685.52 1341.02,685.52 1341.57,685.52 1342.13,685.52 1342.69,685.52 1343.25,685.52 1343.81,685.52 1344.37,685.52 1344.93,685.52 1345.49,685.52 1346.05,685.52 1346.61,685.52 1347.17,685.52 1347.73,685.52 1348.29,685.52 1348.84,685.52 1349.4,685.52 1349.96,685.52 1350.52,685.52 1351.08,685.52 1351.64,685.52 1352.2,685.52 1352.76,685.52 1353.32,685.52 1353.88,685.52 1354.44,685.52 1355,685.52 1355.56,685.52 1356.12,685.52 1356.67,685.52 1357.23,685.52 1357.79,685.52 1358.35,685.52 1358.91,685.52 1359.47,685.52 1360.03,685.52 1360.59,685.52 1361.15,685.52 1361.71,685.52 1362.27,685.52 1362.83,685.52 1363.39,685.52 1363.94,685.52 1364.5,685.52 1365.06,685.52 1365.62,685.52 1366.18,685.52 1366.74,685.52 1367.3,685.52 1367.86,685.52 1368.42,685.52 1368.98,685.52 1369.54,685.52 1370.1,685.52 1370.66,685.52 1371.21,685.52 1371.77,685.52 1372.33,685.52 1372.89,685.52 1373.45,685.52 1374.01,685.52 1374.57,685.52 1375.13,685.52 1375.69,685.52 1376.25,685.52 1376.81,685.52 1377.37,685.52 1377.93,685.52 1378.49,685.52 1379.04,685.52 1379.6,685.52 1380.16,685.52 1380.72,685.52 1381.28,685.52 1381.84,685.52 1382.4,685.52 1382.96,685.52 1383.52,685.52 1384.08,685.52 1384.64,685.52 1385.2,685.52 1385.76,685.52 1386.31,685.52 1386.87,685.52 1387.43,685.52 1387.99,685.52 1388.55,685.52 1389.11,685.52 1389.67,685.52 1390.23,685.52 1390.79,685.52 1391.35,685.52 1391.91,685.52 1392.47,685.52 1393.03,685.52 1393.58,685.52 1394.14,685.52 1394.7,685.52 1395.26,685.52 1395.82,685.52 1396.38,685.52 1396.94,685.52 1397.5,685.52 1398.06,685.52 1398.62,685.52 1399.18,685.52 1399.74,685.52 1400.3,685.52 1400.86,685.52 1401.41,685.52 1401.97,685.52 1402.53,685.52 1403.09,685.52 1403.65,685.52 1404.21,685.52 1404.77,685.52 1405.33,685.52 1405.89,685.52 1406.45,685.52 1407.01,685.52 1407.57,685.52 1408.13,685.52 1408.68,685.52 1409.24,685.52 1409.8,685.52 1410.36,685.52 1410.92,685.52 1411.48,685.52 1412.04,685.52 1412.6,685.52 1413.16,685.52 1413.72,685.52 1414.28,685.52 1414.84,685.52 1415.4,685.52 1415.95,685.52 1416.51,685.52 1417.07,685.52 1417.63,685.52 1418.19,685.52 1418.75,685.52 1419.31,685.52 1419.87,685.52 1420.43,685.52 1420.99,685.52 1421.55,685.52 1422.11,685.52 1422.67,685.52 1423.23,685.52 1423.78,685.52 1424.34,685.52 1424.9,685.52 1425.46,685.52 1426.02,685.52 1426.58,685.52 1427.14,685.52 1427.7,685.52 1428.26,685.52 1428.82,685.52 1429.38,685.52 1429.94,685.52 1430.5,685.52 1431.05,685.52 1431.61,685.52 1432.17,685.52 1432.73,685.52 1433.29,685.52 1433.85,685.52 1434.41,685.52 1434.97,685.52 1435.53,685.52 1436.09,685.52 1436.65,685.52 1437.21,685.52 1437.77,685.52 1438.33,685.52 1438.88,685.52 1439.44,685.52 1440,685.52 1440.56,685.52 1441.12,685.52 1441.68,685.52 1442.24,685.52 1442.8,685.52 1443.36,685.52 1443.92,685.52 1444.48,685.52 1445.04,685.52 1445.6,685.52 1446.15,685.52 1446.71,685.52 1447.27,685.52 1447.83,685.52 1448.39,685.52 1448.95,685.52 1449.51,685.52 1450.07,685.52 1450.63,685.52 1451.19,685.52 1451.75,685.52 1452.31,685.52 1452.87,685.52 1453.42,685.52 1453.98,685.52 1454.54,685.52 1455.1,685.52 1455.66,685.52 1456.22,685.52 1456.78,685.52 1457.34,685.52 1457.9,685.52 1458.46,685.52 1459.02,685.52 1459.58,685.52 1460.14,685.52 1460.7,685.52 1461.25,685.52 1461.81,685.52 1462.37,685.52 1462.93,685.52 1463.49,685.52 1464.05,685.52 1464.61,685.52 1465.17,685.52 1465.73,685.52 1466.29,685.52 1466.85,685.52 1467.41,685.52 1467.97,685.52 1468.52,685.52 1469.08,685.52 1469.64,685.52 1470.2,685.52 1470.76,685.52 1471.32,685.52 1471.88,685.52 1472.44,685.52 1473,685.52 1473.56,685.52 1474.12,685.52 1474.68,685.52 1475.24,685.52 1475.79,685.52 1476.35,685.52 1476.91,685.52 1477.47,685.52 1478.03,685.52 1478.59,685.52 1479.15,685.52 1479.71,685.52 1480.27,685.52 1480.83,685.52 1481.39,685.52 1481.95,685.52 1482.51,685.52 1483.07,685.52 1483.62,685.52 1484.18,685.52 1484.74,685.52 1485.3,685.52 1485.86,685.52 1486.42,685.52 1486.98,685.52 1487.54,685.52 1488.1,685.52 1488.66,685.52 1489.22,685.52 1489.78,685.52 1490.34,685.52 1490.89,685.52 1491.45,685.52 1492.01,685.52 1492.57,685.52 1493.13,685.52 1493.69,685.52 1494.25,685.52 1494.81,685.52 1495.37,685.52 1495.93,685.52 1496.49,685.52 1497.05,685.52 1497.61,685.52 1498.16,685.52 1498.72,685.52 1499.28,685.52 1499.84,685.52 1500.4,685.52 1500.96,685.52 1501.52,685.52 1502.08,685.52 1502.64,685.52 1503.2,685.52 1503.76,685.52 1504.32,685.52 1504.88,685.52 1505.44,685.52 1505.99,685.52 1506.55,685.52 1507.11,685.52 1507.67,685.52 1508.23,685.52 1508.79,685.52 1509.35,685.52 1509.91,685.52 1510.47,685.52 1511.03,685.52 1511.59,685.52 1512.15,685.52 1512.71,685.52 1513.26,685.52 1513.82,685.52 1514.38,685.52 1514.94,685.52 1515.5,685.52 1516.06,685.52 1516.62,685.52 1517.18,685.52 1517.74,685.52 1518.3,685.52 1518.86,685.52 1519.42,685.52 1519.98,685.52 1520.53,685.52 1521.09,685.52 1521.65,685.52 1522.21,685.52 1522.77,685.52 1523.33,685.52 1523.89,685.52 1524.45,685.52 1525.01,685.52 1525.57,685.52 1526.13,685.52 1526.69,685.52 1527.25,685.52 1527.81,685.52 1528.36,685.52 1528.92,685.52 1529.48,685.52 1530.04,685.52 1530.6,685.52 1531.16,685.52 1531.72,685.52 1532.28,685.52 1532.84,685.52 1533.4,685.52 1533.96,685.52 1534.52,685.52 1535.08,685.52 1535.63,685.52 1536.19,685.52 1536.75,685.52 1537.31,685.52 1537.87,685.52 1538.43,685.52 1538.99,685.52 1539.55,685.52 1540.11,685.52 1540.67,685.52 1541.23,685.52 1541.79,685.52 1542.35,685.52 1542.9,685.52 1543.46,685.52 1544.02,685.52 1544.58,685.52 1545.14,685.52 1545.7,685.52 1546.26,685.52 1546.82,685.52 1547.38,685.52 1547.94,685.52 1548.5,685.52 1549.06,685.52 1549.62,685.52 1550.18,685.52 1550.73,685.52 1551.29,685.52 1551.85,685.52 1552.41,685.52 1552.97,685.52 1553.53,685.52 1554.09,685.52 1554.65,685.52 1555.21,685.52 1555.77,685.52 1556.33,685.52 1556.89,685.52 1557.45,685.52 1558,685.52 1558.56,685.52 1559.12,685.52 1559.68,685.52 1560.24,685.52 1560.8,685.52 1561.36,685.52 1561.92,685.52 1562.48,685.52 1563.04,685.52 1563.6,685.52 1564.16,685.52 1564.72,685.52 1565.28,685.52 1565.83,685.52 1566.39,685.52 1566.95,685.52 1567.51,685.52 1568.07,685.52 1568.63,685.52 1569.19,685.52 1569.75,685.52 1570.31,685.52 1570.87,685.52 1571.43,685.52 1571.99,685.52 1572.55,685.52 1573.1,685.52 1573.66,685.52 1574.22,685.52 1574.78,685.52 1575.34,685.52 1575.9,685.52 1576.46,685.52 1577.02,685.52 1577.58,685.52 1578.14,685.52 1578.7,685.52 1579.26,685.52 1579.82,685.52 1580.37,685.52 1580.93,685.52 1581.49,685.52 1582.05,685.52 1582.61,685.52 1583.17,685.52 1583.73,685.52 1584.29,685.52 1584.85,685.52 1585.41,685.52 1585.97,685.52 1586.53,685.52 1587.09,685.52 1587.65,685.52 1588.2,685.52 1588.76,685.52 1589.32,685.52 1589.88,685.52 1590.44,685.52 1591,685.52 1591.56,685.52 1592.12,685.52 1592.68,685.52 1593.24,685.52 1593.8,685.52 1594.36,685.52 1594.92,685.52 1595.47,685.52 1596.03,685.52 1596.59,685.52 1597.15,685.52 1597.71,685.52 1598.27,685.52 1598.83,685.52 1599.39,685.52 1599.95,685.52 1600.51,685.52 1601.07,685.52 1601.63,685.52 1602.19,685.52 1602.74,685.52 1603.3,685.52 1603.86,685.52 1604.42,685.52 1604.98,685.52 1605.54,685.52 1606.1,685.52 1606.66,685.52 1607.22,685.52 1607.78,685.52 1608.34,685.52 1608.9,685.52 1609.46,685.52 1610.02,685.52 1610.57,685.52 1611.13,685.52 1611.69,685.52 1612.25,685.52 1612.81,685.52 1613.37,685.52 1613.93,685.52 1614.49,685.52 1615.05,685.52 1615.61,685.52 1616.17,685.52 1616.73,685.52 1617.29,685.52 1617.84,685.52 1618.4,685.52 1618.96,685.52 1619.52,685.52 1620.08,685.52 1620.64,685.52 1621.2,685.52 1621.76,685.52 1622.32,685.52 1622.88,685.52 1623.44,685.52 1624,685.52 1624.56,685.52 1625.11,685.52 1625.67,685.52 1626.23,685.52 1626.79,685.52 1627.35,685.52 1627.91,685.52 1628.47,685.52 1629.03,685.52 1629.59,685.52 1630.15,685.52 1630.71,685.52 1631.27,685.52 1631.83,685.52 1632.39,685.52 1632.94,685.52 1633.5,685.52 1634.06,685.52 1634.62,685.52 1635.18,685.52 1635.74,685.52 1636.3,685.52 1636.86,685.52 1637.42,685.52 1637.98,685.52 1638.54,685.52 1639.1,685.52 1639.66,685.52 1640.21,685.52 1640.77,685.52 1641.33,685.52 1641.89,685.52 1642.45,685.52 1643.01,685.52 1643.57,685.52 1644.13,685.52 1644.69,685.52 1645.25,685.52 1645.81,685.52 1646.37,685.52 1646.93,685.52 1647.48,685.52 1648.04,685.52 1648.6,685.52 1649.16,685.52 1649.72,685.52 1650.28,685.52 1650.84,685.52 1651.4,685.52 1651.96,685.52 1652.52,685.52 1653.08,685.52 1653.64,685.52 1654.2,685.52 1654.76,685.52 1655.31,685.52 1655.87,685.52 1656.43,685.52 1656.99,685.52 1657.55,685.52 1658.11,685.52 1658.67,685.52 1659.23,685.52 1659.79,685.52 1660.35,685.52 1660.91,685.52 1661.47,685.52 1662.03,685.52 1662.58,685.52 1663.14,685.52 1663.7,685.52 1664.26,685.52 1664.82,685.52 1665.38,685.52 1665.94,685.52 1666.5,685.52 1667.06,685.52 1667.62,685.52 1668.18,685.52 1668.74,685.52 1669.3,685.52 1669.85,685.52 1670.41,685.52 1670.97,685.52 1671.53,685.52 1672.09,685.52 1672.65,685.52 1673.21,685.52 1673.77,685.52 1674.33,685.52 1674.89,685.52 1675.45,685.52 1676.01,685.52 1676.57,685.52 1677.13,685.52 1677.68,685.52 1678.24,685.52 1678.8,685.52 1679.36,685.52 1679.92,685.52 1680.48,685.52 1681.04,685.52 1681.6,685.52 1682.16,685.52 1682.72,685.52 1683.28,685.52 1683.84,685.52 1684.4,685.52 1684.95,685.52 1685.51,685.52 1686.07,685.52 1686.63,685.52 1687.19,685.52 1687.75,685.52 1688.31,685.52 1688.87,685.52 1689.43,685.52 1689.99,685.52 1690.55,685.52 1691.11,685.52 1691.67,685.52 1692.23,685.52 1692.78,685.52 1693.34,685.52 1693.9,685.52 1694.46,685.52 1695.02,685.52 1695.58,685.52 1696.14,685.52 1696.7,685.52 1697.26,685.52 1697.82,685.52 1698.38,685.52 1698.94,685.52 1699.5,685.52 1700.05,685.52 1700.61,685.52 1701.17,685.52 1701.73,685.52 1702.29,685.52 1702.85,685.52 1703.41,685.52 1703.97,685.52 1704.53,685.52 1705.09,685.52 1705.65,685.52 1706.21,685.52 1706.77,685.52 1707.32,685.52 1707.88,685.52 1708.44,685.52 1709,685.52 1709.56,685.52 1710.12,685.52 1710.68,685.52 1711.24,685.52 1711.8,685.52 1712.36,685.52 1712.92,685.52 1713.48,685.52 1714.04,685.52 1714.6,685.52 1715.15,685.52 1715.71,685.52 1716.27,685.52 1716.83,685.52 1717.39,685.52 1717.95,685.52 1718.51,685.52 1719.07,685.52 1719.63,685.52 1720.19,685.52 1720.75,685.52 1721.31,685.52 1721.87,685.52 1722.42,685.52 1722.98,685.52 1723.54,685.52 1724.1,685.52 1724.66,685.52 1725.22,685.52 1725.78,685.52 1726.34,685.52 1726.9,685.52 1727.46,685.52 1728.02,685.52 1728.58,685.52 1729.14,685.52 1729.69,685.52 1730.25,685.52 1730.81,685.52 1731.37,685.52 1731.93,685.52 1732.49,685.52 1733.05,685.52 1733.61,685.52 1734.17,685.52 1734.73,685.52 1735.29,685.52 1735.85,685.52 1736.41,685.52 1736.97,685.52 1737.52,685.52 1738.08,685.52 1738.64,685.52 1739.2,685.52 1739.76,685.52 1740.32,685.52 1740.88,685.52 1741.44,685.52 1742,685.52 1742.56,685.52 1743.12,685.52 1743.68,685.52 1744.24,685.52 1744.79,685.52 1745.35,685.52 1745.91,685.52 1746.47,685.52 1747.03,685.52 1747.59,685.52 1748.15,685.52 1748.71,685.52 1749.27,685.52 1749.83,685.52 1750.39,685.52 1750.95,685.52 1751.51,685.52 1752.06,685.52 1752.62,685.52 1753.18,685.52 1753.74,685.52 1754.3,685.52 1754.86,685.52 1755.42,685.52 1755.98,685.52 1756.54,685.52 1757.1,685.52 1757.66,685.52 1758.22,685.52 1758.78,685.52 1759.34,685.52 1759.89,685.52 1760.45,685.52 1761.01,685.52 1761.57,685.52 1762.13,685.52 1762.69,685.52 1763.25,685.52 1763.81,685.52 1764.37,685.52 1764.93,685.52 1765.49,685.52 1766.05,685.52 1766.61,685.52 1767.16,685.52 1767.72,685.52 1768.28,685.52 1768.84,685.52 1769.4,685.52 1769.96,685.52 1770.52,685.52 1771.08,685.52 1771.64,685.52 1772.2,685.52 1772.76,685.52 1773.32,685.52 1773.88,685.52 1774.43,685.52 1774.99,685.52 1775.55,685.52 1776.11,685.52 1776.67,685.52 1777.23,685.52 1777.79,685.52 1778.35,685.52 1778.91,685.52 1779.47,685.52 1780.03,685.52 1780.59,685.52 1781.15,685.52 1781.71,685.52 1782.26,685.52 1782.82,685.52 1783.38,685.52 1783.94,685.52 1784.5,685.52 1785.06,685.52 1785.62,685.52 1786.18,685.52 1786.74,685.52 1787.3,685.52 1787.86,685.52 1788.42,685.52 1788.98,685.52 1789.53,685.52 1790.09,685.52 1790.65,685.52 1791.21,685.52 1791.77,685.52 1792.33,685.52 1792.89,685.52 1793.45,685.52 1794.01,685.52 1794.57,685.52 1795.13,685.52 1795.69,685.52 1796.25,685.52 1796.8,685.52 1797.36,685.52 1797.92,685.52 1798.48,685.52 1799.04,685.52 1799.6,685.52 1800.16,685.52 1800.72,685.52 1801.28,685.52 1801.84,685.52 1802.4,685.52 1802.96,685.52 1803.52,685.52 1804.08,685.52 1804.63,685.52 1805.19,685.52 1805.75,685.52 1806.31,685.52 1806.87,685.52 1807.43,685.52 1807.99,685.52 1808.55,685.52 1809.11,685.52 1809.67,685.52 1810.23,685.52 1810.79,685.52 1811.35,685.52 1811.9,685.52 1812.46,685.52 1813.02,685.52 1813.58,685.52 1814.14,685.52 1814.7,685.52 1815.26,685.52 1815.82,685.52 1816.38,685.52 1816.94,685.52 1817.5,685.52 1818.06,685.52 1818.62,685.52 1819.18,685.52 1819.73,685.52 1820.29,685.52 1820.85,685.52 1821.41,685.52 1821.97,685.52 1822.53,685.52 1823.09,685.52 1823.65,685.52 1824.21,685.52 1824.77,685.52 1825.33,685.52 1825.89,685.52 1826.45,685.52 1827,685.52 1827.56,685.52 1828.12,685.52 1828.68,685.52 1829.24,685.52 1829.8,685.52 1830.36,685.52 1830.92,685.52 1831.48,685.52 1832.04,685.52 1832.6,685.52 1833.16,685.52 1833.72,685.52 1834.27,685.52 1834.83,685.52 1835.39,685.52 1835.95,685.52 1836.51,685.52 1837.07,685.52 1837.63,685.52 1838.19,685.52 \"/>\n<path clip-path=\"url(#clip523)\" d=\"M720.247 684.57 L720.806 684.57 L721.365 684.57 L721.924 684.57 L722.484 684.57 L723.043 684.57 L723.602 684.57 L724.161 684.57 L724.721 684.57 L725.28 684.57 L725.839 684.57 L726.398 684.57 L726.958 684.57 L727.517 684.57 L728.076 684.57 L728.635 684.57 L729.195 684.57 L729.754 684.57 L730.313 684.57 L730.872 684.57 L731.432 684.57 L731.991 684.57 L732.55 684.57 L733.109 684.57 L733.669 684.57 L734.228 684.57 L734.787 684.57 L735.346 684.57 L735.906 684.57 L736.465 684.57 L737.024 684.57 L737.583 684.57 L738.143 684.57 L738.702 684.57 L739.261 684.57 L739.82 684.57 L740.38 684.57 L740.939 684.57 L741.498 684.57 L742.057 684.57 L742.617 684.57 L743.176 684.57 L743.735 684.57 L744.294 684.57 L744.854 684.57 L745.413 684.57 L745.972 684.57 L746.531 684.57 L747.091 684.57 L747.65 684.57 L748.209 684.57 L748.768 684.57 L749.328 684.57 L749.887 684.57 L750.446 684.57 L751.005 684.57 L751.565 684.57 L752.124 684.57 L752.683 684.57 L753.242 684.57 L753.802 684.57 L754.361 684.57 L754.92 684.57 L755.479 684.57 L756.039 684.57 L756.598 684.57 L757.157 684.57 L757.716 684.57 L758.276 684.57 L758.835 684.57 L759.394 684.57 L759.953 684.57 L760.513 684.57 L761.072 684.57 L761.631 684.57 L762.19 684.57 L762.75 684.57 L763.309 684.57 L763.868 684.57 L764.427 684.57 L764.987 684.57 L765.546 684.57 L766.105 684.57 L766.664 684.57 L767.224 684.57 L767.783 684.57 L768.342 684.57 L768.901 684.57 L769.461 684.57 L770.02 684.57 L770.579 684.57 L771.138 684.57 L771.698 684.57 L772.257 684.57 L772.816 684.57 L773.375 684.57 L773.935 684.57 L774.494 684.57 L775.053 684.57 L775.612 684.57 L776.172 684.57 L776.731 684.57 L777.29 684.57 L777.849 684.57 L778.409 684.57 L778.968 684.57 L779.527 684.57 L780.086 684.57 L780.646 684.57 L781.205 684.57 L781.764 684.57 L782.323 684.57 L782.883 684.57 L783.442 684.57 L784.001 684.57 L784.56 684.57 L785.12 684.57 L785.679 684.57 L786.238 684.57 L786.797 684.57 L787.357 684.57 L787.916 684.57 L788.475 684.57 L789.034 684.57 L789.594 684.57 L790.153 684.57 L790.712 684.57 L791.271 684.57 L791.831 684.57 L792.39 684.57 L792.949 684.57 L793.508 684.57 L794.068 684.57 L794.627 684.57 L795.186 684.57 L795.745 684.57 L796.305 684.57 L796.864 684.57 L797.423 684.57 L797.982 684.57 L798.542 684.57 L799.101 684.57 L799.66 684.57 L800.219 684.57 L800.779 684.57 L801.338 684.57 L801.897 684.57 L802.456 684.57 L803.016 684.57 L803.575 684.57 L804.134 684.57 L804.693 684.57 L805.253 684.57 L805.812 684.57 L806.371 684.57 L806.931 684.57 L807.49 684.57 L808.049 684.57 L808.608 684.57 L809.168 684.57 L809.727 684.57 L810.286 684.57 L810.845 684.57 L811.405 684.57 L811.964 684.57 L812.523 684.57 L813.082 684.57 L813.642 684.57 L814.201 684.57 L814.76 684.57 L815.319 684.57 L815.879 684.57 L816.438 684.57 L816.997 684.57 L817.556 684.57 L818.116 684.57 L818.675 684.57 L819.234 684.57 L819.793 684.57 L820.353 684.57 L820.912 684.57 L821.471 684.57 L822.03 684.57 L822.59 684.57 L823.149 684.57 L823.708 684.57 L824.267 684.57 L824.827 684.57 L825.386 684.57 L825.945 684.57 L826.504 684.57 L827.064 684.57 L827.623 684.57 L828.182 684.57 L828.741 684.57 L829.301 684.57 L829.86 684.57 L830.419 684.57 L830.978 684.57 L831.538 684.57 L832.097 684.57 L832.656 684.57 L833.215 684.57 L833.775 684.57 L834.334 684.57 L834.893 684.57 L835.452 684.57 L836.012 684.57 L836.571 684.57 L837.13 684.57 L837.689 684.57 L838.249 684.57 L838.808 684.57 L839.367 684.57 L839.926 684.57 L840.486 684.57 L841.045 684.57 L841.604 684.57 L842.163 684.57 L842.723 684.57 L843.282 684.57 L843.841 684.57 L844.4 684.57 L844.96 684.57 L845.519 684.57 L846.078 684.57 L846.637 684.57 L847.197 684.57 L847.756 684.57 L848.315 684.57 L848.874 684.57 L849.434 684.57 L849.993 684.57 L850.552 684.57 L851.111 684.57 L851.671 684.57 L852.23 684.57 L852.789 684.57 L853.348 684.57 L853.908 684.57 L854.467 684.57 L855.026 684.57 L855.585 684.57 L856.145 684.57 L856.704 684.57 L857.263 684.57 L857.822 684.57 L858.382 684.57 L858.941 684.57 L859.5 684.57 L860.059 684.57 L860.619 684.57 L861.178 684.57 L861.737 684.57 L862.296 684.57 L862.856 684.57 L863.415 684.57 L863.974 684.57 L864.533 684.57 L865.093 684.57 L865.652 684.57 L866.211 684.57 L866.77 684.57 L867.33 684.57 L867.889 684.57 L868.448 684.57 L869.007 684.57 L869.567 684.57 L870.126 684.57 L870.685 684.57 L871.244 684.57 L871.804 684.57 L872.363 684.57 L872.922 684.57 L873.481 684.57 L874.041 684.57 L874.6 684.57 L875.159 684.57 L875.718 684.57 L876.278 684.57 L876.837 684.57 L877.396 684.57 L877.955 684.57 L878.515 684.57 L879.074 684.57 L879.633 684.57 L880.192 684.57 L880.752 684.57 L881.311 684.57 L881.87 684.57 L882.429 684.57 L882.989 684.57 L883.548 684.57 L884.107 684.57 L884.666 684.57 L885.226 684.57 L885.785 684.57 L886.344 684.57 L886.903 684.57 L887.463 684.57 L888.022 684.57 L888.581 684.57 L889.14 684.57 L889.7 684.57 L890.259 684.57 L890.818 684.57 L891.377 684.57 L891.937 684.57 L892.496 684.57 L893.055 684.57 L893.614 684.57 L894.174 684.57 L894.733 684.57 L895.292 684.57 L895.851 684.57 L896.411 684.57 L896.97 684.57 L897.529 684.57 L898.088 684.57 L898.648 684.57 L899.207 684.57 L899.766 684.57 L900.325 684.57 L900.885 684.57 L901.444 684.57 L902.003 684.57 L902.562 684.57 L903.122 684.57 L903.681 684.57 L904.24 684.57 L904.799 684.57 L905.359 684.57 L905.918 684.57 L906.477 684.57 L907.036 684.57 L907.596 684.57 L908.155 684.57 L908.714 684.57 L909.273 684.57 L909.833 684.57 L910.392 684.57 L910.951 684.57 L911.51 684.57 L912.07 684.57 L912.629 684.57 L913.188 684.57 L913.747 684.57 L914.307 684.57 L914.866 684.57 L915.425 684.57 L915.984 684.57 L916.544 684.57 L917.103 684.57 L917.662 684.57 L918.221 684.57 L918.781 684.57 L919.34 684.57 L919.899 684.57 L920.458 684.57 L921.018 684.57 L921.577 684.57 L922.136 684.57 L922.695 684.57 L923.255 684.57 L923.814 684.57 L924.373 684.57 L924.932 684.57 L925.492 684.57 L926.051 684.57 L926.61 684.57 L927.169 684.57 L927.729 684.57 L928.288 684.57 L928.847 684.57 L929.406 684.57 L929.966 684.57 L930.525 684.57 L931.084 684.57 L931.644 684.57 L932.203 684.57 L932.762 684.57 L933.321 684.57 L933.881 684.57 L934.44 684.57 L934.999 684.57 L935.558 684.57 L936.118 684.57 L936.677 684.57 L937.236 684.57 L937.795 684.57 L938.355 684.57 L938.914 684.57 L939.473 684.57 L940.032 684.57 L940.592 684.57 L941.151 684.57 L941.71 684.57 L942.269 684.57 L942.829 684.57 L943.388 684.57 L943.947 684.57 L944.506 684.57 L945.066 684.57 L945.625 684.57 L946.184 684.57 L946.743 684.57 L947.303 684.57 L947.862 684.57 L948.421 684.57 L948.98 684.57 L949.54 684.57 L950.099 684.57 L950.658 684.57 L951.217 684.57 L951.777 684.57 L952.336 684.57 L952.895 684.57 L953.454 684.57 L954.014 684.57 L954.573 684.57 L955.132 684.57 L955.691 684.57 L956.251 684.57 L956.81 684.57 L957.369 684.57 L957.928 684.57 L958.488 684.57 L959.047 684.57 L959.606 684.57 L960.165 684.57 L960.725 684.57 L961.284 684.57 L961.843 684.57 L962.402 684.57 L962.962 684.57 L963.521 684.57 L964.08 684.57 L964.639 684.57 L965.199 684.57 L965.758 684.57 L966.317 684.57 L966.876 684.57 L967.436 684.57 L967.995 684.57 L968.554 684.57 L969.113 684.57 L969.673 684.57 L970.232 684.57 L970.791 684.57 L971.35 684.57 L971.91 684.57 L972.469 684.57 L973.028 684.57 L973.587 684.57 L974.147 684.57 L974.706 684.57 L975.265 684.57 L975.824 684.57 L976.384 684.57 L976.943 684.57 L977.502 684.57 L978.061 684.57 L978.621 684.57 L979.18 684.57 L979.739 684.57 L980.298 684.57 L980.858 684.57 L981.417 684.57 L981.976 684.57 L982.535 684.57 L983.095 684.57 L983.654 684.57 L984.213 684.57 L984.772 684.57 L985.332 684.57 L985.891 684.57 L986.45 684.57 L987.009 684.57 L987.569 684.57 L988.128 684.57 L988.687 684.57 L989.246 684.57 L989.806 684.57 L990.365 684.57 L990.924 684.57 L991.483 684.57 L992.043 684.57 L992.602 684.57 L993.161 684.57 L993.72 684.57 L994.28 684.57 L994.839 684.57 L995.398 684.57 L995.957 684.57 L996.517 684.57 L997.076 684.57 L997.635 684.57 L998.194 684.57 L998.754 684.57 L999.313 684.57 L999.872 684.57 L1000.43 684.57 L1000.99 684.57 L1001.55 684.57 L1002.11 684.57 L1002.67 684.57 L1003.23 684.57 L1003.79 684.57 L1004.35 684.57 L1004.91 684.57 L1005.46 684.57 L1006.02 684.57 L1006.58 684.57 L1007.14 684.57 L1007.7 684.57 L1008.26 684.57 L1008.82 684.57 L1009.38 684.57 L1009.94 684.57 L1010.5 684.57 L1011.06 684.57 L1011.62 684.57 L1012.18 684.57 L1012.73 684.57 L1013.29 684.57 L1013.85 684.57 L1014.41 684.57 L1014.97 684.57 L1015.53 684.57 L1016.09 684.57 L1016.65 684.57 L1017.21 684.57 L1017.77 684.57 L1018.33 684.57 L1018.89 684.57 L1019.45 684.57 L1020.01 684.57 L1020.56 684.57 L1021.12 684.57 L1021.68 684.57 L1022.24 684.57 L1022.8 684.57 L1023.36 684.57 L1023.92 684.57 L1024.48 684.57 L1025.04 684.57 L1025.6 684.57 L1026.16 684.57 L1026.72 684.57 L1027.28 684.57 L1027.83 684.57 L1028.39 684.57 L1028.95 684.57 L1029.51 684.57 L1030.07 684.57 L1030.63 684.57 L1031.19 684.57 L1031.75 684.57 L1032.31 684.57 L1032.87 684.57 L1033.43 684.57 L1033.99 684.57 L1034.55 684.57 L1035.1 684.57 L1035.66 684.57 L1036.22 684.57 L1036.78 684.57 L1037.34 684.57 L1037.9 684.57 L1038.46 684.57 L1039.02 684.57 L1039.58 684.57 L1040.14 684.57 L1040.7 684.57 L1041.26 684.57 L1041.82 684.57 L1042.38 684.57 L1042.93 684.57 L1043.49 684.57 L1044.05 684.57 L1044.61 684.57 L1045.17 684.57 L1045.73 684.57 L1046.29 684.57 L1046.85 684.57 L1047.41 684.57 L1047.97 684.57 L1048.53 684.57 L1049.09 684.57 L1049.65 684.57 L1050.2 684.57 L1050.76 684.57 L1051.32 684.57 L1051.88 684.57 L1052.44 684.57 L1053 684.57 L1053.56 684.57 L1054.12 684.57 L1054.68 684.57 L1055.24 684.57 L1055.8 684.57 L1056.36 684.57 L1056.92 684.57 L1057.48 684.57 L1058.03 684.57 L1058.59 684.57 L1059.15 684.57 L1059.71 684.57 L1060.27 684.57 L1060.83 684.57 L1061.39 684.57 L1061.95 684.57 L1062.51 684.57 L1063.07 684.57 L1063.63 684.57 L1064.19 684.57 L1064.75 684.57 L1065.3 684.57 L1065.86 684.57 L1066.42 684.57 L1066.98 684.57 L1067.54 684.57 L1068.1 684.57 L1068.66 684.57 L1069.22 684.57 L1069.78 684.57 L1070.34 684.57 L1070.9 684.57 L1071.46 684.57 L1072.02 684.57 L1072.57 684.57 L1073.13 684.57 L1073.69 684.57 L1074.25 684.57 L1074.81 684.57 L1075.37 684.57 L1075.93 684.57 L1076.49 684.57 L1077.05 684.57 L1077.61 684.57 L1078.17 684.57 L1078.73 684.57 L1079.29 684.57 L1079.85 684.57 L1080.4 684.57 L1080.96 684.57 L1081.52 684.57 L1082.08 684.57 L1082.64 684.57 L1083.2 684.57 L1083.76 684.57 L1084.32 684.57 L1084.88 684.57 L1085.44 684.57 L1086 684.57 L1086.56 684.57 L1087.12 684.57 L1087.67 684.57 L1088.23 684.57 L1088.79 684.57 L1089.35 684.57 L1089.91 684.57 L1090.47 684.57 L1091.03 684.57 L1091.59 684.57 L1092.15 684.57 L1092.71 684.57 L1093.27 684.57 L1093.83 684.57 L1094.39 684.57 L1094.94 684.57 L1095.5 684.57 L1096.06 684.57 L1096.62 684.57 L1097.18 684.57 L1097.74 684.57 L1098.3 684.57 L1098.86 684.57 L1099.42 684.57 L1099.98 684.57 L1100.54 684.57 L1101.1 684.57 L1101.66 684.57 L1102.22 684.57 L1102.77 684.57 L1103.33 684.57 L1103.89 684.57 L1104.45 684.57 L1105.01 684.57 L1105.57 684.57 L1106.13 684.57 L1106.69 684.57 L1107.25 684.57 L1107.81 684.57 L1108.37 684.57 L1108.93 684.57 L1109.49 684.57 L1110.04 684.57 L1110.6 684.57 L1111.16 684.57 L1111.72 684.57 L1112.28 684.57 L1112.84 684.57 L1113.4 684.57 L1113.96 684.57 L1114.52 684.57 L1115.08 684.57 L1115.64 684.57 L1116.2 684.57 L1116.76 684.57 L1117.31 684.57 L1117.87 684.57 L1118.43 684.57 L1118.99 684.57 L1119.55 684.57 L1120.11 684.57 L1120.67 684.57 L1121.23 684.57 L1121.79 684.57 L1122.35 684.57 L1122.91 684.57 L1123.47 684.57 L1124.03 684.57 L1124.59 684.57 L1125.14 684.57 L1125.7 684.57 L1126.26 684.57 L1126.82 684.57 L1127.38 684.57 L1127.94 684.57 L1128.5 684.57 L1129.06 684.57 L1129.62 684.57 L1130.18 684.57 L1130.74 684.57 L1131.3 684.57 L1131.86 684.57 L1132.41 684.57 L1132.97 684.57 L1133.53 684.57 L1134.09 684.57 L1134.65 684.57 L1135.21 684.57 L1135.77 684.57 L1136.33 684.57 L1136.89 684.57 L1137.45 684.57 L1138.01 684.57 L1138.57 684.57 L1139.13 684.57 L1139.68 684.57 L1140.24 684.57 L1140.8 684.57 L1141.36 684.57 L1141.92 684.57 L1142.48 684.57 L1143.04 684.57 L1143.6 684.57 L1144.16 684.57 L1144.72 684.57 L1145.28 684.57 L1145.84 684.57 L1146.4 684.57 L1146.96 684.57 L1147.51 684.57 L1148.07 684.57 L1148.63 684.57 L1149.19 684.57 L1149.75 684.57 L1150.31 684.57 L1150.87 684.57 L1151.43 684.57 L1151.99 684.57 L1152.55 684.57 L1153.11 684.57 L1153.67 684.57 L1154.23 684.57 L1154.78 684.57 L1155.34 684.57 L1155.9 684.57 L1156.46 684.57 L1157.02 684.57 L1157.58 684.57 L1158.14 684.57 L1158.7 684.57 L1159.26 684.57 L1159.82 684.57 L1160.38 684.57 L1160.94 684.57 L1161.5 684.57 L1162.05 684.57 L1162.61 684.57 L1163.17 684.57 L1163.73 684.57 L1164.29 684.57 L1164.85 684.57 L1165.41 684.57 L1165.97 684.57 L1166.53 684.57 L1167.09 684.57 L1167.65 684.57 L1168.21 684.57 L1168.77 684.57 L1169.33 684.57 L1169.88 684.57 L1170.44 684.57 L1171 684.57 L1171.56 684.57 L1172.12 684.57 L1172.68 684.57 L1173.24 684.57 L1173.8 684.57 L1174.36 684.57 L1174.92 684.57 L1175.48 684.57 L1176.04 684.57 L1176.6 684.57 L1177.15 684.57 L1177.71 684.57 L1178.27 684.57 L1178.83 684.57 L1179.39 684.57 L1179.95 684.57 L1180.51 684.57 L1181.07 684.57 L1181.63 684.57 L1182.19 684.57 L1182.75 684.57 L1183.31 684.57 L1183.87 684.57 L1184.43 684.57 L1184.98 684.57 L1185.54 684.57 L1186.1 684.57 L1186.66 684.57 L1187.22 684.57 L1187.78 684.57 L1188.34 684.57 L1188.9 684.57 L1189.46 684.57 L1190.02 684.57 L1190.58 684.57 L1191.14 684.57 L1191.7 684.57 L1192.25 684.57 L1192.81 684.57 L1193.37 684.57 L1193.93 684.57 L1194.49 684.57 L1195.05 684.57 L1195.61 684.57 L1196.17 684.57 L1196.73 684.57 L1197.29 684.57 L1197.85 684.57 L1198.41 684.57 L1198.97 684.57 L1199.52 684.57 L1200.08 684.57 L1200.64 684.57 L1201.2 684.57 L1201.76 684.57 L1202.32 684.57 L1202.88 684.57 L1203.44 684.57 L1204 684.57 L1204.56 684.57 L1205.12 684.57 L1205.68 684.57 L1206.24 684.57 L1206.8 684.57 L1207.35 684.57 L1207.91 684.57 L1208.47 684.57 L1209.03 684.57 L1209.59 684.57 L1210.15 684.57 L1210.71 684.57 L1211.27 684.57 L1211.83 684.57 L1212.39 684.57 L1212.95 684.57 L1213.51 684.57 L1214.07 684.57 L1214.62 684.57 L1215.18 684.57 L1215.74 684.57 L1216.3 684.57 L1216.86 684.57 L1217.42 684.57 L1217.98 684.57 L1218.54 684.57 L1219.1 684.57 L1219.66 684.57 L1220.22 684.57 L1220.78 684.57 L1221.34 684.57 L1221.89 684.57 L1222.45 684.57 L1223.01 684.57 L1223.57 684.57 L1224.13 684.57 L1224.69 684.57 L1225.25 684.57 L1225.81 684.57 L1226.37 684.57 L1226.93 684.57 L1227.49 684.57 L1228.05 684.57 L1228.61 684.57 L1229.17 684.57 L1229.72 684.57 L1230.28 684.57 L1230.84 684.57 L1231.4 684.57 L1231.96 684.57 L1232.52 684.57 L1233.08 684.57 L1233.64 684.57 L1234.2 684.57 L1234.76 684.57 L1235.32 684.57 L1235.88 684.57 L1236.44 684.57 L1236.99 684.57 L1237.55 684.57 L1238.11 684.57 L1238.67 684.57 L1239.23 684.57 L1239.79 684.57 L1240.35 684.57 L1240.91 684.57 L1241.47 684.57 L1242.03 684.57 L1242.59 684.57 L1243.15 684.57 L1243.71 684.57 L1244.26 684.57 L1244.82 684.57 L1245.38 684.57 L1245.94 684.57 L1246.5 684.57 L1247.06 684.57 L1247.62 684.57 L1248.18 684.57 L1248.74 684.57 L1249.3 684.57 L1249.86 684.57 L1250.42 684.57 L1250.98 684.57 L1251.54 684.57 L1252.09 684.57 L1252.65 684.57 L1253.21 684.57 L1253.77 684.57 L1254.33 684.57 L1254.89 684.57 L1255.45 684.57 L1256.01 684.57 L1256.57 684.57 L1257.13 684.57 L1257.69 684.57 L1258.25 684.57 L1258.81 684.57 L1259.36 684.57 L1259.92 684.57 L1260.48 684.57 L1261.04 684.57 L1261.6 684.57 L1262.16 684.57 L1262.72 684.57 L1263.28 684.57 L1263.84 684.57 L1264.4 684.57 L1264.96 684.57 L1265.52 684.57 L1266.08 684.57 L1266.63 684.57 L1267.19 684.57 L1267.75 684.57 L1268.31 684.57 L1268.87 684.57 L1269.43 684.57 L1269.99 684.57 L1270.55 684.57 L1271.11 684.57 L1271.67 684.57 L1272.23 684.57 L1272.79 684.57 L1273.35 684.57 L1273.91 684.57 L1274.46 684.57 L1275.02 684.57 L1275.58 684.57 L1276.14 684.57 L1276.7 684.57 L1277.26 684.57 L1277.82 684.57 L1278.38 684.57 L1278.94 684.57 L1279.5 684.57 L1280.06 684.57 L1280.62 684.57 L1281.18 684.57 L1281.73 684.57 L1282.29 684.57 L1282.85 684.57 L1283.41 684.57 L1283.97 684.57 L1284.53 684.57 L1285.09 684.57 L1285.65 684.57 L1286.21 684.57 L1286.77 684.57 L1287.33 684.57 L1287.89 684.57 L1288.45 684.57 L1289 684.57 L1289.56 684.57 L1290.12 684.57 L1290.68 684.57 L1291.24 684.57 L1291.8 684.57 L1292.36 684.57 L1292.92 684.57 L1293.48 684.57 L1294.04 684.57 L1294.6 684.57 L1295.16 684.57 L1295.72 684.57 L1296.28 684.57 L1296.83 684.57 L1297.39 684.57 L1297.95 684.57 L1298.51 684.57 L1299.07 684.57 L1299.63 684.57 L1300.19 684.57 L1300.75 684.57 L1301.31 684.57 L1301.87 684.57 L1302.43 684.57 L1302.99 684.57 L1303.55 684.57 L1304.1 684.57 L1304.66 684.57 L1305.22 684.57 L1305.78 684.57 L1306.34 684.57 L1306.9 684.57 L1307.46 684.57 L1308.02 684.57 L1308.58 684.57 L1309.14 684.57 L1309.7 684.57 L1310.26 684.57 L1310.82 684.57 L1311.38 684.57 L1311.93 684.57 L1312.49 684.57 L1313.05 684.57 L1313.61 684.57 L1314.17 684.57 L1314.73 684.57 L1315.29 684.57 L1315.85 684.57 L1316.41 684.57 L1316.97 684.57 L1317.53 684.57 L1318.09 684.57 L1318.65 684.57 L1319.2 684.57 L1319.76 684.57 L1320.32 684.57 L1320.88 684.57 L1321.44 684.57 L1322 684.57 L1322.56 684.57 L1323.12 684.57 L1323.68 684.57 L1324.24 684.57 L1324.8 684.57 L1325.36 684.57 L1325.92 684.57 L1326.47 684.57 L1327.03 684.57 L1327.59 684.57 L1328.15 684.57 L1328.71 684.57 L1329.27 684.57 L1329.83 684.57 L1330.39 684.57 L1330.95 684.57 L1331.51 684.57 L1332.07 684.57 L1332.63 684.57 L1333.19 684.57 L1333.75 684.57 L1334.3 684.57 L1334.86 684.57 L1335.42 684.57 L1335.98 684.57 L1336.54 684.57 L1337.1 684.57 L1337.66 684.57 L1338.22 684.57 L1338.78 684.57 L1339.34 684.57 L1339.9 684.57 L1340.46 684.57 L1341.02 684.57 L1341.57 684.57 L1342.13 684.57 L1342.69 684.57 L1343.25 684.57 L1343.81 684.57 L1344.37 684.57 L1344.93 684.57 L1345.49 684.57 L1346.05 684.57 L1346.61 684.57 L1347.17 684.57 L1347.73 684.57 L1348.29 684.57 L1348.84 684.57 L1349.4 684.57 L1349.96 684.57 L1350.52 684.57 L1351.08 684.57 L1351.64 684.57 L1352.2 684.57 L1352.76 684.57 L1353.32 684.57 L1353.88 684.57 L1354.44 684.57 L1355 684.57 L1355.56 684.57 L1356.12 684.57 L1356.67 684.57 L1357.23 684.57 L1357.79 684.57 L1358.35 684.57 L1358.91 684.57 L1359.47 684.57 L1360.03 684.57 L1360.59 684.57 L1361.15 684.57 L1361.71 684.57 L1362.27 684.57 L1362.83 684.57 L1363.39 684.57 L1363.94 684.57 L1364.5 684.57 L1365.06 684.57 L1365.62 684.57 L1366.18 684.57 L1366.74 684.57 L1367.3 684.57 L1367.86 684.57 L1368.42 684.57 L1368.98 684.57 L1369.54 684.57 L1370.1 684.57 L1370.66 684.57 L1371.21 684.57 L1371.77 684.57 L1372.33 684.57 L1372.89 684.57 L1373.45 684.57 L1374.01 684.57 L1374.57 684.57 L1375.13 684.57 L1375.69 684.57 L1376.25 684.57 L1376.81 684.57 L1377.37 684.57 L1377.93 684.57 L1378.49 684.57 L1379.04 684.57 L1379.6 684.57 L1380.16 684.57 L1380.72 684.57 L1381.28 684.57 L1381.84 684.57 L1382.4 684.57 L1382.96 684.57 L1383.52 684.57 L1384.08 684.57 L1384.64 684.57 L1385.2 684.57 L1385.76 684.57 L1386.31 684.57 L1386.87 684.57 L1387.43 684.57 L1387.99 684.57 L1388.55 684.57 L1389.11 684.57 L1389.67 684.57 L1390.23 684.57 L1390.79 684.57 L1391.35 684.57 L1391.91 684.57 L1392.47 684.57 L1393.03 684.57 L1393.58 684.57 L1394.14 684.57 L1394.7 684.57 L1395.26 684.57 L1395.82 684.57 L1396.38 684.57 L1396.94 684.57 L1397.5 684.57 L1398.06 684.57 L1398.62 684.57 L1399.18 684.57 L1399.74 684.57 L1400.3 684.57 L1400.86 684.57 L1401.41 684.57 L1401.97 684.57 L1402.53 684.57 L1403.09 684.57 L1403.65 684.57 L1404.21 684.57 L1404.77 684.57 L1405.33 684.57 L1405.89 684.57 L1406.45 684.57 L1407.01 684.57 L1407.57 684.57 L1408.13 684.57 L1408.68 684.57 L1409.24 684.57 L1409.8 684.57 L1410.36 684.57 L1410.92 684.57 L1411.48 684.57 L1412.04 684.57 L1412.6 684.57 L1413.16 684.57 L1413.72 684.57 L1414.28 684.57 L1414.84 684.57 L1415.4 684.57 L1415.95 684.57 L1416.51 684.57 L1417.07 684.57 L1417.63 684.57 L1418.19 684.57 L1418.75 684.57 L1419.31 684.57 L1419.87 684.57 L1420.43 684.57 L1420.99 684.57 L1421.55 684.57 L1422.11 684.57 L1422.67 684.57 L1423.23 684.57 L1423.78 684.57 L1424.34 684.57 L1424.9 684.57 L1425.46 684.57 L1426.02 684.57 L1426.58 684.57 L1427.14 684.57 L1427.7 684.57 L1428.26 684.57 L1428.82 684.57 L1429.38 684.57 L1429.94 684.57 L1430.5 684.57 L1431.05 684.57 L1431.61 684.57 L1432.17 684.57 L1432.73 684.57 L1433.29 684.57 L1433.85 684.57 L1434.41 684.57 L1434.97 684.57 L1435.53 684.57 L1436.09 684.57 L1436.65 684.57 L1437.21 684.57 L1437.77 684.57 L1438.33 684.57 L1438.88 684.57 L1439.44 684.57 L1440 684.57 L1440.56 684.57 L1441.12 684.57 L1441.68 684.57 L1442.24 684.57 L1442.8 684.57 L1443.36 684.57 L1443.92 684.57 L1444.48 684.57 L1445.04 684.57 L1445.6 684.57 L1446.15 684.57 L1446.71 684.57 L1447.27 684.57 L1447.83 684.57 L1448.39 684.57 L1448.95 684.57 L1449.51 684.57 L1450.07 684.57 L1450.63 684.57 L1451.19 684.57 L1451.75 684.57 L1452.31 684.57 L1452.87 684.57 L1453.42 684.57 L1453.98 684.57 L1454.54 684.57 L1455.1 684.57 L1455.66 684.57 L1456.22 684.57 L1456.78 684.57 L1457.34 684.57 L1457.9 684.57 L1458.46 684.57 L1459.02 684.57 L1459.58 684.57 L1460.14 684.57 L1460.7 684.57 L1461.25 684.57 L1461.81 684.57 L1462.37 684.57 L1462.93 684.57 L1463.49 684.57 L1464.05 684.57 L1464.61 684.57 L1465.17 684.57 L1465.73 684.57 L1466.29 684.57 L1466.85 684.57 L1467.41 684.57 L1467.97 684.57 L1468.52 684.57 L1469.08 684.57 L1469.64 684.57 L1470.2 684.57 L1470.76 684.57 L1471.32 684.57 L1471.88 684.57 L1472.44 684.57 L1473 684.57 L1473.56 684.57 L1474.12 684.57 L1474.68 684.57 L1475.24 684.57 L1475.79 684.57 L1476.35 684.57 L1476.91 684.57 L1477.47 684.57 L1478.03 684.57 L1478.59 684.57 L1479.15 684.57 L1479.71 684.57 L1480.27 684.57 L1480.83 684.57 L1481.39 684.57 L1481.95 684.57 L1482.51 684.57 L1483.07 684.57 L1483.62 684.57 L1484.18 684.57 L1484.74 684.57 L1485.3 684.57 L1485.86 684.57 L1486.42 684.57 L1486.98 684.57 L1487.54 684.57 L1488.1 684.57 L1488.66 684.57 L1489.22 684.57 L1489.78 684.57 L1490.34 684.57 L1490.89 684.57 L1491.45 684.57 L1492.01 684.57 L1492.57 684.57 L1493.13 684.57 L1493.69 684.57 L1494.25 684.57 L1494.81 684.57 L1495.37 684.57 L1495.93 684.57 L1496.49 684.57 L1497.05 684.57 L1497.61 684.57 L1498.16 684.57 L1498.72 684.57 L1499.28 684.57 L1499.84 684.57 L1500.4 684.57 L1500.96 684.57 L1501.52 684.57 L1502.08 684.57 L1502.64 684.57 L1503.2 684.57 L1503.76 684.57 L1504.32 684.57 L1504.88 684.57 L1505.44 684.57 L1505.99 684.57 L1506.55 684.57 L1507.11 684.57 L1507.67 684.57 L1508.23 684.57 L1508.79 684.57 L1509.35 684.57 L1509.91 684.57 L1510.47 684.57 L1511.03 684.57 L1511.59 684.57 L1512.15 684.57 L1512.71 684.57 L1513.26 684.57 L1513.82 684.57 L1514.38 684.57 L1514.94 684.57 L1515.5 684.57 L1516.06 684.57 L1516.62 684.57 L1517.18 684.57 L1517.74 684.57 L1518.3 684.57 L1518.86 684.57 L1519.42 684.57 L1519.98 684.57 L1520.53 684.57 L1521.09 684.57 L1521.65 684.57 L1522.21 684.57 L1522.77 684.57 L1523.33 684.57 L1523.89 684.57 L1524.45 684.57 L1525.01 684.57 L1525.57 684.57 L1526.13 684.57 L1526.69 684.57 L1527.25 684.57 L1527.81 684.57 L1528.36 684.57 L1528.92 684.57 L1529.48 684.57 L1530.04 684.57 L1530.6 684.57 L1531.16 684.57 L1531.72 684.57 L1532.28 684.57 L1532.84 684.57 L1533.4 684.57 L1533.96 684.57 L1534.52 684.57 L1535.08 684.57 L1535.63 684.57 L1536.19 684.57 L1536.75 684.57 L1537.31 684.57 L1537.87 684.57 L1538.43 684.57 L1538.99 684.57 L1539.55 684.57 L1540.11 684.57 L1540.67 684.57 L1541.23 684.57 L1541.79 684.57 L1542.35 684.57 L1542.9 684.57 L1543.46 684.57 L1544.02 684.57 L1544.58 684.57 L1545.14 684.57 L1545.7 684.57 L1546.26 684.57 L1546.82 684.57 L1547.38 684.57 L1547.94 684.57 L1548.5 684.57 L1549.06 684.57 L1549.62 684.57 L1550.18 684.57 L1550.73 684.57 L1551.29 684.57 L1551.85 684.57 L1552.41 684.57 L1552.97 684.57 L1553.53 684.57 L1554.09 684.57 L1554.65 684.57 L1555.21 684.57 L1555.77 684.57 L1556.33 684.57 L1556.89 684.57 L1557.45 684.57 L1558 684.57 L1558.56 684.57 L1559.12 684.57 L1559.68 684.57 L1560.24 684.57 L1560.8 684.57 L1561.36 684.57 L1561.92 684.57 L1562.48 684.57 L1563.04 684.57 L1563.6 684.57 L1564.16 684.57 L1564.72 684.57 L1565.28 684.57 L1565.83 684.57 L1566.39 684.57 L1566.95 684.57 L1567.51 684.57 L1568.07 684.57 L1568.63 684.57 L1569.19 684.57 L1569.75 684.57 L1570.31 684.57 L1570.87 684.57 L1571.43 684.57 L1571.99 684.57 L1572.55 684.57 L1573.1 684.57 L1573.66 684.57 L1574.22 684.57 L1574.78 684.57 L1575.34 684.57 L1575.9 684.57 L1576.46 684.57 L1577.02 684.57 L1577.58 684.57 L1578.14 684.57 L1578.7 684.57 L1579.26 684.57 L1579.82 684.57 L1580.37 684.57 L1580.93 684.57 L1581.49 684.57 L1582.05 684.57 L1582.61 684.57 L1583.17 684.57 L1583.73 684.57 L1584.29 684.57 L1584.85 684.57 L1585.41 684.57 L1585.97 684.57 L1586.53 684.57 L1587.09 684.57 L1587.65 684.57 L1588.2 684.57 L1588.76 684.57 L1589.32 684.57 L1589.88 684.57 L1590.44 684.57 L1591 684.57 L1591.56 684.57 L1592.12 684.57 L1592.68 684.57 L1593.24 684.57 L1593.8 684.57 L1594.36 684.57 L1594.92 684.57 L1595.47 684.57 L1596.03 684.57 L1596.59 684.57 L1597.15 684.57 L1597.71 684.57 L1598.27 684.57 L1598.83 684.57 L1599.39 684.57 L1599.95 684.57 L1600.51 684.57 L1601.07 684.57 L1601.63 684.57 L1602.19 684.57 L1602.74 684.57 L1603.3 684.57 L1603.86 684.57 L1604.42 684.57 L1604.98 684.57 L1605.54 684.57 L1606.1 684.57 L1606.66 684.57 L1607.22 684.57 L1607.78 684.57 L1608.34 684.57 L1608.9 684.57 L1609.46 684.57 L1610.02 684.57 L1610.57 684.57 L1611.13 684.57 L1611.69 684.57 L1612.25 684.57 L1612.81 684.57 L1613.37 684.57 L1613.93 684.57 L1614.49 684.57 L1615.05 684.57 L1615.61 684.57 L1616.17 684.57 L1616.73 684.57 L1617.29 684.57 L1617.84 684.57 L1618.4 684.57 L1618.96 684.57 L1619.52 684.57 L1620.08 684.57 L1620.64 684.57 L1621.2 684.57 L1621.76 684.57 L1622.32 684.57 L1622.88 684.57 L1623.44 684.57 L1624 684.57 L1624.56 684.57 L1625.11 684.57 L1625.67 684.57 L1626.23 684.57 L1626.79 684.57 L1627.35 684.57 L1627.91 684.57 L1628.47 684.57 L1629.03 684.57 L1629.59 684.57 L1630.15 684.57 L1630.71 684.57 L1631.27 684.57 L1631.83 684.57 L1632.39 684.57 L1632.94 684.57 L1633.5 684.57 L1634.06 684.57 L1634.62 684.57 L1635.18 684.57 L1635.74 684.57 L1636.3 684.57 L1636.86 684.57 L1637.42 684.57 L1637.98 684.57 L1638.54 684.57 L1639.1 684.57 L1639.66 684.57 L1640.21 684.57 L1640.77 684.57 L1641.33 684.57 L1641.89 684.57 L1642.45 684.57 L1643.01 684.57 L1643.57 684.57 L1644.13 684.57 L1644.69 684.57 L1645.25 684.57 L1645.81 684.57 L1646.37 684.57 L1646.93 684.57 L1647.48 684.57 L1648.04 684.57 L1648.6 684.57 L1649.16 684.57 L1649.72 684.57 L1650.28 684.57 L1650.84 684.57 L1651.4 684.57 L1651.96 684.57 L1652.52 684.57 L1653.08 684.57 L1653.64 684.57 L1654.2 684.57 L1654.76 684.57 L1655.31 684.57 L1655.87 684.57 L1656.43 684.57 L1656.99 684.57 L1657.55 684.57 L1658.11 684.57 L1658.67 684.57 L1659.23 684.57 L1659.79 684.57 L1660.35 684.57 L1660.91 684.57 L1661.47 684.57 L1662.03 684.57 L1662.58 684.57 L1663.14 684.57 L1663.7 684.57 L1664.26 684.57 L1664.82 684.57 L1665.38 684.57 L1665.94 684.57 L1666.5 684.57 L1667.06 684.57 L1667.62 684.57 L1668.18 684.57 L1668.74 684.57 L1669.3 684.57 L1669.85 684.57 L1670.41 684.57 L1670.97 684.57 L1671.53 684.57 L1672.09 684.57 L1672.65 684.57 L1673.21 684.57 L1673.77 684.57 L1674.33 684.57 L1674.89 684.57 L1675.45 684.57 L1676.01 684.57 L1676.57 684.57 L1677.13 684.57 L1677.68 684.57 L1678.24 684.57 L1678.8 684.57 L1679.36 684.57 L1679.92 684.57 L1680.48 684.57 L1681.04 684.57 L1681.6 684.57 L1682.16 684.57 L1682.72 684.57 L1683.28 684.57 L1683.84 684.57 L1684.4 684.57 L1684.95 684.57 L1685.51 684.57 L1686.07 684.57 L1686.63 684.57 L1687.19 684.57 L1687.75 684.57 L1688.31 684.57 L1688.87 684.57 L1689.43 684.57 L1689.99 684.57 L1690.55 684.57 L1691.11 684.57 L1691.67 684.57 L1692.23 684.57 L1692.78 684.57 L1693.34 684.57 L1693.9 684.57 L1694.46 684.57 L1695.02 684.57 L1695.58 684.57 L1696.14 684.57 L1696.7 684.57 L1697.26 684.57 L1697.82 684.57 L1698.38 684.57 L1698.94 684.57 L1699.5 684.57 L1700.05 684.57 L1700.61 684.57 L1701.17 684.57 L1701.73 684.57 L1702.29 684.57 L1702.85 684.57 L1703.41 684.57 L1703.97 684.57 L1704.53 684.57 L1705.09 684.57 L1705.65 684.57 L1706.21 684.57 L1706.77 684.57 L1707.32 684.57 L1707.88 684.57 L1708.44 684.57 L1709 684.57 L1709.56 684.57 L1710.12 684.57 L1710.68 684.57 L1711.24 684.57 L1711.8 684.57 L1712.36 684.57 L1712.92 684.57 L1713.48 684.57 L1714.04 684.57 L1714.6 684.57 L1715.15 684.57 L1715.71 684.57 L1716.27 684.57 L1716.83 684.57 L1717.39 684.57 L1717.95 684.57 L1718.51 684.57 L1719.07 684.57 L1719.63 684.57 L1720.19 684.57 L1720.75 684.57 L1721.31 684.57 L1721.87 684.57 L1722.42 684.57 L1722.98 684.57 L1723.54 684.57 L1724.1 684.57 L1724.66 684.57 L1725.22 684.57 L1725.78 684.57 L1726.34 684.57 L1726.9 684.57 L1727.46 684.57 L1728.02 684.57 L1728.58 684.57 L1729.14 684.57 L1729.69 684.57 L1730.25 684.57 L1730.81 684.57 L1731.37 684.57 L1731.93 684.57 L1732.49 684.57 L1733.05 684.57 L1733.61 684.57 L1734.17 684.57 L1734.73 684.57 L1735.29 684.57 L1735.85 684.57 L1736.41 684.57 L1736.97 684.57 L1737.52 684.57 L1738.08 684.57 L1738.64 684.57 L1739.2 684.57 L1739.76 684.57 L1740.32 684.57 L1740.88 684.57 L1741.44 684.57 L1742 684.57 L1742.56 684.57 L1743.12 684.57 L1743.68 684.57 L1744.24 684.57 L1744.79 684.57 L1745.35 684.57 L1745.91 684.57 L1746.47 684.57 L1747.03 684.57 L1747.59 684.57 L1748.15 684.57 L1748.71 684.57 L1749.27 684.57 L1749.83 684.57 L1750.39 684.57 L1750.95 684.57 L1751.51 684.57 L1752.06 684.57 L1752.62 684.57 L1753.18 684.57 L1753.74 684.57 L1754.3 684.57 L1754.86 684.57 L1755.42 684.57 L1755.98 684.57 L1756.54 684.57 L1757.1 684.57 L1757.66 684.57 L1758.22 684.57 L1758.78 684.57 L1759.34 684.57 L1759.89 684.57 L1760.45 684.57 L1761.01 684.57 L1761.57 684.57 L1762.13 684.57 L1762.69 684.57 L1763.25 684.57 L1763.81 684.57 L1764.37 684.57 L1764.93 684.57 L1765.49 684.57 L1766.05 684.57 L1766.61 684.57 L1767.16 684.57 L1767.72 684.57 L1768.28 684.57 L1768.84 684.57 L1769.4 684.57 L1769.96 684.57 L1770.52 684.57 L1771.08 684.57 L1771.64 684.57 L1772.2 684.57 L1772.76 684.57 L1773.32 684.57 L1773.88 684.57 L1774.43 684.57 L1774.99 684.57 L1775.55 684.57 L1776.11 684.57 L1776.67 684.57 L1777.23 684.57 L1777.79 684.57 L1778.35 684.57 L1778.91 684.57 L1779.47 684.57 L1780.03 684.57 L1780.59 684.57 L1781.15 684.57 L1781.71 684.57 L1782.26 684.57 L1782.82 684.57 L1783.38 684.57 L1783.94 684.57 L1784.5 684.57 L1785.06 684.57 L1785.62 684.57 L1786.18 684.57 L1786.74 684.57 L1787.3 684.57 L1787.86 684.57 L1788.42 684.57 L1788.98 684.57 L1789.53 684.57 L1790.09 684.57 L1790.65 684.57 L1791.21 684.57 L1791.77 684.57 L1792.33 684.57 L1792.89 684.57 L1793.45 684.57 L1794.01 684.57 L1794.57 684.57 L1795.13 684.57 L1795.69 684.57 L1796.25 684.57 L1796.8 684.57 L1797.36 684.57 L1797.92 684.57 L1798.48 684.57 L1799.04 684.57 L1799.6 684.57 L1800.16 684.57 L1800.72 684.57 L1801.28 684.57 L1801.84 684.57 L1802.4 684.57 L1802.96 684.57 L1803.52 684.57 L1804.08 684.57 L1804.63 684.57 L1805.19 684.57 L1805.75 684.57 L1806.31 684.57 L1806.87 684.57 L1807.43 684.57 L1807.99 684.57 L1808.55 684.57 L1809.11 684.57 L1809.67 684.57 L1810.23 684.57 L1810.79 684.57 L1811.35 684.57 L1811.9 684.57 L1812.46 684.57 L1813.02 684.57 L1813.58 684.57 L1814.14 684.57 L1814.7 684.57 L1815.26 684.57 L1815.82 684.57 L1816.38 684.57 L1816.94 684.57 L1817.5 684.57 L1818.06 684.57 L1818.62 684.57 L1819.18 684.57 L1819.73 684.57 L1820.29 684.57 L1820.85 684.57 L1821.41 684.57 L1821.97 684.57 L1822.53 684.57 L1823.09 684.57 L1823.65 684.57 L1824.21 684.57 L1824.77 684.57 L1825.33 684.57 L1825.89 684.57 L1826.45 684.57 L1827 684.57 L1827.56 684.57 L1828.12 684.57 L1828.68 684.57 L1829.24 684.57 L1829.8 684.57 L1830.36 684.57 L1830.92 684.57 L1831.48 684.57 L1832.04 684.57 L1832.6 684.57 L1833.16 684.57 L1833.72 684.57 L1834.27 684.57 L1834.83 684.57 L1835.39 684.57 L1835.95 684.57 L1836.51 684.57 L1837.07 684.57 L1837.63 684.57 L1838.19 684.57 L1838.19 682.776 L1837.63 682.776 L1837.07 682.776 L1836.51 682.776 L1835.95 682.776 L1835.39 682.776 L1834.83 682.776 L1834.27 682.776 L1833.72 682.776 L1833.16 682.776 L1832.6 682.776 L1832.04 682.776 L1831.48 682.776 L1830.92 682.776 L1830.36 682.776 L1829.8 682.776 L1829.24 682.776 L1828.68 682.776 L1828.12 682.776 L1827.56 682.776 L1827 682.776 L1826.45 682.776 L1825.89 682.776 L1825.33 682.776 L1824.77 682.776 L1824.21 682.776 L1823.65 682.776 L1823.09 682.776 L1822.53 682.776 L1821.97 682.776 L1821.41 682.776 L1820.85 682.776 L1820.29 682.776 L1819.73 682.776 L1819.18 682.776 L1818.62 682.776 L1818.06 682.776 L1817.5 682.776 L1816.94 682.776 L1816.38 682.776 L1815.82 682.776 L1815.26 682.776 L1814.7 682.776 L1814.14 682.776 L1813.58 682.776 L1813.02 682.776 L1812.46 682.776 L1811.9 682.776 L1811.35 682.776 L1810.79 682.776 L1810.23 682.776 L1809.67 682.776 L1809.11 682.776 L1808.55 682.776 L1807.99 682.776 L1807.43 682.776 L1806.87 682.776 L1806.31 682.776 L1805.75 682.776 L1805.19 682.776 L1804.63 682.776 L1804.08 682.776 L1803.52 682.776 L1802.96 682.776 L1802.4 682.776 L1801.84 682.776 L1801.28 682.776 L1800.72 682.776 L1800.16 682.776 L1799.6 682.776 L1799.04 682.776 L1798.48 682.776 L1797.92 682.776 L1797.36 682.776 L1796.8 682.776 L1796.25 682.776 L1795.69 682.776 L1795.13 682.776 L1794.57 682.776 L1794.01 682.776 L1793.45 682.776 L1792.89 682.776 L1792.33 682.776 L1791.77 682.776 L1791.21 682.776 L1790.65 682.776 L1790.09 682.776 L1789.53 682.776 L1788.98 682.776 L1788.42 682.776 L1787.86 682.776 L1787.3 682.776 L1786.74 682.776 L1786.18 682.776 L1785.62 682.776 L1785.06 682.776 L1784.5 682.776 L1783.94 682.776 L1783.38 682.776 L1782.82 682.776 L1782.26 682.776 L1781.71 682.776 L1781.15 682.776 L1780.59 682.776 L1780.03 682.776 L1779.47 682.776 L1778.91 682.776 L1778.35 682.776 L1777.79 682.776 L1777.23 682.776 L1776.67 682.776 L1776.11 682.776 L1775.55 682.776 L1774.99 682.776 L1774.43 682.776 L1773.88 682.776 L1773.32 682.776 L1772.76 682.776 L1772.2 682.776 L1771.64 682.776 L1771.08 682.776 L1770.52 682.776 L1769.96 682.776 L1769.4 682.776 L1768.84 682.776 L1768.28 682.776 L1767.72 682.776 L1767.16 682.776 L1766.61 682.776 L1766.05 682.776 L1765.49 682.776 L1764.93 682.776 L1764.37 682.776 L1763.81 682.776 L1763.25 682.776 L1762.69 682.776 L1762.13 682.776 L1761.57 682.776 L1761.01 682.776 L1760.45 682.776 L1759.89 682.776 L1759.34 682.776 L1758.78 682.776 L1758.22 682.776 L1757.66 682.776 L1757.1 682.776 L1756.54 682.776 L1755.98 682.776 L1755.42 682.776 L1754.86 682.776 L1754.3 682.776 L1753.74 682.776 L1753.18 682.776 L1752.62 682.776 L1752.06 682.776 L1751.51 682.776 L1750.95 682.776 L1750.39 682.776 L1749.83 682.776 L1749.27 682.776 L1748.71 682.776 L1748.15 682.776 L1747.59 682.776 L1747.03 682.776 L1746.47 682.776 L1745.91 682.776 L1745.35 682.776 L1744.79 682.776 L1744.24 682.776 L1743.68 682.776 L1743.12 682.776 L1742.56 682.776 L1742 682.776 L1741.44 682.776 L1740.88 682.776 L1740.32 682.776 L1739.76 682.776 L1739.2 682.776 L1738.64 682.776 L1738.08 682.776 L1737.52 682.776 L1736.97 682.776 L1736.41 682.776 L1735.85 682.776 L1735.29 682.776 L1734.73 682.776 L1734.17 682.776 L1733.61 682.776 L1733.05 682.776 L1732.49 682.776 L1731.93 682.776 L1731.37 682.776 L1730.81 682.776 L1730.25 682.776 L1729.69 682.776 L1729.14 682.776 L1728.58 682.776 L1728.02 682.776 L1727.46 682.776 L1726.9 682.776 L1726.34 682.776 L1725.78 682.776 L1725.22 682.776 L1724.66 682.776 L1724.1 682.776 L1723.54 682.776 L1722.98 682.776 L1722.42 682.776 L1721.87 682.776 L1721.31 682.776 L1720.75 682.776 L1720.19 682.776 L1719.63 682.776 L1719.07 682.776 L1718.51 682.776 L1717.95 682.776 L1717.39 682.776 L1716.83 682.776 L1716.27 682.776 L1715.71 682.776 L1715.15 682.776 L1714.6 682.776 L1714.04 682.776 L1713.48 682.776 L1712.92 682.776 L1712.36 682.776 L1711.8 682.776 L1711.24 682.776 L1710.68 682.776 L1710.12 682.776 L1709.56 682.776 L1709 682.776 L1708.44 682.776 L1707.88 682.776 L1707.32 682.776 L1706.77 682.776 L1706.21 682.776 L1705.65 682.776 L1705.09 682.776 L1704.53 682.776 L1703.97 682.776 L1703.41 682.776 L1702.85 682.776 L1702.29 682.776 L1701.73 682.776 L1701.17 682.776 L1700.61 682.776 L1700.05 682.776 L1699.5 682.776 L1698.94 682.776 L1698.38 682.776 L1697.82 682.776 L1697.26 682.776 L1696.7 682.776 L1696.14 682.776 L1695.58 682.776 L1695.02 682.776 L1694.46 682.776 L1693.9 682.776 L1693.34 682.776 L1692.78 682.776 L1692.23 682.776 L1691.67 682.776 L1691.11 682.776 L1690.55 682.776 L1689.99 682.776 L1689.43 682.776 L1688.87 682.776 L1688.31 682.776 L1687.75 682.776 L1687.19 682.776 L1686.63 682.776 L1686.07 682.776 L1685.51 682.776 L1684.95 682.776 L1684.4 682.776 L1683.84 682.776 L1683.28 682.776 L1682.72 682.776 L1682.16 682.776 L1681.6 682.776 L1681.04 682.776 L1680.48 682.776 L1679.92 682.776 L1679.36 682.776 L1678.8 682.776 L1678.24 682.776 L1677.68 682.776 L1677.13 682.776 L1676.57 682.776 L1676.01 682.776 L1675.45 682.776 L1674.89 682.776 L1674.33 682.776 L1673.77 682.776 L1673.21 682.776 L1672.65 682.776 L1672.09 682.776 L1671.53 682.776 L1670.97 682.776 L1670.41 682.776 L1669.85 682.776 L1669.3 682.776 L1668.74 682.776 L1668.18 682.776 L1667.62 682.776 L1667.06 682.776 L1666.5 682.776 L1665.94 682.776 L1665.38 682.776 L1664.82 682.776 L1664.26 682.776 L1663.7 682.776 L1663.14 682.776 L1662.58 682.776 L1662.03 682.776 L1661.47 682.776 L1660.91 682.776 L1660.35 682.776 L1659.79 682.776 L1659.23 682.776 L1658.67 682.776 L1658.11 682.776 L1657.55 682.776 L1656.99 682.776 L1656.43 682.776 L1655.87 682.776 L1655.31 682.776 L1654.76 682.776 L1654.2 682.776 L1653.64 682.776 L1653.08 682.776 L1652.52 682.776 L1651.96 682.776 L1651.4 682.776 L1650.84 682.776 L1650.28 682.776 L1649.72 682.776 L1649.16 682.776 L1648.6 682.776 L1648.04 682.776 L1647.48 682.776 L1646.93 682.776 L1646.37 682.776 L1645.81 682.776 L1645.25 682.776 L1644.69 682.776 L1644.13 682.776 L1643.57 682.776 L1643.01 682.776 L1642.45 682.776 L1641.89 682.776 L1641.33 682.776 L1640.77 682.776 L1640.21 682.776 L1639.66 682.776 L1639.1 682.776 L1638.54 682.776 L1637.98 682.776 L1637.42 682.776 L1636.86 682.776 L1636.3 682.776 L1635.74 682.776 L1635.18 682.776 L1634.62 682.776 L1634.06 682.776 L1633.5 682.776 L1632.94 682.776 L1632.39 682.776 L1631.83 682.776 L1631.27 682.776 L1630.71 682.776 L1630.15 682.776 L1629.59 682.776 L1629.03 682.776 L1628.47 682.776 L1627.91 682.776 L1627.35 682.776 L1626.79 682.776 L1626.23 682.776 L1625.67 682.776 L1625.11 682.776 L1624.56 682.776 L1624 682.776 L1623.44 682.776 L1622.88 682.776 L1622.32 682.776 L1621.76 682.776 L1621.2 682.776 L1620.64 682.776 L1620.08 682.776 L1619.52 682.776 L1618.96 682.776 L1618.4 682.776 L1617.84 682.776 L1617.29 682.776 L1616.73 682.776 L1616.17 682.776 L1615.61 682.776 L1615.05 682.776 L1614.49 682.776 L1613.93 682.776 L1613.37 682.776 L1612.81 682.776 L1612.25 682.776 L1611.69 682.776 L1611.13 682.776 L1610.57 682.776 L1610.02 682.776 L1609.46 682.776 L1608.9 682.776 L1608.34 682.776 L1607.78 682.776 L1607.22 682.776 L1606.66 682.776 L1606.1 682.776 L1605.54 682.776 L1604.98 682.776 L1604.42 682.776 L1603.86 682.776 L1603.3 682.776 L1602.74 682.776 L1602.19 682.776 L1601.63 682.776 L1601.07 682.776 L1600.51 682.776 L1599.95 682.776 L1599.39 682.776 L1598.83 682.776 L1598.27 682.776 L1597.71 682.776 L1597.15 682.776 L1596.59 682.776 L1596.03 682.776 L1595.47 682.776 L1594.92 682.776 L1594.36 682.776 L1593.8 682.776 L1593.24 682.776 L1592.68 682.776 L1592.12 682.776 L1591.56 682.776 L1591 682.776 L1590.44 682.776 L1589.88 682.776 L1589.32 682.776 L1588.76 682.776 L1588.2 682.776 L1587.65 682.776 L1587.09 682.776 L1586.53 682.776 L1585.97 682.776 L1585.41 682.776 L1584.85 682.776 L1584.29 682.776 L1583.73 682.776 L1583.17 682.776 L1582.61 682.776 L1582.05 682.776 L1581.49 682.776 L1580.93 682.776 L1580.37 682.776 L1579.82 682.776 L1579.26 682.776 L1578.7 682.776 L1578.14 682.776 L1577.58 682.776 L1577.02 682.776 L1576.46 682.776 L1575.9 682.776 L1575.34 682.776 L1574.78 682.776 L1574.22 682.776 L1573.66 682.776 L1573.1 682.776 L1572.55 682.776 L1571.99 682.776 L1571.43 682.776 L1570.87 682.776 L1570.31 682.776 L1569.75 682.776 L1569.19 682.776 L1568.63 682.776 L1568.07 682.776 L1567.51 682.776 L1566.95 682.776 L1566.39 682.776 L1565.83 682.776 L1565.28 682.776 L1564.72 682.776 L1564.16 682.776 L1563.6 682.776 L1563.04 682.776 L1562.48 682.776 L1561.92 682.776 L1561.36 682.776 L1560.8 682.776 L1560.24 682.776 L1559.68 682.776 L1559.12 682.776 L1558.56 682.776 L1558 682.776 L1557.45 682.776 L1556.89 682.776 L1556.33 682.776 L1555.77 682.776 L1555.21 682.776 L1554.65 682.776 L1554.09 682.776 L1553.53 682.776 L1552.97 682.776 L1552.41 682.776 L1551.85 682.776 L1551.29 682.776 L1550.73 682.776 L1550.18 682.776 L1549.62 682.776 L1549.06 682.776 L1548.5 682.776 L1547.94 682.776 L1547.38 682.776 L1546.82 682.776 L1546.26 682.776 L1545.7 682.776 L1545.14 682.776 L1544.58 682.776 L1544.02 682.776 L1543.46 682.776 L1542.9 682.776 L1542.35 682.776 L1541.79 682.776 L1541.23 682.776 L1540.67 682.776 L1540.11 682.776 L1539.55 682.776 L1538.99 682.776 L1538.43 682.776 L1537.87 682.776 L1537.31 682.776 L1536.75 682.776 L1536.19 682.776 L1535.63 682.776 L1535.08 682.776 L1534.52 682.776 L1533.96 682.776 L1533.4 682.776 L1532.84 682.776 L1532.28 682.776 L1531.72 682.776 L1531.16 682.776 L1530.6 682.776 L1530.04 682.776 L1529.48 682.776 L1528.92 682.776 L1528.36 682.776 L1527.81 682.776 L1527.25 682.776 L1526.69 682.776 L1526.13 682.776 L1525.57 682.776 L1525.01 682.776 L1524.45 682.776 L1523.89 682.776 L1523.33 682.776 L1522.77 682.776 L1522.21 682.776 L1521.65 682.776 L1521.09 682.776 L1520.53 682.776 L1519.98 682.776 L1519.42 682.776 L1518.86 682.776 L1518.3 682.776 L1517.74 682.776 L1517.18 682.776 L1516.62 682.776 L1516.06 682.776 L1515.5 682.776 L1514.94 682.776 L1514.38 682.776 L1513.82 682.776 L1513.26 682.776 L1512.71 682.776 L1512.15 682.776 L1511.59 682.776 L1511.03 682.776 L1510.47 682.776 L1509.91 682.776 L1509.35 682.776 L1508.79 682.776 L1508.23 682.776 L1507.67 682.776 L1507.11 682.776 L1506.55 682.776 L1505.99 682.776 L1505.44 682.776 L1504.88 682.776 L1504.32 682.776 L1503.76 682.776 L1503.2 682.776 L1502.64 682.776 L1502.08 682.776 L1501.52 682.776 L1500.96 682.776 L1500.4 682.776 L1499.84 682.776 L1499.28 682.776 L1498.72 682.776 L1498.16 682.776 L1497.61 682.776 L1497.05 682.776 L1496.49 682.776 L1495.93 682.776 L1495.37 682.776 L1494.81 682.776 L1494.25 682.776 L1493.69 682.776 L1493.13 682.776 L1492.57 682.776 L1492.01 682.776 L1491.45 682.776 L1490.89 682.776 L1490.34 682.776 L1489.78 682.776 L1489.22 682.776 L1488.66 682.776 L1488.1 682.776 L1487.54 682.776 L1486.98 682.776 L1486.42 682.776 L1485.86 682.776 L1485.3 682.776 L1484.74 682.776 L1484.18 682.776 L1483.62 682.776 L1483.07 682.776 L1482.51 682.776 L1481.95 682.776 L1481.39 682.776 L1480.83 682.776 L1480.27 682.776 L1479.71 682.776 L1479.15 682.776 L1478.59 682.776 L1478.03 682.776 L1477.47 682.776 L1476.91 682.776 L1476.35 682.776 L1475.79 682.776 L1475.24 682.776 L1474.68 682.776 L1474.12 682.776 L1473.56 682.776 L1473 682.776 L1472.44 682.776 L1471.88 682.776 L1471.32 682.776 L1470.76 682.776 L1470.2 682.776 L1469.64 682.776 L1469.08 682.776 L1468.52 682.776 L1467.97 682.776 L1467.41 682.776 L1466.85 682.776 L1466.29 682.776 L1465.73 682.776 L1465.17 682.776 L1464.61 682.776 L1464.05 682.776 L1463.49 682.776 L1462.93 682.776 L1462.37 682.776 L1461.81 682.776 L1461.25 682.776 L1460.7 682.776 L1460.14 682.776 L1459.58 682.776 L1459.02 682.776 L1458.46 682.776 L1457.9 682.776 L1457.34 682.776 L1456.78 682.776 L1456.22 682.776 L1455.66 682.776 L1455.1 682.776 L1454.54 682.776 L1453.98 682.776 L1453.42 682.776 L1452.87 682.776 L1452.31 682.776 L1451.75 682.776 L1451.19 682.776 L1450.63 682.776 L1450.07 682.776 L1449.51 682.776 L1448.95 682.776 L1448.39 682.776 L1447.83 682.776 L1447.27 682.776 L1446.71 682.776 L1446.15 682.776 L1445.6 682.776 L1445.04 682.776 L1444.48 682.776 L1443.92 682.776 L1443.36 682.776 L1442.8 682.776 L1442.24 682.776 L1441.68 682.776 L1441.12 682.776 L1440.56 682.776 L1440 682.776 L1439.44 682.776 L1438.88 682.776 L1438.33 682.776 L1437.77 682.776 L1437.21 682.776 L1436.65 682.776 L1436.09 682.776 L1435.53 682.776 L1434.97 682.776 L1434.41 682.776 L1433.85 682.776 L1433.29 682.776 L1432.73 682.776 L1432.17 682.776 L1431.61 682.776 L1431.05 682.776 L1430.5 682.776 L1429.94 682.776 L1429.38 682.776 L1428.82 682.776 L1428.26 682.776 L1427.7 682.776 L1427.14 682.776 L1426.58 682.776 L1426.02 682.776 L1425.46 682.776 L1424.9 682.776 L1424.34 682.776 L1423.78 682.776 L1423.23 682.776 L1422.67 682.776 L1422.11 682.776 L1421.55 682.776 L1420.99 682.776 L1420.43 682.776 L1419.87 682.776 L1419.31 682.776 L1418.75 682.776 L1418.19 682.776 L1417.63 682.776 L1417.07 682.776 L1416.51 682.776 L1415.95 682.776 L1415.4 682.776 L1414.84 682.776 L1414.28 682.776 L1413.72 682.776 L1413.16 682.776 L1412.6 682.776 L1412.04 682.776 L1411.48 682.776 L1410.92 682.776 L1410.36 682.776 L1409.8 682.776 L1409.24 682.776 L1408.68 682.776 L1408.13 682.776 L1407.57 682.776 L1407.01 682.776 L1406.45 682.776 L1405.89 682.776 L1405.33 682.776 L1404.77 682.776 L1404.21 682.776 L1403.65 682.776 L1403.09 682.776 L1402.53 682.776 L1401.97 682.776 L1401.41 682.776 L1400.86 682.776 L1400.3 682.776 L1399.74 682.776 L1399.18 682.776 L1398.62 682.776 L1398.06 682.776 L1397.5 682.776 L1396.94 682.776 L1396.38 682.776 L1395.82 682.776 L1395.26 682.776 L1394.7 682.776 L1394.14 682.776 L1393.58 682.776 L1393.03 682.776 L1392.47 682.776 L1391.91 682.776 L1391.35 682.776 L1390.79 682.776 L1390.23 682.776 L1389.67 682.776 L1389.11 682.776 L1388.55 682.776 L1387.99 682.776 L1387.43 682.776 L1386.87 682.776 L1386.31 682.776 L1385.76 682.776 L1385.2 682.776 L1384.64 682.776 L1384.08 682.776 L1383.52 682.776 L1382.96 682.776 L1382.4 682.776 L1381.84 682.776 L1381.28 682.776 L1380.72 682.776 L1380.16 682.776 L1379.6 682.776 L1379.04 682.776 L1378.49 682.776 L1377.93 682.776 L1377.37 682.776 L1376.81 682.776 L1376.25 682.776 L1375.69 682.776 L1375.13 682.776 L1374.57 682.776 L1374.01 682.776 L1373.45 682.776 L1372.89 682.776 L1372.33 682.776 L1371.77 682.776 L1371.21 682.776 L1370.66 682.776 L1370.1 682.776 L1369.54 682.776 L1368.98 682.776 L1368.42 682.776 L1367.86 682.776 L1367.3 682.776 L1366.74 682.776 L1366.18 682.776 L1365.62 682.776 L1365.06 682.776 L1364.5 682.776 L1363.94 682.776 L1363.39 682.776 L1362.83 682.776 L1362.27 682.776 L1361.71 682.776 L1361.15 682.776 L1360.59 682.776 L1360.03 682.776 L1359.47 682.776 L1358.91 682.776 L1358.35 682.776 L1357.79 682.776 L1357.23 682.776 L1356.67 682.776 L1356.12 682.776 L1355.56 682.776 L1355 682.776 L1354.44 682.776 L1353.88 682.776 L1353.32 682.776 L1352.76 682.776 L1352.2 682.776 L1351.64 682.776 L1351.08 682.776 L1350.52 682.776 L1349.96 682.776 L1349.4 682.776 L1348.84 682.776 L1348.29 682.776 L1347.73 682.776 L1347.17 682.776 L1346.61 682.776 L1346.05 682.776 L1345.49 682.776 L1344.93 682.776 L1344.37 682.776 L1343.81 682.776 L1343.25 682.776 L1342.69 682.776 L1342.13 682.776 L1341.57 682.776 L1341.02 682.776 L1340.46 682.776 L1339.9 682.776 L1339.34 682.776 L1338.78 682.776 L1338.22 682.776 L1337.66 682.776 L1337.1 682.776 L1336.54 682.776 L1335.98 682.776 L1335.42 682.776 L1334.86 682.776 L1334.3 682.776 L1333.75 682.776 L1333.19 682.776 L1332.63 682.776 L1332.07 682.776 L1331.51 682.776 L1330.95 682.776 L1330.39 682.776 L1329.83 682.776 L1329.27 682.776 L1328.71 682.776 L1328.15 682.776 L1327.59 682.776 L1327.03 682.776 L1326.47 682.776 L1325.92 682.776 L1325.36 682.776 L1324.8 682.776 L1324.24 682.776 L1323.68 682.776 L1323.12 682.776 L1322.56 682.776 L1322 682.776 L1321.44 682.776 L1320.88 682.776 L1320.32 682.776 L1319.76 682.776 L1319.2 682.776 L1318.65 682.776 L1318.09 682.776 L1317.53 682.776 L1316.97 682.776 L1316.41 682.776 L1315.85 682.776 L1315.29 682.776 L1314.73 682.776 L1314.17 682.776 L1313.61 682.776 L1313.05 682.776 L1312.49 682.776 L1311.93 682.776 L1311.38 682.776 L1310.82 682.776 L1310.26 682.776 L1309.7 682.776 L1309.14 682.776 L1308.58 682.776 L1308.02 682.776 L1307.46 682.776 L1306.9 682.776 L1306.34 682.776 L1305.78 682.776 L1305.22 682.776 L1304.66 682.776 L1304.1 682.776 L1303.55 682.776 L1302.99 682.776 L1302.43 682.776 L1301.87 682.776 L1301.31 682.776 L1300.75 682.776 L1300.19 682.776 L1299.63 682.776 L1299.07 682.776 L1298.51 682.776 L1297.95 682.776 L1297.39 682.776 L1296.83 682.776 L1296.28 682.776 L1295.72 682.776 L1295.16 682.776 L1294.6 682.776 L1294.04 682.776 L1293.48 682.776 L1292.92 682.776 L1292.36 682.776 L1291.8 682.776 L1291.24 682.776 L1290.68 682.776 L1290.12 682.776 L1289.56 682.776 L1289 682.776 L1288.45 682.776 L1287.89 682.776 L1287.33 682.776 L1286.77 682.776 L1286.21 682.776 L1285.65 682.776 L1285.09 682.776 L1284.53 682.776 L1283.97 682.776 L1283.41 682.776 L1282.85 682.776 L1282.29 682.776 L1281.73 682.776 L1281.18 682.776 L1280.62 682.776 L1280.06 682.776 L1279.5 682.776 L1278.94 682.776 L1278.38 682.776 L1277.82 682.776 L1277.26 682.776 L1276.7 682.776 L1276.14 682.776 L1275.58 682.776 L1275.02 682.776 L1274.46 682.776 L1273.91 682.776 L1273.35 682.776 L1272.79 682.776 L1272.23 682.776 L1271.67 682.776 L1271.11 682.776 L1270.55 682.776 L1269.99 682.776 L1269.43 682.776 L1268.87 682.776 L1268.31 682.776 L1267.75 682.776 L1267.19 682.776 L1266.63 682.776 L1266.08 682.776 L1265.52 682.776 L1264.96 682.776 L1264.4 682.776 L1263.84 682.776 L1263.28 682.776 L1262.72 682.776 L1262.16 682.776 L1261.6 682.776 L1261.04 682.776 L1260.48 682.776 L1259.92 682.776 L1259.36 682.776 L1258.81 682.776 L1258.25 682.776 L1257.69 682.776 L1257.13 682.776 L1256.57 682.776 L1256.01 682.776 L1255.45 682.776 L1254.89 682.776 L1254.33 682.776 L1253.77 682.776 L1253.21 682.776 L1252.65 682.776 L1252.09 682.776 L1251.54 682.776 L1250.98 682.776 L1250.42 682.776 L1249.86 682.776 L1249.3 682.776 L1248.74 682.776 L1248.18 682.776 L1247.62 682.776 L1247.06 682.776 L1246.5 682.776 L1245.94 682.776 L1245.38 682.776 L1244.82 682.776 L1244.26 682.776 L1243.71 682.776 L1243.15 682.776 L1242.59 682.776 L1242.03 682.776 L1241.47 682.776 L1240.91 682.776 L1240.35 682.776 L1239.79 682.776 L1239.23 682.776 L1238.67 682.776 L1238.11 682.776 L1237.55 682.776 L1236.99 682.776 L1236.44 682.776 L1235.88 682.776 L1235.32 682.776 L1234.76 682.776 L1234.2 682.776 L1233.64 682.776 L1233.08 682.776 L1232.52 682.776 L1231.96 682.776 L1231.4 682.776 L1230.84 682.776 L1230.28 682.776 L1229.72 682.776 L1229.17 682.776 L1228.61 682.776 L1228.05 682.776 L1227.49 682.776 L1226.93 682.776 L1226.37 682.776 L1225.81 682.776 L1225.25 682.776 L1224.69 682.776 L1224.13 682.776 L1223.57 682.776 L1223.01 682.776 L1222.45 682.776 L1221.89 682.776 L1221.34 682.776 L1220.78 682.776 L1220.22 682.776 L1219.66 682.776 L1219.1 682.776 L1218.54 682.776 L1217.98 682.776 L1217.42 682.776 L1216.86 682.776 L1216.3 682.776 L1215.74 682.776 L1215.18 682.776 L1214.62 682.776 L1214.07 682.776 L1213.51 682.776 L1212.95 682.776 L1212.39 682.776 L1211.83 682.776 L1211.27 682.776 L1210.71 682.776 L1210.15 682.776 L1209.59 682.776 L1209.03 682.776 L1208.47 682.776 L1207.91 682.776 L1207.35 682.776 L1206.8 682.776 L1206.24 682.776 L1205.68 682.776 L1205.12 682.776 L1204.56 682.776 L1204 682.776 L1203.44 682.776 L1202.88 682.776 L1202.32 682.776 L1201.76 682.776 L1201.2 682.776 L1200.64 682.776 L1200.08 682.776 L1199.52 682.776 L1198.97 682.776 L1198.41 682.776 L1197.85 682.776 L1197.29 682.776 L1196.73 682.776 L1196.17 682.776 L1195.61 682.776 L1195.05 682.776 L1194.49 682.776 L1193.93 682.776 L1193.37 682.776 L1192.81 682.776 L1192.25 682.776 L1191.7 682.776 L1191.14 682.776 L1190.58 682.776 L1190.02 682.776 L1189.46 682.776 L1188.9 682.776 L1188.34 682.776 L1187.78 682.776 L1187.22 682.776 L1186.66 682.776 L1186.1 682.776 L1185.54 682.776 L1184.98 682.776 L1184.43 682.776 L1183.87 682.776 L1183.31 682.776 L1182.75 682.776 L1182.19 682.776 L1181.63 682.776 L1181.07 682.776 L1180.51 682.776 L1179.95 682.776 L1179.39 682.776 L1178.83 682.776 L1178.27 682.776 L1177.71 682.776 L1177.15 682.776 L1176.6 682.776 L1176.04 682.776 L1175.48 682.776 L1174.92 682.776 L1174.36 682.776 L1173.8 682.776 L1173.24 682.776 L1172.68 682.776 L1172.12 682.776 L1171.56 682.776 L1171 682.776 L1170.44 682.776 L1169.88 682.776 L1169.33 682.776 L1168.77 682.776 L1168.21 682.776 L1167.65 682.776 L1167.09 682.776 L1166.53 682.776 L1165.97 682.776 L1165.41 682.776 L1164.85 682.776 L1164.29 682.776 L1163.73 682.776 L1163.17 682.776 L1162.61 682.776 L1162.05 682.776 L1161.5 682.776 L1160.94 682.776 L1160.38 682.776 L1159.82 682.776 L1159.26 682.776 L1158.7 682.776 L1158.14 682.776 L1157.58 682.776 L1157.02 682.776 L1156.46 682.776 L1155.9 682.776 L1155.34 682.776 L1154.78 682.776 L1154.23 682.776 L1153.67 682.776 L1153.11 682.776 L1152.55 682.776 L1151.99 682.776 L1151.43 682.776 L1150.87 682.776 L1150.31 682.776 L1149.75 682.776 L1149.19 682.776 L1148.63 682.776 L1148.07 682.776 L1147.51 682.776 L1146.96 682.776 L1146.4 682.776 L1145.84 682.776 L1145.28 682.776 L1144.72 682.776 L1144.16 682.776 L1143.6 682.776 L1143.04 682.776 L1142.48 682.776 L1141.92 682.776 L1141.36 682.776 L1140.8 682.776 L1140.24 682.776 L1139.68 682.776 L1139.13 682.776 L1138.57 682.776 L1138.01 682.776 L1137.45 682.776 L1136.89 682.776 L1136.33 682.776 L1135.77 682.776 L1135.21 682.776 L1134.65 682.776 L1134.09 682.776 L1133.53 682.776 L1132.97 682.776 L1132.41 682.776 L1131.86 682.776 L1131.3 682.776 L1130.74 682.776 L1130.18 682.776 L1129.62 682.776 L1129.06 682.776 L1128.5 682.776 L1127.94 682.776 L1127.38 682.776 L1126.82 682.776 L1126.26 682.776 L1125.7 682.776 L1125.14 682.776 L1124.59 682.776 L1124.03 682.776 L1123.47 682.776 L1122.91 682.776 L1122.35 682.776 L1121.79 682.776 L1121.23 682.776 L1120.67 682.776 L1120.11 682.776 L1119.55 682.776 L1118.99 682.776 L1118.43 682.776 L1117.87 682.776 L1117.31 682.776 L1116.76 682.776 L1116.2 682.776 L1115.64 682.776 L1115.08 682.776 L1114.52 682.776 L1113.96 682.776 L1113.4 682.776 L1112.84 682.776 L1112.28 682.776 L1111.72 682.776 L1111.16 682.776 L1110.6 682.776 L1110.04 682.776 L1109.49 682.776 L1108.93 682.776 L1108.37 682.776 L1107.81 682.776 L1107.25 682.776 L1106.69 682.776 L1106.13 682.776 L1105.57 682.776 L1105.01 682.776 L1104.45 682.776 L1103.89 682.776 L1103.33 682.776 L1102.77 682.776 L1102.22 682.776 L1101.66 682.776 L1101.1 682.776 L1100.54 682.776 L1099.98 682.776 L1099.42 682.776 L1098.86 682.776 L1098.3 682.776 L1097.74 682.776 L1097.18 682.776 L1096.62 682.776 L1096.06 682.776 L1095.5 682.776 L1094.94 682.776 L1094.39 682.776 L1093.83 682.776 L1093.27 682.776 L1092.71 682.776 L1092.15 682.776 L1091.59 682.776 L1091.03 682.776 L1090.47 682.776 L1089.91 682.776 L1089.35 682.776 L1088.79 682.776 L1088.23 682.776 L1087.67 682.776 L1087.12 682.776 L1086.56 682.776 L1086 682.776 L1085.44 682.776 L1084.88 682.776 L1084.32 682.776 L1083.76 682.776 L1083.2 682.776 L1082.64 682.776 L1082.08 682.776 L1081.52 682.776 L1080.96 682.776 L1080.4 682.776 L1079.85 682.776 L1079.29 682.776 L1078.73 682.776 L1078.17 682.776 L1077.61 682.776 L1077.05 682.776 L1076.49 682.776 L1075.93 682.776 L1075.37 682.776 L1074.81 682.776 L1074.25 682.776 L1073.69 682.776 L1073.13 682.776 L1072.57 682.776 L1072.02 682.776 L1071.46 682.776 L1070.9 682.776 L1070.34 682.776 L1069.78 682.776 L1069.22 682.776 L1068.66 682.776 L1068.1 682.776 L1067.54 682.776 L1066.98 682.776 L1066.42 682.776 L1065.86 682.776 L1065.3 682.776 L1064.75 682.776 L1064.19 682.776 L1063.63 682.776 L1063.07 682.776 L1062.51 682.776 L1061.95 682.776 L1061.39 682.776 L1060.83 682.776 L1060.27 682.776 L1059.71 682.776 L1059.15 682.776 L1058.59 682.776 L1058.03 682.776 L1057.48 682.776 L1056.92 682.776 L1056.36 682.776 L1055.8 682.776 L1055.24 682.776 L1054.68 682.776 L1054.12 682.776 L1053.56 682.776 L1053 682.776 L1052.44 682.776 L1051.88 682.776 L1051.32 682.776 L1050.76 682.776 L1050.2 682.776 L1049.65 682.776 L1049.09 682.776 L1048.53 682.776 L1047.97 682.776 L1047.41 682.776 L1046.85 682.776 L1046.29 682.776 L1045.73 682.776 L1045.17 682.776 L1044.61 682.776 L1044.05 682.776 L1043.49 682.776 L1042.93 682.776 L1042.38 682.776 L1041.82 682.776 L1041.26 682.776 L1040.7 682.776 L1040.14 682.776 L1039.58 682.776 L1039.02 682.776 L1038.46 682.776 L1037.9 682.776 L1037.34 682.776 L1036.78 682.776 L1036.22 682.776 L1035.66 682.776 L1035.1 682.776 L1034.55 682.776 L1033.99 682.776 L1033.43 682.776 L1032.87 682.776 L1032.31 682.776 L1031.75 682.776 L1031.19 682.776 L1030.63 682.776 L1030.07 682.776 L1029.51 682.776 L1028.95 682.776 L1028.39 682.776 L1027.83 682.776 L1027.28 682.776 L1026.72 682.776 L1026.16 682.776 L1025.6 682.776 L1025.04 682.776 L1024.48 682.776 L1023.92 682.776 L1023.36 682.776 L1022.8 682.776 L1022.24 682.776 L1021.68 682.776 L1021.12 682.776 L1020.56 682.776 L1020.01 682.776 L1019.45 682.776 L1018.89 682.776 L1018.33 682.776 L1017.77 682.776 L1017.21 682.776 L1016.65 682.776 L1016.09 682.776 L1015.53 682.776 L1014.97 682.776 L1014.41 682.776 L1013.85 682.776 L1013.29 682.776 L1012.73 682.776 L1012.18 682.776 L1011.62 682.776 L1011.06 682.776 L1010.5 682.776 L1009.94 682.776 L1009.38 682.776 L1008.82 682.776 L1008.26 682.776 L1007.7 682.776 L1007.14 682.776 L1006.58 682.776 L1006.02 682.776 L1005.46 682.776 L1004.91 682.776 L1004.35 682.776 L1003.79 682.776 L1003.23 682.776 L1002.67 682.776 L1002.11 682.776 L1001.55 682.776 L1000.99 682.776 L1000.43 682.776 L999.872 682.776 L999.313 682.776 L998.754 682.776 L998.194 682.776 L997.635 682.776 L997.076 682.776 L996.517 682.776 L995.957 682.776 L995.398 682.776 L994.839 682.776 L994.28 682.776 L993.72 682.776 L993.161 682.776 L992.602 682.776 L992.043 682.776 L991.483 682.776 L990.924 682.776 L990.365 682.776 L989.806 682.776 L989.246 682.776 L988.687 682.776 L988.128 682.776 L987.569 682.776 L987.009 682.776 L986.45 682.776 L985.891 682.776 L985.332 682.776 L984.772 682.776 L984.213 682.776 L983.654 682.776 L983.095 682.776 L982.535 682.776 L981.976 682.776 L981.417 682.776 L980.858 682.776 L980.298 682.776 L979.739 682.776 L979.18 682.776 L978.621 682.776 L978.061 682.776 L977.502 682.776 L976.943 682.776 L976.384 682.776 L975.824 682.776 L975.265 682.776 L974.706 682.776 L974.147 682.776 L973.587 682.776 L973.028 682.776 L972.469 682.776 L971.91 682.776 L971.35 682.776 L970.791 682.776 L970.232 682.776 L969.673 682.776 L969.113 682.776 L968.554 682.776 L967.995 682.776 L967.436 682.776 L966.876 682.776 L966.317 682.776 L965.758 682.776 L965.199 682.776 L964.639 682.776 L964.08 682.776 L963.521 682.776 L962.962 682.776 L962.402 682.776 L961.843 682.776 L961.284 682.776 L960.725 682.776 L960.165 682.776 L959.606 682.776 L959.047 682.776 L958.488 682.776 L957.928 682.776 L957.369 682.776 L956.81 682.776 L956.251 682.776 L955.691 682.776 L955.132 682.776 L954.573 682.776 L954.014 682.776 L953.454 682.776 L952.895 682.776 L952.336 682.776 L951.777 682.776 L951.217 682.776 L950.658 682.776 L950.099 682.776 L949.54 682.776 L948.98 682.776 L948.421 682.776 L947.862 682.776 L947.303 682.776 L946.743 682.776 L946.184 682.776 L945.625 682.776 L945.066 682.776 L944.506 682.776 L943.947 682.776 L943.388 682.776 L942.829 682.776 L942.269 682.776 L941.71 682.776 L941.151 682.776 L940.592 682.776 L940.032 682.776 L939.473 682.776 L938.914 682.776 L938.355 682.776 L937.795 682.776 L937.236 682.776 L936.677 682.776 L936.118 682.776 L935.558 682.776 L934.999 682.776 L934.44 682.776 L933.881 682.776 L933.321 682.776 L932.762 682.776 L932.203 682.776 L931.644 682.776 L931.084 682.776 L930.525 682.776 L929.966 682.776 L929.406 682.776 L928.847 682.776 L928.288 682.776 L927.729 682.776 L927.169 682.776 L926.61 682.776 L926.051 682.776 L925.492 682.776 L924.932 682.776 L924.373 682.776 L923.814 682.776 L923.255 682.776 L922.695 682.776 L922.136 682.776 L921.577 682.776 L921.018 682.776 L920.458 682.776 L919.899 682.776 L919.34 682.776 L918.781 682.776 L918.221 682.776 L917.662 682.776 L917.103 682.776 L916.544 682.776 L915.984 682.776 L915.425 682.776 L914.866 682.776 L914.307 682.776 L913.747 682.776 L913.188 682.776 L912.629 682.776 L912.07 682.776 L911.51 682.776 L910.951 682.776 L910.392 682.776 L909.833 682.776 L909.273 682.776 L908.714 682.776 L908.155 682.776 L907.596 682.776 L907.036 682.776 L906.477 682.776 L905.918 682.776 L905.359 682.776 L904.799 682.776 L904.24 682.776 L903.681 682.776 L903.122 682.776 L902.562 682.776 L902.003 682.776 L901.444 682.776 L900.885 682.776 L900.325 682.776 L899.766 682.776 L899.207 682.776 L898.648 682.776 L898.088 682.776 L897.529 682.776 L896.97 682.776 L896.411 682.776 L895.851 682.776 L895.292 682.776 L894.733 682.776 L894.174 682.776 L893.614 682.776 L893.055 682.776 L892.496 682.776 L891.937 682.776 L891.377 682.776 L890.818 682.776 L890.259 682.776 L889.7 682.776 L889.14 682.776 L888.581 682.776 L888.022 682.776 L887.463 682.776 L886.903 682.776 L886.344 682.776 L885.785 682.776 L885.226 682.776 L884.666 682.776 L884.107 682.776 L883.548 682.776 L882.989 682.776 L882.429 682.776 L881.87 682.776 L881.311 682.776 L880.752 682.776 L880.192 682.776 L879.633 682.776 L879.074 682.776 L878.515 682.776 L877.955 682.776 L877.396 682.776 L876.837 682.776 L876.278 682.776 L875.718 682.776 L875.159 682.776 L874.6 682.776 L874.041 682.776 L873.481 682.776 L872.922 682.776 L872.363 682.776 L871.804 682.776 L871.244 682.776 L870.685 682.776 L870.126 682.776 L869.567 682.776 L869.007 682.776 L868.448 682.776 L867.889 682.776 L867.33 682.776 L866.77 682.776 L866.211 682.776 L865.652 682.776 L865.093 682.776 L864.533 682.776 L863.974 682.776 L863.415 682.776 L862.856 682.776 L862.296 682.776 L861.737 682.776 L861.178 682.776 L860.619 682.776 L860.059 682.776 L859.5 682.776 L858.941 682.776 L858.382 682.776 L857.822 682.776 L857.263 682.776 L856.704 682.776 L856.145 682.776 L855.585 682.776 L855.026 682.776 L854.467 682.776 L853.908 682.776 L853.348 682.776 L852.789 682.776 L852.23 682.776 L851.671 682.776 L851.111 682.776 L850.552 682.776 L849.993 682.776 L849.434 682.776 L848.874 682.776 L848.315 682.776 L847.756 682.776 L847.197 682.776 L846.637 682.776 L846.078 682.776 L845.519 682.776 L844.96 682.776 L844.4 682.776 L843.841 682.776 L843.282 682.776 L842.723 682.776 L842.163 682.776 L841.604 682.776 L841.045 682.776 L840.486 682.776 L839.926 682.776 L839.367 682.776 L838.808 682.776 L838.249 682.776 L837.689 682.776 L837.13 682.776 L836.571 682.776 L836.012 682.776 L835.452 682.776 L834.893 682.776 L834.334 682.776 L833.775 682.776 L833.215 682.776 L832.656 682.776 L832.097 682.776 L831.538 682.776 L830.978 682.776 L830.419 682.776 L829.86 682.776 L829.301 682.776 L828.741 682.776 L828.182 682.776 L827.623 682.776 L827.064 682.776 L826.504 682.776 L825.945 682.776 L825.386 682.776 L824.827 682.776 L824.267 682.776 L823.708 682.776 L823.149 682.776 L822.59 682.776 L822.03 682.776 L821.471 682.776 L820.912 682.776 L820.353 682.776 L819.793 682.776 L819.234 682.776 L818.675 682.776 L818.116 682.776 L817.556 682.776 L816.997 682.776 L816.438 682.776 L815.879 682.776 L815.319 682.776 L814.76 682.776 L814.201 682.776 L813.642 682.776 L813.082 682.776 L812.523 682.776 L811.964 682.776 L811.405 682.776 L810.845 682.776 L810.286 682.776 L809.727 682.776 L809.168 682.776 L808.608 682.776 L808.049 682.776 L807.49 682.776 L806.931 682.776 L806.371 682.776 L805.812 682.776 L805.253 682.776 L804.693 682.776 L804.134 682.776 L803.575 682.776 L803.016 682.776 L802.456 682.776 L801.897 682.776 L801.338 682.776 L800.779 682.776 L800.219 682.776 L799.66 682.776 L799.101 682.776 L798.542 682.776 L797.982 682.776 L797.423 682.776 L796.864 682.776 L796.305 682.776 L795.745 682.776 L795.186 682.776 L794.627 682.776 L794.068 682.776 L793.508 682.776 L792.949 682.776 L792.39 682.776 L791.831 682.776 L791.271 682.776 L790.712 682.776 L790.153 682.776 L789.594 682.776 L789.034 682.776 L788.475 682.776 L787.916 682.776 L787.357 682.776 L786.797 682.776 L786.238 682.776 L785.679 682.776 L785.12 682.776 L784.56 682.776 L784.001 682.776 L783.442 682.776 L782.883 682.776 L782.323 682.776 L781.764 682.776 L781.205 682.776 L780.646 682.776 L780.086 682.776 L779.527 682.776 L778.968 682.776 L778.409 682.776 L777.849 682.776 L777.29 682.776 L776.731 682.776 L776.172 682.776 L775.612 682.776 L775.053 682.776 L774.494 682.776 L773.935 682.776 L773.375 682.776 L772.816 682.776 L772.257 682.776 L771.698 682.776 L771.138 682.776 L770.579 682.776 L770.02 682.776 L769.461 682.776 L768.901 682.776 L768.342 682.776 L767.783 682.776 L767.224 682.776 L766.664 682.776 L766.105 682.776 L765.546 682.776 L764.987 682.776 L764.427 682.776 L763.868 682.776 L763.309 682.776 L762.75 682.776 L762.19 682.776 L761.631 682.776 L761.072 682.776 L760.513 682.776 L759.953 682.776 L759.394 682.776 L758.835 682.776 L758.276 682.776 L757.716 682.776 L757.157 682.776 L756.598 682.776 L756.039 682.776 L755.479 682.776 L754.92 682.776 L754.361 682.776 L753.802 682.776 L753.242 682.776 L752.683 682.776 L752.124 682.776 L751.565 682.776 L751.005 682.776 L750.446 682.776 L749.887 682.776 L749.328 682.776 L748.768 682.776 L748.209 682.776 L747.65 682.776 L747.091 682.776 L746.531 682.776 L745.972 682.776 L745.413 682.776 L744.854 682.776 L744.294 682.776 L743.735 682.776 L743.176 682.776 L742.617 682.776 L742.057 682.776 L741.498 682.776 L740.939 682.776 L740.38 682.776 L739.82 682.776 L739.261 682.776 L738.702 682.776 L738.143 682.776 L737.583 682.776 L737.024 682.776 L736.465 682.776 L735.906 682.776 L735.346 682.776 L734.787 682.776 L734.228 682.776 L733.669 682.776 L733.109 682.776 L732.55 682.776 L731.991 682.776 L731.432 682.776 L730.872 682.776 L730.313 682.776 L729.754 682.776 L729.195 682.776 L728.635 682.776 L728.076 682.776 L727.517 682.776 L726.958 682.776 L726.398 682.776 L725.839 682.776 L725.28 682.776 L724.721 682.776 L724.161 682.776 L723.602 682.776 L723.043 682.776 L722.484 682.776 L721.924 682.776 L721.365 682.776 L720.806 682.776 L720.247 682.776  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.639 720.806,683.639 721.365,683.639 721.924,683.639 722.484,683.639 723.043,683.639 723.602,683.639 724.161,683.639 724.721,683.639 725.28,683.639 725.839,683.639 726.398,683.639 726.958,683.639 727.517,683.639 728.076,683.639 728.635,683.639 729.195,683.639 729.754,683.639 730.313,683.639 730.872,683.639 731.432,683.639 731.991,683.639 732.55,683.639 733.109,683.639 733.669,683.639 734.228,683.639 734.787,683.639 735.346,683.639 735.906,683.639 736.465,683.639 737.024,683.639 737.583,683.639 738.143,683.639 738.702,683.639 739.261,683.639 739.82,683.639 740.38,683.639 740.939,683.639 741.498,683.639 742.057,683.639 742.617,683.639 743.176,683.639 743.735,683.639 744.294,683.639 744.854,683.639 745.413,683.639 745.972,683.639 746.531,683.639 747.091,683.639 747.65,683.639 748.209,683.639 748.768,683.639 749.328,683.639 749.887,683.639 750.446,683.639 751.005,683.639 751.565,683.639 752.124,683.639 752.683,683.639 753.242,683.639 753.802,683.639 754.361,683.639 754.92,683.639 755.479,683.639 756.039,683.639 756.598,683.639 757.157,683.639 757.716,683.639 758.276,683.639 758.835,683.639 759.394,683.639 759.953,683.639 760.513,683.639 761.072,683.639 761.631,683.639 762.19,683.639 762.75,683.639 763.309,683.639 763.868,683.639 764.427,683.639 764.987,683.639 765.546,683.639 766.105,683.639 766.664,683.639 767.224,683.639 767.783,683.639 768.342,683.639 768.901,683.639 769.461,683.639 770.02,683.639 770.579,683.639 771.138,683.639 771.698,683.639 772.257,683.639 772.816,683.639 773.375,683.639 773.935,683.639 774.494,683.639 775.053,683.639 775.612,683.639 776.172,683.639 776.731,683.639 777.29,683.639 777.849,683.639 778.409,683.639 778.968,683.639 779.527,683.639 780.086,683.639 780.646,683.639 781.205,683.639 781.764,683.639 782.323,683.639 782.883,683.639 783.442,683.639 784.001,683.639 784.56,683.639 785.12,683.639 785.679,683.639 786.238,683.639 786.797,683.639 787.357,683.639 787.916,683.639 788.475,683.639 789.034,683.639 789.594,683.639 790.153,683.639 790.712,683.639 791.271,683.639 791.831,683.639 792.39,683.639 792.949,683.639 793.508,683.639 794.068,683.639 794.627,683.639 795.186,683.639 795.745,683.639 796.305,683.639 796.864,683.639 797.423,683.639 797.982,683.639 798.542,683.639 799.101,683.639 799.66,683.639 800.219,683.639 800.779,683.639 801.338,683.639 801.897,683.639 802.456,683.639 803.016,683.639 803.575,683.639 804.134,683.639 804.693,683.639 805.253,683.639 805.812,683.639 806.371,683.639 806.931,683.639 807.49,683.639 808.049,683.639 808.608,683.639 809.168,683.639 809.727,683.639 810.286,683.639 810.845,683.639 811.405,683.639 811.964,683.639 812.523,683.639 813.082,683.639 813.642,683.639 814.201,683.639 814.76,683.639 815.319,683.639 815.879,683.639 816.438,683.639 816.997,683.639 817.556,683.639 818.116,683.639 818.675,683.639 819.234,683.639 819.793,683.639 820.353,683.639 820.912,683.639 821.471,683.639 822.03,683.639 822.59,683.639 823.149,683.639 823.708,683.639 824.267,683.639 824.827,683.639 825.386,683.639 825.945,683.639 826.504,683.639 827.064,683.639 827.623,683.639 828.182,683.639 828.741,683.639 829.301,683.639 829.86,683.639 830.419,683.639 830.978,683.639 831.538,683.639 832.097,683.639 832.656,683.639 833.215,683.639 833.775,683.639 834.334,683.639 834.893,683.639 835.452,683.639 836.012,683.639 836.571,683.639 837.13,683.639 837.689,683.639 838.249,683.639 838.808,683.639 839.367,683.639 839.926,683.639 840.486,683.639 841.045,683.639 841.604,683.639 842.163,683.639 842.723,683.639 843.282,683.639 843.841,683.639 844.4,683.639 844.96,683.639 845.519,683.639 846.078,683.639 846.637,683.639 847.197,683.639 847.756,683.639 848.315,683.639 848.874,683.639 849.434,683.639 849.993,683.639 850.552,683.639 851.111,683.639 851.671,683.639 852.23,683.639 852.789,683.639 853.348,683.639 853.908,683.639 854.467,683.639 855.026,683.639 855.585,683.639 856.145,683.639 856.704,683.639 857.263,683.639 857.822,683.639 858.382,683.639 858.941,683.639 859.5,683.639 860.059,683.639 860.619,683.639 861.178,683.639 861.737,683.639 862.296,683.639 862.856,683.639 863.415,683.639 863.974,683.639 864.533,683.639 865.093,683.639 865.652,683.639 866.211,683.639 866.77,683.639 867.33,683.639 867.889,683.639 868.448,683.639 869.007,683.639 869.567,683.639 870.126,683.639 870.685,683.639 871.244,683.639 871.804,683.639 872.363,683.639 872.922,683.639 873.481,683.639 874.041,683.639 874.6,683.639 875.159,683.639 875.718,683.639 876.278,683.639 876.837,683.639 877.396,683.639 877.955,683.639 878.515,683.639 879.074,683.639 879.633,683.639 880.192,683.639 880.752,683.639 881.311,683.639 881.87,683.639 882.429,683.639 882.989,683.639 883.548,683.639 884.107,683.639 884.666,683.639 885.226,683.639 885.785,683.639 886.344,683.639 886.903,683.639 887.463,683.639 888.022,683.639 888.581,683.639 889.14,683.639 889.7,683.639 890.259,683.639 890.818,683.639 891.377,683.639 891.937,683.639 892.496,683.639 893.055,683.639 893.614,683.639 894.174,683.639 894.733,683.639 895.292,683.639 895.851,683.639 896.411,683.639 896.97,683.639 897.529,683.639 898.088,683.639 898.648,683.639 899.207,683.639 899.766,683.639 900.325,683.639 900.885,683.639 901.444,683.639 902.003,683.639 902.562,683.639 903.122,683.639 903.681,683.639 904.24,683.639 904.799,683.639 905.359,683.639 905.918,683.639 906.477,683.639 907.036,683.639 907.596,683.639 908.155,683.639 908.714,683.639 909.273,683.639 909.833,683.639 910.392,683.639 910.951,683.639 911.51,683.639 912.07,683.639 912.629,683.639 913.188,683.639 913.747,683.639 914.307,683.639 914.866,683.639 915.425,683.639 915.984,683.639 916.544,683.639 917.103,683.639 917.662,683.639 918.221,683.639 918.781,683.639 919.34,683.639 919.899,683.639 920.458,683.639 921.018,683.639 921.577,683.639 922.136,683.639 922.695,683.639 923.255,683.639 923.814,683.639 924.373,683.639 924.932,683.639 925.492,683.639 926.051,683.639 926.61,683.639 927.169,683.639 927.729,683.639 928.288,683.639 928.847,683.639 929.406,683.639 929.966,683.639 930.525,683.639 931.084,683.639 931.644,683.639 932.203,683.639 932.762,683.639 933.321,683.639 933.881,683.639 934.44,683.639 934.999,683.639 935.558,683.639 936.118,683.639 936.677,683.639 937.236,683.639 937.795,683.639 938.355,683.639 938.914,683.639 939.473,683.639 940.032,683.639 940.592,683.639 941.151,683.639 941.71,683.639 942.269,683.639 942.829,683.639 943.388,683.639 943.947,683.639 944.506,683.639 945.066,683.639 945.625,683.639 946.184,683.639 946.743,683.639 947.303,683.639 947.862,683.639 948.421,683.639 948.98,683.639 949.54,683.639 950.099,683.639 950.658,683.639 951.217,683.639 951.777,683.639 952.336,683.639 952.895,683.639 953.454,683.639 954.014,683.639 954.573,683.639 955.132,683.639 955.691,683.639 956.251,683.639 956.81,683.639 957.369,683.639 957.928,683.639 958.488,683.639 959.047,683.639 959.606,683.639 960.165,683.639 960.725,683.639 961.284,683.639 961.843,683.639 962.402,683.639 962.962,683.639 963.521,683.639 964.08,683.639 964.639,683.639 965.199,683.639 965.758,683.639 966.317,683.639 966.876,683.639 967.436,683.639 967.995,683.639 968.554,683.639 969.113,683.639 969.673,683.639 970.232,683.639 970.791,683.639 971.35,683.639 971.91,683.639 972.469,683.639 973.028,683.639 973.587,683.639 974.147,683.639 974.706,683.639 975.265,683.639 975.824,683.639 976.384,683.639 976.943,683.639 977.502,683.639 978.061,683.639 978.621,683.639 979.18,683.639 979.739,683.639 980.298,683.639 980.858,683.639 981.417,683.639 981.976,683.639 982.535,683.639 983.095,683.639 983.654,683.639 984.213,683.639 984.772,683.639 985.332,683.639 985.891,683.639 986.45,683.639 987.009,683.639 987.569,683.639 988.128,683.639 988.687,683.639 989.246,683.639 989.806,683.639 990.365,683.639 990.924,683.639 991.483,683.639 992.043,683.639 992.602,683.639 993.161,683.639 993.72,683.639 994.28,683.639 994.839,683.639 995.398,683.639 995.957,683.639 996.517,683.639 997.076,683.639 997.635,683.639 998.194,683.639 998.754,683.639 999.313,683.639 999.872,683.639 1000.43,683.639 1000.99,683.639 1001.55,683.639 1002.11,683.639 1002.67,683.639 1003.23,683.639 1003.79,683.639 1004.35,683.639 1004.91,683.639 1005.46,683.639 1006.02,683.639 1006.58,683.639 1007.14,683.639 1007.7,683.639 1008.26,683.639 1008.82,683.639 1009.38,683.639 1009.94,683.639 1010.5,683.639 1011.06,683.639 1011.62,683.639 1012.18,683.639 1012.73,683.639 1013.29,683.639 1013.85,683.639 1014.41,683.639 1014.97,683.639 1015.53,683.639 1016.09,683.639 1016.65,683.639 1017.21,683.639 1017.77,683.639 1018.33,683.639 1018.89,683.639 1019.45,683.639 1020.01,683.639 1020.56,683.639 1021.12,683.639 1021.68,683.639 1022.24,683.639 1022.8,683.639 1023.36,683.639 1023.92,683.639 1024.48,683.639 1025.04,683.639 1025.6,683.639 1026.16,683.639 1026.72,683.639 1027.28,683.639 1027.83,683.639 1028.39,683.639 1028.95,683.639 1029.51,683.639 1030.07,683.639 1030.63,683.639 1031.19,683.639 1031.75,683.639 1032.31,683.639 1032.87,683.639 1033.43,683.639 1033.99,683.639 1034.55,683.639 1035.1,683.639 1035.66,683.639 1036.22,683.639 1036.78,683.639 1037.34,683.639 1037.9,683.639 1038.46,683.639 1039.02,683.639 1039.58,683.639 1040.14,683.639 1040.7,683.639 1041.26,683.639 1041.82,683.639 1042.38,683.639 1042.93,683.639 1043.49,683.639 1044.05,683.639 1044.61,683.639 1045.17,683.639 1045.73,683.639 1046.29,683.639 1046.85,683.639 1047.41,683.639 1047.97,683.639 1048.53,683.639 1049.09,683.639 1049.65,683.639 1050.2,683.639 1050.76,683.639 1051.32,683.639 1051.88,683.639 1052.44,683.639 1053,683.639 1053.56,683.639 1054.12,683.639 1054.68,683.639 1055.24,683.639 1055.8,683.639 1056.36,683.639 1056.92,683.639 1057.48,683.639 1058.03,683.639 1058.59,683.639 1059.15,683.639 1059.71,683.639 1060.27,683.639 1060.83,683.639 1061.39,683.639 1061.95,683.639 1062.51,683.639 1063.07,683.639 1063.63,683.639 1064.19,683.639 1064.75,683.639 1065.3,683.639 1065.86,683.639 1066.42,683.639 1066.98,683.639 1067.54,683.639 1068.1,683.639 1068.66,683.639 1069.22,683.639 1069.78,683.639 1070.34,683.639 1070.9,683.639 1071.46,683.639 1072.02,683.639 1072.57,683.639 1073.13,683.639 1073.69,683.639 1074.25,683.639 1074.81,683.639 1075.37,683.639 1075.93,683.639 1076.49,683.639 1077.05,683.639 1077.61,683.639 1078.17,683.639 1078.73,683.639 1079.29,683.639 1079.85,683.639 1080.4,683.639 1080.96,683.639 1081.52,683.639 1082.08,683.639 1082.64,683.639 1083.2,683.639 1083.76,683.639 1084.32,683.639 1084.88,683.639 1085.44,683.639 1086,683.639 1086.56,683.639 1087.12,683.639 1087.67,683.639 1088.23,683.639 1088.79,683.639 1089.35,683.639 1089.91,683.639 1090.47,683.639 1091.03,683.639 1091.59,683.639 1092.15,683.639 1092.71,683.639 1093.27,683.639 1093.83,683.639 1094.39,683.639 1094.94,683.639 1095.5,683.639 1096.06,683.639 1096.62,683.639 1097.18,683.639 1097.74,683.639 1098.3,683.639 1098.86,683.639 1099.42,683.639 1099.98,683.639 1100.54,683.639 1101.1,683.639 1101.66,683.639 1102.22,683.639 1102.77,683.639 1103.33,683.639 1103.89,683.639 1104.45,683.639 1105.01,683.639 1105.57,683.639 1106.13,683.639 1106.69,683.639 1107.25,683.639 1107.81,683.639 1108.37,683.639 1108.93,683.639 1109.49,683.639 1110.04,683.639 1110.6,683.639 1111.16,683.639 1111.72,683.639 1112.28,683.639 1112.84,683.639 1113.4,683.639 1113.96,683.639 1114.52,683.639 1115.08,683.639 1115.64,683.639 1116.2,683.639 1116.76,683.639 1117.31,683.639 1117.87,683.639 1118.43,683.639 1118.99,683.639 1119.55,683.639 1120.11,683.639 1120.67,683.639 1121.23,683.639 1121.79,683.639 1122.35,683.639 1122.91,683.639 1123.47,683.639 1124.03,683.639 1124.59,683.639 1125.14,683.639 1125.7,683.639 1126.26,683.639 1126.82,683.639 1127.38,683.639 1127.94,683.639 1128.5,683.639 1129.06,683.639 1129.62,683.639 1130.18,683.639 1130.74,683.639 1131.3,683.639 1131.86,683.639 1132.41,683.639 1132.97,683.639 1133.53,683.639 1134.09,683.639 1134.65,683.639 1135.21,683.639 1135.77,683.639 1136.33,683.639 1136.89,683.639 1137.45,683.639 1138.01,683.639 1138.57,683.639 1139.13,683.639 1139.68,683.639 1140.24,683.639 1140.8,683.639 1141.36,683.639 1141.92,683.639 1142.48,683.639 1143.04,683.639 1143.6,683.639 1144.16,683.639 1144.72,683.639 1145.28,683.639 1145.84,683.639 1146.4,683.639 1146.96,683.639 1147.51,683.639 1148.07,683.639 1148.63,683.639 1149.19,683.639 1149.75,683.639 1150.31,683.639 1150.87,683.639 1151.43,683.639 1151.99,683.639 1152.55,683.639 1153.11,683.639 1153.67,683.639 1154.23,683.639 1154.78,683.639 1155.34,683.639 1155.9,683.639 1156.46,683.639 1157.02,683.639 1157.58,683.639 1158.14,683.639 1158.7,683.639 1159.26,683.639 1159.82,683.639 1160.38,683.639 1160.94,683.639 1161.5,683.639 1162.05,683.639 1162.61,683.639 1163.17,683.639 1163.73,683.639 1164.29,683.639 1164.85,683.639 1165.41,683.639 1165.97,683.639 1166.53,683.639 1167.09,683.639 1167.65,683.639 1168.21,683.639 1168.77,683.639 1169.33,683.639 1169.88,683.639 1170.44,683.639 1171,683.639 1171.56,683.639 1172.12,683.639 1172.68,683.639 1173.24,683.639 1173.8,683.639 1174.36,683.639 1174.92,683.639 1175.48,683.639 1176.04,683.639 1176.6,683.639 1177.15,683.639 1177.71,683.639 1178.27,683.639 1178.83,683.639 1179.39,683.639 1179.95,683.639 1180.51,683.639 1181.07,683.639 1181.63,683.639 1182.19,683.639 1182.75,683.639 1183.31,683.639 1183.87,683.639 1184.43,683.639 1184.98,683.639 1185.54,683.639 1186.1,683.639 1186.66,683.639 1187.22,683.639 1187.78,683.639 1188.34,683.639 1188.9,683.639 1189.46,683.639 1190.02,683.639 1190.58,683.639 1191.14,683.639 1191.7,683.639 1192.25,683.639 1192.81,683.639 1193.37,683.639 1193.93,683.639 1194.49,683.639 1195.05,683.639 1195.61,683.639 1196.17,683.639 1196.73,683.639 1197.29,683.639 1197.85,683.639 1198.41,683.639 1198.97,683.639 1199.52,683.639 1200.08,683.639 1200.64,683.639 1201.2,683.639 1201.76,683.639 1202.32,683.639 1202.88,683.639 1203.44,683.639 1204,683.639 1204.56,683.639 1205.12,683.639 1205.68,683.639 1206.24,683.639 1206.8,683.639 1207.35,683.639 1207.91,683.639 1208.47,683.639 1209.03,683.639 1209.59,683.639 1210.15,683.639 1210.71,683.639 1211.27,683.639 1211.83,683.639 1212.39,683.639 1212.95,683.639 1213.51,683.639 1214.07,683.639 1214.62,683.639 1215.18,683.639 1215.74,683.639 1216.3,683.639 1216.86,683.639 1217.42,683.639 1217.98,683.639 1218.54,683.639 1219.1,683.639 1219.66,683.639 1220.22,683.639 1220.78,683.639 1221.34,683.639 1221.89,683.639 1222.45,683.639 1223.01,683.639 1223.57,683.639 1224.13,683.639 1224.69,683.639 1225.25,683.639 1225.81,683.639 1226.37,683.639 1226.93,683.639 1227.49,683.639 1228.05,683.639 1228.61,683.639 1229.17,683.639 1229.72,683.639 1230.28,683.639 1230.84,683.639 1231.4,683.639 1231.96,683.639 1232.52,683.639 1233.08,683.639 1233.64,683.639 1234.2,683.639 1234.76,683.639 1235.32,683.639 1235.88,683.639 1236.44,683.639 1236.99,683.639 1237.55,683.639 1238.11,683.639 1238.67,683.639 1239.23,683.639 1239.79,683.639 1240.35,683.639 1240.91,683.639 1241.47,683.639 1242.03,683.639 1242.59,683.639 1243.15,683.639 1243.71,683.639 1244.26,683.639 1244.82,683.639 1245.38,683.639 1245.94,683.639 1246.5,683.639 1247.06,683.639 1247.62,683.639 1248.18,683.639 1248.74,683.639 1249.3,683.639 1249.86,683.639 1250.42,683.639 1250.98,683.639 1251.54,683.639 1252.09,683.639 1252.65,683.639 1253.21,683.639 1253.77,683.639 1254.33,683.639 1254.89,683.639 1255.45,683.639 1256.01,683.639 1256.57,683.639 1257.13,683.639 1257.69,683.639 1258.25,683.639 1258.81,683.639 1259.36,683.639 1259.92,683.639 1260.48,683.639 1261.04,683.639 1261.6,683.639 1262.16,683.639 1262.72,683.639 1263.28,683.639 1263.84,683.639 1264.4,683.639 1264.96,683.639 1265.52,683.639 1266.08,683.639 1266.63,683.639 1267.19,683.639 1267.75,683.639 1268.31,683.639 1268.87,683.639 1269.43,683.639 1269.99,683.639 1270.55,683.639 1271.11,683.639 1271.67,683.639 1272.23,683.639 1272.79,683.639 1273.35,683.639 1273.91,683.639 1274.46,683.639 1275.02,683.639 1275.58,683.639 1276.14,683.639 1276.7,683.639 1277.26,683.639 1277.82,683.639 1278.38,683.639 1278.94,683.639 1279.5,683.639 1280.06,683.639 1280.62,683.639 1281.18,683.639 1281.73,683.639 1282.29,683.639 1282.85,683.639 1283.41,683.639 1283.97,683.639 1284.53,683.639 1285.09,683.639 1285.65,683.639 1286.21,683.639 1286.77,683.639 1287.33,683.639 1287.89,683.639 1288.45,683.639 1289,683.639 1289.56,683.639 1290.12,683.639 1290.68,683.639 1291.24,683.639 1291.8,683.639 1292.36,683.639 1292.92,683.639 1293.48,683.639 1294.04,683.639 1294.6,683.639 1295.16,683.639 1295.72,683.639 1296.28,683.639 1296.83,683.639 1297.39,683.639 1297.95,683.639 1298.51,683.639 1299.07,683.639 1299.63,683.639 1300.19,683.639 1300.75,683.639 1301.31,683.639 1301.87,683.639 1302.43,683.639 1302.99,683.639 1303.55,683.639 1304.1,683.639 1304.66,683.639 1305.22,683.639 1305.78,683.639 1306.34,683.639 1306.9,683.639 1307.46,683.639 1308.02,683.639 1308.58,683.639 1309.14,683.639 1309.7,683.639 1310.26,683.639 1310.82,683.639 1311.38,683.639 1311.93,683.639 1312.49,683.639 1313.05,683.639 1313.61,683.639 1314.17,683.639 1314.73,683.639 1315.29,683.639 1315.85,683.639 1316.41,683.639 1316.97,683.639 1317.53,683.639 1318.09,683.639 1318.65,683.639 1319.2,683.639 1319.76,683.639 1320.32,683.639 1320.88,683.639 1321.44,683.639 1322,683.639 1322.56,683.639 1323.12,683.639 1323.68,683.639 1324.24,683.639 1324.8,683.639 1325.36,683.639 1325.92,683.639 1326.47,683.639 1327.03,683.639 1327.59,683.639 1328.15,683.639 1328.71,683.639 1329.27,683.639 1329.83,683.639 1330.39,683.639 1330.95,683.639 1331.51,683.639 1332.07,683.639 1332.63,683.639 1333.19,683.639 1333.75,683.639 1334.3,683.639 1334.86,683.639 1335.42,683.639 1335.98,683.639 1336.54,683.639 1337.1,683.639 1337.66,683.639 1338.22,683.639 1338.78,683.639 1339.34,683.639 1339.9,683.639 1340.46,683.639 1341.02,683.639 1341.57,683.639 1342.13,683.639 1342.69,683.639 1343.25,683.639 1343.81,683.639 1344.37,683.639 1344.93,683.639 1345.49,683.639 1346.05,683.639 1346.61,683.639 1347.17,683.639 1347.73,683.639 1348.29,683.639 1348.84,683.639 1349.4,683.639 1349.96,683.639 1350.52,683.639 1351.08,683.639 1351.64,683.639 1352.2,683.639 1352.76,683.639 1353.32,683.639 1353.88,683.639 1354.44,683.639 1355,683.639 1355.56,683.639 1356.12,683.639 1356.67,683.639 1357.23,683.639 1357.79,683.639 1358.35,683.639 1358.91,683.639 1359.47,683.639 1360.03,683.639 1360.59,683.639 1361.15,683.639 1361.71,683.639 1362.27,683.639 1362.83,683.639 1363.39,683.639 1363.94,683.639 1364.5,683.639 1365.06,683.639 1365.62,683.639 1366.18,683.639 1366.74,683.639 1367.3,683.639 1367.86,683.639 1368.42,683.639 1368.98,683.639 1369.54,683.639 1370.1,683.639 1370.66,683.639 1371.21,683.639 1371.77,683.639 1372.33,683.639 1372.89,683.639 1373.45,683.639 1374.01,683.639 1374.57,683.639 1375.13,683.639 1375.69,683.639 1376.25,683.639 1376.81,683.639 1377.37,683.639 1377.93,683.639 1378.49,683.639 1379.04,683.639 1379.6,683.639 1380.16,683.639 1380.72,683.639 1381.28,683.639 1381.84,683.639 1382.4,683.639 1382.96,683.639 1383.52,683.639 1384.08,683.639 1384.64,683.639 1385.2,683.639 1385.76,683.639 1386.31,683.639 1386.87,683.639 1387.43,683.639 1387.99,683.639 1388.55,683.639 1389.11,683.639 1389.67,683.639 1390.23,683.639 1390.79,683.639 1391.35,683.639 1391.91,683.639 1392.47,683.639 1393.03,683.639 1393.58,683.639 1394.14,683.639 1394.7,683.639 1395.26,683.639 1395.82,683.639 1396.38,683.639 1396.94,683.639 1397.5,683.639 1398.06,683.639 1398.62,683.639 1399.18,683.639 1399.74,683.639 1400.3,683.639 1400.86,683.639 1401.41,683.639 1401.97,683.639 1402.53,683.639 1403.09,683.639 1403.65,683.639 1404.21,683.639 1404.77,683.639 1405.33,683.639 1405.89,683.639 1406.45,683.639 1407.01,683.639 1407.57,683.639 1408.13,683.639 1408.68,683.639 1409.24,683.639 1409.8,683.639 1410.36,683.639 1410.92,683.639 1411.48,683.639 1412.04,683.639 1412.6,683.639 1413.16,683.639 1413.72,683.639 1414.28,683.639 1414.84,683.639 1415.4,683.639 1415.95,683.639 1416.51,683.639 1417.07,683.639 1417.63,683.639 1418.19,683.639 1418.75,683.639 1419.31,683.639 1419.87,683.639 1420.43,683.639 1420.99,683.639 1421.55,683.639 1422.11,683.639 1422.67,683.639 1423.23,683.639 1423.78,683.639 1424.34,683.639 1424.9,683.639 1425.46,683.639 1426.02,683.639 1426.58,683.639 1427.14,683.639 1427.7,683.639 1428.26,683.639 1428.82,683.639 1429.38,683.639 1429.94,683.639 1430.5,683.639 1431.05,683.639 1431.61,683.639 1432.17,683.639 1432.73,683.639 1433.29,683.639 1433.85,683.639 1434.41,683.639 1434.97,683.639 1435.53,683.639 1436.09,683.639 1436.65,683.639 1437.21,683.639 1437.77,683.639 1438.33,683.639 1438.88,683.639 1439.44,683.639 1440,683.639 1440.56,683.639 1441.12,683.639 1441.68,683.639 1442.24,683.639 1442.8,683.639 1443.36,683.639 1443.92,683.639 1444.48,683.639 1445.04,683.639 1445.6,683.639 1446.15,683.639 1446.71,683.639 1447.27,683.639 1447.83,683.639 1448.39,683.639 1448.95,683.639 1449.51,683.639 1450.07,683.639 1450.63,683.639 1451.19,683.639 1451.75,683.639 1452.31,683.639 1452.87,683.639 1453.42,683.639 1453.98,683.639 1454.54,683.639 1455.1,683.639 1455.66,683.639 1456.22,683.639 1456.78,683.639 1457.34,683.639 1457.9,683.639 1458.46,683.639 1459.02,683.639 1459.58,683.639 1460.14,683.639 1460.7,683.639 1461.25,683.639 1461.81,683.639 1462.37,683.639 1462.93,683.639 1463.49,683.639 1464.05,683.639 1464.61,683.639 1465.17,683.639 1465.73,683.639 1466.29,683.639 1466.85,683.639 1467.41,683.639 1467.97,683.639 1468.52,683.639 1469.08,683.639 1469.64,683.639 1470.2,683.639 1470.76,683.639 1471.32,683.639 1471.88,683.639 1472.44,683.639 1473,683.639 1473.56,683.639 1474.12,683.639 1474.68,683.639 1475.24,683.639 1475.79,683.639 1476.35,683.639 1476.91,683.639 1477.47,683.639 1478.03,683.639 1478.59,683.639 1479.15,683.639 1479.71,683.639 1480.27,683.639 1480.83,683.639 1481.39,683.639 1481.95,683.639 1482.51,683.639 1483.07,683.639 1483.62,683.639 1484.18,683.639 1484.74,683.639 1485.3,683.639 1485.86,683.639 1486.42,683.639 1486.98,683.639 1487.54,683.639 1488.1,683.639 1488.66,683.639 1489.22,683.639 1489.78,683.639 1490.34,683.639 1490.89,683.639 1491.45,683.639 1492.01,683.639 1492.57,683.639 1493.13,683.639 1493.69,683.639 1494.25,683.639 1494.81,683.639 1495.37,683.639 1495.93,683.639 1496.49,683.639 1497.05,683.639 1497.61,683.639 1498.16,683.639 1498.72,683.639 1499.28,683.639 1499.84,683.639 1500.4,683.639 1500.96,683.639 1501.52,683.639 1502.08,683.639 1502.64,683.639 1503.2,683.639 1503.76,683.639 1504.32,683.639 1504.88,683.639 1505.44,683.639 1505.99,683.639 1506.55,683.639 1507.11,683.639 1507.67,683.639 1508.23,683.639 1508.79,683.639 1509.35,683.639 1509.91,683.639 1510.47,683.639 1511.03,683.639 1511.59,683.639 1512.15,683.639 1512.71,683.639 1513.26,683.639 1513.82,683.639 1514.38,683.639 1514.94,683.639 1515.5,683.639 1516.06,683.639 1516.62,683.639 1517.18,683.639 1517.74,683.639 1518.3,683.639 1518.86,683.639 1519.42,683.639 1519.98,683.639 1520.53,683.639 1521.09,683.639 1521.65,683.639 1522.21,683.639 1522.77,683.639 1523.33,683.639 1523.89,683.639 1524.45,683.639 1525.01,683.639 1525.57,683.639 1526.13,683.639 1526.69,683.639 1527.25,683.639 1527.81,683.639 1528.36,683.639 1528.92,683.639 1529.48,683.639 1530.04,683.639 1530.6,683.639 1531.16,683.639 1531.72,683.639 1532.28,683.639 1532.84,683.639 1533.4,683.639 1533.96,683.639 1534.52,683.639 1535.08,683.639 1535.63,683.639 1536.19,683.639 1536.75,683.639 1537.31,683.639 1537.87,683.639 1538.43,683.639 1538.99,683.639 1539.55,683.639 1540.11,683.639 1540.67,683.639 1541.23,683.639 1541.79,683.639 1542.35,683.639 1542.9,683.639 1543.46,683.639 1544.02,683.639 1544.58,683.639 1545.14,683.639 1545.7,683.639 1546.26,683.639 1546.82,683.639 1547.38,683.639 1547.94,683.639 1548.5,683.639 1549.06,683.639 1549.62,683.639 1550.18,683.639 1550.73,683.639 1551.29,683.639 1551.85,683.639 1552.41,683.639 1552.97,683.639 1553.53,683.639 1554.09,683.639 1554.65,683.639 1555.21,683.639 1555.77,683.639 1556.33,683.639 1556.89,683.639 1557.45,683.639 1558,683.639 1558.56,683.639 1559.12,683.639 1559.68,683.639 1560.24,683.639 1560.8,683.639 1561.36,683.639 1561.92,683.639 1562.48,683.639 1563.04,683.639 1563.6,683.639 1564.16,683.639 1564.72,683.639 1565.28,683.639 1565.83,683.639 1566.39,683.639 1566.95,683.639 1567.51,683.639 1568.07,683.639 1568.63,683.639 1569.19,683.639 1569.75,683.639 1570.31,683.639 1570.87,683.639 1571.43,683.639 1571.99,683.639 1572.55,683.639 1573.1,683.639 1573.66,683.639 1574.22,683.639 1574.78,683.639 1575.34,683.639 1575.9,683.639 1576.46,683.639 1577.02,683.639 1577.58,683.639 1578.14,683.639 1578.7,683.639 1579.26,683.639 1579.82,683.639 1580.37,683.639 1580.93,683.639 1581.49,683.639 1582.05,683.639 1582.61,683.639 1583.17,683.639 1583.73,683.639 1584.29,683.639 1584.85,683.639 1585.41,683.639 1585.97,683.639 1586.53,683.639 1587.09,683.639 1587.65,683.639 1588.2,683.639 1588.76,683.639 1589.32,683.639 1589.88,683.639 1590.44,683.639 1591,683.639 1591.56,683.639 1592.12,683.639 1592.68,683.639 1593.24,683.639 1593.8,683.639 1594.36,683.639 1594.92,683.639 1595.47,683.639 1596.03,683.639 1596.59,683.639 1597.15,683.639 1597.71,683.639 1598.27,683.639 1598.83,683.639 1599.39,683.639 1599.95,683.639 1600.51,683.639 1601.07,683.639 1601.63,683.639 1602.19,683.639 1602.74,683.639 1603.3,683.639 1603.86,683.639 1604.42,683.639 1604.98,683.639 1605.54,683.639 1606.1,683.639 1606.66,683.639 1607.22,683.639 1607.78,683.639 1608.34,683.639 1608.9,683.639 1609.46,683.639 1610.02,683.639 1610.57,683.639 1611.13,683.639 1611.69,683.639 1612.25,683.639 1612.81,683.639 1613.37,683.639 1613.93,683.639 1614.49,683.639 1615.05,683.639 1615.61,683.639 1616.17,683.639 1616.73,683.639 1617.29,683.639 1617.84,683.639 1618.4,683.639 1618.96,683.639 1619.52,683.639 1620.08,683.639 1620.64,683.639 1621.2,683.639 1621.76,683.639 1622.32,683.639 1622.88,683.639 1623.44,683.639 1624,683.639 1624.56,683.639 1625.11,683.639 1625.67,683.639 1626.23,683.639 1626.79,683.639 1627.35,683.639 1627.91,683.639 1628.47,683.639 1629.03,683.639 1629.59,683.639 1630.15,683.639 1630.71,683.639 1631.27,683.639 1631.83,683.639 1632.39,683.639 1632.94,683.639 1633.5,683.639 1634.06,683.639 1634.62,683.639 1635.18,683.639 1635.74,683.639 1636.3,683.639 1636.86,683.639 1637.42,683.639 1637.98,683.639 1638.54,683.639 1639.1,683.639 1639.66,683.639 1640.21,683.639 1640.77,683.639 1641.33,683.639 1641.89,683.639 1642.45,683.639 1643.01,683.639 1643.57,683.639 1644.13,683.639 1644.69,683.639 1645.25,683.639 1645.81,683.639 1646.37,683.639 1646.93,683.639 1647.48,683.639 1648.04,683.639 1648.6,683.639 1649.16,683.639 1649.72,683.639 1650.28,683.639 1650.84,683.639 1651.4,683.639 1651.96,683.639 1652.52,683.639 1653.08,683.639 1653.64,683.639 1654.2,683.639 1654.76,683.639 1655.31,683.639 1655.87,683.639 1656.43,683.639 1656.99,683.639 1657.55,683.639 1658.11,683.639 1658.67,683.639 1659.23,683.639 1659.79,683.639 1660.35,683.639 1660.91,683.639 1661.47,683.639 1662.03,683.639 1662.58,683.639 1663.14,683.639 1663.7,683.639 1664.26,683.639 1664.82,683.639 1665.38,683.639 1665.94,683.639 1666.5,683.639 1667.06,683.639 1667.62,683.639 1668.18,683.639 1668.74,683.639 1669.3,683.639 1669.85,683.639 1670.41,683.639 1670.97,683.639 1671.53,683.639 1672.09,683.639 1672.65,683.639 1673.21,683.639 1673.77,683.639 1674.33,683.639 1674.89,683.639 1675.45,683.639 1676.01,683.639 1676.57,683.639 1677.13,683.639 1677.68,683.639 1678.24,683.639 1678.8,683.639 1679.36,683.639 1679.92,683.639 1680.48,683.639 1681.04,683.639 1681.6,683.639 1682.16,683.639 1682.72,683.639 1683.28,683.639 1683.84,683.639 1684.4,683.639 1684.95,683.639 1685.51,683.639 1686.07,683.639 1686.63,683.639 1687.19,683.639 1687.75,683.639 1688.31,683.639 1688.87,683.639 1689.43,683.639 1689.99,683.639 1690.55,683.639 1691.11,683.639 1691.67,683.639 1692.23,683.639 1692.78,683.639 1693.34,683.639 1693.9,683.639 1694.46,683.639 1695.02,683.639 1695.58,683.639 1696.14,683.639 1696.7,683.639 1697.26,683.639 1697.82,683.639 1698.38,683.639 1698.94,683.639 1699.5,683.639 1700.05,683.639 1700.61,683.639 1701.17,683.639 1701.73,683.639 1702.29,683.639 1702.85,683.639 1703.41,683.639 1703.97,683.639 1704.53,683.639 1705.09,683.639 1705.65,683.639 1706.21,683.639 1706.77,683.639 1707.32,683.639 1707.88,683.639 1708.44,683.639 1709,683.639 1709.56,683.639 1710.12,683.639 1710.68,683.639 1711.24,683.639 1711.8,683.639 1712.36,683.639 1712.92,683.639 1713.48,683.639 1714.04,683.639 1714.6,683.639 1715.15,683.639 1715.71,683.639 1716.27,683.639 1716.83,683.639 1717.39,683.639 1717.95,683.639 1718.51,683.639 1719.07,683.639 1719.63,683.639 1720.19,683.639 1720.75,683.639 1721.31,683.639 1721.87,683.639 1722.42,683.639 1722.98,683.639 1723.54,683.639 1724.1,683.639 1724.66,683.639 1725.22,683.639 1725.78,683.639 1726.34,683.639 1726.9,683.639 1727.46,683.639 1728.02,683.639 1728.58,683.639 1729.14,683.639 1729.69,683.639 1730.25,683.639 1730.81,683.639 1731.37,683.639 1731.93,683.639 1732.49,683.639 1733.05,683.639 1733.61,683.639 1734.17,683.639 1734.73,683.639 1735.29,683.639 1735.85,683.639 1736.41,683.639 1736.97,683.639 1737.52,683.639 1738.08,683.639 1738.64,683.639 1739.2,683.639 1739.76,683.639 1740.32,683.639 1740.88,683.639 1741.44,683.639 1742,683.639 1742.56,683.639 1743.12,683.639 1743.68,683.639 1744.24,683.639 1744.79,683.639 1745.35,683.639 1745.91,683.639 1746.47,683.639 1747.03,683.639 1747.59,683.639 1748.15,683.639 1748.71,683.639 1749.27,683.639 1749.83,683.639 1750.39,683.639 1750.95,683.639 1751.51,683.639 1752.06,683.639 1752.62,683.639 1753.18,683.639 1753.74,683.639 1754.3,683.639 1754.86,683.639 1755.42,683.639 1755.98,683.639 1756.54,683.639 1757.1,683.639 1757.66,683.639 1758.22,683.639 1758.78,683.639 1759.34,683.639 1759.89,683.639 1760.45,683.639 1761.01,683.639 1761.57,683.639 1762.13,683.639 1762.69,683.639 1763.25,683.639 1763.81,683.639 1764.37,683.639 1764.93,683.639 1765.49,683.639 1766.05,683.639 1766.61,683.639 1767.16,683.639 1767.72,683.639 1768.28,683.639 1768.84,683.639 1769.4,683.639 1769.96,683.639 1770.52,683.639 1771.08,683.639 1771.64,683.639 1772.2,683.639 1772.76,683.639 1773.32,683.639 1773.88,683.639 1774.43,683.639 1774.99,683.639 1775.55,683.639 1776.11,683.639 1776.67,683.639 1777.23,683.639 1777.79,683.639 1778.35,683.639 1778.91,683.639 1779.47,683.639 1780.03,683.639 1780.59,683.639 1781.15,683.639 1781.71,683.639 1782.26,683.639 1782.82,683.639 1783.38,683.639 1783.94,683.639 1784.5,683.639 1785.06,683.639 1785.62,683.639 1786.18,683.639 1786.74,683.639 1787.3,683.639 1787.86,683.639 1788.42,683.639 1788.98,683.639 1789.53,683.639 1790.09,683.639 1790.65,683.639 1791.21,683.639 1791.77,683.639 1792.33,683.639 1792.89,683.639 1793.45,683.639 1794.01,683.639 1794.57,683.639 1795.13,683.639 1795.69,683.639 1796.25,683.639 1796.8,683.639 1797.36,683.639 1797.92,683.639 1798.48,683.639 1799.04,683.639 1799.6,683.639 1800.16,683.639 1800.72,683.639 1801.28,683.639 1801.84,683.639 1802.4,683.639 1802.96,683.639 1803.52,683.639 1804.08,683.639 1804.63,683.639 1805.19,683.639 1805.75,683.639 1806.31,683.639 1806.87,683.639 1807.43,683.639 1807.99,683.639 1808.55,683.639 1809.11,683.639 1809.67,683.639 1810.23,683.639 1810.79,683.639 1811.35,683.639 1811.9,683.639 1812.46,683.639 1813.02,683.639 1813.58,683.639 1814.14,683.639 1814.7,683.639 1815.26,683.639 1815.82,683.639 1816.38,683.639 1816.94,683.639 1817.5,683.639 1818.06,683.639 1818.62,683.639 1819.18,683.639 1819.73,683.639 1820.29,683.639 1820.85,683.639 1821.41,683.639 1821.97,683.639 1822.53,683.639 1823.09,683.639 1823.65,683.639 1824.21,683.639 1824.77,683.639 1825.33,683.639 1825.89,683.639 1826.45,683.639 1827,683.639 1827.56,683.639 1828.12,683.639 1828.68,683.639 1829.24,683.639 1829.8,683.639 1830.36,683.639 1830.92,683.639 1831.48,683.639 1832.04,683.639 1832.6,683.639 1833.16,683.639 1833.72,683.639 1834.27,683.639 1834.83,683.639 1835.39,683.639 1835.95,683.639 1836.51,683.639 1837.07,683.639 1837.63,683.639 1838.19,683.639 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024828560090018 ± 0.022458308733323582\nProjected Energy: -4.015359790097239 ± (0.004683497761160282, 0.004348231240305367)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.490077</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4367e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1662e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.167e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.353e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.915e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.055e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613371\n -0.7590191922770835\n  0.13584182219621965\n  0.15789998694608975\n  0.876711441178136\n  1.530592997097334\n  1.5835732611867366\n  3.0728703303258698\n  3.1256726539518436\n  4.86210722156218\n  6.260694850380585\n  6.40267121118311\n  9.093371706203959","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
