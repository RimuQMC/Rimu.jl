var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21056344932239832 ± 0.0015307905472093021\n   G2(1) = 0.9174663256782838 ± 0.0007233852716985301\n   G2(2) = 0.9818346478270035 ± 0.0006912004022548631\n   G2(3) = 0.9908346036670275 ± 0.0009272207472300847\n   G2(4) = 0.9818346478270035 ± 0.0006912004022548631\n   G2(5) = 0.9174663256782838 ± 0.0007233852716985301\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9704709734072456 ± 0.12784147659420603\n   Replica 2: -4.089566283672064 ± 0.12431408796152596\n   Replica 3: -4.028868802842943 ± 0.12564537285359909\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip210\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip211\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip212\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.34 2211.02,1003.34 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.85 2211.02,745.85 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.361 2211.02,488.361 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.873 2211.02,230.873 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.34 423.181,1003.34 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.85 423.181,745.85 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.361 423.181,488.361 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.873 423.181,230.873 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M290.043 1016.68 L306.363 1016.68 L306.363 1020.62 L284.418 1020.62 L284.418 1016.68 Q287.08 1013.93 291.664 1009.3 Q296.27 1004.65 297.451 1003.3 Q299.696 1000.78 300.576 999.045 Q301.478 997.286 301.478 995.596 Q301.478 992.842 299.534 991.105 Q297.613 989.369 294.511 989.369 Q292.312 989.369 289.858 990.133 Q287.427 990.897 284.65 992.448 L284.65 987.726 Q287.474 986.592 289.927 986.013 Q292.381 985.434 294.418 985.434 Q299.789 985.434 302.983 988.119 Q306.177 990.805 306.177 995.295 Q306.177 997.425 305.367 999.346 Q304.58 1001.24 302.474 1003.84 Q301.895 1004.51 298.793 1007.73 Q295.691 1010.92 290.043 1016.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M316.224 986.059 L334.58 986.059 L334.58 989.994 L320.506 989.994 L320.506 998.467 Q321.524 998.119 322.543 997.957 Q323.562 997.772 324.58 997.772 Q330.367 997.772 333.747 1000.94 Q337.126 1004.11 337.126 1009.53 Q337.126 1015.11 333.654 1018.21 Q330.182 1021.29 323.862 1021.29 Q321.687 1021.29 319.418 1020.92 Q317.173 1020.55 314.765 1019.81 L314.765 1015.11 Q316.849 1016.24 319.071 1016.8 Q321.293 1017.36 323.77 1017.36 Q327.774 1017.36 330.112 1015.25 Q332.45 1013.14 332.45 1009.53 Q332.45 1005.92 330.112 1003.81 Q327.774 1001.71 323.77 1001.71 Q321.895 1001.71 320.02 1002.12 Q318.168 1002.54 316.224 1003.42 L316.224 986.059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 989.138 Q352.728 989.138 350.899 992.703 Q349.094 996.244 349.094 1003.37 Q349.094 1010.48 350.899 1014.05 Q352.728 1017.59 356.339 1017.59 Q359.973 1017.59 361.779 1014.05 Q363.608 1010.48 363.608 1003.37 Q363.608 996.244 361.779 992.703 Q359.973 989.138 356.339 989.138 M356.339 985.434 Q362.149 985.434 365.205 990.041 Q368.284 994.624 368.284 1003.37 Q368.284 1012.1 365.205 1016.71 Q362.149 1021.29 356.339 1021.29 Q350.529 1021.29 347.45 1016.71 Q344.395 1012.1 344.395 1003.37 Q344.395 994.624 347.45 990.041 Q350.529 985.434 356.339 985.434 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M286.062 728.57 L304.418 728.57 L304.418 732.505 L290.344 732.505 L290.344 740.978 Q291.363 740.63 292.381 740.468 Q293.4 740.283 294.418 740.283 Q300.205 740.283 303.585 743.454 Q306.964 746.626 306.964 752.042 Q306.964 757.621 303.492 760.723 Q300.02 763.802 293.701 763.802 Q291.525 763.802 289.256 763.431 Q287.011 763.061 284.603 762.32 L284.603 757.621 Q286.687 758.755 288.909 759.311 Q291.131 759.866 293.608 759.866 Q297.613 759.866 299.951 757.76 Q302.288 755.654 302.288 752.042 Q302.288 748.431 299.951 746.325 Q297.613 744.218 293.608 744.218 Q291.733 744.218 289.858 744.635 Q288.006 745.052 286.062 745.931 L286.062 728.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M326.177 731.649 Q322.566 731.649 320.737 735.214 Q318.932 738.755 318.932 745.885 Q318.932 752.991 320.737 756.556 Q322.566 760.098 326.177 760.098 Q329.811 760.098 331.617 756.556 Q333.446 752.991 333.446 745.885 Q333.446 738.755 331.617 735.214 Q329.811 731.649 326.177 731.649 M326.177 727.945 Q331.987 727.945 335.043 732.552 Q338.122 737.135 338.122 745.885 Q338.122 754.612 335.043 759.218 Q331.987 763.802 326.177 763.802 Q320.367 763.802 317.288 759.218 Q314.233 754.612 314.233 745.885 Q314.233 737.135 317.288 732.552 Q320.367 727.945 326.177 727.945 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 731.649 Q352.728 731.649 350.899 735.214 Q349.094 738.755 349.094 745.885 Q349.094 752.991 350.899 756.556 Q352.728 760.098 356.339 760.098 Q359.973 760.098 361.779 756.556 Q363.608 752.991 363.608 745.885 Q363.608 738.755 361.779 735.214 Q359.973 731.649 356.339 731.649 M356.339 727.945 Q362.149 727.945 365.205 732.552 Q368.284 737.135 368.284 745.885 Q368.284 754.612 365.205 759.218 Q362.149 763.802 356.339 763.802 Q350.529 763.802 347.45 759.218 Q344.395 754.612 344.395 745.885 Q344.395 737.135 347.45 732.552 Q350.529 727.945 356.339 727.945 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M284.835 471.081 L307.057 471.081 L307.057 473.072 L294.511 505.641 L289.627 505.641 L301.432 475.017 L284.835 475.017 L284.835 471.081 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M316.224 471.081 L334.58 471.081 L334.58 475.017 L320.506 475.017 L320.506 483.489 Q321.524 483.142 322.543 482.979 Q323.562 482.794 324.58 482.794 Q330.367 482.794 333.747 485.966 Q337.126 489.137 337.126 494.554 Q337.126 500.132 333.654 503.234 Q330.182 506.313 323.862 506.313 Q321.687 506.313 319.418 505.942 Q317.173 505.572 314.765 504.831 L314.765 500.132 Q316.849 501.266 319.071 501.822 Q321.293 502.378 323.77 502.378 Q327.774 502.378 330.112 500.271 Q332.45 498.165 332.45 494.554 Q332.45 490.942 330.112 488.836 Q327.774 486.729 323.77 486.729 Q321.895 486.729 320.02 487.146 Q318.168 487.563 316.224 488.442 L316.224 471.081 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 474.16 Q352.728 474.16 350.899 477.725 Q349.094 481.267 349.094 488.396 Q349.094 495.503 350.899 499.067 Q352.728 502.609 356.339 502.609 Q359.973 502.609 361.779 499.067 Q363.608 495.503 363.608 488.396 Q363.608 481.267 361.779 477.725 Q359.973 474.16 356.339 474.16 M356.339 470.456 Q362.149 470.456 365.205 475.063 Q368.284 479.646 368.284 488.396 Q368.284 497.123 365.205 501.729 Q362.149 506.313 356.339 506.313 Q350.529 506.313 347.45 501.729 Q344.395 497.123 344.395 488.396 Q344.395 479.646 347.45 475.063 Q350.529 470.456 356.339 470.456 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M256.664 244.217 L264.303 244.217 L264.303 217.852 L255.992 219.518 L255.992 215.259 L264.256 213.593 L268.932 213.593 L268.932 244.217 L276.571 244.217 L276.571 248.153 L256.664 248.153 L256.664 244.217 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M296.015 216.671 Q292.404 216.671 290.576 220.236 Q288.77 223.778 288.77 230.907 Q288.77 238.014 290.576 241.578 Q292.404 245.12 296.015 245.12 Q299.65 245.12 301.455 241.578 Q303.284 238.014 303.284 230.907 Q303.284 223.778 301.455 220.236 Q299.65 216.671 296.015 216.671 M296.015 212.968 Q301.826 212.968 304.881 217.574 Q307.96 222.157 307.96 230.907 Q307.96 239.634 304.881 244.24 Q301.826 248.824 296.015 248.824 Q290.205 248.824 287.127 244.24 Q284.071 239.634 284.071 230.907 Q284.071 222.157 287.127 217.574 Q290.205 212.968 296.015 212.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M326.177 216.671 Q322.566 216.671 320.737 220.236 Q318.932 223.778 318.932 230.907 Q318.932 238.014 320.737 241.578 Q322.566 245.12 326.177 245.12 Q329.811 245.12 331.617 241.578 Q333.446 238.014 333.446 230.907 Q333.446 223.778 331.617 220.236 Q329.811 216.671 326.177 216.671 M326.177 212.968 Q331.987 212.968 335.043 217.574 Q338.122 222.157 338.122 230.907 Q338.122 239.634 335.043 244.24 Q331.987 248.824 326.177 248.824 Q320.367 248.824 317.288 244.24 Q314.233 239.634 314.233 230.907 Q314.233 222.157 317.288 217.574 Q320.367 212.968 326.177 212.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 216.671 Q352.728 216.671 350.899 220.236 Q349.094 223.778 349.094 230.907 Q349.094 238.014 350.899 241.578 Q352.728 245.12 356.339 245.12 Q359.973 245.12 361.779 241.578 Q363.608 238.014 363.608 230.907 Q363.608 223.778 361.779 220.236 Q359.973 216.671 356.339 216.671 M356.339 212.968 Q362.149 212.968 365.205 217.574 Q368.284 222.157 368.284 230.907 Q368.284 239.634 365.205 244.24 Q362.149 248.824 356.339 248.824 Q350.529 248.824 347.45 244.24 Q344.395 239.634 344.395 230.907 Q344.395 222.157 347.45 217.574 Q350.529 212.968 356.339 212.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip212)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.873 4017.76,230.873 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1248.03 459.396,1247.59 459.964,1246.07 460.533,1245.5 461.101,1244.87 461.669,1244.16 462.238,1243.37 462.806,1242.49 463.375,1241.5 463.943,1240.43 464.511,1239.27 465.08,1237.98 465.648,1236.6 466.216,1235.11 466.785,1233.47 467.353,1230.71 467.921,1228.83 468.49,1225.78 469.058,1223.66 469.626,1221.39 470.195,1218.94 470.763,1216.32 471.331,1213.54 471.9,1210.6 472.468,1206.45 473.036,1203.07 473.605,1199.51 474.173,1195.78 474.741,1190.78 475.31,1186.55 475.878,1181.12 476.446,1176.46 477.015,1170.54 477.583,1164.37 478.152,1158.94 478.72,1152.28 479.288,1145.24 479.857,1137.95 480.425,1131.47 480.993,1122.72 481.562,1115.76 482.13,1108.49 482.698,1101.1 483.267,1093.49 483.835,1084.54 484.403,1074.42 484.972,1065.14 485.54,1055.75 486.108,1047.17 486.677,1037.36 487.245,1027.38 487.813,1016.3 488.382,1003.04 488.95,992.87 489.518,981.572 490.087,972.118 490.655,962.497 491.224,951.725 491.792,940.854 492.36,928.911 492.929,919.012 493.497,909.195 494.065,897.098 494.634,886.006 495.202,876.134 495.77,864.136 496.339,854.285 496.907,842.24 497.475,829.311 498.044,818.627 498.612,808.88 499.18,798.156 499.749,786.463 500.317,774.889 500.885,763.364 501.454,752.877 502.022,742.501 502.59,730.102 503.159,716.013 503.727,705.238 504.295,696.655 504.864,686.05 505.432,675.5 506.001,667.131 506.569,657.859 507.137,645.616 507.706,636.72 508.274,628.015 508.842,615.287 509.411,607.294 509.979,599.271 510.547,591.431 511.116,583.735 511.684,574.958 512.252,568.346 512.821,559.754 513.389,551.386 513.957,542.216 514.526,536.32 515.094,527.454 515.662,519.731 516.231,513.126 516.799,507.527 517.367,500.088 517.936,492.797 518.504,485.589 519.072,480.543 519.641,475.58 520.209,468.744 520.778,464.191 521.346,457.579 521.914,453.234 522.483,447.828 523.051,443.768 523.619,439.531 524.188,434.547 524.756,430.511 525.324,425.422 525.893,419.485 526.461,415.778 527.029,410.124 527.598,406.767 528.166,402.322 528.734,398.961 529.303,396.612 529.871,393.348 530.439,387.247 531.008,381.122 531.576,376.339 532.144,374.76 532.713,369.084 533.281,365.704 533.85,363.303 534.418,361.02 534.986,358.925 535.555,356.747 536.123,355.387 536.691,351.929 537.26,348.644 537.828,346.815 538.396,343.692 538.965,340.678 539.533,337.644 540.101,334.835 540.67,332.051 541.238,330.195 541.806,326.461 542.375,322.851 542.943,319.58 543.511,316.28 544.08,315.095 544.648,310.853 545.216,309.803 545.785,306.861 546.353,305.052 546.921,304.25 547.49,301.38 548.058,300.987 548.627,298.306 549.195,298.597 549.763,295.919 550.332,293.253 550.9,292.937 551.468,292.532 552.037,291.786 552.605,293.26 553.173,290.595 553.742,288.874 554.31,289.409 554.878,286.885 555.447,285.329 556.015,285.999 556.583,285.332 557.152,282.742 557.72,280.516 558.288,281.476 558.857,281.101 559.425,279.64 559.993,280.429 560.562,280.802 561.13,279.356 561.698,279.048 562.267,277.51 562.835,270.887 563.404,269.767 563.972,268.91 564.54,269.139 565.109,266.025 565.677,264.086 566.245,264.334 566.814,264.415 567.382,264.531 567.95,265.724 568.519,264.794 569.087,266.059 569.655,265.961 570.224,264.727 570.792,267.697 571.36,265.353 571.929,263.028 572.497,262.93 573.065,263.866 573.634,263.528 574.202,263.419 574.77,265.318 575.339,264.771 575.907,263.194 576.476,261.91 577.044,258.448 577.612,258.413 578.181,257.324 578.749,258.224 579.317,258.031 579.886,257.752 580.454,257.507 581.022,256.112 581.591,254.865 582.159,254.908 582.727,255.789 583.296,255.694 583.864,254.688 584.432,251.429 585.001,251.447 585.569,249.459 586.137,247.469 586.706,246.583 587.274,249.025 587.842,246.267 588.411,244.622 588.979,243.144 589.547,243.59 590.116,244.098 590.684,243.458 591.253,244.945 591.821,244.437 592.389,243.773 592.958,244.33 593.526,246.719 594.094,245.99 594.663,245.164 595.231,247.735 595.799,247.885 596.368,247.097 596.936,247.113 597.504,247.372 598.073,246.482 598.641,247.601 599.209,246.518 599.778,245.688 600.346,245.879 600.914,246.022 601.483,246.258 602.051,247.151 602.619,247.121 603.188,248.191 603.756,246.93 604.325,247.974 604.893,246.873 605.461,245.958 606.03,245.724 606.598,243.782 607.166,244.813 607.735,245.998 608.303,243.955 608.871,244.028 609.44,243.167 610.008,244.344 610.576,243.402 611.145,245.578 611.713,244.323 612.281,244.192 612.85,241.997 613.418,243.046 613.986,244.161 614.555,245.228 615.123,243.922 615.691,242.845 616.26,242.927 616.828,242.803 617.396,240.839 617.965,240.935 618.533,240.953 619.102,241.055 619.67,241.052 620.238,240.16 620.807,241.341 621.375,241.264 621.943,240.304 622.512,240.39 623.08,240.421 623.648,242.832 624.217,244.014 624.785,243.839 625.353,242.609 625.922,242.563 626.49,242.623 627.058,242.646 627.627,241.637 628.195,240.748 628.763,239.633 629.332,241.799 629.9,239.555 630.468,238.661 631.037,240.848 631.605,243.18 632.173,243.07 632.742,243.834 633.31,242.63 633.879,242.341 634.447,242.196 635.015,241.877 635.584,240.745 636.152,238.686 636.72,240.771 637.289,240.666 637.857,239.754 638.425,241.851 638.994,241.728 639.562,241.281 640.13,241.981 640.699,243.986 641.267,242.524 641.835,243.202 642.404,241.759 642.972,241.513 643.54,240.081 644.109,239.719 644.677,239.62 645.245,241.333 645.814,238.722 646.382,236.549 646.951,235.382 647.519,236.605 648.087,235.614 648.656,234.668 649.224,234.148 649.792,233.477 650.361,232.61 650.929,230.782 651.497,231.338 652.066,231.596 652.634,232.052 653.202,231.548 653.771,230.956 654.339,232.435 654.907,230.781 655.476,230.055 656.044,232.546 656.612,233.039 657.181,231.36 657.749,230.809 658.317,229.195 658.886,229.846 659.454,230.494 660.022,231.145 660.591,235.63 661.159,238.928 661.728,237.828 662.296,237.828 662.864,235.885 663.433,237.294 664.001,234.66 664.569,232.759 665.138,234.069 665.706,233.4 666.274,234.728 666.843,236.901 667.411,234.862 667.979,235.043 668.548,232.367 669.116,232.593 669.684,229.896 670.253,229.476 670.821,228.983 671.389,231.447 671.958,231.894 672.526,229.194 673.094,230.856 673.663,231.353 674.231,234.077 674.799,232.528 675.368,231.784 675.936,231.328 676.505,233.834 677.073,231.045 677.641,232.706 678.21,237.176 678.778,235.001 679.346,238.182 679.915,239.085 680.483,236.887 681.051,236.96 681.62,237.009 682.188,236.053 682.756,237.162 683.325,236.07 683.893,232.181 684.461,230.22 685.03,227.799 685.598,230.645 686.166,233.28 686.735,232.672 687.303,230.735 687.871,231.856 688.44,231.231 689.008,228.496 689.577,229.317 690.145,228.979 690.713,230.65 691.282,232.101 691.85,230.531 692.418,232.205 692.987,231.536 693.555,232.896 694.123,235.32 694.692,237.404 695.26,235.574 695.828,237.652 696.397,237.564 696.965,235.408 697.533,234.435 698.102,234.347 698.67,231.531 699.238,233.013 699.807,232.262 700.375,232.799 700.943,234.082 701.512,232.504 702.08,233.912 702.648,235.194 703.217,235.507 703.785,234.722 704.354,234.877 704.922,232.976 705.49,234.416 706.059,232.578 706.627,231.874 707.195,233.417 707.764,233.661 708.332,233.903 708.9,236.235 709.469,235.096 710.037,234.414 710.605,233.43 711.174,232.472 711.742,233.814 712.31,235.277 712.879,232.403 713.447,231.519 714.015,232.884 714.584,235.34 715.152,233.598 715.72,234.937 716.289,236.072 716.857,236.257 717.425,236.219 717.994,232.019 718.562,233.421 719.131,234.787 719.699,234.117 720.267,232.114 720.836,232.427 721.404,233.602 721.972,233.847 722.541,236.028 723.109,237.216 723.677,241.37 724.246,241.129 724.814,244.941 725.382,244.076 725.951,244.684 726.519,243.146 727.087,242.455 727.656,244.133 728.224,242.459 728.792,242.964 729.361,243.394 729.929,239.608 730.497,238.379 731.066,240.061 731.634,239.392 732.203,239.02 732.771,236.649 733.339,237.475 733.908,239.155 734.476,237.874 735.044,237.305 735.613,236.787 736.181,235.678 736.749,235.37 737.318,235.212 737.886,235.226 738.454,235.827 739.023,234.628 739.591,235.545 740.159,233.484 740.728,234.546 741.296,233.392 741.864,235.335 742.433,237.177 743.001,238.016 743.569,238.59 744.138,238.367 744.706,236.952 745.274,237.606 745.843,236.385 746.411,235.254 746.98,235.247 747.548,232.909 748.116,233.724 748.685,233.466 749.253,232.384 749.821,232.24 750.39,235.388 750.958,237.364 751.526,234.876 752.095,236.517 752.663,236.219 753.231,234.844 753.8,234.671 754.368,235.394 754.936,236.241 755.505,234.777 756.073,233.846 756.641,233.748 757.21,232.667 757.778,231.574 758.346,233.76 758.915,232.465 759.483,228.386 760.052,227.626 760.62,224.877 761.188,227.61 761.757,224.761 762.325,225.164 762.893,226.565 763.462,225.911 764.03,228.436 764.598,229.645 765.167,229.827 765.735,228.193 766.303,230.516 766.872,229.748 767.44,229.815 768.008,231.168 768.577,230.246 769.145,228.318 769.713,227.441 770.282,227.995 770.85,233.432 771.418,234.35 771.987,235.165 772.555,232.755 773.123,232.853 773.692,234.815 774.26,234.655 774.829,234.48 775.397,234.283 775.965,235.011 776.534,235.842 777.102,236.558 777.67,237.291 778.239,236.975 778.807,233.547 779.375,233.29 779.944,234.206 780.512,231.806 781.08,232.877 781.649,231.631 782.217,229.426 782.785,230.814 783.354,226.827 783.922,227.05 784.49,228.271 785.059,227.385 785.627,228.734 786.195,230.2 786.764,229.234 787.332,228.146 787.9,228.517 788.469,230.975 789.037,231.07 789.606,232.05 790.174,231.885 790.742,231.656 791.311,231.801 791.879,231.642 792.447,228.665 793.016,228.862 793.584,227.919 794.152,229.383 794.721,230.577 795.289,230.584 795.857,230.686 796.426,229.862 796.994,228.981 797.562,229.138 798.131,228.34 798.699,229.823 799.267,231.111 799.836,231.235 800.404,230.241 800.972,231.326 801.541,230.46 802.109,229.389 802.678,231.717 803.246,232.752 803.814,232.739 804.383,233.697 804.951,233.718 805.519,232.559 806.088,232.698 806.656,231.787 807.224,230.948 807.793,228.881 808.361,230.985 808.929,233.115 809.498,232.019 810.066,231.023 810.634,233.134 811.203,232.316 811.771,230.374 812.339,231.461 812.908,232.622 813.476,231.754 814.044,230.073 814.613,226.227 815.181,224.833 815.749,225.483 816.318,226.966 816.886,228.464 817.455,229.866 818.023,231.146 818.591,233.423 819.16,233.619 819.728,233.66 820.296,234.757 820.865,233.639 821.433,232.423 822.001,231.472 822.57,229.572 823.138,229.809 823.706,228.978 824.275,229.321 824.843,231.667 825.411,231.63 825.98,234.817 826.548,234.45 827.116,232.004 827.685,233.155 828.253,233.071 828.821,232.98 829.39,233.032 829.958,233.06 830.526,233.054 831.095,232.088 831.663,235.2 832.232,237.042 832.8,238.851 833.368,238.383 833.937,236.979 834.505,236.604 835.073,237.455 835.642,234.987 836.21,233.762 836.778,233.573 837.347,233.401 837.915,233.198 838.483,230.994 839.052,230.073 839.62,230.173 840.188,232.312 840.757,232.475 841.325,230.458 841.893,230.498 842.462,234.565 843.03,233.144 843.598,233.022 844.167,235.052 844.735,234.727 845.304,234.383 845.872,236.421 846.44,236.157 847.009,235.674 847.577,234.226 848.145,232.929 848.714,234.827 849.282,234.55 849.85,234.098 850.419,233.876 850.987,233.535 851.555,233.339 852.124,234.253 852.692,234.133 853.26,235.828 853.829,234.413 854.397,232.152 854.965,232.059 855.534,231.078 856.102,232.046 856.67,233.153 857.239,234.092 857.807,232.884 858.375,233.769 858.944,234.342 859.512,236.075 860.081,234.694 860.649,234.341 861.217,233.311 861.786,235.088 862.354,235.657 862.922,235.342 863.491,234.205 864.059,234.82 864.627,235.191 865.196,233.703 865.764,233.482 866.332,232.304 866.901,229.082 867.469,230.178 868.037,230.015 868.606,230.316 869.174,232.405 869.742,232.206 870.311,231.903 870.879,231.589 871.447,232.328 872.016,230.871 872.584,227.793 873.152,229.035 873.721,229.114 874.289,230.267 874.858,229.234 875.426,230.101 875.994,230.116 876.563,230.215 877.131,231.33 877.699,232.38 878.268,231.346 878.836,232.297 879.404,232.105 879.973,231.933 880.541,231.622 881.109,232.506 881.678,231.263 882.246,229.159 882.814,229.277 883.383,227.63 883.951,226.93 884.519,224.205 885.088,223.527 885.656,222.125 886.224,222.741 886.793,223.239 887.361,224.953 887.93,225.294 888.498,225.73 889.066,224.434 889.635,223.938 890.203,225.35 890.771,225.909 891.34,226.315 891.908,225.798 892.476,225.303 893.045,224.843 893.613,227.408 894.181,226.605 894.75,227.965 895.318,225.989 895.886,227.375 896.455,227.855 897.023,227.115 897.591,227.648 898.16,227.065 898.728,227.397 899.296,227.629 899.865,228.966 900.433,229.448 901.001,228.702 901.57,228.127 902.138,227.603 902.707,227.943 903.275,227.377 903.843,226.693 904.412,226.912 904.98,229.254 905.548,227.517 906.117,228.015 906.685,228.435 907.253,228.833 907.822,229.282 908.39,231.561 908.958,232.636 909.527,232.576 910.095,233.514 910.663,233.318 911.232,234.19 911.8,231.005 912.368,233.275 912.937,232.189 913.505,230.234 914.073,231.495 914.642,230.669 915.21,231.979 915.779,233.078 916.347,234.148 916.915,233.118 917.484,231.007 918.052,232.121 918.62,233.288 919.189,233.365 919.757,230.313 920.325,230.55 920.894,231.79 921.462,232.891 922.03,234.895 922.599,233.724 923.167,232.427 923.735,234.447 924.304,235.395 924.872,237.1 925.44,236.781 926.009,237.512 926.577,238.048 927.145,238.607 927.714,237.217 928.282,236.882 928.85,234.373 929.419,232.085 929.987,231.099 930.556,230.175 931.124,232.355 931.692,228.061 932.261,227.429 932.829,229.86 933.397,228.948 933.966,229.227 934.534,229.474 935.102,229.534 935.671,229.619 936.239,231.836 936.807,231.864 937.376,231.057 937.944,232.35 938.512,232.352 939.081,234.393 939.649,235.249 940.217,234.034 940.786,233.72 941.354,232.547 941.922,232.531 942.491,231.355 943.059,231.216 943.627,233.125 944.196,231.852 944.764,233.918 945.333,235.902 945.901,237.774 946.469,236.512 947.038,235.269 947.606,236.991 948.174,235.401 948.743,234.017 949.311,235.968 949.879,234.398 950.448,234.081 951.016,231.753 951.584,230.786 952.153,231.461 952.721,229.326 953.289,228.271 953.858,229.579 954.426,227.683 954.994,229.927 955.563,230.96 956.131,231.081 956.699,231.066 957.268,231.273 957.836,231.243 958.405,230.184 958.973,227.156 959.541,228.278 960.11,229.413 960.678,229.391 961.246,229.708 961.815,228.824 962.383,229.91 962.951,228.003 963.52,229.338 964.088,229.548 964.656,230.685 965.225,230.883 965.793,233.929 966.361,232.411 966.93,232.423 967.498,231.228 968.066,229.168 968.635,228.117 969.203,228.45 969.771,230.891 970.34,229.834 970.908,230.124 971.476,230.012 972.045,229.223 972.613,231.311 973.182,233.113 973.75,232.973 974.318,232.94 974.887,233.94 975.455,232.831 976.023,233.599 976.592,231.266 977.16,230.03 977.728,228.956 978.297,229.319 978.865,230.548 979.433,229.607 980.002,229.68 980.57,230.904 981.138,232.078 981.707,232.019 982.275,233.105 982.843,233.211 983.412,237.358 983.98,236.84 984.548,234.513 985.117,232.105 985.685,231.267 986.253,232.264 986.822,231.126 987.39,232.248 987.959,233.177 988.527,234.117 989.095,232.845 989.664,233.813 990.232,232.872 990.8,230.469 991.369,230.397 991.937,231.532 992.505,229.532 993.074,227.683 993.642,228.688 994.21,229.884 994.779,230.066 995.347,229.022 995.915,232.389 996.484,231.404 997.052,231.35 997.62,231.378 998.189,226.103 998.757,226.382 999.325,226.59 999.894,227.971 1000.46,227.997 1001.03,227.949 1001.6,229.236 1002.17,230.365 1002.74,230.469 1003.3,229.673 1003.87,228.824 1004.44,231.227 1005.01,229.247 1005.58,230.424 1006.15,230.384 1006.71,230.574 1007.28,230.481 1007.85,228.595 1008.42,228.795 1008.99,229.025 1009.56,229.234 1010.12,230.342 1010.69,230.427 1011.26,230.742 1011.83,230.777 1012.4,231.732 1012.97,232.583 1013.53,233.553 1014.1,233.417 1014.67,231.328 1015.24,231.877 1015.81,231.924 1016.38,231.086 1016.94,230.339 1017.51,231.527 1018.08,233.522 1018.65,232.431 1019.22,231.213 1019.79,230.943 1020.35,230.756 1020.92,230.715 1021.49,231.928 1022.06,231.828 1022.63,229.697 1023.2,230.975 1023.76,231.065 1024.33,228.22 1024.9,228.395 1025.47,227.555 1026.04,229.06 1026.61,229.099 1027.17,229.319 1027.74,231.509 1028.31,230.359 1028.88,229.436 1029.45,226.371 1030.02,226.73 1030.58,224.96 1031.15,225.643 1031.72,225.209 1032.29,226.551 1032.86,224.99 1033.43,226.565 1033.99,222.848 1034.56,226.74 1035.13,228.139 1035.7,227.706 1036.27,225.85 1036.84,227.333 1037.4,228.805 1037.97,228.189 1038.54,228.568 1039.11,230.06 1039.68,229.105 1040.25,228.538 1040.81,228.807 1041.38,230.34 1041.95,234.604 1042.52,233.515 1043.09,233.359 1043.66,232.414 1044.22,231.602 1044.79,233.664 1045.36,232.789 1045.93,231.884 1046.5,231.102 1047.07,233.362 1047.63,234.376 1048.2,235.428 1048.77,238.466 1049.34,237.01 1049.91,235.585 1050.48,234.442 1051.05,232.411 1051.61,232.658 1052.18,232.644 1052.75,231.717 1053.32,232.928 1053.89,236.156 1054.46,234.789 1055.02,234.413 1055.59,233.053 1056.16,234.105 1056.73,234.005 1057.3,236.916 1057.87,237.555 1058.43,237.082 1059,237.858 1059.57,238.318 1060.14,238.902 1060.71,236.13 1061.28,235.798 1061.84,235.515 1062.41,234.409 1062.98,234.325 1063.55,231.955 1064.12,231.747 1064.69,230.869 1065.25,228.991 1065.82,225.058 1066.39,226.397 1066.96,224.58 1067.53,223.96 1068.1,227.589 1068.66,226.723 1069.23,226.087 1069.8,227.381 1070.37,227.602 1070.94,226.871 1071.51,224.045 1072.07,224.706 1072.64,225.121 1073.21,224.577 1073.78,225.169 1074.35,226.554 1074.92,228.264 1075.48,227.434 1076.05,232.034 1076.62,232.905 1077.19,233.929 1077.76,234.697 1078.33,233.556 1078.89,235.409 1079.46,235.253 1080.03,234.914 1080.6,235.79 1081.17,236.438 1081.74,234.154 1082.3,234.839 1082.87,232.467 1083.44,233.477 1084.01,234.343 1084.58,235.222 1085.15,234.987 1085.71,234.722 1086.28,234.505 1086.85,233.286 1087.42,234.136 1087.99,234.074 1088.56,233.879 1089.12,234.526 1089.69,233.325 1090.26,233.178 1090.83,232.027 1091.4,228.858 1091.97,225.993 1092.53,225.344 1093.1,225.793 1093.67,225.043 1094.24,223.316 1094.81,224.817 1095.38,223.234 1095.94,223.916 1096.51,225.678 1097.08,228.238 1097.65,227.199 1098.22,229.598 1098.79,229.688 1099.35,229.959 1099.92,231.241 1100.49,231.282 1101.06,232.225 1101.63,230.201 1102.2,229.33 1102.76,231.522 1103.33,230.501 1103.9,234.768 1104.47,235.612 1105.04,237.346 1105.61,234.888 1106.17,234.715 1106.74,235.615 1107.31,236.341 1107.88,236.995 1108.45,236.51 1109.02,237.156 1109.58,234.751 1110.15,234.397 1110.72,234.008 1111.29,236.051 1111.86,233.552 1112.43,233.335 1112.99,233.053 1113.56,231.894 1114.13,232.801 1114.7,232.646 1115.27,231.327 1115.84,232.18 1116.4,233.284 1116.97,234.017 1117.54,233.654 1118.11,234.585 1118.68,233.262 1119.25,232.013 1119.81,233.094 1120.38,232.984 1120.95,230.801 1121.52,230.746 1122.09,231.756 1122.66,229.433 1123.23,231.662 1123.79,231.67 1124.36,229.768 1124.93,229.804 1125.5,229.758 1126.07,230.696 1126.64,230.654 1127.2,230.684 1127.77,230.607 1128.34,228.598 1128.91,227.734 1129.48,229.846 1130.05,228.874 1130.61,228.97 1131.18,229.082 1131.75,230.175 1132.32,230.296 1132.89,231.265 1133.46,229.317 1134.02,228.278 1134.59,228.309 1135.16,227.292 1135.73,229.636 1136.3,230.791 1136.87,232 1137.43,230.833 1138,229.849 1138.57,229.817 1139.14,230.782 1139.71,231.885 1140.28,233.002 1140.84,232.766 1141.41,232.62 1141.98,229.328 1142.55,228.364 1143.12,228.475 1143.69,227.528 1144.25,227.833 1144.82,227.103 1145.39,226.56 1145.96,225.961 1146.53,226.557 1147.1,227.96 1147.66,227.247 1148.23,225.636 1148.8,227.216 1149.37,229.653 1149.94,231.971 1150.51,230.901 1151.07,230.715 1151.64,231.792 1152.21,228.786 1152.78,230.065 1153.35,230.1 1153.92,230.213 1154.48,234.443 1155.05,234.294 1155.62,235.28 1156.19,237.091 1156.76,235.679 1157.33,236.499 1157.89,237.044 1158.46,236.698 1159.03,234.315 1159.6,236.337 1160.17,236.888 1160.74,236.436 1161.3,236.28 1161.87,234.905 1162.44,234.629 1163.01,234.314 1163.58,237.135 1164.15,238.746 1164.71,237.774 1165.28,237.36 1165.85,237.857 1166.42,237.232 1166.99,236.549 1167.56,239.049 1168.12,239.267 1168.69,237.331 1169.26,235.714 1169.83,234.196 1170.4,232 1170.97,230.87 1171.53,230.439 1172.1,231.37 1172.67,228.15 1173.24,230.221 1173.81,227.998 1174.38,228.156 1174.94,230.241 1175.51,231.345 1176.08,232.07 1176.65,228.871 1177.22,228.077 1177.79,229.21 1178.35,228.306 1178.92,227.598 1179.49,227.638 1180.06,228.639 1180.63,229.81 1181.2,231.124 1181.76,228.893 1182.33,228.988 1182.9,230.031 1183.47,232.126 1184.04,232.063 1184.61,229.717 1185.17,228.693 1185.74,229.845 1186.31,229.813 1186.88,229.839 1187.45,229.958 1188.02,228.789 1188.58,230.078 1189.15,229.237 1189.72,231.533 1190.29,230.571 1190.86,231.557 1191.43,231.533 1192,229.522 1192.56,229.448 1193.13,229.495 1193.7,229.348 1194.27,229.409 1194.84,229.322 1195.41,230.476 1195.97,230.354 1196.54,231.555 1197.11,231.468 1197.68,231.492 1198.25,229.168 1198.82,227.881 1199.38,227.163 1199.95,228.303 1200.52,228.26 1201.09,227.577 1201.66,226.569 1202.23,227.708 1202.79,225.68 1203.36,226.964 1203.93,227.412 1204.5,227.87 1205.07,229.246 1205.64,229.249 1206.2,228.49 1206.77,228.667 1207.34,231.744 1207.91,230.571 1208.48,230.844 1209.05,230.727 1209.61,230.883 1210.18,228.674 1210.75,228.984 1211.32,230.057 1211.89,231.26 1212.46,234.127 1213.02,234.657 1213.59,234.337 1214.16,231.046 1214.73,232.122 1215.3,232.072 1215.87,233.004 1216.43,233.944 1217,234.823 1217.57,233.466 1218.14,235.203 1218.71,234.725 1219.28,235.309 1219.84,234.867 1220.41,234.512 1220.98,233.055 1221.55,233.799 1222.12,234.661 1222.69,235.513 1223.25,235.04 1223.82,232.683 1224.39,232.453 1224.96,234.151 1225.53,230.825 1226.1,230.806 1226.66,230.751 1227.23,232.769 1227.8,231.785 1228.37,231.679 1228.94,229.672 1229.51,227.425 1230.07,227.555 1230.64,226.701 1231.21,226.771 1231.78,226.849 1232.35,227.025 1232.92,227.175 1233.48,230.739 1234.05,230.439 1234.62,230.442 1235.19,232.454 1235.76,229.293 1236.33,230.464 1236.89,230.647 1237.46,230.535 1238.03,232.871 1238.6,233.536 1239.17,232.293 1239.74,230.123 1240.3,228.024 1240.87,228.282 1241.44,229.359 1242.01,229.54 1242.58,229.696 1243.15,229.762 1243.71,227.612 1244.28,225.921 1244.85,226.21 1245.42,227.493 1245.99,226.7 1246.56,225.735 1247.12,227.207 1247.69,228.641 1248.26,229.836 1248.83,228.903 1249.4,227.027 1249.97,226.11 1250.53,226.408 1251.1,225.836 1251.67,225.12 1252.24,226.34 1252.81,228.685 1253.38,227.084 1253.94,227.354 1254.51,229.696 1255.08,228.851 1255.65,229.223 1256.22,229.255 1256.79,231.284 1257.35,232.378 1257.92,232.156 1258.49,229.114 1259.06,228.364 1259.63,228.423 1260.2,228.744 1260.76,228.772 1261.33,228.195 1261.9,229.485 1262.47,228.87 1263.04,230.002 1263.61,229.878 1264.18,230.979 1264.74,231.945 1265.31,232.928 1265.88,232.726 1266.45,235.657 1267.02,238.302 1267.59,238.531 1268.15,235.985 1268.72,235.69 1269.29,234.237 1269.86,234.893 1270.43,235.897 1271,236.707 1271.56,235.314 1272.13,234.821 1272.7,234.545 1273.27,233.235 1273.84,235.15 1274.41,235.874 1274.97,235.466 1275.54,236.096 1276.11,236.873 1276.68,236.464 1277.25,237.266 1277.82,236.7 1278.38,235.175 1278.95,234.843 1279.52,234.76 1280.09,233.554 1280.66,234.281 1281.23,231.032 1281.79,230.272 1282.36,231.433 1282.93,231.386 1283.5,232.153 1284.07,231.001 1284.64,232.996 1285.2,232.788 1285.77,234.639 1286.34,234.456 1286.91,231.113 1287.48,230.801 1288.05,231.823 1288.61,230.481 1289.18,228.259 1289.75,227.294 1290.32,226.46 1290.89,226.717 1291.46,229.132 1292.02,229.211 1292.59,230.105 1293.16,229.046 1293.73,230.04 1294.3,231.146 1294.87,231.819 1295.43,233.768 1296,232.507 1296.57,233.153 1297.14,233.868 1297.71,233.448 1298.28,231.375 1298.84,234.263 1299.41,235.007 1299.98,234.693 1300.55,233.16 1301.12,229.815 1301.69,230.7 1302.25,229.601 1302.82,229.472 1303.39,227.318 1303.96,227.647 1304.53,229.862 1305.1,227.708 1305.66,226.837 1306.23,230.255 1306.8,227.253 1307.37,226.338 1307.94,225.68 1308.51,225.064 1309.07,226.303 1309.64,227.447 1310.21,227.695 1310.78,226.841 1311.35,225.963 1311.92,228.65 1312.48,230.9 1313.05,231.797 1313.62,231.786 1314.19,233.762 1314.76,235.492 1315.33,235.093 1315.89,234.736 1316.46,236.422 1317.03,234.827 1317.6,234.518 1318.17,234.032 1318.74,234.741 1319.3,234.286 1319.87,233.168 1320.44,233.81 1321.01,233.664 1321.58,233.094 1322.15,230.696 1322.71,229.627 1323.28,226.681 1323.85,227.755 1324.42,225.899 1324.99,226.12 1325.56,227.261 1326.12,226.658 1326.69,225.045 1327.26,225.367 1327.83,224.501 1328.4,224.718 1328.97,225 1329.53,227.319 1330.1,229.691 1330.67,226.689 1331.24,227.817 1331.81,226.872 1332.38,227.216 1332.94,227.484 1333.51,228.885 1334.08,229.241 1334.65,233.49 1335.22,235.46 1335.79,235.135 1336.36,233.83 1336.92,231.797 1337.49,231.816 1338.06,233.729 1338.63,233.527 1339.2,233.069 1339.77,233.874 1340.33,234.797 1340.9,234.524 1341.47,234.326 1342.04,232.167 1342.61,232.02 1343.18,231.975 1343.74,231.931 1344.31,230.827 1344.88,230.81 1345.45,231.659 1346.02,228.672 1346.59,225.686 1347.15,226.944 1347.72,228.253 1348.29,232.502 1348.86,232.465 1349.43,230.135 1350,230.154 1350.56,228.95 1351.13,229.251 1351.7,230.477 1352.27,231.44 1352.84,230.362 1353.41,231.33 1353.97,230.262 1354.54,227.036 1355.11,228.39 1355.68,226.384 1356.25,226.516 1356.82,225.963 1357.38,227.437 1357.95,226.521 1358.52,228.921 1359.09,230.199 1359.66,229.233 1360.23,228.229 1360.79,229.581 1361.36,230.689 1361.93,230.909 1362.5,228.692 1363.07,229.034 1363.64,229.228 1364.2,229.246 1364.77,228.232 1365.34,229.445 1365.91,233.879 1366.48,233.708 1367.05,236.749 1367.61,236.36 1368.18,236.017 1368.75,234.793 1369.32,236.557 1369.89,236.118 1370.46,232.774 1371.02,235.553 1371.59,234.096 1372.16,234.669 1372.73,234.262 1373.3,235.085 1373.87,233.842 1374.43,233.666 1375,234.576 1375.57,233.171 1376.14,228.951 1376.71,227.318 1377.28,228.552 1377.84,228.68 1378.41,230.667 1378.98,228.63 1379.55,227.603 1380.12,227.718 1380.69,227.955 1381.25,225.062 1381.82,223.441 1382.39,223.88 1382.96,224.201 1383.53,224.618 1384.1,223.954 1384.66,225.307 1385.23,224.741 1385.8,227.258 1386.37,227.715 1386.94,227.984 1387.51,228.388 1388.07,228.42 1388.64,225.768 1389.21,225.151 1389.78,225.64 1390.35,227.102 1390.92,227.462 1391.48,226.759 1392.05,227.239 1392.62,226.638 1393.19,227.946 1393.76,226.185 1394.33,228.74 1394.89,229.029 1395.46,228.267 1396.03,226.545 1396.6,227.066 1397.17,227.237 1397.74,228.535 1398.3,229.024 1398.87,231.553 1399.44,232.797 1400.01,232.655 1400.58,232.592 1401.15,231.335 1401.71,233.475 1402.28,232.283 1402.85,231.319 1403.42,231.467 1403.99,233.548 1404.56,235.428 1405.13,234.022 1405.69,234.889 1406.26,235.544 1406.83,234.439 1407.4,233.41 1407.97,233.329 1408.54,235.619 1409.1,238.486 1409.67,237.043 1410.24,236.415 1410.81,239.283 1411.38,238.732 1411.95,238.277 1412.51,232.684 1413.08,231.668 1413.65,230.686 1414.22,230.92 1414.79,230.932 1415.36,230.903 1415.92,230.798 1416.49,227.701 1417.06,227.901 1417.63,226.374 1418.2,226.722 1418.77,226.975 1419.33,229.305 1419.9,228.478 1420.47,230.727 1421.04,230.864 1421.61,229.932 1422.18,230.978 1422.74,231.899 1423.31,232.728 1423.88,230.739 1424.45,228.565 1425.02,229.769 1425.59,230.898 1426.15,232.776 1426.72,233.835 1427.29,233.458 1427.86,233.324 1428.43,234.073 1429,232.607 1429.56,233.681 1430.13,233.572 1430.7,232.551 1431.27,232.626 1431.84,231.391 1432.41,229.375 1432.97,229.906 1433.54,232.123 1434.11,232.192 1434.68,232.074 1435.25,230.944 1435.82,230.879 1436.38,231.789 1436.95,231.571 1437.52,232.471 1438.09,233.346 1438.66,233.138 1439.23,234.199 1439.79,233.935 1440.36,231.731 1440.93,229.743 1441.5,230.622 1442.07,231.857 1442.64,232.904 1443.2,232.791 1443.77,231.628 1444.34,230.55 1444.91,229.543 1445.48,230.517 1446.05,228.415 1446.61,228.586 1447.18,228.679 1447.75,230.915 1448.32,231.996 1448.89,231.656 1449.46,228.519 1450.02,226.585 1450.59,225.78 1451.16,225.219 1451.73,226.758 1452.3,227.08 1452.87,227.515 1453.43,227.784 1454,229.152 1454.57,231.423 1455.14,231.368 1455.71,230.442 1456.28,230.525 1456.84,230.516 1457.41,231.497 1457.98,232.438 1458.55,232.427 1459.12,231.24 1459.69,232.199 1460.25,234.206 1460.82,234.081 1461.39,236.089 1461.96,236.753 1462.53,236.387 1463.1,236.084 1463.66,234.912 1464.23,233.501 1464.8,235.443 1465.37,234.967 1465.94,232.668 1466.51,232.506 1467.07,235.529 1467.64,232.999 1468.21,230.869 1468.78,229.802 1469.35,228.997 1469.92,231.222 1470.48,232.299 1471.05,231.197 1471.62,231.003 1472.19,230.816 1472.76,231.528 1473.33,232.506 1473.89,231.187 1474.46,232.257 1475.03,231.987 1475.6,233.871 1476.17,234.618 1476.74,234.357 1477.31,230.997 1477.87,230.67 1478.44,229.606 1479.01,230.642 1479.58,228.655 1480.15,227.826 1480.72,231.267 1481.28,230.324 1481.85,231.452 1482.42,233.549 1482.99,232.184 1483.56,231.069 1484.13,229.007 1484.69,229.114 1485.26,228.384 1485.83,226.673 1486.4,228.061 1486.97,232.443 1487.54,232.109 1488.1,229.937 1488.67,229.009 1489.24,228.382 1489.81,228.462 1490.38,226.303 1490.95,226.418 1491.51,227.552 1492.08,228.79 1492.65,227.713 1493.22,229.077 1493.79,229.067 1494.36,225.966 1494.92,227.303 1495.49,226.352 1496.06,224.754 1496.63,226.309 1497.2,226.581 1497.77,224.603 1498.33,227.183 1498.9,228.58 1499.47,229.884 1500.04,230.124 1500.61,229.286 1501.18,229.877 1501.74,230.165 1502.31,232.285 1502.88,233.394 1503.45,231.971 1504.02,229.913 1504.59,231.129 1505.15,230.965 1505.72,229.959 1506.29,229.992 1506.86,229.942 1507.43,231.39 1508,229.497 1508.56,228.658 1509.13,228.817 1509.7,228.967 1510.27,227.269 1510.84,228.805 1511.41,229.239 1511.97,228.293 1512.54,230.657 1513.11,230.742 1513.68,231.96 1514.25,233.047 1514.82,231.797 1515.38,229.764 1515.95,229.005 1516.52,230.131 1517.09,230.274 1517.66,231.428 1518.23,233.449 1518.79,234.487 1519.36,234.281 1519.93,233.998 1520.5,232.733 1521.07,233.59 1521.64,234.452 1522.2,232.425 1522.77,232.39 1523.34,233.328 1523.91,233.296 1524.48,233.188 1525.05,233.1 1525.61,232.996 1526.18,229.696 1526.75,229.893 1527.32,230.904 1527.89,229.777 1528.46,228.805 1529.02,229.018 1529.59,229.31 1530.16,230.602 1530.73,230.647 1531.3,233.747 1531.87,232.578 1532.43,230.511 1533,229.648 1533.57,229.798 1534.14,229.961 1534.71,233.369 1535.28,232.338 1535.84,233.088 1536.41,232.988 1536.98,232.874 1537.55,233.72 1538.12,230.43 1538.69,231.628 1539.25,232.39 1539.82,232.302 1540.39,233.31 1540.96,234.437 1541.53,234.237 1542.1,235.045 1542.66,231.8 1543.23,232.675 1543.8,230.475 1544.37,231.797 1544.94,233.886 1545.51,233.432 1546.08,233.294 1546.64,232.115 1547.21,229.723 1547.78,231.746 1548.35,233.681 1548.92,233.373 1549.49,233.242 1550.05,233.126 1550.62,231.898 1551.19,229.817 1551.76,232.717 1552.33,232.656 1552.9,232.639 1553.46,231.384 1554.03,231.559 1554.6,231.561 1555.17,231.48 1555.74,230.238 1556.31,229.465 1556.87,230.405 1557.44,230.429 1558.01,229.284 1558.58,231.442 1559.15,231.399 1559.72,232.373 1560.28,234.129 1560.85,233.828 1561.42,234.649 1561.99,234.442 1562.56,233.332 1563.13,233.079 1563.69,234.046 1564.26,236.903 1564.83,237.342 1565.4,236.687 1565.97,236.17 1566.54,234.616 1567.1,234.361 1567.67,234.158 1568.24,232.75 1568.81,232.628 1569.38,230.417 1569.95,228.112 1570.51,229.183 1571.08,229.275 1571.65,229.26 1572.22,227.487 1572.79,227.764 1573.36,229.803 1573.92,229.754 1574.49,227.786 1575.06,227.956 1575.63,229.241 1576.2,229.306 1576.77,229.142 1577.33,228.32 1577.9,227.581 1578.47,226.661 1579.04,226.736 1579.61,227.881 1580.18,231.186 1580.74,233.134 1581.31,232.203 1581.88,233.121 1582.45,237.046 1583.02,234.286 1583.59,232.947 1584.15,233.652 1584.72,232.179 1585.29,231.893 1585.86,232.832 1586.43,232.407 1587,232.1 1587.56,231.79 1588.13,230.711 1588.7,230.526 1589.27,229.591 1589.84,229.553 1590.41,227.501 1590.97,228.843 1591.54,230.035 1592.11,228.932 1592.68,228.98 1593.25,228.141 1593.82,227.223 1594.38,227.525 1594.95,227.709 1595.52,227.756 1596.09,230.153 1596.66,230.219 1597.23,231.265 1597.79,231.257 1598.36,229.151 1598.93,229.289 1599.5,228.383 1600.07,230.526 1600.64,230.54 1601.2,231.547 1601.77,233.487 1602.34,231.33 1602.91,231.075 1603.48,231.114 1604.05,229.98 1604.61,231.14 1605.18,230.074 1605.75,231.129 1606.32,231.059 1606.89,230.076 1607.46,229.913 1608.02,228.757 1608.59,228.01 1609.16,229.24 1609.73,229.236 1610.3,229.376 1610.87,230.475 1611.43,231.567 1612,229.341 1612.57,230.556 1613.14,230.565 1613.71,230.419 1614.28,230.464 1614.84,230.345 1615.41,230.463 1615.98,231.513 1616.55,230.314 1617.12,230.482 1617.69,229.387 1618.26,232.538 1618.82,231.313 1619.39,231.057 1619.96,231.123 1620.53,230.244 1621.1,230.342 1621.67,229.469 1622.23,229.727 1622.8,227.713 1623.37,226.77 1623.94,227.853 1624.51,229.013 1625.08,228.869 1625.64,228.146 1626.21,228.097 1626.78,229.24 1627.35,228.33 1627.92,229.607 1628.49,230.794 1629.05,230.775 1629.62,230.717 1630.19,231.61 1630.76,230.542 1631.33,230.473 1631.9,233.606 1632.46,232.395 1633.03,232.635 1633.6,232.46 1634.17,234.168 1634.74,235.081 1635.31,234.726 1635.87,234.638 1636.44,235.286 1637.01,231.865 1637.58,231.609 1638.15,231.515 1638.72,228.235 1639.28,227.25 1639.85,229.421 1640.42,227.556 1640.99,226.818 1641.56,226.409 1642.13,227.868 1642.69,228.968 1643.26,228.177 1643.83,229.456 1644.4,227.719 1644.97,228.869 1645.54,229.142 1646.1,228.031 1646.67,227.3 1647.24,229.481 1647.81,229.648 1648.38,228.682 1648.95,228.883 1649.51,228.664 1650.08,229.112 1650.65,228.304 1651.22,229.529 1651.79,228.713 1652.36,228.849 1652.92,229.197 1653.49,228.335 1654.06,230.518 1654.63,230.56 1655.2,230.751 1655.77,230.014 1656.33,230.152 1656.9,231.494 1657.47,226.391 1658.04,227.831 1658.61,228.138 1659.18,227.322 1659.74,228.476 1660.31,228.754 1660.88,229.969 1661.45,229.929 1662.02,233.024 1662.59,233.004 1663.15,236.991 1663.72,236.824 1664.29,237.404 1664.86,237.158 1665.43,235.718 1666,234.449 1666.56,233.252 1667.13,233.144 1667.7,233.092 1668.27,232.95 1668.84,232.759 1669.41,234.786 1669.97,235.527 1670.54,235.088 1671.11,234.744 1671.68,235.597 1672.25,235.213 1672.82,235.017 1673.38,234.692 1673.95,234.242 1674.52,232.829 1675.09,232.663 1675.66,232.424 1676.23,231.276 1676.79,231.269 1677.36,232.43 1677.93,231.14 1678.5,233.138 1679.07,232.014 1679.64,232.728 1680.2,232.586 1680.77,233.519 1681.34,232.944 1681.91,231.62 1682.48,232.387 1683.05,231.098 1683.61,231.906 1684.18,233.856 1684.75,234.568 1685.32,234.323 1685.89,234.167 1686.46,232.803 1687.02,234.675 1687.59,231.292 1688.16,232.397 1688.73,229.182 1689.3,230.25 1689.87,229.166 1690.44,228.324 1691,226.382 1691.57,227.724 1692.14,228.874 1692.71,228.034 1693.28,228.18 1693.85,228.452 1694.41,227.815 1694.98,226.923 1695.55,227.163 1696.12,227.483 1696.69,225.559 1697.26,226.913 1697.82,227.331 1698.39,228.701 1698.96,227.106 1699.53,226.241 1700.1,226.49 1700.67,227.819 1701.23,226.078 1701.8,226.376 1702.37,227.852 1702.94,229.134 1703.51,224.249 1704.08,224.838 1704.64,225.329 1705.21,225.706 1705.78,226.073 1706.35,227.43 1706.92,227.856 1707.49,226.173 1708.05,226.569 1708.62,226.939 1709.19,228.344 1709.76,225.684 1710.33,226.017 1710.9,225.396 1711.46,223.931 1712.03,226.617 1712.6,226.909 1713.17,227.078 1713.74,227.321 1714.31,225.885 1714.87,227.462 1715.44,228.861 1716.01,228.842 1716.58,227.943 1717.15,229.568 1717.72,227.719 1718.28,229.029 1718.85,232.549 1719.42,232.504 1719.99,230.375 1720.56,230.434 1721.13,229.362 1721.69,230.609 1722.26,230.69 1722.83,231.88 1723.4,232.103 1723.97,228.284 1724.54,229.619 1725.1,228.813 1725.67,227.882 1726.24,227.93 1726.81,229.065 1727.38,229.282 1727.95,230.347 1728.51,232.523 1729.08,232.696 1729.65,231.737 1730.22,231.726 1730.79,234.995 1731.36,232.993 1731.92,232.042 1732.49,234.328 1733.06,236.268 1733.63,234.965 1734.2,235.956 1734.77,235.689 1735.33,237.425 1735.9,237.035 1736.47,238.781 1737.04,240.445 1737.61,238.941 1738.18,241.704 1738.74,241.068 1739.31,239.533 1739.88,239.193 1740.45,239.614 1741.02,237.807 1741.59,238.406 1742.15,240.198 1742.72,238.797 1743.29,240.454 1743.86,237.52 1744.43,236.153 1745,233.737 1745.56,232.487 1746.13,232.409 1746.7,235.256 1747.27,234.832 1747.84,236.57 1748.41,235.238 1748.97,230.774 1749.54,232.834 1750.11,234.753 1750.68,234.424 1751.25,234.108 1751.82,231.939 1752.38,230.732 1752.95,231.822 1753.52,230.524 1754.09,232.374 1754.66,232.438 1755.23,232.317 1755.79,230.233 1756.36,230.322 1756.93,230.3 1757.5,232.252 1758.07,234.528 1758.64,234.156 1759.21,233.867 1759.77,233.53 1760.34,233.149 1760.91,232.897 1761.48,233.639 1762.05,235.488 1762.62,239.11 1763.18,235.594 1763.75,235.01 1764.32,234.511 1764.89,232.786 1765.46,231.596 1766.03,230.25 1766.59,231.293 1767.16,229.892 1767.73,231.015 1768.3,230.76 1768.87,231.614 1769.44,228.547 1770,228.392 1770.57,224.404 1771.14,224.672 1771.71,225.071 1772.28,224.491 1772.85,226.024 1773.41,224.465 1773.98,225.891 1774.55,225.987 1775.12,224.257 1775.69,226.709 1776.26,224.66 1776.82,226.08 1777.39,226.217 1777.96,226.704 1778.53,226.031 1779.1,225.37 1779.67,224.454 1780.23,224.009 1780.8,224.746 1781.37,225.017 1781.94,222.19 1782.51,223.626 1783.08,223.286 1783.64,224.859 1784.21,223.427 1784.78,226.346 1785.35,226.709 1785.92,229.799 1786.49,229.731 1787.05,228.918 1787.62,229.137 1788.19,230.291 1788.76,230.618 1789.33,231.653 1789.9,231.628 1790.46,233.624 1791.03,234.597 1791.6,233.27 1792.17,233.232 1792.74,232.941 1793.31,233.851 1793.87,232.515 1794.44,234.705 1795.01,235.735 1795.58,234.513 1796.15,233.299 1796.72,230.071 1797.28,229.986 1797.85,229.792 1798.42,231.972 1798.99,229.738 1799.56,231 1800.13,230.844 1800.69,232.045 1801.26,234.148 1801.83,235 1802.4,234.957 1802.97,234.581 1803.54,235.559 1804.1,233.97 1804.67,233.68 1805.24,233.334 1805.81,231.027 1806.38,230.919 1806.95,233.974 1807.51,235.851 1808.08,234.464 1808.65,234.16 1809.22,232.919 1809.79,230.793 1810.36,231.892 1810.92,232.658 1811.49,234.434 1812.06,235.053 1812.63,235.753 1813.2,234.418 1813.77,233.148 1814.33,232.904 1814.9,233.982 1815.47,233.647 1816.04,232.295 1816.61,231.955 1817.18,230.64 1817.74,230.51 1818.31,231.603 1818.88,231.549 1819.45,232.422 1820.02,231.138 1820.59,230.047 1821.15,229.845 1821.72,229.913 1822.29,229.982 1822.86,228.915 1823.43,227.952 1824,228.063 1824.56,229.314 1825.13,228.397 1825.7,228.55 1826.27,227.562 1826.84,227.733 1827.41,225.793 1827.97,226.068 1828.54,226.328 1829.11,227.631 1829.68,226.88 1830.25,229.227 1830.82,228.174 1831.39,226.301 1831.95,227.96 1832.52,230.081 1833.09,232.081 1833.66,231.074 1834.23,230.247 1834.8,229.24 1835.36,228.299 1835.93,228.574 1836.5,229.881 1837.07,228.741 1837.64,229.711 1838.21,231.974 1838.77,230.872 1839.34,232.006 1839.91,231.958 1840.48,231.914 1841.05,226.696 1841.62,224.938 1842.18,223.196 1842.75,223.808 1843.32,224.42 1843.89,227.046 1844.46,226.475 1845.03,228.082 1845.59,228.378 1846.16,229.774 1846.73,232.064 1847.3,233.977 1847.87,235.984 1848.44,233.412 1849,232.262 1849.57,231.197 1850.14,230.258 1850.71,230.398 1851.28,229.149 1851.85,232.501 1852.41,228.445 1852.98,228.812 1853.55,228.975 1854.12,229.102 1854.69,228.35 1855.26,228.877 1855.82,231.145 1856.39,230.328 1856.96,229.387 1857.53,227.465 1858.1,229.763 1858.67,228.544 1859.23,228.888 1859.8,229.245 1860.37,227.509 1860.94,227.75 1861.51,229.003 1862.08,229.267 1862.64,229.59 1863.21,228.796 1863.78,232.157 1864.35,233.244 1864.92,235.38 1865.49,236.276 1866.05,233.747 1866.62,234.784 1867.19,234.359 1867.76,235.267 1868.33,236.039 1868.9,234.657 1869.46,233.721 1870.03,234.56 1870.6,234.114 1871.17,237.07 1871.74,236.625 1872.31,235.27 1872.87,236.999 1873.44,233.59 1874.01,234.523 1874.58,234.363 1875.15,231.898 1875.72,229.589 1876.28,229.774 1876.85,229.979 1877.42,230.044 1877.99,231.258 1878.56,229.346 1879.13,229.449 1879.69,233.757 1880.26,233.46 1880.83,233.187 1881.4,233.03 1881.97,230.914 1882.54,230.708 1883.1,231.742 1883.67,230.361 1884.24,231.633 1884.81,230.668 1885.38,231.658 1885.95,232.546 1886.51,232.36 1887.08,232.082 1887.65,231.68 1888.22,230.898 1888.79,231.987 1889.36,230.705 1889.92,230.507 1890.49,231.685 1891.06,229.866 1891.63,229.938 1892.2,230.048 1892.77,231.234 1893.33,229.177 1893.9,229.442 1894.47,230.613 1895.04,230.584 1895.61,230.591 1896.18,233.67 1896.74,234.483 1897.31,235.26 1897.88,235.934 1898.45,234.625 1899.02,234.295 1899.59,234.197 1900.16,232.651 1900.72,231.351 1901.29,232.311 1901.86,232.14 1902.43,229.084 1903,229.102 1903.57,227.997 1904.13,228.175 1904.7,230.263 1905.27,233.269 1905.84,231.955 1906.41,232.093 1906.98,233.177 1907.54,231.915 1908.11,231.937 1908.68,233.712 1909.25,236.591 1909.82,235.214 1910.39,232.835 1910.95,232.494 1911.52,230.185 1912.09,230.204 1912.66,232.216 1913.23,231.148 1913.8,231.086 1914.36,230.96 1914.93,229.966 1915.5,230.82 1916.07,231.793 1916.64,230.437 1917.21,231.334 1917.77,230.306 1918.34,230.101 1918.91,228.994 1919.48,229.196 1920.05,227.812 1920.62,228.837 1921.18,229.093 1921.75,229.248 1922.32,228.277 1922.89,227.233 1923.46,226.24 1924.03,225.357 1924.59,223.634 1925.16,223.028 1925.73,224.723 1926.3,224.079 1926.87,223.557 1927.44,224.167 1928,224.443 1928.57,226.766 1929.14,225.943 1929.71,228.213 1930.28,227.439 1930.85,229.577 1931.41,230.67 1931.98,230.736 1932.55,230.866 1933.12,232.08 1933.69,232.097 1934.26,232.895 1934.82,231.78 1935.39,232.55 1935.96,232.052 1936.53,231.98 1937.1,232.904 1937.67,232.699 1938.23,235.671 1938.8,235.224 1939.37,235.91 1939.94,235.785 1940.51,236.547 1941.08,234.117 1941.64,232.021 1942.21,231.078 1942.78,233.095 1943.35,232.73 1943.92,232.635 1944.49,232.348 1945.05,231.202 1945.62,231.243 1946.19,233.008 1946.76,231.88 1947.33,231.88 1947.9,231.615 1948.46,232.412 1949.03,229.274 1949.6,229.295 1950.17,228.52 1950.74,229.851 1951.31,231.907 1951.87,231.923 1952.44,233.964 1953.01,233.813 1953.58,230.488 1954.15,230.367 1954.72,230.258 1955.28,227.354 1955.85,227.52 1956.42,227.777 1956.99,228.042 1957.56,227.113 1958.13,228.403 1958.69,227.812 1959.26,230.009 1959.83,230.047 1960.4,230.177 1960.97,230.226 1961.54,229.187 1962.1,229.265 1962.67,229.45 1963.24,230.488 1963.81,231.619 1964.38,232.564 1964.95,233.491 1965.51,233.569 1966.08,234.604 1966.65,234.409 1967.22,234.217 1967.79,231.844 1968.36,232.927 1968.92,232.696 1969.49,233.695 1970.06,232.553 1970.63,231.509 1971.2,230.468 1971.77,229.456 1972.34,226.567 1972.9,225.949 1973.47,226.248 1974.04,229.652 1974.61,227.811 1975.18,229.251 1975.75,229.347 1976.31,230.439 1976.88,230.44 1977.45,232.419 1978.02,233.145 1978.59,234.155 1979.16,233.862 1979.72,233.603 1980.29,234.404 1980.86,233.405 1981.43,233.298 1982,233.169 1982.57,234.029 1983.13,232.731 1983.7,232.665 1984.27,234.787 1984.84,234.56 1985.41,233.429 1985.98,236.266 1986.54,235.795 1987.11,237.314 1987.68,235.823 1988.25,234.532 1988.82,235.136 1989.39,235.839 1989.95,234.421 1990.52,236.233 1991.09,234.792 1991.66,236.449 1992.23,235.178 1992.8,235.89 1993.36,234.387 1993.93,234.007 1994.5,233.464 1995.07,233.032 1995.64,234.709 1996.21,235.45 1996.77,236.048 1997.34,236.808 1997.91,234.401 1998.48,233.837 1999.05,232.556 1999.62,230.244 2000.18,232.16 2000.75,231.857 2001.32,232.562 2001.89,232.419 2002.46,232.042 2003.03,230.73 2003.59,233.639 2004.16,234.292 2004.73,233.803 2005.3,233.254 2005.87,234.877 2006.44,233.581 2007,233.236 2007.57,231.635 2008.14,230.342 2008.71,230.304 2009.28,228.317 2009.85,228.251 2010.41,230.173 2010.98,228.974 2011.55,231.169 2012.12,230.804 2012.69,229.6 2013.26,229.559 2013.82,229.462 2014.39,231.429 2014.96,235.352 2015.53,235.173 2016.1,235.789 2016.67,231.008 2017.23,230.665 2017.8,229.304 2018.37,231.265 2018.94,231.107 2019.51,231.947 2020.08,232.811 2020.64,232.354 2021.21,232.022 2021.78,230.427 2022.35,228.027 2022.92,226.975 2023.49,225.182 2024.05,224.298 2024.62,222.787 2025.19,222.981 2025.76,222.295 2026.33,221.351 2026.9,221.994 2027.46,222.309 2028.03,223.108 2028.6,222.581 2029.17,223.047 2029.74,222.505 2030.31,221.152 2030.87,219.913 2031.44,221.468 2032.01,222.101 2032.58,225.838 2033.15,224.262 2033.72,223.9 2034.28,222.12 2034.85,222.595 2035.42,224.218 2035.99,222.827 2036.56,221.625 2037.13,222.299 2037.69,219.895 2038.26,220.955 2038.83,220.843 2039.4,223.738 2039.97,223.621 2040.54,224.971 2041.11,224.471 2041.67,225.134 2042.24,225.568 2042.81,226.028 2043.38,228.555 2043.95,227.711 2044.52,229.056 2045.08,231.191 2045.65,231.399 2046.22,231.496 2046.79,234.709 2047.36,234.443 2047.93,235.256 2048.49,235.209 2049.06,235.999 2049.63,233.517 2050.2,233.361 2050.77,232.284 2051.34,232.292 2051.9,231.577 2052.47,230.811 2053.04,228.849 2053.61,232.373 2054.18,232.311 2054.75,232.139 2055.31,232.005 2055.88,231.666 2056.45,231.735 2057.02,233.039 2057.59,234.174 2058.16,235.109 2058.72,237.065 2059.29,238.738 2059.86,237.407 2060.43,236.049 2061,236.012 2061.57,235.786 2062.13,233.144 2062.7,233.074 2063.27,232.881 2063.84,232.739 2064.41,232.827 2064.98,231.545 2065.54,232.416 2066.11,230.472 2066.68,230.656 2067.25,230.614 2067.82,229.436 2068.39,230.497 2068.95,232.472 2069.52,233.728 2070.09,234.496 2070.66,235.408 2071.23,238.24 2071.8,238.768 2072.36,238.24 2072.93,236.664 2073.5,235.247 2074.07,235.796 2074.64,234.4 2075.21,234.168 2075.77,232.81 2076.34,231.592 2076.91,231.477 2077.48,232.331 2078.05,230.36 2078.62,229.658 2079.18,228.595 2079.75,224.667 2080.32,222.924 2080.89,222.573 2081.46,221.225 2082.03,223.101 2082.59,221.568 2083.16,221.231 2083.73,221.918 2084.3,223.576 2084.87,225.947 2085.44,228.407 2086,228.83 2086.57,230.048 2087.14,230.169 2087.71,228.266 2088.28,227.513 2088.85,228.876 2089.41,231.163 2089.98,233.418 2090.55,234.327 2091.12,233.106 2091.69,231.952 2092.26,229.889 2092.82,230.901 2093.39,232.05 2093.96,232.207 2094.53,231.175 2095.1,233.241 2095.67,233.094 2096.23,232.983 2096.8,232.001 2097.37,230.932 2097.94,232.077 2098.51,230.124 2099.08,230.273 2099.64,232.214 2100.21,231.079 2100.78,229.163 2101.35,226.328 2101.92,225.674 2102.49,225.33 2103.05,225.698 2103.62,226.191 2104.19,226.41 2104.76,223.569 2105.33,228.166 2105.9,227.147 2106.46,227.279 2107.03,227.576 2107.6,230.093 2108.17,231.211 2108.74,232.384 2109.31,231.113 2109.87,231.174 2110.44,231.207 2111.01,230.974 2111.58,228.994 2112.15,229.289 2112.72,229.617 2113.29,232.969 2113.85,235.084 2114.42,233.016 2114.99,233.741 2115.56,234.558 2116.13,235.268 2116.7,235.205 2117.26,234.084 2117.83,231.814 2118.4,231.633 2118.97,230.841 2119.54,232.029 2120.11,232.093 2120.67,232.971 2121.24,232.967 2121.81,234.074 2122.38,235.061 2122.95,232.675 2123.52,233.746 2124.08,234.588 2124.65,236.405 2125.22,236.121 2125.79,232.679 2126.36,234.705 2126.93,235.625 2127.49,235.103 2128.06,233.782 2128.63,236.724 2129.2,234.396 2129.77,235.39 2130.34,237.176 2130.9,236.693 2131.47,238.422 2132.04,236.755 2132.61,237.349 2133.18,236.998 2133.75,236.453 2134.31,232.824 2134.88,233.655 2135.45,233.379 2136.02,232.168 2136.59,232.909 2137.16,231.56 2137.72,231.464 2138.29,231.742 2138.86,230.544 2139.43,229.358 2140,228.541 2140.57,229.559 2141.13,230.86 2141.7,231.953 2142.27,230.762 2142.84,231.946 2143.41,229.768 2143.98,229.731 2144.54,228.659 2145.11,225.757 2145.68,226.948 2146.25,228.16 2146.82,227.227 2147.39,229.513 2147.95,230.603 2148.52,229.412 2149.09,231.452 2149.66,231.504 2150.23,231.465 2150.8,232.394 2151.36,233.309 2151.93,232.869 2152.5,232.604 2153.07,233.454 2153.64,232.165 2154.21,232.041 2154.77,233.991 2155.34,233.772 2155.91,233.587 2156.48,231.282 2157.05,230.018 2157.62,230.07 2158.18,227.029 2158.75,227.369 2159.32,226.721 2159.89,226.95 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.026\n  with uncertainty of ± 0.0023191597515853177\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01996 ± (0.00235737, 0.00221525) (MC)\n  95% confidence interval: [-4.0244, -4.01512] (MC)\n  linear error propagation: -4.01983 ± 0.00240432\n  |δ_y| = |0.00134127| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.019961782916546, val_l = 0.004439938302342128, val_u = 0.004845504650925037)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.54 2211.02,1150.54 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1000.57 2211.02,1000.57 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,850.606 2211.02,850.606 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,700.638 2211.02,700.638 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,550.671 2211.02,550.671 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,400.704 2211.02,400.704 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,250.737 2211.02,250.737 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.54 365.751,1150.54 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1000.57 365.751,1000.57 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,850.606 365.751,850.606 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,700.638 365.751,700.638 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,550.671 365.751,550.671 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,400.704 365.751,400.704 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,250.737 365.751,250.737 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M298.909 1136.34 Q295.298 1136.34 293.469 1139.9 Q291.664 1143.45 291.664 1150.57 Q291.664 1157.68 293.469 1161.25 Q295.298 1164.79 298.909 1164.79 Q302.543 1164.79 304.349 1161.25 Q306.177 1157.68 306.177 1150.57 Q306.177 1143.45 304.349 1139.9 Q302.543 1136.34 298.909 1136.34 M298.909 1132.63 Q304.719 1132.63 307.775 1137.24 Q310.853 1141.82 310.853 1150.57 Q310.853 1159.3 307.775 1163.91 Q304.719 1168.49 298.909 1168.49 Q293.099 1168.49 290.02 1163.91 Q286.964 1159.3 286.964 1150.57 Q286.964 1141.82 290.02 1137.24 Q293.099 1132.63 298.909 1132.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M259.557 1013.92 L267.196 1013.92 L267.196 987.552 L258.886 989.219 L258.886 984.959 L267.15 983.293 L271.826 983.293 L271.826 1013.92 L279.465 1013.92 L279.465 1017.85 L259.557 1017.85 L259.557 1013.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 986.372 Q295.298 986.372 293.469 989.936 Q291.664 993.478 291.664 1000.61 Q291.664 1007.71 293.469 1011.28 Q295.298 1014.82 298.909 1014.82 Q302.543 1014.82 304.349 1011.28 Q306.177 1007.71 306.177 1000.61 Q306.177 993.478 304.349 989.936 Q302.543 986.372 298.909 986.372 M298.909 982.668 Q304.719 982.668 307.775 987.274 Q310.853 991.858 310.853 1000.61 Q310.853 1009.33 307.775 1013.94 Q304.719 1018.52 298.909 1018.52 Q293.099 1018.52 290.02 1013.94 Q286.964 1009.33 286.964 1000.61 Q286.964 991.858 290.02 987.274 Q293.099 982.668 298.909 982.668 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M262.775 863.95 L279.094 863.95 L279.094 867.886 L257.15 867.886 L257.15 863.95 Q259.812 861.196 264.395 856.566 Q269.002 851.914 270.182 850.571 Q272.428 848.048 273.307 846.312 Q274.21 844.552 274.21 842.863 Q274.21 840.108 272.266 838.372 Q270.344 836.636 267.242 836.636 Q265.043 836.636 262.59 837.4 Q260.159 838.164 257.381 839.714 L257.381 834.992 Q260.205 833.858 262.659 833.279 Q265.113 832.701 267.15 832.701 Q272.52 832.701 275.715 835.386 Q278.909 838.071 278.909 842.562 Q278.909 844.691 278.099 846.613 Q277.312 848.511 275.205 851.103 Q274.627 851.775 271.525 854.992 Q268.423 858.187 262.775 863.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 836.404 Q295.298 836.404 293.469 839.969 Q291.664 843.511 291.664 850.64 Q291.664 857.747 293.469 861.312 Q295.298 864.853 298.909 864.853 Q302.543 864.853 304.349 861.312 Q306.177 857.747 306.177 850.64 Q306.177 843.511 304.349 839.969 Q302.543 836.404 298.909 836.404 M298.909 832.701 Q304.719 832.701 307.775 837.307 Q310.853 841.89 310.853 850.64 Q310.853 859.367 307.775 863.974 Q304.719 868.557 298.909 868.557 Q293.099 868.557 290.02 863.974 Q286.964 859.367 286.964 850.64 Q286.964 841.89 290.02 837.307 Q293.099 832.701 298.909 832.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M272.914 699.284 Q276.27 700.002 278.145 702.27 Q280.043 704.539 280.043 707.872 Q280.043 712.988 276.525 715.789 Q273.006 718.59 266.525 718.59 Q264.349 718.59 262.034 718.15 Q259.742 717.733 257.289 716.877 L257.289 712.363 Q259.233 713.497 261.548 714.076 Q263.863 714.655 266.386 714.655 Q270.784 714.655 273.076 712.918 Q275.39 711.182 275.39 707.872 Q275.39 704.817 273.238 703.104 Q271.108 701.368 267.289 701.368 L263.261 701.368 L263.261 697.525 L267.474 697.525 Q270.923 697.525 272.752 696.159 Q274.58 694.77 274.58 692.178 Q274.58 689.516 272.682 688.104 Q270.807 686.669 267.289 686.669 Q265.367 686.669 263.168 687.085 Q260.969 687.502 258.33 688.382 L258.33 684.215 Q260.992 683.474 263.307 683.104 Q265.645 682.733 267.705 682.733 Q273.029 682.733 276.131 685.164 Q279.233 687.571 279.233 691.692 Q279.233 694.562 277.59 696.553 Q275.946 698.52 272.914 699.284 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 686.437 Q295.298 686.437 293.469 690.002 Q291.664 693.544 291.664 700.673 Q291.664 707.78 293.469 711.344 Q295.298 714.886 298.909 714.886 Q302.543 714.886 304.349 711.344 Q306.177 707.78 306.177 700.673 Q306.177 693.544 304.349 690.002 Q302.543 686.437 298.909 686.437 M298.909 682.733 Q304.719 682.733 307.775 687.34 Q310.853 691.923 310.853 700.673 Q310.853 709.4 307.775 714.006 Q304.719 718.59 298.909 718.59 Q293.099 718.59 290.02 714.006 Q286.964 709.4 286.964 700.673 Q286.964 691.923 290.02 687.34 Q293.099 682.733 298.909 682.733 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M271.594 537.465 L259.789 555.914 L271.594 555.914 L271.594 537.465 M270.367 533.391 L276.247 533.391 L276.247 555.914 L281.177 555.914 L281.177 559.803 L276.247 559.803 L276.247 567.951 L271.594 567.951 L271.594 559.803 L255.992 559.803 L255.992 555.289 L270.367 533.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 536.47 Q295.298 536.47 293.469 540.035 Q291.664 543.576 291.664 550.706 Q291.664 557.812 293.469 561.377 Q295.298 564.919 298.909 564.919 Q302.543 564.919 304.349 561.377 Q306.177 557.812 306.177 550.706 Q306.177 543.576 304.349 540.035 Q302.543 536.47 298.909 536.47 M298.909 532.766 Q304.719 532.766 307.775 537.373 Q310.853 541.956 310.853 550.706 Q310.853 559.433 307.775 564.039 Q304.719 568.623 298.909 568.623 Q293.099 568.623 290.02 564.039 Q286.964 559.433 286.964 550.706 Q286.964 541.956 290.02 537.373 Q293.099 532.766 298.909 532.766 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M258.793 383.424 L277.15 383.424 L277.15 387.359 L263.076 387.359 L263.076 395.831 Q264.094 395.484 265.113 395.322 Q266.131 395.137 267.15 395.137 Q272.937 395.137 276.316 398.308 Q279.696 401.48 279.696 406.896 Q279.696 412.475 276.224 415.577 Q272.752 418.655 266.432 418.655 Q264.256 418.655 261.988 418.285 Q259.742 417.915 257.335 417.174 L257.335 412.475 Q259.418 413.609 261.641 414.165 Q263.863 414.72 266.34 414.72 Q270.344 414.72 272.682 412.614 Q275.02 410.507 275.02 406.896 Q275.02 403.285 272.682 401.179 Q270.344 399.072 266.34 399.072 Q264.465 399.072 262.59 399.489 Q260.738 399.906 258.793 400.785 L258.793 383.424 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 386.503 Q295.298 386.503 293.469 390.068 Q291.664 393.609 291.664 400.739 Q291.664 407.845 293.469 411.41 Q295.298 414.952 298.909 414.952 Q302.543 414.952 304.349 411.41 Q306.177 407.845 306.177 400.739 Q306.177 393.609 304.349 390.068 Q302.543 386.503 298.909 386.503 M298.909 382.799 Q304.719 382.799 307.775 387.406 Q310.853 391.989 310.853 400.739 Q310.853 409.466 307.775 414.072 Q304.719 418.655 298.909 418.655 Q293.099 418.655 290.02 414.072 Q286.964 409.466 286.964 400.739 Q286.964 391.989 290.02 387.406 Q293.099 382.799 298.909 382.799 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M269.326 248.874 Q266.178 248.874 264.326 251.026 Q262.497 253.179 262.497 256.929 Q262.497 260.656 264.326 262.832 Q266.178 264.985 269.326 264.985 Q272.474 264.985 274.303 262.832 Q276.154 260.656 276.154 256.929 Q276.154 253.179 274.303 251.026 Q272.474 248.874 269.326 248.874 M278.608 234.221 L278.608 238.48 Q276.849 237.647 275.043 237.207 Q273.261 236.767 271.502 236.767 Q266.872 236.767 264.418 239.892 Q261.988 243.017 261.641 249.337 Q263.006 247.323 265.066 246.258 Q267.127 245.17 269.603 245.17 Q274.812 245.17 277.821 248.341 Q280.853 251.489 280.853 256.929 Q280.853 262.253 277.705 265.471 Q274.557 268.688 269.326 268.688 Q263.33 268.688 260.159 264.105 Q256.988 259.498 256.988 250.772 Q256.988 242.577 260.877 237.716 Q264.766 232.832 271.316 232.832 Q273.076 232.832 274.858 233.179 Q276.664 233.526 278.608 234.221 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 236.536 Q295.298 236.536 293.469 240.1 Q291.664 243.642 291.664 250.772 Q291.664 257.878 293.469 261.443 Q295.298 264.985 298.909 264.985 Q302.543 264.985 304.349 261.443 Q306.177 257.878 306.177 250.772 Q306.177 243.642 304.349 240.1 Q302.543 236.536 298.909 236.536 M298.909 232.832 Q304.719 232.832 307.775 237.438 Q310.853 242.022 310.853 250.772 Q310.853 259.498 307.775 264.105 Q304.719 268.688 298.909 268.688 Q293.099 268.688 290.02 264.105 Q286.964 259.498 286.964 250.772 Q286.964 242.022 290.02 237.438 Q293.099 232.832 298.909 232.832 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1040.04 400.199,938.524 400.786,845.38 401.372,760.044 401.958,681.997 402.545,610.758 403.131,648.548 403.718,584.66 404.304,613.439 404.891,557.629 405.477,505.928 406.063,459.227 406.65,417.2 407.236,379.546 407.823,347.265 408.409,317.45 408.995,291.213 409.582,269.539 410.168,249.698 410.755,232.773 411.341,219.895 411.927,250.728 412.514,239.95 413.1,267.931 413.687,258.734 414.273,251.647 414.86,247.13 415.446,244.608 416.032,243.326 416.619,243.179 417.205,267.882 417.792,271.055 418.378,275.006 418.964,279.664 419.551,303.913 420.137,311.182 420.724,334.564 421.31,342.631 421.896,365.633 422.483,388.088 423.069,398.298 423.656,420.245 424.242,443.16 424.829,465.466 425.415,477.373 426.001,507.714 426.588,519.647 427.174,532.482 427.761,544.594 428.347,556.81 428.933,576.971 429.52,602.9 430.106,621.317 430.693,638.88 431.279,650.308 431.865,667.485 432.452,684.292 433.038,705.389 433.625,735.54 434.211,749.644 434.798,767.876 435.384,777.303 435.97,786.898 436.557,800.574 437.143,813.994 437.73,830.784 438.316,839.576 438.902,847.76 439.489,863.367 440.075,875.15 440.662,882.709 441.248,896.664 441.835,903.787 442.421,917.21 443.007,932.833 443.594,941.889 444.18,948.281 444.767,957.214 445.353,968.555 445.939,979.45 446.526,990.111 447.112,998.178 447.699,1005.96 448.285,1018.41 448.871,1034.57 449.458,1043.25 450.044,1047.2 450.631,1055.55 451.217,1063.81 451.804,1067.62 452.39,1073.37 452.976,1085.12 453.563,1090.33 454.149,1095.26 454.736,1107.94 455.322,1111.79 455.908,1115.8 456.495,1119.6 457.081,1123.25 457.668,1128.94 458.254,1130.93 458.84,1136.49 459.427,1141.78 460.013,1148.55 460.6,1149.92 461.186,1156.36 461.773,1161.03 462.359,1163.99 462.945,1165.44 463.532,1169.96 464.118,1174.36 464.705,1178.75 465.291,1179.87 465.877,1180.97 466.464,1185.07 467.05,1185.78 467.637,1189.73 468.223,1190.37 468.809,1192.7 469.396,1193.12 469.982,1193.89 470.569,1195.86 471.155,1196.54 471.742,1198.84 472.328,1202.49 472.914,1203.01 473.501,1206.43 474.087,1206.66 474.674,1208.52 475.26,1208.93 475.846,1207.99 476.433,1208.39 477.019,1212.85 477.606,1217.44 478.192,1220.3 478.778,1218.82 479.365,1223.03 479.951,1224.2 480.538,1224.11 481.124,1223.92 481.711,1223.52 482.297,1223.29 482.883,1222 483.47,1223.57 484.056,1224.99 484.643,1224.53 485.229,1225.83 485.815,1227.07 486.402,1228.39 486.988,1229.48 487.575,1230.6 488.161,1230.56 488.748,1233.03 489.334,1235.41 489.92,1237.43 490.507,1239.55 491.093,1239.01 491.68,1242.44 492.266,1241.85 492.852,1243.72 493.439,1244.19 494.025,1243.43 494.612,1245.32 495.198,1244.12 495.784,1245.84 496.371,1243.85 496.957,1245.62 497.544,1247.43 498.13,1246.33 498.717,1245.35 499.303,1244.81 499.889,1241.48 500.476,1243.35 501.062,1244.09 501.649,1242.02 502.235,1243.79 502.821,1244.4 503.408,1242.26 503.994,1241.78 504.581,1243.72 505.167,1245.26 505.753,1242.88 506.34,1242.14 506.926,1242.76 507.513,1240.61 508.099,1238.96 508.686,1239.57 509.272,1238.8 509.858,1239.57 510.445,1246.67 511.031,1247.1 511.618,1247.24 512.204,1246.05 512.79,1248.98 513.377,1250.53 513.963,1249.44 514.55,1248.55 515.136,1247.61 515.722,1245.35 516.309,1245.66 516.895,1243.3 517.482,1242.59 518.068,1243.28 518.655,1238.82 519.241,1240.83 519.827,1242.87 520.414,1242.23 521,1240.32 521.587,1239.95 522.173,1239.31 522.759,1236.21 523.346,1236.07 523.932,1237.2 524.519,1238.01 525.105,1241.51 525.691,1240.9 526.278,1241.58 526.864,1239.86 527.451,1239.45 528.037,1239.15 528.624,1238.81 529.21,1239.88 529.796,1240.8 530.383,1240.19 530.969,1238.55 531.556,1238.08 532.142,1238.71 532.728,1242.11 533.315,1241.61 533.901,1243.53 534.488,1245.5 535.074,1246.18 535.661,1242.86 536.247,1245.76 536.833,1247.38 537.42,1248.84 538.006,1248.02 538.593,1247.11 539.179,1247.57 539.765,1245.48 540.352,1245.76 540.938,1246.24 541.525,1245.27 542.111,1242.08 542.697,1242.58 543.284,1243.22 543.87,1239.79 544.457,1239.21 545.043,1239.76 545.63,1239.36 546.216,1238.67 546.802,1239.35 547.389,1237.64 547.975,1238.55 548.562,1239.19 549.148,1238.61 549.734,1238.08 550.321,1237.44 550.907,1236 551.494,1235.66 552.08,1233.98 552.666,1235.1 553.253,1233.46 553.839,1234.39 554.426,1235.12 555.012,1235.05 555.599,1237.04 556.185,1235.49 556.771,1233.74 557.358,1235.84 557.944,1235.45 558.531,1236.18 559.117,1234.47 559.703,1235.29 560.29,1232.38 560.876,1233.54 561.463,1233.39 562.049,1235.71 562.635,1234.19 563.222,1232.56 563.808,1230.97 564.395,1232.2 564.981,1233.19 565.568,1232.81 566.154,1232.68 566.74,1234.76 567.327,1234.41 567.913,1234.15 568.5,1233.8 569.086,1233.56 569.672,1234.39 570.259,1232.76 570.845,1232.61 571.432,1233.51 572.018,1233.19 572.605,1232.93 573.191,1229.81 573.777,1228.11 574.364,1228.01 574.95,1229.19 575.537,1228.97 576.123,1228.62 576.709,1228.32 577.296,1229.26 577.882,1230.07 578.469,1231.18 579.055,1228.37 579.641,1230.81 580.228,1231.68 580.814,1228.87 581.401,1225.84 581.987,1225.68 582.574,1224.48 583.16,1225.62 583.746,1225.69 584.333,1225.6 584.919,1225.72 585.506,1226.82 586.092,1229.05 586.678,1226.37 587.265,1226.27 587.851,1227.13 588.438,1224.41 589.024,1224.3 589.61,1224.58 590.197,1223.5 590.783,1220.83 591.37,1222.28 591.956,1221.19 592.543,1222.63 593.129,1222.67 593.715,1224.14 594.302,1224.36 594.888,1224.27 595.475,1222.01 596.061,1224.9 596.647,1227.31 597.234,1228.57 597.82,1227.01 598.407,1228.06 598.993,1229.08 599.579,1229.61 600.166,1230.33 600.752,1231.3 601.339,1233.44 601.925,1232.78 602.512,1232.46 603.098,1231.9 603.684,1232.47 604.271,1233.16 604.857,1231.4 605.444,1233.33 606.03,1234.19 606.616,1231.25 607.203,1230.63 607.789,1232.57 608.376,1233.22 608.962,1235.13 609.548,1234.4 610.135,1233.65 610.721,1232.89 611.308,1227.54 611.894,1223.49 612.481,1224.62 613.067,1224.45 613.653,1226.61 614.24,1224.81 614.826,1227.81 615.413,1229.98 615.999,1228.38 616.585,1229.1 617.172,1227.46 617.758,1224.78 618.345,1227.07 618.931,1226.76 619.518,1229.85 620.104,1229.55 620.69,1232.71 621.277,1233.23 621.863,1233.85 622.45,1230.97 623.036,1230.43 623.622,1233.61 624.209,1231.67 624.795,1231.08 625.382,1227.83 625.968,1229.6 626.554,1230.45 627.141,1230.97 627.727,1227.97 628.314,1231.22 628.9,1229.25 629.487,1223.87 630.073,1226.32 630.659,1222.42 631.246,1221.17 631.832,1223.61 632.419,1223.38 633.005,1223.18 633.591,1224.18 634.178,1222.73 634.764,1223.89 635.351,1228.41 635.937,1230.7 636.523,1233.59 637.11,1230.29 637.696,1227.16 638.283,1227.83 638.869,1230.09 639.456,1228.76 640.042,1229.48 640.628,1232.72 641.215,1231.8 641.801,1232.24 642.388,1230.3 642.974,1228.58 643.56,1230.41 644.147,1228.43 644.733,1229.2 645.32,1227.56 645.906,1224.63 646.492,1222.03 647.079,1224.07 647.665,1221.47 648.252,1221.42 648.838,1223.84 649.425,1224.89 650.011,1224.92 650.597,1228.19 651.184,1226.41 651.77,1227.25 652.357,1226.58 652.943,1225.01 653.529,1226.81 654.116,1225.1 654.702,1223.5 655.289,1223.03 655.875,1223.85 656.462,1223.58 657.048,1225.75 657.634,1223.99 658.221,1226.09 658.807,1226.89 659.394,1225.03 659.98,1224.68 660.566,1224.33 661.153,1221.47 661.739,1222.71 662.326,1223.42 662.912,1224.51 663.498,1225.59 664.085,1223.96 664.671,1222.15 665.258,1225.47 665.844,1226.48 666.431,1224.84 667.017,1221.87 667.603,1223.84 668.19,1222.18 668.776,1220.73 669.363,1220.39 669.949,1220.31 670.535,1225.19 671.122,1223.5 671.708,1221.81 672.295,1222.52 672.881,1224.83 673.467,1224.42 674.054,1222.99 674.64,1222.63 675.227,1219.96 675.813,1218.42 676.4,1213.3 676.986,1213.34 677.572,1208.52 678.159,1209.23 678.745,1208.19 679.332,1209.72 679.918,1210.26 680.504,1207.97 681.091,1209.67 681.677,1208.79 682.264,1207.99 682.85,1212.24 683.436,1213.51 684.023,1211.32 684.609,1211.91 685.196,1212.15 685.782,1214.8 686.369,1213.68 686.955,1211.51 687.541,1212.85 688.128,1213.37 688.714,1213.84 689.301,1215.02 689.887,1215.28 690.473,1215.36 691.06,1215.25 691.646,1214.43 692.233,1215.74 692.819,1214.56 693.405,1216.91 693.992,1215.58 694.578,1216.87 695.165,1214.5 695.751,1212.19 696.338,1211.04 696.924,1210.19 697.51,1210.27 698.097,1211.79 698.683,1210.87 699.27,1212.17 699.856,1213.39 700.442,1213.3 701.029,1215.98 701.615,1214.96 702.202,1215.2 702.788,1216.43 703.375,1216.57 703.961,1212.78 704.547,1210.32 705.134,1213.14 705.72,1211.08 706.307,1211.31 706.893,1212.83 707.479,1212.94 708.066,1211.99 708.652,1210.87 709.239,1212.49 709.825,1213.51 710.411,1213.56 710.998,1214.78 711.584,1216.04 712.171,1213.42 712.757,1214.89 713.344,1219.7 713.93,1220.66 714.516,1223.99 715.103,1220.89 715.689,1224.34 716.276,1224.01 716.862,1222.48 717.448,1223.35 718.035,1220.48 718.621,1219.1 719.208,1218.92 719.794,1220.88 720.38,1218.18 720.967,1219.11 721.553,1219.05 722.14,1217.47 722.726,1218.56 723.313,1220.86 723.899,1221.96 724.485,1221.38 725.072,1214.99 725.658,1213.84 726.245,1212.78 726.831,1215.55 727.417,1215.39 728.004,1213.01 728.59,1213.11 729.177,1213.23 729.763,1213.38 730.349,1212.43 730.936,1211.34 731.522,1210.37 732.109,1209.36 732.695,1209.59 733.282,1213.54 733.868,1213.78 734.454,1212.64 735.041,1215.42 735.627,1214.12 736.214,1215.55 736.8,1218.16 737.386,1216.54 737.973,1221.27 738.559,1221.1 739.146,1219.74 739.732,1220.85 740.318,1219.34 740.905,1217.65 741.491,1218.81 742.078,1220.14 742.664,1219.76 743.251,1216.9 743.837,1216.78 744.423,1215.61 745.01,1215.78 745.596,1216.03 746.183,1215.84 746.769,1216.01 747.355,1219.52 747.942,1219.34 748.528,1220.51 749.115,1218.84 749.701,1217.46 750.288,1217.46 750.874,1217.34 751.46,1218.32 752.047,1219.39 752.633,1219.25 753.22,1220.24 753.806,1218.54 754.392,1217.03 754.979,1216.88 755.565,1218.05 756.152,1216.78 756.738,1217.8 757.324,1219.08 757.911,1216.34 758.497,1215.09 759.084,1215.07 759.67,1213.88 760.257,1213.79 760.843,1215.1 761.429,1214.9 762.016,1215.94 762.602,1216.92 763.189,1219.37 763.775,1216.92 764.361,1214.38 764.948,1215.63 765.534,1216.79 766.121,1214.28 766.707,1215.2 767.293,1217.47 767.88,1216.19 768.466,1214.8 769.053,1215.79 769.639,1217.77 770.226,1222.34 770.812,1224.1 771.398,1223.47 771.985,1221.84 772.571,1220.16 773.158,1218.55 773.744,1217.05 774.33,1214.34 774.917,1214.04 775.503,1213.93 776.09,1212.56 776.676,1213.8 777.262,1215.18 777.849,1216.28 778.435,1218.52 779.022,1218.27 779.608,1219.28 780.195,1218.92 780.781,1216.17 781.367,1216.19 781.954,1212.38 782.54,1212.73 783.127,1215.56 783.713,1214.16 784.299,1214.21 784.886,1214.26 785.472,1214.15 786.059,1214.07 786.645,1214.03 787.232,1215.12 787.818,1211.39 788.404,1209.09 788.991,1206.78 789.577,1207.15 790.164,1208.66 790.75,1208.96 791.336,1207.81 791.923,1210.6 792.509,1211.97 793.096,1212.13 793.682,1212.27 794.268,1212.45 794.855,1215.02 795.441,1216.11 796.028,1216.01 796.614,1213.48 797.201,1213.26 797.787,1215.62 798.373,1215.58 798.96,1210.75 799.546,1212.36 800.133,1212.45 800.719,1209.98 801.305,1210.27 801.892,1210.59 802.478,1208.07 803.065,1208.26 803.651,1208.71 804.237,1210.33 804.824,1211.8 805.41,1209.49 805.997,1209.72 806.583,1210.18 807.17,1210.37 807.756,1210.7 808.342,1210.87 808.929,1209.73 809.515,1209.79 810.102,1207.69 810.688,1209.27 811.274,1211.88 811.861,1211.96 812.447,1213.09 813.034,1211.94 813.62,1210.59 814.206,1209.42 814.793,1210.79 815.379,1209.69 815.966,1208.94 816.552,1206.79 817.139,1208.31 817.725,1208.64 818.311,1209.79 818.898,1207.62 819.484,1206.84 820.071,1207.1 820.657,1208.35 821.243,1207.54 821.83,1207.01 822.416,1208.68 823.003,1208.88 823.589,1210.22 824.175,1214.02 824.762,1212.76 825.348,1212.97 825.935,1212.63 826.521,1210.16 827.108,1210.36 827.694,1210.69 828.28,1211.04 828.867,1210.14 829.453,1211.84 830.04,1215.49 830.626,1214.09 831.212,1214.04 831.799,1212.71 832.385,1213.95 832.972,1212.96 833.558,1212.96 834.145,1212.86 834.731,1211.55 835.317,1210.29 835.904,1211.49 836.49,1210.35 837.077,1210.54 837.663,1210.72 838.249,1211.06 838.836,1209.99 839.422,1211.43 840.009,1213.92 840.595,1213.82 841.181,1215.81 841.768,1216.72 842.354,1220.03 842.941,1220.98 843.527,1222.81 844.114,1222.29 844.7,1221.89 845.286,1220.04 845.873,1219.77 846.459,1219.39 847.046,1221.04 847.632,1221.78 848.218,1220.27 848.805,1219.74 849.391,1219.37 849.978,1220.09 850.564,1220.79 851.15,1221.46 851.737,1218.57 852.323,1219.6 852.91,1218.09 853.496,1220.5 854.083,1218.97 854.669,1218.48 855.255,1219.43 855.842,1218.89 856.428,1219.65 857.015,1219.35 857.601,1219.15 858.187,1217.64 858.774,1217.12 859.36,1218.03 859.947,1218.77 860.533,1219.45 861.119,1219.12 861.706,1219.86 862.292,1220.75 862.879,1220.59 863.465,1217.91 864.052,1220.01 864.638,1219.49 865.224,1219.06 865.811,1218.65 866.397,1218.16 866.984,1215.49 867.57,1214.2 868.156,1214.23 868.743,1213.07 869.329,1213.24 869.916,1212.15 870.502,1215.86 871.089,1213.16 871.675,1214.39 872.261,1216.69 872.848,1215.2 873.434,1216.17 874.021,1214.62 874.607,1213.28 875.193,1211.96 875.78,1213.11 876.366,1215.57 876.953,1214.24 877.539,1212.82 878.125,1212.67 878.712,1216.25 879.298,1215.98 879.885,1214.51 880.471,1213.18 881.058,1210.74 881.644,1212.05 882.23,1213.52 882.817,1211.08 883.403,1209.87 883.99,1207.73 884.576,1207.96 885.162,1206.95 885.749,1206.15 886.335,1205.32 886.922,1206.8 887.508,1207.05 888.094,1209.9 888.681,1212.55 889.267,1213.69 889.854,1214.78 890.44,1212.21 891.027,1217.27 891.613,1218.09 892.199,1215.29 892.786,1216.39 893.372,1216.11 893.959,1215.85 894.545,1215.81 895.131,1215.74 895.718,1213.14 896.304,1213.08 896.891,1214.02 897.477,1212.48 898.063,1212.44 898.65,1209.97 899.236,1208.87 899.823,1210.22 900.409,1210.52 900.996,1211.85 901.582,1211.83 902.168,1213.19 902.755,1213.34 903.341,1211.06 903.928,1212.53 904.514,1210.04 905.1,1207.61 905.687,1205.25 906.273,1206.6 906.86,1207.95 907.446,1205.79 908.032,1207.55 908.619,1209.09 909.205,1206.69 909.792,1208.45 910.378,1208.74 910.965,1211.44 911.551,1212.57 912.137,1211.77 912.724,1214.29 913.31,1215.58 913.897,1214.09 914.483,1216.36 915.069,1213.78 915.656,1212.57 916.242,1212.43 916.829,1212.44 917.415,1212.19 918.002,1212.21 918.588,1213.46 919.174,1217.07 919.761,1215.83 920.347,1214.54 920.934,1214.6 921.52,1214.26 922.106,1215.34 922.693,1214.1 923.279,1216.38 923.866,1214.86 924.452,1214.65 925.038,1213.33 925.625,1213.1 926.211,1209.47 926.798,1211.21 927.384,1211.16 927.971,1212.55 928.557,1214.98 929.143,1216.27 929.73,1215.94 930.316,1213.1 930.903,1214.35 931.489,1214.03 932.075,1214.18 932.662,1215.14 933.248,1212.7 933.835,1210.54 934.421,1210.66 935.007,1210.65 935.594,1209.41 936.18,1210.66 936.767,1209.7 937.353,1212.41 937.94,1213.87 938.526,1215.17 939.112,1214.78 939.699,1213.36 940.285,1214.48 940.872,1214.42 941.458,1213 942.044,1211.6 942.631,1211.64 943.217,1210.32 943.804,1210.15 944.39,1205.14 944.976,1205.61 945.563,1208.25 946.149,1211.03 946.736,1212 947.322,1210.8 947.909,1212.13 948.495,1210.79 949.081,1209.65 949.668,1208.47 950.254,1209.91 950.841,1208.71 951.427,1209.77 952.013,1212.58 952.6,1212.67 953.186,1211.33 953.773,1213.69 954.359,1215.92 954.945,1214.8 955.532,1213.43 956.118,1213.24 956.705,1214.5 957.291,1210.54 957.878,1211.68 958.464,1211.73 959.05,1211.68 959.637,1217.93 960.223,1217.71 960.81,1217.57 961.396,1216.03 961.982,1216.07 962.569,1216.19 963.155,1214.73 963.742,1213.43 964.328,1213.32 964.915,1214.28 965.501,1215.31 966.087,1212.5 966.674,1214.85 967.26,1213.49 967.847,1213.55 968.433,1213.33 969.019,1213.45 969.606,1215.7 970.192,1215.51 970.779,1215.29 971.365,1215.08 971.951,1213.81 972.538,1213.72 973.124,1213.35 973.711,1213.31 974.297,1212.18 974.884,1211.15 975.47,1209.95 976.056,1210.06 976.643,1212.48 977.229,1211.82 977.816,1211.74 978.402,1212.71 978.988,1213.59 979.575,1212.19 980.161,1209.8 980.748,1211.04 981.334,1212.45 981.92,1212.77 982.507,1212.99 983.093,1213.04 983.68,1211.6 984.266,1211.69 984.853,1214.2 985.439,1212.71 986.025,1212.6 986.612,1215.98 987.198,1215.83 987.785,1216.88 988.371,1215.18 988.957,1215.17 989.544,1214.95 990.13,1212.39 990.717,1213.74 991.303,1214.85 991.889,1218.51 992.476,1218.19 993.062,1220.38 993.649,1219.71 994.235,1220.35 994.822,1218.89 995.408,1220.84 995.994,1219.11 996.581,1223.6 997.167,1219.19 997.754,1217.63 998.34,1218.21 998.926,1220.48 999.513,1218.84 1000.1,1217.18 1000.69,1217.95 1001.27,1217.57 1001.86,1215.85 1002.44,1217 1003.03,1217.72 1003.62,1217.45 1004.2,1215.68 1004.79,1210.62 1005.38,1211.83 1005.96,1211.95 1006.55,1213.02 1007.14,1213.95 1007.72,1211.48 1008.31,1212.46 1008.9,1213.49 1009.48,1214.4 1010.07,1211.7 1010.65,1210.44 1011.24,1209.1 1011.83,1205.36 1012.41,1206.93 1013,1208.48 1013.59,1209.74 1014.17,1212.07 1014.76,1211.74 1015.35,1211.72 1015.93,1212.78 1016.52,1211.32 1017.11,1207.42 1017.69,1208.93 1018.28,1209.29 1018.86,1210.83 1019.45,1209.52 1020.04,1209.56 1020.62,1206.02 1021.21,1205.11 1021.8,1205.52 1022.38,1204.45 1022.97,1203.74 1023.56,1202.86 1024.14,1205.99 1024.73,1206.26 1025.32,1206.49 1025.9,1207.7 1026.49,1207.71 1027.07,1210.46 1027.66,1210.68 1028.25,1211.7 1028.83,1213.93 1029.42,1218.63 1030.01,1217.18 1030.59,1219.43 1031.18,1220.31 1031.77,1216.18 1032.35,1217.28 1032.94,1218.13 1033.52,1216.71 1034.11,1216.53 1034.7,1217.47 1035.28,1220.91 1035.87,1220.28 1036.46,1219.94 1037.04,1220.71 1037.63,1220.16 1038.22,1218.65 1038.8,1216.73 1039.39,1217.77 1039.98,1212.4 1040.56,1211.33 1041.15,1210.06 1041.73,1209.08 1042.32,1210.35 1042.91,1208.08 1043.49,1208.16 1044.08,1208.46 1044.67,1207.32 1045.25,1206.43 1045.84,1209.03 1046.43,1208.13 1047.01,1210.87 1047.6,1209.63 1048.19,1208.53 1048.77,1207.4 1049.36,1207.58 1049.94,1207.8 1050.53,1207.97 1051.12,1209.34 1051.7,1208.27 1052.29,1208.27 1052.88,1208.43 1053.46,1207.58 1054.05,1208.93 1054.64,1209.05 1055.22,1210.36 1055.81,1214.1 1056.39,1217.54 1056.98,1218.42 1057.57,1218.02 1058.15,1219.02 1058.74,1221.2 1059.33,1219.6 1059.91,1221.61 1060.5,1220.98 1061.09,1219.06 1061.67,1216.15 1062.26,1217.45 1062.85,1214.69 1063.43,1214.61 1064.02,1214.32 1064.6,1212.82 1065.19,1212.76 1065.78,1211.63 1066.36,1214 1066.95,1215.05 1067.54,1212.48 1068.12,1213.68 1068.71,1208.61 1069.3,1207.51 1069.88,1205.33 1070.47,1208.11 1071.06,1208.23 1071.64,1207.06 1072.23,1206.09 1072.81,1205.18 1073.4,1205.61 1073.99,1204.71 1074.57,1207.43 1075.16,1207.77 1075.75,1208.15 1076.33,1205.64 1076.92,1208.5 1077.51,1208.69 1078.09,1208.97 1078.68,1210.3 1079.26,1209.2 1079.85,1209.34 1080.44,1210.86 1081.02,1209.84 1081.61,1208.49 1082.2,1207.57 1082.78,1207.92 1083.37,1206.75 1083.96,1208.24 1084.54,1209.67 1085.13,1208.36 1085.72,1208.44 1086.3,1210.98 1086.89,1211.05 1087.47,1209.85 1088.06,1212.59 1088.65,1209.98 1089.23,1209.95 1089.82,1212.19 1090.41,1212.17 1090.99,1212.25 1091.58,1211.17 1092.17,1211.22 1092.75,1211.19 1093.34,1211.29 1093.93,1213.67 1094.51,1214.75 1095.1,1212.32 1095.68,1213.5 1096.27,1213.43 1096.86,1213.34 1097.44,1212.09 1098.03,1211.96 1098.62,1210.82 1099.2,1213.12 1099.79,1214.39 1100.38,1214.42 1100.96,1215.68 1101.55,1212.99 1102.14,1211.64 1102.72,1210.21 1103.31,1211.57 1103.89,1212.74 1104.48,1212.8 1105.07,1211.68 1105.65,1210.37 1106.24,1209.02 1106.83,1209.25 1107.41,1209.38 1108,1213.25 1108.59,1214.43 1109.17,1214.36 1109.76,1215.53 1110.34,1215.25 1110.93,1216.18 1111.52,1216.92 1112.1,1217.72 1112.69,1217.13 1113.28,1215.57 1113.86,1216.48 1114.45,1218.47 1115.04,1216.73 1115.62,1213.92 1116.21,1211.2 1116.8,1212.44 1117.38,1212.66 1117.97,1211.39 1118.55,1214.94 1119.14,1213.47 1119.73,1213.44 1120.31,1213.33 1120.9,1208.31 1121.49,1208.4 1122.07,1207.15 1122.66,1204.88 1123.25,1206.42 1123.83,1205.33 1124.42,1204.55 1125.01,1204.82 1125.59,1207.53 1126.18,1205.04 1126.76,1204.25 1127.35,1204.65 1127.94,1204.7 1128.52,1206.22 1129.11,1206.45 1129.7,1206.74 1130.28,1203.29 1130.87,1201.22 1131.46,1202.2 1132.04,1202.53 1132.63,1201.79 1133.21,1202.37 1133.8,1203.04 1134.39,1199.92 1134.97,1199.46 1135.56,1201.58 1136.15,1203.37 1136.73,1205.06 1137.32,1207.6 1137.91,1208.92 1138.49,1209.43 1139.08,1208.33 1139.67,1212.14 1140.25,1209.75 1140.84,1212.4 1141.42,1212.28 1142.01,1209.87 1142.6,1208.58 1143.18,1207.7 1143.77,1211.47 1144.36,1212.46 1144.94,1211.18 1145.53,1212.29 1146.12,1213.19 1146.7,1213.22 1147.29,1212.11 1147.88,1210.77 1148.46,1209.24 1149.05,1211.88 1149.63,1211.81 1150.22,1210.62 1150.81,1208.15 1151.39,1208.19 1151.98,1210.95 1152.57,1212.2 1153.15,1210.88 1153.74,1210.94 1154.33,1210.94 1154.91,1210.82 1155.5,1212.23 1156.09,1210.75 1156.67,1211.76 1157.26,1209.07 1157.84,1210.2 1158.43,1209.04 1159.02,1209.05 1159.6,1211.42 1160.19,1211.54 1160.78,1211.52 1161.36,1211.73 1161.95,1211.69 1162.54,1211.83 1163.12,1210.49 1163.71,1210.65 1164.29,1209.23 1164.88,1209.32 1165.47,1209.28 1166.05,1212.02 1166.64,1213.59 1167.23,1214.51 1167.81,1213.24 1168.4,1213.35 1168.99,1214.22 1169.57,1215.49 1170.16,1214.25 1170.75,1216.72 1171.33,1215.32 1171.92,1214.88 1172.5,1214.42 1173.09,1212.86 1173.68,1212.89 1174.26,1213.83 1174.85,1213.68 1175.44,1210.07 1176.02,1211.45 1176.61,1211.13 1177.2,1211.27 1177.78,1211.09 1178.37,1213.71 1178.96,1213.39 1179.54,1212.16 1180.13,1210.75 1180.71,1207.33 1181.3,1206.62 1181.89,1206.92 1182.47,1210.75 1183.06,1209.47 1183.65,1209.5 1184.23,1208.36 1184.82,1207.19 1185.41,1206.08 1185.99,1207.6 1186.58,1205.47 1187.16,1205.94 1187.75,1205.15 1188.34,1205.57 1188.92,1205.91 1189.51,1207.56 1190.1,1206.62 1190.68,1205.52 1191.27,1204.42 1191.86,1204.87 1192.44,1207.59 1193.03,1207.82 1193.62,1205.76 1194.2,1209.64 1194.79,1209.66 1195.37,1209.73 1195.96,1207.33 1196.55,1208.46 1197.13,1208.57 1197.72,1210.93 1198.31,1213.62 1198.89,1213.55 1199.48,1214.64 1200.07,1214.65 1200.65,1214.65 1201.24,1214.54 1201.83,1214.45 1202.41,1210.31 1203,1210.67 1203.58,1210.68 1204.17,1208.29 1204.76,1212.01 1205.34,1210.66 1205.93,1210.45 1206.52,1210.59 1207.1,1207.82 1207.69,1206.98 1208.28,1208.4 1208.86,1210.95 1209.45,1213.45 1210.03,1213.21 1210.62,1212 1211.21,1211.82 1211.79,1211.66 1212.38,1211.61 1212.97,1214.19 1213.55,1216.26 1214.14,1216.04 1214.73,1214.63 1215.31,1215.64 1215.9,1216.88 1216.49,1215.26 1217.07,1213.65 1217.66,1212.28 1218.24,1213.41 1218.83,1215.68 1219.42,1216.86 1220,1216.61 1220.59,1217.39 1221.18,1218.36 1221.76,1217.05 1222.35,1214.38 1222.94,1216.32 1223.52,1216.09 1224.11,1213.4 1224.7,1214.43 1225.28,1214.03 1225.87,1214.03 1226.45,1211.66 1227.04,1210.35 1227.63,1210.58 1228.21,1214.17 1228.8,1215.1 1229.39,1215.08 1229.97,1214.76 1230.56,1214.78 1231.15,1215.51 1231.73,1214.04 1232.32,1214.8 1232.91,1213.51 1233.49,1213.67 1234.08,1212.39 1234.66,1211.24 1235.25,1210.04 1235.84,1210.24 1236.42,1206.7 1237.01,1203.43 1237.6,1202.98 1238.18,1205.84 1238.77,1206.08 1239.36,1207.7 1239.94,1206.84 1240.53,1205.54 1241.11,1204.46 1241.7,1205.99 1242.29,1206.47 1242.87,1206.71 1243.46,1208.18 1244.05,1205.85 1244.63,1204.88 1245.22,1205.25 1245.81,1204.39 1246.39,1203.34 1246.98,1203.69 1247.57,1202.6 1248.15,1203.13 1248.74,1204.81 1249.32,1205.11 1249.91,1205.12 1250.5,1206.46 1251.08,1205.53 1251.67,1209.32 1252.26,1210.22 1252.84,1208.85 1253.43,1208.9 1254.02,1207.97 1254.6,1209.31 1255.19,1206.94 1255.78,1207.14 1256.36,1204.89 1256.95,1205.02 1257.53,1208.91 1258.12,1209.28 1258.71,1208.06 1259.29,1209.64 1259.88,1212.28 1260.47,1213.49 1261.05,1214.56 1261.64,1214.35 1262.23,1211.59 1262.81,1211.54 1263.4,1210.51 1263.98,1211.79 1264.57,1210.65 1265.16,1209.36 1265.74,1208.55 1266.33,1206.21 1266.92,1207.64 1267.5,1206.84 1268.09,1205.93 1268.68,1206.36 1269.26,1208.77 1269.85,1205.32 1270.44,1204.35 1271.02,1204.63 1271.61,1206.37 1272.19,1210.29 1272.78,1209.26 1273.37,1210.57 1273.95,1210.76 1274.54,1213.34 1275.13,1213.04 1275.71,1210.48 1276.3,1213.06 1276.89,1214.17 1277.47,1210.21 1278.06,1213.78 1278.65,1214.95 1279.23,1215.83 1279.82,1216.68 1280.4,1215.35 1280.99,1214.1 1281.58,1213.89 1282.16,1214.97 1282.75,1216.11 1283.34,1213.04 1283.92,1210.42 1284.51,1209.35 1285.1,1209.35 1285.68,1206.97 1286.27,1204.84 1286.86,1205.21 1287.44,1205.54 1288.03,1203.43 1288.61,1205.21 1289.2,1205.48 1289.79,1205.98 1290.37,1205.06 1290.96,1205.51 1291.55,1206.77 1292.13,1205.95 1292.72,1206.05 1293.31,1206.67 1293.89,1209.47 1294.48,1210.74 1295.06,1214.26 1295.65,1213.09 1296.24,1215.35 1296.82,1215.21 1297.41,1213.97 1298,1214.77 1298.58,1216.77 1299.17,1216.53 1299.76,1217.68 1300.34,1217.57 1300.93,1217.38 1301.52,1214.77 1302.1,1212.04 1302.69,1215.63 1303.27,1214.39 1303.86,1215.58 1304.45,1215.27 1305.03,1215.03 1305.62,1213.45 1306.21,1213.08 1306.79,1208.06 1307.38,1205.65 1307.97,1205.94 1308.55,1207.39 1309.14,1209.74 1309.73,1209.7 1310.31,1207.4 1310.9,1207.57 1311.48,1208.06 1312.07,1207.05 1312.66,1205.88 1313.24,1206.11 1313.83,1206.26 1314.42,1208.75 1315,1208.9 1315.59,1208.92 1316.18,1208.95 1316.76,1210.24 1317.35,1210.26 1317.93,1209.25 1318.52,1212.78 1319.11,1216.37 1319.69,1215 1320.28,1213.54 1320.87,1208.55 1321.45,1208.56 1322.04,1211.29 1322.63,1211.29 1323.21,1212.73 1323.8,1212.42 1324.39,1211 1324.97,1209.87 1325.56,1211.14 1326.14,1210 1326.73,1211.26 1327.32,1215.09 1327.9,1213.58 1328.49,1216.01 1329.08,1215.96 1329.66,1216.72 1330.25,1215.09 1330.84,1216.25 1331.42,1213.51 1332.01,1212.04 1332.6,1213.2 1333.18,1214.43 1333.77,1212.89 1334.35,1211.6 1334.94,1211.34 1335.53,1213.97 1336.11,1213.62 1336.7,1213.43 1337.29,1213.45 1337.87,1214.69 1338.46,1213.31 1339.05,1208.07 1339.63,1208.21 1340.22,1204.51 1340.8,1204.84 1341.39,1205.12 1341.98,1206.46 1342.56,1204.26 1343.15,1204.66 1343.74,1208.52 1344.32,1205.16 1344.91,1206.79 1345.5,1206.03 1346.08,1206.43 1346.67,1205.37 1347.26,1206.75 1347.84,1206.89 1348.43,1205.74 1349.01,1207.33 1349.6,1212.29 1350.19,1214.27 1350.77,1212.89 1351.36,1212.8 1351.95,1210.49 1352.53,1212.91 1353.12,1214.18 1353.71,1214.12 1354.29,1213.91 1354.88,1217.4 1355.47,1219.45 1356.05,1219.11 1356.64,1218.89 1357.22,1218.55 1357.81,1219.48 1358.4,1218.04 1358.98,1218.84 1359.57,1216.01 1360.16,1215.55 1360.74,1215.31 1361.33,1214.89 1361.92,1214.91 1362.5,1218.11 1363.09,1218.96 1363.68,1218.51 1364.26,1216.91 1364.85,1216.57 1365.43,1217.48 1366.02,1217.01 1366.61,1217.8 1367.19,1216.35 1367.78,1218.5 1368.37,1215.59 1368.95,1215.29 1369.54,1216.24 1370.13,1218.34 1370.71,1217.82 1371.3,1217.71 1371.88,1216.26 1372.47,1215.73 1373.06,1212.77 1373.64,1211.28 1374.23,1211.4 1374.82,1211.43 1375.4,1212.89 1375.99,1210.33 1376.58,1211.69 1377.16,1212.8 1377.75,1212.62 1378.34,1210.13 1378.92,1207.82 1379.51,1209.39 1380.09,1208.29 1380.68,1207.41 1381.27,1208.62 1381.85,1209.76 1382.44,1209.8 1383.03,1207.01 1383.61,1203.48 1384.2,1205.02 1384.79,1205.63 1385.37,1202.07 1385.96,1202.53 1386.55,1202.89 1387.13,1209.4 1387.72,1210.56 1388.3,1211.71 1388.89,1211.44 1389.48,1211.42 1390.06,1211.45 1390.65,1211.58 1391.24,1215.25 1391.82,1215.09 1392.41,1216.97 1393,1216.66 1393.58,1216.46 1394.17,1213.79 1394.75,1214.8 1395.34,1212.19 1395.93,1212.03 1396.51,1213.14 1397.1,1211.92 1397.69,1210.82 1398.27,1209.81 1398.86,1212.13 1399.45,1214.72 1400.03,1213.34 1400.62,1212.03 1401.21,1209.79 1401.79,1208.49 1402.38,1208.87 1402.96,1208.97 1403.55,1208.02 1404.14,1209.69 1404.72,1208.37 1405.31,1208.43 1405.9,1209.58 1406.48,1209.46 1407.07,1210.88 1407.66,1213.27 1408.24,1212.67 1408.83,1210.06 1409.42,1209.95 1410,1210.06 1410.59,1211.37 1411.17,1211.45 1411.76,1210.37 1412.35,1210.61 1412.93,1209.52 1413.52,1208.44 1414.11,1208.63 1414.69,1207.31 1415.28,1207.55 1415.87,1210.1 1416.45,1212.44 1417.04,1211.43 1417.63,1209.96 1418.21,1208.69 1418.8,1208.78 1419.38,1210.12 1419.97,1211.39 1420.56,1212.59 1421.14,1211.46 1421.73,1213.96 1422.32,1213.82 1422.9,1213.76 1423.49,1211.16 1424.08,1209.87 1424.66,1210.25 1425.25,1213.96 1425.83,1216.3 1426.42,1217.35 1427.01,1218.14 1427.59,1216.45 1428.18,1216.16 1428.77,1215.74 1429.35,1215.49 1429.94,1213.95 1430.53,1211.29 1431.11,1211.34 1431.7,1212.43 1432.29,1212.34 1432.87,1212.36 1433.46,1211.2 1434.04,1210.07 1434.63,1210.04 1435.22,1211.42 1435.8,1210.27 1436.39,1207.85 1436.98,1207.92 1437.56,1205.45 1438.15,1204.54 1438.74,1204.84 1439.32,1205.07 1439.91,1206.35 1440.5,1207.93 1441.08,1205.56 1441.67,1206.02 1442.25,1208.66 1442.84,1208.81 1443.43,1205.17 1444.01,1208.08 1444.6,1210.56 1445.19,1211.83 1445.77,1212.81 1446.36,1210.21 1446.95,1208.92 1447.53,1210.2 1448.12,1210.42 1448.7,1210.64 1449.29,1209.8 1449.88,1208.62 1450.46,1210.15 1451.05,1208.87 1451.64,1209.16 1452.22,1206.89 1452.81,1205.93 1453.4,1206.15 1453.98,1210.07 1454.57,1210.46 1455.16,1211.73 1455.74,1210.52 1456.33,1212.89 1456.91,1213.92 1457.5,1209.91 1458.09,1211.02 1458.67,1209.69 1459.26,1207.18 1459.85,1208.75 1460.43,1210.04 1461.02,1212.49 1461.61,1212.4 1462.19,1213.31 1462.78,1215.39 1463.37,1213.85 1463.95,1208.71 1464.54,1209.07 1465.12,1211.62 1465.71,1212.74 1466.3,1213.53 1466.88,1213.5 1467.47,1216.11 1468.06,1216.08 1468.64,1214.84 1469.23,1213.45 1469.82,1214.77 1470.4,1213.23 1470.99,1213.28 1471.57,1217 1472.16,1215.53 1472.75,1216.74 1473.33,1218.73 1473.92,1217.04 1474.51,1216.82 1475.09,1219.26 1475.68,1216.35 1476.27,1214.79 1476.85,1213.29 1477.44,1213.03 1478.03,1214.04 1478.61,1213.38 1479.2,1213.06 1479.78,1210.56 1480.37,1209.2 1480.96,1210.84 1481.54,1213.26 1482.13,1211.83 1482.72,1212.02 1483.3,1213.22 1483.89,1213.2 1484.48,1213.28 1485.06,1211.58 1485.65,1213.82 1486.24,1214.84 1486.82,1214.71 1487.41,1214.58 1487.99,1216.63 1488.58,1214.9 1489.17,1214.43 1489.75,1215.59 1490.34,1212.84 1490.93,1212.75 1491.51,1211.3 1492.1,1209.99 1492.69,1211.42 1493.27,1213.82 1493.86,1214.74 1494.45,1213.45 1495.03,1213.3 1495.62,1211.94 1496.2,1209.52 1496.79,1208.22 1497.38,1208.39 1497.96,1208.64 1498.55,1210.08 1499.14,1209.01 1499.72,1207.92 1500.31,1210.25 1500.9,1210.26 1501.48,1209.11 1502.07,1209.09 1502.65,1209.16 1503.24,1209.21 1503.83,1209.28 1504.41,1213.16 1505,1212.95 1505.59,1211.77 1506.17,1213.11 1506.76,1214.29 1507.35,1214.08 1507.93,1213.78 1508.52,1212.28 1509.11,1212.24 1509.69,1208.55 1510.28,1209.88 1510.86,1212.3 1511.45,1213.33 1512.04,1213.18 1512.62,1213.01 1513.21,1208.98 1513.8,1210.15 1514.38,1209.22 1514.97,1209.29 1515.56,1209.38 1516.14,1208.32 1516.73,1212.17 1517.32,1210.76 1517.9,1209.83 1518.49,1209.9 1519.07,1208.67 1519.66,1207.27 1520.25,1207.42 1520.83,1206.38 1521.42,1210.15 1522.01,1209.09 1522.59,1211.66 1523.18,1210.1 1523.77,1207.59 1524.35,1208.06 1524.94,1208.16 1525.52,1209.51 1526.11,1212.32 1526.7,1209.95 1527.28,1207.62 1527.87,1207.93 1528.46,1208.02 1529.04,1208.11 1529.63,1209.51 1530.22,1211.96 1530.8,1208.54 1531.39,1208.57 1531.98,1208.55 1532.56,1210 1533.15,1209.78 1533.73,1209.76 1534.32,1209.84 1534.91,1211.31 1535.49,1212.24 1536.08,1211.15 1536.67,1211.14 1537.25,1212.51 1537.84,1209.98 1538.43,1210.02 1539.01,1208.85 1539.6,1206.72 1540.19,1207 1540.77,1205.96 1541.36,1206.11 1541.94,1207.35 1542.53,1207.6 1543.12,1206.39 1543.7,1202.91 1544.29,1202.25 1544.88,1202.88 1545.46,1203.36 1546.05,1205.09 1546.64,1205.31 1547.22,1205.47 1547.81,1207.07 1548.4,1207.17 1548.98,1209.76 1549.57,1212.5 1550.15,1211.3 1550.74,1211.23 1551.33,1211.28 1551.91,1213.42 1552.5,1213.17 1553.09,1210.83 1553.67,1210.91 1554.26,1213.27 1554.85,1213.14 1555.43,1211.68 1556.02,1211.64 1556.6,1211.87 1557.19,1212.89 1557.78,1213.82 1558.36,1214.99 1558.95,1215 1559.54,1213.74 1560.12,1209.89 1560.71,1207.56 1561.3,1208.62 1561.88,1207.49 1562.47,1202.76 1563.06,1205.91 1563.64,1207.43 1564.23,1206.54 1564.81,1208.23 1565.4,1208.54 1565.99,1207.39 1566.57,1207.85 1567.16,1208.18 1567.75,1208.53 1568.33,1209.79 1568.92,1210.01 1569.51,1211.13 1570.09,1211.2 1570.68,1213.67 1571.27,1212.15 1571.85,1210.79 1572.44,1212.11 1573.02,1212.1 1573.61,1213.14 1574.2,1214.29 1574.78,1214.02 1575.37,1213.88 1575.96,1213.9 1576.54,1211.13 1577.13,1211.07 1577.72,1209.84 1578.3,1209.84 1578.89,1212.33 1579.47,1212.21 1580.06,1213.32 1580.65,1210.83 1581.23,1210.82 1581.82,1209.64 1582.41,1207.31 1582.99,1209.82 1583.58,1210.11 1584.17,1210.06 1584.75,1211.4 1585.34,1210.04 1585.93,1211.3 1586.51,1210.07 1587.1,1210.15 1587.68,1211.31 1588.27,1211.52 1588.86,1212.91 1589.44,1213.85 1590.03,1212.46 1590.62,1212.5 1591.2,1212.37 1591.79,1211.1 1592.38,1209.81 1592.96,1212.44 1593.55,1211.03 1594.14,1211.03 1594.72,1211.21 1595.31,1211.17 1595.89,1211.32 1596.48,1211.19 1597.07,1209.95 1597.65,1211.36 1598.24,1211.18 1598.83,1212.49 1599.41,1208.78 1600,1210.2 1600.59,1210.49 1601.17,1210.41 1601.76,1211.44 1602.34,1211.34 1602.93,1212.39 1603.52,1212.12 1604.1,1214.53 1604.69,1215.72 1605.28,1214.54 1605.86,1213.23 1606.45,1213.44 1607.04,1214.35 1607.62,1214.47 1608.21,1213.18 1608.8,1214.3 1609.38,1212.84 1609.97,1211.46 1610.55,1211.49 1611.14,1211.56 1611.73,1210.5 1612.31,1211.75 1612.9,1211.84 1613.49,1208.12 1614.07,1209.5 1614.66,1209.18 1615.25,1209.35 1615.83,1207.28 1616.42,1206.11 1617.01,1206.44 1617.59,1206.45 1618.18,1205.59 1618.76,1209.56 1619.35,1209.84 1619.94,1209.94 1620.52,1213.82 1621.11,1215.04 1621.7,1212.56 1622.28,1214.8 1622.87,1215.75 1623.46,1216.33 1624.04,1214.71 1624.63,1213.47 1625.22,1214.45 1625.8,1213 1626.39,1215.09 1626.97,1213.8 1627.56,1213.53 1628.15,1214.88 1628.73,1215.81 1629.32,1213.31 1629.91,1213.15 1630.49,1214.32 1631.08,1214.13 1631.67,1214.44 1632.25,1213.96 1632.84,1214.96 1633.42,1213.57 1634.01,1214.57 1634.6,1214.45 1635.18,1214.09 1635.77,1215.15 1636.36,1212.62 1636.94,1212.58 1637.53,1212.36 1638.12,1213.24 1638.7,1213.09 1639.29,1211.51 1639.88,1217.55 1640.46,1215.95 1641.05,1215.66 1641.63,1216.69 1642.22,1215.4 1642.81,1215.13 1643.39,1213.74 1643.98,1213.81 1644.57,1210.15 1645.15,1210.12 1645.74,1205.32 1646.33,1205.37 1646.91,1204.54 1647.5,1204.68 1648.09,1206.26 1648.67,1207.66 1649.26,1209 1649.84,1209.07 1650.43,1209.08 1651.02,1209.2 1651.6,1209.38 1652.19,1206.92 1652.78,1205.94 1653.36,1206.36 1653.95,1206.67 1654.54,1205.56 1655.12,1205.91 1655.71,1206.04 1656.29,1206.33 1656.88,1206.78 1657.47,1208.39 1658.05,1208.54 1658.64,1208.78 1659.23,1210.11 1659.81,1210.11 1660.4,1208.72 1660.99,1210.22 1661.57,1207.83 1662.16,1209.12 1662.75,1208.24 1663.33,1208.37 1663.92,1207.22 1664.5,1207.84 1665.09,1209.37 1665.68,1208.44 1666.26,1209.93 1666.85,1208.97 1667.44,1206.62 1668.02,1205.7 1668.61,1205.91 1669.2,1206.02 1669.78,1207.56 1670.37,1205.29 1670.96,1209.23 1671.54,1207.9 1672.13,1211.69 1672.71,1210.46 1673.3,1211.76 1673.89,1212.8 1674.47,1215.16 1675.06,1213.67 1675.65,1212.38 1676.23,1213.42 1676.82,1213.32 1677.41,1213.06 1677.99,1213.87 1678.58,1215 1679.17,1214.81 1679.75,1214.51 1680.34,1216.87 1680.92,1215.39 1681.51,1214.99 1682.1,1213.45 1682.68,1215.39 1683.27,1216.5 1683.86,1216.31 1684.44,1214.84 1685.03,1216.97 1685.62,1216.73 1686.2,1215.09 1686.79,1213.64 1687.37,1219.46 1687.96,1218.92 1688.55,1218.48 1689.13,1218.16 1689.72,1217.85 1690.31,1216.35 1690.89,1215.93 1691.48,1217.99 1692.07,1217.63 1692.65,1217.29 1693.24,1215.72 1693.83,1218.93 1694.41,1218.65 1695,1219.5 1695.58,1221.36 1696.17,1218.35 1696.76,1218.1 1697.34,1217.99 1697.93,1217.79 1698.52,1219.57 1699.1,1217.82 1699.69,1216.24 1700.28,1216.31 1700.86,1217.43 1701.45,1215.57 1702.04,1217.79 1702.62,1216.31 1703.21,1212.17 1703.79,1212.19 1704.38,1214.68 1704.97,1214.62 1705.55,1215.9 1706.14,1214.46 1706.73,1214.37 1707.31,1212.96 1707.9,1212.67 1708.49,1217.18 1709.07,1215.65 1709.66,1216.64 1710.24,1217.79 1710.83,1217.8 1711.42,1216.52 1712,1216.31 1712.59,1215.08 1713.18,1212.51 1713.76,1212.26 1714.35,1213.36 1714.94,1213.35 1715.52,1209.44 1716.11,1211.73 1716.7,1212.81 1717.28,1210.06 1717.87,1207.67 1718.45,1209.1 1719.04,1207.82 1719.63,1208.02 1720.21,1205.83 1720.8,1206.15 1721.39,1203.91 1721.97,1201.73 1722.56,1203.31 1723.15,1199.81 1723.73,1200.32 1724.32,1201.92 1724.91,1202.13 1725.49,1201.43 1726.08,1203.39 1726.66,1202.51 1727.25,1200.18 1727.84,1201.65 1728.42,1199.47 1729.01,1202.76 1729.6,1204.24 1730.18,1207 1730.77,1208.42 1731.36,1208.48 1731.94,1205.05 1732.53,1205.45 1733.11,1203.29 1733.7,1204.74 1734.29,1209.96 1734.87,1207.51 1735.46,1205.18 1736.05,1205.48 1736.63,1205.77 1737.22,1208.28 1737.81,1209.69 1738.39,1208.4 1738.98,1209.92 1739.57,1207.73 1740.15,1207.61 1740.74,1207.72 1741.32,1210.17 1741.91,1210.07 1742.5,1210.11 1743.08,1207.81 1743.67,1205.06 1744.26,1205.42 1744.84,1205.69 1745.43,1206.02 1746.02,1206.41 1746.6,1206.66 1747.19,1205.73 1747.78,1203.46 1748.36,1199.02 1748.95,1203.03 1749.53,1203.62 1750.12,1204.12 1750.71,1206.09 1751.29,1207.46 1751.88,1209.04 1752.47,1207.82 1753.05,1209.47 1753.64,1208.16 1754.23,1208.46 1754.81,1207.45 1755.4,1211.07 1755.99,1211.31 1756.57,1216.09 1757.16,1215.92 1757.74,1215.59 1758.33,1216.41 1758.92,1214.75 1759.5,1216.7 1760.09,1215.17 1760.68,1215.17 1761.26,1217.33 1761.85,1214.58 1762.44,1217.1 1763.02,1215.57 1763.61,1215.52 1764.19,1215.05 1764.78,1215.94 1765.37,1216.84 1765.95,1218.05 1766.54,1218.72 1767.13,1218.01 1767.71,1217.83 1768.3,1221.3 1768.89,1219.81 1769.47,1220.38 1770.06,1218.7 1770.65,1220.53 1771.23,1217.26 1771.82,1216.93 1772.4,1213.37 1772.99,1213.47 1773.58,1214.46 1774.16,1214.25 1774.75,1212.92 1775.34,1212.54 1775.92,1211.32 1776.51,1211.33 1777.1,1208.94 1777.68,1207.71 1778.27,1209.21 1778.86,1209.2 1779.44,1209.49 1780.03,1208.36 1780.61,1209.88 1781.2,1207.23 1781.79,1205.91 1782.37,1207.26 1782.96,1208.62 1783.55,1212.4 1784.13,1212.52 1784.72,1212.77 1785.31,1210.21 1785.89,1212.83 1786.48,1211.36 1787.06,1211.55 1787.65,1210.12 1788.24,1207.59 1788.82,1206.49 1789.41,1206.45 1790,1206.8 1790.58,1205.55 1791.17,1207.33 1791.76,1207.61 1792.34,1207.96 1792.93,1210.64 1793.52,1210.77 1794.1,1207.13 1794.69,1204.82 1795.27,1206.36 1795.86,1206.64 1796.45,1208.04 1797.03,1210.52 1797.62,1209.21 1798.21,1208.28 1798.79,1206.12 1799.38,1205.3 1799.97,1204.37 1800.55,1205.85 1801.14,1207.28 1801.73,1207.51 1802.31,1206.18 1802.9,1206.51 1803.48,1208.05 1804.07,1208.43 1804.66,1209.96 1805.24,1210.12 1805.83,1208.83 1806.42,1208.88 1807,1207.83 1807.59,1209.32 1808.18,1210.61 1808.76,1210.87 1809.35,1210.81 1809.94,1210.75 1810.52,1212.04 1811.11,1213.22 1811.69,1213.16 1812.28,1211.74 1812.87,1212.86 1813.45,1212.74 1814.04,1213.97 1814.63,1213.84 1815.21,1216.21 1815.8,1216 1816.39,1215.81 1816.97,1214.37 1817.56,1215.33 1818.14,1212.65 1818.73,1213.93 1819.32,1216.21 1819.9,1214.36 1820.49,1211.91 1821.08,1209.55 1821.66,1210.72 1822.25,1211.7 1822.84,1212.91 1823.42,1214.06 1824.01,1213.79 1824.6,1212.3 1825.18,1213.67 1825.77,1212.57 1826.35,1209.91 1826.94,1211.19 1827.53,1209.85 1828.11,1209.88 1828.7,1209.9 1829.29,1216.07 1829.87,1218.25 1830.46,1220.44 1831.05,1219.89 1831.63,1219.34 1832.22,1216.38 1832.81,1217.15 1833.39,1215.35 1833.98,1215.06 1834.56,1213.46 1835.15,1210.77 1835.74,1208.46 1836.32,1206 1836.91,1208.94 1837.5,1210.25 1838.08,1211.49 1838.67,1212.59 1839.26,1212.44 1839.84,1213.94 1840.43,1209.99 1841.01,1214.77 1841.6,1214.39 1842.19,1214.25 1842.77,1214.14 1843.36,1215.08 1843.95,1214.51 1844.53,1211.86 1845.12,1212.83 1845.71,1213.96 1846.29,1216.27 1846.88,1213.62 1847.47,1215.1 1848.05,1214.74 1848.64,1214.37 1849.22,1216.46 1849.81,1216.25 1850.4,1214.84 1850.98,1214.57 1851.57,1214.23 1852.16,1215.2 1852.74,1211.25 1853.33,1209.93 1853.92,1207.33 1854.5,1206.15 1855.09,1209.05 1855.68,1207.74 1856.26,1208.16 1856.85,1206.99 1857.43,1205.97 1858.02,1207.5 1858.61,1208.52 1859.19,1207.46 1859.78,1207.9 1860.37,1204.3 1860.95,1204.69 1861.54,1206.17 1862.13,1204 1862.71,1207.93 1863.3,1206.75 1863.88,1206.86 1864.47,1209.71 1865.06,1212.43 1865.64,1212.24 1866.23,1212.02 1866.82,1211.97 1867.4,1210.54 1867.99,1212.81 1868.58,1212.72 1869.16,1207.63 1869.75,1207.92 1870.34,1208.18 1870.92,1208.31 1871.51,1210.78 1872.09,1211.02 1872.68,1209.8 1873.27,1211.42 1873.85,1209.92 1874.44,1211.05 1875.03,1209.88 1875.61,1208.8 1876.2,1208.99 1876.79,1209.28 1877.37,1209.73 1877.96,1210.64 1878.55,1209.35 1879.13,1210.84 1879.72,1211.08 1880.3,1209.69 1880.89,1211.83 1881.48,1211.77 1882.06,1211.66 1882.65,1210.27 1883.24,1212.71 1883.82,1212.43 1884.41,1211.08 1885,1211.12 1885.58,1211.11 1886.17,1207.46 1886.76,1206.42 1887.34,1205.41 1887.93,1204.51 1888.51,1205.95 1889.1,1206.26 1889.69,1206.29 1890.27,1208.06 1890.86,1209.56 1891.45,1208.41 1892.03,1208.58 1892.62,1212.18 1893.21,1212.2 1893.79,1213.55 1894.38,1213.41 1894.96,1210.99 1895.55,1207.43 1896.14,1208.94 1896.72,1208.75 1897.31,1207.43 1897.9,1208.88 1898.48,1208.83 1899.07,1206.69 1899.66,1203.19 1900.24,1204.7 1900.83,1207.44 1901.42,1207.8 1902,1210.5 1902.59,1210.5 1903.17,1208.12 1903.76,1209.36 1904.35,1209.43 1904.93,1209.57 1905.52,1210.75 1906.11,1209.76 1906.69,1208.6 1907.28,1210.19 1907.87,1209.14 1908.45,1210.35 1909.04,1210.6 1909.63,1211.93 1910.21,1211.74 1910.8,1213.42 1911.38,1212.27 1911.97,1212.02 1912.56,1211.88 1913.14,1213.07 1913.73,1214.36 1914.32,1215.62 1914.9,1216.77 1915.49,1218.94 1916.08,1219.82 1916.66,1218 1917.25,1218.9 1917.83,1219.68 1918.42,1219.13 1919.01,1218.96 1919.59,1216.36 1920.18,1217.43 1920.77,1214.86 1921.35,1215.84 1921.94,1213.38 1922.53,1212.11 1923.11,1212.04 1923.7,1211.89 1924.29,1210.45 1924.87,1210.4 1925.46,1209.42 1926.04,1210.7 1926.63,1209.76 1927.22,1210.31 1927.8,1210.37 1928.39,1209.25 1928.98,1209.44 1929.56,1205.86 1930.15,1206.28 1930.74,1205.36 1931.32,1205.39 1931.91,1204.37 1932.5,1207.13 1933.08,1209.55 1933.67,1210.65 1934.25,1208.25 1934.84,1208.63 1935.43,1208.7 1936.01,1209 1936.6,1210.33 1937.19,1210.27 1937.77,1208.16 1938.36,1209.45 1938.95,1209.43 1939.53,1209.72 1940.12,1208.76 1940.71,1212.45 1941.29,1212.46 1941.88,1213.42 1942.46,1211.89 1943.05,1209.47 1943.64,1209.43 1944.22,1206.98 1944.81,1207.08 1945.4,1210.97 1945.98,1211.12 1946.57,1211.27 1947.16,1214.72 1947.74,1214.61 1948.33,1214.38 1948.91,1214.14 1949.5,1215.31 1950.09,1213.86 1950.67,1214.62 1951.26,1212.09 1951.85,1212.06 1952.43,1211.93 1953.02,1211.89 1953.61,1213.14 1954.19,1213.08 1954.78,1212.9 1955.37,1211.7 1955.95,1210.37 1956.54,1209.22 1957.12,1208.08 1957.71,1207.93 1958.3,1206.63 1958.88,1206.78 1959.47,1206.92 1960.06,1209.67 1960.64,1208.36 1961.23,1208.58 1961.82,1207.35 1962.4,1208.65 1962.99,1209.85 1963.58,1211.07 1964.16,1212.28 1964.75,1215.74 1965.33,1216.57 1965.92,1216.33 1966.51,1212.41 1967.09,1214.62 1967.68,1212.98 1968.27,1212.9 1968.85,1211.64 1969.44,1211.65 1970.03,1209.31 1970.61,1208.41 1971.2,1207.15 1971.78,1207.43 1972.37,1207.66 1972.96,1206.65 1973.54,1207.75 1974.13,1207.82 1974.72,1207.92 1975.3,1206.84 1975.89,1208.31 1976.48,1208.35 1977.06,1205.78 1977.65,1205.96 1978.24,1207.22 1978.82,1203.78 1979.41,1204.21 1979.99,1202.28 1980.58,1203.91 1981.17,1205.34 1981.75,1204.53 1982.34,1203.6 1982.93,1205.17 1983.51,1202.93 1984.1,1204.52 1984.69,1202.45 1985.27,1203.84 1985.86,1202.89 1986.45,1204.56 1987.03,1204.94 1987.62,1205.51 1988.2,1205.96 1988.79,1203.91 1989.38,1202.94 1989.96,1202.12 1990.55,1201.09 1991.14,1203.83 1991.72,1204.41 1992.31,1205.87 1992.9,1208.58 1993.48,1206.32 1994.07,1206.65 1994.65,1205.79 1995.24,1205.92 1995.83,1206.33 1996.41,1207.86 1997,1204.4 1997.59,1203.56 1998.17,1204.06 1998.76,1204.65 1999.35,1202.66 1999.93,1204.11 2000.52,1204.46 2001.11,1206.31 2001.69,1207.83 2002.28,1207.89 2002.86,1210.26 2003.45,1210.39 2004.04,1208.17 2004.62,1209.61 2005.21,1207.05 2005.8,1207.48 2006.38,1208.91 2006.97,1208.99 2007.56,1209.14 2008.14,1206.83 2008.73,1202.15 2009.32,1202.25 2009.9,1201.42 2010.49,1207 2011.07,1207.4 2011.66,1209.02 2012.25,1206.73 2012.83,1206.91 2013.42,1205.91 2014.01,1204.85 2014.59,1205.35 2015.18,1205.71 2015.77,1207.58 2016.35,1210.44 2016.94,1211.75 2017.53,1213.96 2018.11,1215.14 2018.7,1217.07 2019.28,1217.03 2019.87,1218.02 2020.46,1219.33 2021.04,1218.8 2021.63,1218.63 2022.22,1217.89 2022.8,1218.69 2023.39,1218.33 2023.98,1219.16 2024.56,1220.94 2025.15,1222.63 2025.73,1221.05 2026.32,1220.52 2026.91,1216.32 2027.49,1218.29 2028.08,1218.88 2028.67,1221.14 2029.25,1220.78 2029.84,1219.06 2030.43,1220.85 2031.01,1222.46 2031.6,1221.88 2032.19,1224.9 2032.77,1223.91 2033.36,1224.27 2033.94,1221.1 2034.53,1221.4 2035.12,1219.97 2035.7,1220.7 2036.29,1220.07 2036.88,1219.69 2037.46,1219.27 2038.05,1216.39 2038.64,1217.44 2039.22,1215.92 2039.81,1213.43 2040.4,1213.17 2040.98,1213.05 2041.57,1209.21 2042.15,1209.43 2042.74,1208.38 2043.33,1208.33 2043.91,1207.29 2044.5,1210.13 2045.09,1210.25 2045.67,1211.48 2046.26,1211.44 2046.85,1212.25 2047.43,1213.15 2048.02,1215.48 2048.6,1211.34 2049.19,1211.38 2049.78,1211.55 2050.36,1211.68 2050.95,1212.05 2051.54,1211.95 2052.12,1210.38 2052.71,1208.98 2053.3,1207.79 2053.88,1205.35 2054.47,1203.21 2055.06,1204.62 2055.64,1206.09 2056.23,1206.01 2056.81,1206.16 2057.4,1209.19 2057.99,1209.22 2058.57,1209.4 2059.16,1209.52 2059.75,1209.38 2060.33,1210.86 2060.92,1209.8 2061.51,1212.08 2062.09,1211.87 2062.68,1211.93 2063.27,1213.33 2063.85,1212.1 2064.44,1209.76 2065.02,1208.23 2065.61,1207.25 2066.2,1206.08 2066.78,1202.59 2067.37,1201.78 2067.96,1202.23 2068.54,1203.94 2069.13,1205.5 2069.72,1204.74 2070.3,1206.29 2070.89,1206.49 2071.48,1208.03 2072.06,1209.43 2072.65,1209.55 2073.23,1208.52 2073.82,1210.83 2074.41,1211.68 2074.99,1212.96 2075.58,1217.67 2076.17,1219.87 2076.75,1220.46 2077.34,1222.25 2077.93,1220.26 2078.51,1222.25 2079.1,1222.86 2079.68,1222.27 2080.27,1220.53 2080.86,1217.89 2081.44,1215.1 2082.03,1214.65 2082.62,1213.25 2083.2,1213.13 2083.79,1215.4 2084.38,1216.36 2084.96,1214.82 2085.55,1212.15 2086.14,1209.46 2086.72,1208.32 2087.31,1209.69 2087.89,1211.01 2088.48,1213.44 2089.07,1212.26 2089.65,1210.89 2090.24,1210.68 2090.83,1211.88 2091.41,1209.41 2092,1209.53 2092.59,1209.61 2093.17,1210.73 2093.76,1211.98 2094.35,1210.61 2094.93,1212.91 2095.52,1212.75 2096.1,1210.45 2096.69,1211.77 2097.28,1214.04 2097.86,1217.44 2098.45,1218.32 2099.04,1218.85 2099.62,1218.54 2100.21,1218.08 2100.8,1217.93 2101.38,1221.39 2101.97,1216.12 2102.55,1217.39 2103.14,1217.32 2103.73,1217.05 2104.31,1214.15 2104.9,1212.84 2105.49,1211.43 2106.07,1212.91 2106.66,1212.83 2107.25,1212.78 2107.83,1213.05 2108.42,1215.4 2109.01,1215.1 2109.59,1214.74 2110.18,1210.79 2110.76,1208.22 2111.35,1210.59 2111.94,1209.67 2112.52,1208.63 2113.11,1207.7 2113.7,1207.67 2114.28,1208.91 2114.87,1211.53 2115.46,1211.73 2116.04,1212.65 2116.63,1211.24 2117.22,1211.14 2117.8,1210.06 2118.39,1210.02 2118.97,1208.65 2119.56,1207.4 2120.15,1210.14 2120.73,1208.83 2121.32,1207.76 2121.91,1205.5 2122.49,1205.71 2123.08,1209.69 2123.67,1207.24 2124.25,1206.05 2124.84,1206.56 2125.42,1208.04 2126.01,1204.46 2126.6,1207.1 2127.18,1205.83 2127.77,1203.59 2128.36,1204.02 2128.94,1201.82 2129.53,1203.64 2130.12,1202.79 2130.7,1203.06 2131.29,1203.57 2131.88,1207.76 2132.46,1206.73 2133.05,1206.99 2133.63,1208.38 2134.22,1207.46 2134.81,1209.02 2135.39,1209.12 2135.98,1208.77 2136.57,1210.18 2137.15,1211.59 2137.74,1212.6 2138.33,1211.45 2138.91,1209.93 2139.5,1208.63 2140.09,1210.02 2140.67,1208.62 2141.26,1211.18 2141.84,1211.25 2142.43,1212.55 2143.02,1216.04 2143.6,1214.75 2144.19,1213.4 2144.78,1214.57 2145.36,1211.94 2145.95,1210.68 2146.54,1212.1 2147.12,1209.71 2147.71,1209.64 2148.3,1209.67 2148.88,1208.55 2149.47,1207.43 2150.05,1207.89 2150.64,1208.16 2151.23,1207.11 2151.81,1208.58 2152.4,1208.7 2152.99,1206.35 2153.57,1206.54 2154.16,1206.69 2154.75,1209.37 2155.33,1210.87 2155.92,1210.82 2156.5,1214.45 2157.09,1214.13 2157.68,1214.98 2158.26,1214.81 \"/>\n<path clip-path=\"url(#clip242)\" d=\"M986.025 1211.43 L986.612 1211.43 L987.198 1211.43 L987.785 1211.43 L988.371 1211.43 L988.957 1211.43 L989.544 1211.43 L990.13 1211.43 L990.717 1211.43 L991.303 1211.43 L991.889 1211.43 L992.476 1211.43 L993.062 1211.43 L993.649 1211.43 L994.235 1211.43 L994.822 1211.43 L995.408 1211.43 L995.994 1211.43 L996.581 1211.43 L997.167 1211.43 L997.754 1211.43 L998.34 1211.43 L998.926 1211.43 L999.513 1211.43 L1000.1 1211.43 L1000.69 1211.43 L1001.27 1211.43 L1001.86 1211.43 L1002.44 1211.43 L1003.03 1211.43 L1003.62 1211.43 L1004.2 1211.43 L1004.79 1211.43 L1005.38 1211.43 L1005.96 1211.43 L1006.55 1211.43 L1007.14 1211.43 L1007.72 1211.43 L1008.31 1211.43 L1008.9 1211.43 L1009.48 1211.43 L1010.07 1211.43 L1010.65 1211.43 L1011.24 1211.43 L1011.83 1211.43 L1012.41 1211.43 L1013 1211.43 L1013.59 1211.43 L1014.17 1211.43 L1014.76 1211.43 L1015.35 1211.43 L1015.93 1211.43 L1016.52 1211.43 L1017.11 1211.43 L1017.69 1211.43 L1018.28 1211.43 L1018.86 1211.43 L1019.45 1211.43 L1020.04 1211.43 L1020.62 1211.43 L1021.21 1211.43 L1021.8 1211.43 L1022.38 1211.43 L1022.97 1211.43 L1023.56 1211.43 L1024.14 1211.43 L1024.73 1211.43 L1025.32 1211.43 L1025.9 1211.43 L1026.49 1211.43 L1027.07 1211.43 L1027.66 1211.43 L1028.25 1211.43 L1028.83 1211.43 L1029.42 1211.43 L1030.01 1211.43 L1030.59 1211.43 L1031.18 1211.43 L1031.77 1211.43 L1032.35 1211.43 L1032.94 1211.43 L1033.52 1211.43 L1034.11 1211.43 L1034.7 1211.43 L1035.28 1211.43 L1035.87 1211.43 L1036.46 1211.43 L1037.04 1211.43 L1037.63 1211.43 L1038.22 1211.43 L1038.8 1211.43 L1039.39 1211.43 L1039.98 1211.43 L1040.56 1211.43 L1041.15 1211.43 L1041.73 1211.43 L1042.32 1211.43 L1042.91 1211.43 L1043.49 1211.43 L1044.08 1211.43 L1044.67 1211.43 L1045.25 1211.43 L1045.84 1211.43 L1046.43 1211.43 L1047.01 1211.43 L1047.6 1211.43 L1048.19 1211.43 L1048.77 1211.43 L1049.36 1211.43 L1049.94 1211.43 L1050.53 1211.43 L1051.12 1211.43 L1051.7 1211.43 L1052.29 1211.43 L1052.88 1211.43 L1053.46 1211.43 L1054.05 1211.43 L1054.64 1211.43 L1055.22 1211.43 L1055.81 1211.43 L1056.39 1211.43 L1056.98 1211.43 L1057.57 1211.43 L1058.15 1211.43 L1058.74 1211.43 L1059.33 1211.43 L1059.91 1211.43 L1060.5 1211.43 L1061.09 1211.43 L1061.67 1211.43 L1062.26 1211.43 L1062.85 1211.43 L1063.43 1211.43 L1064.02 1211.43 L1064.6 1211.43 L1065.19 1211.43 L1065.78 1211.43 L1066.36 1211.43 L1066.95 1211.43 L1067.54 1211.43 L1068.12 1211.43 L1068.71 1211.43 L1069.3 1211.43 L1069.88 1211.43 L1070.47 1211.43 L1071.06 1211.43 L1071.64 1211.43 L1072.23 1211.43 L1072.81 1211.43 L1073.4 1211.43 L1073.99 1211.43 L1074.57 1211.43 L1075.16 1211.43 L1075.75 1211.43 L1076.33 1211.43 L1076.92 1211.43 L1077.51 1211.43 L1078.09 1211.43 L1078.68 1211.43 L1079.26 1211.43 L1079.85 1211.43 L1080.44 1211.43 L1081.02 1211.43 L1081.61 1211.43 L1082.2 1211.43 L1082.78 1211.43 L1083.37 1211.43 L1083.96 1211.43 L1084.54 1211.43 L1085.13 1211.43 L1085.72 1211.43 L1086.3 1211.43 L1086.89 1211.43 L1087.47 1211.43 L1088.06 1211.43 L1088.65 1211.43 L1089.23 1211.43 L1089.82 1211.43 L1090.41 1211.43 L1090.99 1211.43 L1091.58 1211.43 L1092.17 1211.43 L1092.75 1211.43 L1093.34 1211.43 L1093.93 1211.43 L1094.51 1211.43 L1095.1 1211.43 L1095.68 1211.43 L1096.27 1211.43 L1096.86 1211.43 L1097.44 1211.43 L1098.03 1211.43 L1098.62 1211.43 L1099.2 1211.43 L1099.79 1211.43 L1100.38 1211.43 L1100.96 1211.43 L1101.55 1211.43 L1102.14 1211.43 L1102.72 1211.43 L1103.31 1211.43 L1103.89 1211.43 L1104.48 1211.43 L1105.07 1211.43 L1105.65 1211.43 L1106.24 1211.43 L1106.83 1211.43 L1107.41 1211.43 L1108 1211.43 L1108.59 1211.43 L1109.17 1211.43 L1109.76 1211.43 L1110.34 1211.43 L1110.93 1211.43 L1111.52 1211.43 L1112.1 1211.43 L1112.69 1211.43 L1113.28 1211.43 L1113.86 1211.43 L1114.45 1211.43 L1115.04 1211.43 L1115.62 1211.43 L1116.21 1211.43 L1116.8 1211.43 L1117.38 1211.43 L1117.97 1211.43 L1118.55 1211.43 L1119.14 1211.43 L1119.73 1211.43 L1120.31 1211.43 L1120.9 1211.43 L1121.49 1211.43 L1122.07 1211.43 L1122.66 1211.43 L1123.25 1211.43 L1123.83 1211.43 L1124.42 1211.43 L1125.01 1211.43 L1125.59 1211.43 L1126.18 1211.43 L1126.76 1211.43 L1127.35 1211.43 L1127.94 1211.43 L1128.52 1211.43 L1129.11 1211.43 L1129.7 1211.43 L1130.28 1211.43 L1130.87 1211.43 L1131.46 1211.43 L1132.04 1211.43 L1132.63 1211.43 L1133.21 1211.43 L1133.8 1211.43 L1134.39 1211.43 L1134.97 1211.43 L1135.56 1211.43 L1136.15 1211.43 L1136.73 1211.43 L1137.32 1211.43 L1137.91 1211.43 L1138.49 1211.43 L1139.08 1211.43 L1139.67 1211.43 L1140.25 1211.43 L1140.84 1211.43 L1141.42 1211.43 L1142.01 1211.43 L1142.6 1211.43 L1143.18 1211.43 L1143.77 1211.43 L1144.36 1211.43 L1144.94 1211.43 L1145.53 1211.43 L1146.12 1211.43 L1146.7 1211.43 L1147.29 1211.43 L1147.88 1211.43 L1148.46 1211.43 L1149.05 1211.43 L1149.63 1211.43 L1150.22 1211.43 L1150.81 1211.43 L1151.39 1211.43 L1151.98 1211.43 L1152.57 1211.43 L1153.15 1211.43 L1153.74 1211.43 L1154.33 1211.43 L1154.91 1211.43 L1155.5 1211.43 L1156.09 1211.43 L1156.67 1211.43 L1157.26 1211.43 L1157.84 1211.43 L1158.43 1211.43 L1159.02 1211.43 L1159.6 1211.43 L1160.19 1211.43 L1160.78 1211.43 L1161.36 1211.43 L1161.95 1211.43 L1162.54 1211.43 L1163.12 1211.43 L1163.71 1211.43 L1164.29 1211.43 L1164.88 1211.43 L1165.47 1211.43 L1166.05 1211.43 L1166.64 1211.43 L1167.23 1211.43 L1167.81 1211.43 L1168.4 1211.43 L1168.99 1211.43 L1169.57 1211.43 L1170.16 1211.43 L1170.75 1211.43 L1171.33 1211.43 L1171.92 1211.43 L1172.5 1211.43 L1173.09 1211.43 L1173.68 1211.43 L1174.26 1211.43 L1174.85 1211.43 L1175.44 1211.43 L1176.02 1211.43 L1176.61 1211.43 L1177.2 1211.43 L1177.78 1211.43 L1178.37 1211.43 L1178.96 1211.43 L1179.54 1211.43 L1180.13 1211.43 L1180.71 1211.43 L1181.3 1211.43 L1181.89 1211.43 L1182.47 1211.43 L1183.06 1211.43 L1183.65 1211.43 L1184.23 1211.43 L1184.82 1211.43 L1185.41 1211.43 L1185.99 1211.43 L1186.58 1211.43 L1187.16 1211.43 L1187.75 1211.43 L1188.34 1211.43 L1188.92 1211.43 L1189.51 1211.43 L1190.1 1211.43 L1190.68 1211.43 L1191.27 1211.43 L1191.86 1211.43 L1192.44 1211.43 L1193.03 1211.43 L1193.62 1211.43 L1194.2 1211.43 L1194.79 1211.43 L1195.37 1211.43 L1195.96 1211.43 L1196.55 1211.43 L1197.13 1211.43 L1197.72 1211.43 L1198.31 1211.43 L1198.89 1211.43 L1199.48 1211.43 L1200.07 1211.43 L1200.65 1211.43 L1201.24 1211.43 L1201.83 1211.43 L1202.41 1211.43 L1203 1211.43 L1203.58 1211.43 L1204.17 1211.43 L1204.76 1211.43 L1205.34 1211.43 L1205.93 1211.43 L1206.52 1211.43 L1207.1 1211.43 L1207.69 1211.43 L1208.28 1211.43 L1208.86 1211.43 L1209.45 1211.43 L1210.03 1211.43 L1210.62 1211.43 L1211.21 1211.43 L1211.79 1211.43 L1212.38 1211.43 L1212.97 1211.43 L1213.55 1211.43 L1214.14 1211.43 L1214.73 1211.43 L1215.31 1211.43 L1215.9 1211.43 L1216.49 1211.43 L1217.07 1211.43 L1217.66 1211.43 L1218.24 1211.43 L1218.83 1211.43 L1219.42 1211.43 L1220 1211.43 L1220.59 1211.43 L1221.18 1211.43 L1221.76 1211.43 L1222.35 1211.43 L1222.94 1211.43 L1223.52 1211.43 L1224.11 1211.43 L1224.7 1211.43 L1225.28 1211.43 L1225.87 1211.43 L1226.45 1211.43 L1227.04 1211.43 L1227.63 1211.43 L1228.21 1211.43 L1228.8 1211.43 L1229.39 1211.43 L1229.97 1211.43 L1230.56 1211.43 L1231.15 1211.43 L1231.73 1211.43 L1232.32 1211.43 L1232.91 1211.43 L1233.49 1211.43 L1234.08 1211.43 L1234.66 1211.43 L1235.25 1211.43 L1235.84 1211.43 L1236.42 1211.43 L1237.01 1211.43 L1237.6 1211.43 L1238.18 1211.43 L1238.77 1211.43 L1239.36 1211.43 L1239.94 1211.43 L1240.53 1211.43 L1241.11 1211.43 L1241.7 1211.43 L1242.29 1211.43 L1242.87 1211.43 L1243.46 1211.43 L1244.05 1211.43 L1244.63 1211.43 L1245.22 1211.43 L1245.81 1211.43 L1246.39 1211.43 L1246.98 1211.43 L1247.57 1211.43 L1248.15 1211.43 L1248.74 1211.43 L1249.32 1211.43 L1249.91 1211.43 L1250.5 1211.43 L1251.08 1211.43 L1251.67 1211.43 L1252.26 1211.43 L1252.84 1211.43 L1253.43 1211.43 L1254.02 1211.43 L1254.6 1211.43 L1255.19 1211.43 L1255.78 1211.43 L1256.36 1211.43 L1256.95 1211.43 L1257.53 1211.43 L1258.12 1211.43 L1258.71 1211.43 L1259.29 1211.43 L1259.88 1211.43 L1260.47 1211.43 L1261.05 1211.43 L1261.64 1211.43 L1262.23 1211.43 L1262.81 1211.43 L1263.4 1211.43 L1263.98 1211.43 L1264.57 1211.43 L1265.16 1211.43 L1265.74 1211.43 L1266.33 1211.43 L1266.92 1211.43 L1267.5 1211.43 L1268.09 1211.43 L1268.68 1211.43 L1269.26 1211.43 L1269.85 1211.43 L1270.44 1211.43 L1271.02 1211.43 L1271.61 1211.43 L1272.19 1211.43 L1272.78 1211.43 L1273.37 1211.43 L1273.95 1211.43 L1274.54 1211.43 L1275.13 1211.43 L1275.71 1211.43 L1276.3 1211.43 L1276.89 1211.43 L1277.47 1211.43 L1278.06 1211.43 L1278.65 1211.43 L1279.23 1211.43 L1279.82 1211.43 L1280.4 1211.43 L1280.99 1211.43 L1281.58 1211.43 L1282.16 1211.43 L1282.75 1211.43 L1283.34 1211.43 L1283.92 1211.43 L1284.51 1211.43 L1285.1 1211.43 L1285.68 1211.43 L1286.27 1211.43 L1286.86 1211.43 L1287.44 1211.43 L1288.03 1211.43 L1288.61 1211.43 L1289.2 1211.43 L1289.79 1211.43 L1290.37 1211.43 L1290.96 1211.43 L1291.55 1211.43 L1292.13 1211.43 L1292.72 1211.43 L1293.31 1211.43 L1293.89 1211.43 L1294.48 1211.43 L1295.06 1211.43 L1295.65 1211.43 L1296.24 1211.43 L1296.82 1211.43 L1297.41 1211.43 L1298 1211.43 L1298.58 1211.43 L1299.17 1211.43 L1299.76 1211.43 L1300.34 1211.43 L1300.93 1211.43 L1301.52 1211.43 L1302.1 1211.43 L1302.69 1211.43 L1303.27 1211.43 L1303.86 1211.43 L1304.45 1211.43 L1305.03 1211.43 L1305.62 1211.43 L1306.21 1211.43 L1306.79 1211.43 L1307.38 1211.43 L1307.97 1211.43 L1308.55 1211.43 L1309.14 1211.43 L1309.73 1211.43 L1310.31 1211.43 L1310.9 1211.43 L1311.48 1211.43 L1312.07 1211.43 L1312.66 1211.43 L1313.24 1211.43 L1313.83 1211.43 L1314.42 1211.43 L1315 1211.43 L1315.59 1211.43 L1316.18 1211.43 L1316.76 1211.43 L1317.35 1211.43 L1317.93 1211.43 L1318.52 1211.43 L1319.11 1211.43 L1319.69 1211.43 L1320.28 1211.43 L1320.87 1211.43 L1321.45 1211.43 L1322.04 1211.43 L1322.63 1211.43 L1323.21 1211.43 L1323.8 1211.43 L1324.39 1211.43 L1324.97 1211.43 L1325.56 1211.43 L1326.14 1211.43 L1326.73 1211.43 L1327.32 1211.43 L1327.9 1211.43 L1328.49 1211.43 L1329.08 1211.43 L1329.66 1211.43 L1330.25 1211.43 L1330.84 1211.43 L1331.42 1211.43 L1332.01 1211.43 L1332.6 1211.43 L1333.18 1211.43 L1333.77 1211.43 L1334.35 1211.43 L1334.94 1211.43 L1335.53 1211.43 L1336.11 1211.43 L1336.7 1211.43 L1337.29 1211.43 L1337.87 1211.43 L1338.46 1211.43 L1339.05 1211.43 L1339.63 1211.43 L1340.22 1211.43 L1340.8 1211.43 L1341.39 1211.43 L1341.98 1211.43 L1342.56 1211.43 L1343.15 1211.43 L1343.74 1211.43 L1344.32 1211.43 L1344.91 1211.43 L1345.5 1211.43 L1346.08 1211.43 L1346.67 1211.43 L1347.26 1211.43 L1347.84 1211.43 L1348.43 1211.43 L1349.01 1211.43 L1349.6 1211.43 L1350.19 1211.43 L1350.77 1211.43 L1351.36 1211.43 L1351.95 1211.43 L1352.53 1211.43 L1353.12 1211.43 L1353.71 1211.43 L1354.29 1211.43 L1354.88 1211.43 L1355.47 1211.43 L1356.05 1211.43 L1356.64 1211.43 L1357.22 1211.43 L1357.81 1211.43 L1358.4 1211.43 L1358.98 1211.43 L1359.57 1211.43 L1360.16 1211.43 L1360.74 1211.43 L1361.33 1211.43 L1361.92 1211.43 L1362.5 1211.43 L1363.09 1211.43 L1363.68 1211.43 L1364.26 1211.43 L1364.85 1211.43 L1365.43 1211.43 L1366.02 1211.43 L1366.61 1211.43 L1367.19 1211.43 L1367.78 1211.43 L1368.37 1211.43 L1368.95 1211.43 L1369.54 1211.43 L1370.13 1211.43 L1370.71 1211.43 L1371.3 1211.43 L1371.88 1211.43 L1372.47 1211.43 L1373.06 1211.43 L1373.64 1211.43 L1374.23 1211.43 L1374.82 1211.43 L1375.4 1211.43 L1375.99 1211.43 L1376.58 1211.43 L1377.16 1211.43 L1377.75 1211.43 L1378.34 1211.43 L1378.92 1211.43 L1379.51 1211.43 L1380.09 1211.43 L1380.68 1211.43 L1381.27 1211.43 L1381.85 1211.43 L1382.44 1211.43 L1383.03 1211.43 L1383.61 1211.43 L1384.2 1211.43 L1384.79 1211.43 L1385.37 1211.43 L1385.96 1211.43 L1386.55 1211.43 L1387.13 1211.43 L1387.72 1211.43 L1388.3 1211.43 L1388.89 1211.43 L1389.48 1211.43 L1390.06 1211.43 L1390.65 1211.43 L1391.24 1211.43 L1391.82 1211.43 L1392.41 1211.43 L1393 1211.43 L1393.58 1211.43 L1394.17 1211.43 L1394.75 1211.43 L1395.34 1211.43 L1395.93 1211.43 L1396.51 1211.43 L1397.1 1211.43 L1397.69 1211.43 L1398.27 1211.43 L1398.86 1211.43 L1399.45 1211.43 L1400.03 1211.43 L1400.62 1211.43 L1401.21 1211.43 L1401.79 1211.43 L1402.38 1211.43 L1402.96 1211.43 L1403.55 1211.43 L1404.14 1211.43 L1404.72 1211.43 L1405.31 1211.43 L1405.9 1211.43 L1406.48 1211.43 L1407.07 1211.43 L1407.66 1211.43 L1408.24 1211.43 L1408.83 1211.43 L1409.42 1211.43 L1410 1211.43 L1410.59 1211.43 L1411.17 1211.43 L1411.76 1211.43 L1412.35 1211.43 L1412.93 1211.43 L1413.52 1211.43 L1414.11 1211.43 L1414.69 1211.43 L1415.28 1211.43 L1415.87 1211.43 L1416.45 1211.43 L1417.04 1211.43 L1417.63 1211.43 L1418.21 1211.43 L1418.8 1211.43 L1419.38 1211.43 L1419.97 1211.43 L1420.56 1211.43 L1421.14 1211.43 L1421.73 1211.43 L1422.32 1211.43 L1422.9 1211.43 L1423.49 1211.43 L1424.08 1211.43 L1424.66 1211.43 L1425.25 1211.43 L1425.83 1211.43 L1426.42 1211.43 L1427.01 1211.43 L1427.59 1211.43 L1428.18 1211.43 L1428.77 1211.43 L1429.35 1211.43 L1429.94 1211.43 L1430.53 1211.43 L1431.11 1211.43 L1431.7 1211.43 L1432.29 1211.43 L1432.87 1211.43 L1433.46 1211.43 L1434.04 1211.43 L1434.63 1211.43 L1435.22 1211.43 L1435.8 1211.43 L1436.39 1211.43 L1436.98 1211.43 L1437.56 1211.43 L1438.15 1211.43 L1438.74 1211.43 L1439.32 1211.43 L1439.91 1211.43 L1440.5 1211.43 L1441.08 1211.43 L1441.67 1211.43 L1442.25 1211.43 L1442.84 1211.43 L1443.43 1211.43 L1444.01 1211.43 L1444.6 1211.43 L1445.19 1211.43 L1445.77 1211.43 L1446.36 1211.43 L1446.95 1211.43 L1447.53 1211.43 L1448.12 1211.43 L1448.7 1211.43 L1449.29 1211.43 L1449.88 1211.43 L1450.46 1211.43 L1451.05 1211.43 L1451.64 1211.43 L1452.22 1211.43 L1452.81 1211.43 L1453.4 1211.43 L1453.98 1211.43 L1454.57 1211.43 L1455.16 1211.43 L1455.74 1211.43 L1456.33 1211.43 L1456.91 1211.43 L1457.5 1211.43 L1458.09 1211.43 L1458.67 1211.43 L1459.26 1211.43 L1459.85 1211.43 L1460.43 1211.43 L1461.02 1211.43 L1461.61 1211.43 L1462.19 1211.43 L1462.78 1211.43 L1463.37 1211.43 L1463.95 1211.43 L1464.54 1211.43 L1465.12 1211.43 L1465.71 1211.43 L1466.3 1211.43 L1466.88 1211.43 L1467.47 1211.43 L1468.06 1211.43 L1468.64 1211.43 L1469.23 1211.43 L1469.82 1211.43 L1470.4 1211.43 L1470.99 1211.43 L1471.57 1211.43 L1472.16 1211.43 L1472.75 1211.43 L1473.33 1211.43 L1473.92 1211.43 L1474.51 1211.43 L1475.09 1211.43 L1475.68 1211.43 L1476.27 1211.43 L1476.85 1211.43 L1477.44 1211.43 L1478.03 1211.43 L1478.61 1211.43 L1479.2 1211.43 L1479.78 1211.43 L1480.37 1211.43 L1480.96 1211.43 L1481.54 1211.43 L1482.13 1211.43 L1482.72 1211.43 L1483.3 1211.43 L1483.89 1211.43 L1484.48 1211.43 L1485.06 1211.43 L1485.65 1211.43 L1486.24 1211.43 L1486.82 1211.43 L1487.41 1211.43 L1487.99 1211.43 L1488.58 1211.43 L1489.17 1211.43 L1489.75 1211.43 L1490.34 1211.43 L1490.93 1211.43 L1491.51 1211.43 L1492.1 1211.43 L1492.69 1211.43 L1493.27 1211.43 L1493.86 1211.43 L1494.45 1211.43 L1495.03 1211.43 L1495.62 1211.43 L1496.2 1211.43 L1496.79 1211.43 L1497.38 1211.43 L1497.96 1211.43 L1498.55 1211.43 L1499.14 1211.43 L1499.72 1211.43 L1500.31 1211.43 L1500.9 1211.43 L1501.48 1211.43 L1502.07 1211.43 L1502.65 1211.43 L1503.24 1211.43 L1503.83 1211.43 L1504.41 1211.43 L1505 1211.43 L1505.59 1211.43 L1506.17 1211.43 L1506.76 1211.43 L1507.35 1211.43 L1507.93 1211.43 L1508.52 1211.43 L1509.11 1211.43 L1509.69 1211.43 L1510.28 1211.43 L1510.86 1211.43 L1511.45 1211.43 L1512.04 1211.43 L1512.62 1211.43 L1513.21 1211.43 L1513.8 1211.43 L1514.38 1211.43 L1514.97 1211.43 L1515.56 1211.43 L1516.14 1211.43 L1516.73 1211.43 L1517.32 1211.43 L1517.9 1211.43 L1518.49 1211.43 L1519.07 1211.43 L1519.66 1211.43 L1520.25 1211.43 L1520.83 1211.43 L1521.42 1211.43 L1522.01 1211.43 L1522.59 1211.43 L1523.18 1211.43 L1523.77 1211.43 L1524.35 1211.43 L1524.94 1211.43 L1525.52 1211.43 L1526.11 1211.43 L1526.7 1211.43 L1527.28 1211.43 L1527.87 1211.43 L1528.46 1211.43 L1529.04 1211.43 L1529.63 1211.43 L1530.22 1211.43 L1530.8 1211.43 L1531.39 1211.43 L1531.98 1211.43 L1532.56 1211.43 L1533.15 1211.43 L1533.73 1211.43 L1534.32 1211.43 L1534.91 1211.43 L1535.49 1211.43 L1536.08 1211.43 L1536.67 1211.43 L1537.25 1211.43 L1537.84 1211.43 L1538.43 1211.43 L1539.01 1211.43 L1539.6 1211.43 L1540.19 1211.43 L1540.77 1211.43 L1541.36 1211.43 L1541.94 1211.43 L1542.53 1211.43 L1543.12 1211.43 L1543.7 1211.43 L1544.29 1211.43 L1544.88 1211.43 L1545.46 1211.43 L1546.05 1211.43 L1546.64 1211.43 L1547.22 1211.43 L1547.81 1211.43 L1548.4 1211.43 L1548.98 1211.43 L1549.57 1211.43 L1550.15 1211.43 L1550.74 1211.43 L1551.33 1211.43 L1551.91 1211.43 L1552.5 1211.43 L1553.09 1211.43 L1553.67 1211.43 L1554.26 1211.43 L1554.85 1211.43 L1555.43 1211.43 L1556.02 1211.43 L1556.6 1211.43 L1557.19 1211.43 L1557.78 1211.43 L1558.36 1211.43 L1558.95 1211.43 L1559.54 1211.43 L1560.12 1211.43 L1560.71 1211.43 L1561.3 1211.43 L1561.88 1211.43 L1562.47 1211.43 L1563.06 1211.43 L1563.64 1211.43 L1564.23 1211.43 L1564.81 1211.43 L1565.4 1211.43 L1565.99 1211.43 L1566.57 1211.43 L1567.16 1211.43 L1567.75 1211.43 L1568.33 1211.43 L1568.92 1211.43 L1569.51 1211.43 L1570.09 1211.43 L1570.68 1211.43 L1571.27 1211.43 L1571.85 1211.43 L1572.44 1211.43 L1573.02 1211.43 L1573.61 1211.43 L1574.2 1211.43 L1574.78 1211.43 L1575.37 1211.43 L1575.96 1211.43 L1576.54 1211.43 L1577.13 1211.43 L1577.72 1211.43 L1578.3 1211.43 L1578.89 1211.43 L1579.47 1211.43 L1580.06 1211.43 L1580.65 1211.43 L1581.23 1211.43 L1581.82 1211.43 L1582.41 1211.43 L1582.99 1211.43 L1583.58 1211.43 L1584.17 1211.43 L1584.75 1211.43 L1585.34 1211.43 L1585.93 1211.43 L1586.51 1211.43 L1587.1 1211.43 L1587.68 1211.43 L1588.27 1211.43 L1588.86 1211.43 L1589.44 1211.43 L1590.03 1211.43 L1590.62 1211.43 L1591.2 1211.43 L1591.79 1211.43 L1592.38 1211.43 L1592.96 1211.43 L1593.55 1211.43 L1594.14 1211.43 L1594.72 1211.43 L1595.31 1211.43 L1595.89 1211.43 L1596.48 1211.43 L1597.07 1211.43 L1597.65 1211.43 L1598.24 1211.43 L1598.83 1211.43 L1599.41 1211.43 L1600 1211.43 L1600.59 1211.43 L1601.17 1211.43 L1601.76 1211.43 L1602.34 1211.43 L1602.93 1211.43 L1603.52 1211.43 L1604.1 1211.43 L1604.69 1211.43 L1605.28 1211.43 L1605.86 1211.43 L1606.45 1211.43 L1607.04 1211.43 L1607.62 1211.43 L1608.21 1211.43 L1608.8 1211.43 L1609.38 1211.43 L1609.97 1211.43 L1610.55 1211.43 L1611.14 1211.43 L1611.73 1211.43 L1612.31 1211.43 L1612.9 1211.43 L1613.49 1211.43 L1614.07 1211.43 L1614.66 1211.43 L1615.25 1211.43 L1615.83 1211.43 L1616.42 1211.43 L1617.01 1211.43 L1617.59 1211.43 L1618.18 1211.43 L1618.76 1211.43 L1619.35 1211.43 L1619.94 1211.43 L1620.52 1211.43 L1621.11 1211.43 L1621.7 1211.43 L1622.28 1211.43 L1622.87 1211.43 L1623.46 1211.43 L1624.04 1211.43 L1624.63 1211.43 L1625.22 1211.43 L1625.8 1211.43 L1626.39 1211.43 L1626.97 1211.43 L1627.56 1211.43 L1628.15 1211.43 L1628.73 1211.43 L1629.32 1211.43 L1629.91 1211.43 L1630.49 1211.43 L1631.08 1211.43 L1631.67 1211.43 L1632.25 1211.43 L1632.84 1211.43 L1633.42 1211.43 L1634.01 1211.43 L1634.6 1211.43 L1635.18 1211.43 L1635.77 1211.43 L1636.36 1211.43 L1636.94 1211.43 L1637.53 1211.43 L1638.12 1211.43 L1638.7 1211.43 L1639.29 1211.43 L1639.88 1211.43 L1640.46 1211.43 L1641.05 1211.43 L1641.63 1211.43 L1642.22 1211.43 L1642.81 1211.43 L1643.39 1211.43 L1643.98 1211.43 L1644.57 1211.43 L1645.15 1211.43 L1645.74 1211.43 L1646.33 1211.43 L1646.91 1211.43 L1647.5 1211.43 L1648.09 1211.43 L1648.67 1211.43 L1649.26 1211.43 L1649.84 1211.43 L1650.43 1211.43 L1651.02 1211.43 L1651.6 1211.43 L1652.19 1211.43 L1652.78 1211.43 L1653.36 1211.43 L1653.95 1211.43 L1654.54 1211.43 L1655.12 1211.43 L1655.71 1211.43 L1656.29 1211.43 L1656.88 1211.43 L1657.47 1211.43 L1658.05 1211.43 L1658.64 1211.43 L1659.23 1211.43 L1659.81 1211.43 L1660.4 1211.43 L1660.99 1211.43 L1661.57 1211.43 L1662.16 1211.43 L1662.75 1211.43 L1663.33 1211.43 L1663.92 1211.43 L1664.5 1211.43 L1665.09 1211.43 L1665.68 1211.43 L1666.26 1211.43 L1666.85 1211.43 L1667.44 1211.43 L1668.02 1211.43 L1668.61 1211.43 L1669.2 1211.43 L1669.78 1211.43 L1670.37 1211.43 L1670.96 1211.43 L1671.54 1211.43 L1672.13 1211.43 L1672.71 1211.43 L1673.3 1211.43 L1673.89 1211.43 L1674.47 1211.43 L1675.06 1211.43 L1675.65 1211.43 L1676.23 1211.43 L1676.82 1211.43 L1677.41 1211.43 L1677.99 1211.43 L1678.58 1211.43 L1679.17 1211.43 L1679.75 1211.43 L1680.34 1211.43 L1680.92 1211.43 L1681.51 1211.43 L1682.1 1211.43 L1682.68 1211.43 L1683.27 1211.43 L1683.86 1211.43 L1684.44 1211.43 L1685.03 1211.43 L1685.62 1211.43 L1686.2 1211.43 L1686.79 1211.43 L1687.37 1211.43 L1687.96 1211.43 L1688.55 1211.43 L1689.13 1211.43 L1689.72 1211.43 L1690.31 1211.43 L1690.89 1211.43 L1691.48 1211.43 L1692.07 1211.43 L1692.65 1211.43 L1693.24 1211.43 L1693.83 1211.43 L1694.41 1211.43 L1695 1211.43 L1695.58 1211.43 L1696.17 1211.43 L1696.76 1211.43 L1697.34 1211.43 L1697.93 1211.43 L1698.52 1211.43 L1699.1 1211.43 L1699.69 1211.43 L1700.28 1211.43 L1700.86 1211.43 L1701.45 1211.43 L1702.04 1211.43 L1702.62 1211.43 L1703.21 1211.43 L1703.79 1211.43 L1704.38 1211.43 L1704.97 1211.43 L1705.55 1211.43 L1706.14 1211.43 L1706.73 1211.43 L1707.31 1211.43 L1707.9 1211.43 L1708.49 1211.43 L1709.07 1211.43 L1709.66 1211.43 L1710.24 1211.43 L1710.83 1211.43 L1711.42 1211.43 L1712 1211.43 L1712.59 1211.43 L1713.18 1211.43 L1713.76 1211.43 L1714.35 1211.43 L1714.94 1211.43 L1715.52 1211.43 L1716.11 1211.43 L1716.7 1211.43 L1717.28 1211.43 L1717.87 1211.43 L1718.45 1211.43 L1719.04 1211.43 L1719.63 1211.43 L1720.21 1211.43 L1720.8 1211.43 L1721.39 1211.43 L1721.97 1211.43 L1722.56 1211.43 L1723.15 1211.43 L1723.73 1211.43 L1724.32 1211.43 L1724.91 1211.43 L1725.49 1211.43 L1726.08 1211.43 L1726.66 1211.43 L1727.25 1211.43 L1727.84 1211.43 L1728.42 1211.43 L1729.01 1211.43 L1729.6 1211.43 L1730.18 1211.43 L1730.77 1211.43 L1731.36 1211.43 L1731.94 1211.43 L1732.53 1211.43 L1733.11 1211.43 L1733.7 1211.43 L1734.29 1211.43 L1734.87 1211.43 L1735.46 1211.43 L1736.05 1211.43 L1736.63 1211.43 L1737.22 1211.43 L1737.81 1211.43 L1738.39 1211.43 L1738.98 1211.43 L1739.57 1211.43 L1740.15 1211.43 L1740.74 1211.43 L1741.32 1211.43 L1741.91 1211.43 L1742.5 1211.43 L1743.08 1211.43 L1743.67 1211.43 L1744.26 1211.43 L1744.84 1211.43 L1745.43 1211.43 L1746.02 1211.43 L1746.6 1211.43 L1747.19 1211.43 L1747.78 1211.43 L1748.36 1211.43 L1748.95 1211.43 L1749.53 1211.43 L1750.12 1211.43 L1750.71 1211.43 L1751.29 1211.43 L1751.88 1211.43 L1752.47 1211.43 L1753.05 1211.43 L1753.64 1211.43 L1754.23 1211.43 L1754.81 1211.43 L1755.4 1211.43 L1755.99 1211.43 L1756.57 1211.43 L1757.16 1211.43 L1757.74 1211.43 L1758.33 1211.43 L1758.92 1211.43 L1759.5 1211.43 L1760.09 1211.43 L1760.68 1211.43 L1761.26 1211.43 L1761.85 1211.43 L1762.44 1211.43 L1763.02 1211.43 L1763.61 1211.43 L1764.19 1211.43 L1764.78 1211.43 L1765.37 1211.43 L1765.95 1211.43 L1766.54 1211.43 L1767.13 1211.43 L1767.71 1211.43 L1768.3 1211.43 L1768.89 1211.43 L1769.47 1211.43 L1770.06 1211.43 L1770.65 1211.43 L1771.23 1211.43 L1771.82 1211.43 L1772.4 1211.43 L1772.99 1211.43 L1773.58 1211.43 L1774.16 1211.43 L1774.75 1211.43 L1775.34 1211.43 L1775.92 1211.43 L1776.51 1211.43 L1777.1 1211.43 L1777.68 1211.43 L1778.27 1211.43 L1778.86 1211.43 L1779.44 1211.43 L1780.03 1211.43 L1780.61 1211.43 L1781.2 1211.43 L1781.79 1211.43 L1782.37 1211.43 L1782.96 1211.43 L1783.55 1211.43 L1784.13 1211.43 L1784.72 1211.43 L1785.31 1211.43 L1785.89 1211.43 L1786.48 1211.43 L1787.06 1211.43 L1787.65 1211.43 L1788.24 1211.43 L1788.82 1211.43 L1789.41 1211.43 L1790 1211.43 L1790.58 1211.43 L1791.17 1211.43 L1791.76 1211.43 L1792.34 1211.43 L1792.93 1211.43 L1793.52 1211.43 L1794.1 1211.43 L1794.69 1211.43 L1795.27 1211.43 L1795.86 1211.43 L1796.45 1211.43 L1797.03 1211.43 L1797.62 1211.43 L1798.21 1211.43 L1798.79 1211.43 L1799.38 1211.43 L1799.97 1211.43 L1800.55 1211.43 L1801.14 1211.43 L1801.73 1211.43 L1802.31 1211.43 L1802.9 1211.43 L1803.48 1211.43 L1804.07 1211.43 L1804.66 1211.43 L1805.24 1211.43 L1805.83 1211.43 L1806.42 1211.43 L1807 1211.43 L1807.59 1211.43 L1808.18 1211.43 L1808.76 1211.43 L1809.35 1211.43 L1809.94 1211.43 L1810.52 1211.43 L1811.11 1211.43 L1811.69 1211.43 L1812.28 1211.43 L1812.87 1211.43 L1813.45 1211.43 L1814.04 1211.43 L1814.63 1211.43 L1815.21 1211.43 L1815.8 1211.43 L1816.39 1211.43 L1816.97 1211.43 L1817.56 1211.43 L1818.14 1211.43 L1818.73 1211.43 L1819.32 1211.43 L1819.9 1211.43 L1820.49 1211.43 L1821.08 1211.43 L1821.66 1211.43 L1822.25 1211.43 L1822.84 1211.43 L1823.42 1211.43 L1824.01 1211.43 L1824.6 1211.43 L1825.18 1211.43 L1825.77 1211.43 L1826.35 1211.43 L1826.94 1211.43 L1827.53 1211.43 L1828.11 1211.43 L1828.7 1211.43 L1829.29 1211.43 L1829.87 1211.43 L1830.46 1211.43 L1831.05 1211.43 L1831.63 1211.43 L1832.22 1211.43 L1832.81 1211.43 L1833.39 1211.43 L1833.98 1211.43 L1834.56 1211.43 L1835.15 1211.43 L1835.74 1211.43 L1836.32 1211.43 L1836.91 1211.43 L1837.5 1211.43 L1838.08 1211.43 L1838.67 1211.43 L1839.26 1211.43 L1839.84 1211.43 L1840.43 1211.43 L1841.01 1211.43 L1841.6 1211.43 L1842.19 1211.43 L1842.77 1211.43 L1843.36 1211.43 L1843.95 1211.43 L1844.53 1211.43 L1845.12 1211.43 L1845.71 1211.43 L1846.29 1211.43 L1846.88 1211.43 L1847.47 1211.43 L1848.05 1211.43 L1848.64 1211.43 L1849.22 1211.43 L1849.81 1211.43 L1850.4 1211.43 L1850.98 1211.43 L1851.57 1211.43 L1852.16 1211.43 L1852.74 1211.43 L1853.33 1211.43 L1853.92 1211.43 L1854.5 1211.43 L1855.09 1211.43 L1855.68 1211.43 L1856.26 1211.43 L1856.85 1211.43 L1857.43 1211.43 L1858.02 1211.43 L1858.61 1211.43 L1859.19 1211.43 L1859.78 1211.43 L1860.37 1211.43 L1860.95 1211.43 L1861.54 1211.43 L1862.13 1211.43 L1862.71 1211.43 L1863.3 1211.43 L1863.88 1211.43 L1864.47 1211.43 L1865.06 1211.43 L1865.64 1211.43 L1866.23 1211.43 L1866.82 1211.43 L1867.4 1211.43 L1867.99 1211.43 L1868.58 1211.43 L1869.16 1211.43 L1869.75 1211.43 L1870.34 1211.43 L1870.92 1211.43 L1871.51 1211.43 L1872.09 1211.43 L1872.68 1211.43 L1873.27 1211.43 L1873.85 1211.43 L1874.44 1211.43 L1875.03 1211.43 L1875.61 1211.43 L1876.2 1211.43 L1876.79 1211.43 L1877.37 1211.43 L1877.96 1211.43 L1878.55 1211.43 L1879.13 1211.43 L1879.72 1211.43 L1880.3 1211.43 L1880.89 1211.43 L1881.48 1211.43 L1882.06 1211.43 L1882.65 1211.43 L1883.24 1211.43 L1883.82 1211.43 L1884.41 1211.43 L1885 1211.43 L1885.58 1211.43 L1886.17 1211.43 L1886.76 1211.43 L1887.34 1211.43 L1887.93 1211.43 L1888.51 1211.43 L1889.1 1211.43 L1889.69 1211.43 L1890.27 1211.43 L1890.86 1211.43 L1891.45 1211.43 L1892.03 1211.43 L1892.62 1211.43 L1893.21 1211.43 L1893.79 1211.43 L1894.38 1211.43 L1894.96 1211.43 L1895.55 1211.43 L1896.14 1211.43 L1896.72 1211.43 L1897.31 1211.43 L1897.9 1211.43 L1898.48 1211.43 L1899.07 1211.43 L1899.66 1211.43 L1900.24 1211.43 L1900.83 1211.43 L1901.42 1211.43 L1902 1211.43 L1902.59 1211.43 L1903.17 1211.43 L1903.76 1211.43 L1904.35 1211.43 L1904.93 1211.43 L1905.52 1211.43 L1906.11 1211.43 L1906.69 1211.43 L1907.28 1211.43 L1907.87 1211.43 L1908.45 1211.43 L1909.04 1211.43 L1909.63 1211.43 L1910.21 1211.43 L1910.8 1211.43 L1911.38 1211.43 L1911.97 1211.43 L1912.56 1211.43 L1913.14 1211.43 L1913.73 1211.43 L1914.32 1211.43 L1914.9 1211.43 L1915.49 1211.43 L1916.08 1211.43 L1916.66 1211.43 L1917.25 1211.43 L1917.83 1211.43 L1918.42 1211.43 L1919.01 1211.43 L1919.59 1211.43 L1920.18 1211.43 L1920.77 1211.43 L1921.35 1211.43 L1921.94 1211.43 L1922.53 1211.43 L1923.11 1211.43 L1923.7 1211.43 L1924.29 1211.43 L1924.87 1211.43 L1925.46 1211.43 L1926.04 1211.43 L1926.63 1211.43 L1927.22 1211.43 L1927.8 1211.43 L1928.39 1211.43 L1928.98 1211.43 L1929.56 1211.43 L1930.15 1211.43 L1930.74 1211.43 L1931.32 1211.43 L1931.91 1211.43 L1932.5 1211.43 L1933.08 1211.43 L1933.67 1211.43 L1934.25 1211.43 L1934.84 1211.43 L1935.43 1211.43 L1936.01 1211.43 L1936.6 1211.43 L1937.19 1211.43 L1937.77 1211.43 L1938.36 1211.43 L1938.95 1211.43 L1939.53 1211.43 L1940.12 1211.43 L1940.71 1211.43 L1941.29 1211.43 L1941.88 1211.43 L1942.46 1211.43 L1943.05 1211.43 L1943.64 1211.43 L1944.22 1211.43 L1944.81 1211.43 L1945.4 1211.43 L1945.98 1211.43 L1946.57 1211.43 L1947.16 1211.43 L1947.74 1211.43 L1948.33 1211.43 L1948.91 1211.43 L1949.5 1211.43 L1950.09 1211.43 L1950.67 1211.43 L1951.26 1211.43 L1951.85 1211.43 L1952.43 1211.43 L1953.02 1211.43 L1953.61 1211.43 L1954.19 1211.43 L1954.78 1211.43 L1955.37 1211.43 L1955.95 1211.43 L1956.54 1211.43 L1957.12 1211.43 L1957.71 1211.43 L1958.3 1211.43 L1958.88 1211.43 L1959.47 1211.43 L1960.06 1211.43 L1960.64 1211.43 L1961.23 1211.43 L1961.82 1211.43 L1962.4 1211.43 L1962.99 1211.43 L1963.58 1211.43 L1964.16 1211.43 L1964.75 1211.43 L1965.33 1211.43 L1965.92 1211.43 L1966.51 1211.43 L1967.09 1211.43 L1967.68 1211.43 L1968.27 1211.43 L1968.85 1211.43 L1969.44 1211.43 L1970.03 1211.43 L1970.61 1211.43 L1971.2 1211.43 L1971.78 1211.43 L1972.37 1211.43 L1972.96 1211.43 L1973.54 1211.43 L1974.13 1211.43 L1974.72 1211.43 L1975.3 1211.43 L1975.89 1211.43 L1976.48 1211.43 L1977.06 1211.43 L1977.65 1211.43 L1978.24 1211.43 L1978.82 1211.43 L1979.41 1211.43 L1979.99 1211.43 L1980.58 1211.43 L1981.17 1211.43 L1981.75 1211.43 L1982.34 1211.43 L1982.93 1211.43 L1983.51 1211.43 L1984.1 1211.43 L1984.69 1211.43 L1985.27 1211.43 L1985.86 1211.43 L1986.45 1211.43 L1987.03 1211.43 L1987.62 1211.43 L1988.2 1211.43 L1988.79 1211.43 L1989.38 1211.43 L1989.96 1211.43 L1990.55 1211.43 L1991.14 1211.43 L1991.72 1211.43 L1992.31 1211.43 L1992.9 1211.43 L1993.48 1211.43 L1994.07 1211.43 L1994.65 1211.43 L1995.24 1211.43 L1995.83 1211.43 L1996.41 1211.43 L1997 1211.43 L1997.59 1211.43 L1998.17 1211.43 L1998.76 1211.43 L1999.35 1211.43 L1999.93 1211.43 L2000.52 1211.43 L2001.11 1211.43 L2001.69 1211.43 L2002.28 1211.43 L2002.86 1211.43 L2003.45 1211.43 L2004.04 1211.43 L2004.62 1211.43 L2005.21 1211.43 L2005.8 1211.43 L2006.38 1211.43 L2006.97 1211.43 L2007.56 1211.43 L2008.14 1211.43 L2008.73 1211.43 L2009.32 1211.43 L2009.9 1211.43 L2010.49 1211.43 L2011.07 1211.43 L2011.66 1211.43 L2012.25 1211.43 L2012.83 1211.43 L2013.42 1211.43 L2014.01 1211.43 L2014.59 1211.43 L2015.18 1211.43 L2015.77 1211.43 L2016.35 1211.43 L2016.94 1211.43 L2017.53 1211.43 L2018.11 1211.43 L2018.7 1211.43 L2019.28 1211.43 L2019.87 1211.43 L2020.46 1211.43 L2021.04 1211.43 L2021.63 1211.43 L2022.22 1211.43 L2022.8 1211.43 L2023.39 1211.43 L2023.98 1211.43 L2024.56 1211.43 L2025.15 1211.43 L2025.73 1211.43 L2026.32 1211.43 L2026.91 1211.43 L2027.49 1211.43 L2028.08 1211.43 L2028.67 1211.43 L2029.25 1211.43 L2029.84 1211.43 L2030.43 1211.43 L2031.01 1211.43 L2031.6 1211.43 L2032.19 1211.43 L2032.77 1211.43 L2033.36 1211.43 L2033.94 1211.43 L2034.53 1211.43 L2035.12 1211.43 L2035.7 1211.43 L2036.29 1211.43 L2036.88 1211.43 L2037.46 1211.43 L2038.05 1211.43 L2038.64 1211.43 L2039.22 1211.43 L2039.81 1211.43 L2040.4 1211.43 L2040.98 1211.43 L2041.57 1211.43 L2042.15 1211.43 L2042.74 1211.43 L2043.33 1211.43 L2043.91 1211.43 L2044.5 1211.43 L2045.09 1211.43 L2045.67 1211.43 L2046.26 1211.43 L2046.85 1211.43 L2047.43 1211.43 L2048.02 1211.43 L2048.6 1211.43 L2049.19 1211.43 L2049.78 1211.43 L2050.36 1211.43 L2050.95 1211.43 L2051.54 1211.43 L2052.12 1211.43 L2052.71 1211.43 L2053.3 1211.43 L2053.88 1211.43 L2054.47 1211.43 L2055.06 1211.43 L2055.64 1211.43 L2056.23 1211.43 L2056.81 1211.43 L2057.4 1211.43 L2057.99 1211.43 L2058.57 1211.43 L2059.16 1211.43 L2059.75 1211.43 L2060.33 1211.43 L2060.92 1211.43 L2061.51 1211.43 L2062.09 1211.43 L2062.68 1211.43 L2063.27 1211.43 L2063.85 1211.43 L2064.44 1211.43 L2065.02 1211.43 L2065.61 1211.43 L2066.2 1211.43 L2066.78 1211.43 L2067.37 1211.43 L2067.96 1211.43 L2068.54 1211.43 L2069.13 1211.43 L2069.72 1211.43 L2070.3 1211.43 L2070.89 1211.43 L2071.48 1211.43 L2072.06 1211.43 L2072.65 1211.43 L2073.23 1211.43 L2073.82 1211.43 L2074.41 1211.43 L2074.99 1211.43 L2075.58 1211.43 L2076.17 1211.43 L2076.75 1211.43 L2077.34 1211.43 L2077.93 1211.43 L2078.51 1211.43 L2079.1 1211.43 L2079.68 1211.43 L2080.27 1211.43 L2080.86 1211.43 L2081.44 1211.43 L2082.03 1211.43 L2082.62 1211.43 L2083.2 1211.43 L2083.79 1211.43 L2084.38 1211.43 L2084.96 1211.43 L2085.55 1211.43 L2086.14 1211.43 L2086.72 1211.43 L2087.31 1211.43 L2087.89 1211.43 L2088.48 1211.43 L2089.07 1211.43 L2089.65 1211.43 L2090.24 1211.43 L2090.83 1211.43 L2091.41 1211.43 L2092 1211.43 L2092.59 1211.43 L2093.17 1211.43 L2093.76 1211.43 L2094.35 1211.43 L2094.93 1211.43 L2095.52 1211.43 L2096.1 1211.43 L2096.69 1211.43 L2097.28 1211.43 L2097.86 1211.43 L2098.45 1211.43 L2099.04 1211.43 L2099.62 1211.43 L2100.21 1211.43 L2100.8 1211.43 L2101.38 1211.43 L2101.97 1211.43 L2102.55 1211.43 L2103.14 1211.43 L2103.73 1211.43 L2104.31 1211.43 L2104.9 1211.43 L2105.49 1211.43 L2106.07 1211.43 L2106.66 1211.43 L2107.25 1211.43 L2107.83 1211.43 L2108.42 1211.43 L2109.01 1211.43 L2109.59 1211.43 L2110.18 1211.43 L2110.76 1211.43 L2111.35 1211.43 L2111.94 1211.43 L2112.52 1211.43 L2113.11 1211.43 L2113.7 1211.43 L2114.28 1211.43 L2114.87 1211.43 L2115.46 1211.43 L2116.04 1211.43 L2116.63 1211.43 L2117.22 1211.43 L2117.8 1211.43 L2118.39 1211.43 L2118.97 1211.43 L2119.56 1211.43 L2120.15 1211.43 L2120.73 1211.43 L2121.32 1211.43 L2121.91 1211.43 L2122.49 1211.43 L2123.08 1211.43 L2123.67 1211.43 L2124.25 1211.43 L2124.84 1211.43 L2125.42 1211.43 L2126.01 1211.43 L2126.6 1211.43 L2127.18 1211.43 L2127.77 1211.43 L2128.36 1211.43 L2128.94 1211.43 L2129.53 1211.43 L2130.12 1211.43 L2130.7 1211.43 L2131.29 1211.43 L2131.88 1211.43 L2132.46 1211.43 L2133.05 1211.43 L2133.63 1211.43 L2134.22 1211.43 L2134.81 1211.43 L2135.39 1211.43 L2135.98 1211.43 L2136.57 1211.43 L2137.15 1211.43 L2137.74 1211.43 L2138.33 1211.43 L2138.91 1211.43 L2139.5 1211.43 L2140.09 1211.43 L2140.67 1211.43 L2141.26 1211.43 L2141.84 1211.43 L2142.43 1211.43 L2143.02 1211.43 L2143.6 1211.43 L2144.19 1211.43 L2144.78 1211.43 L2145.36 1211.43 L2145.95 1211.43 L2146.54 1211.43 L2147.12 1211.43 L2147.71 1211.43 L2148.3 1211.43 L2148.88 1211.43 L2149.47 1211.43 L2150.05 1211.43 L2150.64 1211.43 L2151.23 1211.43 L2151.81 1211.43 L2152.4 1211.43 L2152.99 1211.43 L2153.57 1211.43 L2154.16 1211.43 L2154.75 1211.43 L2155.33 1211.43 L2155.92 1211.43 L2156.5 1211.43 L2157.09 1211.43 L2157.68 1211.43 L2158.26 1211.43 L2158.26 1210.67 L2157.68 1210.67 L2157.09 1210.67 L2156.5 1210.67 L2155.92 1210.67 L2155.33 1210.67 L2154.75 1210.67 L2154.16 1210.67 L2153.57 1210.67 L2152.99 1210.67 L2152.4 1210.67 L2151.81 1210.67 L2151.23 1210.67 L2150.64 1210.67 L2150.05 1210.67 L2149.47 1210.67 L2148.88 1210.67 L2148.3 1210.67 L2147.71 1210.67 L2147.12 1210.67 L2146.54 1210.67 L2145.95 1210.67 L2145.36 1210.67 L2144.78 1210.67 L2144.19 1210.67 L2143.6 1210.67 L2143.02 1210.67 L2142.43 1210.67 L2141.84 1210.67 L2141.26 1210.67 L2140.67 1210.67 L2140.09 1210.67 L2139.5 1210.67 L2138.91 1210.67 L2138.33 1210.67 L2137.74 1210.67 L2137.15 1210.67 L2136.57 1210.67 L2135.98 1210.67 L2135.39 1210.67 L2134.81 1210.67 L2134.22 1210.67 L2133.63 1210.67 L2133.05 1210.67 L2132.46 1210.67 L2131.88 1210.67 L2131.29 1210.67 L2130.7 1210.67 L2130.12 1210.67 L2129.53 1210.67 L2128.94 1210.67 L2128.36 1210.67 L2127.77 1210.67 L2127.18 1210.67 L2126.6 1210.67 L2126.01 1210.67 L2125.42 1210.67 L2124.84 1210.67 L2124.25 1210.67 L2123.67 1210.67 L2123.08 1210.67 L2122.49 1210.67 L2121.91 1210.67 L2121.32 1210.67 L2120.73 1210.67 L2120.15 1210.67 L2119.56 1210.67 L2118.97 1210.67 L2118.39 1210.67 L2117.8 1210.67 L2117.22 1210.67 L2116.63 1210.67 L2116.04 1210.67 L2115.46 1210.67 L2114.87 1210.67 L2114.28 1210.67 L2113.7 1210.67 L2113.11 1210.67 L2112.52 1210.67 L2111.94 1210.67 L2111.35 1210.67 L2110.76 1210.67 L2110.18 1210.67 L2109.59 1210.67 L2109.01 1210.67 L2108.42 1210.67 L2107.83 1210.67 L2107.25 1210.67 L2106.66 1210.67 L2106.07 1210.67 L2105.49 1210.67 L2104.9 1210.67 L2104.31 1210.67 L2103.73 1210.67 L2103.14 1210.67 L2102.55 1210.67 L2101.97 1210.67 L2101.38 1210.67 L2100.8 1210.67 L2100.21 1210.67 L2099.62 1210.67 L2099.04 1210.67 L2098.45 1210.67 L2097.86 1210.67 L2097.28 1210.67 L2096.69 1210.67 L2096.1 1210.67 L2095.52 1210.67 L2094.93 1210.67 L2094.35 1210.67 L2093.76 1210.67 L2093.17 1210.67 L2092.59 1210.67 L2092 1210.67 L2091.41 1210.67 L2090.83 1210.67 L2090.24 1210.67 L2089.65 1210.67 L2089.07 1210.67 L2088.48 1210.67 L2087.89 1210.67 L2087.31 1210.67 L2086.72 1210.67 L2086.14 1210.67 L2085.55 1210.67 L2084.96 1210.67 L2084.38 1210.67 L2083.79 1210.67 L2083.2 1210.67 L2082.62 1210.67 L2082.03 1210.67 L2081.44 1210.67 L2080.86 1210.67 L2080.27 1210.67 L2079.68 1210.67 L2079.1 1210.67 L2078.51 1210.67 L2077.93 1210.67 L2077.34 1210.67 L2076.75 1210.67 L2076.17 1210.67 L2075.58 1210.67 L2074.99 1210.67 L2074.41 1210.67 L2073.82 1210.67 L2073.23 1210.67 L2072.65 1210.67 L2072.06 1210.67 L2071.48 1210.67 L2070.89 1210.67 L2070.3 1210.67 L2069.72 1210.67 L2069.13 1210.67 L2068.54 1210.67 L2067.96 1210.67 L2067.37 1210.67 L2066.78 1210.67 L2066.2 1210.67 L2065.61 1210.67 L2065.02 1210.67 L2064.44 1210.67 L2063.85 1210.67 L2063.27 1210.67 L2062.68 1210.67 L2062.09 1210.67 L2061.51 1210.67 L2060.92 1210.67 L2060.33 1210.67 L2059.75 1210.67 L2059.16 1210.67 L2058.57 1210.67 L2057.99 1210.67 L2057.4 1210.67 L2056.81 1210.67 L2056.23 1210.67 L2055.64 1210.67 L2055.06 1210.67 L2054.47 1210.67 L2053.88 1210.67 L2053.3 1210.67 L2052.71 1210.67 L2052.12 1210.67 L2051.54 1210.67 L2050.95 1210.67 L2050.36 1210.67 L2049.78 1210.67 L2049.19 1210.67 L2048.6 1210.67 L2048.02 1210.67 L2047.43 1210.67 L2046.85 1210.67 L2046.26 1210.67 L2045.67 1210.67 L2045.09 1210.67 L2044.5 1210.67 L2043.91 1210.67 L2043.33 1210.67 L2042.74 1210.67 L2042.15 1210.67 L2041.57 1210.67 L2040.98 1210.67 L2040.4 1210.67 L2039.81 1210.67 L2039.22 1210.67 L2038.64 1210.67 L2038.05 1210.67 L2037.46 1210.67 L2036.88 1210.67 L2036.29 1210.67 L2035.7 1210.67 L2035.12 1210.67 L2034.53 1210.67 L2033.94 1210.67 L2033.36 1210.67 L2032.77 1210.67 L2032.19 1210.67 L2031.6 1210.67 L2031.01 1210.67 L2030.43 1210.67 L2029.84 1210.67 L2029.25 1210.67 L2028.67 1210.67 L2028.08 1210.67 L2027.49 1210.67 L2026.91 1210.67 L2026.32 1210.67 L2025.73 1210.67 L2025.15 1210.67 L2024.56 1210.67 L2023.98 1210.67 L2023.39 1210.67 L2022.8 1210.67 L2022.22 1210.67 L2021.63 1210.67 L2021.04 1210.67 L2020.46 1210.67 L2019.87 1210.67 L2019.28 1210.67 L2018.7 1210.67 L2018.11 1210.67 L2017.53 1210.67 L2016.94 1210.67 L2016.35 1210.67 L2015.77 1210.67 L2015.18 1210.67 L2014.59 1210.67 L2014.01 1210.67 L2013.42 1210.67 L2012.83 1210.67 L2012.25 1210.67 L2011.66 1210.67 L2011.07 1210.67 L2010.49 1210.67 L2009.9 1210.67 L2009.32 1210.67 L2008.73 1210.67 L2008.14 1210.67 L2007.56 1210.67 L2006.97 1210.67 L2006.38 1210.67 L2005.8 1210.67 L2005.21 1210.67 L2004.62 1210.67 L2004.04 1210.67 L2003.45 1210.67 L2002.86 1210.67 L2002.28 1210.67 L2001.69 1210.67 L2001.11 1210.67 L2000.52 1210.67 L1999.93 1210.67 L1999.35 1210.67 L1998.76 1210.67 L1998.17 1210.67 L1997.59 1210.67 L1997 1210.67 L1996.41 1210.67 L1995.83 1210.67 L1995.24 1210.67 L1994.65 1210.67 L1994.07 1210.67 L1993.48 1210.67 L1992.9 1210.67 L1992.31 1210.67 L1991.72 1210.67 L1991.14 1210.67 L1990.55 1210.67 L1989.96 1210.67 L1989.38 1210.67 L1988.79 1210.67 L1988.2 1210.67 L1987.62 1210.67 L1987.03 1210.67 L1986.45 1210.67 L1985.86 1210.67 L1985.27 1210.67 L1984.69 1210.67 L1984.1 1210.67 L1983.51 1210.67 L1982.93 1210.67 L1982.34 1210.67 L1981.75 1210.67 L1981.17 1210.67 L1980.58 1210.67 L1979.99 1210.67 L1979.41 1210.67 L1978.82 1210.67 L1978.24 1210.67 L1977.65 1210.67 L1977.06 1210.67 L1976.48 1210.67 L1975.89 1210.67 L1975.3 1210.67 L1974.72 1210.67 L1974.13 1210.67 L1973.54 1210.67 L1972.96 1210.67 L1972.37 1210.67 L1971.78 1210.67 L1971.2 1210.67 L1970.61 1210.67 L1970.03 1210.67 L1969.44 1210.67 L1968.85 1210.67 L1968.27 1210.67 L1967.68 1210.67 L1967.09 1210.67 L1966.51 1210.67 L1965.92 1210.67 L1965.33 1210.67 L1964.75 1210.67 L1964.16 1210.67 L1963.58 1210.67 L1962.99 1210.67 L1962.4 1210.67 L1961.82 1210.67 L1961.23 1210.67 L1960.64 1210.67 L1960.06 1210.67 L1959.47 1210.67 L1958.88 1210.67 L1958.3 1210.67 L1957.71 1210.67 L1957.12 1210.67 L1956.54 1210.67 L1955.95 1210.67 L1955.37 1210.67 L1954.78 1210.67 L1954.19 1210.67 L1953.61 1210.67 L1953.02 1210.67 L1952.43 1210.67 L1951.85 1210.67 L1951.26 1210.67 L1950.67 1210.67 L1950.09 1210.67 L1949.5 1210.67 L1948.91 1210.67 L1948.33 1210.67 L1947.74 1210.67 L1947.16 1210.67 L1946.57 1210.67 L1945.98 1210.67 L1945.4 1210.67 L1944.81 1210.67 L1944.22 1210.67 L1943.64 1210.67 L1943.05 1210.67 L1942.46 1210.67 L1941.88 1210.67 L1941.29 1210.67 L1940.71 1210.67 L1940.12 1210.67 L1939.53 1210.67 L1938.95 1210.67 L1938.36 1210.67 L1937.77 1210.67 L1937.19 1210.67 L1936.6 1210.67 L1936.01 1210.67 L1935.43 1210.67 L1934.84 1210.67 L1934.25 1210.67 L1933.67 1210.67 L1933.08 1210.67 L1932.5 1210.67 L1931.91 1210.67 L1931.32 1210.67 L1930.74 1210.67 L1930.15 1210.67 L1929.56 1210.67 L1928.98 1210.67 L1928.39 1210.67 L1927.8 1210.67 L1927.22 1210.67 L1926.63 1210.67 L1926.04 1210.67 L1925.46 1210.67 L1924.87 1210.67 L1924.29 1210.67 L1923.7 1210.67 L1923.11 1210.67 L1922.53 1210.67 L1921.94 1210.67 L1921.35 1210.67 L1920.77 1210.67 L1920.18 1210.67 L1919.59 1210.67 L1919.01 1210.67 L1918.42 1210.67 L1917.83 1210.67 L1917.25 1210.67 L1916.66 1210.67 L1916.08 1210.67 L1915.49 1210.67 L1914.9 1210.67 L1914.32 1210.67 L1913.73 1210.67 L1913.14 1210.67 L1912.56 1210.67 L1911.97 1210.67 L1911.38 1210.67 L1910.8 1210.67 L1910.21 1210.67 L1909.63 1210.67 L1909.04 1210.67 L1908.45 1210.67 L1907.87 1210.67 L1907.28 1210.67 L1906.69 1210.67 L1906.11 1210.67 L1905.52 1210.67 L1904.93 1210.67 L1904.35 1210.67 L1903.76 1210.67 L1903.17 1210.67 L1902.59 1210.67 L1902 1210.67 L1901.42 1210.67 L1900.83 1210.67 L1900.24 1210.67 L1899.66 1210.67 L1899.07 1210.67 L1898.48 1210.67 L1897.9 1210.67 L1897.31 1210.67 L1896.72 1210.67 L1896.14 1210.67 L1895.55 1210.67 L1894.96 1210.67 L1894.38 1210.67 L1893.79 1210.67 L1893.21 1210.67 L1892.62 1210.67 L1892.03 1210.67 L1891.45 1210.67 L1890.86 1210.67 L1890.27 1210.67 L1889.69 1210.67 L1889.1 1210.67 L1888.51 1210.67 L1887.93 1210.67 L1887.34 1210.67 L1886.76 1210.67 L1886.17 1210.67 L1885.58 1210.67 L1885 1210.67 L1884.41 1210.67 L1883.82 1210.67 L1883.24 1210.67 L1882.65 1210.67 L1882.06 1210.67 L1881.48 1210.67 L1880.89 1210.67 L1880.3 1210.67 L1879.72 1210.67 L1879.13 1210.67 L1878.55 1210.67 L1877.96 1210.67 L1877.37 1210.67 L1876.79 1210.67 L1876.2 1210.67 L1875.61 1210.67 L1875.03 1210.67 L1874.44 1210.67 L1873.85 1210.67 L1873.27 1210.67 L1872.68 1210.67 L1872.09 1210.67 L1871.51 1210.67 L1870.92 1210.67 L1870.34 1210.67 L1869.75 1210.67 L1869.16 1210.67 L1868.58 1210.67 L1867.99 1210.67 L1867.4 1210.67 L1866.82 1210.67 L1866.23 1210.67 L1865.64 1210.67 L1865.06 1210.67 L1864.47 1210.67 L1863.88 1210.67 L1863.3 1210.67 L1862.71 1210.67 L1862.13 1210.67 L1861.54 1210.67 L1860.95 1210.67 L1860.37 1210.67 L1859.78 1210.67 L1859.19 1210.67 L1858.61 1210.67 L1858.02 1210.67 L1857.43 1210.67 L1856.85 1210.67 L1856.26 1210.67 L1855.68 1210.67 L1855.09 1210.67 L1854.5 1210.67 L1853.92 1210.67 L1853.33 1210.67 L1852.74 1210.67 L1852.16 1210.67 L1851.57 1210.67 L1850.98 1210.67 L1850.4 1210.67 L1849.81 1210.67 L1849.22 1210.67 L1848.64 1210.67 L1848.05 1210.67 L1847.47 1210.67 L1846.88 1210.67 L1846.29 1210.67 L1845.71 1210.67 L1845.12 1210.67 L1844.53 1210.67 L1843.95 1210.67 L1843.36 1210.67 L1842.77 1210.67 L1842.19 1210.67 L1841.6 1210.67 L1841.01 1210.67 L1840.43 1210.67 L1839.84 1210.67 L1839.26 1210.67 L1838.67 1210.67 L1838.08 1210.67 L1837.5 1210.67 L1836.91 1210.67 L1836.32 1210.67 L1835.74 1210.67 L1835.15 1210.67 L1834.56 1210.67 L1833.98 1210.67 L1833.39 1210.67 L1832.81 1210.67 L1832.22 1210.67 L1831.63 1210.67 L1831.05 1210.67 L1830.46 1210.67 L1829.87 1210.67 L1829.29 1210.67 L1828.7 1210.67 L1828.11 1210.67 L1827.53 1210.67 L1826.94 1210.67 L1826.35 1210.67 L1825.77 1210.67 L1825.18 1210.67 L1824.6 1210.67 L1824.01 1210.67 L1823.42 1210.67 L1822.84 1210.67 L1822.25 1210.67 L1821.66 1210.67 L1821.08 1210.67 L1820.49 1210.67 L1819.9 1210.67 L1819.32 1210.67 L1818.73 1210.67 L1818.14 1210.67 L1817.56 1210.67 L1816.97 1210.67 L1816.39 1210.67 L1815.8 1210.67 L1815.21 1210.67 L1814.63 1210.67 L1814.04 1210.67 L1813.45 1210.67 L1812.87 1210.67 L1812.28 1210.67 L1811.69 1210.67 L1811.11 1210.67 L1810.52 1210.67 L1809.94 1210.67 L1809.35 1210.67 L1808.76 1210.67 L1808.18 1210.67 L1807.59 1210.67 L1807 1210.67 L1806.42 1210.67 L1805.83 1210.67 L1805.24 1210.67 L1804.66 1210.67 L1804.07 1210.67 L1803.48 1210.67 L1802.9 1210.67 L1802.31 1210.67 L1801.73 1210.67 L1801.14 1210.67 L1800.55 1210.67 L1799.97 1210.67 L1799.38 1210.67 L1798.79 1210.67 L1798.21 1210.67 L1797.62 1210.67 L1797.03 1210.67 L1796.45 1210.67 L1795.86 1210.67 L1795.27 1210.67 L1794.69 1210.67 L1794.1 1210.67 L1793.52 1210.67 L1792.93 1210.67 L1792.34 1210.67 L1791.76 1210.67 L1791.17 1210.67 L1790.58 1210.67 L1790 1210.67 L1789.41 1210.67 L1788.82 1210.67 L1788.24 1210.67 L1787.65 1210.67 L1787.06 1210.67 L1786.48 1210.67 L1785.89 1210.67 L1785.31 1210.67 L1784.72 1210.67 L1784.13 1210.67 L1783.55 1210.67 L1782.96 1210.67 L1782.37 1210.67 L1781.79 1210.67 L1781.2 1210.67 L1780.61 1210.67 L1780.03 1210.67 L1779.44 1210.67 L1778.86 1210.67 L1778.27 1210.67 L1777.68 1210.67 L1777.1 1210.67 L1776.51 1210.67 L1775.92 1210.67 L1775.34 1210.67 L1774.75 1210.67 L1774.16 1210.67 L1773.58 1210.67 L1772.99 1210.67 L1772.4 1210.67 L1771.82 1210.67 L1771.23 1210.67 L1770.65 1210.67 L1770.06 1210.67 L1769.47 1210.67 L1768.89 1210.67 L1768.3 1210.67 L1767.71 1210.67 L1767.13 1210.67 L1766.54 1210.67 L1765.95 1210.67 L1765.37 1210.67 L1764.78 1210.67 L1764.19 1210.67 L1763.61 1210.67 L1763.02 1210.67 L1762.44 1210.67 L1761.85 1210.67 L1761.26 1210.67 L1760.68 1210.67 L1760.09 1210.67 L1759.5 1210.67 L1758.92 1210.67 L1758.33 1210.67 L1757.74 1210.67 L1757.16 1210.67 L1756.57 1210.67 L1755.99 1210.67 L1755.4 1210.67 L1754.81 1210.67 L1754.23 1210.67 L1753.64 1210.67 L1753.05 1210.67 L1752.47 1210.67 L1751.88 1210.67 L1751.29 1210.67 L1750.71 1210.67 L1750.12 1210.67 L1749.53 1210.67 L1748.95 1210.67 L1748.36 1210.67 L1747.78 1210.67 L1747.19 1210.67 L1746.6 1210.67 L1746.02 1210.67 L1745.43 1210.67 L1744.84 1210.67 L1744.26 1210.67 L1743.67 1210.67 L1743.08 1210.67 L1742.5 1210.67 L1741.91 1210.67 L1741.32 1210.67 L1740.74 1210.67 L1740.15 1210.67 L1739.57 1210.67 L1738.98 1210.67 L1738.39 1210.67 L1737.81 1210.67 L1737.22 1210.67 L1736.63 1210.67 L1736.05 1210.67 L1735.46 1210.67 L1734.87 1210.67 L1734.29 1210.67 L1733.7 1210.67 L1733.11 1210.67 L1732.53 1210.67 L1731.94 1210.67 L1731.36 1210.67 L1730.77 1210.67 L1730.18 1210.67 L1729.6 1210.67 L1729.01 1210.67 L1728.42 1210.67 L1727.84 1210.67 L1727.25 1210.67 L1726.66 1210.67 L1726.08 1210.67 L1725.49 1210.67 L1724.91 1210.67 L1724.32 1210.67 L1723.73 1210.67 L1723.15 1210.67 L1722.56 1210.67 L1721.97 1210.67 L1721.39 1210.67 L1720.8 1210.67 L1720.21 1210.67 L1719.63 1210.67 L1719.04 1210.67 L1718.45 1210.67 L1717.87 1210.67 L1717.28 1210.67 L1716.7 1210.67 L1716.11 1210.67 L1715.52 1210.67 L1714.94 1210.67 L1714.35 1210.67 L1713.76 1210.67 L1713.18 1210.67 L1712.59 1210.67 L1712 1210.67 L1711.42 1210.67 L1710.83 1210.67 L1710.24 1210.67 L1709.66 1210.67 L1709.07 1210.67 L1708.49 1210.67 L1707.9 1210.67 L1707.31 1210.67 L1706.73 1210.67 L1706.14 1210.67 L1705.55 1210.67 L1704.97 1210.67 L1704.38 1210.67 L1703.79 1210.67 L1703.21 1210.67 L1702.62 1210.67 L1702.04 1210.67 L1701.45 1210.67 L1700.86 1210.67 L1700.28 1210.67 L1699.69 1210.67 L1699.1 1210.67 L1698.52 1210.67 L1697.93 1210.67 L1697.34 1210.67 L1696.76 1210.67 L1696.17 1210.67 L1695.58 1210.67 L1695 1210.67 L1694.41 1210.67 L1693.83 1210.67 L1693.24 1210.67 L1692.65 1210.67 L1692.07 1210.67 L1691.48 1210.67 L1690.89 1210.67 L1690.31 1210.67 L1689.72 1210.67 L1689.13 1210.67 L1688.55 1210.67 L1687.96 1210.67 L1687.37 1210.67 L1686.79 1210.67 L1686.2 1210.67 L1685.62 1210.67 L1685.03 1210.67 L1684.44 1210.67 L1683.86 1210.67 L1683.27 1210.67 L1682.68 1210.67 L1682.1 1210.67 L1681.51 1210.67 L1680.92 1210.67 L1680.34 1210.67 L1679.75 1210.67 L1679.17 1210.67 L1678.58 1210.67 L1677.99 1210.67 L1677.41 1210.67 L1676.82 1210.67 L1676.23 1210.67 L1675.65 1210.67 L1675.06 1210.67 L1674.47 1210.67 L1673.89 1210.67 L1673.3 1210.67 L1672.71 1210.67 L1672.13 1210.67 L1671.54 1210.67 L1670.96 1210.67 L1670.37 1210.67 L1669.78 1210.67 L1669.2 1210.67 L1668.61 1210.67 L1668.02 1210.67 L1667.44 1210.67 L1666.85 1210.67 L1666.26 1210.67 L1665.68 1210.67 L1665.09 1210.67 L1664.5 1210.67 L1663.92 1210.67 L1663.33 1210.67 L1662.75 1210.67 L1662.16 1210.67 L1661.57 1210.67 L1660.99 1210.67 L1660.4 1210.67 L1659.81 1210.67 L1659.23 1210.67 L1658.64 1210.67 L1658.05 1210.67 L1657.47 1210.67 L1656.88 1210.67 L1656.29 1210.67 L1655.71 1210.67 L1655.12 1210.67 L1654.54 1210.67 L1653.95 1210.67 L1653.36 1210.67 L1652.78 1210.67 L1652.19 1210.67 L1651.6 1210.67 L1651.02 1210.67 L1650.43 1210.67 L1649.84 1210.67 L1649.26 1210.67 L1648.67 1210.67 L1648.09 1210.67 L1647.5 1210.67 L1646.91 1210.67 L1646.33 1210.67 L1645.74 1210.67 L1645.15 1210.67 L1644.57 1210.67 L1643.98 1210.67 L1643.39 1210.67 L1642.81 1210.67 L1642.22 1210.67 L1641.63 1210.67 L1641.05 1210.67 L1640.46 1210.67 L1639.88 1210.67 L1639.29 1210.67 L1638.7 1210.67 L1638.12 1210.67 L1637.53 1210.67 L1636.94 1210.67 L1636.36 1210.67 L1635.77 1210.67 L1635.18 1210.67 L1634.6 1210.67 L1634.01 1210.67 L1633.42 1210.67 L1632.84 1210.67 L1632.25 1210.67 L1631.67 1210.67 L1631.08 1210.67 L1630.49 1210.67 L1629.91 1210.67 L1629.32 1210.67 L1628.73 1210.67 L1628.15 1210.67 L1627.56 1210.67 L1626.97 1210.67 L1626.39 1210.67 L1625.8 1210.67 L1625.22 1210.67 L1624.63 1210.67 L1624.04 1210.67 L1623.46 1210.67 L1622.87 1210.67 L1622.28 1210.67 L1621.7 1210.67 L1621.11 1210.67 L1620.52 1210.67 L1619.94 1210.67 L1619.35 1210.67 L1618.76 1210.67 L1618.18 1210.67 L1617.59 1210.67 L1617.01 1210.67 L1616.42 1210.67 L1615.83 1210.67 L1615.25 1210.67 L1614.66 1210.67 L1614.07 1210.67 L1613.49 1210.67 L1612.9 1210.67 L1612.31 1210.67 L1611.73 1210.67 L1611.14 1210.67 L1610.55 1210.67 L1609.97 1210.67 L1609.38 1210.67 L1608.8 1210.67 L1608.21 1210.67 L1607.62 1210.67 L1607.04 1210.67 L1606.45 1210.67 L1605.86 1210.67 L1605.28 1210.67 L1604.69 1210.67 L1604.1 1210.67 L1603.52 1210.67 L1602.93 1210.67 L1602.34 1210.67 L1601.76 1210.67 L1601.17 1210.67 L1600.59 1210.67 L1600 1210.67 L1599.41 1210.67 L1598.83 1210.67 L1598.24 1210.67 L1597.65 1210.67 L1597.07 1210.67 L1596.48 1210.67 L1595.89 1210.67 L1595.31 1210.67 L1594.72 1210.67 L1594.14 1210.67 L1593.55 1210.67 L1592.96 1210.67 L1592.38 1210.67 L1591.79 1210.67 L1591.2 1210.67 L1590.62 1210.67 L1590.03 1210.67 L1589.44 1210.67 L1588.86 1210.67 L1588.27 1210.67 L1587.68 1210.67 L1587.1 1210.67 L1586.51 1210.67 L1585.93 1210.67 L1585.34 1210.67 L1584.75 1210.67 L1584.17 1210.67 L1583.58 1210.67 L1582.99 1210.67 L1582.41 1210.67 L1581.82 1210.67 L1581.23 1210.67 L1580.65 1210.67 L1580.06 1210.67 L1579.47 1210.67 L1578.89 1210.67 L1578.3 1210.67 L1577.72 1210.67 L1577.13 1210.67 L1576.54 1210.67 L1575.96 1210.67 L1575.37 1210.67 L1574.78 1210.67 L1574.2 1210.67 L1573.61 1210.67 L1573.02 1210.67 L1572.44 1210.67 L1571.85 1210.67 L1571.27 1210.67 L1570.68 1210.67 L1570.09 1210.67 L1569.51 1210.67 L1568.92 1210.67 L1568.33 1210.67 L1567.75 1210.67 L1567.16 1210.67 L1566.57 1210.67 L1565.99 1210.67 L1565.4 1210.67 L1564.81 1210.67 L1564.23 1210.67 L1563.64 1210.67 L1563.06 1210.67 L1562.47 1210.67 L1561.88 1210.67 L1561.3 1210.67 L1560.71 1210.67 L1560.12 1210.67 L1559.54 1210.67 L1558.95 1210.67 L1558.36 1210.67 L1557.78 1210.67 L1557.19 1210.67 L1556.6 1210.67 L1556.02 1210.67 L1555.43 1210.67 L1554.85 1210.67 L1554.26 1210.67 L1553.67 1210.67 L1553.09 1210.67 L1552.5 1210.67 L1551.91 1210.67 L1551.33 1210.67 L1550.74 1210.67 L1550.15 1210.67 L1549.57 1210.67 L1548.98 1210.67 L1548.4 1210.67 L1547.81 1210.67 L1547.22 1210.67 L1546.64 1210.67 L1546.05 1210.67 L1545.46 1210.67 L1544.88 1210.67 L1544.29 1210.67 L1543.7 1210.67 L1543.12 1210.67 L1542.53 1210.67 L1541.94 1210.67 L1541.36 1210.67 L1540.77 1210.67 L1540.19 1210.67 L1539.6 1210.67 L1539.01 1210.67 L1538.43 1210.67 L1537.84 1210.67 L1537.25 1210.67 L1536.67 1210.67 L1536.08 1210.67 L1535.49 1210.67 L1534.91 1210.67 L1534.32 1210.67 L1533.73 1210.67 L1533.15 1210.67 L1532.56 1210.67 L1531.98 1210.67 L1531.39 1210.67 L1530.8 1210.67 L1530.22 1210.67 L1529.63 1210.67 L1529.04 1210.67 L1528.46 1210.67 L1527.87 1210.67 L1527.28 1210.67 L1526.7 1210.67 L1526.11 1210.67 L1525.52 1210.67 L1524.94 1210.67 L1524.35 1210.67 L1523.77 1210.67 L1523.18 1210.67 L1522.59 1210.67 L1522.01 1210.67 L1521.42 1210.67 L1520.83 1210.67 L1520.25 1210.67 L1519.66 1210.67 L1519.07 1210.67 L1518.49 1210.67 L1517.9 1210.67 L1517.32 1210.67 L1516.73 1210.67 L1516.14 1210.67 L1515.56 1210.67 L1514.97 1210.67 L1514.38 1210.67 L1513.8 1210.67 L1513.21 1210.67 L1512.62 1210.67 L1512.04 1210.67 L1511.45 1210.67 L1510.86 1210.67 L1510.28 1210.67 L1509.69 1210.67 L1509.11 1210.67 L1508.52 1210.67 L1507.93 1210.67 L1507.35 1210.67 L1506.76 1210.67 L1506.17 1210.67 L1505.59 1210.67 L1505 1210.67 L1504.41 1210.67 L1503.83 1210.67 L1503.24 1210.67 L1502.65 1210.67 L1502.07 1210.67 L1501.48 1210.67 L1500.9 1210.67 L1500.31 1210.67 L1499.72 1210.67 L1499.14 1210.67 L1498.55 1210.67 L1497.96 1210.67 L1497.38 1210.67 L1496.79 1210.67 L1496.2 1210.67 L1495.62 1210.67 L1495.03 1210.67 L1494.45 1210.67 L1493.86 1210.67 L1493.27 1210.67 L1492.69 1210.67 L1492.1 1210.67 L1491.51 1210.67 L1490.93 1210.67 L1490.34 1210.67 L1489.75 1210.67 L1489.17 1210.67 L1488.58 1210.67 L1487.99 1210.67 L1487.41 1210.67 L1486.82 1210.67 L1486.24 1210.67 L1485.65 1210.67 L1485.06 1210.67 L1484.48 1210.67 L1483.89 1210.67 L1483.3 1210.67 L1482.72 1210.67 L1482.13 1210.67 L1481.54 1210.67 L1480.96 1210.67 L1480.37 1210.67 L1479.78 1210.67 L1479.2 1210.67 L1478.61 1210.67 L1478.03 1210.67 L1477.44 1210.67 L1476.85 1210.67 L1476.27 1210.67 L1475.68 1210.67 L1475.09 1210.67 L1474.51 1210.67 L1473.92 1210.67 L1473.33 1210.67 L1472.75 1210.67 L1472.16 1210.67 L1471.57 1210.67 L1470.99 1210.67 L1470.4 1210.67 L1469.82 1210.67 L1469.23 1210.67 L1468.64 1210.67 L1468.06 1210.67 L1467.47 1210.67 L1466.88 1210.67 L1466.3 1210.67 L1465.71 1210.67 L1465.12 1210.67 L1464.54 1210.67 L1463.95 1210.67 L1463.37 1210.67 L1462.78 1210.67 L1462.19 1210.67 L1461.61 1210.67 L1461.02 1210.67 L1460.43 1210.67 L1459.85 1210.67 L1459.26 1210.67 L1458.67 1210.67 L1458.09 1210.67 L1457.5 1210.67 L1456.91 1210.67 L1456.33 1210.67 L1455.74 1210.67 L1455.16 1210.67 L1454.57 1210.67 L1453.98 1210.67 L1453.4 1210.67 L1452.81 1210.67 L1452.22 1210.67 L1451.64 1210.67 L1451.05 1210.67 L1450.46 1210.67 L1449.88 1210.67 L1449.29 1210.67 L1448.7 1210.67 L1448.12 1210.67 L1447.53 1210.67 L1446.95 1210.67 L1446.36 1210.67 L1445.77 1210.67 L1445.19 1210.67 L1444.6 1210.67 L1444.01 1210.67 L1443.43 1210.67 L1442.84 1210.67 L1442.25 1210.67 L1441.67 1210.67 L1441.08 1210.67 L1440.5 1210.67 L1439.91 1210.67 L1439.32 1210.67 L1438.74 1210.67 L1438.15 1210.67 L1437.56 1210.67 L1436.98 1210.67 L1436.39 1210.67 L1435.8 1210.67 L1435.22 1210.67 L1434.63 1210.67 L1434.04 1210.67 L1433.46 1210.67 L1432.87 1210.67 L1432.29 1210.67 L1431.7 1210.67 L1431.11 1210.67 L1430.53 1210.67 L1429.94 1210.67 L1429.35 1210.67 L1428.77 1210.67 L1428.18 1210.67 L1427.59 1210.67 L1427.01 1210.67 L1426.42 1210.67 L1425.83 1210.67 L1425.25 1210.67 L1424.66 1210.67 L1424.08 1210.67 L1423.49 1210.67 L1422.9 1210.67 L1422.32 1210.67 L1421.73 1210.67 L1421.14 1210.67 L1420.56 1210.67 L1419.97 1210.67 L1419.38 1210.67 L1418.8 1210.67 L1418.21 1210.67 L1417.63 1210.67 L1417.04 1210.67 L1416.45 1210.67 L1415.87 1210.67 L1415.28 1210.67 L1414.69 1210.67 L1414.11 1210.67 L1413.52 1210.67 L1412.93 1210.67 L1412.35 1210.67 L1411.76 1210.67 L1411.17 1210.67 L1410.59 1210.67 L1410 1210.67 L1409.42 1210.67 L1408.83 1210.67 L1408.24 1210.67 L1407.66 1210.67 L1407.07 1210.67 L1406.48 1210.67 L1405.9 1210.67 L1405.31 1210.67 L1404.72 1210.67 L1404.14 1210.67 L1403.55 1210.67 L1402.96 1210.67 L1402.38 1210.67 L1401.79 1210.67 L1401.21 1210.67 L1400.62 1210.67 L1400.03 1210.67 L1399.45 1210.67 L1398.86 1210.67 L1398.27 1210.67 L1397.69 1210.67 L1397.1 1210.67 L1396.51 1210.67 L1395.93 1210.67 L1395.34 1210.67 L1394.75 1210.67 L1394.17 1210.67 L1393.58 1210.67 L1393 1210.67 L1392.41 1210.67 L1391.82 1210.67 L1391.24 1210.67 L1390.65 1210.67 L1390.06 1210.67 L1389.48 1210.67 L1388.89 1210.67 L1388.3 1210.67 L1387.72 1210.67 L1387.13 1210.67 L1386.55 1210.67 L1385.96 1210.67 L1385.37 1210.67 L1384.79 1210.67 L1384.2 1210.67 L1383.61 1210.67 L1383.03 1210.67 L1382.44 1210.67 L1381.85 1210.67 L1381.27 1210.67 L1380.68 1210.67 L1380.09 1210.67 L1379.51 1210.67 L1378.92 1210.67 L1378.34 1210.67 L1377.75 1210.67 L1377.16 1210.67 L1376.58 1210.67 L1375.99 1210.67 L1375.4 1210.67 L1374.82 1210.67 L1374.23 1210.67 L1373.64 1210.67 L1373.06 1210.67 L1372.47 1210.67 L1371.88 1210.67 L1371.3 1210.67 L1370.71 1210.67 L1370.13 1210.67 L1369.54 1210.67 L1368.95 1210.67 L1368.37 1210.67 L1367.78 1210.67 L1367.19 1210.67 L1366.61 1210.67 L1366.02 1210.67 L1365.43 1210.67 L1364.85 1210.67 L1364.26 1210.67 L1363.68 1210.67 L1363.09 1210.67 L1362.5 1210.67 L1361.92 1210.67 L1361.33 1210.67 L1360.74 1210.67 L1360.16 1210.67 L1359.57 1210.67 L1358.98 1210.67 L1358.4 1210.67 L1357.81 1210.67 L1357.22 1210.67 L1356.64 1210.67 L1356.05 1210.67 L1355.47 1210.67 L1354.88 1210.67 L1354.29 1210.67 L1353.71 1210.67 L1353.12 1210.67 L1352.53 1210.67 L1351.95 1210.67 L1351.36 1210.67 L1350.77 1210.67 L1350.19 1210.67 L1349.6 1210.67 L1349.01 1210.67 L1348.43 1210.67 L1347.84 1210.67 L1347.26 1210.67 L1346.67 1210.67 L1346.08 1210.67 L1345.5 1210.67 L1344.91 1210.67 L1344.32 1210.67 L1343.74 1210.67 L1343.15 1210.67 L1342.56 1210.67 L1341.98 1210.67 L1341.39 1210.67 L1340.8 1210.67 L1340.22 1210.67 L1339.63 1210.67 L1339.05 1210.67 L1338.46 1210.67 L1337.87 1210.67 L1337.29 1210.67 L1336.7 1210.67 L1336.11 1210.67 L1335.53 1210.67 L1334.94 1210.67 L1334.35 1210.67 L1333.77 1210.67 L1333.18 1210.67 L1332.6 1210.67 L1332.01 1210.67 L1331.42 1210.67 L1330.84 1210.67 L1330.25 1210.67 L1329.66 1210.67 L1329.08 1210.67 L1328.49 1210.67 L1327.9 1210.67 L1327.32 1210.67 L1326.73 1210.67 L1326.14 1210.67 L1325.56 1210.67 L1324.97 1210.67 L1324.39 1210.67 L1323.8 1210.67 L1323.21 1210.67 L1322.63 1210.67 L1322.04 1210.67 L1321.45 1210.67 L1320.87 1210.67 L1320.28 1210.67 L1319.69 1210.67 L1319.11 1210.67 L1318.52 1210.67 L1317.93 1210.67 L1317.35 1210.67 L1316.76 1210.67 L1316.18 1210.67 L1315.59 1210.67 L1315 1210.67 L1314.42 1210.67 L1313.83 1210.67 L1313.24 1210.67 L1312.66 1210.67 L1312.07 1210.67 L1311.48 1210.67 L1310.9 1210.67 L1310.31 1210.67 L1309.73 1210.67 L1309.14 1210.67 L1308.55 1210.67 L1307.97 1210.67 L1307.38 1210.67 L1306.79 1210.67 L1306.21 1210.67 L1305.62 1210.67 L1305.03 1210.67 L1304.45 1210.67 L1303.86 1210.67 L1303.27 1210.67 L1302.69 1210.67 L1302.1 1210.67 L1301.52 1210.67 L1300.93 1210.67 L1300.34 1210.67 L1299.76 1210.67 L1299.17 1210.67 L1298.58 1210.67 L1298 1210.67 L1297.41 1210.67 L1296.82 1210.67 L1296.24 1210.67 L1295.65 1210.67 L1295.06 1210.67 L1294.48 1210.67 L1293.89 1210.67 L1293.31 1210.67 L1292.72 1210.67 L1292.13 1210.67 L1291.55 1210.67 L1290.96 1210.67 L1290.37 1210.67 L1289.79 1210.67 L1289.2 1210.67 L1288.61 1210.67 L1288.03 1210.67 L1287.44 1210.67 L1286.86 1210.67 L1286.27 1210.67 L1285.68 1210.67 L1285.1 1210.67 L1284.51 1210.67 L1283.92 1210.67 L1283.34 1210.67 L1282.75 1210.67 L1282.16 1210.67 L1281.58 1210.67 L1280.99 1210.67 L1280.4 1210.67 L1279.82 1210.67 L1279.23 1210.67 L1278.65 1210.67 L1278.06 1210.67 L1277.47 1210.67 L1276.89 1210.67 L1276.3 1210.67 L1275.71 1210.67 L1275.13 1210.67 L1274.54 1210.67 L1273.95 1210.67 L1273.37 1210.67 L1272.78 1210.67 L1272.19 1210.67 L1271.61 1210.67 L1271.02 1210.67 L1270.44 1210.67 L1269.85 1210.67 L1269.26 1210.67 L1268.68 1210.67 L1268.09 1210.67 L1267.5 1210.67 L1266.92 1210.67 L1266.33 1210.67 L1265.74 1210.67 L1265.16 1210.67 L1264.57 1210.67 L1263.98 1210.67 L1263.4 1210.67 L1262.81 1210.67 L1262.23 1210.67 L1261.64 1210.67 L1261.05 1210.67 L1260.47 1210.67 L1259.88 1210.67 L1259.29 1210.67 L1258.71 1210.67 L1258.12 1210.67 L1257.53 1210.67 L1256.95 1210.67 L1256.36 1210.67 L1255.78 1210.67 L1255.19 1210.67 L1254.6 1210.67 L1254.02 1210.67 L1253.43 1210.67 L1252.84 1210.67 L1252.26 1210.67 L1251.67 1210.67 L1251.08 1210.67 L1250.5 1210.67 L1249.91 1210.67 L1249.32 1210.67 L1248.74 1210.67 L1248.15 1210.67 L1247.57 1210.67 L1246.98 1210.67 L1246.39 1210.67 L1245.81 1210.67 L1245.22 1210.67 L1244.63 1210.67 L1244.05 1210.67 L1243.46 1210.67 L1242.87 1210.67 L1242.29 1210.67 L1241.7 1210.67 L1241.11 1210.67 L1240.53 1210.67 L1239.94 1210.67 L1239.36 1210.67 L1238.77 1210.67 L1238.18 1210.67 L1237.6 1210.67 L1237.01 1210.67 L1236.42 1210.67 L1235.84 1210.67 L1235.25 1210.67 L1234.66 1210.67 L1234.08 1210.67 L1233.49 1210.67 L1232.91 1210.67 L1232.32 1210.67 L1231.73 1210.67 L1231.15 1210.67 L1230.56 1210.67 L1229.97 1210.67 L1229.39 1210.67 L1228.8 1210.67 L1228.21 1210.67 L1227.63 1210.67 L1227.04 1210.67 L1226.45 1210.67 L1225.87 1210.67 L1225.28 1210.67 L1224.7 1210.67 L1224.11 1210.67 L1223.52 1210.67 L1222.94 1210.67 L1222.35 1210.67 L1221.76 1210.67 L1221.18 1210.67 L1220.59 1210.67 L1220 1210.67 L1219.42 1210.67 L1218.83 1210.67 L1218.24 1210.67 L1217.66 1210.67 L1217.07 1210.67 L1216.49 1210.67 L1215.9 1210.67 L1215.31 1210.67 L1214.73 1210.67 L1214.14 1210.67 L1213.55 1210.67 L1212.97 1210.67 L1212.38 1210.67 L1211.79 1210.67 L1211.21 1210.67 L1210.62 1210.67 L1210.03 1210.67 L1209.45 1210.67 L1208.86 1210.67 L1208.28 1210.67 L1207.69 1210.67 L1207.1 1210.67 L1206.52 1210.67 L1205.93 1210.67 L1205.34 1210.67 L1204.76 1210.67 L1204.17 1210.67 L1203.58 1210.67 L1203 1210.67 L1202.41 1210.67 L1201.83 1210.67 L1201.24 1210.67 L1200.65 1210.67 L1200.07 1210.67 L1199.48 1210.67 L1198.89 1210.67 L1198.31 1210.67 L1197.72 1210.67 L1197.13 1210.67 L1196.55 1210.67 L1195.96 1210.67 L1195.37 1210.67 L1194.79 1210.67 L1194.2 1210.67 L1193.62 1210.67 L1193.03 1210.67 L1192.44 1210.67 L1191.86 1210.67 L1191.27 1210.67 L1190.68 1210.67 L1190.1 1210.67 L1189.51 1210.67 L1188.92 1210.67 L1188.34 1210.67 L1187.75 1210.67 L1187.16 1210.67 L1186.58 1210.67 L1185.99 1210.67 L1185.41 1210.67 L1184.82 1210.67 L1184.23 1210.67 L1183.65 1210.67 L1183.06 1210.67 L1182.47 1210.67 L1181.89 1210.67 L1181.3 1210.67 L1180.71 1210.67 L1180.13 1210.67 L1179.54 1210.67 L1178.96 1210.67 L1178.37 1210.67 L1177.78 1210.67 L1177.2 1210.67 L1176.61 1210.67 L1176.02 1210.67 L1175.44 1210.67 L1174.85 1210.67 L1174.26 1210.67 L1173.68 1210.67 L1173.09 1210.67 L1172.5 1210.67 L1171.92 1210.67 L1171.33 1210.67 L1170.75 1210.67 L1170.16 1210.67 L1169.57 1210.67 L1168.99 1210.67 L1168.4 1210.67 L1167.81 1210.67 L1167.23 1210.67 L1166.64 1210.67 L1166.05 1210.67 L1165.47 1210.67 L1164.88 1210.67 L1164.29 1210.67 L1163.71 1210.67 L1163.12 1210.67 L1162.54 1210.67 L1161.95 1210.67 L1161.36 1210.67 L1160.78 1210.67 L1160.19 1210.67 L1159.6 1210.67 L1159.02 1210.67 L1158.43 1210.67 L1157.84 1210.67 L1157.26 1210.67 L1156.67 1210.67 L1156.09 1210.67 L1155.5 1210.67 L1154.91 1210.67 L1154.33 1210.67 L1153.74 1210.67 L1153.15 1210.67 L1152.57 1210.67 L1151.98 1210.67 L1151.39 1210.67 L1150.81 1210.67 L1150.22 1210.67 L1149.63 1210.67 L1149.05 1210.67 L1148.46 1210.67 L1147.88 1210.67 L1147.29 1210.67 L1146.7 1210.67 L1146.12 1210.67 L1145.53 1210.67 L1144.94 1210.67 L1144.36 1210.67 L1143.77 1210.67 L1143.18 1210.67 L1142.6 1210.67 L1142.01 1210.67 L1141.42 1210.67 L1140.84 1210.67 L1140.25 1210.67 L1139.67 1210.67 L1139.08 1210.67 L1138.49 1210.67 L1137.91 1210.67 L1137.32 1210.67 L1136.73 1210.67 L1136.15 1210.67 L1135.56 1210.67 L1134.97 1210.67 L1134.39 1210.67 L1133.8 1210.67 L1133.21 1210.67 L1132.63 1210.67 L1132.04 1210.67 L1131.46 1210.67 L1130.87 1210.67 L1130.28 1210.67 L1129.7 1210.67 L1129.11 1210.67 L1128.52 1210.67 L1127.94 1210.67 L1127.35 1210.67 L1126.76 1210.67 L1126.18 1210.67 L1125.59 1210.67 L1125.01 1210.67 L1124.42 1210.67 L1123.83 1210.67 L1123.25 1210.67 L1122.66 1210.67 L1122.07 1210.67 L1121.49 1210.67 L1120.9 1210.67 L1120.31 1210.67 L1119.73 1210.67 L1119.14 1210.67 L1118.55 1210.67 L1117.97 1210.67 L1117.38 1210.67 L1116.8 1210.67 L1116.21 1210.67 L1115.62 1210.67 L1115.04 1210.67 L1114.45 1210.67 L1113.86 1210.67 L1113.28 1210.67 L1112.69 1210.67 L1112.1 1210.67 L1111.52 1210.67 L1110.93 1210.67 L1110.34 1210.67 L1109.76 1210.67 L1109.17 1210.67 L1108.59 1210.67 L1108 1210.67 L1107.41 1210.67 L1106.83 1210.67 L1106.24 1210.67 L1105.65 1210.67 L1105.07 1210.67 L1104.48 1210.67 L1103.89 1210.67 L1103.31 1210.67 L1102.72 1210.67 L1102.14 1210.67 L1101.55 1210.67 L1100.96 1210.67 L1100.38 1210.67 L1099.79 1210.67 L1099.2 1210.67 L1098.62 1210.67 L1098.03 1210.67 L1097.44 1210.67 L1096.86 1210.67 L1096.27 1210.67 L1095.68 1210.67 L1095.1 1210.67 L1094.51 1210.67 L1093.93 1210.67 L1093.34 1210.67 L1092.75 1210.67 L1092.17 1210.67 L1091.58 1210.67 L1090.99 1210.67 L1090.41 1210.67 L1089.82 1210.67 L1089.23 1210.67 L1088.65 1210.67 L1088.06 1210.67 L1087.47 1210.67 L1086.89 1210.67 L1086.3 1210.67 L1085.72 1210.67 L1085.13 1210.67 L1084.54 1210.67 L1083.96 1210.67 L1083.37 1210.67 L1082.78 1210.67 L1082.2 1210.67 L1081.61 1210.67 L1081.02 1210.67 L1080.44 1210.67 L1079.85 1210.67 L1079.26 1210.67 L1078.68 1210.67 L1078.09 1210.67 L1077.51 1210.67 L1076.92 1210.67 L1076.33 1210.67 L1075.75 1210.67 L1075.16 1210.67 L1074.57 1210.67 L1073.99 1210.67 L1073.4 1210.67 L1072.81 1210.67 L1072.23 1210.67 L1071.64 1210.67 L1071.06 1210.67 L1070.47 1210.67 L1069.88 1210.67 L1069.3 1210.67 L1068.71 1210.67 L1068.12 1210.67 L1067.54 1210.67 L1066.95 1210.67 L1066.36 1210.67 L1065.78 1210.67 L1065.19 1210.67 L1064.6 1210.67 L1064.02 1210.67 L1063.43 1210.67 L1062.85 1210.67 L1062.26 1210.67 L1061.67 1210.67 L1061.09 1210.67 L1060.5 1210.67 L1059.91 1210.67 L1059.33 1210.67 L1058.74 1210.67 L1058.15 1210.67 L1057.57 1210.67 L1056.98 1210.67 L1056.39 1210.67 L1055.81 1210.67 L1055.22 1210.67 L1054.64 1210.67 L1054.05 1210.67 L1053.46 1210.67 L1052.88 1210.67 L1052.29 1210.67 L1051.7 1210.67 L1051.12 1210.67 L1050.53 1210.67 L1049.94 1210.67 L1049.36 1210.67 L1048.77 1210.67 L1048.19 1210.67 L1047.6 1210.67 L1047.01 1210.67 L1046.43 1210.67 L1045.84 1210.67 L1045.25 1210.67 L1044.67 1210.67 L1044.08 1210.67 L1043.49 1210.67 L1042.91 1210.67 L1042.32 1210.67 L1041.73 1210.67 L1041.15 1210.67 L1040.56 1210.67 L1039.98 1210.67 L1039.39 1210.67 L1038.8 1210.67 L1038.22 1210.67 L1037.63 1210.67 L1037.04 1210.67 L1036.46 1210.67 L1035.87 1210.67 L1035.28 1210.67 L1034.7 1210.67 L1034.11 1210.67 L1033.52 1210.67 L1032.94 1210.67 L1032.35 1210.67 L1031.77 1210.67 L1031.18 1210.67 L1030.59 1210.67 L1030.01 1210.67 L1029.42 1210.67 L1028.83 1210.67 L1028.25 1210.67 L1027.66 1210.67 L1027.07 1210.67 L1026.49 1210.67 L1025.9 1210.67 L1025.32 1210.67 L1024.73 1210.67 L1024.14 1210.67 L1023.56 1210.67 L1022.97 1210.67 L1022.38 1210.67 L1021.8 1210.67 L1021.21 1210.67 L1020.62 1210.67 L1020.04 1210.67 L1019.45 1210.67 L1018.86 1210.67 L1018.28 1210.67 L1017.69 1210.67 L1017.11 1210.67 L1016.52 1210.67 L1015.93 1210.67 L1015.35 1210.67 L1014.76 1210.67 L1014.17 1210.67 L1013.59 1210.67 L1013 1210.67 L1012.41 1210.67 L1011.83 1210.67 L1011.24 1210.67 L1010.65 1210.67 L1010.07 1210.67 L1009.48 1210.67 L1008.9 1210.67 L1008.31 1210.67 L1007.72 1210.67 L1007.14 1210.67 L1006.55 1210.67 L1005.96 1210.67 L1005.38 1210.67 L1004.79 1210.67 L1004.2 1210.67 L1003.62 1210.67 L1003.03 1210.67 L1002.44 1210.67 L1001.86 1210.67 L1001.27 1210.67 L1000.69 1210.67 L1000.1 1210.67 L999.513 1210.67 L998.926 1210.67 L998.34 1210.67 L997.754 1210.67 L997.167 1210.67 L996.581 1210.67 L995.994 1210.67 L995.408 1210.67 L994.822 1210.67 L994.235 1210.67 L993.649 1210.67 L993.062 1210.67 L992.476 1210.67 L991.889 1210.67 L991.303 1210.67 L990.717 1210.67 L990.13 1210.67 L989.544 1210.67 L988.957 1210.67 L988.371 1210.67 L987.785 1210.67 L987.198 1210.67 L986.612 1210.67 L986.025 1210.67  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.05 986.612,1211.05 987.198,1211.05 987.785,1211.05 988.371,1211.05 988.957,1211.05 989.544,1211.05 990.13,1211.05 990.717,1211.05 991.303,1211.05 991.889,1211.05 992.476,1211.05 993.062,1211.05 993.649,1211.05 994.235,1211.05 994.822,1211.05 995.408,1211.05 995.994,1211.05 996.581,1211.05 997.167,1211.05 997.754,1211.05 998.34,1211.05 998.926,1211.05 999.513,1211.05 1000.1,1211.05 1000.69,1211.05 1001.27,1211.05 1001.86,1211.05 1002.44,1211.05 1003.03,1211.05 1003.62,1211.05 1004.2,1211.05 1004.79,1211.05 1005.38,1211.05 1005.96,1211.05 1006.55,1211.05 1007.14,1211.05 1007.72,1211.05 1008.31,1211.05 1008.9,1211.05 1009.48,1211.05 1010.07,1211.05 1010.65,1211.05 1011.24,1211.05 1011.83,1211.05 1012.41,1211.05 1013,1211.05 1013.59,1211.05 1014.17,1211.05 1014.76,1211.05 1015.35,1211.05 1015.93,1211.05 1016.52,1211.05 1017.11,1211.05 1017.69,1211.05 1018.28,1211.05 1018.86,1211.05 1019.45,1211.05 1020.04,1211.05 1020.62,1211.05 1021.21,1211.05 1021.8,1211.05 1022.38,1211.05 1022.97,1211.05 1023.56,1211.05 1024.14,1211.05 1024.73,1211.05 1025.32,1211.05 1025.9,1211.05 1026.49,1211.05 1027.07,1211.05 1027.66,1211.05 1028.25,1211.05 1028.83,1211.05 1029.42,1211.05 1030.01,1211.05 1030.59,1211.05 1031.18,1211.05 1031.77,1211.05 1032.35,1211.05 1032.94,1211.05 1033.52,1211.05 1034.11,1211.05 1034.7,1211.05 1035.28,1211.05 1035.87,1211.05 1036.46,1211.05 1037.04,1211.05 1037.63,1211.05 1038.22,1211.05 1038.8,1211.05 1039.39,1211.05 1039.98,1211.05 1040.56,1211.05 1041.15,1211.05 1041.73,1211.05 1042.32,1211.05 1042.91,1211.05 1043.49,1211.05 1044.08,1211.05 1044.67,1211.05 1045.25,1211.05 1045.84,1211.05 1046.43,1211.05 1047.01,1211.05 1047.6,1211.05 1048.19,1211.05 1048.77,1211.05 1049.36,1211.05 1049.94,1211.05 1050.53,1211.05 1051.12,1211.05 1051.7,1211.05 1052.29,1211.05 1052.88,1211.05 1053.46,1211.05 1054.05,1211.05 1054.64,1211.05 1055.22,1211.05 1055.81,1211.05 1056.39,1211.05 1056.98,1211.05 1057.57,1211.05 1058.15,1211.05 1058.74,1211.05 1059.33,1211.05 1059.91,1211.05 1060.5,1211.05 1061.09,1211.05 1061.67,1211.05 1062.26,1211.05 1062.85,1211.05 1063.43,1211.05 1064.02,1211.05 1064.6,1211.05 1065.19,1211.05 1065.78,1211.05 1066.36,1211.05 1066.95,1211.05 1067.54,1211.05 1068.12,1211.05 1068.71,1211.05 1069.3,1211.05 1069.88,1211.05 1070.47,1211.05 1071.06,1211.05 1071.64,1211.05 1072.23,1211.05 1072.81,1211.05 1073.4,1211.05 1073.99,1211.05 1074.57,1211.05 1075.16,1211.05 1075.75,1211.05 1076.33,1211.05 1076.92,1211.05 1077.51,1211.05 1078.09,1211.05 1078.68,1211.05 1079.26,1211.05 1079.85,1211.05 1080.44,1211.05 1081.02,1211.05 1081.61,1211.05 1082.2,1211.05 1082.78,1211.05 1083.37,1211.05 1083.96,1211.05 1084.54,1211.05 1085.13,1211.05 1085.72,1211.05 1086.3,1211.05 1086.89,1211.05 1087.47,1211.05 1088.06,1211.05 1088.65,1211.05 1089.23,1211.05 1089.82,1211.05 1090.41,1211.05 1090.99,1211.05 1091.58,1211.05 1092.17,1211.05 1092.75,1211.05 1093.34,1211.05 1093.93,1211.05 1094.51,1211.05 1095.1,1211.05 1095.68,1211.05 1096.27,1211.05 1096.86,1211.05 1097.44,1211.05 1098.03,1211.05 1098.62,1211.05 1099.2,1211.05 1099.79,1211.05 1100.38,1211.05 1100.96,1211.05 1101.55,1211.05 1102.14,1211.05 1102.72,1211.05 1103.31,1211.05 1103.89,1211.05 1104.48,1211.05 1105.07,1211.05 1105.65,1211.05 1106.24,1211.05 1106.83,1211.05 1107.41,1211.05 1108,1211.05 1108.59,1211.05 1109.17,1211.05 1109.76,1211.05 1110.34,1211.05 1110.93,1211.05 1111.52,1211.05 1112.1,1211.05 1112.69,1211.05 1113.28,1211.05 1113.86,1211.05 1114.45,1211.05 1115.04,1211.05 1115.62,1211.05 1116.21,1211.05 1116.8,1211.05 1117.38,1211.05 1117.97,1211.05 1118.55,1211.05 1119.14,1211.05 1119.73,1211.05 1120.31,1211.05 1120.9,1211.05 1121.49,1211.05 1122.07,1211.05 1122.66,1211.05 1123.25,1211.05 1123.83,1211.05 1124.42,1211.05 1125.01,1211.05 1125.59,1211.05 1126.18,1211.05 1126.76,1211.05 1127.35,1211.05 1127.94,1211.05 1128.52,1211.05 1129.11,1211.05 1129.7,1211.05 1130.28,1211.05 1130.87,1211.05 1131.46,1211.05 1132.04,1211.05 1132.63,1211.05 1133.21,1211.05 1133.8,1211.05 1134.39,1211.05 1134.97,1211.05 1135.56,1211.05 1136.15,1211.05 1136.73,1211.05 1137.32,1211.05 1137.91,1211.05 1138.49,1211.05 1139.08,1211.05 1139.67,1211.05 1140.25,1211.05 1140.84,1211.05 1141.42,1211.05 1142.01,1211.05 1142.6,1211.05 1143.18,1211.05 1143.77,1211.05 1144.36,1211.05 1144.94,1211.05 1145.53,1211.05 1146.12,1211.05 1146.7,1211.05 1147.29,1211.05 1147.88,1211.05 1148.46,1211.05 1149.05,1211.05 1149.63,1211.05 1150.22,1211.05 1150.81,1211.05 1151.39,1211.05 1151.98,1211.05 1152.57,1211.05 1153.15,1211.05 1153.74,1211.05 1154.33,1211.05 1154.91,1211.05 1155.5,1211.05 1156.09,1211.05 1156.67,1211.05 1157.26,1211.05 1157.84,1211.05 1158.43,1211.05 1159.02,1211.05 1159.6,1211.05 1160.19,1211.05 1160.78,1211.05 1161.36,1211.05 1161.95,1211.05 1162.54,1211.05 1163.12,1211.05 1163.71,1211.05 1164.29,1211.05 1164.88,1211.05 1165.47,1211.05 1166.05,1211.05 1166.64,1211.05 1167.23,1211.05 1167.81,1211.05 1168.4,1211.05 1168.99,1211.05 1169.57,1211.05 1170.16,1211.05 1170.75,1211.05 1171.33,1211.05 1171.92,1211.05 1172.5,1211.05 1173.09,1211.05 1173.68,1211.05 1174.26,1211.05 1174.85,1211.05 1175.44,1211.05 1176.02,1211.05 1176.61,1211.05 1177.2,1211.05 1177.78,1211.05 1178.37,1211.05 1178.96,1211.05 1179.54,1211.05 1180.13,1211.05 1180.71,1211.05 1181.3,1211.05 1181.89,1211.05 1182.47,1211.05 1183.06,1211.05 1183.65,1211.05 1184.23,1211.05 1184.82,1211.05 1185.41,1211.05 1185.99,1211.05 1186.58,1211.05 1187.16,1211.05 1187.75,1211.05 1188.34,1211.05 1188.92,1211.05 1189.51,1211.05 1190.1,1211.05 1190.68,1211.05 1191.27,1211.05 1191.86,1211.05 1192.44,1211.05 1193.03,1211.05 1193.62,1211.05 1194.2,1211.05 1194.79,1211.05 1195.37,1211.05 1195.96,1211.05 1196.55,1211.05 1197.13,1211.05 1197.72,1211.05 1198.31,1211.05 1198.89,1211.05 1199.48,1211.05 1200.07,1211.05 1200.65,1211.05 1201.24,1211.05 1201.83,1211.05 1202.41,1211.05 1203,1211.05 1203.58,1211.05 1204.17,1211.05 1204.76,1211.05 1205.34,1211.05 1205.93,1211.05 1206.52,1211.05 1207.1,1211.05 1207.69,1211.05 1208.28,1211.05 1208.86,1211.05 1209.45,1211.05 1210.03,1211.05 1210.62,1211.05 1211.21,1211.05 1211.79,1211.05 1212.38,1211.05 1212.97,1211.05 1213.55,1211.05 1214.14,1211.05 1214.73,1211.05 1215.31,1211.05 1215.9,1211.05 1216.49,1211.05 1217.07,1211.05 1217.66,1211.05 1218.24,1211.05 1218.83,1211.05 1219.42,1211.05 1220,1211.05 1220.59,1211.05 1221.18,1211.05 1221.76,1211.05 1222.35,1211.05 1222.94,1211.05 1223.52,1211.05 1224.11,1211.05 1224.7,1211.05 1225.28,1211.05 1225.87,1211.05 1226.45,1211.05 1227.04,1211.05 1227.63,1211.05 1228.21,1211.05 1228.8,1211.05 1229.39,1211.05 1229.97,1211.05 1230.56,1211.05 1231.15,1211.05 1231.73,1211.05 1232.32,1211.05 1232.91,1211.05 1233.49,1211.05 1234.08,1211.05 1234.66,1211.05 1235.25,1211.05 1235.84,1211.05 1236.42,1211.05 1237.01,1211.05 1237.6,1211.05 1238.18,1211.05 1238.77,1211.05 1239.36,1211.05 1239.94,1211.05 1240.53,1211.05 1241.11,1211.05 1241.7,1211.05 1242.29,1211.05 1242.87,1211.05 1243.46,1211.05 1244.05,1211.05 1244.63,1211.05 1245.22,1211.05 1245.81,1211.05 1246.39,1211.05 1246.98,1211.05 1247.57,1211.05 1248.15,1211.05 1248.74,1211.05 1249.32,1211.05 1249.91,1211.05 1250.5,1211.05 1251.08,1211.05 1251.67,1211.05 1252.26,1211.05 1252.84,1211.05 1253.43,1211.05 1254.02,1211.05 1254.6,1211.05 1255.19,1211.05 1255.78,1211.05 1256.36,1211.05 1256.95,1211.05 1257.53,1211.05 1258.12,1211.05 1258.71,1211.05 1259.29,1211.05 1259.88,1211.05 1260.47,1211.05 1261.05,1211.05 1261.64,1211.05 1262.23,1211.05 1262.81,1211.05 1263.4,1211.05 1263.98,1211.05 1264.57,1211.05 1265.16,1211.05 1265.74,1211.05 1266.33,1211.05 1266.92,1211.05 1267.5,1211.05 1268.09,1211.05 1268.68,1211.05 1269.26,1211.05 1269.85,1211.05 1270.44,1211.05 1271.02,1211.05 1271.61,1211.05 1272.19,1211.05 1272.78,1211.05 1273.37,1211.05 1273.95,1211.05 1274.54,1211.05 1275.13,1211.05 1275.71,1211.05 1276.3,1211.05 1276.89,1211.05 1277.47,1211.05 1278.06,1211.05 1278.65,1211.05 1279.23,1211.05 1279.82,1211.05 1280.4,1211.05 1280.99,1211.05 1281.58,1211.05 1282.16,1211.05 1282.75,1211.05 1283.34,1211.05 1283.92,1211.05 1284.51,1211.05 1285.1,1211.05 1285.68,1211.05 1286.27,1211.05 1286.86,1211.05 1287.44,1211.05 1288.03,1211.05 1288.61,1211.05 1289.2,1211.05 1289.79,1211.05 1290.37,1211.05 1290.96,1211.05 1291.55,1211.05 1292.13,1211.05 1292.72,1211.05 1293.31,1211.05 1293.89,1211.05 1294.48,1211.05 1295.06,1211.05 1295.65,1211.05 1296.24,1211.05 1296.82,1211.05 1297.41,1211.05 1298,1211.05 1298.58,1211.05 1299.17,1211.05 1299.76,1211.05 1300.34,1211.05 1300.93,1211.05 1301.52,1211.05 1302.1,1211.05 1302.69,1211.05 1303.27,1211.05 1303.86,1211.05 1304.45,1211.05 1305.03,1211.05 1305.62,1211.05 1306.21,1211.05 1306.79,1211.05 1307.38,1211.05 1307.97,1211.05 1308.55,1211.05 1309.14,1211.05 1309.73,1211.05 1310.31,1211.05 1310.9,1211.05 1311.48,1211.05 1312.07,1211.05 1312.66,1211.05 1313.24,1211.05 1313.83,1211.05 1314.42,1211.05 1315,1211.05 1315.59,1211.05 1316.18,1211.05 1316.76,1211.05 1317.35,1211.05 1317.93,1211.05 1318.52,1211.05 1319.11,1211.05 1319.69,1211.05 1320.28,1211.05 1320.87,1211.05 1321.45,1211.05 1322.04,1211.05 1322.63,1211.05 1323.21,1211.05 1323.8,1211.05 1324.39,1211.05 1324.97,1211.05 1325.56,1211.05 1326.14,1211.05 1326.73,1211.05 1327.32,1211.05 1327.9,1211.05 1328.49,1211.05 1329.08,1211.05 1329.66,1211.05 1330.25,1211.05 1330.84,1211.05 1331.42,1211.05 1332.01,1211.05 1332.6,1211.05 1333.18,1211.05 1333.77,1211.05 1334.35,1211.05 1334.94,1211.05 1335.53,1211.05 1336.11,1211.05 1336.7,1211.05 1337.29,1211.05 1337.87,1211.05 1338.46,1211.05 1339.05,1211.05 1339.63,1211.05 1340.22,1211.05 1340.8,1211.05 1341.39,1211.05 1341.98,1211.05 1342.56,1211.05 1343.15,1211.05 1343.74,1211.05 1344.32,1211.05 1344.91,1211.05 1345.5,1211.05 1346.08,1211.05 1346.67,1211.05 1347.26,1211.05 1347.84,1211.05 1348.43,1211.05 1349.01,1211.05 1349.6,1211.05 1350.19,1211.05 1350.77,1211.05 1351.36,1211.05 1351.95,1211.05 1352.53,1211.05 1353.12,1211.05 1353.71,1211.05 1354.29,1211.05 1354.88,1211.05 1355.47,1211.05 1356.05,1211.05 1356.64,1211.05 1357.22,1211.05 1357.81,1211.05 1358.4,1211.05 1358.98,1211.05 1359.57,1211.05 1360.16,1211.05 1360.74,1211.05 1361.33,1211.05 1361.92,1211.05 1362.5,1211.05 1363.09,1211.05 1363.68,1211.05 1364.26,1211.05 1364.85,1211.05 1365.43,1211.05 1366.02,1211.05 1366.61,1211.05 1367.19,1211.05 1367.78,1211.05 1368.37,1211.05 1368.95,1211.05 1369.54,1211.05 1370.13,1211.05 1370.71,1211.05 1371.3,1211.05 1371.88,1211.05 1372.47,1211.05 1373.06,1211.05 1373.64,1211.05 1374.23,1211.05 1374.82,1211.05 1375.4,1211.05 1375.99,1211.05 1376.58,1211.05 1377.16,1211.05 1377.75,1211.05 1378.34,1211.05 1378.92,1211.05 1379.51,1211.05 1380.09,1211.05 1380.68,1211.05 1381.27,1211.05 1381.85,1211.05 1382.44,1211.05 1383.03,1211.05 1383.61,1211.05 1384.2,1211.05 1384.79,1211.05 1385.37,1211.05 1385.96,1211.05 1386.55,1211.05 1387.13,1211.05 1387.72,1211.05 1388.3,1211.05 1388.89,1211.05 1389.48,1211.05 1390.06,1211.05 1390.65,1211.05 1391.24,1211.05 1391.82,1211.05 1392.41,1211.05 1393,1211.05 1393.58,1211.05 1394.17,1211.05 1394.75,1211.05 1395.34,1211.05 1395.93,1211.05 1396.51,1211.05 1397.1,1211.05 1397.69,1211.05 1398.27,1211.05 1398.86,1211.05 1399.45,1211.05 1400.03,1211.05 1400.62,1211.05 1401.21,1211.05 1401.79,1211.05 1402.38,1211.05 1402.96,1211.05 1403.55,1211.05 1404.14,1211.05 1404.72,1211.05 1405.31,1211.05 1405.9,1211.05 1406.48,1211.05 1407.07,1211.05 1407.66,1211.05 1408.24,1211.05 1408.83,1211.05 1409.42,1211.05 1410,1211.05 1410.59,1211.05 1411.17,1211.05 1411.76,1211.05 1412.35,1211.05 1412.93,1211.05 1413.52,1211.05 1414.11,1211.05 1414.69,1211.05 1415.28,1211.05 1415.87,1211.05 1416.45,1211.05 1417.04,1211.05 1417.63,1211.05 1418.21,1211.05 1418.8,1211.05 1419.38,1211.05 1419.97,1211.05 1420.56,1211.05 1421.14,1211.05 1421.73,1211.05 1422.32,1211.05 1422.9,1211.05 1423.49,1211.05 1424.08,1211.05 1424.66,1211.05 1425.25,1211.05 1425.83,1211.05 1426.42,1211.05 1427.01,1211.05 1427.59,1211.05 1428.18,1211.05 1428.77,1211.05 1429.35,1211.05 1429.94,1211.05 1430.53,1211.05 1431.11,1211.05 1431.7,1211.05 1432.29,1211.05 1432.87,1211.05 1433.46,1211.05 1434.04,1211.05 1434.63,1211.05 1435.22,1211.05 1435.8,1211.05 1436.39,1211.05 1436.98,1211.05 1437.56,1211.05 1438.15,1211.05 1438.74,1211.05 1439.32,1211.05 1439.91,1211.05 1440.5,1211.05 1441.08,1211.05 1441.67,1211.05 1442.25,1211.05 1442.84,1211.05 1443.43,1211.05 1444.01,1211.05 1444.6,1211.05 1445.19,1211.05 1445.77,1211.05 1446.36,1211.05 1446.95,1211.05 1447.53,1211.05 1448.12,1211.05 1448.7,1211.05 1449.29,1211.05 1449.88,1211.05 1450.46,1211.05 1451.05,1211.05 1451.64,1211.05 1452.22,1211.05 1452.81,1211.05 1453.4,1211.05 1453.98,1211.05 1454.57,1211.05 1455.16,1211.05 1455.74,1211.05 1456.33,1211.05 1456.91,1211.05 1457.5,1211.05 1458.09,1211.05 1458.67,1211.05 1459.26,1211.05 1459.85,1211.05 1460.43,1211.05 1461.02,1211.05 1461.61,1211.05 1462.19,1211.05 1462.78,1211.05 1463.37,1211.05 1463.95,1211.05 1464.54,1211.05 1465.12,1211.05 1465.71,1211.05 1466.3,1211.05 1466.88,1211.05 1467.47,1211.05 1468.06,1211.05 1468.64,1211.05 1469.23,1211.05 1469.82,1211.05 1470.4,1211.05 1470.99,1211.05 1471.57,1211.05 1472.16,1211.05 1472.75,1211.05 1473.33,1211.05 1473.92,1211.05 1474.51,1211.05 1475.09,1211.05 1475.68,1211.05 1476.27,1211.05 1476.85,1211.05 1477.44,1211.05 1478.03,1211.05 1478.61,1211.05 1479.2,1211.05 1479.78,1211.05 1480.37,1211.05 1480.96,1211.05 1481.54,1211.05 1482.13,1211.05 1482.72,1211.05 1483.3,1211.05 1483.89,1211.05 1484.48,1211.05 1485.06,1211.05 1485.65,1211.05 1486.24,1211.05 1486.82,1211.05 1487.41,1211.05 1487.99,1211.05 1488.58,1211.05 1489.17,1211.05 1489.75,1211.05 1490.34,1211.05 1490.93,1211.05 1491.51,1211.05 1492.1,1211.05 1492.69,1211.05 1493.27,1211.05 1493.86,1211.05 1494.45,1211.05 1495.03,1211.05 1495.62,1211.05 1496.2,1211.05 1496.79,1211.05 1497.38,1211.05 1497.96,1211.05 1498.55,1211.05 1499.14,1211.05 1499.72,1211.05 1500.31,1211.05 1500.9,1211.05 1501.48,1211.05 1502.07,1211.05 1502.65,1211.05 1503.24,1211.05 1503.83,1211.05 1504.41,1211.05 1505,1211.05 1505.59,1211.05 1506.17,1211.05 1506.76,1211.05 1507.35,1211.05 1507.93,1211.05 1508.52,1211.05 1509.11,1211.05 1509.69,1211.05 1510.28,1211.05 1510.86,1211.05 1511.45,1211.05 1512.04,1211.05 1512.62,1211.05 1513.21,1211.05 1513.8,1211.05 1514.38,1211.05 1514.97,1211.05 1515.56,1211.05 1516.14,1211.05 1516.73,1211.05 1517.32,1211.05 1517.9,1211.05 1518.49,1211.05 1519.07,1211.05 1519.66,1211.05 1520.25,1211.05 1520.83,1211.05 1521.42,1211.05 1522.01,1211.05 1522.59,1211.05 1523.18,1211.05 1523.77,1211.05 1524.35,1211.05 1524.94,1211.05 1525.52,1211.05 1526.11,1211.05 1526.7,1211.05 1527.28,1211.05 1527.87,1211.05 1528.46,1211.05 1529.04,1211.05 1529.63,1211.05 1530.22,1211.05 1530.8,1211.05 1531.39,1211.05 1531.98,1211.05 1532.56,1211.05 1533.15,1211.05 1533.73,1211.05 1534.32,1211.05 1534.91,1211.05 1535.49,1211.05 1536.08,1211.05 1536.67,1211.05 1537.25,1211.05 1537.84,1211.05 1538.43,1211.05 1539.01,1211.05 1539.6,1211.05 1540.19,1211.05 1540.77,1211.05 1541.36,1211.05 1541.94,1211.05 1542.53,1211.05 1543.12,1211.05 1543.7,1211.05 1544.29,1211.05 1544.88,1211.05 1545.46,1211.05 1546.05,1211.05 1546.64,1211.05 1547.22,1211.05 1547.81,1211.05 1548.4,1211.05 1548.98,1211.05 1549.57,1211.05 1550.15,1211.05 1550.74,1211.05 1551.33,1211.05 1551.91,1211.05 1552.5,1211.05 1553.09,1211.05 1553.67,1211.05 1554.26,1211.05 1554.85,1211.05 1555.43,1211.05 1556.02,1211.05 1556.6,1211.05 1557.19,1211.05 1557.78,1211.05 1558.36,1211.05 1558.95,1211.05 1559.54,1211.05 1560.12,1211.05 1560.71,1211.05 1561.3,1211.05 1561.88,1211.05 1562.47,1211.05 1563.06,1211.05 1563.64,1211.05 1564.23,1211.05 1564.81,1211.05 1565.4,1211.05 1565.99,1211.05 1566.57,1211.05 1567.16,1211.05 1567.75,1211.05 1568.33,1211.05 1568.92,1211.05 1569.51,1211.05 1570.09,1211.05 1570.68,1211.05 1571.27,1211.05 1571.85,1211.05 1572.44,1211.05 1573.02,1211.05 1573.61,1211.05 1574.2,1211.05 1574.78,1211.05 1575.37,1211.05 1575.96,1211.05 1576.54,1211.05 1577.13,1211.05 1577.72,1211.05 1578.3,1211.05 1578.89,1211.05 1579.47,1211.05 1580.06,1211.05 1580.65,1211.05 1581.23,1211.05 1581.82,1211.05 1582.41,1211.05 1582.99,1211.05 1583.58,1211.05 1584.17,1211.05 1584.75,1211.05 1585.34,1211.05 1585.93,1211.05 1586.51,1211.05 1587.1,1211.05 1587.68,1211.05 1588.27,1211.05 1588.86,1211.05 1589.44,1211.05 1590.03,1211.05 1590.62,1211.05 1591.2,1211.05 1591.79,1211.05 1592.38,1211.05 1592.96,1211.05 1593.55,1211.05 1594.14,1211.05 1594.72,1211.05 1595.31,1211.05 1595.89,1211.05 1596.48,1211.05 1597.07,1211.05 1597.65,1211.05 1598.24,1211.05 1598.83,1211.05 1599.41,1211.05 1600,1211.05 1600.59,1211.05 1601.17,1211.05 1601.76,1211.05 1602.34,1211.05 1602.93,1211.05 1603.52,1211.05 1604.1,1211.05 1604.69,1211.05 1605.28,1211.05 1605.86,1211.05 1606.45,1211.05 1607.04,1211.05 1607.62,1211.05 1608.21,1211.05 1608.8,1211.05 1609.38,1211.05 1609.97,1211.05 1610.55,1211.05 1611.14,1211.05 1611.73,1211.05 1612.31,1211.05 1612.9,1211.05 1613.49,1211.05 1614.07,1211.05 1614.66,1211.05 1615.25,1211.05 1615.83,1211.05 1616.42,1211.05 1617.01,1211.05 1617.59,1211.05 1618.18,1211.05 1618.76,1211.05 1619.35,1211.05 1619.94,1211.05 1620.52,1211.05 1621.11,1211.05 1621.7,1211.05 1622.28,1211.05 1622.87,1211.05 1623.46,1211.05 1624.04,1211.05 1624.63,1211.05 1625.22,1211.05 1625.8,1211.05 1626.39,1211.05 1626.97,1211.05 1627.56,1211.05 1628.15,1211.05 1628.73,1211.05 1629.32,1211.05 1629.91,1211.05 1630.49,1211.05 1631.08,1211.05 1631.67,1211.05 1632.25,1211.05 1632.84,1211.05 1633.42,1211.05 1634.01,1211.05 1634.6,1211.05 1635.18,1211.05 1635.77,1211.05 1636.36,1211.05 1636.94,1211.05 1637.53,1211.05 1638.12,1211.05 1638.7,1211.05 1639.29,1211.05 1639.88,1211.05 1640.46,1211.05 1641.05,1211.05 1641.63,1211.05 1642.22,1211.05 1642.81,1211.05 1643.39,1211.05 1643.98,1211.05 1644.57,1211.05 1645.15,1211.05 1645.74,1211.05 1646.33,1211.05 1646.91,1211.05 1647.5,1211.05 1648.09,1211.05 1648.67,1211.05 1649.26,1211.05 1649.84,1211.05 1650.43,1211.05 1651.02,1211.05 1651.6,1211.05 1652.19,1211.05 1652.78,1211.05 1653.36,1211.05 1653.95,1211.05 1654.54,1211.05 1655.12,1211.05 1655.71,1211.05 1656.29,1211.05 1656.88,1211.05 1657.47,1211.05 1658.05,1211.05 1658.64,1211.05 1659.23,1211.05 1659.81,1211.05 1660.4,1211.05 1660.99,1211.05 1661.57,1211.05 1662.16,1211.05 1662.75,1211.05 1663.33,1211.05 1663.92,1211.05 1664.5,1211.05 1665.09,1211.05 1665.68,1211.05 1666.26,1211.05 1666.85,1211.05 1667.44,1211.05 1668.02,1211.05 1668.61,1211.05 1669.2,1211.05 1669.78,1211.05 1670.37,1211.05 1670.96,1211.05 1671.54,1211.05 1672.13,1211.05 1672.71,1211.05 1673.3,1211.05 1673.89,1211.05 1674.47,1211.05 1675.06,1211.05 1675.65,1211.05 1676.23,1211.05 1676.82,1211.05 1677.41,1211.05 1677.99,1211.05 1678.58,1211.05 1679.17,1211.05 1679.75,1211.05 1680.34,1211.05 1680.92,1211.05 1681.51,1211.05 1682.1,1211.05 1682.68,1211.05 1683.27,1211.05 1683.86,1211.05 1684.44,1211.05 1685.03,1211.05 1685.62,1211.05 1686.2,1211.05 1686.79,1211.05 1687.37,1211.05 1687.96,1211.05 1688.55,1211.05 1689.13,1211.05 1689.72,1211.05 1690.31,1211.05 1690.89,1211.05 1691.48,1211.05 1692.07,1211.05 1692.65,1211.05 1693.24,1211.05 1693.83,1211.05 1694.41,1211.05 1695,1211.05 1695.58,1211.05 1696.17,1211.05 1696.76,1211.05 1697.34,1211.05 1697.93,1211.05 1698.52,1211.05 1699.1,1211.05 1699.69,1211.05 1700.28,1211.05 1700.86,1211.05 1701.45,1211.05 1702.04,1211.05 1702.62,1211.05 1703.21,1211.05 1703.79,1211.05 1704.38,1211.05 1704.97,1211.05 1705.55,1211.05 1706.14,1211.05 1706.73,1211.05 1707.31,1211.05 1707.9,1211.05 1708.49,1211.05 1709.07,1211.05 1709.66,1211.05 1710.24,1211.05 1710.83,1211.05 1711.42,1211.05 1712,1211.05 1712.59,1211.05 1713.18,1211.05 1713.76,1211.05 1714.35,1211.05 1714.94,1211.05 1715.52,1211.05 1716.11,1211.05 1716.7,1211.05 1717.28,1211.05 1717.87,1211.05 1718.45,1211.05 1719.04,1211.05 1719.63,1211.05 1720.21,1211.05 1720.8,1211.05 1721.39,1211.05 1721.97,1211.05 1722.56,1211.05 1723.15,1211.05 1723.73,1211.05 1724.32,1211.05 1724.91,1211.05 1725.49,1211.05 1726.08,1211.05 1726.66,1211.05 1727.25,1211.05 1727.84,1211.05 1728.42,1211.05 1729.01,1211.05 1729.6,1211.05 1730.18,1211.05 1730.77,1211.05 1731.36,1211.05 1731.94,1211.05 1732.53,1211.05 1733.11,1211.05 1733.7,1211.05 1734.29,1211.05 1734.87,1211.05 1735.46,1211.05 1736.05,1211.05 1736.63,1211.05 1737.22,1211.05 1737.81,1211.05 1738.39,1211.05 1738.98,1211.05 1739.57,1211.05 1740.15,1211.05 1740.74,1211.05 1741.32,1211.05 1741.91,1211.05 1742.5,1211.05 1743.08,1211.05 1743.67,1211.05 1744.26,1211.05 1744.84,1211.05 1745.43,1211.05 1746.02,1211.05 1746.6,1211.05 1747.19,1211.05 1747.78,1211.05 1748.36,1211.05 1748.95,1211.05 1749.53,1211.05 1750.12,1211.05 1750.71,1211.05 1751.29,1211.05 1751.88,1211.05 1752.47,1211.05 1753.05,1211.05 1753.64,1211.05 1754.23,1211.05 1754.81,1211.05 1755.4,1211.05 1755.99,1211.05 1756.57,1211.05 1757.16,1211.05 1757.74,1211.05 1758.33,1211.05 1758.92,1211.05 1759.5,1211.05 1760.09,1211.05 1760.68,1211.05 1761.26,1211.05 1761.85,1211.05 1762.44,1211.05 1763.02,1211.05 1763.61,1211.05 1764.19,1211.05 1764.78,1211.05 1765.37,1211.05 1765.95,1211.05 1766.54,1211.05 1767.13,1211.05 1767.71,1211.05 1768.3,1211.05 1768.89,1211.05 1769.47,1211.05 1770.06,1211.05 1770.65,1211.05 1771.23,1211.05 1771.82,1211.05 1772.4,1211.05 1772.99,1211.05 1773.58,1211.05 1774.16,1211.05 1774.75,1211.05 1775.34,1211.05 1775.92,1211.05 1776.51,1211.05 1777.1,1211.05 1777.68,1211.05 1778.27,1211.05 1778.86,1211.05 1779.44,1211.05 1780.03,1211.05 1780.61,1211.05 1781.2,1211.05 1781.79,1211.05 1782.37,1211.05 1782.96,1211.05 1783.55,1211.05 1784.13,1211.05 1784.72,1211.05 1785.31,1211.05 1785.89,1211.05 1786.48,1211.05 1787.06,1211.05 1787.65,1211.05 1788.24,1211.05 1788.82,1211.05 1789.41,1211.05 1790,1211.05 1790.58,1211.05 1791.17,1211.05 1791.76,1211.05 1792.34,1211.05 1792.93,1211.05 1793.52,1211.05 1794.1,1211.05 1794.69,1211.05 1795.27,1211.05 1795.86,1211.05 1796.45,1211.05 1797.03,1211.05 1797.62,1211.05 1798.21,1211.05 1798.79,1211.05 1799.38,1211.05 1799.97,1211.05 1800.55,1211.05 1801.14,1211.05 1801.73,1211.05 1802.31,1211.05 1802.9,1211.05 1803.48,1211.05 1804.07,1211.05 1804.66,1211.05 1805.24,1211.05 1805.83,1211.05 1806.42,1211.05 1807,1211.05 1807.59,1211.05 1808.18,1211.05 1808.76,1211.05 1809.35,1211.05 1809.94,1211.05 1810.52,1211.05 1811.11,1211.05 1811.69,1211.05 1812.28,1211.05 1812.87,1211.05 1813.45,1211.05 1814.04,1211.05 1814.63,1211.05 1815.21,1211.05 1815.8,1211.05 1816.39,1211.05 1816.97,1211.05 1817.56,1211.05 1818.14,1211.05 1818.73,1211.05 1819.32,1211.05 1819.9,1211.05 1820.49,1211.05 1821.08,1211.05 1821.66,1211.05 1822.25,1211.05 1822.84,1211.05 1823.42,1211.05 1824.01,1211.05 1824.6,1211.05 1825.18,1211.05 1825.77,1211.05 1826.35,1211.05 1826.94,1211.05 1827.53,1211.05 1828.11,1211.05 1828.7,1211.05 1829.29,1211.05 1829.87,1211.05 1830.46,1211.05 1831.05,1211.05 1831.63,1211.05 1832.22,1211.05 1832.81,1211.05 1833.39,1211.05 1833.98,1211.05 1834.56,1211.05 1835.15,1211.05 1835.74,1211.05 1836.32,1211.05 1836.91,1211.05 1837.5,1211.05 1838.08,1211.05 1838.67,1211.05 1839.26,1211.05 1839.84,1211.05 1840.43,1211.05 1841.01,1211.05 1841.6,1211.05 1842.19,1211.05 1842.77,1211.05 1843.36,1211.05 1843.95,1211.05 1844.53,1211.05 1845.12,1211.05 1845.71,1211.05 1846.29,1211.05 1846.88,1211.05 1847.47,1211.05 1848.05,1211.05 1848.64,1211.05 1849.22,1211.05 1849.81,1211.05 1850.4,1211.05 1850.98,1211.05 1851.57,1211.05 1852.16,1211.05 1852.74,1211.05 1853.33,1211.05 1853.92,1211.05 1854.5,1211.05 1855.09,1211.05 1855.68,1211.05 1856.26,1211.05 1856.85,1211.05 1857.43,1211.05 1858.02,1211.05 1858.61,1211.05 1859.19,1211.05 1859.78,1211.05 1860.37,1211.05 1860.95,1211.05 1861.54,1211.05 1862.13,1211.05 1862.71,1211.05 1863.3,1211.05 1863.88,1211.05 1864.47,1211.05 1865.06,1211.05 1865.64,1211.05 1866.23,1211.05 1866.82,1211.05 1867.4,1211.05 1867.99,1211.05 1868.58,1211.05 1869.16,1211.05 1869.75,1211.05 1870.34,1211.05 1870.92,1211.05 1871.51,1211.05 1872.09,1211.05 1872.68,1211.05 1873.27,1211.05 1873.85,1211.05 1874.44,1211.05 1875.03,1211.05 1875.61,1211.05 1876.2,1211.05 1876.79,1211.05 1877.37,1211.05 1877.96,1211.05 1878.55,1211.05 1879.13,1211.05 1879.72,1211.05 1880.3,1211.05 1880.89,1211.05 1881.48,1211.05 1882.06,1211.05 1882.65,1211.05 1883.24,1211.05 1883.82,1211.05 1884.41,1211.05 1885,1211.05 1885.58,1211.05 1886.17,1211.05 1886.76,1211.05 1887.34,1211.05 1887.93,1211.05 1888.51,1211.05 1889.1,1211.05 1889.69,1211.05 1890.27,1211.05 1890.86,1211.05 1891.45,1211.05 1892.03,1211.05 1892.62,1211.05 1893.21,1211.05 1893.79,1211.05 1894.38,1211.05 1894.96,1211.05 1895.55,1211.05 1896.14,1211.05 1896.72,1211.05 1897.31,1211.05 1897.9,1211.05 1898.48,1211.05 1899.07,1211.05 1899.66,1211.05 1900.24,1211.05 1900.83,1211.05 1901.42,1211.05 1902,1211.05 1902.59,1211.05 1903.17,1211.05 1903.76,1211.05 1904.35,1211.05 1904.93,1211.05 1905.52,1211.05 1906.11,1211.05 1906.69,1211.05 1907.28,1211.05 1907.87,1211.05 1908.45,1211.05 1909.04,1211.05 1909.63,1211.05 1910.21,1211.05 1910.8,1211.05 1911.38,1211.05 1911.97,1211.05 1912.56,1211.05 1913.14,1211.05 1913.73,1211.05 1914.32,1211.05 1914.9,1211.05 1915.49,1211.05 1916.08,1211.05 1916.66,1211.05 1917.25,1211.05 1917.83,1211.05 1918.42,1211.05 1919.01,1211.05 1919.59,1211.05 1920.18,1211.05 1920.77,1211.05 1921.35,1211.05 1921.94,1211.05 1922.53,1211.05 1923.11,1211.05 1923.7,1211.05 1924.29,1211.05 1924.87,1211.05 1925.46,1211.05 1926.04,1211.05 1926.63,1211.05 1927.22,1211.05 1927.8,1211.05 1928.39,1211.05 1928.98,1211.05 1929.56,1211.05 1930.15,1211.05 1930.74,1211.05 1931.32,1211.05 1931.91,1211.05 1932.5,1211.05 1933.08,1211.05 1933.67,1211.05 1934.25,1211.05 1934.84,1211.05 1935.43,1211.05 1936.01,1211.05 1936.6,1211.05 1937.19,1211.05 1937.77,1211.05 1938.36,1211.05 1938.95,1211.05 1939.53,1211.05 1940.12,1211.05 1940.71,1211.05 1941.29,1211.05 1941.88,1211.05 1942.46,1211.05 1943.05,1211.05 1943.64,1211.05 1944.22,1211.05 1944.81,1211.05 1945.4,1211.05 1945.98,1211.05 1946.57,1211.05 1947.16,1211.05 1947.74,1211.05 1948.33,1211.05 1948.91,1211.05 1949.5,1211.05 1950.09,1211.05 1950.67,1211.05 1951.26,1211.05 1951.85,1211.05 1952.43,1211.05 1953.02,1211.05 1953.61,1211.05 1954.19,1211.05 1954.78,1211.05 1955.37,1211.05 1955.95,1211.05 1956.54,1211.05 1957.12,1211.05 1957.71,1211.05 1958.3,1211.05 1958.88,1211.05 1959.47,1211.05 1960.06,1211.05 1960.64,1211.05 1961.23,1211.05 1961.82,1211.05 1962.4,1211.05 1962.99,1211.05 1963.58,1211.05 1964.16,1211.05 1964.75,1211.05 1965.33,1211.05 1965.92,1211.05 1966.51,1211.05 1967.09,1211.05 1967.68,1211.05 1968.27,1211.05 1968.85,1211.05 1969.44,1211.05 1970.03,1211.05 1970.61,1211.05 1971.2,1211.05 1971.78,1211.05 1972.37,1211.05 1972.96,1211.05 1973.54,1211.05 1974.13,1211.05 1974.72,1211.05 1975.3,1211.05 1975.89,1211.05 1976.48,1211.05 1977.06,1211.05 1977.65,1211.05 1978.24,1211.05 1978.82,1211.05 1979.41,1211.05 1979.99,1211.05 1980.58,1211.05 1981.17,1211.05 1981.75,1211.05 1982.34,1211.05 1982.93,1211.05 1983.51,1211.05 1984.1,1211.05 1984.69,1211.05 1985.27,1211.05 1985.86,1211.05 1986.45,1211.05 1987.03,1211.05 1987.62,1211.05 1988.2,1211.05 1988.79,1211.05 1989.38,1211.05 1989.96,1211.05 1990.55,1211.05 1991.14,1211.05 1991.72,1211.05 1992.31,1211.05 1992.9,1211.05 1993.48,1211.05 1994.07,1211.05 1994.65,1211.05 1995.24,1211.05 1995.83,1211.05 1996.41,1211.05 1997,1211.05 1997.59,1211.05 1998.17,1211.05 1998.76,1211.05 1999.35,1211.05 1999.93,1211.05 2000.52,1211.05 2001.11,1211.05 2001.69,1211.05 2002.28,1211.05 2002.86,1211.05 2003.45,1211.05 2004.04,1211.05 2004.62,1211.05 2005.21,1211.05 2005.8,1211.05 2006.38,1211.05 2006.97,1211.05 2007.56,1211.05 2008.14,1211.05 2008.73,1211.05 2009.32,1211.05 2009.9,1211.05 2010.49,1211.05 2011.07,1211.05 2011.66,1211.05 2012.25,1211.05 2012.83,1211.05 2013.42,1211.05 2014.01,1211.05 2014.59,1211.05 2015.18,1211.05 2015.77,1211.05 2016.35,1211.05 2016.94,1211.05 2017.53,1211.05 2018.11,1211.05 2018.7,1211.05 2019.28,1211.05 2019.87,1211.05 2020.46,1211.05 2021.04,1211.05 2021.63,1211.05 2022.22,1211.05 2022.8,1211.05 2023.39,1211.05 2023.98,1211.05 2024.56,1211.05 2025.15,1211.05 2025.73,1211.05 2026.32,1211.05 2026.91,1211.05 2027.49,1211.05 2028.08,1211.05 2028.67,1211.05 2029.25,1211.05 2029.84,1211.05 2030.43,1211.05 2031.01,1211.05 2031.6,1211.05 2032.19,1211.05 2032.77,1211.05 2033.36,1211.05 2033.94,1211.05 2034.53,1211.05 2035.12,1211.05 2035.7,1211.05 2036.29,1211.05 2036.88,1211.05 2037.46,1211.05 2038.05,1211.05 2038.64,1211.05 2039.22,1211.05 2039.81,1211.05 2040.4,1211.05 2040.98,1211.05 2041.57,1211.05 2042.15,1211.05 2042.74,1211.05 2043.33,1211.05 2043.91,1211.05 2044.5,1211.05 2045.09,1211.05 2045.67,1211.05 2046.26,1211.05 2046.85,1211.05 2047.43,1211.05 2048.02,1211.05 2048.6,1211.05 2049.19,1211.05 2049.78,1211.05 2050.36,1211.05 2050.95,1211.05 2051.54,1211.05 2052.12,1211.05 2052.71,1211.05 2053.3,1211.05 2053.88,1211.05 2054.47,1211.05 2055.06,1211.05 2055.64,1211.05 2056.23,1211.05 2056.81,1211.05 2057.4,1211.05 2057.99,1211.05 2058.57,1211.05 2059.16,1211.05 2059.75,1211.05 2060.33,1211.05 2060.92,1211.05 2061.51,1211.05 2062.09,1211.05 2062.68,1211.05 2063.27,1211.05 2063.85,1211.05 2064.44,1211.05 2065.02,1211.05 2065.61,1211.05 2066.2,1211.05 2066.78,1211.05 2067.37,1211.05 2067.96,1211.05 2068.54,1211.05 2069.13,1211.05 2069.72,1211.05 2070.3,1211.05 2070.89,1211.05 2071.48,1211.05 2072.06,1211.05 2072.65,1211.05 2073.23,1211.05 2073.82,1211.05 2074.41,1211.05 2074.99,1211.05 2075.58,1211.05 2076.17,1211.05 2076.75,1211.05 2077.34,1211.05 2077.93,1211.05 2078.51,1211.05 2079.1,1211.05 2079.68,1211.05 2080.27,1211.05 2080.86,1211.05 2081.44,1211.05 2082.03,1211.05 2082.62,1211.05 2083.2,1211.05 2083.79,1211.05 2084.38,1211.05 2084.96,1211.05 2085.55,1211.05 2086.14,1211.05 2086.72,1211.05 2087.31,1211.05 2087.89,1211.05 2088.48,1211.05 2089.07,1211.05 2089.65,1211.05 2090.24,1211.05 2090.83,1211.05 2091.41,1211.05 2092,1211.05 2092.59,1211.05 2093.17,1211.05 2093.76,1211.05 2094.35,1211.05 2094.93,1211.05 2095.52,1211.05 2096.1,1211.05 2096.69,1211.05 2097.28,1211.05 2097.86,1211.05 2098.45,1211.05 2099.04,1211.05 2099.62,1211.05 2100.21,1211.05 2100.8,1211.05 2101.38,1211.05 2101.97,1211.05 2102.55,1211.05 2103.14,1211.05 2103.73,1211.05 2104.31,1211.05 2104.9,1211.05 2105.49,1211.05 2106.07,1211.05 2106.66,1211.05 2107.25,1211.05 2107.83,1211.05 2108.42,1211.05 2109.01,1211.05 2109.59,1211.05 2110.18,1211.05 2110.76,1211.05 2111.35,1211.05 2111.94,1211.05 2112.52,1211.05 2113.11,1211.05 2113.7,1211.05 2114.28,1211.05 2114.87,1211.05 2115.46,1211.05 2116.04,1211.05 2116.63,1211.05 2117.22,1211.05 2117.8,1211.05 2118.39,1211.05 2118.97,1211.05 2119.56,1211.05 2120.15,1211.05 2120.73,1211.05 2121.32,1211.05 2121.91,1211.05 2122.49,1211.05 2123.08,1211.05 2123.67,1211.05 2124.25,1211.05 2124.84,1211.05 2125.42,1211.05 2126.01,1211.05 2126.6,1211.05 2127.18,1211.05 2127.77,1211.05 2128.36,1211.05 2128.94,1211.05 2129.53,1211.05 2130.12,1211.05 2130.7,1211.05 2131.29,1211.05 2131.88,1211.05 2132.46,1211.05 2133.05,1211.05 2133.63,1211.05 2134.22,1211.05 2134.81,1211.05 2135.39,1211.05 2135.98,1211.05 2136.57,1211.05 2137.15,1211.05 2137.74,1211.05 2138.33,1211.05 2138.91,1211.05 2139.5,1211.05 2140.09,1211.05 2140.67,1211.05 2141.26,1211.05 2141.84,1211.05 2142.43,1211.05 2143.02,1211.05 2143.6,1211.05 2144.19,1211.05 2144.78,1211.05 2145.36,1211.05 2145.95,1211.05 2146.54,1211.05 2147.12,1211.05 2147.71,1211.05 2148.3,1211.05 2148.88,1211.05 2149.47,1211.05 2150.05,1211.05 2150.64,1211.05 2151.23,1211.05 2151.81,1211.05 2152.4,1211.05 2152.99,1211.05 2153.57,1211.05 2154.16,1211.05 2154.75,1211.05 2155.33,1211.05 2155.92,1211.05 2156.5,1211.05 2157.09,1211.05 2157.68,1211.05 2158.26,1211.05 \"/>\n<path clip-path=\"url(#clip242)\" d=\"M986.025 1210.89 L986.612 1210.89 L987.198 1210.89 L987.785 1210.89 L988.371 1210.89 L988.957 1210.89 L989.544 1210.89 L990.13 1210.89 L990.717 1210.89 L991.303 1210.89 L991.889 1210.89 L992.476 1210.89 L993.062 1210.89 L993.649 1210.89 L994.235 1210.89 L994.822 1210.89 L995.408 1210.89 L995.994 1210.89 L996.581 1210.89 L997.167 1210.89 L997.754 1210.89 L998.34 1210.89 L998.926 1210.89 L999.513 1210.89 L1000.1 1210.89 L1000.69 1210.89 L1001.27 1210.89 L1001.86 1210.89 L1002.44 1210.89 L1003.03 1210.89 L1003.62 1210.89 L1004.2 1210.89 L1004.79 1210.89 L1005.38 1210.89 L1005.96 1210.89 L1006.55 1210.89 L1007.14 1210.89 L1007.72 1210.89 L1008.31 1210.89 L1008.9 1210.89 L1009.48 1210.89 L1010.07 1210.89 L1010.65 1210.89 L1011.24 1210.89 L1011.83 1210.89 L1012.41 1210.89 L1013 1210.89 L1013.59 1210.89 L1014.17 1210.89 L1014.76 1210.89 L1015.35 1210.89 L1015.93 1210.89 L1016.52 1210.89 L1017.11 1210.89 L1017.69 1210.89 L1018.28 1210.89 L1018.86 1210.89 L1019.45 1210.89 L1020.04 1210.89 L1020.62 1210.89 L1021.21 1210.89 L1021.8 1210.89 L1022.38 1210.89 L1022.97 1210.89 L1023.56 1210.89 L1024.14 1210.89 L1024.73 1210.89 L1025.32 1210.89 L1025.9 1210.89 L1026.49 1210.89 L1027.07 1210.89 L1027.66 1210.89 L1028.25 1210.89 L1028.83 1210.89 L1029.42 1210.89 L1030.01 1210.89 L1030.59 1210.89 L1031.18 1210.89 L1031.77 1210.89 L1032.35 1210.89 L1032.94 1210.89 L1033.52 1210.89 L1034.11 1210.89 L1034.7 1210.89 L1035.28 1210.89 L1035.87 1210.89 L1036.46 1210.89 L1037.04 1210.89 L1037.63 1210.89 L1038.22 1210.89 L1038.8 1210.89 L1039.39 1210.89 L1039.98 1210.89 L1040.56 1210.89 L1041.15 1210.89 L1041.73 1210.89 L1042.32 1210.89 L1042.91 1210.89 L1043.49 1210.89 L1044.08 1210.89 L1044.67 1210.89 L1045.25 1210.89 L1045.84 1210.89 L1046.43 1210.89 L1047.01 1210.89 L1047.6 1210.89 L1048.19 1210.89 L1048.77 1210.89 L1049.36 1210.89 L1049.94 1210.89 L1050.53 1210.89 L1051.12 1210.89 L1051.7 1210.89 L1052.29 1210.89 L1052.88 1210.89 L1053.46 1210.89 L1054.05 1210.89 L1054.64 1210.89 L1055.22 1210.89 L1055.81 1210.89 L1056.39 1210.89 L1056.98 1210.89 L1057.57 1210.89 L1058.15 1210.89 L1058.74 1210.89 L1059.33 1210.89 L1059.91 1210.89 L1060.5 1210.89 L1061.09 1210.89 L1061.67 1210.89 L1062.26 1210.89 L1062.85 1210.89 L1063.43 1210.89 L1064.02 1210.89 L1064.6 1210.89 L1065.19 1210.89 L1065.78 1210.89 L1066.36 1210.89 L1066.95 1210.89 L1067.54 1210.89 L1068.12 1210.89 L1068.71 1210.89 L1069.3 1210.89 L1069.88 1210.89 L1070.47 1210.89 L1071.06 1210.89 L1071.64 1210.89 L1072.23 1210.89 L1072.81 1210.89 L1073.4 1210.89 L1073.99 1210.89 L1074.57 1210.89 L1075.16 1210.89 L1075.75 1210.89 L1076.33 1210.89 L1076.92 1210.89 L1077.51 1210.89 L1078.09 1210.89 L1078.68 1210.89 L1079.26 1210.89 L1079.85 1210.89 L1080.44 1210.89 L1081.02 1210.89 L1081.61 1210.89 L1082.2 1210.89 L1082.78 1210.89 L1083.37 1210.89 L1083.96 1210.89 L1084.54 1210.89 L1085.13 1210.89 L1085.72 1210.89 L1086.3 1210.89 L1086.89 1210.89 L1087.47 1210.89 L1088.06 1210.89 L1088.65 1210.89 L1089.23 1210.89 L1089.82 1210.89 L1090.41 1210.89 L1090.99 1210.89 L1091.58 1210.89 L1092.17 1210.89 L1092.75 1210.89 L1093.34 1210.89 L1093.93 1210.89 L1094.51 1210.89 L1095.1 1210.89 L1095.68 1210.89 L1096.27 1210.89 L1096.86 1210.89 L1097.44 1210.89 L1098.03 1210.89 L1098.62 1210.89 L1099.2 1210.89 L1099.79 1210.89 L1100.38 1210.89 L1100.96 1210.89 L1101.55 1210.89 L1102.14 1210.89 L1102.72 1210.89 L1103.31 1210.89 L1103.89 1210.89 L1104.48 1210.89 L1105.07 1210.89 L1105.65 1210.89 L1106.24 1210.89 L1106.83 1210.89 L1107.41 1210.89 L1108 1210.89 L1108.59 1210.89 L1109.17 1210.89 L1109.76 1210.89 L1110.34 1210.89 L1110.93 1210.89 L1111.52 1210.89 L1112.1 1210.89 L1112.69 1210.89 L1113.28 1210.89 L1113.86 1210.89 L1114.45 1210.89 L1115.04 1210.89 L1115.62 1210.89 L1116.21 1210.89 L1116.8 1210.89 L1117.38 1210.89 L1117.97 1210.89 L1118.55 1210.89 L1119.14 1210.89 L1119.73 1210.89 L1120.31 1210.89 L1120.9 1210.89 L1121.49 1210.89 L1122.07 1210.89 L1122.66 1210.89 L1123.25 1210.89 L1123.83 1210.89 L1124.42 1210.89 L1125.01 1210.89 L1125.59 1210.89 L1126.18 1210.89 L1126.76 1210.89 L1127.35 1210.89 L1127.94 1210.89 L1128.52 1210.89 L1129.11 1210.89 L1129.7 1210.89 L1130.28 1210.89 L1130.87 1210.89 L1131.46 1210.89 L1132.04 1210.89 L1132.63 1210.89 L1133.21 1210.89 L1133.8 1210.89 L1134.39 1210.89 L1134.97 1210.89 L1135.56 1210.89 L1136.15 1210.89 L1136.73 1210.89 L1137.32 1210.89 L1137.91 1210.89 L1138.49 1210.89 L1139.08 1210.89 L1139.67 1210.89 L1140.25 1210.89 L1140.84 1210.89 L1141.42 1210.89 L1142.01 1210.89 L1142.6 1210.89 L1143.18 1210.89 L1143.77 1210.89 L1144.36 1210.89 L1144.94 1210.89 L1145.53 1210.89 L1146.12 1210.89 L1146.7 1210.89 L1147.29 1210.89 L1147.88 1210.89 L1148.46 1210.89 L1149.05 1210.89 L1149.63 1210.89 L1150.22 1210.89 L1150.81 1210.89 L1151.39 1210.89 L1151.98 1210.89 L1152.57 1210.89 L1153.15 1210.89 L1153.74 1210.89 L1154.33 1210.89 L1154.91 1210.89 L1155.5 1210.89 L1156.09 1210.89 L1156.67 1210.89 L1157.26 1210.89 L1157.84 1210.89 L1158.43 1210.89 L1159.02 1210.89 L1159.6 1210.89 L1160.19 1210.89 L1160.78 1210.89 L1161.36 1210.89 L1161.95 1210.89 L1162.54 1210.89 L1163.12 1210.89 L1163.71 1210.89 L1164.29 1210.89 L1164.88 1210.89 L1165.47 1210.89 L1166.05 1210.89 L1166.64 1210.89 L1167.23 1210.89 L1167.81 1210.89 L1168.4 1210.89 L1168.99 1210.89 L1169.57 1210.89 L1170.16 1210.89 L1170.75 1210.89 L1171.33 1210.89 L1171.92 1210.89 L1172.5 1210.89 L1173.09 1210.89 L1173.68 1210.89 L1174.26 1210.89 L1174.85 1210.89 L1175.44 1210.89 L1176.02 1210.89 L1176.61 1210.89 L1177.2 1210.89 L1177.78 1210.89 L1178.37 1210.89 L1178.96 1210.89 L1179.54 1210.89 L1180.13 1210.89 L1180.71 1210.89 L1181.3 1210.89 L1181.89 1210.89 L1182.47 1210.89 L1183.06 1210.89 L1183.65 1210.89 L1184.23 1210.89 L1184.82 1210.89 L1185.41 1210.89 L1185.99 1210.89 L1186.58 1210.89 L1187.16 1210.89 L1187.75 1210.89 L1188.34 1210.89 L1188.92 1210.89 L1189.51 1210.89 L1190.1 1210.89 L1190.68 1210.89 L1191.27 1210.89 L1191.86 1210.89 L1192.44 1210.89 L1193.03 1210.89 L1193.62 1210.89 L1194.2 1210.89 L1194.79 1210.89 L1195.37 1210.89 L1195.96 1210.89 L1196.55 1210.89 L1197.13 1210.89 L1197.72 1210.89 L1198.31 1210.89 L1198.89 1210.89 L1199.48 1210.89 L1200.07 1210.89 L1200.65 1210.89 L1201.24 1210.89 L1201.83 1210.89 L1202.41 1210.89 L1203 1210.89 L1203.58 1210.89 L1204.17 1210.89 L1204.76 1210.89 L1205.34 1210.89 L1205.93 1210.89 L1206.52 1210.89 L1207.1 1210.89 L1207.69 1210.89 L1208.28 1210.89 L1208.86 1210.89 L1209.45 1210.89 L1210.03 1210.89 L1210.62 1210.89 L1211.21 1210.89 L1211.79 1210.89 L1212.38 1210.89 L1212.97 1210.89 L1213.55 1210.89 L1214.14 1210.89 L1214.73 1210.89 L1215.31 1210.89 L1215.9 1210.89 L1216.49 1210.89 L1217.07 1210.89 L1217.66 1210.89 L1218.24 1210.89 L1218.83 1210.89 L1219.42 1210.89 L1220 1210.89 L1220.59 1210.89 L1221.18 1210.89 L1221.76 1210.89 L1222.35 1210.89 L1222.94 1210.89 L1223.52 1210.89 L1224.11 1210.89 L1224.7 1210.89 L1225.28 1210.89 L1225.87 1210.89 L1226.45 1210.89 L1227.04 1210.89 L1227.63 1210.89 L1228.21 1210.89 L1228.8 1210.89 L1229.39 1210.89 L1229.97 1210.89 L1230.56 1210.89 L1231.15 1210.89 L1231.73 1210.89 L1232.32 1210.89 L1232.91 1210.89 L1233.49 1210.89 L1234.08 1210.89 L1234.66 1210.89 L1235.25 1210.89 L1235.84 1210.89 L1236.42 1210.89 L1237.01 1210.89 L1237.6 1210.89 L1238.18 1210.89 L1238.77 1210.89 L1239.36 1210.89 L1239.94 1210.89 L1240.53 1210.89 L1241.11 1210.89 L1241.7 1210.89 L1242.29 1210.89 L1242.87 1210.89 L1243.46 1210.89 L1244.05 1210.89 L1244.63 1210.89 L1245.22 1210.89 L1245.81 1210.89 L1246.39 1210.89 L1246.98 1210.89 L1247.57 1210.89 L1248.15 1210.89 L1248.74 1210.89 L1249.32 1210.89 L1249.91 1210.89 L1250.5 1210.89 L1251.08 1210.89 L1251.67 1210.89 L1252.26 1210.89 L1252.84 1210.89 L1253.43 1210.89 L1254.02 1210.89 L1254.6 1210.89 L1255.19 1210.89 L1255.78 1210.89 L1256.36 1210.89 L1256.95 1210.89 L1257.53 1210.89 L1258.12 1210.89 L1258.71 1210.89 L1259.29 1210.89 L1259.88 1210.89 L1260.47 1210.89 L1261.05 1210.89 L1261.64 1210.89 L1262.23 1210.89 L1262.81 1210.89 L1263.4 1210.89 L1263.98 1210.89 L1264.57 1210.89 L1265.16 1210.89 L1265.74 1210.89 L1266.33 1210.89 L1266.92 1210.89 L1267.5 1210.89 L1268.09 1210.89 L1268.68 1210.89 L1269.26 1210.89 L1269.85 1210.89 L1270.44 1210.89 L1271.02 1210.89 L1271.61 1210.89 L1272.19 1210.89 L1272.78 1210.89 L1273.37 1210.89 L1273.95 1210.89 L1274.54 1210.89 L1275.13 1210.89 L1275.71 1210.89 L1276.3 1210.89 L1276.89 1210.89 L1277.47 1210.89 L1278.06 1210.89 L1278.65 1210.89 L1279.23 1210.89 L1279.82 1210.89 L1280.4 1210.89 L1280.99 1210.89 L1281.58 1210.89 L1282.16 1210.89 L1282.75 1210.89 L1283.34 1210.89 L1283.92 1210.89 L1284.51 1210.89 L1285.1 1210.89 L1285.68 1210.89 L1286.27 1210.89 L1286.86 1210.89 L1287.44 1210.89 L1288.03 1210.89 L1288.61 1210.89 L1289.2 1210.89 L1289.79 1210.89 L1290.37 1210.89 L1290.96 1210.89 L1291.55 1210.89 L1292.13 1210.89 L1292.72 1210.89 L1293.31 1210.89 L1293.89 1210.89 L1294.48 1210.89 L1295.06 1210.89 L1295.65 1210.89 L1296.24 1210.89 L1296.82 1210.89 L1297.41 1210.89 L1298 1210.89 L1298.58 1210.89 L1299.17 1210.89 L1299.76 1210.89 L1300.34 1210.89 L1300.93 1210.89 L1301.52 1210.89 L1302.1 1210.89 L1302.69 1210.89 L1303.27 1210.89 L1303.86 1210.89 L1304.45 1210.89 L1305.03 1210.89 L1305.62 1210.89 L1306.21 1210.89 L1306.79 1210.89 L1307.38 1210.89 L1307.97 1210.89 L1308.55 1210.89 L1309.14 1210.89 L1309.73 1210.89 L1310.31 1210.89 L1310.9 1210.89 L1311.48 1210.89 L1312.07 1210.89 L1312.66 1210.89 L1313.24 1210.89 L1313.83 1210.89 L1314.42 1210.89 L1315 1210.89 L1315.59 1210.89 L1316.18 1210.89 L1316.76 1210.89 L1317.35 1210.89 L1317.93 1210.89 L1318.52 1210.89 L1319.11 1210.89 L1319.69 1210.89 L1320.28 1210.89 L1320.87 1210.89 L1321.45 1210.89 L1322.04 1210.89 L1322.63 1210.89 L1323.21 1210.89 L1323.8 1210.89 L1324.39 1210.89 L1324.97 1210.89 L1325.56 1210.89 L1326.14 1210.89 L1326.73 1210.89 L1327.32 1210.89 L1327.9 1210.89 L1328.49 1210.89 L1329.08 1210.89 L1329.66 1210.89 L1330.25 1210.89 L1330.84 1210.89 L1331.42 1210.89 L1332.01 1210.89 L1332.6 1210.89 L1333.18 1210.89 L1333.77 1210.89 L1334.35 1210.89 L1334.94 1210.89 L1335.53 1210.89 L1336.11 1210.89 L1336.7 1210.89 L1337.29 1210.89 L1337.87 1210.89 L1338.46 1210.89 L1339.05 1210.89 L1339.63 1210.89 L1340.22 1210.89 L1340.8 1210.89 L1341.39 1210.89 L1341.98 1210.89 L1342.56 1210.89 L1343.15 1210.89 L1343.74 1210.89 L1344.32 1210.89 L1344.91 1210.89 L1345.5 1210.89 L1346.08 1210.89 L1346.67 1210.89 L1347.26 1210.89 L1347.84 1210.89 L1348.43 1210.89 L1349.01 1210.89 L1349.6 1210.89 L1350.19 1210.89 L1350.77 1210.89 L1351.36 1210.89 L1351.95 1210.89 L1352.53 1210.89 L1353.12 1210.89 L1353.71 1210.89 L1354.29 1210.89 L1354.88 1210.89 L1355.47 1210.89 L1356.05 1210.89 L1356.64 1210.89 L1357.22 1210.89 L1357.81 1210.89 L1358.4 1210.89 L1358.98 1210.89 L1359.57 1210.89 L1360.16 1210.89 L1360.74 1210.89 L1361.33 1210.89 L1361.92 1210.89 L1362.5 1210.89 L1363.09 1210.89 L1363.68 1210.89 L1364.26 1210.89 L1364.85 1210.89 L1365.43 1210.89 L1366.02 1210.89 L1366.61 1210.89 L1367.19 1210.89 L1367.78 1210.89 L1368.37 1210.89 L1368.95 1210.89 L1369.54 1210.89 L1370.13 1210.89 L1370.71 1210.89 L1371.3 1210.89 L1371.88 1210.89 L1372.47 1210.89 L1373.06 1210.89 L1373.64 1210.89 L1374.23 1210.89 L1374.82 1210.89 L1375.4 1210.89 L1375.99 1210.89 L1376.58 1210.89 L1377.16 1210.89 L1377.75 1210.89 L1378.34 1210.89 L1378.92 1210.89 L1379.51 1210.89 L1380.09 1210.89 L1380.68 1210.89 L1381.27 1210.89 L1381.85 1210.89 L1382.44 1210.89 L1383.03 1210.89 L1383.61 1210.89 L1384.2 1210.89 L1384.79 1210.89 L1385.37 1210.89 L1385.96 1210.89 L1386.55 1210.89 L1387.13 1210.89 L1387.72 1210.89 L1388.3 1210.89 L1388.89 1210.89 L1389.48 1210.89 L1390.06 1210.89 L1390.65 1210.89 L1391.24 1210.89 L1391.82 1210.89 L1392.41 1210.89 L1393 1210.89 L1393.58 1210.89 L1394.17 1210.89 L1394.75 1210.89 L1395.34 1210.89 L1395.93 1210.89 L1396.51 1210.89 L1397.1 1210.89 L1397.69 1210.89 L1398.27 1210.89 L1398.86 1210.89 L1399.45 1210.89 L1400.03 1210.89 L1400.62 1210.89 L1401.21 1210.89 L1401.79 1210.89 L1402.38 1210.89 L1402.96 1210.89 L1403.55 1210.89 L1404.14 1210.89 L1404.72 1210.89 L1405.31 1210.89 L1405.9 1210.89 L1406.48 1210.89 L1407.07 1210.89 L1407.66 1210.89 L1408.24 1210.89 L1408.83 1210.89 L1409.42 1210.89 L1410 1210.89 L1410.59 1210.89 L1411.17 1210.89 L1411.76 1210.89 L1412.35 1210.89 L1412.93 1210.89 L1413.52 1210.89 L1414.11 1210.89 L1414.69 1210.89 L1415.28 1210.89 L1415.87 1210.89 L1416.45 1210.89 L1417.04 1210.89 L1417.63 1210.89 L1418.21 1210.89 L1418.8 1210.89 L1419.38 1210.89 L1419.97 1210.89 L1420.56 1210.89 L1421.14 1210.89 L1421.73 1210.89 L1422.32 1210.89 L1422.9 1210.89 L1423.49 1210.89 L1424.08 1210.89 L1424.66 1210.89 L1425.25 1210.89 L1425.83 1210.89 L1426.42 1210.89 L1427.01 1210.89 L1427.59 1210.89 L1428.18 1210.89 L1428.77 1210.89 L1429.35 1210.89 L1429.94 1210.89 L1430.53 1210.89 L1431.11 1210.89 L1431.7 1210.89 L1432.29 1210.89 L1432.87 1210.89 L1433.46 1210.89 L1434.04 1210.89 L1434.63 1210.89 L1435.22 1210.89 L1435.8 1210.89 L1436.39 1210.89 L1436.98 1210.89 L1437.56 1210.89 L1438.15 1210.89 L1438.74 1210.89 L1439.32 1210.89 L1439.91 1210.89 L1440.5 1210.89 L1441.08 1210.89 L1441.67 1210.89 L1442.25 1210.89 L1442.84 1210.89 L1443.43 1210.89 L1444.01 1210.89 L1444.6 1210.89 L1445.19 1210.89 L1445.77 1210.89 L1446.36 1210.89 L1446.95 1210.89 L1447.53 1210.89 L1448.12 1210.89 L1448.7 1210.89 L1449.29 1210.89 L1449.88 1210.89 L1450.46 1210.89 L1451.05 1210.89 L1451.64 1210.89 L1452.22 1210.89 L1452.81 1210.89 L1453.4 1210.89 L1453.98 1210.89 L1454.57 1210.89 L1455.16 1210.89 L1455.74 1210.89 L1456.33 1210.89 L1456.91 1210.89 L1457.5 1210.89 L1458.09 1210.89 L1458.67 1210.89 L1459.26 1210.89 L1459.85 1210.89 L1460.43 1210.89 L1461.02 1210.89 L1461.61 1210.89 L1462.19 1210.89 L1462.78 1210.89 L1463.37 1210.89 L1463.95 1210.89 L1464.54 1210.89 L1465.12 1210.89 L1465.71 1210.89 L1466.3 1210.89 L1466.88 1210.89 L1467.47 1210.89 L1468.06 1210.89 L1468.64 1210.89 L1469.23 1210.89 L1469.82 1210.89 L1470.4 1210.89 L1470.99 1210.89 L1471.57 1210.89 L1472.16 1210.89 L1472.75 1210.89 L1473.33 1210.89 L1473.92 1210.89 L1474.51 1210.89 L1475.09 1210.89 L1475.68 1210.89 L1476.27 1210.89 L1476.85 1210.89 L1477.44 1210.89 L1478.03 1210.89 L1478.61 1210.89 L1479.2 1210.89 L1479.78 1210.89 L1480.37 1210.89 L1480.96 1210.89 L1481.54 1210.89 L1482.13 1210.89 L1482.72 1210.89 L1483.3 1210.89 L1483.89 1210.89 L1484.48 1210.89 L1485.06 1210.89 L1485.65 1210.89 L1486.24 1210.89 L1486.82 1210.89 L1487.41 1210.89 L1487.99 1210.89 L1488.58 1210.89 L1489.17 1210.89 L1489.75 1210.89 L1490.34 1210.89 L1490.93 1210.89 L1491.51 1210.89 L1492.1 1210.89 L1492.69 1210.89 L1493.27 1210.89 L1493.86 1210.89 L1494.45 1210.89 L1495.03 1210.89 L1495.62 1210.89 L1496.2 1210.89 L1496.79 1210.89 L1497.38 1210.89 L1497.96 1210.89 L1498.55 1210.89 L1499.14 1210.89 L1499.72 1210.89 L1500.31 1210.89 L1500.9 1210.89 L1501.48 1210.89 L1502.07 1210.89 L1502.65 1210.89 L1503.24 1210.89 L1503.83 1210.89 L1504.41 1210.89 L1505 1210.89 L1505.59 1210.89 L1506.17 1210.89 L1506.76 1210.89 L1507.35 1210.89 L1507.93 1210.89 L1508.52 1210.89 L1509.11 1210.89 L1509.69 1210.89 L1510.28 1210.89 L1510.86 1210.89 L1511.45 1210.89 L1512.04 1210.89 L1512.62 1210.89 L1513.21 1210.89 L1513.8 1210.89 L1514.38 1210.89 L1514.97 1210.89 L1515.56 1210.89 L1516.14 1210.89 L1516.73 1210.89 L1517.32 1210.89 L1517.9 1210.89 L1518.49 1210.89 L1519.07 1210.89 L1519.66 1210.89 L1520.25 1210.89 L1520.83 1210.89 L1521.42 1210.89 L1522.01 1210.89 L1522.59 1210.89 L1523.18 1210.89 L1523.77 1210.89 L1524.35 1210.89 L1524.94 1210.89 L1525.52 1210.89 L1526.11 1210.89 L1526.7 1210.89 L1527.28 1210.89 L1527.87 1210.89 L1528.46 1210.89 L1529.04 1210.89 L1529.63 1210.89 L1530.22 1210.89 L1530.8 1210.89 L1531.39 1210.89 L1531.98 1210.89 L1532.56 1210.89 L1533.15 1210.89 L1533.73 1210.89 L1534.32 1210.89 L1534.91 1210.89 L1535.49 1210.89 L1536.08 1210.89 L1536.67 1210.89 L1537.25 1210.89 L1537.84 1210.89 L1538.43 1210.89 L1539.01 1210.89 L1539.6 1210.89 L1540.19 1210.89 L1540.77 1210.89 L1541.36 1210.89 L1541.94 1210.89 L1542.53 1210.89 L1543.12 1210.89 L1543.7 1210.89 L1544.29 1210.89 L1544.88 1210.89 L1545.46 1210.89 L1546.05 1210.89 L1546.64 1210.89 L1547.22 1210.89 L1547.81 1210.89 L1548.4 1210.89 L1548.98 1210.89 L1549.57 1210.89 L1550.15 1210.89 L1550.74 1210.89 L1551.33 1210.89 L1551.91 1210.89 L1552.5 1210.89 L1553.09 1210.89 L1553.67 1210.89 L1554.26 1210.89 L1554.85 1210.89 L1555.43 1210.89 L1556.02 1210.89 L1556.6 1210.89 L1557.19 1210.89 L1557.78 1210.89 L1558.36 1210.89 L1558.95 1210.89 L1559.54 1210.89 L1560.12 1210.89 L1560.71 1210.89 L1561.3 1210.89 L1561.88 1210.89 L1562.47 1210.89 L1563.06 1210.89 L1563.64 1210.89 L1564.23 1210.89 L1564.81 1210.89 L1565.4 1210.89 L1565.99 1210.89 L1566.57 1210.89 L1567.16 1210.89 L1567.75 1210.89 L1568.33 1210.89 L1568.92 1210.89 L1569.51 1210.89 L1570.09 1210.89 L1570.68 1210.89 L1571.27 1210.89 L1571.85 1210.89 L1572.44 1210.89 L1573.02 1210.89 L1573.61 1210.89 L1574.2 1210.89 L1574.78 1210.89 L1575.37 1210.89 L1575.96 1210.89 L1576.54 1210.89 L1577.13 1210.89 L1577.72 1210.89 L1578.3 1210.89 L1578.89 1210.89 L1579.47 1210.89 L1580.06 1210.89 L1580.65 1210.89 L1581.23 1210.89 L1581.82 1210.89 L1582.41 1210.89 L1582.99 1210.89 L1583.58 1210.89 L1584.17 1210.89 L1584.75 1210.89 L1585.34 1210.89 L1585.93 1210.89 L1586.51 1210.89 L1587.1 1210.89 L1587.68 1210.89 L1588.27 1210.89 L1588.86 1210.89 L1589.44 1210.89 L1590.03 1210.89 L1590.62 1210.89 L1591.2 1210.89 L1591.79 1210.89 L1592.38 1210.89 L1592.96 1210.89 L1593.55 1210.89 L1594.14 1210.89 L1594.72 1210.89 L1595.31 1210.89 L1595.89 1210.89 L1596.48 1210.89 L1597.07 1210.89 L1597.65 1210.89 L1598.24 1210.89 L1598.83 1210.89 L1599.41 1210.89 L1600 1210.89 L1600.59 1210.89 L1601.17 1210.89 L1601.76 1210.89 L1602.34 1210.89 L1602.93 1210.89 L1603.52 1210.89 L1604.1 1210.89 L1604.69 1210.89 L1605.28 1210.89 L1605.86 1210.89 L1606.45 1210.89 L1607.04 1210.89 L1607.62 1210.89 L1608.21 1210.89 L1608.8 1210.89 L1609.38 1210.89 L1609.97 1210.89 L1610.55 1210.89 L1611.14 1210.89 L1611.73 1210.89 L1612.31 1210.89 L1612.9 1210.89 L1613.49 1210.89 L1614.07 1210.89 L1614.66 1210.89 L1615.25 1210.89 L1615.83 1210.89 L1616.42 1210.89 L1617.01 1210.89 L1617.59 1210.89 L1618.18 1210.89 L1618.76 1210.89 L1619.35 1210.89 L1619.94 1210.89 L1620.52 1210.89 L1621.11 1210.89 L1621.7 1210.89 L1622.28 1210.89 L1622.87 1210.89 L1623.46 1210.89 L1624.04 1210.89 L1624.63 1210.89 L1625.22 1210.89 L1625.8 1210.89 L1626.39 1210.89 L1626.97 1210.89 L1627.56 1210.89 L1628.15 1210.89 L1628.73 1210.89 L1629.32 1210.89 L1629.91 1210.89 L1630.49 1210.89 L1631.08 1210.89 L1631.67 1210.89 L1632.25 1210.89 L1632.84 1210.89 L1633.42 1210.89 L1634.01 1210.89 L1634.6 1210.89 L1635.18 1210.89 L1635.77 1210.89 L1636.36 1210.89 L1636.94 1210.89 L1637.53 1210.89 L1638.12 1210.89 L1638.7 1210.89 L1639.29 1210.89 L1639.88 1210.89 L1640.46 1210.89 L1641.05 1210.89 L1641.63 1210.89 L1642.22 1210.89 L1642.81 1210.89 L1643.39 1210.89 L1643.98 1210.89 L1644.57 1210.89 L1645.15 1210.89 L1645.74 1210.89 L1646.33 1210.89 L1646.91 1210.89 L1647.5 1210.89 L1648.09 1210.89 L1648.67 1210.89 L1649.26 1210.89 L1649.84 1210.89 L1650.43 1210.89 L1651.02 1210.89 L1651.6 1210.89 L1652.19 1210.89 L1652.78 1210.89 L1653.36 1210.89 L1653.95 1210.89 L1654.54 1210.89 L1655.12 1210.89 L1655.71 1210.89 L1656.29 1210.89 L1656.88 1210.89 L1657.47 1210.89 L1658.05 1210.89 L1658.64 1210.89 L1659.23 1210.89 L1659.81 1210.89 L1660.4 1210.89 L1660.99 1210.89 L1661.57 1210.89 L1662.16 1210.89 L1662.75 1210.89 L1663.33 1210.89 L1663.92 1210.89 L1664.5 1210.89 L1665.09 1210.89 L1665.68 1210.89 L1666.26 1210.89 L1666.85 1210.89 L1667.44 1210.89 L1668.02 1210.89 L1668.61 1210.89 L1669.2 1210.89 L1669.78 1210.89 L1670.37 1210.89 L1670.96 1210.89 L1671.54 1210.89 L1672.13 1210.89 L1672.71 1210.89 L1673.3 1210.89 L1673.89 1210.89 L1674.47 1210.89 L1675.06 1210.89 L1675.65 1210.89 L1676.23 1210.89 L1676.82 1210.89 L1677.41 1210.89 L1677.99 1210.89 L1678.58 1210.89 L1679.17 1210.89 L1679.75 1210.89 L1680.34 1210.89 L1680.92 1210.89 L1681.51 1210.89 L1682.1 1210.89 L1682.68 1210.89 L1683.27 1210.89 L1683.86 1210.89 L1684.44 1210.89 L1685.03 1210.89 L1685.62 1210.89 L1686.2 1210.89 L1686.79 1210.89 L1687.37 1210.89 L1687.96 1210.89 L1688.55 1210.89 L1689.13 1210.89 L1689.72 1210.89 L1690.31 1210.89 L1690.89 1210.89 L1691.48 1210.89 L1692.07 1210.89 L1692.65 1210.89 L1693.24 1210.89 L1693.83 1210.89 L1694.41 1210.89 L1695 1210.89 L1695.58 1210.89 L1696.17 1210.89 L1696.76 1210.89 L1697.34 1210.89 L1697.93 1210.89 L1698.52 1210.89 L1699.1 1210.89 L1699.69 1210.89 L1700.28 1210.89 L1700.86 1210.89 L1701.45 1210.89 L1702.04 1210.89 L1702.62 1210.89 L1703.21 1210.89 L1703.79 1210.89 L1704.38 1210.89 L1704.97 1210.89 L1705.55 1210.89 L1706.14 1210.89 L1706.73 1210.89 L1707.31 1210.89 L1707.9 1210.89 L1708.49 1210.89 L1709.07 1210.89 L1709.66 1210.89 L1710.24 1210.89 L1710.83 1210.89 L1711.42 1210.89 L1712 1210.89 L1712.59 1210.89 L1713.18 1210.89 L1713.76 1210.89 L1714.35 1210.89 L1714.94 1210.89 L1715.52 1210.89 L1716.11 1210.89 L1716.7 1210.89 L1717.28 1210.89 L1717.87 1210.89 L1718.45 1210.89 L1719.04 1210.89 L1719.63 1210.89 L1720.21 1210.89 L1720.8 1210.89 L1721.39 1210.89 L1721.97 1210.89 L1722.56 1210.89 L1723.15 1210.89 L1723.73 1210.89 L1724.32 1210.89 L1724.91 1210.89 L1725.49 1210.89 L1726.08 1210.89 L1726.66 1210.89 L1727.25 1210.89 L1727.84 1210.89 L1728.42 1210.89 L1729.01 1210.89 L1729.6 1210.89 L1730.18 1210.89 L1730.77 1210.89 L1731.36 1210.89 L1731.94 1210.89 L1732.53 1210.89 L1733.11 1210.89 L1733.7 1210.89 L1734.29 1210.89 L1734.87 1210.89 L1735.46 1210.89 L1736.05 1210.89 L1736.63 1210.89 L1737.22 1210.89 L1737.81 1210.89 L1738.39 1210.89 L1738.98 1210.89 L1739.57 1210.89 L1740.15 1210.89 L1740.74 1210.89 L1741.32 1210.89 L1741.91 1210.89 L1742.5 1210.89 L1743.08 1210.89 L1743.67 1210.89 L1744.26 1210.89 L1744.84 1210.89 L1745.43 1210.89 L1746.02 1210.89 L1746.6 1210.89 L1747.19 1210.89 L1747.78 1210.89 L1748.36 1210.89 L1748.95 1210.89 L1749.53 1210.89 L1750.12 1210.89 L1750.71 1210.89 L1751.29 1210.89 L1751.88 1210.89 L1752.47 1210.89 L1753.05 1210.89 L1753.64 1210.89 L1754.23 1210.89 L1754.81 1210.89 L1755.4 1210.89 L1755.99 1210.89 L1756.57 1210.89 L1757.16 1210.89 L1757.74 1210.89 L1758.33 1210.89 L1758.92 1210.89 L1759.5 1210.89 L1760.09 1210.89 L1760.68 1210.89 L1761.26 1210.89 L1761.85 1210.89 L1762.44 1210.89 L1763.02 1210.89 L1763.61 1210.89 L1764.19 1210.89 L1764.78 1210.89 L1765.37 1210.89 L1765.95 1210.89 L1766.54 1210.89 L1767.13 1210.89 L1767.71 1210.89 L1768.3 1210.89 L1768.89 1210.89 L1769.47 1210.89 L1770.06 1210.89 L1770.65 1210.89 L1771.23 1210.89 L1771.82 1210.89 L1772.4 1210.89 L1772.99 1210.89 L1773.58 1210.89 L1774.16 1210.89 L1774.75 1210.89 L1775.34 1210.89 L1775.92 1210.89 L1776.51 1210.89 L1777.1 1210.89 L1777.68 1210.89 L1778.27 1210.89 L1778.86 1210.89 L1779.44 1210.89 L1780.03 1210.89 L1780.61 1210.89 L1781.2 1210.89 L1781.79 1210.89 L1782.37 1210.89 L1782.96 1210.89 L1783.55 1210.89 L1784.13 1210.89 L1784.72 1210.89 L1785.31 1210.89 L1785.89 1210.89 L1786.48 1210.89 L1787.06 1210.89 L1787.65 1210.89 L1788.24 1210.89 L1788.82 1210.89 L1789.41 1210.89 L1790 1210.89 L1790.58 1210.89 L1791.17 1210.89 L1791.76 1210.89 L1792.34 1210.89 L1792.93 1210.89 L1793.52 1210.89 L1794.1 1210.89 L1794.69 1210.89 L1795.27 1210.89 L1795.86 1210.89 L1796.45 1210.89 L1797.03 1210.89 L1797.62 1210.89 L1798.21 1210.89 L1798.79 1210.89 L1799.38 1210.89 L1799.97 1210.89 L1800.55 1210.89 L1801.14 1210.89 L1801.73 1210.89 L1802.31 1210.89 L1802.9 1210.89 L1803.48 1210.89 L1804.07 1210.89 L1804.66 1210.89 L1805.24 1210.89 L1805.83 1210.89 L1806.42 1210.89 L1807 1210.89 L1807.59 1210.89 L1808.18 1210.89 L1808.76 1210.89 L1809.35 1210.89 L1809.94 1210.89 L1810.52 1210.89 L1811.11 1210.89 L1811.69 1210.89 L1812.28 1210.89 L1812.87 1210.89 L1813.45 1210.89 L1814.04 1210.89 L1814.63 1210.89 L1815.21 1210.89 L1815.8 1210.89 L1816.39 1210.89 L1816.97 1210.89 L1817.56 1210.89 L1818.14 1210.89 L1818.73 1210.89 L1819.32 1210.89 L1819.9 1210.89 L1820.49 1210.89 L1821.08 1210.89 L1821.66 1210.89 L1822.25 1210.89 L1822.84 1210.89 L1823.42 1210.89 L1824.01 1210.89 L1824.6 1210.89 L1825.18 1210.89 L1825.77 1210.89 L1826.35 1210.89 L1826.94 1210.89 L1827.53 1210.89 L1828.11 1210.89 L1828.7 1210.89 L1829.29 1210.89 L1829.87 1210.89 L1830.46 1210.89 L1831.05 1210.89 L1831.63 1210.89 L1832.22 1210.89 L1832.81 1210.89 L1833.39 1210.89 L1833.98 1210.89 L1834.56 1210.89 L1835.15 1210.89 L1835.74 1210.89 L1836.32 1210.89 L1836.91 1210.89 L1837.5 1210.89 L1838.08 1210.89 L1838.67 1210.89 L1839.26 1210.89 L1839.84 1210.89 L1840.43 1210.89 L1841.01 1210.89 L1841.6 1210.89 L1842.19 1210.89 L1842.77 1210.89 L1843.36 1210.89 L1843.95 1210.89 L1844.53 1210.89 L1845.12 1210.89 L1845.71 1210.89 L1846.29 1210.89 L1846.88 1210.89 L1847.47 1210.89 L1848.05 1210.89 L1848.64 1210.89 L1849.22 1210.89 L1849.81 1210.89 L1850.4 1210.89 L1850.98 1210.89 L1851.57 1210.89 L1852.16 1210.89 L1852.74 1210.89 L1853.33 1210.89 L1853.92 1210.89 L1854.5 1210.89 L1855.09 1210.89 L1855.68 1210.89 L1856.26 1210.89 L1856.85 1210.89 L1857.43 1210.89 L1858.02 1210.89 L1858.61 1210.89 L1859.19 1210.89 L1859.78 1210.89 L1860.37 1210.89 L1860.95 1210.89 L1861.54 1210.89 L1862.13 1210.89 L1862.71 1210.89 L1863.3 1210.89 L1863.88 1210.89 L1864.47 1210.89 L1865.06 1210.89 L1865.64 1210.89 L1866.23 1210.89 L1866.82 1210.89 L1867.4 1210.89 L1867.99 1210.89 L1868.58 1210.89 L1869.16 1210.89 L1869.75 1210.89 L1870.34 1210.89 L1870.92 1210.89 L1871.51 1210.89 L1872.09 1210.89 L1872.68 1210.89 L1873.27 1210.89 L1873.85 1210.89 L1874.44 1210.89 L1875.03 1210.89 L1875.61 1210.89 L1876.2 1210.89 L1876.79 1210.89 L1877.37 1210.89 L1877.96 1210.89 L1878.55 1210.89 L1879.13 1210.89 L1879.72 1210.89 L1880.3 1210.89 L1880.89 1210.89 L1881.48 1210.89 L1882.06 1210.89 L1882.65 1210.89 L1883.24 1210.89 L1883.82 1210.89 L1884.41 1210.89 L1885 1210.89 L1885.58 1210.89 L1886.17 1210.89 L1886.76 1210.89 L1887.34 1210.89 L1887.93 1210.89 L1888.51 1210.89 L1889.1 1210.89 L1889.69 1210.89 L1890.27 1210.89 L1890.86 1210.89 L1891.45 1210.89 L1892.03 1210.89 L1892.62 1210.89 L1893.21 1210.89 L1893.79 1210.89 L1894.38 1210.89 L1894.96 1210.89 L1895.55 1210.89 L1896.14 1210.89 L1896.72 1210.89 L1897.31 1210.89 L1897.9 1210.89 L1898.48 1210.89 L1899.07 1210.89 L1899.66 1210.89 L1900.24 1210.89 L1900.83 1210.89 L1901.42 1210.89 L1902 1210.89 L1902.59 1210.89 L1903.17 1210.89 L1903.76 1210.89 L1904.35 1210.89 L1904.93 1210.89 L1905.52 1210.89 L1906.11 1210.89 L1906.69 1210.89 L1907.28 1210.89 L1907.87 1210.89 L1908.45 1210.89 L1909.04 1210.89 L1909.63 1210.89 L1910.21 1210.89 L1910.8 1210.89 L1911.38 1210.89 L1911.97 1210.89 L1912.56 1210.89 L1913.14 1210.89 L1913.73 1210.89 L1914.32 1210.89 L1914.9 1210.89 L1915.49 1210.89 L1916.08 1210.89 L1916.66 1210.89 L1917.25 1210.89 L1917.83 1210.89 L1918.42 1210.89 L1919.01 1210.89 L1919.59 1210.89 L1920.18 1210.89 L1920.77 1210.89 L1921.35 1210.89 L1921.94 1210.89 L1922.53 1210.89 L1923.11 1210.89 L1923.7 1210.89 L1924.29 1210.89 L1924.87 1210.89 L1925.46 1210.89 L1926.04 1210.89 L1926.63 1210.89 L1927.22 1210.89 L1927.8 1210.89 L1928.39 1210.89 L1928.98 1210.89 L1929.56 1210.89 L1930.15 1210.89 L1930.74 1210.89 L1931.32 1210.89 L1931.91 1210.89 L1932.5 1210.89 L1933.08 1210.89 L1933.67 1210.89 L1934.25 1210.89 L1934.84 1210.89 L1935.43 1210.89 L1936.01 1210.89 L1936.6 1210.89 L1937.19 1210.89 L1937.77 1210.89 L1938.36 1210.89 L1938.95 1210.89 L1939.53 1210.89 L1940.12 1210.89 L1940.71 1210.89 L1941.29 1210.89 L1941.88 1210.89 L1942.46 1210.89 L1943.05 1210.89 L1943.64 1210.89 L1944.22 1210.89 L1944.81 1210.89 L1945.4 1210.89 L1945.98 1210.89 L1946.57 1210.89 L1947.16 1210.89 L1947.74 1210.89 L1948.33 1210.89 L1948.91 1210.89 L1949.5 1210.89 L1950.09 1210.89 L1950.67 1210.89 L1951.26 1210.89 L1951.85 1210.89 L1952.43 1210.89 L1953.02 1210.89 L1953.61 1210.89 L1954.19 1210.89 L1954.78 1210.89 L1955.37 1210.89 L1955.95 1210.89 L1956.54 1210.89 L1957.12 1210.89 L1957.71 1210.89 L1958.3 1210.89 L1958.88 1210.89 L1959.47 1210.89 L1960.06 1210.89 L1960.64 1210.89 L1961.23 1210.89 L1961.82 1210.89 L1962.4 1210.89 L1962.99 1210.89 L1963.58 1210.89 L1964.16 1210.89 L1964.75 1210.89 L1965.33 1210.89 L1965.92 1210.89 L1966.51 1210.89 L1967.09 1210.89 L1967.68 1210.89 L1968.27 1210.89 L1968.85 1210.89 L1969.44 1210.89 L1970.03 1210.89 L1970.61 1210.89 L1971.2 1210.89 L1971.78 1210.89 L1972.37 1210.89 L1972.96 1210.89 L1973.54 1210.89 L1974.13 1210.89 L1974.72 1210.89 L1975.3 1210.89 L1975.89 1210.89 L1976.48 1210.89 L1977.06 1210.89 L1977.65 1210.89 L1978.24 1210.89 L1978.82 1210.89 L1979.41 1210.89 L1979.99 1210.89 L1980.58 1210.89 L1981.17 1210.89 L1981.75 1210.89 L1982.34 1210.89 L1982.93 1210.89 L1983.51 1210.89 L1984.1 1210.89 L1984.69 1210.89 L1985.27 1210.89 L1985.86 1210.89 L1986.45 1210.89 L1987.03 1210.89 L1987.62 1210.89 L1988.2 1210.89 L1988.79 1210.89 L1989.38 1210.89 L1989.96 1210.89 L1990.55 1210.89 L1991.14 1210.89 L1991.72 1210.89 L1992.31 1210.89 L1992.9 1210.89 L1993.48 1210.89 L1994.07 1210.89 L1994.65 1210.89 L1995.24 1210.89 L1995.83 1210.89 L1996.41 1210.89 L1997 1210.89 L1997.59 1210.89 L1998.17 1210.89 L1998.76 1210.89 L1999.35 1210.89 L1999.93 1210.89 L2000.52 1210.89 L2001.11 1210.89 L2001.69 1210.89 L2002.28 1210.89 L2002.86 1210.89 L2003.45 1210.89 L2004.04 1210.89 L2004.62 1210.89 L2005.21 1210.89 L2005.8 1210.89 L2006.38 1210.89 L2006.97 1210.89 L2007.56 1210.89 L2008.14 1210.89 L2008.73 1210.89 L2009.32 1210.89 L2009.9 1210.89 L2010.49 1210.89 L2011.07 1210.89 L2011.66 1210.89 L2012.25 1210.89 L2012.83 1210.89 L2013.42 1210.89 L2014.01 1210.89 L2014.59 1210.89 L2015.18 1210.89 L2015.77 1210.89 L2016.35 1210.89 L2016.94 1210.89 L2017.53 1210.89 L2018.11 1210.89 L2018.7 1210.89 L2019.28 1210.89 L2019.87 1210.89 L2020.46 1210.89 L2021.04 1210.89 L2021.63 1210.89 L2022.22 1210.89 L2022.8 1210.89 L2023.39 1210.89 L2023.98 1210.89 L2024.56 1210.89 L2025.15 1210.89 L2025.73 1210.89 L2026.32 1210.89 L2026.91 1210.89 L2027.49 1210.89 L2028.08 1210.89 L2028.67 1210.89 L2029.25 1210.89 L2029.84 1210.89 L2030.43 1210.89 L2031.01 1210.89 L2031.6 1210.89 L2032.19 1210.89 L2032.77 1210.89 L2033.36 1210.89 L2033.94 1210.89 L2034.53 1210.89 L2035.12 1210.89 L2035.7 1210.89 L2036.29 1210.89 L2036.88 1210.89 L2037.46 1210.89 L2038.05 1210.89 L2038.64 1210.89 L2039.22 1210.89 L2039.81 1210.89 L2040.4 1210.89 L2040.98 1210.89 L2041.57 1210.89 L2042.15 1210.89 L2042.74 1210.89 L2043.33 1210.89 L2043.91 1210.89 L2044.5 1210.89 L2045.09 1210.89 L2045.67 1210.89 L2046.26 1210.89 L2046.85 1210.89 L2047.43 1210.89 L2048.02 1210.89 L2048.6 1210.89 L2049.19 1210.89 L2049.78 1210.89 L2050.36 1210.89 L2050.95 1210.89 L2051.54 1210.89 L2052.12 1210.89 L2052.71 1210.89 L2053.3 1210.89 L2053.88 1210.89 L2054.47 1210.89 L2055.06 1210.89 L2055.64 1210.89 L2056.23 1210.89 L2056.81 1210.89 L2057.4 1210.89 L2057.99 1210.89 L2058.57 1210.89 L2059.16 1210.89 L2059.75 1210.89 L2060.33 1210.89 L2060.92 1210.89 L2061.51 1210.89 L2062.09 1210.89 L2062.68 1210.89 L2063.27 1210.89 L2063.85 1210.89 L2064.44 1210.89 L2065.02 1210.89 L2065.61 1210.89 L2066.2 1210.89 L2066.78 1210.89 L2067.37 1210.89 L2067.96 1210.89 L2068.54 1210.89 L2069.13 1210.89 L2069.72 1210.89 L2070.3 1210.89 L2070.89 1210.89 L2071.48 1210.89 L2072.06 1210.89 L2072.65 1210.89 L2073.23 1210.89 L2073.82 1210.89 L2074.41 1210.89 L2074.99 1210.89 L2075.58 1210.89 L2076.17 1210.89 L2076.75 1210.89 L2077.34 1210.89 L2077.93 1210.89 L2078.51 1210.89 L2079.1 1210.89 L2079.68 1210.89 L2080.27 1210.89 L2080.86 1210.89 L2081.44 1210.89 L2082.03 1210.89 L2082.62 1210.89 L2083.2 1210.89 L2083.79 1210.89 L2084.38 1210.89 L2084.96 1210.89 L2085.55 1210.89 L2086.14 1210.89 L2086.72 1210.89 L2087.31 1210.89 L2087.89 1210.89 L2088.48 1210.89 L2089.07 1210.89 L2089.65 1210.89 L2090.24 1210.89 L2090.83 1210.89 L2091.41 1210.89 L2092 1210.89 L2092.59 1210.89 L2093.17 1210.89 L2093.76 1210.89 L2094.35 1210.89 L2094.93 1210.89 L2095.52 1210.89 L2096.1 1210.89 L2096.69 1210.89 L2097.28 1210.89 L2097.86 1210.89 L2098.45 1210.89 L2099.04 1210.89 L2099.62 1210.89 L2100.21 1210.89 L2100.8 1210.89 L2101.38 1210.89 L2101.97 1210.89 L2102.55 1210.89 L2103.14 1210.89 L2103.73 1210.89 L2104.31 1210.89 L2104.9 1210.89 L2105.49 1210.89 L2106.07 1210.89 L2106.66 1210.89 L2107.25 1210.89 L2107.83 1210.89 L2108.42 1210.89 L2109.01 1210.89 L2109.59 1210.89 L2110.18 1210.89 L2110.76 1210.89 L2111.35 1210.89 L2111.94 1210.89 L2112.52 1210.89 L2113.11 1210.89 L2113.7 1210.89 L2114.28 1210.89 L2114.87 1210.89 L2115.46 1210.89 L2116.04 1210.89 L2116.63 1210.89 L2117.22 1210.89 L2117.8 1210.89 L2118.39 1210.89 L2118.97 1210.89 L2119.56 1210.89 L2120.15 1210.89 L2120.73 1210.89 L2121.32 1210.89 L2121.91 1210.89 L2122.49 1210.89 L2123.08 1210.89 L2123.67 1210.89 L2124.25 1210.89 L2124.84 1210.89 L2125.42 1210.89 L2126.01 1210.89 L2126.6 1210.89 L2127.18 1210.89 L2127.77 1210.89 L2128.36 1210.89 L2128.94 1210.89 L2129.53 1210.89 L2130.12 1210.89 L2130.7 1210.89 L2131.29 1210.89 L2131.88 1210.89 L2132.46 1210.89 L2133.05 1210.89 L2133.63 1210.89 L2134.22 1210.89 L2134.81 1210.89 L2135.39 1210.89 L2135.98 1210.89 L2136.57 1210.89 L2137.15 1210.89 L2137.74 1210.89 L2138.33 1210.89 L2138.91 1210.89 L2139.5 1210.89 L2140.09 1210.89 L2140.67 1210.89 L2141.26 1210.89 L2141.84 1210.89 L2142.43 1210.89 L2143.02 1210.89 L2143.6 1210.89 L2144.19 1210.89 L2144.78 1210.89 L2145.36 1210.89 L2145.95 1210.89 L2146.54 1210.89 L2147.12 1210.89 L2147.71 1210.89 L2148.3 1210.89 L2148.88 1210.89 L2149.47 1210.89 L2150.05 1210.89 L2150.64 1210.89 L2151.23 1210.89 L2151.81 1210.89 L2152.4 1210.89 L2152.99 1210.89 L2153.57 1210.89 L2154.16 1210.89 L2154.75 1210.89 L2155.33 1210.89 L2155.92 1210.89 L2156.5 1210.89 L2157.09 1210.89 L2157.68 1210.89 L2158.26 1210.89 L2158.26 1210.75 L2157.68 1210.75 L2157.09 1210.75 L2156.5 1210.75 L2155.92 1210.75 L2155.33 1210.75 L2154.75 1210.75 L2154.16 1210.75 L2153.57 1210.75 L2152.99 1210.75 L2152.4 1210.75 L2151.81 1210.75 L2151.23 1210.75 L2150.64 1210.75 L2150.05 1210.75 L2149.47 1210.75 L2148.88 1210.75 L2148.3 1210.75 L2147.71 1210.75 L2147.12 1210.75 L2146.54 1210.75 L2145.95 1210.75 L2145.36 1210.75 L2144.78 1210.75 L2144.19 1210.75 L2143.6 1210.75 L2143.02 1210.75 L2142.43 1210.75 L2141.84 1210.75 L2141.26 1210.75 L2140.67 1210.75 L2140.09 1210.75 L2139.5 1210.75 L2138.91 1210.75 L2138.33 1210.75 L2137.74 1210.75 L2137.15 1210.75 L2136.57 1210.75 L2135.98 1210.75 L2135.39 1210.75 L2134.81 1210.75 L2134.22 1210.75 L2133.63 1210.75 L2133.05 1210.75 L2132.46 1210.75 L2131.88 1210.75 L2131.29 1210.75 L2130.7 1210.75 L2130.12 1210.75 L2129.53 1210.75 L2128.94 1210.75 L2128.36 1210.75 L2127.77 1210.75 L2127.18 1210.75 L2126.6 1210.75 L2126.01 1210.75 L2125.42 1210.75 L2124.84 1210.75 L2124.25 1210.75 L2123.67 1210.75 L2123.08 1210.75 L2122.49 1210.75 L2121.91 1210.75 L2121.32 1210.75 L2120.73 1210.75 L2120.15 1210.75 L2119.56 1210.75 L2118.97 1210.75 L2118.39 1210.75 L2117.8 1210.75 L2117.22 1210.75 L2116.63 1210.75 L2116.04 1210.75 L2115.46 1210.75 L2114.87 1210.75 L2114.28 1210.75 L2113.7 1210.75 L2113.11 1210.75 L2112.52 1210.75 L2111.94 1210.75 L2111.35 1210.75 L2110.76 1210.75 L2110.18 1210.75 L2109.59 1210.75 L2109.01 1210.75 L2108.42 1210.75 L2107.83 1210.75 L2107.25 1210.75 L2106.66 1210.75 L2106.07 1210.75 L2105.49 1210.75 L2104.9 1210.75 L2104.31 1210.75 L2103.73 1210.75 L2103.14 1210.75 L2102.55 1210.75 L2101.97 1210.75 L2101.38 1210.75 L2100.8 1210.75 L2100.21 1210.75 L2099.62 1210.75 L2099.04 1210.75 L2098.45 1210.75 L2097.86 1210.75 L2097.28 1210.75 L2096.69 1210.75 L2096.1 1210.75 L2095.52 1210.75 L2094.93 1210.75 L2094.35 1210.75 L2093.76 1210.75 L2093.17 1210.75 L2092.59 1210.75 L2092 1210.75 L2091.41 1210.75 L2090.83 1210.75 L2090.24 1210.75 L2089.65 1210.75 L2089.07 1210.75 L2088.48 1210.75 L2087.89 1210.75 L2087.31 1210.75 L2086.72 1210.75 L2086.14 1210.75 L2085.55 1210.75 L2084.96 1210.75 L2084.38 1210.75 L2083.79 1210.75 L2083.2 1210.75 L2082.62 1210.75 L2082.03 1210.75 L2081.44 1210.75 L2080.86 1210.75 L2080.27 1210.75 L2079.68 1210.75 L2079.1 1210.75 L2078.51 1210.75 L2077.93 1210.75 L2077.34 1210.75 L2076.75 1210.75 L2076.17 1210.75 L2075.58 1210.75 L2074.99 1210.75 L2074.41 1210.75 L2073.82 1210.75 L2073.23 1210.75 L2072.65 1210.75 L2072.06 1210.75 L2071.48 1210.75 L2070.89 1210.75 L2070.3 1210.75 L2069.72 1210.75 L2069.13 1210.75 L2068.54 1210.75 L2067.96 1210.75 L2067.37 1210.75 L2066.78 1210.75 L2066.2 1210.75 L2065.61 1210.75 L2065.02 1210.75 L2064.44 1210.75 L2063.85 1210.75 L2063.27 1210.75 L2062.68 1210.75 L2062.09 1210.75 L2061.51 1210.75 L2060.92 1210.75 L2060.33 1210.75 L2059.75 1210.75 L2059.16 1210.75 L2058.57 1210.75 L2057.99 1210.75 L2057.4 1210.75 L2056.81 1210.75 L2056.23 1210.75 L2055.64 1210.75 L2055.06 1210.75 L2054.47 1210.75 L2053.88 1210.75 L2053.3 1210.75 L2052.71 1210.75 L2052.12 1210.75 L2051.54 1210.75 L2050.95 1210.75 L2050.36 1210.75 L2049.78 1210.75 L2049.19 1210.75 L2048.6 1210.75 L2048.02 1210.75 L2047.43 1210.75 L2046.85 1210.75 L2046.26 1210.75 L2045.67 1210.75 L2045.09 1210.75 L2044.5 1210.75 L2043.91 1210.75 L2043.33 1210.75 L2042.74 1210.75 L2042.15 1210.75 L2041.57 1210.75 L2040.98 1210.75 L2040.4 1210.75 L2039.81 1210.75 L2039.22 1210.75 L2038.64 1210.75 L2038.05 1210.75 L2037.46 1210.75 L2036.88 1210.75 L2036.29 1210.75 L2035.7 1210.75 L2035.12 1210.75 L2034.53 1210.75 L2033.94 1210.75 L2033.36 1210.75 L2032.77 1210.75 L2032.19 1210.75 L2031.6 1210.75 L2031.01 1210.75 L2030.43 1210.75 L2029.84 1210.75 L2029.25 1210.75 L2028.67 1210.75 L2028.08 1210.75 L2027.49 1210.75 L2026.91 1210.75 L2026.32 1210.75 L2025.73 1210.75 L2025.15 1210.75 L2024.56 1210.75 L2023.98 1210.75 L2023.39 1210.75 L2022.8 1210.75 L2022.22 1210.75 L2021.63 1210.75 L2021.04 1210.75 L2020.46 1210.75 L2019.87 1210.75 L2019.28 1210.75 L2018.7 1210.75 L2018.11 1210.75 L2017.53 1210.75 L2016.94 1210.75 L2016.35 1210.75 L2015.77 1210.75 L2015.18 1210.75 L2014.59 1210.75 L2014.01 1210.75 L2013.42 1210.75 L2012.83 1210.75 L2012.25 1210.75 L2011.66 1210.75 L2011.07 1210.75 L2010.49 1210.75 L2009.9 1210.75 L2009.32 1210.75 L2008.73 1210.75 L2008.14 1210.75 L2007.56 1210.75 L2006.97 1210.75 L2006.38 1210.75 L2005.8 1210.75 L2005.21 1210.75 L2004.62 1210.75 L2004.04 1210.75 L2003.45 1210.75 L2002.86 1210.75 L2002.28 1210.75 L2001.69 1210.75 L2001.11 1210.75 L2000.52 1210.75 L1999.93 1210.75 L1999.35 1210.75 L1998.76 1210.75 L1998.17 1210.75 L1997.59 1210.75 L1997 1210.75 L1996.41 1210.75 L1995.83 1210.75 L1995.24 1210.75 L1994.65 1210.75 L1994.07 1210.75 L1993.48 1210.75 L1992.9 1210.75 L1992.31 1210.75 L1991.72 1210.75 L1991.14 1210.75 L1990.55 1210.75 L1989.96 1210.75 L1989.38 1210.75 L1988.79 1210.75 L1988.2 1210.75 L1987.62 1210.75 L1987.03 1210.75 L1986.45 1210.75 L1985.86 1210.75 L1985.27 1210.75 L1984.69 1210.75 L1984.1 1210.75 L1983.51 1210.75 L1982.93 1210.75 L1982.34 1210.75 L1981.75 1210.75 L1981.17 1210.75 L1980.58 1210.75 L1979.99 1210.75 L1979.41 1210.75 L1978.82 1210.75 L1978.24 1210.75 L1977.65 1210.75 L1977.06 1210.75 L1976.48 1210.75 L1975.89 1210.75 L1975.3 1210.75 L1974.72 1210.75 L1974.13 1210.75 L1973.54 1210.75 L1972.96 1210.75 L1972.37 1210.75 L1971.78 1210.75 L1971.2 1210.75 L1970.61 1210.75 L1970.03 1210.75 L1969.44 1210.75 L1968.85 1210.75 L1968.27 1210.75 L1967.68 1210.75 L1967.09 1210.75 L1966.51 1210.75 L1965.92 1210.75 L1965.33 1210.75 L1964.75 1210.75 L1964.16 1210.75 L1963.58 1210.75 L1962.99 1210.75 L1962.4 1210.75 L1961.82 1210.75 L1961.23 1210.75 L1960.64 1210.75 L1960.06 1210.75 L1959.47 1210.75 L1958.88 1210.75 L1958.3 1210.75 L1957.71 1210.75 L1957.12 1210.75 L1956.54 1210.75 L1955.95 1210.75 L1955.37 1210.75 L1954.78 1210.75 L1954.19 1210.75 L1953.61 1210.75 L1953.02 1210.75 L1952.43 1210.75 L1951.85 1210.75 L1951.26 1210.75 L1950.67 1210.75 L1950.09 1210.75 L1949.5 1210.75 L1948.91 1210.75 L1948.33 1210.75 L1947.74 1210.75 L1947.16 1210.75 L1946.57 1210.75 L1945.98 1210.75 L1945.4 1210.75 L1944.81 1210.75 L1944.22 1210.75 L1943.64 1210.75 L1943.05 1210.75 L1942.46 1210.75 L1941.88 1210.75 L1941.29 1210.75 L1940.71 1210.75 L1940.12 1210.75 L1939.53 1210.75 L1938.95 1210.75 L1938.36 1210.75 L1937.77 1210.75 L1937.19 1210.75 L1936.6 1210.75 L1936.01 1210.75 L1935.43 1210.75 L1934.84 1210.75 L1934.25 1210.75 L1933.67 1210.75 L1933.08 1210.75 L1932.5 1210.75 L1931.91 1210.75 L1931.32 1210.75 L1930.74 1210.75 L1930.15 1210.75 L1929.56 1210.75 L1928.98 1210.75 L1928.39 1210.75 L1927.8 1210.75 L1927.22 1210.75 L1926.63 1210.75 L1926.04 1210.75 L1925.46 1210.75 L1924.87 1210.75 L1924.29 1210.75 L1923.7 1210.75 L1923.11 1210.75 L1922.53 1210.75 L1921.94 1210.75 L1921.35 1210.75 L1920.77 1210.75 L1920.18 1210.75 L1919.59 1210.75 L1919.01 1210.75 L1918.42 1210.75 L1917.83 1210.75 L1917.25 1210.75 L1916.66 1210.75 L1916.08 1210.75 L1915.49 1210.75 L1914.9 1210.75 L1914.32 1210.75 L1913.73 1210.75 L1913.14 1210.75 L1912.56 1210.75 L1911.97 1210.75 L1911.38 1210.75 L1910.8 1210.75 L1910.21 1210.75 L1909.63 1210.75 L1909.04 1210.75 L1908.45 1210.75 L1907.87 1210.75 L1907.28 1210.75 L1906.69 1210.75 L1906.11 1210.75 L1905.52 1210.75 L1904.93 1210.75 L1904.35 1210.75 L1903.76 1210.75 L1903.17 1210.75 L1902.59 1210.75 L1902 1210.75 L1901.42 1210.75 L1900.83 1210.75 L1900.24 1210.75 L1899.66 1210.75 L1899.07 1210.75 L1898.48 1210.75 L1897.9 1210.75 L1897.31 1210.75 L1896.72 1210.75 L1896.14 1210.75 L1895.55 1210.75 L1894.96 1210.75 L1894.38 1210.75 L1893.79 1210.75 L1893.21 1210.75 L1892.62 1210.75 L1892.03 1210.75 L1891.45 1210.75 L1890.86 1210.75 L1890.27 1210.75 L1889.69 1210.75 L1889.1 1210.75 L1888.51 1210.75 L1887.93 1210.75 L1887.34 1210.75 L1886.76 1210.75 L1886.17 1210.75 L1885.58 1210.75 L1885 1210.75 L1884.41 1210.75 L1883.82 1210.75 L1883.24 1210.75 L1882.65 1210.75 L1882.06 1210.75 L1881.48 1210.75 L1880.89 1210.75 L1880.3 1210.75 L1879.72 1210.75 L1879.13 1210.75 L1878.55 1210.75 L1877.96 1210.75 L1877.37 1210.75 L1876.79 1210.75 L1876.2 1210.75 L1875.61 1210.75 L1875.03 1210.75 L1874.44 1210.75 L1873.85 1210.75 L1873.27 1210.75 L1872.68 1210.75 L1872.09 1210.75 L1871.51 1210.75 L1870.92 1210.75 L1870.34 1210.75 L1869.75 1210.75 L1869.16 1210.75 L1868.58 1210.75 L1867.99 1210.75 L1867.4 1210.75 L1866.82 1210.75 L1866.23 1210.75 L1865.64 1210.75 L1865.06 1210.75 L1864.47 1210.75 L1863.88 1210.75 L1863.3 1210.75 L1862.71 1210.75 L1862.13 1210.75 L1861.54 1210.75 L1860.95 1210.75 L1860.37 1210.75 L1859.78 1210.75 L1859.19 1210.75 L1858.61 1210.75 L1858.02 1210.75 L1857.43 1210.75 L1856.85 1210.75 L1856.26 1210.75 L1855.68 1210.75 L1855.09 1210.75 L1854.5 1210.75 L1853.92 1210.75 L1853.33 1210.75 L1852.74 1210.75 L1852.16 1210.75 L1851.57 1210.75 L1850.98 1210.75 L1850.4 1210.75 L1849.81 1210.75 L1849.22 1210.75 L1848.64 1210.75 L1848.05 1210.75 L1847.47 1210.75 L1846.88 1210.75 L1846.29 1210.75 L1845.71 1210.75 L1845.12 1210.75 L1844.53 1210.75 L1843.95 1210.75 L1843.36 1210.75 L1842.77 1210.75 L1842.19 1210.75 L1841.6 1210.75 L1841.01 1210.75 L1840.43 1210.75 L1839.84 1210.75 L1839.26 1210.75 L1838.67 1210.75 L1838.08 1210.75 L1837.5 1210.75 L1836.91 1210.75 L1836.32 1210.75 L1835.74 1210.75 L1835.15 1210.75 L1834.56 1210.75 L1833.98 1210.75 L1833.39 1210.75 L1832.81 1210.75 L1832.22 1210.75 L1831.63 1210.75 L1831.05 1210.75 L1830.46 1210.75 L1829.87 1210.75 L1829.29 1210.75 L1828.7 1210.75 L1828.11 1210.75 L1827.53 1210.75 L1826.94 1210.75 L1826.35 1210.75 L1825.77 1210.75 L1825.18 1210.75 L1824.6 1210.75 L1824.01 1210.75 L1823.42 1210.75 L1822.84 1210.75 L1822.25 1210.75 L1821.66 1210.75 L1821.08 1210.75 L1820.49 1210.75 L1819.9 1210.75 L1819.32 1210.75 L1818.73 1210.75 L1818.14 1210.75 L1817.56 1210.75 L1816.97 1210.75 L1816.39 1210.75 L1815.8 1210.75 L1815.21 1210.75 L1814.63 1210.75 L1814.04 1210.75 L1813.45 1210.75 L1812.87 1210.75 L1812.28 1210.75 L1811.69 1210.75 L1811.11 1210.75 L1810.52 1210.75 L1809.94 1210.75 L1809.35 1210.75 L1808.76 1210.75 L1808.18 1210.75 L1807.59 1210.75 L1807 1210.75 L1806.42 1210.75 L1805.83 1210.75 L1805.24 1210.75 L1804.66 1210.75 L1804.07 1210.75 L1803.48 1210.75 L1802.9 1210.75 L1802.31 1210.75 L1801.73 1210.75 L1801.14 1210.75 L1800.55 1210.75 L1799.97 1210.75 L1799.38 1210.75 L1798.79 1210.75 L1798.21 1210.75 L1797.62 1210.75 L1797.03 1210.75 L1796.45 1210.75 L1795.86 1210.75 L1795.27 1210.75 L1794.69 1210.75 L1794.1 1210.75 L1793.52 1210.75 L1792.93 1210.75 L1792.34 1210.75 L1791.76 1210.75 L1791.17 1210.75 L1790.58 1210.75 L1790 1210.75 L1789.41 1210.75 L1788.82 1210.75 L1788.24 1210.75 L1787.65 1210.75 L1787.06 1210.75 L1786.48 1210.75 L1785.89 1210.75 L1785.31 1210.75 L1784.72 1210.75 L1784.13 1210.75 L1783.55 1210.75 L1782.96 1210.75 L1782.37 1210.75 L1781.79 1210.75 L1781.2 1210.75 L1780.61 1210.75 L1780.03 1210.75 L1779.44 1210.75 L1778.86 1210.75 L1778.27 1210.75 L1777.68 1210.75 L1777.1 1210.75 L1776.51 1210.75 L1775.92 1210.75 L1775.34 1210.75 L1774.75 1210.75 L1774.16 1210.75 L1773.58 1210.75 L1772.99 1210.75 L1772.4 1210.75 L1771.82 1210.75 L1771.23 1210.75 L1770.65 1210.75 L1770.06 1210.75 L1769.47 1210.75 L1768.89 1210.75 L1768.3 1210.75 L1767.71 1210.75 L1767.13 1210.75 L1766.54 1210.75 L1765.95 1210.75 L1765.37 1210.75 L1764.78 1210.75 L1764.19 1210.75 L1763.61 1210.75 L1763.02 1210.75 L1762.44 1210.75 L1761.85 1210.75 L1761.26 1210.75 L1760.68 1210.75 L1760.09 1210.75 L1759.5 1210.75 L1758.92 1210.75 L1758.33 1210.75 L1757.74 1210.75 L1757.16 1210.75 L1756.57 1210.75 L1755.99 1210.75 L1755.4 1210.75 L1754.81 1210.75 L1754.23 1210.75 L1753.64 1210.75 L1753.05 1210.75 L1752.47 1210.75 L1751.88 1210.75 L1751.29 1210.75 L1750.71 1210.75 L1750.12 1210.75 L1749.53 1210.75 L1748.95 1210.75 L1748.36 1210.75 L1747.78 1210.75 L1747.19 1210.75 L1746.6 1210.75 L1746.02 1210.75 L1745.43 1210.75 L1744.84 1210.75 L1744.26 1210.75 L1743.67 1210.75 L1743.08 1210.75 L1742.5 1210.75 L1741.91 1210.75 L1741.32 1210.75 L1740.74 1210.75 L1740.15 1210.75 L1739.57 1210.75 L1738.98 1210.75 L1738.39 1210.75 L1737.81 1210.75 L1737.22 1210.75 L1736.63 1210.75 L1736.05 1210.75 L1735.46 1210.75 L1734.87 1210.75 L1734.29 1210.75 L1733.7 1210.75 L1733.11 1210.75 L1732.53 1210.75 L1731.94 1210.75 L1731.36 1210.75 L1730.77 1210.75 L1730.18 1210.75 L1729.6 1210.75 L1729.01 1210.75 L1728.42 1210.75 L1727.84 1210.75 L1727.25 1210.75 L1726.66 1210.75 L1726.08 1210.75 L1725.49 1210.75 L1724.91 1210.75 L1724.32 1210.75 L1723.73 1210.75 L1723.15 1210.75 L1722.56 1210.75 L1721.97 1210.75 L1721.39 1210.75 L1720.8 1210.75 L1720.21 1210.75 L1719.63 1210.75 L1719.04 1210.75 L1718.45 1210.75 L1717.87 1210.75 L1717.28 1210.75 L1716.7 1210.75 L1716.11 1210.75 L1715.52 1210.75 L1714.94 1210.75 L1714.35 1210.75 L1713.76 1210.75 L1713.18 1210.75 L1712.59 1210.75 L1712 1210.75 L1711.42 1210.75 L1710.83 1210.75 L1710.24 1210.75 L1709.66 1210.75 L1709.07 1210.75 L1708.49 1210.75 L1707.9 1210.75 L1707.31 1210.75 L1706.73 1210.75 L1706.14 1210.75 L1705.55 1210.75 L1704.97 1210.75 L1704.38 1210.75 L1703.79 1210.75 L1703.21 1210.75 L1702.62 1210.75 L1702.04 1210.75 L1701.45 1210.75 L1700.86 1210.75 L1700.28 1210.75 L1699.69 1210.75 L1699.1 1210.75 L1698.52 1210.75 L1697.93 1210.75 L1697.34 1210.75 L1696.76 1210.75 L1696.17 1210.75 L1695.58 1210.75 L1695 1210.75 L1694.41 1210.75 L1693.83 1210.75 L1693.24 1210.75 L1692.65 1210.75 L1692.07 1210.75 L1691.48 1210.75 L1690.89 1210.75 L1690.31 1210.75 L1689.72 1210.75 L1689.13 1210.75 L1688.55 1210.75 L1687.96 1210.75 L1687.37 1210.75 L1686.79 1210.75 L1686.2 1210.75 L1685.62 1210.75 L1685.03 1210.75 L1684.44 1210.75 L1683.86 1210.75 L1683.27 1210.75 L1682.68 1210.75 L1682.1 1210.75 L1681.51 1210.75 L1680.92 1210.75 L1680.34 1210.75 L1679.75 1210.75 L1679.17 1210.75 L1678.58 1210.75 L1677.99 1210.75 L1677.41 1210.75 L1676.82 1210.75 L1676.23 1210.75 L1675.65 1210.75 L1675.06 1210.75 L1674.47 1210.75 L1673.89 1210.75 L1673.3 1210.75 L1672.71 1210.75 L1672.13 1210.75 L1671.54 1210.75 L1670.96 1210.75 L1670.37 1210.75 L1669.78 1210.75 L1669.2 1210.75 L1668.61 1210.75 L1668.02 1210.75 L1667.44 1210.75 L1666.85 1210.75 L1666.26 1210.75 L1665.68 1210.75 L1665.09 1210.75 L1664.5 1210.75 L1663.92 1210.75 L1663.33 1210.75 L1662.75 1210.75 L1662.16 1210.75 L1661.57 1210.75 L1660.99 1210.75 L1660.4 1210.75 L1659.81 1210.75 L1659.23 1210.75 L1658.64 1210.75 L1658.05 1210.75 L1657.47 1210.75 L1656.88 1210.75 L1656.29 1210.75 L1655.71 1210.75 L1655.12 1210.75 L1654.54 1210.75 L1653.95 1210.75 L1653.36 1210.75 L1652.78 1210.75 L1652.19 1210.75 L1651.6 1210.75 L1651.02 1210.75 L1650.43 1210.75 L1649.84 1210.75 L1649.26 1210.75 L1648.67 1210.75 L1648.09 1210.75 L1647.5 1210.75 L1646.91 1210.75 L1646.33 1210.75 L1645.74 1210.75 L1645.15 1210.75 L1644.57 1210.75 L1643.98 1210.75 L1643.39 1210.75 L1642.81 1210.75 L1642.22 1210.75 L1641.63 1210.75 L1641.05 1210.75 L1640.46 1210.75 L1639.88 1210.75 L1639.29 1210.75 L1638.7 1210.75 L1638.12 1210.75 L1637.53 1210.75 L1636.94 1210.75 L1636.36 1210.75 L1635.77 1210.75 L1635.18 1210.75 L1634.6 1210.75 L1634.01 1210.75 L1633.42 1210.75 L1632.84 1210.75 L1632.25 1210.75 L1631.67 1210.75 L1631.08 1210.75 L1630.49 1210.75 L1629.91 1210.75 L1629.32 1210.75 L1628.73 1210.75 L1628.15 1210.75 L1627.56 1210.75 L1626.97 1210.75 L1626.39 1210.75 L1625.8 1210.75 L1625.22 1210.75 L1624.63 1210.75 L1624.04 1210.75 L1623.46 1210.75 L1622.87 1210.75 L1622.28 1210.75 L1621.7 1210.75 L1621.11 1210.75 L1620.52 1210.75 L1619.94 1210.75 L1619.35 1210.75 L1618.76 1210.75 L1618.18 1210.75 L1617.59 1210.75 L1617.01 1210.75 L1616.42 1210.75 L1615.83 1210.75 L1615.25 1210.75 L1614.66 1210.75 L1614.07 1210.75 L1613.49 1210.75 L1612.9 1210.75 L1612.31 1210.75 L1611.73 1210.75 L1611.14 1210.75 L1610.55 1210.75 L1609.97 1210.75 L1609.38 1210.75 L1608.8 1210.75 L1608.21 1210.75 L1607.62 1210.75 L1607.04 1210.75 L1606.45 1210.75 L1605.86 1210.75 L1605.28 1210.75 L1604.69 1210.75 L1604.1 1210.75 L1603.52 1210.75 L1602.93 1210.75 L1602.34 1210.75 L1601.76 1210.75 L1601.17 1210.75 L1600.59 1210.75 L1600 1210.75 L1599.41 1210.75 L1598.83 1210.75 L1598.24 1210.75 L1597.65 1210.75 L1597.07 1210.75 L1596.48 1210.75 L1595.89 1210.75 L1595.31 1210.75 L1594.72 1210.75 L1594.14 1210.75 L1593.55 1210.75 L1592.96 1210.75 L1592.38 1210.75 L1591.79 1210.75 L1591.2 1210.75 L1590.62 1210.75 L1590.03 1210.75 L1589.44 1210.75 L1588.86 1210.75 L1588.27 1210.75 L1587.68 1210.75 L1587.1 1210.75 L1586.51 1210.75 L1585.93 1210.75 L1585.34 1210.75 L1584.75 1210.75 L1584.17 1210.75 L1583.58 1210.75 L1582.99 1210.75 L1582.41 1210.75 L1581.82 1210.75 L1581.23 1210.75 L1580.65 1210.75 L1580.06 1210.75 L1579.47 1210.75 L1578.89 1210.75 L1578.3 1210.75 L1577.72 1210.75 L1577.13 1210.75 L1576.54 1210.75 L1575.96 1210.75 L1575.37 1210.75 L1574.78 1210.75 L1574.2 1210.75 L1573.61 1210.75 L1573.02 1210.75 L1572.44 1210.75 L1571.85 1210.75 L1571.27 1210.75 L1570.68 1210.75 L1570.09 1210.75 L1569.51 1210.75 L1568.92 1210.75 L1568.33 1210.75 L1567.75 1210.75 L1567.16 1210.75 L1566.57 1210.75 L1565.99 1210.75 L1565.4 1210.75 L1564.81 1210.75 L1564.23 1210.75 L1563.64 1210.75 L1563.06 1210.75 L1562.47 1210.75 L1561.88 1210.75 L1561.3 1210.75 L1560.71 1210.75 L1560.12 1210.75 L1559.54 1210.75 L1558.95 1210.75 L1558.36 1210.75 L1557.78 1210.75 L1557.19 1210.75 L1556.6 1210.75 L1556.02 1210.75 L1555.43 1210.75 L1554.85 1210.75 L1554.26 1210.75 L1553.67 1210.75 L1553.09 1210.75 L1552.5 1210.75 L1551.91 1210.75 L1551.33 1210.75 L1550.74 1210.75 L1550.15 1210.75 L1549.57 1210.75 L1548.98 1210.75 L1548.4 1210.75 L1547.81 1210.75 L1547.22 1210.75 L1546.64 1210.75 L1546.05 1210.75 L1545.46 1210.75 L1544.88 1210.75 L1544.29 1210.75 L1543.7 1210.75 L1543.12 1210.75 L1542.53 1210.75 L1541.94 1210.75 L1541.36 1210.75 L1540.77 1210.75 L1540.19 1210.75 L1539.6 1210.75 L1539.01 1210.75 L1538.43 1210.75 L1537.84 1210.75 L1537.25 1210.75 L1536.67 1210.75 L1536.08 1210.75 L1535.49 1210.75 L1534.91 1210.75 L1534.32 1210.75 L1533.73 1210.75 L1533.15 1210.75 L1532.56 1210.75 L1531.98 1210.75 L1531.39 1210.75 L1530.8 1210.75 L1530.22 1210.75 L1529.63 1210.75 L1529.04 1210.75 L1528.46 1210.75 L1527.87 1210.75 L1527.28 1210.75 L1526.7 1210.75 L1526.11 1210.75 L1525.52 1210.75 L1524.94 1210.75 L1524.35 1210.75 L1523.77 1210.75 L1523.18 1210.75 L1522.59 1210.75 L1522.01 1210.75 L1521.42 1210.75 L1520.83 1210.75 L1520.25 1210.75 L1519.66 1210.75 L1519.07 1210.75 L1518.49 1210.75 L1517.9 1210.75 L1517.32 1210.75 L1516.73 1210.75 L1516.14 1210.75 L1515.56 1210.75 L1514.97 1210.75 L1514.38 1210.75 L1513.8 1210.75 L1513.21 1210.75 L1512.62 1210.75 L1512.04 1210.75 L1511.45 1210.75 L1510.86 1210.75 L1510.28 1210.75 L1509.69 1210.75 L1509.11 1210.75 L1508.52 1210.75 L1507.93 1210.75 L1507.35 1210.75 L1506.76 1210.75 L1506.17 1210.75 L1505.59 1210.75 L1505 1210.75 L1504.41 1210.75 L1503.83 1210.75 L1503.24 1210.75 L1502.65 1210.75 L1502.07 1210.75 L1501.48 1210.75 L1500.9 1210.75 L1500.31 1210.75 L1499.72 1210.75 L1499.14 1210.75 L1498.55 1210.75 L1497.96 1210.75 L1497.38 1210.75 L1496.79 1210.75 L1496.2 1210.75 L1495.62 1210.75 L1495.03 1210.75 L1494.45 1210.75 L1493.86 1210.75 L1493.27 1210.75 L1492.69 1210.75 L1492.1 1210.75 L1491.51 1210.75 L1490.93 1210.75 L1490.34 1210.75 L1489.75 1210.75 L1489.17 1210.75 L1488.58 1210.75 L1487.99 1210.75 L1487.41 1210.75 L1486.82 1210.75 L1486.24 1210.75 L1485.65 1210.75 L1485.06 1210.75 L1484.48 1210.75 L1483.89 1210.75 L1483.3 1210.75 L1482.72 1210.75 L1482.13 1210.75 L1481.54 1210.75 L1480.96 1210.75 L1480.37 1210.75 L1479.78 1210.75 L1479.2 1210.75 L1478.61 1210.75 L1478.03 1210.75 L1477.44 1210.75 L1476.85 1210.75 L1476.27 1210.75 L1475.68 1210.75 L1475.09 1210.75 L1474.51 1210.75 L1473.92 1210.75 L1473.33 1210.75 L1472.75 1210.75 L1472.16 1210.75 L1471.57 1210.75 L1470.99 1210.75 L1470.4 1210.75 L1469.82 1210.75 L1469.23 1210.75 L1468.64 1210.75 L1468.06 1210.75 L1467.47 1210.75 L1466.88 1210.75 L1466.3 1210.75 L1465.71 1210.75 L1465.12 1210.75 L1464.54 1210.75 L1463.95 1210.75 L1463.37 1210.75 L1462.78 1210.75 L1462.19 1210.75 L1461.61 1210.75 L1461.02 1210.75 L1460.43 1210.75 L1459.85 1210.75 L1459.26 1210.75 L1458.67 1210.75 L1458.09 1210.75 L1457.5 1210.75 L1456.91 1210.75 L1456.33 1210.75 L1455.74 1210.75 L1455.16 1210.75 L1454.57 1210.75 L1453.98 1210.75 L1453.4 1210.75 L1452.81 1210.75 L1452.22 1210.75 L1451.64 1210.75 L1451.05 1210.75 L1450.46 1210.75 L1449.88 1210.75 L1449.29 1210.75 L1448.7 1210.75 L1448.12 1210.75 L1447.53 1210.75 L1446.95 1210.75 L1446.36 1210.75 L1445.77 1210.75 L1445.19 1210.75 L1444.6 1210.75 L1444.01 1210.75 L1443.43 1210.75 L1442.84 1210.75 L1442.25 1210.75 L1441.67 1210.75 L1441.08 1210.75 L1440.5 1210.75 L1439.91 1210.75 L1439.32 1210.75 L1438.74 1210.75 L1438.15 1210.75 L1437.56 1210.75 L1436.98 1210.75 L1436.39 1210.75 L1435.8 1210.75 L1435.22 1210.75 L1434.63 1210.75 L1434.04 1210.75 L1433.46 1210.75 L1432.87 1210.75 L1432.29 1210.75 L1431.7 1210.75 L1431.11 1210.75 L1430.53 1210.75 L1429.94 1210.75 L1429.35 1210.75 L1428.77 1210.75 L1428.18 1210.75 L1427.59 1210.75 L1427.01 1210.75 L1426.42 1210.75 L1425.83 1210.75 L1425.25 1210.75 L1424.66 1210.75 L1424.08 1210.75 L1423.49 1210.75 L1422.9 1210.75 L1422.32 1210.75 L1421.73 1210.75 L1421.14 1210.75 L1420.56 1210.75 L1419.97 1210.75 L1419.38 1210.75 L1418.8 1210.75 L1418.21 1210.75 L1417.63 1210.75 L1417.04 1210.75 L1416.45 1210.75 L1415.87 1210.75 L1415.28 1210.75 L1414.69 1210.75 L1414.11 1210.75 L1413.52 1210.75 L1412.93 1210.75 L1412.35 1210.75 L1411.76 1210.75 L1411.17 1210.75 L1410.59 1210.75 L1410 1210.75 L1409.42 1210.75 L1408.83 1210.75 L1408.24 1210.75 L1407.66 1210.75 L1407.07 1210.75 L1406.48 1210.75 L1405.9 1210.75 L1405.31 1210.75 L1404.72 1210.75 L1404.14 1210.75 L1403.55 1210.75 L1402.96 1210.75 L1402.38 1210.75 L1401.79 1210.75 L1401.21 1210.75 L1400.62 1210.75 L1400.03 1210.75 L1399.45 1210.75 L1398.86 1210.75 L1398.27 1210.75 L1397.69 1210.75 L1397.1 1210.75 L1396.51 1210.75 L1395.93 1210.75 L1395.34 1210.75 L1394.75 1210.75 L1394.17 1210.75 L1393.58 1210.75 L1393 1210.75 L1392.41 1210.75 L1391.82 1210.75 L1391.24 1210.75 L1390.65 1210.75 L1390.06 1210.75 L1389.48 1210.75 L1388.89 1210.75 L1388.3 1210.75 L1387.72 1210.75 L1387.13 1210.75 L1386.55 1210.75 L1385.96 1210.75 L1385.37 1210.75 L1384.79 1210.75 L1384.2 1210.75 L1383.61 1210.75 L1383.03 1210.75 L1382.44 1210.75 L1381.85 1210.75 L1381.27 1210.75 L1380.68 1210.75 L1380.09 1210.75 L1379.51 1210.75 L1378.92 1210.75 L1378.34 1210.75 L1377.75 1210.75 L1377.16 1210.75 L1376.58 1210.75 L1375.99 1210.75 L1375.4 1210.75 L1374.82 1210.75 L1374.23 1210.75 L1373.64 1210.75 L1373.06 1210.75 L1372.47 1210.75 L1371.88 1210.75 L1371.3 1210.75 L1370.71 1210.75 L1370.13 1210.75 L1369.54 1210.75 L1368.95 1210.75 L1368.37 1210.75 L1367.78 1210.75 L1367.19 1210.75 L1366.61 1210.75 L1366.02 1210.75 L1365.43 1210.75 L1364.85 1210.75 L1364.26 1210.75 L1363.68 1210.75 L1363.09 1210.75 L1362.5 1210.75 L1361.92 1210.75 L1361.33 1210.75 L1360.74 1210.75 L1360.16 1210.75 L1359.57 1210.75 L1358.98 1210.75 L1358.4 1210.75 L1357.81 1210.75 L1357.22 1210.75 L1356.64 1210.75 L1356.05 1210.75 L1355.47 1210.75 L1354.88 1210.75 L1354.29 1210.75 L1353.71 1210.75 L1353.12 1210.75 L1352.53 1210.75 L1351.95 1210.75 L1351.36 1210.75 L1350.77 1210.75 L1350.19 1210.75 L1349.6 1210.75 L1349.01 1210.75 L1348.43 1210.75 L1347.84 1210.75 L1347.26 1210.75 L1346.67 1210.75 L1346.08 1210.75 L1345.5 1210.75 L1344.91 1210.75 L1344.32 1210.75 L1343.74 1210.75 L1343.15 1210.75 L1342.56 1210.75 L1341.98 1210.75 L1341.39 1210.75 L1340.8 1210.75 L1340.22 1210.75 L1339.63 1210.75 L1339.05 1210.75 L1338.46 1210.75 L1337.87 1210.75 L1337.29 1210.75 L1336.7 1210.75 L1336.11 1210.75 L1335.53 1210.75 L1334.94 1210.75 L1334.35 1210.75 L1333.77 1210.75 L1333.18 1210.75 L1332.6 1210.75 L1332.01 1210.75 L1331.42 1210.75 L1330.84 1210.75 L1330.25 1210.75 L1329.66 1210.75 L1329.08 1210.75 L1328.49 1210.75 L1327.9 1210.75 L1327.32 1210.75 L1326.73 1210.75 L1326.14 1210.75 L1325.56 1210.75 L1324.97 1210.75 L1324.39 1210.75 L1323.8 1210.75 L1323.21 1210.75 L1322.63 1210.75 L1322.04 1210.75 L1321.45 1210.75 L1320.87 1210.75 L1320.28 1210.75 L1319.69 1210.75 L1319.11 1210.75 L1318.52 1210.75 L1317.93 1210.75 L1317.35 1210.75 L1316.76 1210.75 L1316.18 1210.75 L1315.59 1210.75 L1315 1210.75 L1314.42 1210.75 L1313.83 1210.75 L1313.24 1210.75 L1312.66 1210.75 L1312.07 1210.75 L1311.48 1210.75 L1310.9 1210.75 L1310.31 1210.75 L1309.73 1210.75 L1309.14 1210.75 L1308.55 1210.75 L1307.97 1210.75 L1307.38 1210.75 L1306.79 1210.75 L1306.21 1210.75 L1305.62 1210.75 L1305.03 1210.75 L1304.45 1210.75 L1303.86 1210.75 L1303.27 1210.75 L1302.69 1210.75 L1302.1 1210.75 L1301.52 1210.75 L1300.93 1210.75 L1300.34 1210.75 L1299.76 1210.75 L1299.17 1210.75 L1298.58 1210.75 L1298 1210.75 L1297.41 1210.75 L1296.82 1210.75 L1296.24 1210.75 L1295.65 1210.75 L1295.06 1210.75 L1294.48 1210.75 L1293.89 1210.75 L1293.31 1210.75 L1292.72 1210.75 L1292.13 1210.75 L1291.55 1210.75 L1290.96 1210.75 L1290.37 1210.75 L1289.79 1210.75 L1289.2 1210.75 L1288.61 1210.75 L1288.03 1210.75 L1287.44 1210.75 L1286.86 1210.75 L1286.27 1210.75 L1285.68 1210.75 L1285.1 1210.75 L1284.51 1210.75 L1283.92 1210.75 L1283.34 1210.75 L1282.75 1210.75 L1282.16 1210.75 L1281.58 1210.75 L1280.99 1210.75 L1280.4 1210.75 L1279.82 1210.75 L1279.23 1210.75 L1278.65 1210.75 L1278.06 1210.75 L1277.47 1210.75 L1276.89 1210.75 L1276.3 1210.75 L1275.71 1210.75 L1275.13 1210.75 L1274.54 1210.75 L1273.95 1210.75 L1273.37 1210.75 L1272.78 1210.75 L1272.19 1210.75 L1271.61 1210.75 L1271.02 1210.75 L1270.44 1210.75 L1269.85 1210.75 L1269.26 1210.75 L1268.68 1210.75 L1268.09 1210.75 L1267.5 1210.75 L1266.92 1210.75 L1266.33 1210.75 L1265.74 1210.75 L1265.16 1210.75 L1264.57 1210.75 L1263.98 1210.75 L1263.4 1210.75 L1262.81 1210.75 L1262.23 1210.75 L1261.64 1210.75 L1261.05 1210.75 L1260.47 1210.75 L1259.88 1210.75 L1259.29 1210.75 L1258.71 1210.75 L1258.12 1210.75 L1257.53 1210.75 L1256.95 1210.75 L1256.36 1210.75 L1255.78 1210.75 L1255.19 1210.75 L1254.6 1210.75 L1254.02 1210.75 L1253.43 1210.75 L1252.84 1210.75 L1252.26 1210.75 L1251.67 1210.75 L1251.08 1210.75 L1250.5 1210.75 L1249.91 1210.75 L1249.32 1210.75 L1248.74 1210.75 L1248.15 1210.75 L1247.57 1210.75 L1246.98 1210.75 L1246.39 1210.75 L1245.81 1210.75 L1245.22 1210.75 L1244.63 1210.75 L1244.05 1210.75 L1243.46 1210.75 L1242.87 1210.75 L1242.29 1210.75 L1241.7 1210.75 L1241.11 1210.75 L1240.53 1210.75 L1239.94 1210.75 L1239.36 1210.75 L1238.77 1210.75 L1238.18 1210.75 L1237.6 1210.75 L1237.01 1210.75 L1236.42 1210.75 L1235.84 1210.75 L1235.25 1210.75 L1234.66 1210.75 L1234.08 1210.75 L1233.49 1210.75 L1232.91 1210.75 L1232.32 1210.75 L1231.73 1210.75 L1231.15 1210.75 L1230.56 1210.75 L1229.97 1210.75 L1229.39 1210.75 L1228.8 1210.75 L1228.21 1210.75 L1227.63 1210.75 L1227.04 1210.75 L1226.45 1210.75 L1225.87 1210.75 L1225.28 1210.75 L1224.7 1210.75 L1224.11 1210.75 L1223.52 1210.75 L1222.94 1210.75 L1222.35 1210.75 L1221.76 1210.75 L1221.18 1210.75 L1220.59 1210.75 L1220 1210.75 L1219.42 1210.75 L1218.83 1210.75 L1218.24 1210.75 L1217.66 1210.75 L1217.07 1210.75 L1216.49 1210.75 L1215.9 1210.75 L1215.31 1210.75 L1214.73 1210.75 L1214.14 1210.75 L1213.55 1210.75 L1212.97 1210.75 L1212.38 1210.75 L1211.79 1210.75 L1211.21 1210.75 L1210.62 1210.75 L1210.03 1210.75 L1209.45 1210.75 L1208.86 1210.75 L1208.28 1210.75 L1207.69 1210.75 L1207.1 1210.75 L1206.52 1210.75 L1205.93 1210.75 L1205.34 1210.75 L1204.76 1210.75 L1204.17 1210.75 L1203.58 1210.75 L1203 1210.75 L1202.41 1210.75 L1201.83 1210.75 L1201.24 1210.75 L1200.65 1210.75 L1200.07 1210.75 L1199.48 1210.75 L1198.89 1210.75 L1198.31 1210.75 L1197.72 1210.75 L1197.13 1210.75 L1196.55 1210.75 L1195.96 1210.75 L1195.37 1210.75 L1194.79 1210.75 L1194.2 1210.75 L1193.62 1210.75 L1193.03 1210.75 L1192.44 1210.75 L1191.86 1210.75 L1191.27 1210.75 L1190.68 1210.75 L1190.1 1210.75 L1189.51 1210.75 L1188.92 1210.75 L1188.34 1210.75 L1187.75 1210.75 L1187.16 1210.75 L1186.58 1210.75 L1185.99 1210.75 L1185.41 1210.75 L1184.82 1210.75 L1184.23 1210.75 L1183.65 1210.75 L1183.06 1210.75 L1182.47 1210.75 L1181.89 1210.75 L1181.3 1210.75 L1180.71 1210.75 L1180.13 1210.75 L1179.54 1210.75 L1178.96 1210.75 L1178.37 1210.75 L1177.78 1210.75 L1177.2 1210.75 L1176.61 1210.75 L1176.02 1210.75 L1175.44 1210.75 L1174.85 1210.75 L1174.26 1210.75 L1173.68 1210.75 L1173.09 1210.75 L1172.5 1210.75 L1171.92 1210.75 L1171.33 1210.75 L1170.75 1210.75 L1170.16 1210.75 L1169.57 1210.75 L1168.99 1210.75 L1168.4 1210.75 L1167.81 1210.75 L1167.23 1210.75 L1166.64 1210.75 L1166.05 1210.75 L1165.47 1210.75 L1164.88 1210.75 L1164.29 1210.75 L1163.71 1210.75 L1163.12 1210.75 L1162.54 1210.75 L1161.95 1210.75 L1161.36 1210.75 L1160.78 1210.75 L1160.19 1210.75 L1159.6 1210.75 L1159.02 1210.75 L1158.43 1210.75 L1157.84 1210.75 L1157.26 1210.75 L1156.67 1210.75 L1156.09 1210.75 L1155.5 1210.75 L1154.91 1210.75 L1154.33 1210.75 L1153.74 1210.75 L1153.15 1210.75 L1152.57 1210.75 L1151.98 1210.75 L1151.39 1210.75 L1150.81 1210.75 L1150.22 1210.75 L1149.63 1210.75 L1149.05 1210.75 L1148.46 1210.75 L1147.88 1210.75 L1147.29 1210.75 L1146.7 1210.75 L1146.12 1210.75 L1145.53 1210.75 L1144.94 1210.75 L1144.36 1210.75 L1143.77 1210.75 L1143.18 1210.75 L1142.6 1210.75 L1142.01 1210.75 L1141.42 1210.75 L1140.84 1210.75 L1140.25 1210.75 L1139.67 1210.75 L1139.08 1210.75 L1138.49 1210.75 L1137.91 1210.75 L1137.32 1210.75 L1136.73 1210.75 L1136.15 1210.75 L1135.56 1210.75 L1134.97 1210.75 L1134.39 1210.75 L1133.8 1210.75 L1133.21 1210.75 L1132.63 1210.75 L1132.04 1210.75 L1131.46 1210.75 L1130.87 1210.75 L1130.28 1210.75 L1129.7 1210.75 L1129.11 1210.75 L1128.52 1210.75 L1127.94 1210.75 L1127.35 1210.75 L1126.76 1210.75 L1126.18 1210.75 L1125.59 1210.75 L1125.01 1210.75 L1124.42 1210.75 L1123.83 1210.75 L1123.25 1210.75 L1122.66 1210.75 L1122.07 1210.75 L1121.49 1210.75 L1120.9 1210.75 L1120.31 1210.75 L1119.73 1210.75 L1119.14 1210.75 L1118.55 1210.75 L1117.97 1210.75 L1117.38 1210.75 L1116.8 1210.75 L1116.21 1210.75 L1115.62 1210.75 L1115.04 1210.75 L1114.45 1210.75 L1113.86 1210.75 L1113.28 1210.75 L1112.69 1210.75 L1112.1 1210.75 L1111.52 1210.75 L1110.93 1210.75 L1110.34 1210.75 L1109.76 1210.75 L1109.17 1210.75 L1108.59 1210.75 L1108 1210.75 L1107.41 1210.75 L1106.83 1210.75 L1106.24 1210.75 L1105.65 1210.75 L1105.07 1210.75 L1104.48 1210.75 L1103.89 1210.75 L1103.31 1210.75 L1102.72 1210.75 L1102.14 1210.75 L1101.55 1210.75 L1100.96 1210.75 L1100.38 1210.75 L1099.79 1210.75 L1099.2 1210.75 L1098.62 1210.75 L1098.03 1210.75 L1097.44 1210.75 L1096.86 1210.75 L1096.27 1210.75 L1095.68 1210.75 L1095.1 1210.75 L1094.51 1210.75 L1093.93 1210.75 L1093.34 1210.75 L1092.75 1210.75 L1092.17 1210.75 L1091.58 1210.75 L1090.99 1210.75 L1090.41 1210.75 L1089.82 1210.75 L1089.23 1210.75 L1088.65 1210.75 L1088.06 1210.75 L1087.47 1210.75 L1086.89 1210.75 L1086.3 1210.75 L1085.72 1210.75 L1085.13 1210.75 L1084.54 1210.75 L1083.96 1210.75 L1083.37 1210.75 L1082.78 1210.75 L1082.2 1210.75 L1081.61 1210.75 L1081.02 1210.75 L1080.44 1210.75 L1079.85 1210.75 L1079.26 1210.75 L1078.68 1210.75 L1078.09 1210.75 L1077.51 1210.75 L1076.92 1210.75 L1076.33 1210.75 L1075.75 1210.75 L1075.16 1210.75 L1074.57 1210.75 L1073.99 1210.75 L1073.4 1210.75 L1072.81 1210.75 L1072.23 1210.75 L1071.64 1210.75 L1071.06 1210.75 L1070.47 1210.75 L1069.88 1210.75 L1069.3 1210.75 L1068.71 1210.75 L1068.12 1210.75 L1067.54 1210.75 L1066.95 1210.75 L1066.36 1210.75 L1065.78 1210.75 L1065.19 1210.75 L1064.6 1210.75 L1064.02 1210.75 L1063.43 1210.75 L1062.85 1210.75 L1062.26 1210.75 L1061.67 1210.75 L1061.09 1210.75 L1060.5 1210.75 L1059.91 1210.75 L1059.33 1210.75 L1058.74 1210.75 L1058.15 1210.75 L1057.57 1210.75 L1056.98 1210.75 L1056.39 1210.75 L1055.81 1210.75 L1055.22 1210.75 L1054.64 1210.75 L1054.05 1210.75 L1053.46 1210.75 L1052.88 1210.75 L1052.29 1210.75 L1051.7 1210.75 L1051.12 1210.75 L1050.53 1210.75 L1049.94 1210.75 L1049.36 1210.75 L1048.77 1210.75 L1048.19 1210.75 L1047.6 1210.75 L1047.01 1210.75 L1046.43 1210.75 L1045.84 1210.75 L1045.25 1210.75 L1044.67 1210.75 L1044.08 1210.75 L1043.49 1210.75 L1042.91 1210.75 L1042.32 1210.75 L1041.73 1210.75 L1041.15 1210.75 L1040.56 1210.75 L1039.98 1210.75 L1039.39 1210.75 L1038.8 1210.75 L1038.22 1210.75 L1037.63 1210.75 L1037.04 1210.75 L1036.46 1210.75 L1035.87 1210.75 L1035.28 1210.75 L1034.7 1210.75 L1034.11 1210.75 L1033.52 1210.75 L1032.94 1210.75 L1032.35 1210.75 L1031.77 1210.75 L1031.18 1210.75 L1030.59 1210.75 L1030.01 1210.75 L1029.42 1210.75 L1028.83 1210.75 L1028.25 1210.75 L1027.66 1210.75 L1027.07 1210.75 L1026.49 1210.75 L1025.9 1210.75 L1025.32 1210.75 L1024.73 1210.75 L1024.14 1210.75 L1023.56 1210.75 L1022.97 1210.75 L1022.38 1210.75 L1021.8 1210.75 L1021.21 1210.75 L1020.62 1210.75 L1020.04 1210.75 L1019.45 1210.75 L1018.86 1210.75 L1018.28 1210.75 L1017.69 1210.75 L1017.11 1210.75 L1016.52 1210.75 L1015.93 1210.75 L1015.35 1210.75 L1014.76 1210.75 L1014.17 1210.75 L1013.59 1210.75 L1013 1210.75 L1012.41 1210.75 L1011.83 1210.75 L1011.24 1210.75 L1010.65 1210.75 L1010.07 1210.75 L1009.48 1210.75 L1008.9 1210.75 L1008.31 1210.75 L1007.72 1210.75 L1007.14 1210.75 L1006.55 1210.75 L1005.96 1210.75 L1005.38 1210.75 L1004.79 1210.75 L1004.2 1210.75 L1003.62 1210.75 L1003.03 1210.75 L1002.44 1210.75 L1001.86 1210.75 L1001.27 1210.75 L1000.69 1210.75 L1000.1 1210.75 L999.513 1210.75 L998.926 1210.75 L998.34 1210.75 L997.754 1210.75 L997.167 1210.75 L996.581 1210.75 L995.994 1210.75 L995.408 1210.75 L994.822 1210.75 L994.235 1210.75 L993.649 1210.75 L993.062 1210.75 L992.476 1210.75 L991.889 1210.75 L991.303 1210.75 L990.717 1210.75 L990.13 1210.75 L989.544 1210.75 L988.957 1210.75 L988.371 1210.75 L987.785 1210.75 L987.198 1210.75 L986.612 1210.75 L986.025 1210.75  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.83 986.612,1210.83 987.198,1210.83 987.785,1210.83 988.371,1210.83 988.957,1210.83 989.544,1210.83 990.13,1210.83 990.717,1210.83 991.303,1210.83 991.889,1210.83 992.476,1210.83 993.062,1210.83 993.649,1210.83 994.235,1210.83 994.822,1210.83 995.408,1210.83 995.994,1210.83 996.581,1210.83 997.167,1210.83 997.754,1210.83 998.34,1210.83 998.926,1210.83 999.513,1210.83 1000.1,1210.83 1000.69,1210.83 1001.27,1210.83 1001.86,1210.83 1002.44,1210.83 1003.03,1210.83 1003.62,1210.83 1004.2,1210.83 1004.79,1210.83 1005.38,1210.83 1005.96,1210.83 1006.55,1210.83 1007.14,1210.83 1007.72,1210.83 1008.31,1210.83 1008.9,1210.83 1009.48,1210.83 1010.07,1210.83 1010.65,1210.83 1011.24,1210.83 1011.83,1210.83 1012.41,1210.83 1013,1210.83 1013.59,1210.83 1014.17,1210.83 1014.76,1210.83 1015.35,1210.83 1015.93,1210.83 1016.52,1210.83 1017.11,1210.83 1017.69,1210.83 1018.28,1210.83 1018.86,1210.83 1019.45,1210.83 1020.04,1210.83 1020.62,1210.83 1021.21,1210.83 1021.8,1210.83 1022.38,1210.83 1022.97,1210.83 1023.56,1210.83 1024.14,1210.83 1024.73,1210.83 1025.32,1210.83 1025.9,1210.83 1026.49,1210.83 1027.07,1210.83 1027.66,1210.83 1028.25,1210.83 1028.83,1210.83 1029.42,1210.83 1030.01,1210.83 1030.59,1210.83 1031.18,1210.83 1031.77,1210.83 1032.35,1210.83 1032.94,1210.83 1033.52,1210.83 1034.11,1210.83 1034.7,1210.83 1035.28,1210.83 1035.87,1210.83 1036.46,1210.83 1037.04,1210.83 1037.63,1210.83 1038.22,1210.83 1038.8,1210.83 1039.39,1210.83 1039.98,1210.83 1040.56,1210.83 1041.15,1210.83 1041.73,1210.83 1042.32,1210.83 1042.91,1210.83 1043.49,1210.83 1044.08,1210.83 1044.67,1210.83 1045.25,1210.83 1045.84,1210.83 1046.43,1210.83 1047.01,1210.83 1047.6,1210.83 1048.19,1210.83 1048.77,1210.83 1049.36,1210.83 1049.94,1210.83 1050.53,1210.83 1051.12,1210.83 1051.7,1210.83 1052.29,1210.83 1052.88,1210.83 1053.46,1210.83 1054.05,1210.83 1054.64,1210.83 1055.22,1210.83 1055.81,1210.83 1056.39,1210.83 1056.98,1210.83 1057.57,1210.83 1058.15,1210.83 1058.74,1210.83 1059.33,1210.83 1059.91,1210.83 1060.5,1210.83 1061.09,1210.83 1061.67,1210.83 1062.26,1210.83 1062.85,1210.83 1063.43,1210.83 1064.02,1210.83 1064.6,1210.83 1065.19,1210.83 1065.78,1210.83 1066.36,1210.83 1066.95,1210.83 1067.54,1210.83 1068.12,1210.83 1068.71,1210.83 1069.3,1210.83 1069.88,1210.83 1070.47,1210.83 1071.06,1210.83 1071.64,1210.83 1072.23,1210.83 1072.81,1210.83 1073.4,1210.83 1073.99,1210.83 1074.57,1210.83 1075.16,1210.83 1075.75,1210.83 1076.33,1210.83 1076.92,1210.83 1077.51,1210.83 1078.09,1210.83 1078.68,1210.83 1079.26,1210.83 1079.85,1210.83 1080.44,1210.83 1081.02,1210.83 1081.61,1210.83 1082.2,1210.83 1082.78,1210.83 1083.37,1210.83 1083.96,1210.83 1084.54,1210.83 1085.13,1210.83 1085.72,1210.83 1086.3,1210.83 1086.89,1210.83 1087.47,1210.83 1088.06,1210.83 1088.65,1210.83 1089.23,1210.83 1089.82,1210.83 1090.41,1210.83 1090.99,1210.83 1091.58,1210.83 1092.17,1210.83 1092.75,1210.83 1093.34,1210.83 1093.93,1210.83 1094.51,1210.83 1095.1,1210.83 1095.68,1210.83 1096.27,1210.83 1096.86,1210.83 1097.44,1210.83 1098.03,1210.83 1098.62,1210.83 1099.2,1210.83 1099.79,1210.83 1100.38,1210.83 1100.96,1210.83 1101.55,1210.83 1102.14,1210.83 1102.72,1210.83 1103.31,1210.83 1103.89,1210.83 1104.48,1210.83 1105.07,1210.83 1105.65,1210.83 1106.24,1210.83 1106.83,1210.83 1107.41,1210.83 1108,1210.83 1108.59,1210.83 1109.17,1210.83 1109.76,1210.83 1110.34,1210.83 1110.93,1210.83 1111.52,1210.83 1112.1,1210.83 1112.69,1210.83 1113.28,1210.83 1113.86,1210.83 1114.45,1210.83 1115.04,1210.83 1115.62,1210.83 1116.21,1210.83 1116.8,1210.83 1117.38,1210.83 1117.97,1210.83 1118.55,1210.83 1119.14,1210.83 1119.73,1210.83 1120.31,1210.83 1120.9,1210.83 1121.49,1210.83 1122.07,1210.83 1122.66,1210.83 1123.25,1210.83 1123.83,1210.83 1124.42,1210.83 1125.01,1210.83 1125.59,1210.83 1126.18,1210.83 1126.76,1210.83 1127.35,1210.83 1127.94,1210.83 1128.52,1210.83 1129.11,1210.83 1129.7,1210.83 1130.28,1210.83 1130.87,1210.83 1131.46,1210.83 1132.04,1210.83 1132.63,1210.83 1133.21,1210.83 1133.8,1210.83 1134.39,1210.83 1134.97,1210.83 1135.56,1210.83 1136.15,1210.83 1136.73,1210.83 1137.32,1210.83 1137.91,1210.83 1138.49,1210.83 1139.08,1210.83 1139.67,1210.83 1140.25,1210.83 1140.84,1210.83 1141.42,1210.83 1142.01,1210.83 1142.6,1210.83 1143.18,1210.83 1143.77,1210.83 1144.36,1210.83 1144.94,1210.83 1145.53,1210.83 1146.12,1210.83 1146.7,1210.83 1147.29,1210.83 1147.88,1210.83 1148.46,1210.83 1149.05,1210.83 1149.63,1210.83 1150.22,1210.83 1150.81,1210.83 1151.39,1210.83 1151.98,1210.83 1152.57,1210.83 1153.15,1210.83 1153.74,1210.83 1154.33,1210.83 1154.91,1210.83 1155.5,1210.83 1156.09,1210.83 1156.67,1210.83 1157.26,1210.83 1157.84,1210.83 1158.43,1210.83 1159.02,1210.83 1159.6,1210.83 1160.19,1210.83 1160.78,1210.83 1161.36,1210.83 1161.95,1210.83 1162.54,1210.83 1163.12,1210.83 1163.71,1210.83 1164.29,1210.83 1164.88,1210.83 1165.47,1210.83 1166.05,1210.83 1166.64,1210.83 1167.23,1210.83 1167.81,1210.83 1168.4,1210.83 1168.99,1210.83 1169.57,1210.83 1170.16,1210.83 1170.75,1210.83 1171.33,1210.83 1171.92,1210.83 1172.5,1210.83 1173.09,1210.83 1173.68,1210.83 1174.26,1210.83 1174.85,1210.83 1175.44,1210.83 1176.02,1210.83 1176.61,1210.83 1177.2,1210.83 1177.78,1210.83 1178.37,1210.83 1178.96,1210.83 1179.54,1210.83 1180.13,1210.83 1180.71,1210.83 1181.3,1210.83 1181.89,1210.83 1182.47,1210.83 1183.06,1210.83 1183.65,1210.83 1184.23,1210.83 1184.82,1210.83 1185.41,1210.83 1185.99,1210.83 1186.58,1210.83 1187.16,1210.83 1187.75,1210.83 1188.34,1210.83 1188.92,1210.83 1189.51,1210.83 1190.1,1210.83 1190.68,1210.83 1191.27,1210.83 1191.86,1210.83 1192.44,1210.83 1193.03,1210.83 1193.62,1210.83 1194.2,1210.83 1194.79,1210.83 1195.37,1210.83 1195.96,1210.83 1196.55,1210.83 1197.13,1210.83 1197.72,1210.83 1198.31,1210.83 1198.89,1210.83 1199.48,1210.83 1200.07,1210.83 1200.65,1210.83 1201.24,1210.83 1201.83,1210.83 1202.41,1210.83 1203,1210.83 1203.58,1210.83 1204.17,1210.83 1204.76,1210.83 1205.34,1210.83 1205.93,1210.83 1206.52,1210.83 1207.1,1210.83 1207.69,1210.83 1208.28,1210.83 1208.86,1210.83 1209.45,1210.83 1210.03,1210.83 1210.62,1210.83 1211.21,1210.83 1211.79,1210.83 1212.38,1210.83 1212.97,1210.83 1213.55,1210.83 1214.14,1210.83 1214.73,1210.83 1215.31,1210.83 1215.9,1210.83 1216.49,1210.83 1217.07,1210.83 1217.66,1210.83 1218.24,1210.83 1218.83,1210.83 1219.42,1210.83 1220,1210.83 1220.59,1210.83 1221.18,1210.83 1221.76,1210.83 1222.35,1210.83 1222.94,1210.83 1223.52,1210.83 1224.11,1210.83 1224.7,1210.83 1225.28,1210.83 1225.87,1210.83 1226.45,1210.83 1227.04,1210.83 1227.63,1210.83 1228.21,1210.83 1228.8,1210.83 1229.39,1210.83 1229.97,1210.83 1230.56,1210.83 1231.15,1210.83 1231.73,1210.83 1232.32,1210.83 1232.91,1210.83 1233.49,1210.83 1234.08,1210.83 1234.66,1210.83 1235.25,1210.83 1235.84,1210.83 1236.42,1210.83 1237.01,1210.83 1237.6,1210.83 1238.18,1210.83 1238.77,1210.83 1239.36,1210.83 1239.94,1210.83 1240.53,1210.83 1241.11,1210.83 1241.7,1210.83 1242.29,1210.83 1242.87,1210.83 1243.46,1210.83 1244.05,1210.83 1244.63,1210.83 1245.22,1210.83 1245.81,1210.83 1246.39,1210.83 1246.98,1210.83 1247.57,1210.83 1248.15,1210.83 1248.74,1210.83 1249.32,1210.83 1249.91,1210.83 1250.5,1210.83 1251.08,1210.83 1251.67,1210.83 1252.26,1210.83 1252.84,1210.83 1253.43,1210.83 1254.02,1210.83 1254.6,1210.83 1255.19,1210.83 1255.78,1210.83 1256.36,1210.83 1256.95,1210.83 1257.53,1210.83 1258.12,1210.83 1258.71,1210.83 1259.29,1210.83 1259.88,1210.83 1260.47,1210.83 1261.05,1210.83 1261.64,1210.83 1262.23,1210.83 1262.81,1210.83 1263.4,1210.83 1263.98,1210.83 1264.57,1210.83 1265.16,1210.83 1265.74,1210.83 1266.33,1210.83 1266.92,1210.83 1267.5,1210.83 1268.09,1210.83 1268.68,1210.83 1269.26,1210.83 1269.85,1210.83 1270.44,1210.83 1271.02,1210.83 1271.61,1210.83 1272.19,1210.83 1272.78,1210.83 1273.37,1210.83 1273.95,1210.83 1274.54,1210.83 1275.13,1210.83 1275.71,1210.83 1276.3,1210.83 1276.89,1210.83 1277.47,1210.83 1278.06,1210.83 1278.65,1210.83 1279.23,1210.83 1279.82,1210.83 1280.4,1210.83 1280.99,1210.83 1281.58,1210.83 1282.16,1210.83 1282.75,1210.83 1283.34,1210.83 1283.92,1210.83 1284.51,1210.83 1285.1,1210.83 1285.68,1210.83 1286.27,1210.83 1286.86,1210.83 1287.44,1210.83 1288.03,1210.83 1288.61,1210.83 1289.2,1210.83 1289.79,1210.83 1290.37,1210.83 1290.96,1210.83 1291.55,1210.83 1292.13,1210.83 1292.72,1210.83 1293.31,1210.83 1293.89,1210.83 1294.48,1210.83 1295.06,1210.83 1295.65,1210.83 1296.24,1210.83 1296.82,1210.83 1297.41,1210.83 1298,1210.83 1298.58,1210.83 1299.17,1210.83 1299.76,1210.83 1300.34,1210.83 1300.93,1210.83 1301.52,1210.83 1302.1,1210.83 1302.69,1210.83 1303.27,1210.83 1303.86,1210.83 1304.45,1210.83 1305.03,1210.83 1305.62,1210.83 1306.21,1210.83 1306.79,1210.83 1307.38,1210.83 1307.97,1210.83 1308.55,1210.83 1309.14,1210.83 1309.73,1210.83 1310.31,1210.83 1310.9,1210.83 1311.48,1210.83 1312.07,1210.83 1312.66,1210.83 1313.24,1210.83 1313.83,1210.83 1314.42,1210.83 1315,1210.83 1315.59,1210.83 1316.18,1210.83 1316.76,1210.83 1317.35,1210.83 1317.93,1210.83 1318.52,1210.83 1319.11,1210.83 1319.69,1210.83 1320.28,1210.83 1320.87,1210.83 1321.45,1210.83 1322.04,1210.83 1322.63,1210.83 1323.21,1210.83 1323.8,1210.83 1324.39,1210.83 1324.97,1210.83 1325.56,1210.83 1326.14,1210.83 1326.73,1210.83 1327.32,1210.83 1327.9,1210.83 1328.49,1210.83 1329.08,1210.83 1329.66,1210.83 1330.25,1210.83 1330.84,1210.83 1331.42,1210.83 1332.01,1210.83 1332.6,1210.83 1333.18,1210.83 1333.77,1210.83 1334.35,1210.83 1334.94,1210.83 1335.53,1210.83 1336.11,1210.83 1336.7,1210.83 1337.29,1210.83 1337.87,1210.83 1338.46,1210.83 1339.05,1210.83 1339.63,1210.83 1340.22,1210.83 1340.8,1210.83 1341.39,1210.83 1341.98,1210.83 1342.56,1210.83 1343.15,1210.83 1343.74,1210.83 1344.32,1210.83 1344.91,1210.83 1345.5,1210.83 1346.08,1210.83 1346.67,1210.83 1347.26,1210.83 1347.84,1210.83 1348.43,1210.83 1349.01,1210.83 1349.6,1210.83 1350.19,1210.83 1350.77,1210.83 1351.36,1210.83 1351.95,1210.83 1352.53,1210.83 1353.12,1210.83 1353.71,1210.83 1354.29,1210.83 1354.88,1210.83 1355.47,1210.83 1356.05,1210.83 1356.64,1210.83 1357.22,1210.83 1357.81,1210.83 1358.4,1210.83 1358.98,1210.83 1359.57,1210.83 1360.16,1210.83 1360.74,1210.83 1361.33,1210.83 1361.92,1210.83 1362.5,1210.83 1363.09,1210.83 1363.68,1210.83 1364.26,1210.83 1364.85,1210.83 1365.43,1210.83 1366.02,1210.83 1366.61,1210.83 1367.19,1210.83 1367.78,1210.83 1368.37,1210.83 1368.95,1210.83 1369.54,1210.83 1370.13,1210.83 1370.71,1210.83 1371.3,1210.83 1371.88,1210.83 1372.47,1210.83 1373.06,1210.83 1373.64,1210.83 1374.23,1210.83 1374.82,1210.83 1375.4,1210.83 1375.99,1210.83 1376.58,1210.83 1377.16,1210.83 1377.75,1210.83 1378.34,1210.83 1378.92,1210.83 1379.51,1210.83 1380.09,1210.83 1380.68,1210.83 1381.27,1210.83 1381.85,1210.83 1382.44,1210.83 1383.03,1210.83 1383.61,1210.83 1384.2,1210.83 1384.79,1210.83 1385.37,1210.83 1385.96,1210.83 1386.55,1210.83 1387.13,1210.83 1387.72,1210.83 1388.3,1210.83 1388.89,1210.83 1389.48,1210.83 1390.06,1210.83 1390.65,1210.83 1391.24,1210.83 1391.82,1210.83 1392.41,1210.83 1393,1210.83 1393.58,1210.83 1394.17,1210.83 1394.75,1210.83 1395.34,1210.83 1395.93,1210.83 1396.51,1210.83 1397.1,1210.83 1397.69,1210.83 1398.27,1210.83 1398.86,1210.83 1399.45,1210.83 1400.03,1210.83 1400.62,1210.83 1401.21,1210.83 1401.79,1210.83 1402.38,1210.83 1402.96,1210.83 1403.55,1210.83 1404.14,1210.83 1404.72,1210.83 1405.31,1210.83 1405.9,1210.83 1406.48,1210.83 1407.07,1210.83 1407.66,1210.83 1408.24,1210.83 1408.83,1210.83 1409.42,1210.83 1410,1210.83 1410.59,1210.83 1411.17,1210.83 1411.76,1210.83 1412.35,1210.83 1412.93,1210.83 1413.52,1210.83 1414.11,1210.83 1414.69,1210.83 1415.28,1210.83 1415.87,1210.83 1416.45,1210.83 1417.04,1210.83 1417.63,1210.83 1418.21,1210.83 1418.8,1210.83 1419.38,1210.83 1419.97,1210.83 1420.56,1210.83 1421.14,1210.83 1421.73,1210.83 1422.32,1210.83 1422.9,1210.83 1423.49,1210.83 1424.08,1210.83 1424.66,1210.83 1425.25,1210.83 1425.83,1210.83 1426.42,1210.83 1427.01,1210.83 1427.59,1210.83 1428.18,1210.83 1428.77,1210.83 1429.35,1210.83 1429.94,1210.83 1430.53,1210.83 1431.11,1210.83 1431.7,1210.83 1432.29,1210.83 1432.87,1210.83 1433.46,1210.83 1434.04,1210.83 1434.63,1210.83 1435.22,1210.83 1435.8,1210.83 1436.39,1210.83 1436.98,1210.83 1437.56,1210.83 1438.15,1210.83 1438.74,1210.83 1439.32,1210.83 1439.91,1210.83 1440.5,1210.83 1441.08,1210.83 1441.67,1210.83 1442.25,1210.83 1442.84,1210.83 1443.43,1210.83 1444.01,1210.83 1444.6,1210.83 1445.19,1210.83 1445.77,1210.83 1446.36,1210.83 1446.95,1210.83 1447.53,1210.83 1448.12,1210.83 1448.7,1210.83 1449.29,1210.83 1449.88,1210.83 1450.46,1210.83 1451.05,1210.83 1451.64,1210.83 1452.22,1210.83 1452.81,1210.83 1453.4,1210.83 1453.98,1210.83 1454.57,1210.83 1455.16,1210.83 1455.74,1210.83 1456.33,1210.83 1456.91,1210.83 1457.5,1210.83 1458.09,1210.83 1458.67,1210.83 1459.26,1210.83 1459.85,1210.83 1460.43,1210.83 1461.02,1210.83 1461.61,1210.83 1462.19,1210.83 1462.78,1210.83 1463.37,1210.83 1463.95,1210.83 1464.54,1210.83 1465.12,1210.83 1465.71,1210.83 1466.3,1210.83 1466.88,1210.83 1467.47,1210.83 1468.06,1210.83 1468.64,1210.83 1469.23,1210.83 1469.82,1210.83 1470.4,1210.83 1470.99,1210.83 1471.57,1210.83 1472.16,1210.83 1472.75,1210.83 1473.33,1210.83 1473.92,1210.83 1474.51,1210.83 1475.09,1210.83 1475.68,1210.83 1476.27,1210.83 1476.85,1210.83 1477.44,1210.83 1478.03,1210.83 1478.61,1210.83 1479.2,1210.83 1479.78,1210.83 1480.37,1210.83 1480.96,1210.83 1481.54,1210.83 1482.13,1210.83 1482.72,1210.83 1483.3,1210.83 1483.89,1210.83 1484.48,1210.83 1485.06,1210.83 1485.65,1210.83 1486.24,1210.83 1486.82,1210.83 1487.41,1210.83 1487.99,1210.83 1488.58,1210.83 1489.17,1210.83 1489.75,1210.83 1490.34,1210.83 1490.93,1210.83 1491.51,1210.83 1492.1,1210.83 1492.69,1210.83 1493.27,1210.83 1493.86,1210.83 1494.45,1210.83 1495.03,1210.83 1495.62,1210.83 1496.2,1210.83 1496.79,1210.83 1497.38,1210.83 1497.96,1210.83 1498.55,1210.83 1499.14,1210.83 1499.72,1210.83 1500.31,1210.83 1500.9,1210.83 1501.48,1210.83 1502.07,1210.83 1502.65,1210.83 1503.24,1210.83 1503.83,1210.83 1504.41,1210.83 1505,1210.83 1505.59,1210.83 1506.17,1210.83 1506.76,1210.83 1507.35,1210.83 1507.93,1210.83 1508.52,1210.83 1509.11,1210.83 1509.69,1210.83 1510.28,1210.83 1510.86,1210.83 1511.45,1210.83 1512.04,1210.83 1512.62,1210.83 1513.21,1210.83 1513.8,1210.83 1514.38,1210.83 1514.97,1210.83 1515.56,1210.83 1516.14,1210.83 1516.73,1210.83 1517.32,1210.83 1517.9,1210.83 1518.49,1210.83 1519.07,1210.83 1519.66,1210.83 1520.25,1210.83 1520.83,1210.83 1521.42,1210.83 1522.01,1210.83 1522.59,1210.83 1523.18,1210.83 1523.77,1210.83 1524.35,1210.83 1524.94,1210.83 1525.52,1210.83 1526.11,1210.83 1526.7,1210.83 1527.28,1210.83 1527.87,1210.83 1528.46,1210.83 1529.04,1210.83 1529.63,1210.83 1530.22,1210.83 1530.8,1210.83 1531.39,1210.83 1531.98,1210.83 1532.56,1210.83 1533.15,1210.83 1533.73,1210.83 1534.32,1210.83 1534.91,1210.83 1535.49,1210.83 1536.08,1210.83 1536.67,1210.83 1537.25,1210.83 1537.84,1210.83 1538.43,1210.83 1539.01,1210.83 1539.6,1210.83 1540.19,1210.83 1540.77,1210.83 1541.36,1210.83 1541.94,1210.83 1542.53,1210.83 1543.12,1210.83 1543.7,1210.83 1544.29,1210.83 1544.88,1210.83 1545.46,1210.83 1546.05,1210.83 1546.64,1210.83 1547.22,1210.83 1547.81,1210.83 1548.4,1210.83 1548.98,1210.83 1549.57,1210.83 1550.15,1210.83 1550.74,1210.83 1551.33,1210.83 1551.91,1210.83 1552.5,1210.83 1553.09,1210.83 1553.67,1210.83 1554.26,1210.83 1554.85,1210.83 1555.43,1210.83 1556.02,1210.83 1556.6,1210.83 1557.19,1210.83 1557.78,1210.83 1558.36,1210.83 1558.95,1210.83 1559.54,1210.83 1560.12,1210.83 1560.71,1210.83 1561.3,1210.83 1561.88,1210.83 1562.47,1210.83 1563.06,1210.83 1563.64,1210.83 1564.23,1210.83 1564.81,1210.83 1565.4,1210.83 1565.99,1210.83 1566.57,1210.83 1567.16,1210.83 1567.75,1210.83 1568.33,1210.83 1568.92,1210.83 1569.51,1210.83 1570.09,1210.83 1570.68,1210.83 1571.27,1210.83 1571.85,1210.83 1572.44,1210.83 1573.02,1210.83 1573.61,1210.83 1574.2,1210.83 1574.78,1210.83 1575.37,1210.83 1575.96,1210.83 1576.54,1210.83 1577.13,1210.83 1577.72,1210.83 1578.3,1210.83 1578.89,1210.83 1579.47,1210.83 1580.06,1210.83 1580.65,1210.83 1581.23,1210.83 1581.82,1210.83 1582.41,1210.83 1582.99,1210.83 1583.58,1210.83 1584.17,1210.83 1584.75,1210.83 1585.34,1210.83 1585.93,1210.83 1586.51,1210.83 1587.1,1210.83 1587.68,1210.83 1588.27,1210.83 1588.86,1210.83 1589.44,1210.83 1590.03,1210.83 1590.62,1210.83 1591.2,1210.83 1591.79,1210.83 1592.38,1210.83 1592.96,1210.83 1593.55,1210.83 1594.14,1210.83 1594.72,1210.83 1595.31,1210.83 1595.89,1210.83 1596.48,1210.83 1597.07,1210.83 1597.65,1210.83 1598.24,1210.83 1598.83,1210.83 1599.41,1210.83 1600,1210.83 1600.59,1210.83 1601.17,1210.83 1601.76,1210.83 1602.34,1210.83 1602.93,1210.83 1603.52,1210.83 1604.1,1210.83 1604.69,1210.83 1605.28,1210.83 1605.86,1210.83 1606.45,1210.83 1607.04,1210.83 1607.62,1210.83 1608.21,1210.83 1608.8,1210.83 1609.38,1210.83 1609.97,1210.83 1610.55,1210.83 1611.14,1210.83 1611.73,1210.83 1612.31,1210.83 1612.9,1210.83 1613.49,1210.83 1614.07,1210.83 1614.66,1210.83 1615.25,1210.83 1615.83,1210.83 1616.42,1210.83 1617.01,1210.83 1617.59,1210.83 1618.18,1210.83 1618.76,1210.83 1619.35,1210.83 1619.94,1210.83 1620.52,1210.83 1621.11,1210.83 1621.7,1210.83 1622.28,1210.83 1622.87,1210.83 1623.46,1210.83 1624.04,1210.83 1624.63,1210.83 1625.22,1210.83 1625.8,1210.83 1626.39,1210.83 1626.97,1210.83 1627.56,1210.83 1628.15,1210.83 1628.73,1210.83 1629.32,1210.83 1629.91,1210.83 1630.49,1210.83 1631.08,1210.83 1631.67,1210.83 1632.25,1210.83 1632.84,1210.83 1633.42,1210.83 1634.01,1210.83 1634.6,1210.83 1635.18,1210.83 1635.77,1210.83 1636.36,1210.83 1636.94,1210.83 1637.53,1210.83 1638.12,1210.83 1638.7,1210.83 1639.29,1210.83 1639.88,1210.83 1640.46,1210.83 1641.05,1210.83 1641.63,1210.83 1642.22,1210.83 1642.81,1210.83 1643.39,1210.83 1643.98,1210.83 1644.57,1210.83 1645.15,1210.83 1645.74,1210.83 1646.33,1210.83 1646.91,1210.83 1647.5,1210.83 1648.09,1210.83 1648.67,1210.83 1649.26,1210.83 1649.84,1210.83 1650.43,1210.83 1651.02,1210.83 1651.6,1210.83 1652.19,1210.83 1652.78,1210.83 1653.36,1210.83 1653.95,1210.83 1654.54,1210.83 1655.12,1210.83 1655.71,1210.83 1656.29,1210.83 1656.88,1210.83 1657.47,1210.83 1658.05,1210.83 1658.64,1210.83 1659.23,1210.83 1659.81,1210.83 1660.4,1210.83 1660.99,1210.83 1661.57,1210.83 1662.16,1210.83 1662.75,1210.83 1663.33,1210.83 1663.92,1210.83 1664.5,1210.83 1665.09,1210.83 1665.68,1210.83 1666.26,1210.83 1666.85,1210.83 1667.44,1210.83 1668.02,1210.83 1668.61,1210.83 1669.2,1210.83 1669.78,1210.83 1670.37,1210.83 1670.96,1210.83 1671.54,1210.83 1672.13,1210.83 1672.71,1210.83 1673.3,1210.83 1673.89,1210.83 1674.47,1210.83 1675.06,1210.83 1675.65,1210.83 1676.23,1210.83 1676.82,1210.83 1677.41,1210.83 1677.99,1210.83 1678.58,1210.83 1679.17,1210.83 1679.75,1210.83 1680.34,1210.83 1680.92,1210.83 1681.51,1210.83 1682.1,1210.83 1682.68,1210.83 1683.27,1210.83 1683.86,1210.83 1684.44,1210.83 1685.03,1210.83 1685.62,1210.83 1686.2,1210.83 1686.79,1210.83 1687.37,1210.83 1687.96,1210.83 1688.55,1210.83 1689.13,1210.83 1689.72,1210.83 1690.31,1210.83 1690.89,1210.83 1691.48,1210.83 1692.07,1210.83 1692.65,1210.83 1693.24,1210.83 1693.83,1210.83 1694.41,1210.83 1695,1210.83 1695.58,1210.83 1696.17,1210.83 1696.76,1210.83 1697.34,1210.83 1697.93,1210.83 1698.52,1210.83 1699.1,1210.83 1699.69,1210.83 1700.28,1210.83 1700.86,1210.83 1701.45,1210.83 1702.04,1210.83 1702.62,1210.83 1703.21,1210.83 1703.79,1210.83 1704.38,1210.83 1704.97,1210.83 1705.55,1210.83 1706.14,1210.83 1706.73,1210.83 1707.31,1210.83 1707.9,1210.83 1708.49,1210.83 1709.07,1210.83 1709.66,1210.83 1710.24,1210.83 1710.83,1210.83 1711.42,1210.83 1712,1210.83 1712.59,1210.83 1713.18,1210.83 1713.76,1210.83 1714.35,1210.83 1714.94,1210.83 1715.52,1210.83 1716.11,1210.83 1716.7,1210.83 1717.28,1210.83 1717.87,1210.83 1718.45,1210.83 1719.04,1210.83 1719.63,1210.83 1720.21,1210.83 1720.8,1210.83 1721.39,1210.83 1721.97,1210.83 1722.56,1210.83 1723.15,1210.83 1723.73,1210.83 1724.32,1210.83 1724.91,1210.83 1725.49,1210.83 1726.08,1210.83 1726.66,1210.83 1727.25,1210.83 1727.84,1210.83 1728.42,1210.83 1729.01,1210.83 1729.6,1210.83 1730.18,1210.83 1730.77,1210.83 1731.36,1210.83 1731.94,1210.83 1732.53,1210.83 1733.11,1210.83 1733.7,1210.83 1734.29,1210.83 1734.87,1210.83 1735.46,1210.83 1736.05,1210.83 1736.63,1210.83 1737.22,1210.83 1737.81,1210.83 1738.39,1210.83 1738.98,1210.83 1739.57,1210.83 1740.15,1210.83 1740.74,1210.83 1741.32,1210.83 1741.91,1210.83 1742.5,1210.83 1743.08,1210.83 1743.67,1210.83 1744.26,1210.83 1744.84,1210.83 1745.43,1210.83 1746.02,1210.83 1746.6,1210.83 1747.19,1210.83 1747.78,1210.83 1748.36,1210.83 1748.95,1210.83 1749.53,1210.83 1750.12,1210.83 1750.71,1210.83 1751.29,1210.83 1751.88,1210.83 1752.47,1210.83 1753.05,1210.83 1753.64,1210.83 1754.23,1210.83 1754.81,1210.83 1755.4,1210.83 1755.99,1210.83 1756.57,1210.83 1757.16,1210.83 1757.74,1210.83 1758.33,1210.83 1758.92,1210.83 1759.5,1210.83 1760.09,1210.83 1760.68,1210.83 1761.26,1210.83 1761.85,1210.83 1762.44,1210.83 1763.02,1210.83 1763.61,1210.83 1764.19,1210.83 1764.78,1210.83 1765.37,1210.83 1765.95,1210.83 1766.54,1210.83 1767.13,1210.83 1767.71,1210.83 1768.3,1210.83 1768.89,1210.83 1769.47,1210.83 1770.06,1210.83 1770.65,1210.83 1771.23,1210.83 1771.82,1210.83 1772.4,1210.83 1772.99,1210.83 1773.58,1210.83 1774.16,1210.83 1774.75,1210.83 1775.34,1210.83 1775.92,1210.83 1776.51,1210.83 1777.1,1210.83 1777.68,1210.83 1778.27,1210.83 1778.86,1210.83 1779.44,1210.83 1780.03,1210.83 1780.61,1210.83 1781.2,1210.83 1781.79,1210.83 1782.37,1210.83 1782.96,1210.83 1783.55,1210.83 1784.13,1210.83 1784.72,1210.83 1785.31,1210.83 1785.89,1210.83 1786.48,1210.83 1787.06,1210.83 1787.65,1210.83 1788.24,1210.83 1788.82,1210.83 1789.41,1210.83 1790,1210.83 1790.58,1210.83 1791.17,1210.83 1791.76,1210.83 1792.34,1210.83 1792.93,1210.83 1793.52,1210.83 1794.1,1210.83 1794.69,1210.83 1795.27,1210.83 1795.86,1210.83 1796.45,1210.83 1797.03,1210.83 1797.62,1210.83 1798.21,1210.83 1798.79,1210.83 1799.38,1210.83 1799.97,1210.83 1800.55,1210.83 1801.14,1210.83 1801.73,1210.83 1802.31,1210.83 1802.9,1210.83 1803.48,1210.83 1804.07,1210.83 1804.66,1210.83 1805.24,1210.83 1805.83,1210.83 1806.42,1210.83 1807,1210.83 1807.59,1210.83 1808.18,1210.83 1808.76,1210.83 1809.35,1210.83 1809.94,1210.83 1810.52,1210.83 1811.11,1210.83 1811.69,1210.83 1812.28,1210.83 1812.87,1210.83 1813.45,1210.83 1814.04,1210.83 1814.63,1210.83 1815.21,1210.83 1815.8,1210.83 1816.39,1210.83 1816.97,1210.83 1817.56,1210.83 1818.14,1210.83 1818.73,1210.83 1819.32,1210.83 1819.9,1210.83 1820.49,1210.83 1821.08,1210.83 1821.66,1210.83 1822.25,1210.83 1822.84,1210.83 1823.42,1210.83 1824.01,1210.83 1824.6,1210.83 1825.18,1210.83 1825.77,1210.83 1826.35,1210.83 1826.94,1210.83 1827.53,1210.83 1828.11,1210.83 1828.7,1210.83 1829.29,1210.83 1829.87,1210.83 1830.46,1210.83 1831.05,1210.83 1831.63,1210.83 1832.22,1210.83 1832.81,1210.83 1833.39,1210.83 1833.98,1210.83 1834.56,1210.83 1835.15,1210.83 1835.74,1210.83 1836.32,1210.83 1836.91,1210.83 1837.5,1210.83 1838.08,1210.83 1838.67,1210.83 1839.26,1210.83 1839.84,1210.83 1840.43,1210.83 1841.01,1210.83 1841.6,1210.83 1842.19,1210.83 1842.77,1210.83 1843.36,1210.83 1843.95,1210.83 1844.53,1210.83 1845.12,1210.83 1845.71,1210.83 1846.29,1210.83 1846.88,1210.83 1847.47,1210.83 1848.05,1210.83 1848.64,1210.83 1849.22,1210.83 1849.81,1210.83 1850.4,1210.83 1850.98,1210.83 1851.57,1210.83 1852.16,1210.83 1852.74,1210.83 1853.33,1210.83 1853.92,1210.83 1854.5,1210.83 1855.09,1210.83 1855.68,1210.83 1856.26,1210.83 1856.85,1210.83 1857.43,1210.83 1858.02,1210.83 1858.61,1210.83 1859.19,1210.83 1859.78,1210.83 1860.37,1210.83 1860.95,1210.83 1861.54,1210.83 1862.13,1210.83 1862.71,1210.83 1863.3,1210.83 1863.88,1210.83 1864.47,1210.83 1865.06,1210.83 1865.64,1210.83 1866.23,1210.83 1866.82,1210.83 1867.4,1210.83 1867.99,1210.83 1868.58,1210.83 1869.16,1210.83 1869.75,1210.83 1870.34,1210.83 1870.92,1210.83 1871.51,1210.83 1872.09,1210.83 1872.68,1210.83 1873.27,1210.83 1873.85,1210.83 1874.44,1210.83 1875.03,1210.83 1875.61,1210.83 1876.2,1210.83 1876.79,1210.83 1877.37,1210.83 1877.96,1210.83 1878.55,1210.83 1879.13,1210.83 1879.72,1210.83 1880.3,1210.83 1880.89,1210.83 1881.48,1210.83 1882.06,1210.83 1882.65,1210.83 1883.24,1210.83 1883.82,1210.83 1884.41,1210.83 1885,1210.83 1885.58,1210.83 1886.17,1210.83 1886.76,1210.83 1887.34,1210.83 1887.93,1210.83 1888.51,1210.83 1889.1,1210.83 1889.69,1210.83 1890.27,1210.83 1890.86,1210.83 1891.45,1210.83 1892.03,1210.83 1892.62,1210.83 1893.21,1210.83 1893.79,1210.83 1894.38,1210.83 1894.96,1210.83 1895.55,1210.83 1896.14,1210.83 1896.72,1210.83 1897.31,1210.83 1897.9,1210.83 1898.48,1210.83 1899.07,1210.83 1899.66,1210.83 1900.24,1210.83 1900.83,1210.83 1901.42,1210.83 1902,1210.83 1902.59,1210.83 1903.17,1210.83 1903.76,1210.83 1904.35,1210.83 1904.93,1210.83 1905.52,1210.83 1906.11,1210.83 1906.69,1210.83 1907.28,1210.83 1907.87,1210.83 1908.45,1210.83 1909.04,1210.83 1909.63,1210.83 1910.21,1210.83 1910.8,1210.83 1911.38,1210.83 1911.97,1210.83 1912.56,1210.83 1913.14,1210.83 1913.73,1210.83 1914.32,1210.83 1914.9,1210.83 1915.49,1210.83 1916.08,1210.83 1916.66,1210.83 1917.25,1210.83 1917.83,1210.83 1918.42,1210.83 1919.01,1210.83 1919.59,1210.83 1920.18,1210.83 1920.77,1210.83 1921.35,1210.83 1921.94,1210.83 1922.53,1210.83 1923.11,1210.83 1923.7,1210.83 1924.29,1210.83 1924.87,1210.83 1925.46,1210.83 1926.04,1210.83 1926.63,1210.83 1927.22,1210.83 1927.8,1210.83 1928.39,1210.83 1928.98,1210.83 1929.56,1210.83 1930.15,1210.83 1930.74,1210.83 1931.32,1210.83 1931.91,1210.83 1932.5,1210.83 1933.08,1210.83 1933.67,1210.83 1934.25,1210.83 1934.84,1210.83 1935.43,1210.83 1936.01,1210.83 1936.6,1210.83 1937.19,1210.83 1937.77,1210.83 1938.36,1210.83 1938.95,1210.83 1939.53,1210.83 1940.12,1210.83 1940.71,1210.83 1941.29,1210.83 1941.88,1210.83 1942.46,1210.83 1943.05,1210.83 1943.64,1210.83 1944.22,1210.83 1944.81,1210.83 1945.4,1210.83 1945.98,1210.83 1946.57,1210.83 1947.16,1210.83 1947.74,1210.83 1948.33,1210.83 1948.91,1210.83 1949.5,1210.83 1950.09,1210.83 1950.67,1210.83 1951.26,1210.83 1951.85,1210.83 1952.43,1210.83 1953.02,1210.83 1953.61,1210.83 1954.19,1210.83 1954.78,1210.83 1955.37,1210.83 1955.95,1210.83 1956.54,1210.83 1957.12,1210.83 1957.71,1210.83 1958.3,1210.83 1958.88,1210.83 1959.47,1210.83 1960.06,1210.83 1960.64,1210.83 1961.23,1210.83 1961.82,1210.83 1962.4,1210.83 1962.99,1210.83 1963.58,1210.83 1964.16,1210.83 1964.75,1210.83 1965.33,1210.83 1965.92,1210.83 1966.51,1210.83 1967.09,1210.83 1967.68,1210.83 1968.27,1210.83 1968.85,1210.83 1969.44,1210.83 1970.03,1210.83 1970.61,1210.83 1971.2,1210.83 1971.78,1210.83 1972.37,1210.83 1972.96,1210.83 1973.54,1210.83 1974.13,1210.83 1974.72,1210.83 1975.3,1210.83 1975.89,1210.83 1976.48,1210.83 1977.06,1210.83 1977.65,1210.83 1978.24,1210.83 1978.82,1210.83 1979.41,1210.83 1979.99,1210.83 1980.58,1210.83 1981.17,1210.83 1981.75,1210.83 1982.34,1210.83 1982.93,1210.83 1983.51,1210.83 1984.1,1210.83 1984.69,1210.83 1985.27,1210.83 1985.86,1210.83 1986.45,1210.83 1987.03,1210.83 1987.62,1210.83 1988.2,1210.83 1988.79,1210.83 1989.38,1210.83 1989.96,1210.83 1990.55,1210.83 1991.14,1210.83 1991.72,1210.83 1992.31,1210.83 1992.9,1210.83 1993.48,1210.83 1994.07,1210.83 1994.65,1210.83 1995.24,1210.83 1995.83,1210.83 1996.41,1210.83 1997,1210.83 1997.59,1210.83 1998.17,1210.83 1998.76,1210.83 1999.35,1210.83 1999.93,1210.83 2000.52,1210.83 2001.11,1210.83 2001.69,1210.83 2002.28,1210.83 2002.86,1210.83 2003.45,1210.83 2004.04,1210.83 2004.62,1210.83 2005.21,1210.83 2005.8,1210.83 2006.38,1210.83 2006.97,1210.83 2007.56,1210.83 2008.14,1210.83 2008.73,1210.83 2009.32,1210.83 2009.9,1210.83 2010.49,1210.83 2011.07,1210.83 2011.66,1210.83 2012.25,1210.83 2012.83,1210.83 2013.42,1210.83 2014.01,1210.83 2014.59,1210.83 2015.18,1210.83 2015.77,1210.83 2016.35,1210.83 2016.94,1210.83 2017.53,1210.83 2018.11,1210.83 2018.7,1210.83 2019.28,1210.83 2019.87,1210.83 2020.46,1210.83 2021.04,1210.83 2021.63,1210.83 2022.22,1210.83 2022.8,1210.83 2023.39,1210.83 2023.98,1210.83 2024.56,1210.83 2025.15,1210.83 2025.73,1210.83 2026.32,1210.83 2026.91,1210.83 2027.49,1210.83 2028.08,1210.83 2028.67,1210.83 2029.25,1210.83 2029.84,1210.83 2030.43,1210.83 2031.01,1210.83 2031.6,1210.83 2032.19,1210.83 2032.77,1210.83 2033.36,1210.83 2033.94,1210.83 2034.53,1210.83 2035.12,1210.83 2035.7,1210.83 2036.29,1210.83 2036.88,1210.83 2037.46,1210.83 2038.05,1210.83 2038.64,1210.83 2039.22,1210.83 2039.81,1210.83 2040.4,1210.83 2040.98,1210.83 2041.57,1210.83 2042.15,1210.83 2042.74,1210.83 2043.33,1210.83 2043.91,1210.83 2044.5,1210.83 2045.09,1210.83 2045.67,1210.83 2046.26,1210.83 2046.85,1210.83 2047.43,1210.83 2048.02,1210.83 2048.6,1210.83 2049.19,1210.83 2049.78,1210.83 2050.36,1210.83 2050.95,1210.83 2051.54,1210.83 2052.12,1210.83 2052.71,1210.83 2053.3,1210.83 2053.88,1210.83 2054.47,1210.83 2055.06,1210.83 2055.64,1210.83 2056.23,1210.83 2056.81,1210.83 2057.4,1210.83 2057.99,1210.83 2058.57,1210.83 2059.16,1210.83 2059.75,1210.83 2060.33,1210.83 2060.92,1210.83 2061.51,1210.83 2062.09,1210.83 2062.68,1210.83 2063.27,1210.83 2063.85,1210.83 2064.44,1210.83 2065.02,1210.83 2065.61,1210.83 2066.2,1210.83 2066.78,1210.83 2067.37,1210.83 2067.96,1210.83 2068.54,1210.83 2069.13,1210.83 2069.72,1210.83 2070.3,1210.83 2070.89,1210.83 2071.48,1210.83 2072.06,1210.83 2072.65,1210.83 2073.23,1210.83 2073.82,1210.83 2074.41,1210.83 2074.99,1210.83 2075.58,1210.83 2076.17,1210.83 2076.75,1210.83 2077.34,1210.83 2077.93,1210.83 2078.51,1210.83 2079.1,1210.83 2079.68,1210.83 2080.27,1210.83 2080.86,1210.83 2081.44,1210.83 2082.03,1210.83 2082.62,1210.83 2083.2,1210.83 2083.79,1210.83 2084.38,1210.83 2084.96,1210.83 2085.55,1210.83 2086.14,1210.83 2086.72,1210.83 2087.31,1210.83 2087.89,1210.83 2088.48,1210.83 2089.07,1210.83 2089.65,1210.83 2090.24,1210.83 2090.83,1210.83 2091.41,1210.83 2092,1210.83 2092.59,1210.83 2093.17,1210.83 2093.76,1210.83 2094.35,1210.83 2094.93,1210.83 2095.52,1210.83 2096.1,1210.83 2096.69,1210.83 2097.28,1210.83 2097.86,1210.83 2098.45,1210.83 2099.04,1210.83 2099.62,1210.83 2100.21,1210.83 2100.8,1210.83 2101.38,1210.83 2101.97,1210.83 2102.55,1210.83 2103.14,1210.83 2103.73,1210.83 2104.31,1210.83 2104.9,1210.83 2105.49,1210.83 2106.07,1210.83 2106.66,1210.83 2107.25,1210.83 2107.83,1210.83 2108.42,1210.83 2109.01,1210.83 2109.59,1210.83 2110.18,1210.83 2110.76,1210.83 2111.35,1210.83 2111.94,1210.83 2112.52,1210.83 2113.11,1210.83 2113.7,1210.83 2114.28,1210.83 2114.87,1210.83 2115.46,1210.83 2116.04,1210.83 2116.63,1210.83 2117.22,1210.83 2117.8,1210.83 2118.39,1210.83 2118.97,1210.83 2119.56,1210.83 2120.15,1210.83 2120.73,1210.83 2121.32,1210.83 2121.91,1210.83 2122.49,1210.83 2123.08,1210.83 2123.67,1210.83 2124.25,1210.83 2124.84,1210.83 2125.42,1210.83 2126.01,1210.83 2126.6,1210.83 2127.18,1210.83 2127.77,1210.83 2128.36,1210.83 2128.94,1210.83 2129.53,1210.83 2130.12,1210.83 2130.7,1210.83 2131.29,1210.83 2131.88,1210.83 2132.46,1210.83 2133.05,1210.83 2133.63,1210.83 2134.22,1210.83 2134.81,1210.83 2135.39,1210.83 2135.98,1210.83 2136.57,1210.83 2137.15,1210.83 2137.74,1210.83 2138.33,1210.83 2138.91,1210.83 2139.5,1210.83 2140.09,1210.83 2140.67,1210.83 2141.26,1210.83 2141.84,1210.83 2142.43,1210.83 2143.02,1210.83 2143.6,1210.83 2144.19,1210.83 2144.78,1210.83 2145.36,1210.83 2145.95,1210.83 2146.54,1210.83 2147.12,1210.83 2147.71,1210.83 2148.3,1210.83 2148.88,1210.83 2149.47,1210.83 2150.05,1210.83 2150.64,1210.83 2151.23,1210.83 2151.81,1210.83 2152.4,1210.83 2152.99,1210.83 2153.57,1210.83 2154.16,1210.83 2154.75,1210.83 2155.33,1210.83 2155.92,1210.83 2156.5,1210.83 2157.09,1210.83 2157.68,1210.83 2158.26,1210.83 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.73,1194.03 1399.71,899.083 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.02 985.439,1194.03 2158.26,1194.03 2158.26,1227.02 985.439,1227.02 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip243\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip243)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-6762.81 164.91,-7609 165.469,-7227.82 166.029,-7967.03 166.588,-8651.8 167.147,-9270.36 167.706,-9827.01 168.266,-10325.7 168.825,-10753.3 169.384,-11148.2 169.943,-11495.7 170.503,-11782.8 171.062,-12045.6 171.621,-12269.7 172.18,-12440.3 172.74,-12031.9 173.299,-12174.7 173.858,-11804.1 174.417,-11925.9 174.977,-12019.8 175.536,-12079.6 176.095,-12113 176.655,-12130 177.214,-12131.9 177.773,-11804.7 178.332,-11762.7 178.892,-11710.4 179.451,-11648.7 180.01,-11327.5 180.569,-11231.2 181.129,-10921.5 181.688,-10814.7 182.247,-10510 182.806,-10212.6 183.366,-10077.4 183.925,-9786.67 184.484,-9483.17 185.043,-9187.73 185.603,-9030.02 186.162,-8628.15 186.721,-8470.1 187.28,-8300.1 187.84,-8139.67 188.399,-7977.88 188.958,-7710.84 189.517,-7367.42 190.077,-7123.47 190.636,-6890.86 191.195,-6739.49 191.754,-6511.98 192.314,-6289.37 192.873,-6009.95 193.432,-5610.6 193.991,-5423.79 194.551,-5182.31 195.11,-5057.45 195.669,-4930.37 196.228,-4749.22 196.788,-4571.48 197.347,-4349.09 197.906,-4232.64 198.465,-4124.25 199.025,-3917.54 199.584,-3761.47 200.143,-3661.35 200.702,-3476.52 201.262,-3382.18 201.821,-3204.39 202.38,-2997.46 202.939,-2877.52 203.499,-2792.85 204.058,-2674.54 204.617,-2524.32 205.176,-2380.02 205.736,-2238.81 206.295,-2131.97 206.854,-2028.88 207.413,-1863.93 207.973,-1650 208.532,-1534.97 209.091,-1482.64 209.65,-1372.09 210.21,-1262.67 210.769,-1212.15 211.328,-1136.06 211.887,-980.408 212.447,-911.479 213.006,-846.176 213.565,-678.2 214.124,-627.221 214.684,-574.021 215.243,-523.761 215.802,-475.413 216.361,-399.963 216.921,-373.68 217.48,-299.99 218.039,-229.923 218.598,-140.236 219.158,-122.179 219.717,-36.8391 220.276,25.0084 220.835,64.2394 221.395,83.3704 221.954,143.233 222.513,201.543 223.072,259.695 223.632,274.559 224.191,289.089 224.75,343.367 225.309,352.809 225.869,405.157 226.428,413.575 226.987,444.425 227.546,449.993 228.106,460.224 228.665,486.346 229.224,495.29 229.783,525.857 230.343,574.109 230.902,581.077 231.461,626.268 232.02,629.345 232.58,653.96 233.139,659.425 233.698,646.924 234.257,652.27 234.817,711.296 235.376,772.204 235.935,809.988 236.494,790.491 237.054,846.174 237.613,861.695 238.172,860.524 238.731,857.962 239.291,852.723 239.85,849.629 240.409,832.559 240.968,853.392 241.528,872.123 242.087,866.011 242.646,883.344 243.205,899.65 243.765,917.176 244.324,931.636 244.883,946.473 245.442,945.975 246.002,978.64 246.561,1010.19 247.12,1036.88 247.679,1064.99 248.239,1057.8 248.798,1103.23 249.357,1095.43 249.916,1120.17 250.476,1126.5 251.035,1116.35 251.594,1141.42 252.153,1125.52 252.713,1148.33 253.272,1121.91 253.831,1145.34 254.39,1169.32 254.95,1154.76 255.509,1141.78 256.068,1134.64 256.627,1090.59 257.187,1115.33 257.746,1125.07 258.305,1097.71 258.864,1121.18 259.424,1129.29 259.983,1100.88 260.542,1094.49 261.101,1120.2 261.661,1140.63 262.22,1109.05 262.779,1099.24 263.338,1107.49 263.898,1079.04 264.457,1057.21 265.016,1065.31 265.575,1055.08 266.135,1065.21 266.694,1159.3 267.253,1165.03 267.812,1166.81 268.372,1151.1 268.931,1189.88 269.49,1210.41 270.049,1195.97 270.609,1184.15 271.168,1171.74 271.727,1141.77 272.286,1145.95 272.846,1114.71 273.405,1105.27 273.964,1114.35 274.523,1055.32 275.083,1081.97 275.642,1108.96 276.201,1100.47 276.76,1075.2 277.32,1070.36 277.879,1061.87 278.438,1020.78 278.997,1018.89 279.557,1033.88 280.116,1044.61 280.675,1090.95 281.234,1082.9 281.794,1091.87 282.353,1069.07 282.912,1063.64 283.471,1059.65 284.031,1055.21 284.59,1069.39 285.149,1081.62 285.708,1073.43 286.268,1051.73 286.827,1045.48 287.386,1053.93 287.945,1098.92 288.505,1092.22 289.064,1117.7 289.623,1143.78 290.182,1152.77 290.742,1108.82 291.301,1147.28 291.86,1168.76 292.419,1188.05 292.979,1177.14 293.538,1165.08 294.097,1171.18 294.656,1143.57 295.216,1147.29 295.775,1153.67 296.334,1140.78 296.893,1098.47 297.453,1105.19 298.012,1113.67 298.571,1068.15 299.13,1060.51 299.69,1067.81 300.249,1062.51 300.808,1053.33 301.368,1062.41 301.927,1039.67 302.486,1051.78 303.045,1060.17 303.605,1052.52 304.164,1045.58 304.723,1037.09 305.282,1018.04 305.842,1013.46 306.401,991.286 306.96,1006.06 307.519,984.376 308.079,996.66 308.638,1006.3 309.197,1005.36 309.756,1031.71 310.316,1011.27 310.875,988.021 311.434,1015.92 311.993,1010.69 312.553,1020.33 313.112,997.742 313.671,1008.59 314.23,969.993 314.79,985.44 315.349,983.354 315.908,1014.17 316.467,994.016 317.027,972.478 317.586,951.327 318.145,967.701 318.704,980.802 319.264,975.788 319.823,974.018 320.382,1001.56 320.941,996.943 321.501,993.53 322.06,988.784 322.619,985.669 323.178,996.691 323.738,975.043 324.297,973.017 324.856,985.045 325.415,980.756 325.975,977.324 326.534,936.02 327.093,913.469 327.652,912.19 328.212,927.743 328.771,924.847 329.33,920.251 329.889,916.246 330.449,928.647 331.008,939.44 331.567,954.076 332.126,916.944 332.686,949.214 333.245,960.71 333.804,923.576 334.363,883.388 334.923,881.323 335.482,865.351 336.041,880.512 336.6,881.46 337.16,880.205 337.719,881.767 338.278,896.348 338.837,925.971 339.397,890.463 339.956,889.065 340.515,900.499 341.074,864.439 341.634,862.985 342.193,866.719 342.752,852.359 343.311,816.988 343.871,836.207 344.43,821.794 344.989,840.929 345.548,841.463 346.108,860.915 346.667,863.814 347.226,862.644 347.785,832.722 348.345,870.929 348.904,902.933 349.463,919.633 350.022,898.891 350.582,912.785 351.141,926.274 351.7,933.305 352.259,942.892 352.819,955.764 353.378,984.012 353.937,975.286 354.496,971.081 355.056,963.678 355.615,971.248 356.174,980.353 356.733,957.041 357.293,982.607 357.852,994.055 358.411,955.092 358.97,946.807 359.53,972.591 360.089,981.102 360.648,1006.5 361.207,996.79 361.767,986.918 362.326,976.798 362.885,905.954 363.444,852.251 364.004,867.203 364.563,865.049 365.122,893.644 365.681,869.807 366.241,909.463 366.8,938.295 367.359,917.054 367.918,926.616 368.478,904.879 369.037,869.323 369.596,899.706 370.155,895.611 370.715,936.552 371.274,932.524 371.833,974.448 372.392,981.355 372.952,989.534 373.511,951.356 374.07,944.139 374.629,986.299 375.189,960.694 375.748,952.875 376.307,909.774 376.866,933.226 377.426,944.438 377.985,951.34 378.544,911.685 379.103,954.731 379.663,928.52 380.222,857.331 380.781,889.771 381.34,838.165 381.9,821.578 382.459,853.859 383.018,850.846 383.577,848.189 384.137,861.424 384.696,842.262 385.255,857.599 385.814,917.392 386.374,947.847 386.933,986.078 387.492,942.322 388.051,900.881 388.611,909.725 389.17,939.671 389.729,922.068 390.288,931.597 390.848,974.497 391.407,962.331 391.966,968.124 392.525,942.425 393.085,919.651 393.644,943.99 394.203,917.744 394.762,927.871 395.322,906.238 395.881,867.335 396.44,832.99 396.999,859.931 397.559,825.595 398.118,824.88 398.677,856.93 399.236,870.892 399.796,871.191 400.355,914.524 400.914,890.956 401.473,902.139 402.033,893.25 402.592,872.409 403.151,896.312 403.71,873.597 404.27,852.417 404.829,846.133 405.388,857.092 405.947,853.465 406.507,882.233 407.066,858.857 407.625,886.762 408.184,897.318 408.744,872.687 409.303,868.059 409.862,863.37 410.421,825.591 410.981,841.931 411.54,851.403 412.099,865.845 412.658,880.159 413.218,858.491 413.777,834.489 414.336,878.483 414.895,891.927 415.455,870.226 416.014,830.834 416.573,856.968 417.132,834.982 417.692,815.786 418.251,811.237 418.81,810.184 419.369,874.835 419.929,852.379 420.488,830.027 421.047,839.385 421.606,869.971 422.166,864.668 422.725,845.654 423.284,840.947 423.843,805.561 424.403,785.178 424.962,717.305 425.521,717.867 426.08,653.99 426.64,663.408 427.199,649.621 427.758,669.841 428.318,677.035 428.877,646.705 429.436,669.25 429.995,657.623 430.555,647.011 431.114,703.334 431.673,720.115 432.232,691.112 432.792,698.877 433.351,702.148 433.91,737.189 434.469,722.311 435.029,693.649 435.588,711.386 436.147,718.226 436.706,724.435 437.266,740.15 437.825,743.546 438.384,744.645 438.943,743.085 439.503,732.236 440.062,749.644 440.621,734.005 441.18,765.108 441.74,747.527 442.299,764.619 442.858,733.147 443.417,702.637 443.977,687.389 444.536,676.081 445.095,677.22 445.654,697.317 446.214,685.089 446.773,702.332 447.332,718.505 447.891,717.263 448.451,752.821 449.01,739.336 449.569,742.528 450.128,758.787 450.688,760.581 451.247,710.487 451.806,677.816 452.365,715.164 452.925,687.978 453.484,690.945 454.043,711.036 454.602,712.533 455.162,699.948 455.721,685.142 456.28,706.625 456.839,720.131 457.399,720.751 457.958,736.916 458.517,753.585 459.076,718.904 459.636,738.43 460.195,802.101 460.754,814.804 461.313,858.864 461.873,817.888 462.432,863.529 462.991,859.109 463.55,838.928 464.11,850.492 464.669,812.435 465.228,794.19 465.787,791.712 466.347,817.702 466.906,782.017 467.465,794.213 468.024,793.496 468.584,772.538 469.143,786.951 469.702,817.445 470.261,831.999 470.821,824.358 471.38,739.703 471.939,724.422 472.498,710.472 473.058,747.176 473.617,745.054 474.176,713.483 474.735,714.793 475.295,716.386 475.854,718.383 476.413,705.82 476.972,691.412 477.532,678.542 478.091,665.175 478.65,668.197 479.209,720.48 479.769,723.712 480.328,708.515 480.887,745.333 481.446,728.17 482.006,747.182 482.565,781.633 483.124,760.259 483.683,822.896 484.243,820.636 484.802,802.664 485.361,817.372 485.92,797.275 486.48,774.881 487.039,790.281 487.598,807.876 488.157,802.882 488.717,764.971 489.276,763.447 489.835,747.96 490.394,750.189 490.954,753.489 491.513,750.965 492.072,753.178 492.631,799.749 493.191,797.347 493.75,812.76 494.309,790.694 494.868,772.378 495.428,772.361 495.987,770.842 496.546,783.851 497.105,798.006 497.665,796.135 498.224,809.194 498.783,786.674 499.342,766.736 499.902,764.709 500.461,780.245 501.02,763.37 501.579,776.861 502.139,793.815 502.698,757.646 503.257,741.081 503.816,740.706 504.376,725.023 504.935,723.818 505.494,741.219 506.053,738.5 506.613,752.29 507.172,765.226 507.731,797.7 508.29,765.237 508.85,731.632 509.409,748.216 509.968,763.556 510.527,730.245 511.087,742.438 511.646,772.578 512.205,755.627 512.764,737.142 513.324,750.28 513.883,776.467 514.442,837.083 515.001,860.338 515.561,852.024 516.12,830.446 516.679,808.146 517.238,786.856 517.798,767.04 518.357,731.062 518.916,727.184 519.475,725.688 520.035,707.515 520.594,723.959 521.153,742.281 521.712,756.784 522.272,786.488 522.831,783.167 523.39,796.547 523.949,791.743 524.509,755.32 525.068,755.655 525.627,705.157 526.186,709.726 526.746,747.214 527.305,728.71 527.864,729.335 528.423,730.097 528.983,728.613 529.542,727.511 530.101,726.928 530.66,741.489 531.22,692.002 531.779,661.536 532.338,630.957 532.897,635.908 533.457,655.814 534.016,659.868 534.575,644.624 535.134,681.617 535.694,699.691 536.253,701.791 536.812,703.66 537.371,706.091 537.931,740.091 538.49,754.538 539.049,753.212 539.608,719.755 540.168,716.752 540.727,748.008 541.286,747.516 541.845,683.515 542.405,704.808 542.964,706.031 543.523,673.322 544.082,677.166 544.642,681.404 545.201,648.11 545.76,650.567 546.319,656.571 546.879,677.962 547.438,697.389 547.997,666.803 548.556,669.952 549.116,675.947 549.675,678.457 550.234,682.909 550.793,685.181 551.353,669.993 551.912,670.838 552.471,643.049 553.031,663.88 553.59,698.454 554.149,699.518 554.708,714.6 555.268,699.299 555.827,681.478 556.386,665.959 556.945,684.028 557.505,669.452 558.064,659.506 558.623,631.045 559.182,651.259 559.742,655.662 560.301,670.844 560.86,642.027 561.419,631.737 561.979,635.243 562.538,651.807 563.097,641.065 563.656,633.991 564.216,656.159 564.775,658.763 565.334,676.526 565.893,726.794 566.453,710.119 567.012,712.885 567.571,708.426 568.13,675.703 568.69,678.357 569.249,682.731 569.808,687.361 570.367,675.492 570.927,697.98 571.486,746.353 572.045,727.807 572.604,727.127 573.164,709.547 573.723,725.979 574.282,712.845 574.841,712.845 575.401,711.535 575.96,694.192 576.519,677.503 577.078,693.325 577.638,678.199 578.197,680.791 578.756,683.123 579.315,687.688 579.875,673.531 580.434,692.603 580.993,725.568 581.552,724.254 582.112,750.596 582.671,762.569 583.23,806.445 583.789,819.092 584.349,843.256 584.908,836.326 585.467,831.037 586.026,806.594 586.586,803.079 587.145,797.972 587.704,819.831 588.263,829.576 588.823,809.612 589.382,802.558 589.941,797.735 590.5,807.23 591.06,816.541 591.619,825.461 592.178,787.133 592.737,800.794 593.297,780.777 593.856,812.645 594.415,792.425 594.974,785.983 595.534,798.512 596.093,791.309 596.652,801.441 597.211,797.413 597.771,794.853 598.33,774.863 598.889,767.871 599.448,780.031 600.008,789.731 600.567,798.8 601.126,794.464 601.685,804.246 602.245,816.059 602.804,813.913 603.363,778.365 603.922,806.138 604.482,799.35 605.041,793.643 605.6,788.142 606.159,781.717 606.719,746.364 607.278,729.213 607.837,729.623 608.396,714.297 608.956,716.566 609.515,702.063 610.074,751.238 610.633,715.426 611.193,731.803 611.752,762.174 612.311,742.525 612.87,755.339 613.43,734.777 613.989,717.11 614.548,699.555 615.107,714.796 615.667,747.358 616.226,729.769 616.785,710.987 617.344,709.02 617.904,756.331 618.463,752.769 619.022,733.356 619.581,715.719 620.141,683.475 620.7,700.715 621.259,720.293 621.818,687.947 622.378,671.851 622.937,643.482 623.496,646.601 624.055,633.2 624.615,622.653 625.174,611.577 625.733,631.212 626.292,634.542 626.852,672.348 627.411,707.361 627.97,722.512 628.529,736.985 629.089,702.875 629.648,769.942 630.207,780.727 630.766,743.615 631.326,758.255 631.885,754.475 632.444,751.096 633.003,750.585 633.563,749.661 634.122,715.166 634.681,714.424 635.24,726.823 635.8,706.398 636.359,705.922 636.918,673.258 637.477,658.658 638.037,676.485 638.596,680.462 639.155,698.082 639.714,697.83 640.274,715.832 640.833,717.874 641.392,687.693 641.951,707.067 642.511,674.181 643.07,641.904 643.629,610.71 644.188,628.552 644.748,646.464 645.307,617.869 645.866,641.134 646.425,661.583 646.985,629.784 647.544,653.025 648.103,656.932 648.662,692.652 649.222,707.608 649.781,697.009 650.34,730.415 650.899,747.463 651.459,727.719 652.018,757.883 652.577,723.625 653.136,707.659 653.696,705.738 654.255,705.914 654.814,702.582 655.373,702.94 655.933,719.487 656.492,767.242 657.051,750.783 657.61,733.767 658.17,734.565 658.729,730.028 659.288,744.281 659.847,727.849 660.407,758.105 660.966,738.013 661.525,735.195 662.084,717.72 662.644,714.668 663.203,666.654 663.762,689.659 664.321,688.993 664.881,707.335 665.44,739.616 665.999,756.653 666.558,752.277 667.118,714.641 667.677,731.271 668.236,727.028 668.795,729.028 669.355,741.684 669.914,709.357 670.473,680.824 671.032,682.343 671.592,682.214 672.151,665.801 672.71,682.341 673.269,669.62 673.829,705.555 674.388,724.875 674.947,742.025 675.506,736.914 676.066,718.068 676.625,732.963 677.184,732.201 677.743,713.316 678.303,694.827 678.862,695.38 679.421,677.906 679.981,675.555 680.54,609.279 681.099,615.472 681.658,650.422 682.218,687.282 682.777,700.097 683.336,684.269 683.895,701.762 684.455,684.01 685.014,668.945 685.573,653.405 686.132,672.461 686.692,656.584 687.251,670.517 687.81,707.755 688.369,709 688.929,691.288 689.488,722.546 690.047,751.996 690.606,737.199 691.166,719.089 691.725,716.523 692.284,733.189 692.843,680.779 693.403,695.826 693.962,696.508 694.521,695.922 695.08,778.609 695.64,775.716 696.199,773.837 696.758,753.499 697.317,753.985 697.877,755.619 698.436,736.318 698.995,719.062 699.554,717.583 700.114,730.235 700.673,743.941 701.232,706.778 701.791,737.818 702.351,719.818 702.91,720.582 703.469,717.748 704.028,719.304 704.588,749.054 705.147,746.618 705.706,743.652 706.265,740.929 706.825,724.016 707.384,722.841 707.943,718.036 708.502,717.513 709.062,702.517 709.621,688.847 710.18,673.009 710.739,674.339 711.299,706.462 711.858,697.682 712.417,696.634 712.976,709.504 713.536,721.183 714.095,702.667 714.654,671.018 715.213,687.401 715.773,706.098 716.332,710.253 716.891,713.166 717.45,713.842 718.01,694.805 718.569,696.051 719.128,729.28 719.687,709.55 720.247,708.092 720.806,752.759 721.365,750.827 721.924,764.77 722.484,742.176 723.043,742.117 723.602,739.205 724.161,705.24 724.721,723.137 725.28,737.816 725.839,786.342 726.398,782.099 726.958,811.108 727.517,802.231 728.076,810.639 728.635,791.356 729.195,817.13 729.754,794.275 730.313,853.754 730.872,795.324 731.432,774.656 731.991,782.294 732.55,812.363 733.109,790.663 733.669,768.659 734.228,778.974 734.787,773.846 735.346,751.11 735.906,766.373 736.465,775.828 737.024,772.314 737.583,748.851 738.143,681.809 738.702,697.846 739.261,699.498 739.82,713.635 740.38,725.943 740.939,693.22 741.498,706.152 742.057,719.824 742.617,731.831 743.176,696.149 743.735,679.377 744.294,661.674 744.854,612.164 745.413,632.883 745.972,653.534 746.531,670.127 747.091,701.072 747.65,696.694 748.209,696.373 748.768,710.421 749.328,691.085 749.887,639.46 750.446,659.444 751.005,664.162 751.565,684.541 752.124,667.262 752.683,667.843 753.242,620.855 753.802,608.875 754.361,614.294 754.92,600.079 755.479,590.634 756.039,579.064 756.598,620.481 757.157,624.112 757.716,627.057 758.276,643.09 758.835,643.334 759.394,679.643 759.953,682.584 760.513,696.141 761.072,725.669 761.631,787.912 762.19,768.734 762.75,798.55 763.309,810.184 763.868,755.485 764.427,770.069 764.987,781.317 765.546,762.498 766.105,760.113 766.664,772.583 767.224,818.056 767.783,809.823 768.342,805.231 768.901,815.503 769.461,808.18 770.02,788.241 770.579,762.755 771.138,776.585 771.698,705.337 772.257,691.242 772.816,674.469 773.375,661.395 773.935,678.223 774.494,648.128 775.053,649.197 775.612,653.19 776.172,638.106 776.731,626.324 777.29,660.705 777.849,648.874 778.409,685.079 778.968,668.653 779.527,654.19 780.086,639.219 780.646,641.594 781.205,644.514 781.764,646.74 782.323,664.863 782.883,650.697 783.442,650.67 784.001,652.758 784.56,641.615 785.12,659.438 785.679,661.009 786.238,678.44 786.797,727.925 787.357,773.483 787.916,785.152 788.475,779.825 789.034,793.129 789.594,821.922 790.153,800.774 790.712,827.384 791.271,819.087 791.831,793.654 792.39,755.12 792.949,772.228 793.508,735.696 794.068,734.684 794.627,730.783 795.186,710.895 795.745,710.142 796.305,695.16 796.864,726.607 797.423,740.503 797.982,706.491 798.542,722.367 799.101,655.218 799.66,640.667 800.219,611.764 800.779,648.642 801.338,650.133 801.897,634.722 802.456,621.784 803.016,609.74 803.575,615.515 804.134,603.542 804.693,639.633 805.253,644.027 805.812,649.075 806.371,615.826 806.931,653.708 807.49,656.309 808.049,659.985 808.608,677.583 809.168,662.976 809.727,664.829 810.286,685.059 810.845,671.479 811.405,653.663 811.964,641.361 812.523,646.11 813.082,630.566 813.642,650.287 814.201,669.241 814.76,651.853 815.319,652.902 815.879,686.633 816.438,687.523 816.997,671.667 817.556,707.932 818.116,673.321 818.675,672.951 819.234,702.634 819.793,702.398 820.353,703.459 820.912,689.049 821.471,689.769 822.03,689.356 822.59,690.631 823.149,722.278 823.708,736.552 824.267,704.344 824.827,719.935 825.386,719.04 825.945,717.876 826.504,701.242 827.064,699.548 827.623,684.492 828.182,714.997 828.741,731.803 829.301,732.117 829.86,748.867 830.419,713.166 830.978,695.385 831.538,676.368 832.097,694.4 832.656,709.879 833.215,710.7 833.775,695.857 834.334,678.521 834.893,660.591 835.452,663.663 836.012,665.372 836.571,716.648 837.13,732.258 837.689,731.296 838.249,746.889 838.808,743.135 839.367,755.522 839.926,765.201 840.486,775.911 841.045,768.081 841.604,747.419 842.163,759.491 842.723,785.858 843.282,762.705 843.841,725.569 844.4,689.478 844.96,705.984 845.519,708.896 846.078,691.995 846.637,738.984 847.197,719.538 847.756,719.228 848.315,717.696 848.874,651.243 849.434,652.482 849.993,635.851 850.552,605.842 851.111,626.258 851.671,611.807 852.23,601.433 852.789,605.007 853.348,640.868 853.908,607.85 854.467,597.443 855.026,602.728 855.585,603.469 856.145,623.538 856.704,626.645 857.263,630.468 857.822,584.792 858.382,557.334 858.941,570.304 859.5,574.718 860.059,564.847 860.619,572.584 861.178,581.417 861.737,540.058 862.296,534.062 862.856,562.147 863.415,585.74 863.974,608.228 864.533,641.834 865.093,659.274 865.652,666.061 866.211,651.548 866.77,702.009 867.33,670.306 867.889,705.423 868.448,703.83 869.007,671.92 869.567,654.745 870.126,643.169 870.685,693.133 871.244,706.21 871.804,689.287 872.363,703.995 872.922,715.893 873.481,716.28 874.041,701.556 874.6,683.854 875.159,663.511 875.718,698.501 876.278,697.623 876.837,681.809 877.396,649.093 877.955,649.696 878.515,686.255 879.074,702.702 879.633,685.265 880.192,686.096 880.752,686.006 881.311,684.46 881.87,703.116 882.429,683.492 882.989,696.957 883.548,661.348 884.107,676.279 884.666,660.867 885.226,661.032 885.785,692.46 886.344,694.043 886.903,693.734 887.463,696.468 888.022,695.985 888.581,697.803 889.14,680.144 889.7,682.185 890.259,663.436 890.818,664.598 891.377,664.03 891.937,700.398 892.496,721.127 893.055,733.315 893.614,716.575 894.174,718.034 894.733,729.558 895.292,746.388 895.851,729.849 896.411,762.603 896.97,744.094 897.529,738.266 898.088,732.141 898.648,711.474 899.207,711.921 899.766,724.344 900.325,722.293 900.885,674.59 901.444,692.776 902.003,688.588 902.562,690.433 903.122,688.016 903.681,722.747 904.24,718.556 904.799,702.264 905.359,683.597 905.918,638.272 906.477,628.902 907.036,632.78 907.596,683.603 908.155,666.603 908.714,666.997 909.273,651.94 909.833,636.453 910.392,621.627 910.951,641.829 911.51,613.593 912.07,619.815 912.629,609.388 913.188,615.001 913.747,619.38 914.307,641.246 914.866,628.833 915.425,614.311 915.984,599.69 916.544,605.725 917.103,641.642 917.662,644.707 918.221,617.437 918.781,668.836 919.34,669.16 919.899,670.039 920.458,638.293 921.018,653.217 921.577,654.605 922.136,685.933 922.695,721.583 923.255,720.599 923.814,735.021 924.373,735.204 924.932,735.241 925.492,733.722 926.051,732.557 926.61,677.708 927.169,682.469 927.729,682.563 928.288,651.02 928.847,700.274 929.406,682.353 929.966,679.595 930.525,681.426 931.084,644.744 931.644,633.633 932.203,652.408 932.762,686.133 933.321,719.342 933.881,716.158 934.44,700.053 934.999,697.676 935.558,695.628 936.118,694.959 936.677,729.067 937.236,756.575 937.795,753.575 938.355,734.897 938.914,748.363 939.473,764.772 940.032,743.28 940.592,721.907 941.151,703.827 941.71,718.806 942.269,748.858 942.829,764.411 943.388,761.21 943.947,771.546 944.506,784.303 945.066,766.97 945.625,731.575 946.184,757.37 946.743,754.309 947.303,718.619 947.862,732.251 948.421,727.032 948.98,727.036 949.54,695.632 950.099,678.264 950.658,681.307 951.217,728.776 951.777,741.094 952.336,740.937 952.895,736.655 953.454,736.868 954.014,746.568 954.573,727.138 955.132,737.227 955.691,720.055 956.251,722.272 956.81,705.267 957.369,690.017 957.928,674.201 958.488,676.739 959.047,629.898 959.606,586.542 960.165,580.611 960.725,618.566 961.284,621.638 961.843,643.103 962.402,631.711 962.962,614.601 963.521,600.222 964.08,620.458 964.639,626.869 965.199,630.012 965.758,649.544 966.317,618.579 966.876,605.816 967.436,610.722 967.995,599.333 968.554,585.432 969.113,590.047 969.673,575.624 970.232,582.607 970.791,604.919 971.35,608.826 971.91,608.918 972.469,626.756 973.028,614.442 973.587,664.608 974.147,676.529 974.706,658.431 975.265,659.006 975.824,646.764 976.384,664.507 976.943,633.037 977.502,635.669 978.061,605.867 978.621,607.597 979.18,659.181 979.739,664.017 980.298,647.96 980.858,668.784 981.417,703.82 981.976,719.772 982.535,733.943 983.095,731.28 983.654,694.664 984.213,693.954 984.772,680.411 985.332,697.305 985.891,682.244 986.45,665.102 987.009,654.422 987.569,623.391 988.128,642.389 988.687,631.698 989.246,619.71 989.806,625.418 990.365,657.289 990.924,611.6 991.483,598.802 992.043,602.487 992.602,625.506 993.161,677.468 993.72,663.869 994.28,681.208 994.839,683.621 995.398,717.867 995.957,713.816 996.517,680.011 997.076,714.158 997.635,728.791 998.194,676.36 998.754,723.694 999.313,739.158 999.872,750.863 1000.43,762.109 1000.99,744.496 1001.55,727.968 1002.11,725.128 1002.67,739.503 1003.23,754.5 1003.79,713.872 1004.35,679.189 1004.91,665.054 1005.46,664.941 1006.02,633.499 1006.58,605.282 1007.14,610.159 1007.7,614.5 1008.26,586.654 1008.82,610.15 1009.38,613.803 1009.94,620.364 1010.5,608.187 1011.06,614.178 1011.62,630.768 1012.18,619.931 1012.73,621.324 1013.29,629.453 1013.85,666.533 1014.41,683.402 1014.97,730.023 1015.53,714.477 1016.09,744.537 1016.65,742.603 1017.21,726.185 1017.77,736.751 1018.33,763.307 1018.89,760.06 1019.45,775.302 1020.01,773.867 1020.56,771.355 1021.12,736.823 1021.68,700.674 1022.24,748.161 1022.8,731.758 1023.36,747.519 1023.92,743.368 1024.48,740.288 1025.04,719.343 1025.6,714.366 1026.16,647.97 1026.72,616.042 1027.28,619.77 1027.83,639.051 1028.39,670.2 1028.95,669.617 1029.51,639.166 1030.07,641.459 1030.63,647.865 1031.19,634.489 1031.75,618.994 1032.31,622.083 1032.87,624.091 1033.43,657.073 1033.99,658.988 1034.55,659.346 1035.1,659.696 1035.66,676.757 1036.22,677.032 1036.78,663.694 1037.34,710.411 1037.9,757.925 1038.46,739.81 1039.02,720.475 1039.58,654.452 1040.14,654.539 1040.7,690.728 1041.26,690.653 1041.82,709.798 1042.38,705.656 1042.93,686.886 1043.49,671.859 1044.05,688.65 1044.61,673.565 1045.17,690.238 1045.73,741.079 1046.29,721.01 1046.85,753.237 1047.41,752.555 1047.97,762.561 1048.53,740.975 1049.09,756.397 1049.65,720.084 1050.2,700.598 1050.76,715.989 1051.32,732.257 1051.88,711.839 1052.44,694.812 1053,691.414 1053.56,726.251 1054.12,721.554 1054.68,719.062 1055.24,719.291 1055.8,735.719 1056.36,717.476 1056.92,648.093 1057.48,649.856 1058.03,600.929 1058.59,605.264 1059.15,608.989 1059.71,626.737 1060.27,597.644 1060.83,602.829 1061.39,654.01 1061.95,609.554 1062.51,631.119 1063.07,621.075 1063.63,626.333 1064.19,612.288 1064.75,630.605 1065.3,632.465 1065.86,617.245 1066.42,638.268 1066.98,703.988 1067.54,730.214 1068.1,711.931 1068.66,710.648 1069.22,680.083 1069.78,712.167 1070.34,728.973 1070.9,728.182 1071.46,725.428 1072.02,771.666 1072.57,798.8 1073.13,794.228 1073.69,791.355 1074.25,786.885 1074.81,799.2 1075.37,780.162 1075.93,790.732 1076.49,753.189 1077.05,747.139 1077.61,743.89 1078.17,738.437 1078.73,738.7 1079.29,781.037 1079.85,792.274 1080.4,786.378 1080.96,765.075 1081.52,760.593 1082.08,772.664 1082.64,766.406 1083.2,776.943 1083.76,757.734 1084.32,786.248 1084.88,747.623 1085.44,743.734 1086,756.272 1086.56,784.091 1087.12,777.244 1087.67,775.739 1088.23,756.49 1088.79,749.54 1089.35,710.331 1089.91,690.51 1090.47,692.166 1091.03,692.608 1091.59,711.867 1092.15,678.009 1092.71,695.998 1093.27,710.741 1093.83,708.281 1094.39,675.297 1094.94,644.774 1095.5,665.575 1096.06,650.908 1096.62,639.314 1097.18,655.337 1097.74,670.479 1098.3,670.965 1098.86,634.037 1099.42,587.189 1099.98,607.695 1100.54,615.711 1101.1,568.557 1101.66,574.704 1102.22,579.479 1102.77,665.598 1103.33,681.045 1103.89,696.263 1104.45,692.632 1105.01,692.434 1105.57,692.874 1106.13,694.511 1106.69,743.194 1107.25,741.03 1107.81,765.892 1108.37,761.822 1108.93,759.142 1109.49,723.77 1110.04,737.235 1110.6,702.623 1111.16,700.513 1111.72,715.181 1112.28,699.013 1112.84,684.489 1113.4,671.108 1113.96,701.847 1114.52,736.063 1115.08,717.868 1115.64,700.448 1116.2,670.85 1116.76,653.564 1117.31,658.595 1117.87,659.917 1118.43,647.334 1118.99,669.47 1119.55,651.995 1120.11,652.853 1120.67,668.112 1121.23,666.412 1121.79,685.328 1122.35,716.874 1122.91,708.998 1123.47,674.404 1124.03,672.927 1124.59,674.373 1125.14,691.796 1125.7,692.806 1126.26,678.479 1126.82,681.627 1127.38,667.228 1127.94,652.937 1128.5,655.457 1129.06,638.02 1129.62,641.156 1130.18,674.961 1130.74,705.975 1131.3,692.494 1131.86,673.135 1132.41,656.323 1132.97,657.475 1133.53,675.214 1134.09,691.955 1134.65,707.887 1135.21,692.982 1135.77,726.126 1136.33,724.198 1136.89,723.434 1137.45,688.959 1138.01,671.937 1138.57,676.942 1139.13,726.019 1139.68,757.09 1140.24,771.02 1140.8,781.369 1141.36,759.003 1141.92,755.231 1142.48,749.574 1143.04,746.39 1143.6,725.866 1144.16,690.672 1144.72,691.36 1145.28,705.78 1145.84,704.614 1146.4,704.868 1146.96,689.533 1147.51,674.514 1148.07,674.203 1148.63,692.427 1149.19,677.208 1149.75,645.139 1150.31,646.082 1150.87,613.361 1151.43,601.239 1151.99,605.211 1152.55,608.295 1153.11,625.224 1153.67,646.238 1154.23,614.767 1154.78,620.88 1155.34,655.896 1155.9,657.886 1156.46,609.671 1157.02,648.17 1157.58,681.075 1158.14,697.86 1158.7,710.831 1159.26,676.426 1159.82,659.351 1160.38,676.276 1160.94,679.227 1161.5,682.129 1162.05,670.932 1162.61,655.326 1163.17,675.593 1163.73,658.64 1164.29,662.473 1164.85,632.426 1165.41,619.707 1165.97,622.667 1166.53,674.56 1167.09,679.671 1167.65,696.463 1168.21,680.557 1168.77,711.865 1169.33,725.565 1169.88,672.416 1170.44,687.131 1171,669.544 1171.56,636.325 1172.12,657.015 1172.68,674.175 1173.24,706.539 1173.8,705.427 1174.36,717.435 1174.92,745.038 1175.48,724.564 1176.04,656.508 1176.6,661.291 1177.15,695.096 1177.71,709.965 1178.27,720.387 1178.83,719.902 1179.39,754.509 1179.95,754.101 1180.51,737.695 1181.07,719.297 1181.63,736.845 1182.19,716.393 1182.75,717.112 1183.31,766.313 1183.87,746.869 1184.43,762.868 1184.98,789.288 1185.54,766.824 1186.1,763.97 1186.66,796.259 1187.22,757.77 1187.78,736.992 1188.34,717.213 1188.9,713.738 1189.46,727.139 1190.02,718.346 1190.58,714.116 1191.14,680.975 1191.7,663.048 1192.25,684.698 1192.81,716.744 1193.37,697.911 1193.93,700.419 1194.49,716.214 1195.05,715.973 1195.61,717.042 1196.17,694.533 1196.73,724.165 1197.29,737.767 1197.85,735.945 1198.41,734.231 1198.97,761.465 1199.52,738.471 1200.08,732.292 1200.64,747.654 1201.2,711.286 1201.76,710.027 1202.32,690.89 1202.88,673.418 1203.44,692.444 1204,724.15 1204.56,736.412 1205.12,719.3 1205.68,717.279 1206.24,699.305 1206.8,667.269 1207.35,650.099 1207.91,652.237 1208.47,655.648 1209.03,674.639 1209.59,660.538 1210.15,646.094 1210.71,676.978 1211.27,677.042 1211.83,661.779 1212.39,661.536 1212.95,662.478 1213.51,663.16 1214.07,664.11 1214.62,715.405 1215.18,712.672 1215.74,697.069 1216.3,714.793 1216.86,730.407 1217.42,727.694 1217.98,723.678 1218.54,703.838 1219.1,703.216 1219.66,654.44 1220.22,672 1220.78,704.014 1221.34,717.695 1221.89,715.71 1222.45,713.483 1223.01,660.1 1223.57,675.576 1224.13,663.304 1224.69,664.197 1225.25,665.334 1225.81,651.375 1226.37,702.336 1226.93,683.611 1227.49,671.377 1228.05,672.3 1228.61,655.954 1229.17,637.418 1229.72,639.472 1230.28,625.678 1230.84,675.571 1231.4,661.497 1231.96,695.583 1232.52,674.906 1233.08,641.677 1233.64,647.911 1234.2,649.305 1234.76,667.144 1235.32,704.403 1235.88,672.914 1236.44,642.149 1236.99,646.14 1237.55,647.425 1238.11,648.533 1238.67,667.185 1239.23,699.626 1239.79,654.29 1240.35,654.678 1240.91,654.396 1241.47,673.626 1242.03,670.714 1242.59,670.474 1243.15,671.539 1243.71,690.897 1244.26,703.24 1244.82,688.9 1245.38,688.666 1245.94,706.792 1246.5,673.351 1247.06,673.849 1247.62,658.342 1248.18,630.173 1248.74,633.917 1249.3,620.052 1249.86,622.143 1250.42,638.565 1250.98,641.793 1251.54,625.85 1252.09,579.711 1252.65,570.899 1253.21,579.272 1253.77,585.644 1254.33,608.574 1254.89,611.446 1255.45,613.571 1256.01,634.769 1256.57,636.115 1257.13,670.385 1257.69,706.745 1258.25,690.773 1258.81,689.843 1259.36,690.574 1259.92,718.908 1260.48,715.606 1261.04,684.542 1261.6,685.645 1262.16,716.888 1262.72,715.18 1263.28,695.901 1263.84,695.383 1264.4,698.444 1264.96,711.885 1265.52,724.272 1266.08,739.701 1266.63,739.83 1267.19,723.143 1267.75,672.123 1268.31,641.334 1268.87,655.304 1269.43,640.422 1269.99,577.713 1270.55,619.442 1271.11,639.508 1271.67,627.756 1272.23,650.118 1272.79,654.226 1273.35,639.102 1273.91,645.196 1274.46,649.558 1275.02,654.074 1275.58,670.775 1276.14,673.731 1276.7,688.534 1277.26,689.533 1277.82,722.162 1278.38,702.141 1278.94,684.034 1279.5,701.614 1280.06,701.464 1280.62,715.217 1281.18,730.465 1281.73,726.851 1282.29,724.999 1282.85,725.235 1283.41,688.547 1283.97,687.734 1284.53,671.466 1285.09,671.475 1285.65,704.484 1286.21,702.833 1286.77,717.554 1287.33,684.651 1287.89,684.532 1288.45,668.779 1289,637.996 1289.56,671.195 1290.12,675.063 1290.68,674.378 1291.24,692.151 1291.8,674.176 1292.36,690.871 1292.92,674.514 1293.48,675.541 1294.04,690.941 1294.6,693.754 1295.16,712.209 1295.72,724.584 1296.28,706.152 1296.83,706.73 1297.39,705.032 1297.95,688.205 1298.51,671.14 1299.07,705.946 1299.63,687.311 1300.19,687.272 1300.75,689.671 1301.31,689.091 1301.87,691.092 1302.43,689.407 1302.99,672.999 1303.55,691.68 1304.1,689.209 1304.66,706.534 1305.22,657.41 1305.78,676.196 1306.34,680.091 1306.9,678.982 1307.46,692.74 1308.02,691.387 1308.58,705.277 1309.14,701.663 1309.7,733.642 1310.26,749.407 1310.82,733.686 1311.38,716.408 1311.93,719.235 1312.49,731.199 1313.05,732.818 1313.61,715.726 1314.17,730.518 1314.73,711.238 1315.29,692.958 1315.85,693.294 1316.41,694.229 1316.97,680.214 1317.53,696.811 1318.09,697.996 1318.65,648.753 1319.2,667.014 1319.76,662.76 1320.32,664.961 1320.88,637.543 1321.44,622.103 1322,626.402 1322.56,626.599 1323.12,615.199 1323.68,667.811 1324.24,671.537 1324.8,672.799 1325.36,724.166 1325.92,740.421 1326.47,707.465 1327.03,737.191 1327.59,749.781 1328.15,757.437 1328.71,735.94 1329.27,719.604 1329.83,732.608 1330.39,713.347 1330.95,741.056 1331.51,723.984 1332.07,720.309 1332.63,738.293 1333.19,750.624 1333.75,717.494 1334.3,715.302 1334.86,730.845 1335.42,728.369 1335.98,732.427 1336.54,726.067 1337.1,739.303 1337.66,720.84 1338.22,734.081 1338.78,732.612 1339.34,727.76 1339.9,741.815 1340.46,708.291 1341.02,707.744 1341.57,704.831 1342.13,716.465 1342.69,714.563 1343.25,693.668 1343.81,773.637 1344.37,752.434 1344.93,748.544 1345.49,762.19 1346.05,745.175 1346.61,741.551 1347.17,723.112 1347.73,724.027 1348.29,675.576 1348.84,675.234 1349.4,611.584 1349.96,612.328 1350.52,601.3 1351.08,603.168 1351.64,624.021 1352.2,642.571 1352.76,660.362 1353.32,661.33 1353.88,661.435 1354.44,662.994 1355,665.361 1355.56,632.788 1356.12,619.881 1356.67,625.379 1357.23,629.509 1357.79,614.834 1358.35,619.429 1358.91,621.185 1359.47,625.049 1360.03,630.967 1360.59,652.228 1361.15,654.241 1361.71,657.449 1362.27,675.054 1362.83,675.033 1363.39,656.625 1363.94,676.466 1364.5,644.896 1365.06,661.926 1365.62,650.317 1366.18,651.98 1366.74,636.73 1367.3,644.985 1367.86,665.215 1368.42,652.899 1368.98,672.73 1369.54,659.943 1370.1,628.879 1370.66,616.708 1371.21,619.443 1371.77,620.834 1372.33,641.332 1372.89,611.198 1373.45,663.373 1374.01,645.83 1374.57,695.951 1375.13,679.69 1375.69,696.92 1376.25,710.676 1376.81,741.903 1377.37,722.26 1377.93,705.175 1378.49,718.968 1379.04,717.557 1379.6,714.118 1380.16,724.865 1380.72,739.793 1381.28,737.253 1381.84,733.366 1382.4,764.559 1382.96,744.984 1383.52,739.65 1384.08,719.25 1384.64,744.937 1385.2,759.658 1385.76,757.184 1386.31,737.702 1386.87,765.932 1387.43,762.741 1387.99,740.981 1388.55,721.776 1389.11,798.88 1389.67,791.706 1390.23,785.886 1390.79,781.678 1391.35,777.52 1391.91,757.729 1392.47,752.11 1393.03,779.427 1393.58,774.674 1394.14,770.194 1394.7,749.361 1395.26,791.84 1395.82,788.23 1396.38,799.444 1396.94,824.042 1397.5,784.149 1398.06,780.875 1398.62,779.448 1399.18,776.806 1399.74,800.401 1400.3,777.231 1400.86,756.318 1401.41,757.23 1401.97,771.978 1402.53,747.362 1403.09,776.799 1403.65,757.201 1404.21,702.385 1404.77,702.563 1405.33,735.588 1405.89,734.813 1406.45,751.8 1407.01,732.663 1407.57,731.475 1408.13,712.79 1408.68,708.969 1409.24,768.649 1409.8,748.476 1410.36,761.527 1410.92,776.772 1411.48,776.95 1412.04,760.031 1412.6,757.173 1413.16,740.933 1413.72,706.828 1414.28,703.584 1414.84,718.137 1415.4,718.039 1415.95,666.208 1416.51,696.531 1417.07,710.876 1417.63,674.458 1418.19,642.719 1418.75,661.658 1419.31,644.724 1419.87,647.378 1420.43,618.424 1420.99,622.563 1421.55,592.991 1422.11,564.135 1422.67,585.037 1423.23,538.656 1423.78,545.399 1424.34,566.614 1424.9,569.327 1425.46,560.074 1426.02,586.016 1426.58,574.386 1427.14,543.611 1427.7,562.959 1428.26,534.198 1428.82,577.777 1429.38,597.35 1429.94,633.885 1430.5,652.722 1431.05,653.454 1431.61,608.043 1432.17,613.381 1432.73,584.685 1433.29,603.982 1433.85,673.033 1434.41,640.608 1434.97,609.726 1435.53,613.714 1436.09,617.608 1436.65,650.818 1437.21,669.489 1437.77,652.375 1438.33,672.507 1438.88,643.493 1439.44,642.013 1440,643.446 1440.56,675.8 1441.12,674.593 1441.68,675.116 1442.24,644.568 1442.8,608.229 1443.36,612.98 1443.92,616.527 1444.48,620.915 1445.04,626.11 1445.6,629.374 1446.15,617.045 1446.71,586.996 1447.27,528.203 1447.83,581.333 1448.39,589.107 1448.95,595.704 1449.51,621.803 1450.07,639.954 1450.63,660.914 1451.19,644.707 1451.75,666.619 1452.31,649.253 1452.87,653.218 1453.42,639.807 1453.98,687.813 1454.54,690.963 1455.1,754.208 1455.66,752.017 1456.22,747.667 1456.78,758.54 1457.34,736.502 1457.9,762.399 1458.46,742.049 1459.02,742.081 1459.58,770.654 1460.14,734.311 1460.7,767.663 1461.25,747.356 1461.81,746.689 1462.37,740.479 1462.93,752.32 1463.49,764.154 1464.05,780.173 1464.61,789.115 1465.17,779.702 1465.73,777.349 1466.29,823.326 1466.85,803.568 1467.41,811.107 1467.97,788.843 1468.52,813.091 1469.08,769.706 1469.64,765.414 1470.2,718.193 1470.76,719.585 1471.32,732.715 1471.88,729.88 1472.44,712.273 1473,707.31 1473.56,691.094 1474.12,691.248 1474.68,659.554 1475.24,643.332 1475.79,663.136 1476.35,662.992 1476.91,666.851 1477.47,651.864 1478.03,672.016 1478.59,636.948 1479.15,619.481 1479.71,637.287 1480.27,655.331 1480.83,705.407 1481.39,707.006 1481.95,710.327 1482.51,676.35 1483.07,711.158 1483.62,691.658 1484.18,694.085 1484.74,675.181 1485.3,641.65 1485.86,627.181 1486.42,626.587 1486.98,631.26 1487.54,614.668 1488.1,638.306 1488.66,641.932 1489.22,646.531 1489.78,682.111 1490.34,683.765 1490.89,635.595 1491.45,604.987 1492.01,625.374 1492.57,629.057 1493.13,647.623 1493.69,680.479 1494.25,663.207 1494.81,650.815 1495.37,622.242 1495.93,611.358 1496.49,599.008 1497.05,618.596 1497.61,637.53 1498.16,640.69 1498.72,623.052 1499.28,627.367 1499.84,647.838 1500.4,652.751 1500.96,673.12 1501.52,675.233 1502.08,658.142 1502.64,658.772 1503.2,644.813 1503.76,664.555 1504.32,681.646 1504.88,685.075 1505.44,684.316 1505.99,683.529 1506.55,700.571 1507.11,716.288 1507.67,715.446 1508.23,696.674 1508.79,711.55 1509.35,709.923 1509.91,726.138 1510.47,724.471 1511.03,755.845 1511.59,753.1 1512.15,750.507 1512.71,731.482 1513.26,744.261 1513.82,708.662 1514.38,725.704 1514.94,755.907 1515.5,731.299 1516.06,698.878 1516.62,667.641 1517.18,683.117 1517.74,696.074 1518.3,712.102 1518.86,727.375 1519.42,723.854 1519.98,704.027 1520.53,722.242 1521.09,707.667 1521.65,672.414 1522.21,689.428 1522.77,671.566 1523.33,671.966 1523.89,672.336 1524.45,753.993 1525.01,782.819 1525.57,811.872 1526.13,804.669 1526.69,797.273 1527.25,758.137 1527.81,768.273 1528.36,744.418 1528.92,740.641 1529.48,719.467 1530.04,683.769 1530.6,653.242 1531.16,620.564 1531.72,659.607 1532.28,676.96 1532.84,693.306 1533.4,707.975 1533.96,705.961 1534.52,725.756 1535.08,673.535 1535.63,736.835 1536.19,731.813 1536.75,729.899 1537.31,728.488 1537.87,740.844 1538.43,733.337 1538.99,698.298 1539.55,711.063 1540.11,726.033 1540.67,756.662 1541.23,721.62 1541.79,741.117 1542.35,736.435 1542.9,731.435 1543.46,759.187 1544.02,756.449 1544.58,737.738 1545.14,734.173 1545.7,729.59 1546.26,742.464 1546.82,690.232 1547.38,672.703 1547.94,638.233 1548.5,622.68 1549.06,660.966 1549.62,643.703 1550.18,649.21 1550.73,633.788 1551.29,620.218 1551.85,640.46 1552.41,654.069 1552.97,639.942 1553.53,645.846 1554.09,598.113 1554.65,603.232 1555.21,622.89 1555.77,594.175 1556.33,646.164 1556.89,630.594 1557.45,631.993 1558,669.784 1558.56,705.803 1559.12,703.296 1559.68,700.406 1560.24,699.655 1560.8,680.823 1561.36,710.776 1561.92,709.629 1562.48,642.222 1563.04,646.01 1563.6,649.528 1564.16,651.282 1564.72,683.948 1565.28,687.178 1565.83,670.946 1566.39,692.423 1566.95,672.553 1567.51,687.506 1568.07,671.999 1568.63,657.764 1569.19,660.174 1569.75,664.094 1570.31,670.056 1570.87,682.123 1571.43,664.956 1571.99,684.797 1572.55,687.97 1573.1,669.533 1573.66,697.914 1574.22,697.096 1574.78,695.654 1575.34,677.244 1575.9,709.474 1576.46,705.836 1577.02,687.86 1577.58,688.401 1578.14,688.378 1578.7,639.957 1579.26,626.257 1579.82,612.873 1580.37,600.855 1580.93,619.974 1581.49,624.035 1582.05,624.521 1582.61,647.872 1583.17,667.804 1583.73,652.548 1584.29,654.787 1584.85,702.479 1585.41,702.753 1585.97,720.648 1586.53,718.738 1587.09,686.767 1587.65,639.61 1588.2,659.585 1588.76,657.069 1589.32,639.603 1589.88,658.78 1590.44,658.11 1591,629.801 1591.56,583.426 1592.12,603.44 1592.68,639.653 1593.24,644.423 1593.8,680.273 1594.36,680.181 1594.92,648.714 1595.47,665.123 1596.03,666.018 1596.59,667.93 1597.15,683.542 1597.71,670.384 1598.27,655.08 1598.83,676.139 1599.39,662.165 1599.95,678.201 1600.51,681.593 1601.07,699.234 1601.63,696.634 1602.19,718.877 1602.74,703.733 1603.3,700.341 1603.86,698.462 1604.42,714.21 1604.98,731.387 1605.54,748.071 1606.1,763.327 1606.66,791.964 1607.22,803.659 1607.78,779.584 1608.34,791.548 1608.9,801.797 1609.46,794.512 1610.02,792.251 1610.57,757.857 1611.13,772.021 1611.69,737.942 1612.25,750.908 1612.81,718.399 1613.37,701.606 1613.93,700.638 1614.49,698.629 1615.05,679.51 1615.61,678.873 1616.17,665.921 1616.73,682.869 1617.29,670.458 1617.84,677.776 1618.4,678.554 1618.96,663.641 1619.52,666.258 1620.08,618.761 1620.64,624.349 1621.2,612.153 1621.76,612.584 1622.32,599 1622.88,635.657 1623.44,667.712 1624,682.21 1624.56,650.367 1625.11,655.432 1625.67,656.354 1626.23,660.326 1626.79,677.923 1627.35,677.176 1627.91,649.25 1628.47,666.381 1629.03,666.072 1629.59,669.93 1630.15,657.147 1630.71,706.053 1631.27,706.21 1631.83,718.868 1632.39,698.676 1632.94,666.647 1633.5,666.069 1634.06,633.569 1634.62,634.993 1635.18,686.47 1635.74,688.493 1636.3,690.372 1636.86,736.162 1637.42,734.645 1637.98,731.651 1638.54,728.435 1639.1,743.88 1639.66,724.797 1640.21,734.846 1640.77,701.282 1641.33,700.939 1641.89,699.16 1642.45,698.596 1643.01,715.138 1643.57,714.419 1644.13,712.02 1644.69,696.138 1645.25,678.448 1645.81,663.336 1646.37,648.182 1646.93,646.153 1647.48,628.981 1648.04,630.9 1648.6,632.838 1649.16,669.232 1649.72,651.861 1650.28,654.866 1650.84,638.556 1651.4,655.687 1651.96,671.623 1652.52,687.812 1653.08,703.839 1653.64,749.614 1654.2,760.616 1654.76,757.449 1655.31,705.466 1655.87,734.747 1656.43,713.088 1656.99,712.08 1657.55,695.385 1658.11,695.5 1658.67,664.463 1659.23,652.549 1659.79,635.913 1660.35,639.522 1660.91,642.674 1661.47,629.2 1662.03,643.873 1662.58,644.767 1663.14,646.066 1663.7,631.774 1664.26,651.286 1664.82,651.75 1665.38,617.713 1665.94,620.089 1666.5,636.791 1667.06,591.18 1667.62,596.973 1668.18,571.403 1668.74,593.005 1669.3,611.88 1669.85,601.212 1670.41,588.778 1670.97,609.64 1671.53,579.916 1672.09,601.025 1672.65,573.63 1673.21,592.002 1673.77,579.413 1674.33,601.614 1674.89,606.528 1675.45,614.115 1676.01,620.138 1676.57,592.993 1677.13,580.1 1677.68,569.227 1678.24,555.606 1678.8,591.825 1679.36,599.63 1679.92,618.926 1680.48,654.809 1681.04,624.847 1681.6,629.211 1682.16,617.812 1682.72,619.54 1683.28,624.995 1683.84,645.296 1684.4,599.504 1684.95,588.337 1685.51,594.997 1686.07,602.753 1686.63,576.404 1687.19,595.627 1687.75,600.24 1688.31,624.732 1688.87,644.852 1689.43,645.608 1689.99,677.008 1690.55,678.829 1691.11,649.436 1691.67,668.507 1692.23,634.573 1692.78,640.22 1693.34,659.184 1693.9,660.22 1694.46,662.155 1695.02,631.636 1695.58,569.578 1696.14,571.026 1696.7,559.96 1697.26,633.869 1697.82,639.215 1698.38,660.673 1698.94,630.316 1699.5,632.687 1700.05,619.389 1700.61,605.445 1701.17,612.04 1701.73,616.82 1702.29,641.58 1702.85,679.421 1703.41,696.8 1703.97,726.084 1704.53,741.656 1705.09,767.299 1705.65,766.757 1706.21,779.885 1706.77,797.245 1707.32,790.148 1707.88,787.951 1708.44,778.11 1709,788.728 1709.56,784.005 1710.12,794.876 1710.68,818.553 1711.24,840.841 1711.8,819.971 1712.36,812.984 1712.92,757.266 1713.48,783.471 1714.04,791.166 1714.6,821.104 1715.15,816.381 1715.71,793.565 1716.27,817.347 1716.83,838.586 1717.39,830.905 1717.95,871.014 1718.51,857.883 1719.07,862.663 1719.63,820.572 1720.19,824.592 1720.75,805.715 1721.31,815.34 1721.87,806.943 1722.42,801.915 1722.98,796.34 1723.54,758.203 1724.1,772.169 1724.66,752.03 1725.22,719.017 1725.78,715.643 1726.34,713.954 1726.9,663.091 1727.46,666.098 1728.02,652.145 1728.58,651.538 1729.14,637.708 1729.69,675.329 1730.25,676.971 1730.81,693.193 1731.37,692.631 1731.93,703.445 1732.49,715.284 1733.05,746.155 1733.61,691.337 1734.17,691.853 1734.73,694.11 1735.29,695.842 1735.85,700.825 1736.41,699.495 1736.97,678.68 1737.52,660.102 1738.08,644.315 1738.64,612.055 1739.2,583.639 1739.76,602.287 1740.32,621.763 1740.88,620.747 1741.44,622.725 1742,662.935 1742.56,663.344 1743.12,665.705 1743.68,667.314 1744.24,665.359 1744.79,684.944 1745.35,671.022 1745.91,701.156 1746.47,698.39 1747.03,699.11 1747.59,717.713 1748.15,701.475 1748.71,670.484 1749.27,650.193 1749.83,637.178 1750.39,621.66 1750.95,575.431 1751.51,564.769 1752.06,570.697 1752.62,593.385 1753.18,613.996 1753.74,603.962 1754.3,624.505 1754.86,627.066 1755.42,647.474 1755.98,666.067 1756.54,667.662 1757.1,654.029 1757.66,684.605 1758.22,695.808 1758.78,712.87 1759.34,775.138 1759.89,804.294 1760.45,812.217 1761.01,835.801 1761.57,809.476 1762.13,835.797 1762.69,843.904 1763.25,836.156 1763.81,813.019 1764.37,778.171 1764.93,741.121 1765.49,735.23 1766.05,716.714 1766.61,715.065 1767.16,745.188 1767.72,757.809 1768.28,737.454 1768.84,702.098 1769.4,666.485 1769.96,651.338 1770.52,669.546 1771.08,687.046 1771.64,719.174 1772.2,703.565 1772.76,685.458 1773.32,682.629 1773.88,698.468 1774.43,665.819 1774.99,667.406 1775.55,668.462 1776.11,683.296 1776.67,699.784 1777.23,681.734 1777.79,712.094 1778.35,709.992 1778.91,679.62 1779.47,697.085 1780.03,727.137 1780.59,772.145 1781.15,783.794 1781.71,790.772 1782.26,786.72 1782.82,780.586 1783.38,778.602 1783.94,824.425 1784.5,754.69 1785.06,771.505 1785.62,770.577 1786.18,767.027 1786.74,728.513 1787.3,711.172 1787.86,692.58 1788.42,712.136 1788.98,711.095 1789.53,710.486 1790.09,714.047 1790.65,745.148 1791.21,741.105 1791.77,736.436 1792.33,684.043 1792.89,650.014 1793.45,681.363 1794.01,669.252 1794.57,655.479 1795.13,643.121 1795.69,642.751 1796.25,659.125 1796.8,693.923 1797.36,696.477 1797.92,708.709 1798.48,690.014 1799.04,688.658 1799.6,674.436 1800.16,673.858 1800.72,655.747 1801.28,639.157 1801.84,675.52 1802.4,658.078 1802.96,643.903 1803.52,614.02 1804.08,616.798 1804.63,669.539 1805.19,637.001 1805.75,621.276 1806.31,628.059 1806.87,647.622 1807.43,600.216 1807.99,635.217 1808.55,618.413 1809.11,588.761 1809.67,594.457 1810.23,565.283 1810.79,589.341 1811.35,578.118 1811.9,581.678 1812.46,588.401 1813.02,643.998 1813.58,630.279 1814.14,633.782 1814.7,652.101 1815.26,640.01 1815.82,660.651 1816.38,661.949 1816.94,657.38 1817.5,675.979 1818.06,694.715 1818.62,708.023 1819.18,692.753 1819.73,672.693 1820.29,655.481 1820.85,673.906 1821.41,655.302 1821.97,689.235 1822.53,690.169 1823.09,707.352 1823.65,753.553 1824.21,736.467 1824.77,718.662 1825.33,734.131 1825.89,699.371 1826.45,682.647 1827,701.458 1827.56,669.822 1828.12,668.815 1828.68,669.242 1829.24,654.416 1829.8,639.524 1830.36,645.706 1830.92,649.266 1831.48,635.327 1832.04,654.851 1832.6,656.413 1833.16,625.296 1833.72,627.792 1834.27,629.825 1834.83,665.314 1835.39,685.068 1835.95,684.508 1836.51,732.512 1837.07,728.356 1837.63,739.605 1838.19,737.291 \"/>\n<path clip-path=\"url(#clip243)\" d=\"M720.247 692.609 L720.806 692.609 L721.365 692.609 L721.924 692.609 L722.484 692.609 L723.043 692.609 L723.602 692.609 L724.161 692.609 L724.721 692.609 L725.28 692.609 L725.839 692.609 L726.398 692.609 L726.958 692.609 L727.517 692.609 L728.076 692.609 L728.635 692.609 L729.195 692.609 L729.754 692.609 L730.313 692.609 L730.872 692.609 L731.432 692.609 L731.991 692.609 L732.55 692.609 L733.109 692.609 L733.669 692.609 L734.228 692.609 L734.787 692.609 L735.346 692.609 L735.906 692.609 L736.465 692.609 L737.024 692.609 L737.583 692.609 L738.143 692.609 L738.702 692.609 L739.261 692.609 L739.82 692.609 L740.38 692.609 L740.939 692.609 L741.498 692.609 L742.057 692.609 L742.617 692.609 L743.176 692.609 L743.735 692.609 L744.294 692.609 L744.854 692.609 L745.413 692.609 L745.972 692.609 L746.531 692.609 L747.091 692.609 L747.65 692.609 L748.209 692.609 L748.768 692.609 L749.328 692.609 L749.887 692.609 L750.446 692.609 L751.005 692.609 L751.565 692.609 L752.124 692.609 L752.683 692.609 L753.242 692.609 L753.802 692.609 L754.361 692.609 L754.92 692.609 L755.479 692.609 L756.039 692.609 L756.598 692.609 L757.157 692.609 L757.716 692.609 L758.276 692.609 L758.835 692.609 L759.394 692.609 L759.953 692.609 L760.513 692.609 L761.072 692.609 L761.631 692.609 L762.19 692.609 L762.75 692.609 L763.309 692.609 L763.868 692.609 L764.427 692.609 L764.987 692.609 L765.546 692.609 L766.105 692.609 L766.664 692.609 L767.224 692.609 L767.783 692.609 L768.342 692.609 L768.901 692.609 L769.461 692.609 L770.02 692.609 L770.579 692.609 L771.138 692.609 L771.698 692.609 L772.257 692.609 L772.816 692.609 L773.375 692.609 L773.935 692.609 L774.494 692.609 L775.053 692.609 L775.612 692.609 L776.172 692.609 L776.731 692.609 L777.29 692.609 L777.849 692.609 L778.409 692.609 L778.968 692.609 L779.527 692.609 L780.086 692.609 L780.646 692.609 L781.205 692.609 L781.764 692.609 L782.323 692.609 L782.883 692.609 L783.442 692.609 L784.001 692.609 L784.56 692.609 L785.12 692.609 L785.679 692.609 L786.238 692.609 L786.797 692.609 L787.357 692.609 L787.916 692.609 L788.475 692.609 L789.034 692.609 L789.594 692.609 L790.153 692.609 L790.712 692.609 L791.271 692.609 L791.831 692.609 L792.39 692.609 L792.949 692.609 L793.508 692.609 L794.068 692.609 L794.627 692.609 L795.186 692.609 L795.745 692.609 L796.305 692.609 L796.864 692.609 L797.423 692.609 L797.982 692.609 L798.542 692.609 L799.101 692.609 L799.66 692.609 L800.219 692.609 L800.779 692.609 L801.338 692.609 L801.897 692.609 L802.456 692.609 L803.016 692.609 L803.575 692.609 L804.134 692.609 L804.693 692.609 L805.253 692.609 L805.812 692.609 L806.371 692.609 L806.931 692.609 L807.49 692.609 L808.049 692.609 L808.608 692.609 L809.168 692.609 L809.727 692.609 L810.286 692.609 L810.845 692.609 L811.405 692.609 L811.964 692.609 L812.523 692.609 L813.082 692.609 L813.642 692.609 L814.201 692.609 L814.76 692.609 L815.319 692.609 L815.879 692.609 L816.438 692.609 L816.997 692.609 L817.556 692.609 L818.116 692.609 L818.675 692.609 L819.234 692.609 L819.793 692.609 L820.353 692.609 L820.912 692.609 L821.471 692.609 L822.03 692.609 L822.59 692.609 L823.149 692.609 L823.708 692.609 L824.267 692.609 L824.827 692.609 L825.386 692.609 L825.945 692.609 L826.504 692.609 L827.064 692.609 L827.623 692.609 L828.182 692.609 L828.741 692.609 L829.301 692.609 L829.86 692.609 L830.419 692.609 L830.978 692.609 L831.538 692.609 L832.097 692.609 L832.656 692.609 L833.215 692.609 L833.775 692.609 L834.334 692.609 L834.893 692.609 L835.452 692.609 L836.012 692.609 L836.571 692.609 L837.13 692.609 L837.689 692.609 L838.249 692.609 L838.808 692.609 L839.367 692.609 L839.926 692.609 L840.486 692.609 L841.045 692.609 L841.604 692.609 L842.163 692.609 L842.723 692.609 L843.282 692.609 L843.841 692.609 L844.4 692.609 L844.96 692.609 L845.519 692.609 L846.078 692.609 L846.637 692.609 L847.197 692.609 L847.756 692.609 L848.315 692.609 L848.874 692.609 L849.434 692.609 L849.993 692.609 L850.552 692.609 L851.111 692.609 L851.671 692.609 L852.23 692.609 L852.789 692.609 L853.348 692.609 L853.908 692.609 L854.467 692.609 L855.026 692.609 L855.585 692.609 L856.145 692.609 L856.704 692.609 L857.263 692.609 L857.822 692.609 L858.382 692.609 L858.941 692.609 L859.5 692.609 L860.059 692.609 L860.619 692.609 L861.178 692.609 L861.737 692.609 L862.296 692.609 L862.856 692.609 L863.415 692.609 L863.974 692.609 L864.533 692.609 L865.093 692.609 L865.652 692.609 L866.211 692.609 L866.77 692.609 L867.33 692.609 L867.889 692.609 L868.448 692.609 L869.007 692.609 L869.567 692.609 L870.126 692.609 L870.685 692.609 L871.244 692.609 L871.804 692.609 L872.363 692.609 L872.922 692.609 L873.481 692.609 L874.041 692.609 L874.6 692.609 L875.159 692.609 L875.718 692.609 L876.278 692.609 L876.837 692.609 L877.396 692.609 L877.955 692.609 L878.515 692.609 L879.074 692.609 L879.633 692.609 L880.192 692.609 L880.752 692.609 L881.311 692.609 L881.87 692.609 L882.429 692.609 L882.989 692.609 L883.548 692.609 L884.107 692.609 L884.666 692.609 L885.226 692.609 L885.785 692.609 L886.344 692.609 L886.903 692.609 L887.463 692.609 L888.022 692.609 L888.581 692.609 L889.14 692.609 L889.7 692.609 L890.259 692.609 L890.818 692.609 L891.377 692.609 L891.937 692.609 L892.496 692.609 L893.055 692.609 L893.614 692.609 L894.174 692.609 L894.733 692.609 L895.292 692.609 L895.851 692.609 L896.411 692.609 L896.97 692.609 L897.529 692.609 L898.088 692.609 L898.648 692.609 L899.207 692.609 L899.766 692.609 L900.325 692.609 L900.885 692.609 L901.444 692.609 L902.003 692.609 L902.562 692.609 L903.122 692.609 L903.681 692.609 L904.24 692.609 L904.799 692.609 L905.359 692.609 L905.918 692.609 L906.477 692.609 L907.036 692.609 L907.596 692.609 L908.155 692.609 L908.714 692.609 L909.273 692.609 L909.833 692.609 L910.392 692.609 L910.951 692.609 L911.51 692.609 L912.07 692.609 L912.629 692.609 L913.188 692.609 L913.747 692.609 L914.307 692.609 L914.866 692.609 L915.425 692.609 L915.984 692.609 L916.544 692.609 L917.103 692.609 L917.662 692.609 L918.221 692.609 L918.781 692.609 L919.34 692.609 L919.899 692.609 L920.458 692.609 L921.018 692.609 L921.577 692.609 L922.136 692.609 L922.695 692.609 L923.255 692.609 L923.814 692.609 L924.373 692.609 L924.932 692.609 L925.492 692.609 L926.051 692.609 L926.61 692.609 L927.169 692.609 L927.729 692.609 L928.288 692.609 L928.847 692.609 L929.406 692.609 L929.966 692.609 L930.525 692.609 L931.084 692.609 L931.644 692.609 L932.203 692.609 L932.762 692.609 L933.321 692.609 L933.881 692.609 L934.44 692.609 L934.999 692.609 L935.558 692.609 L936.118 692.609 L936.677 692.609 L937.236 692.609 L937.795 692.609 L938.355 692.609 L938.914 692.609 L939.473 692.609 L940.032 692.609 L940.592 692.609 L941.151 692.609 L941.71 692.609 L942.269 692.609 L942.829 692.609 L943.388 692.609 L943.947 692.609 L944.506 692.609 L945.066 692.609 L945.625 692.609 L946.184 692.609 L946.743 692.609 L947.303 692.609 L947.862 692.609 L948.421 692.609 L948.98 692.609 L949.54 692.609 L950.099 692.609 L950.658 692.609 L951.217 692.609 L951.777 692.609 L952.336 692.609 L952.895 692.609 L953.454 692.609 L954.014 692.609 L954.573 692.609 L955.132 692.609 L955.691 692.609 L956.251 692.609 L956.81 692.609 L957.369 692.609 L957.928 692.609 L958.488 692.609 L959.047 692.609 L959.606 692.609 L960.165 692.609 L960.725 692.609 L961.284 692.609 L961.843 692.609 L962.402 692.609 L962.962 692.609 L963.521 692.609 L964.08 692.609 L964.639 692.609 L965.199 692.609 L965.758 692.609 L966.317 692.609 L966.876 692.609 L967.436 692.609 L967.995 692.609 L968.554 692.609 L969.113 692.609 L969.673 692.609 L970.232 692.609 L970.791 692.609 L971.35 692.609 L971.91 692.609 L972.469 692.609 L973.028 692.609 L973.587 692.609 L974.147 692.609 L974.706 692.609 L975.265 692.609 L975.824 692.609 L976.384 692.609 L976.943 692.609 L977.502 692.609 L978.061 692.609 L978.621 692.609 L979.18 692.609 L979.739 692.609 L980.298 692.609 L980.858 692.609 L981.417 692.609 L981.976 692.609 L982.535 692.609 L983.095 692.609 L983.654 692.609 L984.213 692.609 L984.772 692.609 L985.332 692.609 L985.891 692.609 L986.45 692.609 L987.009 692.609 L987.569 692.609 L988.128 692.609 L988.687 692.609 L989.246 692.609 L989.806 692.609 L990.365 692.609 L990.924 692.609 L991.483 692.609 L992.043 692.609 L992.602 692.609 L993.161 692.609 L993.72 692.609 L994.28 692.609 L994.839 692.609 L995.398 692.609 L995.957 692.609 L996.517 692.609 L997.076 692.609 L997.635 692.609 L998.194 692.609 L998.754 692.609 L999.313 692.609 L999.872 692.609 L1000.43 692.609 L1000.99 692.609 L1001.55 692.609 L1002.11 692.609 L1002.67 692.609 L1003.23 692.609 L1003.79 692.609 L1004.35 692.609 L1004.91 692.609 L1005.46 692.609 L1006.02 692.609 L1006.58 692.609 L1007.14 692.609 L1007.7 692.609 L1008.26 692.609 L1008.82 692.609 L1009.38 692.609 L1009.94 692.609 L1010.5 692.609 L1011.06 692.609 L1011.62 692.609 L1012.18 692.609 L1012.73 692.609 L1013.29 692.609 L1013.85 692.609 L1014.41 692.609 L1014.97 692.609 L1015.53 692.609 L1016.09 692.609 L1016.65 692.609 L1017.21 692.609 L1017.77 692.609 L1018.33 692.609 L1018.89 692.609 L1019.45 692.609 L1020.01 692.609 L1020.56 692.609 L1021.12 692.609 L1021.68 692.609 L1022.24 692.609 L1022.8 692.609 L1023.36 692.609 L1023.92 692.609 L1024.48 692.609 L1025.04 692.609 L1025.6 692.609 L1026.16 692.609 L1026.72 692.609 L1027.28 692.609 L1027.83 692.609 L1028.39 692.609 L1028.95 692.609 L1029.51 692.609 L1030.07 692.609 L1030.63 692.609 L1031.19 692.609 L1031.75 692.609 L1032.31 692.609 L1032.87 692.609 L1033.43 692.609 L1033.99 692.609 L1034.55 692.609 L1035.1 692.609 L1035.66 692.609 L1036.22 692.609 L1036.78 692.609 L1037.34 692.609 L1037.9 692.609 L1038.46 692.609 L1039.02 692.609 L1039.58 692.609 L1040.14 692.609 L1040.7 692.609 L1041.26 692.609 L1041.82 692.609 L1042.38 692.609 L1042.93 692.609 L1043.49 692.609 L1044.05 692.609 L1044.61 692.609 L1045.17 692.609 L1045.73 692.609 L1046.29 692.609 L1046.85 692.609 L1047.41 692.609 L1047.97 692.609 L1048.53 692.609 L1049.09 692.609 L1049.65 692.609 L1050.2 692.609 L1050.76 692.609 L1051.32 692.609 L1051.88 692.609 L1052.44 692.609 L1053 692.609 L1053.56 692.609 L1054.12 692.609 L1054.68 692.609 L1055.24 692.609 L1055.8 692.609 L1056.36 692.609 L1056.92 692.609 L1057.48 692.609 L1058.03 692.609 L1058.59 692.609 L1059.15 692.609 L1059.71 692.609 L1060.27 692.609 L1060.83 692.609 L1061.39 692.609 L1061.95 692.609 L1062.51 692.609 L1063.07 692.609 L1063.63 692.609 L1064.19 692.609 L1064.75 692.609 L1065.3 692.609 L1065.86 692.609 L1066.42 692.609 L1066.98 692.609 L1067.54 692.609 L1068.1 692.609 L1068.66 692.609 L1069.22 692.609 L1069.78 692.609 L1070.34 692.609 L1070.9 692.609 L1071.46 692.609 L1072.02 692.609 L1072.57 692.609 L1073.13 692.609 L1073.69 692.609 L1074.25 692.609 L1074.81 692.609 L1075.37 692.609 L1075.93 692.609 L1076.49 692.609 L1077.05 692.609 L1077.61 692.609 L1078.17 692.609 L1078.73 692.609 L1079.29 692.609 L1079.85 692.609 L1080.4 692.609 L1080.96 692.609 L1081.52 692.609 L1082.08 692.609 L1082.64 692.609 L1083.2 692.609 L1083.76 692.609 L1084.32 692.609 L1084.88 692.609 L1085.44 692.609 L1086 692.609 L1086.56 692.609 L1087.12 692.609 L1087.67 692.609 L1088.23 692.609 L1088.79 692.609 L1089.35 692.609 L1089.91 692.609 L1090.47 692.609 L1091.03 692.609 L1091.59 692.609 L1092.15 692.609 L1092.71 692.609 L1093.27 692.609 L1093.83 692.609 L1094.39 692.609 L1094.94 692.609 L1095.5 692.609 L1096.06 692.609 L1096.62 692.609 L1097.18 692.609 L1097.74 692.609 L1098.3 692.609 L1098.86 692.609 L1099.42 692.609 L1099.98 692.609 L1100.54 692.609 L1101.1 692.609 L1101.66 692.609 L1102.22 692.609 L1102.77 692.609 L1103.33 692.609 L1103.89 692.609 L1104.45 692.609 L1105.01 692.609 L1105.57 692.609 L1106.13 692.609 L1106.69 692.609 L1107.25 692.609 L1107.81 692.609 L1108.37 692.609 L1108.93 692.609 L1109.49 692.609 L1110.04 692.609 L1110.6 692.609 L1111.16 692.609 L1111.72 692.609 L1112.28 692.609 L1112.84 692.609 L1113.4 692.609 L1113.96 692.609 L1114.52 692.609 L1115.08 692.609 L1115.64 692.609 L1116.2 692.609 L1116.76 692.609 L1117.31 692.609 L1117.87 692.609 L1118.43 692.609 L1118.99 692.609 L1119.55 692.609 L1120.11 692.609 L1120.67 692.609 L1121.23 692.609 L1121.79 692.609 L1122.35 692.609 L1122.91 692.609 L1123.47 692.609 L1124.03 692.609 L1124.59 692.609 L1125.14 692.609 L1125.7 692.609 L1126.26 692.609 L1126.82 692.609 L1127.38 692.609 L1127.94 692.609 L1128.5 692.609 L1129.06 692.609 L1129.62 692.609 L1130.18 692.609 L1130.74 692.609 L1131.3 692.609 L1131.86 692.609 L1132.41 692.609 L1132.97 692.609 L1133.53 692.609 L1134.09 692.609 L1134.65 692.609 L1135.21 692.609 L1135.77 692.609 L1136.33 692.609 L1136.89 692.609 L1137.45 692.609 L1138.01 692.609 L1138.57 692.609 L1139.13 692.609 L1139.68 692.609 L1140.24 692.609 L1140.8 692.609 L1141.36 692.609 L1141.92 692.609 L1142.48 692.609 L1143.04 692.609 L1143.6 692.609 L1144.16 692.609 L1144.72 692.609 L1145.28 692.609 L1145.84 692.609 L1146.4 692.609 L1146.96 692.609 L1147.51 692.609 L1148.07 692.609 L1148.63 692.609 L1149.19 692.609 L1149.75 692.609 L1150.31 692.609 L1150.87 692.609 L1151.43 692.609 L1151.99 692.609 L1152.55 692.609 L1153.11 692.609 L1153.67 692.609 L1154.23 692.609 L1154.78 692.609 L1155.34 692.609 L1155.9 692.609 L1156.46 692.609 L1157.02 692.609 L1157.58 692.609 L1158.14 692.609 L1158.7 692.609 L1159.26 692.609 L1159.82 692.609 L1160.38 692.609 L1160.94 692.609 L1161.5 692.609 L1162.05 692.609 L1162.61 692.609 L1163.17 692.609 L1163.73 692.609 L1164.29 692.609 L1164.85 692.609 L1165.41 692.609 L1165.97 692.609 L1166.53 692.609 L1167.09 692.609 L1167.65 692.609 L1168.21 692.609 L1168.77 692.609 L1169.33 692.609 L1169.88 692.609 L1170.44 692.609 L1171 692.609 L1171.56 692.609 L1172.12 692.609 L1172.68 692.609 L1173.24 692.609 L1173.8 692.609 L1174.36 692.609 L1174.92 692.609 L1175.48 692.609 L1176.04 692.609 L1176.6 692.609 L1177.15 692.609 L1177.71 692.609 L1178.27 692.609 L1178.83 692.609 L1179.39 692.609 L1179.95 692.609 L1180.51 692.609 L1181.07 692.609 L1181.63 692.609 L1182.19 692.609 L1182.75 692.609 L1183.31 692.609 L1183.87 692.609 L1184.43 692.609 L1184.98 692.609 L1185.54 692.609 L1186.1 692.609 L1186.66 692.609 L1187.22 692.609 L1187.78 692.609 L1188.34 692.609 L1188.9 692.609 L1189.46 692.609 L1190.02 692.609 L1190.58 692.609 L1191.14 692.609 L1191.7 692.609 L1192.25 692.609 L1192.81 692.609 L1193.37 692.609 L1193.93 692.609 L1194.49 692.609 L1195.05 692.609 L1195.61 692.609 L1196.17 692.609 L1196.73 692.609 L1197.29 692.609 L1197.85 692.609 L1198.41 692.609 L1198.97 692.609 L1199.52 692.609 L1200.08 692.609 L1200.64 692.609 L1201.2 692.609 L1201.76 692.609 L1202.32 692.609 L1202.88 692.609 L1203.44 692.609 L1204 692.609 L1204.56 692.609 L1205.12 692.609 L1205.68 692.609 L1206.24 692.609 L1206.8 692.609 L1207.35 692.609 L1207.91 692.609 L1208.47 692.609 L1209.03 692.609 L1209.59 692.609 L1210.15 692.609 L1210.71 692.609 L1211.27 692.609 L1211.83 692.609 L1212.39 692.609 L1212.95 692.609 L1213.51 692.609 L1214.07 692.609 L1214.62 692.609 L1215.18 692.609 L1215.74 692.609 L1216.3 692.609 L1216.86 692.609 L1217.42 692.609 L1217.98 692.609 L1218.54 692.609 L1219.1 692.609 L1219.66 692.609 L1220.22 692.609 L1220.78 692.609 L1221.34 692.609 L1221.89 692.609 L1222.45 692.609 L1223.01 692.609 L1223.57 692.609 L1224.13 692.609 L1224.69 692.609 L1225.25 692.609 L1225.81 692.609 L1226.37 692.609 L1226.93 692.609 L1227.49 692.609 L1228.05 692.609 L1228.61 692.609 L1229.17 692.609 L1229.72 692.609 L1230.28 692.609 L1230.84 692.609 L1231.4 692.609 L1231.96 692.609 L1232.52 692.609 L1233.08 692.609 L1233.64 692.609 L1234.2 692.609 L1234.76 692.609 L1235.32 692.609 L1235.88 692.609 L1236.44 692.609 L1236.99 692.609 L1237.55 692.609 L1238.11 692.609 L1238.67 692.609 L1239.23 692.609 L1239.79 692.609 L1240.35 692.609 L1240.91 692.609 L1241.47 692.609 L1242.03 692.609 L1242.59 692.609 L1243.15 692.609 L1243.71 692.609 L1244.26 692.609 L1244.82 692.609 L1245.38 692.609 L1245.94 692.609 L1246.5 692.609 L1247.06 692.609 L1247.62 692.609 L1248.18 692.609 L1248.74 692.609 L1249.3 692.609 L1249.86 692.609 L1250.42 692.609 L1250.98 692.609 L1251.54 692.609 L1252.09 692.609 L1252.65 692.609 L1253.21 692.609 L1253.77 692.609 L1254.33 692.609 L1254.89 692.609 L1255.45 692.609 L1256.01 692.609 L1256.57 692.609 L1257.13 692.609 L1257.69 692.609 L1258.25 692.609 L1258.81 692.609 L1259.36 692.609 L1259.92 692.609 L1260.48 692.609 L1261.04 692.609 L1261.6 692.609 L1262.16 692.609 L1262.72 692.609 L1263.28 692.609 L1263.84 692.609 L1264.4 692.609 L1264.96 692.609 L1265.52 692.609 L1266.08 692.609 L1266.63 692.609 L1267.19 692.609 L1267.75 692.609 L1268.31 692.609 L1268.87 692.609 L1269.43 692.609 L1269.99 692.609 L1270.55 692.609 L1271.11 692.609 L1271.67 692.609 L1272.23 692.609 L1272.79 692.609 L1273.35 692.609 L1273.91 692.609 L1274.46 692.609 L1275.02 692.609 L1275.58 692.609 L1276.14 692.609 L1276.7 692.609 L1277.26 692.609 L1277.82 692.609 L1278.38 692.609 L1278.94 692.609 L1279.5 692.609 L1280.06 692.609 L1280.62 692.609 L1281.18 692.609 L1281.73 692.609 L1282.29 692.609 L1282.85 692.609 L1283.41 692.609 L1283.97 692.609 L1284.53 692.609 L1285.09 692.609 L1285.65 692.609 L1286.21 692.609 L1286.77 692.609 L1287.33 692.609 L1287.89 692.609 L1288.45 692.609 L1289 692.609 L1289.56 692.609 L1290.12 692.609 L1290.68 692.609 L1291.24 692.609 L1291.8 692.609 L1292.36 692.609 L1292.92 692.609 L1293.48 692.609 L1294.04 692.609 L1294.6 692.609 L1295.16 692.609 L1295.72 692.609 L1296.28 692.609 L1296.83 692.609 L1297.39 692.609 L1297.95 692.609 L1298.51 692.609 L1299.07 692.609 L1299.63 692.609 L1300.19 692.609 L1300.75 692.609 L1301.31 692.609 L1301.87 692.609 L1302.43 692.609 L1302.99 692.609 L1303.55 692.609 L1304.1 692.609 L1304.66 692.609 L1305.22 692.609 L1305.78 692.609 L1306.34 692.609 L1306.9 692.609 L1307.46 692.609 L1308.02 692.609 L1308.58 692.609 L1309.14 692.609 L1309.7 692.609 L1310.26 692.609 L1310.82 692.609 L1311.38 692.609 L1311.93 692.609 L1312.49 692.609 L1313.05 692.609 L1313.61 692.609 L1314.17 692.609 L1314.73 692.609 L1315.29 692.609 L1315.85 692.609 L1316.41 692.609 L1316.97 692.609 L1317.53 692.609 L1318.09 692.609 L1318.65 692.609 L1319.2 692.609 L1319.76 692.609 L1320.32 692.609 L1320.88 692.609 L1321.44 692.609 L1322 692.609 L1322.56 692.609 L1323.12 692.609 L1323.68 692.609 L1324.24 692.609 L1324.8 692.609 L1325.36 692.609 L1325.92 692.609 L1326.47 692.609 L1327.03 692.609 L1327.59 692.609 L1328.15 692.609 L1328.71 692.609 L1329.27 692.609 L1329.83 692.609 L1330.39 692.609 L1330.95 692.609 L1331.51 692.609 L1332.07 692.609 L1332.63 692.609 L1333.19 692.609 L1333.75 692.609 L1334.3 692.609 L1334.86 692.609 L1335.42 692.609 L1335.98 692.609 L1336.54 692.609 L1337.1 692.609 L1337.66 692.609 L1338.22 692.609 L1338.78 692.609 L1339.34 692.609 L1339.9 692.609 L1340.46 692.609 L1341.02 692.609 L1341.57 692.609 L1342.13 692.609 L1342.69 692.609 L1343.25 692.609 L1343.81 692.609 L1344.37 692.609 L1344.93 692.609 L1345.49 692.609 L1346.05 692.609 L1346.61 692.609 L1347.17 692.609 L1347.73 692.609 L1348.29 692.609 L1348.84 692.609 L1349.4 692.609 L1349.96 692.609 L1350.52 692.609 L1351.08 692.609 L1351.64 692.609 L1352.2 692.609 L1352.76 692.609 L1353.32 692.609 L1353.88 692.609 L1354.44 692.609 L1355 692.609 L1355.56 692.609 L1356.12 692.609 L1356.67 692.609 L1357.23 692.609 L1357.79 692.609 L1358.35 692.609 L1358.91 692.609 L1359.47 692.609 L1360.03 692.609 L1360.59 692.609 L1361.15 692.609 L1361.71 692.609 L1362.27 692.609 L1362.83 692.609 L1363.39 692.609 L1363.94 692.609 L1364.5 692.609 L1365.06 692.609 L1365.62 692.609 L1366.18 692.609 L1366.74 692.609 L1367.3 692.609 L1367.86 692.609 L1368.42 692.609 L1368.98 692.609 L1369.54 692.609 L1370.1 692.609 L1370.66 692.609 L1371.21 692.609 L1371.77 692.609 L1372.33 692.609 L1372.89 692.609 L1373.45 692.609 L1374.01 692.609 L1374.57 692.609 L1375.13 692.609 L1375.69 692.609 L1376.25 692.609 L1376.81 692.609 L1377.37 692.609 L1377.93 692.609 L1378.49 692.609 L1379.04 692.609 L1379.6 692.609 L1380.16 692.609 L1380.72 692.609 L1381.28 692.609 L1381.84 692.609 L1382.4 692.609 L1382.96 692.609 L1383.52 692.609 L1384.08 692.609 L1384.64 692.609 L1385.2 692.609 L1385.76 692.609 L1386.31 692.609 L1386.87 692.609 L1387.43 692.609 L1387.99 692.609 L1388.55 692.609 L1389.11 692.609 L1389.67 692.609 L1390.23 692.609 L1390.79 692.609 L1391.35 692.609 L1391.91 692.609 L1392.47 692.609 L1393.03 692.609 L1393.58 692.609 L1394.14 692.609 L1394.7 692.609 L1395.26 692.609 L1395.82 692.609 L1396.38 692.609 L1396.94 692.609 L1397.5 692.609 L1398.06 692.609 L1398.62 692.609 L1399.18 692.609 L1399.74 692.609 L1400.3 692.609 L1400.86 692.609 L1401.41 692.609 L1401.97 692.609 L1402.53 692.609 L1403.09 692.609 L1403.65 692.609 L1404.21 692.609 L1404.77 692.609 L1405.33 692.609 L1405.89 692.609 L1406.45 692.609 L1407.01 692.609 L1407.57 692.609 L1408.13 692.609 L1408.68 692.609 L1409.24 692.609 L1409.8 692.609 L1410.36 692.609 L1410.92 692.609 L1411.48 692.609 L1412.04 692.609 L1412.6 692.609 L1413.16 692.609 L1413.72 692.609 L1414.28 692.609 L1414.84 692.609 L1415.4 692.609 L1415.95 692.609 L1416.51 692.609 L1417.07 692.609 L1417.63 692.609 L1418.19 692.609 L1418.75 692.609 L1419.31 692.609 L1419.87 692.609 L1420.43 692.609 L1420.99 692.609 L1421.55 692.609 L1422.11 692.609 L1422.67 692.609 L1423.23 692.609 L1423.78 692.609 L1424.34 692.609 L1424.9 692.609 L1425.46 692.609 L1426.02 692.609 L1426.58 692.609 L1427.14 692.609 L1427.7 692.609 L1428.26 692.609 L1428.82 692.609 L1429.38 692.609 L1429.94 692.609 L1430.5 692.609 L1431.05 692.609 L1431.61 692.609 L1432.17 692.609 L1432.73 692.609 L1433.29 692.609 L1433.85 692.609 L1434.41 692.609 L1434.97 692.609 L1435.53 692.609 L1436.09 692.609 L1436.65 692.609 L1437.21 692.609 L1437.77 692.609 L1438.33 692.609 L1438.88 692.609 L1439.44 692.609 L1440 692.609 L1440.56 692.609 L1441.12 692.609 L1441.68 692.609 L1442.24 692.609 L1442.8 692.609 L1443.36 692.609 L1443.92 692.609 L1444.48 692.609 L1445.04 692.609 L1445.6 692.609 L1446.15 692.609 L1446.71 692.609 L1447.27 692.609 L1447.83 692.609 L1448.39 692.609 L1448.95 692.609 L1449.51 692.609 L1450.07 692.609 L1450.63 692.609 L1451.19 692.609 L1451.75 692.609 L1452.31 692.609 L1452.87 692.609 L1453.42 692.609 L1453.98 692.609 L1454.54 692.609 L1455.1 692.609 L1455.66 692.609 L1456.22 692.609 L1456.78 692.609 L1457.34 692.609 L1457.9 692.609 L1458.46 692.609 L1459.02 692.609 L1459.58 692.609 L1460.14 692.609 L1460.7 692.609 L1461.25 692.609 L1461.81 692.609 L1462.37 692.609 L1462.93 692.609 L1463.49 692.609 L1464.05 692.609 L1464.61 692.609 L1465.17 692.609 L1465.73 692.609 L1466.29 692.609 L1466.85 692.609 L1467.41 692.609 L1467.97 692.609 L1468.52 692.609 L1469.08 692.609 L1469.64 692.609 L1470.2 692.609 L1470.76 692.609 L1471.32 692.609 L1471.88 692.609 L1472.44 692.609 L1473 692.609 L1473.56 692.609 L1474.12 692.609 L1474.68 692.609 L1475.24 692.609 L1475.79 692.609 L1476.35 692.609 L1476.91 692.609 L1477.47 692.609 L1478.03 692.609 L1478.59 692.609 L1479.15 692.609 L1479.71 692.609 L1480.27 692.609 L1480.83 692.609 L1481.39 692.609 L1481.95 692.609 L1482.51 692.609 L1483.07 692.609 L1483.62 692.609 L1484.18 692.609 L1484.74 692.609 L1485.3 692.609 L1485.86 692.609 L1486.42 692.609 L1486.98 692.609 L1487.54 692.609 L1488.1 692.609 L1488.66 692.609 L1489.22 692.609 L1489.78 692.609 L1490.34 692.609 L1490.89 692.609 L1491.45 692.609 L1492.01 692.609 L1492.57 692.609 L1493.13 692.609 L1493.69 692.609 L1494.25 692.609 L1494.81 692.609 L1495.37 692.609 L1495.93 692.609 L1496.49 692.609 L1497.05 692.609 L1497.61 692.609 L1498.16 692.609 L1498.72 692.609 L1499.28 692.609 L1499.84 692.609 L1500.4 692.609 L1500.96 692.609 L1501.52 692.609 L1502.08 692.609 L1502.64 692.609 L1503.2 692.609 L1503.76 692.609 L1504.32 692.609 L1504.88 692.609 L1505.44 692.609 L1505.99 692.609 L1506.55 692.609 L1507.11 692.609 L1507.67 692.609 L1508.23 692.609 L1508.79 692.609 L1509.35 692.609 L1509.91 692.609 L1510.47 692.609 L1511.03 692.609 L1511.59 692.609 L1512.15 692.609 L1512.71 692.609 L1513.26 692.609 L1513.82 692.609 L1514.38 692.609 L1514.94 692.609 L1515.5 692.609 L1516.06 692.609 L1516.62 692.609 L1517.18 692.609 L1517.74 692.609 L1518.3 692.609 L1518.86 692.609 L1519.42 692.609 L1519.98 692.609 L1520.53 692.609 L1521.09 692.609 L1521.65 692.609 L1522.21 692.609 L1522.77 692.609 L1523.33 692.609 L1523.89 692.609 L1524.45 692.609 L1525.01 692.609 L1525.57 692.609 L1526.13 692.609 L1526.69 692.609 L1527.25 692.609 L1527.81 692.609 L1528.36 692.609 L1528.92 692.609 L1529.48 692.609 L1530.04 692.609 L1530.6 692.609 L1531.16 692.609 L1531.72 692.609 L1532.28 692.609 L1532.84 692.609 L1533.4 692.609 L1533.96 692.609 L1534.52 692.609 L1535.08 692.609 L1535.63 692.609 L1536.19 692.609 L1536.75 692.609 L1537.31 692.609 L1537.87 692.609 L1538.43 692.609 L1538.99 692.609 L1539.55 692.609 L1540.11 692.609 L1540.67 692.609 L1541.23 692.609 L1541.79 692.609 L1542.35 692.609 L1542.9 692.609 L1543.46 692.609 L1544.02 692.609 L1544.58 692.609 L1545.14 692.609 L1545.7 692.609 L1546.26 692.609 L1546.82 692.609 L1547.38 692.609 L1547.94 692.609 L1548.5 692.609 L1549.06 692.609 L1549.62 692.609 L1550.18 692.609 L1550.73 692.609 L1551.29 692.609 L1551.85 692.609 L1552.41 692.609 L1552.97 692.609 L1553.53 692.609 L1554.09 692.609 L1554.65 692.609 L1555.21 692.609 L1555.77 692.609 L1556.33 692.609 L1556.89 692.609 L1557.45 692.609 L1558 692.609 L1558.56 692.609 L1559.12 692.609 L1559.68 692.609 L1560.24 692.609 L1560.8 692.609 L1561.36 692.609 L1561.92 692.609 L1562.48 692.609 L1563.04 692.609 L1563.6 692.609 L1564.16 692.609 L1564.72 692.609 L1565.28 692.609 L1565.83 692.609 L1566.39 692.609 L1566.95 692.609 L1567.51 692.609 L1568.07 692.609 L1568.63 692.609 L1569.19 692.609 L1569.75 692.609 L1570.31 692.609 L1570.87 692.609 L1571.43 692.609 L1571.99 692.609 L1572.55 692.609 L1573.1 692.609 L1573.66 692.609 L1574.22 692.609 L1574.78 692.609 L1575.34 692.609 L1575.9 692.609 L1576.46 692.609 L1577.02 692.609 L1577.58 692.609 L1578.14 692.609 L1578.7 692.609 L1579.26 692.609 L1579.82 692.609 L1580.37 692.609 L1580.93 692.609 L1581.49 692.609 L1582.05 692.609 L1582.61 692.609 L1583.17 692.609 L1583.73 692.609 L1584.29 692.609 L1584.85 692.609 L1585.41 692.609 L1585.97 692.609 L1586.53 692.609 L1587.09 692.609 L1587.65 692.609 L1588.2 692.609 L1588.76 692.609 L1589.32 692.609 L1589.88 692.609 L1590.44 692.609 L1591 692.609 L1591.56 692.609 L1592.12 692.609 L1592.68 692.609 L1593.24 692.609 L1593.8 692.609 L1594.36 692.609 L1594.92 692.609 L1595.47 692.609 L1596.03 692.609 L1596.59 692.609 L1597.15 692.609 L1597.71 692.609 L1598.27 692.609 L1598.83 692.609 L1599.39 692.609 L1599.95 692.609 L1600.51 692.609 L1601.07 692.609 L1601.63 692.609 L1602.19 692.609 L1602.74 692.609 L1603.3 692.609 L1603.86 692.609 L1604.42 692.609 L1604.98 692.609 L1605.54 692.609 L1606.1 692.609 L1606.66 692.609 L1607.22 692.609 L1607.78 692.609 L1608.34 692.609 L1608.9 692.609 L1609.46 692.609 L1610.02 692.609 L1610.57 692.609 L1611.13 692.609 L1611.69 692.609 L1612.25 692.609 L1612.81 692.609 L1613.37 692.609 L1613.93 692.609 L1614.49 692.609 L1615.05 692.609 L1615.61 692.609 L1616.17 692.609 L1616.73 692.609 L1617.29 692.609 L1617.84 692.609 L1618.4 692.609 L1618.96 692.609 L1619.52 692.609 L1620.08 692.609 L1620.64 692.609 L1621.2 692.609 L1621.76 692.609 L1622.32 692.609 L1622.88 692.609 L1623.44 692.609 L1624 692.609 L1624.56 692.609 L1625.11 692.609 L1625.67 692.609 L1626.23 692.609 L1626.79 692.609 L1627.35 692.609 L1627.91 692.609 L1628.47 692.609 L1629.03 692.609 L1629.59 692.609 L1630.15 692.609 L1630.71 692.609 L1631.27 692.609 L1631.83 692.609 L1632.39 692.609 L1632.94 692.609 L1633.5 692.609 L1634.06 692.609 L1634.62 692.609 L1635.18 692.609 L1635.74 692.609 L1636.3 692.609 L1636.86 692.609 L1637.42 692.609 L1637.98 692.609 L1638.54 692.609 L1639.1 692.609 L1639.66 692.609 L1640.21 692.609 L1640.77 692.609 L1641.33 692.609 L1641.89 692.609 L1642.45 692.609 L1643.01 692.609 L1643.57 692.609 L1644.13 692.609 L1644.69 692.609 L1645.25 692.609 L1645.81 692.609 L1646.37 692.609 L1646.93 692.609 L1647.48 692.609 L1648.04 692.609 L1648.6 692.609 L1649.16 692.609 L1649.72 692.609 L1650.28 692.609 L1650.84 692.609 L1651.4 692.609 L1651.96 692.609 L1652.52 692.609 L1653.08 692.609 L1653.64 692.609 L1654.2 692.609 L1654.76 692.609 L1655.31 692.609 L1655.87 692.609 L1656.43 692.609 L1656.99 692.609 L1657.55 692.609 L1658.11 692.609 L1658.67 692.609 L1659.23 692.609 L1659.79 692.609 L1660.35 692.609 L1660.91 692.609 L1661.47 692.609 L1662.03 692.609 L1662.58 692.609 L1663.14 692.609 L1663.7 692.609 L1664.26 692.609 L1664.82 692.609 L1665.38 692.609 L1665.94 692.609 L1666.5 692.609 L1667.06 692.609 L1667.62 692.609 L1668.18 692.609 L1668.74 692.609 L1669.3 692.609 L1669.85 692.609 L1670.41 692.609 L1670.97 692.609 L1671.53 692.609 L1672.09 692.609 L1672.65 692.609 L1673.21 692.609 L1673.77 692.609 L1674.33 692.609 L1674.89 692.609 L1675.45 692.609 L1676.01 692.609 L1676.57 692.609 L1677.13 692.609 L1677.68 692.609 L1678.24 692.609 L1678.8 692.609 L1679.36 692.609 L1679.92 692.609 L1680.48 692.609 L1681.04 692.609 L1681.6 692.609 L1682.16 692.609 L1682.72 692.609 L1683.28 692.609 L1683.84 692.609 L1684.4 692.609 L1684.95 692.609 L1685.51 692.609 L1686.07 692.609 L1686.63 692.609 L1687.19 692.609 L1687.75 692.609 L1688.31 692.609 L1688.87 692.609 L1689.43 692.609 L1689.99 692.609 L1690.55 692.609 L1691.11 692.609 L1691.67 692.609 L1692.23 692.609 L1692.78 692.609 L1693.34 692.609 L1693.9 692.609 L1694.46 692.609 L1695.02 692.609 L1695.58 692.609 L1696.14 692.609 L1696.7 692.609 L1697.26 692.609 L1697.82 692.609 L1698.38 692.609 L1698.94 692.609 L1699.5 692.609 L1700.05 692.609 L1700.61 692.609 L1701.17 692.609 L1701.73 692.609 L1702.29 692.609 L1702.85 692.609 L1703.41 692.609 L1703.97 692.609 L1704.53 692.609 L1705.09 692.609 L1705.65 692.609 L1706.21 692.609 L1706.77 692.609 L1707.32 692.609 L1707.88 692.609 L1708.44 692.609 L1709 692.609 L1709.56 692.609 L1710.12 692.609 L1710.68 692.609 L1711.24 692.609 L1711.8 692.609 L1712.36 692.609 L1712.92 692.609 L1713.48 692.609 L1714.04 692.609 L1714.6 692.609 L1715.15 692.609 L1715.71 692.609 L1716.27 692.609 L1716.83 692.609 L1717.39 692.609 L1717.95 692.609 L1718.51 692.609 L1719.07 692.609 L1719.63 692.609 L1720.19 692.609 L1720.75 692.609 L1721.31 692.609 L1721.87 692.609 L1722.42 692.609 L1722.98 692.609 L1723.54 692.609 L1724.1 692.609 L1724.66 692.609 L1725.22 692.609 L1725.78 692.609 L1726.34 692.609 L1726.9 692.609 L1727.46 692.609 L1728.02 692.609 L1728.58 692.609 L1729.14 692.609 L1729.69 692.609 L1730.25 692.609 L1730.81 692.609 L1731.37 692.609 L1731.93 692.609 L1732.49 692.609 L1733.05 692.609 L1733.61 692.609 L1734.17 692.609 L1734.73 692.609 L1735.29 692.609 L1735.85 692.609 L1736.41 692.609 L1736.97 692.609 L1737.52 692.609 L1738.08 692.609 L1738.64 692.609 L1739.2 692.609 L1739.76 692.609 L1740.32 692.609 L1740.88 692.609 L1741.44 692.609 L1742 692.609 L1742.56 692.609 L1743.12 692.609 L1743.68 692.609 L1744.24 692.609 L1744.79 692.609 L1745.35 692.609 L1745.91 692.609 L1746.47 692.609 L1747.03 692.609 L1747.59 692.609 L1748.15 692.609 L1748.71 692.609 L1749.27 692.609 L1749.83 692.609 L1750.39 692.609 L1750.95 692.609 L1751.51 692.609 L1752.06 692.609 L1752.62 692.609 L1753.18 692.609 L1753.74 692.609 L1754.3 692.609 L1754.86 692.609 L1755.42 692.609 L1755.98 692.609 L1756.54 692.609 L1757.1 692.609 L1757.66 692.609 L1758.22 692.609 L1758.78 692.609 L1759.34 692.609 L1759.89 692.609 L1760.45 692.609 L1761.01 692.609 L1761.57 692.609 L1762.13 692.609 L1762.69 692.609 L1763.25 692.609 L1763.81 692.609 L1764.37 692.609 L1764.93 692.609 L1765.49 692.609 L1766.05 692.609 L1766.61 692.609 L1767.16 692.609 L1767.72 692.609 L1768.28 692.609 L1768.84 692.609 L1769.4 692.609 L1769.96 692.609 L1770.52 692.609 L1771.08 692.609 L1771.64 692.609 L1772.2 692.609 L1772.76 692.609 L1773.32 692.609 L1773.88 692.609 L1774.43 692.609 L1774.99 692.609 L1775.55 692.609 L1776.11 692.609 L1776.67 692.609 L1777.23 692.609 L1777.79 692.609 L1778.35 692.609 L1778.91 692.609 L1779.47 692.609 L1780.03 692.609 L1780.59 692.609 L1781.15 692.609 L1781.71 692.609 L1782.26 692.609 L1782.82 692.609 L1783.38 692.609 L1783.94 692.609 L1784.5 692.609 L1785.06 692.609 L1785.62 692.609 L1786.18 692.609 L1786.74 692.609 L1787.3 692.609 L1787.86 692.609 L1788.42 692.609 L1788.98 692.609 L1789.53 692.609 L1790.09 692.609 L1790.65 692.609 L1791.21 692.609 L1791.77 692.609 L1792.33 692.609 L1792.89 692.609 L1793.45 692.609 L1794.01 692.609 L1794.57 692.609 L1795.13 692.609 L1795.69 692.609 L1796.25 692.609 L1796.8 692.609 L1797.36 692.609 L1797.92 692.609 L1798.48 692.609 L1799.04 692.609 L1799.6 692.609 L1800.16 692.609 L1800.72 692.609 L1801.28 692.609 L1801.84 692.609 L1802.4 692.609 L1802.96 692.609 L1803.52 692.609 L1804.08 692.609 L1804.63 692.609 L1805.19 692.609 L1805.75 692.609 L1806.31 692.609 L1806.87 692.609 L1807.43 692.609 L1807.99 692.609 L1808.55 692.609 L1809.11 692.609 L1809.67 692.609 L1810.23 692.609 L1810.79 692.609 L1811.35 692.609 L1811.9 692.609 L1812.46 692.609 L1813.02 692.609 L1813.58 692.609 L1814.14 692.609 L1814.7 692.609 L1815.26 692.609 L1815.82 692.609 L1816.38 692.609 L1816.94 692.609 L1817.5 692.609 L1818.06 692.609 L1818.62 692.609 L1819.18 692.609 L1819.73 692.609 L1820.29 692.609 L1820.85 692.609 L1821.41 692.609 L1821.97 692.609 L1822.53 692.609 L1823.09 692.609 L1823.65 692.609 L1824.21 692.609 L1824.77 692.609 L1825.33 692.609 L1825.89 692.609 L1826.45 692.609 L1827 692.609 L1827.56 692.609 L1828.12 692.609 L1828.68 692.609 L1829.24 692.609 L1829.8 692.609 L1830.36 692.609 L1830.92 692.609 L1831.48 692.609 L1832.04 692.609 L1832.6 692.609 L1833.16 692.609 L1833.72 692.609 L1834.27 692.609 L1834.83 692.609 L1835.39 692.609 L1835.95 692.609 L1836.51 692.609 L1837.07 692.609 L1837.63 692.609 L1838.19 692.609 L1838.19 682.433 L1837.63 682.433 L1837.07 682.433 L1836.51 682.433 L1835.95 682.433 L1835.39 682.433 L1834.83 682.433 L1834.27 682.433 L1833.72 682.433 L1833.16 682.433 L1832.6 682.433 L1832.04 682.433 L1831.48 682.433 L1830.92 682.433 L1830.36 682.433 L1829.8 682.433 L1829.24 682.433 L1828.68 682.433 L1828.12 682.433 L1827.56 682.433 L1827 682.433 L1826.45 682.433 L1825.89 682.433 L1825.33 682.433 L1824.77 682.433 L1824.21 682.433 L1823.65 682.433 L1823.09 682.433 L1822.53 682.433 L1821.97 682.433 L1821.41 682.433 L1820.85 682.433 L1820.29 682.433 L1819.73 682.433 L1819.18 682.433 L1818.62 682.433 L1818.06 682.433 L1817.5 682.433 L1816.94 682.433 L1816.38 682.433 L1815.82 682.433 L1815.26 682.433 L1814.7 682.433 L1814.14 682.433 L1813.58 682.433 L1813.02 682.433 L1812.46 682.433 L1811.9 682.433 L1811.35 682.433 L1810.79 682.433 L1810.23 682.433 L1809.67 682.433 L1809.11 682.433 L1808.55 682.433 L1807.99 682.433 L1807.43 682.433 L1806.87 682.433 L1806.31 682.433 L1805.75 682.433 L1805.19 682.433 L1804.63 682.433 L1804.08 682.433 L1803.52 682.433 L1802.96 682.433 L1802.4 682.433 L1801.84 682.433 L1801.28 682.433 L1800.72 682.433 L1800.16 682.433 L1799.6 682.433 L1799.04 682.433 L1798.48 682.433 L1797.92 682.433 L1797.36 682.433 L1796.8 682.433 L1796.25 682.433 L1795.69 682.433 L1795.13 682.433 L1794.57 682.433 L1794.01 682.433 L1793.45 682.433 L1792.89 682.433 L1792.33 682.433 L1791.77 682.433 L1791.21 682.433 L1790.65 682.433 L1790.09 682.433 L1789.53 682.433 L1788.98 682.433 L1788.42 682.433 L1787.86 682.433 L1787.3 682.433 L1786.74 682.433 L1786.18 682.433 L1785.62 682.433 L1785.06 682.433 L1784.5 682.433 L1783.94 682.433 L1783.38 682.433 L1782.82 682.433 L1782.26 682.433 L1781.71 682.433 L1781.15 682.433 L1780.59 682.433 L1780.03 682.433 L1779.47 682.433 L1778.91 682.433 L1778.35 682.433 L1777.79 682.433 L1777.23 682.433 L1776.67 682.433 L1776.11 682.433 L1775.55 682.433 L1774.99 682.433 L1774.43 682.433 L1773.88 682.433 L1773.32 682.433 L1772.76 682.433 L1772.2 682.433 L1771.64 682.433 L1771.08 682.433 L1770.52 682.433 L1769.96 682.433 L1769.4 682.433 L1768.84 682.433 L1768.28 682.433 L1767.72 682.433 L1767.16 682.433 L1766.61 682.433 L1766.05 682.433 L1765.49 682.433 L1764.93 682.433 L1764.37 682.433 L1763.81 682.433 L1763.25 682.433 L1762.69 682.433 L1762.13 682.433 L1761.57 682.433 L1761.01 682.433 L1760.45 682.433 L1759.89 682.433 L1759.34 682.433 L1758.78 682.433 L1758.22 682.433 L1757.66 682.433 L1757.1 682.433 L1756.54 682.433 L1755.98 682.433 L1755.42 682.433 L1754.86 682.433 L1754.3 682.433 L1753.74 682.433 L1753.18 682.433 L1752.62 682.433 L1752.06 682.433 L1751.51 682.433 L1750.95 682.433 L1750.39 682.433 L1749.83 682.433 L1749.27 682.433 L1748.71 682.433 L1748.15 682.433 L1747.59 682.433 L1747.03 682.433 L1746.47 682.433 L1745.91 682.433 L1745.35 682.433 L1744.79 682.433 L1744.24 682.433 L1743.68 682.433 L1743.12 682.433 L1742.56 682.433 L1742 682.433 L1741.44 682.433 L1740.88 682.433 L1740.32 682.433 L1739.76 682.433 L1739.2 682.433 L1738.64 682.433 L1738.08 682.433 L1737.52 682.433 L1736.97 682.433 L1736.41 682.433 L1735.85 682.433 L1735.29 682.433 L1734.73 682.433 L1734.17 682.433 L1733.61 682.433 L1733.05 682.433 L1732.49 682.433 L1731.93 682.433 L1731.37 682.433 L1730.81 682.433 L1730.25 682.433 L1729.69 682.433 L1729.14 682.433 L1728.58 682.433 L1728.02 682.433 L1727.46 682.433 L1726.9 682.433 L1726.34 682.433 L1725.78 682.433 L1725.22 682.433 L1724.66 682.433 L1724.1 682.433 L1723.54 682.433 L1722.98 682.433 L1722.42 682.433 L1721.87 682.433 L1721.31 682.433 L1720.75 682.433 L1720.19 682.433 L1719.63 682.433 L1719.07 682.433 L1718.51 682.433 L1717.95 682.433 L1717.39 682.433 L1716.83 682.433 L1716.27 682.433 L1715.71 682.433 L1715.15 682.433 L1714.6 682.433 L1714.04 682.433 L1713.48 682.433 L1712.92 682.433 L1712.36 682.433 L1711.8 682.433 L1711.24 682.433 L1710.68 682.433 L1710.12 682.433 L1709.56 682.433 L1709 682.433 L1708.44 682.433 L1707.88 682.433 L1707.32 682.433 L1706.77 682.433 L1706.21 682.433 L1705.65 682.433 L1705.09 682.433 L1704.53 682.433 L1703.97 682.433 L1703.41 682.433 L1702.85 682.433 L1702.29 682.433 L1701.73 682.433 L1701.17 682.433 L1700.61 682.433 L1700.05 682.433 L1699.5 682.433 L1698.94 682.433 L1698.38 682.433 L1697.82 682.433 L1697.26 682.433 L1696.7 682.433 L1696.14 682.433 L1695.58 682.433 L1695.02 682.433 L1694.46 682.433 L1693.9 682.433 L1693.34 682.433 L1692.78 682.433 L1692.23 682.433 L1691.67 682.433 L1691.11 682.433 L1690.55 682.433 L1689.99 682.433 L1689.43 682.433 L1688.87 682.433 L1688.31 682.433 L1687.75 682.433 L1687.19 682.433 L1686.63 682.433 L1686.07 682.433 L1685.51 682.433 L1684.95 682.433 L1684.4 682.433 L1683.84 682.433 L1683.28 682.433 L1682.72 682.433 L1682.16 682.433 L1681.6 682.433 L1681.04 682.433 L1680.48 682.433 L1679.92 682.433 L1679.36 682.433 L1678.8 682.433 L1678.24 682.433 L1677.68 682.433 L1677.13 682.433 L1676.57 682.433 L1676.01 682.433 L1675.45 682.433 L1674.89 682.433 L1674.33 682.433 L1673.77 682.433 L1673.21 682.433 L1672.65 682.433 L1672.09 682.433 L1671.53 682.433 L1670.97 682.433 L1670.41 682.433 L1669.85 682.433 L1669.3 682.433 L1668.74 682.433 L1668.18 682.433 L1667.62 682.433 L1667.06 682.433 L1666.5 682.433 L1665.94 682.433 L1665.38 682.433 L1664.82 682.433 L1664.26 682.433 L1663.7 682.433 L1663.14 682.433 L1662.58 682.433 L1662.03 682.433 L1661.47 682.433 L1660.91 682.433 L1660.35 682.433 L1659.79 682.433 L1659.23 682.433 L1658.67 682.433 L1658.11 682.433 L1657.55 682.433 L1656.99 682.433 L1656.43 682.433 L1655.87 682.433 L1655.31 682.433 L1654.76 682.433 L1654.2 682.433 L1653.64 682.433 L1653.08 682.433 L1652.52 682.433 L1651.96 682.433 L1651.4 682.433 L1650.84 682.433 L1650.28 682.433 L1649.72 682.433 L1649.16 682.433 L1648.6 682.433 L1648.04 682.433 L1647.48 682.433 L1646.93 682.433 L1646.37 682.433 L1645.81 682.433 L1645.25 682.433 L1644.69 682.433 L1644.13 682.433 L1643.57 682.433 L1643.01 682.433 L1642.45 682.433 L1641.89 682.433 L1641.33 682.433 L1640.77 682.433 L1640.21 682.433 L1639.66 682.433 L1639.1 682.433 L1638.54 682.433 L1637.98 682.433 L1637.42 682.433 L1636.86 682.433 L1636.3 682.433 L1635.74 682.433 L1635.18 682.433 L1634.62 682.433 L1634.06 682.433 L1633.5 682.433 L1632.94 682.433 L1632.39 682.433 L1631.83 682.433 L1631.27 682.433 L1630.71 682.433 L1630.15 682.433 L1629.59 682.433 L1629.03 682.433 L1628.47 682.433 L1627.91 682.433 L1627.35 682.433 L1626.79 682.433 L1626.23 682.433 L1625.67 682.433 L1625.11 682.433 L1624.56 682.433 L1624 682.433 L1623.44 682.433 L1622.88 682.433 L1622.32 682.433 L1621.76 682.433 L1621.2 682.433 L1620.64 682.433 L1620.08 682.433 L1619.52 682.433 L1618.96 682.433 L1618.4 682.433 L1617.84 682.433 L1617.29 682.433 L1616.73 682.433 L1616.17 682.433 L1615.61 682.433 L1615.05 682.433 L1614.49 682.433 L1613.93 682.433 L1613.37 682.433 L1612.81 682.433 L1612.25 682.433 L1611.69 682.433 L1611.13 682.433 L1610.57 682.433 L1610.02 682.433 L1609.46 682.433 L1608.9 682.433 L1608.34 682.433 L1607.78 682.433 L1607.22 682.433 L1606.66 682.433 L1606.1 682.433 L1605.54 682.433 L1604.98 682.433 L1604.42 682.433 L1603.86 682.433 L1603.3 682.433 L1602.74 682.433 L1602.19 682.433 L1601.63 682.433 L1601.07 682.433 L1600.51 682.433 L1599.95 682.433 L1599.39 682.433 L1598.83 682.433 L1598.27 682.433 L1597.71 682.433 L1597.15 682.433 L1596.59 682.433 L1596.03 682.433 L1595.47 682.433 L1594.92 682.433 L1594.36 682.433 L1593.8 682.433 L1593.24 682.433 L1592.68 682.433 L1592.12 682.433 L1591.56 682.433 L1591 682.433 L1590.44 682.433 L1589.88 682.433 L1589.32 682.433 L1588.76 682.433 L1588.2 682.433 L1587.65 682.433 L1587.09 682.433 L1586.53 682.433 L1585.97 682.433 L1585.41 682.433 L1584.85 682.433 L1584.29 682.433 L1583.73 682.433 L1583.17 682.433 L1582.61 682.433 L1582.05 682.433 L1581.49 682.433 L1580.93 682.433 L1580.37 682.433 L1579.82 682.433 L1579.26 682.433 L1578.7 682.433 L1578.14 682.433 L1577.58 682.433 L1577.02 682.433 L1576.46 682.433 L1575.9 682.433 L1575.34 682.433 L1574.78 682.433 L1574.22 682.433 L1573.66 682.433 L1573.1 682.433 L1572.55 682.433 L1571.99 682.433 L1571.43 682.433 L1570.87 682.433 L1570.31 682.433 L1569.75 682.433 L1569.19 682.433 L1568.63 682.433 L1568.07 682.433 L1567.51 682.433 L1566.95 682.433 L1566.39 682.433 L1565.83 682.433 L1565.28 682.433 L1564.72 682.433 L1564.16 682.433 L1563.6 682.433 L1563.04 682.433 L1562.48 682.433 L1561.92 682.433 L1561.36 682.433 L1560.8 682.433 L1560.24 682.433 L1559.68 682.433 L1559.12 682.433 L1558.56 682.433 L1558 682.433 L1557.45 682.433 L1556.89 682.433 L1556.33 682.433 L1555.77 682.433 L1555.21 682.433 L1554.65 682.433 L1554.09 682.433 L1553.53 682.433 L1552.97 682.433 L1552.41 682.433 L1551.85 682.433 L1551.29 682.433 L1550.73 682.433 L1550.18 682.433 L1549.62 682.433 L1549.06 682.433 L1548.5 682.433 L1547.94 682.433 L1547.38 682.433 L1546.82 682.433 L1546.26 682.433 L1545.7 682.433 L1545.14 682.433 L1544.58 682.433 L1544.02 682.433 L1543.46 682.433 L1542.9 682.433 L1542.35 682.433 L1541.79 682.433 L1541.23 682.433 L1540.67 682.433 L1540.11 682.433 L1539.55 682.433 L1538.99 682.433 L1538.43 682.433 L1537.87 682.433 L1537.31 682.433 L1536.75 682.433 L1536.19 682.433 L1535.63 682.433 L1535.08 682.433 L1534.52 682.433 L1533.96 682.433 L1533.4 682.433 L1532.84 682.433 L1532.28 682.433 L1531.72 682.433 L1531.16 682.433 L1530.6 682.433 L1530.04 682.433 L1529.48 682.433 L1528.92 682.433 L1528.36 682.433 L1527.81 682.433 L1527.25 682.433 L1526.69 682.433 L1526.13 682.433 L1525.57 682.433 L1525.01 682.433 L1524.45 682.433 L1523.89 682.433 L1523.33 682.433 L1522.77 682.433 L1522.21 682.433 L1521.65 682.433 L1521.09 682.433 L1520.53 682.433 L1519.98 682.433 L1519.42 682.433 L1518.86 682.433 L1518.3 682.433 L1517.74 682.433 L1517.18 682.433 L1516.62 682.433 L1516.06 682.433 L1515.5 682.433 L1514.94 682.433 L1514.38 682.433 L1513.82 682.433 L1513.26 682.433 L1512.71 682.433 L1512.15 682.433 L1511.59 682.433 L1511.03 682.433 L1510.47 682.433 L1509.91 682.433 L1509.35 682.433 L1508.79 682.433 L1508.23 682.433 L1507.67 682.433 L1507.11 682.433 L1506.55 682.433 L1505.99 682.433 L1505.44 682.433 L1504.88 682.433 L1504.32 682.433 L1503.76 682.433 L1503.2 682.433 L1502.64 682.433 L1502.08 682.433 L1501.52 682.433 L1500.96 682.433 L1500.4 682.433 L1499.84 682.433 L1499.28 682.433 L1498.72 682.433 L1498.16 682.433 L1497.61 682.433 L1497.05 682.433 L1496.49 682.433 L1495.93 682.433 L1495.37 682.433 L1494.81 682.433 L1494.25 682.433 L1493.69 682.433 L1493.13 682.433 L1492.57 682.433 L1492.01 682.433 L1491.45 682.433 L1490.89 682.433 L1490.34 682.433 L1489.78 682.433 L1489.22 682.433 L1488.66 682.433 L1488.1 682.433 L1487.54 682.433 L1486.98 682.433 L1486.42 682.433 L1485.86 682.433 L1485.3 682.433 L1484.74 682.433 L1484.18 682.433 L1483.62 682.433 L1483.07 682.433 L1482.51 682.433 L1481.95 682.433 L1481.39 682.433 L1480.83 682.433 L1480.27 682.433 L1479.71 682.433 L1479.15 682.433 L1478.59 682.433 L1478.03 682.433 L1477.47 682.433 L1476.91 682.433 L1476.35 682.433 L1475.79 682.433 L1475.24 682.433 L1474.68 682.433 L1474.12 682.433 L1473.56 682.433 L1473 682.433 L1472.44 682.433 L1471.88 682.433 L1471.32 682.433 L1470.76 682.433 L1470.2 682.433 L1469.64 682.433 L1469.08 682.433 L1468.52 682.433 L1467.97 682.433 L1467.41 682.433 L1466.85 682.433 L1466.29 682.433 L1465.73 682.433 L1465.17 682.433 L1464.61 682.433 L1464.05 682.433 L1463.49 682.433 L1462.93 682.433 L1462.37 682.433 L1461.81 682.433 L1461.25 682.433 L1460.7 682.433 L1460.14 682.433 L1459.58 682.433 L1459.02 682.433 L1458.46 682.433 L1457.9 682.433 L1457.34 682.433 L1456.78 682.433 L1456.22 682.433 L1455.66 682.433 L1455.1 682.433 L1454.54 682.433 L1453.98 682.433 L1453.42 682.433 L1452.87 682.433 L1452.31 682.433 L1451.75 682.433 L1451.19 682.433 L1450.63 682.433 L1450.07 682.433 L1449.51 682.433 L1448.95 682.433 L1448.39 682.433 L1447.83 682.433 L1447.27 682.433 L1446.71 682.433 L1446.15 682.433 L1445.6 682.433 L1445.04 682.433 L1444.48 682.433 L1443.92 682.433 L1443.36 682.433 L1442.8 682.433 L1442.24 682.433 L1441.68 682.433 L1441.12 682.433 L1440.56 682.433 L1440 682.433 L1439.44 682.433 L1438.88 682.433 L1438.33 682.433 L1437.77 682.433 L1437.21 682.433 L1436.65 682.433 L1436.09 682.433 L1435.53 682.433 L1434.97 682.433 L1434.41 682.433 L1433.85 682.433 L1433.29 682.433 L1432.73 682.433 L1432.17 682.433 L1431.61 682.433 L1431.05 682.433 L1430.5 682.433 L1429.94 682.433 L1429.38 682.433 L1428.82 682.433 L1428.26 682.433 L1427.7 682.433 L1427.14 682.433 L1426.58 682.433 L1426.02 682.433 L1425.46 682.433 L1424.9 682.433 L1424.34 682.433 L1423.78 682.433 L1423.23 682.433 L1422.67 682.433 L1422.11 682.433 L1421.55 682.433 L1420.99 682.433 L1420.43 682.433 L1419.87 682.433 L1419.31 682.433 L1418.75 682.433 L1418.19 682.433 L1417.63 682.433 L1417.07 682.433 L1416.51 682.433 L1415.95 682.433 L1415.4 682.433 L1414.84 682.433 L1414.28 682.433 L1413.72 682.433 L1413.16 682.433 L1412.6 682.433 L1412.04 682.433 L1411.48 682.433 L1410.92 682.433 L1410.36 682.433 L1409.8 682.433 L1409.24 682.433 L1408.68 682.433 L1408.13 682.433 L1407.57 682.433 L1407.01 682.433 L1406.45 682.433 L1405.89 682.433 L1405.33 682.433 L1404.77 682.433 L1404.21 682.433 L1403.65 682.433 L1403.09 682.433 L1402.53 682.433 L1401.97 682.433 L1401.41 682.433 L1400.86 682.433 L1400.3 682.433 L1399.74 682.433 L1399.18 682.433 L1398.62 682.433 L1398.06 682.433 L1397.5 682.433 L1396.94 682.433 L1396.38 682.433 L1395.82 682.433 L1395.26 682.433 L1394.7 682.433 L1394.14 682.433 L1393.58 682.433 L1393.03 682.433 L1392.47 682.433 L1391.91 682.433 L1391.35 682.433 L1390.79 682.433 L1390.23 682.433 L1389.67 682.433 L1389.11 682.433 L1388.55 682.433 L1387.99 682.433 L1387.43 682.433 L1386.87 682.433 L1386.31 682.433 L1385.76 682.433 L1385.2 682.433 L1384.64 682.433 L1384.08 682.433 L1383.52 682.433 L1382.96 682.433 L1382.4 682.433 L1381.84 682.433 L1381.28 682.433 L1380.72 682.433 L1380.16 682.433 L1379.6 682.433 L1379.04 682.433 L1378.49 682.433 L1377.93 682.433 L1377.37 682.433 L1376.81 682.433 L1376.25 682.433 L1375.69 682.433 L1375.13 682.433 L1374.57 682.433 L1374.01 682.433 L1373.45 682.433 L1372.89 682.433 L1372.33 682.433 L1371.77 682.433 L1371.21 682.433 L1370.66 682.433 L1370.1 682.433 L1369.54 682.433 L1368.98 682.433 L1368.42 682.433 L1367.86 682.433 L1367.3 682.433 L1366.74 682.433 L1366.18 682.433 L1365.62 682.433 L1365.06 682.433 L1364.5 682.433 L1363.94 682.433 L1363.39 682.433 L1362.83 682.433 L1362.27 682.433 L1361.71 682.433 L1361.15 682.433 L1360.59 682.433 L1360.03 682.433 L1359.47 682.433 L1358.91 682.433 L1358.35 682.433 L1357.79 682.433 L1357.23 682.433 L1356.67 682.433 L1356.12 682.433 L1355.56 682.433 L1355 682.433 L1354.44 682.433 L1353.88 682.433 L1353.32 682.433 L1352.76 682.433 L1352.2 682.433 L1351.64 682.433 L1351.08 682.433 L1350.52 682.433 L1349.96 682.433 L1349.4 682.433 L1348.84 682.433 L1348.29 682.433 L1347.73 682.433 L1347.17 682.433 L1346.61 682.433 L1346.05 682.433 L1345.49 682.433 L1344.93 682.433 L1344.37 682.433 L1343.81 682.433 L1343.25 682.433 L1342.69 682.433 L1342.13 682.433 L1341.57 682.433 L1341.02 682.433 L1340.46 682.433 L1339.9 682.433 L1339.34 682.433 L1338.78 682.433 L1338.22 682.433 L1337.66 682.433 L1337.1 682.433 L1336.54 682.433 L1335.98 682.433 L1335.42 682.433 L1334.86 682.433 L1334.3 682.433 L1333.75 682.433 L1333.19 682.433 L1332.63 682.433 L1332.07 682.433 L1331.51 682.433 L1330.95 682.433 L1330.39 682.433 L1329.83 682.433 L1329.27 682.433 L1328.71 682.433 L1328.15 682.433 L1327.59 682.433 L1327.03 682.433 L1326.47 682.433 L1325.92 682.433 L1325.36 682.433 L1324.8 682.433 L1324.24 682.433 L1323.68 682.433 L1323.12 682.433 L1322.56 682.433 L1322 682.433 L1321.44 682.433 L1320.88 682.433 L1320.32 682.433 L1319.76 682.433 L1319.2 682.433 L1318.65 682.433 L1318.09 682.433 L1317.53 682.433 L1316.97 682.433 L1316.41 682.433 L1315.85 682.433 L1315.29 682.433 L1314.73 682.433 L1314.17 682.433 L1313.61 682.433 L1313.05 682.433 L1312.49 682.433 L1311.93 682.433 L1311.38 682.433 L1310.82 682.433 L1310.26 682.433 L1309.7 682.433 L1309.14 682.433 L1308.58 682.433 L1308.02 682.433 L1307.46 682.433 L1306.9 682.433 L1306.34 682.433 L1305.78 682.433 L1305.22 682.433 L1304.66 682.433 L1304.1 682.433 L1303.55 682.433 L1302.99 682.433 L1302.43 682.433 L1301.87 682.433 L1301.31 682.433 L1300.75 682.433 L1300.19 682.433 L1299.63 682.433 L1299.07 682.433 L1298.51 682.433 L1297.95 682.433 L1297.39 682.433 L1296.83 682.433 L1296.28 682.433 L1295.72 682.433 L1295.16 682.433 L1294.6 682.433 L1294.04 682.433 L1293.48 682.433 L1292.92 682.433 L1292.36 682.433 L1291.8 682.433 L1291.24 682.433 L1290.68 682.433 L1290.12 682.433 L1289.56 682.433 L1289 682.433 L1288.45 682.433 L1287.89 682.433 L1287.33 682.433 L1286.77 682.433 L1286.21 682.433 L1285.65 682.433 L1285.09 682.433 L1284.53 682.433 L1283.97 682.433 L1283.41 682.433 L1282.85 682.433 L1282.29 682.433 L1281.73 682.433 L1281.18 682.433 L1280.62 682.433 L1280.06 682.433 L1279.5 682.433 L1278.94 682.433 L1278.38 682.433 L1277.82 682.433 L1277.26 682.433 L1276.7 682.433 L1276.14 682.433 L1275.58 682.433 L1275.02 682.433 L1274.46 682.433 L1273.91 682.433 L1273.35 682.433 L1272.79 682.433 L1272.23 682.433 L1271.67 682.433 L1271.11 682.433 L1270.55 682.433 L1269.99 682.433 L1269.43 682.433 L1268.87 682.433 L1268.31 682.433 L1267.75 682.433 L1267.19 682.433 L1266.63 682.433 L1266.08 682.433 L1265.52 682.433 L1264.96 682.433 L1264.4 682.433 L1263.84 682.433 L1263.28 682.433 L1262.72 682.433 L1262.16 682.433 L1261.6 682.433 L1261.04 682.433 L1260.48 682.433 L1259.92 682.433 L1259.36 682.433 L1258.81 682.433 L1258.25 682.433 L1257.69 682.433 L1257.13 682.433 L1256.57 682.433 L1256.01 682.433 L1255.45 682.433 L1254.89 682.433 L1254.33 682.433 L1253.77 682.433 L1253.21 682.433 L1252.65 682.433 L1252.09 682.433 L1251.54 682.433 L1250.98 682.433 L1250.42 682.433 L1249.86 682.433 L1249.3 682.433 L1248.74 682.433 L1248.18 682.433 L1247.62 682.433 L1247.06 682.433 L1246.5 682.433 L1245.94 682.433 L1245.38 682.433 L1244.82 682.433 L1244.26 682.433 L1243.71 682.433 L1243.15 682.433 L1242.59 682.433 L1242.03 682.433 L1241.47 682.433 L1240.91 682.433 L1240.35 682.433 L1239.79 682.433 L1239.23 682.433 L1238.67 682.433 L1238.11 682.433 L1237.55 682.433 L1236.99 682.433 L1236.44 682.433 L1235.88 682.433 L1235.32 682.433 L1234.76 682.433 L1234.2 682.433 L1233.64 682.433 L1233.08 682.433 L1232.52 682.433 L1231.96 682.433 L1231.4 682.433 L1230.84 682.433 L1230.28 682.433 L1229.72 682.433 L1229.17 682.433 L1228.61 682.433 L1228.05 682.433 L1227.49 682.433 L1226.93 682.433 L1226.37 682.433 L1225.81 682.433 L1225.25 682.433 L1224.69 682.433 L1224.13 682.433 L1223.57 682.433 L1223.01 682.433 L1222.45 682.433 L1221.89 682.433 L1221.34 682.433 L1220.78 682.433 L1220.22 682.433 L1219.66 682.433 L1219.1 682.433 L1218.54 682.433 L1217.98 682.433 L1217.42 682.433 L1216.86 682.433 L1216.3 682.433 L1215.74 682.433 L1215.18 682.433 L1214.62 682.433 L1214.07 682.433 L1213.51 682.433 L1212.95 682.433 L1212.39 682.433 L1211.83 682.433 L1211.27 682.433 L1210.71 682.433 L1210.15 682.433 L1209.59 682.433 L1209.03 682.433 L1208.47 682.433 L1207.91 682.433 L1207.35 682.433 L1206.8 682.433 L1206.24 682.433 L1205.68 682.433 L1205.12 682.433 L1204.56 682.433 L1204 682.433 L1203.44 682.433 L1202.88 682.433 L1202.32 682.433 L1201.76 682.433 L1201.2 682.433 L1200.64 682.433 L1200.08 682.433 L1199.52 682.433 L1198.97 682.433 L1198.41 682.433 L1197.85 682.433 L1197.29 682.433 L1196.73 682.433 L1196.17 682.433 L1195.61 682.433 L1195.05 682.433 L1194.49 682.433 L1193.93 682.433 L1193.37 682.433 L1192.81 682.433 L1192.25 682.433 L1191.7 682.433 L1191.14 682.433 L1190.58 682.433 L1190.02 682.433 L1189.46 682.433 L1188.9 682.433 L1188.34 682.433 L1187.78 682.433 L1187.22 682.433 L1186.66 682.433 L1186.1 682.433 L1185.54 682.433 L1184.98 682.433 L1184.43 682.433 L1183.87 682.433 L1183.31 682.433 L1182.75 682.433 L1182.19 682.433 L1181.63 682.433 L1181.07 682.433 L1180.51 682.433 L1179.95 682.433 L1179.39 682.433 L1178.83 682.433 L1178.27 682.433 L1177.71 682.433 L1177.15 682.433 L1176.6 682.433 L1176.04 682.433 L1175.48 682.433 L1174.92 682.433 L1174.36 682.433 L1173.8 682.433 L1173.24 682.433 L1172.68 682.433 L1172.12 682.433 L1171.56 682.433 L1171 682.433 L1170.44 682.433 L1169.88 682.433 L1169.33 682.433 L1168.77 682.433 L1168.21 682.433 L1167.65 682.433 L1167.09 682.433 L1166.53 682.433 L1165.97 682.433 L1165.41 682.433 L1164.85 682.433 L1164.29 682.433 L1163.73 682.433 L1163.17 682.433 L1162.61 682.433 L1162.05 682.433 L1161.5 682.433 L1160.94 682.433 L1160.38 682.433 L1159.82 682.433 L1159.26 682.433 L1158.7 682.433 L1158.14 682.433 L1157.58 682.433 L1157.02 682.433 L1156.46 682.433 L1155.9 682.433 L1155.34 682.433 L1154.78 682.433 L1154.23 682.433 L1153.67 682.433 L1153.11 682.433 L1152.55 682.433 L1151.99 682.433 L1151.43 682.433 L1150.87 682.433 L1150.31 682.433 L1149.75 682.433 L1149.19 682.433 L1148.63 682.433 L1148.07 682.433 L1147.51 682.433 L1146.96 682.433 L1146.4 682.433 L1145.84 682.433 L1145.28 682.433 L1144.72 682.433 L1144.16 682.433 L1143.6 682.433 L1143.04 682.433 L1142.48 682.433 L1141.92 682.433 L1141.36 682.433 L1140.8 682.433 L1140.24 682.433 L1139.68 682.433 L1139.13 682.433 L1138.57 682.433 L1138.01 682.433 L1137.45 682.433 L1136.89 682.433 L1136.33 682.433 L1135.77 682.433 L1135.21 682.433 L1134.65 682.433 L1134.09 682.433 L1133.53 682.433 L1132.97 682.433 L1132.41 682.433 L1131.86 682.433 L1131.3 682.433 L1130.74 682.433 L1130.18 682.433 L1129.62 682.433 L1129.06 682.433 L1128.5 682.433 L1127.94 682.433 L1127.38 682.433 L1126.82 682.433 L1126.26 682.433 L1125.7 682.433 L1125.14 682.433 L1124.59 682.433 L1124.03 682.433 L1123.47 682.433 L1122.91 682.433 L1122.35 682.433 L1121.79 682.433 L1121.23 682.433 L1120.67 682.433 L1120.11 682.433 L1119.55 682.433 L1118.99 682.433 L1118.43 682.433 L1117.87 682.433 L1117.31 682.433 L1116.76 682.433 L1116.2 682.433 L1115.64 682.433 L1115.08 682.433 L1114.52 682.433 L1113.96 682.433 L1113.4 682.433 L1112.84 682.433 L1112.28 682.433 L1111.72 682.433 L1111.16 682.433 L1110.6 682.433 L1110.04 682.433 L1109.49 682.433 L1108.93 682.433 L1108.37 682.433 L1107.81 682.433 L1107.25 682.433 L1106.69 682.433 L1106.13 682.433 L1105.57 682.433 L1105.01 682.433 L1104.45 682.433 L1103.89 682.433 L1103.33 682.433 L1102.77 682.433 L1102.22 682.433 L1101.66 682.433 L1101.1 682.433 L1100.54 682.433 L1099.98 682.433 L1099.42 682.433 L1098.86 682.433 L1098.3 682.433 L1097.74 682.433 L1097.18 682.433 L1096.62 682.433 L1096.06 682.433 L1095.5 682.433 L1094.94 682.433 L1094.39 682.433 L1093.83 682.433 L1093.27 682.433 L1092.71 682.433 L1092.15 682.433 L1091.59 682.433 L1091.03 682.433 L1090.47 682.433 L1089.91 682.433 L1089.35 682.433 L1088.79 682.433 L1088.23 682.433 L1087.67 682.433 L1087.12 682.433 L1086.56 682.433 L1086 682.433 L1085.44 682.433 L1084.88 682.433 L1084.32 682.433 L1083.76 682.433 L1083.2 682.433 L1082.64 682.433 L1082.08 682.433 L1081.52 682.433 L1080.96 682.433 L1080.4 682.433 L1079.85 682.433 L1079.29 682.433 L1078.73 682.433 L1078.17 682.433 L1077.61 682.433 L1077.05 682.433 L1076.49 682.433 L1075.93 682.433 L1075.37 682.433 L1074.81 682.433 L1074.25 682.433 L1073.69 682.433 L1073.13 682.433 L1072.57 682.433 L1072.02 682.433 L1071.46 682.433 L1070.9 682.433 L1070.34 682.433 L1069.78 682.433 L1069.22 682.433 L1068.66 682.433 L1068.1 682.433 L1067.54 682.433 L1066.98 682.433 L1066.42 682.433 L1065.86 682.433 L1065.3 682.433 L1064.75 682.433 L1064.19 682.433 L1063.63 682.433 L1063.07 682.433 L1062.51 682.433 L1061.95 682.433 L1061.39 682.433 L1060.83 682.433 L1060.27 682.433 L1059.71 682.433 L1059.15 682.433 L1058.59 682.433 L1058.03 682.433 L1057.48 682.433 L1056.92 682.433 L1056.36 682.433 L1055.8 682.433 L1055.24 682.433 L1054.68 682.433 L1054.12 682.433 L1053.56 682.433 L1053 682.433 L1052.44 682.433 L1051.88 682.433 L1051.32 682.433 L1050.76 682.433 L1050.2 682.433 L1049.65 682.433 L1049.09 682.433 L1048.53 682.433 L1047.97 682.433 L1047.41 682.433 L1046.85 682.433 L1046.29 682.433 L1045.73 682.433 L1045.17 682.433 L1044.61 682.433 L1044.05 682.433 L1043.49 682.433 L1042.93 682.433 L1042.38 682.433 L1041.82 682.433 L1041.26 682.433 L1040.7 682.433 L1040.14 682.433 L1039.58 682.433 L1039.02 682.433 L1038.46 682.433 L1037.9 682.433 L1037.34 682.433 L1036.78 682.433 L1036.22 682.433 L1035.66 682.433 L1035.1 682.433 L1034.55 682.433 L1033.99 682.433 L1033.43 682.433 L1032.87 682.433 L1032.31 682.433 L1031.75 682.433 L1031.19 682.433 L1030.63 682.433 L1030.07 682.433 L1029.51 682.433 L1028.95 682.433 L1028.39 682.433 L1027.83 682.433 L1027.28 682.433 L1026.72 682.433 L1026.16 682.433 L1025.6 682.433 L1025.04 682.433 L1024.48 682.433 L1023.92 682.433 L1023.36 682.433 L1022.8 682.433 L1022.24 682.433 L1021.68 682.433 L1021.12 682.433 L1020.56 682.433 L1020.01 682.433 L1019.45 682.433 L1018.89 682.433 L1018.33 682.433 L1017.77 682.433 L1017.21 682.433 L1016.65 682.433 L1016.09 682.433 L1015.53 682.433 L1014.97 682.433 L1014.41 682.433 L1013.85 682.433 L1013.29 682.433 L1012.73 682.433 L1012.18 682.433 L1011.62 682.433 L1011.06 682.433 L1010.5 682.433 L1009.94 682.433 L1009.38 682.433 L1008.82 682.433 L1008.26 682.433 L1007.7 682.433 L1007.14 682.433 L1006.58 682.433 L1006.02 682.433 L1005.46 682.433 L1004.91 682.433 L1004.35 682.433 L1003.79 682.433 L1003.23 682.433 L1002.67 682.433 L1002.11 682.433 L1001.55 682.433 L1000.99 682.433 L1000.43 682.433 L999.872 682.433 L999.313 682.433 L998.754 682.433 L998.194 682.433 L997.635 682.433 L997.076 682.433 L996.517 682.433 L995.957 682.433 L995.398 682.433 L994.839 682.433 L994.28 682.433 L993.72 682.433 L993.161 682.433 L992.602 682.433 L992.043 682.433 L991.483 682.433 L990.924 682.433 L990.365 682.433 L989.806 682.433 L989.246 682.433 L988.687 682.433 L988.128 682.433 L987.569 682.433 L987.009 682.433 L986.45 682.433 L985.891 682.433 L985.332 682.433 L984.772 682.433 L984.213 682.433 L983.654 682.433 L983.095 682.433 L982.535 682.433 L981.976 682.433 L981.417 682.433 L980.858 682.433 L980.298 682.433 L979.739 682.433 L979.18 682.433 L978.621 682.433 L978.061 682.433 L977.502 682.433 L976.943 682.433 L976.384 682.433 L975.824 682.433 L975.265 682.433 L974.706 682.433 L974.147 682.433 L973.587 682.433 L973.028 682.433 L972.469 682.433 L971.91 682.433 L971.35 682.433 L970.791 682.433 L970.232 682.433 L969.673 682.433 L969.113 682.433 L968.554 682.433 L967.995 682.433 L967.436 682.433 L966.876 682.433 L966.317 682.433 L965.758 682.433 L965.199 682.433 L964.639 682.433 L964.08 682.433 L963.521 682.433 L962.962 682.433 L962.402 682.433 L961.843 682.433 L961.284 682.433 L960.725 682.433 L960.165 682.433 L959.606 682.433 L959.047 682.433 L958.488 682.433 L957.928 682.433 L957.369 682.433 L956.81 682.433 L956.251 682.433 L955.691 682.433 L955.132 682.433 L954.573 682.433 L954.014 682.433 L953.454 682.433 L952.895 682.433 L952.336 682.433 L951.777 682.433 L951.217 682.433 L950.658 682.433 L950.099 682.433 L949.54 682.433 L948.98 682.433 L948.421 682.433 L947.862 682.433 L947.303 682.433 L946.743 682.433 L946.184 682.433 L945.625 682.433 L945.066 682.433 L944.506 682.433 L943.947 682.433 L943.388 682.433 L942.829 682.433 L942.269 682.433 L941.71 682.433 L941.151 682.433 L940.592 682.433 L940.032 682.433 L939.473 682.433 L938.914 682.433 L938.355 682.433 L937.795 682.433 L937.236 682.433 L936.677 682.433 L936.118 682.433 L935.558 682.433 L934.999 682.433 L934.44 682.433 L933.881 682.433 L933.321 682.433 L932.762 682.433 L932.203 682.433 L931.644 682.433 L931.084 682.433 L930.525 682.433 L929.966 682.433 L929.406 682.433 L928.847 682.433 L928.288 682.433 L927.729 682.433 L927.169 682.433 L926.61 682.433 L926.051 682.433 L925.492 682.433 L924.932 682.433 L924.373 682.433 L923.814 682.433 L923.255 682.433 L922.695 682.433 L922.136 682.433 L921.577 682.433 L921.018 682.433 L920.458 682.433 L919.899 682.433 L919.34 682.433 L918.781 682.433 L918.221 682.433 L917.662 682.433 L917.103 682.433 L916.544 682.433 L915.984 682.433 L915.425 682.433 L914.866 682.433 L914.307 682.433 L913.747 682.433 L913.188 682.433 L912.629 682.433 L912.07 682.433 L911.51 682.433 L910.951 682.433 L910.392 682.433 L909.833 682.433 L909.273 682.433 L908.714 682.433 L908.155 682.433 L907.596 682.433 L907.036 682.433 L906.477 682.433 L905.918 682.433 L905.359 682.433 L904.799 682.433 L904.24 682.433 L903.681 682.433 L903.122 682.433 L902.562 682.433 L902.003 682.433 L901.444 682.433 L900.885 682.433 L900.325 682.433 L899.766 682.433 L899.207 682.433 L898.648 682.433 L898.088 682.433 L897.529 682.433 L896.97 682.433 L896.411 682.433 L895.851 682.433 L895.292 682.433 L894.733 682.433 L894.174 682.433 L893.614 682.433 L893.055 682.433 L892.496 682.433 L891.937 682.433 L891.377 682.433 L890.818 682.433 L890.259 682.433 L889.7 682.433 L889.14 682.433 L888.581 682.433 L888.022 682.433 L887.463 682.433 L886.903 682.433 L886.344 682.433 L885.785 682.433 L885.226 682.433 L884.666 682.433 L884.107 682.433 L883.548 682.433 L882.989 682.433 L882.429 682.433 L881.87 682.433 L881.311 682.433 L880.752 682.433 L880.192 682.433 L879.633 682.433 L879.074 682.433 L878.515 682.433 L877.955 682.433 L877.396 682.433 L876.837 682.433 L876.278 682.433 L875.718 682.433 L875.159 682.433 L874.6 682.433 L874.041 682.433 L873.481 682.433 L872.922 682.433 L872.363 682.433 L871.804 682.433 L871.244 682.433 L870.685 682.433 L870.126 682.433 L869.567 682.433 L869.007 682.433 L868.448 682.433 L867.889 682.433 L867.33 682.433 L866.77 682.433 L866.211 682.433 L865.652 682.433 L865.093 682.433 L864.533 682.433 L863.974 682.433 L863.415 682.433 L862.856 682.433 L862.296 682.433 L861.737 682.433 L861.178 682.433 L860.619 682.433 L860.059 682.433 L859.5 682.433 L858.941 682.433 L858.382 682.433 L857.822 682.433 L857.263 682.433 L856.704 682.433 L856.145 682.433 L855.585 682.433 L855.026 682.433 L854.467 682.433 L853.908 682.433 L853.348 682.433 L852.789 682.433 L852.23 682.433 L851.671 682.433 L851.111 682.433 L850.552 682.433 L849.993 682.433 L849.434 682.433 L848.874 682.433 L848.315 682.433 L847.756 682.433 L847.197 682.433 L846.637 682.433 L846.078 682.433 L845.519 682.433 L844.96 682.433 L844.4 682.433 L843.841 682.433 L843.282 682.433 L842.723 682.433 L842.163 682.433 L841.604 682.433 L841.045 682.433 L840.486 682.433 L839.926 682.433 L839.367 682.433 L838.808 682.433 L838.249 682.433 L837.689 682.433 L837.13 682.433 L836.571 682.433 L836.012 682.433 L835.452 682.433 L834.893 682.433 L834.334 682.433 L833.775 682.433 L833.215 682.433 L832.656 682.433 L832.097 682.433 L831.538 682.433 L830.978 682.433 L830.419 682.433 L829.86 682.433 L829.301 682.433 L828.741 682.433 L828.182 682.433 L827.623 682.433 L827.064 682.433 L826.504 682.433 L825.945 682.433 L825.386 682.433 L824.827 682.433 L824.267 682.433 L823.708 682.433 L823.149 682.433 L822.59 682.433 L822.03 682.433 L821.471 682.433 L820.912 682.433 L820.353 682.433 L819.793 682.433 L819.234 682.433 L818.675 682.433 L818.116 682.433 L817.556 682.433 L816.997 682.433 L816.438 682.433 L815.879 682.433 L815.319 682.433 L814.76 682.433 L814.201 682.433 L813.642 682.433 L813.082 682.433 L812.523 682.433 L811.964 682.433 L811.405 682.433 L810.845 682.433 L810.286 682.433 L809.727 682.433 L809.168 682.433 L808.608 682.433 L808.049 682.433 L807.49 682.433 L806.931 682.433 L806.371 682.433 L805.812 682.433 L805.253 682.433 L804.693 682.433 L804.134 682.433 L803.575 682.433 L803.016 682.433 L802.456 682.433 L801.897 682.433 L801.338 682.433 L800.779 682.433 L800.219 682.433 L799.66 682.433 L799.101 682.433 L798.542 682.433 L797.982 682.433 L797.423 682.433 L796.864 682.433 L796.305 682.433 L795.745 682.433 L795.186 682.433 L794.627 682.433 L794.068 682.433 L793.508 682.433 L792.949 682.433 L792.39 682.433 L791.831 682.433 L791.271 682.433 L790.712 682.433 L790.153 682.433 L789.594 682.433 L789.034 682.433 L788.475 682.433 L787.916 682.433 L787.357 682.433 L786.797 682.433 L786.238 682.433 L785.679 682.433 L785.12 682.433 L784.56 682.433 L784.001 682.433 L783.442 682.433 L782.883 682.433 L782.323 682.433 L781.764 682.433 L781.205 682.433 L780.646 682.433 L780.086 682.433 L779.527 682.433 L778.968 682.433 L778.409 682.433 L777.849 682.433 L777.29 682.433 L776.731 682.433 L776.172 682.433 L775.612 682.433 L775.053 682.433 L774.494 682.433 L773.935 682.433 L773.375 682.433 L772.816 682.433 L772.257 682.433 L771.698 682.433 L771.138 682.433 L770.579 682.433 L770.02 682.433 L769.461 682.433 L768.901 682.433 L768.342 682.433 L767.783 682.433 L767.224 682.433 L766.664 682.433 L766.105 682.433 L765.546 682.433 L764.987 682.433 L764.427 682.433 L763.868 682.433 L763.309 682.433 L762.75 682.433 L762.19 682.433 L761.631 682.433 L761.072 682.433 L760.513 682.433 L759.953 682.433 L759.394 682.433 L758.835 682.433 L758.276 682.433 L757.716 682.433 L757.157 682.433 L756.598 682.433 L756.039 682.433 L755.479 682.433 L754.92 682.433 L754.361 682.433 L753.802 682.433 L753.242 682.433 L752.683 682.433 L752.124 682.433 L751.565 682.433 L751.005 682.433 L750.446 682.433 L749.887 682.433 L749.328 682.433 L748.768 682.433 L748.209 682.433 L747.65 682.433 L747.091 682.433 L746.531 682.433 L745.972 682.433 L745.413 682.433 L744.854 682.433 L744.294 682.433 L743.735 682.433 L743.176 682.433 L742.617 682.433 L742.057 682.433 L741.498 682.433 L740.939 682.433 L740.38 682.433 L739.82 682.433 L739.261 682.433 L738.702 682.433 L738.143 682.433 L737.583 682.433 L737.024 682.433 L736.465 682.433 L735.906 682.433 L735.346 682.433 L734.787 682.433 L734.228 682.433 L733.669 682.433 L733.109 682.433 L732.55 682.433 L731.991 682.433 L731.432 682.433 L730.872 682.433 L730.313 682.433 L729.754 682.433 L729.195 682.433 L728.635 682.433 L728.076 682.433 L727.517 682.433 L726.958 682.433 L726.398 682.433 L725.839 682.433 L725.28 682.433 L724.721 682.433 L724.161 682.433 L723.602 682.433 L723.043 682.433 L722.484 682.433 L721.924 682.433 L721.365 682.433 L720.806 682.433 L720.247 682.433  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.521 720.806,687.521 721.365,687.521 721.924,687.521 722.484,687.521 723.043,687.521 723.602,687.521 724.161,687.521 724.721,687.521 725.28,687.521 725.839,687.521 726.398,687.521 726.958,687.521 727.517,687.521 728.076,687.521 728.635,687.521 729.195,687.521 729.754,687.521 730.313,687.521 730.872,687.521 731.432,687.521 731.991,687.521 732.55,687.521 733.109,687.521 733.669,687.521 734.228,687.521 734.787,687.521 735.346,687.521 735.906,687.521 736.465,687.521 737.024,687.521 737.583,687.521 738.143,687.521 738.702,687.521 739.261,687.521 739.82,687.521 740.38,687.521 740.939,687.521 741.498,687.521 742.057,687.521 742.617,687.521 743.176,687.521 743.735,687.521 744.294,687.521 744.854,687.521 745.413,687.521 745.972,687.521 746.531,687.521 747.091,687.521 747.65,687.521 748.209,687.521 748.768,687.521 749.328,687.521 749.887,687.521 750.446,687.521 751.005,687.521 751.565,687.521 752.124,687.521 752.683,687.521 753.242,687.521 753.802,687.521 754.361,687.521 754.92,687.521 755.479,687.521 756.039,687.521 756.598,687.521 757.157,687.521 757.716,687.521 758.276,687.521 758.835,687.521 759.394,687.521 759.953,687.521 760.513,687.521 761.072,687.521 761.631,687.521 762.19,687.521 762.75,687.521 763.309,687.521 763.868,687.521 764.427,687.521 764.987,687.521 765.546,687.521 766.105,687.521 766.664,687.521 767.224,687.521 767.783,687.521 768.342,687.521 768.901,687.521 769.461,687.521 770.02,687.521 770.579,687.521 771.138,687.521 771.698,687.521 772.257,687.521 772.816,687.521 773.375,687.521 773.935,687.521 774.494,687.521 775.053,687.521 775.612,687.521 776.172,687.521 776.731,687.521 777.29,687.521 777.849,687.521 778.409,687.521 778.968,687.521 779.527,687.521 780.086,687.521 780.646,687.521 781.205,687.521 781.764,687.521 782.323,687.521 782.883,687.521 783.442,687.521 784.001,687.521 784.56,687.521 785.12,687.521 785.679,687.521 786.238,687.521 786.797,687.521 787.357,687.521 787.916,687.521 788.475,687.521 789.034,687.521 789.594,687.521 790.153,687.521 790.712,687.521 791.271,687.521 791.831,687.521 792.39,687.521 792.949,687.521 793.508,687.521 794.068,687.521 794.627,687.521 795.186,687.521 795.745,687.521 796.305,687.521 796.864,687.521 797.423,687.521 797.982,687.521 798.542,687.521 799.101,687.521 799.66,687.521 800.219,687.521 800.779,687.521 801.338,687.521 801.897,687.521 802.456,687.521 803.016,687.521 803.575,687.521 804.134,687.521 804.693,687.521 805.253,687.521 805.812,687.521 806.371,687.521 806.931,687.521 807.49,687.521 808.049,687.521 808.608,687.521 809.168,687.521 809.727,687.521 810.286,687.521 810.845,687.521 811.405,687.521 811.964,687.521 812.523,687.521 813.082,687.521 813.642,687.521 814.201,687.521 814.76,687.521 815.319,687.521 815.879,687.521 816.438,687.521 816.997,687.521 817.556,687.521 818.116,687.521 818.675,687.521 819.234,687.521 819.793,687.521 820.353,687.521 820.912,687.521 821.471,687.521 822.03,687.521 822.59,687.521 823.149,687.521 823.708,687.521 824.267,687.521 824.827,687.521 825.386,687.521 825.945,687.521 826.504,687.521 827.064,687.521 827.623,687.521 828.182,687.521 828.741,687.521 829.301,687.521 829.86,687.521 830.419,687.521 830.978,687.521 831.538,687.521 832.097,687.521 832.656,687.521 833.215,687.521 833.775,687.521 834.334,687.521 834.893,687.521 835.452,687.521 836.012,687.521 836.571,687.521 837.13,687.521 837.689,687.521 838.249,687.521 838.808,687.521 839.367,687.521 839.926,687.521 840.486,687.521 841.045,687.521 841.604,687.521 842.163,687.521 842.723,687.521 843.282,687.521 843.841,687.521 844.4,687.521 844.96,687.521 845.519,687.521 846.078,687.521 846.637,687.521 847.197,687.521 847.756,687.521 848.315,687.521 848.874,687.521 849.434,687.521 849.993,687.521 850.552,687.521 851.111,687.521 851.671,687.521 852.23,687.521 852.789,687.521 853.348,687.521 853.908,687.521 854.467,687.521 855.026,687.521 855.585,687.521 856.145,687.521 856.704,687.521 857.263,687.521 857.822,687.521 858.382,687.521 858.941,687.521 859.5,687.521 860.059,687.521 860.619,687.521 861.178,687.521 861.737,687.521 862.296,687.521 862.856,687.521 863.415,687.521 863.974,687.521 864.533,687.521 865.093,687.521 865.652,687.521 866.211,687.521 866.77,687.521 867.33,687.521 867.889,687.521 868.448,687.521 869.007,687.521 869.567,687.521 870.126,687.521 870.685,687.521 871.244,687.521 871.804,687.521 872.363,687.521 872.922,687.521 873.481,687.521 874.041,687.521 874.6,687.521 875.159,687.521 875.718,687.521 876.278,687.521 876.837,687.521 877.396,687.521 877.955,687.521 878.515,687.521 879.074,687.521 879.633,687.521 880.192,687.521 880.752,687.521 881.311,687.521 881.87,687.521 882.429,687.521 882.989,687.521 883.548,687.521 884.107,687.521 884.666,687.521 885.226,687.521 885.785,687.521 886.344,687.521 886.903,687.521 887.463,687.521 888.022,687.521 888.581,687.521 889.14,687.521 889.7,687.521 890.259,687.521 890.818,687.521 891.377,687.521 891.937,687.521 892.496,687.521 893.055,687.521 893.614,687.521 894.174,687.521 894.733,687.521 895.292,687.521 895.851,687.521 896.411,687.521 896.97,687.521 897.529,687.521 898.088,687.521 898.648,687.521 899.207,687.521 899.766,687.521 900.325,687.521 900.885,687.521 901.444,687.521 902.003,687.521 902.562,687.521 903.122,687.521 903.681,687.521 904.24,687.521 904.799,687.521 905.359,687.521 905.918,687.521 906.477,687.521 907.036,687.521 907.596,687.521 908.155,687.521 908.714,687.521 909.273,687.521 909.833,687.521 910.392,687.521 910.951,687.521 911.51,687.521 912.07,687.521 912.629,687.521 913.188,687.521 913.747,687.521 914.307,687.521 914.866,687.521 915.425,687.521 915.984,687.521 916.544,687.521 917.103,687.521 917.662,687.521 918.221,687.521 918.781,687.521 919.34,687.521 919.899,687.521 920.458,687.521 921.018,687.521 921.577,687.521 922.136,687.521 922.695,687.521 923.255,687.521 923.814,687.521 924.373,687.521 924.932,687.521 925.492,687.521 926.051,687.521 926.61,687.521 927.169,687.521 927.729,687.521 928.288,687.521 928.847,687.521 929.406,687.521 929.966,687.521 930.525,687.521 931.084,687.521 931.644,687.521 932.203,687.521 932.762,687.521 933.321,687.521 933.881,687.521 934.44,687.521 934.999,687.521 935.558,687.521 936.118,687.521 936.677,687.521 937.236,687.521 937.795,687.521 938.355,687.521 938.914,687.521 939.473,687.521 940.032,687.521 940.592,687.521 941.151,687.521 941.71,687.521 942.269,687.521 942.829,687.521 943.388,687.521 943.947,687.521 944.506,687.521 945.066,687.521 945.625,687.521 946.184,687.521 946.743,687.521 947.303,687.521 947.862,687.521 948.421,687.521 948.98,687.521 949.54,687.521 950.099,687.521 950.658,687.521 951.217,687.521 951.777,687.521 952.336,687.521 952.895,687.521 953.454,687.521 954.014,687.521 954.573,687.521 955.132,687.521 955.691,687.521 956.251,687.521 956.81,687.521 957.369,687.521 957.928,687.521 958.488,687.521 959.047,687.521 959.606,687.521 960.165,687.521 960.725,687.521 961.284,687.521 961.843,687.521 962.402,687.521 962.962,687.521 963.521,687.521 964.08,687.521 964.639,687.521 965.199,687.521 965.758,687.521 966.317,687.521 966.876,687.521 967.436,687.521 967.995,687.521 968.554,687.521 969.113,687.521 969.673,687.521 970.232,687.521 970.791,687.521 971.35,687.521 971.91,687.521 972.469,687.521 973.028,687.521 973.587,687.521 974.147,687.521 974.706,687.521 975.265,687.521 975.824,687.521 976.384,687.521 976.943,687.521 977.502,687.521 978.061,687.521 978.621,687.521 979.18,687.521 979.739,687.521 980.298,687.521 980.858,687.521 981.417,687.521 981.976,687.521 982.535,687.521 983.095,687.521 983.654,687.521 984.213,687.521 984.772,687.521 985.332,687.521 985.891,687.521 986.45,687.521 987.009,687.521 987.569,687.521 988.128,687.521 988.687,687.521 989.246,687.521 989.806,687.521 990.365,687.521 990.924,687.521 991.483,687.521 992.043,687.521 992.602,687.521 993.161,687.521 993.72,687.521 994.28,687.521 994.839,687.521 995.398,687.521 995.957,687.521 996.517,687.521 997.076,687.521 997.635,687.521 998.194,687.521 998.754,687.521 999.313,687.521 999.872,687.521 1000.43,687.521 1000.99,687.521 1001.55,687.521 1002.11,687.521 1002.67,687.521 1003.23,687.521 1003.79,687.521 1004.35,687.521 1004.91,687.521 1005.46,687.521 1006.02,687.521 1006.58,687.521 1007.14,687.521 1007.7,687.521 1008.26,687.521 1008.82,687.521 1009.38,687.521 1009.94,687.521 1010.5,687.521 1011.06,687.521 1011.62,687.521 1012.18,687.521 1012.73,687.521 1013.29,687.521 1013.85,687.521 1014.41,687.521 1014.97,687.521 1015.53,687.521 1016.09,687.521 1016.65,687.521 1017.21,687.521 1017.77,687.521 1018.33,687.521 1018.89,687.521 1019.45,687.521 1020.01,687.521 1020.56,687.521 1021.12,687.521 1021.68,687.521 1022.24,687.521 1022.8,687.521 1023.36,687.521 1023.92,687.521 1024.48,687.521 1025.04,687.521 1025.6,687.521 1026.16,687.521 1026.72,687.521 1027.28,687.521 1027.83,687.521 1028.39,687.521 1028.95,687.521 1029.51,687.521 1030.07,687.521 1030.63,687.521 1031.19,687.521 1031.75,687.521 1032.31,687.521 1032.87,687.521 1033.43,687.521 1033.99,687.521 1034.55,687.521 1035.1,687.521 1035.66,687.521 1036.22,687.521 1036.78,687.521 1037.34,687.521 1037.9,687.521 1038.46,687.521 1039.02,687.521 1039.58,687.521 1040.14,687.521 1040.7,687.521 1041.26,687.521 1041.82,687.521 1042.38,687.521 1042.93,687.521 1043.49,687.521 1044.05,687.521 1044.61,687.521 1045.17,687.521 1045.73,687.521 1046.29,687.521 1046.85,687.521 1047.41,687.521 1047.97,687.521 1048.53,687.521 1049.09,687.521 1049.65,687.521 1050.2,687.521 1050.76,687.521 1051.32,687.521 1051.88,687.521 1052.44,687.521 1053,687.521 1053.56,687.521 1054.12,687.521 1054.68,687.521 1055.24,687.521 1055.8,687.521 1056.36,687.521 1056.92,687.521 1057.48,687.521 1058.03,687.521 1058.59,687.521 1059.15,687.521 1059.71,687.521 1060.27,687.521 1060.83,687.521 1061.39,687.521 1061.95,687.521 1062.51,687.521 1063.07,687.521 1063.63,687.521 1064.19,687.521 1064.75,687.521 1065.3,687.521 1065.86,687.521 1066.42,687.521 1066.98,687.521 1067.54,687.521 1068.1,687.521 1068.66,687.521 1069.22,687.521 1069.78,687.521 1070.34,687.521 1070.9,687.521 1071.46,687.521 1072.02,687.521 1072.57,687.521 1073.13,687.521 1073.69,687.521 1074.25,687.521 1074.81,687.521 1075.37,687.521 1075.93,687.521 1076.49,687.521 1077.05,687.521 1077.61,687.521 1078.17,687.521 1078.73,687.521 1079.29,687.521 1079.85,687.521 1080.4,687.521 1080.96,687.521 1081.52,687.521 1082.08,687.521 1082.64,687.521 1083.2,687.521 1083.76,687.521 1084.32,687.521 1084.88,687.521 1085.44,687.521 1086,687.521 1086.56,687.521 1087.12,687.521 1087.67,687.521 1088.23,687.521 1088.79,687.521 1089.35,687.521 1089.91,687.521 1090.47,687.521 1091.03,687.521 1091.59,687.521 1092.15,687.521 1092.71,687.521 1093.27,687.521 1093.83,687.521 1094.39,687.521 1094.94,687.521 1095.5,687.521 1096.06,687.521 1096.62,687.521 1097.18,687.521 1097.74,687.521 1098.3,687.521 1098.86,687.521 1099.42,687.521 1099.98,687.521 1100.54,687.521 1101.1,687.521 1101.66,687.521 1102.22,687.521 1102.77,687.521 1103.33,687.521 1103.89,687.521 1104.45,687.521 1105.01,687.521 1105.57,687.521 1106.13,687.521 1106.69,687.521 1107.25,687.521 1107.81,687.521 1108.37,687.521 1108.93,687.521 1109.49,687.521 1110.04,687.521 1110.6,687.521 1111.16,687.521 1111.72,687.521 1112.28,687.521 1112.84,687.521 1113.4,687.521 1113.96,687.521 1114.52,687.521 1115.08,687.521 1115.64,687.521 1116.2,687.521 1116.76,687.521 1117.31,687.521 1117.87,687.521 1118.43,687.521 1118.99,687.521 1119.55,687.521 1120.11,687.521 1120.67,687.521 1121.23,687.521 1121.79,687.521 1122.35,687.521 1122.91,687.521 1123.47,687.521 1124.03,687.521 1124.59,687.521 1125.14,687.521 1125.7,687.521 1126.26,687.521 1126.82,687.521 1127.38,687.521 1127.94,687.521 1128.5,687.521 1129.06,687.521 1129.62,687.521 1130.18,687.521 1130.74,687.521 1131.3,687.521 1131.86,687.521 1132.41,687.521 1132.97,687.521 1133.53,687.521 1134.09,687.521 1134.65,687.521 1135.21,687.521 1135.77,687.521 1136.33,687.521 1136.89,687.521 1137.45,687.521 1138.01,687.521 1138.57,687.521 1139.13,687.521 1139.68,687.521 1140.24,687.521 1140.8,687.521 1141.36,687.521 1141.92,687.521 1142.48,687.521 1143.04,687.521 1143.6,687.521 1144.16,687.521 1144.72,687.521 1145.28,687.521 1145.84,687.521 1146.4,687.521 1146.96,687.521 1147.51,687.521 1148.07,687.521 1148.63,687.521 1149.19,687.521 1149.75,687.521 1150.31,687.521 1150.87,687.521 1151.43,687.521 1151.99,687.521 1152.55,687.521 1153.11,687.521 1153.67,687.521 1154.23,687.521 1154.78,687.521 1155.34,687.521 1155.9,687.521 1156.46,687.521 1157.02,687.521 1157.58,687.521 1158.14,687.521 1158.7,687.521 1159.26,687.521 1159.82,687.521 1160.38,687.521 1160.94,687.521 1161.5,687.521 1162.05,687.521 1162.61,687.521 1163.17,687.521 1163.73,687.521 1164.29,687.521 1164.85,687.521 1165.41,687.521 1165.97,687.521 1166.53,687.521 1167.09,687.521 1167.65,687.521 1168.21,687.521 1168.77,687.521 1169.33,687.521 1169.88,687.521 1170.44,687.521 1171,687.521 1171.56,687.521 1172.12,687.521 1172.68,687.521 1173.24,687.521 1173.8,687.521 1174.36,687.521 1174.92,687.521 1175.48,687.521 1176.04,687.521 1176.6,687.521 1177.15,687.521 1177.71,687.521 1178.27,687.521 1178.83,687.521 1179.39,687.521 1179.95,687.521 1180.51,687.521 1181.07,687.521 1181.63,687.521 1182.19,687.521 1182.75,687.521 1183.31,687.521 1183.87,687.521 1184.43,687.521 1184.98,687.521 1185.54,687.521 1186.1,687.521 1186.66,687.521 1187.22,687.521 1187.78,687.521 1188.34,687.521 1188.9,687.521 1189.46,687.521 1190.02,687.521 1190.58,687.521 1191.14,687.521 1191.7,687.521 1192.25,687.521 1192.81,687.521 1193.37,687.521 1193.93,687.521 1194.49,687.521 1195.05,687.521 1195.61,687.521 1196.17,687.521 1196.73,687.521 1197.29,687.521 1197.85,687.521 1198.41,687.521 1198.97,687.521 1199.52,687.521 1200.08,687.521 1200.64,687.521 1201.2,687.521 1201.76,687.521 1202.32,687.521 1202.88,687.521 1203.44,687.521 1204,687.521 1204.56,687.521 1205.12,687.521 1205.68,687.521 1206.24,687.521 1206.8,687.521 1207.35,687.521 1207.91,687.521 1208.47,687.521 1209.03,687.521 1209.59,687.521 1210.15,687.521 1210.71,687.521 1211.27,687.521 1211.83,687.521 1212.39,687.521 1212.95,687.521 1213.51,687.521 1214.07,687.521 1214.62,687.521 1215.18,687.521 1215.74,687.521 1216.3,687.521 1216.86,687.521 1217.42,687.521 1217.98,687.521 1218.54,687.521 1219.1,687.521 1219.66,687.521 1220.22,687.521 1220.78,687.521 1221.34,687.521 1221.89,687.521 1222.45,687.521 1223.01,687.521 1223.57,687.521 1224.13,687.521 1224.69,687.521 1225.25,687.521 1225.81,687.521 1226.37,687.521 1226.93,687.521 1227.49,687.521 1228.05,687.521 1228.61,687.521 1229.17,687.521 1229.72,687.521 1230.28,687.521 1230.84,687.521 1231.4,687.521 1231.96,687.521 1232.52,687.521 1233.08,687.521 1233.64,687.521 1234.2,687.521 1234.76,687.521 1235.32,687.521 1235.88,687.521 1236.44,687.521 1236.99,687.521 1237.55,687.521 1238.11,687.521 1238.67,687.521 1239.23,687.521 1239.79,687.521 1240.35,687.521 1240.91,687.521 1241.47,687.521 1242.03,687.521 1242.59,687.521 1243.15,687.521 1243.71,687.521 1244.26,687.521 1244.82,687.521 1245.38,687.521 1245.94,687.521 1246.5,687.521 1247.06,687.521 1247.62,687.521 1248.18,687.521 1248.74,687.521 1249.3,687.521 1249.86,687.521 1250.42,687.521 1250.98,687.521 1251.54,687.521 1252.09,687.521 1252.65,687.521 1253.21,687.521 1253.77,687.521 1254.33,687.521 1254.89,687.521 1255.45,687.521 1256.01,687.521 1256.57,687.521 1257.13,687.521 1257.69,687.521 1258.25,687.521 1258.81,687.521 1259.36,687.521 1259.92,687.521 1260.48,687.521 1261.04,687.521 1261.6,687.521 1262.16,687.521 1262.72,687.521 1263.28,687.521 1263.84,687.521 1264.4,687.521 1264.96,687.521 1265.52,687.521 1266.08,687.521 1266.63,687.521 1267.19,687.521 1267.75,687.521 1268.31,687.521 1268.87,687.521 1269.43,687.521 1269.99,687.521 1270.55,687.521 1271.11,687.521 1271.67,687.521 1272.23,687.521 1272.79,687.521 1273.35,687.521 1273.91,687.521 1274.46,687.521 1275.02,687.521 1275.58,687.521 1276.14,687.521 1276.7,687.521 1277.26,687.521 1277.82,687.521 1278.38,687.521 1278.94,687.521 1279.5,687.521 1280.06,687.521 1280.62,687.521 1281.18,687.521 1281.73,687.521 1282.29,687.521 1282.85,687.521 1283.41,687.521 1283.97,687.521 1284.53,687.521 1285.09,687.521 1285.65,687.521 1286.21,687.521 1286.77,687.521 1287.33,687.521 1287.89,687.521 1288.45,687.521 1289,687.521 1289.56,687.521 1290.12,687.521 1290.68,687.521 1291.24,687.521 1291.8,687.521 1292.36,687.521 1292.92,687.521 1293.48,687.521 1294.04,687.521 1294.6,687.521 1295.16,687.521 1295.72,687.521 1296.28,687.521 1296.83,687.521 1297.39,687.521 1297.95,687.521 1298.51,687.521 1299.07,687.521 1299.63,687.521 1300.19,687.521 1300.75,687.521 1301.31,687.521 1301.87,687.521 1302.43,687.521 1302.99,687.521 1303.55,687.521 1304.1,687.521 1304.66,687.521 1305.22,687.521 1305.78,687.521 1306.34,687.521 1306.9,687.521 1307.46,687.521 1308.02,687.521 1308.58,687.521 1309.14,687.521 1309.7,687.521 1310.26,687.521 1310.82,687.521 1311.38,687.521 1311.93,687.521 1312.49,687.521 1313.05,687.521 1313.61,687.521 1314.17,687.521 1314.73,687.521 1315.29,687.521 1315.85,687.521 1316.41,687.521 1316.97,687.521 1317.53,687.521 1318.09,687.521 1318.65,687.521 1319.2,687.521 1319.76,687.521 1320.32,687.521 1320.88,687.521 1321.44,687.521 1322,687.521 1322.56,687.521 1323.12,687.521 1323.68,687.521 1324.24,687.521 1324.8,687.521 1325.36,687.521 1325.92,687.521 1326.47,687.521 1327.03,687.521 1327.59,687.521 1328.15,687.521 1328.71,687.521 1329.27,687.521 1329.83,687.521 1330.39,687.521 1330.95,687.521 1331.51,687.521 1332.07,687.521 1332.63,687.521 1333.19,687.521 1333.75,687.521 1334.3,687.521 1334.86,687.521 1335.42,687.521 1335.98,687.521 1336.54,687.521 1337.1,687.521 1337.66,687.521 1338.22,687.521 1338.78,687.521 1339.34,687.521 1339.9,687.521 1340.46,687.521 1341.02,687.521 1341.57,687.521 1342.13,687.521 1342.69,687.521 1343.25,687.521 1343.81,687.521 1344.37,687.521 1344.93,687.521 1345.49,687.521 1346.05,687.521 1346.61,687.521 1347.17,687.521 1347.73,687.521 1348.29,687.521 1348.84,687.521 1349.4,687.521 1349.96,687.521 1350.52,687.521 1351.08,687.521 1351.64,687.521 1352.2,687.521 1352.76,687.521 1353.32,687.521 1353.88,687.521 1354.44,687.521 1355,687.521 1355.56,687.521 1356.12,687.521 1356.67,687.521 1357.23,687.521 1357.79,687.521 1358.35,687.521 1358.91,687.521 1359.47,687.521 1360.03,687.521 1360.59,687.521 1361.15,687.521 1361.71,687.521 1362.27,687.521 1362.83,687.521 1363.39,687.521 1363.94,687.521 1364.5,687.521 1365.06,687.521 1365.62,687.521 1366.18,687.521 1366.74,687.521 1367.3,687.521 1367.86,687.521 1368.42,687.521 1368.98,687.521 1369.54,687.521 1370.1,687.521 1370.66,687.521 1371.21,687.521 1371.77,687.521 1372.33,687.521 1372.89,687.521 1373.45,687.521 1374.01,687.521 1374.57,687.521 1375.13,687.521 1375.69,687.521 1376.25,687.521 1376.81,687.521 1377.37,687.521 1377.93,687.521 1378.49,687.521 1379.04,687.521 1379.6,687.521 1380.16,687.521 1380.72,687.521 1381.28,687.521 1381.84,687.521 1382.4,687.521 1382.96,687.521 1383.52,687.521 1384.08,687.521 1384.64,687.521 1385.2,687.521 1385.76,687.521 1386.31,687.521 1386.87,687.521 1387.43,687.521 1387.99,687.521 1388.55,687.521 1389.11,687.521 1389.67,687.521 1390.23,687.521 1390.79,687.521 1391.35,687.521 1391.91,687.521 1392.47,687.521 1393.03,687.521 1393.58,687.521 1394.14,687.521 1394.7,687.521 1395.26,687.521 1395.82,687.521 1396.38,687.521 1396.94,687.521 1397.5,687.521 1398.06,687.521 1398.62,687.521 1399.18,687.521 1399.74,687.521 1400.3,687.521 1400.86,687.521 1401.41,687.521 1401.97,687.521 1402.53,687.521 1403.09,687.521 1403.65,687.521 1404.21,687.521 1404.77,687.521 1405.33,687.521 1405.89,687.521 1406.45,687.521 1407.01,687.521 1407.57,687.521 1408.13,687.521 1408.68,687.521 1409.24,687.521 1409.8,687.521 1410.36,687.521 1410.92,687.521 1411.48,687.521 1412.04,687.521 1412.6,687.521 1413.16,687.521 1413.72,687.521 1414.28,687.521 1414.84,687.521 1415.4,687.521 1415.95,687.521 1416.51,687.521 1417.07,687.521 1417.63,687.521 1418.19,687.521 1418.75,687.521 1419.31,687.521 1419.87,687.521 1420.43,687.521 1420.99,687.521 1421.55,687.521 1422.11,687.521 1422.67,687.521 1423.23,687.521 1423.78,687.521 1424.34,687.521 1424.9,687.521 1425.46,687.521 1426.02,687.521 1426.58,687.521 1427.14,687.521 1427.7,687.521 1428.26,687.521 1428.82,687.521 1429.38,687.521 1429.94,687.521 1430.5,687.521 1431.05,687.521 1431.61,687.521 1432.17,687.521 1432.73,687.521 1433.29,687.521 1433.85,687.521 1434.41,687.521 1434.97,687.521 1435.53,687.521 1436.09,687.521 1436.65,687.521 1437.21,687.521 1437.77,687.521 1438.33,687.521 1438.88,687.521 1439.44,687.521 1440,687.521 1440.56,687.521 1441.12,687.521 1441.68,687.521 1442.24,687.521 1442.8,687.521 1443.36,687.521 1443.92,687.521 1444.48,687.521 1445.04,687.521 1445.6,687.521 1446.15,687.521 1446.71,687.521 1447.27,687.521 1447.83,687.521 1448.39,687.521 1448.95,687.521 1449.51,687.521 1450.07,687.521 1450.63,687.521 1451.19,687.521 1451.75,687.521 1452.31,687.521 1452.87,687.521 1453.42,687.521 1453.98,687.521 1454.54,687.521 1455.1,687.521 1455.66,687.521 1456.22,687.521 1456.78,687.521 1457.34,687.521 1457.9,687.521 1458.46,687.521 1459.02,687.521 1459.58,687.521 1460.14,687.521 1460.7,687.521 1461.25,687.521 1461.81,687.521 1462.37,687.521 1462.93,687.521 1463.49,687.521 1464.05,687.521 1464.61,687.521 1465.17,687.521 1465.73,687.521 1466.29,687.521 1466.85,687.521 1467.41,687.521 1467.97,687.521 1468.52,687.521 1469.08,687.521 1469.64,687.521 1470.2,687.521 1470.76,687.521 1471.32,687.521 1471.88,687.521 1472.44,687.521 1473,687.521 1473.56,687.521 1474.12,687.521 1474.68,687.521 1475.24,687.521 1475.79,687.521 1476.35,687.521 1476.91,687.521 1477.47,687.521 1478.03,687.521 1478.59,687.521 1479.15,687.521 1479.71,687.521 1480.27,687.521 1480.83,687.521 1481.39,687.521 1481.95,687.521 1482.51,687.521 1483.07,687.521 1483.62,687.521 1484.18,687.521 1484.74,687.521 1485.3,687.521 1485.86,687.521 1486.42,687.521 1486.98,687.521 1487.54,687.521 1488.1,687.521 1488.66,687.521 1489.22,687.521 1489.78,687.521 1490.34,687.521 1490.89,687.521 1491.45,687.521 1492.01,687.521 1492.57,687.521 1493.13,687.521 1493.69,687.521 1494.25,687.521 1494.81,687.521 1495.37,687.521 1495.93,687.521 1496.49,687.521 1497.05,687.521 1497.61,687.521 1498.16,687.521 1498.72,687.521 1499.28,687.521 1499.84,687.521 1500.4,687.521 1500.96,687.521 1501.52,687.521 1502.08,687.521 1502.64,687.521 1503.2,687.521 1503.76,687.521 1504.32,687.521 1504.88,687.521 1505.44,687.521 1505.99,687.521 1506.55,687.521 1507.11,687.521 1507.67,687.521 1508.23,687.521 1508.79,687.521 1509.35,687.521 1509.91,687.521 1510.47,687.521 1511.03,687.521 1511.59,687.521 1512.15,687.521 1512.71,687.521 1513.26,687.521 1513.82,687.521 1514.38,687.521 1514.94,687.521 1515.5,687.521 1516.06,687.521 1516.62,687.521 1517.18,687.521 1517.74,687.521 1518.3,687.521 1518.86,687.521 1519.42,687.521 1519.98,687.521 1520.53,687.521 1521.09,687.521 1521.65,687.521 1522.21,687.521 1522.77,687.521 1523.33,687.521 1523.89,687.521 1524.45,687.521 1525.01,687.521 1525.57,687.521 1526.13,687.521 1526.69,687.521 1527.25,687.521 1527.81,687.521 1528.36,687.521 1528.92,687.521 1529.48,687.521 1530.04,687.521 1530.6,687.521 1531.16,687.521 1531.72,687.521 1532.28,687.521 1532.84,687.521 1533.4,687.521 1533.96,687.521 1534.52,687.521 1535.08,687.521 1535.63,687.521 1536.19,687.521 1536.75,687.521 1537.31,687.521 1537.87,687.521 1538.43,687.521 1538.99,687.521 1539.55,687.521 1540.11,687.521 1540.67,687.521 1541.23,687.521 1541.79,687.521 1542.35,687.521 1542.9,687.521 1543.46,687.521 1544.02,687.521 1544.58,687.521 1545.14,687.521 1545.7,687.521 1546.26,687.521 1546.82,687.521 1547.38,687.521 1547.94,687.521 1548.5,687.521 1549.06,687.521 1549.62,687.521 1550.18,687.521 1550.73,687.521 1551.29,687.521 1551.85,687.521 1552.41,687.521 1552.97,687.521 1553.53,687.521 1554.09,687.521 1554.65,687.521 1555.21,687.521 1555.77,687.521 1556.33,687.521 1556.89,687.521 1557.45,687.521 1558,687.521 1558.56,687.521 1559.12,687.521 1559.68,687.521 1560.24,687.521 1560.8,687.521 1561.36,687.521 1561.92,687.521 1562.48,687.521 1563.04,687.521 1563.6,687.521 1564.16,687.521 1564.72,687.521 1565.28,687.521 1565.83,687.521 1566.39,687.521 1566.95,687.521 1567.51,687.521 1568.07,687.521 1568.63,687.521 1569.19,687.521 1569.75,687.521 1570.31,687.521 1570.87,687.521 1571.43,687.521 1571.99,687.521 1572.55,687.521 1573.1,687.521 1573.66,687.521 1574.22,687.521 1574.78,687.521 1575.34,687.521 1575.9,687.521 1576.46,687.521 1577.02,687.521 1577.58,687.521 1578.14,687.521 1578.7,687.521 1579.26,687.521 1579.82,687.521 1580.37,687.521 1580.93,687.521 1581.49,687.521 1582.05,687.521 1582.61,687.521 1583.17,687.521 1583.73,687.521 1584.29,687.521 1584.85,687.521 1585.41,687.521 1585.97,687.521 1586.53,687.521 1587.09,687.521 1587.65,687.521 1588.2,687.521 1588.76,687.521 1589.32,687.521 1589.88,687.521 1590.44,687.521 1591,687.521 1591.56,687.521 1592.12,687.521 1592.68,687.521 1593.24,687.521 1593.8,687.521 1594.36,687.521 1594.92,687.521 1595.47,687.521 1596.03,687.521 1596.59,687.521 1597.15,687.521 1597.71,687.521 1598.27,687.521 1598.83,687.521 1599.39,687.521 1599.95,687.521 1600.51,687.521 1601.07,687.521 1601.63,687.521 1602.19,687.521 1602.74,687.521 1603.3,687.521 1603.86,687.521 1604.42,687.521 1604.98,687.521 1605.54,687.521 1606.1,687.521 1606.66,687.521 1607.22,687.521 1607.78,687.521 1608.34,687.521 1608.9,687.521 1609.46,687.521 1610.02,687.521 1610.57,687.521 1611.13,687.521 1611.69,687.521 1612.25,687.521 1612.81,687.521 1613.37,687.521 1613.93,687.521 1614.49,687.521 1615.05,687.521 1615.61,687.521 1616.17,687.521 1616.73,687.521 1617.29,687.521 1617.84,687.521 1618.4,687.521 1618.96,687.521 1619.52,687.521 1620.08,687.521 1620.64,687.521 1621.2,687.521 1621.76,687.521 1622.32,687.521 1622.88,687.521 1623.44,687.521 1624,687.521 1624.56,687.521 1625.11,687.521 1625.67,687.521 1626.23,687.521 1626.79,687.521 1627.35,687.521 1627.91,687.521 1628.47,687.521 1629.03,687.521 1629.59,687.521 1630.15,687.521 1630.71,687.521 1631.27,687.521 1631.83,687.521 1632.39,687.521 1632.94,687.521 1633.5,687.521 1634.06,687.521 1634.62,687.521 1635.18,687.521 1635.74,687.521 1636.3,687.521 1636.86,687.521 1637.42,687.521 1637.98,687.521 1638.54,687.521 1639.1,687.521 1639.66,687.521 1640.21,687.521 1640.77,687.521 1641.33,687.521 1641.89,687.521 1642.45,687.521 1643.01,687.521 1643.57,687.521 1644.13,687.521 1644.69,687.521 1645.25,687.521 1645.81,687.521 1646.37,687.521 1646.93,687.521 1647.48,687.521 1648.04,687.521 1648.6,687.521 1649.16,687.521 1649.72,687.521 1650.28,687.521 1650.84,687.521 1651.4,687.521 1651.96,687.521 1652.52,687.521 1653.08,687.521 1653.64,687.521 1654.2,687.521 1654.76,687.521 1655.31,687.521 1655.87,687.521 1656.43,687.521 1656.99,687.521 1657.55,687.521 1658.11,687.521 1658.67,687.521 1659.23,687.521 1659.79,687.521 1660.35,687.521 1660.91,687.521 1661.47,687.521 1662.03,687.521 1662.58,687.521 1663.14,687.521 1663.7,687.521 1664.26,687.521 1664.82,687.521 1665.38,687.521 1665.94,687.521 1666.5,687.521 1667.06,687.521 1667.62,687.521 1668.18,687.521 1668.74,687.521 1669.3,687.521 1669.85,687.521 1670.41,687.521 1670.97,687.521 1671.53,687.521 1672.09,687.521 1672.65,687.521 1673.21,687.521 1673.77,687.521 1674.33,687.521 1674.89,687.521 1675.45,687.521 1676.01,687.521 1676.57,687.521 1677.13,687.521 1677.68,687.521 1678.24,687.521 1678.8,687.521 1679.36,687.521 1679.92,687.521 1680.48,687.521 1681.04,687.521 1681.6,687.521 1682.16,687.521 1682.72,687.521 1683.28,687.521 1683.84,687.521 1684.4,687.521 1684.95,687.521 1685.51,687.521 1686.07,687.521 1686.63,687.521 1687.19,687.521 1687.75,687.521 1688.31,687.521 1688.87,687.521 1689.43,687.521 1689.99,687.521 1690.55,687.521 1691.11,687.521 1691.67,687.521 1692.23,687.521 1692.78,687.521 1693.34,687.521 1693.9,687.521 1694.46,687.521 1695.02,687.521 1695.58,687.521 1696.14,687.521 1696.7,687.521 1697.26,687.521 1697.82,687.521 1698.38,687.521 1698.94,687.521 1699.5,687.521 1700.05,687.521 1700.61,687.521 1701.17,687.521 1701.73,687.521 1702.29,687.521 1702.85,687.521 1703.41,687.521 1703.97,687.521 1704.53,687.521 1705.09,687.521 1705.65,687.521 1706.21,687.521 1706.77,687.521 1707.32,687.521 1707.88,687.521 1708.44,687.521 1709,687.521 1709.56,687.521 1710.12,687.521 1710.68,687.521 1711.24,687.521 1711.8,687.521 1712.36,687.521 1712.92,687.521 1713.48,687.521 1714.04,687.521 1714.6,687.521 1715.15,687.521 1715.71,687.521 1716.27,687.521 1716.83,687.521 1717.39,687.521 1717.95,687.521 1718.51,687.521 1719.07,687.521 1719.63,687.521 1720.19,687.521 1720.75,687.521 1721.31,687.521 1721.87,687.521 1722.42,687.521 1722.98,687.521 1723.54,687.521 1724.1,687.521 1724.66,687.521 1725.22,687.521 1725.78,687.521 1726.34,687.521 1726.9,687.521 1727.46,687.521 1728.02,687.521 1728.58,687.521 1729.14,687.521 1729.69,687.521 1730.25,687.521 1730.81,687.521 1731.37,687.521 1731.93,687.521 1732.49,687.521 1733.05,687.521 1733.61,687.521 1734.17,687.521 1734.73,687.521 1735.29,687.521 1735.85,687.521 1736.41,687.521 1736.97,687.521 1737.52,687.521 1738.08,687.521 1738.64,687.521 1739.2,687.521 1739.76,687.521 1740.32,687.521 1740.88,687.521 1741.44,687.521 1742,687.521 1742.56,687.521 1743.12,687.521 1743.68,687.521 1744.24,687.521 1744.79,687.521 1745.35,687.521 1745.91,687.521 1746.47,687.521 1747.03,687.521 1747.59,687.521 1748.15,687.521 1748.71,687.521 1749.27,687.521 1749.83,687.521 1750.39,687.521 1750.95,687.521 1751.51,687.521 1752.06,687.521 1752.62,687.521 1753.18,687.521 1753.74,687.521 1754.3,687.521 1754.86,687.521 1755.42,687.521 1755.98,687.521 1756.54,687.521 1757.1,687.521 1757.66,687.521 1758.22,687.521 1758.78,687.521 1759.34,687.521 1759.89,687.521 1760.45,687.521 1761.01,687.521 1761.57,687.521 1762.13,687.521 1762.69,687.521 1763.25,687.521 1763.81,687.521 1764.37,687.521 1764.93,687.521 1765.49,687.521 1766.05,687.521 1766.61,687.521 1767.16,687.521 1767.72,687.521 1768.28,687.521 1768.84,687.521 1769.4,687.521 1769.96,687.521 1770.52,687.521 1771.08,687.521 1771.64,687.521 1772.2,687.521 1772.76,687.521 1773.32,687.521 1773.88,687.521 1774.43,687.521 1774.99,687.521 1775.55,687.521 1776.11,687.521 1776.67,687.521 1777.23,687.521 1777.79,687.521 1778.35,687.521 1778.91,687.521 1779.47,687.521 1780.03,687.521 1780.59,687.521 1781.15,687.521 1781.71,687.521 1782.26,687.521 1782.82,687.521 1783.38,687.521 1783.94,687.521 1784.5,687.521 1785.06,687.521 1785.62,687.521 1786.18,687.521 1786.74,687.521 1787.3,687.521 1787.86,687.521 1788.42,687.521 1788.98,687.521 1789.53,687.521 1790.09,687.521 1790.65,687.521 1791.21,687.521 1791.77,687.521 1792.33,687.521 1792.89,687.521 1793.45,687.521 1794.01,687.521 1794.57,687.521 1795.13,687.521 1795.69,687.521 1796.25,687.521 1796.8,687.521 1797.36,687.521 1797.92,687.521 1798.48,687.521 1799.04,687.521 1799.6,687.521 1800.16,687.521 1800.72,687.521 1801.28,687.521 1801.84,687.521 1802.4,687.521 1802.96,687.521 1803.52,687.521 1804.08,687.521 1804.63,687.521 1805.19,687.521 1805.75,687.521 1806.31,687.521 1806.87,687.521 1807.43,687.521 1807.99,687.521 1808.55,687.521 1809.11,687.521 1809.67,687.521 1810.23,687.521 1810.79,687.521 1811.35,687.521 1811.9,687.521 1812.46,687.521 1813.02,687.521 1813.58,687.521 1814.14,687.521 1814.7,687.521 1815.26,687.521 1815.82,687.521 1816.38,687.521 1816.94,687.521 1817.5,687.521 1818.06,687.521 1818.62,687.521 1819.18,687.521 1819.73,687.521 1820.29,687.521 1820.85,687.521 1821.41,687.521 1821.97,687.521 1822.53,687.521 1823.09,687.521 1823.65,687.521 1824.21,687.521 1824.77,687.521 1825.33,687.521 1825.89,687.521 1826.45,687.521 1827,687.521 1827.56,687.521 1828.12,687.521 1828.68,687.521 1829.24,687.521 1829.8,687.521 1830.36,687.521 1830.92,687.521 1831.48,687.521 1832.04,687.521 1832.6,687.521 1833.16,687.521 1833.72,687.521 1834.27,687.521 1834.83,687.521 1835.39,687.521 1835.95,687.521 1836.51,687.521 1837.07,687.521 1837.63,687.521 1838.19,687.521 \"/>\n<path clip-path=\"url(#clip243)\" d=\"M720.247 685.435 L720.806 685.435 L721.365 685.435 L721.924 685.435 L722.484 685.435 L723.043 685.435 L723.602 685.435 L724.161 685.435 L724.721 685.435 L725.28 685.435 L725.839 685.435 L726.398 685.435 L726.958 685.435 L727.517 685.435 L728.076 685.435 L728.635 685.435 L729.195 685.435 L729.754 685.435 L730.313 685.435 L730.872 685.435 L731.432 685.435 L731.991 685.435 L732.55 685.435 L733.109 685.435 L733.669 685.435 L734.228 685.435 L734.787 685.435 L735.346 685.435 L735.906 685.435 L736.465 685.435 L737.024 685.435 L737.583 685.435 L738.143 685.435 L738.702 685.435 L739.261 685.435 L739.82 685.435 L740.38 685.435 L740.939 685.435 L741.498 685.435 L742.057 685.435 L742.617 685.435 L743.176 685.435 L743.735 685.435 L744.294 685.435 L744.854 685.435 L745.413 685.435 L745.972 685.435 L746.531 685.435 L747.091 685.435 L747.65 685.435 L748.209 685.435 L748.768 685.435 L749.328 685.435 L749.887 685.435 L750.446 685.435 L751.005 685.435 L751.565 685.435 L752.124 685.435 L752.683 685.435 L753.242 685.435 L753.802 685.435 L754.361 685.435 L754.92 685.435 L755.479 685.435 L756.039 685.435 L756.598 685.435 L757.157 685.435 L757.716 685.435 L758.276 685.435 L758.835 685.435 L759.394 685.435 L759.953 685.435 L760.513 685.435 L761.072 685.435 L761.631 685.435 L762.19 685.435 L762.75 685.435 L763.309 685.435 L763.868 685.435 L764.427 685.435 L764.987 685.435 L765.546 685.435 L766.105 685.435 L766.664 685.435 L767.224 685.435 L767.783 685.435 L768.342 685.435 L768.901 685.435 L769.461 685.435 L770.02 685.435 L770.579 685.435 L771.138 685.435 L771.698 685.435 L772.257 685.435 L772.816 685.435 L773.375 685.435 L773.935 685.435 L774.494 685.435 L775.053 685.435 L775.612 685.435 L776.172 685.435 L776.731 685.435 L777.29 685.435 L777.849 685.435 L778.409 685.435 L778.968 685.435 L779.527 685.435 L780.086 685.435 L780.646 685.435 L781.205 685.435 L781.764 685.435 L782.323 685.435 L782.883 685.435 L783.442 685.435 L784.001 685.435 L784.56 685.435 L785.12 685.435 L785.679 685.435 L786.238 685.435 L786.797 685.435 L787.357 685.435 L787.916 685.435 L788.475 685.435 L789.034 685.435 L789.594 685.435 L790.153 685.435 L790.712 685.435 L791.271 685.435 L791.831 685.435 L792.39 685.435 L792.949 685.435 L793.508 685.435 L794.068 685.435 L794.627 685.435 L795.186 685.435 L795.745 685.435 L796.305 685.435 L796.864 685.435 L797.423 685.435 L797.982 685.435 L798.542 685.435 L799.101 685.435 L799.66 685.435 L800.219 685.435 L800.779 685.435 L801.338 685.435 L801.897 685.435 L802.456 685.435 L803.016 685.435 L803.575 685.435 L804.134 685.435 L804.693 685.435 L805.253 685.435 L805.812 685.435 L806.371 685.435 L806.931 685.435 L807.49 685.435 L808.049 685.435 L808.608 685.435 L809.168 685.435 L809.727 685.435 L810.286 685.435 L810.845 685.435 L811.405 685.435 L811.964 685.435 L812.523 685.435 L813.082 685.435 L813.642 685.435 L814.201 685.435 L814.76 685.435 L815.319 685.435 L815.879 685.435 L816.438 685.435 L816.997 685.435 L817.556 685.435 L818.116 685.435 L818.675 685.435 L819.234 685.435 L819.793 685.435 L820.353 685.435 L820.912 685.435 L821.471 685.435 L822.03 685.435 L822.59 685.435 L823.149 685.435 L823.708 685.435 L824.267 685.435 L824.827 685.435 L825.386 685.435 L825.945 685.435 L826.504 685.435 L827.064 685.435 L827.623 685.435 L828.182 685.435 L828.741 685.435 L829.301 685.435 L829.86 685.435 L830.419 685.435 L830.978 685.435 L831.538 685.435 L832.097 685.435 L832.656 685.435 L833.215 685.435 L833.775 685.435 L834.334 685.435 L834.893 685.435 L835.452 685.435 L836.012 685.435 L836.571 685.435 L837.13 685.435 L837.689 685.435 L838.249 685.435 L838.808 685.435 L839.367 685.435 L839.926 685.435 L840.486 685.435 L841.045 685.435 L841.604 685.435 L842.163 685.435 L842.723 685.435 L843.282 685.435 L843.841 685.435 L844.4 685.435 L844.96 685.435 L845.519 685.435 L846.078 685.435 L846.637 685.435 L847.197 685.435 L847.756 685.435 L848.315 685.435 L848.874 685.435 L849.434 685.435 L849.993 685.435 L850.552 685.435 L851.111 685.435 L851.671 685.435 L852.23 685.435 L852.789 685.435 L853.348 685.435 L853.908 685.435 L854.467 685.435 L855.026 685.435 L855.585 685.435 L856.145 685.435 L856.704 685.435 L857.263 685.435 L857.822 685.435 L858.382 685.435 L858.941 685.435 L859.5 685.435 L860.059 685.435 L860.619 685.435 L861.178 685.435 L861.737 685.435 L862.296 685.435 L862.856 685.435 L863.415 685.435 L863.974 685.435 L864.533 685.435 L865.093 685.435 L865.652 685.435 L866.211 685.435 L866.77 685.435 L867.33 685.435 L867.889 685.435 L868.448 685.435 L869.007 685.435 L869.567 685.435 L870.126 685.435 L870.685 685.435 L871.244 685.435 L871.804 685.435 L872.363 685.435 L872.922 685.435 L873.481 685.435 L874.041 685.435 L874.6 685.435 L875.159 685.435 L875.718 685.435 L876.278 685.435 L876.837 685.435 L877.396 685.435 L877.955 685.435 L878.515 685.435 L879.074 685.435 L879.633 685.435 L880.192 685.435 L880.752 685.435 L881.311 685.435 L881.87 685.435 L882.429 685.435 L882.989 685.435 L883.548 685.435 L884.107 685.435 L884.666 685.435 L885.226 685.435 L885.785 685.435 L886.344 685.435 L886.903 685.435 L887.463 685.435 L888.022 685.435 L888.581 685.435 L889.14 685.435 L889.7 685.435 L890.259 685.435 L890.818 685.435 L891.377 685.435 L891.937 685.435 L892.496 685.435 L893.055 685.435 L893.614 685.435 L894.174 685.435 L894.733 685.435 L895.292 685.435 L895.851 685.435 L896.411 685.435 L896.97 685.435 L897.529 685.435 L898.088 685.435 L898.648 685.435 L899.207 685.435 L899.766 685.435 L900.325 685.435 L900.885 685.435 L901.444 685.435 L902.003 685.435 L902.562 685.435 L903.122 685.435 L903.681 685.435 L904.24 685.435 L904.799 685.435 L905.359 685.435 L905.918 685.435 L906.477 685.435 L907.036 685.435 L907.596 685.435 L908.155 685.435 L908.714 685.435 L909.273 685.435 L909.833 685.435 L910.392 685.435 L910.951 685.435 L911.51 685.435 L912.07 685.435 L912.629 685.435 L913.188 685.435 L913.747 685.435 L914.307 685.435 L914.866 685.435 L915.425 685.435 L915.984 685.435 L916.544 685.435 L917.103 685.435 L917.662 685.435 L918.221 685.435 L918.781 685.435 L919.34 685.435 L919.899 685.435 L920.458 685.435 L921.018 685.435 L921.577 685.435 L922.136 685.435 L922.695 685.435 L923.255 685.435 L923.814 685.435 L924.373 685.435 L924.932 685.435 L925.492 685.435 L926.051 685.435 L926.61 685.435 L927.169 685.435 L927.729 685.435 L928.288 685.435 L928.847 685.435 L929.406 685.435 L929.966 685.435 L930.525 685.435 L931.084 685.435 L931.644 685.435 L932.203 685.435 L932.762 685.435 L933.321 685.435 L933.881 685.435 L934.44 685.435 L934.999 685.435 L935.558 685.435 L936.118 685.435 L936.677 685.435 L937.236 685.435 L937.795 685.435 L938.355 685.435 L938.914 685.435 L939.473 685.435 L940.032 685.435 L940.592 685.435 L941.151 685.435 L941.71 685.435 L942.269 685.435 L942.829 685.435 L943.388 685.435 L943.947 685.435 L944.506 685.435 L945.066 685.435 L945.625 685.435 L946.184 685.435 L946.743 685.435 L947.303 685.435 L947.862 685.435 L948.421 685.435 L948.98 685.435 L949.54 685.435 L950.099 685.435 L950.658 685.435 L951.217 685.435 L951.777 685.435 L952.336 685.435 L952.895 685.435 L953.454 685.435 L954.014 685.435 L954.573 685.435 L955.132 685.435 L955.691 685.435 L956.251 685.435 L956.81 685.435 L957.369 685.435 L957.928 685.435 L958.488 685.435 L959.047 685.435 L959.606 685.435 L960.165 685.435 L960.725 685.435 L961.284 685.435 L961.843 685.435 L962.402 685.435 L962.962 685.435 L963.521 685.435 L964.08 685.435 L964.639 685.435 L965.199 685.435 L965.758 685.435 L966.317 685.435 L966.876 685.435 L967.436 685.435 L967.995 685.435 L968.554 685.435 L969.113 685.435 L969.673 685.435 L970.232 685.435 L970.791 685.435 L971.35 685.435 L971.91 685.435 L972.469 685.435 L973.028 685.435 L973.587 685.435 L974.147 685.435 L974.706 685.435 L975.265 685.435 L975.824 685.435 L976.384 685.435 L976.943 685.435 L977.502 685.435 L978.061 685.435 L978.621 685.435 L979.18 685.435 L979.739 685.435 L980.298 685.435 L980.858 685.435 L981.417 685.435 L981.976 685.435 L982.535 685.435 L983.095 685.435 L983.654 685.435 L984.213 685.435 L984.772 685.435 L985.332 685.435 L985.891 685.435 L986.45 685.435 L987.009 685.435 L987.569 685.435 L988.128 685.435 L988.687 685.435 L989.246 685.435 L989.806 685.435 L990.365 685.435 L990.924 685.435 L991.483 685.435 L992.043 685.435 L992.602 685.435 L993.161 685.435 L993.72 685.435 L994.28 685.435 L994.839 685.435 L995.398 685.435 L995.957 685.435 L996.517 685.435 L997.076 685.435 L997.635 685.435 L998.194 685.435 L998.754 685.435 L999.313 685.435 L999.872 685.435 L1000.43 685.435 L1000.99 685.435 L1001.55 685.435 L1002.11 685.435 L1002.67 685.435 L1003.23 685.435 L1003.79 685.435 L1004.35 685.435 L1004.91 685.435 L1005.46 685.435 L1006.02 685.435 L1006.58 685.435 L1007.14 685.435 L1007.7 685.435 L1008.26 685.435 L1008.82 685.435 L1009.38 685.435 L1009.94 685.435 L1010.5 685.435 L1011.06 685.435 L1011.62 685.435 L1012.18 685.435 L1012.73 685.435 L1013.29 685.435 L1013.85 685.435 L1014.41 685.435 L1014.97 685.435 L1015.53 685.435 L1016.09 685.435 L1016.65 685.435 L1017.21 685.435 L1017.77 685.435 L1018.33 685.435 L1018.89 685.435 L1019.45 685.435 L1020.01 685.435 L1020.56 685.435 L1021.12 685.435 L1021.68 685.435 L1022.24 685.435 L1022.8 685.435 L1023.36 685.435 L1023.92 685.435 L1024.48 685.435 L1025.04 685.435 L1025.6 685.435 L1026.16 685.435 L1026.72 685.435 L1027.28 685.435 L1027.83 685.435 L1028.39 685.435 L1028.95 685.435 L1029.51 685.435 L1030.07 685.435 L1030.63 685.435 L1031.19 685.435 L1031.75 685.435 L1032.31 685.435 L1032.87 685.435 L1033.43 685.435 L1033.99 685.435 L1034.55 685.435 L1035.1 685.435 L1035.66 685.435 L1036.22 685.435 L1036.78 685.435 L1037.34 685.435 L1037.9 685.435 L1038.46 685.435 L1039.02 685.435 L1039.58 685.435 L1040.14 685.435 L1040.7 685.435 L1041.26 685.435 L1041.82 685.435 L1042.38 685.435 L1042.93 685.435 L1043.49 685.435 L1044.05 685.435 L1044.61 685.435 L1045.17 685.435 L1045.73 685.435 L1046.29 685.435 L1046.85 685.435 L1047.41 685.435 L1047.97 685.435 L1048.53 685.435 L1049.09 685.435 L1049.65 685.435 L1050.2 685.435 L1050.76 685.435 L1051.32 685.435 L1051.88 685.435 L1052.44 685.435 L1053 685.435 L1053.56 685.435 L1054.12 685.435 L1054.68 685.435 L1055.24 685.435 L1055.8 685.435 L1056.36 685.435 L1056.92 685.435 L1057.48 685.435 L1058.03 685.435 L1058.59 685.435 L1059.15 685.435 L1059.71 685.435 L1060.27 685.435 L1060.83 685.435 L1061.39 685.435 L1061.95 685.435 L1062.51 685.435 L1063.07 685.435 L1063.63 685.435 L1064.19 685.435 L1064.75 685.435 L1065.3 685.435 L1065.86 685.435 L1066.42 685.435 L1066.98 685.435 L1067.54 685.435 L1068.1 685.435 L1068.66 685.435 L1069.22 685.435 L1069.78 685.435 L1070.34 685.435 L1070.9 685.435 L1071.46 685.435 L1072.02 685.435 L1072.57 685.435 L1073.13 685.435 L1073.69 685.435 L1074.25 685.435 L1074.81 685.435 L1075.37 685.435 L1075.93 685.435 L1076.49 685.435 L1077.05 685.435 L1077.61 685.435 L1078.17 685.435 L1078.73 685.435 L1079.29 685.435 L1079.85 685.435 L1080.4 685.435 L1080.96 685.435 L1081.52 685.435 L1082.08 685.435 L1082.64 685.435 L1083.2 685.435 L1083.76 685.435 L1084.32 685.435 L1084.88 685.435 L1085.44 685.435 L1086 685.435 L1086.56 685.435 L1087.12 685.435 L1087.67 685.435 L1088.23 685.435 L1088.79 685.435 L1089.35 685.435 L1089.91 685.435 L1090.47 685.435 L1091.03 685.435 L1091.59 685.435 L1092.15 685.435 L1092.71 685.435 L1093.27 685.435 L1093.83 685.435 L1094.39 685.435 L1094.94 685.435 L1095.5 685.435 L1096.06 685.435 L1096.62 685.435 L1097.18 685.435 L1097.74 685.435 L1098.3 685.435 L1098.86 685.435 L1099.42 685.435 L1099.98 685.435 L1100.54 685.435 L1101.1 685.435 L1101.66 685.435 L1102.22 685.435 L1102.77 685.435 L1103.33 685.435 L1103.89 685.435 L1104.45 685.435 L1105.01 685.435 L1105.57 685.435 L1106.13 685.435 L1106.69 685.435 L1107.25 685.435 L1107.81 685.435 L1108.37 685.435 L1108.93 685.435 L1109.49 685.435 L1110.04 685.435 L1110.6 685.435 L1111.16 685.435 L1111.72 685.435 L1112.28 685.435 L1112.84 685.435 L1113.4 685.435 L1113.96 685.435 L1114.52 685.435 L1115.08 685.435 L1115.64 685.435 L1116.2 685.435 L1116.76 685.435 L1117.31 685.435 L1117.87 685.435 L1118.43 685.435 L1118.99 685.435 L1119.55 685.435 L1120.11 685.435 L1120.67 685.435 L1121.23 685.435 L1121.79 685.435 L1122.35 685.435 L1122.91 685.435 L1123.47 685.435 L1124.03 685.435 L1124.59 685.435 L1125.14 685.435 L1125.7 685.435 L1126.26 685.435 L1126.82 685.435 L1127.38 685.435 L1127.94 685.435 L1128.5 685.435 L1129.06 685.435 L1129.62 685.435 L1130.18 685.435 L1130.74 685.435 L1131.3 685.435 L1131.86 685.435 L1132.41 685.435 L1132.97 685.435 L1133.53 685.435 L1134.09 685.435 L1134.65 685.435 L1135.21 685.435 L1135.77 685.435 L1136.33 685.435 L1136.89 685.435 L1137.45 685.435 L1138.01 685.435 L1138.57 685.435 L1139.13 685.435 L1139.68 685.435 L1140.24 685.435 L1140.8 685.435 L1141.36 685.435 L1141.92 685.435 L1142.48 685.435 L1143.04 685.435 L1143.6 685.435 L1144.16 685.435 L1144.72 685.435 L1145.28 685.435 L1145.84 685.435 L1146.4 685.435 L1146.96 685.435 L1147.51 685.435 L1148.07 685.435 L1148.63 685.435 L1149.19 685.435 L1149.75 685.435 L1150.31 685.435 L1150.87 685.435 L1151.43 685.435 L1151.99 685.435 L1152.55 685.435 L1153.11 685.435 L1153.67 685.435 L1154.23 685.435 L1154.78 685.435 L1155.34 685.435 L1155.9 685.435 L1156.46 685.435 L1157.02 685.435 L1157.58 685.435 L1158.14 685.435 L1158.7 685.435 L1159.26 685.435 L1159.82 685.435 L1160.38 685.435 L1160.94 685.435 L1161.5 685.435 L1162.05 685.435 L1162.61 685.435 L1163.17 685.435 L1163.73 685.435 L1164.29 685.435 L1164.85 685.435 L1165.41 685.435 L1165.97 685.435 L1166.53 685.435 L1167.09 685.435 L1167.65 685.435 L1168.21 685.435 L1168.77 685.435 L1169.33 685.435 L1169.88 685.435 L1170.44 685.435 L1171 685.435 L1171.56 685.435 L1172.12 685.435 L1172.68 685.435 L1173.24 685.435 L1173.8 685.435 L1174.36 685.435 L1174.92 685.435 L1175.48 685.435 L1176.04 685.435 L1176.6 685.435 L1177.15 685.435 L1177.71 685.435 L1178.27 685.435 L1178.83 685.435 L1179.39 685.435 L1179.95 685.435 L1180.51 685.435 L1181.07 685.435 L1181.63 685.435 L1182.19 685.435 L1182.75 685.435 L1183.31 685.435 L1183.87 685.435 L1184.43 685.435 L1184.98 685.435 L1185.54 685.435 L1186.1 685.435 L1186.66 685.435 L1187.22 685.435 L1187.78 685.435 L1188.34 685.435 L1188.9 685.435 L1189.46 685.435 L1190.02 685.435 L1190.58 685.435 L1191.14 685.435 L1191.7 685.435 L1192.25 685.435 L1192.81 685.435 L1193.37 685.435 L1193.93 685.435 L1194.49 685.435 L1195.05 685.435 L1195.61 685.435 L1196.17 685.435 L1196.73 685.435 L1197.29 685.435 L1197.85 685.435 L1198.41 685.435 L1198.97 685.435 L1199.52 685.435 L1200.08 685.435 L1200.64 685.435 L1201.2 685.435 L1201.76 685.435 L1202.32 685.435 L1202.88 685.435 L1203.44 685.435 L1204 685.435 L1204.56 685.435 L1205.12 685.435 L1205.68 685.435 L1206.24 685.435 L1206.8 685.435 L1207.35 685.435 L1207.91 685.435 L1208.47 685.435 L1209.03 685.435 L1209.59 685.435 L1210.15 685.435 L1210.71 685.435 L1211.27 685.435 L1211.83 685.435 L1212.39 685.435 L1212.95 685.435 L1213.51 685.435 L1214.07 685.435 L1214.62 685.435 L1215.18 685.435 L1215.74 685.435 L1216.3 685.435 L1216.86 685.435 L1217.42 685.435 L1217.98 685.435 L1218.54 685.435 L1219.1 685.435 L1219.66 685.435 L1220.22 685.435 L1220.78 685.435 L1221.34 685.435 L1221.89 685.435 L1222.45 685.435 L1223.01 685.435 L1223.57 685.435 L1224.13 685.435 L1224.69 685.435 L1225.25 685.435 L1225.81 685.435 L1226.37 685.435 L1226.93 685.435 L1227.49 685.435 L1228.05 685.435 L1228.61 685.435 L1229.17 685.435 L1229.72 685.435 L1230.28 685.435 L1230.84 685.435 L1231.4 685.435 L1231.96 685.435 L1232.52 685.435 L1233.08 685.435 L1233.64 685.435 L1234.2 685.435 L1234.76 685.435 L1235.32 685.435 L1235.88 685.435 L1236.44 685.435 L1236.99 685.435 L1237.55 685.435 L1238.11 685.435 L1238.67 685.435 L1239.23 685.435 L1239.79 685.435 L1240.35 685.435 L1240.91 685.435 L1241.47 685.435 L1242.03 685.435 L1242.59 685.435 L1243.15 685.435 L1243.71 685.435 L1244.26 685.435 L1244.82 685.435 L1245.38 685.435 L1245.94 685.435 L1246.5 685.435 L1247.06 685.435 L1247.62 685.435 L1248.18 685.435 L1248.74 685.435 L1249.3 685.435 L1249.86 685.435 L1250.42 685.435 L1250.98 685.435 L1251.54 685.435 L1252.09 685.435 L1252.65 685.435 L1253.21 685.435 L1253.77 685.435 L1254.33 685.435 L1254.89 685.435 L1255.45 685.435 L1256.01 685.435 L1256.57 685.435 L1257.13 685.435 L1257.69 685.435 L1258.25 685.435 L1258.81 685.435 L1259.36 685.435 L1259.92 685.435 L1260.48 685.435 L1261.04 685.435 L1261.6 685.435 L1262.16 685.435 L1262.72 685.435 L1263.28 685.435 L1263.84 685.435 L1264.4 685.435 L1264.96 685.435 L1265.52 685.435 L1266.08 685.435 L1266.63 685.435 L1267.19 685.435 L1267.75 685.435 L1268.31 685.435 L1268.87 685.435 L1269.43 685.435 L1269.99 685.435 L1270.55 685.435 L1271.11 685.435 L1271.67 685.435 L1272.23 685.435 L1272.79 685.435 L1273.35 685.435 L1273.91 685.435 L1274.46 685.435 L1275.02 685.435 L1275.58 685.435 L1276.14 685.435 L1276.7 685.435 L1277.26 685.435 L1277.82 685.435 L1278.38 685.435 L1278.94 685.435 L1279.5 685.435 L1280.06 685.435 L1280.62 685.435 L1281.18 685.435 L1281.73 685.435 L1282.29 685.435 L1282.85 685.435 L1283.41 685.435 L1283.97 685.435 L1284.53 685.435 L1285.09 685.435 L1285.65 685.435 L1286.21 685.435 L1286.77 685.435 L1287.33 685.435 L1287.89 685.435 L1288.45 685.435 L1289 685.435 L1289.56 685.435 L1290.12 685.435 L1290.68 685.435 L1291.24 685.435 L1291.8 685.435 L1292.36 685.435 L1292.92 685.435 L1293.48 685.435 L1294.04 685.435 L1294.6 685.435 L1295.16 685.435 L1295.72 685.435 L1296.28 685.435 L1296.83 685.435 L1297.39 685.435 L1297.95 685.435 L1298.51 685.435 L1299.07 685.435 L1299.63 685.435 L1300.19 685.435 L1300.75 685.435 L1301.31 685.435 L1301.87 685.435 L1302.43 685.435 L1302.99 685.435 L1303.55 685.435 L1304.1 685.435 L1304.66 685.435 L1305.22 685.435 L1305.78 685.435 L1306.34 685.435 L1306.9 685.435 L1307.46 685.435 L1308.02 685.435 L1308.58 685.435 L1309.14 685.435 L1309.7 685.435 L1310.26 685.435 L1310.82 685.435 L1311.38 685.435 L1311.93 685.435 L1312.49 685.435 L1313.05 685.435 L1313.61 685.435 L1314.17 685.435 L1314.73 685.435 L1315.29 685.435 L1315.85 685.435 L1316.41 685.435 L1316.97 685.435 L1317.53 685.435 L1318.09 685.435 L1318.65 685.435 L1319.2 685.435 L1319.76 685.435 L1320.32 685.435 L1320.88 685.435 L1321.44 685.435 L1322 685.435 L1322.56 685.435 L1323.12 685.435 L1323.68 685.435 L1324.24 685.435 L1324.8 685.435 L1325.36 685.435 L1325.92 685.435 L1326.47 685.435 L1327.03 685.435 L1327.59 685.435 L1328.15 685.435 L1328.71 685.435 L1329.27 685.435 L1329.83 685.435 L1330.39 685.435 L1330.95 685.435 L1331.51 685.435 L1332.07 685.435 L1332.63 685.435 L1333.19 685.435 L1333.75 685.435 L1334.3 685.435 L1334.86 685.435 L1335.42 685.435 L1335.98 685.435 L1336.54 685.435 L1337.1 685.435 L1337.66 685.435 L1338.22 685.435 L1338.78 685.435 L1339.34 685.435 L1339.9 685.435 L1340.46 685.435 L1341.02 685.435 L1341.57 685.435 L1342.13 685.435 L1342.69 685.435 L1343.25 685.435 L1343.81 685.435 L1344.37 685.435 L1344.93 685.435 L1345.49 685.435 L1346.05 685.435 L1346.61 685.435 L1347.17 685.435 L1347.73 685.435 L1348.29 685.435 L1348.84 685.435 L1349.4 685.435 L1349.96 685.435 L1350.52 685.435 L1351.08 685.435 L1351.64 685.435 L1352.2 685.435 L1352.76 685.435 L1353.32 685.435 L1353.88 685.435 L1354.44 685.435 L1355 685.435 L1355.56 685.435 L1356.12 685.435 L1356.67 685.435 L1357.23 685.435 L1357.79 685.435 L1358.35 685.435 L1358.91 685.435 L1359.47 685.435 L1360.03 685.435 L1360.59 685.435 L1361.15 685.435 L1361.71 685.435 L1362.27 685.435 L1362.83 685.435 L1363.39 685.435 L1363.94 685.435 L1364.5 685.435 L1365.06 685.435 L1365.62 685.435 L1366.18 685.435 L1366.74 685.435 L1367.3 685.435 L1367.86 685.435 L1368.42 685.435 L1368.98 685.435 L1369.54 685.435 L1370.1 685.435 L1370.66 685.435 L1371.21 685.435 L1371.77 685.435 L1372.33 685.435 L1372.89 685.435 L1373.45 685.435 L1374.01 685.435 L1374.57 685.435 L1375.13 685.435 L1375.69 685.435 L1376.25 685.435 L1376.81 685.435 L1377.37 685.435 L1377.93 685.435 L1378.49 685.435 L1379.04 685.435 L1379.6 685.435 L1380.16 685.435 L1380.72 685.435 L1381.28 685.435 L1381.84 685.435 L1382.4 685.435 L1382.96 685.435 L1383.52 685.435 L1384.08 685.435 L1384.64 685.435 L1385.2 685.435 L1385.76 685.435 L1386.31 685.435 L1386.87 685.435 L1387.43 685.435 L1387.99 685.435 L1388.55 685.435 L1389.11 685.435 L1389.67 685.435 L1390.23 685.435 L1390.79 685.435 L1391.35 685.435 L1391.91 685.435 L1392.47 685.435 L1393.03 685.435 L1393.58 685.435 L1394.14 685.435 L1394.7 685.435 L1395.26 685.435 L1395.82 685.435 L1396.38 685.435 L1396.94 685.435 L1397.5 685.435 L1398.06 685.435 L1398.62 685.435 L1399.18 685.435 L1399.74 685.435 L1400.3 685.435 L1400.86 685.435 L1401.41 685.435 L1401.97 685.435 L1402.53 685.435 L1403.09 685.435 L1403.65 685.435 L1404.21 685.435 L1404.77 685.435 L1405.33 685.435 L1405.89 685.435 L1406.45 685.435 L1407.01 685.435 L1407.57 685.435 L1408.13 685.435 L1408.68 685.435 L1409.24 685.435 L1409.8 685.435 L1410.36 685.435 L1410.92 685.435 L1411.48 685.435 L1412.04 685.435 L1412.6 685.435 L1413.16 685.435 L1413.72 685.435 L1414.28 685.435 L1414.84 685.435 L1415.4 685.435 L1415.95 685.435 L1416.51 685.435 L1417.07 685.435 L1417.63 685.435 L1418.19 685.435 L1418.75 685.435 L1419.31 685.435 L1419.87 685.435 L1420.43 685.435 L1420.99 685.435 L1421.55 685.435 L1422.11 685.435 L1422.67 685.435 L1423.23 685.435 L1423.78 685.435 L1424.34 685.435 L1424.9 685.435 L1425.46 685.435 L1426.02 685.435 L1426.58 685.435 L1427.14 685.435 L1427.7 685.435 L1428.26 685.435 L1428.82 685.435 L1429.38 685.435 L1429.94 685.435 L1430.5 685.435 L1431.05 685.435 L1431.61 685.435 L1432.17 685.435 L1432.73 685.435 L1433.29 685.435 L1433.85 685.435 L1434.41 685.435 L1434.97 685.435 L1435.53 685.435 L1436.09 685.435 L1436.65 685.435 L1437.21 685.435 L1437.77 685.435 L1438.33 685.435 L1438.88 685.435 L1439.44 685.435 L1440 685.435 L1440.56 685.435 L1441.12 685.435 L1441.68 685.435 L1442.24 685.435 L1442.8 685.435 L1443.36 685.435 L1443.92 685.435 L1444.48 685.435 L1445.04 685.435 L1445.6 685.435 L1446.15 685.435 L1446.71 685.435 L1447.27 685.435 L1447.83 685.435 L1448.39 685.435 L1448.95 685.435 L1449.51 685.435 L1450.07 685.435 L1450.63 685.435 L1451.19 685.435 L1451.75 685.435 L1452.31 685.435 L1452.87 685.435 L1453.42 685.435 L1453.98 685.435 L1454.54 685.435 L1455.1 685.435 L1455.66 685.435 L1456.22 685.435 L1456.78 685.435 L1457.34 685.435 L1457.9 685.435 L1458.46 685.435 L1459.02 685.435 L1459.58 685.435 L1460.14 685.435 L1460.7 685.435 L1461.25 685.435 L1461.81 685.435 L1462.37 685.435 L1462.93 685.435 L1463.49 685.435 L1464.05 685.435 L1464.61 685.435 L1465.17 685.435 L1465.73 685.435 L1466.29 685.435 L1466.85 685.435 L1467.41 685.435 L1467.97 685.435 L1468.52 685.435 L1469.08 685.435 L1469.64 685.435 L1470.2 685.435 L1470.76 685.435 L1471.32 685.435 L1471.88 685.435 L1472.44 685.435 L1473 685.435 L1473.56 685.435 L1474.12 685.435 L1474.68 685.435 L1475.24 685.435 L1475.79 685.435 L1476.35 685.435 L1476.91 685.435 L1477.47 685.435 L1478.03 685.435 L1478.59 685.435 L1479.15 685.435 L1479.71 685.435 L1480.27 685.435 L1480.83 685.435 L1481.39 685.435 L1481.95 685.435 L1482.51 685.435 L1483.07 685.435 L1483.62 685.435 L1484.18 685.435 L1484.74 685.435 L1485.3 685.435 L1485.86 685.435 L1486.42 685.435 L1486.98 685.435 L1487.54 685.435 L1488.1 685.435 L1488.66 685.435 L1489.22 685.435 L1489.78 685.435 L1490.34 685.435 L1490.89 685.435 L1491.45 685.435 L1492.01 685.435 L1492.57 685.435 L1493.13 685.435 L1493.69 685.435 L1494.25 685.435 L1494.81 685.435 L1495.37 685.435 L1495.93 685.435 L1496.49 685.435 L1497.05 685.435 L1497.61 685.435 L1498.16 685.435 L1498.72 685.435 L1499.28 685.435 L1499.84 685.435 L1500.4 685.435 L1500.96 685.435 L1501.52 685.435 L1502.08 685.435 L1502.64 685.435 L1503.2 685.435 L1503.76 685.435 L1504.32 685.435 L1504.88 685.435 L1505.44 685.435 L1505.99 685.435 L1506.55 685.435 L1507.11 685.435 L1507.67 685.435 L1508.23 685.435 L1508.79 685.435 L1509.35 685.435 L1509.91 685.435 L1510.47 685.435 L1511.03 685.435 L1511.59 685.435 L1512.15 685.435 L1512.71 685.435 L1513.26 685.435 L1513.82 685.435 L1514.38 685.435 L1514.94 685.435 L1515.5 685.435 L1516.06 685.435 L1516.62 685.435 L1517.18 685.435 L1517.74 685.435 L1518.3 685.435 L1518.86 685.435 L1519.42 685.435 L1519.98 685.435 L1520.53 685.435 L1521.09 685.435 L1521.65 685.435 L1522.21 685.435 L1522.77 685.435 L1523.33 685.435 L1523.89 685.435 L1524.45 685.435 L1525.01 685.435 L1525.57 685.435 L1526.13 685.435 L1526.69 685.435 L1527.25 685.435 L1527.81 685.435 L1528.36 685.435 L1528.92 685.435 L1529.48 685.435 L1530.04 685.435 L1530.6 685.435 L1531.16 685.435 L1531.72 685.435 L1532.28 685.435 L1532.84 685.435 L1533.4 685.435 L1533.96 685.435 L1534.52 685.435 L1535.08 685.435 L1535.63 685.435 L1536.19 685.435 L1536.75 685.435 L1537.31 685.435 L1537.87 685.435 L1538.43 685.435 L1538.99 685.435 L1539.55 685.435 L1540.11 685.435 L1540.67 685.435 L1541.23 685.435 L1541.79 685.435 L1542.35 685.435 L1542.9 685.435 L1543.46 685.435 L1544.02 685.435 L1544.58 685.435 L1545.14 685.435 L1545.7 685.435 L1546.26 685.435 L1546.82 685.435 L1547.38 685.435 L1547.94 685.435 L1548.5 685.435 L1549.06 685.435 L1549.62 685.435 L1550.18 685.435 L1550.73 685.435 L1551.29 685.435 L1551.85 685.435 L1552.41 685.435 L1552.97 685.435 L1553.53 685.435 L1554.09 685.435 L1554.65 685.435 L1555.21 685.435 L1555.77 685.435 L1556.33 685.435 L1556.89 685.435 L1557.45 685.435 L1558 685.435 L1558.56 685.435 L1559.12 685.435 L1559.68 685.435 L1560.24 685.435 L1560.8 685.435 L1561.36 685.435 L1561.92 685.435 L1562.48 685.435 L1563.04 685.435 L1563.6 685.435 L1564.16 685.435 L1564.72 685.435 L1565.28 685.435 L1565.83 685.435 L1566.39 685.435 L1566.95 685.435 L1567.51 685.435 L1568.07 685.435 L1568.63 685.435 L1569.19 685.435 L1569.75 685.435 L1570.31 685.435 L1570.87 685.435 L1571.43 685.435 L1571.99 685.435 L1572.55 685.435 L1573.1 685.435 L1573.66 685.435 L1574.22 685.435 L1574.78 685.435 L1575.34 685.435 L1575.9 685.435 L1576.46 685.435 L1577.02 685.435 L1577.58 685.435 L1578.14 685.435 L1578.7 685.435 L1579.26 685.435 L1579.82 685.435 L1580.37 685.435 L1580.93 685.435 L1581.49 685.435 L1582.05 685.435 L1582.61 685.435 L1583.17 685.435 L1583.73 685.435 L1584.29 685.435 L1584.85 685.435 L1585.41 685.435 L1585.97 685.435 L1586.53 685.435 L1587.09 685.435 L1587.65 685.435 L1588.2 685.435 L1588.76 685.435 L1589.32 685.435 L1589.88 685.435 L1590.44 685.435 L1591 685.435 L1591.56 685.435 L1592.12 685.435 L1592.68 685.435 L1593.24 685.435 L1593.8 685.435 L1594.36 685.435 L1594.92 685.435 L1595.47 685.435 L1596.03 685.435 L1596.59 685.435 L1597.15 685.435 L1597.71 685.435 L1598.27 685.435 L1598.83 685.435 L1599.39 685.435 L1599.95 685.435 L1600.51 685.435 L1601.07 685.435 L1601.63 685.435 L1602.19 685.435 L1602.74 685.435 L1603.3 685.435 L1603.86 685.435 L1604.42 685.435 L1604.98 685.435 L1605.54 685.435 L1606.1 685.435 L1606.66 685.435 L1607.22 685.435 L1607.78 685.435 L1608.34 685.435 L1608.9 685.435 L1609.46 685.435 L1610.02 685.435 L1610.57 685.435 L1611.13 685.435 L1611.69 685.435 L1612.25 685.435 L1612.81 685.435 L1613.37 685.435 L1613.93 685.435 L1614.49 685.435 L1615.05 685.435 L1615.61 685.435 L1616.17 685.435 L1616.73 685.435 L1617.29 685.435 L1617.84 685.435 L1618.4 685.435 L1618.96 685.435 L1619.52 685.435 L1620.08 685.435 L1620.64 685.435 L1621.2 685.435 L1621.76 685.435 L1622.32 685.435 L1622.88 685.435 L1623.44 685.435 L1624 685.435 L1624.56 685.435 L1625.11 685.435 L1625.67 685.435 L1626.23 685.435 L1626.79 685.435 L1627.35 685.435 L1627.91 685.435 L1628.47 685.435 L1629.03 685.435 L1629.59 685.435 L1630.15 685.435 L1630.71 685.435 L1631.27 685.435 L1631.83 685.435 L1632.39 685.435 L1632.94 685.435 L1633.5 685.435 L1634.06 685.435 L1634.62 685.435 L1635.18 685.435 L1635.74 685.435 L1636.3 685.435 L1636.86 685.435 L1637.42 685.435 L1637.98 685.435 L1638.54 685.435 L1639.1 685.435 L1639.66 685.435 L1640.21 685.435 L1640.77 685.435 L1641.33 685.435 L1641.89 685.435 L1642.45 685.435 L1643.01 685.435 L1643.57 685.435 L1644.13 685.435 L1644.69 685.435 L1645.25 685.435 L1645.81 685.435 L1646.37 685.435 L1646.93 685.435 L1647.48 685.435 L1648.04 685.435 L1648.6 685.435 L1649.16 685.435 L1649.72 685.435 L1650.28 685.435 L1650.84 685.435 L1651.4 685.435 L1651.96 685.435 L1652.52 685.435 L1653.08 685.435 L1653.64 685.435 L1654.2 685.435 L1654.76 685.435 L1655.31 685.435 L1655.87 685.435 L1656.43 685.435 L1656.99 685.435 L1657.55 685.435 L1658.11 685.435 L1658.67 685.435 L1659.23 685.435 L1659.79 685.435 L1660.35 685.435 L1660.91 685.435 L1661.47 685.435 L1662.03 685.435 L1662.58 685.435 L1663.14 685.435 L1663.7 685.435 L1664.26 685.435 L1664.82 685.435 L1665.38 685.435 L1665.94 685.435 L1666.5 685.435 L1667.06 685.435 L1667.62 685.435 L1668.18 685.435 L1668.74 685.435 L1669.3 685.435 L1669.85 685.435 L1670.41 685.435 L1670.97 685.435 L1671.53 685.435 L1672.09 685.435 L1672.65 685.435 L1673.21 685.435 L1673.77 685.435 L1674.33 685.435 L1674.89 685.435 L1675.45 685.435 L1676.01 685.435 L1676.57 685.435 L1677.13 685.435 L1677.68 685.435 L1678.24 685.435 L1678.8 685.435 L1679.36 685.435 L1679.92 685.435 L1680.48 685.435 L1681.04 685.435 L1681.6 685.435 L1682.16 685.435 L1682.72 685.435 L1683.28 685.435 L1683.84 685.435 L1684.4 685.435 L1684.95 685.435 L1685.51 685.435 L1686.07 685.435 L1686.63 685.435 L1687.19 685.435 L1687.75 685.435 L1688.31 685.435 L1688.87 685.435 L1689.43 685.435 L1689.99 685.435 L1690.55 685.435 L1691.11 685.435 L1691.67 685.435 L1692.23 685.435 L1692.78 685.435 L1693.34 685.435 L1693.9 685.435 L1694.46 685.435 L1695.02 685.435 L1695.58 685.435 L1696.14 685.435 L1696.7 685.435 L1697.26 685.435 L1697.82 685.435 L1698.38 685.435 L1698.94 685.435 L1699.5 685.435 L1700.05 685.435 L1700.61 685.435 L1701.17 685.435 L1701.73 685.435 L1702.29 685.435 L1702.85 685.435 L1703.41 685.435 L1703.97 685.435 L1704.53 685.435 L1705.09 685.435 L1705.65 685.435 L1706.21 685.435 L1706.77 685.435 L1707.32 685.435 L1707.88 685.435 L1708.44 685.435 L1709 685.435 L1709.56 685.435 L1710.12 685.435 L1710.68 685.435 L1711.24 685.435 L1711.8 685.435 L1712.36 685.435 L1712.92 685.435 L1713.48 685.435 L1714.04 685.435 L1714.6 685.435 L1715.15 685.435 L1715.71 685.435 L1716.27 685.435 L1716.83 685.435 L1717.39 685.435 L1717.95 685.435 L1718.51 685.435 L1719.07 685.435 L1719.63 685.435 L1720.19 685.435 L1720.75 685.435 L1721.31 685.435 L1721.87 685.435 L1722.42 685.435 L1722.98 685.435 L1723.54 685.435 L1724.1 685.435 L1724.66 685.435 L1725.22 685.435 L1725.78 685.435 L1726.34 685.435 L1726.9 685.435 L1727.46 685.435 L1728.02 685.435 L1728.58 685.435 L1729.14 685.435 L1729.69 685.435 L1730.25 685.435 L1730.81 685.435 L1731.37 685.435 L1731.93 685.435 L1732.49 685.435 L1733.05 685.435 L1733.61 685.435 L1734.17 685.435 L1734.73 685.435 L1735.29 685.435 L1735.85 685.435 L1736.41 685.435 L1736.97 685.435 L1737.52 685.435 L1738.08 685.435 L1738.64 685.435 L1739.2 685.435 L1739.76 685.435 L1740.32 685.435 L1740.88 685.435 L1741.44 685.435 L1742 685.435 L1742.56 685.435 L1743.12 685.435 L1743.68 685.435 L1744.24 685.435 L1744.79 685.435 L1745.35 685.435 L1745.91 685.435 L1746.47 685.435 L1747.03 685.435 L1747.59 685.435 L1748.15 685.435 L1748.71 685.435 L1749.27 685.435 L1749.83 685.435 L1750.39 685.435 L1750.95 685.435 L1751.51 685.435 L1752.06 685.435 L1752.62 685.435 L1753.18 685.435 L1753.74 685.435 L1754.3 685.435 L1754.86 685.435 L1755.42 685.435 L1755.98 685.435 L1756.54 685.435 L1757.1 685.435 L1757.66 685.435 L1758.22 685.435 L1758.78 685.435 L1759.34 685.435 L1759.89 685.435 L1760.45 685.435 L1761.01 685.435 L1761.57 685.435 L1762.13 685.435 L1762.69 685.435 L1763.25 685.435 L1763.81 685.435 L1764.37 685.435 L1764.93 685.435 L1765.49 685.435 L1766.05 685.435 L1766.61 685.435 L1767.16 685.435 L1767.72 685.435 L1768.28 685.435 L1768.84 685.435 L1769.4 685.435 L1769.96 685.435 L1770.52 685.435 L1771.08 685.435 L1771.64 685.435 L1772.2 685.435 L1772.76 685.435 L1773.32 685.435 L1773.88 685.435 L1774.43 685.435 L1774.99 685.435 L1775.55 685.435 L1776.11 685.435 L1776.67 685.435 L1777.23 685.435 L1777.79 685.435 L1778.35 685.435 L1778.91 685.435 L1779.47 685.435 L1780.03 685.435 L1780.59 685.435 L1781.15 685.435 L1781.71 685.435 L1782.26 685.435 L1782.82 685.435 L1783.38 685.435 L1783.94 685.435 L1784.5 685.435 L1785.06 685.435 L1785.62 685.435 L1786.18 685.435 L1786.74 685.435 L1787.3 685.435 L1787.86 685.435 L1788.42 685.435 L1788.98 685.435 L1789.53 685.435 L1790.09 685.435 L1790.65 685.435 L1791.21 685.435 L1791.77 685.435 L1792.33 685.435 L1792.89 685.435 L1793.45 685.435 L1794.01 685.435 L1794.57 685.435 L1795.13 685.435 L1795.69 685.435 L1796.25 685.435 L1796.8 685.435 L1797.36 685.435 L1797.92 685.435 L1798.48 685.435 L1799.04 685.435 L1799.6 685.435 L1800.16 685.435 L1800.72 685.435 L1801.28 685.435 L1801.84 685.435 L1802.4 685.435 L1802.96 685.435 L1803.52 685.435 L1804.08 685.435 L1804.63 685.435 L1805.19 685.435 L1805.75 685.435 L1806.31 685.435 L1806.87 685.435 L1807.43 685.435 L1807.99 685.435 L1808.55 685.435 L1809.11 685.435 L1809.67 685.435 L1810.23 685.435 L1810.79 685.435 L1811.35 685.435 L1811.9 685.435 L1812.46 685.435 L1813.02 685.435 L1813.58 685.435 L1814.14 685.435 L1814.7 685.435 L1815.26 685.435 L1815.82 685.435 L1816.38 685.435 L1816.94 685.435 L1817.5 685.435 L1818.06 685.435 L1818.62 685.435 L1819.18 685.435 L1819.73 685.435 L1820.29 685.435 L1820.85 685.435 L1821.41 685.435 L1821.97 685.435 L1822.53 685.435 L1823.09 685.435 L1823.65 685.435 L1824.21 685.435 L1824.77 685.435 L1825.33 685.435 L1825.89 685.435 L1826.45 685.435 L1827 685.435 L1827.56 685.435 L1828.12 685.435 L1828.68 685.435 L1829.24 685.435 L1829.8 685.435 L1830.36 685.435 L1830.92 685.435 L1831.48 685.435 L1832.04 685.435 L1832.6 685.435 L1833.16 685.435 L1833.72 685.435 L1834.27 685.435 L1834.83 685.435 L1835.39 685.435 L1835.95 685.435 L1836.51 685.435 L1837.07 685.435 L1837.63 685.435 L1838.19 685.435 L1838.19 683.591 L1837.63 683.591 L1837.07 683.591 L1836.51 683.591 L1835.95 683.591 L1835.39 683.591 L1834.83 683.591 L1834.27 683.591 L1833.72 683.591 L1833.16 683.591 L1832.6 683.591 L1832.04 683.591 L1831.48 683.591 L1830.92 683.591 L1830.36 683.591 L1829.8 683.591 L1829.24 683.591 L1828.68 683.591 L1828.12 683.591 L1827.56 683.591 L1827 683.591 L1826.45 683.591 L1825.89 683.591 L1825.33 683.591 L1824.77 683.591 L1824.21 683.591 L1823.65 683.591 L1823.09 683.591 L1822.53 683.591 L1821.97 683.591 L1821.41 683.591 L1820.85 683.591 L1820.29 683.591 L1819.73 683.591 L1819.18 683.591 L1818.62 683.591 L1818.06 683.591 L1817.5 683.591 L1816.94 683.591 L1816.38 683.591 L1815.82 683.591 L1815.26 683.591 L1814.7 683.591 L1814.14 683.591 L1813.58 683.591 L1813.02 683.591 L1812.46 683.591 L1811.9 683.591 L1811.35 683.591 L1810.79 683.591 L1810.23 683.591 L1809.67 683.591 L1809.11 683.591 L1808.55 683.591 L1807.99 683.591 L1807.43 683.591 L1806.87 683.591 L1806.31 683.591 L1805.75 683.591 L1805.19 683.591 L1804.63 683.591 L1804.08 683.591 L1803.52 683.591 L1802.96 683.591 L1802.4 683.591 L1801.84 683.591 L1801.28 683.591 L1800.72 683.591 L1800.16 683.591 L1799.6 683.591 L1799.04 683.591 L1798.48 683.591 L1797.92 683.591 L1797.36 683.591 L1796.8 683.591 L1796.25 683.591 L1795.69 683.591 L1795.13 683.591 L1794.57 683.591 L1794.01 683.591 L1793.45 683.591 L1792.89 683.591 L1792.33 683.591 L1791.77 683.591 L1791.21 683.591 L1790.65 683.591 L1790.09 683.591 L1789.53 683.591 L1788.98 683.591 L1788.42 683.591 L1787.86 683.591 L1787.3 683.591 L1786.74 683.591 L1786.18 683.591 L1785.62 683.591 L1785.06 683.591 L1784.5 683.591 L1783.94 683.591 L1783.38 683.591 L1782.82 683.591 L1782.26 683.591 L1781.71 683.591 L1781.15 683.591 L1780.59 683.591 L1780.03 683.591 L1779.47 683.591 L1778.91 683.591 L1778.35 683.591 L1777.79 683.591 L1777.23 683.591 L1776.67 683.591 L1776.11 683.591 L1775.55 683.591 L1774.99 683.591 L1774.43 683.591 L1773.88 683.591 L1773.32 683.591 L1772.76 683.591 L1772.2 683.591 L1771.64 683.591 L1771.08 683.591 L1770.52 683.591 L1769.96 683.591 L1769.4 683.591 L1768.84 683.591 L1768.28 683.591 L1767.72 683.591 L1767.16 683.591 L1766.61 683.591 L1766.05 683.591 L1765.49 683.591 L1764.93 683.591 L1764.37 683.591 L1763.81 683.591 L1763.25 683.591 L1762.69 683.591 L1762.13 683.591 L1761.57 683.591 L1761.01 683.591 L1760.45 683.591 L1759.89 683.591 L1759.34 683.591 L1758.78 683.591 L1758.22 683.591 L1757.66 683.591 L1757.1 683.591 L1756.54 683.591 L1755.98 683.591 L1755.42 683.591 L1754.86 683.591 L1754.3 683.591 L1753.74 683.591 L1753.18 683.591 L1752.62 683.591 L1752.06 683.591 L1751.51 683.591 L1750.95 683.591 L1750.39 683.591 L1749.83 683.591 L1749.27 683.591 L1748.71 683.591 L1748.15 683.591 L1747.59 683.591 L1747.03 683.591 L1746.47 683.591 L1745.91 683.591 L1745.35 683.591 L1744.79 683.591 L1744.24 683.591 L1743.68 683.591 L1743.12 683.591 L1742.56 683.591 L1742 683.591 L1741.44 683.591 L1740.88 683.591 L1740.32 683.591 L1739.76 683.591 L1739.2 683.591 L1738.64 683.591 L1738.08 683.591 L1737.52 683.591 L1736.97 683.591 L1736.41 683.591 L1735.85 683.591 L1735.29 683.591 L1734.73 683.591 L1734.17 683.591 L1733.61 683.591 L1733.05 683.591 L1732.49 683.591 L1731.93 683.591 L1731.37 683.591 L1730.81 683.591 L1730.25 683.591 L1729.69 683.591 L1729.14 683.591 L1728.58 683.591 L1728.02 683.591 L1727.46 683.591 L1726.9 683.591 L1726.34 683.591 L1725.78 683.591 L1725.22 683.591 L1724.66 683.591 L1724.1 683.591 L1723.54 683.591 L1722.98 683.591 L1722.42 683.591 L1721.87 683.591 L1721.31 683.591 L1720.75 683.591 L1720.19 683.591 L1719.63 683.591 L1719.07 683.591 L1718.51 683.591 L1717.95 683.591 L1717.39 683.591 L1716.83 683.591 L1716.27 683.591 L1715.71 683.591 L1715.15 683.591 L1714.6 683.591 L1714.04 683.591 L1713.48 683.591 L1712.92 683.591 L1712.36 683.591 L1711.8 683.591 L1711.24 683.591 L1710.68 683.591 L1710.12 683.591 L1709.56 683.591 L1709 683.591 L1708.44 683.591 L1707.88 683.591 L1707.32 683.591 L1706.77 683.591 L1706.21 683.591 L1705.65 683.591 L1705.09 683.591 L1704.53 683.591 L1703.97 683.591 L1703.41 683.591 L1702.85 683.591 L1702.29 683.591 L1701.73 683.591 L1701.17 683.591 L1700.61 683.591 L1700.05 683.591 L1699.5 683.591 L1698.94 683.591 L1698.38 683.591 L1697.82 683.591 L1697.26 683.591 L1696.7 683.591 L1696.14 683.591 L1695.58 683.591 L1695.02 683.591 L1694.46 683.591 L1693.9 683.591 L1693.34 683.591 L1692.78 683.591 L1692.23 683.591 L1691.67 683.591 L1691.11 683.591 L1690.55 683.591 L1689.99 683.591 L1689.43 683.591 L1688.87 683.591 L1688.31 683.591 L1687.75 683.591 L1687.19 683.591 L1686.63 683.591 L1686.07 683.591 L1685.51 683.591 L1684.95 683.591 L1684.4 683.591 L1683.84 683.591 L1683.28 683.591 L1682.72 683.591 L1682.16 683.591 L1681.6 683.591 L1681.04 683.591 L1680.48 683.591 L1679.92 683.591 L1679.36 683.591 L1678.8 683.591 L1678.24 683.591 L1677.68 683.591 L1677.13 683.591 L1676.57 683.591 L1676.01 683.591 L1675.45 683.591 L1674.89 683.591 L1674.33 683.591 L1673.77 683.591 L1673.21 683.591 L1672.65 683.591 L1672.09 683.591 L1671.53 683.591 L1670.97 683.591 L1670.41 683.591 L1669.85 683.591 L1669.3 683.591 L1668.74 683.591 L1668.18 683.591 L1667.62 683.591 L1667.06 683.591 L1666.5 683.591 L1665.94 683.591 L1665.38 683.591 L1664.82 683.591 L1664.26 683.591 L1663.7 683.591 L1663.14 683.591 L1662.58 683.591 L1662.03 683.591 L1661.47 683.591 L1660.91 683.591 L1660.35 683.591 L1659.79 683.591 L1659.23 683.591 L1658.67 683.591 L1658.11 683.591 L1657.55 683.591 L1656.99 683.591 L1656.43 683.591 L1655.87 683.591 L1655.31 683.591 L1654.76 683.591 L1654.2 683.591 L1653.64 683.591 L1653.08 683.591 L1652.52 683.591 L1651.96 683.591 L1651.4 683.591 L1650.84 683.591 L1650.28 683.591 L1649.72 683.591 L1649.16 683.591 L1648.6 683.591 L1648.04 683.591 L1647.48 683.591 L1646.93 683.591 L1646.37 683.591 L1645.81 683.591 L1645.25 683.591 L1644.69 683.591 L1644.13 683.591 L1643.57 683.591 L1643.01 683.591 L1642.45 683.591 L1641.89 683.591 L1641.33 683.591 L1640.77 683.591 L1640.21 683.591 L1639.66 683.591 L1639.1 683.591 L1638.54 683.591 L1637.98 683.591 L1637.42 683.591 L1636.86 683.591 L1636.3 683.591 L1635.74 683.591 L1635.18 683.591 L1634.62 683.591 L1634.06 683.591 L1633.5 683.591 L1632.94 683.591 L1632.39 683.591 L1631.83 683.591 L1631.27 683.591 L1630.71 683.591 L1630.15 683.591 L1629.59 683.591 L1629.03 683.591 L1628.47 683.591 L1627.91 683.591 L1627.35 683.591 L1626.79 683.591 L1626.23 683.591 L1625.67 683.591 L1625.11 683.591 L1624.56 683.591 L1624 683.591 L1623.44 683.591 L1622.88 683.591 L1622.32 683.591 L1621.76 683.591 L1621.2 683.591 L1620.64 683.591 L1620.08 683.591 L1619.52 683.591 L1618.96 683.591 L1618.4 683.591 L1617.84 683.591 L1617.29 683.591 L1616.73 683.591 L1616.17 683.591 L1615.61 683.591 L1615.05 683.591 L1614.49 683.591 L1613.93 683.591 L1613.37 683.591 L1612.81 683.591 L1612.25 683.591 L1611.69 683.591 L1611.13 683.591 L1610.57 683.591 L1610.02 683.591 L1609.46 683.591 L1608.9 683.591 L1608.34 683.591 L1607.78 683.591 L1607.22 683.591 L1606.66 683.591 L1606.1 683.591 L1605.54 683.591 L1604.98 683.591 L1604.42 683.591 L1603.86 683.591 L1603.3 683.591 L1602.74 683.591 L1602.19 683.591 L1601.63 683.591 L1601.07 683.591 L1600.51 683.591 L1599.95 683.591 L1599.39 683.591 L1598.83 683.591 L1598.27 683.591 L1597.71 683.591 L1597.15 683.591 L1596.59 683.591 L1596.03 683.591 L1595.47 683.591 L1594.92 683.591 L1594.36 683.591 L1593.8 683.591 L1593.24 683.591 L1592.68 683.591 L1592.12 683.591 L1591.56 683.591 L1591 683.591 L1590.44 683.591 L1589.88 683.591 L1589.32 683.591 L1588.76 683.591 L1588.2 683.591 L1587.65 683.591 L1587.09 683.591 L1586.53 683.591 L1585.97 683.591 L1585.41 683.591 L1584.85 683.591 L1584.29 683.591 L1583.73 683.591 L1583.17 683.591 L1582.61 683.591 L1582.05 683.591 L1581.49 683.591 L1580.93 683.591 L1580.37 683.591 L1579.82 683.591 L1579.26 683.591 L1578.7 683.591 L1578.14 683.591 L1577.58 683.591 L1577.02 683.591 L1576.46 683.591 L1575.9 683.591 L1575.34 683.591 L1574.78 683.591 L1574.22 683.591 L1573.66 683.591 L1573.1 683.591 L1572.55 683.591 L1571.99 683.591 L1571.43 683.591 L1570.87 683.591 L1570.31 683.591 L1569.75 683.591 L1569.19 683.591 L1568.63 683.591 L1568.07 683.591 L1567.51 683.591 L1566.95 683.591 L1566.39 683.591 L1565.83 683.591 L1565.28 683.591 L1564.72 683.591 L1564.16 683.591 L1563.6 683.591 L1563.04 683.591 L1562.48 683.591 L1561.92 683.591 L1561.36 683.591 L1560.8 683.591 L1560.24 683.591 L1559.68 683.591 L1559.12 683.591 L1558.56 683.591 L1558 683.591 L1557.45 683.591 L1556.89 683.591 L1556.33 683.591 L1555.77 683.591 L1555.21 683.591 L1554.65 683.591 L1554.09 683.591 L1553.53 683.591 L1552.97 683.591 L1552.41 683.591 L1551.85 683.591 L1551.29 683.591 L1550.73 683.591 L1550.18 683.591 L1549.62 683.591 L1549.06 683.591 L1548.5 683.591 L1547.94 683.591 L1547.38 683.591 L1546.82 683.591 L1546.26 683.591 L1545.7 683.591 L1545.14 683.591 L1544.58 683.591 L1544.02 683.591 L1543.46 683.591 L1542.9 683.591 L1542.35 683.591 L1541.79 683.591 L1541.23 683.591 L1540.67 683.591 L1540.11 683.591 L1539.55 683.591 L1538.99 683.591 L1538.43 683.591 L1537.87 683.591 L1537.31 683.591 L1536.75 683.591 L1536.19 683.591 L1535.63 683.591 L1535.08 683.591 L1534.52 683.591 L1533.96 683.591 L1533.4 683.591 L1532.84 683.591 L1532.28 683.591 L1531.72 683.591 L1531.16 683.591 L1530.6 683.591 L1530.04 683.591 L1529.48 683.591 L1528.92 683.591 L1528.36 683.591 L1527.81 683.591 L1527.25 683.591 L1526.69 683.591 L1526.13 683.591 L1525.57 683.591 L1525.01 683.591 L1524.45 683.591 L1523.89 683.591 L1523.33 683.591 L1522.77 683.591 L1522.21 683.591 L1521.65 683.591 L1521.09 683.591 L1520.53 683.591 L1519.98 683.591 L1519.42 683.591 L1518.86 683.591 L1518.3 683.591 L1517.74 683.591 L1517.18 683.591 L1516.62 683.591 L1516.06 683.591 L1515.5 683.591 L1514.94 683.591 L1514.38 683.591 L1513.82 683.591 L1513.26 683.591 L1512.71 683.591 L1512.15 683.591 L1511.59 683.591 L1511.03 683.591 L1510.47 683.591 L1509.91 683.591 L1509.35 683.591 L1508.79 683.591 L1508.23 683.591 L1507.67 683.591 L1507.11 683.591 L1506.55 683.591 L1505.99 683.591 L1505.44 683.591 L1504.88 683.591 L1504.32 683.591 L1503.76 683.591 L1503.2 683.591 L1502.64 683.591 L1502.08 683.591 L1501.52 683.591 L1500.96 683.591 L1500.4 683.591 L1499.84 683.591 L1499.28 683.591 L1498.72 683.591 L1498.16 683.591 L1497.61 683.591 L1497.05 683.591 L1496.49 683.591 L1495.93 683.591 L1495.37 683.591 L1494.81 683.591 L1494.25 683.591 L1493.69 683.591 L1493.13 683.591 L1492.57 683.591 L1492.01 683.591 L1491.45 683.591 L1490.89 683.591 L1490.34 683.591 L1489.78 683.591 L1489.22 683.591 L1488.66 683.591 L1488.1 683.591 L1487.54 683.591 L1486.98 683.591 L1486.42 683.591 L1485.86 683.591 L1485.3 683.591 L1484.74 683.591 L1484.18 683.591 L1483.62 683.591 L1483.07 683.591 L1482.51 683.591 L1481.95 683.591 L1481.39 683.591 L1480.83 683.591 L1480.27 683.591 L1479.71 683.591 L1479.15 683.591 L1478.59 683.591 L1478.03 683.591 L1477.47 683.591 L1476.91 683.591 L1476.35 683.591 L1475.79 683.591 L1475.24 683.591 L1474.68 683.591 L1474.12 683.591 L1473.56 683.591 L1473 683.591 L1472.44 683.591 L1471.88 683.591 L1471.32 683.591 L1470.76 683.591 L1470.2 683.591 L1469.64 683.591 L1469.08 683.591 L1468.52 683.591 L1467.97 683.591 L1467.41 683.591 L1466.85 683.591 L1466.29 683.591 L1465.73 683.591 L1465.17 683.591 L1464.61 683.591 L1464.05 683.591 L1463.49 683.591 L1462.93 683.591 L1462.37 683.591 L1461.81 683.591 L1461.25 683.591 L1460.7 683.591 L1460.14 683.591 L1459.58 683.591 L1459.02 683.591 L1458.46 683.591 L1457.9 683.591 L1457.34 683.591 L1456.78 683.591 L1456.22 683.591 L1455.66 683.591 L1455.1 683.591 L1454.54 683.591 L1453.98 683.591 L1453.42 683.591 L1452.87 683.591 L1452.31 683.591 L1451.75 683.591 L1451.19 683.591 L1450.63 683.591 L1450.07 683.591 L1449.51 683.591 L1448.95 683.591 L1448.39 683.591 L1447.83 683.591 L1447.27 683.591 L1446.71 683.591 L1446.15 683.591 L1445.6 683.591 L1445.04 683.591 L1444.48 683.591 L1443.92 683.591 L1443.36 683.591 L1442.8 683.591 L1442.24 683.591 L1441.68 683.591 L1441.12 683.591 L1440.56 683.591 L1440 683.591 L1439.44 683.591 L1438.88 683.591 L1438.33 683.591 L1437.77 683.591 L1437.21 683.591 L1436.65 683.591 L1436.09 683.591 L1435.53 683.591 L1434.97 683.591 L1434.41 683.591 L1433.85 683.591 L1433.29 683.591 L1432.73 683.591 L1432.17 683.591 L1431.61 683.591 L1431.05 683.591 L1430.5 683.591 L1429.94 683.591 L1429.38 683.591 L1428.82 683.591 L1428.26 683.591 L1427.7 683.591 L1427.14 683.591 L1426.58 683.591 L1426.02 683.591 L1425.46 683.591 L1424.9 683.591 L1424.34 683.591 L1423.78 683.591 L1423.23 683.591 L1422.67 683.591 L1422.11 683.591 L1421.55 683.591 L1420.99 683.591 L1420.43 683.591 L1419.87 683.591 L1419.31 683.591 L1418.75 683.591 L1418.19 683.591 L1417.63 683.591 L1417.07 683.591 L1416.51 683.591 L1415.95 683.591 L1415.4 683.591 L1414.84 683.591 L1414.28 683.591 L1413.72 683.591 L1413.16 683.591 L1412.6 683.591 L1412.04 683.591 L1411.48 683.591 L1410.92 683.591 L1410.36 683.591 L1409.8 683.591 L1409.24 683.591 L1408.68 683.591 L1408.13 683.591 L1407.57 683.591 L1407.01 683.591 L1406.45 683.591 L1405.89 683.591 L1405.33 683.591 L1404.77 683.591 L1404.21 683.591 L1403.65 683.591 L1403.09 683.591 L1402.53 683.591 L1401.97 683.591 L1401.41 683.591 L1400.86 683.591 L1400.3 683.591 L1399.74 683.591 L1399.18 683.591 L1398.62 683.591 L1398.06 683.591 L1397.5 683.591 L1396.94 683.591 L1396.38 683.591 L1395.82 683.591 L1395.26 683.591 L1394.7 683.591 L1394.14 683.591 L1393.58 683.591 L1393.03 683.591 L1392.47 683.591 L1391.91 683.591 L1391.35 683.591 L1390.79 683.591 L1390.23 683.591 L1389.67 683.591 L1389.11 683.591 L1388.55 683.591 L1387.99 683.591 L1387.43 683.591 L1386.87 683.591 L1386.31 683.591 L1385.76 683.591 L1385.2 683.591 L1384.64 683.591 L1384.08 683.591 L1383.52 683.591 L1382.96 683.591 L1382.4 683.591 L1381.84 683.591 L1381.28 683.591 L1380.72 683.591 L1380.16 683.591 L1379.6 683.591 L1379.04 683.591 L1378.49 683.591 L1377.93 683.591 L1377.37 683.591 L1376.81 683.591 L1376.25 683.591 L1375.69 683.591 L1375.13 683.591 L1374.57 683.591 L1374.01 683.591 L1373.45 683.591 L1372.89 683.591 L1372.33 683.591 L1371.77 683.591 L1371.21 683.591 L1370.66 683.591 L1370.1 683.591 L1369.54 683.591 L1368.98 683.591 L1368.42 683.591 L1367.86 683.591 L1367.3 683.591 L1366.74 683.591 L1366.18 683.591 L1365.62 683.591 L1365.06 683.591 L1364.5 683.591 L1363.94 683.591 L1363.39 683.591 L1362.83 683.591 L1362.27 683.591 L1361.71 683.591 L1361.15 683.591 L1360.59 683.591 L1360.03 683.591 L1359.47 683.591 L1358.91 683.591 L1358.35 683.591 L1357.79 683.591 L1357.23 683.591 L1356.67 683.591 L1356.12 683.591 L1355.56 683.591 L1355 683.591 L1354.44 683.591 L1353.88 683.591 L1353.32 683.591 L1352.76 683.591 L1352.2 683.591 L1351.64 683.591 L1351.08 683.591 L1350.52 683.591 L1349.96 683.591 L1349.4 683.591 L1348.84 683.591 L1348.29 683.591 L1347.73 683.591 L1347.17 683.591 L1346.61 683.591 L1346.05 683.591 L1345.49 683.591 L1344.93 683.591 L1344.37 683.591 L1343.81 683.591 L1343.25 683.591 L1342.69 683.591 L1342.13 683.591 L1341.57 683.591 L1341.02 683.591 L1340.46 683.591 L1339.9 683.591 L1339.34 683.591 L1338.78 683.591 L1338.22 683.591 L1337.66 683.591 L1337.1 683.591 L1336.54 683.591 L1335.98 683.591 L1335.42 683.591 L1334.86 683.591 L1334.3 683.591 L1333.75 683.591 L1333.19 683.591 L1332.63 683.591 L1332.07 683.591 L1331.51 683.591 L1330.95 683.591 L1330.39 683.591 L1329.83 683.591 L1329.27 683.591 L1328.71 683.591 L1328.15 683.591 L1327.59 683.591 L1327.03 683.591 L1326.47 683.591 L1325.92 683.591 L1325.36 683.591 L1324.8 683.591 L1324.24 683.591 L1323.68 683.591 L1323.12 683.591 L1322.56 683.591 L1322 683.591 L1321.44 683.591 L1320.88 683.591 L1320.32 683.591 L1319.76 683.591 L1319.2 683.591 L1318.65 683.591 L1318.09 683.591 L1317.53 683.591 L1316.97 683.591 L1316.41 683.591 L1315.85 683.591 L1315.29 683.591 L1314.73 683.591 L1314.17 683.591 L1313.61 683.591 L1313.05 683.591 L1312.49 683.591 L1311.93 683.591 L1311.38 683.591 L1310.82 683.591 L1310.26 683.591 L1309.7 683.591 L1309.14 683.591 L1308.58 683.591 L1308.02 683.591 L1307.46 683.591 L1306.9 683.591 L1306.34 683.591 L1305.78 683.591 L1305.22 683.591 L1304.66 683.591 L1304.1 683.591 L1303.55 683.591 L1302.99 683.591 L1302.43 683.591 L1301.87 683.591 L1301.31 683.591 L1300.75 683.591 L1300.19 683.591 L1299.63 683.591 L1299.07 683.591 L1298.51 683.591 L1297.95 683.591 L1297.39 683.591 L1296.83 683.591 L1296.28 683.591 L1295.72 683.591 L1295.16 683.591 L1294.6 683.591 L1294.04 683.591 L1293.48 683.591 L1292.92 683.591 L1292.36 683.591 L1291.8 683.591 L1291.24 683.591 L1290.68 683.591 L1290.12 683.591 L1289.56 683.591 L1289 683.591 L1288.45 683.591 L1287.89 683.591 L1287.33 683.591 L1286.77 683.591 L1286.21 683.591 L1285.65 683.591 L1285.09 683.591 L1284.53 683.591 L1283.97 683.591 L1283.41 683.591 L1282.85 683.591 L1282.29 683.591 L1281.73 683.591 L1281.18 683.591 L1280.62 683.591 L1280.06 683.591 L1279.5 683.591 L1278.94 683.591 L1278.38 683.591 L1277.82 683.591 L1277.26 683.591 L1276.7 683.591 L1276.14 683.591 L1275.58 683.591 L1275.02 683.591 L1274.46 683.591 L1273.91 683.591 L1273.35 683.591 L1272.79 683.591 L1272.23 683.591 L1271.67 683.591 L1271.11 683.591 L1270.55 683.591 L1269.99 683.591 L1269.43 683.591 L1268.87 683.591 L1268.31 683.591 L1267.75 683.591 L1267.19 683.591 L1266.63 683.591 L1266.08 683.591 L1265.52 683.591 L1264.96 683.591 L1264.4 683.591 L1263.84 683.591 L1263.28 683.591 L1262.72 683.591 L1262.16 683.591 L1261.6 683.591 L1261.04 683.591 L1260.48 683.591 L1259.92 683.591 L1259.36 683.591 L1258.81 683.591 L1258.25 683.591 L1257.69 683.591 L1257.13 683.591 L1256.57 683.591 L1256.01 683.591 L1255.45 683.591 L1254.89 683.591 L1254.33 683.591 L1253.77 683.591 L1253.21 683.591 L1252.65 683.591 L1252.09 683.591 L1251.54 683.591 L1250.98 683.591 L1250.42 683.591 L1249.86 683.591 L1249.3 683.591 L1248.74 683.591 L1248.18 683.591 L1247.62 683.591 L1247.06 683.591 L1246.5 683.591 L1245.94 683.591 L1245.38 683.591 L1244.82 683.591 L1244.26 683.591 L1243.71 683.591 L1243.15 683.591 L1242.59 683.591 L1242.03 683.591 L1241.47 683.591 L1240.91 683.591 L1240.35 683.591 L1239.79 683.591 L1239.23 683.591 L1238.67 683.591 L1238.11 683.591 L1237.55 683.591 L1236.99 683.591 L1236.44 683.591 L1235.88 683.591 L1235.32 683.591 L1234.76 683.591 L1234.2 683.591 L1233.64 683.591 L1233.08 683.591 L1232.52 683.591 L1231.96 683.591 L1231.4 683.591 L1230.84 683.591 L1230.28 683.591 L1229.72 683.591 L1229.17 683.591 L1228.61 683.591 L1228.05 683.591 L1227.49 683.591 L1226.93 683.591 L1226.37 683.591 L1225.81 683.591 L1225.25 683.591 L1224.69 683.591 L1224.13 683.591 L1223.57 683.591 L1223.01 683.591 L1222.45 683.591 L1221.89 683.591 L1221.34 683.591 L1220.78 683.591 L1220.22 683.591 L1219.66 683.591 L1219.1 683.591 L1218.54 683.591 L1217.98 683.591 L1217.42 683.591 L1216.86 683.591 L1216.3 683.591 L1215.74 683.591 L1215.18 683.591 L1214.62 683.591 L1214.07 683.591 L1213.51 683.591 L1212.95 683.591 L1212.39 683.591 L1211.83 683.591 L1211.27 683.591 L1210.71 683.591 L1210.15 683.591 L1209.59 683.591 L1209.03 683.591 L1208.47 683.591 L1207.91 683.591 L1207.35 683.591 L1206.8 683.591 L1206.24 683.591 L1205.68 683.591 L1205.12 683.591 L1204.56 683.591 L1204 683.591 L1203.44 683.591 L1202.88 683.591 L1202.32 683.591 L1201.76 683.591 L1201.2 683.591 L1200.64 683.591 L1200.08 683.591 L1199.52 683.591 L1198.97 683.591 L1198.41 683.591 L1197.85 683.591 L1197.29 683.591 L1196.73 683.591 L1196.17 683.591 L1195.61 683.591 L1195.05 683.591 L1194.49 683.591 L1193.93 683.591 L1193.37 683.591 L1192.81 683.591 L1192.25 683.591 L1191.7 683.591 L1191.14 683.591 L1190.58 683.591 L1190.02 683.591 L1189.46 683.591 L1188.9 683.591 L1188.34 683.591 L1187.78 683.591 L1187.22 683.591 L1186.66 683.591 L1186.1 683.591 L1185.54 683.591 L1184.98 683.591 L1184.43 683.591 L1183.87 683.591 L1183.31 683.591 L1182.75 683.591 L1182.19 683.591 L1181.63 683.591 L1181.07 683.591 L1180.51 683.591 L1179.95 683.591 L1179.39 683.591 L1178.83 683.591 L1178.27 683.591 L1177.71 683.591 L1177.15 683.591 L1176.6 683.591 L1176.04 683.591 L1175.48 683.591 L1174.92 683.591 L1174.36 683.591 L1173.8 683.591 L1173.24 683.591 L1172.68 683.591 L1172.12 683.591 L1171.56 683.591 L1171 683.591 L1170.44 683.591 L1169.88 683.591 L1169.33 683.591 L1168.77 683.591 L1168.21 683.591 L1167.65 683.591 L1167.09 683.591 L1166.53 683.591 L1165.97 683.591 L1165.41 683.591 L1164.85 683.591 L1164.29 683.591 L1163.73 683.591 L1163.17 683.591 L1162.61 683.591 L1162.05 683.591 L1161.5 683.591 L1160.94 683.591 L1160.38 683.591 L1159.82 683.591 L1159.26 683.591 L1158.7 683.591 L1158.14 683.591 L1157.58 683.591 L1157.02 683.591 L1156.46 683.591 L1155.9 683.591 L1155.34 683.591 L1154.78 683.591 L1154.23 683.591 L1153.67 683.591 L1153.11 683.591 L1152.55 683.591 L1151.99 683.591 L1151.43 683.591 L1150.87 683.591 L1150.31 683.591 L1149.75 683.591 L1149.19 683.591 L1148.63 683.591 L1148.07 683.591 L1147.51 683.591 L1146.96 683.591 L1146.4 683.591 L1145.84 683.591 L1145.28 683.591 L1144.72 683.591 L1144.16 683.591 L1143.6 683.591 L1143.04 683.591 L1142.48 683.591 L1141.92 683.591 L1141.36 683.591 L1140.8 683.591 L1140.24 683.591 L1139.68 683.591 L1139.13 683.591 L1138.57 683.591 L1138.01 683.591 L1137.45 683.591 L1136.89 683.591 L1136.33 683.591 L1135.77 683.591 L1135.21 683.591 L1134.65 683.591 L1134.09 683.591 L1133.53 683.591 L1132.97 683.591 L1132.41 683.591 L1131.86 683.591 L1131.3 683.591 L1130.74 683.591 L1130.18 683.591 L1129.62 683.591 L1129.06 683.591 L1128.5 683.591 L1127.94 683.591 L1127.38 683.591 L1126.82 683.591 L1126.26 683.591 L1125.7 683.591 L1125.14 683.591 L1124.59 683.591 L1124.03 683.591 L1123.47 683.591 L1122.91 683.591 L1122.35 683.591 L1121.79 683.591 L1121.23 683.591 L1120.67 683.591 L1120.11 683.591 L1119.55 683.591 L1118.99 683.591 L1118.43 683.591 L1117.87 683.591 L1117.31 683.591 L1116.76 683.591 L1116.2 683.591 L1115.64 683.591 L1115.08 683.591 L1114.52 683.591 L1113.96 683.591 L1113.4 683.591 L1112.84 683.591 L1112.28 683.591 L1111.72 683.591 L1111.16 683.591 L1110.6 683.591 L1110.04 683.591 L1109.49 683.591 L1108.93 683.591 L1108.37 683.591 L1107.81 683.591 L1107.25 683.591 L1106.69 683.591 L1106.13 683.591 L1105.57 683.591 L1105.01 683.591 L1104.45 683.591 L1103.89 683.591 L1103.33 683.591 L1102.77 683.591 L1102.22 683.591 L1101.66 683.591 L1101.1 683.591 L1100.54 683.591 L1099.98 683.591 L1099.42 683.591 L1098.86 683.591 L1098.3 683.591 L1097.74 683.591 L1097.18 683.591 L1096.62 683.591 L1096.06 683.591 L1095.5 683.591 L1094.94 683.591 L1094.39 683.591 L1093.83 683.591 L1093.27 683.591 L1092.71 683.591 L1092.15 683.591 L1091.59 683.591 L1091.03 683.591 L1090.47 683.591 L1089.91 683.591 L1089.35 683.591 L1088.79 683.591 L1088.23 683.591 L1087.67 683.591 L1087.12 683.591 L1086.56 683.591 L1086 683.591 L1085.44 683.591 L1084.88 683.591 L1084.32 683.591 L1083.76 683.591 L1083.2 683.591 L1082.64 683.591 L1082.08 683.591 L1081.52 683.591 L1080.96 683.591 L1080.4 683.591 L1079.85 683.591 L1079.29 683.591 L1078.73 683.591 L1078.17 683.591 L1077.61 683.591 L1077.05 683.591 L1076.49 683.591 L1075.93 683.591 L1075.37 683.591 L1074.81 683.591 L1074.25 683.591 L1073.69 683.591 L1073.13 683.591 L1072.57 683.591 L1072.02 683.591 L1071.46 683.591 L1070.9 683.591 L1070.34 683.591 L1069.78 683.591 L1069.22 683.591 L1068.66 683.591 L1068.1 683.591 L1067.54 683.591 L1066.98 683.591 L1066.42 683.591 L1065.86 683.591 L1065.3 683.591 L1064.75 683.591 L1064.19 683.591 L1063.63 683.591 L1063.07 683.591 L1062.51 683.591 L1061.95 683.591 L1061.39 683.591 L1060.83 683.591 L1060.27 683.591 L1059.71 683.591 L1059.15 683.591 L1058.59 683.591 L1058.03 683.591 L1057.48 683.591 L1056.92 683.591 L1056.36 683.591 L1055.8 683.591 L1055.24 683.591 L1054.68 683.591 L1054.12 683.591 L1053.56 683.591 L1053 683.591 L1052.44 683.591 L1051.88 683.591 L1051.32 683.591 L1050.76 683.591 L1050.2 683.591 L1049.65 683.591 L1049.09 683.591 L1048.53 683.591 L1047.97 683.591 L1047.41 683.591 L1046.85 683.591 L1046.29 683.591 L1045.73 683.591 L1045.17 683.591 L1044.61 683.591 L1044.05 683.591 L1043.49 683.591 L1042.93 683.591 L1042.38 683.591 L1041.82 683.591 L1041.26 683.591 L1040.7 683.591 L1040.14 683.591 L1039.58 683.591 L1039.02 683.591 L1038.46 683.591 L1037.9 683.591 L1037.34 683.591 L1036.78 683.591 L1036.22 683.591 L1035.66 683.591 L1035.1 683.591 L1034.55 683.591 L1033.99 683.591 L1033.43 683.591 L1032.87 683.591 L1032.31 683.591 L1031.75 683.591 L1031.19 683.591 L1030.63 683.591 L1030.07 683.591 L1029.51 683.591 L1028.95 683.591 L1028.39 683.591 L1027.83 683.591 L1027.28 683.591 L1026.72 683.591 L1026.16 683.591 L1025.6 683.591 L1025.04 683.591 L1024.48 683.591 L1023.92 683.591 L1023.36 683.591 L1022.8 683.591 L1022.24 683.591 L1021.68 683.591 L1021.12 683.591 L1020.56 683.591 L1020.01 683.591 L1019.45 683.591 L1018.89 683.591 L1018.33 683.591 L1017.77 683.591 L1017.21 683.591 L1016.65 683.591 L1016.09 683.591 L1015.53 683.591 L1014.97 683.591 L1014.41 683.591 L1013.85 683.591 L1013.29 683.591 L1012.73 683.591 L1012.18 683.591 L1011.62 683.591 L1011.06 683.591 L1010.5 683.591 L1009.94 683.591 L1009.38 683.591 L1008.82 683.591 L1008.26 683.591 L1007.7 683.591 L1007.14 683.591 L1006.58 683.591 L1006.02 683.591 L1005.46 683.591 L1004.91 683.591 L1004.35 683.591 L1003.79 683.591 L1003.23 683.591 L1002.67 683.591 L1002.11 683.591 L1001.55 683.591 L1000.99 683.591 L1000.43 683.591 L999.872 683.591 L999.313 683.591 L998.754 683.591 L998.194 683.591 L997.635 683.591 L997.076 683.591 L996.517 683.591 L995.957 683.591 L995.398 683.591 L994.839 683.591 L994.28 683.591 L993.72 683.591 L993.161 683.591 L992.602 683.591 L992.043 683.591 L991.483 683.591 L990.924 683.591 L990.365 683.591 L989.806 683.591 L989.246 683.591 L988.687 683.591 L988.128 683.591 L987.569 683.591 L987.009 683.591 L986.45 683.591 L985.891 683.591 L985.332 683.591 L984.772 683.591 L984.213 683.591 L983.654 683.591 L983.095 683.591 L982.535 683.591 L981.976 683.591 L981.417 683.591 L980.858 683.591 L980.298 683.591 L979.739 683.591 L979.18 683.591 L978.621 683.591 L978.061 683.591 L977.502 683.591 L976.943 683.591 L976.384 683.591 L975.824 683.591 L975.265 683.591 L974.706 683.591 L974.147 683.591 L973.587 683.591 L973.028 683.591 L972.469 683.591 L971.91 683.591 L971.35 683.591 L970.791 683.591 L970.232 683.591 L969.673 683.591 L969.113 683.591 L968.554 683.591 L967.995 683.591 L967.436 683.591 L966.876 683.591 L966.317 683.591 L965.758 683.591 L965.199 683.591 L964.639 683.591 L964.08 683.591 L963.521 683.591 L962.962 683.591 L962.402 683.591 L961.843 683.591 L961.284 683.591 L960.725 683.591 L960.165 683.591 L959.606 683.591 L959.047 683.591 L958.488 683.591 L957.928 683.591 L957.369 683.591 L956.81 683.591 L956.251 683.591 L955.691 683.591 L955.132 683.591 L954.573 683.591 L954.014 683.591 L953.454 683.591 L952.895 683.591 L952.336 683.591 L951.777 683.591 L951.217 683.591 L950.658 683.591 L950.099 683.591 L949.54 683.591 L948.98 683.591 L948.421 683.591 L947.862 683.591 L947.303 683.591 L946.743 683.591 L946.184 683.591 L945.625 683.591 L945.066 683.591 L944.506 683.591 L943.947 683.591 L943.388 683.591 L942.829 683.591 L942.269 683.591 L941.71 683.591 L941.151 683.591 L940.592 683.591 L940.032 683.591 L939.473 683.591 L938.914 683.591 L938.355 683.591 L937.795 683.591 L937.236 683.591 L936.677 683.591 L936.118 683.591 L935.558 683.591 L934.999 683.591 L934.44 683.591 L933.881 683.591 L933.321 683.591 L932.762 683.591 L932.203 683.591 L931.644 683.591 L931.084 683.591 L930.525 683.591 L929.966 683.591 L929.406 683.591 L928.847 683.591 L928.288 683.591 L927.729 683.591 L927.169 683.591 L926.61 683.591 L926.051 683.591 L925.492 683.591 L924.932 683.591 L924.373 683.591 L923.814 683.591 L923.255 683.591 L922.695 683.591 L922.136 683.591 L921.577 683.591 L921.018 683.591 L920.458 683.591 L919.899 683.591 L919.34 683.591 L918.781 683.591 L918.221 683.591 L917.662 683.591 L917.103 683.591 L916.544 683.591 L915.984 683.591 L915.425 683.591 L914.866 683.591 L914.307 683.591 L913.747 683.591 L913.188 683.591 L912.629 683.591 L912.07 683.591 L911.51 683.591 L910.951 683.591 L910.392 683.591 L909.833 683.591 L909.273 683.591 L908.714 683.591 L908.155 683.591 L907.596 683.591 L907.036 683.591 L906.477 683.591 L905.918 683.591 L905.359 683.591 L904.799 683.591 L904.24 683.591 L903.681 683.591 L903.122 683.591 L902.562 683.591 L902.003 683.591 L901.444 683.591 L900.885 683.591 L900.325 683.591 L899.766 683.591 L899.207 683.591 L898.648 683.591 L898.088 683.591 L897.529 683.591 L896.97 683.591 L896.411 683.591 L895.851 683.591 L895.292 683.591 L894.733 683.591 L894.174 683.591 L893.614 683.591 L893.055 683.591 L892.496 683.591 L891.937 683.591 L891.377 683.591 L890.818 683.591 L890.259 683.591 L889.7 683.591 L889.14 683.591 L888.581 683.591 L888.022 683.591 L887.463 683.591 L886.903 683.591 L886.344 683.591 L885.785 683.591 L885.226 683.591 L884.666 683.591 L884.107 683.591 L883.548 683.591 L882.989 683.591 L882.429 683.591 L881.87 683.591 L881.311 683.591 L880.752 683.591 L880.192 683.591 L879.633 683.591 L879.074 683.591 L878.515 683.591 L877.955 683.591 L877.396 683.591 L876.837 683.591 L876.278 683.591 L875.718 683.591 L875.159 683.591 L874.6 683.591 L874.041 683.591 L873.481 683.591 L872.922 683.591 L872.363 683.591 L871.804 683.591 L871.244 683.591 L870.685 683.591 L870.126 683.591 L869.567 683.591 L869.007 683.591 L868.448 683.591 L867.889 683.591 L867.33 683.591 L866.77 683.591 L866.211 683.591 L865.652 683.591 L865.093 683.591 L864.533 683.591 L863.974 683.591 L863.415 683.591 L862.856 683.591 L862.296 683.591 L861.737 683.591 L861.178 683.591 L860.619 683.591 L860.059 683.591 L859.5 683.591 L858.941 683.591 L858.382 683.591 L857.822 683.591 L857.263 683.591 L856.704 683.591 L856.145 683.591 L855.585 683.591 L855.026 683.591 L854.467 683.591 L853.908 683.591 L853.348 683.591 L852.789 683.591 L852.23 683.591 L851.671 683.591 L851.111 683.591 L850.552 683.591 L849.993 683.591 L849.434 683.591 L848.874 683.591 L848.315 683.591 L847.756 683.591 L847.197 683.591 L846.637 683.591 L846.078 683.591 L845.519 683.591 L844.96 683.591 L844.4 683.591 L843.841 683.591 L843.282 683.591 L842.723 683.591 L842.163 683.591 L841.604 683.591 L841.045 683.591 L840.486 683.591 L839.926 683.591 L839.367 683.591 L838.808 683.591 L838.249 683.591 L837.689 683.591 L837.13 683.591 L836.571 683.591 L836.012 683.591 L835.452 683.591 L834.893 683.591 L834.334 683.591 L833.775 683.591 L833.215 683.591 L832.656 683.591 L832.097 683.591 L831.538 683.591 L830.978 683.591 L830.419 683.591 L829.86 683.591 L829.301 683.591 L828.741 683.591 L828.182 683.591 L827.623 683.591 L827.064 683.591 L826.504 683.591 L825.945 683.591 L825.386 683.591 L824.827 683.591 L824.267 683.591 L823.708 683.591 L823.149 683.591 L822.59 683.591 L822.03 683.591 L821.471 683.591 L820.912 683.591 L820.353 683.591 L819.793 683.591 L819.234 683.591 L818.675 683.591 L818.116 683.591 L817.556 683.591 L816.997 683.591 L816.438 683.591 L815.879 683.591 L815.319 683.591 L814.76 683.591 L814.201 683.591 L813.642 683.591 L813.082 683.591 L812.523 683.591 L811.964 683.591 L811.405 683.591 L810.845 683.591 L810.286 683.591 L809.727 683.591 L809.168 683.591 L808.608 683.591 L808.049 683.591 L807.49 683.591 L806.931 683.591 L806.371 683.591 L805.812 683.591 L805.253 683.591 L804.693 683.591 L804.134 683.591 L803.575 683.591 L803.016 683.591 L802.456 683.591 L801.897 683.591 L801.338 683.591 L800.779 683.591 L800.219 683.591 L799.66 683.591 L799.101 683.591 L798.542 683.591 L797.982 683.591 L797.423 683.591 L796.864 683.591 L796.305 683.591 L795.745 683.591 L795.186 683.591 L794.627 683.591 L794.068 683.591 L793.508 683.591 L792.949 683.591 L792.39 683.591 L791.831 683.591 L791.271 683.591 L790.712 683.591 L790.153 683.591 L789.594 683.591 L789.034 683.591 L788.475 683.591 L787.916 683.591 L787.357 683.591 L786.797 683.591 L786.238 683.591 L785.679 683.591 L785.12 683.591 L784.56 683.591 L784.001 683.591 L783.442 683.591 L782.883 683.591 L782.323 683.591 L781.764 683.591 L781.205 683.591 L780.646 683.591 L780.086 683.591 L779.527 683.591 L778.968 683.591 L778.409 683.591 L777.849 683.591 L777.29 683.591 L776.731 683.591 L776.172 683.591 L775.612 683.591 L775.053 683.591 L774.494 683.591 L773.935 683.591 L773.375 683.591 L772.816 683.591 L772.257 683.591 L771.698 683.591 L771.138 683.591 L770.579 683.591 L770.02 683.591 L769.461 683.591 L768.901 683.591 L768.342 683.591 L767.783 683.591 L767.224 683.591 L766.664 683.591 L766.105 683.591 L765.546 683.591 L764.987 683.591 L764.427 683.591 L763.868 683.591 L763.309 683.591 L762.75 683.591 L762.19 683.591 L761.631 683.591 L761.072 683.591 L760.513 683.591 L759.953 683.591 L759.394 683.591 L758.835 683.591 L758.276 683.591 L757.716 683.591 L757.157 683.591 L756.598 683.591 L756.039 683.591 L755.479 683.591 L754.92 683.591 L754.361 683.591 L753.802 683.591 L753.242 683.591 L752.683 683.591 L752.124 683.591 L751.565 683.591 L751.005 683.591 L750.446 683.591 L749.887 683.591 L749.328 683.591 L748.768 683.591 L748.209 683.591 L747.65 683.591 L747.091 683.591 L746.531 683.591 L745.972 683.591 L745.413 683.591 L744.854 683.591 L744.294 683.591 L743.735 683.591 L743.176 683.591 L742.617 683.591 L742.057 683.591 L741.498 683.591 L740.939 683.591 L740.38 683.591 L739.82 683.591 L739.261 683.591 L738.702 683.591 L738.143 683.591 L737.583 683.591 L737.024 683.591 L736.465 683.591 L735.906 683.591 L735.346 683.591 L734.787 683.591 L734.228 683.591 L733.669 683.591 L733.109 683.591 L732.55 683.591 L731.991 683.591 L731.432 683.591 L730.872 683.591 L730.313 683.591 L729.754 683.591 L729.195 683.591 L728.635 683.591 L728.076 683.591 L727.517 683.591 L726.958 683.591 L726.398 683.591 L725.839 683.591 L725.28 683.591 L724.721 683.591 L724.161 683.591 L723.602 683.591 L723.043 683.591 L722.484 683.591 L721.924 683.591 L721.365 683.591 L720.806 683.591 L720.247 683.591  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.553 720.806,684.553 721.365,684.553 721.924,684.553 722.484,684.553 723.043,684.553 723.602,684.553 724.161,684.553 724.721,684.553 725.28,684.553 725.839,684.553 726.398,684.553 726.958,684.553 727.517,684.553 728.076,684.553 728.635,684.553 729.195,684.553 729.754,684.553 730.313,684.553 730.872,684.553 731.432,684.553 731.991,684.553 732.55,684.553 733.109,684.553 733.669,684.553 734.228,684.553 734.787,684.553 735.346,684.553 735.906,684.553 736.465,684.553 737.024,684.553 737.583,684.553 738.143,684.553 738.702,684.553 739.261,684.553 739.82,684.553 740.38,684.553 740.939,684.553 741.498,684.553 742.057,684.553 742.617,684.553 743.176,684.553 743.735,684.553 744.294,684.553 744.854,684.553 745.413,684.553 745.972,684.553 746.531,684.553 747.091,684.553 747.65,684.553 748.209,684.553 748.768,684.553 749.328,684.553 749.887,684.553 750.446,684.553 751.005,684.553 751.565,684.553 752.124,684.553 752.683,684.553 753.242,684.553 753.802,684.553 754.361,684.553 754.92,684.553 755.479,684.553 756.039,684.553 756.598,684.553 757.157,684.553 757.716,684.553 758.276,684.553 758.835,684.553 759.394,684.553 759.953,684.553 760.513,684.553 761.072,684.553 761.631,684.553 762.19,684.553 762.75,684.553 763.309,684.553 763.868,684.553 764.427,684.553 764.987,684.553 765.546,684.553 766.105,684.553 766.664,684.553 767.224,684.553 767.783,684.553 768.342,684.553 768.901,684.553 769.461,684.553 770.02,684.553 770.579,684.553 771.138,684.553 771.698,684.553 772.257,684.553 772.816,684.553 773.375,684.553 773.935,684.553 774.494,684.553 775.053,684.553 775.612,684.553 776.172,684.553 776.731,684.553 777.29,684.553 777.849,684.553 778.409,684.553 778.968,684.553 779.527,684.553 780.086,684.553 780.646,684.553 781.205,684.553 781.764,684.553 782.323,684.553 782.883,684.553 783.442,684.553 784.001,684.553 784.56,684.553 785.12,684.553 785.679,684.553 786.238,684.553 786.797,684.553 787.357,684.553 787.916,684.553 788.475,684.553 789.034,684.553 789.594,684.553 790.153,684.553 790.712,684.553 791.271,684.553 791.831,684.553 792.39,684.553 792.949,684.553 793.508,684.553 794.068,684.553 794.627,684.553 795.186,684.553 795.745,684.553 796.305,684.553 796.864,684.553 797.423,684.553 797.982,684.553 798.542,684.553 799.101,684.553 799.66,684.553 800.219,684.553 800.779,684.553 801.338,684.553 801.897,684.553 802.456,684.553 803.016,684.553 803.575,684.553 804.134,684.553 804.693,684.553 805.253,684.553 805.812,684.553 806.371,684.553 806.931,684.553 807.49,684.553 808.049,684.553 808.608,684.553 809.168,684.553 809.727,684.553 810.286,684.553 810.845,684.553 811.405,684.553 811.964,684.553 812.523,684.553 813.082,684.553 813.642,684.553 814.201,684.553 814.76,684.553 815.319,684.553 815.879,684.553 816.438,684.553 816.997,684.553 817.556,684.553 818.116,684.553 818.675,684.553 819.234,684.553 819.793,684.553 820.353,684.553 820.912,684.553 821.471,684.553 822.03,684.553 822.59,684.553 823.149,684.553 823.708,684.553 824.267,684.553 824.827,684.553 825.386,684.553 825.945,684.553 826.504,684.553 827.064,684.553 827.623,684.553 828.182,684.553 828.741,684.553 829.301,684.553 829.86,684.553 830.419,684.553 830.978,684.553 831.538,684.553 832.097,684.553 832.656,684.553 833.215,684.553 833.775,684.553 834.334,684.553 834.893,684.553 835.452,684.553 836.012,684.553 836.571,684.553 837.13,684.553 837.689,684.553 838.249,684.553 838.808,684.553 839.367,684.553 839.926,684.553 840.486,684.553 841.045,684.553 841.604,684.553 842.163,684.553 842.723,684.553 843.282,684.553 843.841,684.553 844.4,684.553 844.96,684.553 845.519,684.553 846.078,684.553 846.637,684.553 847.197,684.553 847.756,684.553 848.315,684.553 848.874,684.553 849.434,684.553 849.993,684.553 850.552,684.553 851.111,684.553 851.671,684.553 852.23,684.553 852.789,684.553 853.348,684.553 853.908,684.553 854.467,684.553 855.026,684.553 855.585,684.553 856.145,684.553 856.704,684.553 857.263,684.553 857.822,684.553 858.382,684.553 858.941,684.553 859.5,684.553 860.059,684.553 860.619,684.553 861.178,684.553 861.737,684.553 862.296,684.553 862.856,684.553 863.415,684.553 863.974,684.553 864.533,684.553 865.093,684.553 865.652,684.553 866.211,684.553 866.77,684.553 867.33,684.553 867.889,684.553 868.448,684.553 869.007,684.553 869.567,684.553 870.126,684.553 870.685,684.553 871.244,684.553 871.804,684.553 872.363,684.553 872.922,684.553 873.481,684.553 874.041,684.553 874.6,684.553 875.159,684.553 875.718,684.553 876.278,684.553 876.837,684.553 877.396,684.553 877.955,684.553 878.515,684.553 879.074,684.553 879.633,684.553 880.192,684.553 880.752,684.553 881.311,684.553 881.87,684.553 882.429,684.553 882.989,684.553 883.548,684.553 884.107,684.553 884.666,684.553 885.226,684.553 885.785,684.553 886.344,684.553 886.903,684.553 887.463,684.553 888.022,684.553 888.581,684.553 889.14,684.553 889.7,684.553 890.259,684.553 890.818,684.553 891.377,684.553 891.937,684.553 892.496,684.553 893.055,684.553 893.614,684.553 894.174,684.553 894.733,684.553 895.292,684.553 895.851,684.553 896.411,684.553 896.97,684.553 897.529,684.553 898.088,684.553 898.648,684.553 899.207,684.553 899.766,684.553 900.325,684.553 900.885,684.553 901.444,684.553 902.003,684.553 902.562,684.553 903.122,684.553 903.681,684.553 904.24,684.553 904.799,684.553 905.359,684.553 905.918,684.553 906.477,684.553 907.036,684.553 907.596,684.553 908.155,684.553 908.714,684.553 909.273,684.553 909.833,684.553 910.392,684.553 910.951,684.553 911.51,684.553 912.07,684.553 912.629,684.553 913.188,684.553 913.747,684.553 914.307,684.553 914.866,684.553 915.425,684.553 915.984,684.553 916.544,684.553 917.103,684.553 917.662,684.553 918.221,684.553 918.781,684.553 919.34,684.553 919.899,684.553 920.458,684.553 921.018,684.553 921.577,684.553 922.136,684.553 922.695,684.553 923.255,684.553 923.814,684.553 924.373,684.553 924.932,684.553 925.492,684.553 926.051,684.553 926.61,684.553 927.169,684.553 927.729,684.553 928.288,684.553 928.847,684.553 929.406,684.553 929.966,684.553 930.525,684.553 931.084,684.553 931.644,684.553 932.203,684.553 932.762,684.553 933.321,684.553 933.881,684.553 934.44,684.553 934.999,684.553 935.558,684.553 936.118,684.553 936.677,684.553 937.236,684.553 937.795,684.553 938.355,684.553 938.914,684.553 939.473,684.553 940.032,684.553 940.592,684.553 941.151,684.553 941.71,684.553 942.269,684.553 942.829,684.553 943.388,684.553 943.947,684.553 944.506,684.553 945.066,684.553 945.625,684.553 946.184,684.553 946.743,684.553 947.303,684.553 947.862,684.553 948.421,684.553 948.98,684.553 949.54,684.553 950.099,684.553 950.658,684.553 951.217,684.553 951.777,684.553 952.336,684.553 952.895,684.553 953.454,684.553 954.014,684.553 954.573,684.553 955.132,684.553 955.691,684.553 956.251,684.553 956.81,684.553 957.369,684.553 957.928,684.553 958.488,684.553 959.047,684.553 959.606,684.553 960.165,684.553 960.725,684.553 961.284,684.553 961.843,684.553 962.402,684.553 962.962,684.553 963.521,684.553 964.08,684.553 964.639,684.553 965.199,684.553 965.758,684.553 966.317,684.553 966.876,684.553 967.436,684.553 967.995,684.553 968.554,684.553 969.113,684.553 969.673,684.553 970.232,684.553 970.791,684.553 971.35,684.553 971.91,684.553 972.469,684.553 973.028,684.553 973.587,684.553 974.147,684.553 974.706,684.553 975.265,684.553 975.824,684.553 976.384,684.553 976.943,684.553 977.502,684.553 978.061,684.553 978.621,684.553 979.18,684.553 979.739,684.553 980.298,684.553 980.858,684.553 981.417,684.553 981.976,684.553 982.535,684.553 983.095,684.553 983.654,684.553 984.213,684.553 984.772,684.553 985.332,684.553 985.891,684.553 986.45,684.553 987.009,684.553 987.569,684.553 988.128,684.553 988.687,684.553 989.246,684.553 989.806,684.553 990.365,684.553 990.924,684.553 991.483,684.553 992.043,684.553 992.602,684.553 993.161,684.553 993.72,684.553 994.28,684.553 994.839,684.553 995.398,684.553 995.957,684.553 996.517,684.553 997.076,684.553 997.635,684.553 998.194,684.553 998.754,684.553 999.313,684.553 999.872,684.553 1000.43,684.553 1000.99,684.553 1001.55,684.553 1002.11,684.553 1002.67,684.553 1003.23,684.553 1003.79,684.553 1004.35,684.553 1004.91,684.553 1005.46,684.553 1006.02,684.553 1006.58,684.553 1007.14,684.553 1007.7,684.553 1008.26,684.553 1008.82,684.553 1009.38,684.553 1009.94,684.553 1010.5,684.553 1011.06,684.553 1011.62,684.553 1012.18,684.553 1012.73,684.553 1013.29,684.553 1013.85,684.553 1014.41,684.553 1014.97,684.553 1015.53,684.553 1016.09,684.553 1016.65,684.553 1017.21,684.553 1017.77,684.553 1018.33,684.553 1018.89,684.553 1019.45,684.553 1020.01,684.553 1020.56,684.553 1021.12,684.553 1021.68,684.553 1022.24,684.553 1022.8,684.553 1023.36,684.553 1023.92,684.553 1024.48,684.553 1025.04,684.553 1025.6,684.553 1026.16,684.553 1026.72,684.553 1027.28,684.553 1027.83,684.553 1028.39,684.553 1028.95,684.553 1029.51,684.553 1030.07,684.553 1030.63,684.553 1031.19,684.553 1031.75,684.553 1032.31,684.553 1032.87,684.553 1033.43,684.553 1033.99,684.553 1034.55,684.553 1035.1,684.553 1035.66,684.553 1036.22,684.553 1036.78,684.553 1037.34,684.553 1037.9,684.553 1038.46,684.553 1039.02,684.553 1039.58,684.553 1040.14,684.553 1040.7,684.553 1041.26,684.553 1041.82,684.553 1042.38,684.553 1042.93,684.553 1043.49,684.553 1044.05,684.553 1044.61,684.553 1045.17,684.553 1045.73,684.553 1046.29,684.553 1046.85,684.553 1047.41,684.553 1047.97,684.553 1048.53,684.553 1049.09,684.553 1049.65,684.553 1050.2,684.553 1050.76,684.553 1051.32,684.553 1051.88,684.553 1052.44,684.553 1053,684.553 1053.56,684.553 1054.12,684.553 1054.68,684.553 1055.24,684.553 1055.8,684.553 1056.36,684.553 1056.92,684.553 1057.48,684.553 1058.03,684.553 1058.59,684.553 1059.15,684.553 1059.71,684.553 1060.27,684.553 1060.83,684.553 1061.39,684.553 1061.95,684.553 1062.51,684.553 1063.07,684.553 1063.63,684.553 1064.19,684.553 1064.75,684.553 1065.3,684.553 1065.86,684.553 1066.42,684.553 1066.98,684.553 1067.54,684.553 1068.1,684.553 1068.66,684.553 1069.22,684.553 1069.78,684.553 1070.34,684.553 1070.9,684.553 1071.46,684.553 1072.02,684.553 1072.57,684.553 1073.13,684.553 1073.69,684.553 1074.25,684.553 1074.81,684.553 1075.37,684.553 1075.93,684.553 1076.49,684.553 1077.05,684.553 1077.61,684.553 1078.17,684.553 1078.73,684.553 1079.29,684.553 1079.85,684.553 1080.4,684.553 1080.96,684.553 1081.52,684.553 1082.08,684.553 1082.64,684.553 1083.2,684.553 1083.76,684.553 1084.32,684.553 1084.88,684.553 1085.44,684.553 1086,684.553 1086.56,684.553 1087.12,684.553 1087.67,684.553 1088.23,684.553 1088.79,684.553 1089.35,684.553 1089.91,684.553 1090.47,684.553 1091.03,684.553 1091.59,684.553 1092.15,684.553 1092.71,684.553 1093.27,684.553 1093.83,684.553 1094.39,684.553 1094.94,684.553 1095.5,684.553 1096.06,684.553 1096.62,684.553 1097.18,684.553 1097.74,684.553 1098.3,684.553 1098.86,684.553 1099.42,684.553 1099.98,684.553 1100.54,684.553 1101.1,684.553 1101.66,684.553 1102.22,684.553 1102.77,684.553 1103.33,684.553 1103.89,684.553 1104.45,684.553 1105.01,684.553 1105.57,684.553 1106.13,684.553 1106.69,684.553 1107.25,684.553 1107.81,684.553 1108.37,684.553 1108.93,684.553 1109.49,684.553 1110.04,684.553 1110.6,684.553 1111.16,684.553 1111.72,684.553 1112.28,684.553 1112.84,684.553 1113.4,684.553 1113.96,684.553 1114.52,684.553 1115.08,684.553 1115.64,684.553 1116.2,684.553 1116.76,684.553 1117.31,684.553 1117.87,684.553 1118.43,684.553 1118.99,684.553 1119.55,684.553 1120.11,684.553 1120.67,684.553 1121.23,684.553 1121.79,684.553 1122.35,684.553 1122.91,684.553 1123.47,684.553 1124.03,684.553 1124.59,684.553 1125.14,684.553 1125.7,684.553 1126.26,684.553 1126.82,684.553 1127.38,684.553 1127.94,684.553 1128.5,684.553 1129.06,684.553 1129.62,684.553 1130.18,684.553 1130.74,684.553 1131.3,684.553 1131.86,684.553 1132.41,684.553 1132.97,684.553 1133.53,684.553 1134.09,684.553 1134.65,684.553 1135.21,684.553 1135.77,684.553 1136.33,684.553 1136.89,684.553 1137.45,684.553 1138.01,684.553 1138.57,684.553 1139.13,684.553 1139.68,684.553 1140.24,684.553 1140.8,684.553 1141.36,684.553 1141.92,684.553 1142.48,684.553 1143.04,684.553 1143.6,684.553 1144.16,684.553 1144.72,684.553 1145.28,684.553 1145.84,684.553 1146.4,684.553 1146.96,684.553 1147.51,684.553 1148.07,684.553 1148.63,684.553 1149.19,684.553 1149.75,684.553 1150.31,684.553 1150.87,684.553 1151.43,684.553 1151.99,684.553 1152.55,684.553 1153.11,684.553 1153.67,684.553 1154.23,684.553 1154.78,684.553 1155.34,684.553 1155.9,684.553 1156.46,684.553 1157.02,684.553 1157.58,684.553 1158.14,684.553 1158.7,684.553 1159.26,684.553 1159.82,684.553 1160.38,684.553 1160.94,684.553 1161.5,684.553 1162.05,684.553 1162.61,684.553 1163.17,684.553 1163.73,684.553 1164.29,684.553 1164.85,684.553 1165.41,684.553 1165.97,684.553 1166.53,684.553 1167.09,684.553 1167.65,684.553 1168.21,684.553 1168.77,684.553 1169.33,684.553 1169.88,684.553 1170.44,684.553 1171,684.553 1171.56,684.553 1172.12,684.553 1172.68,684.553 1173.24,684.553 1173.8,684.553 1174.36,684.553 1174.92,684.553 1175.48,684.553 1176.04,684.553 1176.6,684.553 1177.15,684.553 1177.71,684.553 1178.27,684.553 1178.83,684.553 1179.39,684.553 1179.95,684.553 1180.51,684.553 1181.07,684.553 1181.63,684.553 1182.19,684.553 1182.75,684.553 1183.31,684.553 1183.87,684.553 1184.43,684.553 1184.98,684.553 1185.54,684.553 1186.1,684.553 1186.66,684.553 1187.22,684.553 1187.78,684.553 1188.34,684.553 1188.9,684.553 1189.46,684.553 1190.02,684.553 1190.58,684.553 1191.14,684.553 1191.7,684.553 1192.25,684.553 1192.81,684.553 1193.37,684.553 1193.93,684.553 1194.49,684.553 1195.05,684.553 1195.61,684.553 1196.17,684.553 1196.73,684.553 1197.29,684.553 1197.85,684.553 1198.41,684.553 1198.97,684.553 1199.52,684.553 1200.08,684.553 1200.64,684.553 1201.2,684.553 1201.76,684.553 1202.32,684.553 1202.88,684.553 1203.44,684.553 1204,684.553 1204.56,684.553 1205.12,684.553 1205.68,684.553 1206.24,684.553 1206.8,684.553 1207.35,684.553 1207.91,684.553 1208.47,684.553 1209.03,684.553 1209.59,684.553 1210.15,684.553 1210.71,684.553 1211.27,684.553 1211.83,684.553 1212.39,684.553 1212.95,684.553 1213.51,684.553 1214.07,684.553 1214.62,684.553 1215.18,684.553 1215.74,684.553 1216.3,684.553 1216.86,684.553 1217.42,684.553 1217.98,684.553 1218.54,684.553 1219.1,684.553 1219.66,684.553 1220.22,684.553 1220.78,684.553 1221.34,684.553 1221.89,684.553 1222.45,684.553 1223.01,684.553 1223.57,684.553 1224.13,684.553 1224.69,684.553 1225.25,684.553 1225.81,684.553 1226.37,684.553 1226.93,684.553 1227.49,684.553 1228.05,684.553 1228.61,684.553 1229.17,684.553 1229.72,684.553 1230.28,684.553 1230.84,684.553 1231.4,684.553 1231.96,684.553 1232.52,684.553 1233.08,684.553 1233.64,684.553 1234.2,684.553 1234.76,684.553 1235.32,684.553 1235.88,684.553 1236.44,684.553 1236.99,684.553 1237.55,684.553 1238.11,684.553 1238.67,684.553 1239.23,684.553 1239.79,684.553 1240.35,684.553 1240.91,684.553 1241.47,684.553 1242.03,684.553 1242.59,684.553 1243.15,684.553 1243.71,684.553 1244.26,684.553 1244.82,684.553 1245.38,684.553 1245.94,684.553 1246.5,684.553 1247.06,684.553 1247.62,684.553 1248.18,684.553 1248.74,684.553 1249.3,684.553 1249.86,684.553 1250.42,684.553 1250.98,684.553 1251.54,684.553 1252.09,684.553 1252.65,684.553 1253.21,684.553 1253.77,684.553 1254.33,684.553 1254.89,684.553 1255.45,684.553 1256.01,684.553 1256.57,684.553 1257.13,684.553 1257.69,684.553 1258.25,684.553 1258.81,684.553 1259.36,684.553 1259.92,684.553 1260.48,684.553 1261.04,684.553 1261.6,684.553 1262.16,684.553 1262.72,684.553 1263.28,684.553 1263.84,684.553 1264.4,684.553 1264.96,684.553 1265.52,684.553 1266.08,684.553 1266.63,684.553 1267.19,684.553 1267.75,684.553 1268.31,684.553 1268.87,684.553 1269.43,684.553 1269.99,684.553 1270.55,684.553 1271.11,684.553 1271.67,684.553 1272.23,684.553 1272.79,684.553 1273.35,684.553 1273.91,684.553 1274.46,684.553 1275.02,684.553 1275.58,684.553 1276.14,684.553 1276.7,684.553 1277.26,684.553 1277.82,684.553 1278.38,684.553 1278.94,684.553 1279.5,684.553 1280.06,684.553 1280.62,684.553 1281.18,684.553 1281.73,684.553 1282.29,684.553 1282.85,684.553 1283.41,684.553 1283.97,684.553 1284.53,684.553 1285.09,684.553 1285.65,684.553 1286.21,684.553 1286.77,684.553 1287.33,684.553 1287.89,684.553 1288.45,684.553 1289,684.553 1289.56,684.553 1290.12,684.553 1290.68,684.553 1291.24,684.553 1291.8,684.553 1292.36,684.553 1292.92,684.553 1293.48,684.553 1294.04,684.553 1294.6,684.553 1295.16,684.553 1295.72,684.553 1296.28,684.553 1296.83,684.553 1297.39,684.553 1297.95,684.553 1298.51,684.553 1299.07,684.553 1299.63,684.553 1300.19,684.553 1300.75,684.553 1301.31,684.553 1301.87,684.553 1302.43,684.553 1302.99,684.553 1303.55,684.553 1304.1,684.553 1304.66,684.553 1305.22,684.553 1305.78,684.553 1306.34,684.553 1306.9,684.553 1307.46,684.553 1308.02,684.553 1308.58,684.553 1309.14,684.553 1309.7,684.553 1310.26,684.553 1310.82,684.553 1311.38,684.553 1311.93,684.553 1312.49,684.553 1313.05,684.553 1313.61,684.553 1314.17,684.553 1314.73,684.553 1315.29,684.553 1315.85,684.553 1316.41,684.553 1316.97,684.553 1317.53,684.553 1318.09,684.553 1318.65,684.553 1319.2,684.553 1319.76,684.553 1320.32,684.553 1320.88,684.553 1321.44,684.553 1322,684.553 1322.56,684.553 1323.12,684.553 1323.68,684.553 1324.24,684.553 1324.8,684.553 1325.36,684.553 1325.92,684.553 1326.47,684.553 1327.03,684.553 1327.59,684.553 1328.15,684.553 1328.71,684.553 1329.27,684.553 1329.83,684.553 1330.39,684.553 1330.95,684.553 1331.51,684.553 1332.07,684.553 1332.63,684.553 1333.19,684.553 1333.75,684.553 1334.3,684.553 1334.86,684.553 1335.42,684.553 1335.98,684.553 1336.54,684.553 1337.1,684.553 1337.66,684.553 1338.22,684.553 1338.78,684.553 1339.34,684.553 1339.9,684.553 1340.46,684.553 1341.02,684.553 1341.57,684.553 1342.13,684.553 1342.69,684.553 1343.25,684.553 1343.81,684.553 1344.37,684.553 1344.93,684.553 1345.49,684.553 1346.05,684.553 1346.61,684.553 1347.17,684.553 1347.73,684.553 1348.29,684.553 1348.84,684.553 1349.4,684.553 1349.96,684.553 1350.52,684.553 1351.08,684.553 1351.64,684.553 1352.2,684.553 1352.76,684.553 1353.32,684.553 1353.88,684.553 1354.44,684.553 1355,684.553 1355.56,684.553 1356.12,684.553 1356.67,684.553 1357.23,684.553 1357.79,684.553 1358.35,684.553 1358.91,684.553 1359.47,684.553 1360.03,684.553 1360.59,684.553 1361.15,684.553 1361.71,684.553 1362.27,684.553 1362.83,684.553 1363.39,684.553 1363.94,684.553 1364.5,684.553 1365.06,684.553 1365.62,684.553 1366.18,684.553 1366.74,684.553 1367.3,684.553 1367.86,684.553 1368.42,684.553 1368.98,684.553 1369.54,684.553 1370.1,684.553 1370.66,684.553 1371.21,684.553 1371.77,684.553 1372.33,684.553 1372.89,684.553 1373.45,684.553 1374.01,684.553 1374.57,684.553 1375.13,684.553 1375.69,684.553 1376.25,684.553 1376.81,684.553 1377.37,684.553 1377.93,684.553 1378.49,684.553 1379.04,684.553 1379.6,684.553 1380.16,684.553 1380.72,684.553 1381.28,684.553 1381.84,684.553 1382.4,684.553 1382.96,684.553 1383.52,684.553 1384.08,684.553 1384.64,684.553 1385.2,684.553 1385.76,684.553 1386.31,684.553 1386.87,684.553 1387.43,684.553 1387.99,684.553 1388.55,684.553 1389.11,684.553 1389.67,684.553 1390.23,684.553 1390.79,684.553 1391.35,684.553 1391.91,684.553 1392.47,684.553 1393.03,684.553 1393.58,684.553 1394.14,684.553 1394.7,684.553 1395.26,684.553 1395.82,684.553 1396.38,684.553 1396.94,684.553 1397.5,684.553 1398.06,684.553 1398.62,684.553 1399.18,684.553 1399.74,684.553 1400.3,684.553 1400.86,684.553 1401.41,684.553 1401.97,684.553 1402.53,684.553 1403.09,684.553 1403.65,684.553 1404.21,684.553 1404.77,684.553 1405.33,684.553 1405.89,684.553 1406.45,684.553 1407.01,684.553 1407.57,684.553 1408.13,684.553 1408.68,684.553 1409.24,684.553 1409.8,684.553 1410.36,684.553 1410.92,684.553 1411.48,684.553 1412.04,684.553 1412.6,684.553 1413.16,684.553 1413.72,684.553 1414.28,684.553 1414.84,684.553 1415.4,684.553 1415.95,684.553 1416.51,684.553 1417.07,684.553 1417.63,684.553 1418.19,684.553 1418.75,684.553 1419.31,684.553 1419.87,684.553 1420.43,684.553 1420.99,684.553 1421.55,684.553 1422.11,684.553 1422.67,684.553 1423.23,684.553 1423.78,684.553 1424.34,684.553 1424.9,684.553 1425.46,684.553 1426.02,684.553 1426.58,684.553 1427.14,684.553 1427.7,684.553 1428.26,684.553 1428.82,684.553 1429.38,684.553 1429.94,684.553 1430.5,684.553 1431.05,684.553 1431.61,684.553 1432.17,684.553 1432.73,684.553 1433.29,684.553 1433.85,684.553 1434.41,684.553 1434.97,684.553 1435.53,684.553 1436.09,684.553 1436.65,684.553 1437.21,684.553 1437.77,684.553 1438.33,684.553 1438.88,684.553 1439.44,684.553 1440,684.553 1440.56,684.553 1441.12,684.553 1441.68,684.553 1442.24,684.553 1442.8,684.553 1443.36,684.553 1443.92,684.553 1444.48,684.553 1445.04,684.553 1445.6,684.553 1446.15,684.553 1446.71,684.553 1447.27,684.553 1447.83,684.553 1448.39,684.553 1448.95,684.553 1449.51,684.553 1450.07,684.553 1450.63,684.553 1451.19,684.553 1451.75,684.553 1452.31,684.553 1452.87,684.553 1453.42,684.553 1453.98,684.553 1454.54,684.553 1455.1,684.553 1455.66,684.553 1456.22,684.553 1456.78,684.553 1457.34,684.553 1457.9,684.553 1458.46,684.553 1459.02,684.553 1459.58,684.553 1460.14,684.553 1460.7,684.553 1461.25,684.553 1461.81,684.553 1462.37,684.553 1462.93,684.553 1463.49,684.553 1464.05,684.553 1464.61,684.553 1465.17,684.553 1465.73,684.553 1466.29,684.553 1466.85,684.553 1467.41,684.553 1467.97,684.553 1468.52,684.553 1469.08,684.553 1469.64,684.553 1470.2,684.553 1470.76,684.553 1471.32,684.553 1471.88,684.553 1472.44,684.553 1473,684.553 1473.56,684.553 1474.12,684.553 1474.68,684.553 1475.24,684.553 1475.79,684.553 1476.35,684.553 1476.91,684.553 1477.47,684.553 1478.03,684.553 1478.59,684.553 1479.15,684.553 1479.71,684.553 1480.27,684.553 1480.83,684.553 1481.39,684.553 1481.95,684.553 1482.51,684.553 1483.07,684.553 1483.62,684.553 1484.18,684.553 1484.74,684.553 1485.3,684.553 1485.86,684.553 1486.42,684.553 1486.98,684.553 1487.54,684.553 1488.1,684.553 1488.66,684.553 1489.22,684.553 1489.78,684.553 1490.34,684.553 1490.89,684.553 1491.45,684.553 1492.01,684.553 1492.57,684.553 1493.13,684.553 1493.69,684.553 1494.25,684.553 1494.81,684.553 1495.37,684.553 1495.93,684.553 1496.49,684.553 1497.05,684.553 1497.61,684.553 1498.16,684.553 1498.72,684.553 1499.28,684.553 1499.84,684.553 1500.4,684.553 1500.96,684.553 1501.52,684.553 1502.08,684.553 1502.64,684.553 1503.2,684.553 1503.76,684.553 1504.32,684.553 1504.88,684.553 1505.44,684.553 1505.99,684.553 1506.55,684.553 1507.11,684.553 1507.67,684.553 1508.23,684.553 1508.79,684.553 1509.35,684.553 1509.91,684.553 1510.47,684.553 1511.03,684.553 1511.59,684.553 1512.15,684.553 1512.71,684.553 1513.26,684.553 1513.82,684.553 1514.38,684.553 1514.94,684.553 1515.5,684.553 1516.06,684.553 1516.62,684.553 1517.18,684.553 1517.74,684.553 1518.3,684.553 1518.86,684.553 1519.42,684.553 1519.98,684.553 1520.53,684.553 1521.09,684.553 1521.65,684.553 1522.21,684.553 1522.77,684.553 1523.33,684.553 1523.89,684.553 1524.45,684.553 1525.01,684.553 1525.57,684.553 1526.13,684.553 1526.69,684.553 1527.25,684.553 1527.81,684.553 1528.36,684.553 1528.92,684.553 1529.48,684.553 1530.04,684.553 1530.6,684.553 1531.16,684.553 1531.72,684.553 1532.28,684.553 1532.84,684.553 1533.4,684.553 1533.96,684.553 1534.52,684.553 1535.08,684.553 1535.63,684.553 1536.19,684.553 1536.75,684.553 1537.31,684.553 1537.87,684.553 1538.43,684.553 1538.99,684.553 1539.55,684.553 1540.11,684.553 1540.67,684.553 1541.23,684.553 1541.79,684.553 1542.35,684.553 1542.9,684.553 1543.46,684.553 1544.02,684.553 1544.58,684.553 1545.14,684.553 1545.7,684.553 1546.26,684.553 1546.82,684.553 1547.38,684.553 1547.94,684.553 1548.5,684.553 1549.06,684.553 1549.62,684.553 1550.18,684.553 1550.73,684.553 1551.29,684.553 1551.85,684.553 1552.41,684.553 1552.97,684.553 1553.53,684.553 1554.09,684.553 1554.65,684.553 1555.21,684.553 1555.77,684.553 1556.33,684.553 1556.89,684.553 1557.45,684.553 1558,684.553 1558.56,684.553 1559.12,684.553 1559.68,684.553 1560.24,684.553 1560.8,684.553 1561.36,684.553 1561.92,684.553 1562.48,684.553 1563.04,684.553 1563.6,684.553 1564.16,684.553 1564.72,684.553 1565.28,684.553 1565.83,684.553 1566.39,684.553 1566.95,684.553 1567.51,684.553 1568.07,684.553 1568.63,684.553 1569.19,684.553 1569.75,684.553 1570.31,684.553 1570.87,684.553 1571.43,684.553 1571.99,684.553 1572.55,684.553 1573.1,684.553 1573.66,684.553 1574.22,684.553 1574.78,684.553 1575.34,684.553 1575.9,684.553 1576.46,684.553 1577.02,684.553 1577.58,684.553 1578.14,684.553 1578.7,684.553 1579.26,684.553 1579.82,684.553 1580.37,684.553 1580.93,684.553 1581.49,684.553 1582.05,684.553 1582.61,684.553 1583.17,684.553 1583.73,684.553 1584.29,684.553 1584.85,684.553 1585.41,684.553 1585.97,684.553 1586.53,684.553 1587.09,684.553 1587.65,684.553 1588.2,684.553 1588.76,684.553 1589.32,684.553 1589.88,684.553 1590.44,684.553 1591,684.553 1591.56,684.553 1592.12,684.553 1592.68,684.553 1593.24,684.553 1593.8,684.553 1594.36,684.553 1594.92,684.553 1595.47,684.553 1596.03,684.553 1596.59,684.553 1597.15,684.553 1597.71,684.553 1598.27,684.553 1598.83,684.553 1599.39,684.553 1599.95,684.553 1600.51,684.553 1601.07,684.553 1601.63,684.553 1602.19,684.553 1602.74,684.553 1603.3,684.553 1603.86,684.553 1604.42,684.553 1604.98,684.553 1605.54,684.553 1606.1,684.553 1606.66,684.553 1607.22,684.553 1607.78,684.553 1608.34,684.553 1608.9,684.553 1609.46,684.553 1610.02,684.553 1610.57,684.553 1611.13,684.553 1611.69,684.553 1612.25,684.553 1612.81,684.553 1613.37,684.553 1613.93,684.553 1614.49,684.553 1615.05,684.553 1615.61,684.553 1616.17,684.553 1616.73,684.553 1617.29,684.553 1617.84,684.553 1618.4,684.553 1618.96,684.553 1619.52,684.553 1620.08,684.553 1620.64,684.553 1621.2,684.553 1621.76,684.553 1622.32,684.553 1622.88,684.553 1623.44,684.553 1624,684.553 1624.56,684.553 1625.11,684.553 1625.67,684.553 1626.23,684.553 1626.79,684.553 1627.35,684.553 1627.91,684.553 1628.47,684.553 1629.03,684.553 1629.59,684.553 1630.15,684.553 1630.71,684.553 1631.27,684.553 1631.83,684.553 1632.39,684.553 1632.94,684.553 1633.5,684.553 1634.06,684.553 1634.62,684.553 1635.18,684.553 1635.74,684.553 1636.3,684.553 1636.86,684.553 1637.42,684.553 1637.98,684.553 1638.54,684.553 1639.1,684.553 1639.66,684.553 1640.21,684.553 1640.77,684.553 1641.33,684.553 1641.89,684.553 1642.45,684.553 1643.01,684.553 1643.57,684.553 1644.13,684.553 1644.69,684.553 1645.25,684.553 1645.81,684.553 1646.37,684.553 1646.93,684.553 1647.48,684.553 1648.04,684.553 1648.6,684.553 1649.16,684.553 1649.72,684.553 1650.28,684.553 1650.84,684.553 1651.4,684.553 1651.96,684.553 1652.52,684.553 1653.08,684.553 1653.64,684.553 1654.2,684.553 1654.76,684.553 1655.31,684.553 1655.87,684.553 1656.43,684.553 1656.99,684.553 1657.55,684.553 1658.11,684.553 1658.67,684.553 1659.23,684.553 1659.79,684.553 1660.35,684.553 1660.91,684.553 1661.47,684.553 1662.03,684.553 1662.58,684.553 1663.14,684.553 1663.7,684.553 1664.26,684.553 1664.82,684.553 1665.38,684.553 1665.94,684.553 1666.5,684.553 1667.06,684.553 1667.62,684.553 1668.18,684.553 1668.74,684.553 1669.3,684.553 1669.85,684.553 1670.41,684.553 1670.97,684.553 1671.53,684.553 1672.09,684.553 1672.65,684.553 1673.21,684.553 1673.77,684.553 1674.33,684.553 1674.89,684.553 1675.45,684.553 1676.01,684.553 1676.57,684.553 1677.13,684.553 1677.68,684.553 1678.24,684.553 1678.8,684.553 1679.36,684.553 1679.92,684.553 1680.48,684.553 1681.04,684.553 1681.6,684.553 1682.16,684.553 1682.72,684.553 1683.28,684.553 1683.84,684.553 1684.4,684.553 1684.95,684.553 1685.51,684.553 1686.07,684.553 1686.63,684.553 1687.19,684.553 1687.75,684.553 1688.31,684.553 1688.87,684.553 1689.43,684.553 1689.99,684.553 1690.55,684.553 1691.11,684.553 1691.67,684.553 1692.23,684.553 1692.78,684.553 1693.34,684.553 1693.9,684.553 1694.46,684.553 1695.02,684.553 1695.58,684.553 1696.14,684.553 1696.7,684.553 1697.26,684.553 1697.82,684.553 1698.38,684.553 1698.94,684.553 1699.5,684.553 1700.05,684.553 1700.61,684.553 1701.17,684.553 1701.73,684.553 1702.29,684.553 1702.85,684.553 1703.41,684.553 1703.97,684.553 1704.53,684.553 1705.09,684.553 1705.65,684.553 1706.21,684.553 1706.77,684.553 1707.32,684.553 1707.88,684.553 1708.44,684.553 1709,684.553 1709.56,684.553 1710.12,684.553 1710.68,684.553 1711.24,684.553 1711.8,684.553 1712.36,684.553 1712.92,684.553 1713.48,684.553 1714.04,684.553 1714.6,684.553 1715.15,684.553 1715.71,684.553 1716.27,684.553 1716.83,684.553 1717.39,684.553 1717.95,684.553 1718.51,684.553 1719.07,684.553 1719.63,684.553 1720.19,684.553 1720.75,684.553 1721.31,684.553 1721.87,684.553 1722.42,684.553 1722.98,684.553 1723.54,684.553 1724.1,684.553 1724.66,684.553 1725.22,684.553 1725.78,684.553 1726.34,684.553 1726.9,684.553 1727.46,684.553 1728.02,684.553 1728.58,684.553 1729.14,684.553 1729.69,684.553 1730.25,684.553 1730.81,684.553 1731.37,684.553 1731.93,684.553 1732.49,684.553 1733.05,684.553 1733.61,684.553 1734.17,684.553 1734.73,684.553 1735.29,684.553 1735.85,684.553 1736.41,684.553 1736.97,684.553 1737.52,684.553 1738.08,684.553 1738.64,684.553 1739.2,684.553 1739.76,684.553 1740.32,684.553 1740.88,684.553 1741.44,684.553 1742,684.553 1742.56,684.553 1743.12,684.553 1743.68,684.553 1744.24,684.553 1744.79,684.553 1745.35,684.553 1745.91,684.553 1746.47,684.553 1747.03,684.553 1747.59,684.553 1748.15,684.553 1748.71,684.553 1749.27,684.553 1749.83,684.553 1750.39,684.553 1750.95,684.553 1751.51,684.553 1752.06,684.553 1752.62,684.553 1753.18,684.553 1753.74,684.553 1754.3,684.553 1754.86,684.553 1755.42,684.553 1755.98,684.553 1756.54,684.553 1757.1,684.553 1757.66,684.553 1758.22,684.553 1758.78,684.553 1759.34,684.553 1759.89,684.553 1760.45,684.553 1761.01,684.553 1761.57,684.553 1762.13,684.553 1762.69,684.553 1763.25,684.553 1763.81,684.553 1764.37,684.553 1764.93,684.553 1765.49,684.553 1766.05,684.553 1766.61,684.553 1767.16,684.553 1767.72,684.553 1768.28,684.553 1768.84,684.553 1769.4,684.553 1769.96,684.553 1770.52,684.553 1771.08,684.553 1771.64,684.553 1772.2,684.553 1772.76,684.553 1773.32,684.553 1773.88,684.553 1774.43,684.553 1774.99,684.553 1775.55,684.553 1776.11,684.553 1776.67,684.553 1777.23,684.553 1777.79,684.553 1778.35,684.553 1778.91,684.553 1779.47,684.553 1780.03,684.553 1780.59,684.553 1781.15,684.553 1781.71,684.553 1782.26,684.553 1782.82,684.553 1783.38,684.553 1783.94,684.553 1784.5,684.553 1785.06,684.553 1785.62,684.553 1786.18,684.553 1786.74,684.553 1787.3,684.553 1787.86,684.553 1788.42,684.553 1788.98,684.553 1789.53,684.553 1790.09,684.553 1790.65,684.553 1791.21,684.553 1791.77,684.553 1792.33,684.553 1792.89,684.553 1793.45,684.553 1794.01,684.553 1794.57,684.553 1795.13,684.553 1795.69,684.553 1796.25,684.553 1796.8,684.553 1797.36,684.553 1797.92,684.553 1798.48,684.553 1799.04,684.553 1799.6,684.553 1800.16,684.553 1800.72,684.553 1801.28,684.553 1801.84,684.553 1802.4,684.553 1802.96,684.553 1803.52,684.553 1804.08,684.553 1804.63,684.553 1805.19,684.553 1805.75,684.553 1806.31,684.553 1806.87,684.553 1807.43,684.553 1807.99,684.553 1808.55,684.553 1809.11,684.553 1809.67,684.553 1810.23,684.553 1810.79,684.553 1811.35,684.553 1811.9,684.553 1812.46,684.553 1813.02,684.553 1813.58,684.553 1814.14,684.553 1814.7,684.553 1815.26,684.553 1815.82,684.553 1816.38,684.553 1816.94,684.553 1817.5,684.553 1818.06,684.553 1818.62,684.553 1819.18,684.553 1819.73,684.553 1820.29,684.553 1820.85,684.553 1821.41,684.553 1821.97,684.553 1822.53,684.553 1823.09,684.553 1823.65,684.553 1824.21,684.553 1824.77,684.553 1825.33,684.553 1825.89,684.553 1826.45,684.553 1827,684.553 1827.56,684.553 1828.12,684.553 1828.68,684.553 1829.24,684.553 1829.8,684.553 1830.36,684.553 1830.92,684.553 1831.48,684.553 1832.04,684.553 1832.6,684.553 1833.16,684.553 1833.72,684.553 1834.27,684.553 1834.83,684.553 1835.39,684.553 1835.95,684.553 1836.51,684.553 1837.07,684.553 1837.63,684.553 1838.19,684.553 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0349028922291215 ± 0.02561595671279016\nProjected Energy: -4.019961782916546 ± (0.004439938302342128, 0.004845504650925037)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.540558</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4087e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.6962e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.044e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.172e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.815e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.718e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.3631242916133637\n -0.7590191922770853\n  0.1358418221962232\n  0.15789998694606844\n  0.8767114411781378\n  1.5305929970973393\n  1.5835732611867321\n  3.0728703303258484\n  3.125672653951849\n  4.862107221562171\n  6.26069485038059\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
