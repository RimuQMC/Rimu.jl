var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2102675810541913 ± 0.0013026374396517108\n   G2(1) = 0.9179702095488956 ± 0.0007471728300382934\n   G2(2) = 0.9831830300725792 ± 0.0006039052702805875\n   G2(3) = 0.9874259397028604 ± 0.0009880744453483754\n   G2(4) = 0.9831830300725792 ± 0.0006039052702805875\n   G2(5) = 0.9179702095488956 ± 0.0007471728300382934\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.035248067511947 ± 0.13044040429918016\n   Replica 2: -3.9626250679228185 ± 0.14225195158057385\n   Replica 3: -3.9804857642562026 ± 0.14646886704547152\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip730\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip731\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip732\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.97 2211.02,1003.97 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.069 2211.02,746.069 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.168 2211.02,488.168 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.266 2211.02,230.266 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.97 423.181,1003.97 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.069 423.181,746.069 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.168 423.181,488.168 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.266 423.181,230.266 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.01 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.01 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.57 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.91 Q344.395 1253.16 347.45 1248.57 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M290.043 1017.32 L306.363 1017.32 L306.363 1021.25 L284.418 1021.25 L284.418 1017.32 Q287.08 1014.56 291.664 1009.93 Q296.27 1005.28 297.451 1003.94 Q299.696 1001.41 300.576 999.677 Q301.478 997.917 301.478 996.228 Q301.478 993.473 299.534 991.737 Q297.613 990.001 294.511 990.001 Q292.312 990.001 289.858 990.765 Q287.427 991.529 284.65 993.079 L284.65 988.357 Q287.474 987.223 289.927 986.644 Q292.381 986.066 294.418 986.066 Q299.789 986.066 302.983 988.751 Q306.177 991.436 306.177 995.927 Q306.177 998.056 305.367 999.978 Q304.58 1001.88 302.474 1004.47 Q301.895 1005.14 298.793 1008.36 Q295.691 1011.55 290.043 1017.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 986.691 L334.58 986.691 L334.58 990.626 L320.506 990.626 L320.506 999.098 Q321.524 998.751 322.543 998.589 Q323.562 998.403 324.58 998.403 Q330.367 998.403 333.747 1001.57 Q337.126 1004.75 337.126 1010.16 Q337.126 1015.74 333.654 1018.84 Q330.182 1021.92 323.862 1021.92 Q321.687 1021.92 319.418 1021.55 Q317.173 1021.18 314.765 1020.44 L314.765 1015.74 Q316.849 1016.88 319.071 1017.43 Q321.293 1017.99 323.77 1017.99 Q327.774 1017.99 330.112 1015.88 Q332.45 1013.77 332.45 1010.16 Q332.45 1006.55 330.112 1004.45 Q327.774 1002.34 323.77 1002.34 Q321.895 1002.34 320.02 1002.76 Q318.168 1003.17 316.224 1004.05 L316.224 986.691 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 989.769 Q352.728 989.769 350.899 993.334 Q349.094 996.876 349.094 1004.01 Q349.094 1011.11 350.899 1014.68 Q352.728 1018.22 356.339 1018.22 Q359.973 1018.22 361.779 1014.68 Q363.608 1011.11 363.608 1004.01 Q363.608 996.876 361.779 993.334 Q359.973 989.769 356.339 989.769 M356.339 986.066 Q362.149 986.066 365.205 990.672 Q368.284 995.255 368.284 1004.01 Q368.284 1012.73 365.205 1017.34 Q362.149 1021.92 356.339 1021.92 Q350.529 1021.92 347.45 1017.34 Q344.395 1012.73 344.395 1004.01 Q344.395 995.255 347.45 990.672 Q350.529 986.066 356.339 986.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M286.062 728.789 L304.418 728.789 L304.418 732.724 L290.344 732.724 L290.344 741.196 Q291.363 740.849 292.381 740.687 Q293.4 740.502 294.418 740.502 Q300.205 740.502 303.585 743.673 Q306.964 746.845 306.964 752.261 Q306.964 757.84 303.492 760.942 Q300.02 764.02 293.701 764.02 Q291.525 764.02 289.256 763.65 Q287.011 763.28 284.603 762.539 L284.603 757.84 Q286.687 758.974 288.909 759.53 Q291.131 760.085 293.608 760.085 Q297.613 760.085 299.951 757.979 Q302.288 755.872 302.288 752.261 Q302.288 748.65 299.951 746.544 Q297.613 744.437 293.608 744.437 Q291.733 744.437 289.858 744.854 Q288.006 745.271 286.062 746.15 L286.062 728.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 731.868 Q322.566 731.868 320.737 735.433 Q318.932 738.974 318.932 746.104 Q318.932 753.21 320.737 756.775 Q322.566 760.317 326.177 760.317 Q329.811 760.317 331.617 756.775 Q333.446 753.21 333.446 746.104 Q333.446 738.974 331.617 735.433 Q329.811 731.868 326.177 731.868 M326.177 728.164 Q331.987 728.164 335.043 732.771 Q338.122 737.354 338.122 746.104 Q338.122 754.831 335.043 759.437 Q331.987 764.02 326.177 764.02 Q320.367 764.02 317.288 759.437 Q314.233 754.831 314.233 746.104 Q314.233 737.354 317.288 732.771 Q320.367 728.164 326.177 728.164 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 731.868 Q352.728 731.868 350.899 735.433 Q349.094 738.974 349.094 746.104 Q349.094 753.21 350.899 756.775 Q352.728 760.317 356.339 760.317 Q359.973 760.317 361.779 756.775 Q363.608 753.21 363.608 746.104 Q363.608 738.974 361.779 735.433 Q359.973 731.868 356.339 731.868 M356.339 728.164 Q362.149 728.164 365.205 732.771 Q368.284 737.354 368.284 746.104 Q368.284 754.831 365.205 759.437 Q362.149 764.02 356.339 764.02 Q350.529 764.02 347.45 759.437 Q344.395 754.831 344.395 746.104 Q344.395 737.354 347.45 732.771 Q350.529 728.164 356.339 728.164 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M284.835 470.888 L307.057 470.888 L307.057 472.878 L294.511 505.448 L289.627 505.448 L301.432 474.823 L284.835 474.823 L284.835 470.888 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 470.888 L334.58 470.888 L334.58 474.823 L320.506 474.823 L320.506 483.295 Q321.524 482.948 322.543 482.786 Q323.562 482.601 324.58 482.601 Q330.367 482.601 333.747 485.772 Q337.126 488.943 337.126 494.36 Q337.126 499.938 333.654 503.04 Q330.182 506.119 323.862 506.119 Q321.687 506.119 319.418 505.749 Q317.173 505.378 314.765 504.638 L314.765 499.938 Q316.849 501.073 319.071 501.628 Q321.293 502.184 323.77 502.184 Q327.774 502.184 330.112 500.077 Q332.45 497.971 332.45 494.36 Q332.45 490.749 330.112 488.642 Q327.774 486.536 323.77 486.536 Q321.895 486.536 320.02 486.952 Q318.168 487.369 316.224 488.249 L316.224 470.888 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 473.966 Q352.728 473.966 350.899 477.531 Q349.094 481.073 349.094 488.202 Q349.094 495.309 350.899 498.874 Q352.728 502.415 356.339 502.415 Q359.973 502.415 361.779 498.874 Q363.608 495.309 363.608 488.202 Q363.608 481.073 361.779 477.531 Q359.973 473.966 356.339 473.966 M356.339 470.263 Q362.149 470.263 365.205 474.869 Q368.284 479.452 368.284 488.202 Q368.284 496.929 365.205 501.536 Q362.149 506.119 356.339 506.119 Q350.529 506.119 347.45 501.536 Q344.395 496.929 344.395 488.202 Q344.395 479.452 347.45 474.869 Q350.529 470.263 356.339 470.263 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M256.664 243.611 L264.303 243.611 L264.303 217.246 L255.992 218.912 L255.992 214.653 L264.256 212.986 L268.932 212.986 L268.932 243.611 L276.571 243.611 L276.571 247.546 L256.664 247.546 L256.664 243.611 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M296.015 216.065 Q292.404 216.065 290.576 219.63 Q288.77 223.171 288.77 230.301 Q288.77 237.407 290.576 240.972 Q292.404 244.514 296.015 244.514 Q299.65 244.514 301.455 240.972 Q303.284 237.407 303.284 230.301 Q303.284 223.171 301.455 219.63 Q299.65 216.065 296.015 216.065 M296.015 212.361 Q301.826 212.361 304.881 216.968 Q307.96 221.551 307.96 230.301 Q307.96 239.028 304.881 243.634 Q301.826 248.218 296.015 248.218 Q290.205 248.218 287.127 243.634 Q284.071 239.028 284.071 230.301 Q284.071 221.551 287.127 216.968 Q290.205 212.361 296.015 212.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 216.065 Q322.566 216.065 320.737 219.63 Q318.932 223.171 318.932 230.301 Q318.932 237.407 320.737 240.972 Q322.566 244.514 326.177 244.514 Q329.811 244.514 331.617 240.972 Q333.446 237.407 333.446 230.301 Q333.446 223.171 331.617 219.63 Q329.811 216.065 326.177 216.065 M326.177 212.361 Q331.987 212.361 335.043 216.968 Q338.122 221.551 338.122 230.301 Q338.122 239.028 335.043 243.634 Q331.987 248.218 326.177 248.218 Q320.367 248.218 317.288 243.634 Q314.233 239.028 314.233 230.301 Q314.233 221.551 317.288 216.968 Q320.367 212.361 326.177 212.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 216.065 Q352.728 216.065 350.899 219.63 Q349.094 223.171 349.094 230.301 Q349.094 237.407 350.899 240.972 Q352.728 244.514 356.339 244.514 Q359.973 244.514 361.779 240.972 Q363.608 237.407 363.608 230.301 Q363.608 223.171 361.779 219.63 Q359.973 216.065 356.339 216.065 M356.339 212.361 Q362.149 212.361 365.205 216.968 Q368.284 221.551 368.284 230.301 Q368.284 239.028 365.205 243.634 Q362.149 248.218 356.339 248.218 Q350.529 248.218 347.45 243.634 Q344.395 239.028 344.395 230.301 Q344.395 221.551 347.45 216.968 Q350.529 212.361 356.339 212.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip732)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.266 4017.76,230.266 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.52 455.986,1250.53 456.554,1250.4 457.123,1250.24 457.691,1250 458.259,1249.72 458.828,1249.3 459.396,1248.84 459.964,1247.3 460.533,1246.77 461.101,1246.14 461.669,1245.43 462.238,1244.64 462.806,1243.77 463.375,1242.78 463.943,1241.72 464.511,1240.57 465.08,1238.27 465.648,1235.88 466.216,1234.39 466.785,1232.79 467.353,1230.02 467.921,1227.12 468.49,1225.14 469.058,1223.01 469.626,1220.77 470.195,1218.35 470.763,1215.79 471.331,1213.06 471.9,1208.08 472.468,1204.93 473.036,1201.57 473.605,1198.03 474.173,1194.29 474.741,1189.35 475.31,1185.14 475.878,1180.76 476.446,1174.1 477.015,1168.2 477.583,1162.12 478.152,1156.81 478.72,1151.29 479.288,1143.44 479.857,1137.5 480.425,1131.36 480.993,1124.98 481.562,1118.42 482.13,1110.65 482.698,1102.71 483.267,1094.58 483.835,1085.22 484.403,1077.73 484.972,1070 485.54,1061.15 486.108,1053.15 486.677,1041.84 487.245,1033.61 487.813,1024.03 488.382,1015.49 488.95,1005.68 489.518,996.795 490.087,987.724 490.655,976.351 491.224,964.985 491.792,953.497 492.36,941.948 492.929,931.33 493.497,920.649 494.065,909.799 494.634,898.869 495.202,887.942 495.77,877.973 496.339,865.996 496.907,854.991 497.475,844.951 498.044,832.901 498.612,818.84 499.18,809.074 499.749,798.215 500.317,788.553 500.885,778.841 501.454,768.005 502.022,758.383 502.59,746.749 503.159,737.376 503.727,724.848 504.295,711.67 504.864,699.586 505.432,686.747 506.001,678.276 506.569,667.839 507.137,658.547 507.706,650.309 508.274,641.192 508.842,631.282 509.411,622.366 509.979,612.537 510.547,602.977 511.116,593.604 511.684,586.621 512.252,579.587 512.821,571.493 513.389,562.384 513.957,555.611 514.526,544.899 515.094,535.446 515.662,526.21 516.231,519.273 516.799,511.388 517.367,503.748 517.936,498.394 518.504,491.033 519.072,485.798 519.641,479.535 520.209,471.442 520.778,464.498 521.346,458.957 521.914,454.284 522.483,448.561 523.051,443.286 523.619,437.098 524.188,433.138 524.756,429.102 525.324,423.182 525.893,418.454 526.461,413.801 527.029,409.351 527.598,406.848 528.166,402.376 528.734,398.154 529.303,394.89 529.871,388.672 530.439,384.665 531.008,380.761 531.576,376.979 532.144,374.217 532.713,370.911 533.281,368.359 533.85,364.918 534.418,360.611 534.986,358.327 535.555,353.991 536.123,351.003 536.691,345.872 537.26,342.946 537.828,340.05 538.396,337.204 538.965,335.521 539.533,331.836 540.101,331.653 540.67,330.069 541.238,326.431 541.806,322.874 542.375,319.654 542.943,317.437 543.511,316.519 544.08,316.326 544.648,315.214 545.216,311.847 545.785,310.714 546.353,309.364 546.921,311.478 547.49,309.949 548.058,306.646 548.627,303.376 549.195,299.317 549.763,299.454 550.332,297.371 550.9,295.413 551.468,293.584 552.037,290.845 552.605,290.295 553.173,288.506 553.742,288.09 554.31,287.535 554.878,287.826 555.447,287.037 556.015,287.493 556.583,286.627 557.152,285.951 557.72,282.983 558.288,284.502 558.857,282.431 559.425,281.577 559.993,278.649 560.562,279.027 561.13,277.39 561.698,276.717 562.267,277.212 562.835,275.523 563.404,273.035 563.972,271.688 564.54,272.277 565.109,271.767 565.677,270.481 566.245,269.834 566.814,267.398 567.382,265.911 567.95,266.48 568.519,265.076 569.087,262.488 569.655,260.49 570.224,261.325 570.792,260.351 571.36,259.398 571.929,259.262 572.497,256.213 573.065,257.279 573.634,258.216 574.202,256.114 574.77,256.296 575.339,254.129 575.907,256.214 576.476,255.137 577.044,254.98 577.612,254.021 578.181,251.88 578.749,250.981 579.317,248.964 579.886,248.295 580.454,248.659 581.022,248.805 581.591,249.043 582.159,249.278 582.727,250.359 583.296,250.518 583.864,249.856 584.432,248.98 585.001,249.377 585.569,249.495 586.137,248.763 586.706,244.803 587.274,245.137 587.842,245.367 588.411,244.508 588.979,244.925 589.547,243.961 590.116,243.143 590.684,241.483 591.253,242.226 591.821,241.645 592.389,243.207 592.958,243.547 593.526,243.89 594.094,245.343 594.663,244.775 595.231,245.01 595.799,246.379 596.368,246.433 596.936,245.626 597.504,247.828 598.073,246.646 598.641,245.713 599.209,247.959 599.778,248.096 600.346,247.938 600.914,247.965 601.483,249.787 602.051,249.545 602.619,248.373 603.188,250.125 603.756,249.775 604.325,249.6 604.893,248.519 605.461,246.009 606.03,245.878 606.598,246.527 607.166,247.341 607.735,246.08 608.303,245.732 608.871,246.414 609.44,242.901 610.008,243.825 610.576,243.816 611.145,243.534 611.713,243.414 612.281,244.271 612.85,244.049 613.418,245.767 613.986,244.504 614.555,243.158 615.123,243.085 615.691,241.711 616.26,241.637 616.828,239.421 617.396,239.602 617.965,237.595 618.533,237.851 619.102,236.989 619.67,237.299 620.238,238.571 620.807,237.807 621.375,236.108 621.943,237.605 622.512,237.647 623.08,237.611 623.648,235.814 624.217,236.08 624.785,237.471 625.353,235.598 625.922,234.861 626.49,236.187 627.058,234.715 627.627,235.142 628.195,234.507 628.763,234.947 629.332,235.34 629.9,237.835 630.468,239.093 631.037,240.177 631.605,237.132 632.173,231.392 632.742,235.018 633.31,232.194 633.879,234.594 634.447,232.678 635.015,233.208 635.584,234.831 636.152,235.236 636.72,234.401 637.289,233.887 637.857,235.593 638.425,237.057 638.994,239.242 639.562,239.262 640.13,238.534 640.699,237.595 641.267,238.617 641.835,238.555 642.404,238.662 642.972,239.746 643.54,239.519 644.109,239.318 644.677,239.548 645.245,237.335 645.814,235.343 646.382,234.714 646.951,231.926 647.519,233.42 648.087,235.943 648.656,235.114 649.224,233.209 649.792,231.365 650.361,230.859 650.929,232.25 651.497,233.979 652.066,233.326 652.634,234.59 653.202,235 653.771,235.267 654.339,235.613 654.907,231.798 655.476,232.132 656.044,233.246 656.612,232.657 657.181,232.069 657.749,231.387 658.317,231.805 658.886,233.341 659.454,232.614 660.022,234.087 660.591,236.432 661.159,236.642 661.728,234.638 662.296,233.947 662.864,234.299 663.433,233.51 664.001,236.83 664.569,237.175 665.138,236.235 665.706,237.303 666.274,236.349 666.843,235.518 667.411,236.761 667.979,236.977 668.548,236.252 669.116,236.476 669.684,236.744 670.253,236.95 670.821,237.914 671.389,235.911 671.958,237.082 672.526,237.211 673.094,237.452 673.663,237.696 674.231,235.796 674.799,235.836 675.368,236.133 675.936,235.188 676.505,236.413 677.073,237.495 677.641,238.659 678.21,237.479 678.778,235.363 679.346,234.467 679.915,235.801 680.483,235.674 681.051,236.794 681.62,234.734 682.188,235.05 682.756,237.186 683.325,237.148 683.893,234.707 684.461,235.675 685.03,235.423 685.598,235.497 686.166,235.474 686.735,232.358 687.303,231.611 687.871,232.823 688.44,229.963 689.008,229.35 689.577,229.635 690.145,228.917 690.713,229.474 691.282,228.897 691.85,229.214 692.418,229.754 692.987,231.158 693.555,232.513 694.123,234.802 694.692,234.759 695.26,235.865 695.828,234.697 696.397,234.722 696.965,234.593 697.533,234.585 698.102,236.616 698.67,235.58 699.238,235.472 699.807,235.631 700.375,235.494 700.943,235.614 701.512,234.56 702.08,233.429 702.648,230.671 703.217,229.684 703.785,227.97 704.354,229.263 704.922,226.616 705.49,226.012 706.059,229.824 706.627,230.187 707.195,232.679 707.764,232.988 708.332,231.952 708.9,231.905 709.469,234.358 710.037,234.521 710.605,234.749 711.174,236.907 711.742,235.933 712.31,238.183 712.879,237.877 713.447,236.658 714.015,235.421 714.584,235.268 715.152,232.067 715.72,232.361 716.289,231.725 716.857,231.911 717.425,232.081 717.994,230.154 718.562,230.279 719.131,229.466 719.699,229.129 720.267,229.499 720.836,229.904 721.404,233.404 721.972,234.507 722.541,234.638 723.109,233.669 723.677,233.708 724.246,232.774 724.814,232.939 725.382,232.13 725.951,232.252 726.519,233.438 727.087,234.491 727.656,234.418 728.224,235.533 728.792,236.73 729.361,239.701 729.929,241.121 730.497,241.603 731.066,241.031 731.634,239.49 732.203,239.98 732.771,240.435 733.339,239.903 733.908,240.48 734.476,242.027 735.044,239.316 735.613,239.779 736.181,240.275 736.749,238.799 737.318,237.145 737.886,234.629 738.454,232.371 739.023,232.207 739.591,231.082 740.159,230.966 740.728,228.886 741.296,231.371 741.864,230.533 742.433,229.65 743.001,230.689 743.569,228.8 744.138,231.185 744.706,232.959 745.274,232.902 745.843,234.845 746.411,234.562 746.98,233.184 747.548,232.072 748.116,231.168 748.685,230.225 749.253,230.517 749.821,229.754 750.39,229.84 750.958,226.949 751.526,227.349 752.095,228.438 752.663,229.766 753.231,229.823 753.8,230.967 754.368,229.919 754.936,229.176 755.505,229.297 756.073,227.355 756.641,228.869 757.21,228.848 757.778,230.14 758.346,229.243 758.915,230.444 759.483,229.397 760.052,229.8 760.62,230.893 761.188,232.98 761.757,230.845 762.325,231.215 762.893,232.368 763.462,232.477 764.03,232.574 764.598,232.791 765.167,232.777 765.735,232.65 766.303,232.617 766.872,232.667 767.44,230.769 768.008,231.036 768.577,228.18 769.145,228.519 769.713,229.727 770.282,230.004 770.85,229.289 771.418,228.81 771.987,228.954 772.555,230.197 773.123,231.422 773.692,232.698 774.26,232.78 774.829,232.783 775.397,234.772 775.965,234.71 776.534,232.623 777.102,231.501 777.67,230.492 778.239,230.785 778.807,233.088 779.375,233.933 779.944,233.963 780.512,233.91 781.08,232.819 781.649,232.481 782.217,234.426 782.785,233.152 783.354,232.029 783.922,232.967 784.49,234.156 785.059,234.038 785.627,234.873 786.195,234.705 786.764,234.611 787.332,234.385 787.9,234.396 788.469,233.209 789.037,234.118 789.606,232.849 790.174,234.915 790.742,236.914 791.311,236.596 791.879,235.103 792.447,236.912 793.016,235.359 793.584,237.082 794.152,236.638 794.721,236.46 795.289,236.865 795.857,236.437 796.426,234.951 796.994,236.554 797.562,234.928 798.131,234.696 798.699,233.201 799.267,234.231 799.836,234.161 800.404,233.813 800.972,233.59 801.541,231.156 802.109,231.091 802.678,232.048 803.246,227.726 803.814,229.948 804.383,228.065 804.951,228.28 805.519,229.277 806.088,230.178 806.656,230.142 807.224,229.114 807.793,228.284 808.361,227.667 808.929,230.005 809.498,226.845 810.066,224.898 810.634,226.379 811.203,226.747 811.771,229.17 812.339,229.372 812.908,228.182 813.476,226.167 814.044,226.495 814.613,226.661 815.181,226.075 815.749,224.327 816.318,223.802 816.886,221.326 817.455,220.874 818.023,220.815 818.591,219.895 819.16,221.818 819.728,222.61 820.296,222.377 820.865,221.984 821.433,224.804 822.001,225.464 822.57,226.245 823.138,227.833 823.706,231.338 824.275,233.47 824.843,233.413 825.411,233.686 825.98,232.633 826.548,232.728 827.116,232.811 827.685,232.039 828.253,232.123 828.821,230.247 829.39,231.36 829.958,231.351 830.526,228.486 831.095,227.702 831.663,225.984 832.232,223.56 832.8,224.05 833.368,223.834 833.937,222.539 834.505,223.289 835.073,222.073 835.642,220.646 836.21,222.408 836.778,224.156 837.347,225.944 837.915,226.206 838.483,228.605 839.052,228.878 839.62,230.371 840.188,234.416 840.757,232.365 841.325,233.775 841.893,234.861 842.462,236.788 843.03,238.673 843.598,239.364 844.167,239.9 844.735,239.291 845.304,241.016 845.872,239.447 846.44,241.025 847.009,239.501 847.577,237.974 848.145,236.69 848.714,235.29 849.282,235.991 849.85,234.634 850.419,235.259 850.987,239.01 851.555,236.253 852.124,237.089 852.692,236.706 853.26,236.427 853.829,231.945 854.397,231.024 854.965,231.066 855.534,232.148 856.102,233.046 856.67,230.885 857.239,230.706 857.807,227.651 858.375,228.818 858.944,226.894 859.512,228.096 860.081,227.285 860.649,228.53 861.217,228.709 861.786,228.862 862.354,227.112 862.922,226.386 863.491,225.771 864.059,225.203 864.627,225.577 865.196,225.952 865.764,226.543 866.332,226.959 866.901,226.05 867.469,227.514 868.037,229.113 868.606,228.324 869.174,228.695 869.742,232.134 870.311,232.1 870.879,231.183 871.447,232.287 872.016,233.216 872.584,233.432 873.152,232.255 873.721,232.37 874.289,232.133 874.858,231.046 875.426,232.288 875.994,232.42 876.563,233.463 877.131,233.339 877.699,233.322 878.268,233.291 878.836,233.06 879.404,231.858 879.973,232.937 880.541,232.863 881.109,231.699 881.678,230.53 882.246,229.525 882.814,230.653 883.383,230.559 883.951,232.935 884.519,232.702 885.088,231.472 885.656,231.48 886.224,232.724 886.793,230.711 887.361,231.875 887.93,231.67 888.498,231.602 889.066,232.896 889.635,232.011 890.203,231.97 890.771,229.925 891.34,231.933 891.908,231.772 892.476,232.979 893.045,231.875 893.613,230.774 894.181,228.867 894.75,230.944 895.318,228.74 895.886,227.862 896.455,227.08 897.023,227.528 897.591,228.705 898.16,228.871 898.728,226.184 899.296,228.687 899.865,230.848 900.433,233.934 901.001,235.68 901.57,233.336 902.138,233.19 902.707,232.853 903.275,232.912 903.843,232.713 904.412,233.475 904.98,232.276 905.548,231.254 906.117,232.345 906.685,232.5 907.253,231.363 907.822,231.631 908.39,232.598 908.958,232.488 909.527,235.507 910.095,234.05 910.663,234.041 911.232,234.976 911.8,235.666 912.368,237.639 912.937,235.262 913.505,236.148 914.073,236.642 914.642,237.266 915.21,238.862 915.779,238.297 916.347,237.605 916.915,238.167 917.484,237.587 918.052,238.095 918.62,237.422 919.189,236.638 919.757,236.119 920.325,235.736 920.894,235.482 921.462,234.171 922.03,235.904 922.599,238.591 923.167,236.834 923.735,236.365 924.304,236.768 924.872,236.137 925.44,236.779 926.009,236.398 926.577,233.82 927.145,233.119 927.714,232.932 928.282,231.585 928.85,232.487 929.419,230.255 929.987,227.949 930.556,227.186 931.124,226.524 931.692,223.555 932.261,224.105 932.829,224.408 933.397,222.807 933.966,225.448 934.534,224.747 935.102,228.205 935.671,228.135 936.239,229.237 936.807,228.197 937.376,227.249 937.944,226.21 938.512,226.319 939.081,229.778 939.649,230.769 940.217,230.655 940.786,229.474 941.354,229.607 941.922,229.419 942.491,231.579 943.059,229.398 943.627,228.282 944.196,230.525 944.764,230.4 945.333,228.937 945.901,229.1 946.469,230.125 947.038,230.017 947.606,231.06 948.174,231.911 948.743,231.676 949.311,230.539 949.879,231.392 950.448,231.356 951.016,231.397 951.584,232.251 952.153,231.926 952.721,233.81 953.289,233.529 953.858,233.009 954.426,228.664 954.994,228.596 955.563,226.381 956.131,226.733 956.699,226.883 957.268,227.065 957.836,227.198 958.405,226.59 958.973,228.058 959.541,226.234 960.11,226.464 960.678,230.825 961.246,230.834 961.815,232.685 962.383,231.483 962.951,232.453 963.52,231.156 964.088,230 964.656,232.948 965.225,231.689 965.793,229.325 966.361,231.366 966.93,232.419 967.498,235.243 968.066,233.715 968.635,234.41 969.203,235.124 969.771,233.788 970.34,230.432 970.908,231.496 971.476,230.461 972.045,231.559 972.613,230.561 973.182,229.431 973.75,230.581 974.318,228.377 974.887,227.306 975.455,226.486 976.023,226.904 976.592,227.228 977.16,226.469 977.728,224.492 978.297,223.734 978.865,224.369 979.433,222.745 980.002,223.358 980.57,225.97 981.138,227.344 981.707,229.565 982.275,230.755 982.843,230.618 983.412,229.514 983.98,229.564 984.548,230.657 985.117,231.561 985.685,232.407 986.253,231.135 986.822,231.042 987.39,231.047 987.959,232.04 988.527,228.981 989.095,227.942 989.664,231.06 990.232,231.093 990.8,230.179 991.369,230.179 991.937,229.221 992.505,231.453 993.074,231.3 993.642,232.303 994.21,233.338 994.779,233.145 995.347,235.069 995.915,233.553 996.484,231.073 997.052,228.814 997.62,228.858 998.189,228.992 998.757,229.042 999.325,229.298 999.894,230.439 1000.46,230.41 1001.03,230.233 1001.6,229.209 1002.17,229.336 1002.74,229.521 1003.3,229.847 1003.87,228.878 1004.44,227.927 1005.01,226.059 1005.58,224.486 1006.15,225.933 1006.71,226.149 1007.28,226.456 1007.85,229.068 1008.42,230.13 1008.99,231.024 1009.56,231.148 1010.12,228.142 1010.69,229.563 1011.26,226.861 1011.83,225.195 1012.4,225.685 1012.97,227.163 1013.53,227.596 1014.1,226.832 1014.67,227.196 1015.24,226.509 1015.81,225.85 1016.38,224.973 1016.94,227.409 1017.51,228.925 1018.08,229.169 1018.65,224.287 1019.22,225.957 1019.79,226.422 1020.35,226.753 1020.92,226.155 1021.49,225.651 1022.06,227.492 1022.63,228.864 1023.2,229.102 1023.76,229.422 1024.33,229.613 1024.9,230.769 1025.47,230.884 1026.04,231.77 1026.61,231.639 1027.17,232.784 1027.74,233.879 1028.31,235.877 1028.88,234.535 1029.45,235.479 1030.02,233.439 1030.58,232.409 1031.15,232.405 1031.72,231.316 1032.29,229.347 1032.86,229.698 1033.43,230.972 1033.99,232.084 1034.56,231.038 1035.13,228.046 1035.7,228.276 1036.27,228.615 1036.84,227.919 1037.4,228.364 1037.97,227.632 1038.54,228.978 1039.11,229.238 1039.68,232.305 1040.25,230.216 1040.81,229.215 1041.38,228.219 1041.95,228.607 1042.52,229.036 1043.09,230.111 1043.66,233.393 1044.22,235.168 1044.79,239.001 1045.36,239.357 1045.93,238.797 1046.5,238.413 1047.07,238.823 1047.63,238.361 1048.2,237.717 1048.77,237.175 1049.34,235.553 1049.91,235.31 1050.48,233.912 1051.05,232.594 1051.61,232.451 1052.18,232.263 1052.75,233.189 1053.32,231.941 1053.89,227.736 1054.46,227.616 1055.02,229.724 1055.59,230.926 1056.16,230.956 1056.73,230.815 1057.3,236.009 1057.87,236.644 1058.43,238.385 1059,236.736 1059.57,237.449 1060.14,236.709 1060.71,237.038 1061.28,238.565 1061.84,237.012 1062.41,237.806 1062.98,238.233 1063.55,235.443 1064.12,235.073 1064.69,235.484 1065.25,233.797 1065.82,234.627 1066.39,234.277 1066.96,234.057 1067.53,234.789 1068.1,231.108 1068.66,233.088 1069.23,234.663 1069.8,235.296 1070.37,235.758 1070.94,234.147 1071.51,229.761 1072.07,228.64 1072.64,230.812 1073.21,227.525 1073.78,225.679 1074.35,226.718 1074.92,226.845 1075.48,228.117 1076.05,229.196 1076.62,227.973 1077.19,227.091 1077.76,227.091 1078.33,227.215 1078.89,227.269 1079.46,228.333 1080.03,228.291 1080.6,227.331 1081.17,226.308 1081.74,226.396 1082.3,226.673 1082.87,226.924 1083.44,225.237 1084.01,226.633 1084.58,225.644 1085.15,226.856 1085.71,230.995 1086.28,229.948 1086.85,230.014 1087.42,231.037 1087.99,229.91 1088.56,230.023 1089.12,229.975 1089.69,229.826 1090.26,228.002 1090.83,228.164 1091.4,228.462 1091.97,228.564 1092.53,228.625 1093.1,227.89 1093.67,225.975 1094.24,226.449 1094.81,227.885 1095.38,229.175 1095.94,228.3 1096.51,228.427 1097.08,229.54 1097.65,230.485 1098.22,229.561 1098.79,231.785 1099.35,231.554 1099.92,232.309 1100.49,230.013 1101.06,232.02 1101.63,230.531 1102.2,231.755 1102.76,231.327 1103.33,231.239 1103.9,233.344 1104.47,232.216 1105.04,232.075 1105.61,231.034 1106.17,231.756 1106.74,231.561 1107.31,230.199 1107.88,231.307 1108.45,228.141 1109.02,227.189 1109.58,228.492 1110.15,228.533 1110.72,229.803 1111.29,228.79 1111.86,228.95 1112.43,226.93 1112.99,229.328 1113.56,229.272 1114.13,228.424 1114.7,226.576 1115.27,225.837 1115.84,226.204 1116.4,225.476 1116.97,226.935 1117.54,228.171 1118.11,226.231 1118.68,226.396 1119.25,226.555 1119.81,227.705 1120.38,227.933 1120.95,228.368 1121.52,228.39 1122.09,226.598 1122.66,227.919 1123.23,228.205 1123.79,226.496 1124.36,228.594 1124.93,228.825 1125.5,229.026 1126.07,228.926 1126.64,229.25 1127.2,229.444 1127.77,228.803 1128.34,227.992 1128.91,227.063 1129.48,227.366 1130.05,227.651 1130.61,228.739 1131.18,229.905 1131.75,227.822 1132.32,226.999 1132.89,229.6 1133.46,230.888 1134.02,232.945 1134.59,233.797 1135.16,233.819 1135.73,233.654 1136.3,235.409 1136.87,235.146 1137.43,233.773 1138,233.735 1138.57,233.518 1139.14,234.408 1139.71,233.211 1140.28,231.042 1140.84,229.77 1141.41,231.663 1141.98,233.551 1142.55,230.266 1143.12,228.253 1143.69,228.231 1144.25,229.346 1144.82,228.953 1145.39,229.243 1145.96,228.458 1146.53,229.694 1147.1,229.754 1147.66,229.63 1148.23,229.782 1148.8,231.712 1149.37,230.625 1149.94,232.789 1150.51,234.773 1151.07,234.468 1151.64,233.115 1152.21,232.795 1152.78,234.673 1153.35,234.418 1153.92,232.769 1154.48,232.623 1155.05,232.56 1155.62,232.5 1156.19,230.221 1156.76,230.066 1157.33,230.174 1157.89,231.165 1158.46,229.843 1159.03,226.918 1159.6,228.274 1160.17,230.549 1160.74,230.607 1161.3,227.479 1161.87,226.469 1162.44,224.64 1163.01,226.211 1163.58,227.426 1164.15,226.515 1164.71,229.042 1165.28,230.199 1165.85,232.581 1166.42,233.779 1166.99,231.601 1167.56,233.355 1168.12,233.311 1168.69,231.92 1169.26,233.068 1169.83,229.768 1170.4,228.562 1170.97,227.685 1171.53,228.673 1172.1,228.043 1172.67,226.063 1173.24,226.444 1173.81,227.846 1174.38,225.87 1174.94,223.325 1175.51,223.951 1176.08,224.592 1176.65,227.059 1177.22,227.37 1177.79,227.652 1178.35,229.866 1178.92,229.091 1179.49,229.985 1180.06,229.894 1180.63,231.168 1181.2,227.994 1181.76,227.04 1182.33,231.556 1182.9,230.315 1183.47,231.312 1184.04,230.266 1184.61,230.639 1185.17,231.715 1185.74,231.742 1186.31,230.813 1186.88,230.823 1187.45,232.993 1188.02,230.875 1188.58,230.682 1189.15,231.813 1189.72,232.733 1190.29,233.58 1190.86,233.457 1191.43,234.319 1192,235.149 1192.56,234.851 1193.13,234.618 1193.7,234.611 1194.27,235.183 1194.84,236.844 1195.41,236.177 1195.97,235.278 1196.54,233.638 1197.11,234.35 1197.68,234.943 1198.25,235.589 1198.82,234.331 1199.38,234.144 1199.95,233.623 1200.52,234.487 1201.09,236.122 1201.66,233.493 1202.23,233.099 1202.79,229.824 1203.36,226.779 1203.93,228.997 1204.5,228.08 1205.07,226.184 1205.64,226.612 1206.2,226.937 1206.77,226.142 1207.34,227.343 1207.91,228.504 1208.48,232.704 1209.05,232.313 1209.61,234.223 1210.18,229.842 1210.75,232.128 1211.32,230.669 1211.89,230.55 1212.46,228.574 1213.02,229.623 1213.59,230.47 1214.16,230.415 1214.73,231.309 1215.3,231.119 1215.87,229.977 1216.43,228.921 1217,227.959 1217.57,226.874 1218.14,228.238 1218.71,227.338 1219.28,227.721 1219.84,226.962 1220.41,229.391 1220.98,228.416 1221.55,230.689 1222.12,230.664 1222.69,230.323 1223.25,230.089 1223.82,230.99 1224.39,232.094 1224.96,232.859 1225.53,231.48 1226.1,230.314 1226.66,231.106 1227.23,232.051 1227.8,231.947 1228.37,230.819 1228.94,232.609 1229.51,232.319 1230.07,231.967 1230.64,229.844 1231.21,229.174 1231.78,229.112 1232.35,232.451 1232.92,232.146 1233.48,228.936 1234.05,228.946 1234.62,228.821 1235.19,230.849 1235.76,231.638 1236.33,232.475 1236.89,231.387 1237.46,231.307 1238.03,231.111 1238.6,231.036 1239.17,230.985 1239.74,230.757 1240.3,230.722 1240.87,232.923 1241.44,231.711 1242.01,231.681 1242.58,230.597 1243.15,230.673 1243.71,228.652 1244.28,229.7 1244.85,230.701 1245.42,231.803 1245.99,231.816 1246.56,230.849 1247.12,230.686 1247.69,230.605 1248.26,228.417 1248.83,228.221 1249.4,227.211 1249.97,226.312 1250.53,223.406 1251.1,223.974 1251.67,223.213 1252.24,224.789 1252.81,222.109 1253.38,224.663 1253.94,224.123 1254.51,223.551 1255.08,222.11 1255.65,223.941 1256.22,224.36 1256.79,225.779 1257.35,224.009 1257.92,223.568 1258.49,223.853 1259.06,226.38 1259.63,225.858 1260.2,227.201 1260.76,222.485 1261.33,226.094 1261.9,227.515 1262.47,229.719 1263.04,227.883 1263.61,228.215 1264.18,229.637 1264.74,230.809 1265.31,230.95 1265.88,231.03 1266.45,230.094 1267.02,232.289 1267.59,233.431 1268.15,233.375 1268.72,230.012 1269.29,232.272 1269.86,232.259 1270.43,231.315 1271,232.359 1271.56,235.428 1272.13,235.104 1272.7,234.98 1273.27,234.836 1273.84,234.44 1274.41,235.389 1274.97,236.212 1275.54,241.904 1276.11,241.202 1276.68,241.376 1277.25,240.639 1277.82,240.83 1278.38,241.026 1278.95,241.314 1279.52,243.797 1280.09,240.903 1280.66,239.084 1281.23,238.406 1281.79,238.545 1282.36,238.77 1282.93,235.236 1283.5,235.689 1284.07,235.367 1284.64,234.847 1285.2,235.693 1285.77,232.064 1286.34,231.971 1286.91,232.545 1287.48,232.375 1288.05,231.952 1288.61,232.762 1289.18,231.184 1289.75,229.73 1290.32,229.72 1290.89,228.589 1291.46,229.574 1292.02,231.634 1292.59,230.455 1293.16,228.175 1293.73,231.289 1294.3,231.323 1294.87,232.113 1295.43,231.831 1296,230.365 1296.57,230.21 1297.14,229.185 1297.71,228.902 1298.28,230.946 1298.84,231.754 1299.41,233.69 1299.98,234.424 1300.55,232.976 1301.12,233.518 1301.69,233.071 1302.25,233.435 1302.82,233.019 1303.39,232.628 1303.96,233.275 1304.53,233.874 1305.1,233.68 1305.66,231.305 1306.23,231.111 1306.8,231.891 1307.37,229.572 1307.94,230.33 1308.51,229.309 1309.07,229.175 1309.64,228.037 1310.21,228.127 1310.78,227.934 1311.35,229.976 1311.92,229.758 1312.48,226.427 1313.05,227.584 1313.62,228.376 1314.19,227.451 1314.76,226.545 1315.33,226.824 1315.89,227.095 1316.46,227.113 1317.03,226.061 1317.6,228.32 1318.17,227.298 1318.74,227.546 1319.3,226.637 1319.87,225.928 1320.44,225.115 1321.01,226.411 1321.58,226.556 1322.15,226.632 1322.71,226.996 1323.28,229.34 1323.85,228.354 1324.42,228.413 1324.99,228.591 1325.56,227.596 1326.12,226.766 1326.69,226.89 1327.26,225.288 1327.83,223.813 1328.4,225.258 1328.97,227.381 1329.53,228.496 1330.1,226.43 1330.67,225.545 1331.24,225.858 1331.81,227.042 1332.38,226.702 1332.94,224.631 1333.51,223.925 1334.08,223.261 1334.65,223.605 1335.22,223.921 1335.79,223.565 1336.36,220.853 1336.92,222.747 1337.49,223.418 1338.06,227.057 1338.63,227.7 1339.2,227.779 1339.77,228.21 1340.33,228.434 1340.9,230.786 1341.47,228.92 1342.04,230.876 1342.61,228.844 1343.18,228.777 1343.74,226.891 1344.31,228.283 1344.88,228.434 1345.45,230.85 1346.02,231.976 1346.59,231.802 1347.15,233.644 1347.72,234.466 1348.29,232.034 1348.86,231.953 1349.43,230.985 1350,230.069 1350.56,229.275 1351.13,229.506 1351.7,226.698 1352.27,227.104 1352.84,226.677 1353.41,227.045 1353.97,226.315 1354.54,229.555 1355.11,228.4 1355.68,229.351 1356.25,230.62 1356.82,229.487 1357.38,227.684 1357.95,227.902 1358.52,227.915 1359.09,229.199 1359.66,229.416 1360.23,230.728 1360.79,231.931 1361.36,230.925 1361.93,230.057 1362.5,231.175 1363.07,232.134 1363.64,231.82 1364.2,231.002 1364.77,231.935 1365.34,231.973 1365.91,231.814 1366.48,231.792 1367.05,230.778 1367.61,229.815 1368.18,228.8 1368.75,231.037 1369.32,231.153 1369.89,232.297 1370.46,233.093 1371.02,234.958 1371.59,233.651 1372.16,233.387 1372.73,235.244 1373.3,233.825 1373.87,232.51 1374.43,231.391 1375,231.248 1375.57,232.093 1376.14,232.908 1376.71,233.772 1377.28,232.561 1377.84,231.235 1378.41,228.052 1378.98,230.43 1379.55,230.489 1380.12,229.261 1380.69,225.507 1381.25,226.97 1381.82,227.294 1382.39,225.473 1382.96,225.824 1383.53,225.108 1384.1,226.669 1384.66,227.062 1385.23,225.436 1385.8,226.921 1386.37,227.507 1386.94,226.912 1387.51,227.374 1388.07,228.699 1388.64,229.82 1389.21,227.638 1389.78,227.825 1390.35,227.946 1390.92,229.304 1391.48,228.649 1392.05,228.921 1392.62,231.123 1393.19,229.891 1393.76,230.052 1394.33,229.417 1394.89,229.589 1395.46,230.782 1396.03,231.02 1396.6,230.986 1397.17,230.998 1397.74,231.119 1398.3,233.285 1398.87,232.136 1399.44,231.982 1400.01,230.837 1400.58,231.879 1401.15,233.096 1401.71,234.787 1402.28,234.614 1402.85,234.444 1403.42,235.149 1403.99,233.922 1404.56,232.709 1405.13,233.557 1405.69,233.456 1406.26,233.329 1406.83,233.328 1407.4,234.046 1407.97,233.613 1408.54,234.102 1409.1,232.833 1409.67,231.953 1410.24,231.929 1410.81,230.875 1411.38,228.671 1411.95,227.88 1412.51,229.28 1413.08,229.401 1413.65,229.432 1414.22,230.47 1414.79,230.602 1415.36,229.694 1415.92,230.649 1416.49,229.5 1417.06,229.627 1417.63,229.508 1418.2,229.268 1418.77,230.36 1419.33,230.029 1419.9,232.125 1420.47,234.91 1421.04,234.36 1421.61,233.877 1422.18,235.571 1422.74,235.169 1423.31,234.893 1423.88,233.52 1424.45,232.002 1425.02,232.881 1425.59,233.91 1426.15,233.713 1426.72,233.421 1427.29,231.238 1427.86,232.259 1428.43,232.201 1429,230.994 1429.56,229.88 1430.13,232.129 1430.7,229.913 1431.27,228.879 1431.84,226.824 1432.41,226.955 1432.97,226.917 1433.54,227.041 1434.11,227.225 1434.68,227.584 1435.25,228.848 1435.82,227.923 1436.38,228.245 1436.95,226.413 1437.52,226.738 1438.09,227.031 1438.66,225.006 1439.23,224.34 1439.79,227.861 1440.36,227.942 1440.93,228.301 1441.5,228.762 1442.07,227.738 1442.64,227.857 1443.2,228.103 1443.77,227.559 1444.34,226.837 1444.91,228.212 1445.48,228.702 1446.05,231.026 1446.61,230.166 1447.18,230.367 1447.75,231.335 1448.32,232.336 1448.89,232.039 1449.46,230.869 1450.02,230.72 1450.59,228.619 1451.16,229.793 1451.73,230.847 1452.3,230.859 1452.87,230.817 1453.43,231.825 1454,231.841 1454.57,231.778 1455.14,231.835 1455.71,229.513 1456.28,228.591 1456.84,230.941 1457.41,231.941 1457.98,234.898 1458.55,235.635 1459.12,235.262 1459.69,234.806 1460.25,233.525 1460.82,231.121 1461.39,230.012 1461.96,231.883 1462.53,232.935 1463.1,230.587 1463.66,229.574 1464.23,229.437 1464.8,228.726 1465.37,226.935 1465.94,227.451 1466.51,226.343 1467.07,228.891 1467.64,229.098 1468.21,229.51 1468.78,229.697 1469.35,230.836 1469.92,230.824 1470.48,230.831 1471.05,231.847 1471.62,231.626 1472.19,230.401 1472.76,230.432 1473.33,227.523 1473.89,225.77 1474.46,226.195 1475.03,225.709 1475.6,227.106 1476.17,227.475 1476.74,227.648 1477.31,227.938 1477.87,227.414 1478.44,227.709 1479.01,228.866 1479.58,229.022 1480.15,229.285 1480.72,230.408 1481.28,230.479 1481.85,231.547 1482.42,230.488 1482.99,230.677 1483.56,229.646 1484.13,229.655 1484.69,229.896 1485.26,230.188 1485.83,231.399 1486.4,231.551 1486.97,231.501 1487.54,231.217 1488.1,230.296 1488.67,230.463 1489.24,228.289 1489.81,227.583 1490.38,228.755 1490.95,231.1 1491.51,232.123 1492.08,231.935 1492.65,235.844 1493.22,236.567 1493.79,235.315 1494.36,235.014 1494.92,236.67 1495.49,237.153 1496.06,236.409 1496.63,236.959 1497.2,235.34 1497.77,235.008 1498.33,233.422 1498.9,233.058 1499.47,232.823 1500.04,234.701 1500.61,234.613 1501.18,233.316 1501.74,232.031 1502.31,230.725 1502.88,230.873 1503.45,232.887 1504.02,233.629 1504.59,234.279 1505.15,231.841 1505.72,231.811 1506.29,231.776 1506.86,231.844 1507.43,232.727 1508,232.447 1508.56,230.146 1509.13,228.918 1509.7,230.881 1510.27,230.921 1510.84,230 1511.41,228.954 1511.97,228.187 1512.54,227.387 1513.11,227.674 1513.68,227.721 1514.25,227.923 1514.82,227.053 1515.38,225.114 1515.95,225.444 1516.52,224.591 1517.09,226.171 1517.66,225.489 1518.23,226.657 1518.79,225.85 1519.36,229.154 1519.93,229.229 1520.5,226.152 1521.07,227.474 1521.64,228.742 1522.2,228.859 1522.77,228.099 1523.34,229.293 1523.91,228.61 1524.48,229.618 1525.05,228.787 1525.61,228.95 1526.18,227.033 1526.75,228.428 1527.32,228.584 1527.89,227.395 1528.46,227.637 1529.02,225.776 1529.59,225.321 1530.16,226.812 1530.73,227.187 1531.3,228.54 1531.87,230.626 1532.43,230.746 1533,233.783 1533.57,232.625 1534.14,233.51 1534.71,233.496 1535.28,235.272 1535.84,233.071 1536.41,233.832 1536.98,231.767 1537.55,232.819 1538.12,232.569 1538.69,232.403 1539.25,232.208 1539.82,233.042 1540.39,232.196 1540.96,232.015 1541.53,230.867 1542.1,231.861 1542.66,232.77 1543.23,234.471 1543.8,234.069 1544.37,233.893 1544.94,233.848 1545.51,235.492 1546.08,232.799 1546.64,233.534 1547.21,233.103 1547.78,234.819 1548.35,232.313 1548.92,231.034 1549.49,228.84 1550.05,227.088 1550.62,228.282 1551.19,228.367 1551.76,228.324 1552.33,228.526 1552.9,228.827 1553.46,228.918 1554.03,227.931 1554.6,228.031 1555.17,228.062 1555.74,228.96 1556.31,227.909 1556.87,226.876 1557.44,223.873 1558.01,223.097 1558.58,223.465 1559.15,225.023 1559.72,224.299 1560.28,223.538 1560.85,226.309 1561.42,229.845 1561.99,230.808 1562.56,227.534 1563.13,226.432 1563.69,226.775 1564.26,226.144 1564.83,226.372 1565.4,227.834 1565.97,228.047 1566.54,229.554 1567.1,228.477 1567.67,228.608 1568.24,228.586 1568.81,229.83 1569.38,230.023 1569.95,230.515 1570.51,230.487 1571.08,231.623 1571.65,232.472 1572.22,232.199 1572.79,233.473 1573.36,234.168 1573.92,236.205 1574.49,234.878 1575.06,233.655 1575.63,232.282 1576.2,230.133 1576.77,227.138 1577.33,228.269 1577.9,228.555 1578.47,228.986 1579.04,229.284 1579.61,228.304 1580.18,229.516 1580.74,230.854 1581.31,231.942 1581.88,233.07 1582.45,232.933 1583.02,231.526 1583.59,232.595 1584.15,233.374 1584.72,233.355 1585.29,233.043 1585.86,231.11 1586.43,230.97 1587,231.149 1587.56,228.829 1588.13,230.012 1588.7,227.992 1589.27,226.353 1589.84,228.642 1590.41,229.913 1590.97,229.735 1591.54,231.01 1592.11,231.177 1592.68,234.226 1593.25,234.091 1593.82,233.662 1594.38,233.42 1594.95,232.344 1595.52,232.311 1596.09,231.396 1596.66,230.042 1597.23,228.842 1597.79,227.891 1598.36,226.911 1598.93,227.316 1599.5,228.598 1600.07,227.487 1600.64,228.76 1601.2,228.962 1601.77,230.165 1602.34,229.28 1602.91,227.247 1603.48,226.452 1604.05,225.733 1604.61,225.846 1605.18,226.339 1605.75,226.753 1606.32,228.225 1606.89,229.391 1607.46,225.437 1608.02,227.883 1608.59,230.275 1609.16,228.382 1609.73,228.563 1610.3,229.728 1610.87,230.058 1611.43,230.067 1612,229.187 1612.57,229.344 1613.14,227.484 1613.71,227.757 1614.28,229.159 1614.84,230.13 1615.41,231.37 1615.98,232.465 1616.55,231.397 1617.12,232.475 1617.69,232.464 1618.26,233.242 1618.82,233.069 1619.39,234.242 1619.96,233.8 1620.53,233.697 1621.1,233.714 1621.67,233.559 1622.23,232.318 1622.8,231.345 1623.37,231.55 1623.94,230.126 1624.51,230.012 1625.08,229.093 1625.64,231.444 1626.21,232.633 1626.78,232.469 1627.35,235.667 1627.92,235.416 1628.49,232.992 1629.05,233.774 1629.62,232.667 1630.19,233.5 1630.76,231.26 1631.33,231.295 1631.9,230.348 1632.46,229.294 1633.03,230.153 1633.6,228.174 1634.17,229.27 1634.74,228.158 1635.31,229.439 1635.87,229.628 1636.44,227.671 1637.01,226.914 1637.58,227.138 1638.15,227.322 1638.72,228.742 1639.28,229.917 1639.85,231.844 1640.42,230.822 1640.99,232.76 1641.56,226.682 1642.13,229.77 1642.69,231.082 1643.26,231.01 1643.83,231.983 1644.4,232.884 1644.97,234.346 1645.54,234.18 1646.1,234.869 1646.67,233.551 1647.24,232.35 1647.81,231.102 1648.38,232.213 1648.95,234.062 1649.51,232.566 1650.08,232.496 1650.65,231.278 1651.22,229.22 1651.79,230.395 1652.36,233.558 1652.92,234.256 1653.49,233.789 1654.06,234.666 1654.63,233.334 1655.2,234.122 1655.77,232.976 1656.33,231.785 1656.9,232.867 1657.47,232.774 1658.04,233.688 1658.61,233.418 1659.18,229.101 1659.74,227.998 1660.31,227.029 1660.88,226.296 1661.45,226.568 1662.02,228.072 1662.59,227.183 1663.15,227.507 1663.72,227.535 1664.29,227.994 1664.86,228.481 1665.43,229.658 1666,229.674 1666.56,230.751 1667.13,229.869 1667.7,227.81 1668.27,230.164 1668.84,226.249 1669.41,227.558 1669.97,228.816 1670.54,229.092 1671.11,230.378 1671.68,231.323 1672.25,230.137 1672.82,230.224 1673.38,232.367 1673.95,234.325 1674.52,233.127 1675.09,232.845 1675.66,235.538 1676.23,235.157 1676.79,235.874 1677.36,237.419 1677.93,236.823 1678.5,235.081 1679.07,234.708 1679.64,232.172 1680.2,231.746 1680.77,232.434 1681.34,231.934 1681.91,231.847 1682.48,230.845 1683.05,232.882 1683.61,232.772 1684.18,233.83 1684.75,233.638 1685.32,234.348 1685.89,235.006 1686.46,232.461 1687.02,232.327 1687.59,233.276 1688.16,234.356 1688.73,232.029 1689.3,231.781 1689.87,231.562 1690.44,231.47 1691,231.279 1691.57,231.165 1692.14,230.782 1692.71,229.409 1693.28,231.473 1693.85,230.698 1694.41,231.538 1694.98,231.256 1695.55,229.183 1696.12,231.024 1696.69,232.08 1697.26,232.863 1697.82,232.718 1698.39,231.445 1698.96,229.116 1699.53,226.994 1700.1,227.29 1700.67,226.199 1701.23,227.195 1701.8,226.457 1702.37,226.718 1702.94,227.167 1703.51,230.545 1704.08,230.59 1704.64,229.466 1705.21,231.447 1705.78,230.091 1706.35,229.117 1706.92,230.264 1707.49,228.286 1708.05,230.309 1708.62,230.473 1709.19,229.744 1709.76,228.842 1710.33,227.641 1710.9,225.79 1711.46,225.116 1712.03,225.406 1712.6,225.509 1713.17,227.749 1713.74,226.844 1714.31,225.948 1714.87,224.449 1715.44,225.521 1716.01,225.688 1716.58,225.851 1717.15,227.128 1717.72,227.227 1718.28,224.546 1718.85,224.998 1719.42,223.58 1719.99,224.743 1720.56,224.846 1721.13,228.289 1721.69,231.628 1722.26,233.382 1722.83,233.12 1723.4,233.961 1723.97,234.548 1724.54,236.538 1725.1,238.276 1725.67,237.709 1726.24,236.036 1726.81,235.657 1727.38,232.339 1727.95,232.081 1728.51,234.966 1729.08,232.506 1729.65,231.405 1730.22,231.318 1730.79,234.344 1731.36,234.01 1731.92,231.925 1732.49,230.841 1733.06,230.677 1733.63,233.543 1734.2,234.064 1734.77,233.756 1735.33,235.433 1735.9,235.137 1736.47,236.63 1737.04,234.955 1737.61,234.479 1738.18,233.246 1738.74,232.87 1739.31,232.586 1739.88,233.591 1740.45,233.077 1741.02,231.706 1741.59,233.417 1742.15,233.146 1742.72,231.781 1743.29,229.252 1743.86,229.121 1744.43,230.477 1745,230.202 1745.56,230.323 1746.13,232.377 1746.7,231.069 1747.27,231.848 1747.84,232.705 1748.41,233.374 1748.97,235.121 1749.54,233.441 1750.11,233.042 1750.68,231.46 1751.25,232.176 1751.82,231.654 1752.38,230.301 1752.95,230.258 1753.52,229.925 1754.09,229.923 1754.66,230.672 1755.23,231.401 1755.79,232.028 1756.36,232.626 1756.93,230.314 1757.5,231.007 1758.07,227.735 1758.64,228.732 1759.21,226.837 1759.77,226.727 1760.34,228.074 1760.91,227.994 1761.48,226.88 1762.05,226.788 1762.62,225.97 1763.18,226.181 1763.75,226.206 1764.32,225.312 1764.89,225.547 1765.46,226.723 1766.03,226.964 1766.59,230.206 1767.16,231.114 1767.73,233.09 1768.3,231.679 1768.87,230.553 1769.44,230.433 1770,230.438 1770.57,228.307 1771.14,228.268 1771.71,225.302 1772.28,228.633 1772.85,228.647 1773.41,228.613 1773.98,227.76 1774.55,227.926 1775.12,227.121 1775.69,226.381 1776.26,225.765 1776.82,228.291 1777.39,227.508 1777.96,227.679 1778.53,227.754 1779.1,227.996 1779.67,228.181 1780.23,228.457 1780.8,228.513 1781.37,228.515 1781.94,229.673 1782.51,230.619 1783.08,231.525 1783.64,231.571 1784.21,231.192 1784.78,231.321 1785.35,231.321 1785.92,232.301 1786.49,230.859 1787.05,229.579 1787.62,229.716 1788.19,230.036 1788.76,231.097 1789.33,232.051 1789.9,232.15 1790.46,230.876 1791.03,231.865 1791.6,232.836 1792.17,231.208 1792.74,231.158 1793.31,230.169 1793.87,228.985 1794.44,230.075 1795.01,230.202 1795.58,229.11 1796.15,228.184 1796.72,229.36 1797.28,229.379 1797.85,229.335 1798.42,228.988 1798.99,228.929 1799.56,229.859 1800.13,229.507 1800.69,229.369 1801.26,230.171 1801.83,231.087 1802.4,229.853 1802.97,227.771 1803.54,227.931 1804.1,227.94 1804.67,229.093 1805.24,229.074 1805.81,228.04 1806.38,228.298 1806.95,228.406 1807.51,227.632 1808.08,229.743 1808.65,228.662 1809.22,226.962 1809.79,226.162 1810.36,230.697 1810.92,227.53 1811.49,225.851 1812.06,225.38 1812.63,225.716 1813.2,223.987 1813.77,223.328 1814.33,223.872 1814.9,223.325 1815.47,223.785 1816.04,224.292 1816.61,224.726 1817.18,225.208 1817.74,226.737 1818.31,227.763 1818.88,226.069 1819.45,225.5 1820.02,226.765 1820.59,227.958 1821.15,227.243 1821.72,227.687 1822.29,228.045 1822.86,227.43 1823.43,228.692 1824,232.085 1824.56,233.233 1825.13,231.287 1825.7,231.522 1826.27,229.513 1826.84,229.653 1827.41,228.767 1827.97,228.088 1828.54,229.405 1829.11,228.477 1829.68,229.734 1830.25,227.653 1830.82,228.014 1831.39,230.319 1831.95,231.31 1832.52,231.204 1833.09,230.26 1833.66,229.415 1834.23,230.618 1834.8,231.642 1835.36,229.654 1835.93,227.921 1836.5,229.085 1837.07,229.374 1837.64,230.377 1838.21,230.409 1838.77,231.652 1839.34,230.692 1839.91,228.697 1840.48,226.961 1841.05,228.505 1841.62,227.561 1842.18,228.036 1842.75,229.413 1843.32,230.423 1843.89,230.513 1844.46,230.714 1845.03,228.491 1845.59,228.486 1846.16,231.807 1846.73,231.856 1847.3,230.82 1847.87,231.966 1848.44,229.801 1849,230.824 1849.57,231.869 1850.14,230.901 1850.71,232.192 1851.28,235.479 1851.85,233.141 1852.41,233.187 1852.98,233.035 1853.55,233.001 1854.12,232.817 1854.69,233.684 1855.26,235.523 1855.82,234.176 1856.39,234.795 1856.96,234.49 1857.53,234.068 1858.1,235.003 1858.67,235.603 1859.23,237.506 1859.8,236.907 1860.37,236.401 1860.94,237.986 1861.51,237.432 1862.08,238.079 1862.64,236.54 1863.21,235.229 1863.78,233.588 1864.35,233.53 1864.92,232.116 1865.49,232.943 1866.05,231.493 1866.62,231.294 1867.19,232.09 1867.76,232.039 1868.33,233.962 1868.9,233.526 1869.46,231.255 1870.03,230.472 1870.6,231.629 1871.17,230.46 1871.74,230.314 1872.31,233.451 1872.87,232.996 1873.44,232.907 1874.01,230.64 1874.58,229.343 1875.15,230.284 1875.72,228.161 1876.28,228.166 1876.85,228.267 1877.42,228.663 1877.99,228.637 1878.56,229.821 1879.13,231.903 1879.69,230.542 1880.26,232.69 1880.83,233.249 1881.4,233.02 1881.97,230.798 1882.54,229.589 1883.1,232.761 1883.67,233.631 1884.24,233.345 1884.81,233.872 1885.38,234.554 1885.95,233.236 1886.51,233.928 1887.08,233.384 1887.65,233.037 1888.22,230.737 1888.79,228.549 1889.36,229.478 1889.92,231.639 1890.49,232.567 1891.06,231.391 1891.63,231.115 1892.2,229.152 1892.77,229.121 1893.33,229.985 1893.9,229.733 1894.47,228.576 1895.04,226.541 1895.61,225.578 1896.18,225.981 1896.74,225.061 1897.31,228.353 1897.88,229.3 1898.45,229.505 1899.02,231.636 1899.59,230.561 1900.16,230.317 1900.72,228.157 1901.29,227.051 1901.86,226.101 1902.43,223.129 1903,224.563 1903.57,223.944 1904.13,225.49 1904.7,224.525 1905.27,225.962 1905.84,226.262 1906.41,226.719 1906.98,228.158 1907.54,230.509 1908.11,229.421 1908.68,229.441 1909.25,229.418 1909.82,228.352 1910.39,226.553 1910.95,224.771 1911.52,225.129 1912.09,226.429 1912.66,227.606 1913.23,227.969 1913.8,228.199 1914.36,230.346 1914.93,230.375 1915.5,230.302 1916.07,229.185 1916.64,229.209 1917.21,230.278 1917.77,232.648 1918.34,232.555 1918.91,233.644 1919.48,234.41 1920.05,230.802 1920.62,230.745 1921.18,230.73 1921.75,231.698 1922.32,233.811 1922.89,233.226 1923.46,232.297 1924.03,231.1 1924.59,232.036 1925.16,233.133 1925.73,230.824 1926.3,229.757 1926.87,230.833 1927.44,231.709 1928,231.549 1928.57,232.577 1929.14,230.293 1929.71,230.343 1930.28,229.275 1930.85,227.361 1931.41,226.372 1931.98,225.491 1932.55,224.813 1933.12,223.076 1933.69,221.771 1934.26,223.395 1934.82,225.918 1935.39,226.23 1935.96,227.553 1936.53,227.962 1937.1,228.153 1937.67,228.457 1938.23,225.47 1938.8,226.032 1939.37,226.698 1939.94,229.165 1940.51,232.541 1941.08,233.425 1941.64,234.383 1942.21,232.906 1942.78,234.684 1943.35,233.188 1943.92,234.009 1944.49,230.584 1945.05,229.557 1945.62,229.406 1946.19,230.336 1946.76,229.232 1947.33,229.435 1947.9,229.641 1948.46,231.624 1949.03,231.533 1949.6,230.358 1950.17,233.346 1950.74,231.102 1951.31,231.173 1951.87,231.213 1952.44,229.198 1953.01,228.595 1953.58,232.959 1954.15,231.975 1954.72,231.77 1955.28,231.748 1955.85,231.473 1956.42,231.663 1956.99,232.645 1957.56,231.422 1958.13,231.382 1958.69,232.55 1959.26,232.157 1959.83,233.102 1960.4,232.866 1960.97,230.709 1961.54,228.732 1962.1,228.943 1962.67,229.046 1963.24,228.128 1963.81,227.42 1964.38,227.687 1964.95,226.044 1965.51,227.563 1966.08,226.543 1966.65,226.692 1967.22,225.893 1967.79,226.277 1968.36,224.672 1968.92,224.153 1969.49,224.559 1970.06,226.137 1970.63,226.634 1971.2,226.903 1971.77,228.31 1972.34,227.29 1972.9,226.722 1973.47,230.23 1974.04,231.346 1974.61,231.277 1975.18,231.337 1975.75,231.371 1976.31,232.344 1976.88,233.329 1977.45,234.32 1978.02,233.387 1978.59,232.318 1979.16,232.186 1979.72,231.06 1980.29,232.009 1980.86,230.051 1981.43,230.227 1982,232.416 1982.57,232.577 1983.13,232.572 1983.7,233.419 1984.27,234.205 1984.84,232.933 1985.41,234.905 1985.98,236.572 1986.54,238.06 1987.11,237.56 1987.68,236.095 1988.25,235.68 1988.82,237.289 1989.39,236.921 1989.95,237.285 1990.52,234.631 1991.09,234.291 1991.66,233.787 1992.23,233.427 1992.8,233.034 1993.36,233.777 1993.93,232.278 1994.5,231.117 1995.07,230.873 1995.64,230.674 1996.21,230.314 1996.77,229.215 1997.34,229.257 1997.91,231.159 1998.48,230.03 1999.05,229.151 1999.62,227.29 2000.18,225.417 2000.75,226.734 2001.32,226.717 2001.89,226.903 2002.46,229.224 2003.03,233.268 2003.59,229.783 2004.16,229.72 2004.73,228.466 2005.3,227.45 2005.87,224.653 2006.44,225.082 2007,225.32 2007.57,225.798 2008.14,226.887 2008.71,225.95 2009.28,226.198 2009.85,229.69 2010.41,230.815 2010.98,231.935 2011.55,231.852 2012.12,231.474 2012.69,231.562 2013.26,228.062 2013.82,229.346 2014.39,228.382 2014.96,230.678 2015.53,231.833 2016.1,230.556 2016.67,231.812 2017.23,232.557 2017.8,232.303 2018.37,233.047 2018.94,233.711 2019.51,232.497 2020.08,232.48 2020.64,232.263 2021.21,230.797 2021.78,230.574 2022.35,230.366 2022.92,231.285 2023.49,231.259 2024.05,232.222 2024.62,232.297 2025.19,233.245 2025.76,234.888 2026.33,234.575 2026.9,235.277 2027.46,233.879 2028.03,235.616 2028.6,235.219 2029.17,233.848 2029.74,231.689 2030.31,230.514 2030.87,229.141 2031.44,229.325 2032.01,230.4 2032.58,230.357 2033.15,229.13 2033.72,229.193 2034.28,227.316 2034.85,227.59 2035.42,226.856 2035.99,227.089 2036.56,226.457 2037.13,228.701 2037.69,228.712 2038.26,229.711 2038.83,228.714 2039.4,227.942 2039.97,226.076 2040.54,227.38 2041.11,227.627 2041.67,226.538 2042.24,227.878 2042.81,229.047 2043.38,229.181 2043.95,230.385 2044.52,228.336 2045.08,229.588 2045.65,229.89 2046.22,228.877 2046.79,229.933 2047.36,228.927 2047.93,229.95 2048.49,230.702 2049.06,229.544 2049.63,229.719 2050.2,229.879 2050.77,231.905 2051.34,231.791 2051.9,231.662 2052.47,231.567 2053.04,232.505 2053.61,231.593 2054.18,233.672 2054.75,233.632 2055.31,232.475 2055.88,230.948 2056.45,232.839 2057.02,232.767 2057.59,232.667 2058.16,229.431 2058.72,229.467 2059.29,229.486 2059.86,229.693 2060.43,230.6 2061,229.528 2061.57,229.218 2062.13,229.211 2062.7,228.295 2063.27,228.565 2063.84,228.665 2064.41,227.802 2064.98,226.716 2065.54,225.819 2066.11,226.289 2066.68,225.709 2067.25,225.779 2067.82,226.097 2068.39,227.29 2068.95,225.618 2069.52,225.938 2070.09,226.138 2070.66,226.375 2071.23,224.691 2071.8,224.175 2072.36,228.834 2072.93,228.966 2073.5,229.153 2074.07,229.261 2074.64,228.261 2075.21,227.289 2075.77,230.52 2076.34,230.277 2076.91,231.545 2077.48,230.421 2078.05,230.607 2078.62,229.575 2079.18,231.696 2079.75,232.514 2080.32,232.34 2080.89,232.464 2081.46,231.649 2082.03,229.656 2082.59,231.682 2083.16,230.382 2083.73,233.641 2084.3,232.286 2084.87,231.105 2085.44,231.054 2086,232.855 2086.57,232.564 2087.14,235.313 2087.71,235.024 2088.28,232.726 2088.85,232.617 2089.41,233.59 2089.98,232.193 2090.55,232.073 2091.12,232.841 2091.69,230.624 2092.26,227.375 2092.82,227.479 2093.39,228.756 2093.96,228.556 2094.53,227.851 2095.1,228.105 2095.67,229.303 2096.23,230.265 2096.8,232.219 2097.37,231.215 2097.94,230.053 2098.51,230.181 2099.08,230.111 2099.64,231.038 2100.21,231.103 2100.78,230.157 2101.35,231.151 2101.92,232.216 2102.49,232.029 2103.05,232.876 2103.62,232.696 2104.19,232.422 2104.76,230.259 2105.33,231.313 2105.9,230.08 2106.46,231.23 2107.03,231.038 2107.6,232.001 2108.17,229.905 2108.74,232.94 2109.31,233.86 2109.87,232.434 2110.44,231.409 2111.01,230.42 2111.58,229.597 2112.15,230.881 2112.72,231.707 2113.29,230.628 2113.85,230.406 2114.42,231.169 2114.99,233.06 2115.56,232.961 2116.13,231.66 2116.7,231.614 2117.26,233.449 2117.83,234.363 2118.4,231.871 2118.97,230.509 2119.54,230.367 2120.11,230.347 2120.67,229.498 2121.24,229.636 2121.81,229.514 2122.38,231.367 2122.95,231.319 2123.52,229.095 2124.08,229.186 2124.65,229.308 2125.22,230.178 2125.79,229.989 2126.36,232.039 2126.93,230.607 2127.49,230.597 2128.06,231.556 2128.63,230.304 2129.2,228.102 2129.77,228.226 2130.34,228.38 2130.9,227.372 2131.47,227.664 2132.04,227.946 2132.61,227.216 2133.18,227.388 2133.75,225.503 2134.31,225.841 2134.88,223.015 2135.45,224.584 2136.02,226.205 2136.59,226.414 2137.16,227.836 2137.72,229.141 2138.29,229.277 2138.86,231.435 2139.43,228.452 2140,228.597 2140.57,227.607 2141.13,228.975 2141.7,228.945 2142.27,228.8 2142.84,229.022 2143.41,230.147 2143.98,232.281 2144.54,232.954 2145.11,232.677 2145.68,232.414 2146.25,232.262 2146.82,233.194 2147.39,231.919 2147.95,232.889 2148.52,231.806 2149.09,231.699 2149.66,230.749 2150.23,230.863 2150.8,230.834 2151.36,227.797 2151.93,229.066 2152.5,228.2 2153.07,230.521 2153.64,232.621 2154.21,231.469 2154.77,232.538 2155.34,232.466 2155.91,230.174 2156.48,229.929 2157.05,230.13 2157.62,230.151 2158.18,231.382 2158.75,230.261 2159.32,232.478 2159.89,233.323 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip730)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.028 ± 0.02\n  with uncertainty of ± 0.0018542132921741136\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01498 ± (0.00407279, 0.00402489) (MC)\n  95% confidence interval: [-4.02258, -4.00693] (MC)\n  linear error propagation: -4.01552 ± 0.00402522\n  |δ_y| = |0.00266595| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014975191565325, val_l = 0.007600766720847751, val_u = 0.008041987325058564)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip760\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip761\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip762\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.78 2211.02,1147.78 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,987.441 2211.02,987.441 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,827.101 2211.02,827.101 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,666.761 2211.02,666.761 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,506.421 2211.02,506.421 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,346.081 2211.02,346.081 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.78 365.751,1147.78 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,987.441 365.751,987.441 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,827.101 365.751,827.101 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,666.761 365.751,666.761 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,506.421 365.751,506.421 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,346.081 365.751,346.081 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M298.909 1133.58 Q295.298 1133.58 293.469 1137.14 Q291.664 1140.69 291.664 1147.82 Q291.664 1154.92 293.469 1158.49 Q295.298 1162.03 298.909 1162.03 Q302.543 1162.03 304.349 1158.49 Q306.177 1154.92 306.177 1147.82 Q306.177 1140.69 304.349 1137.14 Q302.543 1133.58 298.909 1133.58 M298.909 1129.88 Q304.719 1129.88 307.775 1134.48 Q310.853 1139.07 310.853 1147.82 Q310.853 1156.54 307.775 1161.15 Q304.719 1165.73 298.909 1165.73 Q293.099 1165.73 290.02 1161.15 Q286.964 1156.54 286.964 1147.82 Q286.964 1139.07 290.02 1134.48 Q293.099 1129.88 298.909 1129.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M259.557 1000.79 L267.196 1000.79 L267.196 974.421 L258.886 976.087 L258.886 971.828 L267.15 970.161 L271.826 970.161 L271.826 1000.79 L279.465 1000.79 L279.465 1004.72 L259.557 1004.72 L259.557 1000.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 973.24 Q295.298 973.24 293.469 976.805 Q291.664 980.346 291.664 987.476 Q291.664 994.583 293.469 998.147 Q295.298 1001.69 298.909 1001.69 Q302.543 1001.69 304.349 998.147 Q306.177 994.583 306.177 987.476 Q306.177 980.346 304.349 976.805 Q302.543 973.24 298.909 973.24 M298.909 969.536 Q304.719 969.536 307.775 974.143 Q310.853 978.726 310.853 987.476 Q310.853 996.203 307.775 1000.81 Q304.719 1005.39 298.909 1005.39 Q293.099 1005.39 290.02 1000.81 Q286.964 996.203 286.964 987.476 Q286.964 978.726 290.02 974.143 Q293.099 969.536 298.909 969.536 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M262.775 840.446 L279.094 840.446 L279.094 844.381 L257.15 844.381 L257.15 840.446 Q259.812 837.691 264.395 833.062 Q269.002 828.409 270.182 827.066 Q272.428 824.543 273.307 822.807 Q274.21 821.048 274.21 819.358 Q274.21 816.604 272.266 814.867 Q270.344 813.131 267.242 813.131 Q265.043 813.131 262.59 813.895 Q260.159 814.659 257.381 816.21 L257.381 811.488 Q260.205 810.354 262.659 809.775 Q265.113 809.196 267.15 809.196 Q272.52 809.196 275.715 811.881 Q278.909 814.567 278.909 819.057 Q278.909 821.187 278.099 823.108 Q277.312 825.006 275.205 827.599 Q274.627 828.27 271.525 831.488 Q268.423 834.682 262.775 840.446 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 812.9 Q295.298 812.9 293.469 816.465 Q291.664 820.006 291.664 827.136 Q291.664 834.242 293.469 837.807 Q295.298 841.349 298.909 841.349 Q302.543 841.349 304.349 837.807 Q306.177 834.242 306.177 827.136 Q306.177 820.006 304.349 816.465 Q302.543 812.9 298.909 812.9 M298.909 809.196 Q304.719 809.196 307.775 813.803 Q310.853 818.386 310.853 827.136 Q310.853 835.863 307.775 840.469 Q304.719 845.052 298.909 845.052 Q293.099 845.052 290.02 840.469 Q286.964 835.863 286.964 827.136 Q286.964 818.386 290.02 813.803 Q293.099 809.196 298.909 809.196 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M272.914 665.407 Q276.27 666.124 278.145 668.393 Q280.043 670.661 280.043 673.995 Q280.043 679.111 276.525 681.911 Q273.006 684.712 266.525 684.712 Q264.349 684.712 262.034 684.273 Q259.742 683.856 257.289 682.999 L257.289 678.486 Q259.233 679.62 261.548 680.198 Q263.863 680.777 266.386 680.777 Q270.784 680.777 273.076 679.041 Q275.39 677.305 275.39 673.995 Q275.39 670.939 273.238 669.226 Q271.108 667.49 267.289 667.49 L263.261 667.49 L263.261 663.648 L267.474 663.648 Q270.923 663.648 272.752 662.282 Q274.58 660.893 274.58 658.3 Q274.58 655.638 272.682 654.226 Q270.807 652.791 267.289 652.791 Q265.367 652.791 263.168 653.208 Q260.969 653.625 258.33 654.504 L258.33 650.338 Q260.992 649.597 263.307 649.226 Q265.645 648.856 267.705 648.856 Q273.029 648.856 276.131 651.287 Q279.233 653.694 279.233 657.814 Q279.233 660.685 277.59 662.675 Q275.946 664.643 272.914 665.407 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 652.56 Q295.298 652.56 293.469 656.125 Q291.664 659.666 291.664 666.796 Q291.664 673.902 293.469 677.467 Q295.298 681.009 298.909 681.009 Q302.543 681.009 304.349 677.467 Q306.177 673.902 306.177 666.796 Q306.177 659.666 304.349 656.125 Q302.543 652.56 298.909 652.56 M298.909 648.856 Q304.719 648.856 307.775 653.463 Q310.853 658.046 310.853 666.796 Q310.853 675.523 307.775 680.129 Q304.719 684.712 298.909 684.712 Q293.099 684.712 290.02 680.129 Q286.964 675.523 286.964 666.796 Q286.964 658.046 290.02 653.463 Q293.099 648.856 298.909 648.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M271.594 493.215 L259.789 511.664 L271.594 511.664 L271.594 493.215 M270.367 489.141 L276.247 489.141 L276.247 511.664 L281.177 511.664 L281.177 515.553 L276.247 515.553 L276.247 523.701 L271.594 523.701 L271.594 515.553 L255.992 515.553 L255.992 511.039 L270.367 489.141 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 492.22 Q295.298 492.22 293.469 495.784 Q291.664 499.326 291.664 506.456 Q291.664 513.562 293.469 517.127 Q295.298 520.668 298.909 520.668 Q302.543 520.668 304.349 517.127 Q306.177 513.562 306.177 506.456 Q306.177 499.326 304.349 495.784 Q302.543 492.22 298.909 492.22 M298.909 488.516 Q304.719 488.516 307.775 493.122 Q310.853 497.706 310.853 506.456 Q310.853 515.182 307.775 519.789 Q304.719 524.372 298.909 524.372 Q293.099 524.372 290.02 519.789 Q286.964 515.182 286.964 506.456 Q286.964 497.706 290.02 493.122 Q293.099 488.516 298.909 488.516 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M258.793 328.801 L277.15 328.801 L277.15 332.736 L263.076 332.736 L263.076 341.208 Q264.094 340.861 265.113 340.699 Q266.131 340.514 267.15 340.514 Q272.937 340.514 276.316 343.685 Q279.696 346.856 279.696 352.273 Q279.696 357.851 276.224 360.953 Q272.752 364.032 266.432 364.032 Q264.256 364.032 261.988 363.662 Q259.742 363.291 257.335 362.551 L257.335 357.851 Q259.418 358.986 261.641 359.541 Q263.863 360.097 266.34 360.097 Q270.344 360.097 272.682 357.99 Q275.02 355.884 275.02 352.273 Q275.02 348.662 272.682 346.555 Q270.344 344.449 266.34 344.449 Q264.465 344.449 262.59 344.865 Q260.738 345.282 258.793 346.162 L258.793 328.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 331.879 Q295.298 331.879 293.469 335.444 Q291.664 338.986 291.664 346.115 Q291.664 353.222 293.469 356.787 Q295.298 360.328 298.909 360.328 Q302.543 360.328 304.349 356.787 Q306.177 353.222 306.177 346.115 Q306.177 338.986 304.349 335.444 Q302.543 331.879 298.909 331.879 M298.909 328.176 Q304.719 328.176 307.775 332.782 Q310.853 337.365 310.853 346.115 Q310.853 354.842 307.775 359.449 Q304.719 364.032 298.909 364.032 Q293.099 364.032 290.02 359.449 Q286.964 354.842 286.964 346.115 Q286.964 337.365 290.02 332.782 Q293.099 328.176 298.909 328.176 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1154.34 400.199,1038.16 400.786,937.323 401.372,840.215 401.958,751.248 402.545,667.925 403.131,597.675 403.718,531.838 404.304,566.043 404.891,503.758 405.477,448.632 406.063,398.851 406.65,354.067 407.236,313.957 407.823,279.52 408.409,247.796 408.995,219.895 409.582,254.05 410.168,283.666 410.755,262.198 411.341,242.998 411.927,270.49 412.514,295.472 413.1,280.735 413.687,268.873 414.273,258.241 414.86,250.244 415.446,243.893 416.032,239.472 416.619,288.408 417.205,287.102 417.792,287.658 418.378,289.562 418.964,292.619 419.551,314.946 420.137,320.644 420.724,326.628 421.31,364.685 421.896,386.594 422.483,407.355 423.069,415.211 423.656,423.633 424.242,456.065 424.829,464.576 425.415,473.38 426.001,482.758 426.588,492.179 427.174,510.635 427.761,528.255 428.347,545.51 428.933,570.089 429.52,579.154 430.106,588.762 430.693,604.555 431.279,613.7 431.865,641.772 432.452,650.2 433.038,665.279 433.625,673.813 434.211,688.137 434.798,697.007 435.384,706.171 435.97,725.355 436.557,743.472 437.143,761.191 437.73,778.317 438.316,791.002 438.902,803.413 439.489,815.985 440.075,828.408 440.662,840.413 441.248,848.806 441.835,863.642 442.421,874.946 443.007,882.971 443.594,897.008 444.18,916.695 444.767,923.539 445.353,933.422 445.939,939.89 446.526,946.477 447.112,956.039 447.699,962.386 448.285,973.871 448.871,979.65 449.458,993.179 450.044,1008.15 450.631,1020.45 451.217,1034.42 451.804,1038.56 452.39,1047.14 452.976,1053.29 453.563,1057.27 454.149,1063.22 454.736,1070.91 455.322,1076.65 455.908,1084.34 456.495,1091.58 457.081,1098.57 457.668,1101.03 458.254,1103.71 458.84,1108.54 459.427,1115.38 460.013,1118.02 460.6,1128 461.186,1135.8 461.773,1143.34 462.359,1146.94 462.945,1152.33 463.532,1157.42 464.118,1158.72 464.705,1163.55 465.291,1164.94 465.877,1168.15 466.464,1174.52 467.05,1179.13 467.637,1181.58 468.223,1182.75 468.809,1185.71 469.396,1188.06 469.982,1191.98 470.569,1192.51 471.155,1193.25 471.742,1197.03 472.328,1199.07 472.914,1201.1 473.501,1202.92 474.087,1201.87 474.674,1203.88 475.26,1205.6 475.846,1205.98 476.433,1210.87 477.019,1212.59 477.606,1214.24 478.192,1215.79 478.778,1215.94 479.365,1216.95 479.951,1216.93 480.538,1218.27 481.124,1220.95 481.711,1220.8 482.297,1223.66 482.883,1224.68 483.47,1228.83 484.056,1229.96 484.643,1231.11 485.229,1232.26 485.815,1231.83 486.402,1234.26 486.988,1231.86 487.575,1231.43 488.161,1233.92 488.748,1236.37 489.334,1238.44 489.92,1239.19 490.507,1238.2 491.093,1236.22 491.68,1235.53 492.266,1237.97 492.852,1237.41 493.439,1237.19 494.025,1232.23 494.612,1232.23 495.198,1234.7 495.784,1237.2 496.371,1240.84 496.957,1238.88 497.544,1239.93 498.13,1240.85 498.717,1241.65 499.303,1243.72 499.889,1242.91 500.476,1243.78 501.062,1242.85 501.649,1242.12 502.235,1240.26 502.821,1239.85 503.408,1237.78 503.994,1237.48 504.581,1236.95 505.167,1239.5 505.753,1236.12 506.34,1237.5 506.926,1237.31 507.513,1239.9 508.099,1238.17 508.686,1239.1 509.272,1238.8 509.858,1236.96 510.445,1238.01 511.031,1240.15 511.618,1240.85 512.204,1239.02 512.79,1238.62 513.377,1239.27 513.963,1239.1 514.55,1241.31 515.136,1242.32 515.722,1240.67 516.309,1241.6 516.895,1244.11 517.482,1245.91 518.068,1244.06 518.655,1244.55 519.241,1245.03 519.827,1244.47 520.414,1247.72 521,1245.67 521.587,1243.77 522.173,1245.8 522.759,1244.92 523.346,1247.08 523.932,1243.77 524.519,1244.52 525.105,1244.09 525.691,1244.72 526.278,1246.89 526.864,1247.52 527.451,1249.6 528.037,1250 528.624,1249.08 529.21,1248.43 529.796,1247.65 530.383,1246.88 530.969,1245 531.556,1244.29 532.142,1244.64 532.728,1245.28 533.315,1244.3 533.901,1243.67 534.488,1244.13 535.074,1248.77 535.661,1247.97 536.247,1247.31 536.833,1248.03 537.42,1247.14 538.006,1248.01 538.593,1248.72 539.179,1250.53 539.765,1249.3 540.352,1249.74 540.938,1247.45 541.525,1246.69 542.111,1245.92 542.697,1243.71 543.284,1244.06 543.87,1243.4 544.457,1241.26 545.043,1240.79 545.63,1241.43 546.216,1238.2 546.802,1239.29 547.389,1240.08 547.975,1236.79 548.562,1236.17 549.148,1235.93 549.734,1235.45 550.321,1232.66 550.907,1232.48 551.494,1233.51 552.08,1230.79 552.666,1230.74 553.253,1230.48 553.839,1231.39 554.426,1234.17 555.012,1233.94 555.599,1232.72 556.185,1231.26 556.771,1232.46 557.358,1232.51 557.944,1231.24 558.531,1235.36 559.117,1233.85 559.703,1233.53 560.29,1233.55 560.876,1233.37 561.463,1231.94 562.049,1231.88 562.635,1229.32 563.222,1230.56 563.808,1231.93 564.395,1231.7 564.981,1233.14 565.568,1232.95 566.154,1235.51 566.74,1235.05 567.327,1237.38 567.913,1236.87 568.5,1237.78 569.086,1237.22 569.672,1235.42 570.259,1236.19 570.845,1238.17 571.432,1236.11 572.018,1235.87 572.605,1235.74 573.191,1237.85 573.777,1237.37 574.364,1235.45 574.95,1237.66 575.537,1238.46 576.123,1236.66 576.709,1238.39 577.296,1237.73 577.882,1238.42 578.469,1237.75 579.055,1237.14 579.641,1233.83 580.228,1232.03 580.814,1230.42 581.401,1234.07 581.987,1241.2 582.574,1236.56 583.16,1240.04 583.746,1236.94 584.333,1239.27 584.919,1238.53 585.506,1236.4 586.092,1235.76 586.678,1236.71 587.265,1237.26 587.851,1234.99 588.438,1232.99 589.024,1230.03 589.61,1229.78 590.197,1230.49 590.783,1231.48 591.37,1229.99 591.956,1229.86 592.543,1229.52 593.129,1227.92 593.715,1227.98 594.302,1228 594.888,1227.48 595.475,1230.08 596.061,1232.44 596.647,1233.12 597.234,1236.55 597.82,1234.61 598.407,1231.32 598.993,1232.24 599.579,1234.54 600.166,1236.81 600.752,1237.43 601.339,1235.64 601.925,1233.4 602.512,1234.14 603.098,1232.45 603.684,1231.82 604.271,1231.36 604.857,1230.8 605.444,1235.52 606.03,1235.05 606.616,1233.59 607.203,1234.27 607.789,1234.95 608.376,1235.78 608.962,1235.22 609.548,1233.23 610.135,1234.07 610.721,1232.14 611.308,1229.06 611.894,1228.64 612.481,1231.03 613.067,1231.8 613.653,1231.26 614.24,1232.17 614.826,1227.86 615.413,1227.25 615.999,1228.28 616.585,1226.77 617.172,1227.81 617.758,1228.72 618.345,1227 618.931,1226.56 619.518,1227.32 620.104,1226.89 620.69,1226.39 621.277,1225.96 621.863,1224.57 622.45,1226.93 623.036,1225.3 623.622,1224.96 624.209,1224.48 624.795,1223.99 625.382,1226.23 625.968,1226.04 626.554,1225.52 627.141,1226.58 627.727,1224.9 628.314,1223.36 628.9,1221.7 629.487,1222.99 630.073,1225.51 630.659,1226.53 631.246,1224.72 631.832,1224.75 632.419,1223.18 633.005,1225.65 633.591,1225.13 634.178,1222.29 634.764,1222.17 635.351,1225.11 635.937,1223.76 636.523,1223.95 637.11,1223.73 637.696,1223.63 638.283,1227.46 638.869,1228.36 639.456,1226.78 640.042,1230.35 640.628,1231.14 641.215,1230.8 641.801,1231.72 642.388,1231.05 642.974,1231.8 643.56,1231.43 644.147,1230.78 644.733,1229.01 645.32,1227.26 645.906,1224.3 646.492,1224.24 647.079,1222.72 647.665,1224.07 648.252,1223.92 648.838,1223.98 649.425,1223.88 650.011,1221.18 650.597,1222.34 651.184,1222.35 651.77,1222.02 652.357,1222.06 652.943,1221.78 653.529,1222.99 654.116,1224.32 654.702,1227.74 655.289,1228.98 655.875,1231.17 656.462,1229.59 657.048,1232.96 657.634,1233.82 658.221,1229.1 658.807,1228.65 659.394,1225.49 659.98,1225.03 660.566,1226.28 661.153,1226.3 661.739,1223.14 662.326,1222.83 662.912,1222.44 663.498,1219.57 664.085,1220.65 664.671,1217.64 665.258,1217.83 665.844,1219.2 666.431,1220.61 667.017,1220.68 667.603,1224.63 668.19,1224.21 668.776,1224.97 669.363,1224.69 669.949,1224.44 670.535,1226.84 671.122,1226.68 671.708,1227.71 672.295,1228.16 672.881,1227.72 673.467,1227.22 674.054,1222.79 674.64,1221.31 675.227,1221.03 675.813,1222.16 676.4,1222.02 676.986,1223.13 677.572,1222.85 678.159,1223.82 678.745,1223.61 679.332,1222.06 679.918,1220.64 680.504,1220.62 681.091,1219.1 681.677,1217.44 682.264,1213.48 682.85,1211.43 683.436,1210.54 684.023,1210.99 684.609,1212.69 685.196,1211.84 685.782,1211.01 686.369,1211.44 686.955,1210.46 687.541,1208.22 688.128,1211.4 688.714,1210.58 689.301,1209.71 689.887,1211.35 690.473,1213.25 691.06,1216.28 691.646,1219.05 692.233,1219.2 692.819,1220.59 693.405,1220.71 693.992,1223.33 694.578,1220.21 695.165,1221.25 695.751,1222.36 696.338,1221.06 696.924,1223.45 697.51,1220.46 698.097,1218.18 698.683,1218.19 699.27,1215.65 699.856,1215.89 700.442,1217.54 701.029,1218.88 701.615,1219.98 702.202,1221.16 702.788,1220.79 703.375,1221.75 703.961,1221.66 704.547,1225.33 705.134,1224.9 705.72,1223.6 706.307,1221.96 706.893,1221.9 707.479,1220.46 708.066,1221.77 708.652,1222.72 709.239,1222.6 709.825,1225.08 710.411,1223.23 710.998,1223.3 711.584,1221.69 712.171,1222.83 712.757,1221.34 713.344,1222.66 713.93,1222.17 714.516,1220.8 715.103,1218.13 715.689,1220.77 716.276,1220.29 716.862,1218.8 717.448,1218.61 718.035,1218.43 718.621,1218.1 719.208,1218.05 719.794,1218.15 720.38,1218.14 720.967,1218.01 721.553,1220.36 722.14,1220.01 722.726,1223.61 723.313,1223.24 723.899,1221.75 724.485,1221.41 725.072,1222.32 725.658,1222.96 726.245,1222.81 726.831,1221.27 727.417,1219.71 728.004,1218.06 728.59,1217.9 729.177,1217.83 729.763,1215.24 730.349,1215.21 730.936,1217.75 731.522,1219.12 732.109,1220.37 732.695,1219.99 733.282,1217.05 733.868,1215.91 734.454,1215.78 735.041,1215.75 735.627,1217.05 736.214,1217.41 736.8,1214.89 737.386,1216.4 737.973,1217.76 738.559,1216.52 739.146,1214.94 739.732,1215 740.318,1213.84 740.905,1213.94 741.491,1213.95 742.078,1214.13 742.664,1214.01 743.251,1215.42 743.837,1214.19 744.423,1215.71 745.01,1213.01 745.596,1210.35 746.183,1210.59 746.769,1212.33 747.355,1209.91 747.942,1211.72 748.528,1209.4 749.115,1209.79 749.701,1209.86 750.288,1209.19 750.874,1209.57 751.46,1211.31 752.047,1209.15 752.633,1211.07 753.22,1211.25 753.806,1213.04 754.392,1211.65 754.979,1211.65 755.565,1211.99 756.152,1212.19 756.738,1215.2 757.324,1215.26 757.911,1214.02 758.497,1219.46 759.084,1216.71 759.67,1219.1 760.257,1218.88 760.843,1217.67 761.429,1216.55 762.016,1216.6 762.602,1217.9 763.189,1218.98 763.775,1219.81 764.361,1216.92 764.948,1220.92 765.534,1223.47 766.121,1221.73 766.707,1221.36 767.293,1218.39 767.88,1218.16 768.466,1219.68 769.053,1222.28 769.639,1221.97 770.226,1221.86 770.812,1222.69 771.398,1225 771.985,1225.8 772.571,1229.08 773.158,1229.87 773.744,1230.18 774.33,1231.57 774.917,1229.41 775.503,1228.62 776.09,1229.1 776.676,1229.79 777.262,1226.45 777.849,1225.75 778.435,1224.88 779.022,1222.97 779.608,1218.59 780.195,1215.86 780.781,1215.85 781.367,1215.42 781.954,1216.68 782.54,1216.5 783.127,1216.33 783.713,1217.25 784.299,1217.1 784.886,1219.43 785.472,1218.02 786.059,1218 786.645,1221.61 787.232,1222.65 787.818,1224.88 788.404,1228.05 788.991,1227.59 789.577,1228.02 790.164,1229.81 790.75,1229.06 791.336,1230.76 791.923,1232.76 792.509,1230.78 793.096,1228.78 793.682,1226.67 794.268,1226.45 794.855,1223.51 795.441,1223.21 796.028,1221.35 796.614,1216.21 797.201,1218.71 797.787,1216.87 798.373,1215.4 798.96,1212.82 799.546,1210.25 800.133,1209.16 800.719,1208.25 801.305,1208.79 801.892,1206.35 802.478,1208.09 803.065,1205.84 803.651,1207.52 804.237,1209.25 804.824,1210.69 805.41,1212.32 805.997,1211.3 806.583,1212.89 807.17,1211.98 807.756,1207.07 808.342,1210.37 808.929,1209.16 809.515,1209.47 810.102,1209.67 810.688,1215.22 811.274,1216.35 811.861,1216.28 812.447,1214.88 813.034,1213.7 813.62,1216.37 814.206,1216.58 814.793,1220.44 815.379,1219.03 815.966,1221.5 816.552,1220.06 817.139,1221.14 817.725,1219.64 818.311,1219.46 818.898,1219.3 819.484,1221.55 820.071,1222.55 820.657,1223.42 821.243,1224.25 821.83,1223.91 822.416,1223.55 823.003,1222.91 823.589,1222.48 824.175,1223.71 824.762,1221.96 825.348,1220 825.935,1221.03 826.521,1220.61 827.108,1216.29 827.694,1216.28 828.28,1217.4 828.867,1215.98 829.453,1214.75 830.04,1214.4 830.626,1215.82 831.212,1215.62 831.799,1215.87 832.385,1217.2 832.972,1215.61 833.558,1215.39 834.145,1214.01 834.731,1214.09 835.317,1214.03 835.904,1214 836.49,1214.21 837.077,1215.67 837.663,1214.26 838.249,1214.29 838.836,1215.7 839.422,1217.15 840.009,1218.42 840.595,1217.01 841.181,1217.12 841.768,1214.09 842.354,1214.32 842.941,1215.82 843.527,1215.78 844.114,1214.17 844.7,1216.67 845.286,1215.18 845.873,1215.4 846.459,1215.45 847.046,1213.77 847.632,1214.83 848.218,1214.84 848.805,1217.39 849.391,1214.85 849.978,1215.02 850.564,1213.45 851.15,1214.78 851.737,1216.14 852.323,1218.54 852.91,1215.95 853.496,1218.72 854.083,1219.87 854.669,1220.92 855.255,1220.43 855.842,1219.01 856.428,1218.84 857.015,1222.27 857.601,1219.21 858.187,1216.51 858.774,1212.57 859.36,1210.26 859.947,1213.11 860.533,1213.22 861.119,1213.57 861.706,1213.43 862.292,1213.62 862.879,1212.59 863.465,1214.04 864.052,1215.28 864.638,1213.87 865.224,1213.62 865.811,1215.01 866.397,1214.65 866.984,1213.38 867.57,1213.46 868.156,1209.57 868.743,1211.29 869.329,1211.21 869.916,1209.92 870.502,1208.93 871.089,1206.27 871.675,1209.12 872.261,1207.87 872.848,1207.09 873.434,1206.14 874.021,1203.92 874.607,1204.43 875.193,1205.11 875.78,1204.21 876.366,1204.76 876.953,1203.92 877.539,1204.59 878.125,1205.41 878.712,1205.91 879.298,1206.26 879.885,1206.44 880.471,1207.98 881.058,1205.68 881.644,1202.11 882.23,1204.14 882.817,1204.58 883.403,1203.91 883.99,1204.55 884.576,1203.59 885.162,1203.91 885.749,1207.05 886.335,1207.85 886.922,1208.02 887.508,1209.66 888.094,1208.48 888.681,1211.26 889.267,1214.18 889.854,1215.2 890.44,1216.12 891.027,1219.96 891.613,1219.43 892.199,1219.2 892.786,1221.36 893.372,1218.22 893.959,1219.22 894.545,1214.99 895.131,1215.13 895.718,1213.79 896.304,1215.13 896.891,1216.38 897.477,1217.77 898.063,1217.73 898.65,1213.45 899.236,1212.21 899.823,1212.34 900.409,1213.83 900.996,1213.68 901.582,1213.93 902.168,1211.22 902.755,1213.95 903.341,1215.38 903.928,1212.59 904.514,1212.74 905.1,1214.59 905.687,1214.42 906.273,1213.15 906.86,1213.29 907.446,1211.97 908.032,1210.87 908.619,1211.13 909.205,1212.54 909.792,1211.45 910.378,1211.47 910.965,1211.39 911.551,1210.28 912.137,1210.64 912.724,1208.2 913.31,1208.47 913.897,1209.05 914.483,1214.5 915.069,1214.62 915.656,1217.47 916.242,1217.12 916.829,1217.02 917.415,1216.87 918.002,1216.78 918.588,1217.63 919.174,1215.86 919.761,1218.22 920.347,1218.03 920.934,1212.6 921.52,1212.58 922.106,1210.21 922.693,1211.68 923.279,1210.42 923.866,1212.01 924.452,1213.46 925.038,1209.72 925.625,1211.25 926.211,1214.22 926.798,1211.65 927.384,1210.29 927.971,1206.64 928.557,1208.46 929.143,1207.49 929.73,1206.48 930.316,1208.06 930.903,1212.23 931.489,1210.88 932.075,1212.16 932.662,1210.76 933.248,1212 933.835,1213.42 934.421,1211.99 935.007,1214.77 935.594,1216.17 936.18,1217.28 936.767,1216.85 937.353,1216.52 937.94,1217.56 938.526,1220.15 939.112,1221.25 939.699,1220.61 940.285,1222.8 940.872,1222.21 941.458,1219.09 942.044,1217.46 942.631,1214.72 943.217,1213.23 943.804,1213.39 944.39,1214.78 944.976,1214.74 945.563,1213.37 946.149,1212.21 946.736,1211.11 947.322,1212.67 947.909,1212.76 948.495,1212.74 949.081,1211.46 949.668,1215.29 950.254,1216.64 950.841,1212.75 951.427,1212.69 952.013,1213.83 952.6,1213.83 953.186,1215.04 953.773,1212.24 954.359,1212.4 954.945,1211.1 955.532,1209.74 956.118,1209.91 956.705,1207.39 957.291,1209.2 957.878,1212.27 958.464,1215.11 959.05,1215.09 959.637,1214.96 960.223,1214.92 960.81,1214.63 961.396,1213.21 961.982,1213.24 962.569,1213.46 963.155,1214.76 963.742,1214.62 964.328,1214.41 964.915,1214.02 965.501,1215.26 966.087,1216.5 966.674,1218.91 967.26,1221 967.847,1219.32 968.433,1219.16 969.019,1218.87 969.606,1215.66 970.192,1214.35 970.779,1213.21 971.365,1213.04 971.951,1216.83 972.538,1215.08 973.124,1218.52 973.711,1220.71 974.297,1220.21 974.884,1218.46 975.47,1217.99 976.056,1219.02 976.643,1218.65 977.229,1219.59 977.816,1220.52 978.402,1221.73 978.988,1218.79 979.575,1216.94 980.161,1216.66 980.748,1222.86 981.334,1220.9 981.92,1220.42 982.507,1220.1 983.093,1220.94 983.68,1221.68 984.266,1219.47 984.853,1217.8 985.439,1217.53 986.025,1217.16 986.612,1216.94 987.198,1215.49 987.785,1215.33 988.371,1214.19 988.957,1214.32 989.544,1212.83 990.13,1211.37 990.717,1208.74 991.303,1210.31 991.889,1209 992.476,1211.47 993.062,1212.7 993.649,1212.65 994.235,1213.98 994.822,1216.45 995.408,1216.03 995.994,1214.43 996.581,1213 997.167,1214.28 997.754,1218.05 998.34,1217.82 998.926,1217.44 999.513,1218.36 1000.1,1217.85 1000.69,1218.83 1001.27,1217.19 1001.86,1216.89 1002.44,1213.03 1003.03,1215.63 1003.62,1216.9 1004.2,1218.18 1004.79,1217.74 1005.38,1217.24 1005.96,1215.91 1006.55,1211.74 1007.14,1209.41 1007.72,1204.39 1008.31,1203.72 1008.9,1204.21 1009.48,1204.48 1010.07,1203.76 1010.65,1204.13 1011.24,1204.76 1011.83,1205.26 1012.41,1207.16 1013,1207.34 1013.59,1208.99 1014.17,1210.58 1014.76,1210.7 1015.35,1210.89 1015.93,1209.66 1016.52,1211.17 1017.11,1216.46 1017.69,1216.68 1018.28,1214.07 1018.86,1212.56 1019.45,1212.51 1020.04,1212.67 1020.62,1206.05 1021.21,1205.09 1021.8,1202.71 1022.38,1204.61 1022.97,1203.54 1023.56,1204.31 1024.14,1203.73 1024.73,1201.61 1025.32,1203.38 1025.9,1202.2 1026.49,1201.47 1027.07,1204.83 1027.66,1205.17 1028.25,1204.53 1028.83,1206.55 1029.42,1205.4 1030.01,1205.74 1030.59,1205.92 1031.18,1204.89 1031.77,1209.46 1032.35,1206.92 1032.94,1204.85 1033.52,1203.93 1034.11,1203.22 1034.7,1205.14 1035.28,1210.61 1035.87,1212.04 1036.46,1209.33 1037.04,1213.48 1037.63,1215.88 1038.22,1214.68 1038.8,1214.61 1039.39,1213.09 1039.98,1211.78 1040.56,1213.35 1041.15,1214.52 1041.73,1214.6 1042.32,1214.52 1042.91,1214.53 1043.49,1213.26 1044.08,1213.36 1044.67,1214.62 1045.25,1215.99 1045.84,1215.98 1046.43,1215.72 1047.01,1215.49 1047.6,1217.71 1048.19,1216.07 1048.77,1217.41 1049.36,1215.99 1049.94,1210.84 1050.53,1212.15 1051.12,1212.07 1051.7,1210.78 1052.29,1212.19 1052.88,1212.05 1053.46,1212.12 1054.05,1212.32 1054.64,1214.64 1055.22,1214.49 1055.81,1214.16 1056.39,1214.08 1056.98,1214.05 1057.57,1215.02 1058.15,1217.5 1058.74,1217 1059.33,1215.28 1059.91,1213.71 1060.5,1214.84 1061.09,1214.73 1061.67,1213.37 1062.26,1212.19 1062.85,1213.35 1063.43,1210.55 1064.02,1210.81 1064.6,1209.82 1065.19,1212.68 1065.78,1210.14 1066.36,1211.98 1066.95,1210.42 1067.54,1210.93 1068.12,1211.02 1068.71,1208.32 1069.3,1209.67 1069.88,1209.8 1070.47,1211.08 1071.06,1210.15 1071.64,1210.36 1072.23,1212.05 1072.81,1210.65 1073.4,1214.64 1073.99,1215.89 1074.57,1214.32 1075.16,1214.31 1075.75,1212.75 1076.33,1214.04 1076.92,1213.88 1077.51,1216.46 1078.09,1213.51 1078.68,1213.61 1079.26,1214.7 1079.85,1217.09 1080.44,1218.11 1081.02,1217.76 1081.61,1218.78 1082.2,1217.06 1082.78,1215.58 1083.37,1218.08 1083.96,1217.97 1084.54,1217.87 1085.13,1216.51 1085.72,1216.28 1086.3,1215.79 1086.89,1215.81 1087.47,1218.12 1088.06,1216.54 1088.65,1216.24 1089.23,1218.45 1089.82,1215.89 1090.41,1215.64 1090.99,1215.42 1091.58,1215.58 1092.17,1215.2 1092.75,1214.98 1093.34,1215.81 1093.93,1216.88 1094.51,1218.11 1095.1,1217.8 1095.68,1217.51 1096.27,1216.2 1096.86,1214.76 1097.44,1217.41 1098.03,1218.51 1098.62,1215.3 1099.2,1213.68 1099.79,1211.06 1100.38,1209.9 1100.96,1209.79 1101.55,1209.91 1102.14,1207.59 1102.72,1207.8 1103.31,1209.42 1103.89,1209.39 1104.48,1209.58 1105.07,1208.36 1105.65,1209.78 1106.24,1212.46 1106.83,1214.06 1107.41,1211.67 1108,1209.23 1108.59,1213.33 1109.17,1215.88 1109.76,1215.95 1110.34,1214.59 1110.93,1215.11 1111.52,1214.78 1112.1,1215.8 1112.69,1214.28 1113.28,1214.21 1113.86,1214.38 1114.45,1214.21 1115.04,1211.77 1115.62,1213.11 1116.21,1210.36 1116.8,1207.77 1117.38,1208.05 1117.97,1209.66 1118.55,1210 1119.14,1207.55 1119.73,1207.76 1120.31,1209.76 1120.9,1209.88 1121.49,1209.9 1122.07,1209.92 1122.66,1212.76 1123.25,1212.96 1123.83,1212.82 1124.42,1211.57 1125.01,1213.22 1125.59,1216.94 1126.18,1215.3 1126.76,1212.47 1127.35,1212.39 1127.94,1216.34 1128.52,1217.69 1129.11,1220.09 1129.7,1218.25 1130.28,1216.81 1130.87,1218.04 1131.46,1214.93 1132.04,1213.5 1132.63,1210.47 1133.21,1208.89 1133.8,1211.58 1134.39,1209.31 1134.97,1209.29 1135.56,1210.98 1136.15,1209.48 1136.73,1213.6 1137.32,1215.14 1137.91,1216.3 1138.49,1215.11 1139.08,1215.95 1139.67,1218.51 1140.25,1218.13 1140.84,1216.45 1141.42,1219.01 1142.01,1222.33 1142.6,1221.71 1143.18,1221.06 1143.77,1218.08 1144.36,1217.77 1144.94,1217.49 1145.53,1214.75 1146.12,1215.74 1146.7,1214.64 1147.29,1214.76 1147.88,1213.15 1148.46,1217.15 1149.05,1218.41 1149.63,1212.77 1150.22,1214.32 1150.81,1213.05 1151.39,1214.35 1151.98,1213.88 1152.57,1212.5 1153.15,1212.43 1153.74,1213.57 1154.33,1213.55 1154.91,1210.78 1155.5,1213.4 1156.09,1213.63 1156.67,1212.18 1157.26,1210.98 1157.84,1209.84 1158.43,1209.91 1159.02,1208.73 1159.6,1207.58 1160.19,1207.83 1160.78,1208.02 1161.36,1207.92 1161.95,1207.08 1162.54,1204.84 1163.12,1205.53 1163.71,1206.53 1164.29,1208.49 1164.88,1207.5 1165.47,1206.64 1166.05,1205.7 1166.64,1207.17 1167.23,1207.31 1167.81,1207.87 1168.4,1206.69 1168.99,1204.5 1169.57,1207.71 1170.16,1208.13 1170.75,1212.21 1171.33,1216.08 1171.92,1213.36 1172.5,1214.55 1173.09,1217 1173.68,1216.56 1174.26,1216.24 1174.85,1217.33 1175.44,1215.92 1176.02,1214.52 1176.61,1209.23 1177.2,1209.67 1177.78,1207.19 1178.37,1212.66 1178.96,1209.77 1179.54,1211.57 1180.13,1211.71 1180.71,1214.21 1181.3,1212.93 1181.89,1211.87 1182.47,1211.93 1183.06,1210.79 1183.65,1211.01 1184.23,1212.44 1184.82,1213.78 1185.41,1215.03 1185.99,1216.46 1186.58,1214.82 1187.16,1216.01 1187.75,1215.6 1188.34,1216.62 1188.92,1213.63 1189.51,1214.89 1190.1,1212.05 1190.68,1212.07 1191.27,1212.5 1191.86,1212.79 1192.44,1211.65 1193.03,1210.23 1193.62,1209.21 1194.2,1210.9 1194.79,1212.35 1195.37,1211.35 1195.96,1210.12 1196.55,1210.21 1197.13,1211.6 1197.72,1209.31 1198.31,1209.63 1198.89,1210.02 1199.48,1212.67 1200.07,1213.53 1200.65,1213.64 1201.24,1209.43 1201.83,1209.76 1202.41,1213.79 1203,1213.81 1203.58,1214 1204.17,1211.47 1204.76,1210.45 1205.34,1209.35 1205.93,1210.68 1206.52,1210.75 1207.1,1210.98 1207.69,1211.05 1208.28,1211.1 1208.86,1211.37 1209.45,1211.4 1210.03,1208.59 1210.62,1210.07 1211.21,1210.07 1211.79,1211.41 1212.38,1211.3 1212.97,1213.86 1213.55,1212.57 1214.14,1211.31 1214.73,1209.9 1215.31,1209.85 1215.9,1211.04 1216.49,1211.23 1217.07,1211.32 1217.66,1214.09 1218.24,1214.38 1218.83,1215.71 1219.42,1216.92 1220,1220.69 1220.59,1220.14 1221.18,1221.26 1221.76,1219.44 1222.35,1222.96 1222.94,1219.94 1223.52,1220.76 1224.11,1221.63 1224.7,1223.62 1225.28,1221.51 1225.87,1221.14 1226.45,1219.5 1227.04,1221.84 1227.63,1222.55 1228.21,1222.36 1228.8,1219.33 1229.39,1220.08 1229.97,1218.5 1230.56,1224.52 1231.15,1220.16 1231.73,1218.47 1232.32,1215.75 1232.91,1218.09 1233.49,1217.73 1234.08,1215.98 1234.66,1214.51 1235.25,1214.31 1235.84,1214.19 1236.42,1215.36 1237.01,1212.58 1237.6,1211.08 1238.18,1211.07 1238.77,1215.26 1239.36,1212.4 1239.94,1212.37 1240.53,1213.52 1241.11,1212.17 1241.7,1208.21 1242.29,1208.49 1242.87,1208.53 1243.46,1208.6 1244.05,1208.99 1244.63,1207.67 1245.22,1206.5 1245.81,1199.07 1246.39,1199.67 1246.98,1199.18 1247.57,1199.85 1248.15,1199.34 1248.74,1198.83 1249.32,1198.19 1249.91,1194.72 1250.5,1198.1 1251.08,1200.16 1251.67,1200.81 1252.26,1200.43 1252.84,1199.94 1253.43,1204.23 1254.02,1203.53 1254.6,1203.81 1255.19,1204.34 1255.78,1203.15 1256.36,1207.63 1256.95,1207.71 1257.53,1206.94 1258.12,1207.1 1258.71,1207.58 1259.29,1206.51 1259.88,1208.45 1260.47,1210.27 1261.05,1210.3 1261.64,1211.75 1262.23,1210.54 1262.81,1207.94 1263.4,1209.41 1263.98,1212.29 1264.57,1208.39 1265.16,1208.33 1265.74,1207.3 1266.33,1207.61 1266.92,1209.43 1267.5,1209.62 1268.09,1210.93 1268.68,1211.31 1269.26,1208.75 1269.85,1207.71 1270.44,1205.21 1271.02,1204.19 1271.61,1205.93 1272.19,1205.17 1272.78,1205.66 1273.37,1205.13 1273.95,1205.58 1274.54,1206.01 1275.13,1205.13 1275.71,1204.29 1276.3,1204.45 1276.89,1207.38 1277.47,1207.6 1278.06,1206.59 1278.65,1209.49 1279.23,1208.55 1279.82,1209.84 1280.4,1210.03 1280.99,1211.5 1281.58,1211.44 1282.16,1211.74 1282.75,1209.21 1283.34,1209.5 1283.92,1213.72 1284.51,1212.36 1285.1,1211.42 1285.68,1212.64 1286.27,1213.85 1286.86,1213.59 1287.44,1213.34 1288.03,1213.39 1288.61,1214.8 1289.2,1212.05 1289.79,1213.39 1290.37,1213.15 1290.96,1214.37 1291.55,1215.35 1292.13,1216.49 1292.72,1214.98 1293.31,1214.89 1293.89,1214.89 1294.48,1214.52 1295.06,1211.63 1295.65,1212.9 1296.24,1212.88 1296.82,1212.7 1297.41,1214 1298,1215.11 1298.58,1215.04 1299.17,1217.15 1299.76,1219.13 1300.34,1217.47 1300.93,1214.91 1301.52,1213.57 1302.1,1216.23 1302.69,1217.44 1303.27,1217.17 1303.86,1215.78 1304.45,1216.29 1305.03,1218.99 1305.62,1220.02 1306.21,1221.02 1306.79,1220.76 1307.38,1220.52 1307.97,1221.13 1308.55,1224.71 1309.14,1222.56 1309.73,1221.9 1310.31,1217.48 1310.9,1216.74 1311.48,1216.71 1312.07,1216.22 1312.66,1215.99 1313.24,1213.06 1313.83,1215.41 1314.42,1212.96 1315,1215.52 1315.59,1215.64 1316.18,1218.07 1316.76,1216.39 1317.35,1216.25 1317.93,1213.23 1318.52,1211.79 1319.11,1211.96 1319.69,1209.58 1320.28,1208.45 1320.87,1211.44 1321.45,1211.5 1322.04,1212.69 1322.63,1213.83 1323.21,1214.85 1323.8,1214.58 1324.39,1218.15 1324.97,1217.72 1325.56,1218.34 1326.14,1217.97 1326.73,1218.97 1327.32,1214.97 1327.9,1216.45 1328.49,1215.29 1329.08,1213.7 1329.66,1215.13 1330.25,1217.43 1330.84,1217.22 1331.42,1217.26 1332.01,1215.7 1332.6,1215.45 1333.18,1213.81 1333.77,1212.27 1334.35,1213.5 1334.94,1214.59 1335.53,1213.18 1336.11,1211.93 1336.7,1212.29 1337.29,1213.29 1337.87,1212.08 1338.46,1211.99 1339.05,1212.15 1339.63,1212.14 1340.22,1213.39 1340.8,1214.6 1341.39,1215.9 1341.98,1213.1 1342.56,1212.93 1343.15,1211.46 1343.74,1210.39 1344.32,1207.95 1344.91,1209.5 1345.5,1209.75 1346.08,1207.31 1346.67,1208.99 1347.26,1210.57 1347.84,1211.94 1348.43,1212.09 1349.01,1211 1349.6,1209.91 1350.19,1208.75 1350.77,1210.2 1351.36,1211.83 1351.95,1215.84 1352.53,1212.88 1353.12,1212.8 1353.71,1214.35 1354.29,1219.13 1354.88,1217.4 1355.47,1217.07 1356.05,1219.44 1356.64,1219.12 1357.22,1220.13 1357.81,1218.29 1358.4,1217.88 1358.98,1220.02 1359.57,1218.26 1360.16,1217.6 1360.74,1218.42 1361.33,1217.92 1361.92,1216.32 1362.5,1214.94 1363.09,1217.71 1363.68,1217.54 1364.26,1217.45 1364.85,1215.78 1365.43,1216.64 1366.02,1216.33 1366.61,1213.57 1367.19,1215.12 1367.78,1214.92 1368.37,1215.73 1368.95,1215.54 1369.54,1214.04 1370.13,1213.72 1370.71,1213.75 1371.3,1213.72 1371.88,1213.54 1372.47,1210.77 1373.06,1212.16 1373.64,1212.3 1374.23,1213.72 1374.82,1212.38 1375.4,1210.79 1375.99,1208.57 1376.58,1208.68 1377.16,1208.78 1377.75,1207.78 1378.34,1209.22 1378.92,1210.68 1379.51,1209.54 1380.09,1209.58 1380.68,1209.67 1381.27,1209.59 1381.85,1208.6 1382.44,1209.06 1383.03,1208.35 1383.61,1209.87 1384.2,1210.93 1384.79,1210.91 1385.37,1212.21 1385.96,1214.99 1386.55,1216.03 1387.13,1214.32 1387.72,1214.19 1388.3,1214.17 1388.89,1212.88 1389.48,1212.7 1390.06,1213.85 1390.65,1212.65 1391.24,1214.1 1391.82,1213.95 1392.41,1214.12 1393,1214.44 1393.58,1213.08 1394.17,1213.5 1394.75,1210.85 1395.34,1207.26 1395.93,1207.84 1396.51,1208.35 1397.1,1206.11 1397.69,1206.49 1398.27,1206.72 1398.86,1208.35 1399.45,1210.2 1400.03,1209.04 1400.62,1207.66 1401.21,1207.82 1401.79,1208.11 1402.38,1210.81 1402.96,1209.48 1403.55,1209.51 1404.14,1210.99 1404.72,1212.39 1405.31,1209.54 1405.9,1212.31 1406.48,1213.63 1407.07,1216.26 1407.66,1216.18 1408.24,1216.31 1408.83,1216.24 1409.42,1216.09 1410,1215.71 1410.59,1214.17 1411.17,1215.38 1411.76,1215.03 1412.35,1217.4 1412.93,1217.08 1413.52,1216.8 1414.11,1219.44 1414.69,1220.41 1415.28,1216.11 1415.87,1216.07 1416.45,1215.67 1417.04,1215.13 1417.63,1216.47 1418.21,1216.38 1418.8,1216.13 1419.38,1216.87 1419.97,1217.85 1420.56,1216.2 1421.14,1215.63 1421.73,1212.72 1422.32,1213.79 1422.9,1213.54 1423.49,1212.31 1424.08,1211.01 1424.66,1211.34 1425.25,1212.78 1425.83,1212.95 1426.42,1215.61 1427.01,1214.16 1427.59,1212.83 1428.18,1212.8 1428.77,1212.84 1429.35,1211.55 1429.94,1211.49 1430.53,1211.53 1431.11,1211.42 1431.7,1214.33 1432.29,1215.51 1432.87,1212.58 1433.46,1211.29 1434.04,1207.49 1434.63,1206.43 1435.22,1206.77 1435.8,1207.23 1436.39,1208.75 1436.98,1211.72 1437.56,1213.11 1438.15,1210.74 1438.74,1209.36 1439.32,1212.28 1439.91,1213.55 1440.5,1213.75 1441.08,1214.67 1441.67,1216.97 1442.25,1216.4 1442.84,1217.87 1443.43,1214.75 1444.01,1214.52 1444.6,1214.02 1445.19,1213.81 1445.77,1212.38 1446.36,1212.38 1446.95,1212.35 1447.53,1211.05 1448.12,1211.29 1448.7,1212.81 1449.29,1212.77 1449.88,1216.45 1450.46,1218.73 1451.05,1218.31 1451.64,1219.02 1452.22,1217.37 1452.81,1216.98 1453.4,1216.83 1453.98,1216.53 1454.57,1217.25 1455.16,1216.95 1455.74,1215.55 1456.33,1215.39 1456.91,1215.08 1457.5,1213.69 1458.09,1213.59 1458.67,1212.23 1459.26,1213.54 1459.85,1213.3 1460.43,1214.59 1461.02,1214.6 1461.61,1214.31 1462.19,1213.95 1462.78,1212.41 1463.37,1212.19 1463.95,1212.22 1464.54,1212.55 1465.12,1213.7 1465.71,1213.49 1466.3,1216.24 1466.88,1217.18 1467.47,1215.76 1468.06,1212.83 1468.64,1211.51 1469.23,1211.7 1469.82,1206.68 1470.4,1205.62 1470.99,1207.06 1471.57,1207.32 1472.16,1205.09 1472.75,1204.31 1473.33,1205.09 1473.92,1204.23 1474.51,1206.13 1475.09,1206.43 1475.68,1208.33 1476.27,1208.71 1476.85,1208.94 1477.44,1206.49 1478.03,1206.49 1478.61,1208.03 1479.2,1209.59 1479.78,1211.21 1480.37,1211.01 1480.96,1208.43 1481.54,1207.42 1482.13,1206.51 1482.72,1209.51 1483.3,1209.51 1483.89,1209.52 1484.48,1209.39 1485.06,1208.23 1485.65,1208.53 1486.24,1211.39 1486.82,1212.95 1487.41,1210.5 1487.99,1210.43 1488.58,1211.59 1489.17,1212.92 1489.75,1213.92 1490.34,1214.98 1490.93,1214.69 1491.51,1214.7 1492.1,1214.51 1492.69,1215.66 1493.27,1218.19 1493.86,1217.9 1494.45,1219.1 1495.03,1217.25 1495.62,1218.21 1496.2,1216.85 1496.79,1217.96 1497.38,1213.89 1497.96,1213.83 1498.55,1217.74 1499.14,1216.17 1499.72,1214.64 1500.31,1214.53 1500.9,1215.53 1501.48,1214.07 1502.07,1214.96 1502.65,1213.72 1503.24,1214.79 1503.83,1214.62 1504.41,1217.08 1505,1215.39 1505.59,1215.24 1506.17,1216.79 1506.76,1216.55 1507.35,1218.97 1507.93,1219.66 1508.52,1217.9 1509.11,1217.51 1509.69,1215.87 1510.28,1213.27 1510.86,1213.11 1511.45,1209.24 1512.04,1210.63 1512.62,1209.44 1513.21,1209.38 1513.8,1207.04 1514.38,1209.71 1514.97,1208.68 1515.56,1211.21 1516.14,1209.84 1516.73,1210.09 1517.32,1210.25 1517.9,1210.44 1518.49,1209.33 1519.07,1210.34 1519.66,1210.52 1520.25,1211.94 1520.83,1210.66 1521.42,1209.46 1522.01,1207.24 1522.59,1207.64 1523.18,1207.77 1523.77,1207.74 1524.35,1205.56 1524.94,1208.85 1525.52,1207.86 1526.11,1208.32 1526.7,1206.07 1527.28,1209.14 1527.87,1210.72 1528.46,1213.48 1529.04,1215.73 1529.63,1214.3 1530.22,1214.24 1530.8,1214.34 1531.39,1214.14 1531.98,1213.8 1532.56,1213.72 1533.15,1215 1533.73,1214.93 1534.32,1214.95 1534.91,1213.87 1535.49,1215.23 1536.08,1216.6 1536.67,1220.47 1537.25,1221.61 1537.84,1221.32 1538.43,1219.52 1539.01,1220.57 1539.6,1221.68 1540.19,1218.35 1540.77,1213.97 1541.36,1212.76 1541.94,1216.89 1542.53,1218.35 1543.12,1218.01 1543.7,1218.9 1544.29,1218.71 1544.88,1216.96 1545.46,1216.75 1546.05,1214.9 1546.64,1216.28 1547.22,1216.16 1547.81,1216.23 1548.4,1214.69 1548.98,1214.46 1549.57,1213.84 1550.15,1213.87 1550.74,1212.42 1551.33,1211.31 1551.91,1211.6 1552.5,1209.94 1553.09,1208.97 1553.67,1206.28 1554.26,1207.82 1554.85,1209.26 1555.43,1210.93 1556.02,1213.6 1556.6,1217.4 1557.19,1216.05 1557.78,1215.73 1558.36,1215.23 1558.95,1214.88 1559.54,1216.15 1560.12,1214.66 1560.71,1212.99 1561.3,1211.59 1561.88,1210.11 1562.47,1210.22 1563.06,1211.94 1563.64,1210.55 1564.23,1209.5 1564.81,1209.45 1565.4,1209.77 1565.99,1212.16 1566.57,1212.31 1567.16,1212.07 1567.75,1214.99 1568.33,1213.52 1568.92,1216.09 1569.51,1218.22 1570.09,1215.42 1570.68,1213.85 1571.27,1214.08 1571.85,1212.48 1572.44,1212.25 1573.02,1208.35 1573.61,1208.42 1574.2,1208.87 1574.78,1209.1 1575.37,1210.39 1575.96,1210.38 1576.54,1211.49 1577.13,1213.18 1577.72,1214.71 1578.3,1215.94 1578.89,1217.24 1579.47,1216.81 1580.06,1215.27 1580.65,1216.71 1581.23,1215.17 1581.82,1214.95 1582.41,1213.46 1582.99,1214.58 1583.58,1217.18 1584.17,1218.26 1584.75,1219.27 1585.34,1219.23 1585.93,1218.72 1586.51,1218.3 1587.1,1216.52 1587.68,1215.1 1588.27,1220.12 1588.86,1217.15 1589.44,1214.18 1590.03,1216.57 1590.62,1216.39 1591.2,1214.96 1591.79,1214.55 1592.38,1214.55 1592.96,1215.67 1593.55,1215.5 1594.14,1217.87 1594.72,1217.6 1595.31,1215.88 1595.89,1214.68 1596.48,1213.11 1597.07,1211.69 1597.65,1212.99 1598.24,1211.6 1598.83,1211.56 1599.41,1210.51 1600,1210.66 1600.59,1209.1 1601.17,1209.56 1601.76,1209.6 1602.34,1209.49 1602.93,1209.61 1603.52,1211.1 1604.1,1212.29 1604.69,1212 1605.28,1213.77 1605.86,1213.92 1606.45,1215.09 1607.04,1212.14 1607.62,1210.6 1608.21,1210.75 1608.8,1206.62 1609.38,1206.81 1609.97,1209.77 1610.55,1208.71 1611.14,1210.03 1611.73,1208.91 1612.31,1211.67 1612.9,1211.6 1613.49,1212.78 1614.07,1214.11 1614.66,1213.05 1615.25,1215.56 1615.83,1214.22 1616.42,1215.66 1617.01,1214.09 1617.59,1213.87 1618.18,1216.36 1618.76,1217.38 1619.35,1217.18 1619.94,1217.03 1620.52,1215.3 1621.11,1213.85 1621.7,1211.42 1622.28,1212.67 1622.87,1210.2 1623.46,1217.84 1624.04,1214.02 1624.63,1212.37 1625.22,1212.44 1625.8,1211.19 1626.39,1210 1626.97,1208.07 1627.56,1208.18 1628.15,1207.21 1628.73,1208.77 1629.32,1210.22 1629.91,1211.75 1630.49,1210.32 1631.08,1207.92 1631.67,1209.73 1632.25,1209.76 1632.84,1211.25 1633.42,1213.84 1634.01,1212.37 1634.6,1208.35 1635.18,1207.38 1635.77,1207.88 1636.36,1206.67 1636.94,1208.26 1637.53,1207.18 1638.12,1208.54 1638.7,1209.99 1639.29,1208.57 1639.88,1208.63 1640.46,1207.4 1641.05,1207.66 1641.63,1213.06 1642.22,1214.49 1642.81,1215.77 1643.39,1216.78 1643.98,1216.53 1644.57,1214.72 1645.15,1215.9 1645.74,1215.57 1646.33,1215.6 1646.91,1215.09 1647.5,1214.53 1648.09,1213.08 1648.67,1213.08 1649.26,1211.72 1649.84,1212.83 1650.43,1215.45 1651.02,1212.53 1651.6,1217.49 1652.19,1215.93 1652.78,1214.41 1653.36,1214.09 1653.95,1212.49 1654.54,1211.29 1655.12,1212.77 1655.71,1212.66 1656.29,1209.94 1656.88,1207.4 1657.47,1208.82 1658.05,1209.11 1658.64,1205.62 1659.23,1205.97 1659.81,1204.93 1660.4,1202.82 1660.99,1203.4 1661.57,1205.46 1662.16,1205.82 1662.75,1208.93 1663.33,1209.43 1663.92,1208.52 1664.5,1209.1 1665.09,1209.17 1665.68,1210.4 1666.26,1207.8 1666.85,1207.87 1667.44,1206.46 1668.02,1206.62 1668.61,1205.63 1669.2,1204.69 1669.78,1207.81 1670.37,1207.93 1670.96,1206.67 1671.54,1205.22 1672.13,1208.08 1672.71,1208.35 1673.3,1208.59 1673.89,1208.67 1674.47,1208.89 1675.06,1209.01 1675.65,1209.47 1676.23,1211.2 1676.82,1208.6 1677.41,1209.56 1677.99,1208.48 1678.58,1208.81 1679.17,1211.41 1679.75,1209.1 1680.34,1207.74 1680.92,1206.7 1681.51,1206.82 1682.1,1208.38 1682.68,1211.3 1683.27,1214.02 1683.86,1213.72 1684.44,1215.18 1685.03,1214.02 1685.62,1215.03 1686.2,1214.79 1686.79,1214.31 1687.37,1210.11 1687.96,1210.05 1688.55,1211.46 1689.13,1208.97 1689.72,1210.66 1690.31,1211.9 1690.89,1210.48 1691.48,1212.98 1692.07,1210.47 1692.65,1210.26 1693.24,1211.18 1693.83,1212.34 1694.41,1213.89 1695,1216.3 1695.58,1217.26 1696.17,1217.02 1696.76,1217.01 1697.34,1214.3 1697.93,1215.5 1698.52,1216.72 1699.1,1218.72 1699.69,1217.51 1700.28,1217.42 1700.86,1217.33 1701.45,1215.82 1702.04,1215.77 1702.62,1219.24 1703.21,1218.81 1703.79,1220.73 1704.38,1219.43 1704.97,1219.43 1705.55,1215.22 1706.14,1211.03 1706.73,1208.77 1707.31,1209.02 1707.9,1207.88 1708.49,1207.04 1709.07,1204.4 1709.66,1202.02 1710.24,1202.55 1710.83,1204.5 1711.42,1204.84 1712,1208.93 1712.59,1209.2 1713.18,1205.49 1713.76,1208.5 1714.35,1209.84 1714.94,1209.93 1715.52,1206.05 1716.11,1206.38 1716.7,1208.93 1717.28,1210.27 1717.87,1210.46 1718.45,1206.81 1719.04,1206.07 1719.63,1206.36 1720.21,1204.14 1720.8,1204.39 1721.39,1202.36 1721.97,1204.34 1722.56,1204.83 1723.15,1206.3 1723.73,1206.7 1724.32,1206.99 1724.91,1205.66 1725.49,1206.23 1726.08,1207.9 1726.66,1205.69 1727.25,1205.96 1727.84,1207.62 1728.42,1210.79 1729.01,1210.98 1729.6,1209.29 1730.18,1209.64 1730.77,1209.48 1731.36,1206.88 1731.94,1208.48 1732.53,1207.47 1733.11,1206.35 1733.7,1205.43 1734.29,1203.13 1734.87,1205.15 1735.46,1205.58 1736.05,1207.52 1736.63,1206.58 1737.22,1207.2 1737.81,1208.88 1738.39,1208.93 1738.98,1209.36 1739.57,1209.37 1740.15,1208.43 1740.74,1207.49 1741.32,1206.67 1741.91,1205.86 1742.5,1208.74 1743.08,1207.86 1743.67,1211.99 1744.26,1210.79 1744.84,1213.22 1745.43,1213.45 1746.02,1211.83 1746.6,1211.99 1747.19,1213.45 1747.78,1213.65 1748.36,1214.77 1748.95,1214.61 1749.53,1214.68 1750.12,1215.91 1750.71,1215.74 1751.29,1214.37 1751.88,1214.15 1752.47,1210.13 1753.05,1208.98 1753.64,1206.45 1754.23,1208.17 1754.81,1209.57 1755.4,1209.71 1755.99,1209.7 1756.57,1212.4 1757.16,1212.49 1757.74,1216.29 1758.33,1212.2 1758.92,1212.23 1759.5,1212.31 1760.09,1213.43 1760.68,1213.28 1761.26,1214.36 1761.85,1215.37 1762.44,1216.25 1763.02,1213.17 1763.61,1214.21 1764.19,1214.06 1764.78,1214.03 1765.37,1213.78 1765.95,1213.61 1766.54,1213.31 1767.13,1213.28 1767.71,1213.32 1768.3,1211.9 1768.89,1210.72 1769.47,1209.56 1770.06,1209.47 1770.65,1209.91 1771.23,1209.73 1771.82,1209.7 1772.4,1208.43 1772.99,1210.21 1773.58,1211.82 1774.16,1211.66 1774.75,1211.27 1775.34,1209.93 1775.92,1208.7 1776.51,1208.53 1777.1,1210.1 1777.68,1208.83 1778.27,1207.56 1778.86,1209.56 1779.44,1209.6 1780.03,1210.83 1780.61,1212.34 1781.2,1210.99 1781.79,1210.83 1782.37,1212.21 1782.96,1213.42 1783.55,1211.98 1784.13,1211.98 1784.72,1212.06 1785.31,1212.52 1785.89,1212.62 1786.48,1211.48 1787.06,1211.93 1787.65,1212.13 1788.24,1211.14 1788.82,1209.98 1789.41,1211.52 1790,1214.17 1790.58,1214.03 1791.17,1214.07 1791.76,1212.67 1792.34,1212.72 1792.93,1214.06 1793.52,1213.79 1794.1,1213.7 1794.69,1214.73 1795.27,1212.12 1795.86,1213.5 1796.45,1215.7 1797.03,1216.79 1797.62,1211.15 1798.21,1215.15 1798.79,1217.34 1799.38,1218.05 1799.97,1217.74 1800.55,1220.04 1801.14,1221.02 1801.73,1220.51 1802.31,1221.36 1802.9,1220.95 1803.48,1220.47 1804.07,1220.07 1804.66,1219.6 1805.24,1217.8 1805.83,1216.59 1806.42,1218.79 1807,1219.61 1807.59,1218.13 1808.18,1216.71 1808.76,1217.67 1809.35,1217.19 1809.94,1216.8 1810.52,1217.63 1811.11,1216.1 1811.69,1211.84 1812.28,1210.33 1812.87,1212.73 1813.45,1212.41 1814.04,1214.93 1814.63,1214.77 1815.21,1215.91 1815.8,1216.8 1816.39,1215.19 1816.97,1216.39 1817.56,1214.84 1818.14,1217.48 1818.73,1217.09 1819.32,1214.23 1819.9,1212.97 1820.49,1213.08 1821.08,1214.25 1821.66,1215.32 1822.25,1213.82 1822.84,1212.51 1823.42,1215 1824.01,1217.21 1824.6,1215.79 1825.18,1215.46 1825.77,1214.21 1826.35,1214.16 1826.94,1212.58 1827.53,1213.77 1828.11,1216.29 1828.7,1218.52 1829.29,1216.65 1829.87,1217.89 1830.46,1217.35 1831.05,1215.67 1831.63,1214.41 1832.22,1214.29 1832.81,1214.03 1833.39,1216.84 1833.98,1216.88 1834.56,1212.72 1835.15,1212.62 1835.74,1213.89 1836.32,1212.42 1836.91,1215.13 1837.5,1213.84 1838.08,1212.5 1838.67,1213.69 1839.26,1212.04 1839.84,1207.81 1840.43,1210.65 1841.01,1210.52 1841.6,1210.64 1842.19,1210.62 1842.77,1210.78 1843.36,1209.62 1843.95,1207.19 1844.53,1208.77 1845.12,1207.89 1845.71,1208.16 1846.29,1208.6 1846.88,1207.31 1847.47,1206.43 1848.05,1203.87 1848.64,1204.45 1849.22,1204.93 1849.81,1202.75 1850.4,1203.27 1850.98,1202.26 1851.57,1204.03 1852.16,1205.55 1852.74,1207.52 1853.33,1207.51 1853.92,1209.22 1854.5,1208.13 1855.09,1209.9 1855.68,1210.12 1856.26,1209.09 1856.85,1209.11 1857.43,1206.62 1858.02,1207.08 1858.61,1209.88 1859.19,1210.85 1859.78,1209.38 1860.37,1210.83 1860.95,1211.01 1861.54,1207.02 1862.13,1207.52 1862.71,1207.57 1863.3,1210.38 1863.88,1212.02 1864.47,1210.85 1865.06,1213.54 1865.64,1213.58 1866.23,1213.51 1866.82,1213.06 1867.4,1213.13 1867.99,1211.67 1868.58,1209.04 1869.16,1210.72 1869.75,1207.99 1870.34,1207.22 1870.92,1207.44 1871.51,1210.19 1872.09,1211.71 1872.68,1207.7 1873.27,1206.53 1873.85,1206.81 1874.44,1206.06 1875.03,1205.11 1875.61,1206.68 1876.2,1205.72 1876.79,1206.32 1877.37,1206.69 1877.96,1209.54 1878.55,1212.3 1879.13,1211.17 1879.72,1208.45 1880.3,1207.23 1880.89,1208.67 1881.48,1208.99 1882.06,1211.46 1882.65,1211.53 1883.24,1210.46 1883.82,1210.79 1884.41,1212.27 1885,1214.88 1885.58,1216.19 1886.17,1215.8 1886.76,1217.07 1887.34,1213.03 1887.93,1211.88 1888.51,1211.65 1889.1,1208.96 1889.69,1210.29 1890.27,1210.59 1890.86,1213.33 1891.45,1214.78 1892.03,1216.06 1892.62,1219.91 1893.21,1218.28 1893.79,1219.21 1894.38,1217.41 1894.96,1218.75 1895.55,1217.08 1896.14,1216.8 1896.72,1216.33 1897.31,1214.6 1897.9,1211.67 1898.48,1213.04 1899.07,1213.04 1899.66,1213.09 1900.24,1214.46 1900.83,1216.78 1901.42,1219.12 1902,1218.81 1902.59,1217.29 1903.17,1215.9 1903.76,1215.51 1904.35,1215.27 1904.93,1212.6 1905.52,1212.57 1906.11,1212.66 1906.69,1214.07 1907.28,1214.07 1907.87,1212.74 1908.45,1209.73 1909.04,1209.79 1909.63,1208.35 1910.21,1207.29 1910.8,1211.77 1911.38,1211.83 1911.97,1211.84 1912.56,1210.59 1913.14,1207.87 1913.73,1208.53 1914.32,1209.64 1914.9,1211.11 1915.49,1209.9 1916.08,1208.46 1916.66,1211.32 1917.25,1212.66 1917.83,1211.31 1918.42,1210.18 1919.01,1210.35 1919.59,1209.01 1920.18,1211.85 1920.77,1211.79 1921.35,1213.14 1921.94,1215.59 1922.53,1216.91 1923.11,1218.12 1923.7,1219.1 1924.29,1221.42 1924.87,1223.24 1925.46,1221.41 1926.04,1218.39 1926.63,1218.11 1927.22,1216.54 1927.8,1216.09 1928.39,1215.9 1928.98,1215.57 1929.56,1219.39 1930.15,1218.8 1930.74,1218.06 1931.32,1215.03 1931.91,1210.77 1932.5,1209.59 1933.08,1208.29 1933.67,1210.07 1934.25,1207.74 1934.84,1209.54 1935.43,1208.42 1936.01,1212.68 1936.6,1213.97 1937.19,1214.18 1937.77,1213.02 1938.36,1214.42 1938.95,1214.19 1939.53,1213.95 1940.12,1211.45 1940.71,1211.53 1941.29,1212.99 1941.88,1209.19 1942.46,1211.97 1943.05,1211.86 1943.64,1211.78 1944.22,1214.32 1944.81,1215.11 1945.4,1209.61 1945.98,1210.79 1946.57,1211.01 1947.16,1211 1947.74,1211.31 1948.33,1211.04 1948.91,1209.76 1949.5,1211.26 1950.09,1211.28 1950.67,1209.77 1951.26,1210.21 1951.85,1208.96 1952.43,1209.19 1953.02,1211.86 1953.61,1214.36 1954.19,1214.13 1954.78,1214.03 1955.37,1215.23 1955.95,1216.17 1956.54,1215.91 1957.12,1218.05 1957.71,1216.23 1958.3,1217.59 1958.88,1217.49 1959.47,1218.59 1960.06,1218.22 1960.64,1220.34 1961.23,1221.13 1961.82,1220.77 1962.4,1218.92 1962.99,1218.4 1963.58,1218.15 1964.16,1216.45 1964.75,1217.79 1965.33,1218.58 1965.92,1214.23 1966.51,1212.81 1967.09,1212.87 1967.68,1212.77 1968.27,1212.7 1968.85,1211.44 1969.44,1210.14 1970.03,1208.8 1970.61,1209.89 1971.2,1211.17 1971.78,1211.28 1972.37,1212.66 1972.96,1211.44 1973.54,1213.88 1974.13,1213.66 1974.72,1210.89 1975.3,1210.63 1975.89,1210.58 1976.48,1209.44 1977.06,1208.36 1977.65,1209.88 1978.24,1207.31 1978.82,1205.07 1979.41,1203.01 1979.99,1203.45 1980.58,1205.14 1981.17,1205.52 1981.75,1203.34 1982.34,1203.63 1982.93,1203 1983.51,1206.21 1984.1,1206.53 1984.69,1207.08 1985.27,1207.45 1985.86,1207.87 1986.45,1206.85 1987.03,1208.67 1987.62,1210.1 1988.2,1210.39 1988.79,1210.62 1989.38,1211.07 1989.96,1212.46 1990.55,1212.43 1991.14,1210.05 1991.72,1211.46 1992.31,1212.58 1992.9,1214.96 1993.48,1217.4 1994.07,1215.86 1994.65,1215.97 1995.24,1215.82 1995.83,1212.97 1996.41,1207.86 1997,1212.21 1997.59,1212.3 1998.17,1213.9 1998.76,1215.23 1999.35,1218.84 1999.93,1218.43 2000.52,1218.26 2001.11,1217.78 2001.69,1216.52 2002.28,1217.78 2002.86,1217.58 2003.45,1213.26 2004.04,1211.85 2004.62,1210.41 2005.21,1210.48 2005.8,1210.92 2006.38,1210.78 2006.97,1215.18 2007.56,1213.61 2008.14,1214.85 2008.73,1211.99 2009.32,1210.51 2009.9,1212.09 2010.49,1210.49 2011.07,1209.51 2011.66,1209.77 2012.25,1208.78 2012.83,1207.86 2013.42,1209.32 2014.01,1209.29 2014.59,1209.51 2015.18,1211.32 2015.77,1211.59 2016.35,1211.85 2016.94,1210.68 2017.53,1210.69 2018.11,1209.44 2018.7,1209.29 2019.28,1208.04 2019.87,1205.87 2020.46,1206.16 2021.04,1205.15 2021.63,1206.81 2022.22,1204.51 2022.8,1204.88 2023.39,1206.5 2023.98,1209.16 2024.56,1210.61 2025.15,1212.35 2025.73,1212.14 2026.32,1210.8 2026.91,1210.85 2027.49,1212.41 2028.08,1212.36 2028.67,1214.76 2029.25,1214.49 2029.84,1215.48 2030.43,1215.27 2031.01,1216.15 2031.6,1213.4 2032.19,1213.43 2032.77,1212.2 2033.36,1213.48 2033.94,1214.49 2034.53,1216.91 2035.12,1215.37 2035.7,1215.13 2036.29,1216.57 2036.88,1214.97 2037.46,1213.55 2038.05,1213.41 2038.64,1211.91 2039.22,1214.5 2039.81,1212.96 2040.4,1212.6 2040.98,1213.89 2041.57,1212.59 2042.15,1213.87 2042.74,1212.61 2043.33,1211.66 2043.91,1213.12 2044.5,1212.91 2045.09,1212.73 2045.67,1210.16 2046.26,1210.27 2046.85,1210.39 2047.43,1210.48 2048.02,1209.26 2048.6,1210.36 2049.19,1207.68 2049.78,1207.65 2050.36,1209.04 2050.95,1210.92 2051.54,1208.5 2052.12,1208.53 2052.71,1208.59 2053.3,1212.64 2053.88,1212.62 2054.47,1212.61 2055.06,1212.37 2055.64,1211.23 2056.23,1212.58 2056.81,1213 2057.4,1213.03 2057.99,1214.22 2058.57,1213.92 2059.16,1213.84 2059.75,1214.97 2060.33,1216.41 2060.92,1217.63 2061.51,1217.14 2062.09,1217.98 2062.68,1218 2063.27,1217.71 2063.85,1216.31 2064.44,1218.49 2065.02,1218.2 2065.61,1218.06 2066.2,1217.86 2066.78,1220.08 2067.37,1220.87 2067.96,1215.14 2068.54,1215.01 2069.13,1214.8 2069.72,1214.69 2070.3,1215.98 2070.89,1217.26 2071.48,1213.24 2072.06,1213.55 2072.65,1211.94 2073.23,1213.33 2073.82,1213.09 2074.41,1214.39 2074.99,1211.72 2075.58,1210.64 2076.17,1210.81 2076.75,1210.6 2077.34,1211.58 2077.93,1214.07 2078.51,1211.52 2079.1,1213.13 2079.68,1208.99 2080.27,1210.63 2080.86,1212.08 2081.44,1212.12 2082.03,1209.81 2082.62,1210.12 2083.2,1206.56 2083.79,1206.81 2084.38,1209.61 2084.96,1209.69 2085.55,1208.39 2086.14,1210.09 2086.72,1210.19 2087.31,1209.17 2087.89,1211.92 2088.48,1216.03 2089.07,1215.97 2089.65,1214.42 2090.24,1214.71 2090.83,1215.65 2091.41,1215.39 2092,1213.92 2092.59,1212.73 2093.17,1210.25 2093.76,1211.47 2094.35,1212.92 2094.93,1212.77 2095.52,1212.86 2096.1,1211.69 2096.69,1211.58 2097.28,1212.76 2097.86,1211.5 2098.45,1210.13 2099.04,1210.32 2099.62,1209.2 2100.21,1209.36 2100.8,1209.65 2101.38,1212.34 2101.97,1211.01 2102.55,1212.54 2103.14,1211.09 2103.73,1211.31 2104.31,1210.07 2104.9,1212.68 2105.49,1208.84 2106.07,1207.6 2106.66,1209.33 2107.25,1210.58 2107.83,1211.8 2108.42,1212.84 2109.01,1211.23 2109.59,1210.17 2110.18,1211.5 2110.76,1211.77 2111.35,1210.8 2111.94,1208.38 2112.52,1208.43 2113.11,1210.02 2113.7,1210.04 2114.28,1207.68 2114.87,1206.43 2115.46,1209.5 2116.04,1211.19 2116.63,1211.36 2117.22,1211.39 2117.8,1212.46 2118.39,1212.31 2118.97,1212.48 2119.56,1210.14 2120.15,1210.18 2120.73,1212.97 2121.32,1212.89 2121.91,1212.76 2122.49,1211.68 2123.08,1211.92 2123.67,1209.33 2124.25,1211.1 2124.84,1211.1 2125.42,1209.88 2126.01,1211.44 2126.6,1214.22 2127.18,1214.12 2127.77,1213.98 2128.36,1215.3 2128.94,1215 2129.53,1214.71 2130.12,1215.69 2130.7,1215.55 2131.29,1218 2131.88,1217.69 2132.46,1221.37 2133.05,1219.57 2133.63,1217.66 2134.22,1217.5 2134.81,1215.8 2135.39,1214.21 2135.98,1214.06 2136.57,1211.35 2137.15,1215.1 2137.74,1214.96 2138.33,1216.26 2138.91,1214.59 2139.5,1214.66 2140.09,1214.88 2140.67,1214.64 2141.26,1213.24 2141.84,1210.53 2142.43,1209.63 2143.02,1209.91 2143.6,1210.19 2144.19,1210.33 2144.78,1209.09 2145.36,1210.64 2145.95,1209.37 2146.54,1210.68 2147.12,1210.78 2147.71,1211.95 2148.3,1211.79 2148.88,1211.81 2149.47,1215.64 2150.05,1214.1 2150.64,1215.23 2151.23,1212.34 2151.81,1209.66 2152.4,1211.07 2152.99,1209.68 2153.57,1209.71 2154.16,1212.57 2154.75,1212.88 2155.33,1212.64 2155.92,1212.61 2156.5,1211.06 2157.09,1212.45 2157.68,1209.63 2158.26,1208.5 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1212.69 L986.612 1212.69 L987.198 1212.69 L987.785 1212.69 L988.371 1212.69 L988.957 1212.69 L989.544 1212.69 L990.13 1212.69 L990.717 1212.69 L991.303 1212.69 L991.889 1212.69 L992.476 1212.69 L993.062 1212.69 L993.649 1212.69 L994.235 1212.69 L994.822 1212.69 L995.408 1212.69 L995.994 1212.69 L996.581 1212.69 L997.167 1212.69 L997.754 1212.69 L998.34 1212.69 L998.926 1212.69 L999.513 1212.69 L1000.1 1212.69 L1000.69 1212.69 L1001.27 1212.69 L1001.86 1212.69 L1002.44 1212.69 L1003.03 1212.69 L1003.62 1212.69 L1004.2 1212.69 L1004.79 1212.69 L1005.38 1212.69 L1005.96 1212.69 L1006.55 1212.69 L1007.14 1212.69 L1007.72 1212.69 L1008.31 1212.69 L1008.9 1212.69 L1009.48 1212.69 L1010.07 1212.69 L1010.65 1212.69 L1011.24 1212.69 L1011.83 1212.69 L1012.41 1212.69 L1013 1212.69 L1013.59 1212.69 L1014.17 1212.69 L1014.76 1212.69 L1015.35 1212.69 L1015.93 1212.69 L1016.52 1212.69 L1017.11 1212.69 L1017.69 1212.69 L1018.28 1212.69 L1018.86 1212.69 L1019.45 1212.69 L1020.04 1212.69 L1020.62 1212.69 L1021.21 1212.69 L1021.8 1212.69 L1022.38 1212.69 L1022.97 1212.69 L1023.56 1212.69 L1024.14 1212.69 L1024.73 1212.69 L1025.32 1212.69 L1025.9 1212.69 L1026.49 1212.69 L1027.07 1212.69 L1027.66 1212.69 L1028.25 1212.69 L1028.83 1212.69 L1029.42 1212.69 L1030.01 1212.69 L1030.59 1212.69 L1031.18 1212.69 L1031.77 1212.69 L1032.35 1212.69 L1032.94 1212.69 L1033.52 1212.69 L1034.11 1212.69 L1034.7 1212.69 L1035.28 1212.69 L1035.87 1212.69 L1036.46 1212.69 L1037.04 1212.69 L1037.63 1212.69 L1038.22 1212.69 L1038.8 1212.69 L1039.39 1212.69 L1039.98 1212.69 L1040.56 1212.69 L1041.15 1212.69 L1041.73 1212.69 L1042.32 1212.69 L1042.91 1212.69 L1043.49 1212.69 L1044.08 1212.69 L1044.67 1212.69 L1045.25 1212.69 L1045.84 1212.69 L1046.43 1212.69 L1047.01 1212.69 L1047.6 1212.69 L1048.19 1212.69 L1048.77 1212.69 L1049.36 1212.69 L1049.94 1212.69 L1050.53 1212.69 L1051.12 1212.69 L1051.7 1212.69 L1052.29 1212.69 L1052.88 1212.69 L1053.46 1212.69 L1054.05 1212.69 L1054.64 1212.69 L1055.22 1212.69 L1055.81 1212.69 L1056.39 1212.69 L1056.98 1212.69 L1057.57 1212.69 L1058.15 1212.69 L1058.74 1212.69 L1059.33 1212.69 L1059.91 1212.69 L1060.5 1212.69 L1061.09 1212.69 L1061.67 1212.69 L1062.26 1212.69 L1062.85 1212.69 L1063.43 1212.69 L1064.02 1212.69 L1064.6 1212.69 L1065.19 1212.69 L1065.78 1212.69 L1066.36 1212.69 L1066.95 1212.69 L1067.54 1212.69 L1068.12 1212.69 L1068.71 1212.69 L1069.3 1212.69 L1069.88 1212.69 L1070.47 1212.69 L1071.06 1212.69 L1071.64 1212.69 L1072.23 1212.69 L1072.81 1212.69 L1073.4 1212.69 L1073.99 1212.69 L1074.57 1212.69 L1075.16 1212.69 L1075.75 1212.69 L1076.33 1212.69 L1076.92 1212.69 L1077.51 1212.69 L1078.09 1212.69 L1078.68 1212.69 L1079.26 1212.69 L1079.85 1212.69 L1080.44 1212.69 L1081.02 1212.69 L1081.61 1212.69 L1082.2 1212.69 L1082.78 1212.69 L1083.37 1212.69 L1083.96 1212.69 L1084.54 1212.69 L1085.13 1212.69 L1085.72 1212.69 L1086.3 1212.69 L1086.89 1212.69 L1087.47 1212.69 L1088.06 1212.69 L1088.65 1212.69 L1089.23 1212.69 L1089.82 1212.69 L1090.41 1212.69 L1090.99 1212.69 L1091.58 1212.69 L1092.17 1212.69 L1092.75 1212.69 L1093.34 1212.69 L1093.93 1212.69 L1094.51 1212.69 L1095.1 1212.69 L1095.68 1212.69 L1096.27 1212.69 L1096.86 1212.69 L1097.44 1212.69 L1098.03 1212.69 L1098.62 1212.69 L1099.2 1212.69 L1099.79 1212.69 L1100.38 1212.69 L1100.96 1212.69 L1101.55 1212.69 L1102.14 1212.69 L1102.72 1212.69 L1103.31 1212.69 L1103.89 1212.69 L1104.48 1212.69 L1105.07 1212.69 L1105.65 1212.69 L1106.24 1212.69 L1106.83 1212.69 L1107.41 1212.69 L1108 1212.69 L1108.59 1212.69 L1109.17 1212.69 L1109.76 1212.69 L1110.34 1212.69 L1110.93 1212.69 L1111.52 1212.69 L1112.1 1212.69 L1112.69 1212.69 L1113.28 1212.69 L1113.86 1212.69 L1114.45 1212.69 L1115.04 1212.69 L1115.62 1212.69 L1116.21 1212.69 L1116.8 1212.69 L1117.38 1212.69 L1117.97 1212.69 L1118.55 1212.69 L1119.14 1212.69 L1119.73 1212.69 L1120.31 1212.69 L1120.9 1212.69 L1121.49 1212.69 L1122.07 1212.69 L1122.66 1212.69 L1123.25 1212.69 L1123.83 1212.69 L1124.42 1212.69 L1125.01 1212.69 L1125.59 1212.69 L1126.18 1212.69 L1126.76 1212.69 L1127.35 1212.69 L1127.94 1212.69 L1128.52 1212.69 L1129.11 1212.69 L1129.7 1212.69 L1130.28 1212.69 L1130.87 1212.69 L1131.46 1212.69 L1132.04 1212.69 L1132.63 1212.69 L1133.21 1212.69 L1133.8 1212.69 L1134.39 1212.69 L1134.97 1212.69 L1135.56 1212.69 L1136.15 1212.69 L1136.73 1212.69 L1137.32 1212.69 L1137.91 1212.69 L1138.49 1212.69 L1139.08 1212.69 L1139.67 1212.69 L1140.25 1212.69 L1140.84 1212.69 L1141.42 1212.69 L1142.01 1212.69 L1142.6 1212.69 L1143.18 1212.69 L1143.77 1212.69 L1144.36 1212.69 L1144.94 1212.69 L1145.53 1212.69 L1146.12 1212.69 L1146.7 1212.69 L1147.29 1212.69 L1147.88 1212.69 L1148.46 1212.69 L1149.05 1212.69 L1149.63 1212.69 L1150.22 1212.69 L1150.81 1212.69 L1151.39 1212.69 L1151.98 1212.69 L1152.57 1212.69 L1153.15 1212.69 L1153.74 1212.69 L1154.33 1212.69 L1154.91 1212.69 L1155.5 1212.69 L1156.09 1212.69 L1156.67 1212.69 L1157.26 1212.69 L1157.84 1212.69 L1158.43 1212.69 L1159.02 1212.69 L1159.6 1212.69 L1160.19 1212.69 L1160.78 1212.69 L1161.36 1212.69 L1161.95 1212.69 L1162.54 1212.69 L1163.12 1212.69 L1163.71 1212.69 L1164.29 1212.69 L1164.88 1212.69 L1165.47 1212.69 L1166.05 1212.69 L1166.64 1212.69 L1167.23 1212.69 L1167.81 1212.69 L1168.4 1212.69 L1168.99 1212.69 L1169.57 1212.69 L1170.16 1212.69 L1170.75 1212.69 L1171.33 1212.69 L1171.92 1212.69 L1172.5 1212.69 L1173.09 1212.69 L1173.68 1212.69 L1174.26 1212.69 L1174.85 1212.69 L1175.44 1212.69 L1176.02 1212.69 L1176.61 1212.69 L1177.2 1212.69 L1177.78 1212.69 L1178.37 1212.69 L1178.96 1212.69 L1179.54 1212.69 L1180.13 1212.69 L1180.71 1212.69 L1181.3 1212.69 L1181.89 1212.69 L1182.47 1212.69 L1183.06 1212.69 L1183.65 1212.69 L1184.23 1212.69 L1184.82 1212.69 L1185.41 1212.69 L1185.99 1212.69 L1186.58 1212.69 L1187.16 1212.69 L1187.75 1212.69 L1188.34 1212.69 L1188.92 1212.69 L1189.51 1212.69 L1190.1 1212.69 L1190.68 1212.69 L1191.27 1212.69 L1191.86 1212.69 L1192.44 1212.69 L1193.03 1212.69 L1193.62 1212.69 L1194.2 1212.69 L1194.79 1212.69 L1195.37 1212.69 L1195.96 1212.69 L1196.55 1212.69 L1197.13 1212.69 L1197.72 1212.69 L1198.31 1212.69 L1198.89 1212.69 L1199.48 1212.69 L1200.07 1212.69 L1200.65 1212.69 L1201.24 1212.69 L1201.83 1212.69 L1202.41 1212.69 L1203 1212.69 L1203.58 1212.69 L1204.17 1212.69 L1204.76 1212.69 L1205.34 1212.69 L1205.93 1212.69 L1206.52 1212.69 L1207.1 1212.69 L1207.69 1212.69 L1208.28 1212.69 L1208.86 1212.69 L1209.45 1212.69 L1210.03 1212.69 L1210.62 1212.69 L1211.21 1212.69 L1211.79 1212.69 L1212.38 1212.69 L1212.97 1212.69 L1213.55 1212.69 L1214.14 1212.69 L1214.73 1212.69 L1215.31 1212.69 L1215.9 1212.69 L1216.49 1212.69 L1217.07 1212.69 L1217.66 1212.69 L1218.24 1212.69 L1218.83 1212.69 L1219.42 1212.69 L1220 1212.69 L1220.59 1212.69 L1221.18 1212.69 L1221.76 1212.69 L1222.35 1212.69 L1222.94 1212.69 L1223.52 1212.69 L1224.11 1212.69 L1224.7 1212.69 L1225.28 1212.69 L1225.87 1212.69 L1226.45 1212.69 L1227.04 1212.69 L1227.63 1212.69 L1228.21 1212.69 L1228.8 1212.69 L1229.39 1212.69 L1229.97 1212.69 L1230.56 1212.69 L1231.15 1212.69 L1231.73 1212.69 L1232.32 1212.69 L1232.91 1212.69 L1233.49 1212.69 L1234.08 1212.69 L1234.66 1212.69 L1235.25 1212.69 L1235.84 1212.69 L1236.42 1212.69 L1237.01 1212.69 L1237.6 1212.69 L1238.18 1212.69 L1238.77 1212.69 L1239.36 1212.69 L1239.94 1212.69 L1240.53 1212.69 L1241.11 1212.69 L1241.7 1212.69 L1242.29 1212.69 L1242.87 1212.69 L1243.46 1212.69 L1244.05 1212.69 L1244.63 1212.69 L1245.22 1212.69 L1245.81 1212.69 L1246.39 1212.69 L1246.98 1212.69 L1247.57 1212.69 L1248.15 1212.69 L1248.74 1212.69 L1249.32 1212.69 L1249.91 1212.69 L1250.5 1212.69 L1251.08 1212.69 L1251.67 1212.69 L1252.26 1212.69 L1252.84 1212.69 L1253.43 1212.69 L1254.02 1212.69 L1254.6 1212.69 L1255.19 1212.69 L1255.78 1212.69 L1256.36 1212.69 L1256.95 1212.69 L1257.53 1212.69 L1258.12 1212.69 L1258.71 1212.69 L1259.29 1212.69 L1259.88 1212.69 L1260.47 1212.69 L1261.05 1212.69 L1261.64 1212.69 L1262.23 1212.69 L1262.81 1212.69 L1263.4 1212.69 L1263.98 1212.69 L1264.57 1212.69 L1265.16 1212.69 L1265.74 1212.69 L1266.33 1212.69 L1266.92 1212.69 L1267.5 1212.69 L1268.09 1212.69 L1268.68 1212.69 L1269.26 1212.69 L1269.85 1212.69 L1270.44 1212.69 L1271.02 1212.69 L1271.61 1212.69 L1272.19 1212.69 L1272.78 1212.69 L1273.37 1212.69 L1273.95 1212.69 L1274.54 1212.69 L1275.13 1212.69 L1275.71 1212.69 L1276.3 1212.69 L1276.89 1212.69 L1277.47 1212.69 L1278.06 1212.69 L1278.65 1212.69 L1279.23 1212.69 L1279.82 1212.69 L1280.4 1212.69 L1280.99 1212.69 L1281.58 1212.69 L1282.16 1212.69 L1282.75 1212.69 L1283.34 1212.69 L1283.92 1212.69 L1284.51 1212.69 L1285.1 1212.69 L1285.68 1212.69 L1286.27 1212.69 L1286.86 1212.69 L1287.44 1212.69 L1288.03 1212.69 L1288.61 1212.69 L1289.2 1212.69 L1289.79 1212.69 L1290.37 1212.69 L1290.96 1212.69 L1291.55 1212.69 L1292.13 1212.69 L1292.72 1212.69 L1293.31 1212.69 L1293.89 1212.69 L1294.48 1212.69 L1295.06 1212.69 L1295.65 1212.69 L1296.24 1212.69 L1296.82 1212.69 L1297.41 1212.69 L1298 1212.69 L1298.58 1212.69 L1299.17 1212.69 L1299.76 1212.69 L1300.34 1212.69 L1300.93 1212.69 L1301.52 1212.69 L1302.1 1212.69 L1302.69 1212.69 L1303.27 1212.69 L1303.86 1212.69 L1304.45 1212.69 L1305.03 1212.69 L1305.62 1212.69 L1306.21 1212.69 L1306.79 1212.69 L1307.38 1212.69 L1307.97 1212.69 L1308.55 1212.69 L1309.14 1212.69 L1309.73 1212.69 L1310.31 1212.69 L1310.9 1212.69 L1311.48 1212.69 L1312.07 1212.69 L1312.66 1212.69 L1313.24 1212.69 L1313.83 1212.69 L1314.42 1212.69 L1315 1212.69 L1315.59 1212.69 L1316.18 1212.69 L1316.76 1212.69 L1317.35 1212.69 L1317.93 1212.69 L1318.52 1212.69 L1319.11 1212.69 L1319.69 1212.69 L1320.28 1212.69 L1320.87 1212.69 L1321.45 1212.69 L1322.04 1212.69 L1322.63 1212.69 L1323.21 1212.69 L1323.8 1212.69 L1324.39 1212.69 L1324.97 1212.69 L1325.56 1212.69 L1326.14 1212.69 L1326.73 1212.69 L1327.32 1212.69 L1327.9 1212.69 L1328.49 1212.69 L1329.08 1212.69 L1329.66 1212.69 L1330.25 1212.69 L1330.84 1212.69 L1331.42 1212.69 L1332.01 1212.69 L1332.6 1212.69 L1333.18 1212.69 L1333.77 1212.69 L1334.35 1212.69 L1334.94 1212.69 L1335.53 1212.69 L1336.11 1212.69 L1336.7 1212.69 L1337.29 1212.69 L1337.87 1212.69 L1338.46 1212.69 L1339.05 1212.69 L1339.63 1212.69 L1340.22 1212.69 L1340.8 1212.69 L1341.39 1212.69 L1341.98 1212.69 L1342.56 1212.69 L1343.15 1212.69 L1343.74 1212.69 L1344.32 1212.69 L1344.91 1212.69 L1345.5 1212.69 L1346.08 1212.69 L1346.67 1212.69 L1347.26 1212.69 L1347.84 1212.69 L1348.43 1212.69 L1349.01 1212.69 L1349.6 1212.69 L1350.19 1212.69 L1350.77 1212.69 L1351.36 1212.69 L1351.95 1212.69 L1352.53 1212.69 L1353.12 1212.69 L1353.71 1212.69 L1354.29 1212.69 L1354.88 1212.69 L1355.47 1212.69 L1356.05 1212.69 L1356.64 1212.69 L1357.22 1212.69 L1357.81 1212.69 L1358.4 1212.69 L1358.98 1212.69 L1359.57 1212.69 L1360.16 1212.69 L1360.74 1212.69 L1361.33 1212.69 L1361.92 1212.69 L1362.5 1212.69 L1363.09 1212.69 L1363.68 1212.69 L1364.26 1212.69 L1364.85 1212.69 L1365.43 1212.69 L1366.02 1212.69 L1366.61 1212.69 L1367.19 1212.69 L1367.78 1212.69 L1368.37 1212.69 L1368.95 1212.69 L1369.54 1212.69 L1370.13 1212.69 L1370.71 1212.69 L1371.3 1212.69 L1371.88 1212.69 L1372.47 1212.69 L1373.06 1212.69 L1373.64 1212.69 L1374.23 1212.69 L1374.82 1212.69 L1375.4 1212.69 L1375.99 1212.69 L1376.58 1212.69 L1377.16 1212.69 L1377.75 1212.69 L1378.34 1212.69 L1378.92 1212.69 L1379.51 1212.69 L1380.09 1212.69 L1380.68 1212.69 L1381.27 1212.69 L1381.85 1212.69 L1382.44 1212.69 L1383.03 1212.69 L1383.61 1212.69 L1384.2 1212.69 L1384.79 1212.69 L1385.37 1212.69 L1385.96 1212.69 L1386.55 1212.69 L1387.13 1212.69 L1387.72 1212.69 L1388.3 1212.69 L1388.89 1212.69 L1389.48 1212.69 L1390.06 1212.69 L1390.65 1212.69 L1391.24 1212.69 L1391.82 1212.69 L1392.41 1212.69 L1393 1212.69 L1393.58 1212.69 L1394.17 1212.69 L1394.75 1212.69 L1395.34 1212.69 L1395.93 1212.69 L1396.51 1212.69 L1397.1 1212.69 L1397.69 1212.69 L1398.27 1212.69 L1398.86 1212.69 L1399.45 1212.69 L1400.03 1212.69 L1400.62 1212.69 L1401.21 1212.69 L1401.79 1212.69 L1402.38 1212.69 L1402.96 1212.69 L1403.55 1212.69 L1404.14 1212.69 L1404.72 1212.69 L1405.31 1212.69 L1405.9 1212.69 L1406.48 1212.69 L1407.07 1212.69 L1407.66 1212.69 L1408.24 1212.69 L1408.83 1212.69 L1409.42 1212.69 L1410 1212.69 L1410.59 1212.69 L1411.17 1212.69 L1411.76 1212.69 L1412.35 1212.69 L1412.93 1212.69 L1413.52 1212.69 L1414.11 1212.69 L1414.69 1212.69 L1415.28 1212.69 L1415.87 1212.69 L1416.45 1212.69 L1417.04 1212.69 L1417.63 1212.69 L1418.21 1212.69 L1418.8 1212.69 L1419.38 1212.69 L1419.97 1212.69 L1420.56 1212.69 L1421.14 1212.69 L1421.73 1212.69 L1422.32 1212.69 L1422.9 1212.69 L1423.49 1212.69 L1424.08 1212.69 L1424.66 1212.69 L1425.25 1212.69 L1425.83 1212.69 L1426.42 1212.69 L1427.01 1212.69 L1427.59 1212.69 L1428.18 1212.69 L1428.77 1212.69 L1429.35 1212.69 L1429.94 1212.69 L1430.53 1212.69 L1431.11 1212.69 L1431.7 1212.69 L1432.29 1212.69 L1432.87 1212.69 L1433.46 1212.69 L1434.04 1212.69 L1434.63 1212.69 L1435.22 1212.69 L1435.8 1212.69 L1436.39 1212.69 L1436.98 1212.69 L1437.56 1212.69 L1438.15 1212.69 L1438.74 1212.69 L1439.32 1212.69 L1439.91 1212.69 L1440.5 1212.69 L1441.08 1212.69 L1441.67 1212.69 L1442.25 1212.69 L1442.84 1212.69 L1443.43 1212.69 L1444.01 1212.69 L1444.6 1212.69 L1445.19 1212.69 L1445.77 1212.69 L1446.36 1212.69 L1446.95 1212.69 L1447.53 1212.69 L1448.12 1212.69 L1448.7 1212.69 L1449.29 1212.69 L1449.88 1212.69 L1450.46 1212.69 L1451.05 1212.69 L1451.64 1212.69 L1452.22 1212.69 L1452.81 1212.69 L1453.4 1212.69 L1453.98 1212.69 L1454.57 1212.69 L1455.16 1212.69 L1455.74 1212.69 L1456.33 1212.69 L1456.91 1212.69 L1457.5 1212.69 L1458.09 1212.69 L1458.67 1212.69 L1459.26 1212.69 L1459.85 1212.69 L1460.43 1212.69 L1461.02 1212.69 L1461.61 1212.69 L1462.19 1212.69 L1462.78 1212.69 L1463.37 1212.69 L1463.95 1212.69 L1464.54 1212.69 L1465.12 1212.69 L1465.71 1212.69 L1466.3 1212.69 L1466.88 1212.69 L1467.47 1212.69 L1468.06 1212.69 L1468.64 1212.69 L1469.23 1212.69 L1469.82 1212.69 L1470.4 1212.69 L1470.99 1212.69 L1471.57 1212.69 L1472.16 1212.69 L1472.75 1212.69 L1473.33 1212.69 L1473.92 1212.69 L1474.51 1212.69 L1475.09 1212.69 L1475.68 1212.69 L1476.27 1212.69 L1476.85 1212.69 L1477.44 1212.69 L1478.03 1212.69 L1478.61 1212.69 L1479.2 1212.69 L1479.78 1212.69 L1480.37 1212.69 L1480.96 1212.69 L1481.54 1212.69 L1482.13 1212.69 L1482.72 1212.69 L1483.3 1212.69 L1483.89 1212.69 L1484.48 1212.69 L1485.06 1212.69 L1485.65 1212.69 L1486.24 1212.69 L1486.82 1212.69 L1487.41 1212.69 L1487.99 1212.69 L1488.58 1212.69 L1489.17 1212.69 L1489.75 1212.69 L1490.34 1212.69 L1490.93 1212.69 L1491.51 1212.69 L1492.1 1212.69 L1492.69 1212.69 L1493.27 1212.69 L1493.86 1212.69 L1494.45 1212.69 L1495.03 1212.69 L1495.62 1212.69 L1496.2 1212.69 L1496.79 1212.69 L1497.38 1212.69 L1497.96 1212.69 L1498.55 1212.69 L1499.14 1212.69 L1499.72 1212.69 L1500.31 1212.69 L1500.9 1212.69 L1501.48 1212.69 L1502.07 1212.69 L1502.65 1212.69 L1503.24 1212.69 L1503.83 1212.69 L1504.41 1212.69 L1505 1212.69 L1505.59 1212.69 L1506.17 1212.69 L1506.76 1212.69 L1507.35 1212.69 L1507.93 1212.69 L1508.52 1212.69 L1509.11 1212.69 L1509.69 1212.69 L1510.28 1212.69 L1510.86 1212.69 L1511.45 1212.69 L1512.04 1212.69 L1512.62 1212.69 L1513.21 1212.69 L1513.8 1212.69 L1514.38 1212.69 L1514.97 1212.69 L1515.56 1212.69 L1516.14 1212.69 L1516.73 1212.69 L1517.32 1212.69 L1517.9 1212.69 L1518.49 1212.69 L1519.07 1212.69 L1519.66 1212.69 L1520.25 1212.69 L1520.83 1212.69 L1521.42 1212.69 L1522.01 1212.69 L1522.59 1212.69 L1523.18 1212.69 L1523.77 1212.69 L1524.35 1212.69 L1524.94 1212.69 L1525.52 1212.69 L1526.11 1212.69 L1526.7 1212.69 L1527.28 1212.69 L1527.87 1212.69 L1528.46 1212.69 L1529.04 1212.69 L1529.63 1212.69 L1530.22 1212.69 L1530.8 1212.69 L1531.39 1212.69 L1531.98 1212.69 L1532.56 1212.69 L1533.15 1212.69 L1533.73 1212.69 L1534.32 1212.69 L1534.91 1212.69 L1535.49 1212.69 L1536.08 1212.69 L1536.67 1212.69 L1537.25 1212.69 L1537.84 1212.69 L1538.43 1212.69 L1539.01 1212.69 L1539.6 1212.69 L1540.19 1212.69 L1540.77 1212.69 L1541.36 1212.69 L1541.94 1212.69 L1542.53 1212.69 L1543.12 1212.69 L1543.7 1212.69 L1544.29 1212.69 L1544.88 1212.69 L1545.46 1212.69 L1546.05 1212.69 L1546.64 1212.69 L1547.22 1212.69 L1547.81 1212.69 L1548.4 1212.69 L1548.98 1212.69 L1549.57 1212.69 L1550.15 1212.69 L1550.74 1212.69 L1551.33 1212.69 L1551.91 1212.69 L1552.5 1212.69 L1553.09 1212.69 L1553.67 1212.69 L1554.26 1212.69 L1554.85 1212.69 L1555.43 1212.69 L1556.02 1212.69 L1556.6 1212.69 L1557.19 1212.69 L1557.78 1212.69 L1558.36 1212.69 L1558.95 1212.69 L1559.54 1212.69 L1560.12 1212.69 L1560.71 1212.69 L1561.3 1212.69 L1561.88 1212.69 L1562.47 1212.69 L1563.06 1212.69 L1563.64 1212.69 L1564.23 1212.69 L1564.81 1212.69 L1565.4 1212.69 L1565.99 1212.69 L1566.57 1212.69 L1567.16 1212.69 L1567.75 1212.69 L1568.33 1212.69 L1568.92 1212.69 L1569.51 1212.69 L1570.09 1212.69 L1570.68 1212.69 L1571.27 1212.69 L1571.85 1212.69 L1572.44 1212.69 L1573.02 1212.69 L1573.61 1212.69 L1574.2 1212.69 L1574.78 1212.69 L1575.37 1212.69 L1575.96 1212.69 L1576.54 1212.69 L1577.13 1212.69 L1577.72 1212.69 L1578.3 1212.69 L1578.89 1212.69 L1579.47 1212.69 L1580.06 1212.69 L1580.65 1212.69 L1581.23 1212.69 L1581.82 1212.69 L1582.41 1212.69 L1582.99 1212.69 L1583.58 1212.69 L1584.17 1212.69 L1584.75 1212.69 L1585.34 1212.69 L1585.93 1212.69 L1586.51 1212.69 L1587.1 1212.69 L1587.68 1212.69 L1588.27 1212.69 L1588.86 1212.69 L1589.44 1212.69 L1590.03 1212.69 L1590.62 1212.69 L1591.2 1212.69 L1591.79 1212.69 L1592.38 1212.69 L1592.96 1212.69 L1593.55 1212.69 L1594.14 1212.69 L1594.72 1212.69 L1595.31 1212.69 L1595.89 1212.69 L1596.48 1212.69 L1597.07 1212.69 L1597.65 1212.69 L1598.24 1212.69 L1598.83 1212.69 L1599.41 1212.69 L1600 1212.69 L1600.59 1212.69 L1601.17 1212.69 L1601.76 1212.69 L1602.34 1212.69 L1602.93 1212.69 L1603.52 1212.69 L1604.1 1212.69 L1604.69 1212.69 L1605.28 1212.69 L1605.86 1212.69 L1606.45 1212.69 L1607.04 1212.69 L1607.62 1212.69 L1608.21 1212.69 L1608.8 1212.69 L1609.38 1212.69 L1609.97 1212.69 L1610.55 1212.69 L1611.14 1212.69 L1611.73 1212.69 L1612.31 1212.69 L1612.9 1212.69 L1613.49 1212.69 L1614.07 1212.69 L1614.66 1212.69 L1615.25 1212.69 L1615.83 1212.69 L1616.42 1212.69 L1617.01 1212.69 L1617.59 1212.69 L1618.18 1212.69 L1618.76 1212.69 L1619.35 1212.69 L1619.94 1212.69 L1620.52 1212.69 L1621.11 1212.69 L1621.7 1212.69 L1622.28 1212.69 L1622.87 1212.69 L1623.46 1212.69 L1624.04 1212.69 L1624.63 1212.69 L1625.22 1212.69 L1625.8 1212.69 L1626.39 1212.69 L1626.97 1212.69 L1627.56 1212.69 L1628.15 1212.69 L1628.73 1212.69 L1629.32 1212.69 L1629.91 1212.69 L1630.49 1212.69 L1631.08 1212.69 L1631.67 1212.69 L1632.25 1212.69 L1632.84 1212.69 L1633.42 1212.69 L1634.01 1212.69 L1634.6 1212.69 L1635.18 1212.69 L1635.77 1212.69 L1636.36 1212.69 L1636.94 1212.69 L1637.53 1212.69 L1638.12 1212.69 L1638.7 1212.69 L1639.29 1212.69 L1639.88 1212.69 L1640.46 1212.69 L1641.05 1212.69 L1641.63 1212.69 L1642.22 1212.69 L1642.81 1212.69 L1643.39 1212.69 L1643.98 1212.69 L1644.57 1212.69 L1645.15 1212.69 L1645.74 1212.69 L1646.33 1212.69 L1646.91 1212.69 L1647.5 1212.69 L1648.09 1212.69 L1648.67 1212.69 L1649.26 1212.69 L1649.84 1212.69 L1650.43 1212.69 L1651.02 1212.69 L1651.6 1212.69 L1652.19 1212.69 L1652.78 1212.69 L1653.36 1212.69 L1653.95 1212.69 L1654.54 1212.69 L1655.12 1212.69 L1655.71 1212.69 L1656.29 1212.69 L1656.88 1212.69 L1657.47 1212.69 L1658.05 1212.69 L1658.64 1212.69 L1659.23 1212.69 L1659.81 1212.69 L1660.4 1212.69 L1660.99 1212.69 L1661.57 1212.69 L1662.16 1212.69 L1662.75 1212.69 L1663.33 1212.69 L1663.92 1212.69 L1664.5 1212.69 L1665.09 1212.69 L1665.68 1212.69 L1666.26 1212.69 L1666.85 1212.69 L1667.44 1212.69 L1668.02 1212.69 L1668.61 1212.69 L1669.2 1212.69 L1669.78 1212.69 L1670.37 1212.69 L1670.96 1212.69 L1671.54 1212.69 L1672.13 1212.69 L1672.71 1212.69 L1673.3 1212.69 L1673.89 1212.69 L1674.47 1212.69 L1675.06 1212.69 L1675.65 1212.69 L1676.23 1212.69 L1676.82 1212.69 L1677.41 1212.69 L1677.99 1212.69 L1678.58 1212.69 L1679.17 1212.69 L1679.75 1212.69 L1680.34 1212.69 L1680.92 1212.69 L1681.51 1212.69 L1682.1 1212.69 L1682.68 1212.69 L1683.27 1212.69 L1683.86 1212.69 L1684.44 1212.69 L1685.03 1212.69 L1685.62 1212.69 L1686.2 1212.69 L1686.79 1212.69 L1687.37 1212.69 L1687.96 1212.69 L1688.55 1212.69 L1689.13 1212.69 L1689.72 1212.69 L1690.31 1212.69 L1690.89 1212.69 L1691.48 1212.69 L1692.07 1212.69 L1692.65 1212.69 L1693.24 1212.69 L1693.83 1212.69 L1694.41 1212.69 L1695 1212.69 L1695.58 1212.69 L1696.17 1212.69 L1696.76 1212.69 L1697.34 1212.69 L1697.93 1212.69 L1698.52 1212.69 L1699.1 1212.69 L1699.69 1212.69 L1700.28 1212.69 L1700.86 1212.69 L1701.45 1212.69 L1702.04 1212.69 L1702.62 1212.69 L1703.21 1212.69 L1703.79 1212.69 L1704.38 1212.69 L1704.97 1212.69 L1705.55 1212.69 L1706.14 1212.69 L1706.73 1212.69 L1707.31 1212.69 L1707.9 1212.69 L1708.49 1212.69 L1709.07 1212.69 L1709.66 1212.69 L1710.24 1212.69 L1710.83 1212.69 L1711.42 1212.69 L1712 1212.69 L1712.59 1212.69 L1713.18 1212.69 L1713.76 1212.69 L1714.35 1212.69 L1714.94 1212.69 L1715.52 1212.69 L1716.11 1212.69 L1716.7 1212.69 L1717.28 1212.69 L1717.87 1212.69 L1718.45 1212.69 L1719.04 1212.69 L1719.63 1212.69 L1720.21 1212.69 L1720.8 1212.69 L1721.39 1212.69 L1721.97 1212.69 L1722.56 1212.69 L1723.15 1212.69 L1723.73 1212.69 L1724.32 1212.69 L1724.91 1212.69 L1725.49 1212.69 L1726.08 1212.69 L1726.66 1212.69 L1727.25 1212.69 L1727.84 1212.69 L1728.42 1212.69 L1729.01 1212.69 L1729.6 1212.69 L1730.18 1212.69 L1730.77 1212.69 L1731.36 1212.69 L1731.94 1212.69 L1732.53 1212.69 L1733.11 1212.69 L1733.7 1212.69 L1734.29 1212.69 L1734.87 1212.69 L1735.46 1212.69 L1736.05 1212.69 L1736.63 1212.69 L1737.22 1212.69 L1737.81 1212.69 L1738.39 1212.69 L1738.98 1212.69 L1739.57 1212.69 L1740.15 1212.69 L1740.74 1212.69 L1741.32 1212.69 L1741.91 1212.69 L1742.5 1212.69 L1743.08 1212.69 L1743.67 1212.69 L1744.26 1212.69 L1744.84 1212.69 L1745.43 1212.69 L1746.02 1212.69 L1746.6 1212.69 L1747.19 1212.69 L1747.78 1212.69 L1748.36 1212.69 L1748.95 1212.69 L1749.53 1212.69 L1750.12 1212.69 L1750.71 1212.69 L1751.29 1212.69 L1751.88 1212.69 L1752.47 1212.69 L1753.05 1212.69 L1753.64 1212.69 L1754.23 1212.69 L1754.81 1212.69 L1755.4 1212.69 L1755.99 1212.69 L1756.57 1212.69 L1757.16 1212.69 L1757.74 1212.69 L1758.33 1212.69 L1758.92 1212.69 L1759.5 1212.69 L1760.09 1212.69 L1760.68 1212.69 L1761.26 1212.69 L1761.85 1212.69 L1762.44 1212.69 L1763.02 1212.69 L1763.61 1212.69 L1764.19 1212.69 L1764.78 1212.69 L1765.37 1212.69 L1765.95 1212.69 L1766.54 1212.69 L1767.13 1212.69 L1767.71 1212.69 L1768.3 1212.69 L1768.89 1212.69 L1769.47 1212.69 L1770.06 1212.69 L1770.65 1212.69 L1771.23 1212.69 L1771.82 1212.69 L1772.4 1212.69 L1772.99 1212.69 L1773.58 1212.69 L1774.16 1212.69 L1774.75 1212.69 L1775.34 1212.69 L1775.92 1212.69 L1776.51 1212.69 L1777.1 1212.69 L1777.68 1212.69 L1778.27 1212.69 L1778.86 1212.69 L1779.44 1212.69 L1780.03 1212.69 L1780.61 1212.69 L1781.2 1212.69 L1781.79 1212.69 L1782.37 1212.69 L1782.96 1212.69 L1783.55 1212.69 L1784.13 1212.69 L1784.72 1212.69 L1785.31 1212.69 L1785.89 1212.69 L1786.48 1212.69 L1787.06 1212.69 L1787.65 1212.69 L1788.24 1212.69 L1788.82 1212.69 L1789.41 1212.69 L1790 1212.69 L1790.58 1212.69 L1791.17 1212.69 L1791.76 1212.69 L1792.34 1212.69 L1792.93 1212.69 L1793.52 1212.69 L1794.1 1212.69 L1794.69 1212.69 L1795.27 1212.69 L1795.86 1212.69 L1796.45 1212.69 L1797.03 1212.69 L1797.62 1212.69 L1798.21 1212.69 L1798.79 1212.69 L1799.38 1212.69 L1799.97 1212.69 L1800.55 1212.69 L1801.14 1212.69 L1801.73 1212.69 L1802.31 1212.69 L1802.9 1212.69 L1803.48 1212.69 L1804.07 1212.69 L1804.66 1212.69 L1805.24 1212.69 L1805.83 1212.69 L1806.42 1212.69 L1807 1212.69 L1807.59 1212.69 L1808.18 1212.69 L1808.76 1212.69 L1809.35 1212.69 L1809.94 1212.69 L1810.52 1212.69 L1811.11 1212.69 L1811.69 1212.69 L1812.28 1212.69 L1812.87 1212.69 L1813.45 1212.69 L1814.04 1212.69 L1814.63 1212.69 L1815.21 1212.69 L1815.8 1212.69 L1816.39 1212.69 L1816.97 1212.69 L1817.56 1212.69 L1818.14 1212.69 L1818.73 1212.69 L1819.32 1212.69 L1819.9 1212.69 L1820.49 1212.69 L1821.08 1212.69 L1821.66 1212.69 L1822.25 1212.69 L1822.84 1212.69 L1823.42 1212.69 L1824.01 1212.69 L1824.6 1212.69 L1825.18 1212.69 L1825.77 1212.69 L1826.35 1212.69 L1826.94 1212.69 L1827.53 1212.69 L1828.11 1212.69 L1828.7 1212.69 L1829.29 1212.69 L1829.87 1212.69 L1830.46 1212.69 L1831.05 1212.69 L1831.63 1212.69 L1832.22 1212.69 L1832.81 1212.69 L1833.39 1212.69 L1833.98 1212.69 L1834.56 1212.69 L1835.15 1212.69 L1835.74 1212.69 L1836.32 1212.69 L1836.91 1212.69 L1837.5 1212.69 L1838.08 1212.69 L1838.67 1212.69 L1839.26 1212.69 L1839.84 1212.69 L1840.43 1212.69 L1841.01 1212.69 L1841.6 1212.69 L1842.19 1212.69 L1842.77 1212.69 L1843.36 1212.69 L1843.95 1212.69 L1844.53 1212.69 L1845.12 1212.69 L1845.71 1212.69 L1846.29 1212.69 L1846.88 1212.69 L1847.47 1212.69 L1848.05 1212.69 L1848.64 1212.69 L1849.22 1212.69 L1849.81 1212.69 L1850.4 1212.69 L1850.98 1212.69 L1851.57 1212.69 L1852.16 1212.69 L1852.74 1212.69 L1853.33 1212.69 L1853.92 1212.69 L1854.5 1212.69 L1855.09 1212.69 L1855.68 1212.69 L1856.26 1212.69 L1856.85 1212.69 L1857.43 1212.69 L1858.02 1212.69 L1858.61 1212.69 L1859.19 1212.69 L1859.78 1212.69 L1860.37 1212.69 L1860.95 1212.69 L1861.54 1212.69 L1862.13 1212.69 L1862.71 1212.69 L1863.3 1212.69 L1863.88 1212.69 L1864.47 1212.69 L1865.06 1212.69 L1865.64 1212.69 L1866.23 1212.69 L1866.82 1212.69 L1867.4 1212.69 L1867.99 1212.69 L1868.58 1212.69 L1869.16 1212.69 L1869.75 1212.69 L1870.34 1212.69 L1870.92 1212.69 L1871.51 1212.69 L1872.09 1212.69 L1872.68 1212.69 L1873.27 1212.69 L1873.85 1212.69 L1874.44 1212.69 L1875.03 1212.69 L1875.61 1212.69 L1876.2 1212.69 L1876.79 1212.69 L1877.37 1212.69 L1877.96 1212.69 L1878.55 1212.69 L1879.13 1212.69 L1879.72 1212.69 L1880.3 1212.69 L1880.89 1212.69 L1881.48 1212.69 L1882.06 1212.69 L1882.65 1212.69 L1883.24 1212.69 L1883.82 1212.69 L1884.41 1212.69 L1885 1212.69 L1885.58 1212.69 L1886.17 1212.69 L1886.76 1212.69 L1887.34 1212.69 L1887.93 1212.69 L1888.51 1212.69 L1889.1 1212.69 L1889.69 1212.69 L1890.27 1212.69 L1890.86 1212.69 L1891.45 1212.69 L1892.03 1212.69 L1892.62 1212.69 L1893.21 1212.69 L1893.79 1212.69 L1894.38 1212.69 L1894.96 1212.69 L1895.55 1212.69 L1896.14 1212.69 L1896.72 1212.69 L1897.31 1212.69 L1897.9 1212.69 L1898.48 1212.69 L1899.07 1212.69 L1899.66 1212.69 L1900.24 1212.69 L1900.83 1212.69 L1901.42 1212.69 L1902 1212.69 L1902.59 1212.69 L1903.17 1212.69 L1903.76 1212.69 L1904.35 1212.69 L1904.93 1212.69 L1905.52 1212.69 L1906.11 1212.69 L1906.69 1212.69 L1907.28 1212.69 L1907.87 1212.69 L1908.45 1212.69 L1909.04 1212.69 L1909.63 1212.69 L1910.21 1212.69 L1910.8 1212.69 L1911.38 1212.69 L1911.97 1212.69 L1912.56 1212.69 L1913.14 1212.69 L1913.73 1212.69 L1914.32 1212.69 L1914.9 1212.69 L1915.49 1212.69 L1916.08 1212.69 L1916.66 1212.69 L1917.25 1212.69 L1917.83 1212.69 L1918.42 1212.69 L1919.01 1212.69 L1919.59 1212.69 L1920.18 1212.69 L1920.77 1212.69 L1921.35 1212.69 L1921.94 1212.69 L1922.53 1212.69 L1923.11 1212.69 L1923.7 1212.69 L1924.29 1212.69 L1924.87 1212.69 L1925.46 1212.69 L1926.04 1212.69 L1926.63 1212.69 L1927.22 1212.69 L1927.8 1212.69 L1928.39 1212.69 L1928.98 1212.69 L1929.56 1212.69 L1930.15 1212.69 L1930.74 1212.69 L1931.32 1212.69 L1931.91 1212.69 L1932.5 1212.69 L1933.08 1212.69 L1933.67 1212.69 L1934.25 1212.69 L1934.84 1212.69 L1935.43 1212.69 L1936.01 1212.69 L1936.6 1212.69 L1937.19 1212.69 L1937.77 1212.69 L1938.36 1212.69 L1938.95 1212.69 L1939.53 1212.69 L1940.12 1212.69 L1940.71 1212.69 L1941.29 1212.69 L1941.88 1212.69 L1942.46 1212.69 L1943.05 1212.69 L1943.64 1212.69 L1944.22 1212.69 L1944.81 1212.69 L1945.4 1212.69 L1945.98 1212.69 L1946.57 1212.69 L1947.16 1212.69 L1947.74 1212.69 L1948.33 1212.69 L1948.91 1212.69 L1949.5 1212.69 L1950.09 1212.69 L1950.67 1212.69 L1951.26 1212.69 L1951.85 1212.69 L1952.43 1212.69 L1953.02 1212.69 L1953.61 1212.69 L1954.19 1212.69 L1954.78 1212.69 L1955.37 1212.69 L1955.95 1212.69 L1956.54 1212.69 L1957.12 1212.69 L1957.71 1212.69 L1958.3 1212.69 L1958.88 1212.69 L1959.47 1212.69 L1960.06 1212.69 L1960.64 1212.69 L1961.23 1212.69 L1961.82 1212.69 L1962.4 1212.69 L1962.99 1212.69 L1963.58 1212.69 L1964.16 1212.69 L1964.75 1212.69 L1965.33 1212.69 L1965.92 1212.69 L1966.51 1212.69 L1967.09 1212.69 L1967.68 1212.69 L1968.27 1212.69 L1968.85 1212.69 L1969.44 1212.69 L1970.03 1212.69 L1970.61 1212.69 L1971.2 1212.69 L1971.78 1212.69 L1972.37 1212.69 L1972.96 1212.69 L1973.54 1212.69 L1974.13 1212.69 L1974.72 1212.69 L1975.3 1212.69 L1975.89 1212.69 L1976.48 1212.69 L1977.06 1212.69 L1977.65 1212.69 L1978.24 1212.69 L1978.82 1212.69 L1979.41 1212.69 L1979.99 1212.69 L1980.58 1212.69 L1981.17 1212.69 L1981.75 1212.69 L1982.34 1212.69 L1982.93 1212.69 L1983.51 1212.69 L1984.1 1212.69 L1984.69 1212.69 L1985.27 1212.69 L1985.86 1212.69 L1986.45 1212.69 L1987.03 1212.69 L1987.62 1212.69 L1988.2 1212.69 L1988.79 1212.69 L1989.38 1212.69 L1989.96 1212.69 L1990.55 1212.69 L1991.14 1212.69 L1991.72 1212.69 L1992.31 1212.69 L1992.9 1212.69 L1993.48 1212.69 L1994.07 1212.69 L1994.65 1212.69 L1995.24 1212.69 L1995.83 1212.69 L1996.41 1212.69 L1997 1212.69 L1997.59 1212.69 L1998.17 1212.69 L1998.76 1212.69 L1999.35 1212.69 L1999.93 1212.69 L2000.52 1212.69 L2001.11 1212.69 L2001.69 1212.69 L2002.28 1212.69 L2002.86 1212.69 L2003.45 1212.69 L2004.04 1212.69 L2004.62 1212.69 L2005.21 1212.69 L2005.8 1212.69 L2006.38 1212.69 L2006.97 1212.69 L2007.56 1212.69 L2008.14 1212.69 L2008.73 1212.69 L2009.32 1212.69 L2009.9 1212.69 L2010.49 1212.69 L2011.07 1212.69 L2011.66 1212.69 L2012.25 1212.69 L2012.83 1212.69 L2013.42 1212.69 L2014.01 1212.69 L2014.59 1212.69 L2015.18 1212.69 L2015.77 1212.69 L2016.35 1212.69 L2016.94 1212.69 L2017.53 1212.69 L2018.11 1212.69 L2018.7 1212.69 L2019.28 1212.69 L2019.87 1212.69 L2020.46 1212.69 L2021.04 1212.69 L2021.63 1212.69 L2022.22 1212.69 L2022.8 1212.69 L2023.39 1212.69 L2023.98 1212.69 L2024.56 1212.69 L2025.15 1212.69 L2025.73 1212.69 L2026.32 1212.69 L2026.91 1212.69 L2027.49 1212.69 L2028.08 1212.69 L2028.67 1212.69 L2029.25 1212.69 L2029.84 1212.69 L2030.43 1212.69 L2031.01 1212.69 L2031.6 1212.69 L2032.19 1212.69 L2032.77 1212.69 L2033.36 1212.69 L2033.94 1212.69 L2034.53 1212.69 L2035.12 1212.69 L2035.7 1212.69 L2036.29 1212.69 L2036.88 1212.69 L2037.46 1212.69 L2038.05 1212.69 L2038.64 1212.69 L2039.22 1212.69 L2039.81 1212.69 L2040.4 1212.69 L2040.98 1212.69 L2041.57 1212.69 L2042.15 1212.69 L2042.74 1212.69 L2043.33 1212.69 L2043.91 1212.69 L2044.5 1212.69 L2045.09 1212.69 L2045.67 1212.69 L2046.26 1212.69 L2046.85 1212.69 L2047.43 1212.69 L2048.02 1212.69 L2048.6 1212.69 L2049.19 1212.69 L2049.78 1212.69 L2050.36 1212.69 L2050.95 1212.69 L2051.54 1212.69 L2052.12 1212.69 L2052.71 1212.69 L2053.3 1212.69 L2053.88 1212.69 L2054.47 1212.69 L2055.06 1212.69 L2055.64 1212.69 L2056.23 1212.69 L2056.81 1212.69 L2057.4 1212.69 L2057.99 1212.69 L2058.57 1212.69 L2059.16 1212.69 L2059.75 1212.69 L2060.33 1212.69 L2060.92 1212.69 L2061.51 1212.69 L2062.09 1212.69 L2062.68 1212.69 L2063.27 1212.69 L2063.85 1212.69 L2064.44 1212.69 L2065.02 1212.69 L2065.61 1212.69 L2066.2 1212.69 L2066.78 1212.69 L2067.37 1212.69 L2067.96 1212.69 L2068.54 1212.69 L2069.13 1212.69 L2069.72 1212.69 L2070.3 1212.69 L2070.89 1212.69 L2071.48 1212.69 L2072.06 1212.69 L2072.65 1212.69 L2073.23 1212.69 L2073.82 1212.69 L2074.41 1212.69 L2074.99 1212.69 L2075.58 1212.69 L2076.17 1212.69 L2076.75 1212.69 L2077.34 1212.69 L2077.93 1212.69 L2078.51 1212.69 L2079.1 1212.69 L2079.68 1212.69 L2080.27 1212.69 L2080.86 1212.69 L2081.44 1212.69 L2082.03 1212.69 L2082.62 1212.69 L2083.2 1212.69 L2083.79 1212.69 L2084.38 1212.69 L2084.96 1212.69 L2085.55 1212.69 L2086.14 1212.69 L2086.72 1212.69 L2087.31 1212.69 L2087.89 1212.69 L2088.48 1212.69 L2089.07 1212.69 L2089.65 1212.69 L2090.24 1212.69 L2090.83 1212.69 L2091.41 1212.69 L2092 1212.69 L2092.59 1212.69 L2093.17 1212.69 L2093.76 1212.69 L2094.35 1212.69 L2094.93 1212.69 L2095.52 1212.69 L2096.1 1212.69 L2096.69 1212.69 L2097.28 1212.69 L2097.86 1212.69 L2098.45 1212.69 L2099.04 1212.69 L2099.62 1212.69 L2100.21 1212.69 L2100.8 1212.69 L2101.38 1212.69 L2101.97 1212.69 L2102.55 1212.69 L2103.14 1212.69 L2103.73 1212.69 L2104.31 1212.69 L2104.9 1212.69 L2105.49 1212.69 L2106.07 1212.69 L2106.66 1212.69 L2107.25 1212.69 L2107.83 1212.69 L2108.42 1212.69 L2109.01 1212.69 L2109.59 1212.69 L2110.18 1212.69 L2110.76 1212.69 L2111.35 1212.69 L2111.94 1212.69 L2112.52 1212.69 L2113.11 1212.69 L2113.7 1212.69 L2114.28 1212.69 L2114.87 1212.69 L2115.46 1212.69 L2116.04 1212.69 L2116.63 1212.69 L2117.22 1212.69 L2117.8 1212.69 L2118.39 1212.69 L2118.97 1212.69 L2119.56 1212.69 L2120.15 1212.69 L2120.73 1212.69 L2121.32 1212.69 L2121.91 1212.69 L2122.49 1212.69 L2123.08 1212.69 L2123.67 1212.69 L2124.25 1212.69 L2124.84 1212.69 L2125.42 1212.69 L2126.01 1212.69 L2126.6 1212.69 L2127.18 1212.69 L2127.77 1212.69 L2128.36 1212.69 L2128.94 1212.69 L2129.53 1212.69 L2130.12 1212.69 L2130.7 1212.69 L2131.29 1212.69 L2131.88 1212.69 L2132.46 1212.69 L2133.05 1212.69 L2133.63 1212.69 L2134.22 1212.69 L2134.81 1212.69 L2135.39 1212.69 L2135.98 1212.69 L2136.57 1212.69 L2137.15 1212.69 L2137.74 1212.69 L2138.33 1212.69 L2138.91 1212.69 L2139.5 1212.69 L2140.09 1212.69 L2140.67 1212.69 L2141.26 1212.69 L2141.84 1212.69 L2142.43 1212.69 L2143.02 1212.69 L2143.6 1212.69 L2144.19 1212.69 L2144.78 1212.69 L2145.36 1212.69 L2145.95 1212.69 L2146.54 1212.69 L2147.12 1212.69 L2147.71 1212.69 L2148.3 1212.69 L2148.88 1212.69 L2149.47 1212.69 L2150.05 1212.69 L2150.64 1212.69 L2151.23 1212.69 L2151.81 1212.69 L2152.4 1212.69 L2152.99 1212.69 L2153.57 1212.69 L2154.16 1212.69 L2154.75 1212.69 L2155.33 1212.69 L2155.92 1212.69 L2156.5 1212.69 L2157.09 1212.69 L2157.68 1212.69 L2158.26 1212.69 L2158.26 1212.03 L2157.68 1212.03 L2157.09 1212.03 L2156.5 1212.03 L2155.92 1212.03 L2155.33 1212.03 L2154.75 1212.03 L2154.16 1212.03 L2153.57 1212.03 L2152.99 1212.03 L2152.4 1212.03 L2151.81 1212.03 L2151.23 1212.03 L2150.64 1212.03 L2150.05 1212.03 L2149.47 1212.03 L2148.88 1212.03 L2148.3 1212.03 L2147.71 1212.03 L2147.12 1212.03 L2146.54 1212.03 L2145.95 1212.03 L2145.36 1212.03 L2144.78 1212.03 L2144.19 1212.03 L2143.6 1212.03 L2143.02 1212.03 L2142.43 1212.03 L2141.84 1212.03 L2141.26 1212.03 L2140.67 1212.03 L2140.09 1212.03 L2139.5 1212.03 L2138.91 1212.03 L2138.33 1212.03 L2137.74 1212.03 L2137.15 1212.03 L2136.57 1212.03 L2135.98 1212.03 L2135.39 1212.03 L2134.81 1212.03 L2134.22 1212.03 L2133.63 1212.03 L2133.05 1212.03 L2132.46 1212.03 L2131.88 1212.03 L2131.29 1212.03 L2130.7 1212.03 L2130.12 1212.03 L2129.53 1212.03 L2128.94 1212.03 L2128.36 1212.03 L2127.77 1212.03 L2127.18 1212.03 L2126.6 1212.03 L2126.01 1212.03 L2125.42 1212.03 L2124.84 1212.03 L2124.25 1212.03 L2123.67 1212.03 L2123.08 1212.03 L2122.49 1212.03 L2121.91 1212.03 L2121.32 1212.03 L2120.73 1212.03 L2120.15 1212.03 L2119.56 1212.03 L2118.97 1212.03 L2118.39 1212.03 L2117.8 1212.03 L2117.22 1212.03 L2116.63 1212.03 L2116.04 1212.03 L2115.46 1212.03 L2114.87 1212.03 L2114.28 1212.03 L2113.7 1212.03 L2113.11 1212.03 L2112.52 1212.03 L2111.94 1212.03 L2111.35 1212.03 L2110.76 1212.03 L2110.18 1212.03 L2109.59 1212.03 L2109.01 1212.03 L2108.42 1212.03 L2107.83 1212.03 L2107.25 1212.03 L2106.66 1212.03 L2106.07 1212.03 L2105.49 1212.03 L2104.9 1212.03 L2104.31 1212.03 L2103.73 1212.03 L2103.14 1212.03 L2102.55 1212.03 L2101.97 1212.03 L2101.38 1212.03 L2100.8 1212.03 L2100.21 1212.03 L2099.62 1212.03 L2099.04 1212.03 L2098.45 1212.03 L2097.86 1212.03 L2097.28 1212.03 L2096.69 1212.03 L2096.1 1212.03 L2095.52 1212.03 L2094.93 1212.03 L2094.35 1212.03 L2093.76 1212.03 L2093.17 1212.03 L2092.59 1212.03 L2092 1212.03 L2091.41 1212.03 L2090.83 1212.03 L2090.24 1212.03 L2089.65 1212.03 L2089.07 1212.03 L2088.48 1212.03 L2087.89 1212.03 L2087.31 1212.03 L2086.72 1212.03 L2086.14 1212.03 L2085.55 1212.03 L2084.96 1212.03 L2084.38 1212.03 L2083.79 1212.03 L2083.2 1212.03 L2082.62 1212.03 L2082.03 1212.03 L2081.44 1212.03 L2080.86 1212.03 L2080.27 1212.03 L2079.68 1212.03 L2079.1 1212.03 L2078.51 1212.03 L2077.93 1212.03 L2077.34 1212.03 L2076.75 1212.03 L2076.17 1212.03 L2075.58 1212.03 L2074.99 1212.03 L2074.41 1212.03 L2073.82 1212.03 L2073.23 1212.03 L2072.65 1212.03 L2072.06 1212.03 L2071.48 1212.03 L2070.89 1212.03 L2070.3 1212.03 L2069.72 1212.03 L2069.13 1212.03 L2068.54 1212.03 L2067.96 1212.03 L2067.37 1212.03 L2066.78 1212.03 L2066.2 1212.03 L2065.61 1212.03 L2065.02 1212.03 L2064.44 1212.03 L2063.85 1212.03 L2063.27 1212.03 L2062.68 1212.03 L2062.09 1212.03 L2061.51 1212.03 L2060.92 1212.03 L2060.33 1212.03 L2059.75 1212.03 L2059.16 1212.03 L2058.57 1212.03 L2057.99 1212.03 L2057.4 1212.03 L2056.81 1212.03 L2056.23 1212.03 L2055.64 1212.03 L2055.06 1212.03 L2054.47 1212.03 L2053.88 1212.03 L2053.3 1212.03 L2052.71 1212.03 L2052.12 1212.03 L2051.54 1212.03 L2050.95 1212.03 L2050.36 1212.03 L2049.78 1212.03 L2049.19 1212.03 L2048.6 1212.03 L2048.02 1212.03 L2047.43 1212.03 L2046.85 1212.03 L2046.26 1212.03 L2045.67 1212.03 L2045.09 1212.03 L2044.5 1212.03 L2043.91 1212.03 L2043.33 1212.03 L2042.74 1212.03 L2042.15 1212.03 L2041.57 1212.03 L2040.98 1212.03 L2040.4 1212.03 L2039.81 1212.03 L2039.22 1212.03 L2038.64 1212.03 L2038.05 1212.03 L2037.46 1212.03 L2036.88 1212.03 L2036.29 1212.03 L2035.7 1212.03 L2035.12 1212.03 L2034.53 1212.03 L2033.94 1212.03 L2033.36 1212.03 L2032.77 1212.03 L2032.19 1212.03 L2031.6 1212.03 L2031.01 1212.03 L2030.43 1212.03 L2029.84 1212.03 L2029.25 1212.03 L2028.67 1212.03 L2028.08 1212.03 L2027.49 1212.03 L2026.91 1212.03 L2026.32 1212.03 L2025.73 1212.03 L2025.15 1212.03 L2024.56 1212.03 L2023.98 1212.03 L2023.39 1212.03 L2022.8 1212.03 L2022.22 1212.03 L2021.63 1212.03 L2021.04 1212.03 L2020.46 1212.03 L2019.87 1212.03 L2019.28 1212.03 L2018.7 1212.03 L2018.11 1212.03 L2017.53 1212.03 L2016.94 1212.03 L2016.35 1212.03 L2015.77 1212.03 L2015.18 1212.03 L2014.59 1212.03 L2014.01 1212.03 L2013.42 1212.03 L2012.83 1212.03 L2012.25 1212.03 L2011.66 1212.03 L2011.07 1212.03 L2010.49 1212.03 L2009.9 1212.03 L2009.32 1212.03 L2008.73 1212.03 L2008.14 1212.03 L2007.56 1212.03 L2006.97 1212.03 L2006.38 1212.03 L2005.8 1212.03 L2005.21 1212.03 L2004.62 1212.03 L2004.04 1212.03 L2003.45 1212.03 L2002.86 1212.03 L2002.28 1212.03 L2001.69 1212.03 L2001.11 1212.03 L2000.52 1212.03 L1999.93 1212.03 L1999.35 1212.03 L1998.76 1212.03 L1998.17 1212.03 L1997.59 1212.03 L1997 1212.03 L1996.41 1212.03 L1995.83 1212.03 L1995.24 1212.03 L1994.65 1212.03 L1994.07 1212.03 L1993.48 1212.03 L1992.9 1212.03 L1992.31 1212.03 L1991.72 1212.03 L1991.14 1212.03 L1990.55 1212.03 L1989.96 1212.03 L1989.38 1212.03 L1988.79 1212.03 L1988.2 1212.03 L1987.62 1212.03 L1987.03 1212.03 L1986.45 1212.03 L1985.86 1212.03 L1985.27 1212.03 L1984.69 1212.03 L1984.1 1212.03 L1983.51 1212.03 L1982.93 1212.03 L1982.34 1212.03 L1981.75 1212.03 L1981.17 1212.03 L1980.58 1212.03 L1979.99 1212.03 L1979.41 1212.03 L1978.82 1212.03 L1978.24 1212.03 L1977.65 1212.03 L1977.06 1212.03 L1976.48 1212.03 L1975.89 1212.03 L1975.3 1212.03 L1974.72 1212.03 L1974.13 1212.03 L1973.54 1212.03 L1972.96 1212.03 L1972.37 1212.03 L1971.78 1212.03 L1971.2 1212.03 L1970.61 1212.03 L1970.03 1212.03 L1969.44 1212.03 L1968.85 1212.03 L1968.27 1212.03 L1967.68 1212.03 L1967.09 1212.03 L1966.51 1212.03 L1965.92 1212.03 L1965.33 1212.03 L1964.75 1212.03 L1964.16 1212.03 L1963.58 1212.03 L1962.99 1212.03 L1962.4 1212.03 L1961.82 1212.03 L1961.23 1212.03 L1960.64 1212.03 L1960.06 1212.03 L1959.47 1212.03 L1958.88 1212.03 L1958.3 1212.03 L1957.71 1212.03 L1957.12 1212.03 L1956.54 1212.03 L1955.95 1212.03 L1955.37 1212.03 L1954.78 1212.03 L1954.19 1212.03 L1953.61 1212.03 L1953.02 1212.03 L1952.43 1212.03 L1951.85 1212.03 L1951.26 1212.03 L1950.67 1212.03 L1950.09 1212.03 L1949.5 1212.03 L1948.91 1212.03 L1948.33 1212.03 L1947.74 1212.03 L1947.16 1212.03 L1946.57 1212.03 L1945.98 1212.03 L1945.4 1212.03 L1944.81 1212.03 L1944.22 1212.03 L1943.64 1212.03 L1943.05 1212.03 L1942.46 1212.03 L1941.88 1212.03 L1941.29 1212.03 L1940.71 1212.03 L1940.12 1212.03 L1939.53 1212.03 L1938.95 1212.03 L1938.36 1212.03 L1937.77 1212.03 L1937.19 1212.03 L1936.6 1212.03 L1936.01 1212.03 L1935.43 1212.03 L1934.84 1212.03 L1934.25 1212.03 L1933.67 1212.03 L1933.08 1212.03 L1932.5 1212.03 L1931.91 1212.03 L1931.32 1212.03 L1930.74 1212.03 L1930.15 1212.03 L1929.56 1212.03 L1928.98 1212.03 L1928.39 1212.03 L1927.8 1212.03 L1927.22 1212.03 L1926.63 1212.03 L1926.04 1212.03 L1925.46 1212.03 L1924.87 1212.03 L1924.29 1212.03 L1923.7 1212.03 L1923.11 1212.03 L1922.53 1212.03 L1921.94 1212.03 L1921.35 1212.03 L1920.77 1212.03 L1920.18 1212.03 L1919.59 1212.03 L1919.01 1212.03 L1918.42 1212.03 L1917.83 1212.03 L1917.25 1212.03 L1916.66 1212.03 L1916.08 1212.03 L1915.49 1212.03 L1914.9 1212.03 L1914.32 1212.03 L1913.73 1212.03 L1913.14 1212.03 L1912.56 1212.03 L1911.97 1212.03 L1911.38 1212.03 L1910.8 1212.03 L1910.21 1212.03 L1909.63 1212.03 L1909.04 1212.03 L1908.45 1212.03 L1907.87 1212.03 L1907.28 1212.03 L1906.69 1212.03 L1906.11 1212.03 L1905.52 1212.03 L1904.93 1212.03 L1904.35 1212.03 L1903.76 1212.03 L1903.17 1212.03 L1902.59 1212.03 L1902 1212.03 L1901.42 1212.03 L1900.83 1212.03 L1900.24 1212.03 L1899.66 1212.03 L1899.07 1212.03 L1898.48 1212.03 L1897.9 1212.03 L1897.31 1212.03 L1896.72 1212.03 L1896.14 1212.03 L1895.55 1212.03 L1894.96 1212.03 L1894.38 1212.03 L1893.79 1212.03 L1893.21 1212.03 L1892.62 1212.03 L1892.03 1212.03 L1891.45 1212.03 L1890.86 1212.03 L1890.27 1212.03 L1889.69 1212.03 L1889.1 1212.03 L1888.51 1212.03 L1887.93 1212.03 L1887.34 1212.03 L1886.76 1212.03 L1886.17 1212.03 L1885.58 1212.03 L1885 1212.03 L1884.41 1212.03 L1883.82 1212.03 L1883.24 1212.03 L1882.65 1212.03 L1882.06 1212.03 L1881.48 1212.03 L1880.89 1212.03 L1880.3 1212.03 L1879.72 1212.03 L1879.13 1212.03 L1878.55 1212.03 L1877.96 1212.03 L1877.37 1212.03 L1876.79 1212.03 L1876.2 1212.03 L1875.61 1212.03 L1875.03 1212.03 L1874.44 1212.03 L1873.85 1212.03 L1873.27 1212.03 L1872.68 1212.03 L1872.09 1212.03 L1871.51 1212.03 L1870.92 1212.03 L1870.34 1212.03 L1869.75 1212.03 L1869.16 1212.03 L1868.58 1212.03 L1867.99 1212.03 L1867.4 1212.03 L1866.82 1212.03 L1866.23 1212.03 L1865.64 1212.03 L1865.06 1212.03 L1864.47 1212.03 L1863.88 1212.03 L1863.3 1212.03 L1862.71 1212.03 L1862.13 1212.03 L1861.54 1212.03 L1860.95 1212.03 L1860.37 1212.03 L1859.78 1212.03 L1859.19 1212.03 L1858.61 1212.03 L1858.02 1212.03 L1857.43 1212.03 L1856.85 1212.03 L1856.26 1212.03 L1855.68 1212.03 L1855.09 1212.03 L1854.5 1212.03 L1853.92 1212.03 L1853.33 1212.03 L1852.74 1212.03 L1852.16 1212.03 L1851.57 1212.03 L1850.98 1212.03 L1850.4 1212.03 L1849.81 1212.03 L1849.22 1212.03 L1848.64 1212.03 L1848.05 1212.03 L1847.47 1212.03 L1846.88 1212.03 L1846.29 1212.03 L1845.71 1212.03 L1845.12 1212.03 L1844.53 1212.03 L1843.95 1212.03 L1843.36 1212.03 L1842.77 1212.03 L1842.19 1212.03 L1841.6 1212.03 L1841.01 1212.03 L1840.43 1212.03 L1839.84 1212.03 L1839.26 1212.03 L1838.67 1212.03 L1838.08 1212.03 L1837.5 1212.03 L1836.91 1212.03 L1836.32 1212.03 L1835.74 1212.03 L1835.15 1212.03 L1834.56 1212.03 L1833.98 1212.03 L1833.39 1212.03 L1832.81 1212.03 L1832.22 1212.03 L1831.63 1212.03 L1831.05 1212.03 L1830.46 1212.03 L1829.87 1212.03 L1829.29 1212.03 L1828.7 1212.03 L1828.11 1212.03 L1827.53 1212.03 L1826.94 1212.03 L1826.35 1212.03 L1825.77 1212.03 L1825.18 1212.03 L1824.6 1212.03 L1824.01 1212.03 L1823.42 1212.03 L1822.84 1212.03 L1822.25 1212.03 L1821.66 1212.03 L1821.08 1212.03 L1820.49 1212.03 L1819.9 1212.03 L1819.32 1212.03 L1818.73 1212.03 L1818.14 1212.03 L1817.56 1212.03 L1816.97 1212.03 L1816.39 1212.03 L1815.8 1212.03 L1815.21 1212.03 L1814.63 1212.03 L1814.04 1212.03 L1813.45 1212.03 L1812.87 1212.03 L1812.28 1212.03 L1811.69 1212.03 L1811.11 1212.03 L1810.52 1212.03 L1809.94 1212.03 L1809.35 1212.03 L1808.76 1212.03 L1808.18 1212.03 L1807.59 1212.03 L1807 1212.03 L1806.42 1212.03 L1805.83 1212.03 L1805.24 1212.03 L1804.66 1212.03 L1804.07 1212.03 L1803.48 1212.03 L1802.9 1212.03 L1802.31 1212.03 L1801.73 1212.03 L1801.14 1212.03 L1800.55 1212.03 L1799.97 1212.03 L1799.38 1212.03 L1798.79 1212.03 L1798.21 1212.03 L1797.62 1212.03 L1797.03 1212.03 L1796.45 1212.03 L1795.86 1212.03 L1795.27 1212.03 L1794.69 1212.03 L1794.1 1212.03 L1793.52 1212.03 L1792.93 1212.03 L1792.34 1212.03 L1791.76 1212.03 L1791.17 1212.03 L1790.58 1212.03 L1790 1212.03 L1789.41 1212.03 L1788.82 1212.03 L1788.24 1212.03 L1787.65 1212.03 L1787.06 1212.03 L1786.48 1212.03 L1785.89 1212.03 L1785.31 1212.03 L1784.72 1212.03 L1784.13 1212.03 L1783.55 1212.03 L1782.96 1212.03 L1782.37 1212.03 L1781.79 1212.03 L1781.2 1212.03 L1780.61 1212.03 L1780.03 1212.03 L1779.44 1212.03 L1778.86 1212.03 L1778.27 1212.03 L1777.68 1212.03 L1777.1 1212.03 L1776.51 1212.03 L1775.92 1212.03 L1775.34 1212.03 L1774.75 1212.03 L1774.16 1212.03 L1773.58 1212.03 L1772.99 1212.03 L1772.4 1212.03 L1771.82 1212.03 L1771.23 1212.03 L1770.65 1212.03 L1770.06 1212.03 L1769.47 1212.03 L1768.89 1212.03 L1768.3 1212.03 L1767.71 1212.03 L1767.13 1212.03 L1766.54 1212.03 L1765.95 1212.03 L1765.37 1212.03 L1764.78 1212.03 L1764.19 1212.03 L1763.61 1212.03 L1763.02 1212.03 L1762.44 1212.03 L1761.85 1212.03 L1761.26 1212.03 L1760.68 1212.03 L1760.09 1212.03 L1759.5 1212.03 L1758.92 1212.03 L1758.33 1212.03 L1757.74 1212.03 L1757.16 1212.03 L1756.57 1212.03 L1755.99 1212.03 L1755.4 1212.03 L1754.81 1212.03 L1754.23 1212.03 L1753.64 1212.03 L1753.05 1212.03 L1752.47 1212.03 L1751.88 1212.03 L1751.29 1212.03 L1750.71 1212.03 L1750.12 1212.03 L1749.53 1212.03 L1748.95 1212.03 L1748.36 1212.03 L1747.78 1212.03 L1747.19 1212.03 L1746.6 1212.03 L1746.02 1212.03 L1745.43 1212.03 L1744.84 1212.03 L1744.26 1212.03 L1743.67 1212.03 L1743.08 1212.03 L1742.5 1212.03 L1741.91 1212.03 L1741.32 1212.03 L1740.74 1212.03 L1740.15 1212.03 L1739.57 1212.03 L1738.98 1212.03 L1738.39 1212.03 L1737.81 1212.03 L1737.22 1212.03 L1736.63 1212.03 L1736.05 1212.03 L1735.46 1212.03 L1734.87 1212.03 L1734.29 1212.03 L1733.7 1212.03 L1733.11 1212.03 L1732.53 1212.03 L1731.94 1212.03 L1731.36 1212.03 L1730.77 1212.03 L1730.18 1212.03 L1729.6 1212.03 L1729.01 1212.03 L1728.42 1212.03 L1727.84 1212.03 L1727.25 1212.03 L1726.66 1212.03 L1726.08 1212.03 L1725.49 1212.03 L1724.91 1212.03 L1724.32 1212.03 L1723.73 1212.03 L1723.15 1212.03 L1722.56 1212.03 L1721.97 1212.03 L1721.39 1212.03 L1720.8 1212.03 L1720.21 1212.03 L1719.63 1212.03 L1719.04 1212.03 L1718.45 1212.03 L1717.87 1212.03 L1717.28 1212.03 L1716.7 1212.03 L1716.11 1212.03 L1715.52 1212.03 L1714.94 1212.03 L1714.35 1212.03 L1713.76 1212.03 L1713.18 1212.03 L1712.59 1212.03 L1712 1212.03 L1711.42 1212.03 L1710.83 1212.03 L1710.24 1212.03 L1709.66 1212.03 L1709.07 1212.03 L1708.49 1212.03 L1707.9 1212.03 L1707.31 1212.03 L1706.73 1212.03 L1706.14 1212.03 L1705.55 1212.03 L1704.97 1212.03 L1704.38 1212.03 L1703.79 1212.03 L1703.21 1212.03 L1702.62 1212.03 L1702.04 1212.03 L1701.45 1212.03 L1700.86 1212.03 L1700.28 1212.03 L1699.69 1212.03 L1699.1 1212.03 L1698.52 1212.03 L1697.93 1212.03 L1697.34 1212.03 L1696.76 1212.03 L1696.17 1212.03 L1695.58 1212.03 L1695 1212.03 L1694.41 1212.03 L1693.83 1212.03 L1693.24 1212.03 L1692.65 1212.03 L1692.07 1212.03 L1691.48 1212.03 L1690.89 1212.03 L1690.31 1212.03 L1689.72 1212.03 L1689.13 1212.03 L1688.55 1212.03 L1687.96 1212.03 L1687.37 1212.03 L1686.79 1212.03 L1686.2 1212.03 L1685.62 1212.03 L1685.03 1212.03 L1684.44 1212.03 L1683.86 1212.03 L1683.27 1212.03 L1682.68 1212.03 L1682.1 1212.03 L1681.51 1212.03 L1680.92 1212.03 L1680.34 1212.03 L1679.75 1212.03 L1679.17 1212.03 L1678.58 1212.03 L1677.99 1212.03 L1677.41 1212.03 L1676.82 1212.03 L1676.23 1212.03 L1675.65 1212.03 L1675.06 1212.03 L1674.47 1212.03 L1673.89 1212.03 L1673.3 1212.03 L1672.71 1212.03 L1672.13 1212.03 L1671.54 1212.03 L1670.96 1212.03 L1670.37 1212.03 L1669.78 1212.03 L1669.2 1212.03 L1668.61 1212.03 L1668.02 1212.03 L1667.44 1212.03 L1666.85 1212.03 L1666.26 1212.03 L1665.68 1212.03 L1665.09 1212.03 L1664.5 1212.03 L1663.92 1212.03 L1663.33 1212.03 L1662.75 1212.03 L1662.16 1212.03 L1661.57 1212.03 L1660.99 1212.03 L1660.4 1212.03 L1659.81 1212.03 L1659.23 1212.03 L1658.64 1212.03 L1658.05 1212.03 L1657.47 1212.03 L1656.88 1212.03 L1656.29 1212.03 L1655.71 1212.03 L1655.12 1212.03 L1654.54 1212.03 L1653.95 1212.03 L1653.36 1212.03 L1652.78 1212.03 L1652.19 1212.03 L1651.6 1212.03 L1651.02 1212.03 L1650.43 1212.03 L1649.84 1212.03 L1649.26 1212.03 L1648.67 1212.03 L1648.09 1212.03 L1647.5 1212.03 L1646.91 1212.03 L1646.33 1212.03 L1645.74 1212.03 L1645.15 1212.03 L1644.57 1212.03 L1643.98 1212.03 L1643.39 1212.03 L1642.81 1212.03 L1642.22 1212.03 L1641.63 1212.03 L1641.05 1212.03 L1640.46 1212.03 L1639.88 1212.03 L1639.29 1212.03 L1638.7 1212.03 L1638.12 1212.03 L1637.53 1212.03 L1636.94 1212.03 L1636.36 1212.03 L1635.77 1212.03 L1635.18 1212.03 L1634.6 1212.03 L1634.01 1212.03 L1633.42 1212.03 L1632.84 1212.03 L1632.25 1212.03 L1631.67 1212.03 L1631.08 1212.03 L1630.49 1212.03 L1629.91 1212.03 L1629.32 1212.03 L1628.73 1212.03 L1628.15 1212.03 L1627.56 1212.03 L1626.97 1212.03 L1626.39 1212.03 L1625.8 1212.03 L1625.22 1212.03 L1624.63 1212.03 L1624.04 1212.03 L1623.46 1212.03 L1622.87 1212.03 L1622.28 1212.03 L1621.7 1212.03 L1621.11 1212.03 L1620.52 1212.03 L1619.94 1212.03 L1619.35 1212.03 L1618.76 1212.03 L1618.18 1212.03 L1617.59 1212.03 L1617.01 1212.03 L1616.42 1212.03 L1615.83 1212.03 L1615.25 1212.03 L1614.66 1212.03 L1614.07 1212.03 L1613.49 1212.03 L1612.9 1212.03 L1612.31 1212.03 L1611.73 1212.03 L1611.14 1212.03 L1610.55 1212.03 L1609.97 1212.03 L1609.38 1212.03 L1608.8 1212.03 L1608.21 1212.03 L1607.62 1212.03 L1607.04 1212.03 L1606.45 1212.03 L1605.86 1212.03 L1605.28 1212.03 L1604.69 1212.03 L1604.1 1212.03 L1603.52 1212.03 L1602.93 1212.03 L1602.34 1212.03 L1601.76 1212.03 L1601.17 1212.03 L1600.59 1212.03 L1600 1212.03 L1599.41 1212.03 L1598.83 1212.03 L1598.24 1212.03 L1597.65 1212.03 L1597.07 1212.03 L1596.48 1212.03 L1595.89 1212.03 L1595.31 1212.03 L1594.72 1212.03 L1594.14 1212.03 L1593.55 1212.03 L1592.96 1212.03 L1592.38 1212.03 L1591.79 1212.03 L1591.2 1212.03 L1590.62 1212.03 L1590.03 1212.03 L1589.44 1212.03 L1588.86 1212.03 L1588.27 1212.03 L1587.68 1212.03 L1587.1 1212.03 L1586.51 1212.03 L1585.93 1212.03 L1585.34 1212.03 L1584.75 1212.03 L1584.17 1212.03 L1583.58 1212.03 L1582.99 1212.03 L1582.41 1212.03 L1581.82 1212.03 L1581.23 1212.03 L1580.65 1212.03 L1580.06 1212.03 L1579.47 1212.03 L1578.89 1212.03 L1578.3 1212.03 L1577.72 1212.03 L1577.13 1212.03 L1576.54 1212.03 L1575.96 1212.03 L1575.37 1212.03 L1574.78 1212.03 L1574.2 1212.03 L1573.61 1212.03 L1573.02 1212.03 L1572.44 1212.03 L1571.85 1212.03 L1571.27 1212.03 L1570.68 1212.03 L1570.09 1212.03 L1569.51 1212.03 L1568.92 1212.03 L1568.33 1212.03 L1567.75 1212.03 L1567.16 1212.03 L1566.57 1212.03 L1565.99 1212.03 L1565.4 1212.03 L1564.81 1212.03 L1564.23 1212.03 L1563.64 1212.03 L1563.06 1212.03 L1562.47 1212.03 L1561.88 1212.03 L1561.3 1212.03 L1560.71 1212.03 L1560.12 1212.03 L1559.54 1212.03 L1558.95 1212.03 L1558.36 1212.03 L1557.78 1212.03 L1557.19 1212.03 L1556.6 1212.03 L1556.02 1212.03 L1555.43 1212.03 L1554.85 1212.03 L1554.26 1212.03 L1553.67 1212.03 L1553.09 1212.03 L1552.5 1212.03 L1551.91 1212.03 L1551.33 1212.03 L1550.74 1212.03 L1550.15 1212.03 L1549.57 1212.03 L1548.98 1212.03 L1548.4 1212.03 L1547.81 1212.03 L1547.22 1212.03 L1546.64 1212.03 L1546.05 1212.03 L1545.46 1212.03 L1544.88 1212.03 L1544.29 1212.03 L1543.7 1212.03 L1543.12 1212.03 L1542.53 1212.03 L1541.94 1212.03 L1541.36 1212.03 L1540.77 1212.03 L1540.19 1212.03 L1539.6 1212.03 L1539.01 1212.03 L1538.43 1212.03 L1537.84 1212.03 L1537.25 1212.03 L1536.67 1212.03 L1536.08 1212.03 L1535.49 1212.03 L1534.91 1212.03 L1534.32 1212.03 L1533.73 1212.03 L1533.15 1212.03 L1532.56 1212.03 L1531.98 1212.03 L1531.39 1212.03 L1530.8 1212.03 L1530.22 1212.03 L1529.63 1212.03 L1529.04 1212.03 L1528.46 1212.03 L1527.87 1212.03 L1527.28 1212.03 L1526.7 1212.03 L1526.11 1212.03 L1525.52 1212.03 L1524.94 1212.03 L1524.35 1212.03 L1523.77 1212.03 L1523.18 1212.03 L1522.59 1212.03 L1522.01 1212.03 L1521.42 1212.03 L1520.83 1212.03 L1520.25 1212.03 L1519.66 1212.03 L1519.07 1212.03 L1518.49 1212.03 L1517.9 1212.03 L1517.32 1212.03 L1516.73 1212.03 L1516.14 1212.03 L1515.56 1212.03 L1514.97 1212.03 L1514.38 1212.03 L1513.8 1212.03 L1513.21 1212.03 L1512.62 1212.03 L1512.04 1212.03 L1511.45 1212.03 L1510.86 1212.03 L1510.28 1212.03 L1509.69 1212.03 L1509.11 1212.03 L1508.52 1212.03 L1507.93 1212.03 L1507.35 1212.03 L1506.76 1212.03 L1506.17 1212.03 L1505.59 1212.03 L1505 1212.03 L1504.41 1212.03 L1503.83 1212.03 L1503.24 1212.03 L1502.65 1212.03 L1502.07 1212.03 L1501.48 1212.03 L1500.9 1212.03 L1500.31 1212.03 L1499.72 1212.03 L1499.14 1212.03 L1498.55 1212.03 L1497.96 1212.03 L1497.38 1212.03 L1496.79 1212.03 L1496.2 1212.03 L1495.62 1212.03 L1495.03 1212.03 L1494.45 1212.03 L1493.86 1212.03 L1493.27 1212.03 L1492.69 1212.03 L1492.1 1212.03 L1491.51 1212.03 L1490.93 1212.03 L1490.34 1212.03 L1489.75 1212.03 L1489.17 1212.03 L1488.58 1212.03 L1487.99 1212.03 L1487.41 1212.03 L1486.82 1212.03 L1486.24 1212.03 L1485.65 1212.03 L1485.06 1212.03 L1484.48 1212.03 L1483.89 1212.03 L1483.3 1212.03 L1482.72 1212.03 L1482.13 1212.03 L1481.54 1212.03 L1480.96 1212.03 L1480.37 1212.03 L1479.78 1212.03 L1479.2 1212.03 L1478.61 1212.03 L1478.03 1212.03 L1477.44 1212.03 L1476.85 1212.03 L1476.27 1212.03 L1475.68 1212.03 L1475.09 1212.03 L1474.51 1212.03 L1473.92 1212.03 L1473.33 1212.03 L1472.75 1212.03 L1472.16 1212.03 L1471.57 1212.03 L1470.99 1212.03 L1470.4 1212.03 L1469.82 1212.03 L1469.23 1212.03 L1468.64 1212.03 L1468.06 1212.03 L1467.47 1212.03 L1466.88 1212.03 L1466.3 1212.03 L1465.71 1212.03 L1465.12 1212.03 L1464.54 1212.03 L1463.95 1212.03 L1463.37 1212.03 L1462.78 1212.03 L1462.19 1212.03 L1461.61 1212.03 L1461.02 1212.03 L1460.43 1212.03 L1459.85 1212.03 L1459.26 1212.03 L1458.67 1212.03 L1458.09 1212.03 L1457.5 1212.03 L1456.91 1212.03 L1456.33 1212.03 L1455.74 1212.03 L1455.16 1212.03 L1454.57 1212.03 L1453.98 1212.03 L1453.4 1212.03 L1452.81 1212.03 L1452.22 1212.03 L1451.64 1212.03 L1451.05 1212.03 L1450.46 1212.03 L1449.88 1212.03 L1449.29 1212.03 L1448.7 1212.03 L1448.12 1212.03 L1447.53 1212.03 L1446.95 1212.03 L1446.36 1212.03 L1445.77 1212.03 L1445.19 1212.03 L1444.6 1212.03 L1444.01 1212.03 L1443.43 1212.03 L1442.84 1212.03 L1442.25 1212.03 L1441.67 1212.03 L1441.08 1212.03 L1440.5 1212.03 L1439.91 1212.03 L1439.32 1212.03 L1438.74 1212.03 L1438.15 1212.03 L1437.56 1212.03 L1436.98 1212.03 L1436.39 1212.03 L1435.8 1212.03 L1435.22 1212.03 L1434.63 1212.03 L1434.04 1212.03 L1433.46 1212.03 L1432.87 1212.03 L1432.29 1212.03 L1431.7 1212.03 L1431.11 1212.03 L1430.53 1212.03 L1429.94 1212.03 L1429.35 1212.03 L1428.77 1212.03 L1428.18 1212.03 L1427.59 1212.03 L1427.01 1212.03 L1426.42 1212.03 L1425.83 1212.03 L1425.25 1212.03 L1424.66 1212.03 L1424.08 1212.03 L1423.49 1212.03 L1422.9 1212.03 L1422.32 1212.03 L1421.73 1212.03 L1421.14 1212.03 L1420.56 1212.03 L1419.97 1212.03 L1419.38 1212.03 L1418.8 1212.03 L1418.21 1212.03 L1417.63 1212.03 L1417.04 1212.03 L1416.45 1212.03 L1415.87 1212.03 L1415.28 1212.03 L1414.69 1212.03 L1414.11 1212.03 L1413.52 1212.03 L1412.93 1212.03 L1412.35 1212.03 L1411.76 1212.03 L1411.17 1212.03 L1410.59 1212.03 L1410 1212.03 L1409.42 1212.03 L1408.83 1212.03 L1408.24 1212.03 L1407.66 1212.03 L1407.07 1212.03 L1406.48 1212.03 L1405.9 1212.03 L1405.31 1212.03 L1404.72 1212.03 L1404.14 1212.03 L1403.55 1212.03 L1402.96 1212.03 L1402.38 1212.03 L1401.79 1212.03 L1401.21 1212.03 L1400.62 1212.03 L1400.03 1212.03 L1399.45 1212.03 L1398.86 1212.03 L1398.27 1212.03 L1397.69 1212.03 L1397.1 1212.03 L1396.51 1212.03 L1395.93 1212.03 L1395.34 1212.03 L1394.75 1212.03 L1394.17 1212.03 L1393.58 1212.03 L1393 1212.03 L1392.41 1212.03 L1391.82 1212.03 L1391.24 1212.03 L1390.65 1212.03 L1390.06 1212.03 L1389.48 1212.03 L1388.89 1212.03 L1388.3 1212.03 L1387.72 1212.03 L1387.13 1212.03 L1386.55 1212.03 L1385.96 1212.03 L1385.37 1212.03 L1384.79 1212.03 L1384.2 1212.03 L1383.61 1212.03 L1383.03 1212.03 L1382.44 1212.03 L1381.85 1212.03 L1381.27 1212.03 L1380.68 1212.03 L1380.09 1212.03 L1379.51 1212.03 L1378.92 1212.03 L1378.34 1212.03 L1377.75 1212.03 L1377.16 1212.03 L1376.58 1212.03 L1375.99 1212.03 L1375.4 1212.03 L1374.82 1212.03 L1374.23 1212.03 L1373.64 1212.03 L1373.06 1212.03 L1372.47 1212.03 L1371.88 1212.03 L1371.3 1212.03 L1370.71 1212.03 L1370.13 1212.03 L1369.54 1212.03 L1368.95 1212.03 L1368.37 1212.03 L1367.78 1212.03 L1367.19 1212.03 L1366.61 1212.03 L1366.02 1212.03 L1365.43 1212.03 L1364.85 1212.03 L1364.26 1212.03 L1363.68 1212.03 L1363.09 1212.03 L1362.5 1212.03 L1361.92 1212.03 L1361.33 1212.03 L1360.74 1212.03 L1360.16 1212.03 L1359.57 1212.03 L1358.98 1212.03 L1358.4 1212.03 L1357.81 1212.03 L1357.22 1212.03 L1356.64 1212.03 L1356.05 1212.03 L1355.47 1212.03 L1354.88 1212.03 L1354.29 1212.03 L1353.71 1212.03 L1353.12 1212.03 L1352.53 1212.03 L1351.95 1212.03 L1351.36 1212.03 L1350.77 1212.03 L1350.19 1212.03 L1349.6 1212.03 L1349.01 1212.03 L1348.43 1212.03 L1347.84 1212.03 L1347.26 1212.03 L1346.67 1212.03 L1346.08 1212.03 L1345.5 1212.03 L1344.91 1212.03 L1344.32 1212.03 L1343.74 1212.03 L1343.15 1212.03 L1342.56 1212.03 L1341.98 1212.03 L1341.39 1212.03 L1340.8 1212.03 L1340.22 1212.03 L1339.63 1212.03 L1339.05 1212.03 L1338.46 1212.03 L1337.87 1212.03 L1337.29 1212.03 L1336.7 1212.03 L1336.11 1212.03 L1335.53 1212.03 L1334.94 1212.03 L1334.35 1212.03 L1333.77 1212.03 L1333.18 1212.03 L1332.6 1212.03 L1332.01 1212.03 L1331.42 1212.03 L1330.84 1212.03 L1330.25 1212.03 L1329.66 1212.03 L1329.08 1212.03 L1328.49 1212.03 L1327.9 1212.03 L1327.32 1212.03 L1326.73 1212.03 L1326.14 1212.03 L1325.56 1212.03 L1324.97 1212.03 L1324.39 1212.03 L1323.8 1212.03 L1323.21 1212.03 L1322.63 1212.03 L1322.04 1212.03 L1321.45 1212.03 L1320.87 1212.03 L1320.28 1212.03 L1319.69 1212.03 L1319.11 1212.03 L1318.52 1212.03 L1317.93 1212.03 L1317.35 1212.03 L1316.76 1212.03 L1316.18 1212.03 L1315.59 1212.03 L1315 1212.03 L1314.42 1212.03 L1313.83 1212.03 L1313.24 1212.03 L1312.66 1212.03 L1312.07 1212.03 L1311.48 1212.03 L1310.9 1212.03 L1310.31 1212.03 L1309.73 1212.03 L1309.14 1212.03 L1308.55 1212.03 L1307.97 1212.03 L1307.38 1212.03 L1306.79 1212.03 L1306.21 1212.03 L1305.62 1212.03 L1305.03 1212.03 L1304.45 1212.03 L1303.86 1212.03 L1303.27 1212.03 L1302.69 1212.03 L1302.1 1212.03 L1301.52 1212.03 L1300.93 1212.03 L1300.34 1212.03 L1299.76 1212.03 L1299.17 1212.03 L1298.58 1212.03 L1298 1212.03 L1297.41 1212.03 L1296.82 1212.03 L1296.24 1212.03 L1295.65 1212.03 L1295.06 1212.03 L1294.48 1212.03 L1293.89 1212.03 L1293.31 1212.03 L1292.72 1212.03 L1292.13 1212.03 L1291.55 1212.03 L1290.96 1212.03 L1290.37 1212.03 L1289.79 1212.03 L1289.2 1212.03 L1288.61 1212.03 L1288.03 1212.03 L1287.44 1212.03 L1286.86 1212.03 L1286.27 1212.03 L1285.68 1212.03 L1285.1 1212.03 L1284.51 1212.03 L1283.92 1212.03 L1283.34 1212.03 L1282.75 1212.03 L1282.16 1212.03 L1281.58 1212.03 L1280.99 1212.03 L1280.4 1212.03 L1279.82 1212.03 L1279.23 1212.03 L1278.65 1212.03 L1278.06 1212.03 L1277.47 1212.03 L1276.89 1212.03 L1276.3 1212.03 L1275.71 1212.03 L1275.13 1212.03 L1274.54 1212.03 L1273.95 1212.03 L1273.37 1212.03 L1272.78 1212.03 L1272.19 1212.03 L1271.61 1212.03 L1271.02 1212.03 L1270.44 1212.03 L1269.85 1212.03 L1269.26 1212.03 L1268.68 1212.03 L1268.09 1212.03 L1267.5 1212.03 L1266.92 1212.03 L1266.33 1212.03 L1265.74 1212.03 L1265.16 1212.03 L1264.57 1212.03 L1263.98 1212.03 L1263.4 1212.03 L1262.81 1212.03 L1262.23 1212.03 L1261.64 1212.03 L1261.05 1212.03 L1260.47 1212.03 L1259.88 1212.03 L1259.29 1212.03 L1258.71 1212.03 L1258.12 1212.03 L1257.53 1212.03 L1256.95 1212.03 L1256.36 1212.03 L1255.78 1212.03 L1255.19 1212.03 L1254.6 1212.03 L1254.02 1212.03 L1253.43 1212.03 L1252.84 1212.03 L1252.26 1212.03 L1251.67 1212.03 L1251.08 1212.03 L1250.5 1212.03 L1249.91 1212.03 L1249.32 1212.03 L1248.74 1212.03 L1248.15 1212.03 L1247.57 1212.03 L1246.98 1212.03 L1246.39 1212.03 L1245.81 1212.03 L1245.22 1212.03 L1244.63 1212.03 L1244.05 1212.03 L1243.46 1212.03 L1242.87 1212.03 L1242.29 1212.03 L1241.7 1212.03 L1241.11 1212.03 L1240.53 1212.03 L1239.94 1212.03 L1239.36 1212.03 L1238.77 1212.03 L1238.18 1212.03 L1237.6 1212.03 L1237.01 1212.03 L1236.42 1212.03 L1235.84 1212.03 L1235.25 1212.03 L1234.66 1212.03 L1234.08 1212.03 L1233.49 1212.03 L1232.91 1212.03 L1232.32 1212.03 L1231.73 1212.03 L1231.15 1212.03 L1230.56 1212.03 L1229.97 1212.03 L1229.39 1212.03 L1228.8 1212.03 L1228.21 1212.03 L1227.63 1212.03 L1227.04 1212.03 L1226.45 1212.03 L1225.87 1212.03 L1225.28 1212.03 L1224.7 1212.03 L1224.11 1212.03 L1223.52 1212.03 L1222.94 1212.03 L1222.35 1212.03 L1221.76 1212.03 L1221.18 1212.03 L1220.59 1212.03 L1220 1212.03 L1219.42 1212.03 L1218.83 1212.03 L1218.24 1212.03 L1217.66 1212.03 L1217.07 1212.03 L1216.49 1212.03 L1215.9 1212.03 L1215.31 1212.03 L1214.73 1212.03 L1214.14 1212.03 L1213.55 1212.03 L1212.97 1212.03 L1212.38 1212.03 L1211.79 1212.03 L1211.21 1212.03 L1210.62 1212.03 L1210.03 1212.03 L1209.45 1212.03 L1208.86 1212.03 L1208.28 1212.03 L1207.69 1212.03 L1207.1 1212.03 L1206.52 1212.03 L1205.93 1212.03 L1205.34 1212.03 L1204.76 1212.03 L1204.17 1212.03 L1203.58 1212.03 L1203 1212.03 L1202.41 1212.03 L1201.83 1212.03 L1201.24 1212.03 L1200.65 1212.03 L1200.07 1212.03 L1199.48 1212.03 L1198.89 1212.03 L1198.31 1212.03 L1197.72 1212.03 L1197.13 1212.03 L1196.55 1212.03 L1195.96 1212.03 L1195.37 1212.03 L1194.79 1212.03 L1194.2 1212.03 L1193.62 1212.03 L1193.03 1212.03 L1192.44 1212.03 L1191.86 1212.03 L1191.27 1212.03 L1190.68 1212.03 L1190.1 1212.03 L1189.51 1212.03 L1188.92 1212.03 L1188.34 1212.03 L1187.75 1212.03 L1187.16 1212.03 L1186.58 1212.03 L1185.99 1212.03 L1185.41 1212.03 L1184.82 1212.03 L1184.23 1212.03 L1183.65 1212.03 L1183.06 1212.03 L1182.47 1212.03 L1181.89 1212.03 L1181.3 1212.03 L1180.71 1212.03 L1180.13 1212.03 L1179.54 1212.03 L1178.96 1212.03 L1178.37 1212.03 L1177.78 1212.03 L1177.2 1212.03 L1176.61 1212.03 L1176.02 1212.03 L1175.44 1212.03 L1174.85 1212.03 L1174.26 1212.03 L1173.68 1212.03 L1173.09 1212.03 L1172.5 1212.03 L1171.92 1212.03 L1171.33 1212.03 L1170.75 1212.03 L1170.16 1212.03 L1169.57 1212.03 L1168.99 1212.03 L1168.4 1212.03 L1167.81 1212.03 L1167.23 1212.03 L1166.64 1212.03 L1166.05 1212.03 L1165.47 1212.03 L1164.88 1212.03 L1164.29 1212.03 L1163.71 1212.03 L1163.12 1212.03 L1162.54 1212.03 L1161.95 1212.03 L1161.36 1212.03 L1160.78 1212.03 L1160.19 1212.03 L1159.6 1212.03 L1159.02 1212.03 L1158.43 1212.03 L1157.84 1212.03 L1157.26 1212.03 L1156.67 1212.03 L1156.09 1212.03 L1155.5 1212.03 L1154.91 1212.03 L1154.33 1212.03 L1153.74 1212.03 L1153.15 1212.03 L1152.57 1212.03 L1151.98 1212.03 L1151.39 1212.03 L1150.81 1212.03 L1150.22 1212.03 L1149.63 1212.03 L1149.05 1212.03 L1148.46 1212.03 L1147.88 1212.03 L1147.29 1212.03 L1146.7 1212.03 L1146.12 1212.03 L1145.53 1212.03 L1144.94 1212.03 L1144.36 1212.03 L1143.77 1212.03 L1143.18 1212.03 L1142.6 1212.03 L1142.01 1212.03 L1141.42 1212.03 L1140.84 1212.03 L1140.25 1212.03 L1139.67 1212.03 L1139.08 1212.03 L1138.49 1212.03 L1137.91 1212.03 L1137.32 1212.03 L1136.73 1212.03 L1136.15 1212.03 L1135.56 1212.03 L1134.97 1212.03 L1134.39 1212.03 L1133.8 1212.03 L1133.21 1212.03 L1132.63 1212.03 L1132.04 1212.03 L1131.46 1212.03 L1130.87 1212.03 L1130.28 1212.03 L1129.7 1212.03 L1129.11 1212.03 L1128.52 1212.03 L1127.94 1212.03 L1127.35 1212.03 L1126.76 1212.03 L1126.18 1212.03 L1125.59 1212.03 L1125.01 1212.03 L1124.42 1212.03 L1123.83 1212.03 L1123.25 1212.03 L1122.66 1212.03 L1122.07 1212.03 L1121.49 1212.03 L1120.9 1212.03 L1120.31 1212.03 L1119.73 1212.03 L1119.14 1212.03 L1118.55 1212.03 L1117.97 1212.03 L1117.38 1212.03 L1116.8 1212.03 L1116.21 1212.03 L1115.62 1212.03 L1115.04 1212.03 L1114.45 1212.03 L1113.86 1212.03 L1113.28 1212.03 L1112.69 1212.03 L1112.1 1212.03 L1111.52 1212.03 L1110.93 1212.03 L1110.34 1212.03 L1109.76 1212.03 L1109.17 1212.03 L1108.59 1212.03 L1108 1212.03 L1107.41 1212.03 L1106.83 1212.03 L1106.24 1212.03 L1105.65 1212.03 L1105.07 1212.03 L1104.48 1212.03 L1103.89 1212.03 L1103.31 1212.03 L1102.72 1212.03 L1102.14 1212.03 L1101.55 1212.03 L1100.96 1212.03 L1100.38 1212.03 L1099.79 1212.03 L1099.2 1212.03 L1098.62 1212.03 L1098.03 1212.03 L1097.44 1212.03 L1096.86 1212.03 L1096.27 1212.03 L1095.68 1212.03 L1095.1 1212.03 L1094.51 1212.03 L1093.93 1212.03 L1093.34 1212.03 L1092.75 1212.03 L1092.17 1212.03 L1091.58 1212.03 L1090.99 1212.03 L1090.41 1212.03 L1089.82 1212.03 L1089.23 1212.03 L1088.65 1212.03 L1088.06 1212.03 L1087.47 1212.03 L1086.89 1212.03 L1086.3 1212.03 L1085.72 1212.03 L1085.13 1212.03 L1084.54 1212.03 L1083.96 1212.03 L1083.37 1212.03 L1082.78 1212.03 L1082.2 1212.03 L1081.61 1212.03 L1081.02 1212.03 L1080.44 1212.03 L1079.85 1212.03 L1079.26 1212.03 L1078.68 1212.03 L1078.09 1212.03 L1077.51 1212.03 L1076.92 1212.03 L1076.33 1212.03 L1075.75 1212.03 L1075.16 1212.03 L1074.57 1212.03 L1073.99 1212.03 L1073.4 1212.03 L1072.81 1212.03 L1072.23 1212.03 L1071.64 1212.03 L1071.06 1212.03 L1070.47 1212.03 L1069.88 1212.03 L1069.3 1212.03 L1068.71 1212.03 L1068.12 1212.03 L1067.54 1212.03 L1066.95 1212.03 L1066.36 1212.03 L1065.78 1212.03 L1065.19 1212.03 L1064.6 1212.03 L1064.02 1212.03 L1063.43 1212.03 L1062.85 1212.03 L1062.26 1212.03 L1061.67 1212.03 L1061.09 1212.03 L1060.5 1212.03 L1059.91 1212.03 L1059.33 1212.03 L1058.74 1212.03 L1058.15 1212.03 L1057.57 1212.03 L1056.98 1212.03 L1056.39 1212.03 L1055.81 1212.03 L1055.22 1212.03 L1054.64 1212.03 L1054.05 1212.03 L1053.46 1212.03 L1052.88 1212.03 L1052.29 1212.03 L1051.7 1212.03 L1051.12 1212.03 L1050.53 1212.03 L1049.94 1212.03 L1049.36 1212.03 L1048.77 1212.03 L1048.19 1212.03 L1047.6 1212.03 L1047.01 1212.03 L1046.43 1212.03 L1045.84 1212.03 L1045.25 1212.03 L1044.67 1212.03 L1044.08 1212.03 L1043.49 1212.03 L1042.91 1212.03 L1042.32 1212.03 L1041.73 1212.03 L1041.15 1212.03 L1040.56 1212.03 L1039.98 1212.03 L1039.39 1212.03 L1038.8 1212.03 L1038.22 1212.03 L1037.63 1212.03 L1037.04 1212.03 L1036.46 1212.03 L1035.87 1212.03 L1035.28 1212.03 L1034.7 1212.03 L1034.11 1212.03 L1033.52 1212.03 L1032.94 1212.03 L1032.35 1212.03 L1031.77 1212.03 L1031.18 1212.03 L1030.59 1212.03 L1030.01 1212.03 L1029.42 1212.03 L1028.83 1212.03 L1028.25 1212.03 L1027.66 1212.03 L1027.07 1212.03 L1026.49 1212.03 L1025.9 1212.03 L1025.32 1212.03 L1024.73 1212.03 L1024.14 1212.03 L1023.56 1212.03 L1022.97 1212.03 L1022.38 1212.03 L1021.8 1212.03 L1021.21 1212.03 L1020.62 1212.03 L1020.04 1212.03 L1019.45 1212.03 L1018.86 1212.03 L1018.28 1212.03 L1017.69 1212.03 L1017.11 1212.03 L1016.52 1212.03 L1015.93 1212.03 L1015.35 1212.03 L1014.76 1212.03 L1014.17 1212.03 L1013.59 1212.03 L1013 1212.03 L1012.41 1212.03 L1011.83 1212.03 L1011.24 1212.03 L1010.65 1212.03 L1010.07 1212.03 L1009.48 1212.03 L1008.9 1212.03 L1008.31 1212.03 L1007.72 1212.03 L1007.14 1212.03 L1006.55 1212.03 L1005.96 1212.03 L1005.38 1212.03 L1004.79 1212.03 L1004.2 1212.03 L1003.62 1212.03 L1003.03 1212.03 L1002.44 1212.03 L1001.86 1212.03 L1001.27 1212.03 L1000.69 1212.03 L1000.1 1212.03 L999.513 1212.03 L998.926 1212.03 L998.34 1212.03 L997.754 1212.03 L997.167 1212.03 L996.581 1212.03 L995.994 1212.03 L995.408 1212.03 L994.822 1212.03 L994.235 1212.03 L993.649 1212.03 L993.062 1212.03 L992.476 1212.03 L991.889 1212.03 L991.303 1212.03 L990.717 1212.03 L990.13 1212.03 L989.544 1212.03 L988.957 1212.03 L988.371 1212.03 L987.785 1212.03 L987.198 1212.03 L986.612 1212.03 L986.025 1212.03  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.36 986.612,1212.36 987.198,1212.36 987.785,1212.36 988.371,1212.36 988.957,1212.36 989.544,1212.36 990.13,1212.36 990.717,1212.36 991.303,1212.36 991.889,1212.36 992.476,1212.36 993.062,1212.36 993.649,1212.36 994.235,1212.36 994.822,1212.36 995.408,1212.36 995.994,1212.36 996.581,1212.36 997.167,1212.36 997.754,1212.36 998.34,1212.36 998.926,1212.36 999.513,1212.36 1000.1,1212.36 1000.69,1212.36 1001.27,1212.36 1001.86,1212.36 1002.44,1212.36 1003.03,1212.36 1003.62,1212.36 1004.2,1212.36 1004.79,1212.36 1005.38,1212.36 1005.96,1212.36 1006.55,1212.36 1007.14,1212.36 1007.72,1212.36 1008.31,1212.36 1008.9,1212.36 1009.48,1212.36 1010.07,1212.36 1010.65,1212.36 1011.24,1212.36 1011.83,1212.36 1012.41,1212.36 1013,1212.36 1013.59,1212.36 1014.17,1212.36 1014.76,1212.36 1015.35,1212.36 1015.93,1212.36 1016.52,1212.36 1017.11,1212.36 1017.69,1212.36 1018.28,1212.36 1018.86,1212.36 1019.45,1212.36 1020.04,1212.36 1020.62,1212.36 1021.21,1212.36 1021.8,1212.36 1022.38,1212.36 1022.97,1212.36 1023.56,1212.36 1024.14,1212.36 1024.73,1212.36 1025.32,1212.36 1025.9,1212.36 1026.49,1212.36 1027.07,1212.36 1027.66,1212.36 1028.25,1212.36 1028.83,1212.36 1029.42,1212.36 1030.01,1212.36 1030.59,1212.36 1031.18,1212.36 1031.77,1212.36 1032.35,1212.36 1032.94,1212.36 1033.52,1212.36 1034.11,1212.36 1034.7,1212.36 1035.28,1212.36 1035.87,1212.36 1036.46,1212.36 1037.04,1212.36 1037.63,1212.36 1038.22,1212.36 1038.8,1212.36 1039.39,1212.36 1039.98,1212.36 1040.56,1212.36 1041.15,1212.36 1041.73,1212.36 1042.32,1212.36 1042.91,1212.36 1043.49,1212.36 1044.08,1212.36 1044.67,1212.36 1045.25,1212.36 1045.84,1212.36 1046.43,1212.36 1047.01,1212.36 1047.6,1212.36 1048.19,1212.36 1048.77,1212.36 1049.36,1212.36 1049.94,1212.36 1050.53,1212.36 1051.12,1212.36 1051.7,1212.36 1052.29,1212.36 1052.88,1212.36 1053.46,1212.36 1054.05,1212.36 1054.64,1212.36 1055.22,1212.36 1055.81,1212.36 1056.39,1212.36 1056.98,1212.36 1057.57,1212.36 1058.15,1212.36 1058.74,1212.36 1059.33,1212.36 1059.91,1212.36 1060.5,1212.36 1061.09,1212.36 1061.67,1212.36 1062.26,1212.36 1062.85,1212.36 1063.43,1212.36 1064.02,1212.36 1064.6,1212.36 1065.19,1212.36 1065.78,1212.36 1066.36,1212.36 1066.95,1212.36 1067.54,1212.36 1068.12,1212.36 1068.71,1212.36 1069.3,1212.36 1069.88,1212.36 1070.47,1212.36 1071.06,1212.36 1071.64,1212.36 1072.23,1212.36 1072.81,1212.36 1073.4,1212.36 1073.99,1212.36 1074.57,1212.36 1075.16,1212.36 1075.75,1212.36 1076.33,1212.36 1076.92,1212.36 1077.51,1212.36 1078.09,1212.36 1078.68,1212.36 1079.26,1212.36 1079.85,1212.36 1080.44,1212.36 1081.02,1212.36 1081.61,1212.36 1082.2,1212.36 1082.78,1212.36 1083.37,1212.36 1083.96,1212.36 1084.54,1212.36 1085.13,1212.36 1085.72,1212.36 1086.3,1212.36 1086.89,1212.36 1087.47,1212.36 1088.06,1212.36 1088.65,1212.36 1089.23,1212.36 1089.82,1212.36 1090.41,1212.36 1090.99,1212.36 1091.58,1212.36 1092.17,1212.36 1092.75,1212.36 1093.34,1212.36 1093.93,1212.36 1094.51,1212.36 1095.1,1212.36 1095.68,1212.36 1096.27,1212.36 1096.86,1212.36 1097.44,1212.36 1098.03,1212.36 1098.62,1212.36 1099.2,1212.36 1099.79,1212.36 1100.38,1212.36 1100.96,1212.36 1101.55,1212.36 1102.14,1212.36 1102.72,1212.36 1103.31,1212.36 1103.89,1212.36 1104.48,1212.36 1105.07,1212.36 1105.65,1212.36 1106.24,1212.36 1106.83,1212.36 1107.41,1212.36 1108,1212.36 1108.59,1212.36 1109.17,1212.36 1109.76,1212.36 1110.34,1212.36 1110.93,1212.36 1111.52,1212.36 1112.1,1212.36 1112.69,1212.36 1113.28,1212.36 1113.86,1212.36 1114.45,1212.36 1115.04,1212.36 1115.62,1212.36 1116.21,1212.36 1116.8,1212.36 1117.38,1212.36 1117.97,1212.36 1118.55,1212.36 1119.14,1212.36 1119.73,1212.36 1120.31,1212.36 1120.9,1212.36 1121.49,1212.36 1122.07,1212.36 1122.66,1212.36 1123.25,1212.36 1123.83,1212.36 1124.42,1212.36 1125.01,1212.36 1125.59,1212.36 1126.18,1212.36 1126.76,1212.36 1127.35,1212.36 1127.94,1212.36 1128.52,1212.36 1129.11,1212.36 1129.7,1212.36 1130.28,1212.36 1130.87,1212.36 1131.46,1212.36 1132.04,1212.36 1132.63,1212.36 1133.21,1212.36 1133.8,1212.36 1134.39,1212.36 1134.97,1212.36 1135.56,1212.36 1136.15,1212.36 1136.73,1212.36 1137.32,1212.36 1137.91,1212.36 1138.49,1212.36 1139.08,1212.36 1139.67,1212.36 1140.25,1212.36 1140.84,1212.36 1141.42,1212.36 1142.01,1212.36 1142.6,1212.36 1143.18,1212.36 1143.77,1212.36 1144.36,1212.36 1144.94,1212.36 1145.53,1212.36 1146.12,1212.36 1146.7,1212.36 1147.29,1212.36 1147.88,1212.36 1148.46,1212.36 1149.05,1212.36 1149.63,1212.36 1150.22,1212.36 1150.81,1212.36 1151.39,1212.36 1151.98,1212.36 1152.57,1212.36 1153.15,1212.36 1153.74,1212.36 1154.33,1212.36 1154.91,1212.36 1155.5,1212.36 1156.09,1212.36 1156.67,1212.36 1157.26,1212.36 1157.84,1212.36 1158.43,1212.36 1159.02,1212.36 1159.6,1212.36 1160.19,1212.36 1160.78,1212.36 1161.36,1212.36 1161.95,1212.36 1162.54,1212.36 1163.12,1212.36 1163.71,1212.36 1164.29,1212.36 1164.88,1212.36 1165.47,1212.36 1166.05,1212.36 1166.64,1212.36 1167.23,1212.36 1167.81,1212.36 1168.4,1212.36 1168.99,1212.36 1169.57,1212.36 1170.16,1212.36 1170.75,1212.36 1171.33,1212.36 1171.92,1212.36 1172.5,1212.36 1173.09,1212.36 1173.68,1212.36 1174.26,1212.36 1174.85,1212.36 1175.44,1212.36 1176.02,1212.36 1176.61,1212.36 1177.2,1212.36 1177.78,1212.36 1178.37,1212.36 1178.96,1212.36 1179.54,1212.36 1180.13,1212.36 1180.71,1212.36 1181.3,1212.36 1181.89,1212.36 1182.47,1212.36 1183.06,1212.36 1183.65,1212.36 1184.23,1212.36 1184.82,1212.36 1185.41,1212.36 1185.99,1212.36 1186.58,1212.36 1187.16,1212.36 1187.75,1212.36 1188.34,1212.36 1188.92,1212.36 1189.51,1212.36 1190.1,1212.36 1190.68,1212.36 1191.27,1212.36 1191.86,1212.36 1192.44,1212.36 1193.03,1212.36 1193.62,1212.36 1194.2,1212.36 1194.79,1212.36 1195.37,1212.36 1195.96,1212.36 1196.55,1212.36 1197.13,1212.36 1197.72,1212.36 1198.31,1212.36 1198.89,1212.36 1199.48,1212.36 1200.07,1212.36 1200.65,1212.36 1201.24,1212.36 1201.83,1212.36 1202.41,1212.36 1203,1212.36 1203.58,1212.36 1204.17,1212.36 1204.76,1212.36 1205.34,1212.36 1205.93,1212.36 1206.52,1212.36 1207.1,1212.36 1207.69,1212.36 1208.28,1212.36 1208.86,1212.36 1209.45,1212.36 1210.03,1212.36 1210.62,1212.36 1211.21,1212.36 1211.79,1212.36 1212.38,1212.36 1212.97,1212.36 1213.55,1212.36 1214.14,1212.36 1214.73,1212.36 1215.31,1212.36 1215.9,1212.36 1216.49,1212.36 1217.07,1212.36 1217.66,1212.36 1218.24,1212.36 1218.83,1212.36 1219.42,1212.36 1220,1212.36 1220.59,1212.36 1221.18,1212.36 1221.76,1212.36 1222.35,1212.36 1222.94,1212.36 1223.52,1212.36 1224.11,1212.36 1224.7,1212.36 1225.28,1212.36 1225.87,1212.36 1226.45,1212.36 1227.04,1212.36 1227.63,1212.36 1228.21,1212.36 1228.8,1212.36 1229.39,1212.36 1229.97,1212.36 1230.56,1212.36 1231.15,1212.36 1231.73,1212.36 1232.32,1212.36 1232.91,1212.36 1233.49,1212.36 1234.08,1212.36 1234.66,1212.36 1235.25,1212.36 1235.84,1212.36 1236.42,1212.36 1237.01,1212.36 1237.6,1212.36 1238.18,1212.36 1238.77,1212.36 1239.36,1212.36 1239.94,1212.36 1240.53,1212.36 1241.11,1212.36 1241.7,1212.36 1242.29,1212.36 1242.87,1212.36 1243.46,1212.36 1244.05,1212.36 1244.63,1212.36 1245.22,1212.36 1245.81,1212.36 1246.39,1212.36 1246.98,1212.36 1247.57,1212.36 1248.15,1212.36 1248.74,1212.36 1249.32,1212.36 1249.91,1212.36 1250.5,1212.36 1251.08,1212.36 1251.67,1212.36 1252.26,1212.36 1252.84,1212.36 1253.43,1212.36 1254.02,1212.36 1254.6,1212.36 1255.19,1212.36 1255.78,1212.36 1256.36,1212.36 1256.95,1212.36 1257.53,1212.36 1258.12,1212.36 1258.71,1212.36 1259.29,1212.36 1259.88,1212.36 1260.47,1212.36 1261.05,1212.36 1261.64,1212.36 1262.23,1212.36 1262.81,1212.36 1263.4,1212.36 1263.98,1212.36 1264.57,1212.36 1265.16,1212.36 1265.74,1212.36 1266.33,1212.36 1266.92,1212.36 1267.5,1212.36 1268.09,1212.36 1268.68,1212.36 1269.26,1212.36 1269.85,1212.36 1270.44,1212.36 1271.02,1212.36 1271.61,1212.36 1272.19,1212.36 1272.78,1212.36 1273.37,1212.36 1273.95,1212.36 1274.54,1212.36 1275.13,1212.36 1275.71,1212.36 1276.3,1212.36 1276.89,1212.36 1277.47,1212.36 1278.06,1212.36 1278.65,1212.36 1279.23,1212.36 1279.82,1212.36 1280.4,1212.36 1280.99,1212.36 1281.58,1212.36 1282.16,1212.36 1282.75,1212.36 1283.34,1212.36 1283.92,1212.36 1284.51,1212.36 1285.1,1212.36 1285.68,1212.36 1286.27,1212.36 1286.86,1212.36 1287.44,1212.36 1288.03,1212.36 1288.61,1212.36 1289.2,1212.36 1289.79,1212.36 1290.37,1212.36 1290.96,1212.36 1291.55,1212.36 1292.13,1212.36 1292.72,1212.36 1293.31,1212.36 1293.89,1212.36 1294.48,1212.36 1295.06,1212.36 1295.65,1212.36 1296.24,1212.36 1296.82,1212.36 1297.41,1212.36 1298,1212.36 1298.58,1212.36 1299.17,1212.36 1299.76,1212.36 1300.34,1212.36 1300.93,1212.36 1301.52,1212.36 1302.1,1212.36 1302.69,1212.36 1303.27,1212.36 1303.86,1212.36 1304.45,1212.36 1305.03,1212.36 1305.62,1212.36 1306.21,1212.36 1306.79,1212.36 1307.38,1212.36 1307.97,1212.36 1308.55,1212.36 1309.14,1212.36 1309.73,1212.36 1310.31,1212.36 1310.9,1212.36 1311.48,1212.36 1312.07,1212.36 1312.66,1212.36 1313.24,1212.36 1313.83,1212.36 1314.42,1212.36 1315,1212.36 1315.59,1212.36 1316.18,1212.36 1316.76,1212.36 1317.35,1212.36 1317.93,1212.36 1318.52,1212.36 1319.11,1212.36 1319.69,1212.36 1320.28,1212.36 1320.87,1212.36 1321.45,1212.36 1322.04,1212.36 1322.63,1212.36 1323.21,1212.36 1323.8,1212.36 1324.39,1212.36 1324.97,1212.36 1325.56,1212.36 1326.14,1212.36 1326.73,1212.36 1327.32,1212.36 1327.9,1212.36 1328.49,1212.36 1329.08,1212.36 1329.66,1212.36 1330.25,1212.36 1330.84,1212.36 1331.42,1212.36 1332.01,1212.36 1332.6,1212.36 1333.18,1212.36 1333.77,1212.36 1334.35,1212.36 1334.94,1212.36 1335.53,1212.36 1336.11,1212.36 1336.7,1212.36 1337.29,1212.36 1337.87,1212.36 1338.46,1212.36 1339.05,1212.36 1339.63,1212.36 1340.22,1212.36 1340.8,1212.36 1341.39,1212.36 1341.98,1212.36 1342.56,1212.36 1343.15,1212.36 1343.74,1212.36 1344.32,1212.36 1344.91,1212.36 1345.5,1212.36 1346.08,1212.36 1346.67,1212.36 1347.26,1212.36 1347.84,1212.36 1348.43,1212.36 1349.01,1212.36 1349.6,1212.36 1350.19,1212.36 1350.77,1212.36 1351.36,1212.36 1351.95,1212.36 1352.53,1212.36 1353.12,1212.36 1353.71,1212.36 1354.29,1212.36 1354.88,1212.36 1355.47,1212.36 1356.05,1212.36 1356.64,1212.36 1357.22,1212.36 1357.81,1212.36 1358.4,1212.36 1358.98,1212.36 1359.57,1212.36 1360.16,1212.36 1360.74,1212.36 1361.33,1212.36 1361.92,1212.36 1362.5,1212.36 1363.09,1212.36 1363.68,1212.36 1364.26,1212.36 1364.85,1212.36 1365.43,1212.36 1366.02,1212.36 1366.61,1212.36 1367.19,1212.36 1367.78,1212.36 1368.37,1212.36 1368.95,1212.36 1369.54,1212.36 1370.13,1212.36 1370.71,1212.36 1371.3,1212.36 1371.88,1212.36 1372.47,1212.36 1373.06,1212.36 1373.64,1212.36 1374.23,1212.36 1374.82,1212.36 1375.4,1212.36 1375.99,1212.36 1376.58,1212.36 1377.16,1212.36 1377.75,1212.36 1378.34,1212.36 1378.92,1212.36 1379.51,1212.36 1380.09,1212.36 1380.68,1212.36 1381.27,1212.36 1381.85,1212.36 1382.44,1212.36 1383.03,1212.36 1383.61,1212.36 1384.2,1212.36 1384.79,1212.36 1385.37,1212.36 1385.96,1212.36 1386.55,1212.36 1387.13,1212.36 1387.72,1212.36 1388.3,1212.36 1388.89,1212.36 1389.48,1212.36 1390.06,1212.36 1390.65,1212.36 1391.24,1212.36 1391.82,1212.36 1392.41,1212.36 1393,1212.36 1393.58,1212.36 1394.17,1212.36 1394.75,1212.36 1395.34,1212.36 1395.93,1212.36 1396.51,1212.36 1397.1,1212.36 1397.69,1212.36 1398.27,1212.36 1398.86,1212.36 1399.45,1212.36 1400.03,1212.36 1400.62,1212.36 1401.21,1212.36 1401.79,1212.36 1402.38,1212.36 1402.96,1212.36 1403.55,1212.36 1404.14,1212.36 1404.72,1212.36 1405.31,1212.36 1405.9,1212.36 1406.48,1212.36 1407.07,1212.36 1407.66,1212.36 1408.24,1212.36 1408.83,1212.36 1409.42,1212.36 1410,1212.36 1410.59,1212.36 1411.17,1212.36 1411.76,1212.36 1412.35,1212.36 1412.93,1212.36 1413.52,1212.36 1414.11,1212.36 1414.69,1212.36 1415.28,1212.36 1415.87,1212.36 1416.45,1212.36 1417.04,1212.36 1417.63,1212.36 1418.21,1212.36 1418.8,1212.36 1419.38,1212.36 1419.97,1212.36 1420.56,1212.36 1421.14,1212.36 1421.73,1212.36 1422.32,1212.36 1422.9,1212.36 1423.49,1212.36 1424.08,1212.36 1424.66,1212.36 1425.25,1212.36 1425.83,1212.36 1426.42,1212.36 1427.01,1212.36 1427.59,1212.36 1428.18,1212.36 1428.77,1212.36 1429.35,1212.36 1429.94,1212.36 1430.53,1212.36 1431.11,1212.36 1431.7,1212.36 1432.29,1212.36 1432.87,1212.36 1433.46,1212.36 1434.04,1212.36 1434.63,1212.36 1435.22,1212.36 1435.8,1212.36 1436.39,1212.36 1436.98,1212.36 1437.56,1212.36 1438.15,1212.36 1438.74,1212.36 1439.32,1212.36 1439.91,1212.36 1440.5,1212.36 1441.08,1212.36 1441.67,1212.36 1442.25,1212.36 1442.84,1212.36 1443.43,1212.36 1444.01,1212.36 1444.6,1212.36 1445.19,1212.36 1445.77,1212.36 1446.36,1212.36 1446.95,1212.36 1447.53,1212.36 1448.12,1212.36 1448.7,1212.36 1449.29,1212.36 1449.88,1212.36 1450.46,1212.36 1451.05,1212.36 1451.64,1212.36 1452.22,1212.36 1452.81,1212.36 1453.4,1212.36 1453.98,1212.36 1454.57,1212.36 1455.16,1212.36 1455.74,1212.36 1456.33,1212.36 1456.91,1212.36 1457.5,1212.36 1458.09,1212.36 1458.67,1212.36 1459.26,1212.36 1459.85,1212.36 1460.43,1212.36 1461.02,1212.36 1461.61,1212.36 1462.19,1212.36 1462.78,1212.36 1463.37,1212.36 1463.95,1212.36 1464.54,1212.36 1465.12,1212.36 1465.71,1212.36 1466.3,1212.36 1466.88,1212.36 1467.47,1212.36 1468.06,1212.36 1468.64,1212.36 1469.23,1212.36 1469.82,1212.36 1470.4,1212.36 1470.99,1212.36 1471.57,1212.36 1472.16,1212.36 1472.75,1212.36 1473.33,1212.36 1473.92,1212.36 1474.51,1212.36 1475.09,1212.36 1475.68,1212.36 1476.27,1212.36 1476.85,1212.36 1477.44,1212.36 1478.03,1212.36 1478.61,1212.36 1479.2,1212.36 1479.78,1212.36 1480.37,1212.36 1480.96,1212.36 1481.54,1212.36 1482.13,1212.36 1482.72,1212.36 1483.3,1212.36 1483.89,1212.36 1484.48,1212.36 1485.06,1212.36 1485.65,1212.36 1486.24,1212.36 1486.82,1212.36 1487.41,1212.36 1487.99,1212.36 1488.58,1212.36 1489.17,1212.36 1489.75,1212.36 1490.34,1212.36 1490.93,1212.36 1491.51,1212.36 1492.1,1212.36 1492.69,1212.36 1493.27,1212.36 1493.86,1212.36 1494.45,1212.36 1495.03,1212.36 1495.62,1212.36 1496.2,1212.36 1496.79,1212.36 1497.38,1212.36 1497.96,1212.36 1498.55,1212.36 1499.14,1212.36 1499.72,1212.36 1500.31,1212.36 1500.9,1212.36 1501.48,1212.36 1502.07,1212.36 1502.65,1212.36 1503.24,1212.36 1503.83,1212.36 1504.41,1212.36 1505,1212.36 1505.59,1212.36 1506.17,1212.36 1506.76,1212.36 1507.35,1212.36 1507.93,1212.36 1508.52,1212.36 1509.11,1212.36 1509.69,1212.36 1510.28,1212.36 1510.86,1212.36 1511.45,1212.36 1512.04,1212.36 1512.62,1212.36 1513.21,1212.36 1513.8,1212.36 1514.38,1212.36 1514.97,1212.36 1515.56,1212.36 1516.14,1212.36 1516.73,1212.36 1517.32,1212.36 1517.9,1212.36 1518.49,1212.36 1519.07,1212.36 1519.66,1212.36 1520.25,1212.36 1520.83,1212.36 1521.42,1212.36 1522.01,1212.36 1522.59,1212.36 1523.18,1212.36 1523.77,1212.36 1524.35,1212.36 1524.94,1212.36 1525.52,1212.36 1526.11,1212.36 1526.7,1212.36 1527.28,1212.36 1527.87,1212.36 1528.46,1212.36 1529.04,1212.36 1529.63,1212.36 1530.22,1212.36 1530.8,1212.36 1531.39,1212.36 1531.98,1212.36 1532.56,1212.36 1533.15,1212.36 1533.73,1212.36 1534.32,1212.36 1534.91,1212.36 1535.49,1212.36 1536.08,1212.36 1536.67,1212.36 1537.25,1212.36 1537.84,1212.36 1538.43,1212.36 1539.01,1212.36 1539.6,1212.36 1540.19,1212.36 1540.77,1212.36 1541.36,1212.36 1541.94,1212.36 1542.53,1212.36 1543.12,1212.36 1543.7,1212.36 1544.29,1212.36 1544.88,1212.36 1545.46,1212.36 1546.05,1212.36 1546.64,1212.36 1547.22,1212.36 1547.81,1212.36 1548.4,1212.36 1548.98,1212.36 1549.57,1212.36 1550.15,1212.36 1550.74,1212.36 1551.33,1212.36 1551.91,1212.36 1552.5,1212.36 1553.09,1212.36 1553.67,1212.36 1554.26,1212.36 1554.85,1212.36 1555.43,1212.36 1556.02,1212.36 1556.6,1212.36 1557.19,1212.36 1557.78,1212.36 1558.36,1212.36 1558.95,1212.36 1559.54,1212.36 1560.12,1212.36 1560.71,1212.36 1561.3,1212.36 1561.88,1212.36 1562.47,1212.36 1563.06,1212.36 1563.64,1212.36 1564.23,1212.36 1564.81,1212.36 1565.4,1212.36 1565.99,1212.36 1566.57,1212.36 1567.16,1212.36 1567.75,1212.36 1568.33,1212.36 1568.92,1212.36 1569.51,1212.36 1570.09,1212.36 1570.68,1212.36 1571.27,1212.36 1571.85,1212.36 1572.44,1212.36 1573.02,1212.36 1573.61,1212.36 1574.2,1212.36 1574.78,1212.36 1575.37,1212.36 1575.96,1212.36 1576.54,1212.36 1577.13,1212.36 1577.72,1212.36 1578.3,1212.36 1578.89,1212.36 1579.47,1212.36 1580.06,1212.36 1580.65,1212.36 1581.23,1212.36 1581.82,1212.36 1582.41,1212.36 1582.99,1212.36 1583.58,1212.36 1584.17,1212.36 1584.75,1212.36 1585.34,1212.36 1585.93,1212.36 1586.51,1212.36 1587.1,1212.36 1587.68,1212.36 1588.27,1212.36 1588.86,1212.36 1589.44,1212.36 1590.03,1212.36 1590.62,1212.36 1591.2,1212.36 1591.79,1212.36 1592.38,1212.36 1592.96,1212.36 1593.55,1212.36 1594.14,1212.36 1594.72,1212.36 1595.31,1212.36 1595.89,1212.36 1596.48,1212.36 1597.07,1212.36 1597.65,1212.36 1598.24,1212.36 1598.83,1212.36 1599.41,1212.36 1600,1212.36 1600.59,1212.36 1601.17,1212.36 1601.76,1212.36 1602.34,1212.36 1602.93,1212.36 1603.52,1212.36 1604.1,1212.36 1604.69,1212.36 1605.28,1212.36 1605.86,1212.36 1606.45,1212.36 1607.04,1212.36 1607.62,1212.36 1608.21,1212.36 1608.8,1212.36 1609.38,1212.36 1609.97,1212.36 1610.55,1212.36 1611.14,1212.36 1611.73,1212.36 1612.31,1212.36 1612.9,1212.36 1613.49,1212.36 1614.07,1212.36 1614.66,1212.36 1615.25,1212.36 1615.83,1212.36 1616.42,1212.36 1617.01,1212.36 1617.59,1212.36 1618.18,1212.36 1618.76,1212.36 1619.35,1212.36 1619.94,1212.36 1620.52,1212.36 1621.11,1212.36 1621.7,1212.36 1622.28,1212.36 1622.87,1212.36 1623.46,1212.36 1624.04,1212.36 1624.63,1212.36 1625.22,1212.36 1625.8,1212.36 1626.39,1212.36 1626.97,1212.36 1627.56,1212.36 1628.15,1212.36 1628.73,1212.36 1629.32,1212.36 1629.91,1212.36 1630.49,1212.36 1631.08,1212.36 1631.67,1212.36 1632.25,1212.36 1632.84,1212.36 1633.42,1212.36 1634.01,1212.36 1634.6,1212.36 1635.18,1212.36 1635.77,1212.36 1636.36,1212.36 1636.94,1212.36 1637.53,1212.36 1638.12,1212.36 1638.7,1212.36 1639.29,1212.36 1639.88,1212.36 1640.46,1212.36 1641.05,1212.36 1641.63,1212.36 1642.22,1212.36 1642.81,1212.36 1643.39,1212.36 1643.98,1212.36 1644.57,1212.36 1645.15,1212.36 1645.74,1212.36 1646.33,1212.36 1646.91,1212.36 1647.5,1212.36 1648.09,1212.36 1648.67,1212.36 1649.26,1212.36 1649.84,1212.36 1650.43,1212.36 1651.02,1212.36 1651.6,1212.36 1652.19,1212.36 1652.78,1212.36 1653.36,1212.36 1653.95,1212.36 1654.54,1212.36 1655.12,1212.36 1655.71,1212.36 1656.29,1212.36 1656.88,1212.36 1657.47,1212.36 1658.05,1212.36 1658.64,1212.36 1659.23,1212.36 1659.81,1212.36 1660.4,1212.36 1660.99,1212.36 1661.57,1212.36 1662.16,1212.36 1662.75,1212.36 1663.33,1212.36 1663.92,1212.36 1664.5,1212.36 1665.09,1212.36 1665.68,1212.36 1666.26,1212.36 1666.85,1212.36 1667.44,1212.36 1668.02,1212.36 1668.61,1212.36 1669.2,1212.36 1669.78,1212.36 1670.37,1212.36 1670.96,1212.36 1671.54,1212.36 1672.13,1212.36 1672.71,1212.36 1673.3,1212.36 1673.89,1212.36 1674.47,1212.36 1675.06,1212.36 1675.65,1212.36 1676.23,1212.36 1676.82,1212.36 1677.41,1212.36 1677.99,1212.36 1678.58,1212.36 1679.17,1212.36 1679.75,1212.36 1680.34,1212.36 1680.92,1212.36 1681.51,1212.36 1682.1,1212.36 1682.68,1212.36 1683.27,1212.36 1683.86,1212.36 1684.44,1212.36 1685.03,1212.36 1685.62,1212.36 1686.2,1212.36 1686.79,1212.36 1687.37,1212.36 1687.96,1212.36 1688.55,1212.36 1689.13,1212.36 1689.72,1212.36 1690.31,1212.36 1690.89,1212.36 1691.48,1212.36 1692.07,1212.36 1692.65,1212.36 1693.24,1212.36 1693.83,1212.36 1694.41,1212.36 1695,1212.36 1695.58,1212.36 1696.17,1212.36 1696.76,1212.36 1697.34,1212.36 1697.93,1212.36 1698.52,1212.36 1699.1,1212.36 1699.69,1212.36 1700.28,1212.36 1700.86,1212.36 1701.45,1212.36 1702.04,1212.36 1702.62,1212.36 1703.21,1212.36 1703.79,1212.36 1704.38,1212.36 1704.97,1212.36 1705.55,1212.36 1706.14,1212.36 1706.73,1212.36 1707.31,1212.36 1707.9,1212.36 1708.49,1212.36 1709.07,1212.36 1709.66,1212.36 1710.24,1212.36 1710.83,1212.36 1711.42,1212.36 1712,1212.36 1712.59,1212.36 1713.18,1212.36 1713.76,1212.36 1714.35,1212.36 1714.94,1212.36 1715.52,1212.36 1716.11,1212.36 1716.7,1212.36 1717.28,1212.36 1717.87,1212.36 1718.45,1212.36 1719.04,1212.36 1719.63,1212.36 1720.21,1212.36 1720.8,1212.36 1721.39,1212.36 1721.97,1212.36 1722.56,1212.36 1723.15,1212.36 1723.73,1212.36 1724.32,1212.36 1724.91,1212.36 1725.49,1212.36 1726.08,1212.36 1726.66,1212.36 1727.25,1212.36 1727.84,1212.36 1728.42,1212.36 1729.01,1212.36 1729.6,1212.36 1730.18,1212.36 1730.77,1212.36 1731.36,1212.36 1731.94,1212.36 1732.53,1212.36 1733.11,1212.36 1733.7,1212.36 1734.29,1212.36 1734.87,1212.36 1735.46,1212.36 1736.05,1212.36 1736.63,1212.36 1737.22,1212.36 1737.81,1212.36 1738.39,1212.36 1738.98,1212.36 1739.57,1212.36 1740.15,1212.36 1740.74,1212.36 1741.32,1212.36 1741.91,1212.36 1742.5,1212.36 1743.08,1212.36 1743.67,1212.36 1744.26,1212.36 1744.84,1212.36 1745.43,1212.36 1746.02,1212.36 1746.6,1212.36 1747.19,1212.36 1747.78,1212.36 1748.36,1212.36 1748.95,1212.36 1749.53,1212.36 1750.12,1212.36 1750.71,1212.36 1751.29,1212.36 1751.88,1212.36 1752.47,1212.36 1753.05,1212.36 1753.64,1212.36 1754.23,1212.36 1754.81,1212.36 1755.4,1212.36 1755.99,1212.36 1756.57,1212.36 1757.16,1212.36 1757.74,1212.36 1758.33,1212.36 1758.92,1212.36 1759.5,1212.36 1760.09,1212.36 1760.68,1212.36 1761.26,1212.36 1761.85,1212.36 1762.44,1212.36 1763.02,1212.36 1763.61,1212.36 1764.19,1212.36 1764.78,1212.36 1765.37,1212.36 1765.95,1212.36 1766.54,1212.36 1767.13,1212.36 1767.71,1212.36 1768.3,1212.36 1768.89,1212.36 1769.47,1212.36 1770.06,1212.36 1770.65,1212.36 1771.23,1212.36 1771.82,1212.36 1772.4,1212.36 1772.99,1212.36 1773.58,1212.36 1774.16,1212.36 1774.75,1212.36 1775.34,1212.36 1775.92,1212.36 1776.51,1212.36 1777.1,1212.36 1777.68,1212.36 1778.27,1212.36 1778.86,1212.36 1779.44,1212.36 1780.03,1212.36 1780.61,1212.36 1781.2,1212.36 1781.79,1212.36 1782.37,1212.36 1782.96,1212.36 1783.55,1212.36 1784.13,1212.36 1784.72,1212.36 1785.31,1212.36 1785.89,1212.36 1786.48,1212.36 1787.06,1212.36 1787.65,1212.36 1788.24,1212.36 1788.82,1212.36 1789.41,1212.36 1790,1212.36 1790.58,1212.36 1791.17,1212.36 1791.76,1212.36 1792.34,1212.36 1792.93,1212.36 1793.52,1212.36 1794.1,1212.36 1794.69,1212.36 1795.27,1212.36 1795.86,1212.36 1796.45,1212.36 1797.03,1212.36 1797.62,1212.36 1798.21,1212.36 1798.79,1212.36 1799.38,1212.36 1799.97,1212.36 1800.55,1212.36 1801.14,1212.36 1801.73,1212.36 1802.31,1212.36 1802.9,1212.36 1803.48,1212.36 1804.07,1212.36 1804.66,1212.36 1805.24,1212.36 1805.83,1212.36 1806.42,1212.36 1807,1212.36 1807.59,1212.36 1808.18,1212.36 1808.76,1212.36 1809.35,1212.36 1809.94,1212.36 1810.52,1212.36 1811.11,1212.36 1811.69,1212.36 1812.28,1212.36 1812.87,1212.36 1813.45,1212.36 1814.04,1212.36 1814.63,1212.36 1815.21,1212.36 1815.8,1212.36 1816.39,1212.36 1816.97,1212.36 1817.56,1212.36 1818.14,1212.36 1818.73,1212.36 1819.32,1212.36 1819.9,1212.36 1820.49,1212.36 1821.08,1212.36 1821.66,1212.36 1822.25,1212.36 1822.84,1212.36 1823.42,1212.36 1824.01,1212.36 1824.6,1212.36 1825.18,1212.36 1825.77,1212.36 1826.35,1212.36 1826.94,1212.36 1827.53,1212.36 1828.11,1212.36 1828.7,1212.36 1829.29,1212.36 1829.87,1212.36 1830.46,1212.36 1831.05,1212.36 1831.63,1212.36 1832.22,1212.36 1832.81,1212.36 1833.39,1212.36 1833.98,1212.36 1834.56,1212.36 1835.15,1212.36 1835.74,1212.36 1836.32,1212.36 1836.91,1212.36 1837.5,1212.36 1838.08,1212.36 1838.67,1212.36 1839.26,1212.36 1839.84,1212.36 1840.43,1212.36 1841.01,1212.36 1841.6,1212.36 1842.19,1212.36 1842.77,1212.36 1843.36,1212.36 1843.95,1212.36 1844.53,1212.36 1845.12,1212.36 1845.71,1212.36 1846.29,1212.36 1846.88,1212.36 1847.47,1212.36 1848.05,1212.36 1848.64,1212.36 1849.22,1212.36 1849.81,1212.36 1850.4,1212.36 1850.98,1212.36 1851.57,1212.36 1852.16,1212.36 1852.74,1212.36 1853.33,1212.36 1853.92,1212.36 1854.5,1212.36 1855.09,1212.36 1855.68,1212.36 1856.26,1212.36 1856.85,1212.36 1857.43,1212.36 1858.02,1212.36 1858.61,1212.36 1859.19,1212.36 1859.78,1212.36 1860.37,1212.36 1860.95,1212.36 1861.54,1212.36 1862.13,1212.36 1862.71,1212.36 1863.3,1212.36 1863.88,1212.36 1864.47,1212.36 1865.06,1212.36 1865.64,1212.36 1866.23,1212.36 1866.82,1212.36 1867.4,1212.36 1867.99,1212.36 1868.58,1212.36 1869.16,1212.36 1869.75,1212.36 1870.34,1212.36 1870.92,1212.36 1871.51,1212.36 1872.09,1212.36 1872.68,1212.36 1873.27,1212.36 1873.85,1212.36 1874.44,1212.36 1875.03,1212.36 1875.61,1212.36 1876.2,1212.36 1876.79,1212.36 1877.37,1212.36 1877.96,1212.36 1878.55,1212.36 1879.13,1212.36 1879.72,1212.36 1880.3,1212.36 1880.89,1212.36 1881.48,1212.36 1882.06,1212.36 1882.65,1212.36 1883.24,1212.36 1883.82,1212.36 1884.41,1212.36 1885,1212.36 1885.58,1212.36 1886.17,1212.36 1886.76,1212.36 1887.34,1212.36 1887.93,1212.36 1888.51,1212.36 1889.1,1212.36 1889.69,1212.36 1890.27,1212.36 1890.86,1212.36 1891.45,1212.36 1892.03,1212.36 1892.62,1212.36 1893.21,1212.36 1893.79,1212.36 1894.38,1212.36 1894.96,1212.36 1895.55,1212.36 1896.14,1212.36 1896.72,1212.36 1897.31,1212.36 1897.9,1212.36 1898.48,1212.36 1899.07,1212.36 1899.66,1212.36 1900.24,1212.36 1900.83,1212.36 1901.42,1212.36 1902,1212.36 1902.59,1212.36 1903.17,1212.36 1903.76,1212.36 1904.35,1212.36 1904.93,1212.36 1905.52,1212.36 1906.11,1212.36 1906.69,1212.36 1907.28,1212.36 1907.87,1212.36 1908.45,1212.36 1909.04,1212.36 1909.63,1212.36 1910.21,1212.36 1910.8,1212.36 1911.38,1212.36 1911.97,1212.36 1912.56,1212.36 1913.14,1212.36 1913.73,1212.36 1914.32,1212.36 1914.9,1212.36 1915.49,1212.36 1916.08,1212.36 1916.66,1212.36 1917.25,1212.36 1917.83,1212.36 1918.42,1212.36 1919.01,1212.36 1919.59,1212.36 1920.18,1212.36 1920.77,1212.36 1921.35,1212.36 1921.94,1212.36 1922.53,1212.36 1923.11,1212.36 1923.7,1212.36 1924.29,1212.36 1924.87,1212.36 1925.46,1212.36 1926.04,1212.36 1926.63,1212.36 1927.22,1212.36 1927.8,1212.36 1928.39,1212.36 1928.98,1212.36 1929.56,1212.36 1930.15,1212.36 1930.74,1212.36 1931.32,1212.36 1931.91,1212.36 1932.5,1212.36 1933.08,1212.36 1933.67,1212.36 1934.25,1212.36 1934.84,1212.36 1935.43,1212.36 1936.01,1212.36 1936.6,1212.36 1937.19,1212.36 1937.77,1212.36 1938.36,1212.36 1938.95,1212.36 1939.53,1212.36 1940.12,1212.36 1940.71,1212.36 1941.29,1212.36 1941.88,1212.36 1942.46,1212.36 1943.05,1212.36 1943.64,1212.36 1944.22,1212.36 1944.81,1212.36 1945.4,1212.36 1945.98,1212.36 1946.57,1212.36 1947.16,1212.36 1947.74,1212.36 1948.33,1212.36 1948.91,1212.36 1949.5,1212.36 1950.09,1212.36 1950.67,1212.36 1951.26,1212.36 1951.85,1212.36 1952.43,1212.36 1953.02,1212.36 1953.61,1212.36 1954.19,1212.36 1954.78,1212.36 1955.37,1212.36 1955.95,1212.36 1956.54,1212.36 1957.12,1212.36 1957.71,1212.36 1958.3,1212.36 1958.88,1212.36 1959.47,1212.36 1960.06,1212.36 1960.64,1212.36 1961.23,1212.36 1961.82,1212.36 1962.4,1212.36 1962.99,1212.36 1963.58,1212.36 1964.16,1212.36 1964.75,1212.36 1965.33,1212.36 1965.92,1212.36 1966.51,1212.36 1967.09,1212.36 1967.68,1212.36 1968.27,1212.36 1968.85,1212.36 1969.44,1212.36 1970.03,1212.36 1970.61,1212.36 1971.2,1212.36 1971.78,1212.36 1972.37,1212.36 1972.96,1212.36 1973.54,1212.36 1974.13,1212.36 1974.72,1212.36 1975.3,1212.36 1975.89,1212.36 1976.48,1212.36 1977.06,1212.36 1977.65,1212.36 1978.24,1212.36 1978.82,1212.36 1979.41,1212.36 1979.99,1212.36 1980.58,1212.36 1981.17,1212.36 1981.75,1212.36 1982.34,1212.36 1982.93,1212.36 1983.51,1212.36 1984.1,1212.36 1984.69,1212.36 1985.27,1212.36 1985.86,1212.36 1986.45,1212.36 1987.03,1212.36 1987.62,1212.36 1988.2,1212.36 1988.79,1212.36 1989.38,1212.36 1989.96,1212.36 1990.55,1212.36 1991.14,1212.36 1991.72,1212.36 1992.31,1212.36 1992.9,1212.36 1993.48,1212.36 1994.07,1212.36 1994.65,1212.36 1995.24,1212.36 1995.83,1212.36 1996.41,1212.36 1997,1212.36 1997.59,1212.36 1998.17,1212.36 1998.76,1212.36 1999.35,1212.36 1999.93,1212.36 2000.52,1212.36 2001.11,1212.36 2001.69,1212.36 2002.28,1212.36 2002.86,1212.36 2003.45,1212.36 2004.04,1212.36 2004.62,1212.36 2005.21,1212.36 2005.8,1212.36 2006.38,1212.36 2006.97,1212.36 2007.56,1212.36 2008.14,1212.36 2008.73,1212.36 2009.32,1212.36 2009.9,1212.36 2010.49,1212.36 2011.07,1212.36 2011.66,1212.36 2012.25,1212.36 2012.83,1212.36 2013.42,1212.36 2014.01,1212.36 2014.59,1212.36 2015.18,1212.36 2015.77,1212.36 2016.35,1212.36 2016.94,1212.36 2017.53,1212.36 2018.11,1212.36 2018.7,1212.36 2019.28,1212.36 2019.87,1212.36 2020.46,1212.36 2021.04,1212.36 2021.63,1212.36 2022.22,1212.36 2022.8,1212.36 2023.39,1212.36 2023.98,1212.36 2024.56,1212.36 2025.15,1212.36 2025.73,1212.36 2026.32,1212.36 2026.91,1212.36 2027.49,1212.36 2028.08,1212.36 2028.67,1212.36 2029.25,1212.36 2029.84,1212.36 2030.43,1212.36 2031.01,1212.36 2031.6,1212.36 2032.19,1212.36 2032.77,1212.36 2033.36,1212.36 2033.94,1212.36 2034.53,1212.36 2035.12,1212.36 2035.7,1212.36 2036.29,1212.36 2036.88,1212.36 2037.46,1212.36 2038.05,1212.36 2038.64,1212.36 2039.22,1212.36 2039.81,1212.36 2040.4,1212.36 2040.98,1212.36 2041.57,1212.36 2042.15,1212.36 2042.74,1212.36 2043.33,1212.36 2043.91,1212.36 2044.5,1212.36 2045.09,1212.36 2045.67,1212.36 2046.26,1212.36 2046.85,1212.36 2047.43,1212.36 2048.02,1212.36 2048.6,1212.36 2049.19,1212.36 2049.78,1212.36 2050.36,1212.36 2050.95,1212.36 2051.54,1212.36 2052.12,1212.36 2052.71,1212.36 2053.3,1212.36 2053.88,1212.36 2054.47,1212.36 2055.06,1212.36 2055.64,1212.36 2056.23,1212.36 2056.81,1212.36 2057.4,1212.36 2057.99,1212.36 2058.57,1212.36 2059.16,1212.36 2059.75,1212.36 2060.33,1212.36 2060.92,1212.36 2061.51,1212.36 2062.09,1212.36 2062.68,1212.36 2063.27,1212.36 2063.85,1212.36 2064.44,1212.36 2065.02,1212.36 2065.61,1212.36 2066.2,1212.36 2066.78,1212.36 2067.37,1212.36 2067.96,1212.36 2068.54,1212.36 2069.13,1212.36 2069.72,1212.36 2070.3,1212.36 2070.89,1212.36 2071.48,1212.36 2072.06,1212.36 2072.65,1212.36 2073.23,1212.36 2073.82,1212.36 2074.41,1212.36 2074.99,1212.36 2075.58,1212.36 2076.17,1212.36 2076.75,1212.36 2077.34,1212.36 2077.93,1212.36 2078.51,1212.36 2079.1,1212.36 2079.68,1212.36 2080.27,1212.36 2080.86,1212.36 2081.44,1212.36 2082.03,1212.36 2082.62,1212.36 2083.2,1212.36 2083.79,1212.36 2084.38,1212.36 2084.96,1212.36 2085.55,1212.36 2086.14,1212.36 2086.72,1212.36 2087.31,1212.36 2087.89,1212.36 2088.48,1212.36 2089.07,1212.36 2089.65,1212.36 2090.24,1212.36 2090.83,1212.36 2091.41,1212.36 2092,1212.36 2092.59,1212.36 2093.17,1212.36 2093.76,1212.36 2094.35,1212.36 2094.93,1212.36 2095.52,1212.36 2096.1,1212.36 2096.69,1212.36 2097.28,1212.36 2097.86,1212.36 2098.45,1212.36 2099.04,1212.36 2099.62,1212.36 2100.21,1212.36 2100.8,1212.36 2101.38,1212.36 2101.97,1212.36 2102.55,1212.36 2103.14,1212.36 2103.73,1212.36 2104.31,1212.36 2104.9,1212.36 2105.49,1212.36 2106.07,1212.36 2106.66,1212.36 2107.25,1212.36 2107.83,1212.36 2108.42,1212.36 2109.01,1212.36 2109.59,1212.36 2110.18,1212.36 2110.76,1212.36 2111.35,1212.36 2111.94,1212.36 2112.52,1212.36 2113.11,1212.36 2113.7,1212.36 2114.28,1212.36 2114.87,1212.36 2115.46,1212.36 2116.04,1212.36 2116.63,1212.36 2117.22,1212.36 2117.8,1212.36 2118.39,1212.36 2118.97,1212.36 2119.56,1212.36 2120.15,1212.36 2120.73,1212.36 2121.32,1212.36 2121.91,1212.36 2122.49,1212.36 2123.08,1212.36 2123.67,1212.36 2124.25,1212.36 2124.84,1212.36 2125.42,1212.36 2126.01,1212.36 2126.6,1212.36 2127.18,1212.36 2127.77,1212.36 2128.36,1212.36 2128.94,1212.36 2129.53,1212.36 2130.12,1212.36 2130.7,1212.36 2131.29,1212.36 2131.88,1212.36 2132.46,1212.36 2133.05,1212.36 2133.63,1212.36 2134.22,1212.36 2134.81,1212.36 2135.39,1212.36 2135.98,1212.36 2136.57,1212.36 2137.15,1212.36 2137.74,1212.36 2138.33,1212.36 2138.91,1212.36 2139.5,1212.36 2140.09,1212.36 2140.67,1212.36 2141.26,1212.36 2141.84,1212.36 2142.43,1212.36 2143.02,1212.36 2143.6,1212.36 2144.19,1212.36 2144.78,1212.36 2145.36,1212.36 2145.95,1212.36 2146.54,1212.36 2147.12,1212.36 2147.71,1212.36 2148.3,1212.36 2148.88,1212.36 2149.47,1212.36 2150.05,1212.36 2150.64,1212.36 2151.23,1212.36 2151.81,1212.36 2152.4,1212.36 2152.99,1212.36 2153.57,1212.36 2154.16,1212.36 2154.75,1212.36 2155.33,1212.36 2155.92,1212.36 2156.5,1212.36 2157.09,1212.36 2157.68,1212.36 2158.26,1212.36 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1212.28 L986.612 1212.28 L987.198 1212.28 L987.785 1212.28 L988.371 1212.28 L988.957 1212.28 L989.544 1212.28 L990.13 1212.28 L990.717 1212.28 L991.303 1212.28 L991.889 1212.28 L992.476 1212.28 L993.062 1212.28 L993.649 1212.28 L994.235 1212.28 L994.822 1212.28 L995.408 1212.28 L995.994 1212.28 L996.581 1212.28 L997.167 1212.28 L997.754 1212.28 L998.34 1212.28 L998.926 1212.28 L999.513 1212.28 L1000.1 1212.28 L1000.69 1212.28 L1001.27 1212.28 L1001.86 1212.28 L1002.44 1212.28 L1003.03 1212.28 L1003.62 1212.28 L1004.2 1212.28 L1004.79 1212.28 L1005.38 1212.28 L1005.96 1212.28 L1006.55 1212.28 L1007.14 1212.28 L1007.72 1212.28 L1008.31 1212.28 L1008.9 1212.28 L1009.48 1212.28 L1010.07 1212.28 L1010.65 1212.28 L1011.24 1212.28 L1011.83 1212.28 L1012.41 1212.28 L1013 1212.28 L1013.59 1212.28 L1014.17 1212.28 L1014.76 1212.28 L1015.35 1212.28 L1015.93 1212.28 L1016.52 1212.28 L1017.11 1212.28 L1017.69 1212.28 L1018.28 1212.28 L1018.86 1212.28 L1019.45 1212.28 L1020.04 1212.28 L1020.62 1212.28 L1021.21 1212.28 L1021.8 1212.28 L1022.38 1212.28 L1022.97 1212.28 L1023.56 1212.28 L1024.14 1212.28 L1024.73 1212.28 L1025.32 1212.28 L1025.9 1212.28 L1026.49 1212.28 L1027.07 1212.28 L1027.66 1212.28 L1028.25 1212.28 L1028.83 1212.28 L1029.42 1212.28 L1030.01 1212.28 L1030.59 1212.28 L1031.18 1212.28 L1031.77 1212.28 L1032.35 1212.28 L1032.94 1212.28 L1033.52 1212.28 L1034.11 1212.28 L1034.7 1212.28 L1035.28 1212.28 L1035.87 1212.28 L1036.46 1212.28 L1037.04 1212.28 L1037.63 1212.28 L1038.22 1212.28 L1038.8 1212.28 L1039.39 1212.28 L1039.98 1212.28 L1040.56 1212.28 L1041.15 1212.28 L1041.73 1212.28 L1042.32 1212.28 L1042.91 1212.28 L1043.49 1212.28 L1044.08 1212.28 L1044.67 1212.28 L1045.25 1212.28 L1045.84 1212.28 L1046.43 1212.28 L1047.01 1212.28 L1047.6 1212.28 L1048.19 1212.28 L1048.77 1212.28 L1049.36 1212.28 L1049.94 1212.28 L1050.53 1212.28 L1051.12 1212.28 L1051.7 1212.28 L1052.29 1212.28 L1052.88 1212.28 L1053.46 1212.28 L1054.05 1212.28 L1054.64 1212.28 L1055.22 1212.28 L1055.81 1212.28 L1056.39 1212.28 L1056.98 1212.28 L1057.57 1212.28 L1058.15 1212.28 L1058.74 1212.28 L1059.33 1212.28 L1059.91 1212.28 L1060.5 1212.28 L1061.09 1212.28 L1061.67 1212.28 L1062.26 1212.28 L1062.85 1212.28 L1063.43 1212.28 L1064.02 1212.28 L1064.6 1212.28 L1065.19 1212.28 L1065.78 1212.28 L1066.36 1212.28 L1066.95 1212.28 L1067.54 1212.28 L1068.12 1212.28 L1068.71 1212.28 L1069.3 1212.28 L1069.88 1212.28 L1070.47 1212.28 L1071.06 1212.28 L1071.64 1212.28 L1072.23 1212.28 L1072.81 1212.28 L1073.4 1212.28 L1073.99 1212.28 L1074.57 1212.28 L1075.16 1212.28 L1075.75 1212.28 L1076.33 1212.28 L1076.92 1212.28 L1077.51 1212.28 L1078.09 1212.28 L1078.68 1212.28 L1079.26 1212.28 L1079.85 1212.28 L1080.44 1212.28 L1081.02 1212.28 L1081.61 1212.28 L1082.2 1212.28 L1082.78 1212.28 L1083.37 1212.28 L1083.96 1212.28 L1084.54 1212.28 L1085.13 1212.28 L1085.72 1212.28 L1086.3 1212.28 L1086.89 1212.28 L1087.47 1212.28 L1088.06 1212.28 L1088.65 1212.28 L1089.23 1212.28 L1089.82 1212.28 L1090.41 1212.28 L1090.99 1212.28 L1091.58 1212.28 L1092.17 1212.28 L1092.75 1212.28 L1093.34 1212.28 L1093.93 1212.28 L1094.51 1212.28 L1095.1 1212.28 L1095.68 1212.28 L1096.27 1212.28 L1096.86 1212.28 L1097.44 1212.28 L1098.03 1212.28 L1098.62 1212.28 L1099.2 1212.28 L1099.79 1212.28 L1100.38 1212.28 L1100.96 1212.28 L1101.55 1212.28 L1102.14 1212.28 L1102.72 1212.28 L1103.31 1212.28 L1103.89 1212.28 L1104.48 1212.28 L1105.07 1212.28 L1105.65 1212.28 L1106.24 1212.28 L1106.83 1212.28 L1107.41 1212.28 L1108 1212.28 L1108.59 1212.28 L1109.17 1212.28 L1109.76 1212.28 L1110.34 1212.28 L1110.93 1212.28 L1111.52 1212.28 L1112.1 1212.28 L1112.69 1212.28 L1113.28 1212.28 L1113.86 1212.28 L1114.45 1212.28 L1115.04 1212.28 L1115.62 1212.28 L1116.21 1212.28 L1116.8 1212.28 L1117.38 1212.28 L1117.97 1212.28 L1118.55 1212.28 L1119.14 1212.28 L1119.73 1212.28 L1120.31 1212.28 L1120.9 1212.28 L1121.49 1212.28 L1122.07 1212.28 L1122.66 1212.28 L1123.25 1212.28 L1123.83 1212.28 L1124.42 1212.28 L1125.01 1212.28 L1125.59 1212.28 L1126.18 1212.28 L1126.76 1212.28 L1127.35 1212.28 L1127.94 1212.28 L1128.52 1212.28 L1129.11 1212.28 L1129.7 1212.28 L1130.28 1212.28 L1130.87 1212.28 L1131.46 1212.28 L1132.04 1212.28 L1132.63 1212.28 L1133.21 1212.28 L1133.8 1212.28 L1134.39 1212.28 L1134.97 1212.28 L1135.56 1212.28 L1136.15 1212.28 L1136.73 1212.28 L1137.32 1212.28 L1137.91 1212.28 L1138.49 1212.28 L1139.08 1212.28 L1139.67 1212.28 L1140.25 1212.28 L1140.84 1212.28 L1141.42 1212.28 L1142.01 1212.28 L1142.6 1212.28 L1143.18 1212.28 L1143.77 1212.28 L1144.36 1212.28 L1144.94 1212.28 L1145.53 1212.28 L1146.12 1212.28 L1146.7 1212.28 L1147.29 1212.28 L1147.88 1212.28 L1148.46 1212.28 L1149.05 1212.28 L1149.63 1212.28 L1150.22 1212.28 L1150.81 1212.28 L1151.39 1212.28 L1151.98 1212.28 L1152.57 1212.28 L1153.15 1212.28 L1153.74 1212.28 L1154.33 1212.28 L1154.91 1212.28 L1155.5 1212.28 L1156.09 1212.28 L1156.67 1212.28 L1157.26 1212.28 L1157.84 1212.28 L1158.43 1212.28 L1159.02 1212.28 L1159.6 1212.28 L1160.19 1212.28 L1160.78 1212.28 L1161.36 1212.28 L1161.95 1212.28 L1162.54 1212.28 L1163.12 1212.28 L1163.71 1212.28 L1164.29 1212.28 L1164.88 1212.28 L1165.47 1212.28 L1166.05 1212.28 L1166.64 1212.28 L1167.23 1212.28 L1167.81 1212.28 L1168.4 1212.28 L1168.99 1212.28 L1169.57 1212.28 L1170.16 1212.28 L1170.75 1212.28 L1171.33 1212.28 L1171.92 1212.28 L1172.5 1212.28 L1173.09 1212.28 L1173.68 1212.28 L1174.26 1212.28 L1174.85 1212.28 L1175.44 1212.28 L1176.02 1212.28 L1176.61 1212.28 L1177.2 1212.28 L1177.78 1212.28 L1178.37 1212.28 L1178.96 1212.28 L1179.54 1212.28 L1180.13 1212.28 L1180.71 1212.28 L1181.3 1212.28 L1181.89 1212.28 L1182.47 1212.28 L1183.06 1212.28 L1183.65 1212.28 L1184.23 1212.28 L1184.82 1212.28 L1185.41 1212.28 L1185.99 1212.28 L1186.58 1212.28 L1187.16 1212.28 L1187.75 1212.28 L1188.34 1212.28 L1188.92 1212.28 L1189.51 1212.28 L1190.1 1212.28 L1190.68 1212.28 L1191.27 1212.28 L1191.86 1212.28 L1192.44 1212.28 L1193.03 1212.28 L1193.62 1212.28 L1194.2 1212.28 L1194.79 1212.28 L1195.37 1212.28 L1195.96 1212.28 L1196.55 1212.28 L1197.13 1212.28 L1197.72 1212.28 L1198.31 1212.28 L1198.89 1212.28 L1199.48 1212.28 L1200.07 1212.28 L1200.65 1212.28 L1201.24 1212.28 L1201.83 1212.28 L1202.41 1212.28 L1203 1212.28 L1203.58 1212.28 L1204.17 1212.28 L1204.76 1212.28 L1205.34 1212.28 L1205.93 1212.28 L1206.52 1212.28 L1207.1 1212.28 L1207.69 1212.28 L1208.28 1212.28 L1208.86 1212.28 L1209.45 1212.28 L1210.03 1212.28 L1210.62 1212.28 L1211.21 1212.28 L1211.79 1212.28 L1212.38 1212.28 L1212.97 1212.28 L1213.55 1212.28 L1214.14 1212.28 L1214.73 1212.28 L1215.31 1212.28 L1215.9 1212.28 L1216.49 1212.28 L1217.07 1212.28 L1217.66 1212.28 L1218.24 1212.28 L1218.83 1212.28 L1219.42 1212.28 L1220 1212.28 L1220.59 1212.28 L1221.18 1212.28 L1221.76 1212.28 L1222.35 1212.28 L1222.94 1212.28 L1223.52 1212.28 L1224.11 1212.28 L1224.7 1212.28 L1225.28 1212.28 L1225.87 1212.28 L1226.45 1212.28 L1227.04 1212.28 L1227.63 1212.28 L1228.21 1212.28 L1228.8 1212.28 L1229.39 1212.28 L1229.97 1212.28 L1230.56 1212.28 L1231.15 1212.28 L1231.73 1212.28 L1232.32 1212.28 L1232.91 1212.28 L1233.49 1212.28 L1234.08 1212.28 L1234.66 1212.28 L1235.25 1212.28 L1235.84 1212.28 L1236.42 1212.28 L1237.01 1212.28 L1237.6 1212.28 L1238.18 1212.28 L1238.77 1212.28 L1239.36 1212.28 L1239.94 1212.28 L1240.53 1212.28 L1241.11 1212.28 L1241.7 1212.28 L1242.29 1212.28 L1242.87 1212.28 L1243.46 1212.28 L1244.05 1212.28 L1244.63 1212.28 L1245.22 1212.28 L1245.81 1212.28 L1246.39 1212.28 L1246.98 1212.28 L1247.57 1212.28 L1248.15 1212.28 L1248.74 1212.28 L1249.32 1212.28 L1249.91 1212.28 L1250.5 1212.28 L1251.08 1212.28 L1251.67 1212.28 L1252.26 1212.28 L1252.84 1212.28 L1253.43 1212.28 L1254.02 1212.28 L1254.6 1212.28 L1255.19 1212.28 L1255.78 1212.28 L1256.36 1212.28 L1256.95 1212.28 L1257.53 1212.28 L1258.12 1212.28 L1258.71 1212.28 L1259.29 1212.28 L1259.88 1212.28 L1260.47 1212.28 L1261.05 1212.28 L1261.64 1212.28 L1262.23 1212.28 L1262.81 1212.28 L1263.4 1212.28 L1263.98 1212.28 L1264.57 1212.28 L1265.16 1212.28 L1265.74 1212.28 L1266.33 1212.28 L1266.92 1212.28 L1267.5 1212.28 L1268.09 1212.28 L1268.68 1212.28 L1269.26 1212.28 L1269.85 1212.28 L1270.44 1212.28 L1271.02 1212.28 L1271.61 1212.28 L1272.19 1212.28 L1272.78 1212.28 L1273.37 1212.28 L1273.95 1212.28 L1274.54 1212.28 L1275.13 1212.28 L1275.71 1212.28 L1276.3 1212.28 L1276.89 1212.28 L1277.47 1212.28 L1278.06 1212.28 L1278.65 1212.28 L1279.23 1212.28 L1279.82 1212.28 L1280.4 1212.28 L1280.99 1212.28 L1281.58 1212.28 L1282.16 1212.28 L1282.75 1212.28 L1283.34 1212.28 L1283.92 1212.28 L1284.51 1212.28 L1285.1 1212.28 L1285.68 1212.28 L1286.27 1212.28 L1286.86 1212.28 L1287.44 1212.28 L1288.03 1212.28 L1288.61 1212.28 L1289.2 1212.28 L1289.79 1212.28 L1290.37 1212.28 L1290.96 1212.28 L1291.55 1212.28 L1292.13 1212.28 L1292.72 1212.28 L1293.31 1212.28 L1293.89 1212.28 L1294.48 1212.28 L1295.06 1212.28 L1295.65 1212.28 L1296.24 1212.28 L1296.82 1212.28 L1297.41 1212.28 L1298 1212.28 L1298.58 1212.28 L1299.17 1212.28 L1299.76 1212.28 L1300.34 1212.28 L1300.93 1212.28 L1301.52 1212.28 L1302.1 1212.28 L1302.69 1212.28 L1303.27 1212.28 L1303.86 1212.28 L1304.45 1212.28 L1305.03 1212.28 L1305.62 1212.28 L1306.21 1212.28 L1306.79 1212.28 L1307.38 1212.28 L1307.97 1212.28 L1308.55 1212.28 L1309.14 1212.28 L1309.73 1212.28 L1310.31 1212.28 L1310.9 1212.28 L1311.48 1212.28 L1312.07 1212.28 L1312.66 1212.28 L1313.24 1212.28 L1313.83 1212.28 L1314.42 1212.28 L1315 1212.28 L1315.59 1212.28 L1316.18 1212.28 L1316.76 1212.28 L1317.35 1212.28 L1317.93 1212.28 L1318.52 1212.28 L1319.11 1212.28 L1319.69 1212.28 L1320.28 1212.28 L1320.87 1212.28 L1321.45 1212.28 L1322.04 1212.28 L1322.63 1212.28 L1323.21 1212.28 L1323.8 1212.28 L1324.39 1212.28 L1324.97 1212.28 L1325.56 1212.28 L1326.14 1212.28 L1326.73 1212.28 L1327.32 1212.28 L1327.9 1212.28 L1328.49 1212.28 L1329.08 1212.28 L1329.66 1212.28 L1330.25 1212.28 L1330.84 1212.28 L1331.42 1212.28 L1332.01 1212.28 L1332.6 1212.28 L1333.18 1212.28 L1333.77 1212.28 L1334.35 1212.28 L1334.94 1212.28 L1335.53 1212.28 L1336.11 1212.28 L1336.7 1212.28 L1337.29 1212.28 L1337.87 1212.28 L1338.46 1212.28 L1339.05 1212.28 L1339.63 1212.28 L1340.22 1212.28 L1340.8 1212.28 L1341.39 1212.28 L1341.98 1212.28 L1342.56 1212.28 L1343.15 1212.28 L1343.74 1212.28 L1344.32 1212.28 L1344.91 1212.28 L1345.5 1212.28 L1346.08 1212.28 L1346.67 1212.28 L1347.26 1212.28 L1347.84 1212.28 L1348.43 1212.28 L1349.01 1212.28 L1349.6 1212.28 L1350.19 1212.28 L1350.77 1212.28 L1351.36 1212.28 L1351.95 1212.28 L1352.53 1212.28 L1353.12 1212.28 L1353.71 1212.28 L1354.29 1212.28 L1354.88 1212.28 L1355.47 1212.28 L1356.05 1212.28 L1356.64 1212.28 L1357.22 1212.28 L1357.81 1212.28 L1358.4 1212.28 L1358.98 1212.28 L1359.57 1212.28 L1360.16 1212.28 L1360.74 1212.28 L1361.33 1212.28 L1361.92 1212.28 L1362.5 1212.28 L1363.09 1212.28 L1363.68 1212.28 L1364.26 1212.28 L1364.85 1212.28 L1365.43 1212.28 L1366.02 1212.28 L1366.61 1212.28 L1367.19 1212.28 L1367.78 1212.28 L1368.37 1212.28 L1368.95 1212.28 L1369.54 1212.28 L1370.13 1212.28 L1370.71 1212.28 L1371.3 1212.28 L1371.88 1212.28 L1372.47 1212.28 L1373.06 1212.28 L1373.64 1212.28 L1374.23 1212.28 L1374.82 1212.28 L1375.4 1212.28 L1375.99 1212.28 L1376.58 1212.28 L1377.16 1212.28 L1377.75 1212.28 L1378.34 1212.28 L1378.92 1212.28 L1379.51 1212.28 L1380.09 1212.28 L1380.68 1212.28 L1381.27 1212.28 L1381.85 1212.28 L1382.44 1212.28 L1383.03 1212.28 L1383.61 1212.28 L1384.2 1212.28 L1384.79 1212.28 L1385.37 1212.28 L1385.96 1212.28 L1386.55 1212.28 L1387.13 1212.28 L1387.72 1212.28 L1388.3 1212.28 L1388.89 1212.28 L1389.48 1212.28 L1390.06 1212.28 L1390.65 1212.28 L1391.24 1212.28 L1391.82 1212.28 L1392.41 1212.28 L1393 1212.28 L1393.58 1212.28 L1394.17 1212.28 L1394.75 1212.28 L1395.34 1212.28 L1395.93 1212.28 L1396.51 1212.28 L1397.1 1212.28 L1397.69 1212.28 L1398.27 1212.28 L1398.86 1212.28 L1399.45 1212.28 L1400.03 1212.28 L1400.62 1212.28 L1401.21 1212.28 L1401.79 1212.28 L1402.38 1212.28 L1402.96 1212.28 L1403.55 1212.28 L1404.14 1212.28 L1404.72 1212.28 L1405.31 1212.28 L1405.9 1212.28 L1406.48 1212.28 L1407.07 1212.28 L1407.66 1212.28 L1408.24 1212.28 L1408.83 1212.28 L1409.42 1212.28 L1410 1212.28 L1410.59 1212.28 L1411.17 1212.28 L1411.76 1212.28 L1412.35 1212.28 L1412.93 1212.28 L1413.52 1212.28 L1414.11 1212.28 L1414.69 1212.28 L1415.28 1212.28 L1415.87 1212.28 L1416.45 1212.28 L1417.04 1212.28 L1417.63 1212.28 L1418.21 1212.28 L1418.8 1212.28 L1419.38 1212.28 L1419.97 1212.28 L1420.56 1212.28 L1421.14 1212.28 L1421.73 1212.28 L1422.32 1212.28 L1422.9 1212.28 L1423.49 1212.28 L1424.08 1212.28 L1424.66 1212.28 L1425.25 1212.28 L1425.83 1212.28 L1426.42 1212.28 L1427.01 1212.28 L1427.59 1212.28 L1428.18 1212.28 L1428.77 1212.28 L1429.35 1212.28 L1429.94 1212.28 L1430.53 1212.28 L1431.11 1212.28 L1431.7 1212.28 L1432.29 1212.28 L1432.87 1212.28 L1433.46 1212.28 L1434.04 1212.28 L1434.63 1212.28 L1435.22 1212.28 L1435.8 1212.28 L1436.39 1212.28 L1436.98 1212.28 L1437.56 1212.28 L1438.15 1212.28 L1438.74 1212.28 L1439.32 1212.28 L1439.91 1212.28 L1440.5 1212.28 L1441.08 1212.28 L1441.67 1212.28 L1442.25 1212.28 L1442.84 1212.28 L1443.43 1212.28 L1444.01 1212.28 L1444.6 1212.28 L1445.19 1212.28 L1445.77 1212.28 L1446.36 1212.28 L1446.95 1212.28 L1447.53 1212.28 L1448.12 1212.28 L1448.7 1212.28 L1449.29 1212.28 L1449.88 1212.28 L1450.46 1212.28 L1451.05 1212.28 L1451.64 1212.28 L1452.22 1212.28 L1452.81 1212.28 L1453.4 1212.28 L1453.98 1212.28 L1454.57 1212.28 L1455.16 1212.28 L1455.74 1212.28 L1456.33 1212.28 L1456.91 1212.28 L1457.5 1212.28 L1458.09 1212.28 L1458.67 1212.28 L1459.26 1212.28 L1459.85 1212.28 L1460.43 1212.28 L1461.02 1212.28 L1461.61 1212.28 L1462.19 1212.28 L1462.78 1212.28 L1463.37 1212.28 L1463.95 1212.28 L1464.54 1212.28 L1465.12 1212.28 L1465.71 1212.28 L1466.3 1212.28 L1466.88 1212.28 L1467.47 1212.28 L1468.06 1212.28 L1468.64 1212.28 L1469.23 1212.28 L1469.82 1212.28 L1470.4 1212.28 L1470.99 1212.28 L1471.57 1212.28 L1472.16 1212.28 L1472.75 1212.28 L1473.33 1212.28 L1473.92 1212.28 L1474.51 1212.28 L1475.09 1212.28 L1475.68 1212.28 L1476.27 1212.28 L1476.85 1212.28 L1477.44 1212.28 L1478.03 1212.28 L1478.61 1212.28 L1479.2 1212.28 L1479.78 1212.28 L1480.37 1212.28 L1480.96 1212.28 L1481.54 1212.28 L1482.13 1212.28 L1482.72 1212.28 L1483.3 1212.28 L1483.89 1212.28 L1484.48 1212.28 L1485.06 1212.28 L1485.65 1212.28 L1486.24 1212.28 L1486.82 1212.28 L1487.41 1212.28 L1487.99 1212.28 L1488.58 1212.28 L1489.17 1212.28 L1489.75 1212.28 L1490.34 1212.28 L1490.93 1212.28 L1491.51 1212.28 L1492.1 1212.28 L1492.69 1212.28 L1493.27 1212.28 L1493.86 1212.28 L1494.45 1212.28 L1495.03 1212.28 L1495.62 1212.28 L1496.2 1212.28 L1496.79 1212.28 L1497.38 1212.28 L1497.96 1212.28 L1498.55 1212.28 L1499.14 1212.28 L1499.72 1212.28 L1500.31 1212.28 L1500.9 1212.28 L1501.48 1212.28 L1502.07 1212.28 L1502.65 1212.28 L1503.24 1212.28 L1503.83 1212.28 L1504.41 1212.28 L1505 1212.28 L1505.59 1212.28 L1506.17 1212.28 L1506.76 1212.28 L1507.35 1212.28 L1507.93 1212.28 L1508.52 1212.28 L1509.11 1212.28 L1509.69 1212.28 L1510.28 1212.28 L1510.86 1212.28 L1511.45 1212.28 L1512.04 1212.28 L1512.62 1212.28 L1513.21 1212.28 L1513.8 1212.28 L1514.38 1212.28 L1514.97 1212.28 L1515.56 1212.28 L1516.14 1212.28 L1516.73 1212.28 L1517.32 1212.28 L1517.9 1212.28 L1518.49 1212.28 L1519.07 1212.28 L1519.66 1212.28 L1520.25 1212.28 L1520.83 1212.28 L1521.42 1212.28 L1522.01 1212.28 L1522.59 1212.28 L1523.18 1212.28 L1523.77 1212.28 L1524.35 1212.28 L1524.94 1212.28 L1525.52 1212.28 L1526.11 1212.28 L1526.7 1212.28 L1527.28 1212.28 L1527.87 1212.28 L1528.46 1212.28 L1529.04 1212.28 L1529.63 1212.28 L1530.22 1212.28 L1530.8 1212.28 L1531.39 1212.28 L1531.98 1212.28 L1532.56 1212.28 L1533.15 1212.28 L1533.73 1212.28 L1534.32 1212.28 L1534.91 1212.28 L1535.49 1212.28 L1536.08 1212.28 L1536.67 1212.28 L1537.25 1212.28 L1537.84 1212.28 L1538.43 1212.28 L1539.01 1212.28 L1539.6 1212.28 L1540.19 1212.28 L1540.77 1212.28 L1541.36 1212.28 L1541.94 1212.28 L1542.53 1212.28 L1543.12 1212.28 L1543.7 1212.28 L1544.29 1212.28 L1544.88 1212.28 L1545.46 1212.28 L1546.05 1212.28 L1546.64 1212.28 L1547.22 1212.28 L1547.81 1212.28 L1548.4 1212.28 L1548.98 1212.28 L1549.57 1212.28 L1550.15 1212.28 L1550.74 1212.28 L1551.33 1212.28 L1551.91 1212.28 L1552.5 1212.28 L1553.09 1212.28 L1553.67 1212.28 L1554.26 1212.28 L1554.85 1212.28 L1555.43 1212.28 L1556.02 1212.28 L1556.6 1212.28 L1557.19 1212.28 L1557.78 1212.28 L1558.36 1212.28 L1558.95 1212.28 L1559.54 1212.28 L1560.12 1212.28 L1560.71 1212.28 L1561.3 1212.28 L1561.88 1212.28 L1562.47 1212.28 L1563.06 1212.28 L1563.64 1212.28 L1564.23 1212.28 L1564.81 1212.28 L1565.4 1212.28 L1565.99 1212.28 L1566.57 1212.28 L1567.16 1212.28 L1567.75 1212.28 L1568.33 1212.28 L1568.92 1212.28 L1569.51 1212.28 L1570.09 1212.28 L1570.68 1212.28 L1571.27 1212.28 L1571.85 1212.28 L1572.44 1212.28 L1573.02 1212.28 L1573.61 1212.28 L1574.2 1212.28 L1574.78 1212.28 L1575.37 1212.28 L1575.96 1212.28 L1576.54 1212.28 L1577.13 1212.28 L1577.72 1212.28 L1578.3 1212.28 L1578.89 1212.28 L1579.47 1212.28 L1580.06 1212.28 L1580.65 1212.28 L1581.23 1212.28 L1581.82 1212.28 L1582.41 1212.28 L1582.99 1212.28 L1583.58 1212.28 L1584.17 1212.28 L1584.75 1212.28 L1585.34 1212.28 L1585.93 1212.28 L1586.51 1212.28 L1587.1 1212.28 L1587.68 1212.28 L1588.27 1212.28 L1588.86 1212.28 L1589.44 1212.28 L1590.03 1212.28 L1590.62 1212.28 L1591.2 1212.28 L1591.79 1212.28 L1592.38 1212.28 L1592.96 1212.28 L1593.55 1212.28 L1594.14 1212.28 L1594.72 1212.28 L1595.31 1212.28 L1595.89 1212.28 L1596.48 1212.28 L1597.07 1212.28 L1597.65 1212.28 L1598.24 1212.28 L1598.83 1212.28 L1599.41 1212.28 L1600 1212.28 L1600.59 1212.28 L1601.17 1212.28 L1601.76 1212.28 L1602.34 1212.28 L1602.93 1212.28 L1603.52 1212.28 L1604.1 1212.28 L1604.69 1212.28 L1605.28 1212.28 L1605.86 1212.28 L1606.45 1212.28 L1607.04 1212.28 L1607.62 1212.28 L1608.21 1212.28 L1608.8 1212.28 L1609.38 1212.28 L1609.97 1212.28 L1610.55 1212.28 L1611.14 1212.28 L1611.73 1212.28 L1612.31 1212.28 L1612.9 1212.28 L1613.49 1212.28 L1614.07 1212.28 L1614.66 1212.28 L1615.25 1212.28 L1615.83 1212.28 L1616.42 1212.28 L1617.01 1212.28 L1617.59 1212.28 L1618.18 1212.28 L1618.76 1212.28 L1619.35 1212.28 L1619.94 1212.28 L1620.52 1212.28 L1621.11 1212.28 L1621.7 1212.28 L1622.28 1212.28 L1622.87 1212.28 L1623.46 1212.28 L1624.04 1212.28 L1624.63 1212.28 L1625.22 1212.28 L1625.8 1212.28 L1626.39 1212.28 L1626.97 1212.28 L1627.56 1212.28 L1628.15 1212.28 L1628.73 1212.28 L1629.32 1212.28 L1629.91 1212.28 L1630.49 1212.28 L1631.08 1212.28 L1631.67 1212.28 L1632.25 1212.28 L1632.84 1212.28 L1633.42 1212.28 L1634.01 1212.28 L1634.6 1212.28 L1635.18 1212.28 L1635.77 1212.28 L1636.36 1212.28 L1636.94 1212.28 L1637.53 1212.28 L1638.12 1212.28 L1638.7 1212.28 L1639.29 1212.28 L1639.88 1212.28 L1640.46 1212.28 L1641.05 1212.28 L1641.63 1212.28 L1642.22 1212.28 L1642.81 1212.28 L1643.39 1212.28 L1643.98 1212.28 L1644.57 1212.28 L1645.15 1212.28 L1645.74 1212.28 L1646.33 1212.28 L1646.91 1212.28 L1647.5 1212.28 L1648.09 1212.28 L1648.67 1212.28 L1649.26 1212.28 L1649.84 1212.28 L1650.43 1212.28 L1651.02 1212.28 L1651.6 1212.28 L1652.19 1212.28 L1652.78 1212.28 L1653.36 1212.28 L1653.95 1212.28 L1654.54 1212.28 L1655.12 1212.28 L1655.71 1212.28 L1656.29 1212.28 L1656.88 1212.28 L1657.47 1212.28 L1658.05 1212.28 L1658.64 1212.28 L1659.23 1212.28 L1659.81 1212.28 L1660.4 1212.28 L1660.99 1212.28 L1661.57 1212.28 L1662.16 1212.28 L1662.75 1212.28 L1663.33 1212.28 L1663.92 1212.28 L1664.5 1212.28 L1665.09 1212.28 L1665.68 1212.28 L1666.26 1212.28 L1666.85 1212.28 L1667.44 1212.28 L1668.02 1212.28 L1668.61 1212.28 L1669.2 1212.28 L1669.78 1212.28 L1670.37 1212.28 L1670.96 1212.28 L1671.54 1212.28 L1672.13 1212.28 L1672.71 1212.28 L1673.3 1212.28 L1673.89 1212.28 L1674.47 1212.28 L1675.06 1212.28 L1675.65 1212.28 L1676.23 1212.28 L1676.82 1212.28 L1677.41 1212.28 L1677.99 1212.28 L1678.58 1212.28 L1679.17 1212.28 L1679.75 1212.28 L1680.34 1212.28 L1680.92 1212.28 L1681.51 1212.28 L1682.1 1212.28 L1682.68 1212.28 L1683.27 1212.28 L1683.86 1212.28 L1684.44 1212.28 L1685.03 1212.28 L1685.62 1212.28 L1686.2 1212.28 L1686.79 1212.28 L1687.37 1212.28 L1687.96 1212.28 L1688.55 1212.28 L1689.13 1212.28 L1689.72 1212.28 L1690.31 1212.28 L1690.89 1212.28 L1691.48 1212.28 L1692.07 1212.28 L1692.65 1212.28 L1693.24 1212.28 L1693.83 1212.28 L1694.41 1212.28 L1695 1212.28 L1695.58 1212.28 L1696.17 1212.28 L1696.76 1212.28 L1697.34 1212.28 L1697.93 1212.28 L1698.52 1212.28 L1699.1 1212.28 L1699.69 1212.28 L1700.28 1212.28 L1700.86 1212.28 L1701.45 1212.28 L1702.04 1212.28 L1702.62 1212.28 L1703.21 1212.28 L1703.79 1212.28 L1704.38 1212.28 L1704.97 1212.28 L1705.55 1212.28 L1706.14 1212.28 L1706.73 1212.28 L1707.31 1212.28 L1707.9 1212.28 L1708.49 1212.28 L1709.07 1212.28 L1709.66 1212.28 L1710.24 1212.28 L1710.83 1212.28 L1711.42 1212.28 L1712 1212.28 L1712.59 1212.28 L1713.18 1212.28 L1713.76 1212.28 L1714.35 1212.28 L1714.94 1212.28 L1715.52 1212.28 L1716.11 1212.28 L1716.7 1212.28 L1717.28 1212.28 L1717.87 1212.28 L1718.45 1212.28 L1719.04 1212.28 L1719.63 1212.28 L1720.21 1212.28 L1720.8 1212.28 L1721.39 1212.28 L1721.97 1212.28 L1722.56 1212.28 L1723.15 1212.28 L1723.73 1212.28 L1724.32 1212.28 L1724.91 1212.28 L1725.49 1212.28 L1726.08 1212.28 L1726.66 1212.28 L1727.25 1212.28 L1727.84 1212.28 L1728.42 1212.28 L1729.01 1212.28 L1729.6 1212.28 L1730.18 1212.28 L1730.77 1212.28 L1731.36 1212.28 L1731.94 1212.28 L1732.53 1212.28 L1733.11 1212.28 L1733.7 1212.28 L1734.29 1212.28 L1734.87 1212.28 L1735.46 1212.28 L1736.05 1212.28 L1736.63 1212.28 L1737.22 1212.28 L1737.81 1212.28 L1738.39 1212.28 L1738.98 1212.28 L1739.57 1212.28 L1740.15 1212.28 L1740.74 1212.28 L1741.32 1212.28 L1741.91 1212.28 L1742.5 1212.28 L1743.08 1212.28 L1743.67 1212.28 L1744.26 1212.28 L1744.84 1212.28 L1745.43 1212.28 L1746.02 1212.28 L1746.6 1212.28 L1747.19 1212.28 L1747.78 1212.28 L1748.36 1212.28 L1748.95 1212.28 L1749.53 1212.28 L1750.12 1212.28 L1750.71 1212.28 L1751.29 1212.28 L1751.88 1212.28 L1752.47 1212.28 L1753.05 1212.28 L1753.64 1212.28 L1754.23 1212.28 L1754.81 1212.28 L1755.4 1212.28 L1755.99 1212.28 L1756.57 1212.28 L1757.16 1212.28 L1757.74 1212.28 L1758.33 1212.28 L1758.92 1212.28 L1759.5 1212.28 L1760.09 1212.28 L1760.68 1212.28 L1761.26 1212.28 L1761.85 1212.28 L1762.44 1212.28 L1763.02 1212.28 L1763.61 1212.28 L1764.19 1212.28 L1764.78 1212.28 L1765.37 1212.28 L1765.95 1212.28 L1766.54 1212.28 L1767.13 1212.28 L1767.71 1212.28 L1768.3 1212.28 L1768.89 1212.28 L1769.47 1212.28 L1770.06 1212.28 L1770.65 1212.28 L1771.23 1212.28 L1771.82 1212.28 L1772.4 1212.28 L1772.99 1212.28 L1773.58 1212.28 L1774.16 1212.28 L1774.75 1212.28 L1775.34 1212.28 L1775.92 1212.28 L1776.51 1212.28 L1777.1 1212.28 L1777.68 1212.28 L1778.27 1212.28 L1778.86 1212.28 L1779.44 1212.28 L1780.03 1212.28 L1780.61 1212.28 L1781.2 1212.28 L1781.79 1212.28 L1782.37 1212.28 L1782.96 1212.28 L1783.55 1212.28 L1784.13 1212.28 L1784.72 1212.28 L1785.31 1212.28 L1785.89 1212.28 L1786.48 1212.28 L1787.06 1212.28 L1787.65 1212.28 L1788.24 1212.28 L1788.82 1212.28 L1789.41 1212.28 L1790 1212.28 L1790.58 1212.28 L1791.17 1212.28 L1791.76 1212.28 L1792.34 1212.28 L1792.93 1212.28 L1793.52 1212.28 L1794.1 1212.28 L1794.69 1212.28 L1795.27 1212.28 L1795.86 1212.28 L1796.45 1212.28 L1797.03 1212.28 L1797.62 1212.28 L1798.21 1212.28 L1798.79 1212.28 L1799.38 1212.28 L1799.97 1212.28 L1800.55 1212.28 L1801.14 1212.28 L1801.73 1212.28 L1802.31 1212.28 L1802.9 1212.28 L1803.48 1212.28 L1804.07 1212.28 L1804.66 1212.28 L1805.24 1212.28 L1805.83 1212.28 L1806.42 1212.28 L1807 1212.28 L1807.59 1212.28 L1808.18 1212.28 L1808.76 1212.28 L1809.35 1212.28 L1809.94 1212.28 L1810.52 1212.28 L1811.11 1212.28 L1811.69 1212.28 L1812.28 1212.28 L1812.87 1212.28 L1813.45 1212.28 L1814.04 1212.28 L1814.63 1212.28 L1815.21 1212.28 L1815.8 1212.28 L1816.39 1212.28 L1816.97 1212.28 L1817.56 1212.28 L1818.14 1212.28 L1818.73 1212.28 L1819.32 1212.28 L1819.9 1212.28 L1820.49 1212.28 L1821.08 1212.28 L1821.66 1212.28 L1822.25 1212.28 L1822.84 1212.28 L1823.42 1212.28 L1824.01 1212.28 L1824.6 1212.28 L1825.18 1212.28 L1825.77 1212.28 L1826.35 1212.28 L1826.94 1212.28 L1827.53 1212.28 L1828.11 1212.28 L1828.7 1212.28 L1829.29 1212.28 L1829.87 1212.28 L1830.46 1212.28 L1831.05 1212.28 L1831.63 1212.28 L1832.22 1212.28 L1832.81 1212.28 L1833.39 1212.28 L1833.98 1212.28 L1834.56 1212.28 L1835.15 1212.28 L1835.74 1212.28 L1836.32 1212.28 L1836.91 1212.28 L1837.5 1212.28 L1838.08 1212.28 L1838.67 1212.28 L1839.26 1212.28 L1839.84 1212.28 L1840.43 1212.28 L1841.01 1212.28 L1841.6 1212.28 L1842.19 1212.28 L1842.77 1212.28 L1843.36 1212.28 L1843.95 1212.28 L1844.53 1212.28 L1845.12 1212.28 L1845.71 1212.28 L1846.29 1212.28 L1846.88 1212.28 L1847.47 1212.28 L1848.05 1212.28 L1848.64 1212.28 L1849.22 1212.28 L1849.81 1212.28 L1850.4 1212.28 L1850.98 1212.28 L1851.57 1212.28 L1852.16 1212.28 L1852.74 1212.28 L1853.33 1212.28 L1853.92 1212.28 L1854.5 1212.28 L1855.09 1212.28 L1855.68 1212.28 L1856.26 1212.28 L1856.85 1212.28 L1857.43 1212.28 L1858.02 1212.28 L1858.61 1212.28 L1859.19 1212.28 L1859.78 1212.28 L1860.37 1212.28 L1860.95 1212.28 L1861.54 1212.28 L1862.13 1212.28 L1862.71 1212.28 L1863.3 1212.28 L1863.88 1212.28 L1864.47 1212.28 L1865.06 1212.28 L1865.64 1212.28 L1866.23 1212.28 L1866.82 1212.28 L1867.4 1212.28 L1867.99 1212.28 L1868.58 1212.28 L1869.16 1212.28 L1869.75 1212.28 L1870.34 1212.28 L1870.92 1212.28 L1871.51 1212.28 L1872.09 1212.28 L1872.68 1212.28 L1873.27 1212.28 L1873.85 1212.28 L1874.44 1212.28 L1875.03 1212.28 L1875.61 1212.28 L1876.2 1212.28 L1876.79 1212.28 L1877.37 1212.28 L1877.96 1212.28 L1878.55 1212.28 L1879.13 1212.28 L1879.72 1212.28 L1880.3 1212.28 L1880.89 1212.28 L1881.48 1212.28 L1882.06 1212.28 L1882.65 1212.28 L1883.24 1212.28 L1883.82 1212.28 L1884.41 1212.28 L1885 1212.28 L1885.58 1212.28 L1886.17 1212.28 L1886.76 1212.28 L1887.34 1212.28 L1887.93 1212.28 L1888.51 1212.28 L1889.1 1212.28 L1889.69 1212.28 L1890.27 1212.28 L1890.86 1212.28 L1891.45 1212.28 L1892.03 1212.28 L1892.62 1212.28 L1893.21 1212.28 L1893.79 1212.28 L1894.38 1212.28 L1894.96 1212.28 L1895.55 1212.28 L1896.14 1212.28 L1896.72 1212.28 L1897.31 1212.28 L1897.9 1212.28 L1898.48 1212.28 L1899.07 1212.28 L1899.66 1212.28 L1900.24 1212.28 L1900.83 1212.28 L1901.42 1212.28 L1902 1212.28 L1902.59 1212.28 L1903.17 1212.28 L1903.76 1212.28 L1904.35 1212.28 L1904.93 1212.28 L1905.52 1212.28 L1906.11 1212.28 L1906.69 1212.28 L1907.28 1212.28 L1907.87 1212.28 L1908.45 1212.28 L1909.04 1212.28 L1909.63 1212.28 L1910.21 1212.28 L1910.8 1212.28 L1911.38 1212.28 L1911.97 1212.28 L1912.56 1212.28 L1913.14 1212.28 L1913.73 1212.28 L1914.32 1212.28 L1914.9 1212.28 L1915.49 1212.28 L1916.08 1212.28 L1916.66 1212.28 L1917.25 1212.28 L1917.83 1212.28 L1918.42 1212.28 L1919.01 1212.28 L1919.59 1212.28 L1920.18 1212.28 L1920.77 1212.28 L1921.35 1212.28 L1921.94 1212.28 L1922.53 1212.28 L1923.11 1212.28 L1923.7 1212.28 L1924.29 1212.28 L1924.87 1212.28 L1925.46 1212.28 L1926.04 1212.28 L1926.63 1212.28 L1927.22 1212.28 L1927.8 1212.28 L1928.39 1212.28 L1928.98 1212.28 L1929.56 1212.28 L1930.15 1212.28 L1930.74 1212.28 L1931.32 1212.28 L1931.91 1212.28 L1932.5 1212.28 L1933.08 1212.28 L1933.67 1212.28 L1934.25 1212.28 L1934.84 1212.28 L1935.43 1212.28 L1936.01 1212.28 L1936.6 1212.28 L1937.19 1212.28 L1937.77 1212.28 L1938.36 1212.28 L1938.95 1212.28 L1939.53 1212.28 L1940.12 1212.28 L1940.71 1212.28 L1941.29 1212.28 L1941.88 1212.28 L1942.46 1212.28 L1943.05 1212.28 L1943.64 1212.28 L1944.22 1212.28 L1944.81 1212.28 L1945.4 1212.28 L1945.98 1212.28 L1946.57 1212.28 L1947.16 1212.28 L1947.74 1212.28 L1948.33 1212.28 L1948.91 1212.28 L1949.5 1212.28 L1950.09 1212.28 L1950.67 1212.28 L1951.26 1212.28 L1951.85 1212.28 L1952.43 1212.28 L1953.02 1212.28 L1953.61 1212.28 L1954.19 1212.28 L1954.78 1212.28 L1955.37 1212.28 L1955.95 1212.28 L1956.54 1212.28 L1957.12 1212.28 L1957.71 1212.28 L1958.3 1212.28 L1958.88 1212.28 L1959.47 1212.28 L1960.06 1212.28 L1960.64 1212.28 L1961.23 1212.28 L1961.82 1212.28 L1962.4 1212.28 L1962.99 1212.28 L1963.58 1212.28 L1964.16 1212.28 L1964.75 1212.28 L1965.33 1212.28 L1965.92 1212.28 L1966.51 1212.28 L1967.09 1212.28 L1967.68 1212.28 L1968.27 1212.28 L1968.85 1212.28 L1969.44 1212.28 L1970.03 1212.28 L1970.61 1212.28 L1971.2 1212.28 L1971.78 1212.28 L1972.37 1212.28 L1972.96 1212.28 L1973.54 1212.28 L1974.13 1212.28 L1974.72 1212.28 L1975.3 1212.28 L1975.89 1212.28 L1976.48 1212.28 L1977.06 1212.28 L1977.65 1212.28 L1978.24 1212.28 L1978.82 1212.28 L1979.41 1212.28 L1979.99 1212.28 L1980.58 1212.28 L1981.17 1212.28 L1981.75 1212.28 L1982.34 1212.28 L1982.93 1212.28 L1983.51 1212.28 L1984.1 1212.28 L1984.69 1212.28 L1985.27 1212.28 L1985.86 1212.28 L1986.45 1212.28 L1987.03 1212.28 L1987.62 1212.28 L1988.2 1212.28 L1988.79 1212.28 L1989.38 1212.28 L1989.96 1212.28 L1990.55 1212.28 L1991.14 1212.28 L1991.72 1212.28 L1992.31 1212.28 L1992.9 1212.28 L1993.48 1212.28 L1994.07 1212.28 L1994.65 1212.28 L1995.24 1212.28 L1995.83 1212.28 L1996.41 1212.28 L1997 1212.28 L1997.59 1212.28 L1998.17 1212.28 L1998.76 1212.28 L1999.35 1212.28 L1999.93 1212.28 L2000.52 1212.28 L2001.11 1212.28 L2001.69 1212.28 L2002.28 1212.28 L2002.86 1212.28 L2003.45 1212.28 L2004.04 1212.28 L2004.62 1212.28 L2005.21 1212.28 L2005.8 1212.28 L2006.38 1212.28 L2006.97 1212.28 L2007.56 1212.28 L2008.14 1212.28 L2008.73 1212.28 L2009.32 1212.28 L2009.9 1212.28 L2010.49 1212.28 L2011.07 1212.28 L2011.66 1212.28 L2012.25 1212.28 L2012.83 1212.28 L2013.42 1212.28 L2014.01 1212.28 L2014.59 1212.28 L2015.18 1212.28 L2015.77 1212.28 L2016.35 1212.28 L2016.94 1212.28 L2017.53 1212.28 L2018.11 1212.28 L2018.7 1212.28 L2019.28 1212.28 L2019.87 1212.28 L2020.46 1212.28 L2021.04 1212.28 L2021.63 1212.28 L2022.22 1212.28 L2022.8 1212.28 L2023.39 1212.28 L2023.98 1212.28 L2024.56 1212.28 L2025.15 1212.28 L2025.73 1212.28 L2026.32 1212.28 L2026.91 1212.28 L2027.49 1212.28 L2028.08 1212.28 L2028.67 1212.28 L2029.25 1212.28 L2029.84 1212.28 L2030.43 1212.28 L2031.01 1212.28 L2031.6 1212.28 L2032.19 1212.28 L2032.77 1212.28 L2033.36 1212.28 L2033.94 1212.28 L2034.53 1212.28 L2035.12 1212.28 L2035.7 1212.28 L2036.29 1212.28 L2036.88 1212.28 L2037.46 1212.28 L2038.05 1212.28 L2038.64 1212.28 L2039.22 1212.28 L2039.81 1212.28 L2040.4 1212.28 L2040.98 1212.28 L2041.57 1212.28 L2042.15 1212.28 L2042.74 1212.28 L2043.33 1212.28 L2043.91 1212.28 L2044.5 1212.28 L2045.09 1212.28 L2045.67 1212.28 L2046.26 1212.28 L2046.85 1212.28 L2047.43 1212.28 L2048.02 1212.28 L2048.6 1212.28 L2049.19 1212.28 L2049.78 1212.28 L2050.36 1212.28 L2050.95 1212.28 L2051.54 1212.28 L2052.12 1212.28 L2052.71 1212.28 L2053.3 1212.28 L2053.88 1212.28 L2054.47 1212.28 L2055.06 1212.28 L2055.64 1212.28 L2056.23 1212.28 L2056.81 1212.28 L2057.4 1212.28 L2057.99 1212.28 L2058.57 1212.28 L2059.16 1212.28 L2059.75 1212.28 L2060.33 1212.28 L2060.92 1212.28 L2061.51 1212.28 L2062.09 1212.28 L2062.68 1212.28 L2063.27 1212.28 L2063.85 1212.28 L2064.44 1212.28 L2065.02 1212.28 L2065.61 1212.28 L2066.2 1212.28 L2066.78 1212.28 L2067.37 1212.28 L2067.96 1212.28 L2068.54 1212.28 L2069.13 1212.28 L2069.72 1212.28 L2070.3 1212.28 L2070.89 1212.28 L2071.48 1212.28 L2072.06 1212.28 L2072.65 1212.28 L2073.23 1212.28 L2073.82 1212.28 L2074.41 1212.28 L2074.99 1212.28 L2075.58 1212.28 L2076.17 1212.28 L2076.75 1212.28 L2077.34 1212.28 L2077.93 1212.28 L2078.51 1212.28 L2079.1 1212.28 L2079.68 1212.28 L2080.27 1212.28 L2080.86 1212.28 L2081.44 1212.28 L2082.03 1212.28 L2082.62 1212.28 L2083.2 1212.28 L2083.79 1212.28 L2084.38 1212.28 L2084.96 1212.28 L2085.55 1212.28 L2086.14 1212.28 L2086.72 1212.28 L2087.31 1212.28 L2087.89 1212.28 L2088.48 1212.28 L2089.07 1212.28 L2089.65 1212.28 L2090.24 1212.28 L2090.83 1212.28 L2091.41 1212.28 L2092 1212.28 L2092.59 1212.28 L2093.17 1212.28 L2093.76 1212.28 L2094.35 1212.28 L2094.93 1212.28 L2095.52 1212.28 L2096.1 1212.28 L2096.69 1212.28 L2097.28 1212.28 L2097.86 1212.28 L2098.45 1212.28 L2099.04 1212.28 L2099.62 1212.28 L2100.21 1212.28 L2100.8 1212.28 L2101.38 1212.28 L2101.97 1212.28 L2102.55 1212.28 L2103.14 1212.28 L2103.73 1212.28 L2104.31 1212.28 L2104.9 1212.28 L2105.49 1212.28 L2106.07 1212.28 L2106.66 1212.28 L2107.25 1212.28 L2107.83 1212.28 L2108.42 1212.28 L2109.01 1212.28 L2109.59 1212.28 L2110.18 1212.28 L2110.76 1212.28 L2111.35 1212.28 L2111.94 1212.28 L2112.52 1212.28 L2113.11 1212.28 L2113.7 1212.28 L2114.28 1212.28 L2114.87 1212.28 L2115.46 1212.28 L2116.04 1212.28 L2116.63 1212.28 L2117.22 1212.28 L2117.8 1212.28 L2118.39 1212.28 L2118.97 1212.28 L2119.56 1212.28 L2120.15 1212.28 L2120.73 1212.28 L2121.32 1212.28 L2121.91 1212.28 L2122.49 1212.28 L2123.08 1212.28 L2123.67 1212.28 L2124.25 1212.28 L2124.84 1212.28 L2125.42 1212.28 L2126.01 1212.28 L2126.6 1212.28 L2127.18 1212.28 L2127.77 1212.28 L2128.36 1212.28 L2128.94 1212.28 L2129.53 1212.28 L2130.12 1212.28 L2130.7 1212.28 L2131.29 1212.28 L2131.88 1212.28 L2132.46 1212.28 L2133.05 1212.28 L2133.63 1212.28 L2134.22 1212.28 L2134.81 1212.28 L2135.39 1212.28 L2135.98 1212.28 L2136.57 1212.28 L2137.15 1212.28 L2137.74 1212.28 L2138.33 1212.28 L2138.91 1212.28 L2139.5 1212.28 L2140.09 1212.28 L2140.67 1212.28 L2141.26 1212.28 L2141.84 1212.28 L2142.43 1212.28 L2143.02 1212.28 L2143.6 1212.28 L2144.19 1212.28 L2144.78 1212.28 L2145.36 1212.28 L2145.95 1212.28 L2146.54 1212.28 L2147.12 1212.28 L2147.71 1212.28 L2148.3 1212.28 L2148.88 1212.28 L2149.47 1212.28 L2150.05 1212.28 L2150.64 1212.28 L2151.23 1212.28 L2151.81 1212.28 L2152.4 1212.28 L2152.99 1212.28 L2153.57 1212.28 L2154.16 1212.28 L2154.75 1212.28 L2155.33 1212.28 L2155.92 1212.28 L2156.5 1212.28 L2157.09 1212.28 L2157.68 1212.28 L2158.26 1212.28 L2158.26 1212.03 L2157.68 1212.03 L2157.09 1212.03 L2156.5 1212.03 L2155.92 1212.03 L2155.33 1212.03 L2154.75 1212.03 L2154.16 1212.03 L2153.57 1212.03 L2152.99 1212.03 L2152.4 1212.03 L2151.81 1212.03 L2151.23 1212.03 L2150.64 1212.03 L2150.05 1212.03 L2149.47 1212.03 L2148.88 1212.03 L2148.3 1212.03 L2147.71 1212.03 L2147.12 1212.03 L2146.54 1212.03 L2145.95 1212.03 L2145.36 1212.03 L2144.78 1212.03 L2144.19 1212.03 L2143.6 1212.03 L2143.02 1212.03 L2142.43 1212.03 L2141.84 1212.03 L2141.26 1212.03 L2140.67 1212.03 L2140.09 1212.03 L2139.5 1212.03 L2138.91 1212.03 L2138.33 1212.03 L2137.74 1212.03 L2137.15 1212.03 L2136.57 1212.03 L2135.98 1212.03 L2135.39 1212.03 L2134.81 1212.03 L2134.22 1212.03 L2133.63 1212.03 L2133.05 1212.03 L2132.46 1212.03 L2131.88 1212.03 L2131.29 1212.03 L2130.7 1212.03 L2130.12 1212.03 L2129.53 1212.03 L2128.94 1212.03 L2128.36 1212.03 L2127.77 1212.03 L2127.18 1212.03 L2126.6 1212.03 L2126.01 1212.03 L2125.42 1212.03 L2124.84 1212.03 L2124.25 1212.03 L2123.67 1212.03 L2123.08 1212.03 L2122.49 1212.03 L2121.91 1212.03 L2121.32 1212.03 L2120.73 1212.03 L2120.15 1212.03 L2119.56 1212.03 L2118.97 1212.03 L2118.39 1212.03 L2117.8 1212.03 L2117.22 1212.03 L2116.63 1212.03 L2116.04 1212.03 L2115.46 1212.03 L2114.87 1212.03 L2114.28 1212.03 L2113.7 1212.03 L2113.11 1212.03 L2112.52 1212.03 L2111.94 1212.03 L2111.35 1212.03 L2110.76 1212.03 L2110.18 1212.03 L2109.59 1212.03 L2109.01 1212.03 L2108.42 1212.03 L2107.83 1212.03 L2107.25 1212.03 L2106.66 1212.03 L2106.07 1212.03 L2105.49 1212.03 L2104.9 1212.03 L2104.31 1212.03 L2103.73 1212.03 L2103.14 1212.03 L2102.55 1212.03 L2101.97 1212.03 L2101.38 1212.03 L2100.8 1212.03 L2100.21 1212.03 L2099.62 1212.03 L2099.04 1212.03 L2098.45 1212.03 L2097.86 1212.03 L2097.28 1212.03 L2096.69 1212.03 L2096.1 1212.03 L2095.52 1212.03 L2094.93 1212.03 L2094.35 1212.03 L2093.76 1212.03 L2093.17 1212.03 L2092.59 1212.03 L2092 1212.03 L2091.41 1212.03 L2090.83 1212.03 L2090.24 1212.03 L2089.65 1212.03 L2089.07 1212.03 L2088.48 1212.03 L2087.89 1212.03 L2087.31 1212.03 L2086.72 1212.03 L2086.14 1212.03 L2085.55 1212.03 L2084.96 1212.03 L2084.38 1212.03 L2083.79 1212.03 L2083.2 1212.03 L2082.62 1212.03 L2082.03 1212.03 L2081.44 1212.03 L2080.86 1212.03 L2080.27 1212.03 L2079.68 1212.03 L2079.1 1212.03 L2078.51 1212.03 L2077.93 1212.03 L2077.34 1212.03 L2076.75 1212.03 L2076.17 1212.03 L2075.58 1212.03 L2074.99 1212.03 L2074.41 1212.03 L2073.82 1212.03 L2073.23 1212.03 L2072.65 1212.03 L2072.06 1212.03 L2071.48 1212.03 L2070.89 1212.03 L2070.3 1212.03 L2069.72 1212.03 L2069.13 1212.03 L2068.54 1212.03 L2067.96 1212.03 L2067.37 1212.03 L2066.78 1212.03 L2066.2 1212.03 L2065.61 1212.03 L2065.02 1212.03 L2064.44 1212.03 L2063.85 1212.03 L2063.27 1212.03 L2062.68 1212.03 L2062.09 1212.03 L2061.51 1212.03 L2060.92 1212.03 L2060.33 1212.03 L2059.75 1212.03 L2059.16 1212.03 L2058.57 1212.03 L2057.99 1212.03 L2057.4 1212.03 L2056.81 1212.03 L2056.23 1212.03 L2055.64 1212.03 L2055.06 1212.03 L2054.47 1212.03 L2053.88 1212.03 L2053.3 1212.03 L2052.71 1212.03 L2052.12 1212.03 L2051.54 1212.03 L2050.95 1212.03 L2050.36 1212.03 L2049.78 1212.03 L2049.19 1212.03 L2048.6 1212.03 L2048.02 1212.03 L2047.43 1212.03 L2046.85 1212.03 L2046.26 1212.03 L2045.67 1212.03 L2045.09 1212.03 L2044.5 1212.03 L2043.91 1212.03 L2043.33 1212.03 L2042.74 1212.03 L2042.15 1212.03 L2041.57 1212.03 L2040.98 1212.03 L2040.4 1212.03 L2039.81 1212.03 L2039.22 1212.03 L2038.64 1212.03 L2038.05 1212.03 L2037.46 1212.03 L2036.88 1212.03 L2036.29 1212.03 L2035.7 1212.03 L2035.12 1212.03 L2034.53 1212.03 L2033.94 1212.03 L2033.36 1212.03 L2032.77 1212.03 L2032.19 1212.03 L2031.6 1212.03 L2031.01 1212.03 L2030.43 1212.03 L2029.84 1212.03 L2029.25 1212.03 L2028.67 1212.03 L2028.08 1212.03 L2027.49 1212.03 L2026.91 1212.03 L2026.32 1212.03 L2025.73 1212.03 L2025.15 1212.03 L2024.56 1212.03 L2023.98 1212.03 L2023.39 1212.03 L2022.8 1212.03 L2022.22 1212.03 L2021.63 1212.03 L2021.04 1212.03 L2020.46 1212.03 L2019.87 1212.03 L2019.28 1212.03 L2018.7 1212.03 L2018.11 1212.03 L2017.53 1212.03 L2016.94 1212.03 L2016.35 1212.03 L2015.77 1212.03 L2015.18 1212.03 L2014.59 1212.03 L2014.01 1212.03 L2013.42 1212.03 L2012.83 1212.03 L2012.25 1212.03 L2011.66 1212.03 L2011.07 1212.03 L2010.49 1212.03 L2009.9 1212.03 L2009.32 1212.03 L2008.73 1212.03 L2008.14 1212.03 L2007.56 1212.03 L2006.97 1212.03 L2006.38 1212.03 L2005.8 1212.03 L2005.21 1212.03 L2004.62 1212.03 L2004.04 1212.03 L2003.45 1212.03 L2002.86 1212.03 L2002.28 1212.03 L2001.69 1212.03 L2001.11 1212.03 L2000.52 1212.03 L1999.93 1212.03 L1999.35 1212.03 L1998.76 1212.03 L1998.17 1212.03 L1997.59 1212.03 L1997 1212.03 L1996.41 1212.03 L1995.83 1212.03 L1995.24 1212.03 L1994.65 1212.03 L1994.07 1212.03 L1993.48 1212.03 L1992.9 1212.03 L1992.31 1212.03 L1991.72 1212.03 L1991.14 1212.03 L1990.55 1212.03 L1989.96 1212.03 L1989.38 1212.03 L1988.79 1212.03 L1988.2 1212.03 L1987.62 1212.03 L1987.03 1212.03 L1986.45 1212.03 L1985.86 1212.03 L1985.27 1212.03 L1984.69 1212.03 L1984.1 1212.03 L1983.51 1212.03 L1982.93 1212.03 L1982.34 1212.03 L1981.75 1212.03 L1981.17 1212.03 L1980.58 1212.03 L1979.99 1212.03 L1979.41 1212.03 L1978.82 1212.03 L1978.24 1212.03 L1977.65 1212.03 L1977.06 1212.03 L1976.48 1212.03 L1975.89 1212.03 L1975.3 1212.03 L1974.72 1212.03 L1974.13 1212.03 L1973.54 1212.03 L1972.96 1212.03 L1972.37 1212.03 L1971.78 1212.03 L1971.2 1212.03 L1970.61 1212.03 L1970.03 1212.03 L1969.44 1212.03 L1968.85 1212.03 L1968.27 1212.03 L1967.68 1212.03 L1967.09 1212.03 L1966.51 1212.03 L1965.92 1212.03 L1965.33 1212.03 L1964.75 1212.03 L1964.16 1212.03 L1963.58 1212.03 L1962.99 1212.03 L1962.4 1212.03 L1961.82 1212.03 L1961.23 1212.03 L1960.64 1212.03 L1960.06 1212.03 L1959.47 1212.03 L1958.88 1212.03 L1958.3 1212.03 L1957.71 1212.03 L1957.12 1212.03 L1956.54 1212.03 L1955.95 1212.03 L1955.37 1212.03 L1954.78 1212.03 L1954.19 1212.03 L1953.61 1212.03 L1953.02 1212.03 L1952.43 1212.03 L1951.85 1212.03 L1951.26 1212.03 L1950.67 1212.03 L1950.09 1212.03 L1949.5 1212.03 L1948.91 1212.03 L1948.33 1212.03 L1947.74 1212.03 L1947.16 1212.03 L1946.57 1212.03 L1945.98 1212.03 L1945.4 1212.03 L1944.81 1212.03 L1944.22 1212.03 L1943.64 1212.03 L1943.05 1212.03 L1942.46 1212.03 L1941.88 1212.03 L1941.29 1212.03 L1940.71 1212.03 L1940.12 1212.03 L1939.53 1212.03 L1938.95 1212.03 L1938.36 1212.03 L1937.77 1212.03 L1937.19 1212.03 L1936.6 1212.03 L1936.01 1212.03 L1935.43 1212.03 L1934.84 1212.03 L1934.25 1212.03 L1933.67 1212.03 L1933.08 1212.03 L1932.5 1212.03 L1931.91 1212.03 L1931.32 1212.03 L1930.74 1212.03 L1930.15 1212.03 L1929.56 1212.03 L1928.98 1212.03 L1928.39 1212.03 L1927.8 1212.03 L1927.22 1212.03 L1926.63 1212.03 L1926.04 1212.03 L1925.46 1212.03 L1924.87 1212.03 L1924.29 1212.03 L1923.7 1212.03 L1923.11 1212.03 L1922.53 1212.03 L1921.94 1212.03 L1921.35 1212.03 L1920.77 1212.03 L1920.18 1212.03 L1919.59 1212.03 L1919.01 1212.03 L1918.42 1212.03 L1917.83 1212.03 L1917.25 1212.03 L1916.66 1212.03 L1916.08 1212.03 L1915.49 1212.03 L1914.9 1212.03 L1914.32 1212.03 L1913.73 1212.03 L1913.14 1212.03 L1912.56 1212.03 L1911.97 1212.03 L1911.38 1212.03 L1910.8 1212.03 L1910.21 1212.03 L1909.63 1212.03 L1909.04 1212.03 L1908.45 1212.03 L1907.87 1212.03 L1907.28 1212.03 L1906.69 1212.03 L1906.11 1212.03 L1905.52 1212.03 L1904.93 1212.03 L1904.35 1212.03 L1903.76 1212.03 L1903.17 1212.03 L1902.59 1212.03 L1902 1212.03 L1901.42 1212.03 L1900.83 1212.03 L1900.24 1212.03 L1899.66 1212.03 L1899.07 1212.03 L1898.48 1212.03 L1897.9 1212.03 L1897.31 1212.03 L1896.72 1212.03 L1896.14 1212.03 L1895.55 1212.03 L1894.96 1212.03 L1894.38 1212.03 L1893.79 1212.03 L1893.21 1212.03 L1892.62 1212.03 L1892.03 1212.03 L1891.45 1212.03 L1890.86 1212.03 L1890.27 1212.03 L1889.69 1212.03 L1889.1 1212.03 L1888.51 1212.03 L1887.93 1212.03 L1887.34 1212.03 L1886.76 1212.03 L1886.17 1212.03 L1885.58 1212.03 L1885 1212.03 L1884.41 1212.03 L1883.82 1212.03 L1883.24 1212.03 L1882.65 1212.03 L1882.06 1212.03 L1881.48 1212.03 L1880.89 1212.03 L1880.3 1212.03 L1879.72 1212.03 L1879.13 1212.03 L1878.55 1212.03 L1877.96 1212.03 L1877.37 1212.03 L1876.79 1212.03 L1876.2 1212.03 L1875.61 1212.03 L1875.03 1212.03 L1874.44 1212.03 L1873.85 1212.03 L1873.27 1212.03 L1872.68 1212.03 L1872.09 1212.03 L1871.51 1212.03 L1870.92 1212.03 L1870.34 1212.03 L1869.75 1212.03 L1869.16 1212.03 L1868.58 1212.03 L1867.99 1212.03 L1867.4 1212.03 L1866.82 1212.03 L1866.23 1212.03 L1865.64 1212.03 L1865.06 1212.03 L1864.47 1212.03 L1863.88 1212.03 L1863.3 1212.03 L1862.71 1212.03 L1862.13 1212.03 L1861.54 1212.03 L1860.95 1212.03 L1860.37 1212.03 L1859.78 1212.03 L1859.19 1212.03 L1858.61 1212.03 L1858.02 1212.03 L1857.43 1212.03 L1856.85 1212.03 L1856.26 1212.03 L1855.68 1212.03 L1855.09 1212.03 L1854.5 1212.03 L1853.92 1212.03 L1853.33 1212.03 L1852.74 1212.03 L1852.16 1212.03 L1851.57 1212.03 L1850.98 1212.03 L1850.4 1212.03 L1849.81 1212.03 L1849.22 1212.03 L1848.64 1212.03 L1848.05 1212.03 L1847.47 1212.03 L1846.88 1212.03 L1846.29 1212.03 L1845.71 1212.03 L1845.12 1212.03 L1844.53 1212.03 L1843.95 1212.03 L1843.36 1212.03 L1842.77 1212.03 L1842.19 1212.03 L1841.6 1212.03 L1841.01 1212.03 L1840.43 1212.03 L1839.84 1212.03 L1839.26 1212.03 L1838.67 1212.03 L1838.08 1212.03 L1837.5 1212.03 L1836.91 1212.03 L1836.32 1212.03 L1835.74 1212.03 L1835.15 1212.03 L1834.56 1212.03 L1833.98 1212.03 L1833.39 1212.03 L1832.81 1212.03 L1832.22 1212.03 L1831.63 1212.03 L1831.05 1212.03 L1830.46 1212.03 L1829.87 1212.03 L1829.29 1212.03 L1828.7 1212.03 L1828.11 1212.03 L1827.53 1212.03 L1826.94 1212.03 L1826.35 1212.03 L1825.77 1212.03 L1825.18 1212.03 L1824.6 1212.03 L1824.01 1212.03 L1823.42 1212.03 L1822.84 1212.03 L1822.25 1212.03 L1821.66 1212.03 L1821.08 1212.03 L1820.49 1212.03 L1819.9 1212.03 L1819.32 1212.03 L1818.73 1212.03 L1818.14 1212.03 L1817.56 1212.03 L1816.97 1212.03 L1816.39 1212.03 L1815.8 1212.03 L1815.21 1212.03 L1814.63 1212.03 L1814.04 1212.03 L1813.45 1212.03 L1812.87 1212.03 L1812.28 1212.03 L1811.69 1212.03 L1811.11 1212.03 L1810.52 1212.03 L1809.94 1212.03 L1809.35 1212.03 L1808.76 1212.03 L1808.18 1212.03 L1807.59 1212.03 L1807 1212.03 L1806.42 1212.03 L1805.83 1212.03 L1805.24 1212.03 L1804.66 1212.03 L1804.07 1212.03 L1803.48 1212.03 L1802.9 1212.03 L1802.31 1212.03 L1801.73 1212.03 L1801.14 1212.03 L1800.55 1212.03 L1799.97 1212.03 L1799.38 1212.03 L1798.79 1212.03 L1798.21 1212.03 L1797.62 1212.03 L1797.03 1212.03 L1796.45 1212.03 L1795.86 1212.03 L1795.27 1212.03 L1794.69 1212.03 L1794.1 1212.03 L1793.52 1212.03 L1792.93 1212.03 L1792.34 1212.03 L1791.76 1212.03 L1791.17 1212.03 L1790.58 1212.03 L1790 1212.03 L1789.41 1212.03 L1788.82 1212.03 L1788.24 1212.03 L1787.65 1212.03 L1787.06 1212.03 L1786.48 1212.03 L1785.89 1212.03 L1785.31 1212.03 L1784.72 1212.03 L1784.13 1212.03 L1783.55 1212.03 L1782.96 1212.03 L1782.37 1212.03 L1781.79 1212.03 L1781.2 1212.03 L1780.61 1212.03 L1780.03 1212.03 L1779.44 1212.03 L1778.86 1212.03 L1778.27 1212.03 L1777.68 1212.03 L1777.1 1212.03 L1776.51 1212.03 L1775.92 1212.03 L1775.34 1212.03 L1774.75 1212.03 L1774.16 1212.03 L1773.58 1212.03 L1772.99 1212.03 L1772.4 1212.03 L1771.82 1212.03 L1771.23 1212.03 L1770.65 1212.03 L1770.06 1212.03 L1769.47 1212.03 L1768.89 1212.03 L1768.3 1212.03 L1767.71 1212.03 L1767.13 1212.03 L1766.54 1212.03 L1765.95 1212.03 L1765.37 1212.03 L1764.78 1212.03 L1764.19 1212.03 L1763.61 1212.03 L1763.02 1212.03 L1762.44 1212.03 L1761.85 1212.03 L1761.26 1212.03 L1760.68 1212.03 L1760.09 1212.03 L1759.5 1212.03 L1758.92 1212.03 L1758.33 1212.03 L1757.74 1212.03 L1757.16 1212.03 L1756.57 1212.03 L1755.99 1212.03 L1755.4 1212.03 L1754.81 1212.03 L1754.23 1212.03 L1753.64 1212.03 L1753.05 1212.03 L1752.47 1212.03 L1751.88 1212.03 L1751.29 1212.03 L1750.71 1212.03 L1750.12 1212.03 L1749.53 1212.03 L1748.95 1212.03 L1748.36 1212.03 L1747.78 1212.03 L1747.19 1212.03 L1746.6 1212.03 L1746.02 1212.03 L1745.43 1212.03 L1744.84 1212.03 L1744.26 1212.03 L1743.67 1212.03 L1743.08 1212.03 L1742.5 1212.03 L1741.91 1212.03 L1741.32 1212.03 L1740.74 1212.03 L1740.15 1212.03 L1739.57 1212.03 L1738.98 1212.03 L1738.39 1212.03 L1737.81 1212.03 L1737.22 1212.03 L1736.63 1212.03 L1736.05 1212.03 L1735.46 1212.03 L1734.87 1212.03 L1734.29 1212.03 L1733.7 1212.03 L1733.11 1212.03 L1732.53 1212.03 L1731.94 1212.03 L1731.36 1212.03 L1730.77 1212.03 L1730.18 1212.03 L1729.6 1212.03 L1729.01 1212.03 L1728.42 1212.03 L1727.84 1212.03 L1727.25 1212.03 L1726.66 1212.03 L1726.08 1212.03 L1725.49 1212.03 L1724.91 1212.03 L1724.32 1212.03 L1723.73 1212.03 L1723.15 1212.03 L1722.56 1212.03 L1721.97 1212.03 L1721.39 1212.03 L1720.8 1212.03 L1720.21 1212.03 L1719.63 1212.03 L1719.04 1212.03 L1718.45 1212.03 L1717.87 1212.03 L1717.28 1212.03 L1716.7 1212.03 L1716.11 1212.03 L1715.52 1212.03 L1714.94 1212.03 L1714.35 1212.03 L1713.76 1212.03 L1713.18 1212.03 L1712.59 1212.03 L1712 1212.03 L1711.42 1212.03 L1710.83 1212.03 L1710.24 1212.03 L1709.66 1212.03 L1709.07 1212.03 L1708.49 1212.03 L1707.9 1212.03 L1707.31 1212.03 L1706.73 1212.03 L1706.14 1212.03 L1705.55 1212.03 L1704.97 1212.03 L1704.38 1212.03 L1703.79 1212.03 L1703.21 1212.03 L1702.62 1212.03 L1702.04 1212.03 L1701.45 1212.03 L1700.86 1212.03 L1700.28 1212.03 L1699.69 1212.03 L1699.1 1212.03 L1698.52 1212.03 L1697.93 1212.03 L1697.34 1212.03 L1696.76 1212.03 L1696.17 1212.03 L1695.58 1212.03 L1695 1212.03 L1694.41 1212.03 L1693.83 1212.03 L1693.24 1212.03 L1692.65 1212.03 L1692.07 1212.03 L1691.48 1212.03 L1690.89 1212.03 L1690.31 1212.03 L1689.72 1212.03 L1689.13 1212.03 L1688.55 1212.03 L1687.96 1212.03 L1687.37 1212.03 L1686.79 1212.03 L1686.2 1212.03 L1685.62 1212.03 L1685.03 1212.03 L1684.44 1212.03 L1683.86 1212.03 L1683.27 1212.03 L1682.68 1212.03 L1682.1 1212.03 L1681.51 1212.03 L1680.92 1212.03 L1680.34 1212.03 L1679.75 1212.03 L1679.17 1212.03 L1678.58 1212.03 L1677.99 1212.03 L1677.41 1212.03 L1676.82 1212.03 L1676.23 1212.03 L1675.65 1212.03 L1675.06 1212.03 L1674.47 1212.03 L1673.89 1212.03 L1673.3 1212.03 L1672.71 1212.03 L1672.13 1212.03 L1671.54 1212.03 L1670.96 1212.03 L1670.37 1212.03 L1669.78 1212.03 L1669.2 1212.03 L1668.61 1212.03 L1668.02 1212.03 L1667.44 1212.03 L1666.85 1212.03 L1666.26 1212.03 L1665.68 1212.03 L1665.09 1212.03 L1664.5 1212.03 L1663.92 1212.03 L1663.33 1212.03 L1662.75 1212.03 L1662.16 1212.03 L1661.57 1212.03 L1660.99 1212.03 L1660.4 1212.03 L1659.81 1212.03 L1659.23 1212.03 L1658.64 1212.03 L1658.05 1212.03 L1657.47 1212.03 L1656.88 1212.03 L1656.29 1212.03 L1655.71 1212.03 L1655.12 1212.03 L1654.54 1212.03 L1653.95 1212.03 L1653.36 1212.03 L1652.78 1212.03 L1652.19 1212.03 L1651.6 1212.03 L1651.02 1212.03 L1650.43 1212.03 L1649.84 1212.03 L1649.26 1212.03 L1648.67 1212.03 L1648.09 1212.03 L1647.5 1212.03 L1646.91 1212.03 L1646.33 1212.03 L1645.74 1212.03 L1645.15 1212.03 L1644.57 1212.03 L1643.98 1212.03 L1643.39 1212.03 L1642.81 1212.03 L1642.22 1212.03 L1641.63 1212.03 L1641.05 1212.03 L1640.46 1212.03 L1639.88 1212.03 L1639.29 1212.03 L1638.7 1212.03 L1638.12 1212.03 L1637.53 1212.03 L1636.94 1212.03 L1636.36 1212.03 L1635.77 1212.03 L1635.18 1212.03 L1634.6 1212.03 L1634.01 1212.03 L1633.42 1212.03 L1632.84 1212.03 L1632.25 1212.03 L1631.67 1212.03 L1631.08 1212.03 L1630.49 1212.03 L1629.91 1212.03 L1629.32 1212.03 L1628.73 1212.03 L1628.15 1212.03 L1627.56 1212.03 L1626.97 1212.03 L1626.39 1212.03 L1625.8 1212.03 L1625.22 1212.03 L1624.63 1212.03 L1624.04 1212.03 L1623.46 1212.03 L1622.87 1212.03 L1622.28 1212.03 L1621.7 1212.03 L1621.11 1212.03 L1620.52 1212.03 L1619.94 1212.03 L1619.35 1212.03 L1618.76 1212.03 L1618.18 1212.03 L1617.59 1212.03 L1617.01 1212.03 L1616.42 1212.03 L1615.83 1212.03 L1615.25 1212.03 L1614.66 1212.03 L1614.07 1212.03 L1613.49 1212.03 L1612.9 1212.03 L1612.31 1212.03 L1611.73 1212.03 L1611.14 1212.03 L1610.55 1212.03 L1609.97 1212.03 L1609.38 1212.03 L1608.8 1212.03 L1608.21 1212.03 L1607.62 1212.03 L1607.04 1212.03 L1606.45 1212.03 L1605.86 1212.03 L1605.28 1212.03 L1604.69 1212.03 L1604.1 1212.03 L1603.52 1212.03 L1602.93 1212.03 L1602.34 1212.03 L1601.76 1212.03 L1601.17 1212.03 L1600.59 1212.03 L1600 1212.03 L1599.41 1212.03 L1598.83 1212.03 L1598.24 1212.03 L1597.65 1212.03 L1597.07 1212.03 L1596.48 1212.03 L1595.89 1212.03 L1595.31 1212.03 L1594.72 1212.03 L1594.14 1212.03 L1593.55 1212.03 L1592.96 1212.03 L1592.38 1212.03 L1591.79 1212.03 L1591.2 1212.03 L1590.62 1212.03 L1590.03 1212.03 L1589.44 1212.03 L1588.86 1212.03 L1588.27 1212.03 L1587.68 1212.03 L1587.1 1212.03 L1586.51 1212.03 L1585.93 1212.03 L1585.34 1212.03 L1584.75 1212.03 L1584.17 1212.03 L1583.58 1212.03 L1582.99 1212.03 L1582.41 1212.03 L1581.82 1212.03 L1581.23 1212.03 L1580.65 1212.03 L1580.06 1212.03 L1579.47 1212.03 L1578.89 1212.03 L1578.3 1212.03 L1577.72 1212.03 L1577.13 1212.03 L1576.54 1212.03 L1575.96 1212.03 L1575.37 1212.03 L1574.78 1212.03 L1574.2 1212.03 L1573.61 1212.03 L1573.02 1212.03 L1572.44 1212.03 L1571.85 1212.03 L1571.27 1212.03 L1570.68 1212.03 L1570.09 1212.03 L1569.51 1212.03 L1568.92 1212.03 L1568.33 1212.03 L1567.75 1212.03 L1567.16 1212.03 L1566.57 1212.03 L1565.99 1212.03 L1565.4 1212.03 L1564.81 1212.03 L1564.23 1212.03 L1563.64 1212.03 L1563.06 1212.03 L1562.47 1212.03 L1561.88 1212.03 L1561.3 1212.03 L1560.71 1212.03 L1560.12 1212.03 L1559.54 1212.03 L1558.95 1212.03 L1558.36 1212.03 L1557.78 1212.03 L1557.19 1212.03 L1556.6 1212.03 L1556.02 1212.03 L1555.43 1212.03 L1554.85 1212.03 L1554.26 1212.03 L1553.67 1212.03 L1553.09 1212.03 L1552.5 1212.03 L1551.91 1212.03 L1551.33 1212.03 L1550.74 1212.03 L1550.15 1212.03 L1549.57 1212.03 L1548.98 1212.03 L1548.4 1212.03 L1547.81 1212.03 L1547.22 1212.03 L1546.64 1212.03 L1546.05 1212.03 L1545.46 1212.03 L1544.88 1212.03 L1544.29 1212.03 L1543.7 1212.03 L1543.12 1212.03 L1542.53 1212.03 L1541.94 1212.03 L1541.36 1212.03 L1540.77 1212.03 L1540.19 1212.03 L1539.6 1212.03 L1539.01 1212.03 L1538.43 1212.03 L1537.84 1212.03 L1537.25 1212.03 L1536.67 1212.03 L1536.08 1212.03 L1535.49 1212.03 L1534.91 1212.03 L1534.32 1212.03 L1533.73 1212.03 L1533.15 1212.03 L1532.56 1212.03 L1531.98 1212.03 L1531.39 1212.03 L1530.8 1212.03 L1530.22 1212.03 L1529.63 1212.03 L1529.04 1212.03 L1528.46 1212.03 L1527.87 1212.03 L1527.28 1212.03 L1526.7 1212.03 L1526.11 1212.03 L1525.52 1212.03 L1524.94 1212.03 L1524.35 1212.03 L1523.77 1212.03 L1523.18 1212.03 L1522.59 1212.03 L1522.01 1212.03 L1521.42 1212.03 L1520.83 1212.03 L1520.25 1212.03 L1519.66 1212.03 L1519.07 1212.03 L1518.49 1212.03 L1517.9 1212.03 L1517.32 1212.03 L1516.73 1212.03 L1516.14 1212.03 L1515.56 1212.03 L1514.97 1212.03 L1514.38 1212.03 L1513.8 1212.03 L1513.21 1212.03 L1512.62 1212.03 L1512.04 1212.03 L1511.45 1212.03 L1510.86 1212.03 L1510.28 1212.03 L1509.69 1212.03 L1509.11 1212.03 L1508.52 1212.03 L1507.93 1212.03 L1507.35 1212.03 L1506.76 1212.03 L1506.17 1212.03 L1505.59 1212.03 L1505 1212.03 L1504.41 1212.03 L1503.83 1212.03 L1503.24 1212.03 L1502.65 1212.03 L1502.07 1212.03 L1501.48 1212.03 L1500.9 1212.03 L1500.31 1212.03 L1499.72 1212.03 L1499.14 1212.03 L1498.55 1212.03 L1497.96 1212.03 L1497.38 1212.03 L1496.79 1212.03 L1496.2 1212.03 L1495.62 1212.03 L1495.03 1212.03 L1494.45 1212.03 L1493.86 1212.03 L1493.27 1212.03 L1492.69 1212.03 L1492.1 1212.03 L1491.51 1212.03 L1490.93 1212.03 L1490.34 1212.03 L1489.75 1212.03 L1489.17 1212.03 L1488.58 1212.03 L1487.99 1212.03 L1487.41 1212.03 L1486.82 1212.03 L1486.24 1212.03 L1485.65 1212.03 L1485.06 1212.03 L1484.48 1212.03 L1483.89 1212.03 L1483.3 1212.03 L1482.72 1212.03 L1482.13 1212.03 L1481.54 1212.03 L1480.96 1212.03 L1480.37 1212.03 L1479.78 1212.03 L1479.2 1212.03 L1478.61 1212.03 L1478.03 1212.03 L1477.44 1212.03 L1476.85 1212.03 L1476.27 1212.03 L1475.68 1212.03 L1475.09 1212.03 L1474.51 1212.03 L1473.92 1212.03 L1473.33 1212.03 L1472.75 1212.03 L1472.16 1212.03 L1471.57 1212.03 L1470.99 1212.03 L1470.4 1212.03 L1469.82 1212.03 L1469.23 1212.03 L1468.64 1212.03 L1468.06 1212.03 L1467.47 1212.03 L1466.88 1212.03 L1466.3 1212.03 L1465.71 1212.03 L1465.12 1212.03 L1464.54 1212.03 L1463.95 1212.03 L1463.37 1212.03 L1462.78 1212.03 L1462.19 1212.03 L1461.61 1212.03 L1461.02 1212.03 L1460.43 1212.03 L1459.85 1212.03 L1459.26 1212.03 L1458.67 1212.03 L1458.09 1212.03 L1457.5 1212.03 L1456.91 1212.03 L1456.33 1212.03 L1455.74 1212.03 L1455.16 1212.03 L1454.57 1212.03 L1453.98 1212.03 L1453.4 1212.03 L1452.81 1212.03 L1452.22 1212.03 L1451.64 1212.03 L1451.05 1212.03 L1450.46 1212.03 L1449.88 1212.03 L1449.29 1212.03 L1448.7 1212.03 L1448.12 1212.03 L1447.53 1212.03 L1446.95 1212.03 L1446.36 1212.03 L1445.77 1212.03 L1445.19 1212.03 L1444.6 1212.03 L1444.01 1212.03 L1443.43 1212.03 L1442.84 1212.03 L1442.25 1212.03 L1441.67 1212.03 L1441.08 1212.03 L1440.5 1212.03 L1439.91 1212.03 L1439.32 1212.03 L1438.74 1212.03 L1438.15 1212.03 L1437.56 1212.03 L1436.98 1212.03 L1436.39 1212.03 L1435.8 1212.03 L1435.22 1212.03 L1434.63 1212.03 L1434.04 1212.03 L1433.46 1212.03 L1432.87 1212.03 L1432.29 1212.03 L1431.7 1212.03 L1431.11 1212.03 L1430.53 1212.03 L1429.94 1212.03 L1429.35 1212.03 L1428.77 1212.03 L1428.18 1212.03 L1427.59 1212.03 L1427.01 1212.03 L1426.42 1212.03 L1425.83 1212.03 L1425.25 1212.03 L1424.66 1212.03 L1424.08 1212.03 L1423.49 1212.03 L1422.9 1212.03 L1422.32 1212.03 L1421.73 1212.03 L1421.14 1212.03 L1420.56 1212.03 L1419.97 1212.03 L1419.38 1212.03 L1418.8 1212.03 L1418.21 1212.03 L1417.63 1212.03 L1417.04 1212.03 L1416.45 1212.03 L1415.87 1212.03 L1415.28 1212.03 L1414.69 1212.03 L1414.11 1212.03 L1413.52 1212.03 L1412.93 1212.03 L1412.35 1212.03 L1411.76 1212.03 L1411.17 1212.03 L1410.59 1212.03 L1410 1212.03 L1409.42 1212.03 L1408.83 1212.03 L1408.24 1212.03 L1407.66 1212.03 L1407.07 1212.03 L1406.48 1212.03 L1405.9 1212.03 L1405.31 1212.03 L1404.72 1212.03 L1404.14 1212.03 L1403.55 1212.03 L1402.96 1212.03 L1402.38 1212.03 L1401.79 1212.03 L1401.21 1212.03 L1400.62 1212.03 L1400.03 1212.03 L1399.45 1212.03 L1398.86 1212.03 L1398.27 1212.03 L1397.69 1212.03 L1397.1 1212.03 L1396.51 1212.03 L1395.93 1212.03 L1395.34 1212.03 L1394.75 1212.03 L1394.17 1212.03 L1393.58 1212.03 L1393 1212.03 L1392.41 1212.03 L1391.82 1212.03 L1391.24 1212.03 L1390.65 1212.03 L1390.06 1212.03 L1389.48 1212.03 L1388.89 1212.03 L1388.3 1212.03 L1387.72 1212.03 L1387.13 1212.03 L1386.55 1212.03 L1385.96 1212.03 L1385.37 1212.03 L1384.79 1212.03 L1384.2 1212.03 L1383.61 1212.03 L1383.03 1212.03 L1382.44 1212.03 L1381.85 1212.03 L1381.27 1212.03 L1380.68 1212.03 L1380.09 1212.03 L1379.51 1212.03 L1378.92 1212.03 L1378.34 1212.03 L1377.75 1212.03 L1377.16 1212.03 L1376.58 1212.03 L1375.99 1212.03 L1375.4 1212.03 L1374.82 1212.03 L1374.23 1212.03 L1373.64 1212.03 L1373.06 1212.03 L1372.47 1212.03 L1371.88 1212.03 L1371.3 1212.03 L1370.71 1212.03 L1370.13 1212.03 L1369.54 1212.03 L1368.95 1212.03 L1368.37 1212.03 L1367.78 1212.03 L1367.19 1212.03 L1366.61 1212.03 L1366.02 1212.03 L1365.43 1212.03 L1364.85 1212.03 L1364.26 1212.03 L1363.68 1212.03 L1363.09 1212.03 L1362.5 1212.03 L1361.92 1212.03 L1361.33 1212.03 L1360.74 1212.03 L1360.16 1212.03 L1359.57 1212.03 L1358.98 1212.03 L1358.4 1212.03 L1357.81 1212.03 L1357.22 1212.03 L1356.64 1212.03 L1356.05 1212.03 L1355.47 1212.03 L1354.88 1212.03 L1354.29 1212.03 L1353.71 1212.03 L1353.12 1212.03 L1352.53 1212.03 L1351.95 1212.03 L1351.36 1212.03 L1350.77 1212.03 L1350.19 1212.03 L1349.6 1212.03 L1349.01 1212.03 L1348.43 1212.03 L1347.84 1212.03 L1347.26 1212.03 L1346.67 1212.03 L1346.08 1212.03 L1345.5 1212.03 L1344.91 1212.03 L1344.32 1212.03 L1343.74 1212.03 L1343.15 1212.03 L1342.56 1212.03 L1341.98 1212.03 L1341.39 1212.03 L1340.8 1212.03 L1340.22 1212.03 L1339.63 1212.03 L1339.05 1212.03 L1338.46 1212.03 L1337.87 1212.03 L1337.29 1212.03 L1336.7 1212.03 L1336.11 1212.03 L1335.53 1212.03 L1334.94 1212.03 L1334.35 1212.03 L1333.77 1212.03 L1333.18 1212.03 L1332.6 1212.03 L1332.01 1212.03 L1331.42 1212.03 L1330.84 1212.03 L1330.25 1212.03 L1329.66 1212.03 L1329.08 1212.03 L1328.49 1212.03 L1327.9 1212.03 L1327.32 1212.03 L1326.73 1212.03 L1326.14 1212.03 L1325.56 1212.03 L1324.97 1212.03 L1324.39 1212.03 L1323.8 1212.03 L1323.21 1212.03 L1322.63 1212.03 L1322.04 1212.03 L1321.45 1212.03 L1320.87 1212.03 L1320.28 1212.03 L1319.69 1212.03 L1319.11 1212.03 L1318.52 1212.03 L1317.93 1212.03 L1317.35 1212.03 L1316.76 1212.03 L1316.18 1212.03 L1315.59 1212.03 L1315 1212.03 L1314.42 1212.03 L1313.83 1212.03 L1313.24 1212.03 L1312.66 1212.03 L1312.07 1212.03 L1311.48 1212.03 L1310.9 1212.03 L1310.31 1212.03 L1309.73 1212.03 L1309.14 1212.03 L1308.55 1212.03 L1307.97 1212.03 L1307.38 1212.03 L1306.79 1212.03 L1306.21 1212.03 L1305.62 1212.03 L1305.03 1212.03 L1304.45 1212.03 L1303.86 1212.03 L1303.27 1212.03 L1302.69 1212.03 L1302.1 1212.03 L1301.52 1212.03 L1300.93 1212.03 L1300.34 1212.03 L1299.76 1212.03 L1299.17 1212.03 L1298.58 1212.03 L1298 1212.03 L1297.41 1212.03 L1296.82 1212.03 L1296.24 1212.03 L1295.65 1212.03 L1295.06 1212.03 L1294.48 1212.03 L1293.89 1212.03 L1293.31 1212.03 L1292.72 1212.03 L1292.13 1212.03 L1291.55 1212.03 L1290.96 1212.03 L1290.37 1212.03 L1289.79 1212.03 L1289.2 1212.03 L1288.61 1212.03 L1288.03 1212.03 L1287.44 1212.03 L1286.86 1212.03 L1286.27 1212.03 L1285.68 1212.03 L1285.1 1212.03 L1284.51 1212.03 L1283.92 1212.03 L1283.34 1212.03 L1282.75 1212.03 L1282.16 1212.03 L1281.58 1212.03 L1280.99 1212.03 L1280.4 1212.03 L1279.82 1212.03 L1279.23 1212.03 L1278.65 1212.03 L1278.06 1212.03 L1277.47 1212.03 L1276.89 1212.03 L1276.3 1212.03 L1275.71 1212.03 L1275.13 1212.03 L1274.54 1212.03 L1273.95 1212.03 L1273.37 1212.03 L1272.78 1212.03 L1272.19 1212.03 L1271.61 1212.03 L1271.02 1212.03 L1270.44 1212.03 L1269.85 1212.03 L1269.26 1212.03 L1268.68 1212.03 L1268.09 1212.03 L1267.5 1212.03 L1266.92 1212.03 L1266.33 1212.03 L1265.74 1212.03 L1265.16 1212.03 L1264.57 1212.03 L1263.98 1212.03 L1263.4 1212.03 L1262.81 1212.03 L1262.23 1212.03 L1261.64 1212.03 L1261.05 1212.03 L1260.47 1212.03 L1259.88 1212.03 L1259.29 1212.03 L1258.71 1212.03 L1258.12 1212.03 L1257.53 1212.03 L1256.95 1212.03 L1256.36 1212.03 L1255.78 1212.03 L1255.19 1212.03 L1254.6 1212.03 L1254.02 1212.03 L1253.43 1212.03 L1252.84 1212.03 L1252.26 1212.03 L1251.67 1212.03 L1251.08 1212.03 L1250.5 1212.03 L1249.91 1212.03 L1249.32 1212.03 L1248.74 1212.03 L1248.15 1212.03 L1247.57 1212.03 L1246.98 1212.03 L1246.39 1212.03 L1245.81 1212.03 L1245.22 1212.03 L1244.63 1212.03 L1244.05 1212.03 L1243.46 1212.03 L1242.87 1212.03 L1242.29 1212.03 L1241.7 1212.03 L1241.11 1212.03 L1240.53 1212.03 L1239.94 1212.03 L1239.36 1212.03 L1238.77 1212.03 L1238.18 1212.03 L1237.6 1212.03 L1237.01 1212.03 L1236.42 1212.03 L1235.84 1212.03 L1235.25 1212.03 L1234.66 1212.03 L1234.08 1212.03 L1233.49 1212.03 L1232.91 1212.03 L1232.32 1212.03 L1231.73 1212.03 L1231.15 1212.03 L1230.56 1212.03 L1229.97 1212.03 L1229.39 1212.03 L1228.8 1212.03 L1228.21 1212.03 L1227.63 1212.03 L1227.04 1212.03 L1226.45 1212.03 L1225.87 1212.03 L1225.28 1212.03 L1224.7 1212.03 L1224.11 1212.03 L1223.52 1212.03 L1222.94 1212.03 L1222.35 1212.03 L1221.76 1212.03 L1221.18 1212.03 L1220.59 1212.03 L1220 1212.03 L1219.42 1212.03 L1218.83 1212.03 L1218.24 1212.03 L1217.66 1212.03 L1217.07 1212.03 L1216.49 1212.03 L1215.9 1212.03 L1215.31 1212.03 L1214.73 1212.03 L1214.14 1212.03 L1213.55 1212.03 L1212.97 1212.03 L1212.38 1212.03 L1211.79 1212.03 L1211.21 1212.03 L1210.62 1212.03 L1210.03 1212.03 L1209.45 1212.03 L1208.86 1212.03 L1208.28 1212.03 L1207.69 1212.03 L1207.1 1212.03 L1206.52 1212.03 L1205.93 1212.03 L1205.34 1212.03 L1204.76 1212.03 L1204.17 1212.03 L1203.58 1212.03 L1203 1212.03 L1202.41 1212.03 L1201.83 1212.03 L1201.24 1212.03 L1200.65 1212.03 L1200.07 1212.03 L1199.48 1212.03 L1198.89 1212.03 L1198.31 1212.03 L1197.72 1212.03 L1197.13 1212.03 L1196.55 1212.03 L1195.96 1212.03 L1195.37 1212.03 L1194.79 1212.03 L1194.2 1212.03 L1193.62 1212.03 L1193.03 1212.03 L1192.44 1212.03 L1191.86 1212.03 L1191.27 1212.03 L1190.68 1212.03 L1190.1 1212.03 L1189.51 1212.03 L1188.92 1212.03 L1188.34 1212.03 L1187.75 1212.03 L1187.16 1212.03 L1186.58 1212.03 L1185.99 1212.03 L1185.41 1212.03 L1184.82 1212.03 L1184.23 1212.03 L1183.65 1212.03 L1183.06 1212.03 L1182.47 1212.03 L1181.89 1212.03 L1181.3 1212.03 L1180.71 1212.03 L1180.13 1212.03 L1179.54 1212.03 L1178.96 1212.03 L1178.37 1212.03 L1177.78 1212.03 L1177.2 1212.03 L1176.61 1212.03 L1176.02 1212.03 L1175.44 1212.03 L1174.85 1212.03 L1174.26 1212.03 L1173.68 1212.03 L1173.09 1212.03 L1172.5 1212.03 L1171.92 1212.03 L1171.33 1212.03 L1170.75 1212.03 L1170.16 1212.03 L1169.57 1212.03 L1168.99 1212.03 L1168.4 1212.03 L1167.81 1212.03 L1167.23 1212.03 L1166.64 1212.03 L1166.05 1212.03 L1165.47 1212.03 L1164.88 1212.03 L1164.29 1212.03 L1163.71 1212.03 L1163.12 1212.03 L1162.54 1212.03 L1161.95 1212.03 L1161.36 1212.03 L1160.78 1212.03 L1160.19 1212.03 L1159.6 1212.03 L1159.02 1212.03 L1158.43 1212.03 L1157.84 1212.03 L1157.26 1212.03 L1156.67 1212.03 L1156.09 1212.03 L1155.5 1212.03 L1154.91 1212.03 L1154.33 1212.03 L1153.74 1212.03 L1153.15 1212.03 L1152.57 1212.03 L1151.98 1212.03 L1151.39 1212.03 L1150.81 1212.03 L1150.22 1212.03 L1149.63 1212.03 L1149.05 1212.03 L1148.46 1212.03 L1147.88 1212.03 L1147.29 1212.03 L1146.7 1212.03 L1146.12 1212.03 L1145.53 1212.03 L1144.94 1212.03 L1144.36 1212.03 L1143.77 1212.03 L1143.18 1212.03 L1142.6 1212.03 L1142.01 1212.03 L1141.42 1212.03 L1140.84 1212.03 L1140.25 1212.03 L1139.67 1212.03 L1139.08 1212.03 L1138.49 1212.03 L1137.91 1212.03 L1137.32 1212.03 L1136.73 1212.03 L1136.15 1212.03 L1135.56 1212.03 L1134.97 1212.03 L1134.39 1212.03 L1133.8 1212.03 L1133.21 1212.03 L1132.63 1212.03 L1132.04 1212.03 L1131.46 1212.03 L1130.87 1212.03 L1130.28 1212.03 L1129.7 1212.03 L1129.11 1212.03 L1128.52 1212.03 L1127.94 1212.03 L1127.35 1212.03 L1126.76 1212.03 L1126.18 1212.03 L1125.59 1212.03 L1125.01 1212.03 L1124.42 1212.03 L1123.83 1212.03 L1123.25 1212.03 L1122.66 1212.03 L1122.07 1212.03 L1121.49 1212.03 L1120.9 1212.03 L1120.31 1212.03 L1119.73 1212.03 L1119.14 1212.03 L1118.55 1212.03 L1117.97 1212.03 L1117.38 1212.03 L1116.8 1212.03 L1116.21 1212.03 L1115.62 1212.03 L1115.04 1212.03 L1114.45 1212.03 L1113.86 1212.03 L1113.28 1212.03 L1112.69 1212.03 L1112.1 1212.03 L1111.52 1212.03 L1110.93 1212.03 L1110.34 1212.03 L1109.76 1212.03 L1109.17 1212.03 L1108.59 1212.03 L1108 1212.03 L1107.41 1212.03 L1106.83 1212.03 L1106.24 1212.03 L1105.65 1212.03 L1105.07 1212.03 L1104.48 1212.03 L1103.89 1212.03 L1103.31 1212.03 L1102.72 1212.03 L1102.14 1212.03 L1101.55 1212.03 L1100.96 1212.03 L1100.38 1212.03 L1099.79 1212.03 L1099.2 1212.03 L1098.62 1212.03 L1098.03 1212.03 L1097.44 1212.03 L1096.86 1212.03 L1096.27 1212.03 L1095.68 1212.03 L1095.1 1212.03 L1094.51 1212.03 L1093.93 1212.03 L1093.34 1212.03 L1092.75 1212.03 L1092.17 1212.03 L1091.58 1212.03 L1090.99 1212.03 L1090.41 1212.03 L1089.82 1212.03 L1089.23 1212.03 L1088.65 1212.03 L1088.06 1212.03 L1087.47 1212.03 L1086.89 1212.03 L1086.3 1212.03 L1085.72 1212.03 L1085.13 1212.03 L1084.54 1212.03 L1083.96 1212.03 L1083.37 1212.03 L1082.78 1212.03 L1082.2 1212.03 L1081.61 1212.03 L1081.02 1212.03 L1080.44 1212.03 L1079.85 1212.03 L1079.26 1212.03 L1078.68 1212.03 L1078.09 1212.03 L1077.51 1212.03 L1076.92 1212.03 L1076.33 1212.03 L1075.75 1212.03 L1075.16 1212.03 L1074.57 1212.03 L1073.99 1212.03 L1073.4 1212.03 L1072.81 1212.03 L1072.23 1212.03 L1071.64 1212.03 L1071.06 1212.03 L1070.47 1212.03 L1069.88 1212.03 L1069.3 1212.03 L1068.71 1212.03 L1068.12 1212.03 L1067.54 1212.03 L1066.95 1212.03 L1066.36 1212.03 L1065.78 1212.03 L1065.19 1212.03 L1064.6 1212.03 L1064.02 1212.03 L1063.43 1212.03 L1062.85 1212.03 L1062.26 1212.03 L1061.67 1212.03 L1061.09 1212.03 L1060.5 1212.03 L1059.91 1212.03 L1059.33 1212.03 L1058.74 1212.03 L1058.15 1212.03 L1057.57 1212.03 L1056.98 1212.03 L1056.39 1212.03 L1055.81 1212.03 L1055.22 1212.03 L1054.64 1212.03 L1054.05 1212.03 L1053.46 1212.03 L1052.88 1212.03 L1052.29 1212.03 L1051.7 1212.03 L1051.12 1212.03 L1050.53 1212.03 L1049.94 1212.03 L1049.36 1212.03 L1048.77 1212.03 L1048.19 1212.03 L1047.6 1212.03 L1047.01 1212.03 L1046.43 1212.03 L1045.84 1212.03 L1045.25 1212.03 L1044.67 1212.03 L1044.08 1212.03 L1043.49 1212.03 L1042.91 1212.03 L1042.32 1212.03 L1041.73 1212.03 L1041.15 1212.03 L1040.56 1212.03 L1039.98 1212.03 L1039.39 1212.03 L1038.8 1212.03 L1038.22 1212.03 L1037.63 1212.03 L1037.04 1212.03 L1036.46 1212.03 L1035.87 1212.03 L1035.28 1212.03 L1034.7 1212.03 L1034.11 1212.03 L1033.52 1212.03 L1032.94 1212.03 L1032.35 1212.03 L1031.77 1212.03 L1031.18 1212.03 L1030.59 1212.03 L1030.01 1212.03 L1029.42 1212.03 L1028.83 1212.03 L1028.25 1212.03 L1027.66 1212.03 L1027.07 1212.03 L1026.49 1212.03 L1025.9 1212.03 L1025.32 1212.03 L1024.73 1212.03 L1024.14 1212.03 L1023.56 1212.03 L1022.97 1212.03 L1022.38 1212.03 L1021.8 1212.03 L1021.21 1212.03 L1020.62 1212.03 L1020.04 1212.03 L1019.45 1212.03 L1018.86 1212.03 L1018.28 1212.03 L1017.69 1212.03 L1017.11 1212.03 L1016.52 1212.03 L1015.93 1212.03 L1015.35 1212.03 L1014.76 1212.03 L1014.17 1212.03 L1013.59 1212.03 L1013 1212.03 L1012.41 1212.03 L1011.83 1212.03 L1011.24 1212.03 L1010.65 1212.03 L1010.07 1212.03 L1009.48 1212.03 L1008.9 1212.03 L1008.31 1212.03 L1007.72 1212.03 L1007.14 1212.03 L1006.55 1212.03 L1005.96 1212.03 L1005.38 1212.03 L1004.79 1212.03 L1004.2 1212.03 L1003.62 1212.03 L1003.03 1212.03 L1002.44 1212.03 L1001.86 1212.03 L1001.27 1212.03 L1000.69 1212.03 L1000.1 1212.03 L999.513 1212.03 L998.926 1212.03 L998.34 1212.03 L997.754 1212.03 L997.167 1212.03 L996.581 1212.03 L995.994 1212.03 L995.408 1212.03 L994.822 1212.03 L994.235 1212.03 L993.649 1212.03 L993.062 1212.03 L992.476 1212.03 L991.889 1212.03 L991.303 1212.03 L990.717 1212.03 L990.13 1212.03 L989.544 1212.03 L988.957 1212.03 L988.371 1212.03 L987.785 1212.03 L987.198 1212.03 L986.612 1212.03 L986.025 1212.03  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.16 986.612,1212.16 987.198,1212.16 987.785,1212.16 988.371,1212.16 988.957,1212.16 989.544,1212.16 990.13,1212.16 990.717,1212.16 991.303,1212.16 991.889,1212.16 992.476,1212.16 993.062,1212.16 993.649,1212.16 994.235,1212.16 994.822,1212.16 995.408,1212.16 995.994,1212.16 996.581,1212.16 997.167,1212.16 997.754,1212.16 998.34,1212.16 998.926,1212.16 999.513,1212.16 1000.1,1212.16 1000.69,1212.16 1001.27,1212.16 1001.86,1212.16 1002.44,1212.16 1003.03,1212.16 1003.62,1212.16 1004.2,1212.16 1004.79,1212.16 1005.38,1212.16 1005.96,1212.16 1006.55,1212.16 1007.14,1212.16 1007.72,1212.16 1008.31,1212.16 1008.9,1212.16 1009.48,1212.16 1010.07,1212.16 1010.65,1212.16 1011.24,1212.16 1011.83,1212.16 1012.41,1212.16 1013,1212.16 1013.59,1212.16 1014.17,1212.16 1014.76,1212.16 1015.35,1212.16 1015.93,1212.16 1016.52,1212.16 1017.11,1212.16 1017.69,1212.16 1018.28,1212.16 1018.86,1212.16 1019.45,1212.16 1020.04,1212.16 1020.62,1212.16 1021.21,1212.16 1021.8,1212.16 1022.38,1212.16 1022.97,1212.16 1023.56,1212.16 1024.14,1212.16 1024.73,1212.16 1025.32,1212.16 1025.9,1212.16 1026.49,1212.16 1027.07,1212.16 1027.66,1212.16 1028.25,1212.16 1028.83,1212.16 1029.42,1212.16 1030.01,1212.16 1030.59,1212.16 1031.18,1212.16 1031.77,1212.16 1032.35,1212.16 1032.94,1212.16 1033.52,1212.16 1034.11,1212.16 1034.7,1212.16 1035.28,1212.16 1035.87,1212.16 1036.46,1212.16 1037.04,1212.16 1037.63,1212.16 1038.22,1212.16 1038.8,1212.16 1039.39,1212.16 1039.98,1212.16 1040.56,1212.16 1041.15,1212.16 1041.73,1212.16 1042.32,1212.16 1042.91,1212.16 1043.49,1212.16 1044.08,1212.16 1044.67,1212.16 1045.25,1212.16 1045.84,1212.16 1046.43,1212.16 1047.01,1212.16 1047.6,1212.16 1048.19,1212.16 1048.77,1212.16 1049.36,1212.16 1049.94,1212.16 1050.53,1212.16 1051.12,1212.16 1051.7,1212.16 1052.29,1212.16 1052.88,1212.16 1053.46,1212.16 1054.05,1212.16 1054.64,1212.16 1055.22,1212.16 1055.81,1212.16 1056.39,1212.16 1056.98,1212.16 1057.57,1212.16 1058.15,1212.16 1058.74,1212.16 1059.33,1212.16 1059.91,1212.16 1060.5,1212.16 1061.09,1212.16 1061.67,1212.16 1062.26,1212.16 1062.85,1212.16 1063.43,1212.16 1064.02,1212.16 1064.6,1212.16 1065.19,1212.16 1065.78,1212.16 1066.36,1212.16 1066.95,1212.16 1067.54,1212.16 1068.12,1212.16 1068.71,1212.16 1069.3,1212.16 1069.88,1212.16 1070.47,1212.16 1071.06,1212.16 1071.64,1212.16 1072.23,1212.16 1072.81,1212.16 1073.4,1212.16 1073.99,1212.16 1074.57,1212.16 1075.16,1212.16 1075.75,1212.16 1076.33,1212.16 1076.92,1212.16 1077.51,1212.16 1078.09,1212.16 1078.68,1212.16 1079.26,1212.16 1079.85,1212.16 1080.44,1212.16 1081.02,1212.16 1081.61,1212.16 1082.2,1212.16 1082.78,1212.16 1083.37,1212.16 1083.96,1212.16 1084.54,1212.16 1085.13,1212.16 1085.72,1212.16 1086.3,1212.16 1086.89,1212.16 1087.47,1212.16 1088.06,1212.16 1088.65,1212.16 1089.23,1212.16 1089.82,1212.16 1090.41,1212.16 1090.99,1212.16 1091.58,1212.16 1092.17,1212.16 1092.75,1212.16 1093.34,1212.16 1093.93,1212.16 1094.51,1212.16 1095.1,1212.16 1095.68,1212.16 1096.27,1212.16 1096.86,1212.16 1097.44,1212.16 1098.03,1212.16 1098.62,1212.16 1099.2,1212.16 1099.79,1212.16 1100.38,1212.16 1100.96,1212.16 1101.55,1212.16 1102.14,1212.16 1102.72,1212.16 1103.31,1212.16 1103.89,1212.16 1104.48,1212.16 1105.07,1212.16 1105.65,1212.16 1106.24,1212.16 1106.83,1212.16 1107.41,1212.16 1108,1212.16 1108.59,1212.16 1109.17,1212.16 1109.76,1212.16 1110.34,1212.16 1110.93,1212.16 1111.52,1212.16 1112.1,1212.16 1112.69,1212.16 1113.28,1212.16 1113.86,1212.16 1114.45,1212.16 1115.04,1212.16 1115.62,1212.16 1116.21,1212.16 1116.8,1212.16 1117.38,1212.16 1117.97,1212.16 1118.55,1212.16 1119.14,1212.16 1119.73,1212.16 1120.31,1212.16 1120.9,1212.16 1121.49,1212.16 1122.07,1212.16 1122.66,1212.16 1123.25,1212.16 1123.83,1212.16 1124.42,1212.16 1125.01,1212.16 1125.59,1212.16 1126.18,1212.16 1126.76,1212.16 1127.35,1212.16 1127.94,1212.16 1128.52,1212.16 1129.11,1212.16 1129.7,1212.16 1130.28,1212.16 1130.87,1212.16 1131.46,1212.16 1132.04,1212.16 1132.63,1212.16 1133.21,1212.16 1133.8,1212.16 1134.39,1212.16 1134.97,1212.16 1135.56,1212.16 1136.15,1212.16 1136.73,1212.16 1137.32,1212.16 1137.91,1212.16 1138.49,1212.16 1139.08,1212.16 1139.67,1212.16 1140.25,1212.16 1140.84,1212.16 1141.42,1212.16 1142.01,1212.16 1142.6,1212.16 1143.18,1212.16 1143.77,1212.16 1144.36,1212.16 1144.94,1212.16 1145.53,1212.16 1146.12,1212.16 1146.7,1212.16 1147.29,1212.16 1147.88,1212.16 1148.46,1212.16 1149.05,1212.16 1149.63,1212.16 1150.22,1212.16 1150.81,1212.16 1151.39,1212.16 1151.98,1212.16 1152.57,1212.16 1153.15,1212.16 1153.74,1212.16 1154.33,1212.16 1154.91,1212.16 1155.5,1212.16 1156.09,1212.16 1156.67,1212.16 1157.26,1212.16 1157.84,1212.16 1158.43,1212.16 1159.02,1212.16 1159.6,1212.16 1160.19,1212.16 1160.78,1212.16 1161.36,1212.16 1161.95,1212.16 1162.54,1212.16 1163.12,1212.16 1163.71,1212.16 1164.29,1212.16 1164.88,1212.16 1165.47,1212.16 1166.05,1212.16 1166.64,1212.16 1167.23,1212.16 1167.81,1212.16 1168.4,1212.16 1168.99,1212.16 1169.57,1212.16 1170.16,1212.16 1170.75,1212.16 1171.33,1212.16 1171.92,1212.16 1172.5,1212.16 1173.09,1212.16 1173.68,1212.16 1174.26,1212.16 1174.85,1212.16 1175.44,1212.16 1176.02,1212.16 1176.61,1212.16 1177.2,1212.16 1177.78,1212.16 1178.37,1212.16 1178.96,1212.16 1179.54,1212.16 1180.13,1212.16 1180.71,1212.16 1181.3,1212.16 1181.89,1212.16 1182.47,1212.16 1183.06,1212.16 1183.65,1212.16 1184.23,1212.16 1184.82,1212.16 1185.41,1212.16 1185.99,1212.16 1186.58,1212.16 1187.16,1212.16 1187.75,1212.16 1188.34,1212.16 1188.92,1212.16 1189.51,1212.16 1190.1,1212.16 1190.68,1212.16 1191.27,1212.16 1191.86,1212.16 1192.44,1212.16 1193.03,1212.16 1193.62,1212.16 1194.2,1212.16 1194.79,1212.16 1195.37,1212.16 1195.96,1212.16 1196.55,1212.16 1197.13,1212.16 1197.72,1212.16 1198.31,1212.16 1198.89,1212.16 1199.48,1212.16 1200.07,1212.16 1200.65,1212.16 1201.24,1212.16 1201.83,1212.16 1202.41,1212.16 1203,1212.16 1203.58,1212.16 1204.17,1212.16 1204.76,1212.16 1205.34,1212.16 1205.93,1212.16 1206.52,1212.16 1207.1,1212.16 1207.69,1212.16 1208.28,1212.16 1208.86,1212.16 1209.45,1212.16 1210.03,1212.16 1210.62,1212.16 1211.21,1212.16 1211.79,1212.16 1212.38,1212.16 1212.97,1212.16 1213.55,1212.16 1214.14,1212.16 1214.73,1212.16 1215.31,1212.16 1215.9,1212.16 1216.49,1212.16 1217.07,1212.16 1217.66,1212.16 1218.24,1212.16 1218.83,1212.16 1219.42,1212.16 1220,1212.16 1220.59,1212.16 1221.18,1212.16 1221.76,1212.16 1222.35,1212.16 1222.94,1212.16 1223.52,1212.16 1224.11,1212.16 1224.7,1212.16 1225.28,1212.16 1225.87,1212.16 1226.45,1212.16 1227.04,1212.16 1227.63,1212.16 1228.21,1212.16 1228.8,1212.16 1229.39,1212.16 1229.97,1212.16 1230.56,1212.16 1231.15,1212.16 1231.73,1212.16 1232.32,1212.16 1232.91,1212.16 1233.49,1212.16 1234.08,1212.16 1234.66,1212.16 1235.25,1212.16 1235.84,1212.16 1236.42,1212.16 1237.01,1212.16 1237.6,1212.16 1238.18,1212.16 1238.77,1212.16 1239.36,1212.16 1239.94,1212.16 1240.53,1212.16 1241.11,1212.16 1241.7,1212.16 1242.29,1212.16 1242.87,1212.16 1243.46,1212.16 1244.05,1212.16 1244.63,1212.16 1245.22,1212.16 1245.81,1212.16 1246.39,1212.16 1246.98,1212.16 1247.57,1212.16 1248.15,1212.16 1248.74,1212.16 1249.32,1212.16 1249.91,1212.16 1250.5,1212.16 1251.08,1212.16 1251.67,1212.16 1252.26,1212.16 1252.84,1212.16 1253.43,1212.16 1254.02,1212.16 1254.6,1212.16 1255.19,1212.16 1255.78,1212.16 1256.36,1212.16 1256.95,1212.16 1257.53,1212.16 1258.12,1212.16 1258.71,1212.16 1259.29,1212.16 1259.88,1212.16 1260.47,1212.16 1261.05,1212.16 1261.64,1212.16 1262.23,1212.16 1262.81,1212.16 1263.4,1212.16 1263.98,1212.16 1264.57,1212.16 1265.16,1212.16 1265.74,1212.16 1266.33,1212.16 1266.92,1212.16 1267.5,1212.16 1268.09,1212.16 1268.68,1212.16 1269.26,1212.16 1269.85,1212.16 1270.44,1212.16 1271.02,1212.16 1271.61,1212.16 1272.19,1212.16 1272.78,1212.16 1273.37,1212.16 1273.95,1212.16 1274.54,1212.16 1275.13,1212.16 1275.71,1212.16 1276.3,1212.16 1276.89,1212.16 1277.47,1212.16 1278.06,1212.16 1278.65,1212.16 1279.23,1212.16 1279.82,1212.16 1280.4,1212.16 1280.99,1212.16 1281.58,1212.16 1282.16,1212.16 1282.75,1212.16 1283.34,1212.16 1283.92,1212.16 1284.51,1212.16 1285.1,1212.16 1285.68,1212.16 1286.27,1212.16 1286.86,1212.16 1287.44,1212.16 1288.03,1212.16 1288.61,1212.16 1289.2,1212.16 1289.79,1212.16 1290.37,1212.16 1290.96,1212.16 1291.55,1212.16 1292.13,1212.16 1292.72,1212.16 1293.31,1212.16 1293.89,1212.16 1294.48,1212.16 1295.06,1212.16 1295.65,1212.16 1296.24,1212.16 1296.82,1212.16 1297.41,1212.16 1298,1212.16 1298.58,1212.16 1299.17,1212.16 1299.76,1212.16 1300.34,1212.16 1300.93,1212.16 1301.52,1212.16 1302.1,1212.16 1302.69,1212.16 1303.27,1212.16 1303.86,1212.16 1304.45,1212.16 1305.03,1212.16 1305.62,1212.16 1306.21,1212.16 1306.79,1212.16 1307.38,1212.16 1307.97,1212.16 1308.55,1212.16 1309.14,1212.16 1309.73,1212.16 1310.31,1212.16 1310.9,1212.16 1311.48,1212.16 1312.07,1212.16 1312.66,1212.16 1313.24,1212.16 1313.83,1212.16 1314.42,1212.16 1315,1212.16 1315.59,1212.16 1316.18,1212.16 1316.76,1212.16 1317.35,1212.16 1317.93,1212.16 1318.52,1212.16 1319.11,1212.16 1319.69,1212.16 1320.28,1212.16 1320.87,1212.16 1321.45,1212.16 1322.04,1212.16 1322.63,1212.16 1323.21,1212.16 1323.8,1212.16 1324.39,1212.16 1324.97,1212.16 1325.56,1212.16 1326.14,1212.16 1326.73,1212.16 1327.32,1212.16 1327.9,1212.16 1328.49,1212.16 1329.08,1212.16 1329.66,1212.16 1330.25,1212.16 1330.84,1212.16 1331.42,1212.16 1332.01,1212.16 1332.6,1212.16 1333.18,1212.16 1333.77,1212.16 1334.35,1212.16 1334.94,1212.16 1335.53,1212.16 1336.11,1212.16 1336.7,1212.16 1337.29,1212.16 1337.87,1212.16 1338.46,1212.16 1339.05,1212.16 1339.63,1212.16 1340.22,1212.16 1340.8,1212.16 1341.39,1212.16 1341.98,1212.16 1342.56,1212.16 1343.15,1212.16 1343.74,1212.16 1344.32,1212.16 1344.91,1212.16 1345.5,1212.16 1346.08,1212.16 1346.67,1212.16 1347.26,1212.16 1347.84,1212.16 1348.43,1212.16 1349.01,1212.16 1349.6,1212.16 1350.19,1212.16 1350.77,1212.16 1351.36,1212.16 1351.95,1212.16 1352.53,1212.16 1353.12,1212.16 1353.71,1212.16 1354.29,1212.16 1354.88,1212.16 1355.47,1212.16 1356.05,1212.16 1356.64,1212.16 1357.22,1212.16 1357.81,1212.16 1358.4,1212.16 1358.98,1212.16 1359.57,1212.16 1360.16,1212.16 1360.74,1212.16 1361.33,1212.16 1361.92,1212.16 1362.5,1212.16 1363.09,1212.16 1363.68,1212.16 1364.26,1212.16 1364.85,1212.16 1365.43,1212.16 1366.02,1212.16 1366.61,1212.16 1367.19,1212.16 1367.78,1212.16 1368.37,1212.16 1368.95,1212.16 1369.54,1212.16 1370.13,1212.16 1370.71,1212.16 1371.3,1212.16 1371.88,1212.16 1372.47,1212.16 1373.06,1212.16 1373.64,1212.16 1374.23,1212.16 1374.82,1212.16 1375.4,1212.16 1375.99,1212.16 1376.58,1212.16 1377.16,1212.16 1377.75,1212.16 1378.34,1212.16 1378.92,1212.16 1379.51,1212.16 1380.09,1212.16 1380.68,1212.16 1381.27,1212.16 1381.85,1212.16 1382.44,1212.16 1383.03,1212.16 1383.61,1212.16 1384.2,1212.16 1384.79,1212.16 1385.37,1212.16 1385.96,1212.16 1386.55,1212.16 1387.13,1212.16 1387.72,1212.16 1388.3,1212.16 1388.89,1212.16 1389.48,1212.16 1390.06,1212.16 1390.65,1212.16 1391.24,1212.16 1391.82,1212.16 1392.41,1212.16 1393,1212.16 1393.58,1212.16 1394.17,1212.16 1394.75,1212.16 1395.34,1212.16 1395.93,1212.16 1396.51,1212.16 1397.1,1212.16 1397.69,1212.16 1398.27,1212.16 1398.86,1212.16 1399.45,1212.16 1400.03,1212.16 1400.62,1212.16 1401.21,1212.16 1401.79,1212.16 1402.38,1212.16 1402.96,1212.16 1403.55,1212.16 1404.14,1212.16 1404.72,1212.16 1405.31,1212.16 1405.9,1212.16 1406.48,1212.16 1407.07,1212.16 1407.66,1212.16 1408.24,1212.16 1408.83,1212.16 1409.42,1212.16 1410,1212.16 1410.59,1212.16 1411.17,1212.16 1411.76,1212.16 1412.35,1212.16 1412.93,1212.16 1413.52,1212.16 1414.11,1212.16 1414.69,1212.16 1415.28,1212.16 1415.87,1212.16 1416.45,1212.16 1417.04,1212.16 1417.63,1212.16 1418.21,1212.16 1418.8,1212.16 1419.38,1212.16 1419.97,1212.16 1420.56,1212.16 1421.14,1212.16 1421.73,1212.16 1422.32,1212.16 1422.9,1212.16 1423.49,1212.16 1424.08,1212.16 1424.66,1212.16 1425.25,1212.16 1425.83,1212.16 1426.42,1212.16 1427.01,1212.16 1427.59,1212.16 1428.18,1212.16 1428.77,1212.16 1429.35,1212.16 1429.94,1212.16 1430.53,1212.16 1431.11,1212.16 1431.7,1212.16 1432.29,1212.16 1432.87,1212.16 1433.46,1212.16 1434.04,1212.16 1434.63,1212.16 1435.22,1212.16 1435.8,1212.16 1436.39,1212.16 1436.98,1212.16 1437.56,1212.16 1438.15,1212.16 1438.74,1212.16 1439.32,1212.16 1439.91,1212.16 1440.5,1212.16 1441.08,1212.16 1441.67,1212.16 1442.25,1212.16 1442.84,1212.16 1443.43,1212.16 1444.01,1212.16 1444.6,1212.16 1445.19,1212.16 1445.77,1212.16 1446.36,1212.16 1446.95,1212.16 1447.53,1212.16 1448.12,1212.16 1448.7,1212.16 1449.29,1212.16 1449.88,1212.16 1450.46,1212.16 1451.05,1212.16 1451.64,1212.16 1452.22,1212.16 1452.81,1212.16 1453.4,1212.16 1453.98,1212.16 1454.57,1212.16 1455.16,1212.16 1455.74,1212.16 1456.33,1212.16 1456.91,1212.16 1457.5,1212.16 1458.09,1212.16 1458.67,1212.16 1459.26,1212.16 1459.85,1212.16 1460.43,1212.16 1461.02,1212.16 1461.61,1212.16 1462.19,1212.16 1462.78,1212.16 1463.37,1212.16 1463.95,1212.16 1464.54,1212.16 1465.12,1212.16 1465.71,1212.16 1466.3,1212.16 1466.88,1212.16 1467.47,1212.16 1468.06,1212.16 1468.64,1212.16 1469.23,1212.16 1469.82,1212.16 1470.4,1212.16 1470.99,1212.16 1471.57,1212.16 1472.16,1212.16 1472.75,1212.16 1473.33,1212.16 1473.92,1212.16 1474.51,1212.16 1475.09,1212.16 1475.68,1212.16 1476.27,1212.16 1476.85,1212.16 1477.44,1212.16 1478.03,1212.16 1478.61,1212.16 1479.2,1212.16 1479.78,1212.16 1480.37,1212.16 1480.96,1212.16 1481.54,1212.16 1482.13,1212.16 1482.72,1212.16 1483.3,1212.16 1483.89,1212.16 1484.48,1212.16 1485.06,1212.16 1485.65,1212.16 1486.24,1212.16 1486.82,1212.16 1487.41,1212.16 1487.99,1212.16 1488.58,1212.16 1489.17,1212.16 1489.75,1212.16 1490.34,1212.16 1490.93,1212.16 1491.51,1212.16 1492.1,1212.16 1492.69,1212.16 1493.27,1212.16 1493.86,1212.16 1494.45,1212.16 1495.03,1212.16 1495.62,1212.16 1496.2,1212.16 1496.79,1212.16 1497.38,1212.16 1497.96,1212.16 1498.55,1212.16 1499.14,1212.16 1499.72,1212.16 1500.31,1212.16 1500.9,1212.16 1501.48,1212.16 1502.07,1212.16 1502.65,1212.16 1503.24,1212.16 1503.83,1212.16 1504.41,1212.16 1505,1212.16 1505.59,1212.16 1506.17,1212.16 1506.76,1212.16 1507.35,1212.16 1507.93,1212.16 1508.52,1212.16 1509.11,1212.16 1509.69,1212.16 1510.28,1212.16 1510.86,1212.16 1511.45,1212.16 1512.04,1212.16 1512.62,1212.16 1513.21,1212.16 1513.8,1212.16 1514.38,1212.16 1514.97,1212.16 1515.56,1212.16 1516.14,1212.16 1516.73,1212.16 1517.32,1212.16 1517.9,1212.16 1518.49,1212.16 1519.07,1212.16 1519.66,1212.16 1520.25,1212.16 1520.83,1212.16 1521.42,1212.16 1522.01,1212.16 1522.59,1212.16 1523.18,1212.16 1523.77,1212.16 1524.35,1212.16 1524.94,1212.16 1525.52,1212.16 1526.11,1212.16 1526.7,1212.16 1527.28,1212.16 1527.87,1212.16 1528.46,1212.16 1529.04,1212.16 1529.63,1212.16 1530.22,1212.16 1530.8,1212.16 1531.39,1212.16 1531.98,1212.16 1532.56,1212.16 1533.15,1212.16 1533.73,1212.16 1534.32,1212.16 1534.91,1212.16 1535.49,1212.16 1536.08,1212.16 1536.67,1212.16 1537.25,1212.16 1537.84,1212.16 1538.43,1212.16 1539.01,1212.16 1539.6,1212.16 1540.19,1212.16 1540.77,1212.16 1541.36,1212.16 1541.94,1212.16 1542.53,1212.16 1543.12,1212.16 1543.7,1212.16 1544.29,1212.16 1544.88,1212.16 1545.46,1212.16 1546.05,1212.16 1546.64,1212.16 1547.22,1212.16 1547.81,1212.16 1548.4,1212.16 1548.98,1212.16 1549.57,1212.16 1550.15,1212.16 1550.74,1212.16 1551.33,1212.16 1551.91,1212.16 1552.5,1212.16 1553.09,1212.16 1553.67,1212.16 1554.26,1212.16 1554.85,1212.16 1555.43,1212.16 1556.02,1212.16 1556.6,1212.16 1557.19,1212.16 1557.78,1212.16 1558.36,1212.16 1558.95,1212.16 1559.54,1212.16 1560.12,1212.16 1560.71,1212.16 1561.3,1212.16 1561.88,1212.16 1562.47,1212.16 1563.06,1212.16 1563.64,1212.16 1564.23,1212.16 1564.81,1212.16 1565.4,1212.16 1565.99,1212.16 1566.57,1212.16 1567.16,1212.16 1567.75,1212.16 1568.33,1212.16 1568.92,1212.16 1569.51,1212.16 1570.09,1212.16 1570.68,1212.16 1571.27,1212.16 1571.85,1212.16 1572.44,1212.16 1573.02,1212.16 1573.61,1212.16 1574.2,1212.16 1574.78,1212.16 1575.37,1212.16 1575.96,1212.16 1576.54,1212.16 1577.13,1212.16 1577.72,1212.16 1578.3,1212.16 1578.89,1212.16 1579.47,1212.16 1580.06,1212.16 1580.65,1212.16 1581.23,1212.16 1581.82,1212.16 1582.41,1212.16 1582.99,1212.16 1583.58,1212.16 1584.17,1212.16 1584.75,1212.16 1585.34,1212.16 1585.93,1212.16 1586.51,1212.16 1587.1,1212.16 1587.68,1212.16 1588.27,1212.16 1588.86,1212.16 1589.44,1212.16 1590.03,1212.16 1590.62,1212.16 1591.2,1212.16 1591.79,1212.16 1592.38,1212.16 1592.96,1212.16 1593.55,1212.16 1594.14,1212.16 1594.72,1212.16 1595.31,1212.16 1595.89,1212.16 1596.48,1212.16 1597.07,1212.16 1597.65,1212.16 1598.24,1212.16 1598.83,1212.16 1599.41,1212.16 1600,1212.16 1600.59,1212.16 1601.17,1212.16 1601.76,1212.16 1602.34,1212.16 1602.93,1212.16 1603.52,1212.16 1604.1,1212.16 1604.69,1212.16 1605.28,1212.16 1605.86,1212.16 1606.45,1212.16 1607.04,1212.16 1607.62,1212.16 1608.21,1212.16 1608.8,1212.16 1609.38,1212.16 1609.97,1212.16 1610.55,1212.16 1611.14,1212.16 1611.73,1212.16 1612.31,1212.16 1612.9,1212.16 1613.49,1212.16 1614.07,1212.16 1614.66,1212.16 1615.25,1212.16 1615.83,1212.16 1616.42,1212.16 1617.01,1212.16 1617.59,1212.16 1618.18,1212.16 1618.76,1212.16 1619.35,1212.16 1619.94,1212.16 1620.52,1212.16 1621.11,1212.16 1621.7,1212.16 1622.28,1212.16 1622.87,1212.16 1623.46,1212.16 1624.04,1212.16 1624.63,1212.16 1625.22,1212.16 1625.8,1212.16 1626.39,1212.16 1626.97,1212.16 1627.56,1212.16 1628.15,1212.16 1628.73,1212.16 1629.32,1212.16 1629.91,1212.16 1630.49,1212.16 1631.08,1212.16 1631.67,1212.16 1632.25,1212.16 1632.84,1212.16 1633.42,1212.16 1634.01,1212.16 1634.6,1212.16 1635.18,1212.16 1635.77,1212.16 1636.36,1212.16 1636.94,1212.16 1637.53,1212.16 1638.12,1212.16 1638.7,1212.16 1639.29,1212.16 1639.88,1212.16 1640.46,1212.16 1641.05,1212.16 1641.63,1212.16 1642.22,1212.16 1642.81,1212.16 1643.39,1212.16 1643.98,1212.16 1644.57,1212.16 1645.15,1212.16 1645.74,1212.16 1646.33,1212.16 1646.91,1212.16 1647.5,1212.16 1648.09,1212.16 1648.67,1212.16 1649.26,1212.16 1649.84,1212.16 1650.43,1212.16 1651.02,1212.16 1651.6,1212.16 1652.19,1212.16 1652.78,1212.16 1653.36,1212.16 1653.95,1212.16 1654.54,1212.16 1655.12,1212.16 1655.71,1212.16 1656.29,1212.16 1656.88,1212.16 1657.47,1212.16 1658.05,1212.16 1658.64,1212.16 1659.23,1212.16 1659.81,1212.16 1660.4,1212.16 1660.99,1212.16 1661.57,1212.16 1662.16,1212.16 1662.75,1212.16 1663.33,1212.16 1663.92,1212.16 1664.5,1212.16 1665.09,1212.16 1665.68,1212.16 1666.26,1212.16 1666.85,1212.16 1667.44,1212.16 1668.02,1212.16 1668.61,1212.16 1669.2,1212.16 1669.78,1212.16 1670.37,1212.16 1670.96,1212.16 1671.54,1212.16 1672.13,1212.16 1672.71,1212.16 1673.3,1212.16 1673.89,1212.16 1674.47,1212.16 1675.06,1212.16 1675.65,1212.16 1676.23,1212.16 1676.82,1212.16 1677.41,1212.16 1677.99,1212.16 1678.58,1212.16 1679.17,1212.16 1679.75,1212.16 1680.34,1212.16 1680.92,1212.16 1681.51,1212.16 1682.1,1212.16 1682.68,1212.16 1683.27,1212.16 1683.86,1212.16 1684.44,1212.16 1685.03,1212.16 1685.62,1212.16 1686.2,1212.16 1686.79,1212.16 1687.37,1212.16 1687.96,1212.16 1688.55,1212.16 1689.13,1212.16 1689.72,1212.16 1690.31,1212.16 1690.89,1212.16 1691.48,1212.16 1692.07,1212.16 1692.65,1212.16 1693.24,1212.16 1693.83,1212.16 1694.41,1212.16 1695,1212.16 1695.58,1212.16 1696.17,1212.16 1696.76,1212.16 1697.34,1212.16 1697.93,1212.16 1698.52,1212.16 1699.1,1212.16 1699.69,1212.16 1700.28,1212.16 1700.86,1212.16 1701.45,1212.16 1702.04,1212.16 1702.62,1212.16 1703.21,1212.16 1703.79,1212.16 1704.38,1212.16 1704.97,1212.16 1705.55,1212.16 1706.14,1212.16 1706.73,1212.16 1707.31,1212.16 1707.9,1212.16 1708.49,1212.16 1709.07,1212.16 1709.66,1212.16 1710.24,1212.16 1710.83,1212.16 1711.42,1212.16 1712,1212.16 1712.59,1212.16 1713.18,1212.16 1713.76,1212.16 1714.35,1212.16 1714.94,1212.16 1715.52,1212.16 1716.11,1212.16 1716.7,1212.16 1717.28,1212.16 1717.87,1212.16 1718.45,1212.16 1719.04,1212.16 1719.63,1212.16 1720.21,1212.16 1720.8,1212.16 1721.39,1212.16 1721.97,1212.16 1722.56,1212.16 1723.15,1212.16 1723.73,1212.16 1724.32,1212.16 1724.91,1212.16 1725.49,1212.16 1726.08,1212.16 1726.66,1212.16 1727.25,1212.16 1727.84,1212.16 1728.42,1212.16 1729.01,1212.16 1729.6,1212.16 1730.18,1212.16 1730.77,1212.16 1731.36,1212.16 1731.94,1212.16 1732.53,1212.16 1733.11,1212.16 1733.7,1212.16 1734.29,1212.16 1734.87,1212.16 1735.46,1212.16 1736.05,1212.16 1736.63,1212.16 1737.22,1212.16 1737.81,1212.16 1738.39,1212.16 1738.98,1212.16 1739.57,1212.16 1740.15,1212.16 1740.74,1212.16 1741.32,1212.16 1741.91,1212.16 1742.5,1212.16 1743.08,1212.16 1743.67,1212.16 1744.26,1212.16 1744.84,1212.16 1745.43,1212.16 1746.02,1212.16 1746.6,1212.16 1747.19,1212.16 1747.78,1212.16 1748.36,1212.16 1748.95,1212.16 1749.53,1212.16 1750.12,1212.16 1750.71,1212.16 1751.29,1212.16 1751.88,1212.16 1752.47,1212.16 1753.05,1212.16 1753.64,1212.16 1754.23,1212.16 1754.81,1212.16 1755.4,1212.16 1755.99,1212.16 1756.57,1212.16 1757.16,1212.16 1757.74,1212.16 1758.33,1212.16 1758.92,1212.16 1759.5,1212.16 1760.09,1212.16 1760.68,1212.16 1761.26,1212.16 1761.85,1212.16 1762.44,1212.16 1763.02,1212.16 1763.61,1212.16 1764.19,1212.16 1764.78,1212.16 1765.37,1212.16 1765.95,1212.16 1766.54,1212.16 1767.13,1212.16 1767.71,1212.16 1768.3,1212.16 1768.89,1212.16 1769.47,1212.16 1770.06,1212.16 1770.65,1212.16 1771.23,1212.16 1771.82,1212.16 1772.4,1212.16 1772.99,1212.16 1773.58,1212.16 1774.16,1212.16 1774.75,1212.16 1775.34,1212.16 1775.92,1212.16 1776.51,1212.16 1777.1,1212.16 1777.68,1212.16 1778.27,1212.16 1778.86,1212.16 1779.44,1212.16 1780.03,1212.16 1780.61,1212.16 1781.2,1212.16 1781.79,1212.16 1782.37,1212.16 1782.96,1212.16 1783.55,1212.16 1784.13,1212.16 1784.72,1212.16 1785.31,1212.16 1785.89,1212.16 1786.48,1212.16 1787.06,1212.16 1787.65,1212.16 1788.24,1212.16 1788.82,1212.16 1789.41,1212.16 1790,1212.16 1790.58,1212.16 1791.17,1212.16 1791.76,1212.16 1792.34,1212.16 1792.93,1212.16 1793.52,1212.16 1794.1,1212.16 1794.69,1212.16 1795.27,1212.16 1795.86,1212.16 1796.45,1212.16 1797.03,1212.16 1797.62,1212.16 1798.21,1212.16 1798.79,1212.16 1799.38,1212.16 1799.97,1212.16 1800.55,1212.16 1801.14,1212.16 1801.73,1212.16 1802.31,1212.16 1802.9,1212.16 1803.48,1212.16 1804.07,1212.16 1804.66,1212.16 1805.24,1212.16 1805.83,1212.16 1806.42,1212.16 1807,1212.16 1807.59,1212.16 1808.18,1212.16 1808.76,1212.16 1809.35,1212.16 1809.94,1212.16 1810.52,1212.16 1811.11,1212.16 1811.69,1212.16 1812.28,1212.16 1812.87,1212.16 1813.45,1212.16 1814.04,1212.16 1814.63,1212.16 1815.21,1212.16 1815.8,1212.16 1816.39,1212.16 1816.97,1212.16 1817.56,1212.16 1818.14,1212.16 1818.73,1212.16 1819.32,1212.16 1819.9,1212.16 1820.49,1212.16 1821.08,1212.16 1821.66,1212.16 1822.25,1212.16 1822.84,1212.16 1823.42,1212.16 1824.01,1212.16 1824.6,1212.16 1825.18,1212.16 1825.77,1212.16 1826.35,1212.16 1826.94,1212.16 1827.53,1212.16 1828.11,1212.16 1828.7,1212.16 1829.29,1212.16 1829.87,1212.16 1830.46,1212.16 1831.05,1212.16 1831.63,1212.16 1832.22,1212.16 1832.81,1212.16 1833.39,1212.16 1833.98,1212.16 1834.56,1212.16 1835.15,1212.16 1835.74,1212.16 1836.32,1212.16 1836.91,1212.16 1837.5,1212.16 1838.08,1212.16 1838.67,1212.16 1839.26,1212.16 1839.84,1212.16 1840.43,1212.16 1841.01,1212.16 1841.6,1212.16 1842.19,1212.16 1842.77,1212.16 1843.36,1212.16 1843.95,1212.16 1844.53,1212.16 1845.12,1212.16 1845.71,1212.16 1846.29,1212.16 1846.88,1212.16 1847.47,1212.16 1848.05,1212.16 1848.64,1212.16 1849.22,1212.16 1849.81,1212.16 1850.4,1212.16 1850.98,1212.16 1851.57,1212.16 1852.16,1212.16 1852.74,1212.16 1853.33,1212.16 1853.92,1212.16 1854.5,1212.16 1855.09,1212.16 1855.68,1212.16 1856.26,1212.16 1856.85,1212.16 1857.43,1212.16 1858.02,1212.16 1858.61,1212.16 1859.19,1212.16 1859.78,1212.16 1860.37,1212.16 1860.95,1212.16 1861.54,1212.16 1862.13,1212.16 1862.71,1212.16 1863.3,1212.16 1863.88,1212.16 1864.47,1212.16 1865.06,1212.16 1865.64,1212.16 1866.23,1212.16 1866.82,1212.16 1867.4,1212.16 1867.99,1212.16 1868.58,1212.16 1869.16,1212.16 1869.75,1212.16 1870.34,1212.16 1870.92,1212.16 1871.51,1212.16 1872.09,1212.16 1872.68,1212.16 1873.27,1212.16 1873.85,1212.16 1874.44,1212.16 1875.03,1212.16 1875.61,1212.16 1876.2,1212.16 1876.79,1212.16 1877.37,1212.16 1877.96,1212.16 1878.55,1212.16 1879.13,1212.16 1879.72,1212.16 1880.3,1212.16 1880.89,1212.16 1881.48,1212.16 1882.06,1212.16 1882.65,1212.16 1883.24,1212.16 1883.82,1212.16 1884.41,1212.16 1885,1212.16 1885.58,1212.16 1886.17,1212.16 1886.76,1212.16 1887.34,1212.16 1887.93,1212.16 1888.51,1212.16 1889.1,1212.16 1889.69,1212.16 1890.27,1212.16 1890.86,1212.16 1891.45,1212.16 1892.03,1212.16 1892.62,1212.16 1893.21,1212.16 1893.79,1212.16 1894.38,1212.16 1894.96,1212.16 1895.55,1212.16 1896.14,1212.16 1896.72,1212.16 1897.31,1212.16 1897.9,1212.16 1898.48,1212.16 1899.07,1212.16 1899.66,1212.16 1900.24,1212.16 1900.83,1212.16 1901.42,1212.16 1902,1212.16 1902.59,1212.16 1903.17,1212.16 1903.76,1212.16 1904.35,1212.16 1904.93,1212.16 1905.52,1212.16 1906.11,1212.16 1906.69,1212.16 1907.28,1212.16 1907.87,1212.16 1908.45,1212.16 1909.04,1212.16 1909.63,1212.16 1910.21,1212.16 1910.8,1212.16 1911.38,1212.16 1911.97,1212.16 1912.56,1212.16 1913.14,1212.16 1913.73,1212.16 1914.32,1212.16 1914.9,1212.16 1915.49,1212.16 1916.08,1212.16 1916.66,1212.16 1917.25,1212.16 1917.83,1212.16 1918.42,1212.16 1919.01,1212.16 1919.59,1212.16 1920.18,1212.16 1920.77,1212.16 1921.35,1212.16 1921.94,1212.16 1922.53,1212.16 1923.11,1212.16 1923.7,1212.16 1924.29,1212.16 1924.87,1212.16 1925.46,1212.16 1926.04,1212.16 1926.63,1212.16 1927.22,1212.16 1927.8,1212.16 1928.39,1212.16 1928.98,1212.16 1929.56,1212.16 1930.15,1212.16 1930.74,1212.16 1931.32,1212.16 1931.91,1212.16 1932.5,1212.16 1933.08,1212.16 1933.67,1212.16 1934.25,1212.16 1934.84,1212.16 1935.43,1212.16 1936.01,1212.16 1936.6,1212.16 1937.19,1212.16 1937.77,1212.16 1938.36,1212.16 1938.95,1212.16 1939.53,1212.16 1940.12,1212.16 1940.71,1212.16 1941.29,1212.16 1941.88,1212.16 1942.46,1212.16 1943.05,1212.16 1943.64,1212.16 1944.22,1212.16 1944.81,1212.16 1945.4,1212.16 1945.98,1212.16 1946.57,1212.16 1947.16,1212.16 1947.74,1212.16 1948.33,1212.16 1948.91,1212.16 1949.5,1212.16 1950.09,1212.16 1950.67,1212.16 1951.26,1212.16 1951.85,1212.16 1952.43,1212.16 1953.02,1212.16 1953.61,1212.16 1954.19,1212.16 1954.78,1212.16 1955.37,1212.16 1955.95,1212.16 1956.54,1212.16 1957.12,1212.16 1957.71,1212.16 1958.3,1212.16 1958.88,1212.16 1959.47,1212.16 1960.06,1212.16 1960.64,1212.16 1961.23,1212.16 1961.82,1212.16 1962.4,1212.16 1962.99,1212.16 1963.58,1212.16 1964.16,1212.16 1964.75,1212.16 1965.33,1212.16 1965.92,1212.16 1966.51,1212.16 1967.09,1212.16 1967.68,1212.16 1968.27,1212.16 1968.85,1212.16 1969.44,1212.16 1970.03,1212.16 1970.61,1212.16 1971.2,1212.16 1971.78,1212.16 1972.37,1212.16 1972.96,1212.16 1973.54,1212.16 1974.13,1212.16 1974.72,1212.16 1975.3,1212.16 1975.89,1212.16 1976.48,1212.16 1977.06,1212.16 1977.65,1212.16 1978.24,1212.16 1978.82,1212.16 1979.41,1212.16 1979.99,1212.16 1980.58,1212.16 1981.17,1212.16 1981.75,1212.16 1982.34,1212.16 1982.93,1212.16 1983.51,1212.16 1984.1,1212.16 1984.69,1212.16 1985.27,1212.16 1985.86,1212.16 1986.45,1212.16 1987.03,1212.16 1987.62,1212.16 1988.2,1212.16 1988.79,1212.16 1989.38,1212.16 1989.96,1212.16 1990.55,1212.16 1991.14,1212.16 1991.72,1212.16 1992.31,1212.16 1992.9,1212.16 1993.48,1212.16 1994.07,1212.16 1994.65,1212.16 1995.24,1212.16 1995.83,1212.16 1996.41,1212.16 1997,1212.16 1997.59,1212.16 1998.17,1212.16 1998.76,1212.16 1999.35,1212.16 1999.93,1212.16 2000.52,1212.16 2001.11,1212.16 2001.69,1212.16 2002.28,1212.16 2002.86,1212.16 2003.45,1212.16 2004.04,1212.16 2004.62,1212.16 2005.21,1212.16 2005.8,1212.16 2006.38,1212.16 2006.97,1212.16 2007.56,1212.16 2008.14,1212.16 2008.73,1212.16 2009.32,1212.16 2009.9,1212.16 2010.49,1212.16 2011.07,1212.16 2011.66,1212.16 2012.25,1212.16 2012.83,1212.16 2013.42,1212.16 2014.01,1212.16 2014.59,1212.16 2015.18,1212.16 2015.77,1212.16 2016.35,1212.16 2016.94,1212.16 2017.53,1212.16 2018.11,1212.16 2018.7,1212.16 2019.28,1212.16 2019.87,1212.16 2020.46,1212.16 2021.04,1212.16 2021.63,1212.16 2022.22,1212.16 2022.8,1212.16 2023.39,1212.16 2023.98,1212.16 2024.56,1212.16 2025.15,1212.16 2025.73,1212.16 2026.32,1212.16 2026.91,1212.16 2027.49,1212.16 2028.08,1212.16 2028.67,1212.16 2029.25,1212.16 2029.84,1212.16 2030.43,1212.16 2031.01,1212.16 2031.6,1212.16 2032.19,1212.16 2032.77,1212.16 2033.36,1212.16 2033.94,1212.16 2034.53,1212.16 2035.12,1212.16 2035.7,1212.16 2036.29,1212.16 2036.88,1212.16 2037.46,1212.16 2038.05,1212.16 2038.64,1212.16 2039.22,1212.16 2039.81,1212.16 2040.4,1212.16 2040.98,1212.16 2041.57,1212.16 2042.15,1212.16 2042.74,1212.16 2043.33,1212.16 2043.91,1212.16 2044.5,1212.16 2045.09,1212.16 2045.67,1212.16 2046.26,1212.16 2046.85,1212.16 2047.43,1212.16 2048.02,1212.16 2048.6,1212.16 2049.19,1212.16 2049.78,1212.16 2050.36,1212.16 2050.95,1212.16 2051.54,1212.16 2052.12,1212.16 2052.71,1212.16 2053.3,1212.16 2053.88,1212.16 2054.47,1212.16 2055.06,1212.16 2055.64,1212.16 2056.23,1212.16 2056.81,1212.16 2057.4,1212.16 2057.99,1212.16 2058.57,1212.16 2059.16,1212.16 2059.75,1212.16 2060.33,1212.16 2060.92,1212.16 2061.51,1212.16 2062.09,1212.16 2062.68,1212.16 2063.27,1212.16 2063.85,1212.16 2064.44,1212.16 2065.02,1212.16 2065.61,1212.16 2066.2,1212.16 2066.78,1212.16 2067.37,1212.16 2067.96,1212.16 2068.54,1212.16 2069.13,1212.16 2069.72,1212.16 2070.3,1212.16 2070.89,1212.16 2071.48,1212.16 2072.06,1212.16 2072.65,1212.16 2073.23,1212.16 2073.82,1212.16 2074.41,1212.16 2074.99,1212.16 2075.58,1212.16 2076.17,1212.16 2076.75,1212.16 2077.34,1212.16 2077.93,1212.16 2078.51,1212.16 2079.1,1212.16 2079.68,1212.16 2080.27,1212.16 2080.86,1212.16 2081.44,1212.16 2082.03,1212.16 2082.62,1212.16 2083.2,1212.16 2083.79,1212.16 2084.38,1212.16 2084.96,1212.16 2085.55,1212.16 2086.14,1212.16 2086.72,1212.16 2087.31,1212.16 2087.89,1212.16 2088.48,1212.16 2089.07,1212.16 2089.65,1212.16 2090.24,1212.16 2090.83,1212.16 2091.41,1212.16 2092,1212.16 2092.59,1212.16 2093.17,1212.16 2093.76,1212.16 2094.35,1212.16 2094.93,1212.16 2095.52,1212.16 2096.1,1212.16 2096.69,1212.16 2097.28,1212.16 2097.86,1212.16 2098.45,1212.16 2099.04,1212.16 2099.62,1212.16 2100.21,1212.16 2100.8,1212.16 2101.38,1212.16 2101.97,1212.16 2102.55,1212.16 2103.14,1212.16 2103.73,1212.16 2104.31,1212.16 2104.9,1212.16 2105.49,1212.16 2106.07,1212.16 2106.66,1212.16 2107.25,1212.16 2107.83,1212.16 2108.42,1212.16 2109.01,1212.16 2109.59,1212.16 2110.18,1212.16 2110.76,1212.16 2111.35,1212.16 2111.94,1212.16 2112.52,1212.16 2113.11,1212.16 2113.7,1212.16 2114.28,1212.16 2114.87,1212.16 2115.46,1212.16 2116.04,1212.16 2116.63,1212.16 2117.22,1212.16 2117.8,1212.16 2118.39,1212.16 2118.97,1212.16 2119.56,1212.16 2120.15,1212.16 2120.73,1212.16 2121.32,1212.16 2121.91,1212.16 2122.49,1212.16 2123.08,1212.16 2123.67,1212.16 2124.25,1212.16 2124.84,1212.16 2125.42,1212.16 2126.01,1212.16 2126.6,1212.16 2127.18,1212.16 2127.77,1212.16 2128.36,1212.16 2128.94,1212.16 2129.53,1212.16 2130.12,1212.16 2130.7,1212.16 2131.29,1212.16 2131.88,1212.16 2132.46,1212.16 2133.05,1212.16 2133.63,1212.16 2134.22,1212.16 2134.81,1212.16 2135.39,1212.16 2135.98,1212.16 2136.57,1212.16 2137.15,1212.16 2137.74,1212.16 2138.33,1212.16 2138.91,1212.16 2139.5,1212.16 2140.09,1212.16 2140.67,1212.16 2141.26,1212.16 2141.84,1212.16 2142.43,1212.16 2143.02,1212.16 2143.6,1212.16 2144.19,1212.16 2144.78,1212.16 2145.36,1212.16 2145.95,1212.16 2146.54,1212.16 2147.12,1212.16 2147.71,1212.16 2148.3,1212.16 2148.88,1212.16 2149.47,1212.16 2150.05,1212.16 2150.64,1212.16 2151.23,1212.16 2151.81,1212.16 2152.4,1212.16 2152.99,1212.16 2153.57,1212.16 2154.16,1212.16 2154.75,1212.16 2155.33,1212.16 2155.92,1212.16 2156.5,1212.16 2157.09,1212.16 2157.68,1212.16 2158.26,1212.16 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.13,1194.28 1399.39,899.083 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.55 985.439,1194.28 2158.26,1194.28 2158.26,1229.55 985.439,1229.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip763\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip763)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1471.99 162.114,-2721.12 162.673,-3924.1 163.232,-5026.24 163.792,-6058.46 164.351,-6928.72 164.91,-7744.31 165.469,-7320.57 166.029,-8092.17 166.588,-8775.07 167.147,-9391.77 167.706,-9946.56 168.266,-10443.4 168.825,-10870.1 169.384,-11263.1 169.943,-11608.7 170.503,-11185.6 171.062,-10818.7 171.621,-11084.6 172.18,-11322.5 172.74,-10981.9 173.299,-10672.4 173.858,-10855 174.417,-11002 174.977,-11133.7 175.536,-11232.7 176.095,-11311.4 176.655,-11366.2 177.214,-10759.9 177.773,-10776.1 178.332,-10769.2 178.892,-10745.7 179.451,-10707.8 180.01,-10431.2 180.569,-10360.6 181.129,-10286.5 181.688,-9815.01 182.247,-9543.6 182.806,-9286.42 183.366,-9189.09 183.925,-9084.77 184.484,-8682.99 185.043,-8577.56 185.603,-8468.49 186.162,-8352.32 186.721,-8235.62 187.28,-8006.98 187.84,-7788.7 188.399,-7574.93 188.958,-7270.45 189.517,-7158.15 190.077,-7039.14 190.636,-6843.49 191.195,-6730.2 191.754,-6382.44 192.314,-6278.03 192.873,-6091.23 193.432,-5985.51 193.991,-5808.07 194.551,-5698.18 195.11,-5584.66 195.669,-5347.01 196.228,-5122.56 196.788,-4903.06 197.347,-4690.9 197.906,-4533.75 198.465,-4380.01 199.025,-4224.27 199.584,-4070.37 200.143,-3921.65 200.702,-3817.68 201.262,-3633.89 201.821,-3493.85 202.38,-3394.44 202.939,-3220.55 203.499,-2976.65 204.058,-2891.88 204.617,-2769.45 205.176,-2689.32 205.736,-2607.72 206.295,-2489.27 206.854,-2410.64 207.413,-2268.35 207.973,-2196.77 208.532,-2029.17 209.091,-1843.71 209.65,-1691.34 210.21,-1518.29 210.769,-1466.98 211.328,-1360.73 211.887,-1284.56 212.447,-1235.21 213.006,-1161.55 213.565,-1066.26 214.124,-995.122 214.684,-899.888 215.243,-810.113 215.802,-723.635 216.361,-693.133 216.921,-659.853 217.48,-600.09 218.039,-515.282 218.598,-482.565 219.158,-358.998 219.717,-262.321 220.276,-169.01 220.835,-124.339 221.395,-57.6197 221.954,5.44271 222.513,21.6067 223.072,81.4627 223.632,98.5735 224.191,138.397 224.75,217.289 225.309,274.441 225.869,304.823 226.428,319.238 226.987,355.89 227.546,385.098 228.106,433.656 228.665,440.181 229.224,449.341 229.783,496.098 230.343,521.421 230.902,546.578 231.461,569.141 232.02,556.071 232.58,580.96 233.139,602.368 233.698,607.048 234.257,667.632 234.817,688.862 235.376,709.301 235.935,728.618 236.494,730.373 237.054,742.869 237.613,742.638 238.172,759.273 238.731,792.461 239.291,790.564 239.85,826.027 240.409,838.684 240.968,890.162 241.528,904.092 242.087,918.323 242.646,932.535 243.205,927.226 243.765,957.372 244.324,927.618 244.883,922.318 245.442,953.148 246.002,983.55 246.561,1009.15 247.12,1018.45 247.679,1006.13 248.239,981.68 248.798,973.059 249.357,1003.28 249.916,996.42 250.476,993.612 251.035,932.242 251.594,932.234 252.153,962.842 252.713,993.783 253.272,1038.91 253.831,1014.59 254.39,1027.56 254.95,1039.05 255.509,1048.97 256.068,1074.62 256.627,1064.57 257.187,1075.34 257.746,1063.79 258.305,1054.69 258.864,1031.69 259.424,1026.58 259.983,1001.01 260.542,997.266 261.101,990.64 261.661,1022.23 262.22,980.378 262.779,997.524 263.338,995.171 263.898,1027.29 264.457,1005.79 265.016,1017.38 265.575,1013.6 266.135,990.801 266.694,1003.78 267.253,1030.36 267.812,1038.96 268.372,1016.29 268.931,1011.44 269.49,1019.42 270.049,1017.36 270.609,1044.68 271.168,1057.25 271.727,1036.81 272.286,1048.3 272.846,1079.42 273.405,1101.71 273.964,1078.74 274.523,1084.79 275.083,1090.81 275.642,1083.89 276.201,1124.05 276.76,1098.76 277.32,1075.21 277.879,1100.39 278.438,1089.38 278.997,1116.16 279.557,1075.15 280.116,1084.41 280.675,1079.18 281.234,1086.91 281.794,1113.89 282.353,1121.58 282.912,1147.44 283.471,1152.33 284.031,1140.9 284.59,1132.86 285.149,1123.28 285.708,1113.69 286.268,1090.46 286.827,1081.66 287.386,1085.96 287.945,1093.89 288.505,1081.72 289.064,1073.89 289.623,1079.62 290.182,1137.1 290.742,1127.27 291.301,1118.99 291.86,1128 292.419,1116.93 292.979,1127.74 293.538,1136.51 294.097,1158.91 294.656,1143.63 295.216,1149.16 295.775,1120.8 296.334,1111.37 296.893,1101.79 297.453,1074.41 298.012,1078.8 298.571,1070.55 299.13,1044.13 299.69,1038.27 300.249,1046.13 300.808,1006.21 301.368,1019.62 301.927,1029.43 302.486,988.771 303.045,981.09 303.605,978.061 304.164,972.147 304.723,937.489 305.282,935.296 305.842,948.054 306.401,914.386 306.96,913.806 307.519,910.554 308.079,921.829 308.638,956.26 309.197,953.464 309.756,938.258 310.316,920.208 310.875,935.035 311.434,935.678 311.993,920.003 312.553,970.956 313.112,952.334 313.671,948.274 314.23,948.56 314.79,946.367 315.349,928.642 315.908,927.839 316.467,896.177 317.027,911.494 317.586,928.508 318.145,925.677 318.704,943.544 319.264,941.175 319.823,972.817 320.382,967.115 320.941,996.026 321.501,989.703 322.06,1001 322.619,994.018 323.178,971.706 323.738,981.229 324.297,1005.77 324.856,980.289 325.415,977.353 325.975,975.644 326.534,1001.78 327.093,995.879 327.652,972.084 328.212,999.465 328.771,1009.46 329.33,987.096 329.889,1008.5 330.449,1000.39 331.008,1008.91 331.567,1000.66 332.126,993.012 332.686,951.994 333.245,929.741 333.804,909.81 334.363,954.985 334.923,1043.39 335.482,985.918 336.041,1028.96 336.6,990.539 337.16,1019.41 337.719,1010.32 338.278,983.821 338.837,976.01 339.397,987.662 339.956,994.483 340.515,966.455 341.074,941.667 341.634,904.974 342.193,901.884 342.752,910.637 343.311,922.932 343.871,904.494 344.43,902.885 344.989,898.628 345.548,878.861 346.108,879.518 346.667,879.844 347.226,873.403 347.785,905.566 348.345,934.877 348.904,943.224 349.463,985.794 350.022,961.751 350.582,920.964 351.141,932.309 351.7,960.851 352.259,988.976 352.819,996.595 353.378,974.526 353.937,946.673 354.496,955.83 355.056,934.942 355.615,927.149 356.174,921.473 356.733,914.455 357.293,972.946 357.852,967.214 358.411,949.094 358.97,957.465 359.53,965.976 360.089,976.157 360.648,969.229 361.207,944.576 361.767,955.07 362.326,931.14 362.885,892.934 363.444,887.71 364.004,917.396 364.563,926.948 365.122,920.254 365.681,931.451 366.241,878.03 366.8,870.544 367.359,883.273 367.918,864.55 368.478,877.459 369.037,888.703 369.596,867.439 370.155,862.026 370.715,871.408 371.274,866.02 371.833,859.858 372.392,854.599 372.952,837.286 373.511,866.587 374.07,846.336 374.629,842.188 375.189,836.231 375.748,830.151 376.307,857.896 376.866,855.55 377.426,849.148 377.985,862.26 378.544,841.38 379.103,822.382 379.663,801.716 380.222,817.804 380.781,849.005 381.34,861.576 381.9,839.231 382.459,839.52 383.018,820.152 383.577,850.677 384.137,844.302 384.696,809.082 385.255,807.544 385.814,843.972 386.374,827.328 386.933,829.625 387.492,826.869 388.051,825.626 388.611,873.149 389.17,884.252 389.729,864.76 390.288,908.956 390.848,918.673 391.407,914.48 391.966,925.941 392.525,917.623 393.085,926.92 393.644,922.372 394.203,914.218 394.762,892.314 395.322,870.712 395.881,833.93 396.44,833.212 396.999,814.36 397.559,831.079 398.118,829.312 398.677,829.969 399.236,828.76 399.796,795.347 400.355,809.759 400.914,809.824 401.473,805.699 402.033,806.217 402.592,802.71 403.151,817.696 403.71,834.205 404.27,876.637 404.829,892.012 405.388,919.09 405.947,899.501 406.507,941.311 407.066,951.889 407.625,893.441 408.184,887.881 408.744,848.699 409.303,843.082 409.862,858.562 410.421,858.781 410.981,819.633 411.54,815.79 412.099,810.88 412.658,775.409 413.218,788.754 413.777,751.418 414.336,753.814 414.895,770.748 415.455,788.317 416.014,789.138 416.573,838.052 417.132,832.872 417.692,842.232 418.251,838.86 418.81,835.671 419.369,865.421 419.929,863.48 420.488,876.251 421.047,881.785 421.606,876.322 422.166,870.205 422.725,815.258 423.284,796.883 423.843,793.51 424.403,807.453 424.962,805.784 425.521,819.438 426.08,816.071 426.64,827.986 427.199,825.491 427.758,806.185 428.318,788.604 428.877,788.452 429.436,769.573 429.995,749.028 430.555,699.994 431.114,674.544 431.673,663.528 432.232,669.095 432.792,690.205 433.351,679.588 433.91,669.367 434.469,674.661 435.029,662.526 435.588,634.794 436.147,674.169 436.706,664.029 437.266,653.224 437.825,673.521 438.384,697.068 438.943,734.69 439.503,768.926 440.062,770.859 440.621,787.964 441.18,789.533 441.74,821.986 442.299,783.371 442.858,796.204 443.417,809.993 443.977,793.864 444.536,823.401 445.095,786.386 445.654,758.19 446.214,758.245 446.773,726.797 447.332,729.861 447.891,750.249 448.451,766.869 449.01,780.525 449.569,795.084 450.128,790.5 450.688,802.417 451.247,801.218 451.806,846.693 452.365,841.437 452.925,825.276 453.484,804.997 454.043,804.249 454.602,786.419 455.162,802.667 455.721,814.433 456.28,812.87 456.839,843.619 457.399,820.787 457.958,821.547 458.517,801.688 459.076,815.823 459.636,797.267 460.195,813.669 460.754,807.6 461.313,790.565 461.873,757.535 462.432,790.297 462.991,784.304 463.55,765.873 464.11,763.508 464.669,761.297 465.228,757.17 465.787,756.61 466.347,757.83 466.906,757.613 467.465,756.104 468.024,785.227 468.584,780.872 469.143,825.482 469.702,820.803 470.261,802.388 470.821,798.203 471.38,809.509 471.939,817.327 472.498,815.514 473.058,796.402 473.617,777.169 474.176,756.732 474.735,754.682 475.295,753.871 475.854,721.733 476.413,721.317 476.972,752.849 477.532,769.772 478.091,785.261 478.65,780.585 479.209,744.188 479.769,729.993 480.328,728.395 480.887,728.078 481.446,744.158 482.006,748.682 482.565,717.357 483.124,736.16 483.683,752.953 484.243,737.634 484.802,718.057 485.361,718.713 485.92,704.381 486.48,705.608 487.039,705.72 487.598,707.951 488.157,706.5 488.717,723.95 489.276,708.714 489.835,727.514 490.394,694.146 490.954,661.124 491.513,664.097 492.072,685.739 492.631,655.657 493.191,678.145 493.75,649.34 494.309,654.258 494.868,655.095 495.428,646.791 495.987,651.511 496.546,673.08 497.105,646.302 497.665,670.049 498.224,672.265 498.783,694.479 499.342,677.334 499.902,677.213 500.461,681.507 501.02,683.922 501.579,721.212 502.139,721.956 502.698,706.655 503.257,773.989 503.816,739.9 504.376,769.554 504.935,766.85 505.494,751.82 506.053,737.982 506.613,738.568 507.172,754.759 507.731,768.139 508.29,778.414 508.85,742.532 509.409,792.167 509.968,823.691 510.527,802.165 511.087,797.61 511.646,760.708 512.205,757.873 512.764,776.812 513.324,809.015 513.883,805.142 514.442,803.702 515.001,813.992 515.561,842.606 516.12,852.624 516.679,893.228 517.238,903.016 517.798,906.814 518.357,924.02 518.916,897.263 519.475,887.514 520.035,893.497 520.594,902.038 521.153,860.568 521.712,851.922 522.272,841.193 522.831,817.548 523.39,763.263 523.949,729.373 524.509,729.279 525.068,724.006 525.627,739.533 526.186,737.314 526.746,735.254 527.305,746.621 527.864,744.746 528.423,773.675 528.983,756.181 529.542,755.985 530.101,800.651 530.66,813.498 531.22,841.193 531.779,880.389 532.338,874.8 532.897,880.079 533.457,902.259 534.016,892.926 534.575,914.046 535.134,938.791 535.694,914.287 536.253,889.423 536.812,863.344 537.371,860.566 537.931,824.236 538.49,820.465 539.049,797.443 539.608,733.73 540.168,764.776 540.727,741.907 541.286,723.687 541.845,691.829 542.405,659.981 542.964,646.444 543.523,635.127 544.082,641.794 544.642,611.632 545.201,633.209 545.76,605.324 546.319,626.168 546.879,647.507 547.438,665.434 547.997,685.576 548.556,672.944 549.116,692.604 549.675,681.386 550.234,620.525 550.793,661.435 551.353,646.373 551.912,650.328 552.471,652.739 553.031,721.535 553.59,735.506 554.149,734.61 554.708,717.333 555.268,702.61 555.827,735.764 556.386,738.394 556.945,786.2 557.505,768.704 558.064,799.316 558.623,781.517 559.182,794.89 559.742,776.293 560.301,774.023 560.86,772.093 561.419,799.961 561.979,812.305 562.538,823.127 563.097,833.382 563.656,829.099 564.216,824.662 564.775,816.747 565.334,811.384 565.893,826.631 566.453,805.003 567.012,780.773 567.571,793.5 568.13,788.286 568.69,734.727 569.249,734.676 569.808,748.539 570.367,730.891 570.927,715.634 571.486,711.321 572.045,728.891 572.604,726.454 573.164,729.539 573.723,746.074 574.282,726.293 574.841,723.581 575.401,706.485 575.96,707.459 576.519,706.777 577.078,706.325 577.638,709.038 578.197,727.094 578.756,709.616 579.315,709.965 579.875,727.478 580.434,745.42 580.993,761.13 581.552,743.637 582.112,744.987 582.671,707.521 583.23,710.372 583.789,728.976 584.349,728.47 584.908,708.52 585.467,739.443 586.026,720.999 586.586,723.715 587.145,724.353 587.704,703.578 588.263,716.697 588.823,716.81 589.382,748.433 589.941,716.969 590.5,718.991 591.06,699.519 591.619,716.061 592.178,732.884 592.737,762.687 593.297,730.498 593.856,764.892 594.415,779.132 594.974,792.122 595.534,786.09 596.093,768.479 596.652,766.349 597.211,808.882 597.771,770.925 598.33,737.475 598.889,688.715 599.448,660.029 600.008,695.336 600.567,696.681 601.126,701.099 601.685,699.367 602.245,701.687 602.804,688.927 603.363,706.826 603.922,722.285 604.482,704.803 605.041,701.728 605.6,718.93 606.159,714.381 606.719,698.73 607.278,699.755 607.837,651.465 608.396,672.824 608.956,671.807 609.515,655.896 610.074,643.535 610.633,610.687 611.193,645.973 611.752,630.441 612.311,620.806 612.87,608.979 613.43,581.54 613.989,587.84 614.548,596.305 615.107,585.135 615.667,591.87 616.226,581.572 616.785,589.804 617.344,599.982 617.904,606.228 618.463,610.473 619.022,612.786 619.581,631.863 620.141,603.301 620.7,559.057 621.259,584.298 621.818,589.67 622.378,581.419 622.937,589.379 623.496,577.416 624.055,581.426 624.615,620.234 625.174,630.178 625.733,632.246 626.292,652.638 626.852,638.027 627.411,672.453 627.97,708.639 628.529,721.311 629.089,732.624 629.648,780.198 630.207,773.667 630.766,770.828 631.326,797.622 631.885,758.666 632.444,771.101 633.003,718.661 633.563,720.398 634.122,703.757 634.681,720.393 635.24,735.893 635.8,753.086 636.359,752.624 636.918,699.607 637.477,684.189 638.037,685.823 638.596,704.269 639.155,702.42 639.714,705.569 640.274,671.893 640.833,705.758 641.392,723.537 641.951,688.941 642.511,690.816 643.07,713.754 643.629,711.601 644.188,695.861 644.748,697.6 645.307,681.289 645.866,667.666 646.425,670.845 646.985,688.3 647.544,674.808 648.103,675.023 648.662,674.035 649.222,660.258 649.781,664.76 650.34,634.571 650.899,637.911 651.459,645.096 652.018,712.55 652.577,714.108 653.136,749.33 653.696,745.017 654.255,743.75 654.814,741.951 655.373,740.852 655.933,751.306 656.492,729.449 657.051,758.701 657.61,756.34 658.17,689.087 658.729,688.776 659.288,659.485 659.847,677.651 660.407,662.013 660.966,681.742 661.525,699.636 662.084,653.346 662.644,672.336 663.203,709.058 663.762,677.269 664.321,660.372 664.881,615.182 665.44,637.748 665.999,625.717 666.558,613.182 667.118,632.747 667.677,684.486 668.236,667.709 668.795,683.607 669.355,666.286 669.914,681.568 670.473,699.238 671.032,681.431 671.592,715.934 672.151,733.293 672.71,747.058 673.269,741.666 673.829,737.625 674.388,750.453 674.947,782.528 675.506,796.147 676.066,788.239 676.625,815.405 677.184,808.142 677.743,769.454 678.303,749.263 678.862,715.315 679.421,696.838 679.981,698.846 680.54,716.072 681.099,715.53 681.658,698.574 682.218,684.24 682.777,670.53 683.336,689.873 683.895,691.077 684.455,690.757 685.014,674.896 685.573,722.414 686.132,739.104 686.692,690.881 687.251,690.114 687.81,704.219 688.369,704.244 688.929,719.325 689.488,684.575 690.047,686.617 690.606,670.511 691.166,653.58 691.725,655.664 692.284,624.441 692.843,646.874 693.403,684.894 693.962,720.136 694.521,719.89 695.08,718.22 695.64,717.833 696.199,714.187 696.758,696.571 697.317,696.964 697.877,699.707 698.436,715.789 698.995,714.126 699.554,711.506 700.114,706.627 700.673,721.964 701.232,737.295 701.791,767.272 702.351,793.161 702.91,772.324 703.469,770.267 704.028,766.735 704.588,726.96 705.147,710.661 705.706,696.654 706.265,694.47 706.825,741.4 707.384,719.755 707.943,762.332 708.502,789.453 709.062,783.349 709.621,761.617 710.18,755.796 710.739,768.59 711.299,763.932 711.858,775.646 712.417,787.107 712.976,802.184 713.536,765.691 714.095,742.802 714.654,739.385 715.213,816.155 715.773,791.888 716.332,785.932 716.891,781.941 717.45,792.383 718.01,801.525 718.569,774.126 719.128,753.457 719.687,750.158 720.247,745.499 720.806,742.76 721.365,724.804 721.924,722.84 722.484,708.714 723.043,710.302 723.602,691.865 724.161,673.824 724.721,641.184 725.28,660.632 725.839,644.42 726.398,674.99 726.958,690.242 727.517,689.63 728.076,706.106 728.635,736.725 729.195,731.493 729.754,711.651 730.313,693.941 730.872,709.835 731.432,756.572 731.991,753.653 732.55,748.957 733.109,760.372 733.669,754.118 734.228,766.182 734.787,745.883 735.346,742.202 735.906,694.309 736.465,726.528 737.024,742.271 737.583,758.22 738.143,752.764 738.702,746.54 739.261,730.039 739.82,678.448 740.38,649.487 740.939,587.34 741.498,579.005 742.057,585.058 742.617,588.51 743.176,579.495 743.735,584.157 744.294,591.862 744.854,598.134 745.413,621.622 745.972,623.833 746.531,644.337 747.091,663.973 747.65,665.515 748.209,667.799 748.768,652.599 749.328,671.35 749.887,736.874 750.446,739.53 751.005,707.281 751.565,688.562 752.124,687.878 752.683,689.881 753.242,607.866 753.802,596.044 754.361,566.524 754.92,590.111 755.479,576.835 756.039,586.315 756.598,579.13 757.157,552.867 757.716,574.881 758.276,560.227 758.835,551.146 759.394,592.799 759.953,597.032 760.513,589.055 761.072,614.067 761.631,599.884 762.19,604.067 762.75,606.293 763.309,593.581 763.868,650.175 764.427,618.739 764.987,593.048 765.546,581.687 766.105,572.85 766.664,596.574 767.224,664.404 767.783,682.15 768.342,648.541 768.901,699.957 769.461,729.705 770.02,714.86 770.579,713.967 771.138,695.079 771.698,678.825 772.257,698.325 772.816,712.863 773.375,713.837 773.935,712.867 774.494,712.963 775.053,697.201 775.612,698.458 776.172,714.118 776.731,731.036 777.29,730.87 777.849,727.734 778.409,724.899 778.968,752.327 779.527,732.032 780.086,748.637 780.646,731.086 781.205,667.189 781.764,683.413 782.323,682.473 782.883,666.474 783.442,683.954 784.001,682.279 784.56,683.109 785.12,685.547 785.679,714.292 786.238,712.461 786.797,708.428 787.357,707.38 787.916,706.951 788.475,718.99 789.034,749.704 789.594,743.6 790.153,722.282 790.712,702.789 791.271,716.85 791.831,715.468 792.39,698.561 792.949,683.947 793.508,698.39 794.068,663.651 794.627,666.81 795.186,654.544 795.745,690.01 796.305,658.532 796.864,681.411 797.423,662.079 797.982,668.361 798.542,669.416 799.101,635.975 799.66,652.787 800.219,654.406 800.779,670.227 801.338,658.642 801.897,661.247 802.456,682.256 803.016,664.861 803.575,714.257 804.134,729.832 804.693,710.349 805.253,710.257 805.812,690.86 806.371,706.898 806.931,704.849 807.49,736.913 808.049,700.35 808.608,701.508 809.168,715.117 809.727,744.65 810.286,757.356 810.845,752.971 811.405,765.609 811.964,744.246 812.523,725.898 813.082,756.943 813.642,755.598 814.201,754.292 814.76,737.428 815.319,734.631 815.879,728.541 816.438,728.767 816.997,757.435 817.556,737.862 818.116,734.104 818.675,761.512 819.234,729.799 819.793,726.683 820.353,723.976 820.912,725.923 821.471,721.252 822.03,718.527 822.59,728.841 823.149,742.009 823.708,757.266 824.267,753.495 824.827,749.923 825.386,733.669 825.945,715.838 826.504,748.631 827.064,762.284 827.623,722.495 828.182,702.465 828.741,669.907 829.301,655.653 829.86,654.207 830.419,655.726 830.978,626.981 831.538,629.557 832.097,649.702 832.656,649.221 833.215,651.578 833.775,636.528 834.334,654.131 834.893,687.36 835.452,707.105 836.012,677.51 836.571,647.35 837.13,698.024 837.689,729.628 838.249,730.591 838.808,713.717 839.367,720.176 839.926,716.02 840.486,728.651 841.045,709.812 841.604,709.046 842.163,711.148 842.723,708.959 843.282,678.775 843.841,695.417 844.4,661.267 844.96,629.206 845.519,632.622 846.078,652.667 846.637,656.817 847.197,626.441 847.756,629.108 848.315,653.804 848.874,655.335 849.434,655.612 849.993,655.835 850.552,690.992 851.111,693.452 851.671,691.812 852.23,676.26 852.789,696.764 853.348,742.762 853.908,722.541 854.467,687.437 855.026,686.441 855.585,735.434 856.145,752.1 856.704,781.883 857.263,759.035 857.822,741.254 858.382,756.4 858.941,717.95 859.5,700.15 860.059,662.715 860.619,643.125 861.178,676.345 861.737,648.305 862.296,648.046 862.856,669.015 863.415,650.426 863.974,701.472 864.533,720.56 865.093,734.823 865.652,720.13 866.211,730.508 866.77,762.206 867.33,757.535 867.889,736.736 868.448,768.425 869.007,809.543 869.567,801.911 870.126,793.834 870.685,756.977 871.244,753.096 871.804,749.569 872.363,715.646 872.922,727.929 873.481,714.26 874.041,715.779 874.6,695.862 875.159,745.422 875.718,761.067 876.278,691.175 876.837,710.296 877.396,694.595 877.955,710.72 878.515,704.853 879.074,687.832 879.633,686.954 880.192,701.11 880.752,700.783 881.311,666.458 881.87,698.955 882.429,701.801 882.989,683.89 883.548,668.92 884.107,654.825 884.666,655.737 885.226,641.158 885.785,626.803 886.344,630.002 886.903,632.259 887.463,631.041 888.022,620.664 888.581,592.909 889.14,601.411 889.7,613.785 890.259,638.117 890.818,625.848 891.377,615.222 891.937,603.589 892.496,621.794 893.055,623.491 893.614,630.502 894.174,615.85 894.733,588.73 895.292,628.416 895.851,633.619 896.411,684.269 896.97,732.146 897.529,698.463 898.088,713.234 898.648,743.602 899.207,738.151 899.766,734.19 900.325,747.659 900.885,730.131 901.444,712.821 902.003,647.35 902.562,652.759 903.122,622.038 903.681,689.76 904.24,653.944 904.799,676.333 905.359,678.065 905.918,709.012 906.477,693.072 907.036,679.961 907.596,680.763 908.155,666.655 908.714,669.335 909.273,687.009 909.833,703.676 910.392,719.181 910.951,736.9 911.51,716.56 912.07,731.286 912.629,726.186 913.188,738.864 913.747,701.789 914.307,717.368 914.866,682.238 915.425,682.504 915.984,687.752 916.544,691.397 917.103,677.295 917.662,659.71 918.221,647.105 918.781,668.001 919.34,685.968 919.899,673.504 920.458,658.372 921.018,659.464 921.577,676.678 922.136,648.345 922.695,652.195 923.255,657.102 923.814,689.948 924.373,700.602 924.932,701.907 925.492,649.776 926.051,653.906 926.61,703.776 927.169,704.035 927.729,706.397 928.288,674.986 928.847,662.411 929.406,648.803 929.966,665.24 930.525,666.157 931.084,668.92 931.644,669.846 932.203,670.408 932.762,673.763 933.321,674.172 933.881,639.395 934.44,657.657 934.999,657.677 935.558,674.295 936.118,672.996 936.677,704.604 937.236,688.645 937.795,673.097 938.355,655.631 938.914,654.953 939.473,669.694 940.032,672.072 940.592,673.22 941.151,707.463 941.71,711.108 942.269,727.571 942.829,742.575 943.388,789.21 943.947,782.459 944.506,796.269 945.066,773.816 945.625,817.329 946.184,779.982 946.743,790.132 947.303,800.959 947.862,825.501 948.421,799.427 948.98,794.829 949.54,774.462 950.099,803.506 950.658,812.316 951.217,809.912 951.777,772.381 952.336,781.747 952.895,762.074 953.454,836.723 954.014,782.745 954.573,761.766 955.132,728.042 955.691,757.015 956.251,752.544 956.81,730.857 957.369,712.652 957.928,710.256 958.488,708.792 959.047,723.263 959.606,688.808 960.165,670.192 960.725,670.091 961.284,722.054 961.843,686.59 962.402,686.167 962.962,700.412 963.521,683.659 964.08,634.621 964.639,638.148 965.199,638.605 965.758,639.435 966.317,644.267 966.876,628.004 967.436,613.425 967.995,521.387 968.554,528.92 969.113,522.773 969.673,531.041 970.232,524.798 970.791,518.409 971.35,510.504 971.91,467.595 972.469,509.418 973.028,534.972 973.587,542.99 974.147,538.268 974.706,532.147 975.265,585.397 975.824,576.706 976.384,580.115 976.943,586.76 977.502,571.987 978.061,627.531 978.621,628.433 979.18,618.877 979.739,620.847 980.298,626.858 980.858,613.591 981.417,637.649 981.976,660.209 982.535,660.542 983.095,678.453 983.654,663.511 984.213,631.355 984.772,649.464 985.332,685.203 985.891,636.937 986.45,636.098 987.009,623.343 987.569,627.212 988.128,649.779 988.687,652.174 989.246,668.295 989.806,673.067 990.365,641.383 990.924,628.457 991.483,597.516 992.043,584.883 992.602,606.423 993.161,597.054 993.72,603.085 994.28,596.497 994.839,602.06 995.398,607.375 995.957,596.449 996.517,586.088 997.076,588.036 997.635,624.378 998.194,627.098 998.754,614.578 999.313,650.533 999.872,638.835 1000.43,654.844 1000.99,657.239 1001.55,675.436 1002.11,674.702 1002.67,678.389 1003.23,647.064 1003.79,650.583 1004.35,702.961 1004.91,686.029 1005.46,674.427 1006.02,689.506 1006.58,704.568 1007.14,701.341 1007.7,698.163 1008.26,698.858 1008.82,716.299 1009.38,682.198 1009.94,698.824 1010.5,695.849 1011.06,710.917 1011.62,723.135 1012.18,737.175 1012.73,718.485 1013.29,717.404 1013.85,717.363 1014.41,712.777 1014.97,677.033 1015.53,692.787 1016.09,692.451 1016.65,690.224 1017.21,706.339 1017.77,720.159 1018.33,719.299 1018.89,745.413 1019.45,769.987 1020.01,749.382 1020.56,717.703 1021.12,701.111 1021.68,734.017 1022.24,749.047 1022.8,745.599 1023.36,728.428 1023.92,734.749 1024.48,768.239 1025.04,780.987 1025.6,793.309 1026.16,790.083 1026.72,787.205 1027.28,794.709 1027.83,839.039 1028.39,812.419 1028.95,804.252 1029.51,749.466 1030.07,740.379 1030.63,739.931 1031.19,733.929 1031.75,731.06 1032.31,694.681 1032.87,723.832 1033.43,693.527 1033.99,725.251 1034.55,726.746 1035.1,756.758 1035.66,735.991 1036.22,734.223 1036.78,696.861 1037.34,678.97 1037.9,681.169 1038.46,651.69 1039.02,637.684 1039.58,674.706 1040.14,675.439 1040.7,690.154 1041.26,704.32 1041.82,716.854 1042.38,713.528 1042.93,757.79 1043.49,752.525 1044.05,760.182 1044.61,755.526 1045.17,767.955 1045.73,718.377 1046.29,736.722 1046.85,722.371 1047.41,702.723 1047.97,720.408 1048.53,748.932 1049.09,746.312 1049.65,746.825 1050.2,727.408 1050.76,724.335 1051.32,703.985 1051.88,684.924 1052.44,700.234 1053,713.672 1053.56,696.174 1054.12,680.794 1054.68,685.171 1055.24,697.56 1055.8,682.652 1056.36,681.53 1056.92,683.519 1057.48,683.39 1058.03,698.86 1058.59,713.838 1059.15,729.902 1059.71,695.22 1060.27,693.153 1060.83,674.881 1061.39,661.722 1061.95,631.448 1062.51,650.602 1063.07,653.72 1063.63,623.467 1064.19,644.314 1064.75,663.944 1065.3,680.858 1065.86,682.76 1066.42,669.173 1066.98,655.764 1067.54,641.343 1068.1,659.343 1068.66,679.502 1069.22,729.184 1069.78,692.538 1070.34,691.558 1070.9,710.768 1071.46,769.902 1072.02,748.468 1072.57,744.403 1073.13,773.821 1073.69,769.812 1074.25,782.365 1074.81,759.53 1075.37,754.48 1075.93,780.927 1076.49,759.172 1077.05,751.016 1077.61,761.177 1078.17,754.979 1078.73,735.098 1079.29,717.989 1079.85,752.349 1080.4,750.227 1080.96,749.08 1081.52,728.494 1082.08,739.072 1082.64,735.304 1083.2,701.118 1083.76,720.225 1084.32,717.814 1084.88,727.85 1085.44,725.414 1086,706.875 1086.56,702.971 1087.12,703.281 1087.67,702.872 1088.23,700.741 1088.79,666.382 1089.35,683.547 1089.91,685.385 1090.47,702.879 1091.03,686.301 1091.59,666.646 1092.15,639.115 1092.71,640.438 1093.27,641.777 1093.83,629.37 1094.39,647.213 1094.94,665.205 1095.5,651.086 1096.06,651.662 1096.62,652.69 1097.18,651.757 1097.74,639.501 1098.3,645.15 1098.86,636.411 1099.42,655.231 1099.98,668.298 1100.54,668.155 1101.1,684.209 1101.66,718.644 1102.22,731.538 1102.77,710.312 1103.33,708.716 1103.89,708.491 1104.45,692.451 1105.01,690.31 1105.57,704.466 1106.13,689.64 1106.69,707.574 1107.25,705.817 1107.81,707.875 1108.37,711.883 1108.93,695.036 1109.49,700.209 1110.04,667.324 1110.6,622.856 1111.16,630.108 1111.72,636.453 1112.28,608.604 1112.84,613.316 1113.4,616.162 1113.96,636.393 1114.52,659.289 1115.08,644.92 1115.64,627.898 1116.2,629.872 1116.76,633.419 1117.31,666.811 1117.87,650.449 1118.43,650.746 1118.99,669.13 1119.55,686.42 1120.11,651.182 1120.67,685.445 1121.23,701.79 1121.79,734.422 1122.35,733.43 1122.91,735.04 1123.47,734.135 1124.03,732.249 1124.59,727.545 1125.14,708.553 1125.7,723.499 1126.26,719.167 1126.82,748.493 1127.38,744.588 1127.94,741.094 1128.5,773.765 1129.06,785.803 1129.62,732.522 1130.18,731.987 1130.74,727.067 1131.3,720.441 1131.86,736.966 1132.41,735.878 1132.97,732.764 1133.53,741.965 1134.09,754.107 1134.65,733.614 1135.21,726.564 1135.77,690.546 1136.33,703.816 1136.89,700.695 1137.45,685.448 1138.01,669.371 1138.57,673.405 1139.13,691.257 1139.68,693.42 1140.24,726.269 1140.8,708.342 1141.36,691.932 1141.92,691.564 1142.48,692.037 1143.04,676.024 1143.6,675.283 1144.16,675.8 1144.72,674.423 1145.28,710.448 1145.84,725.149 1146.4,688.75 1146.96,672.823 1147.51,625.697 1148.07,612.639 1148.63,616.871 1149.19,622.519 1149.75,641.318 1150.31,678.167 1150.87,695.334 1151.43,665.989 1151.99,648.93 1152.55,685.058 1153.11,700.861 1153.67,703.233 1154.23,714.651 1154.78,743.185 1155.34,736.13 1155.9,754.354 1156.46,715.623 1157.02,712.806 1157.58,706.695 1158.14,703.99 1158.7,686.277 1159.26,686.283 1159.82,685.997 1160.38,669.85 1160.94,672.834 1161.5,691.681 1162.05,691.149 1162.61,736.748 1163.17,765.034 1163.73,759.766 1164.29,768.629 1164.85,748.159 1165.41,743.349 1165.97,741.492 1166.53,737.764 1167.09,746.694 1167.65,742.944 1168.21,725.589 1168.77,723.567 1169.33,719.818 1169.88,702.493 1170.44,701.335 1171,684.471 1171.56,700.733 1172.12,697.682 1172.68,713.755 1173.24,713.804 1173.8,710.216 1174.36,705.741 1174.92,686.727 1175.48,683.991 1176.04,684.382 1176.6,688.461 1177.15,702.649 1177.71,700.018 1178.27,734.089 1178.83,745.765 1179.39,728.211 1179.95,691.839 1180.51,675.496 1181.07,677.879 1181.63,615.727 1182.19,602.573 1182.75,620.415 1183.31,623.601 1183.87,595.984 1184.43,586.36 1184.98,595.992 1185.54,585.41 1186.1,608.913 1186.66,612.597 1187.22,636.147 1187.78,640.909 1188.34,643.748 1188.9,613.35 1189.46,613.374 1190.02,632.473 1190.58,651.781 1191.14,671.768 1191.7,669.303 1192.25,637.431 1192.81,624.924 1193.37,613.644 1193.93,650.806 1194.49,650.789 1195.05,650.865 1195.61,649.337 1196.17,634.946 1196.73,638.597 1197.29,674.109 1197.85,693.436 1198.41,663.008 1198.97,662.192 1199.52,676.47 1200.08,692.971 1200.64,705.412 1201.2,718.584 1201.76,714.98 1202.32,715.041 1202.88,712.653 1203.44,727 1204,758.33 1204.56,754.755 1205.12,769.578 1205.68,746.606 1206.24,758.538 1206.8,741.728 1207.35,755.476 1207.91,705.062 1208.47,704.221 1209.03,752.773 1209.59,733.328 1210.15,714.304 1210.71,712.941 1211.27,725.294 1211.83,707.226 1212.39,718.246 1212.95,702.942 1213.51,716.184 1214.07,714.081 1214.62,744.544 1215.18,723.663 1215.74,721.792 1216.3,740.944 1216.86,738.036 1217.42,767.986 1217.98,776.483 1218.54,754.674 1219.1,749.86 1219.66,729.602 1220.22,697.382 1220.78,695.376 1221.34,647.426 1221.89,664.59 1222.45,649.909 1223.01,649.131 1223.57,620.121 1224.13,653.289 1224.69,640.435 1225.25,671.853 1225.81,654.824 1226.37,657.974 1226.93,659.874 1227.49,662.286 1228.05,648.553 1228.61,661.023 1229.17,663.286 1229.72,680.805 1230.28,664.976 1230.84,650.178 1231.4,622.598 1231.96,627.638 1232.52,629.24 1233.08,628.834 1233.64,601.783 1234.2,642.636 1234.76,630.281 1235.32,636.061 1235.88,608.129 1236.44,646.216 1236.99,665.708 1237.55,699.931 1238.11,727.836 1238.67,710.111 1239.23,709.384 1239.79,710.641 1240.35,708.078 1240.91,703.893 1241.47,702.894 1242.03,718.802 1242.59,717.955 1243.15,718.156 1243.71,704.746 1244.26,721.623 1244.82,738.538 1245.38,786.542 1245.94,800.616 1246.5,797.079 1247.06,774.823 1247.62,787.747 1248.18,801.471 1248.74,760.229 1249.3,705.993 1249.86,690.997 1250.42,742.215 1250.98,760.319 1251.54,756.119 1252.09,767.074 1252.65,764.784 1253.21,743.08 1253.77,740.489 1254.33,717.529 1254.89,734.645 1255.45,733.143 1256.01,733.988 1256.57,714.991 1257.13,712.095 1257.69,704.429 1258.25,704.791 1258.81,686.869 1259.36,673.088 1259.92,676.703 1260.48,656.044 1261.04,644.096 1261.6,610.736 1262.16,629.847 1262.72,647.726 1263.28,668.297 1263.84,701.474 1264.4,748.501 1264.96,731.741 1265.52,727.863 1266.08,721.638 1266.63,717.341 1267.19,733.029 1267.75,714.615 1268.31,693.821 1268.87,676.532 1269.43,658.255 1269.99,659.543 1270.55,680.874 1271.11,663.653 1271.67,650.661 1272.23,650.005 1272.79,653.967 1273.35,683.537 1273.91,685.479 1274.46,682.452 1275.02,718.615 1275.58,700.484 1276.14,732.265 1276.7,758.646 1277.26,723.979 1277.82,704.529 1278.38,707.423 1278.94,687.557 1279.5,684.705 1280.06,636.401 1280.62,637.307 1281.18,642.895 1281.73,645.655 1282.29,661.641 1282.85,661.522 1283.41,675.276 1283.97,696.213 1284.53,715.132 1285.09,730.477 1285.65,746.562 1286.21,741.245 1286.77,722.067 1287.33,739.994 1287.89,720.894 1288.45,718.178 1289,699.691 1289.56,713.626 1290.12,745.809 1290.68,759.185 1291.24,771.614 1291.8,771.232 1292.36,764.888 1292.92,759.601 1293.48,737.619 1294.04,719.96 1294.6,782.186 1295.16,745.366 1295.72,708.562 1296.28,738.274 1296.83,736.02 1297.39,718.255 1297.95,713.237 1298.51,713.163 1299.07,727.037 1299.63,724.914 1300.19,754.371 1300.75,750.937 1301.31,729.721 1301.87,714.823 1302.43,695.367 1302.99,677.79 1303.55,693.929 1304.1,676.614 1304.66,676.099 1305.22,663.18 1305.78,664.986 1306.34,645.627 1306.9,651.361 1307.46,651.893 1308.02,650.571 1308.58,651.957 1309.14,670.492 1309.7,685.157 1310.26,681.615 1310.82,703.598 1311.38,705.438 1311.93,719.937 1312.49,683.355 1313.05,664.283 1313.61,666.144 1314.17,615.022 1314.73,617.329 1315.29,653.97 1315.85,640.791 1316.41,657.159 1316.97,643.293 1317.53,677.569 1318.09,676.706 1318.65,691.275 1319.2,707.799 1319.76,694.614 1320.32,725.709 1320.88,709.167 1321.44,726.907 1322,707.462 1322.56,704.749 1323.12,735.638 1323.68,748.306 1324.24,745.823 1324.8,743.906 1325.36,722.547 1325.92,704.579 1326.47,674.381 1327.03,689.97 1327.59,659.313 1328.15,753.981 1328.71,706.666 1329.27,686.199 1329.83,687.082 1330.39,671.553 1330.95,656.827 1331.51,632.98 1332.07,634.338 1332.63,622.256 1333.19,641.625 1333.75,659.537 1334.3,678.53 1334.86,660.781 1335.42,631.059 1335.98,653.462 1336.54,653.851 1337.1,672.335 1337.66,704.36 1338.22,686.217 1338.78,636.412 1339.34,624.388 1339.9,630.511 1340.46,615.59 1341.02,635.248 1341.57,621.871 1342.13,638.741 1342.69,656.668 1343.25,639.156 1343.81,639.817 1344.37,624.639 1344.93,627.853 1345.49,694.759 1346.05,712.419 1346.61,728.311 1347.17,740.782 1347.73,737.746 1348.29,715.314 1348.84,729.918 1349.4,725.799 1349.96,726.212 1350.52,719.855 1351.08,712.918 1351.64,694.992 1352.2,694.936 1352.76,678.186 1353.32,691.895 1353.88,724.328 1354.44,688.144 1355,749.573 1355.56,730.304 1356.12,711.414 1356.67,707.525 1357.23,687.686 1357.79,672.794 1358.35,691.113 1358.91,689.796 1359.47,656.107 1360.03,624.603 1360.59,642.225 1361.15,645.786 1361.71,602.527 1362.27,606.909 1362.83,594.075 1363.39,567.923 1363.94,575.132 1364.5,600.628 1365.06,605.035 1365.62,643.62 1366.18,649.738 1366.74,638.458 1367.3,645.652 1367.86,646.515 1368.42,661.791 1368.98,629.557 1369.54,630.482 1370.1,613.029 1370.66,614.962 1371.21,602.73 1371.77,591.088 1372.33,629.739 1372.89,631.18 1373.45,615.589 1374.01,597.642 1374.57,633.042 1375.13,636.398 1375.69,639.371 1376.25,640.416 1376.81,643.054 1377.37,644.54 1377.93,650.278 1378.49,671.694 1379.04,639.527 1379.6,651.336 1380.16,637.988 1380.72,642.042 1381.28,674.3 1381.84,645.719 1382.4,628.866 1382.96,615.98 1383.52,617.468 1384.08,636.742 1384.64,672.975 1385.2,706.591 1385.76,702.958 1386.31,720.961 1386.87,706.613 1387.43,719.123 1387.99,716.21 1388.55,710.263 1389.11,658.216 1389.67,657.432 1390.23,674.982 1390.79,644.09 1391.35,665.055 1391.91,680.399 1392.47,662.743 1393.03,693.791 1393.58,662.636 1394.14,660.052 1394.7,671.443 1395.26,685.761 1395.82,705.03 1396.38,734.827 1396.94,746.737 1397.5,743.793 1398.06,743.665 1398.62,710.066 1399.18,725.007 1399.74,740.089 1400.3,764.862 1400.86,749.88 1401.41,748.731 1401.97,747.585 1402.53,728.958 1403.09,728.365 1403.65,771.257 1404.21,765.947 1404.77,789.708 1405.33,773.605 1405.89,773.684 1406.45,721.457 1407.01,669.614 1407.57,641.582 1408.13,644.74 1408.68,630.606 1409.24,620.201 1409.8,587.453 1410.36,558.02 1410.92,564.515 1411.48,588.679 1412.04,592.878 1412.6,643.536 1413.16,646.962 1413.72,600.929 1414.28,638.251 1414.84,654.898 1415.4,655.912 1415.95,607.918 1416.51,611.93 1417.07,643.625 1417.63,660.161 1418.19,662.569 1418.75,617.332 1419.31,608.102 1419.87,611.782 1420.43,584.256 1420.99,587.329 1421.55,562.242 1422.11,586.723 1422.67,592.791 1423.23,610.937 1423.78,615.941 1424.34,619.602 1424.9,603.063 1425.46,610.137 1426.02,630.856 1426.58,603.47 1427.14,606.759 1427.7,627.364 1428.26,666.64 1428.82,669.004 1429.38,648.072 1429.94,652.33 1430.5,650.438 1431.05,618.124 1431.61,638.054 1432.17,625.542 1432.73,611.568 1433.29,600.278 1433.85,571.766 1434.41,596.771 1434.97,602.065 1435.53,626.125 1436.09,614.482 1436.65,622.112 1437.21,642.957 1437.77,643.628 1438.33,648.854 1438.88,648.988 1439.44,637.335 1440,625.733 1440.56,615.521 1441.12,605.572 1441.68,641.204 1442.24,630.296 1442.8,681.438 1443.36,666.58 1443.92,696.751 1444.48,699.539 1445.04,679.522 1445.6,681.451 1446.15,699.606 1446.71,702.083 1447.27,715.957 1447.83,713.977 1448.39,714.844 1448.95,730.069 1449.51,727.925 1450.07,710.966 1450.63,708.286 1451.19,658.444 1451.75,644.199 1452.31,612.837 1452.87,634.176 1453.42,651.452 1453.98,653.236 1454.54,653.117 1455.1,686.516 1455.66,687.723 1456.22,734.778 1456.78,684.146 1457.34,684.433 1457.9,685.454 1458.46,699.347 1459.02,697.514 1459.58,710.849 1460.14,723.403 1460.7,734.231 1461.25,696.049 1461.81,708.929 1462.37,707.108 1462.93,706.725 1463.49,703.707 1464.05,701.506 1464.61,697.821 1465.17,697.492 1465.73,698.01 1466.29,680.369 1466.85,665.697 1467.41,651.335 1467.97,650.225 1468.52,655.78 1469.08,653.472 1469.64,653.141 1470.2,637.404 1470.76,659.454 1471.32,679.391 1471.88,677.445 1472.44,672.595 1473,655.986 1473.56,640.722 1474.12,638.616 1474.68,658.071 1475.24,642.327 1475.79,626.556 1476.35,651.377 1476.91,651.87 1477.47,667.14 1478.03,685.768 1478.59,669.038 1479.15,667.104 1479.71,684.273 1480.27,699.153 1480.83,681.343 1481.39,681.329 1481.95,682.297 1482.51,688.023 1483.07,689.346 1483.62,675.157 1484.18,680.804 1484.74,683.214 1485.3,670.894 1485.86,656.524 1486.42,675.67 1486.98,708.455 1487.54,706.711 1488.1,707.289 1488.66,689.933 1489.22,690.585 1489.78,707.174 1490.34,703.807 1490.89,702.73 1491.45,715.424 1492.01,683.127 1492.57,700.247 1493.13,727.392 1493.69,740.94 1494.25,671.073 1494.81,720.632 1495.37,747.775 1495.93,756.501 1496.49,752.735 1497.05,781.16 1497.61,793.384 1498.16,787.02 1498.72,797.52 1499.28,792.478 1499.84,786.55 1500.4,781.594 1500.96,775.766 1501.52,753.4 1502.08,738.411 1502.64,765.706 1503.2,775.902 1503.76,757.566 1504.32,739.949 1504.88,751.865 1505.44,745.85 1505.99,741.018 1506.55,751.344 1507.11,732.431 1507.67,679.609 1508.23,660.961 1508.79,690.674 1509.35,686.678 1509.91,717.85 1510.47,715.898 1511.03,729.99 1511.59,741.092 1512.15,721.11 1512.71,735.938 1513.26,716.761 1513.82,749.558 1514.38,744.713 1514.94,709.22 1515.5,693.632 1516.06,694.97 1516.62,709.533 1517.18,722.796 1517.74,704.162 1518.3,687.957 1518.86,718.772 1519.42,746.161 1519.98,728.62 1520.53,724.439 1521.09,708.962 1521.65,708.425 1522.21,688.838 1522.77,703.519 1523.33,734.707 1523.89,762.41 1524.45,739.221 1525.01,754.563 1525.57,747.944 1526.13,727.027 1526.69,711.429 1527.25,709.969 1527.81,706.733 1528.36,741.508 1528.92,742.124 1529.48,690.5 1530.04,689.256 1530.6,705.06 1531.16,686.866 1531.72,720.382 1532.28,704.442 1532.84,687.845 1533.4,702.575 1533.96,682.073 1534.52,629.648 1535.08,664.912 1535.63,663.307 1536.19,664.803 1536.75,664.487 1537.31,666.542 1537.87,652.092 1538.43,622.019 1538.99,641.652 1539.55,630.681 1540.11,634.085 1540.67,639.442 1541.23,623.514 1541.79,612.59 1542.35,580.857 1542.9,588.085 1543.46,594.035 1544.02,567.073 1544.58,573.443 1545.14,560.993 1545.7,582.933 1546.26,601.694 1546.82,626.056 1547.38,625.948 1547.94,647.201 1548.5,633.615 1549.06,655.613 1549.62,658.359 1550.18,645.529 1550.73,645.759 1551.29,614.923 1551.85,620.665 1552.41,655.404 1552.97,667.404 1553.53,649.147 1554.09,667.115 1554.65,669.356 1555.21,619.97 1555.77,626.152 1556.33,626.713 1556.89,661.579 1557.45,681.829 1558,667.334 1558.56,700.646 1559.12,701.225 1559.68,700.283 1560.24,694.698 1560.8,695.598 1561.36,677.504 1561.92,644.92 1562.48,665.809 1563.04,631.932 1563.6,622.375 1564.16,625.066 1564.72,659.195 1565.28,678.018 1565.83,628.345 1566.39,613.868 1566.95,617.338 1567.51,608.083 1568.07,596.209 1568.63,615.669 1569.19,603.853 1569.75,611.284 1570.31,615.802 1570.87,651.134 1571.43,685.352 1571.99,671.303 1572.55,637.573 1573.1,622.551 1573.66,640.348 1574.22,644.336 1574.78,674.92 1575.34,675.739 1575.9,662.528 1576.46,666.584 1577.02,684.896 1577.58,717.311 1578.14,733.527 1578.7,728.664 1579.26,744.364 1579.82,694.416 1580.37,680.147 1580.93,677.225 1581.49,643.971 1582.05,660.455 1582.61,664.196 1583.17,698.08 1583.73,716.069 1584.29,731.923 1584.85,779.653 1585.41,759.451 1585.97,770.878 1586.53,748.649 1587.09,765.209 1587.65,744.508 1588.2,741.131 1588.76,735.21 1589.32,713.758 1589.88,677.497 1590.44,694.506 1591,694.453 1591.56,695.069 1592.12,712.065 1592.68,740.84 1593.24,769.853 1593.8,765.953 1594.36,747.19 1594.92,729.934 1595.47,725.057 1596.03,722.164 1596.59,689.099 1597.15,688.618 1597.71,689.738 1598.27,707.266 1598.83,707.223 1599.39,690.752 1599.95,653.466 1600.51,654.205 1601.07,636.345 1601.63,623.217 1602.19,678.761 1602.74,679.493 1603.3,679.573 1603.86,664.203 1604.42,630.495 1604.98,638.612 1605.54,652.334 1606.1,670.538 1606.66,655.56 1607.22,637.746 1607.78,673.187 1608.34,689.794 1608.9,673.039 1609.46,659.084 1610.02,661.153 1610.57,644.579 1611.13,679.796 1611.69,679.002 1612.25,695.747 1612.81,726.077 1613.37,742.446 1613.93,757.431 1614.49,769.508 1615.05,798.302 1615.61,820.868 1616.17,798.145 1616.73,760.818 1617.29,757.275 1617.84,737.793 1618.4,732.22 1618.96,729.94 1619.52,725.816 1620.08,773.165 1620.64,765.84 1621.2,756.723 1621.76,719.142 1622.32,666.417 1622.88,651.786 1623.44,635.706 1624,657.712 1624.56,628.866 1625.11,651.093 1625.67,637.244 1626.23,690.016 1626.79,706.055 1627.35,708.645 1627.91,694.305 1628.47,711.609 1629.03,708.745 1629.59,705.765 1630.15,674.787 1630.71,675.803 1631.27,693.885 1631.83,646.842 1632.39,681.215 1632.94,679.836 1633.5,678.932 1634.06,710.292 1634.62,720.081 1635.18,652.01 1635.74,666.663 1636.3,669.36 1636.86,669.247 1637.42,673.117 1637.98,669.763 1638.54,653.868 1639.1,672.383 1639.66,672.648 1640.21,653.932 1640.77,659.418 1641.33,643.944 1641.89,646.787 1642.45,679.937 1643.01,710.835 1643.57,707.994 1644.13,706.789 1644.69,721.565 1645.25,733.323 1645.81,730.01 1646.37,756.542 1646.93,734.049 1647.48,750.864 1648.04,749.667 1648.6,763.267 1649.16,758.611 1649.72,784.94 1650.28,794.764 1650.84,790.306 1651.4,767.384 1651.96,760.867 1652.52,757.779 1653.08,736.761 1653.64,753.352 1654.2,763.159 1654.76,709.234 1655.31,691.689 1655.87,692.448 1656.43,691.191 1656.99,690.327 1657.55,674.674 1658.11,658.52 1658.67,641.945 1659.23,655.41 1659.79,671.283 1660.35,672.732 1660.91,689.847 1661.47,674.673 1662.03,704.925 1662.58,702.235 1663.14,667.812 1663.7,664.624 1664.26,663.988 1664.82,649.928 1665.38,636.559 1665.94,655.4 1666.5,623.475 1667.06,595.711 1667.62,570.222 1668.18,575.739 1668.74,596.645 1669.3,601.396 1669.85,574.297 1670.41,577.937 1670.97,570.122 1671.53,609.896 1672.09,613.9 1672.65,620.603 1673.21,625.2 1673.77,630.409 1674.33,617.853 1674.89,640.377 1675.45,658.034 1676.01,661.612 1676.57,664.545 1677.13,670.078 1677.68,687.326 1678.24,686.983 1678.8,657.422 1679.36,674.881 1679.92,688.756 1680.48,718.284 1681.04,748.514 1681.6,729.4 1682.16,730.744 1682.72,728.933 1683.28,693.569 1683.84,630.295 1684.4,684.187 1684.95,685.337 1685.51,705.185 1686.07,721.663 1686.63,766.302 1687.19,761.307 1687.75,759.191 1688.31,753.236 1688.87,737.563 1689.43,753.27 1689.99,750.715 1690.55,697.227 1691.11,679.715 1691.67,661.935 1692.23,662.734 1692.78,668.185 1693.34,666.438 1693.9,720.999 1694.46,701.54 1695.02,716.938 1695.58,681.472 1696.14,663.188 1696.7,682.779 1697.26,662.948 1697.82,650.743 1698.38,654.025 1698.94,641.69 1699.5,630.365 1700.05,648.424 1700.61,648.009 1701.17,650.736 1701.73,673.187 1702.29,676.528 1702.85,679.706 1703.41,665.22 1703.97,665.324 1704.53,649.858 1705.09,648.077 1705.65,632.518 1706.21,605.698 1706.77,609.202 1707.32,596.799 1707.88,617.298 1708.44,588.786 1709,593.397 1709.56,613.493 1710.12,646.395 1710.68,664.438 1711.24,685.926 1711.8,683.382 1712.36,666.78 1712.92,667.423 1713.48,686.66 1714.04,686.024 1714.6,715.777 1715.15,712.405 1715.71,724.719 1716.27,722.119 1716.83,732.997 1717.39,699.003 1717.95,699.311 1718.51,684.105 1719.07,699.93 1719.63,712.51 1720.19,742.45 1720.75,723.326 1721.31,720.339 1721.87,738.206 1722.42,718.37 1722.98,700.76 1723.54,699.041 1724.1,680.458 1724.66,712.585 1725.22,693.543 1725.78,689.009 1726.34,705.028 1726.9,688.868 1727.46,704.77 1728.02,689.124 1728.58,677.397 1729.14,695.454 1729.69,692.929 1730.25,690.595 1730.81,658.855 1731.37,660.151 1731.93,661.713 1732.49,662.775 1733.05,647.609 1733.61,661.279 1734.17,628.121 1734.73,627.704 1735.29,644.887 1735.85,668.234 1736.41,638.261 1736.97,638.607 1737.52,639.409 1738.08,689.56 1738.64,689.24 1739.2,689.201 1739.76,686.176 1740.32,672.117 1740.88,688.85 1741.44,693.945 1742,694.367 1742.56,709.077 1743.12,705.438 1743.68,704.402 1744.24,718.422 1744.79,736.197 1745.35,751.325 1745.91,745.336 1746.47,755.631 1747.03,755.949 1747.59,752.348 1748.15,734.949 1748.71,762.034 1749.27,758.465 1749.83,756.66 1750.39,754.223 1750.95,781.75 1751.51,791.523 1752.06,720.459 1752.62,718.84 1753.18,716.298 1753.74,714.941 1754.3,730.949 1754.86,746.793 1755.42,697.019 1755.98,700.753 1756.54,680.816 1757.1,698.096 1757.66,695.123 1758.22,711.232 1758.78,678.102 1759.34,664.799 1759.89,666.833 1760.45,664.246 1761.01,676.4 1761.57,707.297 1762.13,675.644 1762.69,695.651 1763.25,644.313 1763.81,664.616 1764.37,682.583 1764.93,683.118 1765.49,654.54 1766.05,658.327 1766.61,614.267 1767.16,617.27 1767.72,652.027 1768.28,652.998 1768.84,636.937 1769.4,657.918 1769.96,659.205 1770.52,646.557 1771.08,680.645 1771.64,731.53 1772.2,730.781 1772.76,711.627 1773.32,715.224 1773.88,726.797 1774.43,723.56 1774.99,705.443 1775.55,690.632 1776.11,659.9 1776.67,675.087 1777.23,693.057 1777.79,691.12 1778.35,692.249 1778.91,677.717 1779.47,676.462 1780.03,691.067 1780.59,675.476 1781.15,658.461 1781.71,660.794 1782.26,646.912 1782.82,648.944 1783.38,652.511 1783.94,685.863 1784.5,669.306 1785.06,688.359 1785.62,670.335 1786.18,673.056 1786.74,657.67 1787.3,690.093 1787.86,642.472 1788.42,627.143 1788.98,648.496 1789.53,663.968 1790.09,679.162 1790.65,692.033 1791.21,672.067 1791.77,658.89 1792.33,675.411 1792.89,678.794 1793.45,666.75 1794.01,636.709 1794.57,637.405 1795.13,657.068 1795.69,657.354 1796.25,628.043 1796.8,612.653 1797.36,650.654 1797.92,671.574 1798.48,673.727 1799.04,674.017 1799.6,687.33 1800.16,685.4 1800.72,687.5 1801.28,658.619 1801.84,659.038 1802.4,693.656 1802.96,692.575 1803.52,690.998 1804.08,677.625 1804.63,680.627 1805.19,648.479 1805.75,670.464 1806.31,670.502 1806.87,655.326 1807.43,674.611 1807.99,709.159 1808.55,707.89 1809.11,706.095 1809.67,722.473 1810.23,718.799 1810.79,715.178 1811.35,727.336 1811.9,725.579 1812.46,755.962 1813.02,752.137 1813.58,797.65 1814.14,775.387 1814.7,751.784 1815.26,749.756 1815.82,728.662 1816.38,708.949 1816.94,707.161 1817.5,673.554 1818.06,720.047 1818.62,718.329 1819.18,734.36 1819.73,713.732 1820.29,714.6 1820.85,717.275 1821.41,714.253 1821.97,696.971 1822.53,663.444 1823.09,652.22 1823.65,655.761 1824.21,659.165 1824.77,660.892 1825.33,645.595 1825.89,664.769 1826.45,648.993 1827,665.234 1827.56,666.435 1828.12,680.937 1828.68,679.001 1829.24,679.265 1829.8,726.76 1830.36,707.616 1830.92,721.572 1831.48,685.771 1832.04,652.659 1832.6,670.064 1833.16,652.88 1833.72,653.3 1834.27,688.68 1834.83,692.545 1835.39,689.493 1835.95,689.218 1836.51,669.903 1837.07,687.17 1837.63,652.309 1838.19,638.309 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 690.175 L720.806 690.175 L721.365 690.175 L721.924 690.175 L722.484 690.175 L723.043 690.175 L723.602 690.175 L724.161 690.175 L724.721 690.175 L725.28 690.175 L725.839 690.175 L726.398 690.175 L726.958 690.175 L727.517 690.175 L728.076 690.175 L728.635 690.175 L729.195 690.175 L729.754 690.175 L730.313 690.175 L730.872 690.175 L731.432 690.175 L731.991 690.175 L732.55 690.175 L733.109 690.175 L733.669 690.175 L734.228 690.175 L734.787 690.175 L735.346 690.175 L735.906 690.175 L736.465 690.175 L737.024 690.175 L737.583 690.175 L738.143 690.175 L738.702 690.175 L739.261 690.175 L739.82 690.175 L740.38 690.175 L740.939 690.175 L741.498 690.175 L742.057 690.175 L742.617 690.175 L743.176 690.175 L743.735 690.175 L744.294 690.175 L744.854 690.175 L745.413 690.175 L745.972 690.175 L746.531 690.175 L747.091 690.175 L747.65 690.175 L748.209 690.175 L748.768 690.175 L749.328 690.175 L749.887 690.175 L750.446 690.175 L751.005 690.175 L751.565 690.175 L752.124 690.175 L752.683 690.175 L753.242 690.175 L753.802 690.175 L754.361 690.175 L754.92 690.175 L755.479 690.175 L756.039 690.175 L756.598 690.175 L757.157 690.175 L757.716 690.175 L758.276 690.175 L758.835 690.175 L759.394 690.175 L759.953 690.175 L760.513 690.175 L761.072 690.175 L761.631 690.175 L762.19 690.175 L762.75 690.175 L763.309 690.175 L763.868 690.175 L764.427 690.175 L764.987 690.175 L765.546 690.175 L766.105 690.175 L766.664 690.175 L767.224 690.175 L767.783 690.175 L768.342 690.175 L768.901 690.175 L769.461 690.175 L770.02 690.175 L770.579 690.175 L771.138 690.175 L771.698 690.175 L772.257 690.175 L772.816 690.175 L773.375 690.175 L773.935 690.175 L774.494 690.175 L775.053 690.175 L775.612 690.175 L776.172 690.175 L776.731 690.175 L777.29 690.175 L777.849 690.175 L778.409 690.175 L778.968 690.175 L779.527 690.175 L780.086 690.175 L780.646 690.175 L781.205 690.175 L781.764 690.175 L782.323 690.175 L782.883 690.175 L783.442 690.175 L784.001 690.175 L784.56 690.175 L785.12 690.175 L785.679 690.175 L786.238 690.175 L786.797 690.175 L787.357 690.175 L787.916 690.175 L788.475 690.175 L789.034 690.175 L789.594 690.175 L790.153 690.175 L790.712 690.175 L791.271 690.175 L791.831 690.175 L792.39 690.175 L792.949 690.175 L793.508 690.175 L794.068 690.175 L794.627 690.175 L795.186 690.175 L795.745 690.175 L796.305 690.175 L796.864 690.175 L797.423 690.175 L797.982 690.175 L798.542 690.175 L799.101 690.175 L799.66 690.175 L800.219 690.175 L800.779 690.175 L801.338 690.175 L801.897 690.175 L802.456 690.175 L803.016 690.175 L803.575 690.175 L804.134 690.175 L804.693 690.175 L805.253 690.175 L805.812 690.175 L806.371 690.175 L806.931 690.175 L807.49 690.175 L808.049 690.175 L808.608 690.175 L809.168 690.175 L809.727 690.175 L810.286 690.175 L810.845 690.175 L811.405 690.175 L811.964 690.175 L812.523 690.175 L813.082 690.175 L813.642 690.175 L814.201 690.175 L814.76 690.175 L815.319 690.175 L815.879 690.175 L816.438 690.175 L816.997 690.175 L817.556 690.175 L818.116 690.175 L818.675 690.175 L819.234 690.175 L819.793 690.175 L820.353 690.175 L820.912 690.175 L821.471 690.175 L822.03 690.175 L822.59 690.175 L823.149 690.175 L823.708 690.175 L824.267 690.175 L824.827 690.175 L825.386 690.175 L825.945 690.175 L826.504 690.175 L827.064 690.175 L827.623 690.175 L828.182 690.175 L828.741 690.175 L829.301 690.175 L829.86 690.175 L830.419 690.175 L830.978 690.175 L831.538 690.175 L832.097 690.175 L832.656 690.175 L833.215 690.175 L833.775 690.175 L834.334 690.175 L834.893 690.175 L835.452 690.175 L836.012 690.175 L836.571 690.175 L837.13 690.175 L837.689 690.175 L838.249 690.175 L838.808 690.175 L839.367 690.175 L839.926 690.175 L840.486 690.175 L841.045 690.175 L841.604 690.175 L842.163 690.175 L842.723 690.175 L843.282 690.175 L843.841 690.175 L844.4 690.175 L844.96 690.175 L845.519 690.175 L846.078 690.175 L846.637 690.175 L847.197 690.175 L847.756 690.175 L848.315 690.175 L848.874 690.175 L849.434 690.175 L849.993 690.175 L850.552 690.175 L851.111 690.175 L851.671 690.175 L852.23 690.175 L852.789 690.175 L853.348 690.175 L853.908 690.175 L854.467 690.175 L855.026 690.175 L855.585 690.175 L856.145 690.175 L856.704 690.175 L857.263 690.175 L857.822 690.175 L858.382 690.175 L858.941 690.175 L859.5 690.175 L860.059 690.175 L860.619 690.175 L861.178 690.175 L861.737 690.175 L862.296 690.175 L862.856 690.175 L863.415 690.175 L863.974 690.175 L864.533 690.175 L865.093 690.175 L865.652 690.175 L866.211 690.175 L866.77 690.175 L867.33 690.175 L867.889 690.175 L868.448 690.175 L869.007 690.175 L869.567 690.175 L870.126 690.175 L870.685 690.175 L871.244 690.175 L871.804 690.175 L872.363 690.175 L872.922 690.175 L873.481 690.175 L874.041 690.175 L874.6 690.175 L875.159 690.175 L875.718 690.175 L876.278 690.175 L876.837 690.175 L877.396 690.175 L877.955 690.175 L878.515 690.175 L879.074 690.175 L879.633 690.175 L880.192 690.175 L880.752 690.175 L881.311 690.175 L881.87 690.175 L882.429 690.175 L882.989 690.175 L883.548 690.175 L884.107 690.175 L884.666 690.175 L885.226 690.175 L885.785 690.175 L886.344 690.175 L886.903 690.175 L887.463 690.175 L888.022 690.175 L888.581 690.175 L889.14 690.175 L889.7 690.175 L890.259 690.175 L890.818 690.175 L891.377 690.175 L891.937 690.175 L892.496 690.175 L893.055 690.175 L893.614 690.175 L894.174 690.175 L894.733 690.175 L895.292 690.175 L895.851 690.175 L896.411 690.175 L896.97 690.175 L897.529 690.175 L898.088 690.175 L898.648 690.175 L899.207 690.175 L899.766 690.175 L900.325 690.175 L900.885 690.175 L901.444 690.175 L902.003 690.175 L902.562 690.175 L903.122 690.175 L903.681 690.175 L904.24 690.175 L904.799 690.175 L905.359 690.175 L905.918 690.175 L906.477 690.175 L907.036 690.175 L907.596 690.175 L908.155 690.175 L908.714 690.175 L909.273 690.175 L909.833 690.175 L910.392 690.175 L910.951 690.175 L911.51 690.175 L912.07 690.175 L912.629 690.175 L913.188 690.175 L913.747 690.175 L914.307 690.175 L914.866 690.175 L915.425 690.175 L915.984 690.175 L916.544 690.175 L917.103 690.175 L917.662 690.175 L918.221 690.175 L918.781 690.175 L919.34 690.175 L919.899 690.175 L920.458 690.175 L921.018 690.175 L921.577 690.175 L922.136 690.175 L922.695 690.175 L923.255 690.175 L923.814 690.175 L924.373 690.175 L924.932 690.175 L925.492 690.175 L926.051 690.175 L926.61 690.175 L927.169 690.175 L927.729 690.175 L928.288 690.175 L928.847 690.175 L929.406 690.175 L929.966 690.175 L930.525 690.175 L931.084 690.175 L931.644 690.175 L932.203 690.175 L932.762 690.175 L933.321 690.175 L933.881 690.175 L934.44 690.175 L934.999 690.175 L935.558 690.175 L936.118 690.175 L936.677 690.175 L937.236 690.175 L937.795 690.175 L938.355 690.175 L938.914 690.175 L939.473 690.175 L940.032 690.175 L940.592 690.175 L941.151 690.175 L941.71 690.175 L942.269 690.175 L942.829 690.175 L943.388 690.175 L943.947 690.175 L944.506 690.175 L945.066 690.175 L945.625 690.175 L946.184 690.175 L946.743 690.175 L947.303 690.175 L947.862 690.175 L948.421 690.175 L948.98 690.175 L949.54 690.175 L950.099 690.175 L950.658 690.175 L951.217 690.175 L951.777 690.175 L952.336 690.175 L952.895 690.175 L953.454 690.175 L954.014 690.175 L954.573 690.175 L955.132 690.175 L955.691 690.175 L956.251 690.175 L956.81 690.175 L957.369 690.175 L957.928 690.175 L958.488 690.175 L959.047 690.175 L959.606 690.175 L960.165 690.175 L960.725 690.175 L961.284 690.175 L961.843 690.175 L962.402 690.175 L962.962 690.175 L963.521 690.175 L964.08 690.175 L964.639 690.175 L965.199 690.175 L965.758 690.175 L966.317 690.175 L966.876 690.175 L967.436 690.175 L967.995 690.175 L968.554 690.175 L969.113 690.175 L969.673 690.175 L970.232 690.175 L970.791 690.175 L971.35 690.175 L971.91 690.175 L972.469 690.175 L973.028 690.175 L973.587 690.175 L974.147 690.175 L974.706 690.175 L975.265 690.175 L975.824 690.175 L976.384 690.175 L976.943 690.175 L977.502 690.175 L978.061 690.175 L978.621 690.175 L979.18 690.175 L979.739 690.175 L980.298 690.175 L980.858 690.175 L981.417 690.175 L981.976 690.175 L982.535 690.175 L983.095 690.175 L983.654 690.175 L984.213 690.175 L984.772 690.175 L985.332 690.175 L985.891 690.175 L986.45 690.175 L987.009 690.175 L987.569 690.175 L988.128 690.175 L988.687 690.175 L989.246 690.175 L989.806 690.175 L990.365 690.175 L990.924 690.175 L991.483 690.175 L992.043 690.175 L992.602 690.175 L993.161 690.175 L993.72 690.175 L994.28 690.175 L994.839 690.175 L995.398 690.175 L995.957 690.175 L996.517 690.175 L997.076 690.175 L997.635 690.175 L998.194 690.175 L998.754 690.175 L999.313 690.175 L999.872 690.175 L1000.43 690.175 L1000.99 690.175 L1001.55 690.175 L1002.11 690.175 L1002.67 690.175 L1003.23 690.175 L1003.79 690.175 L1004.35 690.175 L1004.91 690.175 L1005.46 690.175 L1006.02 690.175 L1006.58 690.175 L1007.14 690.175 L1007.7 690.175 L1008.26 690.175 L1008.82 690.175 L1009.38 690.175 L1009.94 690.175 L1010.5 690.175 L1011.06 690.175 L1011.62 690.175 L1012.18 690.175 L1012.73 690.175 L1013.29 690.175 L1013.85 690.175 L1014.41 690.175 L1014.97 690.175 L1015.53 690.175 L1016.09 690.175 L1016.65 690.175 L1017.21 690.175 L1017.77 690.175 L1018.33 690.175 L1018.89 690.175 L1019.45 690.175 L1020.01 690.175 L1020.56 690.175 L1021.12 690.175 L1021.68 690.175 L1022.24 690.175 L1022.8 690.175 L1023.36 690.175 L1023.92 690.175 L1024.48 690.175 L1025.04 690.175 L1025.6 690.175 L1026.16 690.175 L1026.72 690.175 L1027.28 690.175 L1027.83 690.175 L1028.39 690.175 L1028.95 690.175 L1029.51 690.175 L1030.07 690.175 L1030.63 690.175 L1031.19 690.175 L1031.75 690.175 L1032.31 690.175 L1032.87 690.175 L1033.43 690.175 L1033.99 690.175 L1034.55 690.175 L1035.1 690.175 L1035.66 690.175 L1036.22 690.175 L1036.78 690.175 L1037.34 690.175 L1037.9 690.175 L1038.46 690.175 L1039.02 690.175 L1039.58 690.175 L1040.14 690.175 L1040.7 690.175 L1041.26 690.175 L1041.82 690.175 L1042.38 690.175 L1042.93 690.175 L1043.49 690.175 L1044.05 690.175 L1044.61 690.175 L1045.17 690.175 L1045.73 690.175 L1046.29 690.175 L1046.85 690.175 L1047.41 690.175 L1047.97 690.175 L1048.53 690.175 L1049.09 690.175 L1049.65 690.175 L1050.2 690.175 L1050.76 690.175 L1051.32 690.175 L1051.88 690.175 L1052.44 690.175 L1053 690.175 L1053.56 690.175 L1054.12 690.175 L1054.68 690.175 L1055.24 690.175 L1055.8 690.175 L1056.36 690.175 L1056.92 690.175 L1057.48 690.175 L1058.03 690.175 L1058.59 690.175 L1059.15 690.175 L1059.71 690.175 L1060.27 690.175 L1060.83 690.175 L1061.39 690.175 L1061.95 690.175 L1062.51 690.175 L1063.07 690.175 L1063.63 690.175 L1064.19 690.175 L1064.75 690.175 L1065.3 690.175 L1065.86 690.175 L1066.42 690.175 L1066.98 690.175 L1067.54 690.175 L1068.1 690.175 L1068.66 690.175 L1069.22 690.175 L1069.78 690.175 L1070.34 690.175 L1070.9 690.175 L1071.46 690.175 L1072.02 690.175 L1072.57 690.175 L1073.13 690.175 L1073.69 690.175 L1074.25 690.175 L1074.81 690.175 L1075.37 690.175 L1075.93 690.175 L1076.49 690.175 L1077.05 690.175 L1077.61 690.175 L1078.17 690.175 L1078.73 690.175 L1079.29 690.175 L1079.85 690.175 L1080.4 690.175 L1080.96 690.175 L1081.52 690.175 L1082.08 690.175 L1082.64 690.175 L1083.2 690.175 L1083.76 690.175 L1084.32 690.175 L1084.88 690.175 L1085.44 690.175 L1086 690.175 L1086.56 690.175 L1087.12 690.175 L1087.67 690.175 L1088.23 690.175 L1088.79 690.175 L1089.35 690.175 L1089.91 690.175 L1090.47 690.175 L1091.03 690.175 L1091.59 690.175 L1092.15 690.175 L1092.71 690.175 L1093.27 690.175 L1093.83 690.175 L1094.39 690.175 L1094.94 690.175 L1095.5 690.175 L1096.06 690.175 L1096.62 690.175 L1097.18 690.175 L1097.74 690.175 L1098.3 690.175 L1098.86 690.175 L1099.42 690.175 L1099.98 690.175 L1100.54 690.175 L1101.1 690.175 L1101.66 690.175 L1102.22 690.175 L1102.77 690.175 L1103.33 690.175 L1103.89 690.175 L1104.45 690.175 L1105.01 690.175 L1105.57 690.175 L1106.13 690.175 L1106.69 690.175 L1107.25 690.175 L1107.81 690.175 L1108.37 690.175 L1108.93 690.175 L1109.49 690.175 L1110.04 690.175 L1110.6 690.175 L1111.16 690.175 L1111.72 690.175 L1112.28 690.175 L1112.84 690.175 L1113.4 690.175 L1113.96 690.175 L1114.52 690.175 L1115.08 690.175 L1115.64 690.175 L1116.2 690.175 L1116.76 690.175 L1117.31 690.175 L1117.87 690.175 L1118.43 690.175 L1118.99 690.175 L1119.55 690.175 L1120.11 690.175 L1120.67 690.175 L1121.23 690.175 L1121.79 690.175 L1122.35 690.175 L1122.91 690.175 L1123.47 690.175 L1124.03 690.175 L1124.59 690.175 L1125.14 690.175 L1125.7 690.175 L1126.26 690.175 L1126.82 690.175 L1127.38 690.175 L1127.94 690.175 L1128.5 690.175 L1129.06 690.175 L1129.62 690.175 L1130.18 690.175 L1130.74 690.175 L1131.3 690.175 L1131.86 690.175 L1132.41 690.175 L1132.97 690.175 L1133.53 690.175 L1134.09 690.175 L1134.65 690.175 L1135.21 690.175 L1135.77 690.175 L1136.33 690.175 L1136.89 690.175 L1137.45 690.175 L1138.01 690.175 L1138.57 690.175 L1139.13 690.175 L1139.68 690.175 L1140.24 690.175 L1140.8 690.175 L1141.36 690.175 L1141.92 690.175 L1142.48 690.175 L1143.04 690.175 L1143.6 690.175 L1144.16 690.175 L1144.72 690.175 L1145.28 690.175 L1145.84 690.175 L1146.4 690.175 L1146.96 690.175 L1147.51 690.175 L1148.07 690.175 L1148.63 690.175 L1149.19 690.175 L1149.75 690.175 L1150.31 690.175 L1150.87 690.175 L1151.43 690.175 L1151.99 690.175 L1152.55 690.175 L1153.11 690.175 L1153.67 690.175 L1154.23 690.175 L1154.78 690.175 L1155.34 690.175 L1155.9 690.175 L1156.46 690.175 L1157.02 690.175 L1157.58 690.175 L1158.14 690.175 L1158.7 690.175 L1159.26 690.175 L1159.82 690.175 L1160.38 690.175 L1160.94 690.175 L1161.5 690.175 L1162.05 690.175 L1162.61 690.175 L1163.17 690.175 L1163.73 690.175 L1164.29 690.175 L1164.85 690.175 L1165.41 690.175 L1165.97 690.175 L1166.53 690.175 L1167.09 690.175 L1167.65 690.175 L1168.21 690.175 L1168.77 690.175 L1169.33 690.175 L1169.88 690.175 L1170.44 690.175 L1171 690.175 L1171.56 690.175 L1172.12 690.175 L1172.68 690.175 L1173.24 690.175 L1173.8 690.175 L1174.36 690.175 L1174.92 690.175 L1175.48 690.175 L1176.04 690.175 L1176.6 690.175 L1177.15 690.175 L1177.71 690.175 L1178.27 690.175 L1178.83 690.175 L1179.39 690.175 L1179.95 690.175 L1180.51 690.175 L1181.07 690.175 L1181.63 690.175 L1182.19 690.175 L1182.75 690.175 L1183.31 690.175 L1183.87 690.175 L1184.43 690.175 L1184.98 690.175 L1185.54 690.175 L1186.1 690.175 L1186.66 690.175 L1187.22 690.175 L1187.78 690.175 L1188.34 690.175 L1188.9 690.175 L1189.46 690.175 L1190.02 690.175 L1190.58 690.175 L1191.14 690.175 L1191.7 690.175 L1192.25 690.175 L1192.81 690.175 L1193.37 690.175 L1193.93 690.175 L1194.49 690.175 L1195.05 690.175 L1195.61 690.175 L1196.17 690.175 L1196.73 690.175 L1197.29 690.175 L1197.85 690.175 L1198.41 690.175 L1198.97 690.175 L1199.52 690.175 L1200.08 690.175 L1200.64 690.175 L1201.2 690.175 L1201.76 690.175 L1202.32 690.175 L1202.88 690.175 L1203.44 690.175 L1204 690.175 L1204.56 690.175 L1205.12 690.175 L1205.68 690.175 L1206.24 690.175 L1206.8 690.175 L1207.35 690.175 L1207.91 690.175 L1208.47 690.175 L1209.03 690.175 L1209.59 690.175 L1210.15 690.175 L1210.71 690.175 L1211.27 690.175 L1211.83 690.175 L1212.39 690.175 L1212.95 690.175 L1213.51 690.175 L1214.07 690.175 L1214.62 690.175 L1215.18 690.175 L1215.74 690.175 L1216.3 690.175 L1216.86 690.175 L1217.42 690.175 L1217.98 690.175 L1218.54 690.175 L1219.1 690.175 L1219.66 690.175 L1220.22 690.175 L1220.78 690.175 L1221.34 690.175 L1221.89 690.175 L1222.45 690.175 L1223.01 690.175 L1223.57 690.175 L1224.13 690.175 L1224.69 690.175 L1225.25 690.175 L1225.81 690.175 L1226.37 690.175 L1226.93 690.175 L1227.49 690.175 L1228.05 690.175 L1228.61 690.175 L1229.17 690.175 L1229.72 690.175 L1230.28 690.175 L1230.84 690.175 L1231.4 690.175 L1231.96 690.175 L1232.52 690.175 L1233.08 690.175 L1233.64 690.175 L1234.2 690.175 L1234.76 690.175 L1235.32 690.175 L1235.88 690.175 L1236.44 690.175 L1236.99 690.175 L1237.55 690.175 L1238.11 690.175 L1238.67 690.175 L1239.23 690.175 L1239.79 690.175 L1240.35 690.175 L1240.91 690.175 L1241.47 690.175 L1242.03 690.175 L1242.59 690.175 L1243.15 690.175 L1243.71 690.175 L1244.26 690.175 L1244.82 690.175 L1245.38 690.175 L1245.94 690.175 L1246.5 690.175 L1247.06 690.175 L1247.62 690.175 L1248.18 690.175 L1248.74 690.175 L1249.3 690.175 L1249.86 690.175 L1250.42 690.175 L1250.98 690.175 L1251.54 690.175 L1252.09 690.175 L1252.65 690.175 L1253.21 690.175 L1253.77 690.175 L1254.33 690.175 L1254.89 690.175 L1255.45 690.175 L1256.01 690.175 L1256.57 690.175 L1257.13 690.175 L1257.69 690.175 L1258.25 690.175 L1258.81 690.175 L1259.36 690.175 L1259.92 690.175 L1260.48 690.175 L1261.04 690.175 L1261.6 690.175 L1262.16 690.175 L1262.72 690.175 L1263.28 690.175 L1263.84 690.175 L1264.4 690.175 L1264.96 690.175 L1265.52 690.175 L1266.08 690.175 L1266.63 690.175 L1267.19 690.175 L1267.75 690.175 L1268.31 690.175 L1268.87 690.175 L1269.43 690.175 L1269.99 690.175 L1270.55 690.175 L1271.11 690.175 L1271.67 690.175 L1272.23 690.175 L1272.79 690.175 L1273.35 690.175 L1273.91 690.175 L1274.46 690.175 L1275.02 690.175 L1275.58 690.175 L1276.14 690.175 L1276.7 690.175 L1277.26 690.175 L1277.82 690.175 L1278.38 690.175 L1278.94 690.175 L1279.5 690.175 L1280.06 690.175 L1280.62 690.175 L1281.18 690.175 L1281.73 690.175 L1282.29 690.175 L1282.85 690.175 L1283.41 690.175 L1283.97 690.175 L1284.53 690.175 L1285.09 690.175 L1285.65 690.175 L1286.21 690.175 L1286.77 690.175 L1287.33 690.175 L1287.89 690.175 L1288.45 690.175 L1289 690.175 L1289.56 690.175 L1290.12 690.175 L1290.68 690.175 L1291.24 690.175 L1291.8 690.175 L1292.36 690.175 L1292.92 690.175 L1293.48 690.175 L1294.04 690.175 L1294.6 690.175 L1295.16 690.175 L1295.72 690.175 L1296.28 690.175 L1296.83 690.175 L1297.39 690.175 L1297.95 690.175 L1298.51 690.175 L1299.07 690.175 L1299.63 690.175 L1300.19 690.175 L1300.75 690.175 L1301.31 690.175 L1301.87 690.175 L1302.43 690.175 L1302.99 690.175 L1303.55 690.175 L1304.1 690.175 L1304.66 690.175 L1305.22 690.175 L1305.78 690.175 L1306.34 690.175 L1306.9 690.175 L1307.46 690.175 L1308.02 690.175 L1308.58 690.175 L1309.14 690.175 L1309.7 690.175 L1310.26 690.175 L1310.82 690.175 L1311.38 690.175 L1311.93 690.175 L1312.49 690.175 L1313.05 690.175 L1313.61 690.175 L1314.17 690.175 L1314.73 690.175 L1315.29 690.175 L1315.85 690.175 L1316.41 690.175 L1316.97 690.175 L1317.53 690.175 L1318.09 690.175 L1318.65 690.175 L1319.2 690.175 L1319.76 690.175 L1320.32 690.175 L1320.88 690.175 L1321.44 690.175 L1322 690.175 L1322.56 690.175 L1323.12 690.175 L1323.68 690.175 L1324.24 690.175 L1324.8 690.175 L1325.36 690.175 L1325.92 690.175 L1326.47 690.175 L1327.03 690.175 L1327.59 690.175 L1328.15 690.175 L1328.71 690.175 L1329.27 690.175 L1329.83 690.175 L1330.39 690.175 L1330.95 690.175 L1331.51 690.175 L1332.07 690.175 L1332.63 690.175 L1333.19 690.175 L1333.75 690.175 L1334.3 690.175 L1334.86 690.175 L1335.42 690.175 L1335.98 690.175 L1336.54 690.175 L1337.1 690.175 L1337.66 690.175 L1338.22 690.175 L1338.78 690.175 L1339.34 690.175 L1339.9 690.175 L1340.46 690.175 L1341.02 690.175 L1341.57 690.175 L1342.13 690.175 L1342.69 690.175 L1343.25 690.175 L1343.81 690.175 L1344.37 690.175 L1344.93 690.175 L1345.49 690.175 L1346.05 690.175 L1346.61 690.175 L1347.17 690.175 L1347.73 690.175 L1348.29 690.175 L1348.84 690.175 L1349.4 690.175 L1349.96 690.175 L1350.52 690.175 L1351.08 690.175 L1351.64 690.175 L1352.2 690.175 L1352.76 690.175 L1353.32 690.175 L1353.88 690.175 L1354.44 690.175 L1355 690.175 L1355.56 690.175 L1356.12 690.175 L1356.67 690.175 L1357.23 690.175 L1357.79 690.175 L1358.35 690.175 L1358.91 690.175 L1359.47 690.175 L1360.03 690.175 L1360.59 690.175 L1361.15 690.175 L1361.71 690.175 L1362.27 690.175 L1362.83 690.175 L1363.39 690.175 L1363.94 690.175 L1364.5 690.175 L1365.06 690.175 L1365.62 690.175 L1366.18 690.175 L1366.74 690.175 L1367.3 690.175 L1367.86 690.175 L1368.42 690.175 L1368.98 690.175 L1369.54 690.175 L1370.1 690.175 L1370.66 690.175 L1371.21 690.175 L1371.77 690.175 L1372.33 690.175 L1372.89 690.175 L1373.45 690.175 L1374.01 690.175 L1374.57 690.175 L1375.13 690.175 L1375.69 690.175 L1376.25 690.175 L1376.81 690.175 L1377.37 690.175 L1377.93 690.175 L1378.49 690.175 L1379.04 690.175 L1379.6 690.175 L1380.16 690.175 L1380.72 690.175 L1381.28 690.175 L1381.84 690.175 L1382.4 690.175 L1382.96 690.175 L1383.52 690.175 L1384.08 690.175 L1384.64 690.175 L1385.2 690.175 L1385.76 690.175 L1386.31 690.175 L1386.87 690.175 L1387.43 690.175 L1387.99 690.175 L1388.55 690.175 L1389.11 690.175 L1389.67 690.175 L1390.23 690.175 L1390.79 690.175 L1391.35 690.175 L1391.91 690.175 L1392.47 690.175 L1393.03 690.175 L1393.58 690.175 L1394.14 690.175 L1394.7 690.175 L1395.26 690.175 L1395.82 690.175 L1396.38 690.175 L1396.94 690.175 L1397.5 690.175 L1398.06 690.175 L1398.62 690.175 L1399.18 690.175 L1399.74 690.175 L1400.3 690.175 L1400.86 690.175 L1401.41 690.175 L1401.97 690.175 L1402.53 690.175 L1403.09 690.175 L1403.65 690.175 L1404.21 690.175 L1404.77 690.175 L1405.33 690.175 L1405.89 690.175 L1406.45 690.175 L1407.01 690.175 L1407.57 690.175 L1408.13 690.175 L1408.68 690.175 L1409.24 690.175 L1409.8 690.175 L1410.36 690.175 L1410.92 690.175 L1411.48 690.175 L1412.04 690.175 L1412.6 690.175 L1413.16 690.175 L1413.72 690.175 L1414.28 690.175 L1414.84 690.175 L1415.4 690.175 L1415.95 690.175 L1416.51 690.175 L1417.07 690.175 L1417.63 690.175 L1418.19 690.175 L1418.75 690.175 L1419.31 690.175 L1419.87 690.175 L1420.43 690.175 L1420.99 690.175 L1421.55 690.175 L1422.11 690.175 L1422.67 690.175 L1423.23 690.175 L1423.78 690.175 L1424.34 690.175 L1424.9 690.175 L1425.46 690.175 L1426.02 690.175 L1426.58 690.175 L1427.14 690.175 L1427.7 690.175 L1428.26 690.175 L1428.82 690.175 L1429.38 690.175 L1429.94 690.175 L1430.5 690.175 L1431.05 690.175 L1431.61 690.175 L1432.17 690.175 L1432.73 690.175 L1433.29 690.175 L1433.85 690.175 L1434.41 690.175 L1434.97 690.175 L1435.53 690.175 L1436.09 690.175 L1436.65 690.175 L1437.21 690.175 L1437.77 690.175 L1438.33 690.175 L1438.88 690.175 L1439.44 690.175 L1440 690.175 L1440.56 690.175 L1441.12 690.175 L1441.68 690.175 L1442.24 690.175 L1442.8 690.175 L1443.36 690.175 L1443.92 690.175 L1444.48 690.175 L1445.04 690.175 L1445.6 690.175 L1446.15 690.175 L1446.71 690.175 L1447.27 690.175 L1447.83 690.175 L1448.39 690.175 L1448.95 690.175 L1449.51 690.175 L1450.07 690.175 L1450.63 690.175 L1451.19 690.175 L1451.75 690.175 L1452.31 690.175 L1452.87 690.175 L1453.42 690.175 L1453.98 690.175 L1454.54 690.175 L1455.1 690.175 L1455.66 690.175 L1456.22 690.175 L1456.78 690.175 L1457.34 690.175 L1457.9 690.175 L1458.46 690.175 L1459.02 690.175 L1459.58 690.175 L1460.14 690.175 L1460.7 690.175 L1461.25 690.175 L1461.81 690.175 L1462.37 690.175 L1462.93 690.175 L1463.49 690.175 L1464.05 690.175 L1464.61 690.175 L1465.17 690.175 L1465.73 690.175 L1466.29 690.175 L1466.85 690.175 L1467.41 690.175 L1467.97 690.175 L1468.52 690.175 L1469.08 690.175 L1469.64 690.175 L1470.2 690.175 L1470.76 690.175 L1471.32 690.175 L1471.88 690.175 L1472.44 690.175 L1473 690.175 L1473.56 690.175 L1474.12 690.175 L1474.68 690.175 L1475.24 690.175 L1475.79 690.175 L1476.35 690.175 L1476.91 690.175 L1477.47 690.175 L1478.03 690.175 L1478.59 690.175 L1479.15 690.175 L1479.71 690.175 L1480.27 690.175 L1480.83 690.175 L1481.39 690.175 L1481.95 690.175 L1482.51 690.175 L1483.07 690.175 L1483.62 690.175 L1484.18 690.175 L1484.74 690.175 L1485.3 690.175 L1485.86 690.175 L1486.42 690.175 L1486.98 690.175 L1487.54 690.175 L1488.1 690.175 L1488.66 690.175 L1489.22 690.175 L1489.78 690.175 L1490.34 690.175 L1490.89 690.175 L1491.45 690.175 L1492.01 690.175 L1492.57 690.175 L1493.13 690.175 L1493.69 690.175 L1494.25 690.175 L1494.81 690.175 L1495.37 690.175 L1495.93 690.175 L1496.49 690.175 L1497.05 690.175 L1497.61 690.175 L1498.16 690.175 L1498.72 690.175 L1499.28 690.175 L1499.84 690.175 L1500.4 690.175 L1500.96 690.175 L1501.52 690.175 L1502.08 690.175 L1502.64 690.175 L1503.2 690.175 L1503.76 690.175 L1504.32 690.175 L1504.88 690.175 L1505.44 690.175 L1505.99 690.175 L1506.55 690.175 L1507.11 690.175 L1507.67 690.175 L1508.23 690.175 L1508.79 690.175 L1509.35 690.175 L1509.91 690.175 L1510.47 690.175 L1511.03 690.175 L1511.59 690.175 L1512.15 690.175 L1512.71 690.175 L1513.26 690.175 L1513.82 690.175 L1514.38 690.175 L1514.94 690.175 L1515.5 690.175 L1516.06 690.175 L1516.62 690.175 L1517.18 690.175 L1517.74 690.175 L1518.3 690.175 L1518.86 690.175 L1519.42 690.175 L1519.98 690.175 L1520.53 690.175 L1521.09 690.175 L1521.65 690.175 L1522.21 690.175 L1522.77 690.175 L1523.33 690.175 L1523.89 690.175 L1524.45 690.175 L1525.01 690.175 L1525.57 690.175 L1526.13 690.175 L1526.69 690.175 L1527.25 690.175 L1527.81 690.175 L1528.36 690.175 L1528.92 690.175 L1529.48 690.175 L1530.04 690.175 L1530.6 690.175 L1531.16 690.175 L1531.72 690.175 L1532.28 690.175 L1532.84 690.175 L1533.4 690.175 L1533.96 690.175 L1534.52 690.175 L1535.08 690.175 L1535.63 690.175 L1536.19 690.175 L1536.75 690.175 L1537.31 690.175 L1537.87 690.175 L1538.43 690.175 L1538.99 690.175 L1539.55 690.175 L1540.11 690.175 L1540.67 690.175 L1541.23 690.175 L1541.79 690.175 L1542.35 690.175 L1542.9 690.175 L1543.46 690.175 L1544.02 690.175 L1544.58 690.175 L1545.14 690.175 L1545.7 690.175 L1546.26 690.175 L1546.82 690.175 L1547.38 690.175 L1547.94 690.175 L1548.5 690.175 L1549.06 690.175 L1549.62 690.175 L1550.18 690.175 L1550.73 690.175 L1551.29 690.175 L1551.85 690.175 L1552.41 690.175 L1552.97 690.175 L1553.53 690.175 L1554.09 690.175 L1554.65 690.175 L1555.21 690.175 L1555.77 690.175 L1556.33 690.175 L1556.89 690.175 L1557.45 690.175 L1558 690.175 L1558.56 690.175 L1559.12 690.175 L1559.68 690.175 L1560.24 690.175 L1560.8 690.175 L1561.36 690.175 L1561.92 690.175 L1562.48 690.175 L1563.04 690.175 L1563.6 690.175 L1564.16 690.175 L1564.72 690.175 L1565.28 690.175 L1565.83 690.175 L1566.39 690.175 L1566.95 690.175 L1567.51 690.175 L1568.07 690.175 L1568.63 690.175 L1569.19 690.175 L1569.75 690.175 L1570.31 690.175 L1570.87 690.175 L1571.43 690.175 L1571.99 690.175 L1572.55 690.175 L1573.1 690.175 L1573.66 690.175 L1574.22 690.175 L1574.78 690.175 L1575.34 690.175 L1575.9 690.175 L1576.46 690.175 L1577.02 690.175 L1577.58 690.175 L1578.14 690.175 L1578.7 690.175 L1579.26 690.175 L1579.82 690.175 L1580.37 690.175 L1580.93 690.175 L1581.49 690.175 L1582.05 690.175 L1582.61 690.175 L1583.17 690.175 L1583.73 690.175 L1584.29 690.175 L1584.85 690.175 L1585.41 690.175 L1585.97 690.175 L1586.53 690.175 L1587.09 690.175 L1587.65 690.175 L1588.2 690.175 L1588.76 690.175 L1589.32 690.175 L1589.88 690.175 L1590.44 690.175 L1591 690.175 L1591.56 690.175 L1592.12 690.175 L1592.68 690.175 L1593.24 690.175 L1593.8 690.175 L1594.36 690.175 L1594.92 690.175 L1595.47 690.175 L1596.03 690.175 L1596.59 690.175 L1597.15 690.175 L1597.71 690.175 L1598.27 690.175 L1598.83 690.175 L1599.39 690.175 L1599.95 690.175 L1600.51 690.175 L1601.07 690.175 L1601.63 690.175 L1602.19 690.175 L1602.74 690.175 L1603.3 690.175 L1603.86 690.175 L1604.42 690.175 L1604.98 690.175 L1605.54 690.175 L1606.1 690.175 L1606.66 690.175 L1607.22 690.175 L1607.78 690.175 L1608.34 690.175 L1608.9 690.175 L1609.46 690.175 L1610.02 690.175 L1610.57 690.175 L1611.13 690.175 L1611.69 690.175 L1612.25 690.175 L1612.81 690.175 L1613.37 690.175 L1613.93 690.175 L1614.49 690.175 L1615.05 690.175 L1615.61 690.175 L1616.17 690.175 L1616.73 690.175 L1617.29 690.175 L1617.84 690.175 L1618.4 690.175 L1618.96 690.175 L1619.52 690.175 L1620.08 690.175 L1620.64 690.175 L1621.2 690.175 L1621.76 690.175 L1622.32 690.175 L1622.88 690.175 L1623.44 690.175 L1624 690.175 L1624.56 690.175 L1625.11 690.175 L1625.67 690.175 L1626.23 690.175 L1626.79 690.175 L1627.35 690.175 L1627.91 690.175 L1628.47 690.175 L1629.03 690.175 L1629.59 690.175 L1630.15 690.175 L1630.71 690.175 L1631.27 690.175 L1631.83 690.175 L1632.39 690.175 L1632.94 690.175 L1633.5 690.175 L1634.06 690.175 L1634.62 690.175 L1635.18 690.175 L1635.74 690.175 L1636.3 690.175 L1636.86 690.175 L1637.42 690.175 L1637.98 690.175 L1638.54 690.175 L1639.1 690.175 L1639.66 690.175 L1640.21 690.175 L1640.77 690.175 L1641.33 690.175 L1641.89 690.175 L1642.45 690.175 L1643.01 690.175 L1643.57 690.175 L1644.13 690.175 L1644.69 690.175 L1645.25 690.175 L1645.81 690.175 L1646.37 690.175 L1646.93 690.175 L1647.48 690.175 L1648.04 690.175 L1648.6 690.175 L1649.16 690.175 L1649.72 690.175 L1650.28 690.175 L1650.84 690.175 L1651.4 690.175 L1651.96 690.175 L1652.52 690.175 L1653.08 690.175 L1653.64 690.175 L1654.2 690.175 L1654.76 690.175 L1655.31 690.175 L1655.87 690.175 L1656.43 690.175 L1656.99 690.175 L1657.55 690.175 L1658.11 690.175 L1658.67 690.175 L1659.23 690.175 L1659.79 690.175 L1660.35 690.175 L1660.91 690.175 L1661.47 690.175 L1662.03 690.175 L1662.58 690.175 L1663.14 690.175 L1663.7 690.175 L1664.26 690.175 L1664.82 690.175 L1665.38 690.175 L1665.94 690.175 L1666.5 690.175 L1667.06 690.175 L1667.62 690.175 L1668.18 690.175 L1668.74 690.175 L1669.3 690.175 L1669.85 690.175 L1670.41 690.175 L1670.97 690.175 L1671.53 690.175 L1672.09 690.175 L1672.65 690.175 L1673.21 690.175 L1673.77 690.175 L1674.33 690.175 L1674.89 690.175 L1675.45 690.175 L1676.01 690.175 L1676.57 690.175 L1677.13 690.175 L1677.68 690.175 L1678.24 690.175 L1678.8 690.175 L1679.36 690.175 L1679.92 690.175 L1680.48 690.175 L1681.04 690.175 L1681.6 690.175 L1682.16 690.175 L1682.72 690.175 L1683.28 690.175 L1683.84 690.175 L1684.4 690.175 L1684.95 690.175 L1685.51 690.175 L1686.07 690.175 L1686.63 690.175 L1687.19 690.175 L1687.75 690.175 L1688.31 690.175 L1688.87 690.175 L1689.43 690.175 L1689.99 690.175 L1690.55 690.175 L1691.11 690.175 L1691.67 690.175 L1692.23 690.175 L1692.78 690.175 L1693.34 690.175 L1693.9 690.175 L1694.46 690.175 L1695.02 690.175 L1695.58 690.175 L1696.14 690.175 L1696.7 690.175 L1697.26 690.175 L1697.82 690.175 L1698.38 690.175 L1698.94 690.175 L1699.5 690.175 L1700.05 690.175 L1700.61 690.175 L1701.17 690.175 L1701.73 690.175 L1702.29 690.175 L1702.85 690.175 L1703.41 690.175 L1703.97 690.175 L1704.53 690.175 L1705.09 690.175 L1705.65 690.175 L1706.21 690.175 L1706.77 690.175 L1707.32 690.175 L1707.88 690.175 L1708.44 690.175 L1709 690.175 L1709.56 690.175 L1710.12 690.175 L1710.68 690.175 L1711.24 690.175 L1711.8 690.175 L1712.36 690.175 L1712.92 690.175 L1713.48 690.175 L1714.04 690.175 L1714.6 690.175 L1715.15 690.175 L1715.71 690.175 L1716.27 690.175 L1716.83 690.175 L1717.39 690.175 L1717.95 690.175 L1718.51 690.175 L1719.07 690.175 L1719.63 690.175 L1720.19 690.175 L1720.75 690.175 L1721.31 690.175 L1721.87 690.175 L1722.42 690.175 L1722.98 690.175 L1723.54 690.175 L1724.1 690.175 L1724.66 690.175 L1725.22 690.175 L1725.78 690.175 L1726.34 690.175 L1726.9 690.175 L1727.46 690.175 L1728.02 690.175 L1728.58 690.175 L1729.14 690.175 L1729.69 690.175 L1730.25 690.175 L1730.81 690.175 L1731.37 690.175 L1731.93 690.175 L1732.49 690.175 L1733.05 690.175 L1733.61 690.175 L1734.17 690.175 L1734.73 690.175 L1735.29 690.175 L1735.85 690.175 L1736.41 690.175 L1736.97 690.175 L1737.52 690.175 L1738.08 690.175 L1738.64 690.175 L1739.2 690.175 L1739.76 690.175 L1740.32 690.175 L1740.88 690.175 L1741.44 690.175 L1742 690.175 L1742.56 690.175 L1743.12 690.175 L1743.68 690.175 L1744.24 690.175 L1744.79 690.175 L1745.35 690.175 L1745.91 690.175 L1746.47 690.175 L1747.03 690.175 L1747.59 690.175 L1748.15 690.175 L1748.71 690.175 L1749.27 690.175 L1749.83 690.175 L1750.39 690.175 L1750.95 690.175 L1751.51 690.175 L1752.06 690.175 L1752.62 690.175 L1753.18 690.175 L1753.74 690.175 L1754.3 690.175 L1754.86 690.175 L1755.42 690.175 L1755.98 690.175 L1756.54 690.175 L1757.1 690.175 L1757.66 690.175 L1758.22 690.175 L1758.78 690.175 L1759.34 690.175 L1759.89 690.175 L1760.45 690.175 L1761.01 690.175 L1761.57 690.175 L1762.13 690.175 L1762.69 690.175 L1763.25 690.175 L1763.81 690.175 L1764.37 690.175 L1764.93 690.175 L1765.49 690.175 L1766.05 690.175 L1766.61 690.175 L1767.16 690.175 L1767.72 690.175 L1768.28 690.175 L1768.84 690.175 L1769.4 690.175 L1769.96 690.175 L1770.52 690.175 L1771.08 690.175 L1771.64 690.175 L1772.2 690.175 L1772.76 690.175 L1773.32 690.175 L1773.88 690.175 L1774.43 690.175 L1774.99 690.175 L1775.55 690.175 L1776.11 690.175 L1776.67 690.175 L1777.23 690.175 L1777.79 690.175 L1778.35 690.175 L1778.91 690.175 L1779.47 690.175 L1780.03 690.175 L1780.59 690.175 L1781.15 690.175 L1781.71 690.175 L1782.26 690.175 L1782.82 690.175 L1783.38 690.175 L1783.94 690.175 L1784.5 690.175 L1785.06 690.175 L1785.62 690.175 L1786.18 690.175 L1786.74 690.175 L1787.3 690.175 L1787.86 690.175 L1788.42 690.175 L1788.98 690.175 L1789.53 690.175 L1790.09 690.175 L1790.65 690.175 L1791.21 690.175 L1791.77 690.175 L1792.33 690.175 L1792.89 690.175 L1793.45 690.175 L1794.01 690.175 L1794.57 690.175 L1795.13 690.175 L1795.69 690.175 L1796.25 690.175 L1796.8 690.175 L1797.36 690.175 L1797.92 690.175 L1798.48 690.175 L1799.04 690.175 L1799.6 690.175 L1800.16 690.175 L1800.72 690.175 L1801.28 690.175 L1801.84 690.175 L1802.4 690.175 L1802.96 690.175 L1803.52 690.175 L1804.08 690.175 L1804.63 690.175 L1805.19 690.175 L1805.75 690.175 L1806.31 690.175 L1806.87 690.175 L1807.43 690.175 L1807.99 690.175 L1808.55 690.175 L1809.11 690.175 L1809.67 690.175 L1810.23 690.175 L1810.79 690.175 L1811.35 690.175 L1811.9 690.175 L1812.46 690.175 L1813.02 690.175 L1813.58 690.175 L1814.14 690.175 L1814.7 690.175 L1815.26 690.175 L1815.82 690.175 L1816.38 690.175 L1816.94 690.175 L1817.5 690.175 L1818.06 690.175 L1818.62 690.175 L1819.18 690.175 L1819.73 690.175 L1820.29 690.175 L1820.85 690.175 L1821.41 690.175 L1821.97 690.175 L1822.53 690.175 L1823.09 690.175 L1823.65 690.175 L1824.21 690.175 L1824.77 690.175 L1825.33 690.175 L1825.89 690.175 L1826.45 690.175 L1827 690.175 L1827.56 690.175 L1828.12 690.175 L1828.68 690.175 L1829.24 690.175 L1829.8 690.175 L1830.36 690.175 L1830.92 690.175 L1831.48 690.175 L1832.04 690.175 L1832.6 690.175 L1833.16 690.175 L1833.72 690.175 L1834.27 690.175 L1834.83 690.175 L1835.39 690.175 L1835.95 690.175 L1836.51 690.175 L1837.07 690.175 L1837.63 690.175 L1838.19 690.175 L1838.19 682.038 L1837.63 682.038 L1837.07 682.038 L1836.51 682.038 L1835.95 682.038 L1835.39 682.038 L1834.83 682.038 L1834.27 682.038 L1833.72 682.038 L1833.16 682.038 L1832.6 682.038 L1832.04 682.038 L1831.48 682.038 L1830.92 682.038 L1830.36 682.038 L1829.8 682.038 L1829.24 682.038 L1828.68 682.038 L1828.12 682.038 L1827.56 682.038 L1827 682.038 L1826.45 682.038 L1825.89 682.038 L1825.33 682.038 L1824.77 682.038 L1824.21 682.038 L1823.65 682.038 L1823.09 682.038 L1822.53 682.038 L1821.97 682.038 L1821.41 682.038 L1820.85 682.038 L1820.29 682.038 L1819.73 682.038 L1819.18 682.038 L1818.62 682.038 L1818.06 682.038 L1817.5 682.038 L1816.94 682.038 L1816.38 682.038 L1815.82 682.038 L1815.26 682.038 L1814.7 682.038 L1814.14 682.038 L1813.58 682.038 L1813.02 682.038 L1812.46 682.038 L1811.9 682.038 L1811.35 682.038 L1810.79 682.038 L1810.23 682.038 L1809.67 682.038 L1809.11 682.038 L1808.55 682.038 L1807.99 682.038 L1807.43 682.038 L1806.87 682.038 L1806.31 682.038 L1805.75 682.038 L1805.19 682.038 L1804.63 682.038 L1804.08 682.038 L1803.52 682.038 L1802.96 682.038 L1802.4 682.038 L1801.84 682.038 L1801.28 682.038 L1800.72 682.038 L1800.16 682.038 L1799.6 682.038 L1799.04 682.038 L1798.48 682.038 L1797.92 682.038 L1797.36 682.038 L1796.8 682.038 L1796.25 682.038 L1795.69 682.038 L1795.13 682.038 L1794.57 682.038 L1794.01 682.038 L1793.45 682.038 L1792.89 682.038 L1792.33 682.038 L1791.77 682.038 L1791.21 682.038 L1790.65 682.038 L1790.09 682.038 L1789.53 682.038 L1788.98 682.038 L1788.42 682.038 L1787.86 682.038 L1787.3 682.038 L1786.74 682.038 L1786.18 682.038 L1785.62 682.038 L1785.06 682.038 L1784.5 682.038 L1783.94 682.038 L1783.38 682.038 L1782.82 682.038 L1782.26 682.038 L1781.71 682.038 L1781.15 682.038 L1780.59 682.038 L1780.03 682.038 L1779.47 682.038 L1778.91 682.038 L1778.35 682.038 L1777.79 682.038 L1777.23 682.038 L1776.67 682.038 L1776.11 682.038 L1775.55 682.038 L1774.99 682.038 L1774.43 682.038 L1773.88 682.038 L1773.32 682.038 L1772.76 682.038 L1772.2 682.038 L1771.64 682.038 L1771.08 682.038 L1770.52 682.038 L1769.96 682.038 L1769.4 682.038 L1768.84 682.038 L1768.28 682.038 L1767.72 682.038 L1767.16 682.038 L1766.61 682.038 L1766.05 682.038 L1765.49 682.038 L1764.93 682.038 L1764.37 682.038 L1763.81 682.038 L1763.25 682.038 L1762.69 682.038 L1762.13 682.038 L1761.57 682.038 L1761.01 682.038 L1760.45 682.038 L1759.89 682.038 L1759.34 682.038 L1758.78 682.038 L1758.22 682.038 L1757.66 682.038 L1757.1 682.038 L1756.54 682.038 L1755.98 682.038 L1755.42 682.038 L1754.86 682.038 L1754.3 682.038 L1753.74 682.038 L1753.18 682.038 L1752.62 682.038 L1752.06 682.038 L1751.51 682.038 L1750.95 682.038 L1750.39 682.038 L1749.83 682.038 L1749.27 682.038 L1748.71 682.038 L1748.15 682.038 L1747.59 682.038 L1747.03 682.038 L1746.47 682.038 L1745.91 682.038 L1745.35 682.038 L1744.79 682.038 L1744.24 682.038 L1743.68 682.038 L1743.12 682.038 L1742.56 682.038 L1742 682.038 L1741.44 682.038 L1740.88 682.038 L1740.32 682.038 L1739.76 682.038 L1739.2 682.038 L1738.64 682.038 L1738.08 682.038 L1737.52 682.038 L1736.97 682.038 L1736.41 682.038 L1735.85 682.038 L1735.29 682.038 L1734.73 682.038 L1734.17 682.038 L1733.61 682.038 L1733.05 682.038 L1732.49 682.038 L1731.93 682.038 L1731.37 682.038 L1730.81 682.038 L1730.25 682.038 L1729.69 682.038 L1729.14 682.038 L1728.58 682.038 L1728.02 682.038 L1727.46 682.038 L1726.9 682.038 L1726.34 682.038 L1725.78 682.038 L1725.22 682.038 L1724.66 682.038 L1724.1 682.038 L1723.54 682.038 L1722.98 682.038 L1722.42 682.038 L1721.87 682.038 L1721.31 682.038 L1720.75 682.038 L1720.19 682.038 L1719.63 682.038 L1719.07 682.038 L1718.51 682.038 L1717.95 682.038 L1717.39 682.038 L1716.83 682.038 L1716.27 682.038 L1715.71 682.038 L1715.15 682.038 L1714.6 682.038 L1714.04 682.038 L1713.48 682.038 L1712.92 682.038 L1712.36 682.038 L1711.8 682.038 L1711.24 682.038 L1710.68 682.038 L1710.12 682.038 L1709.56 682.038 L1709 682.038 L1708.44 682.038 L1707.88 682.038 L1707.32 682.038 L1706.77 682.038 L1706.21 682.038 L1705.65 682.038 L1705.09 682.038 L1704.53 682.038 L1703.97 682.038 L1703.41 682.038 L1702.85 682.038 L1702.29 682.038 L1701.73 682.038 L1701.17 682.038 L1700.61 682.038 L1700.05 682.038 L1699.5 682.038 L1698.94 682.038 L1698.38 682.038 L1697.82 682.038 L1697.26 682.038 L1696.7 682.038 L1696.14 682.038 L1695.58 682.038 L1695.02 682.038 L1694.46 682.038 L1693.9 682.038 L1693.34 682.038 L1692.78 682.038 L1692.23 682.038 L1691.67 682.038 L1691.11 682.038 L1690.55 682.038 L1689.99 682.038 L1689.43 682.038 L1688.87 682.038 L1688.31 682.038 L1687.75 682.038 L1687.19 682.038 L1686.63 682.038 L1686.07 682.038 L1685.51 682.038 L1684.95 682.038 L1684.4 682.038 L1683.84 682.038 L1683.28 682.038 L1682.72 682.038 L1682.16 682.038 L1681.6 682.038 L1681.04 682.038 L1680.48 682.038 L1679.92 682.038 L1679.36 682.038 L1678.8 682.038 L1678.24 682.038 L1677.68 682.038 L1677.13 682.038 L1676.57 682.038 L1676.01 682.038 L1675.45 682.038 L1674.89 682.038 L1674.33 682.038 L1673.77 682.038 L1673.21 682.038 L1672.65 682.038 L1672.09 682.038 L1671.53 682.038 L1670.97 682.038 L1670.41 682.038 L1669.85 682.038 L1669.3 682.038 L1668.74 682.038 L1668.18 682.038 L1667.62 682.038 L1667.06 682.038 L1666.5 682.038 L1665.94 682.038 L1665.38 682.038 L1664.82 682.038 L1664.26 682.038 L1663.7 682.038 L1663.14 682.038 L1662.58 682.038 L1662.03 682.038 L1661.47 682.038 L1660.91 682.038 L1660.35 682.038 L1659.79 682.038 L1659.23 682.038 L1658.67 682.038 L1658.11 682.038 L1657.55 682.038 L1656.99 682.038 L1656.43 682.038 L1655.87 682.038 L1655.31 682.038 L1654.76 682.038 L1654.2 682.038 L1653.64 682.038 L1653.08 682.038 L1652.52 682.038 L1651.96 682.038 L1651.4 682.038 L1650.84 682.038 L1650.28 682.038 L1649.72 682.038 L1649.16 682.038 L1648.6 682.038 L1648.04 682.038 L1647.48 682.038 L1646.93 682.038 L1646.37 682.038 L1645.81 682.038 L1645.25 682.038 L1644.69 682.038 L1644.13 682.038 L1643.57 682.038 L1643.01 682.038 L1642.45 682.038 L1641.89 682.038 L1641.33 682.038 L1640.77 682.038 L1640.21 682.038 L1639.66 682.038 L1639.1 682.038 L1638.54 682.038 L1637.98 682.038 L1637.42 682.038 L1636.86 682.038 L1636.3 682.038 L1635.74 682.038 L1635.18 682.038 L1634.62 682.038 L1634.06 682.038 L1633.5 682.038 L1632.94 682.038 L1632.39 682.038 L1631.83 682.038 L1631.27 682.038 L1630.71 682.038 L1630.15 682.038 L1629.59 682.038 L1629.03 682.038 L1628.47 682.038 L1627.91 682.038 L1627.35 682.038 L1626.79 682.038 L1626.23 682.038 L1625.67 682.038 L1625.11 682.038 L1624.56 682.038 L1624 682.038 L1623.44 682.038 L1622.88 682.038 L1622.32 682.038 L1621.76 682.038 L1621.2 682.038 L1620.64 682.038 L1620.08 682.038 L1619.52 682.038 L1618.96 682.038 L1618.4 682.038 L1617.84 682.038 L1617.29 682.038 L1616.73 682.038 L1616.17 682.038 L1615.61 682.038 L1615.05 682.038 L1614.49 682.038 L1613.93 682.038 L1613.37 682.038 L1612.81 682.038 L1612.25 682.038 L1611.69 682.038 L1611.13 682.038 L1610.57 682.038 L1610.02 682.038 L1609.46 682.038 L1608.9 682.038 L1608.34 682.038 L1607.78 682.038 L1607.22 682.038 L1606.66 682.038 L1606.1 682.038 L1605.54 682.038 L1604.98 682.038 L1604.42 682.038 L1603.86 682.038 L1603.3 682.038 L1602.74 682.038 L1602.19 682.038 L1601.63 682.038 L1601.07 682.038 L1600.51 682.038 L1599.95 682.038 L1599.39 682.038 L1598.83 682.038 L1598.27 682.038 L1597.71 682.038 L1597.15 682.038 L1596.59 682.038 L1596.03 682.038 L1595.47 682.038 L1594.92 682.038 L1594.36 682.038 L1593.8 682.038 L1593.24 682.038 L1592.68 682.038 L1592.12 682.038 L1591.56 682.038 L1591 682.038 L1590.44 682.038 L1589.88 682.038 L1589.32 682.038 L1588.76 682.038 L1588.2 682.038 L1587.65 682.038 L1587.09 682.038 L1586.53 682.038 L1585.97 682.038 L1585.41 682.038 L1584.85 682.038 L1584.29 682.038 L1583.73 682.038 L1583.17 682.038 L1582.61 682.038 L1582.05 682.038 L1581.49 682.038 L1580.93 682.038 L1580.37 682.038 L1579.82 682.038 L1579.26 682.038 L1578.7 682.038 L1578.14 682.038 L1577.58 682.038 L1577.02 682.038 L1576.46 682.038 L1575.9 682.038 L1575.34 682.038 L1574.78 682.038 L1574.22 682.038 L1573.66 682.038 L1573.1 682.038 L1572.55 682.038 L1571.99 682.038 L1571.43 682.038 L1570.87 682.038 L1570.31 682.038 L1569.75 682.038 L1569.19 682.038 L1568.63 682.038 L1568.07 682.038 L1567.51 682.038 L1566.95 682.038 L1566.39 682.038 L1565.83 682.038 L1565.28 682.038 L1564.72 682.038 L1564.16 682.038 L1563.6 682.038 L1563.04 682.038 L1562.48 682.038 L1561.92 682.038 L1561.36 682.038 L1560.8 682.038 L1560.24 682.038 L1559.68 682.038 L1559.12 682.038 L1558.56 682.038 L1558 682.038 L1557.45 682.038 L1556.89 682.038 L1556.33 682.038 L1555.77 682.038 L1555.21 682.038 L1554.65 682.038 L1554.09 682.038 L1553.53 682.038 L1552.97 682.038 L1552.41 682.038 L1551.85 682.038 L1551.29 682.038 L1550.73 682.038 L1550.18 682.038 L1549.62 682.038 L1549.06 682.038 L1548.5 682.038 L1547.94 682.038 L1547.38 682.038 L1546.82 682.038 L1546.26 682.038 L1545.7 682.038 L1545.14 682.038 L1544.58 682.038 L1544.02 682.038 L1543.46 682.038 L1542.9 682.038 L1542.35 682.038 L1541.79 682.038 L1541.23 682.038 L1540.67 682.038 L1540.11 682.038 L1539.55 682.038 L1538.99 682.038 L1538.43 682.038 L1537.87 682.038 L1537.31 682.038 L1536.75 682.038 L1536.19 682.038 L1535.63 682.038 L1535.08 682.038 L1534.52 682.038 L1533.96 682.038 L1533.4 682.038 L1532.84 682.038 L1532.28 682.038 L1531.72 682.038 L1531.16 682.038 L1530.6 682.038 L1530.04 682.038 L1529.48 682.038 L1528.92 682.038 L1528.36 682.038 L1527.81 682.038 L1527.25 682.038 L1526.69 682.038 L1526.13 682.038 L1525.57 682.038 L1525.01 682.038 L1524.45 682.038 L1523.89 682.038 L1523.33 682.038 L1522.77 682.038 L1522.21 682.038 L1521.65 682.038 L1521.09 682.038 L1520.53 682.038 L1519.98 682.038 L1519.42 682.038 L1518.86 682.038 L1518.3 682.038 L1517.74 682.038 L1517.18 682.038 L1516.62 682.038 L1516.06 682.038 L1515.5 682.038 L1514.94 682.038 L1514.38 682.038 L1513.82 682.038 L1513.26 682.038 L1512.71 682.038 L1512.15 682.038 L1511.59 682.038 L1511.03 682.038 L1510.47 682.038 L1509.91 682.038 L1509.35 682.038 L1508.79 682.038 L1508.23 682.038 L1507.67 682.038 L1507.11 682.038 L1506.55 682.038 L1505.99 682.038 L1505.44 682.038 L1504.88 682.038 L1504.32 682.038 L1503.76 682.038 L1503.2 682.038 L1502.64 682.038 L1502.08 682.038 L1501.52 682.038 L1500.96 682.038 L1500.4 682.038 L1499.84 682.038 L1499.28 682.038 L1498.72 682.038 L1498.16 682.038 L1497.61 682.038 L1497.05 682.038 L1496.49 682.038 L1495.93 682.038 L1495.37 682.038 L1494.81 682.038 L1494.25 682.038 L1493.69 682.038 L1493.13 682.038 L1492.57 682.038 L1492.01 682.038 L1491.45 682.038 L1490.89 682.038 L1490.34 682.038 L1489.78 682.038 L1489.22 682.038 L1488.66 682.038 L1488.1 682.038 L1487.54 682.038 L1486.98 682.038 L1486.42 682.038 L1485.86 682.038 L1485.3 682.038 L1484.74 682.038 L1484.18 682.038 L1483.62 682.038 L1483.07 682.038 L1482.51 682.038 L1481.95 682.038 L1481.39 682.038 L1480.83 682.038 L1480.27 682.038 L1479.71 682.038 L1479.15 682.038 L1478.59 682.038 L1478.03 682.038 L1477.47 682.038 L1476.91 682.038 L1476.35 682.038 L1475.79 682.038 L1475.24 682.038 L1474.68 682.038 L1474.12 682.038 L1473.56 682.038 L1473 682.038 L1472.44 682.038 L1471.88 682.038 L1471.32 682.038 L1470.76 682.038 L1470.2 682.038 L1469.64 682.038 L1469.08 682.038 L1468.52 682.038 L1467.97 682.038 L1467.41 682.038 L1466.85 682.038 L1466.29 682.038 L1465.73 682.038 L1465.17 682.038 L1464.61 682.038 L1464.05 682.038 L1463.49 682.038 L1462.93 682.038 L1462.37 682.038 L1461.81 682.038 L1461.25 682.038 L1460.7 682.038 L1460.14 682.038 L1459.58 682.038 L1459.02 682.038 L1458.46 682.038 L1457.9 682.038 L1457.34 682.038 L1456.78 682.038 L1456.22 682.038 L1455.66 682.038 L1455.1 682.038 L1454.54 682.038 L1453.98 682.038 L1453.42 682.038 L1452.87 682.038 L1452.31 682.038 L1451.75 682.038 L1451.19 682.038 L1450.63 682.038 L1450.07 682.038 L1449.51 682.038 L1448.95 682.038 L1448.39 682.038 L1447.83 682.038 L1447.27 682.038 L1446.71 682.038 L1446.15 682.038 L1445.6 682.038 L1445.04 682.038 L1444.48 682.038 L1443.92 682.038 L1443.36 682.038 L1442.8 682.038 L1442.24 682.038 L1441.68 682.038 L1441.12 682.038 L1440.56 682.038 L1440 682.038 L1439.44 682.038 L1438.88 682.038 L1438.33 682.038 L1437.77 682.038 L1437.21 682.038 L1436.65 682.038 L1436.09 682.038 L1435.53 682.038 L1434.97 682.038 L1434.41 682.038 L1433.85 682.038 L1433.29 682.038 L1432.73 682.038 L1432.17 682.038 L1431.61 682.038 L1431.05 682.038 L1430.5 682.038 L1429.94 682.038 L1429.38 682.038 L1428.82 682.038 L1428.26 682.038 L1427.7 682.038 L1427.14 682.038 L1426.58 682.038 L1426.02 682.038 L1425.46 682.038 L1424.9 682.038 L1424.34 682.038 L1423.78 682.038 L1423.23 682.038 L1422.67 682.038 L1422.11 682.038 L1421.55 682.038 L1420.99 682.038 L1420.43 682.038 L1419.87 682.038 L1419.31 682.038 L1418.75 682.038 L1418.19 682.038 L1417.63 682.038 L1417.07 682.038 L1416.51 682.038 L1415.95 682.038 L1415.4 682.038 L1414.84 682.038 L1414.28 682.038 L1413.72 682.038 L1413.16 682.038 L1412.6 682.038 L1412.04 682.038 L1411.48 682.038 L1410.92 682.038 L1410.36 682.038 L1409.8 682.038 L1409.24 682.038 L1408.68 682.038 L1408.13 682.038 L1407.57 682.038 L1407.01 682.038 L1406.45 682.038 L1405.89 682.038 L1405.33 682.038 L1404.77 682.038 L1404.21 682.038 L1403.65 682.038 L1403.09 682.038 L1402.53 682.038 L1401.97 682.038 L1401.41 682.038 L1400.86 682.038 L1400.3 682.038 L1399.74 682.038 L1399.18 682.038 L1398.62 682.038 L1398.06 682.038 L1397.5 682.038 L1396.94 682.038 L1396.38 682.038 L1395.82 682.038 L1395.26 682.038 L1394.7 682.038 L1394.14 682.038 L1393.58 682.038 L1393.03 682.038 L1392.47 682.038 L1391.91 682.038 L1391.35 682.038 L1390.79 682.038 L1390.23 682.038 L1389.67 682.038 L1389.11 682.038 L1388.55 682.038 L1387.99 682.038 L1387.43 682.038 L1386.87 682.038 L1386.31 682.038 L1385.76 682.038 L1385.2 682.038 L1384.64 682.038 L1384.08 682.038 L1383.52 682.038 L1382.96 682.038 L1382.4 682.038 L1381.84 682.038 L1381.28 682.038 L1380.72 682.038 L1380.16 682.038 L1379.6 682.038 L1379.04 682.038 L1378.49 682.038 L1377.93 682.038 L1377.37 682.038 L1376.81 682.038 L1376.25 682.038 L1375.69 682.038 L1375.13 682.038 L1374.57 682.038 L1374.01 682.038 L1373.45 682.038 L1372.89 682.038 L1372.33 682.038 L1371.77 682.038 L1371.21 682.038 L1370.66 682.038 L1370.1 682.038 L1369.54 682.038 L1368.98 682.038 L1368.42 682.038 L1367.86 682.038 L1367.3 682.038 L1366.74 682.038 L1366.18 682.038 L1365.62 682.038 L1365.06 682.038 L1364.5 682.038 L1363.94 682.038 L1363.39 682.038 L1362.83 682.038 L1362.27 682.038 L1361.71 682.038 L1361.15 682.038 L1360.59 682.038 L1360.03 682.038 L1359.47 682.038 L1358.91 682.038 L1358.35 682.038 L1357.79 682.038 L1357.23 682.038 L1356.67 682.038 L1356.12 682.038 L1355.56 682.038 L1355 682.038 L1354.44 682.038 L1353.88 682.038 L1353.32 682.038 L1352.76 682.038 L1352.2 682.038 L1351.64 682.038 L1351.08 682.038 L1350.52 682.038 L1349.96 682.038 L1349.4 682.038 L1348.84 682.038 L1348.29 682.038 L1347.73 682.038 L1347.17 682.038 L1346.61 682.038 L1346.05 682.038 L1345.49 682.038 L1344.93 682.038 L1344.37 682.038 L1343.81 682.038 L1343.25 682.038 L1342.69 682.038 L1342.13 682.038 L1341.57 682.038 L1341.02 682.038 L1340.46 682.038 L1339.9 682.038 L1339.34 682.038 L1338.78 682.038 L1338.22 682.038 L1337.66 682.038 L1337.1 682.038 L1336.54 682.038 L1335.98 682.038 L1335.42 682.038 L1334.86 682.038 L1334.3 682.038 L1333.75 682.038 L1333.19 682.038 L1332.63 682.038 L1332.07 682.038 L1331.51 682.038 L1330.95 682.038 L1330.39 682.038 L1329.83 682.038 L1329.27 682.038 L1328.71 682.038 L1328.15 682.038 L1327.59 682.038 L1327.03 682.038 L1326.47 682.038 L1325.92 682.038 L1325.36 682.038 L1324.8 682.038 L1324.24 682.038 L1323.68 682.038 L1323.12 682.038 L1322.56 682.038 L1322 682.038 L1321.44 682.038 L1320.88 682.038 L1320.32 682.038 L1319.76 682.038 L1319.2 682.038 L1318.65 682.038 L1318.09 682.038 L1317.53 682.038 L1316.97 682.038 L1316.41 682.038 L1315.85 682.038 L1315.29 682.038 L1314.73 682.038 L1314.17 682.038 L1313.61 682.038 L1313.05 682.038 L1312.49 682.038 L1311.93 682.038 L1311.38 682.038 L1310.82 682.038 L1310.26 682.038 L1309.7 682.038 L1309.14 682.038 L1308.58 682.038 L1308.02 682.038 L1307.46 682.038 L1306.9 682.038 L1306.34 682.038 L1305.78 682.038 L1305.22 682.038 L1304.66 682.038 L1304.1 682.038 L1303.55 682.038 L1302.99 682.038 L1302.43 682.038 L1301.87 682.038 L1301.31 682.038 L1300.75 682.038 L1300.19 682.038 L1299.63 682.038 L1299.07 682.038 L1298.51 682.038 L1297.95 682.038 L1297.39 682.038 L1296.83 682.038 L1296.28 682.038 L1295.72 682.038 L1295.16 682.038 L1294.6 682.038 L1294.04 682.038 L1293.48 682.038 L1292.92 682.038 L1292.36 682.038 L1291.8 682.038 L1291.24 682.038 L1290.68 682.038 L1290.12 682.038 L1289.56 682.038 L1289 682.038 L1288.45 682.038 L1287.89 682.038 L1287.33 682.038 L1286.77 682.038 L1286.21 682.038 L1285.65 682.038 L1285.09 682.038 L1284.53 682.038 L1283.97 682.038 L1283.41 682.038 L1282.85 682.038 L1282.29 682.038 L1281.73 682.038 L1281.18 682.038 L1280.62 682.038 L1280.06 682.038 L1279.5 682.038 L1278.94 682.038 L1278.38 682.038 L1277.82 682.038 L1277.26 682.038 L1276.7 682.038 L1276.14 682.038 L1275.58 682.038 L1275.02 682.038 L1274.46 682.038 L1273.91 682.038 L1273.35 682.038 L1272.79 682.038 L1272.23 682.038 L1271.67 682.038 L1271.11 682.038 L1270.55 682.038 L1269.99 682.038 L1269.43 682.038 L1268.87 682.038 L1268.31 682.038 L1267.75 682.038 L1267.19 682.038 L1266.63 682.038 L1266.08 682.038 L1265.52 682.038 L1264.96 682.038 L1264.4 682.038 L1263.84 682.038 L1263.28 682.038 L1262.72 682.038 L1262.16 682.038 L1261.6 682.038 L1261.04 682.038 L1260.48 682.038 L1259.92 682.038 L1259.36 682.038 L1258.81 682.038 L1258.25 682.038 L1257.69 682.038 L1257.13 682.038 L1256.57 682.038 L1256.01 682.038 L1255.45 682.038 L1254.89 682.038 L1254.33 682.038 L1253.77 682.038 L1253.21 682.038 L1252.65 682.038 L1252.09 682.038 L1251.54 682.038 L1250.98 682.038 L1250.42 682.038 L1249.86 682.038 L1249.3 682.038 L1248.74 682.038 L1248.18 682.038 L1247.62 682.038 L1247.06 682.038 L1246.5 682.038 L1245.94 682.038 L1245.38 682.038 L1244.82 682.038 L1244.26 682.038 L1243.71 682.038 L1243.15 682.038 L1242.59 682.038 L1242.03 682.038 L1241.47 682.038 L1240.91 682.038 L1240.35 682.038 L1239.79 682.038 L1239.23 682.038 L1238.67 682.038 L1238.11 682.038 L1237.55 682.038 L1236.99 682.038 L1236.44 682.038 L1235.88 682.038 L1235.32 682.038 L1234.76 682.038 L1234.2 682.038 L1233.64 682.038 L1233.08 682.038 L1232.52 682.038 L1231.96 682.038 L1231.4 682.038 L1230.84 682.038 L1230.28 682.038 L1229.72 682.038 L1229.17 682.038 L1228.61 682.038 L1228.05 682.038 L1227.49 682.038 L1226.93 682.038 L1226.37 682.038 L1225.81 682.038 L1225.25 682.038 L1224.69 682.038 L1224.13 682.038 L1223.57 682.038 L1223.01 682.038 L1222.45 682.038 L1221.89 682.038 L1221.34 682.038 L1220.78 682.038 L1220.22 682.038 L1219.66 682.038 L1219.1 682.038 L1218.54 682.038 L1217.98 682.038 L1217.42 682.038 L1216.86 682.038 L1216.3 682.038 L1215.74 682.038 L1215.18 682.038 L1214.62 682.038 L1214.07 682.038 L1213.51 682.038 L1212.95 682.038 L1212.39 682.038 L1211.83 682.038 L1211.27 682.038 L1210.71 682.038 L1210.15 682.038 L1209.59 682.038 L1209.03 682.038 L1208.47 682.038 L1207.91 682.038 L1207.35 682.038 L1206.8 682.038 L1206.24 682.038 L1205.68 682.038 L1205.12 682.038 L1204.56 682.038 L1204 682.038 L1203.44 682.038 L1202.88 682.038 L1202.32 682.038 L1201.76 682.038 L1201.2 682.038 L1200.64 682.038 L1200.08 682.038 L1199.52 682.038 L1198.97 682.038 L1198.41 682.038 L1197.85 682.038 L1197.29 682.038 L1196.73 682.038 L1196.17 682.038 L1195.61 682.038 L1195.05 682.038 L1194.49 682.038 L1193.93 682.038 L1193.37 682.038 L1192.81 682.038 L1192.25 682.038 L1191.7 682.038 L1191.14 682.038 L1190.58 682.038 L1190.02 682.038 L1189.46 682.038 L1188.9 682.038 L1188.34 682.038 L1187.78 682.038 L1187.22 682.038 L1186.66 682.038 L1186.1 682.038 L1185.54 682.038 L1184.98 682.038 L1184.43 682.038 L1183.87 682.038 L1183.31 682.038 L1182.75 682.038 L1182.19 682.038 L1181.63 682.038 L1181.07 682.038 L1180.51 682.038 L1179.95 682.038 L1179.39 682.038 L1178.83 682.038 L1178.27 682.038 L1177.71 682.038 L1177.15 682.038 L1176.6 682.038 L1176.04 682.038 L1175.48 682.038 L1174.92 682.038 L1174.36 682.038 L1173.8 682.038 L1173.24 682.038 L1172.68 682.038 L1172.12 682.038 L1171.56 682.038 L1171 682.038 L1170.44 682.038 L1169.88 682.038 L1169.33 682.038 L1168.77 682.038 L1168.21 682.038 L1167.65 682.038 L1167.09 682.038 L1166.53 682.038 L1165.97 682.038 L1165.41 682.038 L1164.85 682.038 L1164.29 682.038 L1163.73 682.038 L1163.17 682.038 L1162.61 682.038 L1162.05 682.038 L1161.5 682.038 L1160.94 682.038 L1160.38 682.038 L1159.82 682.038 L1159.26 682.038 L1158.7 682.038 L1158.14 682.038 L1157.58 682.038 L1157.02 682.038 L1156.46 682.038 L1155.9 682.038 L1155.34 682.038 L1154.78 682.038 L1154.23 682.038 L1153.67 682.038 L1153.11 682.038 L1152.55 682.038 L1151.99 682.038 L1151.43 682.038 L1150.87 682.038 L1150.31 682.038 L1149.75 682.038 L1149.19 682.038 L1148.63 682.038 L1148.07 682.038 L1147.51 682.038 L1146.96 682.038 L1146.4 682.038 L1145.84 682.038 L1145.28 682.038 L1144.72 682.038 L1144.16 682.038 L1143.6 682.038 L1143.04 682.038 L1142.48 682.038 L1141.92 682.038 L1141.36 682.038 L1140.8 682.038 L1140.24 682.038 L1139.68 682.038 L1139.13 682.038 L1138.57 682.038 L1138.01 682.038 L1137.45 682.038 L1136.89 682.038 L1136.33 682.038 L1135.77 682.038 L1135.21 682.038 L1134.65 682.038 L1134.09 682.038 L1133.53 682.038 L1132.97 682.038 L1132.41 682.038 L1131.86 682.038 L1131.3 682.038 L1130.74 682.038 L1130.18 682.038 L1129.62 682.038 L1129.06 682.038 L1128.5 682.038 L1127.94 682.038 L1127.38 682.038 L1126.82 682.038 L1126.26 682.038 L1125.7 682.038 L1125.14 682.038 L1124.59 682.038 L1124.03 682.038 L1123.47 682.038 L1122.91 682.038 L1122.35 682.038 L1121.79 682.038 L1121.23 682.038 L1120.67 682.038 L1120.11 682.038 L1119.55 682.038 L1118.99 682.038 L1118.43 682.038 L1117.87 682.038 L1117.31 682.038 L1116.76 682.038 L1116.2 682.038 L1115.64 682.038 L1115.08 682.038 L1114.52 682.038 L1113.96 682.038 L1113.4 682.038 L1112.84 682.038 L1112.28 682.038 L1111.72 682.038 L1111.16 682.038 L1110.6 682.038 L1110.04 682.038 L1109.49 682.038 L1108.93 682.038 L1108.37 682.038 L1107.81 682.038 L1107.25 682.038 L1106.69 682.038 L1106.13 682.038 L1105.57 682.038 L1105.01 682.038 L1104.45 682.038 L1103.89 682.038 L1103.33 682.038 L1102.77 682.038 L1102.22 682.038 L1101.66 682.038 L1101.1 682.038 L1100.54 682.038 L1099.98 682.038 L1099.42 682.038 L1098.86 682.038 L1098.3 682.038 L1097.74 682.038 L1097.18 682.038 L1096.62 682.038 L1096.06 682.038 L1095.5 682.038 L1094.94 682.038 L1094.39 682.038 L1093.83 682.038 L1093.27 682.038 L1092.71 682.038 L1092.15 682.038 L1091.59 682.038 L1091.03 682.038 L1090.47 682.038 L1089.91 682.038 L1089.35 682.038 L1088.79 682.038 L1088.23 682.038 L1087.67 682.038 L1087.12 682.038 L1086.56 682.038 L1086 682.038 L1085.44 682.038 L1084.88 682.038 L1084.32 682.038 L1083.76 682.038 L1083.2 682.038 L1082.64 682.038 L1082.08 682.038 L1081.52 682.038 L1080.96 682.038 L1080.4 682.038 L1079.85 682.038 L1079.29 682.038 L1078.73 682.038 L1078.17 682.038 L1077.61 682.038 L1077.05 682.038 L1076.49 682.038 L1075.93 682.038 L1075.37 682.038 L1074.81 682.038 L1074.25 682.038 L1073.69 682.038 L1073.13 682.038 L1072.57 682.038 L1072.02 682.038 L1071.46 682.038 L1070.9 682.038 L1070.34 682.038 L1069.78 682.038 L1069.22 682.038 L1068.66 682.038 L1068.1 682.038 L1067.54 682.038 L1066.98 682.038 L1066.42 682.038 L1065.86 682.038 L1065.3 682.038 L1064.75 682.038 L1064.19 682.038 L1063.63 682.038 L1063.07 682.038 L1062.51 682.038 L1061.95 682.038 L1061.39 682.038 L1060.83 682.038 L1060.27 682.038 L1059.71 682.038 L1059.15 682.038 L1058.59 682.038 L1058.03 682.038 L1057.48 682.038 L1056.92 682.038 L1056.36 682.038 L1055.8 682.038 L1055.24 682.038 L1054.68 682.038 L1054.12 682.038 L1053.56 682.038 L1053 682.038 L1052.44 682.038 L1051.88 682.038 L1051.32 682.038 L1050.76 682.038 L1050.2 682.038 L1049.65 682.038 L1049.09 682.038 L1048.53 682.038 L1047.97 682.038 L1047.41 682.038 L1046.85 682.038 L1046.29 682.038 L1045.73 682.038 L1045.17 682.038 L1044.61 682.038 L1044.05 682.038 L1043.49 682.038 L1042.93 682.038 L1042.38 682.038 L1041.82 682.038 L1041.26 682.038 L1040.7 682.038 L1040.14 682.038 L1039.58 682.038 L1039.02 682.038 L1038.46 682.038 L1037.9 682.038 L1037.34 682.038 L1036.78 682.038 L1036.22 682.038 L1035.66 682.038 L1035.1 682.038 L1034.55 682.038 L1033.99 682.038 L1033.43 682.038 L1032.87 682.038 L1032.31 682.038 L1031.75 682.038 L1031.19 682.038 L1030.63 682.038 L1030.07 682.038 L1029.51 682.038 L1028.95 682.038 L1028.39 682.038 L1027.83 682.038 L1027.28 682.038 L1026.72 682.038 L1026.16 682.038 L1025.6 682.038 L1025.04 682.038 L1024.48 682.038 L1023.92 682.038 L1023.36 682.038 L1022.8 682.038 L1022.24 682.038 L1021.68 682.038 L1021.12 682.038 L1020.56 682.038 L1020.01 682.038 L1019.45 682.038 L1018.89 682.038 L1018.33 682.038 L1017.77 682.038 L1017.21 682.038 L1016.65 682.038 L1016.09 682.038 L1015.53 682.038 L1014.97 682.038 L1014.41 682.038 L1013.85 682.038 L1013.29 682.038 L1012.73 682.038 L1012.18 682.038 L1011.62 682.038 L1011.06 682.038 L1010.5 682.038 L1009.94 682.038 L1009.38 682.038 L1008.82 682.038 L1008.26 682.038 L1007.7 682.038 L1007.14 682.038 L1006.58 682.038 L1006.02 682.038 L1005.46 682.038 L1004.91 682.038 L1004.35 682.038 L1003.79 682.038 L1003.23 682.038 L1002.67 682.038 L1002.11 682.038 L1001.55 682.038 L1000.99 682.038 L1000.43 682.038 L999.872 682.038 L999.313 682.038 L998.754 682.038 L998.194 682.038 L997.635 682.038 L997.076 682.038 L996.517 682.038 L995.957 682.038 L995.398 682.038 L994.839 682.038 L994.28 682.038 L993.72 682.038 L993.161 682.038 L992.602 682.038 L992.043 682.038 L991.483 682.038 L990.924 682.038 L990.365 682.038 L989.806 682.038 L989.246 682.038 L988.687 682.038 L988.128 682.038 L987.569 682.038 L987.009 682.038 L986.45 682.038 L985.891 682.038 L985.332 682.038 L984.772 682.038 L984.213 682.038 L983.654 682.038 L983.095 682.038 L982.535 682.038 L981.976 682.038 L981.417 682.038 L980.858 682.038 L980.298 682.038 L979.739 682.038 L979.18 682.038 L978.621 682.038 L978.061 682.038 L977.502 682.038 L976.943 682.038 L976.384 682.038 L975.824 682.038 L975.265 682.038 L974.706 682.038 L974.147 682.038 L973.587 682.038 L973.028 682.038 L972.469 682.038 L971.91 682.038 L971.35 682.038 L970.791 682.038 L970.232 682.038 L969.673 682.038 L969.113 682.038 L968.554 682.038 L967.995 682.038 L967.436 682.038 L966.876 682.038 L966.317 682.038 L965.758 682.038 L965.199 682.038 L964.639 682.038 L964.08 682.038 L963.521 682.038 L962.962 682.038 L962.402 682.038 L961.843 682.038 L961.284 682.038 L960.725 682.038 L960.165 682.038 L959.606 682.038 L959.047 682.038 L958.488 682.038 L957.928 682.038 L957.369 682.038 L956.81 682.038 L956.251 682.038 L955.691 682.038 L955.132 682.038 L954.573 682.038 L954.014 682.038 L953.454 682.038 L952.895 682.038 L952.336 682.038 L951.777 682.038 L951.217 682.038 L950.658 682.038 L950.099 682.038 L949.54 682.038 L948.98 682.038 L948.421 682.038 L947.862 682.038 L947.303 682.038 L946.743 682.038 L946.184 682.038 L945.625 682.038 L945.066 682.038 L944.506 682.038 L943.947 682.038 L943.388 682.038 L942.829 682.038 L942.269 682.038 L941.71 682.038 L941.151 682.038 L940.592 682.038 L940.032 682.038 L939.473 682.038 L938.914 682.038 L938.355 682.038 L937.795 682.038 L937.236 682.038 L936.677 682.038 L936.118 682.038 L935.558 682.038 L934.999 682.038 L934.44 682.038 L933.881 682.038 L933.321 682.038 L932.762 682.038 L932.203 682.038 L931.644 682.038 L931.084 682.038 L930.525 682.038 L929.966 682.038 L929.406 682.038 L928.847 682.038 L928.288 682.038 L927.729 682.038 L927.169 682.038 L926.61 682.038 L926.051 682.038 L925.492 682.038 L924.932 682.038 L924.373 682.038 L923.814 682.038 L923.255 682.038 L922.695 682.038 L922.136 682.038 L921.577 682.038 L921.018 682.038 L920.458 682.038 L919.899 682.038 L919.34 682.038 L918.781 682.038 L918.221 682.038 L917.662 682.038 L917.103 682.038 L916.544 682.038 L915.984 682.038 L915.425 682.038 L914.866 682.038 L914.307 682.038 L913.747 682.038 L913.188 682.038 L912.629 682.038 L912.07 682.038 L911.51 682.038 L910.951 682.038 L910.392 682.038 L909.833 682.038 L909.273 682.038 L908.714 682.038 L908.155 682.038 L907.596 682.038 L907.036 682.038 L906.477 682.038 L905.918 682.038 L905.359 682.038 L904.799 682.038 L904.24 682.038 L903.681 682.038 L903.122 682.038 L902.562 682.038 L902.003 682.038 L901.444 682.038 L900.885 682.038 L900.325 682.038 L899.766 682.038 L899.207 682.038 L898.648 682.038 L898.088 682.038 L897.529 682.038 L896.97 682.038 L896.411 682.038 L895.851 682.038 L895.292 682.038 L894.733 682.038 L894.174 682.038 L893.614 682.038 L893.055 682.038 L892.496 682.038 L891.937 682.038 L891.377 682.038 L890.818 682.038 L890.259 682.038 L889.7 682.038 L889.14 682.038 L888.581 682.038 L888.022 682.038 L887.463 682.038 L886.903 682.038 L886.344 682.038 L885.785 682.038 L885.226 682.038 L884.666 682.038 L884.107 682.038 L883.548 682.038 L882.989 682.038 L882.429 682.038 L881.87 682.038 L881.311 682.038 L880.752 682.038 L880.192 682.038 L879.633 682.038 L879.074 682.038 L878.515 682.038 L877.955 682.038 L877.396 682.038 L876.837 682.038 L876.278 682.038 L875.718 682.038 L875.159 682.038 L874.6 682.038 L874.041 682.038 L873.481 682.038 L872.922 682.038 L872.363 682.038 L871.804 682.038 L871.244 682.038 L870.685 682.038 L870.126 682.038 L869.567 682.038 L869.007 682.038 L868.448 682.038 L867.889 682.038 L867.33 682.038 L866.77 682.038 L866.211 682.038 L865.652 682.038 L865.093 682.038 L864.533 682.038 L863.974 682.038 L863.415 682.038 L862.856 682.038 L862.296 682.038 L861.737 682.038 L861.178 682.038 L860.619 682.038 L860.059 682.038 L859.5 682.038 L858.941 682.038 L858.382 682.038 L857.822 682.038 L857.263 682.038 L856.704 682.038 L856.145 682.038 L855.585 682.038 L855.026 682.038 L854.467 682.038 L853.908 682.038 L853.348 682.038 L852.789 682.038 L852.23 682.038 L851.671 682.038 L851.111 682.038 L850.552 682.038 L849.993 682.038 L849.434 682.038 L848.874 682.038 L848.315 682.038 L847.756 682.038 L847.197 682.038 L846.637 682.038 L846.078 682.038 L845.519 682.038 L844.96 682.038 L844.4 682.038 L843.841 682.038 L843.282 682.038 L842.723 682.038 L842.163 682.038 L841.604 682.038 L841.045 682.038 L840.486 682.038 L839.926 682.038 L839.367 682.038 L838.808 682.038 L838.249 682.038 L837.689 682.038 L837.13 682.038 L836.571 682.038 L836.012 682.038 L835.452 682.038 L834.893 682.038 L834.334 682.038 L833.775 682.038 L833.215 682.038 L832.656 682.038 L832.097 682.038 L831.538 682.038 L830.978 682.038 L830.419 682.038 L829.86 682.038 L829.301 682.038 L828.741 682.038 L828.182 682.038 L827.623 682.038 L827.064 682.038 L826.504 682.038 L825.945 682.038 L825.386 682.038 L824.827 682.038 L824.267 682.038 L823.708 682.038 L823.149 682.038 L822.59 682.038 L822.03 682.038 L821.471 682.038 L820.912 682.038 L820.353 682.038 L819.793 682.038 L819.234 682.038 L818.675 682.038 L818.116 682.038 L817.556 682.038 L816.997 682.038 L816.438 682.038 L815.879 682.038 L815.319 682.038 L814.76 682.038 L814.201 682.038 L813.642 682.038 L813.082 682.038 L812.523 682.038 L811.964 682.038 L811.405 682.038 L810.845 682.038 L810.286 682.038 L809.727 682.038 L809.168 682.038 L808.608 682.038 L808.049 682.038 L807.49 682.038 L806.931 682.038 L806.371 682.038 L805.812 682.038 L805.253 682.038 L804.693 682.038 L804.134 682.038 L803.575 682.038 L803.016 682.038 L802.456 682.038 L801.897 682.038 L801.338 682.038 L800.779 682.038 L800.219 682.038 L799.66 682.038 L799.101 682.038 L798.542 682.038 L797.982 682.038 L797.423 682.038 L796.864 682.038 L796.305 682.038 L795.745 682.038 L795.186 682.038 L794.627 682.038 L794.068 682.038 L793.508 682.038 L792.949 682.038 L792.39 682.038 L791.831 682.038 L791.271 682.038 L790.712 682.038 L790.153 682.038 L789.594 682.038 L789.034 682.038 L788.475 682.038 L787.916 682.038 L787.357 682.038 L786.797 682.038 L786.238 682.038 L785.679 682.038 L785.12 682.038 L784.56 682.038 L784.001 682.038 L783.442 682.038 L782.883 682.038 L782.323 682.038 L781.764 682.038 L781.205 682.038 L780.646 682.038 L780.086 682.038 L779.527 682.038 L778.968 682.038 L778.409 682.038 L777.849 682.038 L777.29 682.038 L776.731 682.038 L776.172 682.038 L775.612 682.038 L775.053 682.038 L774.494 682.038 L773.935 682.038 L773.375 682.038 L772.816 682.038 L772.257 682.038 L771.698 682.038 L771.138 682.038 L770.579 682.038 L770.02 682.038 L769.461 682.038 L768.901 682.038 L768.342 682.038 L767.783 682.038 L767.224 682.038 L766.664 682.038 L766.105 682.038 L765.546 682.038 L764.987 682.038 L764.427 682.038 L763.868 682.038 L763.309 682.038 L762.75 682.038 L762.19 682.038 L761.631 682.038 L761.072 682.038 L760.513 682.038 L759.953 682.038 L759.394 682.038 L758.835 682.038 L758.276 682.038 L757.716 682.038 L757.157 682.038 L756.598 682.038 L756.039 682.038 L755.479 682.038 L754.92 682.038 L754.361 682.038 L753.802 682.038 L753.242 682.038 L752.683 682.038 L752.124 682.038 L751.565 682.038 L751.005 682.038 L750.446 682.038 L749.887 682.038 L749.328 682.038 L748.768 682.038 L748.209 682.038 L747.65 682.038 L747.091 682.038 L746.531 682.038 L745.972 682.038 L745.413 682.038 L744.854 682.038 L744.294 682.038 L743.735 682.038 L743.176 682.038 L742.617 682.038 L742.057 682.038 L741.498 682.038 L740.939 682.038 L740.38 682.038 L739.82 682.038 L739.261 682.038 L738.702 682.038 L738.143 682.038 L737.583 682.038 L737.024 682.038 L736.465 682.038 L735.906 682.038 L735.346 682.038 L734.787 682.038 L734.228 682.038 L733.669 682.038 L733.109 682.038 L732.55 682.038 L731.991 682.038 L731.432 682.038 L730.872 682.038 L730.313 682.038 L729.754 682.038 L729.195 682.038 L728.635 682.038 L728.076 682.038 L727.517 682.038 L726.958 682.038 L726.398 682.038 L725.839 682.038 L725.28 682.038 L724.721 682.038 L724.161 682.038 L723.602 682.038 L723.043 682.038 L722.484 682.038 L721.924 682.038 L721.365 682.038 L720.806 682.038 L720.247 682.038  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.107 720.806,686.107 721.365,686.107 721.924,686.107 722.484,686.107 723.043,686.107 723.602,686.107 724.161,686.107 724.721,686.107 725.28,686.107 725.839,686.107 726.398,686.107 726.958,686.107 727.517,686.107 728.076,686.107 728.635,686.107 729.195,686.107 729.754,686.107 730.313,686.107 730.872,686.107 731.432,686.107 731.991,686.107 732.55,686.107 733.109,686.107 733.669,686.107 734.228,686.107 734.787,686.107 735.346,686.107 735.906,686.107 736.465,686.107 737.024,686.107 737.583,686.107 738.143,686.107 738.702,686.107 739.261,686.107 739.82,686.107 740.38,686.107 740.939,686.107 741.498,686.107 742.057,686.107 742.617,686.107 743.176,686.107 743.735,686.107 744.294,686.107 744.854,686.107 745.413,686.107 745.972,686.107 746.531,686.107 747.091,686.107 747.65,686.107 748.209,686.107 748.768,686.107 749.328,686.107 749.887,686.107 750.446,686.107 751.005,686.107 751.565,686.107 752.124,686.107 752.683,686.107 753.242,686.107 753.802,686.107 754.361,686.107 754.92,686.107 755.479,686.107 756.039,686.107 756.598,686.107 757.157,686.107 757.716,686.107 758.276,686.107 758.835,686.107 759.394,686.107 759.953,686.107 760.513,686.107 761.072,686.107 761.631,686.107 762.19,686.107 762.75,686.107 763.309,686.107 763.868,686.107 764.427,686.107 764.987,686.107 765.546,686.107 766.105,686.107 766.664,686.107 767.224,686.107 767.783,686.107 768.342,686.107 768.901,686.107 769.461,686.107 770.02,686.107 770.579,686.107 771.138,686.107 771.698,686.107 772.257,686.107 772.816,686.107 773.375,686.107 773.935,686.107 774.494,686.107 775.053,686.107 775.612,686.107 776.172,686.107 776.731,686.107 777.29,686.107 777.849,686.107 778.409,686.107 778.968,686.107 779.527,686.107 780.086,686.107 780.646,686.107 781.205,686.107 781.764,686.107 782.323,686.107 782.883,686.107 783.442,686.107 784.001,686.107 784.56,686.107 785.12,686.107 785.679,686.107 786.238,686.107 786.797,686.107 787.357,686.107 787.916,686.107 788.475,686.107 789.034,686.107 789.594,686.107 790.153,686.107 790.712,686.107 791.271,686.107 791.831,686.107 792.39,686.107 792.949,686.107 793.508,686.107 794.068,686.107 794.627,686.107 795.186,686.107 795.745,686.107 796.305,686.107 796.864,686.107 797.423,686.107 797.982,686.107 798.542,686.107 799.101,686.107 799.66,686.107 800.219,686.107 800.779,686.107 801.338,686.107 801.897,686.107 802.456,686.107 803.016,686.107 803.575,686.107 804.134,686.107 804.693,686.107 805.253,686.107 805.812,686.107 806.371,686.107 806.931,686.107 807.49,686.107 808.049,686.107 808.608,686.107 809.168,686.107 809.727,686.107 810.286,686.107 810.845,686.107 811.405,686.107 811.964,686.107 812.523,686.107 813.082,686.107 813.642,686.107 814.201,686.107 814.76,686.107 815.319,686.107 815.879,686.107 816.438,686.107 816.997,686.107 817.556,686.107 818.116,686.107 818.675,686.107 819.234,686.107 819.793,686.107 820.353,686.107 820.912,686.107 821.471,686.107 822.03,686.107 822.59,686.107 823.149,686.107 823.708,686.107 824.267,686.107 824.827,686.107 825.386,686.107 825.945,686.107 826.504,686.107 827.064,686.107 827.623,686.107 828.182,686.107 828.741,686.107 829.301,686.107 829.86,686.107 830.419,686.107 830.978,686.107 831.538,686.107 832.097,686.107 832.656,686.107 833.215,686.107 833.775,686.107 834.334,686.107 834.893,686.107 835.452,686.107 836.012,686.107 836.571,686.107 837.13,686.107 837.689,686.107 838.249,686.107 838.808,686.107 839.367,686.107 839.926,686.107 840.486,686.107 841.045,686.107 841.604,686.107 842.163,686.107 842.723,686.107 843.282,686.107 843.841,686.107 844.4,686.107 844.96,686.107 845.519,686.107 846.078,686.107 846.637,686.107 847.197,686.107 847.756,686.107 848.315,686.107 848.874,686.107 849.434,686.107 849.993,686.107 850.552,686.107 851.111,686.107 851.671,686.107 852.23,686.107 852.789,686.107 853.348,686.107 853.908,686.107 854.467,686.107 855.026,686.107 855.585,686.107 856.145,686.107 856.704,686.107 857.263,686.107 857.822,686.107 858.382,686.107 858.941,686.107 859.5,686.107 860.059,686.107 860.619,686.107 861.178,686.107 861.737,686.107 862.296,686.107 862.856,686.107 863.415,686.107 863.974,686.107 864.533,686.107 865.093,686.107 865.652,686.107 866.211,686.107 866.77,686.107 867.33,686.107 867.889,686.107 868.448,686.107 869.007,686.107 869.567,686.107 870.126,686.107 870.685,686.107 871.244,686.107 871.804,686.107 872.363,686.107 872.922,686.107 873.481,686.107 874.041,686.107 874.6,686.107 875.159,686.107 875.718,686.107 876.278,686.107 876.837,686.107 877.396,686.107 877.955,686.107 878.515,686.107 879.074,686.107 879.633,686.107 880.192,686.107 880.752,686.107 881.311,686.107 881.87,686.107 882.429,686.107 882.989,686.107 883.548,686.107 884.107,686.107 884.666,686.107 885.226,686.107 885.785,686.107 886.344,686.107 886.903,686.107 887.463,686.107 888.022,686.107 888.581,686.107 889.14,686.107 889.7,686.107 890.259,686.107 890.818,686.107 891.377,686.107 891.937,686.107 892.496,686.107 893.055,686.107 893.614,686.107 894.174,686.107 894.733,686.107 895.292,686.107 895.851,686.107 896.411,686.107 896.97,686.107 897.529,686.107 898.088,686.107 898.648,686.107 899.207,686.107 899.766,686.107 900.325,686.107 900.885,686.107 901.444,686.107 902.003,686.107 902.562,686.107 903.122,686.107 903.681,686.107 904.24,686.107 904.799,686.107 905.359,686.107 905.918,686.107 906.477,686.107 907.036,686.107 907.596,686.107 908.155,686.107 908.714,686.107 909.273,686.107 909.833,686.107 910.392,686.107 910.951,686.107 911.51,686.107 912.07,686.107 912.629,686.107 913.188,686.107 913.747,686.107 914.307,686.107 914.866,686.107 915.425,686.107 915.984,686.107 916.544,686.107 917.103,686.107 917.662,686.107 918.221,686.107 918.781,686.107 919.34,686.107 919.899,686.107 920.458,686.107 921.018,686.107 921.577,686.107 922.136,686.107 922.695,686.107 923.255,686.107 923.814,686.107 924.373,686.107 924.932,686.107 925.492,686.107 926.051,686.107 926.61,686.107 927.169,686.107 927.729,686.107 928.288,686.107 928.847,686.107 929.406,686.107 929.966,686.107 930.525,686.107 931.084,686.107 931.644,686.107 932.203,686.107 932.762,686.107 933.321,686.107 933.881,686.107 934.44,686.107 934.999,686.107 935.558,686.107 936.118,686.107 936.677,686.107 937.236,686.107 937.795,686.107 938.355,686.107 938.914,686.107 939.473,686.107 940.032,686.107 940.592,686.107 941.151,686.107 941.71,686.107 942.269,686.107 942.829,686.107 943.388,686.107 943.947,686.107 944.506,686.107 945.066,686.107 945.625,686.107 946.184,686.107 946.743,686.107 947.303,686.107 947.862,686.107 948.421,686.107 948.98,686.107 949.54,686.107 950.099,686.107 950.658,686.107 951.217,686.107 951.777,686.107 952.336,686.107 952.895,686.107 953.454,686.107 954.014,686.107 954.573,686.107 955.132,686.107 955.691,686.107 956.251,686.107 956.81,686.107 957.369,686.107 957.928,686.107 958.488,686.107 959.047,686.107 959.606,686.107 960.165,686.107 960.725,686.107 961.284,686.107 961.843,686.107 962.402,686.107 962.962,686.107 963.521,686.107 964.08,686.107 964.639,686.107 965.199,686.107 965.758,686.107 966.317,686.107 966.876,686.107 967.436,686.107 967.995,686.107 968.554,686.107 969.113,686.107 969.673,686.107 970.232,686.107 970.791,686.107 971.35,686.107 971.91,686.107 972.469,686.107 973.028,686.107 973.587,686.107 974.147,686.107 974.706,686.107 975.265,686.107 975.824,686.107 976.384,686.107 976.943,686.107 977.502,686.107 978.061,686.107 978.621,686.107 979.18,686.107 979.739,686.107 980.298,686.107 980.858,686.107 981.417,686.107 981.976,686.107 982.535,686.107 983.095,686.107 983.654,686.107 984.213,686.107 984.772,686.107 985.332,686.107 985.891,686.107 986.45,686.107 987.009,686.107 987.569,686.107 988.128,686.107 988.687,686.107 989.246,686.107 989.806,686.107 990.365,686.107 990.924,686.107 991.483,686.107 992.043,686.107 992.602,686.107 993.161,686.107 993.72,686.107 994.28,686.107 994.839,686.107 995.398,686.107 995.957,686.107 996.517,686.107 997.076,686.107 997.635,686.107 998.194,686.107 998.754,686.107 999.313,686.107 999.872,686.107 1000.43,686.107 1000.99,686.107 1001.55,686.107 1002.11,686.107 1002.67,686.107 1003.23,686.107 1003.79,686.107 1004.35,686.107 1004.91,686.107 1005.46,686.107 1006.02,686.107 1006.58,686.107 1007.14,686.107 1007.7,686.107 1008.26,686.107 1008.82,686.107 1009.38,686.107 1009.94,686.107 1010.5,686.107 1011.06,686.107 1011.62,686.107 1012.18,686.107 1012.73,686.107 1013.29,686.107 1013.85,686.107 1014.41,686.107 1014.97,686.107 1015.53,686.107 1016.09,686.107 1016.65,686.107 1017.21,686.107 1017.77,686.107 1018.33,686.107 1018.89,686.107 1019.45,686.107 1020.01,686.107 1020.56,686.107 1021.12,686.107 1021.68,686.107 1022.24,686.107 1022.8,686.107 1023.36,686.107 1023.92,686.107 1024.48,686.107 1025.04,686.107 1025.6,686.107 1026.16,686.107 1026.72,686.107 1027.28,686.107 1027.83,686.107 1028.39,686.107 1028.95,686.107 1029.51,686.107 1030.07,686.107 1030.63,686.107 1031.19,686.107 1031.75,686.107 1032.31,686.107 1032.87,686.107 1033.43,686.107 1033.99,686.107 1034.55,686.107 1035.1,686.107 1035.66,686.107 1036.22,686.107 1036.78,686.107 1037.34,686.107 1037.9,686.107 1038.46,686.107 1039.02,686.107 1039.58,686.107 1040.14,686.107 1040.7,686.107 1041.26,686.107 1041.82,686.107 1042.38,686.107 1042.93,686.107 1043.49,686.107 1044.05,686.107 1044.61,686.107 1045.17,686.107 1045.73,686.107 1046.29,686.107 1046.85,686.107 1047.41,686.107 1047.97,686.107 1048.53,686.107 1049.09,686.107 1049.65,686.107 1050.2,686.107 1050.76,686.107 1051.32,686.107 1051.88,686.107 1052.44,686.107 1053,686.107 1053.56,686.107 1054.12,686.107 1054.68,686.107 1055.24,686.107 1055.8,686.107 1056.36,686.107 1056.92,686.107 1057.48,686.107 1058.03,686.107 1058.59,686.107 1059.15,686.107 1059.71,686.107 1060.27,686.107 1060.83,686.107 1061.39,686.107 1061.95,686.107 1062.51,686.107 1063.07,686.107 1063.63,686.107 1064.19,686.107 1064.75,686.107 1065.3,686.107 1065.86,686.107 1066.42,686.107 1066.98,686.107 1067.54,686.107 1068.1,686.107 1068.66,686.107 1069.22,686.107 1069.78,686.107 1070.34,686.107 1070.9,686.107 1071.46,686.107 1072.02,686.107 1072.57,686.107 1073.13,686.107 1073.69,686.107 1074.25,686.107 1074.81,686.107 1075.37,686.107 1075.93,686.107 1076.49,686.107 1077.05,686.107 1077.61,686.107 1078.17,686.107 1078.73,686.107 1079.29,686.107 1079.85,686.107 1080.4,686.107 1080.96,686.107 1081.52,686.107 1082.08,686.107 1082.64,686.107 1083.2,686.107 1083.76,686.107 1084.32,686.107 1084.88,686.107 1085.44,686.107 1086,686.107 1086.56,686.107 1087.12,686.107 1087.67,686.107 1088.23,686.107 1088.79,686.107 1089.35,686.107 1089.91,686.107 1090.47,686.107 1091.03,686.107 1091.59,686.107 1092.15,686.107 1092.71,686.107 1093.27,686.107 1093.83,686.107 1094.39,686.107 1094.94,686.107 1095.5,686.107 1096.06,686.107 1096.62,686.107 1097.18,686.107 1097.74,686.107 1098.3,686.107 1098.86,686.107 1099.42,686.107 1099.98,686.107 1100.54,686.107 1101.1,686.107 1101.66,686.107 1102.22,686.107 1102.77,686.107 1103.33,686.107 1103.89,686.107 1104.45,686.107 1105.01,686.107 1105.57,686.107 1106.13,686.107 1106.69,686.107 1107.25,686.107 1107.81,686.107 1108.37,686.107 1108.93,686.107 1109.49,686.107 1110.04,686.107 1110.6,686.107 1111.16,686.107 1111.72,686.107 1112.28,686.107 1112.84,686.107 1113.4,686.107 1113.96,686.107 1114.52,686.107 1115.08,686.107 1115.64,686.107 1116.2,686.107 1116.76,686.107 1117.31,686.107 1117.87,686.107 1118.43,686.107 1118.99,686.107 1119.55,686.107 1120.11,686.107 1120.67,686.107 1121.23,686.107 1121.79,686.107 1122.35,686.107 1122.91,686.107 1123.47,686.107 1124.03,686.107 1124.59,686.107 1125.14,686.107 1125.7,686.107 1126.26,686.107 1126.82,686.107 1127.38,686.107 1127.94,686.107 1128.5,686.107 1129.06,686.107 1129.62,686.107 1130.18,686.107 1130.74,686.107 1131.3,686.107 1131.86,686.107 1132.41,686.107 1132.97,686.107 1133.53,686.107 1134.09,686.107 1134.65,686.107 1135.21,686.107 1135.77,686.107 1136.33,686.107 1136.89,686.107 1137.45,686.107 1138.01,686.107 1138.57,686.107 1139.13,686.107 1139.68,686.107 1140.24,686.107 1140.8,686.107 1141.36,686.107 1141.92,686.107 1142.48,686.107 1143.04,686.107 1143.6,686.107 1144.16,686.107 1144.72,686.107 1145.28,686.107 1145.84,686.107 1146.4,686.107 1146.96,686.107 1147.51,686.107 1148.07,686.107 1148.63,686.107 1149.19,686.107 1149.75,686.107 1150.31,686.107 1150.87,686.107 1151.43,686.107 1151.99,686.107 1152.55,686.107 1153.11,686.107 1153.67,686.107 1154.23,686.107 1154.78,686.107 1155.34,686.107 1155.9,686.107 1156.46,686.107 1157.02,686.107 1157.58,686.107 1158.14,686.107 1158.7,686.107 1159.26,686.107 1159.82,686.107 1160.38,686.107 1160.94,686.107 1161.5,686.107 1162.05,686.107 1162.61,686.107 1163.17,686.107 1163.73,686.107 1164.29,686.107 1164.85,686.107 1165.41,686.107 1165.97,686.107 1166.53,686.107 1167.09,686.107 1167.65,686.107 1168.21,686.107 1168.77,686.107 1169.33,686.107 1169.88,686.107 1170.44,686.107 1171,686.107 1171.56,686.107 1172.12,686.107 1172.68,686.107 1173.24,686.107 1173.8,686.107 1174.36,686.107 1174.92,686.107 1175.48,686.107 1176.04,686.107 1176.6,686.107 1177.15,686.107 1177.71,686.107 1178.27,686.107 1178.83,686.107 1179.39,686.107 1179.95,686.107 1180.51,686.107 1181.07,686.107 1181.63,686.107 1182.19,686.107 1182.75,686.107 1183.31,686.107 1183.87,686.107 1184.43,686.107 1184.98,686.107 1185.54,686.107 1186.1,686.107 1186.66,686.107 1187.22,686.107 1187.78,686.107 1188.34,686.107 1188.9,686.107 1189.46,686.107 1190.02,686.107 1190.58,686.107 1191.14,686.107 1191.7,686.107 1192.25,686.107 1192.81,686.107 1193.37,686.107 1193.93,686.107 1194.49,686.107 1195.05,686.107 1195.61,686.107 1196.17,686.107 1196.73,686.107 1197.29,686.107 1197.85,686.107 1198.41,686.107 1198.97,686.107 1199.52,686.107 1200.08,686.107 1200.64,686.107 1201.2,686.107 1201.76,686.107 1202.32,686.107 1202.88,686.107 1203.44,686.107 1204,686.107 1204.56,686.107 1205.12,686.107 1205.68,686.107 1206.24,686.107 1206.8,686.107 1207.35,686.107 1207.91,686.107 1208.47,686.107 1209.03,686.107 1209.59,686.107 1210.15,686.107 1210.71,686.107 1211.27,686.107 1211.83,686.107 1212.39,686.107 1212.95,686.107 1213.51,686.107 1214.07,686.107 1214.62,686.107 1215.18,686.107 1215.74,686.107 1216.3,686.107 1216.86,686.107 1217.42,686.107 1217.98,686.107 1218.54,686.107 1219.1,686.107 1219.66,686.107 1220.22,686.107 1220.78,686.107 1221.34,686.107 1221.89,686.107 1222.45,686.107 1223.01,686.107 1223.57,686.107 1224.13,686.107 1224.69,686.107 1225.25,686.107 1225.81,686.107 1226.37,686.107 1226.93,686.107 1227.49,686.107 1228.05,686.107 1228.61,686.107 1229.17,686.107 1229.72,686.107 1230.28,686.107 1230.84,686.107 1231.4,686.107 1231.96,686.107 1232.52,686.107 1233.08,686.107 1233.64,686.107 1234.2,686.107 1234.76,686.107 1235.32,686.107 1235.88,686.107 1236.44,686.107 1236.99,686.107 1237.55,686.107 1238.11,686.107 1238.67,686.107 1239.23,686.107 1239.79,686.107 1240.35,686.107 1240.91,686.107 1241.47,686.107 1242.03,686.107 1242.59,686.107 1243.15,686.107 1243.71,686.107 1244.26,686.107 1244.82,686.107 1245.38,686.107 1245.94,686.107 1246.5,686.107 1247.06,686.107 1247.62,686.107 1248.18,686.107 1248.74,686.107 1249.3,686.107 1249.86,686.107 1250.42,686.107 1250.98,686.107 1251.54,686.107 1252.09,686.107 1252.65,686.107 1253.21,686.107 1253.77,686.107 1254.33,686.107 1254.89,686.107 1255.45,686.107 1256.01,686.107 1256.57,686.107 1257.13,686.107 1257.69,686.107 1258.25,686.107 1258.81,686.107 1259.36,686.107 1259.92,686.107 1260.48,686.107 1261.04,686.107 1261.6,686.107 1262.16,686.107 1262.72,686.107 1263.28,686.107 1263.84,686.107 1264.4,686.107 1264.96,686.107 1265.52,686.107 1266.08,686.107 1266.63,686.107 1267.19,686.107 1267.75,686.107 1268.31,686.107 1268.87,686.107 1269.43,686.107 1269.99,686.107 1270.55,686.107 1271.11,686.107 1271.67,686.107 1272.23,686.107 1272.79,686.107 1273.35,686.107 1273.91,686.107 1274.46,686.107 1275.02,686.107 1275.58,686.107 1276.14,686.107 1276.7,686.107 1277.26,686.107 1277.82,686.107 1278.38,686.107 1278.94,686.107 1279.5,686.107 1280.06,686.107 1280.62,686.107 1281.18,686.107 1281.73,686.107 1282.29,686.107 1282.85,686.107 1283.41,686.107 1283.97,686.107 1284.53,686.107 1285.09,686.107 1285.65,686.107 1286.21,686.107 1286.77,686.107 1287.33,686.107 1287.89,686.107 1288.45,686.107 1289,686.107 1289.56,686.107 1290.12,686.107 1290.68,686.107 1291.24,686.107 1291.8,686.107 1292.36,686.107 1292.92,686.107 1293.48,686.107 1294.04,686.107 1294.6,686.107 1295.16,686.107 1295.72,686.107 1296.28,686.107 1296.83,686.107 1297.39,686.107 1297.95,686.107 1298.51,686.107 1299.07,686.107 1299.63,686.107 1300.19,686.107 1300.75,686.107 1301.31,686.107 1301.87,686.107 1302.43,686.107 1302.99,686.107 1303.55,686.107 1304.1,686.107 1304.66,686.107 1305.22,686.107 1305.78,686.107 1306.34,686.107 1306.9,686.107 1307.46,686.107 1308.02,686.107 1308.58,686.107 1309.14,686.107 1309.7,686.107 1310.26,686.107 1310.82,686.107 1311.38,686.107 1311.93,686.107 1312.49,686.107 1313.05,686.107 1313.61,686.107 1314.17,686.107 1314.73,686.107 1315.29,686.107 1315.85,686.107 1316.41,686.107 1316.97,686.107 1317.53,686.107 1318.09,686.107 1318.65,686.107 1319.2,686.107 1319.76,686.107 1320.32,686.107 1320.88,686.107 1321.44,686.107 1322,686.107 1322.56,686.107 1323.12,686.107 1323.68,686.107 1324.24,686.107 1324.8,686.107 1325.36,686.107 1325.92,686.107 1326.47,686.107 1327.03,686.107 1327.59,686.107 1328.15,686.107 1328.71,686.107 1329.27,686.107 1329.83,686.107 1330.39,686.107 1330.95,686.107 1331.51,686.107 1332.07,686.107 1332.63,686.107 1333.19,686.107 1333.75,686.107 1334.3,686.107 1334.86,686.107 1335.42,686.107 1335.98,686.107 1336.54,686.107 1337.1,686.107 1337.66,686.107 1338.22,686.107 1338.78,686.107 1339.34,686.107 1339.9,686.107 1340.46,686.107 1341.02,686.107 1341.57,686.107 1342.13,686.107 1342.69,686.107 1343.25,686.107 1343.81,686.107 1344.37,686.107 1344.93,686.107 1345.49,686.107 1346.05,686.107 1346.61,686.107 1347.17,686.107 1347.73,686.107 1348.29,686.107 1348.84,686.107 1349.4,686.107 1349.96,686.107 1350.52,686.107 1351.08,686.107 1351.64,686.107 1352.2,686.107 1352.76,686.107 1353.32,686.107 1353.88,686.107 1354.44,686.107 1355,686.107 1355.56,686.107 1356.12,686.107 1356.67,686.107 1357.23,686.107 1357.79,686.107 1358.35,686.107 1358.91,686.107 1359.47,686.107 1360.03,686.107 1360.59,686.107 1361.15,686.107 1361.71,686.107 1362.27,686.107 1362.83,686.107 1363.39,686.107 1363.94,686.107 1364.5,686.107 1365.06,686.107 1365.62,686.107 1366.18,686.107 1366.74,686.107 1367.3,686.107 1367.86,686.107 1368.42,686.107 1368.98,686.107 1369.54,686.107 1370.1,686.107 1370.66,686.107 1371.21,686.107 1371.77,686.107 1372.33,686.107 1372.89,686.107 1373.45,686.107 1374.01,686.107 1374.57,686.107 1375.13,686.107 1375.69,686.107 1376.25,686.107 1376.81,686.107 1377.37,686.107 1377.93,686.107 1378.49,686.107 1379.04,686.107 1379.6,686.107 1380.16,686.107 1380.72,686.107 1381.28,686.107 1381.84,686.107 1382.4,686.107 1382.96,686.107 1383.52,686.107 1384.08,686.107 1384.64,686.107 1385.2,686.107 1385.76,686.107 1386.31,686.107 1386.87,686.107 1387.43,686.107 1387.99,686.107 1388.55,686.107 1389.11,686.107 1389.67,686.107 1390.23,686.107 1390.79,686.107 1391.35,686.107 1391.91,686.107 1392.47,686.107 1393.03,686.107 1393.58,686.107 1394.14,686.107 1394.7,686.107 1395.26,686.107 1395.82,686.107 1396.38,686.107 1396.94,686.107 1397.5,686.107 1398.06,686.107 1398.62,686.107 1399.18,686.107 1399.74,686.107 1400.3,686.107 1400.86,686.107 1401.41,686.107 1401.97,686.107 1402.53,686.107 1403.09,686.107 1403.65,686.107 1404.21,686.107 1404.77,686.107 1405.33,686.107 1405.89,686.107 1406.45,686.107 1407.01,686.107 1407.57,686.107 1408.13,686.107 1408.68,686.107 1409.24,686.107 1409.8,686.107 1410.36,686.107 1410.92,686.107 1411.48,686.107 1412.04,686.107 1412.6,686.107 1413.16,686.107 1413.72,686.107 1414.28,686.107 1414.84,686.107 1415.4,686.107 1415.95,686.107 1416.51,686.107 1417.07,686.107 1417.63,686.107 1418.19,686.107 1418.75,686.107 1419.31,686.107 1419.87,686.107 1420.43,686.107 1420.99,686.107 1421.55,686.107 1422.11,686.107 1422.67,686.107 1423.23,686.107 1423.78,686.107 1424.34,686.107 1424.9,686.107 1425.46,686.107 1426.02,686.107 1426.58,686.107 1427.14,686.107 1427.7,686.107 1428.26,686.107 1428.82,686.107 1429.38,686.107 1429.94,686.107 1430.5,686.107 1431.05,686.107 1431.61,686.107 1432.17,686.107 1432.73,686.107 1433.29,686.107 1433.85,686.107 1434.41,686.107 1434.97,686.107 1435.53,686.107 1436.09,686.107 1436.65,686.107 1437.21,686.107 1437.77,686.107 1438.33,686.107 1438.88,686.107 1439.44,686.107 1440,686.107 1440.56,686.107 1441.12,686.107 1441.68,686.107 1442.24,686.107 1442.8,686.107 1443.36,686.107 1443.92,686.107 1444.48,686.107 1445.04,686.107 1445.6,686.107 1446.15,686.107 1446.71,686.107 1447.27,686.107 1447.83,686.107 1448.39,686.107 1448.95,686.107 1449.51,686.107 1450.07,686.107 1450.63,686.107 1451.19,686.107 1451.75,686.107 1452.31,686.107 1452.87,686.107 1453.42,686.107 1453.98,686.107 1454.54,686.107 1455.1,686.107 1455.66,686.107 1456.22,686.107 1456.78,686.107 1457.34,686.107 1457.9,686.107 1458.46,686.107 1459.02,686.107 1459.58,686.107 1460.14,686.107 1460.7,686.107 1461.25,686.107 1461.81,686.107 1462.37,686.107 1462.93,686.107 1463.49,686.107 1464.05,686.107 1464.61,686.107 1465.17,686.107 1465.73,686.107 1466.29,686.107 1466.85,686.107 1467.41,686.107 1467.97,686.107 1468.52,686.107 1469.08,686.107 1469.64,686.107 1470.2,686.107 1470.76,686.107 1471.32,686.107 1471.88,686.107 1472.44,686.107 1473,686.107 1473.56,686.107 1474.12,686.107 1474.68,686.107 1475.24,686.107 1475.79,686.107 1476.35,686.107 1476.91,686.107 1477.47,686.107 1478.03,686.107 1478.59,686.107 1479.15,686.107 1479.71,686.107 1480.27,686.107 1480.83,686.107 1481.39,686.107 1481.95,686.107 1482.51,686.107 1483.07,686.107 1483.62,686.107 1484.18,686.107 1484.74,686.107 1485.3,686.107 1485.86,686.107 1486.42,686.107 1486.98,686.107 1487.54,686.107 1488.1,686.107 1488.66,686.107 1489.22,686.107 1489.78,686.107 1490.34,686.107 1490.89,686.107 1491.45,686.107 1492.01,686.107 1492.57,686.107 1493.13,686.107 1493.69,686.107 1494.25,686.107 1494.81,686.107 1495.37,686.107 1495.93,686.107 1496.49,686.107 1497.05,686.107 1497.61,686.107 1498.16,686.107 1498.72,686.107 1499.28,686.107 1499.84,686.107 1500.4,686.107 1500.96,686.107 1501.52,686.107 1502.08,686.107 1502.64,686.107 1503.2,686.107 1503.76,686.107 1504.32,686.107 1504.88,686.107 1505.44,686.107 1505.99,686.107 1506.55,686.107 1507.11,686.107 1507.67,686.107 1508.23,686.107 1508.79,686.107 1509.35,686.107 1509.91,686.107 1510.47,686.107 1511.03,686.107 1511.59,686.107 1512.15,686.107 1512.71,686.107 1513.26,686.107 1513.82,686.107 1514.38,686.107 1514.94,686.107 1515.5,686.107 1516.06,686.107 1516.62,686.107 1517.18,686.107 1517.74,686.107 1518.3,686.107 1518.86,686.107 1519.42,686.107 1519.98,686.107 1520.53,686.107 1521.09,686.107 1521.65,686.107 1522.21,686.107 1522.77,686.107 1523.33,686.107 1523.89,686.107 1524.45,686.107 1525.01,686.107 1525.57,686.107 1526.13,686.107 1526.69,686.107 1527.25,686.107 1527.81,686.107 1528.36,686.107 1528.92,686.107 1529.48,686.107 1530.04,686.107 1530.6,686.107 1531.16,686.107 1531.72,686.107 1532.28,686.107 1532.84,686.107 1533.4,686.107 1533.96,686.107 1534.52,686.107 1535.08,686.107 1535.63,686.107 1536.19,686.107 1536.75,686.107 1537.31,686.107 1537.87,686.107 1538.43,686.107 1538.99,686.107 1539.55,686.107 1540.11,686.107 1540.67,686.107 1541.23,686.107 1541.79,686.107 1542.35,686.107 1542.9,686.107 1543.46,686.107 1544.02,686.107 1544.58,686.107 1545.14,686.107 1545.7,686.107 1546.26,686.107 1546.82,686.107 1547.38,686.107 1547.94,686.107 1548.5,686.107 1549.06,686.107 1549.62,686.107 1550.18,686.107 1550.73,686.107 1551.29,686.107 1551.85,686.107 1552.41,686.107 1552.97,686.107 1553.53,686.107 1554.09,686.107 1554.65,686.107 1555.21,686.107 1555.77,686.107 1556.33,686.107 1556.89,686.107 1557.45,686.107 1558,686.107 1558.56,686.107 1559.12,686.107 1559.68,686.107 1560.24,686.107 1560.8,686.107 1561.36,686.107 1561.92,686.107 1562.48,686.107 1563.04,686.107 1563.6,686.107 1564.16,686.107 1564.72,686.107 1565.28,686.107 1565.83,686.107 1566.39,686.107 1566.95,686.107 1567.51,686.107 1568.07,686.107 1568.63,686.107 1569.19,686.107 1569.75,686.107 1570.31,686.107 1570.87,686.107 1571.43,686.107 1571.99,686.107 1572.55,686.107 1573.1,686.107 1573.66,686.107 1574.22,686.107 1574.78,686.107 1575.34,686.107 1575.9,686.107 1576.46,686.107 1577.02,686.107 1577.58,686.107 1578.14,686.107 1578.7,686.107 1579.26,686.107 1579.82,686.107 1580.37,686.107 1580.93,686.107 1581.49,686.107 1582.05,686.107 1582.61,686.107 1583.17,686.107 1583.73,686.107 1584.29,686.107 1584.85,686.107 1585.41,686.107 1585.97,686.107 1586.53,686.107 1587.09,686.107 1587.65,686.107 1588.2,686.107 1588.76,686.107 1589.32,686.107 1589.88,686.107 1590.44,686.107 1591,686.107 1591.56,686.107 1592.12,686.107 1592.68,686.107 1593.24,686.107 1593.8,686.107 1594.36,686.107 1594.92,686.107 1595.47,686.107 1596.03,686.107 1596.59,686.107 1597.15,686.107 1597.71,686.107 1598.27,686.107 1598.83,686.107 1599.39,686.107 1599.95,686.107 1600.51,686.107 1601.07,686.107 1601.63,686.107 1602.19,686.107 1602.74,686.107 1603.3,686.107 1603.86,686.107 1604.42,686.107 1604.98,686.107 1605.54,686.107 1606.1,686.107 1606.66,686.107 1607.22,686.107 1607.78,686.107 1608.34,686.107 1608.9,686.107 1609.46,686.107 1610.02,686.107 1610.57,686.107 1611.13,686.107 1611.69,686.107 1612.25,686.107 1612.81,686.107 1613.37,686.107 1613.93,686.107 1614.49,686.107 1615.05,686.107 1615.61,686.107 1616.17,686.107 1616.73,686.107 1617.29,686.107 1617.84,686.107 1618.4,686.107 1618.96,686.107 1619.52,686.107 1620.08,686.107 1620.64,686.107 1621.2,686.107 1621.76,686.107 1622.32,686.107 1622.88,686.107 1623.44,686.107 1624,686.107 1624.56,686.107 1625.11,686.107 1625.67,686.107 1626.23,686.107 1626.79,686.107 1627.35,686.107 1627.91,686.107 1628.47,686.107 1629.03,686.107 1629.59,686.107 1630.15,686.107 1630.71,686.107 1631.27,686.107 1631.83,686.107 1632.39,686.107 1632.94,686.107 1633.5,686.107 1634.06,686.107 1634.62,686.107 1635.18,686.107 1635.74,686.107 1636.3,686.107 1636.86,686.107 1637.42,686.107 1637.98,686.107 1638.54,686.107 1639.1,686.107 1639.66,686.107 1640.21,686.107 1640.77,686.107 1641.33,686.107 1641.89,686.107 1642.45,686.107 1643.01,686.107 1643.57,686.107 1644.13,686.107 1644.69,686.107 1645.25,686.107 1645.81,686.107 1646.37,686.107 1646.93,686.107 1647.48,686.107 1648.04,686.107 1648.6,686.107 1649.16,686.107 1649.72,686.107 1650.28,686.107 1650.84,686.107 1651.4,686.107 1651.96,686.107 1652.52,686.107 1653.08,686.107 1653.64,686.107 1654.2,686.107 1654.76,686.107 1655.31,686.107 1655.87,686.107 1656.43,686.107 1656.99,686.107 1657.55,686.107 1658.11,686.107 1658.67,686.107 1659.23,686.107 1659.79,686.107 1660.35,686.107 1660.91,686.107 1661.47,686.107 1662.03,686.107 1662.58,686.107 1663.14,686.107 1663.7,686.107 1664.26,686.107 1664.82,686.107 1665.38,686.107 1665.94,686.107 1666.5,686.107 1667.06,686.107 1667.62,686.107 1668.18,686.107 1668.74,686.107 1669.3,686.107 1669.85,686.107 1670.41,686.107 1670.97,686.107 1671.53,686.107 1672.09,686.107 1672.65,686.107 1673.21,686.107 1673.77,686.107 1674.33,686.107 1674.89,686.107 1675.45,686.107 1676.01,686.107 1676.57,686.107 1677.13,686.107 1677.68,686.107 1678.24,686.107 1678.8,686.107 1679.36,686.107 1679.92,686.107 1680.48,686.107 1681.04,686.107 1681.6,686.107 1682.16,686.107 1682.72,686.107 1683.28,686.107 1683.84,686.107 1684.4,686.107 1684.95,686.107 1685.51,686.107 1686.07,686.107 1686.63,686.107 1687.19,686.107 1687.75,686.107 1688.31,686.107 1688.87,686.107 1689.43,686.107 1689.99,686.107 1690.55,686.107 1691.11,686.107 1691.67,686.107 1692.23,686.107 1692.78,686.107 1693.34,686.107 1693.9,686.107 1694.46,686.107 1695.02,686.107 1695.58,686.107 1696.14,686.107 1696.7,686.107 1697.26,686.107 1697.82,686.107 1698.38,686.107 1698.94,686.107 1699.5,686.107 1700.05,686.107 1700.61,686.107 1701.17,686.107 1701.73,686.107 1702.29,686.107 1702.85,686.107 1703.41,686.107 1703.97,686.107 1704.53,686.107 1705.09,686.107 1705.65,686.107 1706.21,686.107 1706.77,686.107 1707.32,686.107 1707.88,686.107 1708.44,686.107 1709,686.107 1709.56,686.107 1710.12,686.107 1710.68,686.107 1711.24,686.107 1711.8,686.107 1712.36,686.107 1712.92,686.107 1713.48,686.107 1714.04,686.107 1714.6,686.107 1715.15,686.107 1715.71,686.107 1716.27,686.107 1716.83,686.107 1717.39,686.107 1717.95,686.107 1718.51,686.107 1719.07,686.107 1719.63,686.107 1720.19,686.107 1720.75,686.107 1721.31,686.107 1721.87,686.107 1722.42,686.107 1722.98,686.107 1723.54,686.107 1724.1,686.107 1724.66,686.107 1725.22,686.107 1725.78,686.107 1726.34,686.107 1726.9,686.107 1727.46,686.107 1728.02,686.107 1728.58,686.107 1729.14,686.107 1729.69,686.107 1730.25,686.107 1730.81,686.107 1731.37,686.107 1731.93,686.107 1732.49,686.107 1733.05,686.107 1733.61,686.107 1734.17,686.107 1734.73,686.107 1735.29,686.107 1735.85,686.107 1736.41,686.107 1736.97,686.107 1737.52,686.107 1738.08,686.107 1738.64,686.107 1739.2,686.107 1739.76,686.107 1740.32,686.107 1740.88,686.107 1741.44,686.107 1742,686.107 1742.56,686.107 1743.12,686.107 1743.68,686.107 1744.24,686.107 1744.79,686.107 1745.35,686.107 1745.91,686.107 1746.47,686.107 1747.03,686.107 1747.59,686.107 1748.15,686.107 1748.71,686.107 1749.27,686.107 1749.83,686.107 1750.39,686.107 1750.95,686.107 1751.51,686.107 1752.06,686.107 1752.62,686.107 1753.18,686.107 1753.74,686.107 1754.3,686.107 1754.86,686.107 1755.42,686.107 1755.98,686.107 1756.54,686.107 1757.1,686.107 1757.66,686.107 1758.22,686.107 1758.78,686.107 1759.34,686.107 1759.89,686.107 1760.45,686.107 1761.01,686.107 1761.57,686.107 1762.13,686.107 1762.69,686.107 1763.25,686.107 1763.81,686.107 1764.37,686.107 1764.93,686.107 1765.49,686.107 1766.05,686.107 1766.61,686.107 1767.16,686.107 1767.72,686.107 1768.28,686.107 1768.84,686.107 1769.4,686.107 1769.96,686.107 1770.52,686.107 1771.08,686.107 1771.64,686.107 1772.2,686.107 1772.76,686.107 1773.32,686.107 1773.88,686.107 1774.43,686.107 1774.99,686.107 1775.55,686.107 1776.11,686.107 1776.67,686.107 1777.23,686.107 1777.79,686.107 1778.35,686.107 1778.91,686.107 1779.47,686.107 1780.03,686.107 1780.59,686.107 1781.15,686.107 1781.71,686.107 1782.26,686.107 1782.82,686.107 1783.38,686.107 1783.94,686.107 1784.5,686.107 1785.06,686.107 1785.62,686.107 1786.18,686.107 1786.74,686.107 1787.3,686.107 1787.86,686.107 1788.42,686.107 1788.98,686.107 1789.53,686.107 1790.09,686.107 1790.65,686.107 1791.21,686.107 1791.77,686.107 1792.33,686.107 1792.89,686.107 1793.45,686.107 1794.01,686.107 1794.57,686.107 1795.13,686.107 1795.69,686.107 1796.25,686.107 1796.8,686.107 1797.36,686.107 1797.92,686.107 1798.48,686.107 1799.04,686.107 1799.6,686.107 1800.16,686.107 1800.72,686.107 1801.28,686.107 1801.84,686.107 1802.4,686.107 1802.96,686.107 1803.52,686.107 1804.08,686.107 1804.63,686.107 1805.19,686.107 1805.75,686.107 1806.31,686.107 1806.87,686.107 1807.43,686.107 1807.99,686.107 1808.55,686.107 1809.11,686.107 1809.67,686.107 1810.23,686.107 1810.79,686.107 1811.35,686.107 1811.9,686.107 1812.46,686.107 1813.02,686.107 1813.58,686.107 1814.14,686.107 1814.7,686.107 1815.26,686.107 1815.82,686.107 1816.38,686.107 1816.94,686.107 1817.5,686.107 1818.06,686.107 1818.62,686.107 1819.18,686.107 1819.73,686.107 1820.29,686.107 1820.85,686.107 1821.41,686.107 1821.97,686.107 1822.53,686.107 1823.09,686.107 1823.65,686.107 1824.21,686.107 1824.77,686.107 1825.33,686.107 1825.89,686.107 1826.45,686.107 1827,686.107 1827.56,686.107 1828.12,686.107 1828.68,686.107 1829.24,686.107 1829.8,686.107 1830.36,686.107 1830.92,686.107 1831.48,686.107 1832.04,686.107 1832.6,686.107 1833.16,686.107 1833.72,686.107 1834.27,686.107 1834.83,686.107 1835.39,686.107 1835.95,686.107 1836.51,686.107 1837.07,686.107 1837.63,686.107 1838.19,686.107 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 685.073 L720.806 685.073 L721.365 685.073 L721.924 685.073 L722.484 685.073 L723.043 685.073 L723.602 685.073 L724.161 685.073 L724.721 685.073 L725.28 685.073 L725.839 685.073 L726.398 685.073 L726.958 685.073 L727.517 685.073 L728.076 685.073 L728.635 685.073 L729.195 685.073 L729.754 685.073 L730.313 685.073 L730.872 685.073 L731.432 685.073 L731.991 685.073 L732.55 685.073 L733.109 685.073 L733.669 685.073 L734.228 685.073 L734.787 685.073 L735.346 685.073 L735.906 685.073 L736.465 685.073 L737.024 685.073 L737.583 685.073 L738.143 685.073 L738.702 685.073 L739.261 685.073 L739.82 685.073 L740.38 685.073 L740.939 685.073 L741.498 685.073 L742.057 685.073 L742.617 685.073 L743.176 685.073 L743.735 685.073 L744.294 685.073 L744.854 685.073 L745.413 685.073 L745.972 685.073 L746.531 685.073 L747.091 685.073 L747.65 685.073 L748.209 685.073 L748.768 685.073 L749.328 685.073 L749.887 685.073 L750.446 685.073 L751.005 685.073 L751.565 685.073 L752.124 685.073 L752.683 685.073 L753.242 685.073 L753.802 685.073 L754.361 685.073 L754.92 685.073 L755.479 685.073 L756.039 685.073 L756.598 685.073 L757.157 685.073 L757.716 685.073 L758.276 685.073 L758.835 685.073 L759.394 685.073 L759.953 685.073 L760.513 685.073 L761.072 685.073 L761.631 685.073 L762.19 685.073 L762.75 685.073 L763.309 685.073 L763.868 685.073 L764.427 685.073 L764.987 685.073 L765.546 685.073 L766.105 685.073 L766.664 685.073 L767.224 685.073 L767.783 685.073 L768.342 685.073 L768.901 685.073 L769.461 685.073 L770.02 685.073 L770.579 685.073 L771.138 685.073 L771.698 685.073 L772.257 685.073 L772.816 685.073 L773.375 685.073 L773.935 685.073 L774.494 685.073 L775.053 685.073 L775.612 685.073 L776.172 685.073 L776.731 685.073 L777.29 685.073 L777.849 685.073 L778.409 685.073 L778.968 685.073 L779.527 685.073 L780.086 685.073 L780.646 685.073 L781.205 685.073 L781.764 685.073 L782.323 685.073 L782.883 685.073 L783.442 685.073 L784.001 685.073 L784.56 685.073 L785.12 685.073 L785.679 685.073 L786.238 685.073 L786.797 685.073 L787.357 685.073 L787.916 685.073 L788.475 685.073 L789.034 685.073 L789.594 685.073 L790.153 685.073 L790.712 685.073 L791.271 685.073 L791.831 685.073 L792.39 685.073 L792.949 685.073 L793.508 685.073 L794.068 685.073 L794.627 685.073 L795.186 685.073 L795.745 685.073 L796.305 685.073 L796.864 685.073 L797.423 685.073 L797.982 685.073 L798.542 685.073 L799.101 685.073 L799.66 685.073 L800.219 685.073 L800.779 685.073 L801.338 685.073 L801.897 685.073 L802.456 685.073 L803.016 685.073 L803.575 685.073 L804.134 685.073 L804.693 685.073 L805.253 685.073 L805.812 685.073 L806.371 685.073 L806.931 685.073 L807.49 685.073 L808.049 685.073 L808.608 685.073 L809.168 685.073 L809.727 685.073 L810.286 685.073 L810.845 685.073 L811.405 685.073 L811.964 685.073 L812.523 685.073 L813.082 685.073 L813.642 685.073 L814.201 685.073 L814.76 685.073 L815.319 685.073 L815.879 685.073 L816.438 685.073 L816.997 685.073 L817.556 685.073 L818.116 685.073 L818.675 685.073 L819.234 685.073 L819.793 685.073 L820.353 685.073 L820.912 685.073 L821.471 685.073 L822.03 685.073 L822.59 685.073 L823.149 685.073 L823.708 685.073 L824.267 685.073 L824.827 685.073 L825.386 685.073 L825.945 685.073 L826.504 685.073 L827.064 685.073 L827.623 685.073 L828.182 685.073 L828.741 685.073 L829.301 685.073 L829.86 685.073 L830.419 685.073 L830.978 685.073 L831.538 685.073 L832.097 685.073 L832.656 685.073 L833.215 685.073 L833.775 685.073 L834.334 685.073 L834.893 685.073 L835.452 685.073 L836.012 685.073 L836.571 685.073 L837.13 685.073 L837.689 685.073 L838.249 685.073 L838.808 685.073 L839.367 685.073 L839.926 685.073 L840.486 685.073 L841.045 685.073 L841.604 685.073 L842.163 685.073 L842.723 685.073 L843.282 685.073 L843.841 685.073 L844.4 685.073 L844.96 685.073 L845.519 685.073 L846.078 685.073 L846.637 685.073 L847.197 685.073 L847.756 685.073 L848.315 685.073 L848.874 685.073 L849.434 685.073 L849.993 685.073 L850.552 685.073 L851.111 685.073 L851.671 685.073 L852.23 685.073 L852.789 685.073 L853.348 685.073 L853.908 685.073 L854.467 685.073 L855.026 685.073 L855.585 685.073 L856.145 685.073 L856.704 685.073 L857.263 685.073 L857.822 685.073 L858.382 685.073 L858.941 685.073 L859.5 685.073 L860.059 685.073 L860.619 685.073 L861.178 685.073 L861.737 685.073 L862.296 685.073 L862.856 685.073 L863.415 685.073 L863.974 685.073 L864.533 685.073 L865.093 685.073 L865.652 685.073 L866.211 685.073 L866.77 685.073 L867.33 685.073 L867.889 685.073 L868.448 685.073 L869.007 685.073 L869.567 685.073 L870.126 685.073 L870.685 685.073 L871.244 685.073 L871.804 685.073 L872.363 685.073 L872.922 685.073 L873.481 685.073 L874.041 685.073 L874.6 685.073 L875.159 685.073 L875.718 685.073 L876.278 685.073 L876.837 685.073 L877.396 685.073 L877.955 685.073 L878.515 685.073 L879.074 685.073 L879.633 685.073 L880.192 685.073 L880.752 685.073 L881.311 685.073 L881.87 685.073 L882.429 685.073 L882.989 685.073 L883.548 685.073 L884.107 685.073 L884.666 685.073 L885.226 685.073 L885.785 685.073 L886.344 685.073 L886.903 685.073 L887.463 685.073 L888.022 685.073 L888.581 685.073 L889.14 685.073 L889.7 685.073 L890.259 685.073 L890.818 685.073 L891.377 685.073 L891.937 685.073 L892.496 685.073 L893.055 685.073 L893.614 685.073 L894.174 685.073 L894.733 685.073 L895.292 685.073 L895.851 685.073 L896.411 685.073 L896.97 685.073 L897.529 685.073 L898.088 685.073 L898.648 685.073 L899.207 685.073 L899.766 685.073 L900.325 685.073 L900.885 685.073 L901.444 685.073 L902.003 685.073 L902.562 685.073 L903.122 685.073 L903.681 685.073 L904.24 685.073 L904.799 685.073 L905.359 685.073 L905.918 685.073 L906.477 685.073 L907.036 685.073 L907.596 685.073 L908.155 685.073 L908.714 685.073 L909.273 685.073 L909.833 685.073 L910.392 685.073 L910.951 685.073 L911.51 685.073 L912.07 685.073 L912.629 685.073 L913.188 685.073 L913.747 685.073 L914.307 685.073 L914.866 685.073 L915.425 685.073 L915.984 685.073 L916.544 685.073 L917.103 685.073 L917.662 685.073 L918.221 685.073 L918.781 685.073 L919.34 685.073 L919.899 685.073 L920.458 685.073 L921.018 685.073 L921.577 685.073 L922.136 685.073 L922.695 685.073 L923.255 685.073 L923.814 685.073 L924.373 685.073 L924.932 685.073 L925.492 685.073 L926.051 685.073 L926.61 685.073 L927.169 685.073 L927.729 685.073 L928.288 685.073 L928.847 685.073 L929.406 685.073 L929.966 685.073 L930.525 685.073 L931.084 685.073 L931.644 685.073 L932.203 685.073 L932.762 685.073 L933.321 685.073 L933.881 685.073 L934.44 685.073 L934.999 685.073 L935.558 685.073 L936.118 685.073 L936.677 685.073 L937.236 685.073 L937.795 685.073 L938.355 685.073 L938.914 685.073 L939.473 685.073 L940.032 685.073 L940.592 685.073 L941.151 685.073 L941.71 685.073 L942.269 685.073 L942.829 685.073 L943.388 685.073 L943.947 685.073 L944.506 685.073 L945.066 685.073 L945.625 685.073 L946.184 685.073 L946.743 685.073 L947.303 685.073 L947.862 685.073 L948.421 685.073 L948.98 685.073 L949.54 685.073 L950.099 685.073 L950.658 685.073 L951.217 685.073 L951.777 685.073 L952.336 685.073 L952.895 685.073 L953.454 685.073 L954.014 685.073 L954.573 685.073 L955.132 685.073 L955.691 685.073 L956.251 685.073 L956.81 685.073 L957.369 685.073 L957.928 685.073 L958.488 685.073 L959.047 685.073 L959.606 685.073 L960.165 685.073 L960.725 685.073 L961.284 685.073 L961.843 685.073 L962.402 685.073 L962.962 685.073 L963.521 685.073 L964.08 685.073 L964.639 685.073 L965.199 685.073 L965.758 685.073 L966.317 685.073 L966.876 685.073 L967.436 685.073 L967.995 685.073 L968.554 685.073 L969.113 685.073 L969.673 685.073 L970.232 685.073 L970.791 685.073 L971.35 685.073 L971.91 685.073 L972.469 685.073 L973.028 685.073 L973.587 685.073 L974.147 685.073 L974.706 685.073 L975.265 685.073 L975.824 685.073 L976.384 685.073 L976.943 685.073 L977.502 685.073 L978.061 685.073 L978.621 685.073 L979.18 685.073 L979.739 685.073 L980.298 685.073 L980.858 685.073 L981.417 685.073 L981.976 685.073 L982.535 685.073 L983.095 685.073 L983.654 685.073 L984.213 685.073 L984.772 685.073 L985.332 685.073 L985.891 685.073 L986.45 685.073 L987.009 685.073 L987.569 685.073 L988.128 685.073 L988.687 685.073 L989.246 685.073 L989.806 685.073 L990.365 685.073 L990.924 685.073 L991.483 685.073 L992.043 685.073 L992.602 685.073 L993.161 685.073 L993.72 685.073 L994.28 685.073 L994.839 685.073 L995.398 685.073 L995.957 685.073 L996.517 685.073 L997.076 685.073 L997.635 685.073 L998.194 685.073 L998.754 685.073 L999.313 685.073 L999.872 685.073 L1000.43 685.073 L1000.99 685.073 L1001.55 685.073 L1002.11 685.073 L1002.67 685.073 L1003.23 685.073 L1003.79 685.073 L1004.35 685.073 L1004.91 685.073 L1005.46 685.073 L1006.02 685.073 L1006.58 685.073 L1007.14 685.073 L1007.7 685.073 L1008.26 685.073 L1008.82 685.073 L1009.38 685.073 L1009.94 685.073 L1010.5 685.073 L1011.06 685.073 L1011.62 685.073 L1012.18 685.073 L1012.73 685.073 L1013.29 685.073 L1013.85 685.073 L1014.41 685.073 L1014.97 685.073 L1015.53 685.073 L1016.09 685.073 L1016.65 685.073 L1017.21 685.073 L1017.77 685.073 L1018.33 685.073 L1018.89 685.073 L1019.45 685.073 L1020.01 685.073 L1020.56 685.073 L1021.12 685.073 L1021.68 685.073 L1022.24 685.073 L1022.8 685.073 L1023.36 685.073 L1023.92 685.073 L1024.48 685.073 L1025.04 685.073 L1025.6 685.073 L1026.16 685.073 L1026.72 685.073 L1027.28 685.073 L1027.83 685.073 L1028.39 685.073 L1028.95 685.073 L1029.51 685.073 L1030.07 685.073 L1030.63 685.073 L1031.19 685.073 L1031.75 685.073 L1032.31 685.073 L1032.87 685.073 L1033.43 685.073 L1033.99 685.073 L1034.55 685.073 L1035.1 685.073 L1035.66 685.073 L1036.22 685.073 L1036.78 685.073 L1037.34 685.073 L1037.9 685.073 L1038.46 685.073 L1039.02 685.073 L1039.58 685.073 L1040.14 685.073 L1040.7 685.073 L1041.26 685.073 L1041.82 685.073 L1042.38 685.073 L1042.93 685.073 L1043.49 685.073 L1044.05 685.073 L1044.61 685.073 L1045.17 685.073 L1045.73 685.073 L1046.29 685.073 L1046.85 685.073 L1047.41 685.073 L1047.97 685.073 L1048.53 685.073 L1049.09 685.073 L1049.65 685.073 L1050.2 685.073 L1050.76 685.073 L1051.32 685.073 L1051.88 685.073 L1052.44 685.073 L1053 685.073 L1053.56 685.073 L1054.12 685.073 L1054.68 685.073 L1055.24 685.073 L1055.8 685.073 L1056.36 685.073 L1056.92 685.073 L1057.48 685.073 L1058.03 685.073 L1058.59 685.073 L1059.15 685.073 L1059.71 685.073 L1060.27 685.073 L1060.83 685.073 L1061.39 685.073 L1061.95 685.073 L1062.51 685.073 L1063.07 685.073 L1063.63 685.073 L1064.19 685.073 L1064.75 685.073 L1065.3 685.073 L1065.86 685.073 L1066.42 685.073 L1066.98 685.073 L1067.54 685.073 L1068.1 685.073 L1068.66 685.073 L1069.22 685.073 L1069.78 685.073 L1070.34 685.073 L1070.9 685.073 L1071.46 685.073 L1072.02 685.073 L1072.57 685.073 L1073.13 685.073 L1073.69 685.073 L1074.25 685.073 L1074.81 685.073 L1075.37 685.073 L1075.93 685.073 L1076.49 685.073 L1077.05 685.073 L1077.61 685.073 L1078.17 685.073 L1078.73 685.073 L1079.29 685.073 L1079.85 685.073 L1080.4 685.073 L1080.96 685.073 L1081.52 685.073 L1082.08 685.073 L1082.64 685.073 L1083.2 685.073 L1083.76 685.073 L1084.32 685.073 L1084.88 685.073 L1085.44 685.073 L1086 685.073 L1086.56 685.073 L1087.12 685.073 L1087.67 685.073 L1088.23 685.073 L1088.79 685.073 L1089.35 685.073 L1089.91 685.073 L1090.47 685.073 L1091.03 685.073 L1091.59 685.073 L1092.15 685.073 L1092.71 685.073 L1093.27 685.073 L1093.83 685.073 L1094.39 685.073 L1094.94 685.073 L1095.5 685.073 L1096.06 685.073 L1096.62 685.073 L1097.18 685.073 L1097.74 685.073 L1098.3 685.073 L1098.86 685.073 L1099.42 685.073 L1099.98 685.073 L1100.54 685.073 L1101.1 685.073 L1101.66 685.073 L1102.22 685.073 L1102.77 685.073 L1103.33 685.073 L1103.89 685.073 L1104.45 685.073 L1105.01 685.073 L1105.57 685.073 L1106.13 685.073 L1106.69 685.073 L1107.25 685.073 L1107.81 685.073 L1108.37 685.073 L1108.93 685.073 L1109.49 685.073 L1110.04 685.073 L1110.6 685.073 L1111.16 685.073 L1111.72 685.073 L1112.28 685.073 L1112.84 685.073 L1113.4 685.073 L1113.96 685.073 L1114.52 685.073 L1115.08 685.073 L1115.64 685.073 L1116.2 685.073 L1116.76 685.073 L1117.31 685.073 L1117.87 685.073 L1118.43 685.073 L1118.99 685.073 L1119.55 685.073 L1120.11 685.073 L1120.67 685.073 L1121.23 685.073 L1121.79 685.073 L1122.35 685.073 L1122.91 685.073 L1123.47 685.073 L1124.03 685.073 L1124.59 685.073 L1125.14 685.073 L1125.7 685.073 L1126.26 685.073 L1126.82 685.073 L1127.38 685.073 L1127.94 685.073 L1128.5 685.073 L1129.06 685.073 L1129.62 685.073 L1130.18 685.073 L1130.74 685.073 L1131.3 685.073 L1131.86 685.073 L1132.41 685.073 L1132.97 685.073 L1133.53 685.073 L1134.09 685.073 L1134.65 685.073 L1135.21 685.073 L1135.77 685.073 L1136.33 685.073 L1136.89 685.073 L1137.45 685.073 L1138.01 685.073 L1138.57 685.073 L1139.13 685.073 L1139.68 685.073 L1140.24 685.073 L1140.8 685.073 L1141.36 685.073 L1141.92 685.073 L1142.48 685.073 L1143.04 685.073 L1143.6 685.073 L1144.16 685.073 L1144.72 685.073 L1145.28 685.073 L1145.84 685.073 L1146.4 685.073 L1146.96 685.073 L1147.51 685.073 L1148.07 685.073 L1148.63 685.073 L1149.19 685.073 L1149.75 685.073 L1150.31 685.073 L1150.87 685.073 L1151.43 685.073 L1151.99 685.073 L1152.55 685.073 L1153.11 685.073 L1153.67 685.073 L1154.23 685.073 L1154.78 685.073 L1155.34 685.073 L1155.9 685.073 L1156.46 685.073 L1157.02 685.073 L1157.58 685.073 L1158.14 685.073 L1158.7 685.073 L1159.26 685.073 L1159.82 685.073 L1160.38 685.073 L1160.94 685.073 L1161.5 685.073 L1162.05 685.073 L1162.61 685.073 L1163.17 685.073 L1163.73 685.073 L1164.29 685.073 L1164.85 685.073 L1165.41 685.073 L1165.97 685.073 L1166.53 685.073 L1167.09 685.073 L1167.65 685.073 L1168.21 685.073 L1168.77 685.073 L1169.33 685.073 L1169.88 685.073 L1170.44 685.073 L1171 685.073 L1171.56 685.073 L1172.12 685.073 L1172.68 685.073 L1173.24 685.073 L1173.8 685.073 L1174.36 685.073 L1174.92 685.073 L1175.48 685.073 L1176.04 685.073 L1176.6 685.073 L1177.15 685.073 L1177.71 685.073 L1178.27 685.073 L1178.83 685.073 L1179.39 685.073 L1179.95 685.073 L1180.51 685.073 L1181.07 685.073 L1181.63 685.073 L1182.19 685.073 L1182.75 685.073 L1183.31 685.073 L1183.87 685.073 L1184.43 685.073 L1184.98 685.073 L1185.54 685.073 L1186.1 685.073 L1186.66 685.073 L1187.22 685.073 L1187.78 685.073 L1188.34 685.073 L1188.9 685.073 L1189.46 685.073 L1190.02 685.073 L1190.58 685.073 L1191.14 685.073 L1191.7 685.073 L1192.25 685.073 L1192.81 685.073 L1193.37 685.073 L1193.93 685.073 L1194.49 685.073 L1195.05 685.073 L1195.61 685.073 L1196.17 685.073 L1196.73 685.073 L1197.29 685.073 L1197.85 685.073 L1198.41 685.073 L1198.97 685.073 L1199.52 685.073 L1200.08 685.073 L1200.64 685.073 L1201.2 685.073 L1201.76 685.073 L1202.32 685.073 L1202.88 685.073 L1203.44 685.073 L1204 685.073 L1204.56 685.073 L1205.12 685.073 L1205.68 685.073 L1206.24 685.073 L1206.8 685.073 L1207.35 685.073 L1207.91 685.073 L1208.47 685.073 L1209.03 685.073 L1209.59 685.073 L1210.15 685.073 L1210.71 685.073 L1211.27 685.073 L1211.83 685.073 L1212.39 685.073 L1212.95 685.073 L1213.51 685.073 L1214.07 685.073 L1214.62 685.073 L1215.18 685.073 L1215.74 685.073 L1216.3 685.073 L1216.86 685.073 L1217.42 685.073 L1217.98 685.073 L1218.54 685.073 L1219.1 685.073 L1219.66 685.073 L1220.22 685.073 L1220.78 685.073 L1221.34 685.073 L1221.89 685.073 L1222.45 685.073 L1223.01 685.073 L1223.57 685.073 L1224.13 685.073 L1224.69 685.073 L1225.25 685.073 L1225.81 685.073 L1226.37 685.073 L1226.93 685.073 L1227.49 685.073 L1228.05 685.073 L1228.61 685.073 L1229.17 685.073 L1229.72 685.073 L1230.28 685.073 L1230.84 685.073 L1231.4 685.073 L1231.96 685.073 L1232.52 685.073 L1233.08 685.073 L1233.64 685.073 L1234.2 685.073 L1234.76 685.073 L1235.32 685.073 L1235.88 685.073 L1236.44 685.073 L1236.99 685.073 L1237.55 685.073 L1238.11 685.073 L1238.67 685.073 L1239.23 685.073 L1239.79 685.073 L1240.35 685.073 L1240.91 685.073 L1241.47 685.073 L1242.03 685.073 L1242.59 685.073 L1243.15 685.073 L1243.71 685.073 L1244.26 685.073 L1244.82 685.073 L1245.38 685.073 L1245.94 685.073 L1246.5 685.073 L1247.06 685.073 L1247.62 685.073 L1248.18 685.073 L1248.74 685.073 L1249.3 685.073 L1249.86 685.073 L1250.42 685.073 L1250.98 685.073 L1251.54 685.073 L1252.09 685.073 L1252.65 685.073 L1253.21 685.073 L1253.77 685.073 L1254.33 685.073 L1254.89 685.073 L1255.45 685.073 L1256.01 685.073 L1256.57 685.073 L1257.13 685.073 L1257.69 685.073 L1258.25 685.073 L1258.81 685.073 L1259.36 685.073 L1259.92 685.073 L1260.48 685.073 L1261.04 685.073 L1261.6 685.073 L1262.16 685.073 L1262.72 685.073 L1263.28 685.073 L1263.84 685.073 L1264.4 685.073 L1264.96 685.073 L1265.52 685.073 L1266.08 685.073 L1266.63 685.073 L1267.19 685.073 L1267.75 685.073 L1268.31 685.073 L1268.87 685.073 L1269.43 685.073 L1269.99 685.073 L1270.55 685.073 L1271.11 685.073 L1271.67 685.073 L1272.23 685.073 L1272.79 685.073 L1273.35 685.073 L1273.91 685.073 L1274.46 685.073 L1275.02 685.073 L1275.58 685.073 L1276.14 685.073 L1276.7 685.073 L1277.26 685.073 L1277.82 685.073 L1278.38 685.073 L1278.94 685.073 L1279.5 685.073 L1280.06 685.073 L1280.62 685.073 L1281.18 685.073 L1281.73 685.073 L1282.29 685.073 L1282.85 685.073 L1283.41 685.073 L1283.97 685.073 L1284.53 685.073 L1285.09 685.073 L1285.65 685.073 L1286.21 685.073 L1286.77 685.073 L1287.33 685.073 L1287.89 685.073 L1288.45 685.073 L1289 685.073 L1289.56 685.073 L1290.12 685.073 L1290.68 685.073 L1291.24 685.073 L1291.8 685.073 L1292.36 685.073 L1292.92 685.073 L1293.48 685.073 L1294.04 685.073 L1294.6 685.073 L1295.16 685.073 L1295.72 685.073 L1296.28 685.073 L1296.83 685.073 L1297.39 685.073 L1297.95 685.073 L1298.51 685.073 L1299.07 685.073 L1299.63 685.073 L1300.19 685.073 L1300.75 685.073 L1301.31 685.073 L1301.87 685.073 L1302.43 685.073 L1302.99 685.073 L1303.55 685.073 L1304.1 685.073 L1304.66 685.073 L1305.22 685.073 L1305.78 685.073 L1306.34 685.073 L1306.9 685.073 L1307.46 685.073 L1308.02 685.073 L1308.58 685.073 L1309.14 685.073 L1309.7 685.073 L1310.26 685.073 L1310.82 685.073 L1311.38 685.073 L1311.93 685.073 L1312.49 685.073 L1313.05 685.073 L1313.61 685.073 L1314.17 685.073 L1314.73 685.073 L1315.29 685.073 L1315.85 685.073 L1316.41 685.073 L1316.97 685.073 L1317.53 685.073 L1318.09 685.073 L1318.65 685.073 L1319.2 685.073 L1319.76 685.073 L1320.32 685.073 L1320.88 685.073 L1321.44 685.073 L1322 685.073 L1322.56 685.073 L1323.12 685.073 L1323.68 685.073 L1324.24 685.073 L1324.8 685.073 L1325.36 685.073 L1325.92 685.073 L1326.47 685.073 L1327.03 685.073 L1327.59 685.073 L1328.15 685.073 L1328.71 685.073 L1329.27 685.073 L1329.83 685.073 L1330.39 685.073 L1330.95 685.073 L1331.51 685.073 L1332.07 685.073 L1332.63 685.073 L1333.19 685.073 L1333.75 685.073 L1334.3 685.073 L1334.86 685.073 L1335.42 685.073 L1335.98 685.073 L1336.54 685.073 L1337.1 685.073 L1337.66 685.073 L1338.22 685.073 L1338.78 685.073 L1339.34 685.073 L1339.9 685.073 L1340.46 685.073 L1341.02 685.073 L1341.57 685.073 L1342.13 685.073 L1342.69 685.073 L1343.25 685.073 L1343.81 685.073 L1344.37 685.073 L1344.93 685.073 L1345.49 685.073 L1346.05 685.073 L1346.61 685.073 L1347.17 685.073 L1347.73 685.073 L1348.29 685.073 L1348.84 685.073 L1349.4 685.073 L1349.96 685.073 L1350.52 685.073 L1351.08 685.073 L1351.64 685.073 L1352.2 685.073 L1352.76 685.073 L1353.32 685.073 L1353.88 685.073 L1354.44 685.073 L1355 685.073 L1355.56 685.073 L1356.12 685.073 L1356.67 685.073 L1357.23 685.073 L1357.79 685.073 L1358.35 685.073 L1358.91 685.073 L1359.47 685.073 L1360.03 685.073 L1360.59 685.073 L1361.15 685.073 L1361.71 685.073 L1362.27 685.073 L1362.83 685.073 L1363.39 685.073 L1363.94 685.073 L1364.5 685.073 L1365.06 685.073 L1365.62 685.073 L1366.18 685.073 L1366.74 685.073 L1367.3 685.073 L1367.86 685.073 L1368.42 685.073 L1368.98 685.073 L1369.54 685.073 L1370.1 685.073 L1370.66 685.073 L1371.21 685.073 L1371.77 685.073 L1372.33 685.073 L1372.89 685.073 L1373.45 685.073 L1374.01 685.073 L1374.57 685.073 L1375.13 685.073 L1375.69 685.073 L1376.25 685.073 L1376.81 685.073 L1377.37 685.073 L1377.93 685.073 L1378.49 685.073 L1379.04 685.073 L1379.6 685.073 L1380.16 685.073 L1380.72 685.073 L1381.28 685.073 L1381.84 685.073 L1382.4 685.073 L1382.96 685.073 L1383.52 685.073 L1384.08 685.073 L1384.64 685.073 L1385.2 685.073 L1385.76 685.073 L1386.31 685.073 L1386.87 685.073 L1387.43 685.073 L1387.99 685.073 L1388.55 685.073 L1389.11 685.073 L1389.67 685.073 L1390.23 685.073 L1390.79 685.073 L1391.35 685.073 L1391.91 685.073 L1392.47 685.073 L1393.03 685.073 L1393.58 685.073 L1394.14 685.073 L1394.7 685.073 L1395.26 685.073 L1395.82 685.073 L1396.38 685.073 L1396.94 685.073 L1397.5 685.073 L1398.06 685.073 L1398.62 685.073 L1399.18 685.073 L1399.74 685.073 L1400.3 685.073 L1400.86 685.073 L1401.41 685.073 L1401.97 685.073 L1402.53 685.073 L1403.09 685.073 L1403.65 685.073 L1404.21 685.073 L1404.77 685.073 L1405.33 685.073 L1405.89 685.073 L1406.45 685.073 L1407.01 685.073 L1407.57 685.073 L1408.13 685.073 L1408.68 685.073 L1409.24 685.073 L1409.8 685.073 L1410.36 685.073 L1410.92 685.073 L1411.48 685.073 L1412.04 685.073 L1412.6 685.073 L1413.16 685.073 L1413.72 685.073 L1414.28 685.073 L1414.84 685.073 L1415.4 685.073 L1415.95 685.073 L1416.51 685.073 L1417.07 685.073 L1417.63 685.073 L1418.19 685.073 L1418.75 685.073 L1419.31 685.073 L1419.87 685.073 L1420.43 685.073 L1420.99 685.073 L1421.55 685.073 L1422.11 685.073 L1422.67 685.073 L1423.23 685.073 L1423.78 685.073 L1424.34 685.073 L1424.9 685.073 L1425.46 685.073 L1426.02 685.073 L1426.58 685.073 L1427.14 685.073 L1427.7 685.073 L1428.26 685.073 L1428.82 685.073 L1429.38 685.073 L1429.94 685.073 L1430.5 685.073 L1431.05 685.073 L1431.61 685.073 L1432.17 685.073 L1432.73 685.073 L1433.29 685.073 L1433.85 685.073 L1434.41 685.073 L1434.97 685.073 L1435.53 685.073 L1436.09 685.073 L1436.65 685.073 L1437.21 685.073 L1437.77 685.073 L1438.33 685.073 L1438.88 685.073 L1439.44 685.073 L1440 685.073 L1440.56 685.073 L1441.12 685.073 L1441.68 685.073 L1442.24 685.073 L1442.8 685.073 L1443.36 685.073 L1443.92 685.073 L1444.48 685.073 L1445.04 685.073 L1445.6 685.073 L1446.15 685.073 L1446.71 685.073 L1447.27 685.073 L1447.83 685.073 L1448.39 685.073 L1448.95 685.073 L1449.51 685.073 L1450.07 685.073 L1450.63 685.073 L1451.19 685.073 L1451.75 685.073 L1452.31 685.073 L1452.87 685.073 L1453.42 685.073 L1453.98 685.073 L1454.54 685.073 L1455.1 685.073 L1455.66 685.073 L1456.22 685.073 L1456.78 685.073 L1457.34 685.073 L1457.9 685.073 L1458.46 685.073 L1459.02 685.073 L1459.58 685.073 L1460.14 685.073 L1460.7 685.073 L1461.25 685.073 L1461.81 685.073 L1462.37 685.073 L1462.93 685.073 L1463.49 685.073 L1464.05 685.073 L1464.61 685.073 L1465.17 685.073 L1465.73 685.073 L1466.29 685.073 L1466.85 685.073 L1467.41 685.073 L1467.97 685.073 L1468.52 685.073 L1469.08 685.073 L1469.64 685.073 L1470.2 685.073 L1470.76 685.073 L1471.32 685.073 L1471.88 685.073 L1472.44 685.073 L1473 685.073 L1473.56 685.073 L1474.12 685.073 L1474.68 685.073 L1475.24 685.073 L1475.79 685.073 L1476.35 685.073 L1476.91 685.073 L1477.47 685.073 L1478.03 685.073 L1478.59 685.073 L1479.15 685.073 L1479.71 685.073 L1480.27 685.073 L1480.83 685.073 L1481.39 685.073 L1481.95 685.073 L1482.51 685.073 L1483.07 685.073 L1483.62 685.073 L1484.18 685.073 L1484.74 685.073 L1485.3 685.073 L1485.86 685.073 L1486.42 685.073 L1486.98 685.073 L1487.54 685.073 L1488.1 685.073 L1488.66 685.073 L1489.22 685.073 L1489.78 685.073 L1490.34 685.073 L1490.89 685.073 L1491.45 685.073 L1492.01 685.073 L1492.57 685.073 L1493.13 685.073 L1493.69 685.073 L1494.25 685.073 L1494.81 685.073 L1495.37 685.073 L1495.93 685.073 L1496.49 685.073 L1497.05 685.073 L1497.61 685.073 L1498.16 685.073 L1498.72 685.073 L1499.28 685.073 L1499.84 685.073 L1500.4 685.073 L1500.96 685.073 L1501.52 685.073 L1502.08 685.073 L1502.64 685.073 L1503.2 685.073 L1503.76 685.073 L1504.32 685.073 L1504.88 685.073 L1505.44 685.073 L1505.99 685.073 L1506.55 685.073 L1507.11 685.073 L1507.67 685.073 L1508.23 685.073 L1508.79 685.073 L1509.35 685.073 L1509.91 685.073 L1510.47 685.073 L1511.03 685.073 L1511.59 685.073 L1512.15 685.073 L1512.71 685.073 L1513.26 685.073 L1513.82 685.073 L1514.38 685.073 L1514.94 685.073 L1515.5 685.073 L1516.06 685.073 L1516.62 685.073 L1517.18 685.073 L1517.74 685.073 L1518.3 685.073 L1518.86 685.073 L1519.42 685.073 L1519.98 685.073 L1520.53 685.073 L1521.09 685.073 L1521.65 685.073 L1522.21 685.073 L1522.77 685.073 L1523.33 685.073 L1523.89 685.073 L1524.45 685.073 L1525.01 685.073 L1525.57 685.073 L1526.13 685.073 L1526.69 685.073 L1527.25 685.073 L1527.81 685.073 L1528.36 685.073 L1528.92 685.073 L1529.48 685.073 L1530.04 685.073 L1530.6 685.073 L1531.16 685.073 L1531.72 685.073 L1532.28 685.073 L1532.84 685.073 L1533.4 685.073 L1533.96 685.073 L1534.52 685.073 L1535.08 685.073 L1535.63 685.073 L1536.19 685.073 L1536.75 685.073 L1537.31 685.073 L1537.87 685.073 L1538.43 685.073 L1538.99 685.073 L1539.55 685.073 L1540.11 685.073 L1540.67 685.073 L1541.23 685.073 L1541.79 685.073 L1542.35 685.073 L1542.9 685.073 L1543.46 685.073 L1544.02 685.073 L1544.58 685.073 L1545.14 685.073 L1545.7 685.073 L1546.26 685.073 L1546.82 685.073 L1547.38 685.073 L1547.94 685.073 L1548.5 685.073 L1549.06 685.073 L1549.62 685.073 L1550.18 685.073 L1550.73 685.073 L1551.29 685.073 L1551.85 685.073 L1552.41 685.073 L1552.97 685.073 L1553.53 685.073 L1554.09 685.073 L1554.65 685.073 L1555.21 685.073 L1555.77 685.073 L1556.33 685.073 L1556.89 685.073 L1557.45 685.073 L1558 685.073 L1558.56 685.073 L1559.12 685.073 L1559.68 685.073 L1560.24 685.073 L1560.8 685.073 L1561.36 685.073 L1561.92 685.073 L1562.48 685.073 L1563.04 685.073 L1563.6 685.073 L1564.16 685.073 L1564.72 685.073 L1565.28 685.073 L1565.83 685.073 L1566.39 685.073 L1566.95 685.073 L1567.51 685.073 L1568.07 685.073 L1568.63 685.073 L1569.19 685.073 L1569.75 685.073 L1570.31 685.073 L1570.87 685.073 L1571.43 685.073 L1571.99 685.073 L1572.55 685.073 L1573.1 685.073 L1573.66 685.073 L1574.22 685.073 L1574.78 685.073 L1575.34 685.073 L1575.9 685.073 L1576.46 685.073 L1577.02 685.073 L1577.58 685.073 L1578.14 685.073 L1578.7 685.073 L1579.26 685.073 L1579.82 685.073 L1580.37 685.073 L1580.93 685.073 L1581.49 685.073 L1582.05 685.073 L1582.61 685.073 L1583.17 685.073 L1583.73 685.073 L1584.29 685.073 L1584.85 685.073 L1585.41 685.073 L1585.97 685.073 L1586.53 685.073 L1587.09 685.073 L1587.65 685.073 L1588.2 685.073 L1588.76 685.073 L1589.32 685.073 L1589.88 685.073 L1590.44 685.073 L1591 685.073 L1591.56 685.073 L1592.12 685.073 L1592.68 685.073 L1593.24 685.073 L1593.8 685.073 L1594.36 685.073 L1594.92 685.073 L1595.47 685.073 L1596.03 685.073 L1596.59 685.073 L1597.15 685.073 L1597.71 685.073 L1598.27 685.073 L1598.83 685.073 L1599.39 685.073 L1599.95 685.073 L1600.51 685.073 L1601.07 685.073 L1601.63 685.073 L1602.19 685.073 L1602.74 685.073 L1603.3 685.073 L1603.86 685.073 L1604.42 685.073 L1604.98 685.073 L1605.54 685.073 L1606.1 685.073 L1606.66 685.073 L1607.22 685.073 L1607.78 685.073 L1608.34 685.073 L1608.9 685.073 L1609.46 685.073 L1610.02 685.073 L1610.57 685.073 L1611.13 685.073 L1611.69 685.073 L1612.25 685.073 L1612.81 685.073 L1613.37 685.073 L1613.93 685.073 L1614.49 685.073 L1615.05 685.073 L1615.61 685.073 L1616.17 685.073 L1616.73 685.073 L1617.29 685.073 L1617.84 685.073 L1618.4 685.073 L1618.96 685.073 L1619.52 685.073 L1620.08 685.073 L1620.64 685.073 L1621.2 685.073 L1621.76 685.073 L1622.32 685.073 L1622.88 685.073 L1623.44 685.073 L1624 685.073 L1624.56 685.073 L1625.11 685.073 L1625.67 685.073 L1626.23 685.073 L1626.79 685.073 L1627.35 685.073 L1627.91 685.073 L1628.47 685.073 L1629.03 685.073 L1629.59 685.073 L1630.15 685.073 L1630.71 685.073 L1631.27 685.073 L1631.83 685.073 L1632.39 685.073 L1632.94 685.073 L1633.5 685.073 L1634.06 685.073 L1634.62 685.073 L1635.18 685.073 L1635.74 685.073 L1636.3 685.073 L1636.86 685.073 L1637.42 685.073 L1637.98 685.073 L1638.54 685.073 L1639.1 685.073 L1639.66 685.073 L1640.21 685.073 L1640.77 685.073 L1641.33 685.073 L1641.89 685.073 L1642.45 685.073 L1643.01 685.073 L1643.57 685.073 L1644.13 685.073 L1644.69 685.073 L1645.25 685.073 L1645.81 685.073 L1646.37 685.073 L1646.93 685.073 L1647.48 685.073 L1648.04 685.073 L1648.6 685.073 L1649.16 685.073 L1649.72 685.073 L1650.28 685.073 L1650.84 685.073 L1651.4 685.073 L1651.96 685.073 L1652.52 685.073 L1653.08 685.073 L1653.64 685.073 L1654.2 685.073 L1654.76 685.073 L1655.31 685.073 L1655.87 685.073 L1656.43 685.073 L1656.99 685.073 L1657.55 685.073 L1658.11 685.073 L1658.67 685.073 L1659.23 685.073 L1659.79 685.073 L1660.35 685.073 L1660.91 685.073 L1661.47 685.073 L1662.03 685.073 L1662.58 685.073 L1663.14 685.073 L1663.7 685.073 L1664.26 685.073 L1664.82 685.073 L1665.38 685.073 L1665.94 685.073 L1666.5 685.073 L1667.06 685.073 L1667.62 685.073 L1668.18 685.073 L1668.74 685.073 L1669.3 685.073 L1669.85 685.073 L1670.41 685.073 L1670.97 685.073 L1671.53 685.073 L1672.09 685.073 L1672.65 685.073 L1673.21 685.073 L1673.77 685.073 L1674.33 685.073 L1674.89 685.073 L1675.45 685.073 L1676.01 685.073 L1676.57 685.073 L1677.13 685.073 L1677.68 685.073 L1678.24 685.073 L1678.8 685.073 L1679.36 685.073 L1679.92 685.073 L1680.48 685.073 L1681.04 685.073 L1681.6 685.073 L1682.16 685.073 L1682.72 685.073 L1683.28 685.073 L1683.84 685.073 L1684.4 685.073 L1684.95 685.073 L1685.51 685.073 L1686.07 685.073 L1686.63 685.073 L1687.19 685.073 L1687.75 685.073 L1688.31 685.073 L1688.87 685.073 L1689.43 685.073 L1689.99 685.073 L1690.55 685.073 L1691.11 685.073 L1691.67 685.073 L1692.23 685.073 L1692.78 685.073 L1693.34 685.073 L1693.9 685.073 L1694.46 685.073 L1695.02 685.073 L1695.58 685.073 L1696.14 685.073 L1696.7 685.073 L1697.26 685.073 L1697.82 685.073 L1698.38 685.073 L1698.94 685.073 L1699.5 685.073 L1700.05 685.073 L1700.61 685.073 L1701.17 685.073 L1701.73 685.073 L1702.29 685.073 L1702.85 685.073 L1703.41 685.073 L1703.97 685.073 L1704.53 685.073 L1705.09 685.073 L1705.65 685.073 L1706.21 685.073 L1706.77 685.073 L1707.32 685.073 L1707.88 685.073 L1708.44 685.073 L1709 685.073 L1709.56 685.073 L1710.12 685.073 L1710.68 685.073 L1711.24 685.073 L1711.8 685.073 L1712.36 685.073 L1712.92 685.073 L1713.48 685.073 L1714.04 685.073 L1714.6 685.073 L1715.15 685.073 L1715.71 685.073 L1716.27 685.073 L1716.83 685.073 L1717.39 685.073 L1717.95 685.073 L1718.51 685.073 L1719.07 685.073 L1719.63 685.073 L1720.19 685.073 L1720.75 685.073 L1721.31 685.073 L1721.87 685.073 L1722.42 685.073 L1722.98 685.073 L1723.54 685.073 L1724.1 685.073 L1724.66 685.073 L1725.22 685.073 L1725.78 685.073 L1726.34 685.073 L1726.9 685.073 L1727.46 685.073 L1728.02 685.073 L1728.58 685.073 L1729.14 685.073 L1729.69 685.073 L1730.25 685.073 L1730.81 685.073 L1731.37 685.073 L1731.93 685.073 L1732.49 685.073 L1733.05 685.073 L1733.61 685.073 L1734.17 685.073 L1734.73 685.073 L1735.29 685.073 L1735.85 685.073 L1736.41 685.073 L1736.97 685.073 L1737.52 685.073 L1738.08 685.073 L1738.64 685.073 L1739.2 685.073 L1739.76 685.073 L1740.32 685.073 L1740.88 685.073 L1741.44 685.073 L1742 685.073 L1742.56 685.073 L1743.12 685.073 L1743.68 685.073 L1744.24 685.073 L1744.79 685.073 L1745.35 685.073 L1745.91 685.073 L1746.47 685.073 L1747.03 685.073 L1747.59 685.073 L1748.15 685.073 L1748.71 685.073 L1749.27 685.073 L1749.83 685.073 L1750.39 685.073 L1750.95 685.073 L1751.51 685.073 L1752.06 685.073 L1752.62 685.073 L1753.18 685.073 L1753.74 685.073 L1754.3 685.073 L1754.86 685.073 L1755.42 685.073 L1755.98 685.073 L1756.54 685.073 L1757.1 685.073 L1757.66 685.073 L1758.22 685.073 L1758.78 685.073 L1759.34 685.073 L1759.89 685.073 L1760.45 685.073 L1761.01 685.073 L1761.57 685.073 L1762.13 685.073 L1762.69 685.073 L1763.25 685.073 L1763.81 685.073 L1764.37 685.073 L1764.93 685.073 L1765.49 685.073 L1766.05 685.073 L1766.61 685.073 L1767.16 685.073 L1767.72 685.073 L1768.28 685.073 L1768.84 685.073 L1769.4 685.073 L1769.96 685.073 L1770.52 685.073 L1771.08 685.073 L1771.64 685.073 L1772.2 685.073 L1772.76 685.073 L1773.32 685.073 L1773.88 685.073 L1774.43 685.073 L1774.99 685.073 L1775.55 685.073 L1776.11 685.073 L1776.67 685.073 L1777.23 685.073 L1777.79 685.073 L1778.35 685.073 L1778.91 685.073 L1779.47 685.073 L1780.03 685.073 L1780.59 685.073 L1781.15 685.073 L1781.71 685.073 L1782.26 685.073 L1782.82 685.073 L1783.38 685.073 L1783.94 685.073 L1784.5 685.073 L1785.06 685.073 L1785.62 685.073 L1786.18 685.073 L1786.74 685.073 L1787.3 685.073 L1787.86 685.073 L1788.42 685.073 L1788.98 685.073 L1789.53 685.073 L1790.09 685.073 L1790.65 685.073 L1791.21 685.073 L1791.77 685.073 L1792.33 685.073 L1792.89 685.073 L1793.45 685.073 L1794.01 685.073 L1794.57 685.073 L1795.13 685.073 L1795.69 685.073 L1796.25 685.073 L1796.8 685.073 L1797.36 685.073 L1797.92 685.073 L1798.48 685.073 L1799.04 685.073 L1799.6 685.073 L1800.16 685.073 L1800.72 685.073 L1801.28 685.073 L1801.84 685.073 L1802.4 685.073 L1802.96 685.073 L1803.52 685.073 L1804.08 685.073 L1804.63 685.073 L1805.19 685.073 L1805.75 685.073 L1806.31 685.073 L1806.87 685.073 L1807.43 685.073 L1807.99 685.073 L1808.55 685.073 L1809.11 685.073 L1809.67 685.073 L1810.23 685.073 L1810.79 685.073 L1811.35 685.073 L1811.9 685.073 L1812.46 685.073 L1813.02 685.073 L1813.58 685.073 L1814.14 685.073 L1814.7 685.073 L1815.26 685.073 L1815.82 685.073 L1816.38 685.073 L1816.94 685.073 L1817.5 685.073 L1818.06 685.073 L1818.62 685.073 L1819.18 685.073 L1819.73 685.073 L1820.29 685.073 L1820.85 685.073 L1821.41 685.073 L1821.97 685.073 L1822.53 685.073 L1823.09 685.073 L1823.65 685.073 L1824.21 685.073 L1824.77 685.073 L1825.33 685.073 L1825.89 685.073 L1826.45 685.073 L1827 685.073 L1827.56 685.073 L1828.12 685.073 L1828.68 685.073 L1829.24 685.073 L1829.8 685.073 L1830.36 685.073 L1830.92 685.073 L1831.48 685.073 L1832.04 685.073 L1832.6 685.073 L1833.16 685.073 L1833.72 685.073 L1834.27 685.073 L1834.83 685.073 L1835.39 685.073 L1835.95 685.073 L1836.51 685.073 L1837.07 685.073 L1837.63 685.073 L1838.19 685.073 L1838.19 681.966 L1837.63 681.966 L1837.07 681.966 L1836.51 681.966 L1835.95 681.966 L1835.39 681.966 L1834.83 681.966 L1834.27 681.966 L1833.72 681.966 L1833.16 681.966 L1832.6 681.966 L1832.04 681.966 L1831.48 681.966 L1830.92 681.966 L1830.36 681.966 L1829.8 681.966 L1829.24 681.966 L1828.68 681.966 L1828.12 681.966 L1827.56 681.966 L1827 681.966 L1826.45 681.966 L1825.89 681.966 L1825.33 681.966 L1824.77 681.966 L1824.21 681.966 L1823.65 681.966 L1823.09 681.966 L1822.53 681.966 L1821.97 681.966 L1821.41 681.966 L1820.85 681.966 L1820.29 681.966 L1819.73 681.966 L1819.18 681.966 L1818.62 681.966 L1818.06 681.966 L1817.5 681.966 L1816.94 681.966 L1816.38 681.966 L1815.82 681.966 L1815.26 681.966 L1814.7 681.966 L1814.14 681.966 L1813.58 681.966 L1813.02 681.966 L1812.46 681.966 L1811.9 681.966 L1811.35 681.966 L1810.79 681.966 L1810.23 681.966 L1809.67 681.966 L1809.11 681.966 L1808.55 681.966 L1807.99 681.966 L1807.43 681.966 L1806.87 681.966 L1806.31 681.966 L1805.75 681.966 L1805.19 681.966 L1804.63 681.966 L1804.08 681.966 L1803.52 681.966 L1802.96 681.966 L1802.4 681.966 L1801.84 681.966 L1801.28 681.966 L1800.72 681.966 L1800.16 681.966 L1799.6 681.966 L1799.04 681.966 L1798.48 681.966 L1797.92 681.966 L1797.36 681.966 L1796.8 681.966 L1796.25 681.966 L1795.69 681.966 L1795.13 681.966 L1794.57 681.966 L1794.01 681.966 L1793.45 681.966 L1792.89 681.966 L1792.33 681.966 L1791.77 681.966 L1791.21 681.966 L1790.65 681.966 L1790.09 681.966 L1789.53 681.966 L1788.98 681.966 L1788.42 681.966 L1787.86 681.966 L1787.3 681.966 L1786.74 681.966 L1786.18 681.966 L1785.62 681.966 L1785.06 681.966 L1784.5 681.966 L1783.94 681.966 L1783.38 681.966 L1782.82 681.966 L1782.26 681.966 L1781.71 681.966 L1781.15 681.966 L1780.59 681.966 L1780.03 681.966 L1779.47 681.966 L1778.91 681.966 L1778.35 681.966 L1777.79 681.966 L1777.23 681.966 L1776.67 681.966 L1776.11 681.966 L1775.55 681.966 L1774.99 681.966 L1774.43 681.966 L1773.88 681.966 L1773.32 681.966 L1772.76 681.966 L1772.2 681.966 L1771.64 681.966 L1771.08 681.966 L1770.52 681.966 L1769.96 681.966 L1769.4 681.966 L1768.84 681.966 L1768.28 681.966 L1767.72 681.966 L1767.16 681.966 L1766.61 681.966 L1766.05 681.966 L1765.49 681.966 L1764.93 681.966 L1764.37 681.966 L1763.81 681.966 L1763.25 681.966 L1762.69 681.966 L1762.13 681.966 L1761.57 681.966 L1761.01 681.966 L1760.45 681.966 L1759.89 681.966 L1759.34 681.966 L1758.78 681.966 L1758.22 681.966 L1757.66 681.966 L1757.1 681.966 L1756.54 681.966 L1755.98 681.966 L1755.42 681.966 L1754.86 681.966 L1754.3 681.966 L1753.74 681.966 L1753.18 681.966 L1752.62 681.966 L1752.06 681.966 L1751.51 681.966 L1750.95 681.966 L1750.39 681.966 L1749.83 681.966 L1749.27 681.966 L1748.71 681.966 L1748.15 681.966 L1747.59 681.966 L1747.03 681.966 L1746.47 681.966 L1745.91 681.966 L1745.35 681.966 L1744.79 681.966 L1744.24 681.966 L1743.68 681.966 L1743.12 681.966 L1742.56 681.966 L1742 681.966 L1741.44 681.966 L1740.88 681.966 L1740.32 681.966 L1739.76 681.966 L1739.2 681.966 L1738.64 681.966 L1738.08 681.966 L1737.52 681.966 L1736.97 681.966 L1736.41 681.966 L1735.85 681.966 L1735.29 681.966 L1734.73 681.966 L1734.17 681.966 L1733.61 681.966 L1733.05 681.966 L1732.49 681.966 L1731.93 681.966 L1731.37 681.966 L1730.81 681.966 L1730.25 681.966 L1729.69 681.966 L1729.14 681.966 L1728.58 681.966 L1728.02 681.966 L1727.46 681.966 L1726.9 681.966 L1726.34 681.966 L1725.78 681.966 L1725.22 681.966 L1724.66 681.966 L1724.1 681.966 L1723.54 681.966 L1722.98 681.966 L1722.42 681.966 L1721.87 681.966 L1721.31 681.966 L1720.75 681.966 L1720.19 681.966 L1719.63 681.966 L1719.07 681.966 L1718.51 681.966 L1717.95 681.966 L1717.39 681.966 L1716.83 681.966 L1716.27 681.966 L1715.71 681.966 L1715.15 681.966 L1714.6 681.966 L1714.04 681.966 L1713.48 681.966 L1712.92 681.966 L1712.36 681.966 L1711.8 681.966 L1711.24 681.966 L1710.68 681.966 L1710.12 681.966 L1709.56 681.966 L1709 681.966 L1708.44 681.966 L1707.88 681.966 L1707.32 681.966 L1706.77 681.966 L1706.21 681.966 L1705.65 681.966 L1705.09 681.966 L1704.53 681.966 L1703.97 681.966 L1703.41 681.966 L1702.85 681.966 L1702.29 681.966 L1701.73 681.966 L1701.17 681.966 L1700.61 681.966 L1700.05 681.966 L1699.5 681.966 L1698.94 681.966 L1698.38 681.966 L1697.82 681.966 L1697.26 681.966 L1696.7 681.966 L1696.14 681.966 L1695.58 681.966 L1695.02 681.966 L1694.46 681.966 L1693.9 681.966 L1693.34 681.966 L1692.78 681.966 L1692.23 681.966 L1691.67 681.966 L1691.11 681.966 L1690.55 681.966 L1689.99 681.966 L1689.43 681.966 L1688.87 681.966 L1688.31 681.966 L1687.75 681.966 L1687.19 681.966 L1686.63 681.966 L1686.07 681.966 L1685.51 681.966 L1684.95 681.966 L1684.4 681.966 L1683.84 681.966 L1683.28 681.966 L1682.72 681.966 L1682.16 681.966 L1681.6 681.966 L1681.04 681.966 L1680.48 681.966 L1679.92 681.966 L1679.36 681.966 L1678.8 681.966 L1678.24 681.966 L1677.68 681.966 L1677.13 681.966 L1676.57 681.966 L1676.01 681.966 L1675.45 681.966 L1674.89 681.966 L1674.33 681.966 L1673.77 681.966 L1673.21 681.966 L1672.65 681.966 L1672.09 681.966 L1671.53 681.966 L1670.97 681.966 L1670.41 681.966 L1669.85 681.966 L1669.3 681.966 L1668.74 681.966 L1668.18 681.966 L1667.62 681.966 L1667.06 681.966 L1666.5 681.966 L1665.94 681.966 L1665.38 681.966 L1664.82 681.966 L1664.26 681.966 L1663.7 681.966 L1663.14 681.966 L1662.58 681.966 L1662.03 681.966 L1661.47 681.966 L1660.91 681.966 L1660.35 681.966 L1659.79 681.966 L1659.23 681.966 L1658.67 681.966 L1658.11 681.966 L1657.55 681.966 L1656.99 681.966 L1656.43 681.966 L1655.87 681.966 L1655.31 681.966 L1654.76 681.966 L1654.2 681.966 L1653.64 681.966 L1653.08 681.966 L1652.52 681.966 L1651.96 681.966 L1651.4 681.966 L1650.84 681.966 L1650.28 681.966 L1649.72 681.966 L1649.16 681.966 L1648.6 681.966 L1648.04 681.966 L1647.48 681.966 L1646.93 681.966 L1646.37 681.966 L1645.81 681.966 L1645.25 681.966 L1644.69 681.966 L1644.13 681.966 L1643.57 681.966 L1643.01 681.966 L1642.45 681.966 L1641.89 681.966 L1641.33 681.966 L1640.77 681.966 L1640.21 681.966 L1639.66 681.966 L1639.1 681.966 L1638.54 681.966 L1637.98 681.966 L1637.42 681.966 L1636.86 681.966 L1636.3 681.966 L1635.74 681.966 L1635.18 681.966 L1634.62 681.966 L1634.06 681.966 L1633.5 681.966 L1632.94 681.966 L1632.39 681.966 L1631.83 681.966 L1631.27 681.966 L1630.71 681.966 L1630.15 681.966 L1629.59 681.966 L1629.03 681.966 L1628.47 681.966 L1627.91 681.966 L1627.35 681.966 L1626.79 681.966 L1626.23 681.966 L1625.67 681.966 L1625.11 681.966 L1624.56 681.966 L1624 681.966 L1623.44 681.966 L1622.88 681.966 L1622.32 681.966 L1621.76 681.966 L1621.2 681.966 L1620.64 681.966 L1620.08 681.966 L1619.52 681.966 L1618.96 681.966 L1618.4 681.966 L1617.84 681.966 L1617.29 681.966 L1616.73 681.966 L1616.17 681.966 L1615.61 681.966 L1615.05 681.966 L1614.49 681.966 L1613.93 681.966 L1613.37 681.966 L1612.81 681.966 L1612.25 681.966 L1611.69 681.966 L1611.13 681.966 L1610.57 681.966 L1610.02 681.966 L1609.46 681.966 L1608.9 681.966 L1608.34 681.966 L1607.78 681.966 L1607.22 681.966 L1606.66 681.966 L1606.1 681.966 L1605.54 681.966 L1604.98 681.966 L1604.42 681.966 L1603.86 681.966 L1603.3 681.966 L1602.74 681.966 L1602.19 681.966 L1601.63 681.966 L1601.07 681.966 L1600.51 681.966 L1599.95 681.966 L1599.39 681.966 L1598.83 681.966 L1598.27 681.966 L1597.71 681.966 L1597.15 681.966 L1596.59 681.966 L1596.03 681.966 L1595.47 681.966 L1594.92 681.966 L1594.36 681.966 L1593.8 681.966 L1593.24 681.966 L1592.68 681.966 L1592.12 681.966 L1591.56 681.966 L1591 681.966 L1590.44 681.966 L1589.88 681.966 L1589.32 681.966 L1588.76 681.966 L1588.2 681.966 L1587.65 681.966 L1587.09 681.966 L1586.53 681.966 L1585.97 681.966 L1585.41 681.966 L1584.85 681.966 L1584.29 681.966 L1583.73 681.966 L1583.17 681.966 L1582.61 681.966 L1582.05 681.966 L1581.49 681.966 L1580.93 681.966 L1580.37 681.966 L1579.82 681.966 L1579.26 681.966 L1578.7 681.966 L1578.14 681.966 L1577.58 681.966 L1577.02 681.966 L1576.46 681.966 L1575.9 681.966 L1575.34 681.966 L1574.78 681.966 L1574.22 681.966 L1573.66 681.966 L1573.1 681.966 L1572.55 681.966 L1571.99 681.966 L1571.43 681.966 L1570.87 681.966 L1570.31 681.966 L1569.75 681.966 L1569.19 681.966 L1568.63 681.966 L1568.07 681.966 L1567.51 681.966 L1566.95 681.966 L1566.39 681.966 L1565.83 681.966 L1565.28 681.966 L1564.72 681.966 L1564.16 681.966 L1563.6 681.966 L1563.04 681.966 L1562.48 681.966 L1561.92 681.966 L1561.36 681.966 L1560.8 681.966 L1560.24 681.966 L1559.68 681.966 L1559.12 681.966 L1558.56 681.966 L1558 681.966 L1557.45 681.966 L1556.89 681.966 L1556.33 681.966 L1555.77 681.966 L1555.21 681.966 L1554.65 681.966 L1554.09 681.966 L1553.53 681.966 L1552.97 681.966 L1552.41 681.966 L1551.85 681.966 L1551.29 681.966 L1550.73 681.966 L1550.18 681.966 L1549.62 681.966 L1549.06 681.966 L1548.5 681.966 L1547.94 681.966 L1547.38 681.966 L1546.82 681.966 L1546.26 681.966 L1545.7 681.966 L1545.14 681.966 L1544.58 681.966 L1544.02 681.966 L1543.46 681.966 L1542.9 681.966 L1542.35 681.966 L1541.79 681.966 L1541.23 681.966 L1540.67 681.966 L1540.11 681.966 L1539.55 681.966 L1538.99 681.966 L1538.43 681.966 L1537.87 681.966 L1537.31 681.966 L1536.75 681.966 L1536.19 681.966 L1535.63 681.966 L1535.08 681.966 L1534.52 681.966 L1533.96 681.966 L1533.4 681.966 L1532.84 681.966 L1532.28 681.966 L1531.72 681.966 L1531.16 681.966 L1530.6 681.966 L1530.04 681.966 L1529.48 681.966 L1528.92 681.966 L1528.36 681.966 L1527.81 681.966 L1527.25 681.966 L1526.69 681.966 L1526.13 681.966 L1525.57 681.966 L1525.01 681.966 L1524.45 681.966 L1523.89 681.966 L1523.33 681.966 L1522.77 681.966 L1522.21 681.966 L1521.65 681.966 L1521.09 681.966 L1520.53 681.966 L1519.98 681.966 L1519.42 681.966 L1518.86 681.966 L1518.3 681.966 L1517.74 681.966 L1517.18 681.966 L1516.62 681.966 L1516.06 681.966 L1515.5 681.966 L1514.94 681.966 L1514.38 681.966 L1513.82 681.966 L1513.26 681.966 L1512.71 681.966 L1512.15 681.966 L1511.59 681.966 L1511.03 681.966 L1510.47 681.966 L1509.91 681.966 L1509.35 681.966 L1508.79 681.966 L1508.23 681.966 L1507.67 681.966 L1507.11 681.966 L1506.55 681.966 L1505.99 681.966 L1505.44 681.966 L1504.88 681.966 L1504.32 681.966 L1503.76 681.966 L1503.2 681.966 L1502.64 681.966 L1502.08 681.966 L1501.52 681.966 L1500.96 681.966 L1500.4 681.966 L1499.84 681.966 L1499.28 681.966 L1498.72 681.966 L1498.16 681.966 L1497.61 681.966 L1497.05 681.966 L1496.49 681.966 L1495.93 681.966 L1495.37 681.966 L1494.81 681.966 L1494.25 681.966 L1493.69 681.966 L1493.13 681.966 L1492.57 681.966 L1492.01 681.966 L1491.45 681.966 L1490.89 681.966 L1490.34 681.966 L1489.78 681.966 L1489.22 681.966 L1488.66 681.966 L1488.1 681.966 L1487.54 681.966 L1486.98 681.966 L1486.42 681.966 L1485.86 681.966 L1485.3 681.966 L1484.74 681.966 L1484.18 681.966 L1483.62 681.966 L1483.07 681.966 L1482.51 681.966 L1481.95 681.966 L1481.39 681.966 L1480.83 681.966 L1480.27 681.966 L1479.71 681.966 L1479.15 681.966 L1478.59 681.966 L1478.03 681.966 L1477.47 681.966 L1476.91 681.966 L1476.35 681.966 L1475.79 681.966 L1475.24 681.966 L1474.68 681.966 L1474.12 681.966 L1473.56 681.966 L1473 681.966 L1472.44 681.966 L1471.88 681.966 L1471.32 681.966 L1470.76 681.966 L1470.2 681.966 L1469.64 681.966 L1469.08 681.966 L1468.52 681.966 L1467.97 681.966 L1467.41 681.966 L1466.85 681.966 L1466.29 681.966 L1465.73 681.966 L1465.17 681.966 L1464.61 681.966 L1464.05 681.966 L1463.49 681.966 L1462.93 681.966 L1462.37 681.966 L1461.81 681.966 L1461.25 681.966 L1460.7 681.966 L1460.14 681.966 L1459.58 681.966 L1459.02 681.966 L1458.46 681.966 L1457.9 681.966 L1457.34 681.966 L1456.78 681.966 L1456.22 681.966 L1455.66 681.966 L1455.1 681.966 L1454.54 681.966 L1453.98 681.966 L1453.42 681.966 L1452.87 681.966 L1452.31 681.966 L1451.75 681.966 L1451.19 681.966 L1450.63 681.966 L1450.07 681.966 L1449.51 681.966 L1448.95 681.966 L1448.39 681.966 L1447.83 681.966 L1447.27 681.966 L1446.71 681.966 L1446.15 681.966 L1445.6 681.966 L1445.04 681.966 L1444.48 681.966 L1443.92 681.966 L1443.36 681.966 L1442.8 681.966 L1442.24 681.966 L1441.68 681.966 L1441.12 681.966 L1440.56 681.966 L1440 681.966 L1439.44 681.966 L1438.88 681.966 L1438.33 681.966 L1437.77 681.966 L1437.21 681.966 L1436.65 681.966 L1436.09 681.966 L1435.53 681.966 L1434.97 681.966 L1434.41 681.966 L1433.85 681.966 L1433.29 681.966 L1432.73 681.966 L1432.17 681.966 L1431.61 681.966 L1431.05 681.966 L1430.5 681.966 L1429.94 681.966 L1429.38 681.966 L1428.82 681.966 L1428.26 681.966 L1427.7 681.966 L1427.14 681.966 L1426.58 681.966 L1426.02 681.966 L1425.46 681.966 L1424.9 681.966 L1424.34 681.966 L1423.78 681.966 L1423.23 681.966 L1422.67 681.966 L1422.11 681.966 L1421.55 681.966 L1420.99 681.966 L1420.43 681.966 L1419.87 681.966 L1419.31 681.966 L1418.75 681.966 L1418.19 681.966 L1417.63 681.966 L1417.07 681.966 L1416.51 681.966 L1415.95 681.966 L1415.4 681.966 L1414.84 681.966 L1414.28 681.966 L1413.72 681.966 L1413.16 681.966 L1412.6 681.966 L1412.04 681.966 L1411.48 681.966 L1410.92 681.966 L1410.36 681.966 L1409.8 681.966 L1409.24 681.966 L1408.68 681.966 L1408.13 681.966 L1407.57 681.966 L1407.01 681.966 L1406.45 681.966 L1405.89 681.966 L1405.33 681.966 L1404.77 681.966 L1404.21 681.966 L1403.65 681.966 L1403.09 681.966 L1402.53 681.966 L1401.97 681.966 L1401.41 681.966 L1400.86 681.966 L1400.3 681.966 L1399.74 681.966 L1399.18 681.966 L1398.62 681.966 L1398.06 681.966 L1397.5 681.966 L1396.94 681.966 L1396.38 681.966 L1395.82 681.966 L1395.26 681.966 L1394.7 681.966 L1394.14 681.966 L1393.58 681.966 L1393.03 681.966 L1392.47 681.966 L1391.91 681.966 L1391.35 681.966 L1390.79 681.966 L1390.23 681.966 L1389.67 681.966 L1389.11 681.966 L1388.55 681.966 L1387.99 681.966 L1387.43 681.966 L1386.87 681.966 L1386.31 681.966 L1385.76 681.966 L1385.2 681.966 L1384.64 681.966 L1384.08 681.966 L1383.52 681.966 L1382.96 681.966 L1382.4 681.966 L1381.84 681.966 L1381.28 681.966 L1380.72 681.966 L1380.16 681.966 L1379.6 681.966 L1379.04 681.966 L1378.49 681.966 L1377.93 681.966 L1377.37 681.966 L1376.81 681.966 L1376.25 681.966 L1375.69 681.966 L1375.13 681.966 L1374.57 681.966 L1374.01 681.966 L1373.45 681.966 L1372.89 681.966 L1372.33 681.966 L1371.77 681.966 L1371.21 681.966 L1370.66 681.966 L1370.1 681.966 L1369.54 681.966 L1368.98 681.966 L1368.42 681.966 L1367.86 681.966 L1367.3 681.966 L1366.74 681.966 L1366.18 681.966 L1365.62 681.966 L1365.06 681.966 L1364.5 681.966 L1363.94 681.966 L1363.39 681.966 L1362.83 681.966 L1362.27 681.966 L1361.71 681.966 L1361.15 681.966 L1360.59 681.966 L1360.03 681.966 L1359.47 681.966 L1358.91 681.966 L1358.35 681.966 L1357.79 681.966 L1357.23 681.966 L1356.67 681.966 L1356.12 681.966 L1355.56 681.966 L1355 681.966 L1354.44 681.966 L1353.88 681.966 L1353.32 681.966 L1352.76 681.966 L1352.2 681.966 L1351.64 681.966 L1351.08 681.966 L1350.52 681.966 L1349.96 681.966 L1349.4 681.966 L1348.84 681.966 L1348.29 681.966 L1347.73 681.966 L1347.17 681.966 L1346.61 681.966 L1346.05 681.966 L1345.49 681.966 L1344.93 681.966 L1344.37 681.966 L1343.81 681.966 L1343.25 681.966 L1342.69 681.966 L1342.13 681.966 L1341.57 681.966 L1341.02 681.966 L1340.46 681.966 L1339.9 681.966 L1339.34 681.966 L1338.78 681.966 L1338.22 681.966 L1337.66 681.966 L1337.1 681.966 L1336.54 681.966 L1335.98 681.966 L1335.42 681.966 L1334.86 681.966 L1334.3 681.966 L1333.75 681.966 L1333.19 681.966 L1332.63 681.966 L1332.07 681.966 L1331.51 681.966 L1330.95 681.966 L1330.39 681.966 L1329.83 681.966 L1329.27 681.966 L1328.71 681.966 L1328.15 681.966 L1327.59 681.966 L1327.03 681.966 L1326.47 681.966 L1325.92 681.966 L1325.36 681.966 L1324.8 681.966 L1324.24 681.966 L1323.68 681.966 L1323.12 681.966 L1322.56 681.966 L1322 681.966 L1321.44 681.966 L1320.88 681.966 L1320.32 681.966 L1319.76 681.966 L1319.2 681.966 L1318.65 681.966 L1318.09 681.966 L1317.53 681.966 L1316.97 681.966 L1316.41 681.966 L1315.85 681.966 L1315.29 681.966 L1314.73 681.966 L1314.17 681.966 L1313.61 681.966 L1313.05 681.966 L1312.49 681.966 L1311.93 681.966 L1311.38 681.966 L1310.82 681.966 L1310.26 681.966 L1309.7 681.966 L1309.14 681.966 L1308.58 681.966 L1308.02 681.966 L1307.46 681.966 L1306.9 681.966 L1306.34 681.966 L1305.78 681.966 L1305.22 681.966 L1304.66 681.966 L1304.1 681.966 L1303.55 681.966 L1302.99 681.966 L1302.43 681.966 L1301.87 681.966 L1301.31 681.966 L1300.75 681.966 L1300.19 681.966 L1299.63 681.966 L1299.07 681.966 L1298.51 681.966 L1297.95 681.966 L1297.39 681.966 L1296.83 681.966 L1296.28 681.966 L1295.72 681.966 L1295.16 681.966 L1294.6 681.966 L1294.04 681.966 L1293.48 681.966 L1292.92 681.966 L1292.36 681.966 L1291.8 681.966 L1291.24 681.966 L1290.68 681.966 L1290.12 681.966 L1289.56 681.966 L1289 681.966 L1288.45 681.966 L1287.89 681.966 L1287.33 681.966 L1286.77 681.966 L1286.21 681.966 L1285.65 681.966 L1285.09 681.966 L1284.53 681.966 L1283.97 681.966 L1283.41 681.966 L1282.85 681.966 L1282.29 681.966 L1281.73 681.966 L1281.18 681.966 L1280.62 681.966 L1280.06 681.966 L1279.5 681.966 L1278.94 681.966 L1278.38 681.966 L1277.82 681.966 L1277.26 681.966 L1276.7 681.966 L1276.14 681.966 L1275.58 681.966 L1275.02 681.966 L1274.46 681.966 L1273.91 681.966 L1273.35 681.966 L1272.79 681.966 L1272.23 681.966 L1271.67 681.966 L1271.11 681.966 L1270.55 681.966 L1269.99 681.966 L1269.43 681.966 L1268.87 681.966 L1268.31 681.966 L1267.75 681.966 L1267.19 681.966 L1266.63 681.966 L1266.08 681.966 L1265.52 681.966 L1264.96 681.966 L1264.4 681.966 L1263.84 681.966 L1263.28 681.966 L1262.72 681.966 L1262.16 681.966 L1261.6 681.966 L1261.04 681.966 L1260.48 681.966 L1259.92 681.966 L1259.36 681.966 L1258.81 681.966 L1258.25 681.966 L1257.69 681.966 L1257.13 681.966 L1256.57 681.966 L1256.01 681.966 L1255.45 681.966 L1254.89 681.966 L1254.33 681.966 L1253.77 681.966 L1253.21 681.966 L1252.65 681.966 L1252.09 681.966 L1251.54 681.966 L1250.98 681.966 L1250.42 681.966 L1249.86 681.966 L1249.3 681.966 L1248.74 681.966 L1248.18 681.966 L1247.62 681.966 L1247.06 681.966 L1246.5 681.966 L1245.94 681.966 L1245.38 681.966 L1244.82 681.966 L1244.26 681.966 L1243.71 681.966 L1243.15 681.966 L1242.59 681.966 L1242.03 681.966 L1241.47 681.966 L1240.91 681.966 L1240.35 681.966 L1239.79 681.966 L1239.23 681.966 L1238.67 681.966 L1238.11 681.966 L1237.55 681.966 L1236.99 681.966 L1236.44 681.966 L1235.88 681.966 L1235.32 681.966 L1234.76 681.966 L1234.2 681.966 L1233.64 681.966 L1233.08 681.966 L1232.52 681.966 L1231.96 681.966 L1231.4 681.966 L1230.84 681.966 L1230.28 681.966 L1229.72 681.966 L1229.17 681.966 L1228.61 681.966 L1228.05 681.966 L1227.49 681.966 L1226.93 681.966 L1226.37 681.966 L1225.81 681.966 L1225.25 681.966 L1224.69 681.966 L1224.13 681.966 L1223.57 681.966 L1223.01 681.966 L1222.45 681.966 L1221.89 681.966 L1221.34 681.966 L1220.78 681.966 L1220.22 681.966 L1219.66 681.966 L1219.1 681.966 L1218.54 681.966 L1217.98 681.966 L1217.42 681.966 L1216.86 681.966 L1216.3 681.966 L1215.74 681.966 L1215.18 681.966 L1214.62 681.966 L1214.07 681.966 L1213.51 681.966 L1212.95 681.966 L1212.39 681.966 L1211.83 681.966 L1211.27 681.966 L1210.71 681.966 L1210.15 681.966 L1209.59 681.966 L1209.03 681.966 L1208.47 681.966 L1207.91 681.966 L1207.35 681.966 L1206.8 681.966 L1206.24 681.966 L1205.68 681.966 L1205.12 681.966 L1204.56 681.966 L1204 681.966 L1203.44 681.966 L1202.88 681.966 L1202.32 681.966 L1201.76 681.966 L1201.2 681.966 L1200.64 681.966 L1200.08 681.966 L1199.52 681.966 L1198.97 681.966 L1198.41 681.966 L1197.85 681.966 L1197.29 681.966 L1196.73 681.966 L1196.17 681.966 L1195.61 681.966 L1195.05 681.966 L1194.49 681.966 L1193.93 681.966 L1193.37 681.966 L1192.81 681.966 L1192.25 681.966 L1191.7 681.966 L1191.14 681.966 L1190.58 681.966 L1190.02 681.966 L1189.46 681.966 L1188.9 681.966 L1188.34 681.966 L1187.78 681.966 L1187.22 681.966 L1186.66 681.966 L1186.1 681.966 L1185.54 681.966 L1184.98 681.966 L1184.43 681.966 L1183.87 681.966 L1183.31 681.966 L1182.75 681.966 L1182.19 681.966 L1181.63 681.966 L1181.07 681.966 L1180.51 681.966 L1179.95 681.966 L1179.39 681.966 L1178.83 681.966 L1178.27 681.966 L1177.71 681.966 L1177.15 681.966 L1176.6 681.966 L1176.04 681.966 L1175.48 681.966 L1174.92 681.966 L1174.36 681.966 L1173.8 681.966 L1173.24 681.966 L1172.68 681.966 L1172.12 681.966 L1171.56 681.966 L1171 681.966 L1170.44 681.966 L1169.88 681.966 L1169.33 681.966 L1168.77 681.966 L1168.21 681.966 L1167.65 681.966 L1167.09 681.966 L1166.53 681.966 L1165.97 681.966 L1165.41 681.966 L1164.85 681.966 L1164.29 681.966 L1163.73 681.966 L1163.17 681.966 L1162.61 681.966 L1162.05 681.966 L1161.5 681.966 L1160.94 681.966 L1160.38 681.966 L1159.82 681.966 L1159.26 681.966 L1158.7 681.966 L1158.14 681.966 L1157.58 681.966 L1157.02 681.966 L1156.46 681.966 L1155.9 681.966 L1155.34 681.966 L1154.78 681.966 L1154.23 681.966 L1153.67 681.966 L1153.11 681.966 L1152.55 681.966 L1151.99 681.966 L1151.43 681.966 L1150.87 681.966 L1150.31 681.966 L1149.75 681.966 L1149.19 681.966 L1148.63 681.966 L1148.07 681.966 L1147.51 681.966 L1146.96 681.966 L1146.4 681.966 L1145.84 681.966 L1145.28 681.966 L1144.72 681.966 L1144.16 681.966 L1143.6 681.966 L1143.04 681.966 L1142.48 681.966 L1141.92 681.966 L1141.36 681.966 L1140.8 681.966 L1140.24 681.966 L1139.68 681.966 L1139.13 681.966 L1138.57 681.966 L1138.01 681.966 L1137.45 681.966 L1136.89 681.966 L1136.33 681.966 L1135.77 681.966 L1135.21 681.966 L1134.65 681.966 L1134.09 681.966 L1133.53 681.966 L1132.97 681.966 L1132.41 681.966 L1131.86 681.966 L1131.3 681.966 L1130.74 681.966 L1130.18 681.966 L1129.62 681.966 L1129.06 681.966 L1128.5 681.966 L1127.94 681.966 L1127.38 681.966 L1126.82 681.966 L1126.26 681.966 L1125.7 681.966 L1125.14 681.966 L1124.59 681.966 L1124.03 681.966 L1123.47 681.966 L1122.91 681.966 L1122.35 681.966 L1121.79 681.966 L1121.23 681.966 L1120.67 681.966 L1120.11 681.966 L1119.55 681.966 L1118.99 681.966 L1118.43 681.966 L1117.87 681.966 L1117.31 681.966 L1116.76 681.966 L1116.2 681.966 L1115.64 681.966 L1115.08 681.966 L1114.52 681.966 L1113.96 681.966 L1113.4 681.966 L1112.84 681.966 L1112.28 681.966 L1111.72 681.966 L1111.16 681.966 L1110.6 681.966 L1110.04 681.966 L1109.49 681.966 L1108.93 681.966 L1108.37 681.966 L1107.81 681.966 L1107.25 681.966 L1106.69 681.966 L1106.13 681.966 L1105.57 681.966 L1105.01 681.966 L1104.45 681.966 L1103.89 681.966 L1103.33 681.966 L1102.77 681.966 L1102.22 681.966 L1101.66 681.966 L1101.1 681.966 L1100.54 681.966 L1099.98 681.966 L1099.42 681.966 L1098.86 681.966 L1098.3 681.966 L1097.74 681.966 L1097.18 681.966 L1096.62 681.966 L1096.06 681.966 L1095.5 681.966 L1094.94 681.966 L1094.39 681.966 L1093.83 681.966 L1093.27 681.966 L1092.71 681.966 L1092.15 681.966 L1091.59 681.966 L1091.03 681.966 L1090.47 681.966 L1089.91 681.966 L1089.35 681.966 L1088.79 681.966 L1088.23 681.966 L1087.67 681.966 L1087.12 681.966 L1086.56 681.966 L1086 681.966 L1085.44 681.966 L1084.88 681.966 L1084.32 681.966 L1083.76 681.966 L1083.2 681.966 L1082.64 681.966 L1082.08 681.966 L1081.52 681.966 L1080.96 681.966 L1080.4 681.966 L1079.85 681.966 L1079.29 681.966 L1078.73 681.966 L1078.17 681.966 L1077.61 681.966 L1077.05 681.966 L1076.49 681.966 L1075.93 681.966 L1075.37 681.966 L1074.81 681.966 L1074.25 681.966 L1073.69 681.966 L1073.13 681.966 L1072.57 681.966 L1072.02 681.966 L1071.46 681.966 L1070.9 681.966 L1070.34 681.966 L1069.78 681.966 L1069.22 681.966 L1068.66 681.966 L1068.1 681.966 L1067.54 681.966 L1066.98 681.966 L1066.42 681.966 L1065.86 681.966 L1065.3 681.966 L1064.75 681.966 L1064.19 681.966 L1063.63 681.966 L1063.07 681.966 L1062.51 681.966 L1061.95 681.966 L1061.39 681.966 L1060.83 681.966 L1060.27 681.966 L1059.71 681.966 L1059.15 681.966 L1058.59 681.966 L1058.03 681.966 L1057.48 681.966 L1056.92 681.966 L1056.36 681.966 L1055.8 681.966 L1055.24 681.966 L1054.68 681.966 L1054.12 681.966 L1053.56 681.966 L1053 681.966 L1052.44 681.966 L1051.88 681.966 L1051.32 681.966 L1050.76 681.966 L1050.2 681.966 L1049.65 681.966 L1049.09 681.966 L1048.53 681.966 L1047.97 681.966 L1047.41 681.966 L1046.85 681.966 L1046.29 681.966 L1045.73 681.966 L1045.17 681.966 L1044.61 681.966 L1044.05 681.966 L1043.49 681.966 L1042.93 681.966 L1042.38 681.966 L1041.82 681.966 L1041.26 681.966 L1040.7 681.966 L1040.14 681.966 L1039.58 681.966 L1039.02 681.966 L1038.46 681.966 L1037.9 681.966 L1037.34 681.966 L1036.78 681.966 L1036.22 681.966 L1035.66 681.966 L1035.1 681.966 L1034.55 681.966 L1033.99 681.966 L1033.43 681.966 L1032.87 681.966 L1032.31 681.966 L1031.75 681.966 L1031.19 681.966 L1030.63 681.966 L1030.07 681.966 L1029.51 681.966 L1028.95 681.966 L1028.39 681.966 L1027.83 681.966 L1027.28 681.966 L1026.72 681.966 L1026.16 681.966 L1025.6 681.966 L1025.04 681.966 L1024.48 681.966 L1023.92 681.966 L1023.36 681.966 L1022.8 681.966 L1022.24 681.966 L1021.68 681.966 L1021.12 681.966 L1020.56 681.966 L1020.01 681.966 L1019.45 681.966 L1018.89 681.966 L1018.33 681.966 L1017.77 681.966 L1017.21 681.966 L1016.65 681.966 L1016.09 681.966 L1015.53 681.966 L1014.97 681.966 L1014.41 681.966 L1013.85 681.966 L1013.29 681.966 L1012.73 681.966 L1012.18 681.966 L1011.62 681.966 L1011.06 681.966 L1010.5 681.966 L1009.94 681.966 L1009.38 681.966 L1008.82 681.966 L1008.26 681.966 L1007.7 681.966 L1007.14 681.966 L1006.58 681.966 L1006.02 681.966 L1005.46 681.966 L1004.91 681.966 L1004.35 681.966 L1003.79 681.966 L1003.23 681.966 L1002.67 681.966 L1002.11 681.966 L1001.55 681.966 L1000.99 681.966 L1000.43 681.966 L999.872 681.966 L999.313 681.966 L998.754 681.966 L998.194 681.966 L997.635 681.966 L997.076 681.966 L996.517 681.966 L995.957 681.966 L995.398 681.966 L994.839 681.966 L994.28 681.966 L993.72 681.966 L993.161 681.966 L992.602 681.966 L992.043 681.966 L991.483 681.966 L990.924 681.966 L990.365 681.966 L989.806 681.966 L989.246 681.966 L988.687 681.966 L988.128 681.966 L987.569 681.966 L987.009 681.966 L986.45 681.966 L985.891 681.966 L985.332 681.966 L984.772 681.966 L984.213 681.966 L983.654 681.966 L983.095 681.966 L982.535 681.966 L981.976 681.966 L981.417 681.966 L980.858 681.966 L980.298 681.966 L979.739 681.966 L979.18 681.966 L978.621 681.966 L978.061 681.966 L977.502 681.966 L976.943 681.966 L976.384 681.966 L975.824 681.966 L975.265 681.966 L974.706 681.966 L974.147 681.966 L973.587 681.966 L973.028 681.966 L972.469 681.966 L971.91 681.966 L971.35 681.966 L970.791 681.966 L970.232 681.966 L969.673 681.966 L969.113 681.966 L968.554 681.966 L967.995 681.966 L967.436 681.966 L966.876 681.966 L966.317 681.966 L965.758 681.966 L965.199 681.966 L964.639 681.966 L964.08 681.966 L963.521 681.966 L962.962 681.966 L962.402 681.966 L961.843 681.966 L961.284 681.966 L960.725 681.966 L960.165 681.966 L959.606 681.966 L959.047 681.966 L958.488 681.966 L957.928 681.966 L957.369 681.966 L956.81 681.966 L956.251 681.966 L955.691 681.966 L955.132 681.966 L954.573 681.966 L954.014 681.966 L953.454 681.966 L952.895 681.966 L952.336 681.966 L951.777 681.966 L951.217 681.966 L950.658 681.966 L950.099 681.966 L949.54 681.966 L948.98 681.966 L948.421 681.966 L947.862 681.966 L947.303 681.966 L946.743 681.966 L946.184 681.966 L945.625 681.966 L945.066 681.966 L944.506 681.966 L943.947 681.966 L943.388 681.966 L942.829 681.966 L942.269 681.966 L941.71 681.966 L941.151 681.966 L940.592 681.966 L940.032 681.966 L939.473 681.966 L938.914 681.966 L938.355 681.966 L937.795 681.966 L937.236 681.966 L936.677 681.966 L936.118 681.966 L935.558 681.966 L934.999 681.966 L934.44 681.966 L933.881 681.966 L933.321 681.966 L932.762 681.966 L932.203 681.966 L931.644 681.966 L931.084 681.966 L930.525 681.966 L929.966 681.966 L929.406 681.966 L928.847 681.966 L928.288 681.966 L927.729 681.966 L927.169 681.966 L926.61 681.966 L926.051 681.966 L925.492 681.966 L924.932 681.966 L924.373 681.966 L923.814 681.966 L923.255 681.966 L922.695 681.966 L922.136 681.966 L921.577 681.966 L921.018 681.966 L920.458 681.966 L919.899 681.966 L919.34 681.966 L918.781 681.966 L918.221 681.966 L917.662 681.966 L917.103 681.966 L916.544 681.966 L915.984 681.966 L915.425 681.966 L914.866 681.966 L914.307 681.966 L913.747 681.966 L913.188 681.966 L912.629 681.966 L912.07 681.966 L911.51 681.966 L910.951 681.966 L910.392 681.966 L909.833 681.966 L909.273 681.966 L908.714 681.966 L908.155 681.966 L907.596 681.966 L907.036 681.966 L906.477 681.966 L905.918 681.966 L905.359 681.966 L904.799 681.966 L904.24 681.966 L903.681 681.966 L903.122 681.966 L902.562 681.966 L902.003 681.966 L901.444 681.966 L900.885 681.966 L900.325 681.966 L899.766 681.966 L899.207 681.966 L898.648 681.966 L898.088 681.966 L897.529 681.966 L896.97 681.966 L896.411 681.966 L895.851 681.966 L895.292 681.966 L894.733 681.966 L894.174 681.966 L893.614 681.966 L893.055 681.966 L892.496 681.966 L891.937 681.966 L891.377 681.966 L890.818 681.966 L890.259 681.966 L889.7 681.966 L889.14 681.966 L888.581 681.966 L888.022 681.966 L887.463 681.966 L886.903 681.966 L886.344 681.966 L885.785 681.966 L885.226 681.966 L884.666 681.966 L884.107 681.966 L883.548 681.966 L882.989 681.966 L882.429 681.966 L881.87 681.966 L881.311 681.966 L880.752 681.966 L880.192 681.966 L879.633 681.966 L879.074 681.966 L878.515 681.966 L877.955 681.966 L877.396 681.966 L876.837 681.966 L876.278 681.966 L875.718 681.966 L875.159 681.966 L874.6 681.966 L874.041 681.966 L873.481 681.966 L872.922 681.966 L872.363 681.966 L871.804 681.966 L871.244 681.966 L870.685 681.966 L870.126 681.966 L869.567 681.966 L869.007 681.966 L868.448 681.966 L867.889 681.966 L867.33 681.966 L866.77 681.966 L866.211 681.966 L865.652 681.966 L865.093 681.966 L864.533 681.966 L863.974 681.966 L863.415 681.966 L862.856 681.966 L862.296 681.966 L861.737 681.966 L861.178 681.966 L860.619 681.966 L860.059 681.966 L859.5 681.966 L858.941 681.966 L858.382 681.966 L857.822 681.966 L857.263 681.966 L856.704 681.966 L856.145 681.966 L855.585 681.966 L855.026 681.966 L854.467 681.966 L853.908 681.966 L853.348 681.966 L852.789 681.966 L852.23 681.966 L851.671 681.966 L851.111 681.966 L850.552 681.966 L849.993 681.966 L849.434 681.966 L848.874 681.966 L848.315 681.966 L847.756 681.966 L847.197 681.966 L846.637 681.966 L846.078 681.966 L845.519 681.966 L844.96 681.966 L844.4 681.966 L843.841 681.966 L843.282 681.966 L842.723 681.966 L842.163 681.966 L841.604 681.966 L841.045 681.966 L840.486 681.966 L839.926 681.966 L839.367 681.966 L838.808 681.966 L838.249 681.966 L837.689 681.966 L837.13 681.966 L836.571 681.966 L836.012 681.966 L835.452 681.966 L834.893 681.966 L834.334 681.966 L833.775 681.966 L833.215 681.966 L832.656 681.966 L832.097 681.966 L831.538 681.966 L830.978 681.966 L830.419 681.966 L829.86 681.966 L829.301 681.966 L828.741 681.966 L828.182 681.966 L827.623 681.966 L827.064 681.966 L826.504 681.966 L825.945 681.966 L825.386 681.966 L824.827 681.966 L824.267 681.966 L823.708 681.966 L823.149 681.966 L822.59 681.966 L822.03 681.966 L821.471 681.966 L820.912 681.966 L820.353 681.966 L819.793 681.966 L819.234 681.966 L818.675 681.966 L818.116 681.966 L817.556 681.966 L816.997 681.966 L816.438 681.966 L815.879 681.966 L815.319 681.966 L814.76 681.966 L814.201 681.966 L813.642 681.966 L813.082 681.966 L812.523 681.966 L811.964 681.966 L811.405 681.966 L810.845 681.966 L810.286 681.966 L809.727 681.966 L809.168 681.966 L808.608 681.966 L808.049 681.966 L807.49 681.966 L806.931 681.966 L806.371 681.966 L805.812 681.966 L805.253 681.966 L804.693 681.966 L804.134 681.966 L803.575 681.966 L803.016 681.966 L802.456 681.966 L801.897 681.966 L801.338 681.966 L800.779 681.966 L800.219 681.966 L799.66 681.966 L799.101 681.966 L798.542 681.966 L797.982 681.966 L797.423 681.966 L796.864 681.966 L796.305 681.966 L795.745 681.966 L795.186 681.966 L794.627 681.966 L794.068 681.966 L793.508 681.966 L792.949 681.966 L792.39 681.966 L791.831 681.966 L791.271 681.966 L790.712 681.966 L790.153 681.966 L789.594 681.966 L789.034 681.966 L788.475 681.966 L787.916 681.966 L787.357 681.966 L786.797 681.966 L786.238 681.966 L785.679 681.966 L785.12 681.966 L784.56 681.966 L784.001 681.966 L783.442 681.966 L782.883 681.966 L782.323 681.966 L781.764 681.966 L781.205 681.966 L780.646 681.966 L780.086 681.966 L779.527 681.966 L778.968 681.966 L778.409 681.966 L777.849 681.966 L777.29 681.966 L776.731 681.966 L776.172 681.966 L775.612 681.966 L775.053 681.966 L774.494 681.966 L773.935 681.966 L773.375 681.966 L772.816 681.966 L772.257 681.966 L771.698 681.966 L771.138 681.966 L770.579 681.966 L770.02 681.966 L769.461 681.966 L768.901 681.966 L768.342 681.966 L767.783 681.966 L767.224 681.966 L766.664 681.966 L766.105 681.966 L765.546 681.966 L764.987 681.966 L764.427 681.966 L763.868 681.966 L763.309 681.966 L762.75 681.966 L762.19 681.966 L761.631 681.966 L761.072 681.966 L760.513 681.966 L759.953 681.966 L759.394 681.966 L758.835 681.966 L758.276 681.966 L757.716 681.966 L757.157 681.966 L756.598 681.966 L756.039 681.966 L755.479 681.966 L754.92 681.966 L754.361 681.966 L753.802 681.966 L753.242 681.966 L752.683 681.966 L752.124 681.966 L751.565 681.966 L751.005 681.966 L750.446 681.966 L749.887 681.966 L749.328 681.966 L748.768 681.966 L748.209 681.966 L747.65 681.966 L747.091 681.966 L746.531 681.966 L745.972 681.966 L745.413 681.966 L744.854 681.966 L744.294 681.966 L743.735 681.966 L743.176 681.966 L742.617 681.966 L742.057 681.966 L741.498 681.966 L740.939 681.966 L740.38 681.966 L739.82 681.966 L739.261 681.966 L738.702 681.966 L738.143 681.966 L737.583 681.966 L737.024 681.966 L736.465 681.966 L735.906 681.966 L735.346 681.966 L734.787 681.966 L734.228 681.966 L733.669 681.966 L733.109 681.966 L732.55 681.966 L731.991 681.966 L731.432 681.966 L730.872 681.966 L730.313 681.966 L729.754 681.966 L729.195 681.966 L728.635 681.966 L728.076 681.966 L727.517 681.966 L726.958 681.966 L726.398 681.966 L725.839 681.966 L725.28 681.966 L724.721 681.966 L724.161 681.966 L723.602 681.966 L723.043 681.966 L722.484 681.966 L721.924 681.966 L721.365 681.966 L720.806 681.966 L720.247 681.966  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.563 720.806,683.563 721.365,683.563 721.924,683.563 722.484,683.563 723.043,683.563 723.602,683.563 724.161,683.563 724.721,683.563 725.28,683.563 725.839,683.563 726.398,683.563 726.958,683.563 727.517,683.563 728.076,683.563 728.635,683.563 729.195,683.563 729.754,683.563 730.313,683.563 730.872,683.563 731.432,683.563 731.991,683.563 732.55,683.563 733.109,683.563 733.669,683.563 734.228,683.563 734.787,683.563 735.346,683.563 735.906,683.563 736.465,683.563 737.024,683.563 737.583,683.563 738.143,683.563 738.702,683.563 739.261,683.563 739.82,683.563 740.38,683.563 740.939,683.563 741.498,683.563 742.057,683.563 742.617,683.563 743.176,683.563 743.735,683.563 744.294,683.563 744.854,683.563 745.413,683.563 745.972,683.563 746.531,683.563 747.091,683.563 747.65,683.563 748.209,683.563 748.768,683.563 749.328,683.563 749.887,683.563 750.446,683.563 751.005,683.563 751.565,683.563 752.124,683.563 752.683,683.563 753.242,683.563 753.802,683.563 754.361,683.563 754.92,683.563 755.479,683.563 756.039,683.563 756.598,683.563 757.157,683.563 757.716,683.563 758.276,683.563 758.835,683.563 759.394,683.563 759.953,683.563 760.513,683.563 761.072,683.563 761.631,683.563 762.19,683.563 762.75,683.563 763.309,683.563 763.868,683.563 764.427,683.563 764.987,683.563 765.546,683.563 766.105,683.563 766.664,683.563 767.224,683.563 767.783,683.563 768.342,683.563 768.901,683.563 769.461,683.563 770.02,683.563 770.579,683.563 771.138,683.563 771.698,683.563 772.257,683.563 772.816,683.563 773.375,683.563 773.935,683.563 774.494,683.563 775.053,683.563 775.612,683.563 776.172,683.563 776.731,683.563 777.29,683.563 777.849,683.563 778.409,683.563 778.968,683.563 779.527,683.563 780.086,683.563 780.646,683.563 781.205,683.563 781.764,683.563 782.323,683.563 782.883,683.563 783.442,683.563 784.001,683.563 784.56,683.563 785.12,683.563 785.679,683.563 786.238,683.563 786.797,683.563 787.357,683.563 787.916,683.563 788.475,683.563 789.034,683.563 789.594,683.563 790.153,683.563 790.712,683.563 791.271,683.563 791.831,683.563 792.39,683.563 792.949,683.563 793.508,683.563 794.068,683.563 794.627,683.563 795.186,683.563 795.745,683.563 796.305,683.563 796.864,683.563 797.423,683.563 797.982,683.563 798.542,683.563 799.101,683.563 799.66,683.563 800.219,683.563 800.779,683.563 801.338,683.563 801.897,683.563 802.456,683.563 803.016,683.563 803.575,683.563 804.134,683.563 804.693,683.563 805.253,683.563 805.812,683.563 806.371,683.563 806.931,683.563 807.49,683.563 808.049,683.563 808.608,683.563 809.168,683.563 809.727,683.563 810.286,683.563 810.845,683.563 811.405,683.563 811.964,683.563 812.523,683.563 813.082,683.563 813.642,683.563 814.201,683.563 814.76,683.563 815.319,683.563 815.879,683.563 816.438,683.563 816.997,683.563 817.556,683.563 818.116,683.563 818.675,683.563 819.234,683.563 819.793,683.563 820.353,683.563 820.912,683.563 821.471,683.563 822.03,683.563 822.59,683.563 823.149,683.563 823.708,683.563 824.267,683.563 824.827,683.563 825.386,683.563 825.945,683.563 826.504,683.563 827.064,683.563 827.623,683.563 828.182,683.563 828.741,683.563 829.301,683.563 829.86,683.563 830.419,683.563 830.978,683.563 831.538,683.563 832.097,683.563 832.656,683.563 833.215,683.563 833.775,683.563 834.334,683.563 834.893,683.563 835.452,683.563 836.012,683.563 836.571,683.563 837.13,683.563 837.689,683.563 838.249,683.563 838.808,683.563 839.367,683.563 839.926,683.563 840.486,683.563 841.045,683.563 841.604,683.563 842.163,683.563 842.723,683.563 843.282,683.563 843.841,683.563 844.4,683.563 844.96,683.563 845.519,683.563 846.078,683.563 846.637,683.563 847.197,683.563 847.756,683.563 848.315,683.563 848.874,683.563 849.434,683.563 849.993,683.563 850.552,683.563 851.111,683.563 851.671,683.563 852.23,683.563 852.789,683.563 853.348,683.563 853.908,683.563 854.467,683.563 855.026,683.563 855.585,683.563 856.145,683.563 856.704,683.563 857.263,683.563 857.822,683.563 858.382,683.563 858.941,683.563 859.5,683.563 860.059,683.563 860.619,683.563 861.178,683.563 861.737,683.563 862.296,683.563 862.856,683.563 863.415,683.563 863.974,683.563 864.533,683.563 865.093,683.563 865.652,683.563 866.211,683.563 866.77,683.563 867.33,683.563 867.889,683.563 868.448,683.563 869.007,683.563 869.567,683.563 870.126,683.563 870.685,683.563 871.244,683.563 871.804,683.563 872.363,683.563 872.922,683.563 873.481,683.563 874.041,683.563 874.6,683.563 875.159,683.563 875.718,683.563 876.278,683.563 876.837,683.563 877.396,683.563 877.955,683.563 878.515,683.563 879.074,683.563 879.633,683.563 880.192,683.563 880.752,683.563 881.311,683.563 881.87,683.563 882.429,683.563 882.989,683.563 883.548,683.563 884.107,683.563 884.666,683.563 885.226,683.563 885.785,683.563 886.344,683.563 886.903,683.563 887.463,683.563 888.022,683.563 888.581,683.563 889.14,683.563 889.7,683.563 890.259,683.563 890.818,683.563 891.377,683.563 891.937,683.563 892.496,683.563 893.055,683.563 893.614,683.563 894.174,683.563 894.733,683.563 895.292,683.563 895.851,683.563 896.411,683.563 896.97,683.563 897.529,683.563 898.088,683.563 898.648,683.563 899.207,683.563 899.766,683.563 900.325,683.563 900.885,683.563 901.444,683.563 902.003,683.563 902.562,683.563 903.122,683.563 903.681,683.563 904.24,683.563 904.799,683.563 905.359,683.563 905.918,683.563 906.477,683.563 907.036,683.563 907.596,683.563 908.155,683.563 908.714,683.563 909.273,683.563 909.833,683.563 910.392,683.563 910.951,683.563 911.51,683.563 912.07,683.563 912.629,683.563 913.188,683.563 913.747,683.563 914.307,683.563 914.866,683.563 915.425,683.563 915.984,683.563 916.544,683.563 917.103,683.563 917.662,683.563 918.221,683.563 918.781,683.563 919.34,683.563 919.899,683.563 920.458,683.563 921.018,683.563 921.577,683.563 922.136,683.563 922.695,683.563 923.255,683.563 923.814,683.563 924.373,683.563 924.932,683.563 925.492,683.563 926.051,683.563 926.61,683.563 927.169,683.563 927.729,683.563 928.288,683.563 928.847,683.563 929.406,683.563 929.966,683.563 930.525,683.563 931.084,683.563 931.644,683.563 932.203,683.563 932.762,683.563 933.321,683.563 933.881,683.563 934.44,683.563 934.999,683.563 935.558,683.563 936.118,683.563 936.677,683.563 937.236,683.563 937.795,683.563 938.355,683.563 938.914,683.563 939.473,683.563 940.032,683.563 940.592,683.563 941.151,683.563 941.71,683.563 942.269,683.563 942.829,683.563 943.388,683.563 943.947,683.563 944.506,683.563 945.066,683.563 945.625,683.563 946.184,683.563 946.743,683.563 947.303,683.563 947.862,683.563 948.421,683.563 948.98,683.563 949.54,683.563 950.099,683.563 950.658,683.563 951.217,683.563 951.777,683.563 952.336,683.563 952.895,683.563 953.454,683.563 954.014,683.563 954.573,683.563 955.132,683.563 955.691,683.563 956.251,683.563 956.81,683.563 957.369,683.563 957.928,683.563 958.488,683.563 959.047,683.563 959.606,683.563 960.165,683.563 960.725,683.563 961.284,683.563 961.843,683.563 962.402,683.563 962.962,683.563 963.521,683.563 964.08,683.563 964.639,683.563 965.199,683.563 965.758,683.563 966.317,683.563 966.876,683.563 967.436,683.563 967.995,683.563 968.554,683.563 969.113,683.563 969.673,683.563 970.232,683.563 970.791,683.563 971.35,683.563 971.91,683.563 972.469,683.563 973.028,683.563 973.587,683.563 974.147,683.563 974.706,683.563 975.265,683.563 975.824,683.563 976.384,683.563 976.943,683.563 977.502,683.563 978.061,683.563 978.621,683.563 979.18,683.563 979.739,683.563 980.298,683.563 980.858,683.563 981.417,683.563 981.976,683.563 982.535,683.563 983.095,683.563 983.654,683.563 984.213,683.563 984.772,683.563 985.332,683.563 985.891,683.563 986.45,683.563 987.009,683.563 987.569,683.563 988.128,683.563 988.687,683.563 989.246,683.563 989.806,683.563 990.365,683.563 990.924,683.563 991.483,683.563 992.043,683.563 992.602,683.563 993.161,683.563 993.72,683.563 994.28,683.563 994.839,683.563 995.398,683.563 995.957,683.563 996.517,683.563 997.076,683.563 997.635,683.563 998.194,683.563 998.754,683.563 999.313,683.563 999.872,683.563 1000.43,683.563 1000.99,683.563 1001.55,683.563 1002.11,683.563 1002.67,683.563 1003.23,683.563 1003.79,683.563 1004.35,683.563 1004.91,683.563 1005.46,683.563 1006.02,683.563 1006.58,683.563 1007.14,683.563 1007.7,683.563 1008.26,683.563 1008.82,683.563 1009.38,683.563 1009.94,683.563 1010.5,683.563 1011.06,683.563 1011.62,683.563 1012.18,683.563 1012.73,683.563 1013.29,683.563 1013.85,683.563 1014.41,683.563 1014.97,683.563 1015.53,683.563 1016.09,683.563 1016.65,683.563 1017.21,683.563 1017.77,683.563 1018.33,683.563 1018.89,683.563 1019.45,683.563 1020.01,683.563 1020.56,683.563 1021.12,683.563 1021.68,683.563 1022.24,683.563 1022.8,683.563 1023.36,683.563 1023.92,683.563 1024.48,683.563 1025.04,683.563 1025.6,683.563 1026.16,683.563 1026.72,683.563 1027.28,683.563 1027.83,683.563 1028.39,683.563 1028.95,683.563 1029.51,683.563 1030.07,683.563 1030.63,683.563 1031.19,683.563 1031.75,683.563 1032.31,683.563 1032.87,683.563 1033.43,683.563 1033.99,683.563 1034.55,683.563 1035.1,683.563 1035.66,683.563 1036.22,683.563 1036.78,683.563 1037.34,683.563 1037.9,683.563 1038.46,683.563 1039.02,683.563 1039.58,683.563 1040.14,683.563 1040.7,683.563 1041.26,683.563 1041.82,683.563 1042.38,683.563 1042.93,683.563 1043.49,683.563 1044.05,683.563 1044.61,683.563 1045.17,683.563 1045.73,683.563 1046.29,683.563 1046.85,683.563 1047.41,683.563 1047.97,683.563 1048.53,683.563 1049.09,683.563 1049.65,683.563 1050.2,683.563 1050.76,683.563 1051.32,683.563 1051.88,683.563 1052.44,683.563 1053,683.563 1053.56,683.563 1054.12,683.563 1054.68,683.563 1055.24,683.563 1055.8,683.563 1056.36,683.563 1056.92,683.563 1057.48,683.563 1058.03,683.563 1058.59,683.563 1059.15,683.563 1059.71,683.563 1060.27,683.563 1060.83,683.563 1061.39,683.563 1061.95,683.563 1062.51,683.563 1063.07,683.563 1063.63,683.563 1064.19,683.563 1064.75,683.563 1065.3,683.563 1065.86,683.563 1066.42,683.563 1066.98,683.563 1067.54,683.563 1068.1,683.563 1068.66,683.563 1069.22,683.563 1069.78,683.563 1070.34,683.563 1070.9,683.563 1071.46,683.563 1072.02,683.563 1072.57,683.563 1073.13,683.563 1073.69,683.563 1074.25,683.563 1074.81,683.563 1075.37,683.563 1075.93,683.563 1076.49,683.563 1077.05,683.563 1077.61,683.563 1078.17,683.563 1078.73,683.563 1079.29,683.563 1079.85,683.563 1080.4,683.563 1080.96,683.563 1081.52,683.563 1082.08,683.563 1082.64,683.563 1083.2,683.563 1083.76,683.563 1084.32,683.563 1084.88,683.563 1085.44,683.563 1086,683.563 1086.56,683.563 1087.12,683.563 1087.67,683.563 1088.23,683.563 1088.79,683.563 1089.35,683.563 1089.91,683.563 1090.47,683.563 1091.03,683.563 1091.59,683.563 1092.15,683.563 1092.71,683.563 1093.27,683.563 1093.83,683.563 1094.39,683.563 1094.94,683.563 1095.5,683.563 1096.06,683.563 1096.62,683.563 1097.18,683.563 1097.74,683.563 1098.3,683.563 1098.86,683.563 1099.42,683.563 1099.98,683.563 1100.54,683.563 1101.1,683.563 1101.66,683.563 1102.22,683.563 1102.77,683.563 1103.33,683.563 1103.89,683.563 1104.45,683.563 1105.01,683.563 1105.57,683.563 1106.13,683.563 1106.69,683.563 1107.25,683.563 1107.81,683.563 1108.37,683.563 1108.93,683.563 1109.49,683.563 1110.04,683.563 1110.6,683.563 1111.16,683.563 1111.72,683.563 1112.28,683.563 1112.84,683.563 1113.4,683.563 1113.96,683.563 1114.52,683.563 1115.08,683.563 1115.64,683.563 1116.2,683.563 1116.76,683.563 1117.31,683.563 1117.87,683.563 1118.43,683.563 1118.99,683.563 1119.55,683.563 1120.11,683.563 1120.67,683.563 1121.23,683.563 1121.79,683.563 1122.35,683.563 1122.91,683.563 1123.47,683.563 1124.03,683.563 1124.59,683.563 1125.14,683.563 1125.7,683.563 1126.26,683.563 1126.82,683.563 1127.38,683.563 1127.94,683.563 1128.5,683.563 1129.06,683.563 1129.62,683.563 1130.18,683.563 1130.74,683.563 1131.3,683.563 1131.86,683.563 1132.41,683.563 1132.97,683.563 1133.53,683.563 1134.09,683.563 1134.65,683.563 1135.21,683.563 1135.77,683.563 1136.33,683.563 1136.89,683.563 1137.45,683.563 1138.01,683.563 1138.57,683.563 1139.13,683.563 1139.68,683.563 1140.24,683.563 1140.8,683.563 1141.36,683.563 1141.92,683.563 1142.48,683.563 1143.04,683.563 1143.6,683.563 1144.16,683.563 1144.72,683.563 1145.28,683.563 1145.84,683.563 1146.4,683.563 1146.96,683.563 1147.51,683.563 1148.07,683.563 1148.63,683.563 1149.19,683.563 1149.75,683.563 1150.31,683.563 1150.87,683.563 1151.43,683.563 1151.99,683.563 1152.55,683.563 1153.11,683.563 1153.67,683.563 1154.23,683.563 1154.78,683.563 1155.34,683.563 1155.9,683.563 1156.46,683.563 1157.02,683.563 1157.58,683.563 1158.14,683.563 1158.7,683.563 1159.26,683.563 1159.82,683.563 1160.38,683.563 1160.94,683.563 1161.5,683.563 1162.05,683.563 1162.61,683.563 1163.17,683.563 1163.73,683.563 1164.29,683.563 1164.85,683.563 1165.41,683.563 1165.97,683.563 1166.53,683.563 1167.09,683.563 1167.65,683.563 1168.21,683.563 1168.77,683.563 1169.33,683.563 1169.88,683.563 1170.44,683.563 1171,683.563 1171.56,683.563 1172.12,683.563 1172.68,683.563 1173.24,683.563 1173.8,683.563 1174.36,683.563 1174.92,683.563 1175.48,683.563 1176.04,683.563 1176.6,683.563 1177.15,683.563 1177.71,683.563 1178.27,683.563 1178.83,683.563 1179.39,683.563 1179.95,683.563 1180.51,683.563 1181.07,683.563 1181.63,683.563 1182.19,683.563 1182.75,683.563 1183.31,683.563 1183.87,683.563 1184.43,683.563 1184.98,683.563 1185.54,683.563 1186.1,683.563 1186.66,683.563 1187.22,683.563 1187.78,683.563 1188.34,683.563 1188.9,683.563 1189.46,683.563 1190.02,683.563 1190.58,683.563 1191.14,683.563 1191.7,683.563 1192.25,683.563 1192.81,683.563 1193.37,683.563 1193.93,683.563 1194.49,683.563 1195.05,683.563 1195.61,683.563 1196.17,683.563 1196.73,683.563 1197.29,683.563 1197.85,683.563 1198.41,683.563 1198.97,683.563 1199.52,683.563 1200.08,683.563 1200.64,683.563 1201.2,683.563 1201.76,683.563 1202.32,683.563 1202.88,683.563 1203.44,683.563 1204,683.563 1204.56,683.563 1205.12,683.563 1205.68,683.563 1206.24,683.563 1206.8,683.563 1207.35,683.563 1207.91,683.563 1208.47,683.563 1209.03,683.563 1209.59,683.563 1210.15,683.563 1210.71,683.563 1211.27,683.563 1211.83,683.563 1212.39,683.563 1212.95,683.563 1213.51,683.563 1214.07,683.563 1214.62,683.563 1215.18,683.563 1215.74,683.563 1216.3,683.563 1216.86,683.563 1217.42,683.563 1217.98,683.563 1218.54,683.563 1219.1,683.563 1219.66,683.563 1220.22,683.563 1220.78,683.563 1221.34,683.563 1221.89,683.563 1222.45,683.563 1223.01,683.563 1223.57,683.563 1224.13,683.563 1224.69,683.563 1225.25,683.563 1225.81,683.563 1226.37,683.563 1226.93,683.563 1227.49,683.563 1228.05,683.563 1228.61,683.563 1229.17,683.563 1229.72,683.563 1230.28,683.563 1230.84,683.563 1231.4,683.563 1231.96,683.563 1232.52,683.563 1233.08,683.563 1233.64,683.563 1234.2,683.563 1234.76,683.563 1235.32,683.563 1235.88,683.563 1236.44,683.563 1236.99,683.563 1237.55,683.563 1238.11,683.563 1238.67,683.563 1239.23,683.563 1239.79,683.563 1240.35,683.563 1240.91,683.563 1241.47,683.563 1242.03,683.563 1242.59,683.563 1243.15,683.563 1243.71,683.563 1244.26,683.563 1244.82,683.563 1245.38,683.563 1245.94,683.563 1246.5,683.563 1247.06,683.563 1247.62,683.563 1248.18,683.563 1248.74,683.563 1249.3,683.563 1249.86,683.563 1250.42,683.563 1250.98,683.563 1251.54,683.563 1252.09,683.563 1252.65,683.563 1253.21,683.563 1253.77,683.563 1254.33,683.563 1254.89,683.563 1255.45,683.563 1256.01,683.563 1256.57,683.563 1257.13,683.563 1257.69,683.563 1258.25,683.563 1258.81,683.563 1259.36,683.563 1259.92,683.563 1260.48,683.563 1261.04,683.563 1261.6,683.563 1262.16,683.563 1262.72,683.563 1263.28,683.563 1263.84,683.563 1264.4,683.563 1264.96,683.563 1265.52,683.563 1266.08,683.563 1266.63,683.563 1267.19,683.563 1267.75,683.563 1268.31,683.563 1268.87,683.563 1269.43,683.563 1269.99,683.563 1270.55,683.563 1271.11,683.563 1271.67,683.563 1272.23,683.563 1272.79,683.563 1273.35,683.563 1273.91,683.563 1274.46,683.563 1275.02,683.563 1275.58,683.563 1276.14,683.563 1276.7,683.563 1277.26,683.563 1277.82,683.563 1278.38,683.563 1278.94,683.563 1279.5,683.563 1280.06,683.563 1280.62,683.563 1281.18,683.563 1281.73,683.563 1282.29,683.563 1282.85,683.563 1283.41,683.563 1283.97,683.563 1284.53,683.563 1285.09,683.563 1285.65,683.563 1286.21,683.563 1286.77,683.563 1287.33,683.563 1287.89,683.563 1288.45,683.563 1289,683.563 1289.56,683.563 1290.12,683.563 1290.68,683.563 1291.24,683.563 1291.8,683.563 1292.36,683.563 1292.92,683.563 1293.48,683.563 1294.04,683.563 1294.6,683.563 1295.16,683.563 1295.72,683.563 1296.28,683.563 1296.83,683.563 1297.39,683.563 1297.95,683.563 1298.51,683.563 1299.07,683.563 1299.63,683.563 1300.19,683.563 1300.75,683.563 1301.31,683.563 1301.87,683.563 1302.43,683.563 1302.99,683.563 1303.55,683.563 1304.1,683.563 1304.66,683.563 1305.22,683.563 1305.78,683.563 1306.34,683.563 1306.9,683.563 1307.46,683.563 1308.02,683.563 1308.58,683.563 1309.14,683.563 1309.7,683.563 1310.26,683.563 1310.82,683.563 1311.38,683.563 1311.93,683.563 1312.49,683.563 1313.05,683.563 1313.61,683.563 1314.17,683.563 1314.73,683.563 1315.29,683.563 1315.85,683.563 1316.41,683.563 1316.97,683.563 1317.53,683.563 1318.09,683.563 1318.65,683.563 1319.2,683.563 1319.76,683.563 1320.32,683.563 1320.88,683.563 1321.44,683.563 1322,683.563 1322.56,683.563 1323.12,683.563 1323.68,683.563 1324.24,683.563 1324.8,683.563 1325.36,683.563 1325.92,683.563 1326.47,683.563 1327.03,683.563 1327.59,683.563 1328.15,683.563 1328.71,683.563 1329.27,683.563 1329.83,683.563 1330.39,683.563 1330.95,683.563 1331.51,683.563 1332.07,683.563 1332.63,683.563 1333.19,683.563 1333.75,683.563 1334.3,683.563 1334.86,683.563 1335.42,683.563 1335.98,683.563 1336.54,683.563 1337.1,683.563 1337.66,683.563 1338.22,683.563 1338.78,683.563 1339.34,683.563 1339.9,683.563 1340.46,683.563 1341.02,683.563 1341.57,683.563 1342.13,683.563 1342.69,683.563 1343.25,683.563 1343.81,683.563 1344.37,683.563 1344.93,683.563 1345.49,683.563 1346.05,683.563 1346.61,683.563 1347.17,683.563 1347.73,683.563 1348.29,683.563 1348.84,683.563 1349.4,683.563 1349.96,683.563 1350.52,683.563 1351.08,683.563 1351.64,683.563 1352.2,683.563 1352.76,683.563 1353.32,683.563 1353.88,683.563 1354.44,683.563 1355,683.563 1355.56,683.563 1356.12,683.563 1356.67,683.563 1357.23,683.563 1357.79,683.563 1358.35,683.563 1358.91,683.563 1359.47,683.563 1360.03,683.563 1360.59,683.563 1361.15,683.563 1361.71,683.563 1362.27,683.563 1362.83,683.563 1363.39,683.563 1363.94,683.563 1364.5,683.563 1365.06,683.563 1365.62,683.563 1366.18,683.563 1366.74,683.563 1367.3,683.563 1367.86,683.563 1368.42,683.563 1368.98,683.563 1369.54,683.563 1370.1,683.563 1370.66,683.563 1371.21,683.563 1371.77,683.563 1372.33,683.563 1372.89,683.563 1373.45,683.563 1374.01,683.563 1374.57,683.563 1375.13,683.563 1375.69,683.563 1376.25,683.563 1376.81,683.563 1377.37,683.563 1377.93,683.563 1378.49,683.563 1379.04,683.563 1379.6,683.563 1380.16,683.563 1380.72,683.563 1381.28,683.563 1381.84,683.563 1382.4,683.563 1382.96,683.563 1383.52,683.563 1384.08,683.563 1384.64,683.563 1385.2,683.563 1385.76,683.563 1386.31,683.563 1386.87,683.563 1387.43,683.563 1387.99,683.563 1388.55,683.563 1389.11,683.563 1389.67,683.563 1390.23,683.563 1390.79,683.563 1391.35,683.563 1391.91,683.563 1392.47,683.563 1393.03,683.563 1393.58,683.563 1394.14,683.563 1394.7,683.563 1395.26,683.563 1395.82,683.563 1396.38,683.563 1396.94,683.563 1397.5,683.563 1398.06,683.563 1398.62,683.563 1399.18,683.563 1399.74,683.563 1400.3,683.563 1400.86,683.563 1401.41,683.563 1401.97,683.563 1402.53,683.563 1403.09,683.563 1403.65,683.563 1404.21,683.563 1404.77,683.563 1405.33,683.563 1405.89,683.563 1406.45,683.563 1407.01,683.563 1407.57,683.563 1408.13,683.563 1408.68,683.563 1409.24,683.563 1409.8,683.563 1410.36,683.563 1410.92,683.563 1411.48,683.563 1412.04,683.563 1412.6,683.563 1413.16,683.563 1413.72,683.563 1414.28,683.563 1414.84,683.563 1415.4,683.563 1415.95,683.563 1416.51,683.563 1417.07,683.563 1417.63,683.563 1418.19,683.563 1418.75,683.563 1419.31,683.563 1419.87,683.563 1420.43,683.563 1420.99,683.563 1421.55,683.563 1422.11,683.563 1422.67,683.563 1423.23,683.563 1423.78,683.563 1424.34,683.563 1424.9,683.563 1425.46,683.563 1426.02,683.563 1426.58,683.563 1427.14,683.563 1427.7,683.563 1428.26,683.563 1428.82,683.563 1429.38,683.563 1429.94,683.563 1430.5,683.563 1431.05,683.563 1431.61,683.563 1432.17,683.563 1432.73,683.563 1433.29,683.563 1433.85,683.563 1434.41,683.563 1434.97,683.563 1435.53,683.563 1436.09,683.563 1436.65,683.563 1437.21,683.563 1437.77,683.563 1438.33,683.563 1438.88,683.563 1439.44,683.563 1440,683.563 1440.56,683.563 1441.12,683.563 1441.68,683.563 1442.24,683.563 1442.8,683.563 1443.36,683.563 1443.92,683.563 1444.48,683.563 1445.04,683.563 1445.6,683.563 1446.15,683.563 1446.71,683.563 1447.27,683.563 1447.83,683.563 1448.39,683.563 1448.95,683.563 1449.51,683.563 1450.07,683.563 1450.63,683.563 1451.19,683.563 1451.75,683.563 1452.31,683.563 1452.87,683.563 1453.42,683.563 1453.98,683.563 1454.54,683.563 1455.1,683.563 1455.66,683.563 1456.22,683.563 1456.78,683.563 1457.34,683.563 1457.9,683.563 1458.46,683.563 1459.02,683.563 1459.58,683.563 1460.14,683.563 1460.7,683.563 1461.25,683.563 1461.81,683.563 1462.37,683.563 1462.93,683.563 1463.49,683.563 1464.05,683.563 1464.61,683.563 1465.17,683.563 1465.73,683.563 1466.29,683.563 1466.85,683.563 1467.41,683.563 1467.97,683.563 1468.52,683.563 1469.08,683.563 1469.64,683.563 1470.2,683.563 1470.76,683.563 1471.32,683.563 1471.88,683.563 1472.44,683.563 1473,683.563 1473.56,683.563 1474.12,683.563 1474.68,683.563 1475.24,683.563 1475.79,683.563 1476.35,683.563 1476.91,683.563 1477.47,683.563 1478.03,683.563 1478.59,683.563 1479.15,683.563 1479.71,683.563 1480.27,683.563 1480.83,683.563 1481.39,683.563 1481.95,683.563 1482.51,683.563 1483.07,683.563 1483.62,683.563 1484.18,683.563 1484.74,683.563 1485.3,683.563 1485.86,683.563 1486.42,683.563 1486.98,683.563 1487.54,683.563 1488.1,683.563 1488.66,683.563 1489.22,683.563 1489.78,683.563 1490.34,683.563 1490.89,683.563 1491.45,683.563 1492.01,683.563 1492.57,683.563 1493.13,683.563 1493.69,683.563 1494.25,683.563 1494.81,683.563 1495.37,683.563 1495.93,683.563 1496.49,683.563 1497.05,683.563 1497.61,683.563 1498.16,683.563 1498.72,683.563 1499.28,683.563 1499.84,683.563 1500.4,683.563 1500.96,683.563 1501.52,683.563 1502.08,683.563 1502.64,683.563 1503.2,683.563 1503.76,683.563 1504.32,683.563 1504.88,683.563 1505.44,683.563 1505.99,683.563 1506.55,683.563 1507.11,683.563 1507.67,683.563 1508.23,683.563 1508.79,683.563 1509.35,683.563 1509.91,683.563 1510.47,683.563 1511.03,683.563 1511.59,683.563 1512.15,683.563 1512.71,683.563 1513.26,683.563 1513.82,683.563 1514.38,683.563 1514.94,683.563 1515.5,683.563 1516.06,683.563 1516.62,683.563 1517.18,683.563 1517.74,683.563 1518.3,683.563 1518.86,683.563 1519.42,683.563 1519.98,683.563 1520.53,683.563 1521.09,683.563 1521.65,683.563 1522.21,683.563 1522.77,683.563 1523.33,683.563 1523.89,683.563 1524.45,683.563 1525.01,683.563 1525.57,683.563 1526.13,683.563 1526.69,683.563 1527.25,683.563 1527.81,683.563 1528.36,683.563 1528.92,683.563 1529.48,683.563 1530.04,683.563 1530.6,683.563 1531.16,683.563 1531.72,683.563 1532.28,683.563 1532.84,683.563 1533.4,683.563 1533.96,683.563 1534.52,683.563 1535.08,683.563 1535.63,683.563 1536.19,683.563 1536.75,683.563 1537.31,683.563 1537.87,683.563 1538.43,683.563 1538.99,683.563 1539.55,683.563 1540.11,683.563 1540.67,683.563 1541.23,683.563 1541.79,683.563 1542.35,683.563 1542.9,683.563 1543.46,683.563 1544.02,683.563 1544.58,683.563 1545.14,683.563 1545.7,683.563 1546.26,683.563 1546.82,683.563 1547.38,683.563 1547.94,683.563 1548.5,683.563 1549.06,683.563 1549.62,683.563 1550.18,683.563 1550.73,683.563 1551.29,683.563 1551.85,683.563 1552.41,683.563 1552.97,683.563 1553.53,683.563 1554.09,683.563 1554.65,683.563 1555.21,683.563 1555.77,683.563 1556.33,683.563 1556.89,683.563 1557.45,683.563 1558,683.563 1558.56,683.563 1559.12,683.563 1559.68,683.563 1560.24,683.563 1560.8,683.563 1561.36,683.563 1561.92,683.563 1562.48,683.563 1563.04,683.563 1563.6,683.563 1564.16,683.563 1564.72,683.563 1565.28,683.563 1565.83,683.563 1566.39,683.563 1566.95,683.563 1567.51,683.563 1568.07,683.563 1568.63,683.563 1569.19,683.563 1569.75,683.563 1570.31,683.563 1570.87,683.563 1571.43,683.563 1571.99,683.563 1572.55,683.563 1573.1,683.563 1573.66,683.563 1574.22,683.563 1574.78,683.563 1575.34,683.563 1575.9,683.563 1576.46,683.563 1577.02,683.563 1577.58,683.563 1578.14,683.563 1578.7,683.563 1579.26,683.563 1579.82,683.563 1580.37,683.563 1580.93,683.563 1581.49,683.563 1582.05,683.563 1582.61,683.563 1583.17,683.563 1583.73,683.563 1584.29,683.563 1584.85,683.563 1585.41,683.563 1585.97,683.563 1586.53,683.563 1587.09,683.563 1587.65,683.563 1588.2,683.563 1588.76,683.563 1589.32,683.563 1589.88,683.563 1590.44,683.563 1591,683.563 1591.56,683.563 1592.12,683.563 1592.68,683.563 1593.24,683.563 1593.8,683.563 1594.36,683.563 1594.92,683.563 1595.47,683.563 1596.03,683.563 1596.59,683.563 1597.15,683.563 1597.71,683.563 1598.27,683.563 1598.83,683.563 1599.39,683.563 1599.95,683.563 1600.51,683.563 1601.07,683.563 1601.63,683.563 1602.19,683.563 1602.74,683.563 1603.3,683.563 1603.86,683.563 1604.42,683.563 1604.98,683.563 1605.54,683.563 1606.1,683.563 1606.66,683.563 1607.22,683.563 1607.78,683.563 1608.34,683.563 1608.9,683.563 1609.46,683.563 1610.02,683.563 1610.57,683.563 1611.13,683.563 1611.69,683.563 1612.25,683.563 1612.81,683.563 1613.37,683.563 1613.93,683.563 1614.49,683.563 1615.05,683.563 1615.61,683.563 1616.17,683.563 1616.73,683.563 1617.29,683.563 1617.84,683.563 1618.4,683.563 1618.96,683.563 1619.52,683.563 1620.08,683.563 1620.64,683.563 1621.2,683.563 1621.76,683.563 1622.32,683.563 1622.88,683.563 1623.44,683.563 1624,683.563 1624.56,683.563 1625.11,683.563 1625.67,683.563 1626.23,683.563 1626.79,683.563 1627.35,683.563 1627.91,683.563 1628.47,683.563 1629.03,683.563 1629.59,683.563 1630.15,683.563 1630.71,683.563 1631.27,683.563 1631.83,683.563 1632.39,683.563 1632.94,683.563 1633.5,683.563 1634.06,683.563 1634.62,683.563 1635.18,683.563 1635.74,683.563 1636.3,683.563 1636.86,683.563 1637.42,683.563 1637.98,683.563 1638.54,683.563 1639.1,683.563 1639.66,683.563 1640.21,683.563 1640.77,683.563 1641.33,683.563 1641.89,683.563 1642.45,683.563 1643.01,683.563 1643.57,683.563 1644.13,683.563 1644.69,683.563 1645.25,683.563 1645.81,683.563 1646.37,683.563 1646.93,683.563 1647.48,683.563 1648.04,683.563 1648.6,683.563 1649.16,683.563 1649.72,683.563 1650.28,683.563 1650.84,683.563 1651.4,683.563 1651.96,683.563 1652.52,683.563 1653.08,683.563 1653.64,683.563 1654.2,683.563 1654.76,683.563 1655.31,683.563 1655.87,683.563 1656.43,683.563 1656.99,683.563 1657.55,683.563 1658.11,683.563 1658.67,683.563 1659.23,683.563 1659.79,683.563 1660.35,683.563 1660.91,683.563 1661.47,683.563 1662.03,683.563 1662.58,683.563 1663.14,683.563 1663.7,683.563 1664.26,683.563 1664.82,683.563 1665.38,683.563 1665.94,683.563 1666.5,683.563 1667.06,683.563 1667.62,683.563 1668.18,683.563 1668.74,683.563 1669.3,683.563 1669.85,683.563 1670.41,683.563 1670.97,683.563 1671.53,683.563 1672.09,683.563 1672.65,683.563 1673.21,683.563 1673.77,683.563 1674.33,683.563 1674.89,683.563 1675.45,683.563 1676.01,683.563 1676.57,683.563 1677.13,683.563 1677.68,683.563 1678.24,683.563 1678.8,683.563 1679.36,683.563 1679.92,683.563 1680.48,683.563 1681.04,683.563 1681.6,683.563 1682.16,683.563 1682.72,683.563 1683.28,683.563 1683.84,683.563 1684.4,683.563 1684.95,683.563 1685.51,683.563 1686.07,683.563 1686.63,683.563 1687.19,683.563 1687.75,683.563 1688.31,683.563 1688.87,683.563 1689.43,683.563 1689.99,683.563 1690.55,683.563 1691.11,683.563 1691.67,683.563 1692.23,683.563 1692.78,683.563 1693.34,683.563 1693.9,683.563 1694.46,683.563 1695.02,683.563 1695.58,683.563 1696.14,683.563 1696.7,683.563 1697.26,683.563 1697.82,683.563 1698.38,683.563 1698.94,683.563 1699.5,683.563 1700.05,683.563 1700.61,683.563 1701.17,683.563 1701.73,683.563 1702.29,683.563 1702.85,683.563 1703.41,683.563 1703.97,683.563 1704.53,683.563 1705.09,683.563 1705.65,683.563 1706.21,683.563 1706.77,683.563 1707.32,683.563 1707.88,683.563 1708.44,683.563 1709,683.563 1709.56,683.563 1710.12,683.563 1710.68,683.563 1711.24,683.563 1711.8,683.563 1712.36,683.563 1712.92,683.563 1713.48,683.563 1714.04,683.563 1714.6,683.563 1715.15,683.563 1715.71,683.563 1716.27,683.563 1716.83,683.563 1717.39,683.563 1717.95,683.563 1718.51,683.563 1719.07,683.563 1719.63,683.563 1720.19,683.563 1720.75,683.563 1721.31,683.563 1721.87,683.563 1722.42,683.563 1722.98,683.563 1723.54,683.563 1724.1,683.563 1724.66,683.563 1725.22,683.563 1725.78,683.563 1726.34,683.563 1726.9,683.563 1727.46,683.563 1728.02,683.563 1728.58,683.563 1729.14,683.563 1729.69,683.563 1730.25,683.563 1730.81,683.563 1731.37,683.563 1731.93,683.563 1732.49,683.563 1733.05,683.563 1733.61,683.563 1734.17,683.563 1734.73,683.563 1735.29,683.563 1735.85,683.563 1736.41,683.563 1736.97,683.563 1737.52,683.563 1738.08,683.563 1738.64,683.563 1739.2,683.563 1739.76,683.563 1740.32,683.563 1740.88,683.563 1741.44,683.563 1742,683.563 1742.56,683.563 1743.12,683.563 1743.68,683.563 1744.24,683.563 1744.79,683.563 1745.35,683.563 1745.91,683.563 1746.47,683.563 1747.03,683.563 1747.59,683.563 1748.15,683.563 1748.71,683.563 1749.27,683.563 1749.83,683.563 1750.39,683.563 1750.95,683.563 1751.51,683.563 1752.06,683.563 1752.62,683.563 1753.18,683.563 1753.74,683.563 1754.3,683.563 1754.86,683.563 1755.42,683.563 1755.98,683.563 1756.54,683.563 1757.1,683.563 1757.66,683.563 1758.22,683.563 1758.78,683.563 1759.34,683.563 1759.89,683.563 1760.45,683.563 1761.01,683.563 1761.57,683.563 1762.13,683.563 1762.69,683.563 1763.25,683.563 1763.81,683.563 1764.37,683.563 1764.93,683.563 1765.49,683.563 1766.05,683.563 1766.61,683.563 1767.16,683.563 1767.72,683.563 1768.28,683.563 1768.84,683.563 1769.4,683.563 1769.96,683.563 1770.52,683.563 1771.08,683.563 1771.64,683.563 1772.2,683.563 1772.76,683.563 1773.32,683.563 1773.88,683.563 1774.43,683.563 1774.99,683.563 1775.55,683.563 1776.11,683.563 1776.67,683.563 1777.23,683.563 1777.79,683.563 1778.35,683.563 1778.91,683.563 1779.47,683.563 1780.03,683.563 1780.59,683.563 1781.15,683.563 1781.71,683.563 1782.26,683.563 1782.82,683.563 1783.38,683.563 1783.94,683.563 1784.5,683.563 1785.06,683.563 1785.62,683.563 1786.18,683.563 1786.74,683.563 1787.3,683.563 1787.86,683.563 1788.42,683.563 1788.98,683.563 1789.53,683.563 1790.09,683.563 1790.65,683.563 1791.21,683.563 1791.77,683.563 1792.33,683.563 1792.89,683.563 1793.45,683.563 1794.01,683.563 1794.57,683.563 1795.13,683.563 1795.69,683.563 1796.25,683.563 1796.8,683.563 1797.36,683.563 1797.92,683.563 1798.48,683.563 1799.04,683.563 1799.6,683.563 1800.16,683.563 1800.72,683.563 1801.28,683.563 1801.84,683.563 1802.4,683.563 1802.96,683.563 1803.52,683.563 1804.08,683.563 1804.63,683.563 1805.19,683.563 1805.75,683.563 1806.31,683.563 1806.87,683.563 1807.43,683.563 1807.99,683.563 1808.55,683.563 1809.11,683.563 1809.67,683.563 1810.23,683.563 1810.79,683.563 1811.35,683.563 1811.9,683.563 1812.46,683.563 1813.02,683.563 1813.58,683.563 1814.14,683.563 1814.7,683.563 1815.26,683.563 1815.82,683.563 1816.38,683.563 1816.94,683.563 1817.5,683.563 1818.06,683.563 1818.62,683.563 1819.18,683.563 1819.73,683.563 1820.29,683.563 1820.85,683.563 1821.41,683.563 1821.97,683.563 1822.53,683.563 1823.09,683.563 1823.65,683.563 1824.21,683.563 1824.77,683.563 1825.33,683.563 1825.89,683.563 1826.45,683.563 1827,683.563 1827.56,683.563 1828.12,683.563 1828.68,683.563 1829.24,683.563 1829.8,683.563 1830.36,683.563 1830.92,683.563 1831.48,683.563 1832.04,683.563 1832.6,683.563 1833.16,683.563 1833.72,683.563 1834.27,683.563 1834.83,683.563 1835.39,683.563 1835.95,683.563 1836.51,683.563 1837.07,683.563 1837.63,683.563 1838.19,683.563 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0277808373499315 ± 0.02048045521493041\nProjected Energy: -4.014975191565325 ± (0.007600766720847751, 0.008041987325058564)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.56845</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4136e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0129e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.025e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.283e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.876e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.518e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.3631242916133743\n -0.759019192277087\n  0.1358418221962232\n  0.15789998694607554\n  0.876711441178136\n  1.5305929970973313\n  1.583573261186741\n  3.072870330325858\n  3.1256726539518462\n  4.8621072215621775\n  6.260694850380597\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
