var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20912858318178576 ± 0.0014715681522852809\n   G2(1) = 0.9183022288312085 ± 0.0007172149808800975\n   G2(2) = 0.9821953385631012 ± 0.0006426057991781443\n   G2(3) = 0.9898762820295952 ± 0.0008553988886155274\n   G2(4) = 0.9821953385631012 ± 0.0006426057991781443\n   G2(5) = 0.9183022288312085 ± 0.0007172149808800975\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.062276906397907 ± 0.15421165938678194\n   Replica 2: -4.018412342371905 ± 0.13161781330322236\n   Replica 3: -3.9804785650537786 ± 0.13729877398831572\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip930\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip931\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip932\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.37 2211.02,1003.37 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.908 2211.02,745.908 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.448 2211.02,488.448 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.989 2211.02,230.989 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.37 423.181,1003.37 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.908 423.181,745.908 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.448 423.181,488.448 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.989 423.181,230.989 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M290.043 1016.71 L306.363 1016.71 L306.363 1020.65 L284.418 1020.65 L284.418 1016.71 Q287.08 1013.96 291.664 1009.33 Q296.27 1004.68 297.451 1003.33 Q299.696 1000.81 300.576 999.073 Q301.478 997.314 301.478 995.624 Q301.478 992.87 299.534 991.134 Q297.613 989.398 294.511 989.398 Q292.312 989.398 289.858 990.161 Q287.427 990.925 284.65 992.476 L284.65 987.754 Q287.474 986.62 289.927 986.041 Q292.381 985.462 294.418 985.462 Q299.789 985.462 302.983 988.148 Q306.177 990.833 306.177 995.324 Q306.177 997.453 305.367 999.374 Q304.58 1001.27 302.474 1003.87 Q301.895 1004.54 298.793 1007.75 Q295.691 1010.95 290.043 1016.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M316.224 986.087 L334.58 986.087 L334.58 990.023 L320.506 990.023 L320.506 998.495 Q321.524 998.148 322.543 997.986 Q323.562 997.8 324.58 997.8 Q330.367 997.8 333.747 1000.97 Q337.126 1004.14 337.126 1009.56 Q337.126 1015.14 333.654 1018.24 Q330.182 1021.32 323.862 1021.32 Q321.687 1021.32 319.418 1020.95 Q317.173 1020.58 314.765 1019.84 L314.765 1015.14 Q316.849 1016.27 319.071 1016.83 Q321.293 1017.38 323.77 1017.38 Q327.774 1017.38 330.112 1015.28 Q332.45 1013.17 332.45 1009.56 Q332.45 1005.95 330.112 1003.84 Q327.774 1001.74 323.77 1001.74 Q321.895 1001.74 320.02 1002.15 Q318.168 1002.57 316.224 1003.45 L316.224 986.087 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 989.166 Q352.728 989.166 350.899 992.731 Q349.094 996.273 349.094 1003.4 Q349.094 1010.51 350.899 1014.07 Q352.728 1017.62 356.339 1017.62 Q359.973 1017.62 361.779 1014.07 Q363.608 1010.51 363.608 1003.4 Q363.608 996.273 361.779 992.731 Q359.973 989.166 356.339 989.166 M356.339 985.462 Q362.149 985.462 365.205 990.069 Q368.284 994.652 368.284 1003.4 Q368.284 1012.13 365.205 1016.74 Q362.149 1021.32 356.339 1021.32 Q350.529 1021.32 347.45 1016.74 Q344.395 1012.13 344.395 1003.4 Q344.395 994.652 347.45 990.069 Q350.529 985.462 356.339 985.462 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M286.062 728.628 L304.418 728.628 L304.418 732.563 L290.344 732.563 L290.344 741.035 Q291.363 740.688 292.381 740.526 Q293.4 740.341 294.418 740.341 Q300.205 740.341 303.585 743.512 Q306.964 746.683 306.964 752.1 Q306.964 757.679 303.492 760.781 Q300.02 763.859 293.701 763.859 Q291.525 763.859 289.256 763.489 Q287.011 763.118 284.603 762.378 L284.603 757.679 Q286.687 758.813 288.909 759.369 Q291.131 759.924 293.608 759.924 Q297.613 759.924 299.951 757.818 Q302.288 755.711 302.288 752.1 Q302.288 748.489 299.951 746.382 Q297.613 744.276 293.608 744.276 Q291.733 744.276 289.858 744.693 Q288.006 745.109 286.062 745.989 L286.062 728.628 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M326.177 731.707 Q322.566 731.707 320.737 735.271 Q318.932 738.813 318.932 745.943 Q318.932 753.049 320.737 756.614 Q322.566 760.156 326.177 760.156 Q329.811 760.156 331.617 756.614 Q333.446 753.049 333.446 745.943 Q333.446 738.813 331.617 735.271 Q329.811 731.707 326.177 731.707 M326.177 728.003 Q331.987 728.003 335.043 732.609 Q338.122 737.193 338.122 745.943 Q338.122 754.669 335.043 759.276 Q331.987 763.859 326.177 763.859 Q320.367 763.859 317.288 759.276 Q314.233 754.669 314.233 745.943 Q314.233 737.193 317.288 732.609 Q320.367 728.003 326.177 728.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 731.707 Q352.728 731.707 350.899 735.271 Q349.094 738.813 349.094 745.943 Q349.094 753.049 350.899 756.614 Q352.728 760.156 356.339 760.156 Q359.973 760.156 361.779 756.614 Q363.608 753.049 363.608 745.943 Q363.608 738.813 361.779 735.271 Q359.973 731.707 356.339 731.707 M356.339 728.003 Q362.149 728.003 365.205 732.609 Q368.284 737.193 368.284 745.943 Q368.284 754.669 365.205 759.276 Q362.149 763.859 356.339 763.859 Q350.529 763.859 347.45 759.276 Q344.395 754.669 344.395 745.943 Q344.395 737.193 347.45 732.609 Q350.529 728.003 356.339 728.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M284.835 471.168 L307.057 471.168 L307.057 473.159 L294.511 505.728 L289.627 505.728 L301.432 475.104 L284.835 475.104 L284.835 471.168 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M316.224 471.168 L334.58 471.168 L334.58 475.104 L320.506 475.104 L320.506 483.576 Q321.524 483.229 322.543 483.067 Q323.562 482.881 324.58 482.881 Q330.367 482.881 333.747 486.053 Q337.126 489.224 337.126 494.641 Q337.126 500.219 333.654 503.321 Q330.182 506.4 323.862 506.4 Q321.687 506.4 319.418 506.029 Q317.173 505.659 314.765 504.918 L314.765 500.219 Q316.849 501.353 319.071 501.909 Q321.293 502.465 323.77 502.465 Q327.774 502.465 330.112 500.358 Q332.45 498.252 332.45 494.641 Q332.45 491.029 330.112 488.923 Q327.774 486.816 323.77 486.816 Q321.895 486.816 320.02 487.233 Q318.168 487.65 316.224 488.529 L316.224 471.168 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 474.247 Q352.728 474.247 350.899 477.812 Q349.094 481.354 349.094 488.483 Q349.094 495.59 350.899 499.154 Q352.728 502.696 356.339 502.696 Q359.973 502.696 361.779 499.154 Q363.608 495.59 363.608 488.483 Q363.608 481.354 361.779 477.812 Q359.973 474.247 356.339 474.247 M356.339 470.543 Q362.149 470.543 365.205 475.15 Q368.284 479.733 368.284 488.483 Q368.284 497.21 365.205 501.816 Q362.149 506.4 356.339 506.4 Q350.529 506.4 347.45 501.816 Q344.395 497.21 344.395 488.483 Q344.395 479.733 347.45 475.15 Q350.529 470.543 356.339 470.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M256.664 244.334 L264.303 244.334 L264.303 217.968 L255.992 219.635 L255.992 215.376 L264.256 213.709 L268.932 213.709 L268.932 244.334 L276.571 244.334 L276.571 248.269 L256.664 248.269 L256.664 244.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M296.015 216.788 Q292.404 216.788 290.576 220.352 Q288.77 223.894 288.77 231.024 Q288.77 238.13 290.576 241.695 Q292.404 245.237 296.015 245.237 Q299.65 245.237 301.455 241.695 Q303.284 238.13 303.284 231.024 Q303.284 223.894 301.455 220.352 Q299.65 216.788 296.015 216.788 M296.015 213.084 Q301.826 213.084 304.881 217.69 Q307.96 222.274 307.96 231.024 Q307.96 239.75 304.881 244.357 Q301.826 248.94 296.015 248.94 Q290.205 248.94 287.127 244.357 Q284.071 239.75 284.071 231.024 Q284.071 222.274 287.127 217.69 Q290.205 213.084 296.015 213.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M326.177 216.788 Q322.566 216.788 320.737 220.352 Q318.932 223.894 318.932 231.024 Q318.932 238.13 320.737 241.695 Q322.566 245.237 326.177 245.237 Q329.811 245.237 331.617 241.695 Q333.446 238.13 333.446 231.024 Q333.446 223.894 331.617 220.352 Q329.811 216.788 326.177 216.788 M326.177 213.084 Q331.987 213.084 335.043 217.69 Q338.122 222.274 338.122 231.024 Q338.122 239.75 335.043 244.357 Q331.987 248.94 326.177 248.94 Q320.367 248.94 317.288 244.357 Q314.233 239.75 314.233 231.024 Q314.233 222.274 317.288 217.69 Q320.367 213.084 326.177 213.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M356.339 216.788 Q352.728 216.788 350.899 220.352 Q349.094 223.894 349.094 231.024 Q349.094 238.13 350.899 241.695 Q352.728 245.237 356.339 245.237 Q359.973 245.237 361.779 241.695 Q363.608 238.13 363.608 231.024 Q363.608 223.894 361.779 220.352 Q359.973 216.788 356.339 216.788 M356.339 213.084 Q362.149 213.084 365.205 217.69 Q368.284 222.274 368.284 231.024 Q368.284 239.75 365.205 244.357 Q362.149 248.94 356.339 248.94 Q350.529 248.94 347.45 244.357 Q344.395 239.75 344.395 231.024 Q344.395 222.274 347.45 217.69 Q350.529 213.084 356.339 213.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip932)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.989 4017.76,230.989 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1246.4 461.101,1245.73 461.669,1244.99 462.238,1244.17 462.806,1243.24 463.375,1242.25 463.943,1241.16 464.511,1239.98 465.08,1237.65 465.648,1236.23 466.216,1233.68 466.785,1232.04 467.353,1230.26 467.921,1228.35 468.49,1226.31 469.058,1223.09 469.626,1220.71 470.195,1217.16 470.763,1214.44 471.331,1210.52 471.9,1207.44 472.468,1203.13 473.036,1199.65 473.605,1194.93 474.173,1191.08 474.741,1186.97 475.31,1182.7 475.878,1177.21 476.446,1172.5 477.015,1166.61 477.583,1159.35 478.152,1154.03 478.72,1148.5 479.288,1142.75 479.857,1135.81 480.425,1128.55 480.993,1121.08 481.562,1113.4 482.13,1105.64 482.698,1097.58 483.267,1086.2 483.835,1075.63 484.403,1067.83 484.972,1059.76 485.54,1051.6 486.108,1042.16 486.677,1032.58 487.245,1021.84 487.813,1013.1 488.382,1004.1 488.95,995.103 489.518,985.878 490.087,976.504 490.655,962.978 491.224,953.666 491.792,941.287 492.36,931.917 492.929,922.466 493.497,911.939 494.065,901.371 494.634,887.681 495.202,877.147 495.77,866.562 496.339,853.011 496.907,842.629 497.475,832.266 498.044,821.818 498.612,811.4 499.18,800.926 499.749,791.564 500.317,779.152 500.885,768.746 501.454,759.625 502.022,747.268 502.59,734.103 503.159,724.367 503.727,712.599 504.295,699.879 504.864,691.64 505.432,681.393 506.001,671.35 506.569,662.299 507.137,651.319 507.706,642.79 508.274,633.328 508.842,623.978 509.411,613.871 509.979,605.839 510.547,598.048 511.116,591.365 511.684,583.473 512.252,575.776 512.821,568.164 513.389,560.63 513.957,553.27 514.526,547.015 515.094,538.774 515.662,530.707 516.231,523.795 516.799,516.085 517.367,510.656 517.936,504.886 518.504,497.403 519.072,489.188 519.641,482.386 520.209,477.668 520.778,471.8 521.346,468.19 521.914,462.678 522.483,457.005 523.051,450.603 523.619,444.44 524.188,440.278 524.756,433.269 525.324,428.267 525.893,422.557 526.461,419.905 527.029,415.47 527.598,409.983 528.166,406.559 528.734,399.163 529.303,395.212 529.871,391.178 530.439,386.319 531.008,382.373 531.576,378.604 532.144,375.184 532.713,368.56 533.281,365.323 533.85,363.338 534.418,360.211 534.986,357.122 535.555,352.98 536.123,354.303 536.691,351.181 537.26,348.069 537.828,344.146 538.396,341.531 538.965,339.757 539.533,339.215 540.101,337.621 540.67,332.691 541.238,328.823 541.806,327.37 542.375,322.859 542.943,321.757 543.511,318.512 544.08,316.382 544.648,315.363 545.216,314.151 545.785,311.819 546.353,310.904 546.921,307.691 547.49,303.724 548.058,305.131 548.627,302.254 549.195,299.625 549.763,298.955 550.332,298.162 550.9,297.51 551.468,297.813 552.037,298.794 552.605,297.028 553.173,295.371 553.742,294.544 554.31,291.465 554.878,289.795 555.447,289.164 556.015,290.647 556.583,291.766 557.152,289.921 557.72,287.884 558.288,287.17 558.857,283.363 559.425,283.781 559.993,284.104 560.562,284.18 561.13,283.137 561.698,282.254 562.267,283.414 562.835,282.349 563.404,281.308 563.972,280.432 564.54,278.38 565.109,276.457 565.677,275.724 566.245,272.081 566.814,272.841 567.382,273.009 567.95,272.566 568.519,268.912 569.087,266.43 569.655,263.965 570.224,261.468 570.792,261.295 571.36,261.175 571.929,257.934 572.497,258.183 573.065,257.287 573.634,257.148 574.202,257.297 574.77,255.245 575.339,254.395 575.907,252.649 576.476,254.047 577.044,255.213 577.612,254.48 578.181,254.686 578.749,253.651 579.317,252.981 579.886,252.447 580.454,253.491 581.022,253.583 581.591,250.653 582.159,249.85 582.727,249.17 583.296,250.461 583.864,249.798 584.432,249.937 585.001,248.096 585.569,249.682 586.137,247.736 586.706,248.055 587.274,247.481 587.842,247.835 588.411,247.985 588.979,249.169 589.547,248.348 590.116,248.494 590.684,248.714 591.253,247.977 591.821,248.352 592.389,247.636 592.958,247.765 593.526,248.156 594.094,249.131 594.663,248.287 595.231,247.445 595.799,248.568 596.368,249.64 596.936,249.727 597.504,248.539 598.073,247.788 598.641,248.816 599.209,246.697 599.778,245.815 600.346,245.732 600.914,247.845 601.483,247.944 602.051,246.922 602.619,246.948 603.188,246.733 603.756,244.69 604.325,244.858 604.893,243.037 605.461,244.361 606.03,246.488 606.598,243.438 607.166,242.663 607.735,241.698 608.303,242.802 608.871,241.788 609.44,242.973 610.008,243.135 610.576,244.534 611.145,243.428 611.713,245.838 612.281,245.932 612.85,245.931 613.418,244.06 613.986,243.822 614.555,243.785 615.123,242.894 615.691,243.905 616.26,242.642 616.828,240.668 617.396,240.861 617.965,241.089 618.533,240.194 619.102,241.468 619.67,241.785 620.238,241.742 620.807,244.003 621.375,246.02 621.943,246.816 622.512,244.514 623.08,243.278 623.648,240.314 624.217,240.523 624.785,242.843 625.353,244.892 625.922,242.521 626.49,241.192 627.058,240.33 627.627,240.502 628.195,240.536 628.763,240.45 629.332,241.156 629.9,243.182 630.468,241.045 631.037,242.12 631.605,240.101 632.173,242.37 632.742,242.187 633.31,244.008 633.879,244.667 634.447,244.238 635.015,243.868 635.584,243.519 636.152,241.204 636.72,239.234 637.289,239.119 637.857,239.999 638.425,242.026 638.994,241.904 639.562,242.531 640.13,243.18 640.699,241.725 641.267,239.287 641.835,239 642.404,238.992 642.972,238.941 643.54,238.863 644.109,236.525 644.677,236.784 645.245,235.876 645.814,237.008 646.382,237.274 646.951,239.556 647.519,238.291 648.087,237.433 648.656,237.438 649.224,237.54 649.792,237.605 650.361,237.687 650.929,235.731 651.497,237.921 652.066,237.677 652.634,237.635 653.202,236.505 653.771,237.504 654.339,238.645 654.907,239.31 655.476,239.037 656.044,237.929 656.612,238.593 657.181,236.296 657.749,237.487 658.317,236.369 658.886,236.392 659.454,235.476 660.022,234.523 660.591,233.433 661.159,231.496 661.728,231.648 662.296,230.913 662.864,229.327 663.433,230.703 664.001,232.118 664.569,233.629 665.138,235.005 665.706,234.064 666.274,235.379 666.843,233.22 667.411,233.474 667.979,232.623 668.548,232.982 669.116,234.343 669.684,234.436 670.253,233.647 670.821,232.682 671.389,234.014 671.958,234.248 672.526,234.514 673.094,234.684 673.663,235.111 674.231,234.31 674.799,234.411 675.368,236.445 675.936,236.392 676.505,235.121 677.073,234.154 677.641,233.178 678.21,233.414 678.778,233.749 679.346,233.835 679.915,232.881 680.483,231.146 681.051,230.49 681.62,228.868 682.188,231.648 682.756,232.108 683.325,232.472 683.893,231.772 684.461,231.842 685.03,231.899 685.598,231.073 686.166,229.383 686.735,230.197 687.303,229.583 687.871,228.962 688.44,228.552 689.008,231.212 689.577,231.463 690.145,231.805 690.713,233.13 691.282,234.406 691.85,233.701 692.418,231.722 692.987,231.009 693.555,232.391 694.123,232.772 694.692,231.739 695.26,231.775 695.828,231.086 696.397,230.259 696.965,230.634 697.533,231.939 698.102,233.373 698.67,233.593 699.238,233.981 699.807,232.932 700.375,234.228 700.943,232.325 701.512,235.656 702.08,235.805 702.648,234.878 703.217,235.902 703.785,234.832 704.354,236.641 704.922,237.465 705.49,235.577 706.059,233.505 706.627,232.601 707.195,233.108 707.764,232.127 708.332,232.496 708.9,231.815 709.469,231.186 710.037,231.574 710.605,230.83 711.174,231.007 711.742,232.361 712.31,232.75 712.879,232.026 713.447,232.461 714.015,232.719 714.584,234.986 715.152,234.954 715.72,235.143 716.289,234.089 716.857,235.186 717.425,234.154 717.994,232.181 718.562,231.615 719.131,230.729 719.699,228.934 720.267,229.444 720.836,225.808 721.404,226.606 721.972,227.43 722.541,227.077 723.109,227.598 723.677,229.065 724.246,231.527 724.814,233.927 725.382,236.032 725.951,237.947 726.519,238.988 727.087,239.006 727.656,238.783 728.224,239.618 728.792,236.201 729.361,234.37 729.929,232.443 730.497,232.063 731.066,233.418 731.634,232.5 732.203,231.854 732.771,232.084 733.339,233.516 733.908,235.693 734.476,238.682 735.044,237.343 735.613,237.198 736.181,234.335 736.749,234.347 737.318,236.719 737.886,236.59 738.454,236.756 739.023,237.662 739.591,238.484 740.159,240.186 740.728,239.695 741.296,238.461 741.864,237.06 742.433,237.843 743.001,240.808 743.569,239.342 744.138,239.054 744.706,237.982 745.274,237.772 745.843,235.545 746.411,235.55 746.98,237.491 747.548,239.035 748.116,240.662 748.685,239.244 749.253,237.988 749.821,237.502 750.39,239.302 750.958,239.848 751.526,240.467 752.095,239.948 752.663,239.421 753.231,238.887 753.8,236.13 754.368,235.93 754.936,234.812 755.505,231.628 756.073,233.813 756.641,234.674 757.21,234.536 757.778,233.302 758.346,234.11 758.915,233.121 759.483,230.893 760.052,231.957 760.62,233.066 761.188,232.923 761.757,233.884 762.325,233.804 762.893,233.871 763.462,234.659 764.03,234.552 764.598,232.29 765.167,230.153 765.735,231.102 766.303,230.066 766.872,230.392 767.44,229.494 768.008,229.576 768.577,228.878 769.145,227.175 769.713,227.673 770.282,227.004 770.85,228.579 771.418,227.77 771.987,227.967 772.555,228.225 773.123,228.301 773.692,230.533 774.26,233.587 774.829,233.58 775.397,234.529 775.965,234.386 776.534,234.309 777.102,234.064 777.67,233.081 778.239,233.046 778.807,233.146 779.375,234.143 779.944,233.778 780.512,231.969 781.08,231.867 781.649,231.002 782.217,231.189 782.785,231.492 783.354,232.609 783.922,232.694 784.49,233.609 785.059,233.353 785.627,233.324 786.195,233.172 786.764,232.993 787.332,233.96 787.9,233.579 788.469,233.588 789.037,232.311 789.606,232.306 790.174,230.168 790.742,229.225 791.311,228.463 791.879,230.658 792.447,230.753 793.016,232.934 793.584,231.697 794.152,231.789 794.721,235.052 795.289,234.94 795.857,233.944 796.426,231.697 796.994,232.698 797.562,231.563 798.131,233.741 798.699,234.47 799.267,235.14 799.836,235.895 800.404,238.716 800.972,239.183 801.541,237.468 802.109,236.228 802.678,235.797 803.246,234.502 803.814,233.347 804.383,233.124 804.951,232.825 805.519,232.865 806.088,231.778 806.656,234.842 807.224,232.577 807.793,232.55 808.361,232.478 808.929,232.551 809.498,232.433 810.066,232.455 810.634,230.312 811.203,230.557 811.771,228.621 812.339,227.988 812.908,227.093 813.476,228.585 814.044,229.924 814.613,231.129 815.181,231.288 815.749,232.525 816.318,231.33 816.886,231.388 817.455,227.31 818.023,228.499 818.591,228.776 819.16,228.199 819.728,229.26 820.296,229.386 820.865,230.392 821.433,232.506 822.001,232.526 822.57,232.415 823.138,232.474 823.706,233.466 824.275,232.596 824.843,232.658 825.411,231.744 825.98,231.457 826.548,229.377 827.116,229.486 827.685,227.449 828.253,227.661 828.821,227.846 829.39,226.988 829.958,227.28 830.526,226.597 831.095,225.955 831.663,227.361 832.232,227.649 832.8,227.859 833.368,228.39 833.937,227.656 834.505,227.105 835.073,227.489 835.642,225.696 836.21,226.071 836.778,224.373 837.347,226.08 837.915,225.597 838.483,227.067 839.052,227.54 839.62,228.044 840.188,229.355 840.757,228.61 841.325,226.899 841.893,230.348 842.462,231.437 843.03,230.488 843.598,230.763 844.167,230.082 844.735,229.299 845.304,229.521 845.872,231.754 846.44,233.053 847.009,232.945 847.577,236.944 848.145,235.731 848.714,236.527 849.282,238.384 849.85,237.021 850.419,238.806 850.987,235.271 851.555,235.101 852.124,236.118 852.692,236.849 853.26,235.348 853.829,236.142 854.397,234.98 854.965,235.868 855.534,232.447 856.102,232.403 856.67,234.522 857.239,233.326 857.807,230.389 858.375,227.449 858.944,224.834 859.512,225.274 860.081,225.563 860.649,225.13 861.217,226.766 861.786,226.306 862.354,225.724 862.922,226.308 863.491,226.914 864.059,230.348 864.627,230.351 865.196,231.496 865.764,232.378 866.332,233.392 866.901,233.455 867.469,234.366 868.037,235.31 868.606,236.307 869.174,236.039 869.742,233.427 870.311,235.435 870.879,233.958 871.447,232.67 872.016,230.476 872.584,230.608 873.152,228.491 873.721,229.847 874.289,230.845 874.858,230.939 875.426,232.045 875.994,232.992 876.563,237.164 877.131,236.888 877.699,237.733 878.268,235.38 878.836,234.136 879.404,231.995 879.973,232.979 880.541,231.975 881.109,231.996 881.678,231.009 882.246,230.17 882.814,230.553 883.383,229.578 883.951,229.694 884.519,226.653 885.088,227.201 885.656,229.624 886.224,231.878 886.793,231.991 887.361,231.981 887.93,228.905 888.498,230.274 889.066,228.504 889.635,229.645 890.203,230.896 890.771,229.79 891.34,228.898 891.908,230.455 892.476,231.68 893.045,230.729 893.613,230.708 894.181,230.98 894.75,233.297 895.318,234.021 895.886,231.982 896.455,230.839 897.023,230.97 897.591,231.054 898.16,232.007 898.728,233.14 899.296,232.773 899.865,232.873 900.433,233.024 901.001,231.991 901.57,232.086 902.138,232.079 902.707,234.268 903.275,233.01 903.843,233.014 904.412,232.955 904.98,231.921 905.548,229.729 906.117,229.924 906.685,231.116 907.253,232.284 907.822,233.368 908.39,235.293 908.958,234.015 909.527,234.988 910.095,234.605 910.663,237.397 911.232,236.978 911.8,236.656 912.368,236.036 912.937,234.626 913.505,231.331 914.073,231.491 914.642,230.488 915.21,227.66 915.779,230.026 916.347,231.266 916.915,232.53 917.484,231.395 918.052,231.414 918.62,231.495 919.189,230.295 919.757,231.141 920.325,231.277 920.894,232.432 921.462,230.544 922.03,232.627 922.599,236.659 923.167,237.202 923.735,235.875 924.304,236.619 924.872,235.212 925.44,234.981 926.009,234.585 926.577,234.358 927.145,236.203 927.714,235.869 928.282,237.742 928.85,237.326 929.419,237.84 929.987,237.407 930.556,238.034 931.124,237.304 931.692,236.811 932.261,237.642 932.829,234.992 933.397,233.595 933.966,233.176 934.534,231.912 935.102,232.868 935.671,231.522 936.239,230.534 936.807,230.533 937.376,229.491 937.944,230.678 938.512,233.648 939.081,237.551 939.649,237.12 940.217,236.577 940.786,237.34 941.354,235.766 941.922,235.486 942.491,235.404 943.059,234.998 943.627,234.638 944.196,234.055 944.764,234.646 945.333,235.453 945.901,236.118 946.469,232.432 947.038,232.13 947.606,230.705 948.174,230.494 948.743,230.357 949.311,228.203 949.879,229.291 950.448,227.277 951.016,226.291 951.584,225.558 952.153,224.924 952.721,225.373 953.289,224.854 953.858,223.33 954.426,225.865 954.994,224.06 955.563,227.468 956.131,223.453 956.699,225.905 957.268,226.173 957.836,227.532 958.405,227.667 958.973,227.945 959.541,226.157 960.11,225.32 960.678,226.414 961.246,226.83 961.815,226.88 962.383,226.129 962.951,226.61 963.52,225.912 964.088,227.307 964.656,228.791 965.225,228.953 965.793,228.087 966.361,229.42 966.93,231.659 967.498,232.803 968.066,229.594 968.635,228.909 969.203,230.251 969.771,228.422 970.34,228.617 970.908,227.838 971.476,229.209 972.045,230.51 972.613,230.619 973.182,230.639 973.75,232.769 974.318,233.822 974.887,233.55 975.455,232.581 976.023,231.511 976.592,231.591 977.16,230.511 977.728,232.588 978.297,233.48 978.865,233.211 979.433,232.959 980.002,233.89 980.57,232.827 981.138,234.043 981.707,235.856 982.275,235.614 982.843,234.262 983.412,236.028 983.98,236.558 984.548,238.337 985.117,238.969 985.685,236.337 986.253,235.051 986.822,236.774 987.39,236.187 987.959,237.985 988.527,235.335 989.095,232.819 989.664,232.664 990.232,231.424 990.8,230.143 991.369,227.902 991.937,227.789 992.505,226.888 993.074,228.031 993.642,230.264 994.21,231.103 994.779,230.103 995.347,226.949 995.915,227.01 996.484,228.361 997.052,229.59 997.62,231.508 998.189,231.468 998.757,231.554 999.325,230.516 999.894,229.5 1000.46,232.608 1001.03,229.335 1001.6,228.383 1002.17,228.449 1002.74,231.88 1003.3,231.763 1003.87,231.733 1004.44,233.515 1005.01,238.456 1005.58,237.828 1006.15,238.49 1006.71,236.915 1007.28,236.522 1007.85,232.124 1008.42,230.928 1008.99,230.123 1009.56,230.28 1010.12,229.431 1010.69,230.562 1011.26,230.734 1011.83,230.69 1012.4,231.463 1012.97,232.444 1013.53,230.101 1014.1,228.196 1014.67,228.282 1015.24,228.455 1015.81,226.469 1016.38,226.589 1016.94,225.807 1017.51,227.215 1018.08,227.447 1018.65,226.552 1019.22,224.622 1019.79,226.11 1020.35,224.215 1020.92,224.874 1021.49,224.388 1022.06,223.792 1022.63,225.274 1023.2,222.568 1023.76,220.049 1024.33,220.992 1024.9,220.11 1025.47,221.052 1026.04,222.941 1026.61,223.73 1027.17,223.437 1027.74,223.452 1028.31,224.314 1028.88,227.04 1029.45,228.507 1030.02,230.061 1030.58,230.34 1031.15,230.177 1031.72,230.237 1032.29,229.416 1032.86,228.587 1033.43,227.63 1033.99,230.047 1034.56,230.393 1035.13,232.817 1035.7,233.956 1036.27,232.753 1036.84,232.635 1037.4,232.895 1037.97,232.74 1038.54,233.668 1039.11,232.667 1039.68,234.723 1040.25,235.684 1040.81,235.507 1041.38,232.179 1041.95,231.244 1042.52,232.373 1043.09,231.444 1043.66,231.667 1044.22,231.772 1044.79,231.872 1045.36,231.02 1045.93,231.107 1046.5,230.962 1047.07,229.054 1047.63,229.201 1048.2,230.634 1048.77,228.832 1049.34,228.998 1049.91,230.227 1050.48,231.447 1051.05,231.603 1051.61,231.713 1052.18,231.715 1052.75,231.857 1053.32,229.723 1053.89,230.937 1054.46,231.242 1055.02,229.351 1055.59,230.819 1056.16,230.019 1056.73,232.318 1057.3,232.475 1057.87,233.543 1058.43,233.5 1059,233.452 1059.57,234.341 1060.14,234.106 1060.71,233.026 1061.28,232.922 1061.84,235.006 1062.41,236.924 1062.98,236.598 1063.55,235.353 1064.12,233.069 1064.69,235.095 1065.25,235.78 1065.82,232.316 1066.39,232.213 1066.96,235.12 1067.53,233.72 1068.1,233.645 1068.66,232.376 1069.23,231.326 1069.8,231.596 1070.37,231.614 1070.94,230.59 1071.51,231.909 1072.07,231.037 1072.64,231.027 1073.21,234.351 1073.78,234.222 1074.35,234.108 1074.92,233.936 1075.48,234.929 1076.05,235.808 1076.62,233.316 1077.19,231.231 1077.76,233.579 1078.33,233.501 1078.89,233.318 1079.46,233.112 1080.03,232.817 1080.6,230.67 1081.17,229.689 1081.74,230.005 1082.3,230.939 1082.87,235.098 1083.44,234.867 1084.01,234.422 1084.58,234.417 1085.15,235.118 1085.71,232.528 1086.28,233.433 1086.85,232.231 1087.42,233.176 1087.99,233.009 1088.56,233.781 1089.12,232.612 1089.69,231.511 1090.26,231.296 1090.83,232.284 1091.4,231.014 1091.97,232.982 1092.53,231.443 1093.1,231.241 1093.67,230.326 1094.24,229.338 1094.81,229.474 1095.38,228.712 1095.94,228.953 1096.51,228.093 1097.08,230.025 1097.65,229.767 1098.22,226.622 1098.79,223.824 1099.35,226.078 1099.92,227.347 1100.49,228.421 1101.06,228.752 1101.63,228.887 1102.2,232.268 1102.76,231.015 1103.33,230.913 1103.9,231.096 1104.47,231.145 1105.04,231.105 1105.61,228.892 1106.17,231.223 1106.74,229.254 1107.31,230.379 1107.88,232.431 1108.45,234.379 1109.02,233.254 1109.58,232.166 1110.15,229.023 1110.72,226.173 1111.29,228.598 1111.86,227.795 1112.43,227.172 1112.99,227.538 1113.56,226.586 1114.13,223.894 1114.7,224.607 1115.27,227.09 1115.84,229.451 1116.4,230.678 1116.97,228.869 1117.54,228.143 1118.11,228.462 1118.68,226.645 1119.25,226.125 1119.81,226.72 1120.38,226.076 1120.95,226.688 1121.52,230.228 1122.09,230.123 1122.66,231.389 1123.23,231.423 1123.79,231.749 1124.36,230.6 1124.93,230.679 1125.5,229.875 1126.07,232.243 1126.64,231.142 1127.2,231.242 1127.77,233.424 1128.34,233.73 1128.91,232.609 1129.48,233.572 1130.05,233.423 1130.61,232.462 1131.18,232.694 1131.75,231.761 1132.32,230.753 1132.89,231.899 1133.46,232.991 1134.02,229.903 1134.59,230.44 1135.16,230.531 1135.73,231.714 1136.3,230.608 1136.87,230.002 1137.43,228.033 1138,230.713 1138.57,229.756 1139.14,229.644 1139.71,231.66 1140.28,233.52 1140.84,232.415 1141.41,233.486 1141.98,235.623 1142.55,235.437 1143.12,235.496 1143.69,234.178 1144.25,233.935 1144.82,232.581 1145.39,232.581 1145.96,233.564 1146.53,234.511 1147.1,234.276 1147.66,231.178 1148.23,230.172 1148.8,232.432 1149.37,233.565 1149.94,234.552 1150.51,232.161 1151.07,232.284 1151.64,233.213 1152.21,233.126 1152.78,235.031 1153.35,233.879 1153.92,231.78 1154.48,231.92 1155.05,231.727 1155.62,234.675 1156.19,235.481 1156.76,232.904 1157.33,232.685 1157.89,234.718 1158.46,234.751 1159.03,235.653 1159.6,237.33 1160.17,239.022 1160.74,239.499 1161.3,239.906 1161.87,238.995 1162.44,238.575 1163.01,238.026 1163.58,238.564 1164.15,237.854 1164.71,237.141 1165.28,237.432 1165.85,236.066 1166.42,235.669 1166.99,234.355 1167.56,234.032 1168.12,232.542 1168.69,233.509 1169.26,232.161 1169.83,232.884 1170.4,230.531 1170.97,230.686 1171.53,232.857 1172.1,231.521 1172.67,232.564 1173.24,231.101 1173.81,233.084 1174.38,230.83 1174.94,230.802 1175.51,230.588 1176.08,229.345 1176.65,228.427 1177.22,228.652 1177.79,228.847 1178.35,228.848 1178.92,227.859 1179.49,226.885 1180.06,228.122 1180.63,229.367 1181.2,229.203 1181.76,230.276 1182.33,229.252 1182.9,230.415 1183.47,228.189 1184.04,227.169 1184.61,225.471 1185.17,224.788 1185.74,225.038 1186.31,225.498 1186.88,224.734 1187.45,222.117 1188.02,223.569 1188.58,225.094 1189.15,226.759 1189.72,226.898 1190.29,225.9 1190.86,226.199 1191.43,224.253 1192,224.522 1192.56,228.137 1193.13,228.606 1193.7,229.698 1194.27,229.86 1194.84,231.154 1195.41,233.151 1195.97,231.977 1196.54,232.031 1197.11,231.847 1197.68,231.656 1198.25,231.944 1198.82,231.686 1199.38,231.417 1199.95,231.54 1200.52,232.647 1201.09,230.301 1201.66,231.479 1202.23,231.392 1202.79,231.428 1203.36,232.329 1203.93,230.288 1204.5,227.352 1205.07,226.484 1205.64,227.005 1206.2,226.196 1206.77,229.854 1207.34,229.991 1207.91,229.155 1208.48,232.426 1209.05,231.417 1209.61,231.356 1210.18,232.377 1210.75,232.176 1211.32,230.983 1211.89,230.908 1212.46,228.794 1213.02,227.761 1213.59,226 1214.16,226.397 1214.73,231.765 1215.3,230.535 1215.87,232.666 1216.43,233.741 1217,234.656 1217.57,235.48 1218.14,233.482 1218.71,231.345 1219.28,232.437 1219.84,232.455 1220.41,231.34 1220.98,232.35 1221.55,231.016 1222.12,231.053 1222.69,233.185 1223.25,235.038 1223.82,233.623 1224.39,233.243 1224.96,232.009 1225.53,232.175 1226.1,231.166 1226.66,231.284 1227.23,231.294 1227.8,232.349 1228.37,233.335 1228.94,232.257 1229.51,232.288 1230.07,233.195 1230.64,233.903 1231.21,232.586 1231.78,233.583 1232.35,235.399 1232.92,236.148 1233.48,235.546 1234.05,237.992 1234.62,237.499 1235.19,237.037 1235.76,237.528 1236.33,238.192 1236.89,235.614 1237.46,235.25 1238.03,233.979 1238.6,234.671 1239.17,234.298 1239.74,234.091 1240.3,232.694 1240.87,233.593 1241.44,233.425 1242.01,233.233 1242.58,233.031 1243.15,232.704 1243.71,232.517 1244.28,232.27 1244.85,232.142 1245.42,232.224 1245.99,231.866 1246.56,233.779 1247.12,234.331 1247.69,234.869 1248.26,235.415 1248.83,232.728 1249.4,234.688 1249.97,235.486 1250.53,233.898 1251.1,232.593 1251.67,232.632 1252.24,231.42 1252.81,232.258 1253.38,230.797 1253.94,230.243 1254.51,229.323 1255.08,231.347 1255.65,231.194 1256.22,231.278 1256.79,232.144 1257.35,230.703 1257.92,231.618 1258.49,229.584 1259.06,229.459 1259.63,228.361 1260.2,226.288 1260.76,227.537 1261.33,228.525 1261.9,228.602 1262.47,228.676 1263.04,227.844 1263.61,227.956 1264.18,225.955 1264.74,226.25 1265.31,226.417 1265.88,225.716 1266.45,224.887 1267.02,227.38 1267.59,227.54 1268.15,228.632 1268.72,228.592 1269.29,227.847 1269.86,228.036 1270.43,228.234 1271,228.289 1271.56,230.433 1272.13,228.344 1272.7,227.772 1273.27,226.899 1273.84,228.239 1274.41,226.605 1274.97,224.997 1275.54,227.484 1276.11,230.008 1276.68,231.194 1277.25,232.309 1277.82,231.095 1278.38,231.19 1278.95,231.039 1279.52,230.025 1280.09,227.035 1280.66,228.228 1281.23,230.438 1281.79,230.624 1282.36,231.818 1282.93,230.679 1283.5,230.588 1284.07,233.798 1284.64,232.43 1285.2,232.502 1285.77,231.448 1286.34,232.313 1286.91,231.154 1287.48,229.899 1288.05,226.78 1288.61,225.777 1289.18,227.214 1289.75,228.385 1290.32,229.577 1290.89,227.495 1291.46,227.787 1292.02,228.803 1292.59,229.847 1293.16,230.081 1293.73,232.239 1294.3,233.172 1294.87,232.087 1295.43,233.05 1296,231.834 1296.57,230.767 1297.14,227.597 1297.71,226.682 1298.28,223.911 1298.84,223.203 1299.41,222.638 1299.98,222.396 1300.55,224.002 1301.12,223.401 1301.69,225.231 1302.25,224.729 1302.82,225.893 1303.39,225.163 1303.96,227.716 1304.53,227.098 1305.1,228.625 1305.66,227.945 1306.23,229.45 1306.8,227.577 1307.37,229.966 1307.94,229.031 1308.51,228.289 1309.07,228.647 1309.64,229.796 1310.21,231.179 1310.78,233.409 1311.35,232.391 1311.92,231.351 1312.48,230.461 1313.05,230.591 1313.62,231.621 1314.19,231.825 1314.76,233.084 1315.33,235.14 1315.89,235.018 1316.46,234.544 1317.03,235.709 1317.6,235.664 1318.17,234.364 1318.74,235.207 1319.3,237.262 1319.87,236.821 1320.44,234.47 1321.01,232.293 1321.58,234.428 1322.15,237.361 1322.71,235.981 1323.28,235.666 1323.85,235.531 1324.42,232.091 1324.99,232.183 1325.56,234.976 1326.12,234.702 1326.69,235.371 1327.26,235.087 1327.83,235.91 1328.4,236.812 1328.97,236.396 1329.53,236.95 1330.1,237.659 1330.67,237.276 1331.24,234.687 1331.81,233.296 1332.38,231.948 1332.94,231.601 1333.51,231.267 1334.08,231.148 1334.65,232.129 1335.22,231.944 1335.79,232.902 1336.36,233.858 1336.92,234.639 1337.49,230.151 1338.06,229.119 1338.63,230.143 1339.2,229.024 1339.77,229.376 1340.33,229.374 1340.9,230.454 1341.47,230.649 1342.04,229.9 1342.61,230.092 1343.18,231.203 1343.74,230.018 1344.31,232.326 1344.88,230.056 1345.45,229.982 1346.02,231.063 1346.59,232.289 1347.15,231.044 1347.72,232.101 1348.29,231.963 1348.86,228.845 1349.43,227.816 1350,227.257 1350.56,227.614 1351.13,227.897 1351.7,230.188 1352.27,230.277 1352.84,230.278 1353.41,229.343 1353.97,228.366 1354.54,227.423 1355.11,227.669 1355.68,228.624 1356.25,228.648 1356.82,230.807 1357.38,232.872 1357.95,231.864 1358.52,228.524 1359.09,228.399 1359.66,228.397 1360.23,226.498 1360.79,225.713 1361.36,224.915 1361.93,225.38 1362.5,224.828 1363.07,227.476 1363.64,224.864 1364.2,226.557 1364.77,229.073 1365.34,228.138 1365.91,228.2 1366.48,228.287 1367.05,228.263 1367.61,229.702 1368.18,229.818 1368.75,230.988 1369.32,232.029 1369.89,227.895 1370.46,226.243 1371.02,226.727 1371.59,229.357 1372.16,228.36 1372.73,228.395 1373.3,227.65 1373.87,229.101 1374.43,228.205 1375,228.467 1375.57,229.708 1376.14,228.994 1376.71,229.367 1377.28,230.606 1377.84,232.703 1378.41,231.813 1378.98,230.942 1379.55,234.218 1380.12,235.018 1380.69,234.854 1381.25,235.819 1381.82,235.459 1382.39,235.358 1382.96,235.06 1383.53,235.71 1384.1,236.405 1384.66,232.008 1385.23,231.735 1385.8,232.815 1386.37,232.918 1386.94,230.675 1387.51,230.646 1388.07,231.83 1388.64,231.799 1389.21,231.837 1389.78,231.8 1390.35,230.872 1390.92,231.739 1391.48,231.744 1392.05,231.756 1392.62,232.657 1393.19,231.645 1393.76,231.611 1394.33,233.635 1394.89,233.414 1395.46,235.225 1396.03,235.123 1396.6,236.914 1397.17,237.68 1397.74,238.023 1398.3,237.335 1398.87,235.853 1399.44,234.511 1400.01,233.363 1400.58,233.336 1401.15,233.263 1401.71,233.278 1402.28,230.944 1402.85,231.799 1403.42,233.74 1403.99,231.617 1404.56,229.286 1405.13,227.575 1405.69,228.795 1406.26,227.935 1406.83,227.066 1407.4,227.35 1407.97,227.453 1408.54,228.833 1409.1,227.817 1409.67,226.048 1410.24,227.396 1410.81,227.876 1411.38,228.034 1411.95,229.281 1412.51,228.395 1413.08,228.754 1413.65,229.045 1414.22,229.142 1414.79,228.396 1415.36,230.682 1415.92,230.638 1416.49,229.67 1417.06,230.647 1417.63,232.8 1418.2,232.678 1418.77,233.488 1419.33,234.274 1419.9,232.08 1420.47,232.179 1421.04,234.157 1421.61,228.883 1422.18,224.947 1422.74,223.524 1423.31,224.15 1423.88,222.402 1424.45,224.011 1425.02,225.577 1425.59,229.107 1426.15,230.258 1426.72,228.397 1427.29,230.703 1427.86,233.057 1428.43,232.991 1429,233.179 1429.56,235.974 1430.13,235.589 1430.7,236.512 1431.27,235.055 1431.84,233.689 1432.41,234.51 1432.97,235.152 1433.54,234.805 1434.11,233.576 1434.68,234.388 1435.25,235.929 1435.82,234.533 1436.38,233.408 1436.95,232.408 1437.52,232.329 1438.09,233.3 1438.66,232.038 1439.23,229.938 1439.79,231.245 1440.36,230.405 1440.93,230.553 1441.5,229.456 1442.07,229.51 1442.64,231.531 1443.2,231.588 1443.77,231.593 1444.34,232.563 1444.91,232.391 1445.48,231.255 1446.05,231.422 1446.61,230.717 1447.18,230.692 1447.75,231.708 1448.32,231.889 1448.89,233.996 1449.46,234.759 1450.02,234.517 1450.59,237.471 1451.16,237.854 1451.73,236.544 1452.3,234.386 1452.87,235.065 1453.43,233.756 1454,231.494 1454.57,232.264 1455.14,232.876 1455.71,231.559 1456.28,230.538 1456.84,231.487 1457.41,229.619 1457.98,230.797 1458.55,231.708 1459.12,230.753 1459.69,231.934 1460.25,231.811 1460.82,232.77 1461.39,233.475 1461.96,232.246 1462.53,230.298 1463.1,229.418 1463.66,227.369 1464.23,229.525 1464.8,228.676 1465.37,227.767 1465.94,227.33 1466.51,227.461 1467.07,227.666 1467.64,226.791 1468.21,227.1 1468.78,227.361 1469.35,227.664 1469.92,226.888 1470.48,228.22 1471.05,225.232 1471.62,226.748 1472.19,228.088 1472.76,230.569 1473.33,233.926 1473.89,232.723 1474.46,233.807 1475.03,233.679 1475.6,232.376 1476.17,234.36 1476.74,234.012 1477.31,234.669 1477.87,234.482 1478.44,232.037 1479.01,230.966 1479.58,232.003 1480.15,232.904 1480.72,233.838 1481.28,235.82 1481.85,234.533 1482.42,233.163 1482.99,231.044 1483.56,229.946 1484.13,229.195 1484.69,229.316 1485.26,229.04 1485.83,227.96 1486.4,230.228 1486.97,229.166 1487.54,228.127 1488.1,229.068 1488.67,230.149 1489.24,229.975 1489.81,231.06 1490.38,232.193 1490.95,232.037 1491.51,230.015 1492.08,230.249 1492.65,230.416 1493.22,230.257 1493.79,230.328 1494.36,229.242 1494.92,228.27 1495.49,229.416 1496.06,230.533 1496.63,229.77 1497.2,231.864 1497.77,231.765 1498.33,231.467 1498.9,230.287 1499.47,231.414 1500.04,231.25 1500.61,235.575 1501.18,232.237 1501.74,234.26 1502.31,231.881 1502.88,232.89 1503.45,233.895 1504.02,231.66 1504.59,230.702 1505.15,230.974 1505.72,230.99 1506.29,230.789 1506.86,229.682 1507.43,229.61 1508,228.823 1508.56,230.204 1509.13,229.221 1509.7,229.623 1510.27,228.74 1510.84,228.922 1511.41,230.285 1511.97,231.54 1512.54,227.494 1513.11,227.75 1513.68,232.25 1514.25,230.143 1514.82,229.098 1515.38,231.282 1515.95,230.233 1516.52,233.364 1517.09,232.185 1517.66,230.996 1518.23,234.043 1518.79,232.992 1519.36,232.856 1519.93,232.585 1520.5,232.266 1521.07,234.18 1521.64,233.952 1522.2,238.848 1522.77,237.06 1523.34,237.616 1523.91,239.261 1524.48,238.726 1525.05,239.181 1525.61,239.502 1526.18,237.533 1526.75,237.185 1527.32,232.487 1527.89,233.394 1528.46,232.012 1529.02,235.811 1529.59,235.218 1530.16,234.648 1530.73,235.077 1531.3,235.801 1531.87,233.421 1532.43,233.428 1533,233.982 1533.57,231.539 1534.14,232.468 1534.71,231.118 1535.28,232.911 1535.84,231.507 1536.41,232.057 1536.98,231.911 1537.55,232.395 1538.12,232.21 1538.69,231.388 1539.25,229.426 1539.82,231.574 1540.39,232.422 1540.96,232.053 1541.53,231.983 1542.1,232.793 1542.66,231.675 1543.23,228.323 1543.8,228.495 1544.37,228.721 1544.94,227.632 1545.51,229.788 1546.08,227.753 1546.64,226.954 1547.21,227.113 1547.78,225.032 1548.35,223.473 1548.92,220.689 1549.49,221.311 1550.05,219.895 1550.62,221.56 1551.19,223.273 1551.76,222.778 1552.33,224.47 1552.9,222.757 1553.46,226.357 1554.03,225.724 1554.6,224.86 1555.17,225.403 1555.74,226.752 1556.31,227.887 1556.87,228.214 1557.44,228.425 1558.01,228.593 1558.58,227.229 1559.15,227.346 1559.72,225.683 1560.28,224.979 1560.85,225.377 1561.42,223.663 1561.99,225.007 1562.56,223.566 1563.13,226.149 1563.69,226.611 1564.26,228.071 1564.83,229.403 1565.4,228.703 1565.97,229.958 1566.54,230.197 1567.1,228.315 1567.67,229.504 1568.24,230.834 1568.81,229.974 1569.38,232.112 1569.95,231.193 1570.51,233.46 1571.08,233.534 1571.65,233.496 1572.22,233.096 1572.79,233.009 1573.36,231.737 1573.92,231.591 1574.49,231.751 1575.06,232.96 1575.63,232.605 1576.2,232.35 1576.77,235.387 1577.33,236.01 1577.9,236.805 1578.47,238.466 1579.04,237.964 1579.61,238.464 1580.18,238.003 1580.74,238.457 1581.31,237.852 1581.88,237.056 1582.45,236.591 1583.02,236.122 1583.59,235.781 1584.15,236.419 1584.72,236.006 1585.29,237.753 1585.86,235.251 1586.43,234.833 1587,235.375 1587.56,234.839 1588.13,233.469 1588.7,234.222 1589.27,232.859 1589.84,230.846 1590.41,230.78 1590.97,230.606 1591.54,227.463 1592.11,227.771 1592.68,224.949 1593.25,223.422 1593.82,224.032 1594.38,223.554 1594.95,224.07 1595.52,224.848 1596.09,225.398 1596.66,226.559 1597.23,227.751 1597.79,228.946 1598.36,227.944 1598.93,225.142 1599.5,225.412 1600.07,225.83 1600.64,226.171 1601.2,226.475 1601.77,229.823 1602.34,225.783 1602.91,226.228 1603.48,225.55 1604.05,226.205 1604.61,226.724 1605.18,231.114 1605.75,231.278 1606.32,232.33 1606.89,232.275 1607.46,232.277 1608.02,230.361 1608.59,231.627 1609.16,232.658 1609.73,232.538 1610.3,234.582 1610.87,232.278 1611.43,232.205 1612,229.055 1612.57,229.272 1613.14,230.276 1613.71,231.481 1614.28,232.436 1614.84,233.256 1615.41,233.105 1615.98,231.108 1616.55,231.217 1617.12,231.26 1617.69,233.585 1618.26,233.224 1618.82,230.869 1619.39,231.036 1619.96,232.011 1620.53,227.848 1621.1,231.07 1621.67,232.139 1622.23,232.173 1622.8,233.124 1623.37,234.025 1623.94,233.902 1624.51,233.858 1625.08,235.734 1625.64,234.172 1626.21,231.854 1626.78,231.645 1627.35,229.707 1627.92,229.983 1628.49,230.076 1629.05,232.242 1629.62,232.332 1630.19,232.269 1630.76,232.193 1631.33,233.245 1631.9,233.091 1632.46,232.106 1633.03,231.97 1633.6,230.806 1634.17,230.838 1634.74,233.178 1635.31,234.02 1635.87,233.753 1636.44,233.543 1637.01,234.493 1637.58,235.229 1638.15,235.263 1638.72,235.031 1639.28,233.605 1639.85,233.565 1640.42,232.259 1640.99,234.232 1641.56,235.032 1642.13,234.823 1642.69,233.556 1643.26,234.349 1643.83,234.145 1644.4,232.795 1644.97,233.802 1645.54,235.591 1646.1,234.196 1646.67,233.695 1647.24,234.564 1647.81,234.226 1648.38,232.944 1648.95,230.912 1649.51,229.519 1650.08,230.638 1650.65,231.555 1651.22,231.566 1651.79,231.221 1652.36,233.206 1652.92,228.859 1653.49,230.032 1654.06,227.063 1654.63,228.13 1655.2,229.29 1655.77,229.444 1656.33,229.446 1656.9,231.332 1657.47,231.338 1658.04,231.957 1658.61,231.766 1659.18,230.547 1659.74,230.698 1660.31,230.531 1660.88,230.403 1661.45,230.178 1662.02,232.159 1662.59,229.935 1663.15,228.838 1663.72,228.106 1664.29,228.994 1664.86,229.008 1665.43,228.224 1666,227.354 1666.56,228.855 1667.13,225.799 1667.7,223.117 1668.27,224.594 1668.84,226.97 1669.41,228.234 1669.97,228.174 1670.54,230.23 1671.11,229.393 1671.68,229.348 1672.25,228.269 1672.82,227.348 1673.38,228.594 1673.95,230.733 1674.52,228.768 1675.09,231.223 1675.66,228.248 1676.23,230.384 1676.79,229.374 1677.36,229.56 1677.93,229.615 1678.5,226.662 1679.07,228.066 1679.64,226.119 1680.2,226.387 1680.77,226.814 1681.34,226.197 1681.91,227.674 1682.48,227.943 1683.05,227.043 1683.61,228.382 1684.18,227.522 1684.75,227.898 1685.32,229.264 1685.89,229.35 1686.46,230.729 1687.02,231.844 1687.59,231.855 1688.16,231.655 1688.73,231.705 1689.3,232.845 1689.87,232.64 1690.44,232.646 1691,231.578 1691.57,232.63 1692.14,233.733 1692.71,233.481 1693.28,233.355 1693.85,234.058 1694.41,234.86 1694.98,234.782 1695.55,231.418 1696.12,229.44 1696.69,229.497 1697.26,228.657 1697.82,228.947 1698.39,230.197 1698.96,231.366 1699.53,234.604 1700.1,231.154 1700.67,234.152 1701.23,235.991 1701.8,233.531 1702.37,233.279 1702.94,234.018 1703.51,232.624 1704.08,231.78 1704.64,232.728 1705.21,233.579 1705.78,234.464 1706.35,232.194 1706.92,231.345 1707.49,229.227 1708.05,229.546 1708.62,230.826 1709.19,231.937 1709.76,233.008 1710.33,233.856 1710.9,231.99 1711.46,231.887 1712.03,230.835 1712.6,231.719 1713.17,232.474 1713.74,232.548 1714.31,232.602 1714.87,234.513 1715.44,235.54 1716.01,235.104 1716.58,235.594 1717.15,238.276 1717.72,235.724 1718.28,235.509 1718.85,235.215 1719.42,237.955 1719.99,237.601 1720.56,238.031 1721.13,237.591 1721.69,238.949 1722.26,235.399 1722.83,236.138 1723.4,234.484 1723.97,231.061 1724.54,228.924 1725.1,230.018 1725.67,229.798 1726.24,229.768 1726.81,228.68 1727.38,231.918 1727.95,232.893 1728.51,230.563 1729.08,232.655 1729.65,232.347 1730.22,231.293 1730.79,232.19 1731.36,233.206 1731.92,233.062 1732.49,230.623 1733.06,227.296 1733.63,227.488 1734.2,227.673 1734.77,229.895 1735.33,229.863 1735.9,229.993 1736.47,228.928 1737.04,229.112 1737.61,229.017 1738.18,229.937 1738.74,229.639 1739.31,230.686 1739.88,230.711 1740.45,230.687 1741.02,230.561 1741.59,231.474 1742.15,229.075 1742.72,229.143 1743.29,229.181 1743.86,230.271 1744.43,231.091 1745,231.08 1745.56,230.982 1746.13,231.007 1746.7,229.688 1747.27,231.894 1747.84,233.034 1748.41,234.841 1748.97,233.604 1749.54,232.294 1750.11,232.034 1750.68,230.798 1751.25,230.758 1751.82,228.461 1752.38,228.699 1752.95,228.98 1753.52,229.149 1754.09,226.103 1754.66,227.493 1755.23,228.747 1755.79,227.747 1756.36,226.839 1756.93,228.041 1757.5,229.182 1758.07,230.126 1758.64,230.082 1759.21,230.11 1759.77,230.061 1760.34,230.056 1760.91,228.919 1761.48,228.084 1762.05,227.254 1762.62,229.747 1763.18,230.784 1763.75,229.616 1764.32,228.877 1764.89,230.091 1765.46,229.304 1766.03,228.482 1766.59,227.702 1767.16,228.869 1767.73,229.177 1768.3,228.088 1768.87,225.29 1769.44,226.56 1770,225.773 1770.57,227.194 1771.14,229.508 1771.71,227.749 1772.28,228.071 1772.85,228.232 1773.41,229.449 1773.98,229.753 1774.55,229.865 1775.12,230.011 1775.69,230.223 1776.26,231.472 1776.82,231.469 1777.39,233.234 1777.96,233.136 1778.53,233.902 1779.1,234.014 1779.67,235.709 1780.23,236.472 1780.8,232.898 1781.37,231.687 1781.94,232.81 1782.51,233.546 1783.08,233.281 1783.64,233.014 1784.21,232.774 1784.78,231.68 1785.35,233.824 1785.92,234.717 1786.49,235.562 1787.05,236.203 1787.62,236.761 1788.19,233.109 1788.76,230.78 1789.33,230.666 1789.9,230.733 1790.46,231.835 1791.03,232.803 1791.6,231.659 1792.17,232.608 1792.74,232.464 1793.31,231.219 1793.87,231.21 1794.44,230.077 1795.01,232.353 1795.58,231.022 1796.15,231.099 1796.72,229.267 1797.28,230.608 1797.85,230.359 1798.42,229.294 1798.99,228.363 1799.56,228.513 1800.13,228.819 1800.69,230.077 1801.26,229.977 1801.83,228.991 1802.4,226.067 1802.97,228.648 1803.54,230.835 1804.1,229.811 1804.67,232.761 1805.24,232.621 1805.81,231.47 1806.38,230.434 1806.95,229.806 1807.51,228.716 1808.08,227.773 1808.65,226.025 1809.22,224.389 1809.79,223.869 1810.36,224.388 1810.92,225.04 1811.49,224.512 1812.06,227.4 1812.63,227.95 1813.2,232.37 1813.77,232.307 1814.33,234.13 1814.9,234.979 1815.47,232.453 1816.04,234.361 1816.61,234.072 1817.18,232.953 1817.74,232.784 1818.31,233.772 1818.88,235.532 1819.45,233.142 1820.02,233.104 1820.59,234.033 1821.15,233.864 1821.72,232.661 1822.29,232.491 1822.86,231.254 1823.43,231.159 1824,232.3 1824.56,232.063 1825.13,230.011 1825.7,234.365 1826.27,232.984 1826.84,231.709 1827.41,229.639 1827.97,230.777 1828.54,228.842 1829.11,228.958 1829.68,229.285 1830.25,229.329 1830.82,231.724 1831.39,228.706 1831.95,226.617 1832.52,227.067 1833.09,226.302 1833.66,223.507 1834.23,224.17 1834.8,225.801 1835.36,227.235 1835.93,227.739 1836.5,227.941 1837.07,227.175 1837.64,228.615 1838.21,228.89 1838.77,230.269 1839.34,230.512 1839.91,230.593 1840.48,229.575 1841.05,229.771 1841.62,230.035 1842.18,229.382 1842.75,229.592 1843.32,230.888 1843.89,231.918 1844.46,234.053 1845.03,235.105 1845.59,235.904 1846.16,237.597 1846.73,238.346 1847.3,238.851 1847.87,236.036 1848.44,235.529 1849,236.08 1849.57,235.955 1850.14,235.632 1850.71,234.145 1851.28,233.057 1851.85,232.919 1852.41,233.736 1852.98,232.637 1853.55,232.568 1854.12,232.368 1854.69,233.286 1855.26,234.091 1855.82,230.847 1856.39,230.784 1856.96,230.704 1857.53,230.597 1858.1,231.581 1858.67,231.421 1859.23,231.271 1859.8,232.419 1860.37,230.344 1860.94,230.335 1861.51,232.73 1862.08,233.322 1862.64,232.093 1863.21,232.031 1863.78,230.955 1864.35,230.75 1864.92,229.838 1865.49,228.923 1866.05,230.242 1866.62,232.307 1867.19,232.42 1867.76,232.186 1868.33,230.812 1868.9,228.815 1869.46,230.923 1870.03,228.855 1870.6,231.178 1871.17,232.265 1871.74,234.411 1872.31,232.008 1872.87,230.837 1873.44,231.808 1874.01,231.621 1874.58,231.917 1875.15,232.728 1875.72,232.537 1876.28,232.224 1876.85,233.101 1877.42,234.269 1877.99,235.32 1878.56,234.889 1879.13,234.293 1879.69,233.762 1880.26,233.323 1880.83,232.071 1881.4,229.83 1881.97,229.713 1882.54,230.928 1883.1,231.933 1883.67,230.762 1884.24,232.645 1884.81,232.468 1885.38,230.274 1885.95,229.216 1886.51,230.362 1887.08,230.266 1887.65,228.375 1888.22,226.623 1888.79,226.055 1889.36,226.396 1889.92,226.526 1890.49,227.798 1891.06,227.95 1891.63,227.216 1892.2,226.486 1892.77,228.81 1893.33,228.903 1893.9,228.066 1894.47,228.273 1895.04,229.457 1895.61,232.571 1896.18,232.236 1896.74,233.017 1897.31,232.601 1897.88,232.568 1898.45,233.587 1899.02,233.321 1899.59,233.041 1900.16,235.151 1900.72,231.816 1901.29,232.782 1901.86,234.856 1902.43,234.53 1903,234.15 1903.57,232.806 1904.13,233.34 1904.7,232.018 1905.27,230.894 1905.84,230.999 1906.41,229.943 1906.98,232.109 1907.54,232.902 1908.11,231.663 1908.68,230.489 1909.25,228.374 1909.82,227.482 1910.39,229.935 1910.95,229.749 1911.52,230.698 1912.09,231.719 1912.66,230.393 1913.23,229.359 1913.8,228.496 1914.36,228.469 1914.93,227.407 1915.5,228.77 1916.07,227.792 1916.64,227.969 1917.21,228.37 1917.77,228.621 1918.34,228.863 1918.91,229.127 1919.48,229.414 1920.05,229.384 1920.62,229.579 1921.18,228.463 1921.75,228.606 1922.32,230.827 1922.89,230.94 1923.46,230.919 1924.03,230.724 1924.59,229.466 1925.16,229.651 1925.73,228.925 1926.3,230.044 1926.87,230.063 1927.44,229.996 1928,229.825 1928.57,231.832 1929.14,230.92 1929.71,232.726 1930.28,232.551 1930.85,233.446 1931.41,234.317 1931.98,234.103 1932.55,232.857 1933.12,233.792 1933.69,231.506 1934.26,231.486 1934.82,231.322 1935.39,232.376 1935.96,232.172 1936.53,234.043 1937.1,233.916 1937.67,234.694 1938.23,234.327 1938.8,234.306 1939.37,234.306 1939.94,235.395 1940.51,234.985 1941.08,233.209 1941.64,235.097 1942.21,234.771 1942.78,234.434 1943.35,234.261 1943.92,234.438 1944.49,234.04 1945.05,236.761 1945.62,236.087 1946.19,234.837 1946.76,234.334 1947.33,234.161 1947.9,232.658 1948.46,233.548 1949.03,233.018 1949.6,233.654 1950.17,233.296 1950.74,233.232 1951.31,234.018 1951.87,233.939 1952.44,233.686 1953.01,234.366 1953.58,233.915 1954.15,235.389 1954.72,233.686 1955.28,233.076 1955.85,229.87 1956.42,228.835 1956.99,227.849 1957.56,227.068 1958.13,227.155 1958.69,227.244 1959.26,224.319 1959.83,224.541 1960.4,225.774 1960.97,227.006 1961.54,227.136 1962.1,228.328 1962.67,227.203 1963.24,226.378 1963.81,226.552 1964.38,224.833 1964.95,224.103 1965.51,225.645 1966.08,228.081 1966.65,227.015 1967.22,228.161 1967.79,228.307 1968.36,224.547 1968.92,225.871 1969.49,226.344 1970.06,225.469 1970.63,224.922 1971.2,224.375 1971.77,226.827 1972.34,227.01 1972.9,227.256 1973.47,226.52 1974.04,224.75 1974.61,225.226 1975.18,226.533 1975.75,225.668 1976.31,223.038 1976.88,222.522 1977.45,223.208 1978.02,226.932 1978.59,227.219 1979.16,227.421 1979.72,226.617 1980.29,229.108 1980.86,228.476 1981.43,226.967 1982,228.286 1982.57,227.502 1983.13,227.862 1983.7,231.354 1984.27,231.544 1984.84,233.564 1985.41,233.566 1985.98,232.587 1986.54,232.666 1987.11,233.584 1987.68,232.45 1988.25,233.315 1988.82,234.516 1989.39,232.378 1989.95,231.223 1990.52,232.357 1991.09,232.366 1991.66,231.564 1992.23,231.62 1992.8,230.813 1993.36,232.209 1993.93,231.171 1994.5,230.169 1995.07,230.227 1995.64,230.478 1996.21,228.708 1996.77,231.098 1997.34,232.106 1997.91,232.158 1998.48,233.13 1999.05,232.416 1999.62,232.457 2000.18,232.471 2000.75,233.471 2001.32,235.366 2001.89,235.337 2002.46,232.978 2003.03,234.027 2003.59,233.936 2004.16,232.785 2004.73,229.64 2005.3,230.02 2005.87,229.097 2006.44,229.298 2007,228.417 2007.57,227.681 2008.14,231.136 2008.71,230.261 2009.28,232.529 2009.85,231.446 2010.41,231.426 2010.98,230.35 2011.55,232.516 2012.12,229.396 2012.69,231.491 2013.26,231.498 2013.82,230.768 2014.39,231.476 2014.96,232.737 2015.53,232.608 2016.1,235.42 2016.67,234.225 2017.23,233.981 2017.8,233.933 2018.37,235.816 2018.94,237.806 2019.51,236.369 2020.08,236.177 2020.64,236.648 2021.21,237.294 2021.78,236.96 2022.35,235.428 2022.92,234.234 2023.49,232.933 2024.05,231.341 2024.62,233.543 2025.19,233.525 2025.76,234.418 2026.33,234.39 2026.9,233.379 2027.46,232.113 2028.03,230.15 2028.6,231.265 2029.17,229.198 2029.74,231.109 2030.31,230.897 2030.87,229.625 2031.44,229.676 2032.01,230.915 2032.58,229.88 2033.15,230.056 2033.72,227.998 2034.28,228.295 2034.85,227.514 2035.42,227.786 2035.99,227.959 2036.56,227.135 2037.13,230.608 2037.69,233.925 2038.26,232.638 2038.83,231.582 2039.4,231.489 2039.97,232.674 2040.54,231.417 2041.11,232.514 2041.67,232.35 2042.24,232.186 2042.81,232.12 2043.38,232.103 2043.95,231.974 2044.52,231.84 2045.08,229.756 2045.65,229.702 2046.22,229.871 2046.79,231.05 2047.36,230.009 2047.93,230.034 2048.49,229.307 2049.06,228.374 2049.63,228.331 2050.2,229.662 2050.77,229.775 2051.34,229.84 2051.9,232.103 2052.47,233.025 2053.04,232.655 2053.61,235.67 2054.18,235.226 2054.75,232.894 2055.31,232.83 2055.88,231.908 2056.45,231.877 2057.02,232.029 2057.59,234.018 2058.16,232.745 2058.72,232.586 2059.29,233.557 2059.86,232.405 2060.43,229.45 2061,229.375 2061.57,230.327 2062.13,230.244 2062.7,230.225 2063.27,226.262 2063.84,224.643 2064.41,226.205 2064.98,225.674 2065.54,225.901 2066.11,228.372 2066.68,227.686 2067.25,230.15 2067.82,230.234 2068.39,230.171 2068.95,229.195 2069.52,230.386 2070.09,231.52 2070.66,230.441 2071.23,230.478 2071.8,228.831 2072.36,230.975 2072.93,228.997 2073.5,233.327 2074.07,232.147 2074.64,232.895 2075.21,232.76 2075.77,232.667 2076.34,233.6 2076.91,233.389 2077.48,233.192 2078.05,232.003 2078.62,234.009 2079.18,233.702 2079.75,234.564 2080.32,233.078 2080.89,233.573 2081.46,232.375 2082.03,232.249 2082.59,234.338 2083.16,235.169 2083.73,232.726 2084.3,231.599 2084.87,230.582 2085.44,230.528 2086,233.779 2086.57,236.578 2087.14,235.206 2087.71,231.913 2088.28,231.903 2088.85,232.514 2089.41,233.318 2089.98,233.23 2090.55,231.989 2091.12,229.948 2091.69,228.645 2092.26,229.896 2092.82,229.972 2093.39,229.812 2093.96,228.868 2094.53,227.884 2095.1,225.086 2095.67,226.506 2096.23,226.785 2096.8,228.073 2097.37,228.146 2097.94,227.275 2098.51,228.684 2099.08,228.871 2099.64,230.128 2100.21,227.095 2100.78,224.376 2101.35,226.064 2101.92,226.551 2102.49,225.805 2103.05,228.416 2103.62,228.516 2104.19,227.884 2104.76,226.023 2105.33,226.545 2105.9,228.715 2106.46,228.969 2107.03,229.048 2107.6,229.44 2108.17,230.672 2108.74,232.6 2109.31,231.397 2109.87,231.513 2110.44,232.577 2111.01,233.633 2111.58,234.341 2112.15,232.151 2112.72,233.037 2113.29,230.755 2113.85,229.729 2114.42,231.752 2114.99,230.674 2115.56,229.876 2116.13,230.984 2116.7,229.774 2117.26,232.019 2117.83,231.907 2118.4,231.907 2118.97,232.991 2119.54,231.698 2120.11,229.615 2120.67,229.969 2121.24,229.07 2121.81,228.454 2122.38,229.64 2122.95,228.652 2123.52,228.961 2124.08,227.135 2124.65,227.529 2125.22,230.88 2125.79,232.08 2126.36,232.233 2126.93,233.157 2127.49,231.218 2128.06,234.39 2128.63,233.2 2129.2,232.25 2129.77,233.274 2130.34,233.057 2130.9,230.782 2131.47,230.645 2132.04,227.622 2132.61,228.818 2133.18,226.987 2133.75,228.406 2134.31,227.43 2134.88,227.749 2135.45,227.111 2136.02,227.488 2136.59,227.778 2137.16,226.076 2137.72,228.562 2138.29,227.958 2138.86,230.282 2139.43,233.54 2140,231.216 2140.57,232.374 2141.13,235.553 2141.7,233.245 2142.27,232.084 2142.84,229.089 2143.41,232.327 2143.98,232.28 2144.54,229.507 2145.11,230.583 2145.68,232.66 2146.25,231.598 2146.82,231.481 2147.39,231.629 2147.95,232.575 2148.52,232.457 2149.09,233.458 2149.66,235.201 2150.23,235.861 2150.8,234.504 2151.36,234.119 2151.93,235.924 2152.5,235.689 2153.07,238.291 2153.64,237.666 2154.21,236.058 2154.77,234.885 2155.34,231.501 2155.91,230.38 2156.48,230.374 2157.05,230.45 2157.62,232.43 2158.18,233.408 2158.75,234.039 2159.32,229.673 2159.89,229.723 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.037 ± 0.022\n  with uncertainty of ± 0.0020335162840189247\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01747 ± (0.00213338, 0.0020854) (MC)\n  95% confidence interval: [-4.02155, -4.01323]) (MC)\n  linear error propagation: -4.01753 ± 0.0021386\n  |δ_y| = |0.0013466| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017467949869619, val_l = 0.004079066590678693, val_u = 0.0042371401990610735)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip960\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip960)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip961\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip960)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip962\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.97 2211.02,1150.97 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,998.433 2211.02,998.433 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,845.892 2211.02,845.892 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,693.351 2211.02,693.351 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,540.811 2211.02,540.811 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,388.27 2211.02,388.27 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,235.729 2211.02,235.729 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.97 365.751,1150.97 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,998.433 365.751,998.433 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,845.892 365.751,845.892 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,693.351 365.751,693.351 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,540.811 365.751,540.811 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,388.27 365.751,388.27 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,235.729 365.751,235.729 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M298.909 1136.77 Q295.298 1136.77 293.469 1140.34 Q291.664 1143.88 291.664 1151.01 Q291.664 1158.12 293.469 1161.68 Q295.298 1165.22 298.909 1165.22 Q302.543 1165.22 304.349 1161.68 Q306.177 1158.12 306.177 1151.01 Q306.177 1143.88 304.349 1140.34 Q302.543 1136.77 298.909 1136.77 M298.909 1133.07 Q304.719 1133.07 307.775 1137.68 Q310.853 1142.26 310.853 1151.01 Q310.853 1159.74 307.775 1164.34 Q304.719 1168.93 298.909 1168.93 Q293.099 1168.93 290.02 1164.34 Q286.964 1159.74 286.964 1151.01 Q286.964 1142.26 290.02 1137.68 Q293.099 1133.07 298.909 1133.07 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M259.557 1011.78 L267.196 1011.78 L267.196 985.413 L258.886 987.079 L258.886 982.82 L267.15 981.153 L271.826 981.153 L271.826 1011.78 L279.465 1011.78 L279.465 1015.71 L259.557 1015.71 L259.557 1011.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 984.232 Q295.298 984.232 293.469 987.797 Q291.664 991.338 291.664 998.468 Q291.664 1005.57 293.469 1009.14 Q295.298 1012.68 298.909 1012.68 Q302.543 1012.68 304.349 1009.14 Q306.177 1005.57 306.177 998.468 Q306.177 991.338 304.349 987.797 Q302.543 984.232 298.909 984.232 M298.909 980.528 Q304.719 980.528 307.775 985.135 Q310.853 989.718 310.853 998.468 Q310.853 1007.19 307.775 1011.8 Q304.719 1016.38 298.909 1016.38 Q293.099 1016.38 290.02 1011.8 Q286.964 1007.19 286.964 998.468 Q286.964 989.718 290.02 985.135 Q293.099 980.528 298.909 980.528 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M262.775 859.237 L279.094 859.237 L279.094 863.172 L257.15 863.172 L257.15 859.237 Q259.812 856.483 264.395 851.853 Q269.002 847.2 270.182 845.858 Q272.428 843.335 273.307 841.598 Q274.21 839.839 274.21 838.149 Q274.21 835.395 272.266 833.659 Q270.344 831.923 267.242 831.923 Q265.043 831.923 262.59 832.686 Q260.159 833.45 257.381 835.001 L257.381 830.279 Q260.205 829.145 262.659 828.566 Q265.113 827.987 267.15 827.987 Q272.52 827.987 275.715 830.673 Q278.909 833.358 278.909 837.848 Q278.909 839.978 278.099 841.899 Q277.312 843.798 275.205 846.39 Q274.627 847.061 271.525 850.279 Q268.423 853.473 262.775 859.237 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 831.691 Q295.298 831.691 293.469 835.256 Q291.664 838.798 291.664 845.927 Q291.664 853.034 293.469 856.598 Q295.298 860.14 298.909 860.14 Q302.543 860.14 304.349 856.598 Q306.177 853.034 306.177 845.927 Q306.177 838.798 304.349 835.256 Q302.543 831.691 298.909 831.691 M298.909 827.987 Q304.719 827.987 307.775 832.594 Q310.853 837.177 310.853 845.927 Q310.853 854.654 307.775 859.26 Q304.719 863.844 298.909 863.844 Q293.099 863.844 290.02 859.26 Q286.964 854.654 286.964 845.927 Q286.964 837.177 290.02 832.594 Q293.099 827.987 298.909 827.987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M272.914 691.997 Q276.27 692.715 278.145 694.983 Q280.043 697.252 280.043 700.585 Q280.043 705.701 276.525 708.502 Q273.006 711.303 266.525 711.303 Q264.349 711.303 262.034 710.863 Q259.742 710.446 257.289 709.59 L257.289 705.076 Q259.233 706.21 261.548 706.789 Q263.863 707.368 266.386 707.368 Q270.784 707.368 273.076 705.632 Q275.39 703.895 275.39 700.585 Q275.39 697.53 273.238 695.817 Q271.108 694.081 267.289 694.081 L263.261 694.081 L263.261 690.238 L267.474 690.238 Q270.923 690.238 272.752 688.872 Q274.58 687.483 274.58 684.891 Q274.58 682.229 272.682 680.817 Q270.807 679.382 267.289 679.382 Q265.367 679.382 263.168 679.798 Q260.969 680.215 258.33 681.095 L258.33 676.928 Q260.992 676.187 263.307 675.817 Q265.645 675.446 267.705 675.446 Q273.029 675.446 276.131 677.877 Q279.233 680.284 279.233 684.405 Q279.233 687.275 277.59 689.266 Q275.946 691.233 272.914 691.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 679.15 Q295.298 679.15 293.469 682.715 Q291.664 686.257 291.664 693.386 Q291.664 700.493 293.469 704.057 Q295.298 707.599 298.909 707.599 Q302.543 707.599 304.349 704.057 Q306.177 700.493 306.177 693.386 Q306.177 686.257 304.349 682.715 Q302.543 679.15 298.909 679.15 M298.909 675.446 Q304.719 675.446 307.775 680.053 Q310.853 684.636 310.853 693.386 Q310.853 702.113 307.775 706.719 Q304.719 711.303 298.909 711.303 Q293.099 711.303 290.02 706.719 Q286.964 702.113 286.964 693.386 Q286.964 684.636 290.02 680.053 Q293.099 675.446 298.909 675.446 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M271.594 527.605 L259.789 546.054 L271.594 546.054 L271.594 527.605 M270.367 523.531 L276.247 523.531 L276.247 546.054 L281.177 546.054 L281.177 549.942 L276.247 549.942 L276.247 558.091 L271.594 558.091 L271.594 549.942 L255.992 549.942 L255.992 545.429 L270.367 523.531 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 526.609 Q295.298 526.609 293.469 530.174 Q291.664 533.716 291.664 540.845 Q291.664 547.952 293.469 551.517 Q295.298 555.058 298.909 555.058 Q302.543 555.058 304.349 551.517 Q306.177 547.952 306.177 540.845 Q306.177 533.716 304.349 530.174 Q302.543 526.609 298.909 526.609 M298.909 522.906 Q304.719 522.906 307.775 527.512 Q310.853 532.095 310.853 540.845 Q310.853 549.572 307.775 554.179 Q304.719 558.762 298.909 558.762 Q293.099 558.762 290.02 554.179 Q286.964 549.572 286.964 540.845 Q286.964 532.095 290.02 527.512 Q293.099 522.906 298.909 522.906 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M258.793 370.99 L277.15 370.99 L277.15 374.925 L263.076 374.925 L263.076 383.397 Q264.094 383.05 265.113 382.888 Q266.131 382.703 267.15 382.703 Q272.937 382.703 276.316 385.874 Q279.696 389.045 279.696 394.462 Q279.696 400.04 276.224 403.142 Q272.752 406.221 266.432 406.221 Q264.256 406.221 261.988 405.851 Q259.742 405.48 257.335 404.739 L257.335 400.04 Q259.418 401.175 261.641 401.73 Q263.863 402.286 266.34 402.286 Q270.344 402.286 272.682 400.179 Q275.02 398.073 275.02 394.462 Q275.02 390.851 272.682 388.744 Q270.344 386.638 266.34 386.638 Q264.465 386.638 262.59 387.054 Q260.738 387.471 258.793 388.351 L258.793 370.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 374.068 Q295.298 374.068 293.469 377.633 Q291.664 381.175 291.664 388.304 Q291.664 395.411 293.469 398.976 Q295.298 402.517 298.909 402.517 Q302.543 402.517 304.349 398.976 Q306.177 395.411 306.177 388.304 Q306.177 381.175 304.349 377.633 Q302.543 374.068 298.909 374.068 M298.909 370.365 Q304.719 370.365 307.775 374.971 Q310.853 379.554 310.853 388.304 Q310.853 397.031 307.775 401.638 Q304.719 406.221 298.909 406.221 Q293.099 406.221 290.02 401.638 Q286.964 397.031 286.964 388.304 Q286.964 379.554 290.02 374.971 Q293.099 370.365 298.909 370.365 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M269.326 233.865 Q266.178 233.865 264.326 236.018 Q262.497 238.171 262.497 241.921 Q262.497 245.648 264.326 247.824 Q266.178 249.976 269.326 249.976 Q272.474 249.976 274.303 247.824 Q276.154 245.648 276.154 241.921 Q276.154 238.171 274.303 236.018 Q272.474 233.865 269.326 233.865 M278.608 219.213 L278.608 223.472 Q276.849 222.639 275.043 222.199 Q273.261 221.759 271.502 221.759 Q266.872 221.759 264.418 224.884 Q261.988 228.009 261.641 234.328 Q263.006 232.314 265.066 231.25 Q267.127 230.162 269.603 230.162 Q274.812 230.162 277.821 233.333 Q280.853 236.481 280.853 241.921 Q280.853 247.245 277.705 250.462 Q274.557 253.68 269.326 253.68 Q263.33 253.68 260.159 249.097 Q256.988 244.49 256.988 235.763 Q256.988 227.569 260.877 222.708 Q264.766 217.824 271.316 217.824 Q273.076 217.824 274.858 218.171 Q276.664 218.518 278.608 219.213 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M298.909 221.527 Q295.298 221.527 293.469 225.092 Q291.664 228.634 291.664 235.763 Q291.664 242.87 293.469 246.435 Q295.298 249.976 298.909 249.976 Q302.543 249.976 304.349 246.435 Q306.177 242.87 306.177 235.763 Q306.177 228.634 304.349 225.092 Q302.543 221.527 298.909 221.527 M298.909 217.824 Q304.719 217.824 307.775 222.43 Q310.853 227.014 310.853 235.763 Q310.853 244.49 307.775 249.097 Q304.719 253.68 298.909 253.68 Q293.099 253.68 290.02 249.097 Q286.964 244.49 286.964 235.763 Q286.964 227.014 290.02 222.43 Q293.099 217.824 298.909 217.824 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip962)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1038.58 400.199,935.32 400.786,840.577 401.372,753.776 401.958,674.39 402.545,601.929 403.131,535.939 403.718,475.999 404.304,421.716 404.891,464.924 405.477,417.765 406.063,374.191 406.65,335.162 407.236,301.612 407.823,270.736 408.409,243.579 408.995,219.895 409.582,256.044 410.168,237.726 410.755,269.179 411.341,253.514 411.927,241.064 412.514,230.411 413.1,222.026 413.687,250.19 414.273,245.58 414.86,271.886 415.446,270.011 416.032,295.383 416.619,295.619 417.205,320.038 417.792,322.606 418.378,346.228 418.964,349.835 419.551,355.306 420.137,361.071 420.724,382.621 421.31,389.554 421.896,409.943 422.483,443.989 423.069,451.032 423.656,458.512 424.242,466.576 424.829,484.772 425.415,503.613 426.001,521.879 426.588,539.757 427.174,556.169 427.761,573.009 428.347,611.915 428.933,641.764 429.52,651.223 430.106,661.366 430.693,670.981 431.279,687.017 431.865,702.608 432.452,723.025 433.038,732.104 433.625,741.736 434.211,750.72 434.798,760.137 435.384,769.637 435.97,796.077 436.557,804.116 437.143,823.77 437.73,831.183 438.316,838.589 438.902,849.558 439.489,860.283 440.075,881.119 440.662,890.995 441.248,900.771 441.835,919.402 442.421,928.083 443.007,936.556 443.594,945.14 444.18,953.525 444.767,961.964 445.353,967.371 445.939,980.684 446.526,988.744 447.112,993.58 447.699,1006.32 448.285,1020.84 448.871,1027.28 449.458,1038.37 450.044,1051.53 450.631,1054.85 451.217,1062.59 451.804,1069.95 452.39,1075.29 452.976,1084.68 453.563,1089.17 454.149,1095.62 454.736,1101.94 455.322,1109.81 455.908,1113.82 456.495,1117.5 457.081,1119.23 457.668,1123.31 458.254,1127.14 458.84,1130.95 459.427,1134.73 460.013,1138.33 460.6,1140.13 461.186,1145.47 461.773,1150.63 462.359,1153.97 462.945,1158.76 463.532,1159.89 464.118,1161.69 464.705,1166.41 465.291,1172.42 465.877,1176.3 466.464,1176.99 467.05,1179.6 467.637,1178.78 468.223,1181.02 468.809,1183.62 469.396,1187.44 469.982,1191.02 470.569,1191.68 471.155,1196.72 471.742,1198.89 472.328,1202.21 472.914,1201.11 473.501,1202.72 474.087,1205.95 474.674,1206.29 475.26,1212.46 475.846,1213.8 476.433,1215.35 477.019,1218.16 477.606,1219.77 478.192,1221.22 478.778,1222.26 479.365,1227.85 479.951,1228.86 480.538,1228.21 481.124,1229.18 481.711,1230.17 482.297,1232.67 482.883,1227.78 483.47,1228.95 484.056,1230.17 484.643,1232.56 485.229,1233.26 485.815,1232.89 486.402,1230.9 486.988,1230.34 487.575,1234.3 488.161,1236.94 488.748,1236.44 489.334,1240.05 489.92,1239.23 490.507,1241.27 491.093,1241.91 491.68,1241.14 492.266,1240.65 492.852,1241.66 493.439,1240.86 494.025,1243.1 494.612,1246.38 495.198,1242.76 495.784,1244.67 496.371,1246.33 496.957,1245.52 497.544,1244.88 498.13,1244.07 498.717,1242.05 499.303,1239.15 499.889,1239.77 500.476,1240.29 501.062,1239.78 501.649,1242.18 502.235,1242.85 502.821,1242.22 503.408,1238.9 503.994,1236.01 504.581,1236.89 505.167,1238.06 505.753,1237.59 506.34,1241.08 506.926,1239.27 507.513,1237.57 508.099,1236.19 508.686,1236.22 509.272,1236.07 509.858,1233.35 510.445,1233.43 511.031,1233.51 511.618,1233.4 512.204,1234.8 512.79,1236.08 513.377,1235.91 513.963,1239.42 514.55,1237.47 515.136,1236.24 515.722,1235.78 516.309,1239.37 516.895,1241.57 517.482,1243.79 518.068,1246.11 518.655,1245.6 519.241,1245.02 519.827,1248.32 520.414,1247.36 521,1247.82 521.587,1247.36 522.173,1246.55 522.759,1248.46 523.346,1248.93 523.932,1250.53 524.519,1248.28 525.105,1246.29 525.691,1246.61 526.278,1245.79 526.864,1246.51 527.451,1246.79 528.037,1246.92 528.624,1245.12 529.21,1244.47 529.796,1247.54 530.383,1248.06 530.969,1248.45 531.556,1246.42 532.142,1246.77 532.728,1246.15 533.315,1247.96 533.901,1245.6 534.488,1247.55 535.074,1246.76 535.661,1247.06 536.247,1246.23 536.833,1245.64 537.42,1243.78 538.006,1244.35 538.593,1243.76 539.179,1243.07 539.765,1243.55 540.352,1242.68 540.938,1243.15 541.525,1242.59 542.111,1241.71 542.697,1240.1 543.284,1240.71 543.87,1241.33 544.457,1239.55 545.043,1237.82 545.63,1237.26 546.216,1238.27 546.802,1238.78 547.389,1237.11 547.975,1239.29 548.562,1240 549.148,1239.75 549.734,1236.8 550.321,1236.28 550.907,1237.13 551.494,1236.71 552.08,1236.6 552.666,1238.73 553.253,1238.19 553.839,1240.09 554.426,1238.18 555.012,1235.26 555.599,1238.62 556.185,1239.28 556.771,1240.18 557.358,1238.57 557.944,1239.53 558.531,1237.82 559.117,1237.34 559.703,1235.34 560.29,1236.37 560.876,1233.12 561.463,1232.65 562.049,1232.29 562.635,1234.23 563.222,1234.21 563.808,1233.95 564.395,1234.74 564.981,1233.21 565.568,1234.45 566.154,1236.58 566.74,1236.12 567.327,1235.6 567.913,1236.46 568.5,1234.68 569.086,1234.05 569.672,1233.84 570.259,1230.82 570.845,1228.04 571.432,1226.7 572.018,1229.15 572.605,1230.34 573.191,1233.66 573.777,1233.19 574.364,1230.13 574.95,1227.34 575.537,1229.91 576.123,1231.25 576.709,1232.06 577.296,1231.63 577.882,1231.36 578.469,1231.24 579.055,1230.16 579.641,1227.44 580.228,1229.76 580.814,1228.2 581.401,1230.4 581.987,1227.42 582.574,1227.37 583.16,1224.88 583.746,1223.76 584.333,1223.96 584.919,1224.09 585.506,1224.21 586.092,1226.75 586.678,1228.9 587.265,1228.85 587.851,1227.58 588.438,1224.89 589.024,1224.78 589.61,1223.75 590.197,1222.68 590.783,1224.17 591.37,1226.89 591.956,1227.04 592.543,1226.86 593.129,1226.73 593.715,1226.64 594.302,1229.3 594.888,1228.85 595.475,1229.82 596.061,1228.32 596.647,1227.86 597.234,1224.93 597.82,1226.27 598.407,1227.14 598.993,1226.98 599.579,1226.7 600.166,1226.47 600.752,1226.21 601.339,1228.43 601.925,1225.65 602.512,1225.78 603.098,1225.68 603.684,1226.89 604.271,1225.55 604.857,1224 605.444,1223.01 606.03,1223.15 606.616,1224.3 607.203,1223.33 607.789,1225.94 608.376,1224.37 608.962,1225.57 609.548,1225.42 610.135,1226.4 610.721,1227.45 611.308,1228.69 611.894,1230.97 612.481,1230.78 613.067,1231.65 613.653,1233.57 614.24,1231.95 614.826,1230.24 615.413,1228.39 615.999,1226.66 616.585,1227.7 617.172,1226.03 617.758,1228.55 618.345,1228.19 618.931,1229.16 619.518,1228.68 620.104,1226.99 620.69,1226.8 621.277,1227.67 621.863,1228.78 622.45,1227.12 623.036,1226.77 623.622,1226.37 624.209,1226.08 624.795,1225.47 625.382,1226.34 625.968,1226.14 626.554,1223.59 627.141,1223.53 627.727,1224.94 628.314,1226.02 628.9,1227.13 629.487,1226.79 630.073,1226.32 630.659,1226.15 631.246,1227.24 631.832,1229.3 632.419,1230.09 633.005,1232.06 633.591,1228.75 634.178,1228.18 634.764,1227.71 635.351,1228.52 635.937,1228.42 636.523,1228.33 637.11,1229.31 637.696,1231.34 638.283,1230.4 638.869,1231.16 639.456,1231.94 640.042,1232.49 640.628,1229.33 641.215,1229.02 641.801,1228.6 642.388,1226.97 642.974,1225.38 643.56,1226.15 644.147,1228.48 644.733,1229.33 645.32,1227.66 645.906,1227.16 646.492,1228.37 647.079,1228.31 647.665,1229.12 648.252,1230.12 648.838,1229.68 649.425,1228.11 650.011,1226.35 650.597,1226.03 651.184,1225.5 651.77,1226.7 652.357,1225.08 652.943,1227.31 653.529,1223.24 654.116,1222.95 654.702,1223.96 655.289,1222.63 655.875,1223.81 656.462,1221.52 657.048,1220.38 657.634,1222.52 658.221,1224.93 658.807,1225.96 659.394,1225.31 659.98,1226.45 660.566,1225.97 661.153,1226.76 661.739,1227.5 662.326,1227.03 662.912,1227.92 663.498,1227.71 664.085,1226.07 664.671,1225.57 665.258,1226.4 665.844,1225.85 666.431,1225.5 667.017,1222.71 667.603,1222.66 668.19,1222.33 668.776,1223.51 669.363,1222.11 669.949,1223.26 670.535,1225.58 671.122,1226.23 671.708,1227.29 672.295,1229.46 672.881,1228.89 673.467,1233.31 674.054,1232.47 674.64,1231.58 675.227,1232.09 675.813,1231.56 676.4,1229.87 676.986,1226.94 677.572,1224.02 678.159,1221.4 678.745,1218.95 679.332,1217.52 679.918,1217.31 680.504,1217.39 681.091,1216.19 681.677,1220.14 682.264,1222.24 682.85,1224.49 683.436,1224.92 684.023,1223.25 684.609,1224.3 685.196,1225.05 685.782,1224.75 686.369,1222.99 686.955,1220.29 687.541,1216.55 688.128,1217.99 688.714,1218.02 689.301,1221.35 689.887,1221.25 690.473,1218.29 691.06,1218.31 691.646,1217.98 692.233,1216.74 692.819,1215.58 693.405,1213.33 693.992,1213.71 694.578,1215 695.165,1216.53 695.751,1215.43 696.338,1211.66 696.924,1213.21 697.51,1213.36 698.097,1214.48 698.683,1214.57 699.27,1217.11 699.856,1217 700.442,1214.53 701.029,1212.5 701.615,1210.32 702.202,1211.82 702.788,1213.15 703.375,1213.58 703.961,1211.23 704.547,1210.37 705.134,1209.4 705.72,1209.81 706.307,1210.24 706.893,1210.69 707.479,1213.85 708.066,1213.98 708.652,1215.21 709.239,1218.98 709.825,1216.32 710.411,1215.21 710.998,1215.29 711.584,1216.7 712.171,1215.67 712.757,1216.79 713.344,1219.44 713.93,1218.15 714.516,1216.79 715.103,1216.91 715.689,1215.7 716.276,1215.73 716.862,1215.58 717.448,1214.56 718.035,1214.6 718.621,1217.26 719.208,1219.81 719.794,1218.68 720.38,1219.93 720.967,1219.56 721.553,1220.66 722.14,1220.59 722.726,1221.47 723.313,1223.57 723.899,1223.06 724.485,1223.95 725.072,1222.14 725.658,1223.17 726.245,1223.01 726.831,1222.77 727.417,1222.75 728.004,1220.12 728.59,1216.43 729.177,1216.38 729.763,1215.17 730.349,1215.26 730.936,1215.27 731.522,1215.49 732.109,1216.61 732.695,1216.6 733.282,1216.43 733.868,1215.17 734.454,1215.54 735.041,1217.66 735.627,1217.76 736.214,1218.79 736.8,1218.56 737.386,1218.19 737.973,1216.83 738.559,1216.69 739.146,1215.54 739.732,1215.79 740.318,1215.76 740.905,1215.89 741.491,1216.06 742.078,1214.84 742.664,1215.23 743.251,1215.16 743.837,1216.64 744.423,1216.62 745.01,1219.17 745.596,1220.33 746.183,1221.29 746.769,1218.7 747.355,1218.59 747.942,1215.96 748.528,1217.41 749.115,1217.28 749.701,1213.31 750.288,1213.35 750.874,1214.46 751.46,1217.11 752.047,1215.89 752.633,1217.22 753.22,1214.57 753.806,1213.62 754.392,1212.72 754.979,1211.71 755.565,1208.16 756.152,1207.41 756.738,1209.3 757.324,1210.66 757.911,1211.05 758.497,1212.51 759.084,1213.83 759.67,1214.04 760.257,1214.35 760.843,1214.26 761.429,1215.53 762.016,1211.8 762.602,1214.46 763.189,1214.45 763.775,1214.5 764.361,1214.38 764.948,1214.48 765.534,1214.42 766.121,1216.98 766.707,1216.7 767.293,1219.05 767.88,1219.87 768.466,1221.01 769.053,1219.31 769.639,1217.75 770.226,1216.32 770.812,1216.12 771.398,1214.62 771.985,1216.03 772.571,1215.95 773.158,1220.86 773.744,1219.52 774.33,1219.24 774.917,1219.99 775.503,1218.78 776.09,1218.66 776.676,1217.49 777.262,1214.95 777.849,1214.89 778.435,1214.98 779.022,1214.88 779.608,1213.64 780.195,1214.64 780.781,1214.52 781.367,1215.59 781.954,1215.92 782.54,1218.42 783.127,1218.33 783.713,1220.82 784.299,1220.65 784.886,1220.5 785.472,1221.61 786.059,1221.35 786.645,1222.26 787.232,1223.14 787.818,1221.57 788.404,1221.31 788.991,1221.13 789.577,1220.57 790.164,1221.51 790.75,1222.25 791.336,1221.88 791.923,1224.13 792.509,1223.8 793.096,1225.96 793.682,1224.06 794.268,1224.76 794.855,1223.12 795.441,1222.64 796.028,1222.11 796.614,1220.6 797.201,1221.54 797.787,1223.66 798.373,1219.6 798.96,1218.29 799.546,1219.43 800.133,1219.11 800.719,1219.94 801.305,1220.91 801.892,1220.68 802.478,1218.01 803.065,1216.42 803.651,1216.51 804.237,1211.61 804.824,1212.94 805.41,1211.86 805.997,1209.47 806.583,1210.95 807.17,1208.64 807.756,1212.75 808.342,1212.85 808.929,1211.52 809.515,1210.51 810.102,1212.19 810.688,1211.13 811.274,1212.41 811.861,1211.24 812.447,1215.27 813.034,1215.29 813.62,1212.69 814.206,1214.06 814.793,1217.56 815.379,1221.12 815.966,1224.35 816.552,1223.96 817.139,1223.75 817.725,1224.4 818.311,1222.57 818.898,1223.22 819.484,1224.03 820.071,1223.46 820.657,1222.84 821.243,1218.79 821.83,1218.8 822.416,1217.43 823.003,1216.36 823.589,1215.09 824.175,1214.96 824.762,1213.8 825.348,1212.57 825.935,1211.26 826.521,1211.46 827.108,1214.51 827.694,1212.01 828.28,1213.7 828.867,1215.19 829.453,1217.8 830.04,1217.66 830.626,1220.22 831.212,1218.64 831.799,1217.47 832.385,1217.36 832.972,1216.02 833.558,1214.85 834.145,1209.74 834.731,1209.93 835.317,1208.76 835.904,1211.46 836.49,1212.86 837.077,1215.38 837.663,1214.17 838.249,1215.33 838.836,1215.29 839.422,1216.45 840.009,1217.47 840.595,1217.02 841.181,1218.21 841.768,1218.11 842.354,1221.8 842.941,1221.24 843.527,1218.41 844.114,1215.72 844.7,1215.56 845.286,1215.55 845.873,1219.24 846.459,1217.64 847.046,1219.79 847.632,1218.48 848.218,1217 848.805,1218.34 849.391,1219.44 849.978,1217.61 850.564,1216.14 851.15,1217.28 851.737,1217.31 852.323,1216.98 852.91,1214.18 853.496,1213.25 854.083,1215.65 854.669,1217.01 855.255,1216.85 855.842,1216.75 856.428,1215.6 857.015,1214.2 857.601,1214.59 858.187,1214.43 858.774,1214.2 859.36,1215.41 859.947,1215.27 860.533,1215.25 861.119,1212.57 861.706,1214.02 862.292,1213.97 862.879,1213.99 863.465,1215.19 864.052,1217.82 864.638,1217.61 865.224,1216.2 865.811,1214.78 866.397,1213.44 866.984,1211.05 867.57,1212.5 868.156,1211.25 868.743,1211.62 869.329,1208.14 869.916,1208.5 870.502,1208.74 871.089,1209.36 871.675,1210.95 872.261,1214.86 872.848,1214.66 873.434,1215.86 874.021,1219.28 874.607,1216.51 875.193,1215.03 875.78,1213.5 876.366,1214.83 876.953,1214.8 877.539,1214.69 878.125,1216.13 878.712,1215.12 879.298,1214.96 879.885,1213.55 880.471,1215.8 881.058,1213.29 881.644,1208.36 882.23,1207.57 882.817,1209.03 883.403,1208.01 883.99,1209.59 884.576,1209.77 885.162,1210.15 885.749,1210.34 886.335,1208.02 886.922,1208.31 887.508,1205.91 888.094,1206.26 888.681,1205.48 889.267,1205.85 889.854,1204.93 890.44,1205.65 891.027,1206.1 891.613,1204.95 892.199,1208.01 892.786,1209.61 893.372,1210.06 893.959,1211.54 894.545,1210.36 895.131,1211.94 895.718,1213.12 896.304,1213.14 896.891,1214.4 897.477,1213.01 898.063,1209.42 898.65,1204.62 899.236,1204.99 899.823,1205.5 900.409,1204.44 900.996,1206.2 901.582,1206.43 902.168,1206.42 902.755,1206.81 903.341,1207.15 903.928,1207.77 904.514,1206.98 905.1,1205.91 905.687,1205 906.273,1209.35 906.86,1209.68 907.446,1211.38 908.032,1211.64 908.619,1211.82 909.205,1214.43 909.792,1213.18 910.378,1215.65 910.965,1216.93 911.551,1217.92 912.137,1218.81 912.724,1218.41 913.31,1219.17 913.897,1221.14 914.483,1218.28 915.069,1220.57 915.656,1216.63 916.242,1221.55 916.829,1218.78 917.415,1218.58 918.002,1217.05 918.588,1216.97 919.174,1216.72 919.761,1218.94 920.347,1220.06 920.934,1218.88 921.52,1218.49 922.106,1218.53 922.693,1219.53 923.279,1219.06 923.866,1220.01 924.452,1218.45 925.038,1216.75 925.625,1216.6 926.211,1217.69 926.798,1216.16 927.384,1213.49 927.971,1212.09 928.557,1215.92 929.143,1216.78 929.73,1215.21 930.316,1217.44 930.903,1217.26 931.489,1218.26 932.075,1216.68 932.662,1215.15 933.248,1215.03 933.835,1215.02 934.421,1212.45 935.007,1211.13 935.594,1211.39 936.18,1212.51 936.767,1213.76 937.353,1213.65 937.94,1214.94 938.526,1212.44 939.112,1211.33 939.699,1211.59 940.285,1211.84 940.872,1210.67 941.458,1211.89 942.044,1210.37 942.631,1208.1 943.217,1208.28 943.804,1209.81 944.39,1207.59 944.976,1206.82 945.563,1204.53 946.149,1203.58 946.736,1206.6 947.322,1208.03 947.909,1205.84 948.495,1206.42 949.081,1204.11 949.668,1207.16 950.254,1210.11 950.841,1210.25 951.427,1211.71 952.013,1213.25 952.6,1215.97 953.186,1216.18 953.773,1217.34 954.359,1216.07 954.945,1213.44 955.532,1212.44 956.118,1213.65 956.705,1217.47 957.291,1217.5 957.878,1215.96 958.464,1214.54 959.05,1212.26 959.637,1212.29 960.223,1212.18 960.81,1213.42 961.396,1214.66 961.982,1210.94 962.569,1214.85 963.155,1216.04 963.742,1216.02 964.328,1211.94 964.915,1212.06 965.501,1212.08 966.087,1209.9 966.674,1203.84 967.26,1204.43 967.847,1203.46 968.433,1205.2 969.019,1205.53 969.606,1210.74 970.192,1212.16 970.779,1213.13 971.365,1212.96 971.951,1214 972.538,1212.67 973.124,1212.48 973.711,1212.54 974.297,1211.61 974.884,1210.41 975.47,1213.21 976.056,1215.53 976.643,1215.49 977.229,1215.35 977.816,1217.8 978.402,1217.76 978.988,1218.81 979.575,1217.23 980.161,1217.04 980.748,1218.2 981.334,1220.63 981.92,1218.99 982.507,1221.38 983.093,1220.75 983.68,1221.48 984.266,1222.35 984.853,1220.74 985.439,1224.13 986.025,1227.34 986.612,1226.47 987.198,1227.76 987.785,1226.89 988.371,1224.86 988.957,1224.1 989.544,1224.63 990.13,1224.79 990.717,1223.93 991.303,1220.81 991.889,1219.14 992.476,1217.32 993.062,1217.01 993.649,1217.22 994.235,1217.17 994.822,1218.17 995.408,1219.21 995.994,1220.42 996.581,1217.59 997.167,1217.19 997.754,1214.27 998.34,1212.85 998.926,1214.24 999.513,1214.34 1000.1,1213.98 1000.69,1214.13 1001.27,1212.96 1001.86,1214.11 1002.44,1211.58 1003.03,1210.32 1003.62,1210.43 1004.2,1214.35 1004.79,1215.46 1005.38,1214.08 1005.96,1215.17 1006.55,1214.89 1007.14,1214.75 1007.72,1214.61 1008.31,1215.62 1008.9,1215.52 1009.48,1215.69 1010.07,1217.99 1010.65,1217.86 1011.24,1216.17 1011.83,1218.36 1012.41,1218.21 1013,1216.77 1013.59,1215.31 1014.17,1215.11 1014.76,1214.97 1015.35,1214.95 1015.93,1214.76 1016.52,1217.32 1017.11,1215.88 1017.69,1215.51 1018.28,1217.79 1018.86,1216.06 1019.45,1217.03 1020.04,1214.27 1020.62,1214.05 1021.21,1212.72 1021.8,1212.71 1022.38,1212.71 1022.97,1211.58 1023.56,1211.78 1024.14,1213.02 1024.73,1213.09 1025.32,1210.52 1025.9,1208.1 1026.49,1208.35 1027.07,1209.73 1027.66,1212.4 1028.25,1209.89 1028.83,1208.96 1029.42,1213.05 1030.01,1213.14 1030.59,1209.59 1031.18,1211.19 1031.77,1211.21 1032.35,1212.69 1032.94,1213.93 1033.52,1213.59 1034.11,1213.55 1034.7,1214.78 1035.28,1213.19 1035.87,1214.22 1036.46,1214.24 1037.04,1210.21 1037.63,1210.29 1038.22,1210.35 1038.8,1210.48 1039.39,1209.21 1039.98,1208.05 1040.56,1210.96 1041.15,1213.42 1041.73,1210.58 1042.32,1210.61 1042.91,1210.77 1043.49,1210.97 1044.08,1211.27 1044.67,1213.83 1045.25,1215.02 1045.84,1214.67 1046.43,1213.56 1047.01,1208.53 1047.6,1208.71 1048.19,1209.16 1048.77,1209.08 1049.36,1208.15 1049.94,1211.19 1050.53,1210.06 1051.12,1211.46 1051.7,1210.28 1052.29,1210.43 1052.88,1209.45 1053.46,1210.8 1054.05,1212.09 1054.64,1212.34 1055.22,1211.14 1055.81,1212.65 1056.39,1210.26 1056.98,1212.08 1057.57,1212.31 1058.15,1213.41 1058.74,1214.62 1059.33,1214.49 1059.91,1215.45 1060.5,1215.21 1061.09,1216.3 1061.67,1214.04 1062.26,1214.37 1062.85,1218.19 1063.43,1221.66 1064.02,1219.12 1064.6,1217.71 1065.19,1216.5 1065.78,1216.16 1066.36,1216.05 1066.95,1212.01 1067.54,1213.5 1068.12,1213.62 1068.71,1213.4 1069.3,1213.34 1069.88,1213.39 1070.47,1216.05 1071.06,1213.29 1071.64,1215.66 1072.23,1214.35 1072.81,1211.88 1073.4,1209.48 1073.99,1210.77 1074.57,1212.03 1075.16,1215.8 1075.75,1219.28 1076.33,1216.47 1076.92,1217.5 1077.51,1218.32 1078.09,1217.97 1078.68,1219.2 1079.26,1222.54 1079.85,1221.85 1080.44,1219.02 1081.02,1216.26 1081.61,1214.82 1082.2,1217.01 1082.78,1217.94 1083.37,1217.62 1083.96,1219.87 1084.54,1220.59 1085.13,1219.99 1085.72,1220.87 1086.3,1220.25 1086.89,1216.08 1087.47,1216.23 1088.06,1214.72 1088.65,1214.67 1089.23,1214.26 1089.82,1215.63 1090.41,1215.55 1090.99,1216.53 1091.58,1213.69 1092.17,1214.99 1092.75,1214.87 1093.34,1212.22 1093.93,1211.79 1094.51,1213.09 1095.1,1211.88 1095.68,1212 1096.27,1213.11 1096.86,1212.79 1097.44,1213.88 1098.03,1215.08 1098.62,1213.7 1099.2,1212.36 1099.79,1216.04 1100.38,1215.42 1100.96,1215.32 1101.55,1213.9 1102.14,1215.22 1102.72,1215.96 1103.31,1218.36 1103.89,1215.2 1104.48,1216.36 1105.07,1216.53 1105.65,1214.12 1106.24,1211.85 1106.83,1213.13 1107.41,1211.8 1108,1209.15 1108.59,1209.27 1109.17,1209.09 1109.76,1210.58 1110.34,1210.8 1110.93,1212.37 1111.52,1212.33 1112.1,1211.1 1112.69,1209.89 1113.28,1210.1 1113.86,1213.77 1114.45,1214.98 1115.04,1212.27 1115.62,1210.86 1116.21,1209.6 1116.8,1212.42 1117.38,1212.24 1117.97,1211.08 1118.55,1211.14 1119.14,1208.77 1119.73,1210.08 1120.31,1212.55 1120.9,1212.36 1121.49,1212.57 1122.07,1208.98 1122.66,1207.92 1123.25,1210.94 1123.83,1211.16 1124.42,1208.65 1125.01,1208.52 1125.59,1207.34 1126.18,1205.19 1126.76,1202.98 1127.35,1202.21 1127.94,1201.51 1128.52,1202.41 1129.11,1202.73 1129.7,1203.22 1130.28,1202.39 1130.87,1203.08 1131.46,1203.78 1132.04,1203.28 1132.63,1204.79 1133.21,1205.15 1133.8,1206.63 1134.39,1206.95 1134.97,1208.68 1135.56,1207.47 1136.15,1209.04 1136.73,1208.14 1137.32,1210.94 1137.91,1210.77 1138.49,1208.15 1139.08,1209.72 1139.67,1208.44 1140.25,1210.18 1140.84,1207.77 1141.42,1210.45 1142.01,1210.49 1142.6,1210.75 1143.18,1212.26 1143.77,1213.41 1144.36,1213.2 1144.94,1213.02 1145.53,1213.07 1146.12,1214.31 1146.7,1215.56 1147.29,1214.16 1147.88,1212.73 1148.46,1212.97 1149.05,1211.71 1149.63,1212.97 1150.22,1211.6 1150.81,1214.3 1151.39,1215.6 1151.98,1217.73 1152.57,1218.68 1153.15,1218.53 1153.74,1218.12 1154.33,1219.17 1154.91,1222.45 1155.5,1220.92 1156.09,1219.27 1156.67,1217.4 1157.26,1217.33 1157.84,1218.63 1158.43,1218.39 1159.02,1220.85 1159.6,1220.68 1160.19,1216.48 1160.78,1215.99 1161.36,1214.73 1161.95,1214.56 1162.54,1213.02 1163.12,1210.6 1163.71,1211.97 1164.29,1211.88 1164.88,1212.08 1165.47,1212.29 1166.05,1211.93 1166.64,1212.22 1167.23,1212.53 1167.81,1212.37 1168.4,1211.02 1168.99,1213.81 1169.57,1212.41 1170.16,1212.5 1170.75,1212.45 1171.33,1211.35 1171.92,1213.78 1172.5,1217.34 1173.09,1218.47 1173.68,1217.95 1174.26,1219.02 1174.85,1214.72 1175.44,1214.58 1176.02,1215.62 1176.61,1211.71 1177.2,1212.89 1177.78,1212.96 1178.37,1211.71 1178.96,1211.92 1179.54,1213.34 1180.13,1213.43 1180.71,1215.98 1181.3,1217.28 1181.89,1219.48 1182.47,1219.12 1183.06,1212.75 1183.65,1214.22 1184.23,1211.65 1184.82,1210.31 1185.41,1209.14 1185.99,1208.05 1186.58,1210.37 1187.16,1212.89 1187.75,1211.56 1188.34,1211.51 1188.92,1212.82 1189.51,1211.59 1190.1,1213.17 1190.68,1213.13 1191.27,1210.55 1191.86,1208.25 1192.44,1209.87 1193.03,1210.26 1193.62,1211.71 1194.2,1211.48 1194.79,1212.67 1195.37,1212.53 1195.96,1212.51 1196.55,1211.22 1197.13,1210 1197.72,1211.25 1198.31,1211.18 1198.89,1210.05 1199.48,1209.14 1200.07,1210.67 1200.65,1209.42 1201.24,1207.16 1201.83,1206.14 1202.41,1206.75 1203,1203.67 1203.58,1204.1 1204.17,1204.51 1204.76,1203.77 1205.34,1202.81 1205.93,1205.77 1206.52,1206.1 1207.1,1207.54 1207.69,1206.63 1208.28,1206.99 1208.86,1207.17 1209.45,1208.79 1210.03,1207.66 1210.62,1207.8 1211.21,1207.97 1211.79,1208.16 1212.38,1208.51 1212.97,1208.7 1213.55,1208.96 1214.14,1209.09 1214.73,1208.96 1215.31,1209.36 1215.9,1207.03 1216.49,1206.29 1217.07,1205.56 1217.66,1204.8 1218.24,1207.96 1218.83,1205.54 1219.42,1204.48 1220,1206.3 1220.59,1207.81 1221.18,1207.73 1221.76,1209.16 1222.35,1208.13 1222.94,1209.87 1223.52,1210.54 1224.11,1211.67 1224.7,1209.27 1225.28,1209.44 1225.87,1209.34 1226.45,1208.28 1227.04,1210 1227.63,1208.9 1228.21,1211.34 1228.8,1211.53 1229.39,1212.89 1229.97,1215.44 1230.56,1214.05 1231.15,1212.94 1231.73,1212.91 1232.32,1212.88 1232.91,1213.93 1233.49,1213.87 1234.08,1216.35 1234.66,1216.12 1235.25,1216.03 1235.84,1216.98 1236.42,1218.1 1237.01,1215.25 1237.6,1215.14 1238.18,1213.9 1238.77,1214.01 1239.36,1214.96 1239.94,1214.81 1240.53,1214.64 1241.11,1214.64 1241.7,1212.12 1242.29,1214.65 1242.87,1215.4 1243.46,1216.53 1244.05,1215.01 1244.63,1217.05 1245.22,1219.08 1245.81,1216.23 1246.39,1213.27 1246.98,1211.86 1247.57,1210.51 1248.15,1211.95 1248.74,1211.83 1249.32,1212.01 1249.91,1213.23 1250.5,1216.86 1251.08,1215.51 1251.67,1212.91 1252.26,1212.7 1252.84,1211.27 1253.43,1212.62 1254.02,1212.74 1254.6,1208.87 1255.19,1210.46 1255.78,1210.34 1256.36,1211.57 1256.95,1210.52 1257.53,1211.89 1258.12,1213.4 1258.71,1217.19 1259.29,1218.49 1259.88,1216.89 1260.47,1215.56 1261.05,1214.19 1261.64,1216.73 1262.23,1216.46 1262.81,1215.31 1263.4,1214.11 1263.98,1213.85 1264.57,1211.26 1265.16,1210.1 1265.74,1211.37 1266.33,1210.17 1266.92,1211.6 1267.5,1212.87 1268.09,1216.7 1268.68,1217.88 1269.26,1221.31 1269.85,1222.33 1270.44,1223.19 1271.02,1223.68 1271.61,1221.95 1272.19,1222.84 1272.78,1220.82 1273.37,1221.56 1273.95,1220.31 1274.54,1221.31 1275.13,1218.37 1275.71,1219.19 1276.3,1217.45 1276.89,1218.32 1277.47,1216.58 1278.06,1218.87 1278.65,1216.07 1279.23,1217.23 1279.82,1218.17 1280.4,1217.8 1280.99,1216.47 1281.58,1214.83 1282.16,1212.12 1282.75,1213.3 1283.34,1214.52 1283.92,1215.59 1284.51,1215.45 1285.1,1214.21 1285.68,1213.95 1286.27,1212.4 1286.86,1209.86 1287.44,1209.91 1288.03,1210.39 1288.61,1208.89 1289.2,1208.84 1289.79,1210.3 1290.37,1209.2 1290.96,1206.6 1291.55,1206.99 1292.13,1209.7 1292.72,1212.26 1293.31,1209.64 1293.89,1206 1294.48,1207.52 1295.06,1207.79 1295.65,1207.84 1296.24,1211.9 1296.82,1211.77 1297.41,1208.35 1298,1208.59 1298.58,1207.69 1299.17,1207.93 1299.76,1206.83 1300.34,1205.62 1300.93,1205.99 1301.52,1205.19 1302.1,1204.18 1302.69,1204.49 1303.27,1207.49 1303.86,1209.08 1304.45,1210.66 1305.03,1211.06 1305.62,1211.45 1306.21,1211.58 1306.79,1210.39 1307.38,1210.59 1307.97,1209.41 1308.55,1208.21 1309.14,1207.19 1309.73,1212.54 1310.31,1213.8 1310.9,1212.61 1311.48,1213.98 1312.07,1213.6 1312.66,1213.64 1313.24,1212.38 1313.83,1212.15 1314.42,1213.07 1315,1212.86 1315.59,1211.54 1316.18,1212.97 1316.76,1210.2 1317.35,1212.91 1317.93,1213.02 1318.52,1211.74 1319.11,1210.26 1319.69,1211.73 1320.28,1210.45 1320.87,1210.59 1321.45,1214.34 1322.04,1215.63 1322.63,1216.38 1323.21,1216.03 1323.8,1215.77 1324.39,1213.08 1324.97,1212.99 1325.56,1213.01 1326.14,1214.15 1326.73,1215.37 1327.32,1216.57 1327.9,1216.36 1328.49,1215.29 1329.08,1215.31 1329.66,1212.76 1330.25,1210.27 1330.84,1211.44 1331.42,1215.46 1332.01,1215.67 1332.6,1215.73 1333.18,1218.08 1333.77,1219.13 1334.35,1220.21 1334.94,1219.8 1335.53,1220.59 1336.11,1217.55 1336.7,1220.78 1337.29,1218.89 1337.87,1215.96 1338.46,1217.13 1339.05,1217.13 1339.63,1217.09 1340.22,1217.18 1340.8,1215.51 1341.39,1215.4 1341.98,1214.01 1342.56,1212.76 1343.15,1217.72 1343.74,1219.78 1344.32,1219.31 1344.91,1216.25 1345.5,1217.49 1346.08,1217.51 1346.67,1218.47 1347.26,1216.8 1347.84,1217.92 1348.43,1217.67 1349.01,1216.23 1349.6,1217.12 1350.19,1216.72 1350.77,1215.27 1351.36,1212.74 1351.95,1213.77 1352.53,1214.81 1353.12,1210.84 1353.71,1209.8 1354.29,1209.9 1354.88,1208.64 1355.47,1208.96 1356.05,1208.97 1356.64,1209.23 1357.22,1208.35 1357.81,1207.39 1358.4,1212.59 1358.98,1212.9 1359.57,1211.58 1360.16,1211.41 1360.74,1214.07 1361.33,1214.12 1361.92,1212.69 1362.5,1212.71 1363.09,1212.65 1363.68,1212.67 1364.26,1213.77 1364.85,1212.73 1365.43,1212.7 1366.02,1212.67 1366.61,1211.56 1367.19,1212.75 1367.78,1212.77 1368.37,1210.31 1368.95,1210.51 1369.54,1208.26 1370.13,1208.28 1370.71,1206.01 1371.3,1204.94 1371.88,1204.36 1372.47,1205.03 1373.06,1206.68 1373.64,1208.19 1374.23,1209.5 1374.82,1209.48 1375.4,1209.51 1375.99,1209.44 1376.58,1212.21 1377.16,1211.18 1377.75,1208.81 1378.34,1211.31 1378.92,1214.11 1379.51,1216.22 1380.09,1214.83 1380.68,1215.92 1381.27,1217.03 1381.85,1216.78 1382.44,1216.75 1383.03,1215.17 1383.61,1216.44 1384.2,1218.65 1384.79,1217.14 1385.37,1216.65 1385.96,1216.53 1386.55,1215.1 1387.13,1216.21 1387.72,1215.84 1388.3,1215.54 1388.89,1215.47 1389.48,1216.41 1390.06,1213.71 1390.65,1213.77 1391.24,1214.95 1391.82,1213.8 1392.41,1211.2 1393,1211.31 1393.58,1210.29 1394.17,1209.28 1394.75,1211.86 1395.34,1211.71 1395.93,1209.29 1396.51,1215.59 1397.1,1220.38 1397.69,1222.23 1398.27,1221.65 1398.86,1223.91 1399.45,1222.18 1400.03,1220.47 1400.62,1216.35 1401.21,1215 1401.79,1217.26 1402.38,1214.54 1402.96,1211.7 1403.55,1211.73 1404.14,1211.46 1404.72,1208.01 1405.31,1208.36 1405.9,1207.13 1406.48,1208.77 1407.07,1210.33 1407.66,1209.27 1408.24,1208.41 1408.83,1208.73 1409.42,1210.13 1410,1209.08 1410.59,1207.13 1411.17,1208.71 1411.76,1209.99 1412.35,1211.14 1412.93,1211.21 1413.52,1210 1414.11,1211.47 1414.69,1213.98 1415.28,1212.43 1415.87,1213.44 1416.45,1213.27 1417.04,1214.61 1417.63,1214.58 1418.21,1212.17 1418.8,1212.09 1419.38,1212.07 1419.97,1210.88 1420.56,1211.05 1421.14,1212.4 1421.73,1212.19 1422.32,1213.03 1422.9,1213.07 1423.49,1211.84 1424.08,1211.61 1424.66,1209.04 1425.25,1208.04 1425.83,1208.24 1426.42,1204.57 1427.01,1203.95 1427.59,1205.38 1428.18,1207.87 1428.77,1206.96 1429.35,1208.46 1429.94,1211.13 1430.53,1210.18 1431.11,1209.41 1431.7,1210.96 1432.29,1212.18 1432.87,1211.05 1433.46,1213.29 1434.04,1211.9 1434.63,1210.8 1435.22,1211.94 1435.8,1210.52 1436.39,1210.65 1436.98,1209.47 1437.56,1208.57 1438.15,1210 1438.74,1212.32 1439.32,1213.4 1439.91,1215.91 1440.5,1213.4 1441.08,1214.46 1441.67,1215.61 1442.25,1216.21 1442.84,1216.14 1443.43,1215.97 1444.01,1217.11 1444.6,1216.83 1445.19,1216.61 1445.77,1216.33 1446.36,1217.35 1446.95,1215.84 1447.53,1219.5 1448.12,1217.81 1448.7,1216.3 1449.29,1213.37 1449.88,1209.32 1450.46,1210.71 1451.05,1209.36 1451.64,1209.44 1452.22,1210.96 1452.81,1208.52 1453.4,1208.86 1453.98,1207.99 1454.57,1208.13 1455.16,1211.01 1455.74,1212.28 1456.33,1211.03 1456.91,1209.91 1457.5,1208.74 1458.09,1206.27 1458.67,1207.71 1459.26,1209.29 1459.85,1211.8 1460.43,1213.13 1461.02,1214.06 1461.61,1213.95 1462.19,1214.33 1462.78,1215.68 1463.37,1213.01 1463.95,1214.31 1464.54,1215.61 1465.12,1214.54 1465.71,1213.28 1466.3,1213.51 1466.88,1212.22 1467.47,1210.85 1468.06,1211.01 1468.64,1213.43 1469.23,1213.17 1469.82,1212.99 1470.4,1213.19 1470.99,1213.12 1471.57,1214.45 1472.16,1215.67 1472.75,1214.35 1473.33,1213.04 1473.92,1213.97 1474.51,1211.47 1475.09,1211.57 1475.68,1211.91 1476.27,1213.32 1476.85,1211.98 1477.44,1212.17 1478.03,1206.92 1478.61,1210.86 1479.2,1208.38 1479.78,1211.18 1480.37,1209.94 1480.96,1208.67 1481.54,1211.31 1482.13,1212.45 1482.72,1212.13 1483.3,1212.11 1483.89,1212.36 1484.48,1213.7 1485.06,1213.82 1485.65,1214.8 1486.24,1213.18 1486.82,1214.39 1487.41,1213.94 1487.99,1215.04 1488.58,1214.88 1489.17,1213.28 1489.75,1211.78 1490.34,1216.65 1490.93,1216.42 1491.51,1211.07 1492.1,1213.58 1492.69,1214.86 1493.27,1212.27 1493.86,1213.53 1494.45,1209.76 1495.03,1211.13 1495.62,1212.54 1496.2,1208.86 1496.79,1210.06 1497.38,1210.17 1497.96,1210.46 1498.55,1210.81 1499.14,1208.46 1499.72,1208.66 1500.31,1202.64 1500.9,1204.63 1501.48,1203.81 1502.07,1201.65 1502.65,1202.1 1503.24,1201.36 1503.83,1200.78 1504.41,1202.97 1505,1203.24 1505.59,1208.79 1506.17,1207.66 1506.76,1209.27 1507.35,1204.65 1507.93,1205.25 1508.52,1205.84 1509.11,1205.23 1509.69,1204.26 1510.28,1207.03 1510.86,1206.96 1511.45,1206.24 1512.04,1209.12 1512.62,1207.99 1513.21,1209.58 1513.8,1207.41 1514.38,1209.06 1514.97,1208.39 1515.56,1208.54 1516.14,1207.93 1516.73,1208.12 1517.32,1209.09 1517.9,1211.45 1518.49,1208.89 1519.07,1207.85 1519.66,1208.26 1520.25,1208.32 1520.83,1207.32 1521.42,1208.63 1522.01,1212.66 1522.59,1212.51 1523.18,1212.3 1523.77,1213.67 1524.35,1211.15 1524.94,1213.63 1525.52,1214.67 1526.11,1214.57 1526.7,1217.17 1527.28,1219.18 1527.87,1222.69 1528.46,1222.19 1529.04,1224.11 1529.63,1222.38 1530.22,1220.55 1530.8,1221.33 1531.39,1219.49 1531.98,1221.7 1532.56,1217.57 1533.15,1218.44 1533.73,1219.61 1534.32,1219.1 1534.91,1217.61 1535.49,1216.34 1536.08,1216.02 1536.67,1215.83 1537.25,1215.69 1537.84,1217.39 1538.43,1217.34 1539.01,1219.42 1539.6,1220.4 1540.19,1220.06 1540.77,1222.25 1541.36,1220.81 1541.94,1222.68 1542.53,1219.75 1543.12,1219.31 1543.7,1217.66 1544.29,1216.12 1544.88,1217 1545.46,1215.54 1546.05,1215.28 1546.64,1217.57 1547.22,1216.2 1547.81,1214.63 1548.4,1215.67 1548.98,1213.11 1549.57,1214.19 1550.15,1211.44 1550.74,1211.3 1551.33,1211.28 1551.91,1211.71 1552.5,1211.76 1553.09,1213.25 1553.67,1213.41 1554.26,1213.21 1554.85,1211.72 1555.43,1212.11 1556.02,1212.38 1556.6,1208.66 1557.19,1207.8 1557.78,1206.72 1558.36,1204.56 1558.95,1204.99 1559.54,1204.22 1560.12,1204.6 1560.71,1203.88 1561.3,1204.44 1561.88,1205.24 1562.47,1205.67 1563.06,1206.1 1563.64,1206.39 1564.23,1205.51 1564.81,1205.88 1565.4,1203.64 1565.99,1206.52 1566.57,1206.92 1567.16,1206.17 1567.75,1206.72 1568.33,1208.29 1568.92,1207.32 1569.51,1208.89 1570.09,1211.28 1570.68,1211.37 1571.27,1211.58 1571.85,1215.38 1572.44,1215.09 1573.02,1218.56 1573.61,1220.54 1574.2,1219.99 1574.78,1220.73 1575.37,1220.28 1575.96,1219.51 1576.54,1219 1577.13,1217.73 1577.72,1216.4 1578.3,1215.04 1578.89,1216.29 1579.47,1219.74 1580.06,1219.55 1580.65,1219.18 1581.23,1218.89 1581.82,1218.64 1582.41,1214.71 1582.99,1219.61 1583.58,1219.2 1584.17,1220.12 1584.75,1219.46 1585.34,1218.95 1585.93,1213.76 1586.51,1213.56 1587.1,1212.28 1587.68,1212.31 1588.27,1212.28 1588.86,1214.56 1589.44,1213.05 1590.03,1211.79 1590.62,1211.89 1591.2,1209.38 1591.79,1212.08 1592.38,1212.14 1592.96,1215.92 1593.55,1215.7 1594.14,1214.53 1594.72,1213.09 1595.31,1211.93 1595.89,1210.9 1596.48,1211.03 1597.07,1213.39 1597.65,1213.26 1598.24,1213.2 1598.83,1210.38 1599.41,1210.76 1600,1213.55 1600.59,1213.35 1601.17,1212.18 1601.76,1217.18 1602.34,1213.36 1602.93,1212.07 1603.52,1212 1604.1,1210.82 1604.69,1209.68 1605.28,1209.75 1605.86,1209.74 1606.45,1207.39 1607.04,1209.18 1607.62,1211.91 1608.21,1212.14 1608.8,1214.47 1609.38,1214.17 1609.97,1214.08 1610.55,1211.48 1611.14,1211.34 1611.73,1211.39 1612.31,1211.45 1612.9,1210.14 1613.49,1210.28 1614.07,1211.42 1614.66,1211.56 1615.25,1212.94 1615.83,1212.91 1616.42,1210.08 1617.01,1209.01 1617.59,1209.26 1618.18,1209.45 1618.76,1208.24 1619.35,1207.26 1619.94,1207.12 1620.52,1207.3 1621.11,1208.93 1621.7,1208.92 1622.28,1210.44 1622.87,1208.02 1623.46,1206.97 1624.04,1207.13 1624.63,1208.57 1625.22,1207.55 1625.8,1207.72 1626.39,1209.28 1626.97,1208.02 1627.56,1205.78 1628.15,1207.36 1628.73,1207.89 1629.32,1206.78 1629.91,1207.1 1630.49,1208.58 1631.08,1210.99 1631.67,1212.67 1632.25,1211.36 1632.84,1210.26 1633.42,1210.23 1634.01,1210.63 1634.6,1208.23 1635.18,1213.43 1635.77,1212.06 1636.36,1215.67 1636.94,1214.47 1637.53,1213.14 1638.12,1213 1638.7,1213.03 1639.29,1210.79 1639.88,1210.77 1640.46,1210.02 1641.05,1210.23 1641.63,1211.68 1642.22,1211.51 1642.81,1211.72 1643.39,1211.88 1643.98,1212.17 1644.57,1209.79 1645.15,1212.45 1645.74,1213.8 1646.33,1214.74 1646.91,1213.73 1647.5,1213.76 1648.09,1214.76 1648.67,1215.87 1649.26,1214.15 1649.84,1217.88 1650.43,1221.22 1651.02,1219.63 1651.6,1216.93 1652.19,1215.5 1652.78,1215.64 1653.36,1213.22 1653.95,1214.25 1654.54,1214.34 1655.12,1215.68 1655.71,1216.86 1656.29,1215.44 1656.88,1212.92 1657.47,1215.3 1658.05,1212.38 1658.64,1215.97 1659.23,1213.46 1659.81,1214.69 1660.4,1214.51 1660.99,1214.47 1661.57,1218.06 1662.16,1216.48 1662.75,1218.89 1663.33,1218.68 1663.92,1218.28 1664.5,1219.12 1665.09,1217.45 1665.68,1217.21 1666.26,1218.36 1666.85,1216.84 1667.44,1217.94 1668.02,1217.57 1668.61,1216 1669.2,1215.93 1669.78,1214.31 1670.37,1212.97 1670.96,1212.93 1671.54,1213.15 1672.13,1213.08 1672.71,1211.68 1673.3,1211.88 1673.89,1211.84 1674.47,1213.09 1675.06,1211.8 1675.65,1210.43 1676.23,1210.67 1676.82,1210.76 1677.41,1209.86 1677.99,1208.81 1678.58,1208.81 1679.17,1212.8 1679.75,1215.18 1680.34,1215.14 1680.92,1216.19 1681.51,1215.9 1682.1,1214.44 1682.68,1213.04 1683.27,1209.11 1683.86,1213.2 1684.44,1209.57 1685.03,1207.27 1685.62,1210.13 1686.2,1210.38 1686.79,1209.43 1687.37,1211.04 1687.96,1212.03 1688.55,1210.86 1689.13,1209.79 1689.72,1208.65 1690.31,1211.32 1690.89,1212.32 1691.48,1214.87 1692.07,1214.52 1692.65,1213.01 1693.24,1211.67 1693.83,1210.36 1694.41,1209.28 1695,1211.47 1695.58,1211.57 1696.17,1212.82 1696.76,1211.76 1697.34,1210.83 1697.93,1210.7 1698.52,1210.6 1699.1,1208.25 1699.69,1206.92 1700.28,1207.34 1700.86,1206.65 1701.45,1203.28 1702.04,1206.2 1702.62,1206.35 1703.21,1206.6 1703.79,1203.17 1704.38,1203.44 1704.97,1202.76 1705.55,1203.12 1706.14,1201.32 1706.73,1205.44 1707.31,1204.44 1707.9,1206.32 1708.49,1210.39 1709.07,1212.96 1709.66,1211.69 1710.24,1211.98 1710.83,1212.05 1711.42,1213.39 1712,1209.53 1712.59,1208.33 1713.18,1211.1 1713.76,1208.58 1714.35,1208.92 1714.94,1210.16 1715.52,1209.07 1716.11,1207.81 1716.7,1207.93 1717.28,1210.83 1717.87,1214.85 1718.45,1214.71 1719.04,1214.57 1719.63,1211.97 1720.21,1212.03 1720.8,1211.9 1721.39,1213.21 1721.97,1213.04 1722.56,1213.2 1723.15,1212.13 1723.73,1212.52 1724.32,1211.29 1724.91,1211.26 1725.49,1211.3 1726.08,1211.46 1726.66,1210.36 1727.25,1213.25 1727.84,1213.21 1728.42,1213.21 1729.01,1211.94 1729.6,1210.96 1730.18,1210.98 1730.77,1211.09 1731.36,1211.06 1731.94,1212.65 1732.53,1210.02 1733.11,1208.62 1733.7,1206.38 1734.29,1207.79 1734.87,1209.31 1735.46,1209.6 1736.05,1211.07 1736.63,1211.12 1737.22,1213.9 1737.81,1213.67 1738.39,1213.39 1738.98,1213.23 1739.57,1216.94 1740.15,1215.38 1740.74,1213.96 1741.32,1215.21 1741.91,1216.38 1742.5,1215.03 1743.08,1213.73 1743.67,1212.63 1744.26,1212.7 1744.84,1212.69 1745.43,1212.77 1746.02,1212.8 1746.6,1214.19 1747.19,1215.25 1747.78,1216.32 1748.36,1213.4 1748.95,1212.18 1749.53,1213.59 1750.12,1214.52 1750.71,1213.1 1751.29,1214.07 1751.88,1215.11 1752.47,1216.11 1753.05,1214.78 1753.64,1214.46 1754.23,1215.81 1754.81,1219.25 1755.4,1217.86 1755.99,1218.91 1756.57,1217.32 1757.16,1214.62 1757.74,1216.78 1758.33,1216.46 1758.92,1216.34 1759.5,1214.94 1760.09,1214.61 1760.68,1214.5 1761.26,1214.35 1761.85,1214.12 1762.44,1212.63 1763.02,1212.62 1763.61,1210.47 1764.19,1210.54 1764.78,1209.56 1765.37,1209.35 1765.95,1207.22 1766.54,1206.19 1767.13,1210.39 1767.71,1211.81 1768.3,1210.44 1768.89,1209.5 1769.47,1209.76 1770.06,1210.03 1770.65,1210.27 1771.23,1211.56 1771.82,1208.94 1772.4,1207.79 1772.99,1206.68 1773.58,1205.79 1774.16,1204.99 1774.75,1209.28 1775.34,1212.05 1775.92,1212.19 1776.51,1212.12 1777.1,1210.79 1777.68,1209.6 1778.27,1210.94 1778.86,1209.78 1779.44,1209.92 1780.03,1211.39 1780.61,1211.39 1781.2,1212.76 1781.79,1210.03 1782.37,1211.6 1782.96,1211.51 1783.55,1213.72 1784.13,1212.14 1784.72,1212.45 1785.31,1213.75 1785.89,1214.91 1786.48,1214.79 1787.06,1214.48 1787.65,1213.02 1788.24,1213.16 1788.82,1214.37 1789.41,1217.94 1790,1214.95 1790.58,1212.37 1791.17,1213.61 1791.76,1210.07 1792.34,1210.2 1792.93,1211.55 1793.52,1212.79 1794.1,1213.56 1794.69,1214.91 1795.27,1216.1 1795.86,1218.28 1796.45,1220.36 1797.03,1221.14 1797.62,1220.69 1798.21,1220.06 1798.79,1220.83 1799.38,1217.51 1799.97,1216.94 1800.55,1211.67 1801.14,1211.71 1801.73,1209.47 1802.31,1208.37 1802.9,1211.34 1803.48,1208.99 1804.07,1209.26 1804.66,1210.54 1805.24,1210.7 1805.83,1209.46 1806.42,1207.26 1807,1210.05 1807.59,1210.04 1808.18,1208.87 1808.76,1209 1809.35,1210.39 1809.94,1210.56 1810.52,1212.02 1811.11,1212.13 1811.69,1210.74 1812.28,1211 1812.87,1213.45 1813.45,1208.21 1814.04,1209.8 1814.63,1211.3 1815.21,1213.78 1815.8,1212.44 1816.39,1214.78 1816.97,1214.69 1817.56,1214.34 1818.14,1214.33 1818.73,1211.48 1819.32,1215.1 1819.9,1217.67 1820.49,1217.24 1821.08,1218.25 1821.66,1221.72 1822.25,1221.1 1822.84,1219.3 1823.42,1217.7 1824.01,1217.18 1824.6,1217.01 1825.18,1218.01 1825.77,1216.36 1826.35,1216.09 1826.94,1214.47 1827.53,1214.2 1828.11,1214.11 1828.7,1215.35 1829.29,1215.15 1829.87,1214.86 1830.46,1215.67 1831.05,1215.45 1831.63,1213.92 1832.22,1212.68 1832.81,1210.07 1833.39,1208.72 1833.98,1207.65 1834.56,1205.48 1835.15,1204.41 1835.74,1203.62 1836.32,1206.86 1836.91,1207.35 1837.5,1206.57 1838.08,1206.61 1838.67,1206.88 1839.26,1208.57 1839.84,1209.82 1840.43,1209.94 1841.01,1208.9 1841.6,1210.17 1842.19,1210.21 1842.77,1210.41 1843.36,1209.27 1843.95,1208.24 1844.53,1212.09 1845.12,1212.17 1845.71,1212.27 1846.29,1212.41 1846.88,1211.23 1847.47,1211.41 1848.05,1211.58 1848.64,1210.18 1849.22,1212.66 1849.81,1212.69 1850.4,1209.81 1850.98,1209.05 1851.57,1210.48 1852.16,1210.53 1852.74,1211.81 1853.33,1212.05 1853.92,1213.16 1854.5,1214.29 1855.09,1212.75 1855.68,1210.27 1856.26,1210.1 1856.85,1210.35 1857.43,1211.99 1858.02,1214.4 1858.61,1211.91 1859.19,1214.4 1859.78,1211.65 1860.37,1210.33 1860.95,1207.7 1861.54,1210.53 1862.13,1211.92 1862.71,1210.75 1863.3,1210.96 1863.88,1210.59 1864.47,1209.58 1865.06,1209.77 1865.64,1210.11 1866.23,1209.02 1866.82,1207.56 1867.4,1206.2 1867.99,1206.63 1868.58,1207.25 1869.16,1207.82 1869.75,1208.29 1870.34,1209.75 1870.92,1212.43 1871.51,1212.6 1872.09,1211.16 1872.68,1209.95 1873.27,1211.34 1873.85,1209.07 1874.44,1209.24 1875.03,1211.86 1875.61,1213.16 1876.2,1211.81 1876.79,1211.95 1877.37,1214.24 1877.96,1216.42 1878.55,1217.2 1879.13,1216.91 1879.72,1216.86 1880.3,1215.44 1880.89,1215.33 1881.48,1216.28 1882.06,1217.25 1882.65,1214.56 1883.24,1214.5 1883.82,1215.56 1884.41,1215.38 1885,1214.01 1885.58,1210.28 1886.17,1210.65 1886.76,1209.68 1887.34,1210.13 1887.93,1210.13 1888.51,1208.86 1889.1,1209.12 1889.69,1209.41 1890.27,1206.8 1890.86,1210.74 1891.45,1209.55 1892.03,1207 1892.62,1207.3 1893.21,1207.68 1893.79,1209.23 1894.38,1208.54 1894.96,1210.09 1895.55,1211.42 1896.14,1211.3 1896.72,1212.57 1897.31,1209.98 1897.9,1208.99 1898.48,1210.45 1899.07,1211.85 1899.66,1214.41 1900.24,1215.55 1900.83,1212.68 1901.42,1212.92 1902,1211.81 1902.59,1210.58 1903.17,1212.17 1903.76,1213.43 1904.35,1214.51 1904.93,1214.6 1905.52,1215.94 1906.11,1214.38 1906.69,1215.61 1907.28,1215.48 1907.87,1215.06 1908.45,1214.82 1909.04,1214.59 1909.63,1214.32 1910.21,1214.02 1910.8,1214.09 1911.38,1213.89 1911.97,1215.27 1912.56,1215.16 1913.14,1212.53 1913.73,1212.4 1914.32,1212.43 1914.9,1212.67 1915.49,1214.19 1916.08,1214 1916.66,1214.91 1917.25,1213.61 1917.83,1213.61 1918.42,1213.71 1919.01,1213.94 1919.59,1211.54 1920.18,1212.63 1920.77,1210.44 1921.35,1210.61 1921.94,1209.49 1922.53,1208.38 1923.11,1208.56 1923.7,1210 1924.29,1208.82 1924.87,1211.52 1925.46,1211.53 1926.04,1211.72 1926.63,1210.44 1927.22,1210.65 1927.8,1208.36 1928.39,1208.44 1928.98,1207.42 1929.56,1207.78 1930.15,1207.73 1930.74,1207.65 1931.32,1206.25 1931.91,1206.64 1932.5,1208.7 1933.08,1206.36 1933.67,1206.66 1934.25,1206.98 1934.84,1207.1 1935.43,1206.81 1936.01,1207.21 1936.6,1203.84 1937.19,1204.52 1937.77,1205.91 1938.36,1206.43 1938.95,1206.56 1939.53,1208.31 1940.12,1207.19 1940.71,1207.77 1941.29,1206.95 1941.88,1207.33 1942.46,1207.35 1943.05,1206.34 1943.64,1206.37 1944.22,1206.6 1944.81,1205.71 1945.4,1206.18 1945.98,1204.32 1946.57,1206.28 1947.16,1206.96 1947.74,1210.79 1948.33,1212.06 1948.91,1213.3 1949.5,1214.32 1950.09,1214.31 1950.67,1214.29 1951.26,1217.9 1951.85,1217.79 1952.43,1216.46 1953.02,1215.1 1953.61,1215.03 1954.19,1213.69 1954.78,1215.11 1955.37,1216.19 1955.95,1216.09 1956.54,1218.26 1957.12,1219.28 1957.71,1217.59 1958.3,1214.79 1958.88,1216.14 1959.47,1214.85 1960.06,1214.75 1960.64,1219.33 1961.23,1217.89 1961.82,1217.45 1962.4,1218.61 1962.99,1219.4 1963.58,1220.2 1964.16,1217.4 1964.75,1217.28 1965.33,1217.08 1965.92,1218.06 1966.51,1220.29 1967.09,1219.86 1967.68,1218.43 1968.27,1219.58 1968.85,1222.86 1969.44,1223.67 1970.03,1223.04 1970.61,1218.75 1971.2,1218.5 1971.78,1218.35 1972.37,1219.4 1972.96,1216.5 1973.54,1217.31 1974.13,1219.19 1974.72,1217.69 1975.3,1218.7 1975.89,1218.35 1976.48,1214.21 1977.06,1213.97 1977.65,1211.51 1978.24,1211.45 1978.82,1212.57 1979.41,1212.44 1979.99,1211.29 1980.58,1212.6 1981.17,1211.52 1981.75,1210.01 1982.34,1212.51 1982.93,1213.88 1983.51,1212.5 1984.1,1212.46 1984.69,1213.39 1985.27,1213.31 1985.86,1214.27 1986.45,1212.59 1987.03,1213.82 1987.62,1215.02 1988.2,1214.97 1988.79,1214.69 1989.38,1216.84 1989.96,1214 1990.55,1212.78 1991.14,1212.69 1991.72,1211.49 1992.31,1212.3 1992.9,1212.22 1993.48,1212.17 1994.07,1210.92 1994.65,1208.56 1995.24,1208.49 1995.83,1211.25 1996.41,1209.93 1997,1209.97 1997.59,1211.3 1998.17,1215.06 1998.76,1214.63 1999.35,1215.77 1999.93,1215.57 2000.52,1216.67 2001.11,1217.62 2001.69,1213.53 2002.28,1214.58 2002.86,1211.86 2003.45,1213.13 2004.04,1213.14 2004.62,1214.43 2005.21,1211.83 2005.8,1215.56 2006.38,1213.07 2006.97,1213.05 2007.56,1213.92 2008.14,1213.07 2008.73,1211.53 2009.32,1211.65 2009.9,1208.2 2010.49,1209.54 2011.07,1209.76 2011.66,1209.75 2012.25,1207.4 2012.83,1204.86 2013.42,1206.45 2014.01,1206.55 2014.59,1205.86 2015.18,1204.94 2015.77,1205.19 2016.35,1206.91 2016.94,1208.26 2017.53,1209.76 2018.11,1211.64 2018.7,1208.96 2019.28,1208.92 2019.87,1207.78 2020.46,1207.73 2021.04,1208.88 2021.63,1210.35 2022.22,1212.7 2022.8,1211.37 2023.39,1213.86 2023.98,1211.6 2024.56,1211.85 2025.15,1213.39 2025.73,1213.36 2026.32,1211.9 2026.91,1213.15 2027.49,1212.96 2028.08,1215.47 2028.67,1215.18 2029.25,1216.18 2029.84,1215.94 2030.43,1215.8 2031.01,1216.87 2031.6,1212.77 2032.19,1208.77 2032.77,1210.26 2033.36,1211.49 2033.94,1211.59 2034.53,1210.15 2035.12,1211.63 2035.7,1210.29 2036.29,1210.45 2036.88,1210.62 2037.46,1210.67 2038.05,1210.66 2038.64,1210.79 2039.22,1210.93 2039.81,1213.43 2040.4,1213.53 2040.98,1213.35 2041.57,1211.95 2042.15,1213.21 2042.74,1213.2 2043.33,1214.1 2043.91,1215.27 2044.5,1215.38 2045.09,1213.84 2045.67,1213.74 2046.26,1213.68 2046.85,1210.98 2047.43,1209.83 2048.02,1210.23 2048.6,1206.54 2049.19,1206.97 2049.78,1209.69 2050.36,1209.73 2050.95,1210.8 2051.54,1210.81 2052.12,1210.61 2052.71,1208.18 2053.3,1209.65 2053.88,1209.8 2054.47,1208.58 2055.06,1209.92 2055.64,1213.45 2056.23,1213.58 2056.81,1212.47 2057.4,1212.59 2057.99,1212.63 2058.57,1217.42 2059.16,1219.48 2059.75,1217.75 2060.33,1218.5 2060.92,1218.36 2061.51,1215.5 2062.09,1216.39 2062.68,1213.5 2063.27,1213.41 2063.85,1213.51 2064.44,1214.71 2065.02,1213.31 2065.61,1211.95 2066.2,1213.25 2066.78,1213.21 2067.37,1215.21 2067.96,1212.68 2068.54,1215.07 2069.13,1209.88 2069.72,1211.25 2070.3,1210.32 2070.89,1210.44 2071.48,1210.51 2072.06,1209.34 2072.65,1209.53 2073.23,1209.71 2073.82,1211.1 2074.41,1208.65 2074.99,1208.95 2075.58,1207.84 2076.17,1209.55 2076.75,1208.9 2077.34,1210.29 2077.93,1210.41 2078.51,1207.85 2079.1,1206.77 2079.68,1209.63 2080.27,1210.95 2080.86,1212.16 2081.44,1212.24 2082.03,1208.32 2082.62,1204.85 2083.2,1206.39 2083.79,1210.28 2084.38,1210.27 2084.96,1209.51 2085.55,1208.5 2086.14,1208.55 2086.72,1210 2087.31,1212.44 2087.89,1214.04 2088.48,1212.58 2089.07,1212.52 2089.65,1212.74 2090.24,1213.9 2090.83,1215.14 2091.41,1218.58 2092,1217.01 2092.59,1216.78 2093.17,1215.33 2093.76,1215.31 2094.35,1216.43 2094.93,1214.82 2095.52,1214.65 2096.1,1213.18 2096.69,1216.86 2097.28,1220.22 2097.86,1218.35 2098.45,1217.88 2099.04,1218.88 2099.62,1215.86 2100.21,1215.8 2100.8,1216.62 2101.38,1218.93 2101.97,1218.42 2102.55,1215.91 2103.14,1215.66 2103.73,1215.61 2104.31,1215.19 2104.9,1213.73 2105.49,1211.41 2106.07,1212.83 2106.66,1212.68 2107.25,1211.38 2107.83,1210.06 2108.42,1209.14 2109.01,1211.71 2109.59,1210.61 2110.18,1213.32 2110.76,1214.57 2111.35,1212.15 2111.94,1213.44 2112.52,1214.41 2113.11,1213.1 2113.7,1214.56 2114.28,1211.88 2114.87,1211.99 2115.46,1211.97 2116.04,1210.63 2116.63,1212.15 2117.22,1214.65 2117.8,1214.25 2118.39,1215.36 2118.97,1216.15 2119.56,1214.78 2120.15,1216 2120.73,1215.69 2121.32,1217.94 2121.91,1217.55 2122.49,1213.59 2123.08,1212.14 2123.67,1211.93 2124.25,1210.78 2124.84,1213.08 2125.42,1209.23 2126.01,1210.59 2126.6,1211.69 2127.18,1210.42 2127.77,1210.63 2128.36,1213.33 2128.94,1213.51 2129.53,1217.16 2130.12,1215.8 2130.7,1218.06 2131.29,1216.44 2131.88,1217.68 2132.46,1217.38 2133.05,1218.22 2133.63,1217.86 2134.22,1217.59 2134.81,1219.72 2135.39,1216.84 2135.98,1217.63 2136.57,1214.89 2137.15,1210.97 2137.74,1213.72 2138.33,1212.32 2138.91,1208.43 2139.5,1211.12 2140.09,1212.47 2140.67,1216.06 2141.26,1212.2 2141.84,1212.22 2142.43,1215.54 2143.02,1214.28 2143.6,1211.78 2144.19,1213.02 2144.78,1213.15 2145.36,1212.96 2145.95,1211.8 2146.54,1211.9 2147.12,1210.66 2147.71,1208.48 2148.3,1207.58 2148.88,1209.12 2149.47,1209.5 2150.05,1207.23 2150.64,1207.4 2151.23,1204.13 2151.81,1204.71 2152.4,1206.51 2152.99,1207.81 2153.57,1211.82 2154.16,1213.16 2154.75,1213.18 2155.33,1213.11 2155.92,1210.73 2156.5,1209.51 2157.09,1208.68 2157.68,1213.89 2158.26,1213.86 \"/>\n<path clip-path=\"url(#clip962)\" d=\"M986.025 1212.9 L986.612 1212.9 L987.198 1212.9 L987.785 1212.9 L988.371 1212.9 L988.957 1212.9 L989.544 1212.9 L990.13 1212.9 L990.717 1212.9 L991.303 1212.9 L991.889 1212.9 L992.476 1212.9 L993.062 1212.9 L993.649 1212.9 L994.235 1212.9 L994.822 1212.9 L995.408 1212.9 L995.994 1212.9 L996.581 1212.9 L997.167 1212.9 L997.754 1212.9 L998.34 1212.9 L998.926 1212.9 L999.513 1212.9 L1000.1 1212.9 L1000.69 1212.9 L1001.27 1212.9 L1001.86 1212.9 L1002.44 1212.9 L1003.03 1212.9 L1003.62 1212.9 L1004.2 1212.9 L1004.79 1212.9 L1005.38 1212.9 L1005.96 1212.9 L1006.55 1212.9 L1007.14 1212.9 L1007.72 1212.9 L1008.31 1212.9 L1008.9 1212.9 L1009.48 1212.9 L1010.07 1212.9 L1010.65 1212.9 L1011.24 1212.9 L1011.83 1212.9 L1012.41 1212.9 L1013 1212.9 L1013.59 1212.9 L1014.17 1212.9 L1014.76 1212.9 L1015.35 1212.9 L1015.93 1212.9 L1016.52 1212.9 L1017.11 1212.9 L1017.69 1212.9 L1018.28 1212.9 L1018.86 1212.9 L1019.45 1212.9 L1020.04 1212.9 L1020.62 1212.9 L1021.21 1212.9 L1021.8 1212.9 L1022.38 1212.9 L1022.97 1212.9 L1023.56 1212.9 L1024.14 1212.9 L1024.73 1212.9 L1025.32 1212.9 L1025.9 1212.9 L1026.49 1212.9 L1027.07 1212.9 L1027.66 1212.9 L1028.25 1212.9 L1028.83 1212.9 L1029.42 1212.9 L1030.01 1212.9 L1030.59 1212.9 L1031.18 1212.9 L1031.77 1212.9 L1032.35 1212.9 L1032.94 1212.9 L1033.52 1212.9 L1034.11 1212.9 L1034.7 1212.9 L1035.28 1212.9 L1035.87 1212.9 L1036.46 1212.9 L1037.04 1212.9 L1037.63 1212.9 L1038.22 1212.9 L1038.8 1212.9 L1039.39 1212.9 L1039.98 1212.9 L1040.56 1212.9 L1041.15 1212.9 L1041.73 1212.9 L1042.32 1212.9 L1042.91 1212.9 L1043.49 1212.9 L1044.08 1212.9 L1044.67 1212.9 L1045.25 1212.9 L1045.84 1212.9 L1046.43 1212.9 L1047.01 1212.9 L1047.6 1212.9 L1048.19 1212.9 L1048.77 1212.9 L1049.36 1212.9 L1049.94 1212.9 L1050.53 1212.9 L1051.12 1212.9 L1051.7 1212.9 L1052.29 1212.9 L1052.88 1212.9 L1053.46 1212.9 L1054.05 1212.9 L1054.64 1212.9 L1055.22 1212.9 L1055.81 1212.9 L1056.39 1212.9 L1056.98 1212.9 L1057.57 1212.9 L1058.15 1212.9 L1058.74 1212.9 L1059.33 1212.9 L1059.91 1212.9 L1060.5 1212.9 L1061.09 1212.9 L1061.67 1212.9 L1062.26 1212.9 L1062.85 1212.9 L1063.43 1212.9 L1064.02 1212.9 L1064.6 1212.9 L1065.19 1212.9 L1065.78 1212.9 L1066.36 1212.9 L1066.95 1212.9 L1067.54 1212.9 L1068.12 1212.9 L1068.71 1212.9 L1069.3 1212.9 L1069.88 1212.9 L1070.47 1212.9 L1071.06 1212.9 L1071.64 1212.9 L1072.23 1212.9 L1072.81 1212.9 L1073.4 1212.9 L1073.99 1212.9 L1074.57 1212.9 L1075.16 1212.9 L1075.75 1212.9 L1076.33 1212.9 L1076.92 1212.9 L1077.51 1212.9 L1078.09 1212.9 L1078.68 1212.9 L1079.26 1212.9 L1079.85 1212.9 L1080.44 1212.9 L1081.02 1212.9 L1081.61 1212.9 L1082.2 1212.9 L1082.78 1212.9 L1083.37 1212.9 L1083.96 1212.9 L1084.54 1212.9 L1085.13 1212.9 L1085.72 1212.9 L1086.3 1212.9 L1086.89 1212.9 L1087.47 1212.9 L1088.06 1212.9 L1088.65 1212.9 L1089.23 1212.9 L1089.82 1212.9 L1090.41 1212.9 L1090.99 1212.9 L1091.58 1212.9 L1092.17 1212.9 L1092.75 1212.9 L1093.34 1212.9 L1093.93 1212.9 L1094.51 1212.9 L1095.1 1212.9 L1095.68 1212.9 L1096.27 1212.9 L1096.86 1212.9 L1097.44 1212.9 L1098.03 1212.9 L1098.62 1212.9 L1099.2 1212.9 L1099.79 1212.9 L1100.38 1212.9 L1100.96 1212.9 L1101.55 1212.9 L1102.14 1212.9 L1102.72 1212.9 L1103.31 1212.9 L1103.89 1212.9 L1104.48 1212.9 L1105.07 1212.9 L1105.65 1212.9 L1106.24 1212.9 L1106.83 1212.9 L1107.41 1212.9 L1108 1212.9 L1108.59 1212.9 L1109.17 1212.9 L1109.76 1212.9 L1110.34 1212.9 L1110.93 1212.9 L1111.52 1212.9 L1112.1 1212.9 L1112.69 1212.9 L1113.28 1212.9 L1113.86 1212.9 L1114.45 1212.9 L1115.04 1212.9 L1115.62 1212.9 L1116.21 1212.9 L1116.8 1212.9 L1117.38 1212.9 L1117.97 1212.9 L1118.55 1212.9 L1119.14 1212.9 L1119.73 1212.9 L1120.31 1212.9 L1120.9 1212.9 L1121.49 1212.9 L1122.07 1212.9 L1122.66 1212.9 L1123.25 1212.9 L1123.83 1212.9 L1124.42 1212.9 L1125.01 1212.9 L1125.59 1212.9 L1126.18 1212.9 L1126.76 1212.9 L1127.35 1212.9 L1127.94 1212.9 L1128.52 1212.9 L1129.11 1212.9 L1129.7 1212.9 L1130.28 1212.9 L1130.87 1212.9 L1131.46 1212.9 L1132.04 1212.9 L1132.63 1212.9 L1133.21 1212.9 L1133.8 1212.9 L1134.39 1212.9 L1134.97 1212.9 L1135.56 1212.9 L1136.15 1212.9 L1136.73 1212.9 L1137.32 1212.9 L1137.91 1212.9 L1138.49 1212.9 L1139.08 1212.9 L1139.67 1212.9 L1140.25 1212.9 L1140.84 1212.9 L1141.42 1212.9 L1142.01 1212.9 L1142.6 1212.9 L1143.18 1212.9 L1143.77 1212.9 L1144.36 1212.9 L1144.94 1212.9 L1145.53 1212.9 L1146.12 1212.9 L1146.7 1212.9 L1147.29 1212.9 L1147.88 1212.9 L1148.46 1212.9 L1149.05 1212.9 L1149.63 1212.9 L1150.22 1212.9 L1150.81 1212.9 L1151.39 1212.9 L1151.98 1212.9 L1152.57 1212.9 L1153.15 1212.9 L1153.74 1212.9 L1154.33 1212.9 L1154.91 1212.9 L1155.5 1212.9 L1156.09 1212.9 L1156.67 1212.9 L1157.26 1212.9 L1157.84 1212.9 L1158.43 1212.9 L1159.02 1212.9 L1159.6 1212.9 L1160.19 1212.9 L1160.78 1212.9 L1161.36 1212.9 L1161.95 1212.9 L1162.54 1212.9 L1163.12 1212.9 L1163.71 1212.9 L1164.29 1212.9 L1164.88 1212.9 L1165.47 1212.9 L1166.05 1212.9 L1166.64 1212.9 L1167.23 1212.9 L1167.81 1212.9 L1168.4 1212.9 L1168.99 1212.9 L1169.57 1212.9 L1170.16 1212.9 L1170.75 1212.9 L1171.33 1212.9 L1171.92 1212.9 L1172.5 1212.9 L1173.09 1212.9 L1173.68 1212.9 L1174.26 1212.9 L1174.85 1212.9 L1175.44 1212.9 L1176.02 1212.9 L1176.61 1212.9 L1177.2 1212.9 L1177.78 1212.9 L1178.37 1212.9 L1178.96 1212.9 L1179.54 1212.9 L1180.13 1212.9 L1180.71 1212.9 L1181.3 1212.9 L1181.89 1212.9 L1182.47 1212.9 L1183.06 1212.9 L1183.65 1212.9 L1184.23 1212.9 L1184.82 1212.9 L1185.41 1212.9 L1185.99 1212.9 L1186.58 1212.9 L1187.16 1212.9 L1187.75 1212.9 L1188.34 1212.9 L1188.92 1212.9 L1189.51 1212.9 L1190.1 1212.9 L1190.68 1212.9 L1191.27 1212.9 L1191.86 1212.9 L1192.44 1212.9 L1193.03 1212.9 L1193.62 1212.9 L1194.2 1212.9 L1194.79 1212.9 L1195.37 1212.9 L1195.96 1212.9 L1196.55 1212.9 L1197.13 1212.9 L1197.72 1212.9 L1198.31 1212.9 L1198.89 1212.9 L1199.48 1212.9 L1200.07 1212.9 L1200.65 1212.9 L1201.24 1212.9 L1201.83 1212.9 L1202.41 1212.9 L1203 1212.9 L1203.58 1212.9 L1204.17 1212.9 L1204.76 1212.9 L1205.34 1212.9 L1205.93 1212.9 L1206.52 1212.9 L1207.1 1212.9 L1207.69 1212.9 L1208.28 1212.9 L1208.86 1212.9 L1209.45 1212.9 L1210.03 1212.9 L1210.62 1212.9 L1211.21 1212.9 L1211.79 1212.9 L1212.38 1212.9 L1212.97 1212.9 L1213.55 1212.9 L1214.14 1212.9 L1214.73 1212.9 L1215.31 1212.9 L1215.9 1212.9 L1216.49 1212.9 L1217.07 1212.9 L1217.66 1212.9 L1218.24 1212.9 L1218.83 1212.9 L1219.42 1212.9 L1220 1212.9 L1220.59 1212.9 L1221.18 1212.9 L1221.76 1212.9 L1222.35 1212.9 L1222.94 1212.9 L1223.52 1212.9 L1224.11 1212.9 L1224.7 1212.9 L1225.28 1212.9 L1225.87 1212.9 L1226.45 1212.9 L1227.04 1212.9 L1227.63 1212.9 L1228.21 1212.9 L1228.8 1212.9 L1229.39 1212.9 L1229.97 1212.9 L1230.56 1212.9 L1231.15 1212.9 L1231.73 1212.9 L1232.32 1212.9 L1232.91 1212.9 L1233.49 1212.9 L1234.08 1212.9 L1234.66 1212.9 L1235.25 1212.9 L1235.84 1212.9 L1236.42 1212.9 L1237.01 1212.9 L1237.6 1212.9 L1238.18 1212.9 L1238.77 1212.9 L1239.36 1212.9 L1239.94 1212.9 L1240.53 1212.9 L1241.11 1212.9 L1241.7 1212.9 L1242.29 1212.9 L1242.87 1212.9 L1243.46 1212.9 L1244.05 1212.9 L1244.63 1212.9 L1245.22 1212.9 L1245.81 1212.9 L1246.39 1212.9 L1246.98 1212.9 L1247.57 1212.9 L1248.15 1212.9 L1248.74 1212.9 L1249.32 1212.9 L1249.91 1212.9 L1250.5 1212.9 L1251.08 1212.9 L1251.67 1212.9 L1252.26 1212.9 L1252.84 1212.9 L1253.43 1212.9 L1254.02 1212.9 L1254.6 1212.9 L1255.19 1212.9 L1255.78 1212.9 L1256.36 1212.9 L1256.95 1212.9 L1257.53 1212.9 L1258.12 1212.9 L1258.71 1212.9 L1259.29 1212.9 L1259.88 1212.9 L1260.47 1212.9 L1261.05 1212.9 L1261.64 1212.9 L1262.23 1212.9 L1262.81 1212.9 L1263.4 1212.9 L1263.98 1212.9 L1264.57 1212.9 L1265.16 1212.9 L1265.74 1212.9 L1266.33 1212.9 L1266.92 1212.9 L1267.5 1212.9 L1268.09 1212.9 L1268.68 1212.9 L1269.26 1212.9 L1269.85 1212.9 L1270.44 1212.9 L1271.02 1212.9 L1271.61 1212.9 L1272.19 1212.9 L1272.78 1212.9 L1273.37 1212.9 L1273.95 1212.9 L1274.54 1212.9 L1275.13 1212.9 L1275.71 1212.9 L1276.3 1212.9 L1276.89 1212.9 L1277.47 1212.9 L1278.06 1212.9 L1278.65 1212.9 L1279.23 1212.9 L1279.82 1212.9 L1280.4 1212.9 L1280.99 1212.9 L1281.58 1212.9 L1282.16 1212.9 L1282.75 1212.9 L1283.34 1212.9 L1283.92 1212.9 L1284.51 1212.9 L1285.1 1212.9 L1285.68 1212.9 L1286.27 1212.9 L1286.86 1212.9 L1287.44 1212.9 L1288.03 1212.9 L1288.61 1212.9 L1289.2 1212.9 L1289.79 1212.9 L1290.37 1212.9 L1290.96 1212.9 L1291.55 1212.9 L1292.13 1212.9 L1292.72 1212.9 L1293.31 1212.9 L1293.89 1212.9 L1294.48 1212.9 L1295.06 1212.9 L1295.65 1212.9 L1296.24 1212.9 L1296.82 1212.9 L1297.41 1212.9 L1298 1212.9 L1298.58 1212.9 L1299.17 1212.9 L1299.76 1212.9 L1300.34 1212.9 L1300.93 1212.9 L1301.52 1212.9 L1302.1 1212.9 L1302.69 1212.9 L1303.27 1212.9 L1303.86 1212.9 L1304.45 1212.9 L1305.03 1212.9 L1305.62 1212.9 L1306.21 1212.9 L1306.79 1212.9 L1307.38 1212.9 L1307.97 1212.9 L1308.55 1212.9 L1309.14 1212.9 L1309.73 1212.9 L1310.31 1212.9 L1310.9 1212.9 L1311.48 1212.9 L1312.07 1212.9 L1312.66 1212.9 L1313.24 1212.9 L1313.83 1212.9 L1314.42 1212.9 L1315 1212.9 L1315.59 1212.9 L1316.18 1212.9 L1316.76 1212.9 L1317.35 1212.9 L1317.93 1212.9 L1318.52 1212.9 L1319.11 1212.9 L1319.69 1212.9 L1320.28 1212.9 L1320.87 1212.9 L1321.45 1212.9 L1322.04 1212.9 L1322.63 1212.9 L1323.21 1212.9 L1323.8 1212.9 L1324.39 1212.9 L1324.97 1212.9 L1325.56 1212.9 L1326.14 1212.9 L1326.73 1212.9 L1327.32 1212.9 L1327.9 1212.9 L1328.49 1212.9 L1329.08 1212.9 L1329.66 1212.9 L1330.25 1212.9 L1330.84 1212.9 L1331.42 1212.9 L1332.01 1212.9 L1332.6 1212.9 L1333.18 1212.9 L1333.77 1212.9 L1334.35 1212.9 L1334.94 1212.9 L1335.53 1212.9 L1336.11 1212.9 L1336.7 1212.9 L1337.29 1212.9 L1337.87 1212.9 L1338.46 1212.9 L1339.05 1212.9 L1339.63 1212.9 L1340.22 1212.9 L1340.8 1212.9 L1341.39 1212.9 L1341.98 1212.9 L1342.56 1212.9 L1343.15 1212.9 L1343.74 1212.9 L1344.32 1212.9 L1344.91 1212.9 L1345.5 1212.9 L1346.08 1212.9 L1346.67 1212.9 L1347.26 1212.9 L1347.84 1212.9 L1348.43 1212.9 L1349.01 1212.9 L1349.6 1212.9 L1350.19 1212.9 L1350.77 1212.9 L1351.36 1212.9 L1351.95 1212.9 L1352.53 1212.9 L1353.12 1212.9 L1353.71 1212.9 L1354.29 1212.9 L1354.88 1212.9 L1355.47 1212.9 L1356.05 1212.9 L1356.64 1212.9 L1357.22 1212.9 L1357.81 1212.9 L1358.4 1212.9 L1358.98 1212.9 L1359.57 1212.9 L1360.16 1212.9 L1360.74 1212.9 L1361.33 1212.9 L1361.92 1212.9 L1362.5 1212.9 L1363.09 1212.9 L1363.68 1212.9 L1364.26 1212.9 L1364.85 1212.9 L1365.43 1212.9 L1366.02 1212.9 L1366.61 1212.9 L1367.19 1212.9 L1367.78 1212.9 L1368.37 1212.9 L1368.95 1212.9 L1369.54 1212.9 L1370.13 1212.9 L1370.71 1212.9 L1371.3 1212.9 L1371.88 1212.9 L1372.47 1212.9 L1373.06 1212.9 L1373.64 1212.9 L1374.23 1212.9 L1374.82 1212.9 L1375.4 1212.9 L1375.99 1212.9 L1376.58 1212.9 L1377.16 1212.9 L1377.75 1212.9 L1378.34 1212.9 L1378.92 1212.9 L1379.51 1212.9 L1380.09 1212.9 L1380.68 1212.9 L1381.27 1212.9 L1381.85 1212.9 L1382.44 1212.9 L1383.03 1212.9 L1383.61 1212.9 L1384.2 1212.9 L1384.79 1212.9 L1385.37 1212.9 L1385.96 1212.9 L1386.55 1212.9 L1387.13 1212.9 L1387.72 1212.9 L1388.3 1212.9 L1388.89 1212.9 L1389.48 1212.9 L1390.06 1212.9 L1390.65 1212.9 L1391.24 1212.9 L1391.82 1212.9 L1392.41 1212.9 L1393 1212.9 L1393.58 1212.9 L1394.17 1212.9 L1394.75 1212.9 L1395.34 1212.9 L1395.93 1212.9 L1396.51 1212.9 L1397.1 1212.9 L1397.69 1212.9 L1398.27 1212.9 L1398.86 1212.9 L1399.45 1212.9 L1400.03 1212.9 L1400.62 1212.9 L1401.21 1212.9 L1401.79 1212.9 L1402.38 1212.9 L1402.96 1212.9 L1403.55 1212.9 L1404.14 1212.9 L1404.72 1212.9 L1405.31 1212.9 L1405.9 1212.9 L1406.48 1212.9 L1407.07 1212.9 L1407.66 1212.9 L1408.24 1212.9 L1408.83 1212.9 L1409.42 1212.9 L1410 1212.9 L1410.59 1212.9 L1411.17 1212.9 L1411.76 1212.9 L1412.35 1212.9 L1412.93 1212.9 L1413.52 1212.9 L1414.11 1212.9 L1414.69 1212.9 L1415.28 1212.9 L1415.87 1212.9 L1416.45 1212.9 L1417.04 1212.9 L1417.63 1212.9 L1418.21 1212.9 L1418.8 1212.9 L1419.38 1212.9 L1419.97 1212.9 L1420.56 1212.9 L1421.14 1212.9 L1421.73 1212.9 L1422.32 1212.9 L1422.9 1212.9 L1423.49 1212.9 L1424.08 1212.9 L1424.66 1212.9 L1425.25 1212.9 L1425.83 1212.9 L1426.42 1212.9 L1427.01 1212.9 L1427.59 1212.9 L1428.18 1212.9 L1428.77 1212.9 L1429.35 1212.9 L1429.94 1212.9 L1430.53 1212.9 L1431.11 1212.9 L1431.7 1212.9 L1432.29 1212.9 L1432.87 1212.9 L1433.46 1212.9 L1434.04 1212.9 L1434.63 1212.9 L1435.22 1212.9 L1435.8 1212.9 L1436.39 1212.9 L1436.98 1212.9 L1437.56 1212.9 L1438.15 1212.9 L1438.74 1212.9 L1439.32 1212.9 L1439.91 1212.9 L1440.5 1212.9 L1441.08 1212.9 L1441.67 1212.9 L1442.25 1212.9 L1442.84 1212.9 L1443.43 1212.9 L1444.01 1212.9 L1444.6 1212.9 L1445.19 1212.9 L1445.77 1212.9 L1446.36 1212.9 L1446.95 1212.9 L1447.53 1212.9 L1448.12 1212.9 L1448.7 1212.9 L1449.29 1212.9 L1449.88 1212.9 L1450.46 1212.9 L1451.05 1212.9 L1451.64 1212.9 L1452.22 1212.9 L1452.81 1212.9 L1453.4 1212.9 L1453.98 1212.9 L1454.57 1212.9 L1455.16 1212.9 L1455.74 1212.9 L1456.33 1212.9 L1456.91 1212.9 L1457.5 1212.9 L1458.09 1212.9 L1458.67 1212.9 L1459.26 1212.9 L1459.85 1212.9 L1460.43 1212.9 L1461.02 1212.9 L1461.61 1212.9 L1462.19 1212.9 L1462.78 1212.9 L1463.37 1212.9 L1463.95 1212.9 L1464.54 1212.9 L1465.12 1212.9 L1465.71 1212.9 L1466.3 1212.9 L1466.88 1212.9 L1467.47 1212.9 L1468.06 1212.9 L1468.64 1212.9 L1469.23 1212.9 L1469.82 1212.9 L1470.4 1212.9 L1470.99 1212.9 L1471.57 1212.9 L1472.16 1212.9 L1472.75 1212.9 L1473.33 1212.9 L1473.92 1212.9 L1474.51 1212.9 L1475.09 1212.9 L1475.68 1212.9 L1476.27 1212.9 L1476.85 1212.9 L1477.44 1212.9 L1478.03 1212.9 L1478.61 1212.9 L1479.2 1212.9 L1479.78 1212.9 L1480.37 1212.9 L1480.96 1212.9 L1481.54 1212.9 L1482.13 1212.9 L1482.72 1212.9 L1483.3 1212.9 L1483.89 1212.9 L1484.48 1212.9 L1485.06 1212.9 L1485.65 1212.9 L1486.24 1212.9 L1486.82 1212.9 L1487.41 1212.9 L1487.99 1212.9 L1488.58 1212.9 L1489.17 1212.9 L1489.75 1212.9 L1490.34 1212.9 L1490.93 1212.9 L1491.51 1212.9 L1492.1 1212.9 L1492.69 1212.9 L1493.27 1212.9 L1493.86 1212.9 L1494.45 1212.9 L1495.03 1212.9 L1495.62 1212.9 L1496.2 1212.9 L1496.79 1212.9 L1497.38 1212.9 L1497.96 1212.9 L1498.55 1212.9 L1499.14 1212.9 L1499.72 1212.9 L1500.31 1212.9 L1500.9 1212.9 L1501.48 1212.9 L1502.07 1212.9 L1502.65 1212.9 L1503.24 1212.9 L1503.83 1212.9 L1504.41 1212.9 L1505 1212.9 L1505.59 1212.9 L1506.17 1212.9 L1506.76 1212.9 L1507.35 1212.9 L1507.93 1212.9 L1508.52 1212.9 L1509.11 1212.9 L1509.69 1212.9 L1510.28 1212.9 L1510.86 1212.9 L1511.45 1212.9 L1512.04 1212.9 L1512.62 1212.9 L1513.21 1212.9 L1513.8 1212.9 L1514.38 1212.9 L1514.97 1212.9 L1515.56 1212.9 L1516.14 1212.9 L1516.73 1212.9 L1517.32 1212.9 L1517.9 1212.9 L1518.49 1212.9 L1519.07 1212.9 L1519.66 1212.9 L1520.25 1212.9 L1520.83 1212.9 L1521.42 1212.9 L1522.01 1212.9 L1522.59 1212.9 L1523.18 1212.9 L1523.77 1212.9 L1524.35 1212.9 L1524.94 1212.9 L1525.52 1212.9 L1526.11 1212.9 L1526.7 1212.9 L1527.28 1212.9 L1527.87 1212.9 L1528.46 1212.9 L1529.04 1212.9 L1529.63 1212.9 L1530.22 1212.9 L1530.8 1212.9 L1531.39 1212.9 L1531.98 1212.9 L1532.56 1212.9 L1533.15 1212.9 L1533.73 1212.9 L1534.32 1212.9 L1534.91 1212.9 L1535.49 1212.9 L1536.08 1212.9 L1536.67 1212.9 L1537.25 1212.9 L1537.84 1212.9 L1538.43 1212.9 L1539.01 1212.9 L1539.6 1212.9 L1540.19 1212.9 L1540.77 1212.9 L1541.36 1212.9 L1541.94 1212.9 L1542.53 1212.9 L1543.12 1212.9 L1543.7 1212.9 L1544.29 1212.9 L1544.88 1212.9 L1545.46 1212.9 L1546.05 1212.9 L1546.64 1212.9 L1547.22 1212.9 L1547.81 1212.9 L1548.4 1212.9 L1548.98 1212.9 L1549.57 1212.9 L1550.15 1212.9 L1550.74 1212.9 L1551.33 1212.9 L1551.91 1212.9 L1552.5 1212.9 L1553.09 1212.9 L1553.67 1212.9 L1554.26 1212.9 L1554.85 1212.9 L1555.43 1212.9 L1556.02 1212.9 L1556.6 1212.9 L1557.19 1212.9 L1557.78 1212.9 L1558.36 1212.9 L1558.95 1212.9 L1559.54 1212.9 L1560.12 1212.9 L1560.71 1212.9 L1561.3 1212.9 L1561.88 1212.9 L1562.47 1212.9 L1563.06 1212.9 L1563.64 1212.9 L1564.23 1212.9 L1564.81 1212.9 L1565.4 1212.9 L1565.99 1212.9 L1566.57 1212.9 L1567.16 1212.9 L1567.75 1212.9 L1568.33 1212.9 L1568.92 1212.9 L1569.51 1212.9 L1570.09 1212.9 L1570.68 1212.9 L1571.27 1212.9 L1571.85 1212.9 L1572.44 1212.9 L1573.02 1212.9 L1573.61 1212.9 L1574.2 1212.9 L1574.78 1212.9 L1575.37 1212.9 L1575.96 1212.9 L1576.54 1212.9 L1577.13 1212.9 L1577.72 1212.9 L1578.3 1212.9 L1578.89 1212.9 L1579.47 1212.9 L1580.06 1212.9 L1580.65 1212.9 L1581.23 1212.9 L1581.82 1212.9 L1582.41 1212.9 L1582.99 1212.9 L1583.58 1212.9 L1584.17 1212.9 L1584.75 1212.9 L1585.34 1212.9 L1585.93 1212.9 L1586.51 1212.9 L1587.1 1212.9 L1587.68 1212.9 L1588.27 1212.9 L1588.86 1212.9 L1589.44 1212.9 L1590.03 1212.9 L1590.62 1212.9 L1591.2 1212.9 L1591.79 1212.9 L1592.38 1212.9 L1592.96 1212.9 L1593.55 1212.9 L1594.14 1212.9 L1594.72 1212.9 L1595.31 1212.9 L1595.89 1212.9 L1596.48 1212.9 L1597.07 1212.9 L1597.65 1212.9 L1598.24 1212.9 L1598.83 1212.9 L1599.41 1212.9 L1600 1212.9 L1600.59 1212.9 L1601.17 1212.9 L1601.76 1212.9 L1602.34 1212.9 L1602.93 1212.9 L1603.52 1212.9 L1604.1 1212.9 L1604.69 1212.9 L1605.28 1212.9 L1605.86 1212.9 L1606.45 1212.9 L1607.04 1212.9 L1607.62 1212.9 L1608.21 1212.9 L1608.8 1212.9 L1609.38 1212.9 L1609.97 1212.9 L1610.55 1212.9 L1611.14 1212.9 L1611.73 1212.9 L1612.31 1212.9 L1612.9 1212.9 L1613.49 1212.9 L1614.07 1212.9 L1614.66 1212.9 L1615.25 1212.9 L1615.83 1212.9 L1616.42 1212.9 L1617.01 1212.9 L1617.59 1212.9 L1618.18 1212.9 L1618.76 1212.9 L1619.35 1212.9 L1619.94 1212.9 L1620.52 1212.9 L1621.11 1212.9 L1621.7 1212.9 L1622.28 1212.9 L1622.87 1212.9 L1623.46 1212.9 L1624.04 1212.9 L1624.63 1212.9 L1625.22 1212.9 L1625.8 1212.9 L1626.39 1212.9 L1626.97 1212.9 L1627.56 1212.9 L1628.15 1212.9 L1628.73 1212.9 L1629.32 1212.9 L1629.91 1212.9 L1630.49 1212.9 L1631.08 1212.9 L1631.67 1212.9 L1632.25 1212.9 L1632.84 1212.9 L1633.42 1212.9 L1634.01 1212.9 L1634.6 1212.9 L1635.18 1212.9 L1635.77 1212.9 L1636.36 1212.9 L1636.94 1212.9 L1637.53 1212.9 L1638.12 1212.9 L1638.7 1212.9 L1639.29 1212.9 L1639.88 1212.9 L1640.46 1212.9 L1641.05 1212.9 L1641.63 1212.9 L1642.22 1212.9 L1642.81 1212.9 L1643.39 1212.9 L1643.98 1212.9 L1644.57 1212.9 L1645.15 1212.9 L1645.74 1212.9 L1646.33 1212.9 L1646.91 1212.9 L1647.5 1212.9 L1648.09 1212.9 L1648.67 1212.9 L1649.26 1212.9 L1649.84 1212.9 L1650.43 1212.9 L1651.02 1212.9 L1651.6 1212.9 L1652.19 1212.9 L1652.78 1212.9 L1653.36 1212.9 L1653.95 1212.9 L1654.54 1212.9 L1655.12 1212.9 L1655.71 1212.9 L1656.29 1212.9 L1656.88 1212.9 L1657.47 1212.9 L1658.05 1212.9 L1658.64 1212.9 L1659.23 1212.9 L1659.81 1212.9 L1660.4 1212.9 L1660.99 1212.9 L1661.57 1212.9 L1662.16 1212.9 L1662.75 1212.9 L1663.33 1212.9 L1663.92 1212.9 L1664.5 1212.9 L1665.09 1212.9 L1665.68 1212.9 L1666.26 1212.9 L1666.85 1212.9 L1667.44 1212.9 L1668.02 1212.9 L1668.61 1212.9 L1669.2 1212.9 L1669.78 1212.9 L1670.37 1212.9 L1670.96 1212.9 L1671.54 1212.9 L1672.13 1212.9 L1672.71 1212.9 L1673.3 1212.9 L1673.89 1212.9 L1674.47 1212.9 L1675.06 1212.9 L1675.65 1212.9 L1676.23 1212.9 L1676.82 1212.9 L1677.41 1212.9 L1677.99 1212.9 L1678.58 1212.9 L1679.17 1212.9 L1679.75 1212.9 L1680.34 1212.9 L1680.92 1212.9 L1681.51 1212.9 L1682.1 1212.9 L1682.68 1212.9 L1683.27 1212.9 L1683.86 1212.9 L1684.44 1212.9 L1685.03 1212.9 L1685.62 1212.9 L1686.2 1212.9 L1686.79 1212.9 L1687.37 1212.9 L1687.96 1212.9 L1688.55 1212.9 L1689.13 1212.9 L1689.72 1212.9 L1690.31 1212.9 L1690.89 1212.9 L1691.48 1212.9 L1692.07 1212.9 L1692.65 1212.9 L1693.24 1212.9 L1693.83 1212.9 L1694.41 1212.9 L1695 1212.9 L1695.58 1212.9 L1696.17 1212.9 L1696.76 1212.9 L1697.34 1212.9 L1697.93 1212.9 L1698.52 1212.9 L1699.1 1212.9 L1699.69 1212.9 L1700.28 1212.9 L1700.86 1212.9 L1701.45 1212.9 L1702.04 1212.9 L1702.62 1212.9 L1703.21 1212.9 L1703.79 1212.9 L1704.38 1212.9 L1704.97 1212.9 L1705.55 1212.9 L1706.14 1212.9 L1706.73 1212.9 L1707.31 1212.9 L1707.9 1212.9 L1708.49 1212.9 L1709.07 1212.9 L1709.66 1212.9 L1710.24 1212.9 L1710.83 1212.9 L1711.42 1212.9 L1712 1212.9 L1712.59 1212.9 L1713.18 1212.9 L1713.76 1212.9 L1714.35 1212.9 L1714.94 1212.9 L1715.52 1212.9 L1716.11 1212.9 L1716.7 1212.9 L1717.28 1212.9 L1717.87 1212.9 L1718.45 1212.9 L1719.04 1212.9 L1719.63 1212.9 L1720.21 1212.9 L1720.8 1212.9 L1721.39 1212.9 L1721.97 1212.9 L1722.56 1212.9 L1723.15 1212.9 L1723.73 1212.9 L1724.32 1212.9 L1724.91 1212.9 L1725.49 1212.9 L1726.08 1212.9 L1726.66 1212.9 L1727.25 1212.9 L1727.84 1212.9 L1728.42 1212.9 L1729.01 1212.9 L1729.6 1212.9 L1730.18 1212.9 L1730.77 1212.9 L1731.36 1212.9 L1731.94 1212.9 L1732.53 1212.9 L1733.11 1212.9 L1733.7 1212.9 L1734.29 1212.9 L1734.87 1212.9 L1735.46 1212.9 L1736.05 1212.9 L1736.63 1212.9 L1737.22 1212.9 L1737.81 1212.9 L1738.39 1212.9 L1738.98 1212.9 L1739.57 1212.9 L1740.15 1212.9 L1740.74 1212.9 L1741.32 1212.9 L1741.91 1212.9 L1742.5 1212.9 L1743.08 1212.9 L1743.67 1212.9 L1744.26 1212.9 L1744.84 1212.9 L1745.43 1212.9 L1746.02 1212.9 L1746.6 1212.9 L1747.19 1212.9 L1747.78 1212.9 L1748.36 1212.9 L1748.95 1212.9 L1749.53 1212.9 L1750.12 1212.9 L1750.71 1212.9 L1751.29 1212.9 L1751.88 1212.9 L1752.47 1212.9 L1753.05 1212.9 L1753.64 1212.9 L1754.23 1212.9 L1754.81 1212.9 L1755.4 1212.9 L1755.99 1212.9 L1756.57 1212.9 L1757.16 1212.9 L1757.74 1212.9 L1758.33 1212.9 L1758.92 1212.9 L1759.5 1212.9 L1760.09 1212.9 L1760.68 1212.9 L1761.26 1212.9 L1761.85 1212.9 L1762.44 1212.9 L1763.02 1212.9 L1763.61 1212.9 L1764.19 1212.9 L1764.78 1212.9 L1765.37 1212.9 L1765.95 1212.9 L1766.54 1212.9 L1767.13 1212.9 L1767.71 1212.9 L1768.3 1212.9 L1768.89 1212.9 L1769.47 1212.9 L1770.06 1212.9 L1770.65 1212.9 L1771.23 1212.9 L1771.82 1212.9 L1772.4 1212.9 L1772.99 1212.9 L1773.58 1212.9 L1774.16 1212.9 L1774.75 1212.9 L1775.34 1212.9 L1775.92 1212.9 L1776.51 1212.9 L1777.1 1212.9 L1777.68 1212.9 L1778.27 1212.9 L1778.86 1212.9 L1779.44 1212.9 L1780.03 1212.9 L1780.61 1212.9 L1781.2 1212.9 L1781.79 1212.9 L1782.37 1212.9 L1782.96 1212.9 L1783.55 1212.9 L1784.13 1212.9 L1784.72 1212.9 L1785.31 1212.9 L1785.89 1212.9 L1786.48 1212.9 L1787.06 1212.9 L1787.65 1212.9 L1788.24 1212.9 L1788.82 1212.9 L1789.41 1212.9 L1790 1212.9 L1790.58 1212.9 L1791.17 1212.9 L1791.76 1212.9 L1792.34 1212.9 L1792.93 1212.9 L1793.52 1212.9 L1794.1 1212.9 L1794.69 1212.9 L1795.27 1212.9 L1795.86 1212.9 L1796.45 1212.9 L1797.03 1212.9 L1797.62 1212.9 L1798.21 1212.9 L1798.79 1212.9 L1799.38 1212.9 L1799.97 1212.9 L1800.55 1212.9 L1801.14 1212.9 L1801.73 1212.9 L1802.31 1212.9 L1802.9 1212.9 L1803.48 1212.9 L1804.07 1212.9 L1804.66 1212.9 L1805.24 1212.9 L1805.83 1212.9 L1806.42 1212.9 L1807 1212.9 L1807.59 1212.9 L1808.18 1212.9 L1808.76 1212.9 L1809.35 1212.9 L1809.94 1212.9 L1810.52 1212.9 L1811.11 1212.9 L1811.69 1212.9 L1812.28 1212.9 L1812.87 1212.9 L1813.45 1212.9 L1814.04 1212.9 L1814.63 1212.9 L1815.21 1212.9 L1815.8 1212.9 L1816.39 1212.9 L1816.97 1212.9 L1817.56 1212.9 L1818.14 1212.9 L1818.73 1212.9 L1819.32 1212.9 L1819.9 1212.9 L1820.49 1212.9 L1821.08 1212.9 L1821.66 1212.9 L1822.25 1212.9 L1822.84 1212.9 L1823.42 1212.9 L1824.01 1212.9 L1824.6 1212.9 L1825.18 1212.9 L1825.77 1212.9 L1826.35 1212.9 L1826.94 1212.9 L1827.53 1212.9 L1828.11 1212.9 L1828.7 1212.9 L1829.29 1212.9 L1829.87 1212.9 L1830.46 1212.9 L1831.05 1212.9 L1831.63 1212.9 L1832.22 1212.9 L1832.81 1212.9 L1833.39 1212.9 L1833.98 1212.9 L1834.56 1212.9 L1835.15 1212.9 L1835.74 1212.9 L1836.32 1212.9 L1836.91 1212.9 L1837.5 1212.9 L1838.08 1212.9 L1838.67 1212.9 L1839.26 1212.9 L1839.84 1212.9 L1840.43 1212.9 L1841.01 1212.9 L1841.6 1212.9 L1842.19 1212.9 L1842.77 1212.9 L1843.36 1212.9 L1843.95 1212.9 L1844.53 1212.9 L1845.12 1212.9 L1845.71 1212.9 L1846.29 1212.9 L1846.88 1212.9 L1847.47 1212.9 L1848.05 1212.9 L1848.64 1212.9 L1849.22 1212.9 L1849.81 1212.9 L1850.4 1212.9 L1850.98 1212.9 L1851.57 1212.9 L1852.16 1212.9 L1852.74 1212.9 L1853.33 1212.9 L1853.92 1212.9 L1854.5 1212.9 L1855.09 1212.9 L1855.68 1212.9 L1856.26 1212.9 L1856.85 1212.9 L1857.43 1212.9 L1858.02 1212.9 L1858.61 1212.9 L1859.19 1212.9 L1859.78 1212.9 L1860.37 1212.9 L1860.95 1212.9 L1861.54 1212.9 L1862.13 1212.9 L1862.71 1212.9 L1863.3 1212.9 L1863.88 1212.9 L1864.47 1212.9 L1865.06 1212.9 L1865.64 1212.9 L1866.23 1212.9 L1866.82 1212.9 L1867.4 1212.9 L1867.99 1212.9 L1868.58 1212.9 L1869.16 1212.9 L1869.75 1212.9 L1870.34 1212.9 L1870.92 1212.9 L1871.51 1212.9 L1872.09 1212.9 L1872.68 1212.9 L1873.27 1212.9 L1873.85 1212.9 L1874.44 1212.9 L1875.03 1212.9 L1875.61 1212.9 L1876.2 1212.9 L1876.79 1212.9 L1877.37 1212.9 L1877.96 1212.9 L1878.55 1212.9 L1879.13 1212.9 L1879.72 1212.9 L1880.3 1212.9 L1880.89 1212.9 L1881.48 1212.9 L1882.06 1212.9 L1882.65 1212.9 L1883.24 1212.9 L1883.82 1212.9 L1884.41 1212.9 L1885 1212.9 L1885.58 1212.9 L1886.17 1212.9 L1886.76 1212.9 L1887.34 1212.9 L1887.93 1212.9 L1888.51 1212.9 L1889.1 1212.9 L1889.69 1212.9 L1890.27 1212.9 L1890.86 1212.9 L1891.45 1212.9 L1892.03 1212.9 L1892.62 1212.9 L1893.21 1212.9 L1893.79 1212.9 L1894.38 1212.9 L1894.96 1212.9 L1895.55 1212.9 L1896.14 1212.9 L1896.72 1212.9 L1897.31 1212.9 L1897.9 1212.9 L1898.48 1212.9 L1899.07 1212.9 L1899.66 1212.9 L1900.24 1212.9 L1900.83 1212.9 L1901.42 1212.9 L1902 1212.9 L1902.59 1212.9 L1903.17 1212.9 L1903.76 1212.9 L1904.35 1212.9 L1904.93 1212.9 L1905.52 1212.9 L1906.11 1212.9 L1906.69 1212.9 L1907.28 1212.9 L1907.87 1212.9 L1908.45 1212.9 L1909.04 1212.9 L1909.63 1212.9 L1910.21 1212.9 L1910.8 1212.9 L1911.38 1212.9 L1911.97 1212.9 L1912.56 1212.9 L1913.14 1212.9 L1913.73 1212.9 L1914.32 1212.9 L1914.9 1212.9 L1915.49 1212.9 L1916.08 1212.9 L1916.66 1212.9 L1917.25 1212.9 L1917.83 1212.9 L1918.42 1212.9 L1919.01 1212.9 L1919.59 1212.9 L1920.18 1212.9 L1920.77 1212.9 L1921.35 1212.9 L1921.94 1212.9 L1922.53 1212.9 L1923.11 1212.9 L1923.7 1212.9 L1924.29 1212.9 L1924.87 1212.9 L1925.46 1212.9 L1926.04 1212.9 L1926.63 1212.9 L1927.22 1212.9 L1927.8 1212.9 L1928.39 1212.9 L1928.98 1212.9 L1929.56 1212.9 L1930.15 1212.9 L1930.74 1212.9 L1931.32 1212.9 L1931.91 1212.9 L1932.5 1212.9 L1933.08 1212.9 L1933.67 1212.9 L1934.25 1212.9 L1934.84 1212.9 L1935.43 1212.9 L1936.01 1212.9 L1936.6 1212.9 L1937.19 1212.9 L1937.77 1212.9 L1938.36 1212.9 L1938.95 1212.9 L1939.53 1212.9 L1940.12 1212.9 L1940.71 1212.9 L1941.29 1212.9 L1941.88 1212.9 L1942.46 1212.9 L1943.05 1212.9 L1943.64 1212.9 L1944.22 1212.9 L1944.81 1212.9 L1945.4 1212.9 L1945.98 1212.9 L1946.57 1212.9 L1947.16 1212.9 L1947.74 1212.9 L1948.33 1212.9 L1948.91 1212.9 L1949.5 1212.9 L1950.09 1212.9 L1950.67 1212.9 L1951.26 1212.9 L1951.85 1212.9 L1952.43 1212.9 L1953.02 1212.9 L1953.61 1212.9 L1954.19 1212.9 L1954.78 1212.9 L1955.37 1212.9 L1955.95 1212.9 L1956.54 1212.9 L1957.12 1212.9 L1957.71 1212.9 L1958.3 1212.9 L1958.88 1212.9 L1959.47 1212.9 L1960.06 1212.9 L1960.64 1212.9 L1961.23 1212.9 L1961.82 1212.9 L1962.4 1212.9 L1962.99 1212.9 L1963.58 1212.9 L1964.16 1212.9 L1964.75 1212.9 L1965.33 1212.9 L1965.92 1212.9 L1966.51 1212.9 L1967.09 1212.9 L1967.68 1212.9 L1968.27 1212.9 L1968.85 1212.9 L1969.44 1212.9 L1970.03 1212.9 L1970.61 1212.9 L1971.2 1212.9 L1971.78 1212.9 L1972.37 1212.9 L1972.96 1212.9 L1973.54 1212.9 L1974.13 1212.9 L1974.72 1212.9 L1975.3 1212.9 L1975.89 1212.9 L1976.48 1212.9 L1977.06 1212.9 L1977.65 1212.9 L1978.24 1212.9 L1978.82 1212.9 L1979.41 1212.9 L1979.99 1212.9 L1980.58 1212.9 L1981.17 1212.9 L1981.75 1212.9 L1982.34 1212.9 L1982.93 1212.9 L1983.51 1212.9 L1984.1 1212.9 L1984.69 1212.9 L1985.27 1212.9 L1985.86 1212.9 L1986.45 1212.9 L1987.03 1212.9 L1987.62 1212.9 L1988.2 1212.9 L1988.79 1212.9 L1989.38 1212.9 L1989.96 1212.9 L1990.55 1212.9 L1991.14 1212.9 L1991.72 1212.9 L1992.31 1212.9 L1992.9 1212.9 L1993.48 1212.9 L1994.07 1212.9 L1994.65 1212.9 L1995.24 1212.9 L1995.83 1212.9 L1996.41 1212.9 L1997 1212.9 L1997.59 1212.9 L1998.17 1212.9 L1998.76 1212.9 L1999.35 1212.9 L1999.93 1212.9 L2000.52 1212.9 L2001.11 1212.9 L2001.69 1212.9 L2002.28 1212.9 L2002.86 1212.9 L2003.45 1212.9 L2004.04 1212.9 L2004.62 1212.9 L2005.21 1212.9 L2005.8 1212.9 L2006.38 1212.9 L2006.97 1212.9 L2007.56 1212.9 L2008.14 1212.9 L2008.73 1212.9 L2009.32 1212.9 L2009.9 1212.9 L2010.49 1212.9 L2011.07 1212.9 L2011.66 1212.9 L2012.25 1212.9 L2012.83 1212.9 L2013.42 1212.9 L2014.01 1212.9 L2014.59 1212.9 L2015.18 1212.9 L2015.77 1212.9 L2016.35 1212.9 L2016.94 1212.9 L2017.53 1212.9 L2018.11 1212.9 L2018.7 1212.9 L2019.28 1212.9 L2019.87 1212.9 L2020.46 1212.9 L2021.04 1212.9 L2021.63 1212.9 L2022.22 1212.9 L2022.8 1212.9 L2023.39 1212.9 L2023.98 1212.9 L2024.56 1212.9 L2025.15 1212.9 L2025.73 1212.9 L2026.32 1212.9 L2026.91 1212.9 L2027.49 1212.9 L2028.08 1212.9 L2028.67 1212.9 L2029.25 1212.9 L2029.84 1212.9 L2030.43 1212.9 L2031.01 1212.9 L2031.6 1212.9 L2032.19 1212.9 L2032.77 1212.9 L2033.36 1212.9 L2033.94 1212.9 L2034.53 1212.9 L2035.12 1212.9 L2035.7 1212.9 L2036.29 1212.9 L2036.88 1212.9 L2037.46 1212.9 L2038.05 1212.9 L2038.64 1212.9 L2039.22 1212.9 L2039.81 1212.9 L2040.4 1212.9 L2040.98 1212.9 L2041.57 1212.9 L2042.15 1212.9 L2042.74 1212.9 L2043.33 1212.9 L2043.91 1212.9 L2044.5 1212.9 L2045.09 1212.9 L2045.67 1212.9 L2046.26 1212.9 L2046.85 1212.9 L2047.43 1212.9 L2048.02 1212.9 L2048.6 1212.9 L2049.19 1212.9 L2049.78 1212.9 L2050.36 1212.9 L2050.95 1212.9 L2051.54 1212.9 L2052.12 1212.9 L2052.71 1212.9 L2053.3 1212.9 L2053.88 1212.9 L2054.47 1212.9 L2055.06 1212.9 L2055.64 1212.9 L2056.23 1212.9 L2056.81 1212.9 L2057.4 1212.9 L2057.99 1212.9 L2058.57 1212.9 L2059.16 1212.9 L2059.75 1212.9 L2060.33 1212.9 L2060.92 1212.9 L2061.51 1212.9 L2062.09 1212.9 L2062.68 1212.9 L2063.27 1212.9 L2063.85 1212.9 L2064.44 1212.9 L2065.02 1212.9 L2065.61 1212.9 L2066.2 1212.9 L2066.78 1212.9 L2067.37 1212.9 L2067.96 1212.9 L2068.54 1212.9 L2069.13 1212.9 L2069.72 1212.9 L2070.3 1212.9 L2070.89 1212.9 L2071.48 1212.9 L2072.06 1212.9 L2072.65 1212.9 L2073.23 1212.9 L2073.82 1212.9 L2074.41 1212.9 L2074.99 1212.9 L2075.58 1212.9 L2076.17 1212.9 L2076.75 1212.9 L2077.34 1212.9 L2077.93 1212.9 L2078.51 1212.9 L2079.1 1212.9 L2079.68 1212.9 L2080.27 1212.9 L2080.86 1212.9 L2081.44 1212.9 L2082.03 1212.9 L2082.62 1212.9 L2083.2 1212.9 L2083.79 1212.9 L2084.38 1212.9 L2084.96 1212.9 L2085.55 1212.9 L2086.14 1212.9 L2086.72 1212.9 L2087.31 1212.9 L2087.89 1212.9 L2088.48 1212.9 L2089.07 1212.9 L2089.65 1212.9 L2090.24 1212.9 L2090.83 1212.9 L2091.41 1212.9 L2092 1212.9 L2092.59 1212.9 L2093.17 1212.9 L2093.76 1212.9 L2094.35 1212.9 L2094.93 1212.9 L2095.52 1212.9 L2096.1 1212.9 L2096.69 1212.9 L2097.28 1212.9 L2097.86 1212.9 L2098.45 1212.9 L2099.04 1212.9 L2099.62 1212.9 L2100.21 1212.9 L2100.8 1212.9 L2101.38 1212.9 L2101.97 1212.9 L2102.55 1212.9 L2103.14 1212.9 L2103.73 1212.9 L2104.31 1212.9 L2104.9 1212.9 L2105.49 1212.9 L2106.07 1212.9 L2106.66 1212.9 L2107.25 1212.9 L2107.83 1212.9 L2108.42 1212.9 L2109.01 1212.9 L2109.59 1212.9 L2110.18 1212.9 L2110.76 1212.9 L2111.35 1212.9 L2111.94 1212.9 L2112.52 1212.9 L2113.11 1212.9 L2113.7 1212.9 L2114.28 1212.9 L2114.87 1212.9 L2115.46 1212.9 L2116.04 1212.9 L2116.63 1212.9 L2117.22 1212.9 L2117.8 1212.9 L2118.39 1212.9 L2118.97 1212.9 L2119.56 1212.9 L2120.15 1212.9 L2120.73 1212.9 L2121.32 1212.9 L2121.91 1212.9 L2122.49 1212.9 L2123.08 1212.9 L2123.67 1212.9 L2124.25 1212.9 L2124.84 1212.9 L2125.42 1212.9 L2126.01 1212.9 L2126.6 1212.9 L2127.18 1212.9 L2127.77 1212.9 L2128.36 1212.9 L2128.94 1212.9 L2129.53 1212.9 L2130.12 1212.9 L2130.7 1212.9 L2131.29 1212.9 L2131.88 1212.9 L2132.46 1212.9 L2133.05 1212.9 L2133.63 1212.9 L2134.22 1212.9 L2134.81 1212.9 L2135.39 1212.9 L2135.98 1212.9 L2136.57 1212.9 L2137.15 1212.9 L2137.74 1212.9 L2138.33 1212.9 L2138.91 1212.9 L2139.5 1212.9 L2140.09 1212.9 L2140.67 1212.9 L2141.26 1212.9 L2141.84 1212.9 L2142.43 1212.9 L2143.02 1212.9 L2143.6 1212.9 L2144.19 1212.9 L2144.78 1212.9 L2145.36 1212.9 L2145.95 1212.9 L2146.54 1212.9 L2147.12 1212.9 L2147.71 1212.9 L2148.3 1212.9 L2148.88 1212.9 L2149.47 1212.9 L2150.05 1212.9 L2150.64 1212.9 L2151.23 1212.9 L2151.81 1212.9 L2152.4 1212.9 L2152.99 1212.9 L2153.57 1212.9 L2154.16 1212.9 L2154.75 1212.9 L2155.33 1212.9 L2155.92 1212.9 L2156.5 1212.9 L2157.09 1212.9 L2157.68 1212.9 L2158.26 1212.9 L2158.26 1212.22 L2157.68 1212.22 L2157.09 1212.22 L2156.5 1212.22 L2155.92 1212.22 L2155.33 1212.22 L2154.75 1212.22 L2154.16 1212.22 L2153.57 1212.22 L2152.99 1212.22 L2152.4 1212.22 L2151.81 1212.22 L2151.23 1212.22 L2150.64 1212.22 L2150.05 1212.22 L2149.47 1212.22 L2148.88 1212.22 L2148.3 1212.22 L2147.71 1212.22 L2147.12 1212.22 L2146.54 1212.22 L2145.95 1212.22 L2145.36 1212.22 L2144.78 1212.22 L2144.19 1212.22 L2143.6 1212.22 L2143.02 1212.22 L2142.43 1212.22 L2141.84 1212.22 L2141.26 1212.22 L2140.67 1212.22 L2140.09 1212.22 L2139.5 1212.22 L2138.91 1212.22 L2138.33 1212.22 L2137.74 1212.22 L2137.15 1212.22 L2136.57 1212.22 L2135.98 1212.22 L2135.39 1212.22 L2134.81 1212.22 L2134.22 1212.22 L2133.63 1212.22 L2133.05 1212.22 L2132.46 1212.22 L2131.88 1212.22 L2131.29 1212.22 L2130.7 1212.22 L2130.12 1212.22 L2129.53 1212.22 L2128.94 1212.22 L2128.36 1212.22 L2127.77 1212.22 L2127.18 1212.22 L2126.6 1212.22 L2126.01 1212.22 L2125.42 1212.22 L2124.84 1212.22 L2124.25 1212.22 L2123.67 1212.22 L2123.08 1212.22 L2122.49 1212.22 L2121.91 1212.22 L2121.32 1212.22 L2120.73 1212.22 L2120.15 1212.22 L2119.56 1212.22 L2118.97 1212.22 L2118.39 1212.22 L2117.8 1212.22 L2117.22 1212.22 L2116.63 1212.22 L2116.04 1212.22 L2115.46 1212.22 L2114.87 1212.22 L2114.28 1212.22 L2113.7 1212.22 L2113.11 1212.22 L2112.52 1212.22 L2111.94 1212.22 L2111.35 1212.22 L2110.76 1212.22 L2110.18 1212.22 L2109.59 1212.22 L2109.01 1212.22 L2108.42 1212.22 L2107.83 1212.22 L2107.25 1212.22 L2106.66 1212.22 L2106.07 1212.22 L2105.49 1212.22 L2104.9 1212.22 L2104.31 1212.22 L2103.73 1212.22 L2103.14 1212.22 L2102.55 1212.22 L2101.97 1212.22 L2101.38 1212.22 L2100.8 1212.22 L2100.21 1212.22 L2099.62 1212.22 L2099.04 1212.22 L2098.45 1212.22 L2097.86 1212.22 L2097.28 1212.22 L2096.69 1212.22 L2096.1 1212.22 L2095.52 1212.22 L2094.93 1212.22 L2094.35 1212.22 L2093.76 1212.22 L2093.17 1212.22 L2092.59 1212.22 L2092 1212.22 L2091.41 1212.22 L2090.83 1212.22 L2090.24 1212.22 L2089.65 1212.22 L2089.07 1212.22 L2088.48 1212.22 L2087.89 1212.22 L2087.31 1212.22 L2086.72 1212.22 L2086.14 1212.22 L2085.55 1212.22 L2084.96 1212.22 L2084.38 1212.22 L2083.79 1212.22 L2083.2 1212.22 L2082.62 1212.22 L2082.03 1212.22 L2081.44 1212.22 L2080.86 1212.22 L2080.27 1212.22 L2079.68 1212.22 L2079.1 1212.22 L2078.51 1212.22 L2077.93 1212.22 L2077.34 1212.22 L2076.75 1212.22 L2076.17 1212.22 L2075.58 1212.22 L2074.99 1212.22 L2074.41 1212.22 L2073.82 1212.22 L2073.23 1212.22 L2072.65 1212.22 L2072.06 1212.22 L2071.48 1212.22 L2070.89 1212.22 L2070.3 1212.22 L2069.72 1212.22 L2069.13 1212.22 L2068.54 1212.22 L2067.96 1212.22 L2067.37 1212.22 L2066.78 1212.22 L2066.2 1212.22 L2065.61 1212.22 L2065.02 1212.22 L2064.44 1212.22 L2063.85 1212.22 L2063.27 1212.22 L2062.68 1212.22 L2062.09 1212.22 L2061.51 1212.22 L2060.92 1212.22 L2060.33 1212.22 L2059.75 1212.22 L2059.16 1212.22 L2058.57 1212.22 L2057.99 1212.22 L2057.4 1212.22 L2056.81 1212.22 L2056.23 1212.22 L2055.64 1212.22 L2055.06 1212.22 L2054.47 1212.22 L2053.88 1212.22 L2053.3 1212.22 L2052.71 1212.22 L2052.12 1212.22 L2051.54 1212.22 L2050.95 1212.22 L2050.36 1212.22 L2049.78 1212.22 L2049.19 1212.22 L2048.6 1212.22 L2048.02 1212.22 L2047.43 1212.22 L2046.85 1212.22 L2046.26 1212.22 L2045.67 1212.22 L2045.09 1212.22 L2044.5 1212.22 L2043.91 1212.22 L2043.33 1212.22 L2042.74 1212.22 L2042.15 1212.22 L2041.57 1212.22 L2040.98 1212.22 L2040.4 1212.22 L2039.81 1212.22 L2039.22 1212.22 L2038.64 1212.22 L2038.05 1212.22 L2037.46 1212.22 L2036.88 1212.22 L2036.29 1212.22 L2035.7 1212.22 L2035.12 1212.22 L2034.53 1212.22 L2033.94 1212.22 L2033.36 1212.22 L2032.77 1212.22 L2032.19 1212.22 L2031.6 1212.22 L2031.01 1212.22 L2030.43 1212.22 L2029.84 1212.22 L2029.25 1212.22 L2028.67 1212.22 L2028.08 1212.22 L2027.49 1212.22 L2026.91 1212.22 L2026.32 1212.22 L2025.73 1212.22 L2025.15 1212.22 L2024.56 1212.22 L2023.98 1212.22 L2023.39 1212.22 L2022.8 1212.22 L2022.22 1212.22 L2021.63 1212.22 L2021.04 1212.22 L2020.46 1212.22 L2019.87 1212.22 L2019.28 1212.22 L2018.7 1212.22 L2018.11 1212.22 L2017.53 1212.22 L2016.94 1212.22 L2016.35 1212.22 L2015.77 1212.22 L2015.18 1212.22 L2014.59 1212.22 L2014.01 1212.22 L2013.42 1212.22 L2012.83 1212.22 L2012.25 1212.22 L2011.66 1212.22 L2011.07 1212.22 L2010.49 1212.22 L2009.9 1212.22 L2009.32 1212.22 L2008.73 1212.22 L2008.14 1212.22 L2007.56 1212.22 L2006.97 1212.22 L2006.38 1212.22 L2005.8 1212.22 L2005.21 1212.22 L2004.62 1212.22 L2004.04 1212.22 L2003.45 1212.22 L2002.86 1212.22 L2002.28 1212.22 L2001.69 1212.22 L2001.11 1212.22 L2000.52 1212.22 L1999.93 1212.22 L1999.35 1212.22 L1998.76 1212.22 L1998.17 1212.22 L1997.59 1212.22 L1997 1212.22 L1996.41 1212.22 L1995.83 1212.22 L1995.24 1212.22 L1994.65 1212.22 L1994.07 1212.22 L1993.48 1212.22 L1992.9 1212.22 L1992.31 1212.22 L1991.72 1212.22 L1991.14 1212.22 L1990.55 1212.22 L1989.96 1212.22 L1989.38 1212.22 L1988.79 1212.22 L1988.2 1212.22 L1987.62 1212.22 L1987.03 1212.22 L1986.45 1212.22 L1985.86 1212.22 L1985.27 1212.22 L1984.69 1212.22 L1984.1 1212.22 L1983.51 1212.22 L1982.93 1212.22 L1982.34 1212.22 L1981.75 1212.22 L1981.17 1212.22 L1980.58 1212.22 L1979.99 1212.22 L1979.41 1212.22 L1978.82 1212.22 L1978.24 1212.22 L1977.65 1212.22 L1977.06 1212.22 L1976.48 1212.22 L1975.89 1212.22 L1975.3 1212.22 L1974.72 1212.22 L1974.13 1212.22 L1973.54 1212.22 L1972.96 1212.22 L1972.37 1212.22 L1971.78 1212.22 L1971.2 1212.22 L1970.61 1212.22 L1970.03 1212.22 L1969.44 1212.22 L1968.85 1212.22 L1968.27 1212.22 L1967.68 1212.22 L1967.09 1212.22 L1966.51 1212.22 L1965.92 1212.22 L1965.33 1212.22 L1964.75 1212.22 L1964.16 1212.22 L1963.58 1212.22 L1962.99 1212.22 L1962.4 1212.22 L1961.82 1212.22 L1961.23 1212.22 L1960.64 1212.22 L1960.06 1212.22 L1959.47 1212.22 L1958.88 1212.22 L1958.3 1212.22 L1957.71 1212.22 L1957.12 1212.22 L1956.54 1212.22 L1955.95 1212.22 L1955.37 1212.22 L1954.78 1212.22 L1954.19 1212.22 L1953.61 1212.22 L1953.02 1212.22 L1952.43 1212.22 L1951.85 1212.22 L1951.26 1212.22 L1950.67 1212.22 L1950.09 1212.22 L1949.5 1212.22 L1948.91 1212.22 L1948.33 1212.22 L1947.74 1212.22 L1947.16 1212.22 L1946.57 1212.22 L1945.98 1212.22 L1945.4 1212.22 L1944.81 1212.22 L1944.22 1212.22 L1943.64 1212.22 L1943.05 1212.22 L1942.46 1212.22 L1941.88 1212.22 L1941.29 1212.22 L1940.71 1212.22 L1940.12 1212.22 L1939.53 1212.22 L1938.95 1212.22 L1938.36 1212.22 L1937.77 1212.22 L1937.19 1212.22 L1936.6 1212.22 L1936.01 1212.22 L1935.43 1212.22 L1934.84 1212.22 L1934.25 1212.22 L1933.67 1212.22 L1933.08 1212.22 L1932.5 1212.22 L1931.91 1212.22 L1931.32 1212.22 L1930.74 1212.22 L1930.15 1212.22 L1929.56 1212.22 L1928.98 1212.22 L1928.39 1212.22 L1927.8 1212.22 L1927.22 1212.22 L1926.63 1212.22 L1926.04 1212.22 L1925.46 1212.22 L1924.87 1212.22 L1924.29 1212.22 L1923.7 1212.22 L1923.11 1212.22 L1922.53 1212.22 L1921.94 1212.22 L1921.35 1212.22 L1920.77 1212.22 L1920.18 1212.22 L1919.59 1212.22 L1919.01 1212.22 L1918.42 1212.22 L1917.83 1212.22 L1917.25 1212.22 L1916.66 1212.22 L1916.08 1212.22 L1915.49 1212.22 L1914.9 1212.22 L1914.32 1212.22 L1913.73 1212.22 L1913.14 1212.22 L1912.56 1212.22 L1911.97 1212.22 L1911.38 1212.22 L1910.8 1212.22 L1910.21 1212.22 L1909.63 1212.22 L1909.04 1212.22 L1908.45 1212.22 L1907.87 1212.22 L1907.28 1212.22 L1906.69 1212.22 L1906.11 1212.22 L1905.52 1212.22 L1904.93 1212.22 L1904.35 1212.22 L1903.76 1212.22 L1903.17 1212.22 L1902.59 1212.22 L1902 1212.22 L1901.42 1212.22 L1900.83 1212.22 L1900.24 1212.22 L1899.66 1212.22 L1899.07 1212.22 L1898.48 1212.22 L1897.9 1212.22 L1897.31 1212.22 L1896.72 1212.22 L1896.14 1212.22 L1895.55 1212.22 L1894.96 1212.22 L1894.38 1212.22 L1893.79 1212.22 L1893.21 1212.22 L1892.62 1212.22 L1892.03 1212.22 L1891.45 1212.22 L1890.86 1212.22 L1890.27 1212.22 L1889.69 1212.22 L1889.1 1212.22 L1888.51 1212.22 L1887.93 1212.22 L1887.34 1212.22 L1886.76 1212.22 L1886.17 1212.22 L1885.58 1212.22 L1885 1212.22 L1884.41 1212.22 L1883.82 1212.22 L1883.24 1212.22 L1882.65 1212.22 L1882.06 1212.22 L1881.48 1212.22 L1880.89 1212.22 L1880.3 1212.22 L1879.72 1212.22 L1879.13 1212.22 L1878.55 1212.22 L1877.96 1212.22 L1877.37 1212.22 L1876.79 1212.22 L1876.2 1212.22 L1875.61 1212.22 L1875.03 1212.22 L1874.44 1212.22 L1873.85 1212.22 L1873.27 1212.22 L1872.68 1212.22 L1872.09 1212.22 L1871.51 1212.22 L1870.92 1212.22 L1870.34 1212.22 L1869.75 1212.22 L1869.16 1212.22 L1868.58 1212.22 L1867.99 1212.22 L1867.4 1212.22 L1866.82 1212.22 L1866.23 1212.22 L1865.64 1212.22 L1865.06 1212.22 L1864.47 1212.22 L1863.88 1212.22 L1863.3 1212.22 L1862.71 1212.22 L1862.13 1212.22 L1861.54 1212.22 L1860.95 1212.22 L1860.37 1212.22 L1859.78 1212.22 L1859.19 1212.22 L1858.61 1212.22 L1858.02 1212.22 L1857.43 1212.22 L1856.85 1212.22 L1856.26 1212.22 L1855.68 1212.22 L1855.09 1212.22 L1854.5 1212.22 L1853.92 1212.22 L1853.33 1212.22 L1852.74 1212.22 L1852.16 1212.22 L1851.57 1212.22 L1850.98 1212.22 L1850.4 1212.22 L1849.81 1212.22 L1849.22 1212.22 L1848.64 1212.22 L1848.05 1212.22 L1847.47 1212.22 L1846.88 1212.22 L1846.29 1212.22 L1845.71 1212.22 L1845.12 1212.22 L1844.53 1212.22 L1843.95 1212.22 L1843.36 1212.22 L1842.77 1212.22 L1842.19 1212.22 L1841.6 1212.22 L1841.01 1212.22 L1840.43 1212.22 L1839.84 1212.22 L1839.26 1212.22 L1838.67 1212.22 L1838.08 1212.22 L1837.5 1212.22 L1836.91 1212.22 L1836.32 1212.22 L1835.74 1212.22 L1835.15 1212.22 L1834.56 1212.22 L1833.98 1212.22 L1833.39 1212.22 L1832.81 1212.22 L1832.22 1212.22 L1831.63 1212.22 L1831.05 1212.22 L1830.46 1212.22 L1829.87 1212.22 L1829.29 1212.22 L1828.7 1212.22 L1828.11 1212.22 L1827.53 1212.22 L1826.94 1212.22 L1826.35 1212.22 L1825.77 1212.22 L1825.18 1212.22 L1824.6 1212.22 L1824.01 1212.22 L1823.42 1212.22 L1822.84 1212.22 L1822.25 1212.22 L1821.66 1212.22 L1821.08 1212.22 L1820.49 1212.22 L1819.9 1212.22 L1819.32 1212.22 L1818.73 1212.22 L1818.14 1212.22 L1817.56 1212.22 L1816.97 1212.22 L1816.39 1212.22 L1815.8 1212.22 L1815.21 1212.22 L1814.63 1212.22 L1814.04 1212.22 L1813.45 1212.22 L1812.87 1212.22 L1812.28 1212.22 L1811.69 1212.22 L1811.11 1212.22 L1810.52 1212.22 L1809.94 1212.22 L1809.35 1212.22 L1808.76 1212.22 L1808.18 1212.22 L1807.59 1212.22 L1807 1212.22 L1806.42 1212.22 L1805.83 1212.22 L1805.24 1212.22 L1804.66 1212.22 L1804.07 1212.22 L1803.48 1212.22 L1802.9 1212.22 L1802.31 1212.22 L1801.73 1212.22 L1801.14 1212.22 L1800.55 1212.22 L1799.97 1212.22 L1799.38 1212.22 L1798.79 1212.22 L1798.21 1212.22 L1797.62 1212.22 L1797.03 1212.22 L1796.45 1212.22 L1795.86 1212.22 L1795.27 1212.22 L1794.69 1212.22 L1794.1 1212.22 L1793.52 1212.22 L1792.93 1212.22 L1792.34 1212.22 L1791.76 1212.22 L1791.17 1212.22 L1790.58 1212.22 L1790 1212.22 L1789.41 1212.22 L1788.82 1212.22 L1788.24 1212.22 L1787.65 1212.22 L1787.06 1212.22 L1786.48 1212.22 L1785.89 1212.22 L1785.31 1212.22 L1784.72 1212.22 L1784.13 1212.22 L1783.55 1212.22 L1782.96 1212.22 L1782.37 1212.22 L1781.79 1212.22 L1781.2 1212.22 L1780.61 1212.22 L1780.03 1212.22 L1779.44 1212.22 L1778.86 1212.22 L1778.27 1212.22 L1777.68 1212.22 L1777.1 1212.22 L1776.51 1212.22 L1775.92 1212.22 L1775.34 1212.22 L1774.75 1212.22 L1774.16 1212.22 L1773.58 1212.22 L1772.99 1212.22 L1772.4 1212.22 L1771.82 1212.22 L1771.23 1212.22 L1770.65 1212.22 L1770.06 1212.22 L1769.47 1212.22 L1768.89 1212.22 L1768.3 1212.22 L1767.71 1212.22 L1767.13 1212.22 L1766.54 1212.22 L1765.95 1212.22 L1765.37 1212.22 L1764.78 1212.22 L1764.19 1212.22 L1763.61 1212.22 L1763.02 1212.22 L1762.44 1212.22 L1761.85 1212.22 L1761.26 1212.22 L1760.68 1212.22 L1760.09 1212.22 L1759.5 1212.22 L1758.92 1212.22 L1758.33 1212.22 L1757.74 1212.22 L1757.16 1212.22 L1756.57 1212.22 L1755.99 1212.22 L1755.4 1212.22 L1754.81 1212.22 L1754.23 1212.22 L1753.64 1212.22 L1753.05 1212.22 L1752.47 1212.22 L1751.88 1212.22 L1751.29 1212.22 L1750.71 1212.22 L1750.12 1212.22 L1749.53 1212.22 L1748.95 1212.22 L1748.36 1212.22 L1747.78 1212.22 L1747.19 1212.22 L1746.6 1212.22 L1746.02 1212.22 L1745.43 1212.22 L1744.84 1212.22 L1744.26 1212.22 L1743.67 1212.22 L1743.08 1212.22 L1742.5 1212.22 L1741.91 1212.22 L1741.32 1212.22 L1740.74 1212.22 L1740.15 1212.22 L1739.57 1212.22 L1738.98 1212.22 L1738.39 1212.22 L1737.81 1212.22 L1737.22 1212.22 L1736.63 1212.22 L1736.05 1212.22 L1735.46 1212.22 L1734.87 1212.22 L1734.29 1212.22 L1733.7 1212.22 L1733.11 1212.22 L1732.53 1212.22 L1731.94 1212.22 L1731.36 1212.22 L1730.77 1212.22 L1730.18 1212.22 L1729.6 1212.22 L1729.01 1212.22 L1728.42 1212.22 L1727.84 1212.22 L1727.25 1212.22 L1726.66 1212.22 L1726.08 1212.22 L1725.49 1212.22 L1724.91 1212.22 L1724.32 1212.22 L1723.73 1212.22 L1723.15 1212.22 L1722.56 1212.22 L1721.97 1212.22 L1721.39 1212.22 L1720.8 1212.22 L1720.21 1212.22 L1719.63 1212.22 L1719.04 1212.22 L1718.45 1212.22 L1717.87 1212.22 L1717.28 1212.22 L1716.7 1212.22 L1716.11 1212.22 L1715.52 1212.22 L1714.94 1212.22 L1714.35 1212.22 L1713.76 1212.22 L1713.18 1212.22 L1712.59 1212.22 L1712 1212.22 L1711.42 1212.22 L1710.83 1212.22 L1710.24 1212.22 L1709.66 1212.22 L1709.07 1212.22 L1708.49 1212.22 L1707.9 1212.22 L1707.31 1212.22 L1706.73 1212.22 L1706.14 1212.22 L1705.55 1212.22 L1704.97 1212.22 L1704.38 1212.22 L1703.79 1212.22 L1703.21 1212.22 L1702.62 1212.22 L1702.04 1212.22 L1701.45 1212.22 L1700.86 1212.22 L1700.28 1212.22 L1699.69 1212.22 L1699.1 1212.22 L1698.52 1212.22 L1697.93 1212.22 L1697.34 1212.22 L1696.76 1212.22 L1696.17 1212.22 L1695.58 1212.22 L1695 1212.22 L1694.41 1212.22 L1693.83 1212.22 L1693.24 1212.22 L1692.65 1212.22 L1692.07 1212.22 L1691.48 1212.22 L1690.89 1212.22 L1690.31 1212.22 L1689.72 1212.22 L1689.13 1212.22 L1688.55 1212.22 L1687.96 1212.22 L1687.37 1212.22 L1686.79 1212.22 L1686.2 1212.22 L1685.62 1212.22 L1685.03 1212.22 L1684.44 1212.22 L1683.86 1212.22 L1683.27 1212.22 L1682.68 1212.22 L1682.1 1212.22 L1681.51 1212.22 L1680.92 1212.22 L1680.34 1212.22 L1679.75 1212.22 L1679.17 1212.22 L1678.58 1212.22 L1677.99 1212.22 L1677.41 1212.22 L1676.82 1212.22 L1676.23 1212.22 L1675.65 1212.22 L1675.06 1212.22 L1674.47 1212.22 L1673.89 1212.22 L1673.3 1212.22 L1672.71 1212.22 L1672.13 1212.22 L1671.54 1212.22 L1670.96 1212.22 L1670.37 1212.22 L1669.78 1212.22 L1669.2 1212.22 L1668.61 1212.22 L1668.02 1212.22 L1667.44 1212.22 L1666.85 1212.22 L1666.26 1212.22 L1665.68 1212.22 L1665.09 1212.22 L1664.5 1212.22 L1663.92 1212.22 L1663.33 1212.22 L1662.75 1212.22 L1662.16 1212.22 L1661.57 1212.22 L1660.99 1212.22 L1660.4 1212.22 L1659.81 1212.22 L1659.23 1212.22 L1658.64 1212.22 L1658.05 1212.22 L1657.47 1212.22 L1656.88 1212.22 L1656.29 1212.22 L1655.71 1212.22 L1655.12 1212.22 L1654.54 1212.22 L1653.95 1212.22 L1653.36 1212.22 L1652.78 1212.22 L1652.19 1212.22 L1651.6 1212.22 L1651.02 1212.22 L1650.43 1212.22 L1649.84 1212.22 L1649.26 1212.22 L1648.67 1212.22 L1648.09 1212.22 L1647.5 1212.22 L1646.91 1212.22 L1646.33 1212.22 L1645.74 1212.22 L1645.15 1212.22 L1644.57 1212.22 L1643.98 1212.22 L1643.39 1212.22 L1642.81 1212.22 L1642.22 1212.22 L1641.63 1212.22 L1641.05 1212.22 L1640.46 1212.22 L1639.88 1212.22 L1639.29 1212.22 L1638.7 1212.22 L1638.12 1212.22 L1637.53 1212.22 L1636.94 1212.22 L1636.36 1212.22 L1635.77 1212.22 L1635.18 1212.22 L1634.6 1212.22 L1634.01 1212.22 L1633.42 1212.22 L1632.84 1212.22 L1632.25 1212.22 L1631.67 1212.22 L1631.08 1212.22 L1630.49 1212.22 L1629.91 1212.22 L1629.32 1212.22 L1628.73 1212.22 L1628.15 1212.22 L1627.56 1212.22 L1626.97 1212.22 L1626.39 1212.22 L1625.8 1212.22 L1625.22 1212.22 L1624.63 1212.22 L1624.04 1212.22 L1623.46 1212.22 L1622.87 1212.22 L1622.28 1212.22 L1621.7 1212.22 L1621.11 1212.22 L1620.52 1212.22 L1619.94 1212.22 L1619.35 1212.22 L1618.76 1212.22 L1618.18 1212.22 L1617.59 1212.22 L1617.01 1212.22 L1616.42 1212.22 L1615.83 1212.22 L1615.25 1212.22 L1614.66 1212.22 L1614.07 1212.22 L1613.49 1212.22 L1612.9 1212.22 L1612.31 1212.22 L1611.73 1212.22 L1611.14 1212.22 L1610.55 1212.22 L1609.97 1212.22 L1609.38 1212.22 L1608.8 1212.22 L1608.21 1212.22 L1607.62 1212.22 L1607.04 1212.22 L1606.45 1212.22 L1605.86 1212.22 L1605.28 1212.22 L1604.69 1212.22 L1604.1 1212.22 L1603.52 1212.22 L1602.93 1212.22 L1602.34 1212.22 L1601.76 1212.22 L1601.17 1212.22 L1600.59 1212.22 L1600 1212.22 L1599.41 1212.22 L1598.83 1212.22 L1598.24 1212.22 L1597.65 1212.22 L1597.07 1212.22 L1596.48 1212.22 L1595.89 1212.22 L1595.31 1212.22 L1594.72 1212.22 L1594.14 1212.22 L1593.55 1212.22 L1592.96 1212.22 L1592.38 1212.22 L1591.79 1212.22 L1591.2 1212.22 L1590.62 1212.22 L1590.03 1212.22 L1589.44 1212.22 L1588.86 1212.22 L1588.27 1212.22 L1587.68 1212.22 L1587.1 1212.22 L1586.51 1212.22 L1585.93 1212.22 L1585.34 1212.22 L1584.75 1212.22 L1584.17 1212.22 L1583.58 1212.22 L1582.99 1212.22 L1582.41 1212.22 L1581.82 1212.22 L1581.23 1212.22 L1580.65 1212.22 L1580.06 1212.22 L1579.47 1212.22 L1578.89 1212.22 L1578.3 1212.22 L1577.72 1212.22 L1577.13 1212.22 L1576.54 1212.22 L1575.96 1212.22 L1575.37 1212.22 L1574.78 1212.22 L1574.2 1212.22 L1573.61 1212.22 L1573.02 1212.22 L1572.44 1212.22 L1571.85 1212.22 L1571.27 1212.22 L1570.68 1212.22 L1570.09 1212.22 L1569.51 1212.22 L1568.92 1212.22 L1568.33 1212.22 L1567.75 1212.22 L1567.16 1212.22 L1566.57 1212.22 L1565.99 1212.22 L1565.4 1212.22 L1564.81 1212.22 L1564.23 1212.22 L1563.64 1212.22 L1563.06 1212.22 L1562.47 1212.22 L1561.88 1212.22 L1561.3 1212.22 L1560.71 1212.22 L1560.12 1212.22 L1559.54 1212.22 L1558.95 1212.22 L1558.36 1212.22 L1557.78 1212.22 L1557.19 1212.22 L1556.6 1212.22 L1556.02 1212.22 L1555.43 1212.22 L1554.85 1212.22 L1554.26 1212.22 L1553.67 1212.22 L1553.09 1212.22 L1552.5 1212.22 L1551.91 1212.22 L1551.33 1212.22 L1550.74 1212.22 L1550.15 1212.22 L1549.57 1212.22 L1548.98 1212.22 L1548.4 1212.22 L1547.81 1212.22 L1547.22 1212.22 L1546.64 1212.22 L1546.05 1212.22 L1545.46 1212.22 L1544.88 1212.22 L1544.29 1212.22 L1543.7 1212.22 L1543.12 1212.22 L1542.53 1212.22 L1541.94 1212.22 L1541.36 1212.22 L1540.77 1212.22 L1540.19 1212.22 L1539.6 1212.22 L1539.01 1212.22 L1538.43 1212.22 L1537.84 1212.22 L1537.25 1212.22 L1536.67 1212.22 L1536.08 1212.22 L1535.49 1212.22 L1534.91 1212.22 L1534.32 1212.22 L1533.73 1212.22 L1533.15 1212.22 L1532.56 1212.22 L1531.98 1212.22 L1531.39 1212.22 L1530.8 1212.22 L1530.22 1212.22 L1529.63 1212.22 L1529.04 1212.22 L1528.46 1212.22 L1527.87 1212.22 L1527.28 1212.22 L1526.7 1212.22 L1526.11 1212.22 L1525.52 1212.22 L1524.94 1212.22 L1524.35 1212.22 L1523.77 1212.22 L1523.18 1212.22 L1522.59 1212.22 L1522.01 1212.22 L1521.42 1212.22 L1520.83 1212.22 L1520.25 1212.22 L1519.66 1212.22 L1519.07 1212.22 L1518.49 1212.22 L1517.9 1212.22 L1517.32 1212.22 L1516.73 1212.22 L1516.14 1212.22 L1515.56 1212.22 L1514.97 1212.22 L1514.38 1212.22 L1513.8 1212.22 L1513.21 1212.22 L1512.62 1212.22 L1512.04 1212.22 L1511.45 1212.22 L1510.86 1212.22 L1510.28 1212.22 L1509.69 1212.22 L1509.11 1212.22 L1508.52 1212.22 L1507.93 1212.22 L1507.35 1212.22 L1506.76 1212.22 L1506.17 1212.22 L1505.59 1212.22 L1505 1212.22 L1504.41 1212.22 L1503.83 1212.22 L1503.24 1212.22 L1502.65 1212.22 L1502.07 1212.22 L1501.48 1212.22 L1500.9 1212.22 L1500.31 1212.22 L1499.72 1212.22 L1499.14 1212.22 L1498.55 1212.22 L1497.96 1212.22 L1497.38 1212.22 L1496.79 1212.22 L1496.2 1212.22 L1495.62 1212.22 L1495.03 1212.22 L1494.45 1212.22 L1493.86 1212.22 L1493.27 1212.22 L1492.69 1212.22 L1492.1 1212.22 L1491.51 1212.22 L1490.93 1212.22 L1490.34 1212.22 L1489.75 1212.22 L1489.17 1212.22 L1488.58 1212.22 L1487.99 1212.22 L1487.41 1212.22 L1486.82 1212.22 L1486.24 1212.22 L1485.65 1212.22 L1485.06 1212.22 L1484.48 1212.22 L1483.89 1212.22 L1483.3 1212.22 L1482.72 1212.22 L1482.13 1212.22 L1481.54 1212.22 L1480.96 1212.22 L1480.37 1212.22 L1479.78 1212.22 L1479.2 1212.22 L1478.61 1212.22 L1478.03 1212.22 L1477.44 1212.22 L1476.85 1212.22 L1476.27 1212.22 L1475.68 1212.22 L1475.09 1212.22 L1474.51 1212.22 L1473.92 1212.22 L1473.33 1212.22 L1472.75 1212.22 L1472.16 1212.22 L1471.57 1212.22 L1470.99 1212.22 L1470.4 1212.22 L1469.82 1212.22 L1469.23 1212.22 L1468.64 1212.22 L1468.06 1212.22 L1467.47 1212.22 L1466.88 1212.22 L1466.3 1212.22 L1465.71 1212.22 L1465.12 1212.22 L1464.54 1212.22 L1463.95 1212.22 L1463.37 1212.22 L1462.78 1212.22 L1462.19 1212.22 L1461.61 1212.22 L1461.02 1212.22 L1460.43 1212.22 L1459.85 1212.22 L1459.26 1212.22 L1458.67 1212.22 L1458.09 1212.22 L1457.5 1212.22 L1456.91 1212.22 L1456.33 1212.22 L1455.74 1212.22 L1455.16 1212.22 L1454.57 1212.22 L1453.98 1212.22 L1453.4 1212.22 L1452.81 1212.22 L1452.22 1212.22 L1451.64 1212.22 L1451.05 1212.22 L1450.46 1212.22 L1449.88 1212.22 L1449.29 1212.22 L1448.7 1212.22 L1448.12 1212.22 L1447.53 1212.22 L1446.95 1212.22 L1446.36 1212.22 L1445.77 1212.22 L1445.19 1212.22 L1444.6 1212.22 L1444.01 1212.22 L1443.43 1212.22 L1442.84 1212.22 L1442.25 1212.22 L1441.67 1212.22 L1441.08 1212.22 L1440.5 1212.22 L1439.91 1212.22 L1439.32 1212.22 L1438.74 1212.22 L1438.15 1212.22 L1437.56 1212.22 L1436.98 1212.22 L1436.39 1212.22 L1435.8 1212.22 L1435.22 1212.22 L1434.63 1212.22 L1434.04 1212.22 L1433.46 1212.22 L1432.87 1212.22 L1432.29 1212.22 L1431.7 1212.22 L1431.11 1212.22 L1430.53 1212.22 L1429.94 1212.22 L1429.35 1212.22 L1428.77 1212.22 L1428.18 1212.22 L1427.59 1212.22 L1427.01 1212.22 L1426.42 1212.22 L1425.83 1212.22 L1425.25 1212.22 L1424.66 1212.22 L1424.08 1212.22 L1423.49 1212.22 L1422.9 1212.22 L1422.32 1212.22 L1421.73 1212.22 L1421.14 1212.22 L1420.56 1212.22 L1419.97 1212.22 L1419.38 1212.22 L1418.8 1212.22 L1418.21 1212.22 L1417.63 1212.22 L1417.04 1212.22 L1416.45 1212.22 L1415.87 1212.22 L1415.28 1212.22 L1414.69 1212.22 L1414.11 1212.22 L1413.52 1212.22 L1412.93 1212.22 L1412.35 1212.22 L1411.76 1212.22 L1411.17 1212.22 L1410.59 1212.22 L1410 1212.22 L1409.42 1212.22 L1408.83 1212.22 L1408.24 1212.22 L1407.66 1212.22 L1407.07 1212.22 L1406.48 1212.22 L1405.9 1212.22 L1405.31 1212.22 L1404.72 1212.22 L1404.14 1212.22 L1403.55 1212.22 L1402.96 1212.22 L1402.38 1212.22 L1401.79 1212.22 L1401.21 1212.22 L1400.62 1212.22 L1400.03 1212.22 L1399.45 1212.22 L1398.86 1212.22 L1398.27 1212.22 L1397.69 1212.22 L1397.1 1212.22 L1396.51 1212.22 L1395.93 1212.22 L1395.34 1212.22 L1394.75 1212.22 L1394.17 1212.22 L1393.58 1212.22 L1393 1212.22 L1392.41 1212.22 L1391.82 1212.22 L1391.24 1212.22 L1390.65 1212.22 L1390.06 1212.22 L1389.48 1212.22 L1388.89 1212.22 L1388.3 1212.22 L1387.72 1212.22 L1387.13 1212.22 L1386.55 1212.22 L1385.96 1212.22 L1385.37 1212.22 L1384.79 1212.22 L1384.2 1212.22 L1383.61 1212.22 L1383.03 1212.22 L1382.44 1212.22 L1381.85 1212.22 L1381.27 1212.22 L1380.68 1212.22 L1380.09 1212.22 L1379.51 1212.22 L1378.92 1212.22 L1378.34 1212.22 L1377.75 1212.22 L1377.16 1212.22 L1376.58 1212.22 L1375.99 1212.22 L1375.4 1212.22 L1374.82 1212.22 L1374.23 1212.22 L1373.64 1212.22 L1373.06 1212.22 L1372.47 1212.22 L1371.88 1212.22 L1371.3 1212.22 L1370.71 1212.22 L1370.13 1212.22 L1369.54 1212.22 L1368.95 1212.22 L1368.37 1212.22 L1367.78 1212.22 L1367.19 1212.22 L1366.61 1212.22 L1366.02 1212.22 L1365.43 1212.22 L1364.85 1212.22 L1364.26 1212.22 L1363.68 1212.22 L1363.09 1212.22 L1362.5 1212.22 L1361.92 1212.22 L1361.33 1212.22 L1360.74 1212.22 L1360.16 1212.22 L1359.57 1212.22 L1358.98 1212.22 L1358.4 1212.22 L1357.81 1212.22 L1357.22 1212.22 L1356.64 1212.22 L1356.05 1212.22 L1355.47 1212.22 L1354.88 1212.22 L1354.29 1212.22 L1353.71 1212.22 L1353.12 1212.22 L1352.53 1212.22 L1351.95 1212.22 L1351.36 1212.22 L1350.77 1212.22 L1350.19 1212.22 L1349.6 1212.22 L1349.01 1212.22 L1348.43 1212.22 L1347.84 1212.22 L1347.26 1212.22 L1346.67 1212.22 L1346.08 1212.22 L1345.5 1212.22 L1344.91 1212.22 L1344.32 1212.22 L1343.74 1212.22 L1343.15 1212.22 L1342.56 1212.22 L1341.98 1212.22 L1341.39 1212.22 L1340.8 1212.22 L1340.22 1212.22 L1339.63 1212.22 L1339.05 1212.22 L1338.46 1212.22 L1337.87 1212.22 L1337.29 1212.22 L1336.7 1212.22 L1336.11 1212.22 L1335.53 1212.22 L1334.94 1212.22 L1334.35 1212.22 L1333.77 1212.22 L1333.18 1212.22 L1332.6 1212.22 L1332.01 1212.22 L1331.42 1212.22 L1330.84 1212.22 L1330.25 1212.22 L1329.66 1212.22 L1329.08 1212.22 L1328.49 1212.22 L1327.9 1212.22 L1327.32 1212.22 L1326.73 1212.22 L1326.14 1212.22 L1325.56 1212.22 L1324.97 1212.22 L1324.39 1212.22 L1323.8 1212.22 L1323.21 1212.22 L1322.63 1212.22 L1322.04 1212.22 L1321.45 1212.22 L1320.87 1212.22 L1320.28 1212.22 L1319.69 1212.22 L1319.11 1212.22 L1318.52 1212.22 L1317.93 1212.22 L1317.35 1212.22 L1316.76 1212.22 L1316.18 1212.22 L1315.59 1212.22 L1315 1212.22 L1314.42 1212.22 L1313.83 1212.22 L1313.24 1212.22 L1312.66 1212.22 L1312.07 1212.22 L1311.48 1212.22 L1310.9 1212.22 L1310.31 1212.22 L1309.73 1212.22 L1309.14 1212.22 L1308.55 1212.22 L1307.97 1212.22 L1307.38 1212.22 L1306.79 1212.22 L1306.21 1212.22 L1305.62 1212.22 L1305.03 1212.22 L1304.45 1212.22 L1303.86 1212.22 L1303.27 1212.22 L1302.69 1212.22 L1302.1 1212.22 L1301.52 1212.22 L1300.93 1212.22 L1300.34 1212.22 L1299.76 1212.22 L1299.17 1212.22 L1298.58 1212.22 L1298 1212.22 L1297.41 1212.22 L1296.82 1212.22 L1296.24 1212.22 L1295.65 1212.22 L1295.06 1212.22 L1294.48 1212.22 L1293.89 1212.22 L1293.31 1212.22 L1292.72 1212.22 L1292.13 1212.22 L1291.55 1212.22 L1290.96 1212.22 L1290.37 1212.22 L1289.79 1212.22 L1289.2 1212.22 L1288.61 1212.22 L1288.03 1212.22 L1287.44 1212.22 L1286.86 1212.22 L1286.27 1212.22 L1285.68 1212.22 L1285.1 1212.22 L1284.51 1212.22 L1283.92 1212.22 L1283.34 1212.22 L1282.75 1212.22 L1282.16 1212.22 L1281.58 1212.22 L1280.99 1212.22 L1280.4 1212.22 L1279.82 1212.22 L1279.23 1212.22 L1278.65 1212.22 L1278.06 1212.22 L1277.47 1212.22 L1276.89 1212.22 L1276.3 1212.22 L1275.71 1212.22 L1275.13 1212.22 L1274.54 1212.22 L1273.95 1212.22 L1273.37 1212.22 L1272.78 1212.22 L1272.19 1212.22 L1271.61 1212.22 L1271.02 1212.22 L1270.44 1212.22 L1269.85 1212.22 L1269.26 1212.22 L1268.68 1212.22 L1268.09 1212.22 L1267.5 1212.22 L1266.92 1212.22 L1266.33 1212.22 L1265.74 1212.22 L1265.16 1212.22 L1264.57 1212.22 L1263.98 1212.22 L1263.4 1212.22 L1262.81 1212.22 L1262.23 1212.22 L1261.64 1212.22 L1261.05 1212.22 L1260.47 1212.22 L1259.88 1212.22 L1259.29 1212.22 L1258.71 1212.22 L1258.12 1212.22 L1257.53 1212.22 L1256.95 1212.22 L1256.36 1212.22 L1255.78 1212.22 L1255.19 1212.22 L1254.6 1212.22 L1254.02 1212.22 L1253.43 1212.22 L1252.84 1212.22 L1252.26 1212.22 L1251.67 1212.22 L1251.08 1212.22 L1250.5 1212.22 L1249.91 1212.22 L1249.32 1212.22 L1248.74 1212.22 L1248.15 1212.22 L1247.57 1212.22 L1246.98 1212.22 L1246.39 1212.22 L1245.81 1212.22 L1245.22 1212.22 L1244.63 1212.22 L1244.05 1212.22 L1243.46 1212.22 L1242.87 1212.22 L1242.29 1212.22 L1241.7 1212.22 L1241.11 1212.22 L1240.53 1212.22 L1239.94 1212.22 L1239.36 1212.22 L1238.77 1212.22 L1238.18 1212.22 L1237.6 1212.22 L1237.01 1212.22 L1236.42 1212.22 L1235.84 1212.22 L1235.25 1212.22 L1234.66 1212.22 L1234.08 1212.22 L1233.49 1212.22 L1232.91 1212.22 L1232.32 1212.22 L1231.73 1212.22 L1231.15 1212.22 L1230.56 1212.22 L1229.97 1212.22 L1229.39 1212.22 L1228.8 1212.22 L1228.21 1212.22 L1227.63 1212.22 L1227.04 1212.22 L1226.45 1212.22 L1225.87 1212.22 L1225.28 1212.22 L1224.7 1212.22 L1224.11 1212.22 L1223.52 1212.22 L1222.94 1212.22 L1222.35 1212.22 L1221.76 1212.22 L1221.18 1212.22 L1220.59 1212.22 L1220 1212.22 L1219.42 1212.22 L1218.83 1212.22 L1218.24 1212.22 L1217.66 1212.22 L1217.07 1212.22 L1216.49 1212.22 L1215.9 1212.22 L1215.31 1212.22 L1214.73 1212.22 L1214.14 1212.22 L1213.55 1212.22 L1212.97 1212.22 L1212.38 1212.22 L1211.79 1212.22 L1211.21 1212.22 L1210.62 1212.22 L1210.03 1212.22 L1209.45 1212.22 L1208.86 1212.22 L1208.28 1212.22 L1207.69 1212.22 L1207.1 1212.22 L1206.52 1212.22 L1205.93 1212.22 L1205.34 1212.22 L1204.76 1212.22 L1204.17 1212.22 L1203.58 1212.22 L1203 1212.22 L1202.41 1212.22 L1201.83 1212.22 L1201.24 1212.22 L1200.65 1212.22 L1200.07 1212.22 L1199.48 1212.22 L1198.89 1212.22 L1198.31 1212.22 L1197.72 1212.22 L1197.13 1212.22 L1196.55 1212.22 L1195.96 1212.22 L1195.37 1212.22 L1194.79 1212.22 L1194.2 1212.22 L1193.62 1212.22 L1193.03 1212.22 L1192.44 1212.22 L1191.86 1212.22 L1191.27 1212.22 L1190.68 1212.22 L1190.1 1212.22 L1189.51 1212.22 L1188.92 1212.22 L1188.34 1212.22 L1187.75 1212.22 L1187.16 1212.22 L1186.58 1212.22 L1185.99 1212.22 L1185.41 1212.22 L1184.82 1212.22 L1184.23 1212.22 L1183.65 1212.22 L1183.06 1212.22 L1182.47 1212.22 L1181.89 1212.22 L1181.3 1212.22 L1180.71 1212.22 L1180.13 1212.22 L1179.54 1212.22 L1178.96 1212.22 L1178.37 1212.22 L1177.78 1212.22 L1177.2 1212.22 L1176.61 1212.22 L1176.02 1212.22 L1175.44 1212.22 L1174.85 1212.22 L1174.26 1212.22 L1173.68 1212.22 L1173.09 1212.22 L1172.5 1212.22 L1171.92 1212.22 L1171.33 1212.22 L1170.75 1212.22 L1170.16 1212.22 L1169.57 1212.22 L1168.99 1212.22 L1168.4 1212.22 L1167.81 1212.22 L1167.23 1212.22 L1166.64 1212.22 L1166.05 1212.22 L1165.47 1212.22 L1164.88 1212.22 L1164.29 1212.22 L1163.71 1212.22 L1163.12 1212.22 L1162.54 1212.22 L1161.95 1212.22 L1161.36 1212.22 L1160.78 1212.22 L1160.19 1212.22 L1159.6 1212.22 L1159.02 1212.22 L1158.43 1212.22 L1157.84 1212.22 L1157.26 1212.22 L1156.67 1212.22 L1156.09 1212.22 L1155.5 1212.22 L1154.91 1212.22 L1154.33 1212.22 L1153.74 1212.22 L1153.15 1212.22 L1152.57 1212.22 L1151.98 1212.22 L1151.39 1212.22 L1150.81 1212.22 L1150.22 1212.22 L1149.63 1212.22 L1149.05 1212.22 L1148.46 1212.22 L1147.88 1212.22 L1147.29 1212.22 L1146.7 1212.22 L1146.12 1212.22 L1145.53 1212.22 L1144.94 1212.22 L1144.36 1212.22 L1143.77 1212.22 L1143.18 1212.22 L1142.6 1212.22 L1142.01 1212.22 L1141.42 1212.22 L1140.84 1212.22 L1140.25 1212.22 L1139.67 1212.22 L1139.08 1212.22 L1138.49 1212.22 L1137.91 1212.22 L1137.32 1212.22 L1136.73 1212.22 L1136.15 1212.22 L1135.56 1212.22 L1134.97 1212.22 L1134.39 1212.22 L1133.8 1212.22 L1133.21 1212.22 L1132.63 1212.22 L1132.04 1212.22 L1131.46 1212.22 L1130.87 1212.22 L1130.28 1212.22 L1129.7 1212.22 L1129.11 1212.22 L1128.52 1212.22 L1127.94 1212.22 L1127.35 1212.22 L1126.76 1212.22 L1126.18 1212.22 L1125.59 1212.22 L1125.01 1212.22 L1124.42 1212.22 L1123.83 1212.22 L1123.25 1212.22 L1122.66 1212.22 L1122.07 1212.22 L1121.49 1212.22 L1120.9 1212.22 L1120.31 1212.22 L1119.73 1212.22 L1119.14 1212.22 L1118.55 1212.22 L1117.97 1212.22 L1117.38 1212.22 L1116.8 1212.22 L1116.21 1212.22 L1115.62 1212.22 L1115.04 1212.22 L1114.45 1212.22 L1113.86 1212.22 L1113.28 1212.22 L1112.69 1212.22 L1112.1 1212.22 L1111.52 1212.22 L1110.93 1212.22 L1110.34 1212.22 L1109.76 1212.22 L1109.17 1212.22 L1108.59 1212.22 L1108 1212.22 L1107.41 1212.22 L1106.83 1212.22 L1106.24 1212.22 L1105.65 1212.22 L1105.07 1212.22 L1104.48 1212.22 L1103.89 1212.22 L1103.31 1212.22 L1102.72 1212.22 L1102.14 1212.22 L1101.55 1212.22 L1100.96 1212.22 L1100.38 1212.22 L1099.79 1212.22 L1099.2 1212.22 L1098.62 1212.22 L1098.03 1212.22 L1097.44 1212.22 L1096.86 1212.22 L1096.27 1212.22 L1095.68 1212.22 L1095.1 1212.22 L1094.51 1212.22 L1093.93 1212.22 L1093.34 1212.22 L1092.75 1212.22 L1092.17 1212.22 L1091.58 1212.22 L1090.99 1212.22 L1090.41 1212.22 L1089.82 1212.22 L1089.23 1212.22 L1088.65 1212.22 L1088.06 1212.22 L1087.47 1212.22 L1086.89 1212.22 L1086.3 1212.22 L1085.72 1212.22 L1085.13 1212.22 L1084.54 1212.22 L1083.96 1212.22 L1083.37 1212.22 L1082.78 1212.22 L1082.2 1212.22 L1081.61 1212.22 L1081.02 1212.22 L1080.44 1212.22 L1079.85 1212.22 L1079.26 1212.22 L1078.68 1212.22 L1078.09 1212.22 L1077.51 1212.22 L1076.92 1212.22 L1076.33 1212.22 L1075.75 1212.22 L1075.16 1212.22 L1074.57 1212.22 L1073.99 1212.22 L1073.4 1212.22 L1072.81 1212.22 L1072.23 1212.22 L1071.64 1212.22 L1071.06 1212.22 L1070.47 1212.22 L1069.88 1212.22 L1069.3 1212.22 L1068.71 1212.22 L1068.12 1212.22 L1067.54 1212.22 L1066.95 1212.22 L1066.36 1212.22 L1065.78 1212.22 L1065.19 1212.22 L1064.6 1212.22 L1064.02 1212.22 L1063.43 1212.22 L1062.85 1212.22 L1062.26 1212.22 L1061.67 1212.22 L1061.09 1212.22 L1060.5 1212.22 L1059.91 1212.22 L1059.33 1212.22 L1058.74 1212.22 L1058.15 1212.22 L1057.57 1212.22 L1056.98 1212.22 L1056.39 1212.22 L1055.81 1212.22 L1055.22 1212.22 L1054.64 1212.22 L1054.05 1212.22 L1053.46 1212.22 L1052.88 1212.22 L1052.29 1212.22 L1051.7 1212.22 L1051.12 1212.22 L1050.53 1212.22 L1049.94 1212.22 L1049.36 1212.22 L1048.77 1212.22 L1048.19 1212.22 L1047.6 1212.22 L1047.01 1212.22 L1046.43 1212.22 L1045.84 1212.22 L1045.25 1212.22 L1044.67 1212.22 L1044.08 1212.22 L1043.49 1212.22 L1042.91 1212.22 L1042.32 1212.22 L1041.73 1212.22 L1041.15 1212.22 L1040.56 1212.22 L1039.98 1212.22 L1039.39 1212.22 L1038.8 1212.22 L1038.22 1212.22 L1037.63 1212.22 L1037.04 1212.22 L1036.46 1212.22 L1035.87 1212.22 L1035.28 1212.22 L1034.7 1212.22 L1034.11 1212.22 L1033.52 1212.22 L1032.94 1212.22 L1032.35 1212.22 L1031.77 1212.22 L1031.18 1212.22 L1030.59 1212.22 L1030.01 1212.22 L1029.42 1212.22 L1028.83 1212.22 L1028.25 1212.22 L1027.66 1212.22 L1027.07 1212.22 L1026.49 1212.22 L1025.9 1212.22 L1025.32 1212.22 L1024.73 1212.22 L1024.14 1212.22 L1023.56 1212.22 L1022.97 1212.22 L1022.38 1212.22 L1021.8 1212.22 L1021.21 1212.22 L1020.62 1212.22 L1020.04 1212.22 L1019.45 1212.22 L1018.86 1212.22 L1018.28 1212.22 L1017.69 1212.22 L1017.11 1212.22 L1016.52 1212.22 L1015.93 1212.22 L1015.35 1212.22 L1014.76 1212.22 L1014.17 1212.22 L1013.59 1212.22 L1013 1212.22 L1012.41 1212.22 L1011.83 1212.22 L1011.24 1212.22 L1010.65 1212.22 L1010.07 1212.22 L1009.48 1212.22 L1008.9 1212.22 L1008.31 1212.22 L1007.72 1212.22 L1007.14 1212.22 L1006.55 1212.22 L1005.96 1212.22 L1005.38 1212.22 L1004.79 1212.22 L1004.2 1212.22 L1003.62 1212.22 L1003.03 1212.22 L1002.44 1212.22 L1001.86 1212.22 L1001.27 1212.22 L1000.69 1212.22 L1000.1 1212.22 L999.513 1212.22 L998.926 1212.22 L998.34 1212.22 L997.754 1212.22 L997.167 1212.22 L996.581 1212.22 L995.994 1212.22 L995.408 1212.22 L994.822 1212.22 L994.235 1212.22 L993.649 1212.22 L993.062 1212.22 L992.476 1212.22 L991.889 1212.22 L991.303 1212.22 L990.717 1212.22 L990.13 1212.22 L989.544 1212.22 L988.957 1212.22 L988.371 1212.22 L987.785 1212.22 L987.198 1212.22 L986.612 1212.22 L986.025 1212.22  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.56 986.612,1212.56 987.198,1212.56 987.785,1212.56 988.371,1212.56 988.957,1212.56 989.544,1212.56 990.13,1212.56 990.717,1212.56 991.303,1212.56 991.889,1212.56 992.476,1212.56 993.062,1212.56 993.649,1212.56 994.235,1212.56 994.822,1212.56 995.408,1212.56 995.994,1212.56 996.581,1212.56 997.167,1212.56 997.754,1212.56 998.34,1212.56 998.926,1212.56 999.513,1212.56 1000.1,1212.56 1000.69,1212.56 1001.27,1212.56 1001.86,1212.56 1002.44,1212.56 1003.03,1212.56 1003.62,1212.56 1004.2,1212.56 1004.79,1212.56 1005.38,1212.56 1005.96,1212.56 1006.55,1212.56 1007.14,1212.56 1007.72,1212.56 1008.31,1212.56 1008.9,1212.56 1009.48,1212.56 1010.07,1212.56 1010.65,1212.56 1011.24,1212.56 1011.83,1212.56 1012.41,1212.56 1013,1212.56 1013.59,1212.56 1014.17,1212.56 1014.76,1212.56 1015.35,1212.56 1015.93,1212.56 1016.52,1212.56 1017.11,1212.56 1017.69,1212.56 1018.28,1212.56 1018.86,1212.56 1019.45,1212.56 1020.04,1212.56 1020.62,1212.56 1021.21,1212.56 1021.8,1212.56 1022.38,1212.56 1022.97,1212.56 1023.56,1212.56 1024.14,1212.56 1024.73,1212.56 1025.32,1212.56 1025.9,1212.56 1026.49,1212.56 1027.07,1212.56 1027.66,1212.56 1028.25,1212.56 1028.83,1212.56 1029.42,1212.56 1030.01,1212.56 1030.59,1212.56 1031.18,1212.56 1031.77,1212.56 1032.35,1212.56 1032.94,1212.56 1033.52,1212.56 1034.11,1212.56 1034.7,1212.56 1035.28,1212.56 1035.87,1212.56 1036.46,1212.56 1037.04,1212.56 1037.63,1212.56 1038.22,1212.56 1038.8,1212.56 1039.39,1212.56 1039.98,1212.56 1040.56,1212.56 1041.15,1212.56 1041.73,1212.56 1042.32,1212.56 1042.91,1212.56 1043.49,1212.56 1044.08,1212.56 1044.67,1212.56 1045.25,1212.56 1045.84,1212.56 1046.43,1212.56 1047.01,1212.56 1047.6,1212.56 1048.19,1212.56 1048.77,1212.56 1049.36,1212.56 1049.94,1212.56 1050.53,1212.56 1051.12,1212.56 1051.7,1212.56 1052.29,1212.56 1052.88,1212.56 1053.46,1212.56 1054.05,1212.56 1054.64,1212.56 1055.22,1212.56 1055.81,1212.56 1056.39,1212.56 1056.98,1212.56 1057.57,1212.56 1058.15,1212.56 1058.74,1212.56 1059.33,1212.56 1059.91,1212.56 1060.5,1212.56 1061.09,1212.56 1061.67,1212.56 1062.26,1212.56 1062.85,1212.56 1063.43,1212.56 1064.02,1212.56 1064.6,1212.56 1065.19,1212.56 1065.78,1212.56 1066.36,1212.56 1066.95,1212.56 1067.54,1212.56 1068.12,1212.56 1068.71,1212.56 1069.3,1212.56 1069.88,1212.56 1070.47,1212.56 1071.06,1212.56 1071.64,1212.56 1072.23,1212.56 1072.81,1212.56 1073.4,1212.56 1073.99,1212.56 1074.57,1212.56 1075.16,1212.56 1075.75,1212.56 1076.33,1212.56 1076.92,1212.56 1077.51,1212.56 1078.09,1212.56 1078.68,1212.56 1079.26,1212.56 1079.85,1212.56 1080.44,1212.56 1081.02,1212.56 1081.61,1212.56 1082.2,1212.56 1082.78,1212.56 1083.37,1212.56 1083.96,1212.56 1084.54,1212.56 1085.13,1212.56 1085.72,1212.56 1086.3,1212.56 1086.89,1212.56 1087.47,1212.56 1088.06,1212.56 1088.65,1212.56 1089.23,1212.56 1089.82,1212.56 1090.41,1212.56 1090.99,1212.56 1091.58,1212.56 1092.17,1212.56 1092.75,1212.56 1093.34,1212.56 1093.93,1212.56 1094.51,1212.56 1095.1,1212.56 1095.68,1212.56 1096.27,1212.56 1096.86,1212.56 1097.44,1212.56 1098.03,1212.56 1098.62,1212.56 1099.2,1212.56 1099.79,1212.56 1100.38,1212.56 1100.96,1212.56 1101.55,1212.56 1102.14,1212.56 1102.72,1212.56 1103.31,1212.56 1103.89,1212.56 1104.48,1212.56 1105.07,1212.56 1105.65,1212.56 1106.24,1212.56 1106.83,1212.56 1107.41,1212.56 1108,1212.56 1108.59,1212.56 1109.17,1212.56 1109.76,1212.56 1110.34,1212.56 1110.93,1212.56 1111.52,1212.56 1112.1,1212.56 1112.69,1212.56 1113.28,1212.56 1113.86,1212.56 1114.45,1212.56 1115.04,1212.56 1115.62,1212.56 1116.21,1212.56 1116.8,1212.56 1117.38,1212.56 1117.97,1212.56 1118.55,1212.56 1119.14,1212.56 1119.73,1212.56 1120.31,1212.56 1120.9,1212.56 1121.49,1212.56 1122.07,1212.56 1122.66,1212.56 1123.25,1212.56 1123.83,1212.56 1124.42,1212.56 1125.01,1212.56 1125.59,1212.56 1126.18,1212.56 1126.76,1212.56 1127.35,1212.56 1127.94,1212.56 1128.52,1212.56 1129.11,1212.56 1129.7,1212.56 1130.28,1212.56 1130.87,1212.56 1131.46,1212.56 1132.04,1212.56 1132.63,1212.56 1133.21,1212.56 1133.8,1212.56 1134.39,1212.56 1134.97,1212.56 1135.56,1212.56 1136.15,1212.56 1136.73,1212.56 1137.32,1212.56 1137.91,1212.56 1138.49,1212.56 1139.08,1212.56 1139.67,1212.56 1140.25,1212.56 1140.84,1212.56 1141.42,1212.56 1142.01,1212.56 1142.6,1212.56 1143.18,1212.56 1143.77,1212.56 1144.36,1212.56 1144.94,1212.56 1145.53,1212.56 1146.12,1212.56 1146.7,1212.56 1147.29,1212.56 1147.88,1212.56 1148.46,1212.56 1149.05,1212.56 1149.63,1212.56 1150.22,1212.56 1150.81,1212.56 1151.39,1212.56 1151.98,1212.56 1152.57,1212.56 1153.15,1212.56 1153.74,1212.56 1154.33,1212.56 1154.91,1212.56 1155.5,1212.56 1156.09,1212.56 1156.67,1212.56 1157.26,1212.56 1157.84,1212.56 1158.43,1212.56 1159.02,1212.56 1159.6,1212.56 1160.19,1212.56 1160.78,1212.56 1161.36,1212.56 1161.95,1212.56 1162.54,1212.56 1163.12,1212.56 1163.71,1212.56 1164.29,1212.56 1164.88,1212.56 1165.47,1212.56 1166.05,1212.56 1166.64,1212.56 1167.23,1212.56 1167.81,1212.56 1168.4,1212.56 1168.99,1212.56 1169.57,1212.56 1170.16,1212.56 1170.75,1212.56 1171.33,1212.56 1171.92,1212.56 1172.5,1212.56 1173.09,1212.56 1173.68,1212.56 1174.26,1212.56 1174.85,1212.56 1175.44,1212.56 1176.02,1212.56 1176.61,1212.56 1177.2,1212.56 1177.78,1212.56 1178.37,1212.56 1178.96,1212.56 1179.54,1212.56 1180.13,1212.56 1180.71,1212.56 1181.3,1212.56 1181.89,1212.56 1182.47,1212.56 1183.06,1212.56 1183.65,1212.56 1184.23,1212.56 1184.82,1212.56 1185.41,1212.56 1185.99,1212.56 1186.58,1212.56 1187.16,1212.56 1187.75,1212.56 1188.34,1212.56 1188.92,1212.56 1189.51,1212.56 1190.1,1212.56 1190.68,1212.56 1191.27,1212.56 1191.86,1212.56 1192.44,1212.56 1193.03,1212.56 1193.62,1212.56 1194.2,1212.56 1194.79,1212.56 1195.37,1212.56 1195.96,1212.56 1196.55,1212.56 1197.13,1212.56 1197.72,1212.56 1198.31,1212.56 1198.89,1212.56 1199.48,1212.56 1200.07,1212.56 1200.65,1212.56 1201.24,1212.56 1201.83,1212.56 1202.41,1212.56 1203,1212.56 1203.58,1212.56 1204.17,1212.56 1204.76,1212.56 1205.34,1212.56 1205.93,1212.56 1206.52,1212.56 1207.1,1212.56 1207.69,1212.56 1208.28,1212.56 1208.86,1212.56 1209.45,1212.56 1210.03,1212.56 1210.62,1212.56 1211.21,1212.56 1211.79,1212.56 1212.38,1212.56 1212.97,1212.56 1213.55,1212.56 1214.14,1212.56 1214.73,1212.56 1215.31,1212.56 1215.9,1212.56 1216.49,1212.56 1217.07,1212.56 1217.66,1212.56 1218.24,1212.56 1218.83,1212.56 1219.42,1212.56 1220,1212.56 1220.59,1212.56 1221.18,1212.56 1221.76,1212.56 1222.35,1212.56 1222.94,1212.56 1223.52,1212.56 1224.11,1212.56 1224.7,1212.56 1225.28,1212.56 1225.87,1212.56 1226.45,1212.56 1227.04,1212.56 1227.63,1212.56 1228.21,1212.56 1228.8,1212.56 1229.39,1212.56 1229.97,1212.56 1230.56,1212.56 1231.15,1212.56 1231.73,1212.56 1232.32,1212.56 1232.91,1212.56 1233.49,1212.56 1234.08,1212.56 1234.66,1212.56 1235.25,1212.56 1235.84,1212.56 1236.42,1212.56 1237.01,1212.56 1237.6,1212.56 1238.18,1212.56 1238.77,1212.56 1239.36,1212.56 1239.94,1212.56 1240.53,1212.56 1241.11,1212.56 1241.7,1212.56 1242.29,1212.56 1242.87,1212.56 1243.46,1212.56 1244.05,1212.56 1244.63,1212.56 1245.22,1212.56 1245.81,1212.56 1246.39,1212.56 1246.98,1212.56 1247.57,1212.56 1248.15,1212.56 1248.74,1212.56 1249.32,1212.56 1249.91,1212.56 1250.5,1212.56 1251.08,1212.56 1251.67,1212.56 1252.26,1212.56 1252.84,1212.56 1253.43,1212.56 1254.02,1212.56 1254.6,1212.56 1255.19,1212.56 1255.78,1212.56 1256.36,1212.56 1256.95,1212.56 1257.53,1212.56 1258.12,1212.56 1258.71,1212.56 1259.29,1212.56 1259.88,1212.56 1260.47,1212.56 1261.05,1212.56 1261.64,1212.56 1262.23,1212.56 1262.81,1212.56 1263.4,1212.56 1263.98,1212.56 1264.57,1212.56 1265.16,1212.56 1265.74,1212.56 1266.33,1212.56 1266.92,1212.56 1267.5,1212.56 1268.09,1212.56 1268.68,1212.56 1269.26,1212.56 1269.85,1212.56 1270.44,1212.56 1271.02,1212.56 1271.61,1212.56 1272.19,1212.56 1272.78,1212.56 1273.37,1212.56 1273.95,1212.56 1274.54,1212.56 1275.13,1212.56 1275.71,1212.56 1276.3,1212.56 1276.89,1212.56 1277.47,1212.56 1278.06,1212.56 1278.65,1212.56 1279.23,1212.56 1279.82,1212.56 1280.4,1212.56 1280.99,1212.56 1281.58,1212.56 1282.16,1212.56 1282.75,1212.56 1283.34,1212.56 1283.92,1212.56 1284.51,1212.56 1285.1,1212.56 1285.68,1212.56 1286.27,1212.56 1286.86,1212.56 1287.44,1212.56 1288.03,1212.56 1288.61,1212.56 1289.2,1212.56 1289.79,1212.56 1290.37,1212.56 1290.96,1212.56 1291.55,1212.56 1292.13,1212.56 1292.72,1212.56 1293.31,1212.56 1293.89,1212.56 1294.48,1212.56 1295.06,1212.56 1295.65,1212.56 1296.24,1212.56 1296.82,1212.56 1297.41,1212.56 1298,1212.56 1298.58,1212.56 1299.17,1212.56 1299.76,1212.56 1300.34,1212.56 1300.93,1212.56 1301.52,1212.56 1302.1,1212.56 1302.69,1212.56 1303.27,1212.56 1303.86,1212.56 1304.45,1212.56 1305.03,1212.56 1305.62,1212.56 1306.21,1212.56 1306.79,1212.56 1307.38,1212.56 1307.97,1212.56 1308.55,1212.56 1309.14,1212.56 1309.73,1212.56 1310.31,1212.56 1310.9,1212.56 1311.48,1212.56 1312.07,1212.56 1312.66,1212.56 1313.24,1212.56 1313.83,1212.56 1314.42,1212.56 1315,1212.56 1315.59,1212.56 1316.18,1212.56 1316.76,1212.56 1317.35,1212.56 1317.93,1212.56 1318.52,1212.56 1319.11,1212.56 1319.69,1212.56 1320.28,1212.56 1320.87,1212.56 1321.45,1212.56 1322.04,1212.56 1322.63,1212.56 1323.21,1212.56 1323.8,1212.56 1324.39,1212.56 1324.97,1212.56 1325.56,1212.56 1326.14,1212.56 1326.73,1212.56 1327.32,1212.56 1327.9,1212.56 1328.49,1212.56 1329.08,1212.56 1329.66,1212.56 1330.25,1212.56 1330.84,1212.56 1331.42,1212.56 1332.01,1212.56 1332.6,1212.56 1333.18,1212.56 1333.77,1212.56 1334.35,1212.56 1334.94,1212.56 1335.53,1212.56 1336.11,1212.56 1336.7,1212.56 1337.29,1212.56 1337.87,1212.56 1338.46,1212.56 1339.05,1212.56 1339.63,1212.56 1340.22,1212.56 1340.8,1212.56 1341.39,1212.56 1341.98,1212.56 1342.56,1212.56 1343.15,1212.56 1343.74,1212.56 1344.32,1212.56 1344.91,1212.56 1345.5,1212.56 1346.08,1212.56 1346.67,1212.56 1347.26,1212.56 1347.84,1212.56 1348.43,1212.56 1349.01,1212.56 1349.6,1212.56 1350.19,1212.56 1350.77,1212.56 1351.36,1212.56 1351.95,1212.56 1352.53,1212.56 1353.12,1212.56 1353.71,1212.56 1354.29,1212.56 1354.88,1212.56 1355.47,1212.56 1356.05,1212.56 1356.64,1212.56 1357.22,1212.56 1357.81,1212.56 1358.4,1212.56 1358.98,1212.56 1359.57,1212.56 1360.16,1212.56 1360.74,1212.56 1361.33,1212.56 1361.92,1212.56 1362.5,1212.56 1363.09,1212.56 1363.68,1212.56 1364.26,1212.56 1364.85,1212.56 1365.43,1212.56 1366.02,1212.56 1366.61,1212.56 1367.19,1212.56 1367.78,1212.56 1368.37,1212.56 1368.95,1212.56 1369.54,1212.56 1370.13,1212.56 1370.71,1212.56 1371.3,1212.56 1371.88,1212.56 1372.47,1212.56 1373.06,1212.56 1373.64,1212.56 1374.23,1212.56 1374.82,1212.56 1375.4,1212.56 1375.99,1212.56 1376.58,1212.56 1377.16,1212.56 1377.75,1212.56 1378.34,1212.56 1378.92,1212.56 1379.51,1212.56 1380.09,1212.56 1380.68,1212.56 1381.27,1212.56 1381.85,1212.56 1382.44,1212.56 1383.03,1212.56 1383.61,1212.56 1384.2,1212.56 1384.79,1212.56 1385.37,1212.56 1385.96,1212.56 1386.55,1212.56 1387.13,1212.56 1387.72,1212.56 1388.3,1212.56 1388.89,1212.56 1389.48,1212.56 1390.06,1212.56 1390.65,1212.56 1391.24,1212.56 1391.82,1212.56 1392.41,1212.56 1393,1212.56 1393.58,1212.56 1394.17,1212.56 1394.75,1212.56 1395.34,1212.56 1395.93,1212.56 1396.51,1212.56 1397.1,1212.56 1397.69,1212.56 1398.27,1212.56 1398.86,1212.56 1399.45,1212.56 1400.03,1212.56 1400.62,1212.56 1401.21,1212.56 1401.79,1212.56 1402.38,1212.56 1402.96,1212.56 1403.55,1212.56 1404.14,1212.56 1404.72,1212.56 1405.31,1212.56 1405.9,1212.56 1406.48,1212.56 1407.07,1212.56 1407.66,1212.56 1408.24,1212.56 1408.83,1212.56 1409.42,1212.56 1410,1212.56 1410.59,1212.56 1411.17,1212.56 1411.76,1212.56 1412.35,1212.56 1412.93,1212.56 1413.52,1212.56 1414.11,1212.56 1414.69,1212.56 1415.28,1212.56 1415.87,1212.56 1416.45,1212.56 1417.04,1212.56 1417.63,1212.56 1418.21,1212.56 1418.8,1212.56 1419.38,1212.56 1419.97,1212.56 1420.56,1212.56 1421.14,1212.56 1421.73,1212.56 1422.32,1212.56 1422.9,1212.56 1423.49,1212.56 1424.08,1212.56 1424.66,1212.56 1425.25,1212.56 1425.83,1212.56 1426.42,1212.56 1427.01,1212.56 1427.59,1212.56 1428.18,1212.56 1428.77,1212.56 1429.35,1212.56 1429.94,1212.56 1430.53,1212.56 1431.11,1212.56 1431.7,1212.56 1432.29,1212.56 1432.87,1212.56 1433.46,1212.56 1434.04,1212.56 1434.63,1212.56 1435.22,1212.56 1435.8,1212.56 1436.39,1212.56 1436.98,1212.56 1437.56,1212.56 1438.15,1212.56 1438.74,1212.56 1439.32,1212.56 1439.91,1212.56 1440.5,1212.56 1441.08,1212.56 1441.67,1212.56 1442.25,1212.56 1442.84,1212.56 1443.43,1212.56 1444.01,1212.56 1444.6,1212.56 1445.19,1212.56 1445.77,1212.56 1446.36,1212.56 1446.95,1212.56 1447.53,1212.56 1448.12,1212.56 1448.7,1212.56 1449.29,1212.56 1449.88,1212.56 1450.46,1212.56 1451.05,1212.56 1451.64,1212.56 1452.22,1212.56 1452.81,1212.56 1453.4,1212.56 1453.98,1212.56 1454.57,1212.56 1455.16,1212.56 1455.74,1212.56 1456.33,1212.56 1456.91,1212.56 1457.5,1212.56 1458.09,1212.56 1458.67,1212.56 1459.26,1212.56 1459.85,1212.56 1460.43,1212.56 1461.02,1212.56 1461.61,1212.56 1462.19,1212.56 1462.78,1212.56 1463.37,1212.56 1463.95,1212.56 1464.54,1212.56 1465.12,1212.56 1465.71,1212.56 1466.3,1212.56 1466.88,1212.56 1467.47,1212.56 1468.06,1212.56 1468.64,1212.56 1469.23,1212.56 1469.82,1212.56 1470.4,1212.56 1470.99,1212.56 1471.57,1212.56 1472.16,1212.56 1472.75,1212.56 1473.33,1212.56 1473.92,1212.56 1474.51,1212.56 1475.09,1212.56 1475.68,1212.56 1476.27,1212.56 1476.85,1212.56 1477.44,1212.56 1478.03,1212.56 1478.61,1212.56 1479.2,1212.56 1479.78,1212.56 1480.37,1212.56 1480.96,1212.56 1481.54,1212.56 1482.13,1212.56 1482.72,1212.56 1483.3,1212.56 1483.89,1212.56 1484.48,1212.56 1485.06,1212.56 1485.65,1212.56 1486.24,1212.56 1486.82,1212.56 1487.41,1212.56 1487.99,1212.56 1488.58,1212.56 1489.17,1212.56 1489.75,1212.56 1490.34,1212.56 1490.93,1212.56 1491.51,1212.56 1492.1,1212.56 1492.69,1212.56 1493.27,1212.56 1493.86,1212.56 1494.45,1212.56 1495.03,1212.56 1495.62,1212.56 1496.2,1212.56 1496.79,1212.56 1497.38,1212.56 1497.96,1212.56 1498.55,1212.56 1499.14,1212.56 1499.72,1212.56 1500.31,1212.56 1500.9,1212.56 1501.48,1212.56 1502.07,1212.56 1502.65,1212.56 1503.24,1212.56 1503.83,1212.56 1504.41,1212.56 1505,1212.56 1505.59,1212.56 1506.17,1212.56 1506.76,1212.56 1507.35,1212.56 1507.93,1212.56 1508.52,1212.56 1509.11,1212.56 1509.69,1212.56 1510.28,1212.56 1510.86,1212.56 1511.45,1212.56 1512.04,1212.56 1512.62,1212.56 1513.21,1212.56 1513.8,1212.56 1514.38,1212.56 1514.97,1212.56 1515.56,1212.56 1516.14,1212.56 1516.73,1212.56 1517.32,1212.56 1517.9,1212.56 1518.49,1212.56 1519.07,1212.56 1519.66,1212.56 1520.25,1212.56 1520.83,1212.56 1521.42,1212.56 1522.01,1212.56 1522.59,1212.56 1523.18,1212.56 1523.77,1212.56 1524.35,1212.56 1524.94,1212.56 1525.52,1212.56 1526.11,1212.56 1526.7,1212.56 1527.28,1212.56 1527.87,1212.56 1528.46,1212.56 1529.04,1212.56 1529.63,1212.56 1530.22,1212.56 1530.8,1212.56 1531.39,1212.56 1531.98,1212.56 1532.56,1212.56 1533.15,1212.56 1533.73,1212.56 1534.32,1212.56 1534.91,1212.56 1535.49,1212.56 1536.08,1212.56 1536.67,1212.56 1537.25,1212.56 1537.84,1212.56 1538.43,1212.56 1539.01,1212.56 1539.6,1212.56 1540.19,1212.56 1540.77,1212.56 1541.36,1212.56 1541.94,1212.56 1542.53,1212.56 1543.12,1212.56 1543.7,1212.56 1544.29,1212.56 1544.88,1212.56 1545.46,1212.56 1546.05,1212.56 1546.64,1212.56 1547.22,1212.56 1547.81,1212.56 1548.4,1212.56 1548.98,1212.56 1549.57,1212.56 1550.15,1212.56 1550.74,1212.56 1551.33,1212.56 1551.91,1212.56 1552.5,1212.56 1553.09,1212.56 1553.67,1212.56 1554.26,1212.56 1554.85,1212.56 1555.43,1212.56 1556.02,1212.56 1556.6,1212.56 1557.19,1212.56 1557.78,1212.56 1558.36,1212.56 1558.95,1212.56 1559.54,1212.56 1560.12,1212.56 1560.71,1212.56 1561.3,1212.56 1561.88,1212.56 1562.47,1212.56 1563.06,1212.56 1563.64,1212.56 1564.23,1212.56 1564.81,1212.56 1565.4,1212.56 1565.99,1212.56 1566.57,1212.56 1567.16,1212.56 1567.75,1212.56 1568.33,1212.56 1568.92,1212.56 1569.51,1212.56 1570.09,1212.56 1570.68,1212.56 1571.27,1212.56 1571.85,1212.56 1572.44,1212.56 1573.02,1212.56 1573.61,1212.56 1574.2,1212.56 1574.78,1212.56 1575.37,1212.56 1575.96,1212.56 1576.54,1212.56 1577.13,1212.56 1577.72,1212.56 1578.3,1212.56 1578.89,1212.56 1579.47,1212.56 1580.06,1212.56 1580.65,1212.56 1581.23,1212.56 1581.82,1212.56 1582.41,1212.56 1582.99,1212.56 1583.58,1212.56 1584.17,1212.56 1584.75,1212.56 1585.34,1212.56 1585.93,1212.56 1586.51,1212.56 1587.1,1212.56 1587.68,1212.56 1588.27,1212.56 1588.86,1212.56 1589.44,1212.56 1590.03,1212.56 1590.62,1212.56 1591.2,1212.56 1591.79,1212.56 1592.38,1212.56 1592.96,1212.56 1593.55,1212.56 1594.14,1212.56 1594.72,1212.56 1595.31,1212.56 1595.89,1212.56 1596.48,1212.56 1597.07,1212.56 1597.65,1212.56 1598.24,1212.56 1598.83,1212.56 1599.41,1212.56 1600,1212.56 1600.59,1212.56 1601.17,1212.56 1601.76,1212.56 1602.34,1212.56 1602.93,1212.56 1603.52,1212.56 1604.1,1212.56 1604.69,1212.56 1605.28,1212.56 1605.86,1212.56 1606.45,1212.56 1607.04,1212.56 1607.62,1212.56 1608.21,1212.56 1608.8,1212.56 1609.38,1212.56 1609.97,1212.56 1610.55,1212.56 1611.14,1212.56 1611.73,1212.56 1612.31,1212.56 1612.9,1212.56 1613.49,1212.56 1614.07,1212.56 1614.66,1212.56 1615.25,1212.56 1615.83,1212.56 1616.42,1212.56 1617.01,1212.56 1617.59,1212.56 1618.18,1212.56 1618.76,1212.56 1619.35,1212.56 1619.94,1212.56 1620.52,1212.56 1621.11,1212.56 1621.7,1212.56 1622.28,1212.56 1622.87,1212.56 1623.46,1212.56 1624.04,1212.56 1624.63,1212.56 1625.22,1212.56 1625.8,1212.56 1626.39,1212.56 1626.97,1212.56 1627.56,1212.56 1628.15,1212.56 1628.73,1212.56 1629.32,1212.56 1629.91,1212.56 1630.49,1212.56 1631.08,1212.56 1631.67,1212.56 1632.25,1212.56 1632.84,1212.56 1633.42,1212.56 1634.01,1212.56 1634.6,1212.56 1635.18,1212.56 1635.77,1212.56 1636.36,1212.56 1636.94,1212.56 1637.53,1212.56 1638.12,1212.56 1638.7,1212.56 1639.29,1212.56 1639.88,1212.56 1640.46,1212.56 1641.05,1212.56 1641.63,1212.56 1642.22,1212.56 1642.81,1212.56 1643.39,1212.56 1643.98,1212.56 1644.57,1212.56 1645.15,1212.56 1645.74,1212.56 1646.33,1212.56 1646.91,1212.56 1647.5,1212.56 1648.09,1212.56 1648.67,1212.56 1649.26,1212.56 1649.84,1212.56 1650.43,1212.56 1651.02,1212.56 1651.6,1212.56 1652.19,1212.56 1652.78,1212.56 1653.36,1212.56 1653.95,1212.56 1654.54,1212.56 1655.12,1212.56 1655.71,1212.56 1656.29,1212.56 1656.88,1212.56 1657.47,1212.56 1658.05,1212.56 1658.64,1212.56 1659.23,1212.56 1659.81,1212.56 1660.4,1212.56 1660.99,1212.56 1661.57,1212.56 1662.16,1212.56 1662.75,1212.56 1663.33,1212.56 1663.92,1212.56 1664.5,1212.56 1665.09,1212.56 1665.68,1212.56 1666.26,1212.56 1666.85,1212.56 1667.44,1212.56 1668.02,1212.56 1668.61,1212.56 1669.2,1212.56 1669.78,1212.56 1670.37,1212.56 1670.96,1212.56 1671.54,1212.56 1672.13,1212.56 1672.71,1212.56 1673.3,1212.56 1673.89,1212.56 1674.47,1212.56 1675.06,1212.56 1675.65,1212.56 1676.23,1212.56 1676.82,1212.56 1677.41,1212.56 1677.99,1212.56 1678.58,1212.56 1679.17,1212.56 1679.75,1212.56 1680.34,1212.56 1680.92,1212.56 1681.51,1212.56 1682.1,1212.56 1682.68,1212.56 1683.27,1212.56 1683.86,1212.56 1684.44,1212.56 1685.03,1212.56 1685.62,1212.56 1686.2,1212.56 1686.79,1212.56 1687.37,1212.56 1687.96,1212.56 1688.55,1212.56 1689.13,1212.56 1689.72,1212.56 1690.31,1212.56 1690.89,1212.56 1691.48,1212.56 1692.07,1212.56 1692.65,1212.56 1693.24,1212.56 1693.83,1212.56 1694.41,1212.56 1695,1212.56 1695.58,1212.56 1696.17,1212.56 1696.76,1212.56 1697.34,1212.56 1697.93,1212.56 1698.52,1212.56 1699.1,1212.56 1699.69,1212.56 1700.28,1212.56 1700.86,1212.56 1701.45,1212.56 1702.04,1212.56 1702.62,1212.56 1703.21,1212.56 1703.79,1212.56 1704.38,1212.56 1704.97,1212.56 1705.55,1212.56 1706.14,1212.56 1706.73,1212.56 1707.31,1212.56 1707.9,1212.56 1708.49,1212.56 1709.07,1212.56 1709.66,1212.56 1710.24,1212.56 1710.83,1212.56 1711.42,1212.56 1712,1212.56 1712.59,1212.56 1713.18,1212.56 1713.76,1212.56 1714.35,1212.56 1714.94,1212.56 1715.52,1212.56 1716.11,1212.56 1716.7,1212.56 1717.28,1212.56 1717.87,1212.56 1718.45,1212.56 1719.04,1212.56 1719.63,1212.56 1720.21,1212.56 1720.8,1212.56 1721.39,1212.56 1721.97,1212.56 1722.56,1212.56 1723.15,1212.56 1723.73,1212.56 1724.32,1212.56 1724.91,1212.56 1725.49,1212.56 1726.08,1212.56 1726.66,1212.56 1727.25,1212.56 1727.84,1212.56 1728.42,1212.56 1729.01,1212.56 1729.6,1212.56 1730.18,1212.56 1730.77,1212.56 1731.36,1212.56 1731.94,1212.56 1732.53,1212.56 1733.11,1212.56 1733.7,1212.56 1734.29,1212.56 1734.87,1212.56 1735.46,1212.56 1736.05,1212.56 1736.63,1212.56 1737.22,1212.56 1737.81,1212.56 1738.39,1212.56 1738.98,1212.56 1739.57,1212.56 1740.15,1212.56 1740.74,1212.56 1741.32,1212.56 1741.91,1212.56 1742.5,1212.56 1743.08,1212.56 1743.67,1212.56 1744.26,1212.56 1744.84,1212.56 1745.43,1212.56 1746.02,1212.56 1746.6,1212.56 1747.19,1212.56 1747.78,1212.56 1748.36,1212.56 1748.95,1212.56 1749.53,1212.56 1750.12,1212.56 1750.71,1212.56 1751.29,1212.56 1751.88,1212.56 1752.47,1212.56 1753.05,1212.56 1753.64,1212.56 1754.23,1212.56 1754.81,1212.56 1755.4,1212.56 1755.99,1212.56 1756.57,1212.56 1757.16,1212.56 1757.74,1212.56 1758.33,1212.56 1758.92,1212.56 1759.5,1212.56 1760.09,1212.56 1760.68,1212.56 1761.26,1212.56 1761.85,1212.56 1762.44,1212.56 1763.02,1212.56 1763.61,1212.56 1764.19,1212.56 1764.78,1212.56 1765.37,1212.56 1765.95,1212.56 1766.54,1212.56 1767.13,1212.56 1767.71,1212.56 1768.3,1212.56 1768.89,1212.56 1769.47,1212.56 1770.06,1212.56 1770.65,1212.56 1771.23,1212.56 1771.82,1212.56 1772.4,1212.56 1772.99,1212.56 1773.58,1212.56 1774.16,1212.56 1774.75,1212.56 1775.34,1212.56 1775.92,1212.56 1776.51,1212.56 1777.1,1212.56 1777.68,1212.56 1778.27,1212.56 1778.86,1212.56 1779.44,1212.56 1780.03,1212.56 1780.61,1212.56 1781.2,1212.56 1781.79,1212.56 1782.37,1212.56 1782.96,1212.56 1783.55,1212.56 1784.13,1212.56 1784.72,1212.56 1785.31,1212.56 1785.89,1212.56 1786.48,1212.56 1787.06,1212.56 1787.65,1212.56 1788.24,1212.56 1788.82,1212.56 1789.41,1212.56 1790,1212.56 1790.58,1212.56 1791.17,1212.56 1791.76,1212.56 1792.34,1212.56 1792.93,1212.56 1793.52,1212.56 1794.1,1212.56 1794.69,1212.56 1795.27,1212.56 1795.86,1212.56 1796.45,1212.56 1797.03,1212.56 1797.62,1212.56 1798.21,1212.56 1798.79,1212.56 1799.38,1212.56 1799.97,1212.56 1800.55,1212.56 1801.14,1212.56 1801.73,1212.56 1802.31,1212.56 1802.9,1212.56 1803.48,1212.56 1804.07,1212.56 1804.66,1212.56 1805.24,1212.56 1805.83,1212.56 1806.42,1212.56 1807,1212.56 1807.59,1212.56 1808.18,1212.56 1808.76,1212.56 1809.35,1212.56 1809.94,1212.56 1810.52,1212.56 1811.11,1212.56 1811.69,1212.56 1812.28,1212.56 1812.87,1212.56 1813.45,1212.56 1814.04,1212.56 1814.63,1212.56 1815.21,1212.56 1815.8,1212.56 1816.39,1212.56 1816.97,1212.56 1817.56,1212.56 1818.14,1212.56 1818.73,1212.56 1819.32,1212.56 1819.9,1212.56 1820.49,1212.56 1821.08,1212.56 1821.66,1212.56 1822.25,1212.56 1822.84,1212.56 1823.42,1212.56 1824.01,1212.56 1824.6,1212.56 1825.18,1212.56 1825.77,1212.56 1826.35,1212.56 1826.94,1212.56 1827.53,1212.56 1828.11,1212.56 1828.7,1212.56 1829.29,1212.56 1829.87,1212.56 1830.46,1212.56 1831.05,1212.56 1831.63,1212.56 1832.22,1212.56 1832.81,1212.56 1833.39,1212.56 1833.98,1212.56 1834.56,1212.56 1835.15,1212.56 1835.74,1212.56 1836.32,1212.56 1836.91,1212.56 1837.5,1212.56 1838.08,1212.56 1838.67,1212.56 1839.26,1212.56 1839.84,1212.56 1840.43,1212.56 1841.01,1212.56 1841.6,1212.56 1842.19,1212.56 1842.77,1212.56 1843.36,1212.56 1843.95,1212.56 1844.53,1212.56 1845.12,1212.56 1845.71,1212.56 1846.29,1212.56 1846.88,1212.56 1847.47,1212.56 1848.05,1212.56 1848.64,1212.56 1849.22,1212.56 1849.81,1212.56 1850.4,1212.56 1850.98,1212.56 1851.57,1212.56 1852.16,1212.56 1852.74,1212.56 1853.33,1212.56 1853.92,1212.56 1854.5,1212.56 1855.09,1212.56 1855.68,1212.56 1856.26,1212.56 1856.85,1212.56 1857.43,1212.56 1858.02,1212.56 1858.61,1212.56 1859.19,1212.56 1859.78,1212.56 1860.37,1212.56 1860.95,1212.56 1861.54,1212.56 1862.13,1212.56 1862.71,1212.56 1863.3,1212.56 1863.88,1212.56 1864.47,1212.56 1865.06,1212.56 1865.64,1212.56 1866.23,1212.56 1866.82,1212.56 1867.4,1212.56 1867.99,1212.56 1868.58,1212.56 1869.16,1212.56 1869.75,1212.56 1870.34,1212.56 1870.92,1212.56 1871.51,1212.56 1872.09,1212.56 1872.68,1212.56 1873.27,1212.56 1873.85,1212.56 1874.44,1212.56 1875.03,1212.56 1875.61,1212.56 1876.2,1212.56 1876.79,1212.56 1877.37,1212.56 1877.96,1212.56 1878.55,1212.56 1879.13,1212.56 1879.72,1212.56 1880.3,1212.56 1880.89,1212.56 1881.48,1212.56 1882.06,1212.56 1882.65,1212.56 1883.24,1212.56 1883.82,1212.56 1884.41,1212.56 1885,1212.56 1885.58,1212.56 1886.17,1212.56 1886.76,1212.56 1887.34,1212.56 1887.93,1212.56 1888.51,1212.56 1889.1,1212.56 1889.69,1212.56 1890.27,1212.56 1890.86,1212.56 1891.45,1212.56 1892.03,1212.56 1892.62,1212.56 1893.21,1212.56 1893.79,1212.56 1894.38,1212.56 1894.96,1212.56 1895.55,1212.56 1896.14,1212.56 1896.72,1212.56 1897.31,1212.56 1897.9,1212.56 1898.48,1212.56 1899.07,1212.56 1899.66,1212.56 1900.24,1212.56 1900.83,1212.56 1901.42,1212.56 1902,1212.56 1902.59,1212.56 1903.17,1212.56 1903.76,1212.56 1904.35,1212.56 1904.93,1212.56 1905.52,1212.56 1906.11,1212.56 1906.69,1212.56 1907.28,1212.56 1907.87,1212.56 1908.45,1212.56 1909.04,1212.56 1909.63,1212.56 1910.21,1212.56 1910.8,1212.56 1911.38,1212.56 1911.97,1212.56 1912.56,1212.56 1913.14,1212.56 1913.73,1212.56 1914.32,1212.56 1914.9,1212.56 1915.49,1212.56 1916.08,1212.56 1916.66,1212.56 1917.25,1212.56 1917.83,1212.56 1918.42,1212.56 1919.01,1212.56 1919.59,1212.56 1920.18,1212.56 1920.77,1212.56 1921.35,1212.56 1921.94,1212.56 1922.53,1212.56 1923.11,1212.56 1923.7,1212.56 1924.29,1212.56 1924.87,1212.56 1925.46,1212.56 1926.04,1212.56 1926.63,1212.56 1927.22,1212.56 1927.8,1212.56 1928.39,1212.56 1928.98,1212.56 1929.56,1212.56 1930.15,1212.56 1930.74,1212.56 1931.32,1212.56 1931.91,1212.56 1932.5,1212.56 1933.08,1212.56 1933.67,1212.56 1934.25,1212.56 1934.84,1212.56 1935.43,1212.56 1936.01,1212.56 1936.6,1212.56 1937.19,1212.56 1937.77,1212.56 1938.36,1212.56 1938.95,1212.56 1939.53,1212.56 1940.12,1212.56 1940.71,1212.56 1941.29,1212.56 1941.88,1212.56 1942.46,1212.56 1943.05,1212.56 1943.64,1212.56 1944.22,1212.56 1944.81,1212.56 1945.4,1212.56 1945.98,1212.56 1946.57,1212.56 1947.16,1212.56 1947.74,1212.56 1948.33,1212.56 1948.91,1212.56 1949.5,1212.56 1950.09,1212.56 1950.67,1212.56 1951.26,1212.56 1951.85,1212.56 1952.43,1212.56 1953.02,1212.56 1953.61,1212.56 1954.19,1212.56 1954.78,1212.56 1955.37,1212.56 1955.95,1212.56 1956.54,1212.56 1957.12,1212.56 1957.71,1212.56 1958.3,1212.56 1958.88,1212.56 1959.47,1212.56 1960.06,1212.56 1960.64,1212.56 1961.23,1212.56 1961.82,1212.56 1962.4,1212.56 1962.99,1212.56 1963.58,1212.56 1964.16,1212.56 1964.75,1212.56 1965.33,1212.56 1965.92,1212.56 1966.51,1212.56 1967.09,1212.56 1967.68,1212.56 1968.27,1212.56 1968.85,1212.56 1969.44,1212.56 1970.03,1212.56 1970.61,1212.56 1971.2,1212.56 1971.78,1212.56 1972.37,1212.56 1972.96,1212.56 1973.54,1212.56 1974.13,1212.56 1974.72,1212.56 1975.3,1212.56 1975.89,1212.56 1976.48,1212.56 1977.06,1212.56 1977.65,1212.56 1978.24,1212.56 1978.82,1212.56 1979.41,1212.56 1979.99,1212.56 1980.58,1212.56 1981.17,1212.56 1981.75,1212.56 1982.34,1212.56 1982.93,1212.56 1983.51,1212.56 1984.1,1212.56 1984.69,1212.56 1985.27,1212.56 1985.86,1212.56 1986.45,1212.56 1987.03,1212.56 1987.62,1212.56 1988.2,1212.56 1988.79,1212.56 1989.38,1212.56 1989.96,1212.56 1990.55,1212.56 1991.14,1212.56 1991.72,1212.56 1992.31,1212.56 1992.9,1212.56 1993.48,1212.56 1994.07,1212.56 1994.65,1212.56 1995.24,1212.56 1995.83,1212.56 1996.41,1212.56 1997,1212.56 1997.59,1212.56 1998.17,1212.56 1998.76,1212.56 1999.35,1212.56 1999.93,1212.56 2000.52,1212.56 2001.11,1212.56 2001.69,1212.56 2002.28,1212.56 2002.86,1212.56 2003.45,1212.56 2004.04,1212.56 2004.62,1212.56 2005.21,1212.56 2005.8,1212.56 2006.38,1212.56 2006.97,1212.56 2007.56,1212.56 2008.14,1212.56 2008.73,1212.56 2009.32,1212.56 2009.9,1212.56 2010.49,1212.56 2011.07,1212.56 2011.66,1212.56 2012.25,1212.56 2012.83,1212.56 2013.42,1212.56 2014.01,1212.56 2014.59,1212.56 2015.18,1212.56 2015.77,1212.56 2016.35,1212.56 2016.94,1212.56 2017.53,1212.56 2018.11,1212.56 2018.7,1212.56 2019.28,1212.56 2019.87,1212.56 2020.46,1212.56 2021.04,1212.56 2021.63,1212.56 2022.22,1212.56 2022.8,1212.56 2023.39,1212.56 2023.98,1212.56 2024.56,1212.56 2025.15,1212.56 2025.73,1212.56 2026.32,1212.56 2026.91,1212.56 2027.49,1212.56 2028.08,1212.56 2028.67,1212.56 2029.25,1212.56 2029.84,1212.56 2030.43,1212.56 2031.01,1212.56 2031.6,1212.56 2032.19,1212.56 2032.77,1212.56 2033.36,1212.56 2033.94,1212.56 2034.53,1212.56 2035.12,1212.56 2035.7,1212.56 2036.29,1212.56 2036.88,1212.56 2037.46,1212.56 2038.05,1212.56 2038.64,1212.56 2039.22,1212.56 2039.81,1212.56 2040.4,1212.56 2040.98,1212.56 2041.57,1212.56 2042.15,1212.56 2042.74,1212.56 2043.33,1212.56 2043.91,1212.56 2044.5,1212.56 2045.09,1212.56 2045.67,1212.56 2046.26,1212.56 2046.85,1212.56 2047.43,1212.56 2048.02,1212.56 2048.6,1212.56 2049.19,1212.56 2049.78,1212.56 2050.36,1212.56 2050.95,1212.56 2051.54,1212.56 2052.12,1212.56 2052.71,1212.56 2053.3,1212.56 2053.88,1212.56 2054.47,1212.56 2055.06,1212.56 2055.64,1212.56 2056.23,1212.56 2056.81,1212.56 2057.4,1212.56 2057.99,1212.56 2058.57,1212.56 2059.16,1212.56 2059.75,1212.56 2060.33,1212.56 2060.92,1212.56 2061.51,1212.56 2062.09,1212.56 2062.68,1212.56 2063.27,1212.56 2063.85,1212.56 2064.44,1212.56 2065.02,1212.56 2065.61,1212.56 2066.2,1212.56 2066.78,1212.56 2067.37,1212.56 2067.96,1212.56 2068.54,1212.56 2069.13,1212.56 2069.72,1212.56 2070.3,1212.56 2070.89,1212.56 2071.48,1212.56 2072.06,1212.56 2072.65,1212.56 2073.23,1212.56 2073.82,1212.56 2074.41,1212.56 2074.99,1212.56 2075.58,1212.56 2076.17,1212.56 2076.75,1212.56 2077.34,1212.56 2077.93,1212.56 2078.51,1212.56 2079.1,1212.56 2079.68,1212.56 2080.27,1212.56 2080.86,1212.56 2081.44,1212.56 2082.03,1212.56 2082.62,1212.56 2083.2,1212.56 2083.79,1212.56 2084.38,1212.56 2084.96,1212.56 2085.55,1212.56 2086.14,1212.56 2086.72,1212.56 2087.31,1212.56 2087.89,1212.56 2088.48,1212.56 2089.07,1212.56 2089.65,1212.56 2090.24,1212.56 2090.83,1212.56 2091.41,1212.56 2092,1212.56 2092.59,1212.56 2093.17,1212.56 2093.76,1212.56 2094.35,1212.56 2094.93,1212.56 2095.52,1212.56 2096.1,1212.56 2096.69,1212.56 2097.28,1212.56 2097.86,1212.56 2098.45,1212.56 2099.04,1212.56 2099.62,1212.56 2100.21,1212.56 2100.8,1212.56 2101.38,1212.56 2101.97,1212.56 2102.55,1212.56 2103.14,1212.56 2103.73,1212.56 2104.31,1212.56 2104.9,1212.56 2105.49,1212.56 2106.07,1212.56 2106.66,1212.56 2107.25,1212.56 2107.83,1212.56 2108.42,1212.56 2109.01,1212.56 2109.59,1212.56 2110.18,1212.56 2110.76,1212.56 2111.35,1212.56 2111.94,1212.56 2112.52,1212.56 2113.11,1212.56 2113.7,1212.56 2114.28,1212.56 2114.87,1212.56 2115.46,1212.56 2116.04,1212.56 2116.63,1212.56 2117.22,1212.56 2117.8,1212.56 2118.39,1212.56 2118.97,1212.56 2119.56,1212.56 2120.15,1212.56 2120.73,1212.56 2121.32,1212.56 2121.91,1212.56 2122.49,1212.56 2123.08,1212.56 2123.67,1212.56 2124.25,1212.56 2124.84,1212.56 2125.42,1212.56 2126.01,1212.56 2126.6,1212.56 2127.18,1212.56 2127.77,1212.56 2128.36,1212.56 2128.94,1212.56 2129.53,1212.56 2130.12,1212.56 2130.7,1212.56 2131.29,1212.56 2131.88,1212.56 2132.46,1212.56 2133.05,1212.56 2133.63,1212.56 2134.22,1212.56 2134.81,1212.56 2135.39,1212.56 2135.98,1212.56 2136.57,1212.56 2137.15,1212.56 2137.74,1212.56 2138.33,1212.56 2138.91,1212.56 2139.5,1212.56 2140.09,1212.56 2140.67,1212.56 2141.26,1212.56 2141.84,1212.56 2142.43,1212.56 2143.02,1212.56 2143.6,1212.56 2144.19,1212.56 2144.78,1212.56 2145.36,1212.56 2145.95,1212.56 2146.54,1212.56 2147.12,1212.56 2147.71,1212.56 2148.3,1212.56 2148.88,1212.56 2149.47,1212.56 2150.05,1212.56 2150.64,1212.56 2151.23,1212.56 2151.81,1212.56 2152.4,1212.56 2152.99,1212.56 2153.57,1212.56 2154.16,1212.56 2154.75,1212.56 2155.33,1212.56 2155.92,1212.56 2156.5,1212.56 2157.09,1212.56 2157.68,1212.56 2158.26,1212.56 \"/>\n<path clip-path=\"url(#clip962)\" d=\"M986.025 1212.32 L986.612 1212.32 L987.198 1212.32 L987.785 1212.32 L988.371 1212.32 L988.957 1212.32 L989.544 1212.32 L990.13 1212.32 L990.717 1212.32 L991.303 1212.32 L991.889 1212.32 L992.476 1212.32 L993.062 1212.32 L993.649 1212.32 L994.235 1212.32 L994.822 1212.32 L995.408 1212.32 L995.994 1212.32 L996.581 1212.32 L997.167 1212.32 L997.754 1212.32 L998.34 1212.32 L998.926 1212.32 L999.513 1212.32 L1000.1 1212.32 L1000.69 1212.32 L1001.27 1212.32 L1001.86 1212.32 L1002.44 1212.32 L1003.03 1212.32 L1003.62 1212.32 L1004.2 1212.32 L1004.79 1212.32 L1005.38 1212.32 L1005.96 1212.32 L1006.55 1212.32 L1007.14 1212.32 L1007.72 1212.32 L1008.31 1212.32 L1008.9 1212.32 L1009.48 1212.32 L1010.07 1212.32 L1010.65 1212.32 L1011.24 1212.32 L1011.83 1212.32 L1012.41 1212.32 L1013 1212.32 L1013.59 1212.32 L1014.17 1212.32 L1014.76 1212.32 L1015.35 1212.32 L1015.93 1212.32 L1016.52 1212.32 L1017.11 1212.32 L1017.69 1212.32 L1018.28 1212.32 L1018.86 1212.32 L1019.45 1212.32 L1020.04 1212.32 L1020.62 1212.32 L1021.21 1212.32 L1021.8 1212.32 L1022.38 1212.32 L1022.97 1212.32 L1023.56 1212.32 L1024.14 1212.32 L1024.73 1212.32 L1025.32 1212.32 L1025.9 1212.32 L1026.49 1212.32 L1027.07 1212.32 L1027.66 1212.32 L1028.25 1212.32 L1028.83 1212.32 L1029.42 1212.32 L1030.01 1212.32 L1030.59 1212.32 L1031.18 1212.32 L1031.77 1212.32 L1032.35 1212.32 L1032.94 1212.32 L1033.52 1212.32 L1034.11 1212.32 L1034.7 1212.32 L1035.28 1212.32 L1035.87 1212.32 L1036.46 1212.32 L1037.04 1212.32 L1037.63 1212.32 L1038.22 1212.32 L1038.8 1212.32 L1039.39 1212.32 L1039.98 1212.32 L1040.56 1212.32 L1041.15 1212.32 L1041.73 1212.32 L1042.32 1212.32 L1042.91 1212.32 L1043.49 1212.32 L1044.08 1212.32 L1044.67 1212.32 L1045.25 1212.32 L1045.84 1212.32 L1046.43 1212.32 L1047.01 1212.32 L1047.6 1212.32 L1048.19 1212.32 L1048.77 1212.32 L1049.36 1212.32 L1049.94 1212.32 L1050.53 1212.32 L1051.12 1212.32 L1051.7 1212.32 L1052.29 1212.32 L1052.88 1212.32 L1053.46 1212.32 L1054.05 1212.32 L1054.64 1212.32 L1055.22 1212.32 L1055.81 1212.32 L1056.39 1212.32 L1056.98 1212.32 L1057.57 1212.32 L1058.15 1212.32 L1058.74 1212.32 L1059.33 1212.32 L1059.91 1212.32 L1060.5 1212.32 L1061.09 1212.32 L1061.67 1212.32 L1062.26 1212.32 L1062.85 1212.32 L1063.43 1212.32 L1064.02 1212.32 L1064.6 1212.32 L1065.19 1212.32 L1065.78 1212.32 L1066.36 1212.32 L1066.95 1212.32 L1067.54 1212.32 L1068.12 1212.32 L1068.71 1212.32 L1069.3 1212.32 L1069.88 1212.32 L1070.47 1212.32 L1071.06 1212.32 L1071.64 1212.32 L1072.23 1212.32 L1072.81 1212.32 L1073.4 1212.32 L1073.99 1212.32 L1074.57 1212.32 L1075.16 1212.32 L1075.75 1212.32 L1076.33 1212.32 L1076.92 1212.32 L1077.51 1212.32 L1078.09 1212.32 L1078.68 1212.32 L1079.26 1212.32 L1079.85 1212.32 L1080.44 1212.32 L1081.02 1212.32 L1081.61 1212.32 L1082.2 1212.32 L1082.78 1212.32 L1083.37 1212.32 L1083.96 1212.32 L1084.54 1212.32 L1085.13 1212.32 L1085.72 1212.32 L1086.3 1212.32 L1086.89 1212.32 L1087.47 1212.32 L1088.06 1212.32 L1088.65 1212.32 L1089.23 1212.32 L1089.82 1212.32 L1090.41 1212.32 L1090.99 1212.32 L1091.58 1212.32 L1092.17 1212.32 L1092.75 1212.32 L1093.34 1212.32 L1093.93 1212.32 L1094.51 1212.32 L1095.1 1212.32 L1095.68 1212.32 L1096.27 1212.32 L1096.86 1212.32 L1097.44 1212.32 L1098.03 1212.32 L1098.62 1212.32 L1099.2 1212.32 L1099.79 1212.32 L1100.38 1212.32 L1100.96 1212.32 L1101.55 1212.32 L1102.14 1212.32 L1102.72 1212.32 L1103.31 1212.32 L1103.89 1212.32 L1104.48 1212.32 L1105.07 1212.32 L1105.65 1212.32 L1106.24 1212.32 L1106.83 1212.32 L1107.41 1212.32 L1108 1212.32 L1108.59 1212.32 L1109.17 1212.32 L1109.76 1212.32 L1110.34 1212.32 L1110.93 1212.32 L1111.52 1212.32 L1112.1 1212.32 L1112.69 1212.32 L1113.28 1212.32 L1113.86 1212.32 L1114.45 1212.32 L1115.04 1212.32 L1115.62 1212.32 L1116.21 1212.32 L1116.8 1212.32 L1117.38 1212.32 L1117.97 1212.32 L1118.55 1212.32 L1119.14 1212.32 L1119.73 1212.32 L1120.31 1212.32 L1120.9 1212.32 L1121.49 1212.32 L1122.07 1212.32 L1122.66 1212.32 L1123.25 1212.32 L1123.83 1212.32 L1124.42 1212.32 L1125.01 1212.32 L1125.59 1212.32 L1126.18 1212.32 L1126.76 1212.32 L1127.35 1212.32 L1127.94 1212.32 L1128.52 1212.32 L1129.11 1212.32 L1129.7 1212.32 L1130.28 1212.32 L1130.87 1212.32 L1131.46 1212.32 L1132.04 1212.32 L1132.63 1212.32 L1133.21 1212.32 L1133.8 1212.32 L1134.39 1212.32 L1134.97 1212.32 L1135.56 1212.32 L1136.15 1212.32 L1136.73 1212.32 L1137.32 1212.32 L1137.91 1212.32 L1138.49 1212.32 L1139.08 1212.32 L1139.67 1212.32 L1140.25 1212.32 L1140.84 1212.32 L1141.42 1212.32 L1142.01 1212.32 L1142.6 1212.32 L1143.18 1212.32 L1143.77 1212.32 L1144.36 1212.32 L1144.94 1212.32 L1145.53 1212.32 L1146.12 1212.32 L1146.7 1212.32 L1147.29 1212.32 L1147.88 1212.32 L1148.46 1212.32 L1149.05 1212.32 L1149.63 1212.32 L1150.22 1212.32 L1150.81 1212.32 L1151.39 1212.32 L1151.98 1212.32 L1152.57 1212.32 L1153.15 1212.32 L1153.74 1212.32 L1154.33 1212.32 L1154.91 1212.32 L1155.5 1212.32 L1156.09 1212.32 L1156.67 1212.32 L1157.26 1212.32 L1157.84 1212.32 L1158.43 1212.32 L1159.02 1212.32 L1159.6 1212.32 L1160.19 1212.32 L1160.78 1212.32 L1161.36 1212.32 L1161.95 1212.32 L1162.54 1212.32 L1163.12 1212.32 L1163.71 1212.32 L1164.29 1212.32 L1164.88 1212.32 L1165.47 1212.32 L1166.05 1212.32 L1166.64 1212.32 L1167.23 1212.32 L1167.81 1212.32 L1168.4 1212.32 L1168.99 1212.32 L1169.57 1212.32 L1170.16 1212.32 L1170.75 1212.32 L1171.33 1212.32 L1171.92 1212.32 L1172.5 1212.32 L1173.09 1212.32 L1173.68 1212.32 L1174.26 1212.32 L1174.85 1212.32 L1175.44 1212.32 L1176.02 1212.32 L1176.61 1212.32 L1177.2 1212.32 L1177.78 1212.32 L1178.37 1212.32 L1178.96 1212.32 L1179.54 1212.32 L1180.13 1212.32 L1180.71 1212.32 L1181.3 1212.32 L1181.89 1212.32 L1182.47 1212.32 L1183.06 1212.32 L1183.65 1212.32 L1184.23 1212.32 L1184.82 1212.32 L1185.41 1212.32 L1185.99 1212.32 L1186.58 1212.32 L1187.16 1212.32 L1187.75 1212.32 L1188.34 1212.32 L1188.92 1212.32 L1189.51 1212.32 L1190.1 1212.32 L1190.68 1212.32 L1191.27 1212.32 L1191.86 1212.32 L1192.44 1212.32 L1193.03 1212.32 L1193.62 1212.32 L1194.2 1212.32 L1194.79 1212.32 L1195.37 1212.32 L1195.96 1212.32 L1196.55 1212.32 L1197.13 1212.32 L1197.72 1212.32 L1198.31 1212.32 L1198.89 1212.32 L1199.48 1212.32 L1200.07 1212.32 L1200.65 1212.32 L1201.24 1212.32 L1201.83 1212.32 L1202.41 1212.32 L1203 1212.32 L1203.58 1212.32 L1204.17 1212.32 L1204.76 1212.32 L1205.34 1212.32 L1205.93 1212.32 L1206.52 1212.32 L1207.1 1212.32 L1207.69 1212.32 L1208.28 1212.32 L1208.86 1212.32 L1209.45 1212.32 L1210.03 1212.32 L1210.62 1212.32 L1211.21 1212.32 L1211.79 1212.32 L1212.38 1212.32 L1212.97 1212.32 L1213.55 1212.32 L1214.14 1212.32 L1214.73 1212.32 L1215.31 1212.32 L1215.9 1212.32 L1216.49 1212.32 L1217.07 1212.32 L1217.66 1212.32 L1218.24 1212.32 L1218.83 1212.32 L1219.42 1212.32 L1220 1212.32 L1220.59 1212.32 L1221.18 1212.32 L1221.76 1212.32 L1222.35 1212.32 L1222.94 1212.32 L1223.52 1212.32 L1224.11 1212.32 L1224.7 1212.32 L1225.28 1212.32 L1225.87 1212.32 L1226.45 1212.32 L1227.04 1212.32 L1227.63 1212.32 L1228.21 1212.32 L1228.8 1212.32 L1229.39 1212.32 L1229.97 1212.32 L1230.56 1212.32 L1231.15 1212.32 L1231.73 1212.32 L1232.32 1212.32 L1232.91 1212.32 L1233.49 1212.32 L1234.08 1212.32 L1234.66 1212.32 L1235.25 1212.32 L1235.84 1212.32 L1236.42 1212.32 L1237.01 1212.32 L1237.6 1212.32 L1238.18 1212.32 L1238.77 1212.32 L1239.36 1212.32 L1239.94 1212.32 L1240.53 1212.32 L1241.11 1212.32 L1241.7 1212.32 L1242.29 1212.32 L1242.87 1212.32 L1243.46 1212.32 L1244.05 1212.32 L1244.63 1212.32 L1245.22 1212.32 L1245.81 1212.32 L1246.39 1212.32 L1246.98 1212.32 L1247.57 1212.32 L1248.15 1212.32 L1248.74 1212.32 L1249.32 1212.32 L1249.91 1212.32 L1250.5 1212.32 L1251.08 1212.32 L1251.67 1212.32 L1252.26 1212.32 L1252.84 1212.32 L1253.43 1212.32 L1254.02 1212.32 L1254.6 1212.32 L1255.19 1212.32 L1255.78 1212.32 L1256.36 1212.32 L1256.95 1212.32 L1257.53 1212.32 L1258.12 1212.32 L1258.71 1212.32 L1259.29 1212.32 L1259.88 1212.32 L1260.47 1212.32 L1261.05 1212.32 L1261.64 1212.32 L1262.23 1212.32 L1262.81 1212.32 L1263.4 1212.32 L1263.98 1212.32 L1264.57 1212.32 L1265.16 1212.32 L1265.74 1212.32 L1266.33 1212.32 L1266.92 1212.32 L1267.5 1212.32 L1268.09 1212.32 L1268.68 1212.32 L1269.26 1212.32 L1269.85 1212.32 L1270.44 1212.32 L1271.02 1212.32 L1271.61 1212.32 L1272.19 1212.32 L1272.78 1212.32 L1273.37 1212.32 L1273.95 1212.32 L1274.54 1212.32 L1275.13 1212.32 L1275.71 1212.32 L1276.3 1212.32 L1276.89 1212.32 L1277.47 1212.32 L1278.06 1212.32 L1278.65 1212.32 L1279.23 1212.32 L1279.82 1212.32 L1280.4 1212.32 L1280.99 1212.32 L1281.58 1212.32 L1282.16 1212.32 L1282.75 1212.32 L1283.34 1212.32 L1283.92 1212.32 L1284.51 1212.32 L1285.1 1212.32 L1285.68 1212.32 L1286.27 1212.32 L1286.86 1212.32 L1287.44 1212.32 L1288.03 1212.32 L1288.61 1212.32 L1289.2 1212.32 L1289.79 1212.32 L1290.37 1212.32 L1290.96 1212.32 L1291.55 1212.32 L1292.13 1212.32 L1292.72 1212.32 L1293.31 1212.32 L1293.89 1212.32 L1294.48 1212.32 L1295.06 1212.32 L1295.65 1212.32 L1296.24 1212.32 L1296.82 1212.32 L1297.41 1212.32 L1298 1212.32 L1298.58 1212.32 L1299.17 1212.32 L1299.76 1212.32 L1300.34 1212.32 L1300.93 1212.32 L1301.52 1212.32 L1302.1 1212.32 L1302.69 1212.32 L1303.27 1212.32 L1303.86 1212.32 L1304.45 1212.32 L1305.03 1212.32 L1305.62 1212.32 L1306.21 1212.32 L1306.79 1212.32 L1307.38 1212.32 L1307.97 1212.32 L1308.55 1212.32 L1309.14 1212.32 L1309.73 1212.32 L1310.31 1212.32 L1310.9 1212.32 L1311.48 1212.32 L1312.07 1212.32 L1312.66 1212.32 L1313.24 1212.32 L1313.83 1212.32 L1314.42 1212.32 L1315 1212.32 L1315.59 1212.32 L1316.18 1212.32 L1316.76 1212.32 L1317.35 1212.32 L1317.93 1212.32 L1318.52 1212.32 L1319.11 1212.32 L1319.69 1212.32 L1320.28 1212.32 L1320.87 1212.32 L1321.45 1212.32 L1322.04 1212.32 L1322.63 1212.32 L1323.21 1212.32 L1323.8 1212.32 L1324.39 1212.32 L1324.97 1212.32 L1325.56 1212.32 L1326.14 1212.32 L1326.73 1212.32 L1327.32 1212.32 L1327.9 1212.32 L1328.49 1212.32 L1329.08 1212.32 L1329.66 1212.32 L1330.25 1212.32 L1330.84 1212.32 L1331.42 1212.32 L1332.01 1212.32 L1332.6 1212.32 L1333.18 1212.32 L1333.77 1212.32 L1334.35 1212.32 L1334.94 1212.32 L1335.53 1212.32 L1336.11 1212.32 L1336.7 1212.32 L1337.29 1212.32 L1337.87 1212.32 L1338.46 1212.32 L1339.05 1212.32 L1339.63 1212.32 L1340.22 1212.32 L1340.8 1212.32 L1341.39 1212.32 L1341.98 1212.32 L1342.56 1212.32 L1343.15 1212.32 L1343.74 1212.32 L1344.32 1212.32 L1344.91 1212.32 L1345.5 1212.32 L1346.08 1212.32 L1346.67 1212.32 L1347.26 1212.32 L1347.84 1212.32 L1348.43 1212.32 L1349.01 1212.32 L1349.6 1212.32 L1350.19 1212.32 L1350.77 1212.32 L1351.36 1212.32 L1351.95 1212.32 L1352.53 1212.32 L1353.12 1212.32 L1353.71 1212.32 L1354.29 1212.32 L1354.88 1212.32 L1355.47 1212.32 L1356.05 1212.32 L1356.64 1212.32 L1357.22 1212.32 L1357.81 1212.32 L1358.4 1212.32 L1358.98 1212.32 L1359.57 1212.32 L1360.16 1212.32 L1360.74 1212.32 L1361.33 1212.32 L1361.92 1212.32 L1362.5 1212.32 L1363.09 1212.32 L1363.68 1212.32 L1364.26 1212.32 L1364.85 1212.32 L1365.43 1212.32 L1366.02 1212.32 L1366.61 1212.32 L1367.19 1212.32 L1367.78 1212.32 L1368.37 1212.32 L1368.95 1212.32 L1369.54 1212.32 L1370.13 1212.32 L1370.71 1212.32 L1371.3 1212.32 L1371.88 1212.32 L1372.47 1212.32 L1373.06 1212.32 L1373.64 1212.32 L1374.23 1212.32 L1374.82 1212.32 L1375.4 1212.32 L1375.99 1212.32 L1376.58 1212.32 L1377.16 1212.32 L1377.75 1212.32 L1378.34 1212.32 L1378.92 1212.32 L1379.51 1212.32 L1380.09 1212.32 L1380.68 1212.32 L1381.27 1212.32 L1381.85 1212.32 L1382.44 1212.32 L1383.03 1212.32 L1383.61 1212.32 L1384.2 1212.32 L1384.79 1212.32 L1385.37 1212.32 L1385.96 1212.32 L1386.55 1212.32 L1387.13 1212.32 L1387.72 1212.32 L1388.3 1212.32 L1388.89 1212.32 L1389.48 1212.32 L1390.06 1212.32 L1390.65 1212.32 L1391.24 1212.32 L1391.82 1212.32 L1392.41 1212.32 L1393 1212.32 L1393.58 1212.32 L1394.17 1212.32 L1394.75 1212.32 L1395.34 1212.32 L1395.93 1212.32 L1396.51 1212.32 L1397.1 1212.32 L1397.69 1212.32 L1398.27 1212.32 L1398.86 1212.32 L1399.45 1212.32 L1400.03 1212.32 L1400.62 1212.32 L1401.21 1212.32 L1401.79 1212.32 L1402.38 1212.32 L1402.96 1212.32 L1403.55 1212.32 L1404.14 1212.32 L1404.72 1212.32 L1405.31 1212.32 L1405.9 1212.32 L1406.48 1212.32 L1407.07 1212.32 L1407.66 1212.32 L1408.24 1212.32 L1408.83 1212.32 L1409.42 1212.32 L1410 1212.32 L1410.59 1212.32 L1411.17 1212.32 L1411.76 1212.32 L1412.35 1212.32 L1412.93 1212.32 L1413.52 1212.32 L1414.11 1212.32 L1414.69 1212.32 L1415.28 1212.32 L1415.87 1212.32 L1416.45 1212.32 L1417.04 1212.32 L1417.63 1212.32 L1418.21 1212.32 L1418.8 1212.32 L1419.38 1212.32 L1419.97 1212.32 L1420.56 1212.32 L1421.14 1212.32 L1421.73 1212.32 L1422.32 1212.32 L1422.9 1212.32 L1423.49 1212.32 L1424.08 1212.32 L1424.66 1212.32 L1425.25 1212.32 L1425.83 1212.32 L1426.42 1212.32 L1427.01 1212.32 L1427.59 1212.32 L1428.18 1212.32 L1428.77 1212.32 L1429.35 1212.32 L1429.94 1212.32 L1430.53 1212.32 L1431.11 1212.32 L1431.7 1212.32 L1432.29 1212.32 L1432.87 1212.32 L1433.46 1212.32 L1434.04 1212.32 L1434.63 1212.32 L1435.22 1212.32 L1435.8 1212.32 L1436.39 1212.32 L1436.98 1212.32 L1437.56 1212.32 L1438.15 1212.32 L1438.74 1212.32 L1439.32 1212.32 L1439.91 1212.32 L1440.5 1212.32 L1441.08 1212.32 L1441.67 1212.32 L1442.25 1212.32 L1442.84 1212.32 L1443.43 1212.32 L1444.01 1212.32 L1444.6 1212.32 L1445.19 1212.32 L1445.77 1212.32 L1446.36 1212.32 L1446.95 1212.32 L1447.53 1212.32 L1448.12 1212.32 L1448.7 1212.32 L1449.29 1212.32 L1449.88 1212.32 L1450.46 1212.32 L1451.05 1212.32 L1451.64 1212.32 L1452.22 1212.32 L1452.81 1212.32 L1453.4 1212.32 L1453.98 1212.32 L1454.57 1212.32 L1455.16 1212.32 L1455.74 1212.32 L1456.33 1212.32 L1456.91 1212.32 L1457.5 1212.32 L1458.09 1212.32 L1458.67 1212.32 L1459.26 1212.32 L1459.85 1212.32 L1460.43 1212.32 L1461.02 1212.32 L1461.61 1212.32 L1462.19 1212.32 L1462.78 1212.32 L1463.37 1212.32 L1463.95 1212.32 L1464.54 1212.32 L1465.12 1212.32 L1465.71 1212.32 L1466.3 1212.32 L1466.88 1212.32 L1467.47 1212.32 L1468.06 1212.32 L1468.64 1212.32 L1469.23 1212.32 L1469.82 1212.32 L1470.4 1212.32 L1470.99 1212.32 L1471.57 1212.32 L1472.16 1212.32 L1472.75 1212.32 L1473.33 1212.32 L1473.92 1212.32 L1474.51 1212.32 L1475.09 1212.32 L1475.68 1212.32 L1476.27 1212.32 L1476.85 1212.32 L1477.44 1212.32 L1478.03 1212.32 L1478.61 1212.32 L1479.2 1212.32 L1479.78 1212.32 L1480.37 1212.32 L1480.96 1212.32 L1481.54 1212.32 L1482.13 1212.32 L1482.72 1212.32 L1483.3 1212.32 L1483.89 1212.32 L1484.48 1212.32 L1485.06 1212.32 L1485.65 1212.32 L1486.24 1212.32 L1486.82 1212.32 L1487.41 1212.32 L1487.99 1212.32 L1488.58 1212.32 L1489.17 1212.32 L1489.75 1212.32 L1490.34 1212.32 L1490.93 1212.32 L1491.51 1212.32 L1492.1 1212.32 L1492.69 1212.32 L1493.27 1212.32 L1493.86 1212.32 L1494.45 1212.32 L1495.03 1212.32 L1495.62 1212.32 L1496.2 1212.32 L1496.79 1212.32 L1497.38 1212.32 L1497.96 1212.32 L1498.55 1212.32 L1499.14 1212.32 L1499.72 1212.32 L1500.31 1212.32 L1500.9 1212.32 L1501.48 1212.32 L1502.07 1212.32 L1502.65 1212.32 L1503.24 1212.32 L1503.83 1212.32 L1504.41 1212.32 L1505 1212.32 L1505.59 1212.32 L1506.17 1212.32 L1506.76 1212.32 L1507.35 1212.32 L1507.93 1212.32 L1508.52 1212.32 L1509.11 1212.32 L1509.69 1212.32 L1510.28 1212.32 L1510.86 1212.32 L1511.45 1212.32 L1512.04 1212.32 L1512.62 1212.32 L1513.21 1212.32 L1513.8 1212.32 L1514.38 1212.32 L1514.97 1212.32 L1515.56 1212.32 L1516.14 1212.32 L1516.73 1212.32 L1517.32 1212.32 L1517.9 1212.32 L1518.49 1212.32 L1519.07 1212.32 L1519.66 1212.32 L1520.25 1212.32 L1520.83 1212.32 L1521.42 1212.32 L1522.01 1212.32 L1522.59 1212.32 L1523.18 1212.32 L1523.77 1212.32 L1524.35 1212.32 L1524.94 1212.32 L1525.52 1212.32 L1526.11 1212.32 L1526.7 1212.32 L1527.28 1212.32 L1527.87 1212.32 L1528.46 1212.32 L1529.04 1212.32 L1529.63 1212.32 L1530.22 1212.32 L1530.8 1212.32 L1531.39 1212.32 L1531.98 1212.32 L1532.56 1212.32 L1533.15 1212.32 L1533.73 1212.32 L1534.32 1212.32 L1534.91 1212.32 L1535.49 1212.32 L1536.08 1212.32 L1536.67 1212.32 L1537.25 1212.32 L1537.84 1212.32 L1538.43 1212.32 L1539.01 1212.32 L1539.6 1212.32 L1540.19 1212.32 L1540.77 1212.32 L1541.36 1212.32 L1541.94 1212.32 L1542.53 1212.32 L1543.12 1212.32 L1543.7 1212.32 L1544.29 1212.32 L1544.88 1212.32 L1545.46 1212.32 L1546.05 1212.32 L1546.64 1212.32 L1547.22 1212.32 L1547.81 1212.32 L1548.4 1212.32 L1548.98 1212.32 L1549.57 1212.32 L1550.15 1212.32 L1550.74 1212.32 L1551.33 1212.32 L1551.91 1212.32 L1552.5 1212.32 L1553.09 1212.32 L1553.67 1212.32 L1554.26 1212.32 L1554.85 1212.32 L1555.43 1212.32 L1556.02 1212.32 L1556.6 1212.32 L1557.19 1212.32 L1557.78 1212.32 L1558.36 1212.32 L1558.95 1212.32 L1559.54 1212.32 L1560.12 1212.32 L1560.71 1212.32 L1561.3 1212.32 L1561.88 1212.32 L1562.47 1212.32 L1563.06 1212.32 L1563.64 1212.32 L1564.23 1212.32 L1564.81 1212.32 L1565.4 1212.32 L1565.99 1212.32 L1566.57 1212.32 L1567.16 1212.32 L1567.75 1212.32 L1568.33 1212.32 L1568.92 1212.32 L1569.51 1212.32 L1570.09 1212.32 L1570.68 1212.32 L1571.27 1212.32 L1571.85 1212.32 L1572.44 1212.32 L1573.02 1212.32 L1573.61 1212.32 L1574.2 1212.32 L1574.78 1212.32 L1575.37 1212.32 L1575.96 1212.32 L1576.54 1212.32 L1577.13 1212.32 L1577.72 1212.32 L1578.3 1212.32 L1578.89 1212.32 L1579.47 1212.32 L1580.06 1212.32 L1580.65 1212.32 L1581.23 1212.32 L1581.82 1212.32 L1582.41 1212.32 L1582.99 1212.32 L1583.58 1212.32 L1584.17 1212.32 L1584.75 1212.32 L1585.34 1212.32 L1585.93 1212.32 L1586.51 1212.32 L1587.1 1212.32 L1587.68 1212.32 L1588.27 1212.32 L1588.86 1212.32 L1589.44 1212.32 L1590.03 1212.32 L1590.62 1212.32 L1591.2 1212.32 L1591.79 1212.32 L1592.38 1212.32 L1592.96 1212.32 L1593.55 1212.32 L1594.14 1212.32 L1594.72 1212.32 L1595.31 1212.32 L1595.89 1212.32 L1596.48 1212.32 L1597.07 1212.32 L1597.65 1212.32 L1598.24 1212.32 L1598.83 1212.32 L1599.41 1212.32 L1600 1212.32 L1600.59 1212.32 L1601.17 1212.32 L1601.76 1212.32 L1602.34 1212.32 L1602.93 1212.32 L1603.52 1212.32 L1604.1 1212.32 L1604.69 1212.32 L1605.28 1212.32 L1605.86 1212.32 L1606.45 1212.32 L1607.04 1212.32 L1607.62 1212.32 L1608.21 1212.32 L1608.8 1212.32 L1609.38 1212.32 L1609.97 1212.32 L1610.55 1212.32 L1611.14 1212.32 L1611.73 1212.32 L1612.31 1212.32 L1612.9 1212.32 L1613.49 1212.32 L1614.07 1212.32 L1614.66 1212.32 L1615.25 1212.32 L1615.83 1212.32 L1616.42 1212.32 L1617.01 1212.32 L1617.59 1212.32 L1618.18 1212.32 L1618.76 1212.32 L1619.35 1212.32 L1619.94 1212.32 L1620.52 1212.32 L1621.11 1212.32 L1621.7 1212.32 L1622.28 1212.32 L1622.87 1212.32 L1623.46 1212.32 L1624.04 1212.32 L1624.63 1212.32 L1625.22 1212.32 L1625.8 1212.32 L1626.39 1212.32 L1626.97 1212.32 L1627.56 1212.32 L1628.15 1212.32 L1628.73 1212.32 L1629.32 1212.32 L1629.91 1212.32 L1630.49 1212.32 L1631.08 1212.32 L1631.67 1212.32 L1632.25 1212.32 L1632.84 1212.32 L1633.42 1212.32 L1634.01 1212.32 L1634.6 1212.32 L1635.18 1212.32 L1635.77 1212.32 L1636.36 1212.32 L1636.94 1212.32 L1637.53 1212.32 L1638.12 1212.32 L1638.7 1212.32 L1639.29 1212.32 L1639.88 1212.32 L1640.46 1212.32 L1641.05 1212.32 L1641.63 1212.32 L1642.22 1212.32 L1642.81 1212.32 L1643.39 1212.32 L1643.98 1212.32 L1644.57 1212.32 L1645.15 1212.32 L1645.74 1212.32 L1646.33 1212.32 L1646.91 1212.32 L1647.5 1212.32 L1648.09 1212.32 L1648.67 1212.32 L1649.26 1212.32 L1649.84 1212.32 L1650.43 1212.32 L1651.02 1212.32 L1651.6 1212.32 L1652.19 1212.32 L1652.78 1212.32 L1653.36 1212.32 L1653.95 1212.32 L1654.54 1212.32 L1655.12 1212.32 L1655.71 1212.32 L1656.29 1212.32 L1656.88 1212.32 L1657.47 1212.32 L1658.05 1212.32 L1658.64 1212.32 L1659.23 1212.32 L1659.81 1212.32 L1660.4 1212.32 L1660.99 1212.32 L1661.57 1212.32 L1662.16 1212.32 L1662.75 1212.32 L1663.33 1212.32 L1663.92 1212.32 L1664.5 1212.32 L1665.09 1212.32 L1665.68 1212.32 L1666.26 1212.32 L1666.85 1212.32 L1667.44 1212.32 L1668.02 1212.32 L1668.61 1212.32 L1669.2 1212.32 L1669.78 1212.32 L1670.37 1212.32 L1670.96 1212.32 L1671.54 1212.32 L1672.13 1212.32 L1672.71 1212.32 L1673.3 1212.32 L1673.89 1212.32 L1674.47 1212.32 L1675.06 1212.32 L1675.65 1212.32 L1676.23 1212.32 L1676.82 1212.32 L1677.41 1212.32 L1677.99 1212.32 L1678.58 1212.32 L1679.17 1212.32 L1679.75 1212.32 L1680.34 1212.32 L1680.92 1212.32 L1681.51 1212.32 L1682.1 1212.32 L1682.68 1212.32 L1683.27 1212.32 L1683.86 1212.32 L1684.44 1212.32 L1685.03 1212.32 L1685.62 1212.32 L1686.2 1212.32 L1686.79 1212.32 L1687.37 1212.32 L1687.96 1212.32 L1688.55 1212.32 L1689.13 1212.32 L1689.72 1212.32 L1690.31 1212.32 L1690.89 1212.32 L1691.48 1212.32 L1692.07 1212.32 L1692.65 1212.32 L1693.24 1212.32 L1693.83 1212.32 L1694.41 1212.32 L1695 1212.32 L1695.58 1212.32 L1696.17 1212.32 L1696.76 1212.32 L1697.34 1212.32 L1697.93 1212.32 L1698.52 1212.32 L1699.1 1212.32 L1699.69 1212.32 L1700.28 1212.32 L1700.86 1212.32 L1701.45 1212.32 L1702.04 1212.32 L1702.62 1212.32 L1703.21 1212.32 L1703.79 1212.32 L1704.38 1212.32 L1704.97 1212.32 L1705.55 1212.32 L1706.14 1212.32 L1706.73 1212.32 L1707.31 1212.32 L1707.9 1212.32 L1708.49 1212.32 L1709.07 1212.32 L1709.66 1212.32 L1710.24 1212.32 L1710.83 1212.32 L1711.42 1212.32 L1712 1212.32 L1712.59 1212.32 L1713.18 1212.32 L1713.76 1212.32 L1714.35 1212.32 L1714.94 1212.32 L1715.52 1212.32 L1716.11 1212.32 L1716.7 1212.32 L1717.28 1212.32 L1717.87 1212.32 L1718.45 1212.32 L1719.04 1212.32 L1719.63 1212.32 L1720.21 1212.32 L1720.8 1212.32 L1721.39 1212.32 L1721.97 1212.32 L1722.56 1212.32 L1723.15 1212.32 L1723.73 1212.32 L1724.32 1212.32 L1724.91 1212.32 L1725.49 1212.32 L1726.08 1212.32 L1726.66 1212.32 L1727.25 1212.32 L1727.84 1212.32 L1728.42 1212.32 L1729.01 1212.32 L1729.6 1212.32 L1730.18 1212.32 L1730.77 1212.32 L1731.36 1212.32 L1731.94 1212.32 L1732.53 1212.32 L1733.11 1212.32 L1733.7 1212.32 L1734.29 1212.32 L1734.87 1212.32 L1735.46 1212.32 L1736.05 1212.32 L1736.63 1212.32 L1737.22 1212.32 L1737.81 1212.32 L1738.39 1212.32 L1738.98 1212.32 L1739.57 1212.32 L1740.15 1212.32 L1740.74 1212.32 L1741.32 1212.32 L1741.91 1212.32 L1742.5 1212.32 L1743.08 1212.32 L1743.67 1212.32 L1744.26 1212.32 L1744.84 1212.32 L1745.43 1212.32 L1746.02 1212.32 L1746.6 1212.32 L1747.19 1212.32 L1747.78 1212.32 L1748.36 1212.32 L1748.95 1212.32 L1749.53 1212.32 L1750.12 1212.32 L1750.71 1212.32 L1751.29 1212.32 L1751.88 1212.32 L1752.47 1212.32 L1753.05 1212.32 L1753.64 1212.32 L1754.23 1212.32 L1754.81 1212.32 L1755.4 1212.32 L1755.99 1212.32 L1756.57 1212.32 L1757.16 1212.32 L1757.74 1212.32 L1758.33 1212.32 L1758.92 1212.32 L1759.5 1212.32 L1760.09 1212.32 L1760.68 1212.32 L1761.26 1212.32 L1761.85 1212.32 L1762.44 1212.32 L1763.02 1212.32 L1763.61 1212.32 L1764.19 1212.32 L1764.78 1212.32 L1765.37 1212.32 L1765.95 1212.32 L1766.54 1212.32 L1767.13 1212.32 L1767.71 1212.32 L1768.3 1212.32 L1768.89 1212.32 L1769.47 1212.32 L1770.06 1212.32 L1770.65 1212.32 L1771.23 1212.32 L1771.82 1212.32 L1772.4 1212.32 L1772.99 1212.32 L1773.58 1212.32 L1774.16 1212.32 L1774.75 1212.32 L1775.34 1212.32 L1775.92 1212.32 L1776.51 1212.32 L1777.1 1212.32 L1777.68 1212.32 L1778.27 1212.32 L1778.86 1212.32 L1779.44 1212.32 L1780.03 1212.32 L1780.61 1212.32 L1781.2 1212.32 L1781.79 1212.32 L1782.37 1212.32 L1782.96 1212.32 L1783.55 1212.32 L1784.13 1212.32 L1784.72 1212.32 L1785.31 1212.32 L1785.89 1212.32 L1786.48 1212.32 L1787.06 1212.32 L1787.65 1212.32 L1788.24 1212.32 L1788.82 1212.32 L1789.41 1212.32 L1790 1212.32 L1790.58 1212.32 L1791.17 1212.32 L1791.76 1212.32 L1792.34 1212.32 L1792.93 1212.32 L1793.52 1212.32 L1794.1 1212.32 L1794.69 1212.32 L1795.27 1212.32 L1795.86 1212.32 L1796.45 1212.32 L1797.03 1212.32 L1797.62 1212.32 L1798.21 1212.32 L1798.79 1212.32 L1799.38 1212.32 L1799.97 1212.32 L1800.55 1212.32 L1801.14 1212.32 L1801.73 1212.32 L1802.31 1212.32 L1802.9 1212.32 L1803.48 1212.32 L1804.07 1212.32 L1804.66 1212.32 L1805.24 1212.32 L1805.83 1212.32 L1806.42 1212.32 L1807 1212.32 L1807.59 1212.32 L1808.18 1212.32 L1808.76 1212.32 L1809.35 1212.32 L1809.94 1212.32 L1810.52 1212.32 L1811.11 1212.32 L1811.69 1212.32 L1812.28 1212.32 L1812.87 1212.32 L1813.45 1212.32 L1814.04 1212.32 L1814.63 1212.32 L1815.21 1212.32 L1815.8 1212.32 L1816.39 1212.32 L1816.97 1212.32 L1817.56 1212.32 L1818.14 1212.32 L1818.73 1212.32 L1819.32 1212.32 L1819.9 1212.32 L1820.49 1212.32 L1821.08 1212.32 L1821.66 1212.32 L1822.25 1212.32 L1822.84 1212.32 L1823.42 1212.32 L1824.01 1212.32 L1824.6 1212.32 L1825.18 1212.32 L1825.77 1212.32 L1826.35 1212.32 L1826.94 1212.32 L1827.53 1212.32 L1828.11 1212.32 L1828.7 1212.32 L1829.29 1212.32 L1829.87 1212.32 L1830.46 1212.32 L1831.05 1212.32 L1831.63 1212.32 L1832.22 1212.32 L1832.81 1212.32 L1833.39 1212.32 L1833.98 1212.32 L1834.56 1212.32 L1835.15 1212.32 L1835.74 1212.32 L1836.32 1212.32 L1836.91 1212.32 L1837.5 1212.32 L1838.08 1212.32 L1838.67 1212.32 L1839.26 1212.32 L1839.84 1212.32 L1840.43 1212.32 L1841.01 1212.32 L1841.6 1212.32 L1842.19 1212.32 L1842.77 1212.32 L1843.36 1212.32 L1843.95 1212.32 L1844.53 1212.32 L1845.12 1212.32 L1845.71 1212.32 L1846.29 1212.32 L1846.88 1212.32 L1847.47 1212.32 L1848.05 1212.32 L1848.64 1212.32 L1849.22 1212.32 L1849.81 1212.32 L1850.4 1212.32 L1850.98 1212.32 L1851.57 1212.32 L1852.16 1212.32 L1852.74 1212.32 L1853.33 1212.32 L1853.92 1212.32 L1854.5 1212.32 L1855.09 1212.32 L1855.68 1212.32 L1856.26 1212.32 L1856.85 1212.32 L1857.43 1212.32 L1858.02 1212.32 L1858.61 1212.32 L1859.19 1212.32 L1859.78 1212.32 L1860.37 1212.32 L1860.95 1212.32 L1861.54 1212.32 L1862.13 1212.32 L1862.71 1212.32 L1863.3 1212.32 L1863.88 1212.32 L1864.47 1212.32 L1865.06 1212.32 L1865.64 1212.32 L1866.23 1212.32 L1866.82 1212.32 L1867.4 1212.32 L1867.99 1212.32 L1868.58 1212.32 L1869.16 1212.32 L1869.75 1212.32 L1870.34 1212.32 L1870.92 1212.32 L1871.51 1212.32 L1872.09 1212.32 L1872.68 1212.32 L1873.27 1212.32 L1873.85 1212.32 L1874.44 1212.32 L1875.03 1212.32 L1875.61 1212.32 L1876.2 1212.32 L1876.79 1212.32 L1877.37 1212.32 L1877.96 1212.32 L1878.55 1212.32 L1879.13 1212.32 L1879.72 1212.32 L1880.3 1212.32 L1880.89 1212.32 L1881.48 1212.32 L1882.06 1212.32 L1882.65 1212.32 L1883.24 1212.32 L1883.82 1212.32 L1884.41 1212.32 L1885 1212.32 L1885.58 1212.32 L1886.17 1212.32 L1886.76 1212.32 L1887.34 1212.32 L1887.93 1212.32 L1888.51 1212.32 L1889.1 1212.32 L1889.69 1212.32 L1890.27 1212.32 L1890.86 1212.32 L1891.45 1212.32 L1892.03 1212.32 L1892.62 1212.32 L1893.21 1212.32 L1893.79 1212.32 L1894.38 1212.32 L1894.96 1212.32 L1895.55 1212.32 L1896.14 1212.32 L1896.72 1212.32 L1897.31 1212.32 L1897.9 1212.32 L1898.48 1212.32 L1899.07 1212.32 L1899.66 1212.32 L1900.24 1212.32 L1900.83 1212.32 L1901.42 1212.32 L1902 1212.32 L1902.59 1212.32 L1903.17 1212.32 L1903.76 1212.32 L1904.35 1212.32 L1904.93 1212.32 L1905.52 1212.32 L1906.11 1212.32 L1906.69 1212.32 L1907.28 1212.32 L1907.87 1212.32 L1908.45 1212.32 L1909.04 1212.32 L1909.63 1212.32 L1910.21 1212.32 L1910.8 1212.32 L1911.38 1212.32 L1911.97 1212.32 L1912.56 1212.32 L1913.14 1212.32 L1913.73 1212.32 L1914.32 1212.32 L1914.9 1212.32 L1915.49 1212.32 L1916.08 1212.32 L1916.66 1212.32 L1917.25 1212.32 L1917.83 1212.32 L1918.42 1212.32 L1919.01 1212.32 L1919.59 1212.32 L1920.18 1212.32 L1920.77 1212.32 L1921.35 1212.32 L1921.94 1212.32 L1922.53 1212.32 L1923.11 1212.32 L1923.7 1212.32 L1924.29 1212.32 L1924.87 1212.32 L1925.46 1212.32 L1926.04 1212.32 L1926.63 1212.32 L1927.22 1212.32 L1927.8 1212.32 L1928.39 1212.32 L1928.98 1212.32 L1929.56 1212.32 L1930.15 1212.32 L1930.74 1212.32 L1931.32 1212.32 L1931.91 1212.32 L1932.5 1212.32 L1933.08 1212.32 L1933.67 1212.32 L1934.25 1212.32 L1934.84 1212.32 L1935.43 1212.32 L1936.01 1212.32 L1936.6 1212.32 L1937.19 1212.32 L1937.77 1212.32 L1938.36 1212.32 L1938.95 1212.32 L1939.53 1212.32 L1940.12 1212.32 L1940.71 1212.32 L1941.29 1212.32 L1941.88 1212.32 L1942.46 1212.32 L1943.05 1212.32 L1943.64 1212.32 L1944.22 1212.32 L1944.81 1212.32 L1945.4 1212.32 L1945.98 1212.32 L1946.57 1212.32 L1947.16 1212.32 L1947.74 1212.32 L1948.33 1212.32 L1948.91 1212.32 L1949.5 1212.32 L1950.09 1212.32 L1950.67 1212.32 L1951.26 1212.32 L1951.85 1212.32 L1952.43 1212.32 L1953.02 1212.32 L1953.61 1212.32 L1954.19 1212.32 L1954.78 1212.32 L1955.37 1212.32 L1955.95 1212.32 L1956.54 1212.32 L1957.12 1212.32 L1957.71 1212.32 L1958.3 1212.32 L1958.88 1212.32 L1959.47 1212.32 L1960.06 1212.32 L1960.64 1212.32 L1961.23 1212.32 L1961.82 1212.32 L1962.4 1212.32 L1962.99 1212.32 L1963.58 1212.32 L1964.16 1212.32 L1964.75 1212.32 L1965.33 1212.32 L1965.92 1212.32 L1966.51 1212.32 L1967.09 1212.32 L1967.68 1212.32 L1968.27 1212.32 L1968.85 1212.32 L1969.44 1212.32 L1970.03 1212.32 L1970.61 1212.32 L1971.2 1212.32 L1971.78 1212.32 L1972.37 1212.32 L1972.96 1212.32 L1973.54 1212.32 L1974.13 1212.32 L1974.72 1212.32 L1975.3 1212.32 L1975.89 1212.32 L1976.48 1212.32 L1977.06 1212.32 L1977.65 1212.32 L1978.24 1212.32 L1978.82 1212.32 L1979.41 1212.32 L1979.99 1212.32 L1980.58 1212.32 L1981.17 1212.32 L1981.75 1212.32 L1982.34 1212.32 L1982.93 1212.32 L1983.51 1212.32 L1984.1 1212.32 L1984.69 1212.32 L1985.27 1212.32 L1985.86 1212.32 L1986.45 1212.32 L1987.03 1212.32 L1987.62 1212.32 L1988.2 1212.32 L1988.79 1212.32 L1989.38 1212.32 L1989.96 1212.32 L1990.55 1212.32 L1991.14 1212.32 L1991.72 1212.32 L1992.31 1212.32 L1992.9 1212.32 L1993.48 1212.32 L1994.07 1212.32 L1994.65 1212.32 L1995.24 1212.32 L1995.83 1212.32 L1996.41 1212.32 L1997 1212.32 L1997.59 1212.32 L1998.17 1212.32 L1998.76 1212.32 L1999.35 1212.32 L1999.93 1212.32 L2000.52 1212.32 L2001.11 1212.32 L2001.69 1212.32 L2002.28 1212.32 L2002.86 1212.32 L2003.45 1212.32 L2004.04 1212.32 L2004.62 1212.32 L2005.21 1212.32 L2005.8 1212.32 L2006.38 1212.32 L2006.97 1212.32 L2007.56 1212.32 L2008.14 1212.32 L2008.73 1212.32 L2009.32 1212.32 L2009.9 1212.32 L2010.49 1212.32 L2011.07 1212.32 L2011.66 1212.32 L2012.25 1212.32 L2012.83 1212.32 L2013.42 1212.32 L2014.01 1212.32 L2014.59 1212.32 L2015.18 1212.32 L2015.77 1212.32 L2016.35 1212.32 L2016.94 1212.32 L2017.53 1212.32 L2018.11 1212.32 L2018.7 1212.32 L2019.28 1212.32 L2019.87 1212.32 L2020.46 1212.32 L2021.04 1212.32 L2021.63 1212.32 L2022.22 1212.32 L2022.8 1212.32 L2023.39 1212.32 L2023.98 1212.32 L2024.56 1212.32 L2025.15 1212.32 L2025.73 1212.32 L2026.32 1212.32 L2026.91 1212.32 L2027.49 1212.32 L2028.08 1212.32 L2028.67 1212.32 L2029.25 1212.32 L2029.84 1212.32 L2030.43 1212.32 L2031.01 1212.32 L2031.6 1212.32 L2032.19 1212.32 L2032.77 1212.32 L2033.36 1212.32 L2033.94 1212.32 L2034.53 1212.32 L2035.12 1212.32 L2035.7 1212.32 L2036.29 1212.32 L2036.88 1212.32 L2037.46 1212.32 L2038.05 1212.32 L2038.64 1212.32 L2039.22 1212.32 L2039.81 1212.32 L2040.4 1212.32 L2040.98 1212.32 L2041.57 1212.32 L2042.15 1212.32 L2042.74 1212.32 L2043.33 1212.32 L2043.91 1212.32 L2044.5 1212.32 L2045.09 1212.32 L2045.67 1212.32 L2046.26 1212.32 L2046.85 1212.32 L2047.43 1212.32 L2048.02 1212.32 L2048.6 1212.32 L2049.19 1212.32 L2049.78 1212.32 L2050.36 1212.32 L2050.95 1212.32 L2051.54 1212.32 L2052.12 1212.32 L2052.71 1212.32 L2053.3 1212.32 L2053.88 1212.32 L2054.47 1212.32 L2055.06 1212.32 L2055.64 1212.32 L2056.23 1212.32 L2056.81 1212.32 L2057.4 1212.32 L2057.99 1212.32 L2058.57 1212.32 L2059.16 1212.32 L2059.75 1212.32 L2060.33 1212.32 L2060.92 1212.32 L2061.51 1212.32 L2062.09 1212.32 L2062.68 1212.32 L2063.27 1212.32 L2063.85 1212.32 L2064.44 1212.32 L2065.02 1212.32 L2065.61 1212.32 L2066.2 1212.32 L2066.78 1212.32 L2067.37 1212.32 L2067.96 1212.32 L2068.54 1212.32 L2069.13 1212.32 L2069.72 1212.32 L2070.3 1212.32 L2070.89 1212.32 L2071.48 1212.32 L2072.06 1212.32 L2072.65 1212.32 L2073.23 1212.32 L2073.82 1212.32 L2074.41 1212.32 L2074.99 1212.32 L2075.58 1212.32 L2076.17 1212.32 L2076.75 1212.32 L2077.34 1212.32 L2077.93 1212.32 L2078.51 1212.32 L2079.1 1212.32 L2079.68 1212.32 L2080.27 1212.32 L2080.86 1212.32 L2081.44 1212.32 L2082.03 1212.32 L2082.62 1212.32 L2083.2 1212.32 L2083.79 1212.32 L2084.38 1212.32 L2084.96 1212.32 L2085.55 1212.32 L2086.14 1212.32 L2086.72 1212.32 L2087.31 1212.32 L2087.89 1212.32 L2088.48 1212.32 L2089.07 1212.32 L2089.65 1212.32 L2090.24 1212.32 L2090.83 1212.32 L2091.41 1212.32 L2092 1212.32 L2092.59 1212.32 L2093.17 1212.32 L2093.76 1212.32 L2094.35 1212.32 L2094.93 1212.32 L2095.52 1212.32 L2096.1 1212.32 L2096.69 1212.32 L2097.28 1212.32 L2097.86 1212.32 L2098.45 1212.32 L2099.04 1212.32 L2099.62 1212.32 L2100.21 1212.32 L2100.8 1212.32 L2101.38 1212.32 L2101.97 1212.32 L2102.55 1212.32 L2103.14 1212.32 L2103.73 1212.32 L2104.31 1212.32 L2104.9 1212.32 L2105.49 1212.32 L2106.07 1212.32 L2106.66 1212.32 L2107.25 1212.32 L2107.83 1212.32 L2108.42 1212.32 L2109.01 1212.32 L2109.59 1212.32 L2110.18 1212.32 L2110.76 1212.32 L2111.35 1212.32 L2111.94 1212.32 L2112.52 1212.32 L2113.11 1212.32 L2113.7 1212.32 L2114.28 1212.32 L2114.87 1212.32 L2115.46 1212.32 L2116.04 1212.32 L2116.63 1212.32 L2117.22 1212.32 L2117.8 1212.32 L2118.39 1212.32 L2118.97 1212.32 L2119.56 1212.32 L2120.15 1212.32 L2120.73 1212.32 L2121.32 1212.32 L2121.91 1212.32 L2122.49 1212.32 L2123.08 1212.32 L2123.67 1212.32 L2124.25 1212.32 L2124.84 1212.32 L2125.42 1212.32 L2126.01 1212.32 L2126.6 1212.32 L2127.18 1212.32 L2127.77 1212.32 L2128.36 1212.32 L2128.94 1212.32 L2129.53 1212.32 L2130.12 1212.32 L2130.7 1212.32 L2131.29 1212.32 L2131.88 1212.32 L2132.46 1212.32 L2133.05 1212.32 L2133.63 1212.32 L2134.22 1212.32 L2134.81 1212.32 L2135.39 1212.32 L2135.98 1212.32 L2136.57 1212.32 L2137.15 1212.32 L2137.74 1212.32 L2138.33 1212.32 L2138.91 1212.32 L2139.5 1212.32 L2140.09 1212.32 L2140.67 1212.32 L2141.26 1212.32 L2141.84 1212.32 L2142.43 1212.32 L2143.02 1212.32 L2143.6 1212.32 L2144.19 1212.32 L2144.78 1212.32 L2145.36 1212.32 L2145.95 1212.32 L2146.54 1212.32 L2147.12 1212.32 L2147.71 1212.32 L2148.3 1212.32 L2148.88 1212.32 L2149.47 1212.32 L2150.05 1212.32 L2150.64 1212.32 L2151.23 1212.32 L2151.81 1212.32 L2152.4 1212.32 L2152.99 1212.32 L2153.57 1212.32 L2154.16 1212.32 L2154.75 1212.32 L2155.33 1212.32 L2155.92 1212.32 L2156.5 1212.32 L2157.09 1212.32 L2157.68 1212.32 L2158.26 1212.32 L2158.26 1212.19 L2157.68 1212.19 L2157.09 1212.19 L2156.5 1212.19 L2155.92 1212.19 L2155.33 1212.19 L2154.75 1212.19 L2154.16 1212.19 L2153.57 1212.19 L2152.99 1212.19 L2152.4 1212.19 L2151.81 1212.19 L2151.23 1212.19 L2150.64 1212.19 L2150.05 1212.19 L2149.47 1212.19 L2148.88 1212.19 L2148.3 1212.19 L2147.71 1212.19 L2147.12 1212.19 L2146.54 1212.19 L2145.95 1212.19 L2145.36 1212.19 L2144.78 1212.19 L2144.19 1212.19 L2143.6 1212.19 L2143.02 1212.19 L2142.43 1212.19 L2141.84 1212.19 L2141.26 1212.19 L2140.67 1212.19 L2140.09 1212.19 L2139.5 1212.19 L2138.91 1212.19 L2138.33 1212.19 L2137.74 1212.19 L2137.15 1212.19 L2136.57 1212.19 L2135.98 1212.19 L2135.39 1212.19 L2134.81 1212.19 L2134.22 1212.19 L2133.63 1212.19 L2133.05 1212.19 L2132.46 1212.19 L2131.88 1212.19 L2131.29 1212.19 L2130.7 1212.19 L2130.12 1212.19 L2129.53 1212.19 L2128.94 1212.19 L2128.36 1212.19 L2127.77 1212.19 L2127.18 1212.19 L2126.6 1212.19 L2126.01 1212.19 L2125.42 1212.19 L2124.84 1212.19 L2124.25 1212.19 L2123.67 1212.19 L2123.08 1212.19 L2122.49 1212.19 L2121.91 1212.19 L2121.32 1212.19 L2120.73 1212.19 L2120.15 1212.19 L2119.56 1212.19 L2118.97 1212.19 L2118.39 1212.19 L2117.8 1212.19 L2117.22 1212.19 L2116.63 1212.19 L2116.04 1212.19 L2115.46 1212.19 L2114.87 1212.19 L2114.28 1212.19 L2113.7 1212.19 L2113.11 1212.19 L2112.52 1212.19 L2111.94 1212.19 L2111.35 1212.19 L2110.76 1212.19 L2110.18 1212.19 L2109.59 1212.19 L2109.01 1212.19 L2108.42 1212.19 L2107.83 1212.19 L2107.25 1212.19 L2106.66 1212.19 L2106.07 1212.19 L2105.49 1212.19 L2104.9 1212.19 L2104.31 1212.19 L2103.73 1212.19 L2103.14 1212.19 L2102.55 1212.19 L2101.97 1212.19 L2101.38 1212.19 L2100.8 1212.19 L2100.21 1212.19 L2099.62 1212.19 L2099.04 1212.19 L2098.45 1212.19 L2097.86 1212.19 L2097.28 1212.19 L2096.69 1212.19 L2096.1 1212.19 L2095.52 1212.19 L2094.93 1212.19 L2094.35 1212.19 L2093.76 1212.19 L2093.17 1212.19 L2092.59 1212.19 L2092 1212.19 L2091.41 1212.19 L2090.83 1212.19 L2090.24 1212.19 L2089.65 1212.19 L2089.07 1212.19 L2088.48 1212.19 L2087.89 1212.19 L2087.31 1212.19 L2086.72 1212.19 L2086.14 1212.19 L2085.55 1212.19 L2084.96 1212.19 L2084.38 1212.19 L2083.79 1212.19 L2083.2 1212.19 L2082.62 1212.19 L2082.03 1212.19 L2081.44 1212.19 L2080.86 1212.19 L2080.27 1212.19 L2079.68 1212.19 L2079.1 1212.19 L2078.51 1212.19 L2077.93 1212.19 L2077.34 1212.19 L2076.75 1212.19 L2076.17 1212.19 L2075.58 1212.19 L2074.99 1212.19 L2074.41 1212.19 L2073.82 1212.19 L2073.23 1212.19 L2072.65 1212.19 L2072.06 1212.19 L2071.48 1212.19 L2070.89 1212.19 L2070.3 1212.19 L2069.72 1212.19 L2069.13 1212.19 L2068.54 1212.19 L2067.96 1212.19 L2067.37 1212.19 L2066.78 1212.19 L2066.2 1212.19 L2065.61 1212.19 L2065.02 1212.19 L2064.44 1212.19 L2063.85 1212.19 L2063.27 1212.19 L2062.68 1212.19 L2062.09 1212.19 L2061.51 1212.19 L2060.92 1212.19 L2060.33 1212.19 L2059.75 1212.19 L2059.16 1212.19 L2058.57 1212.19 L2057.99 1212.19 L2057.4 1212.19 L2056.81 1212.19 L2056.23 1212.19 L2055.64 1212.19 L2055.06 1212.19 L2054.47 1212.19 L2053.88 1212.19 L2053.3 1212.19 L2052.71 1212.19 L2052.12 1212.19 L2051.54 1212.19 L2050.95 1212.19 L2050.36 1212.19 L2049.78 1212.19 L2049.19 1212.19 L2048.6 1212.19 L2048.02 1212.19 L2047.43 1212.19 L2046.85 1212.19 L2046.26 1212.19 L2045.67 1212.19 L2045.09 1212.19 L2044.5 1212.19 L2043.91 1212.19 L2043.33 1212.19 L2042.74 1212.19 L2042.15 1212.19 L2041.57 1212.19 L2040.98 1212.19 L2040.4 1212.19 L2039.81 1212.19 L2039.22 1212.19 L2038.64 1212.19 L2038.05 1212.19 L2037.46 1212.19 L2036.88 1212.19 L2036.29 1212.19 L2035.7 1212.19 L2035.12 1212.19 L2034.53 1212.19 L2033.94 1212.19 L2033.36 1212.19 L2032.77 1212.19 L2032.19 1212.19 L2031.6 1212.19 L2031.01 1212.19 L2030.43 1212.19 L2029.84 1212.19 L2029.25 1212.19 L2028.67 1212.19 L2028.08 1212.19 L2027.49 1212.19 L2026.91 1212.19 L2026.32 1212.19 L2025.73 1212.19 L2025.15 1212.19 L2024.56 1212.19 L2023.98 1212.19 L2023.39 1212.19 L2022.8 1212.19 L2022.22 1212.19 L2021.63 1212.19 L2021.04 1212.19 L2020.46 1212.19 L2019.87 1212.19 L2019.28 1212.19 L2018.7 1212.19 L2018.11 1212.19 L2017.53 1212.19 L2016.94 1212.19 L2016.35 1212.19 L2015.77 1212.19 L2015.18 1212.19 L2014.59 1212.19 L2014.01 1212.19 L2013.42 1212.19 L2012.83 1212.19 L2012.25 1212.19 L2011.66 1212.19 L2011.07 1212.19 L2010.49 1212.19 L2009.9 1212.19 L2009.32 1212.19 L2008.73 1212.19 L2008.14 1212.19 L2007.56 1212.19 L2006.97 1212.19 L2006.38 1212.19 L2005.8 1212.19 L2005.21 1212.19 L2004.62 1212.19 L2004.04 1212.19 L2003.45 1212.19 L2002.86 1212.19 L2002.28 1212.19 L2001.69 1212.19 L2001.11 1212.19 L2000.52 1212.19 L1999.93 1212.19 L1999.35 1212.19 L1998.76 1212.19 L1998.17 1212.19 L1997.59 1212.19 L1997 1212.19 L1996.41 1212.19 L1995.83 1212.19 L1995.24 1212.19 L1994.65 1212.19 L1994.07 1212.19 L1993.48 1212.19 L1992.9 1212.19 L1992.31 1212.19 L1991.72 1212.19 L1991.14 1212.19 L1990.55 1212.19 L1989.96 1212.19 L1989.38 1212.19 L1988.79 1212.19 L1988.2 1212.19 L1987.62 1212.19 L1987.03 1212.19 L1986.45 1212.19 L1985.86 1212.19 L1985.27 1212.19 L1984.69 1212.19 L1984.1 1212.19 L1983.51 1212.19 L1982.93 1212.19 L1982.34 1212.19 L1981.75 1212.19 L1981.17 1212.19 L1980.58 1212.19 L1979.99 1212.19 L1979.41 1212.19 L1978.82 1212.19 L1978.24 1212.19 L1977.65 1212.19 L1977.06 1212.19 L1976.48 1212.19 L1975.89 1212.19 L1975.3 1212.19 L1974.72 1212.19 L1974.13 1212.19 L1973.54 1212.19 L1972.96 1212.19 L1972.37 1212.19 L1971.78 1212.19 L1971.2 1212.19 L1970.61 1212.19 L1970.03 1212.19 L1969.44 1212.19 L1968.85 1212.19 L1968.27 1212.19 L1967.68 1212.19 L1967.09 1212.19 L1966.51 1212.19 L1965.92 1212.19 L1965.33 1212.19 L1964.75 1212.19 L1964.16 1212.19 L1963.58 1212.19 L1962.99 1212.19 L1962.4 1212.19 L1961.82 1212.19 L1961.23 1212.19 L1960.64 1212.19 L1960.06 1212.19 L1959.47 1212.19 L1958.88 1212.19 L1958.3 1212.19 L1957.71 1212.19 L1957.12 1212.19 L1956.54 1212.19 L1955.95 1212.19 L1955.37 1212.19 L1954.78 1212.19 L1954.19 1212.19 L1953.61 1212.19 L1953.02 1212.19 L1952.43 1212.19 L1951.85 1212.19 L1951.26 1212.19 L1950.67 1212.19 L1950.09 1212.19 L1949.5 1212.19 L1948.91 1212.19 L1948.33 1212.19 L1947.74 1212.19 L1947.16 1212.19 L1946.57 1212.19 L1945.98 1212.19 L1945.4 1212.19 L1944.81 1212.19 L1944.22 1212.19 L1943.64 1212.19 L1943.05 1212.19 L1942.46 1212.19 L1941.88 1212.19 L1941.29 1212.19 L1940.71 1212.19 L1940.12 1212.19 L1939.53 1212.19 L1938.95 1212.19 L1938.36 1212.19 L1937.77 1212.19 L1937.19 1212.19 L1936.6 1212.19 L1936.01 1212.19 L1935.43 1212.19 L1934.84 1212.19 L1934.25 1212.19 L1933.67 1212.19 L1933.08 1212.19 L1932.5 1212.19 L1931.91 1212.19 L1931.32 1212.19 L1930.74 1212.19 L1930.15 1212.19 L1929.56 1212.19 L1928.98 1212.19 L1928.39 1212.19 L1927.8 1212.19 L1927.22 1212.19 L1926.63 1212.19 L1926.04 1212.19 L1925.46 1212.19 L1924.87 1212.19 L1924.29 1212.19 L1923.7 1212.19 L1923.11 1212.19 L1922.53 1212.19 L1921.94 1212.19 L1921.35 1212.19 L1920.77 1212.19 L1920.18 1212.19 L1919.59 1212.19 L1919.01 1212.19 L1918.42 1212.19 L1917.83 1212.19 L1917.25 1212.19 L1916.66 1212.19 L1916.08 1212.19 L1915.49 1212.19 L1914.9 1212.19 L1914.32 1212.19 L1913.73 1212.19 L1913.14 1212.19 L1912.56 1212.19 L1911.97 1212.19 L1911.38 1212.19 L1910.8 1212.19 L1910.21 1212.19 L1909.63 1212.19 L1909.04 1212.19 L1908.45 1212.19 L1907.87 1212.19 L1907.28 1212.19 L1906.69 1212.19 L1906.11 1212.19 L1905.52 1212.19 L1904.93 1212.19 L1904.35 1212.19 L1903.76 1212.19 L1903.17 1212.19 L1902.59 1212.19 L1902 1212.19 L1901.42 1212.19 L1900.83 1212.19 L1900.24 1212.19 L1899.66 1212.19 L1899.07 1212.19 L1898.48 1212.19 L1897.9 1212.19 L1897.31 1212.19 L1896.72 1212.19 L1896.14 1212.19 L1895.55 1212.19 L1894.96 1212.19 L1894.38 1212.19 L1893.79 1212.19 L1893.21 1212.19 L1892.62 1212.19 L1892.03 1212.19 L1891.45 1212.19 L1890.86 1212.19 L1890.27 1212.19 L1889.69 1212.19 L1889.1 1212.19 L1888.51 1212.19 L1887.93 1212.19 L1887.34 1212.19 L1886.76 1212.19 L1886.17 1212.19 L1885.58 1212.19 L1885 1212.19 L1884.41 1212.19 L1883.82 1212.19 L1883.24 1212.19 L1882.65 1212.19 L1882.06 1212.19 L1881.48 1212.19 L1880.89 1212.19 L1880.3 1212.19 L1879.72 1212.19 L1879.13 1212.19 L1878.55 1212.19 L1877.96 1212.19 L1877.37 1212.19 L1876.79 1212.19 L1876.2 1212.19 L1875.61 1212.19 L1875.03 1212.19 L1874.44 1212.19 L1873.85 1212.19 L1873.27 1212.19 L1872.68 1212.19 L1872.09 1212.19 L1871.51 1212.19 L1870.92 1212.19 L1870.34 1212.19 L1869.75 1212.19 L1869.16 1212.19 L1868.58 1212.19 L1867.99 1212.19 L1867.4 1212.19 L1866.82 1212.19 L1866.23 1212.19 L1865.64 1212.19 L1865.06 1212.19 L1864.47 1212.19 L1863.88 1212.19 L1863.3 1212.19 L1862.71 1212.19 L1862.13 1212.19 L1861.54 1212.19 L1860.95 1212.19 L1860.37 1212.19 L1859.78 1212.19 L1859.19 1212.19 L1858.61 1212.19 L1858.02 1212.19 L1857.43 1212.19 L1856.85 1212.19 L1856.26 1212.19 L1855.68 1212.19 L1855.09 1212.19 L1854.5 1212.19 L1853.92 1212.19 L1853.33 1212.19 L1852.74 1212.19 L1852.16 1212.19 L1851.57 1212.19 L1850.98 1212.19 L1850.4 1212.19 L1849.81 1212.19 L1849.22 1212.19 L1848.64 1212.19 L1848.05 1212.19 L1847.47 1212.19 L1846.88 1212.19 L1846.29 1212.19 L1845.71 1212.19 L1845.12 1212.19 L1844.53 1212.19 L1843.95 1212.19 L1843.36 1212.19 L1842.77 1212.19 L1842.19 1212.19 L1841.6 1212.19 L1841.01 1212.19 L1840.43 1212.19 L1839.84 1212.19 L1839.26 1212.19 L1838.67 1212.19 L1838.08 1212.19 L1837.5 1212.19 L1836.91 1212.19 L1836.32 1212.19 L1835.74 1212.19 L1835.15 1212.19 L1834.56 1212.19 L1833.98 1212.19 L1833.39 1212.19 L1832.81 1212.19 L1832.22 1212.19 L1831.63 1212.19 L1831.05 1212.19 L1830.46 1212.19 L1829.87 1212.19 L1829.29 1212.19 L1828.7 1212.19 L1828.11 1212.19 L1827.53 1212.19 L1826.94 1212.19 L1826.35 1212.19 L1825.77 1212.19 L1825.18 1212.19 L1824.6 1212.19 L1824.01 1212.19 L1823.42 1212.19 L1822.84 1212.19 L1822.25 1212.19 L1821.66 1212.19 L1821.08 1212.19 L1820.49 1212.19 L1819.9 1212.19 L1819.32 1212.19 L1818.73 1212.19 L1818.14 1212.19 L1817.56 1212.19 L1816.97 1212.19 L1816.39 1212.19 L1815.8 1212.19 L1815.21 1212.19 L1814.63 1212.19 L1814.04 1212.19 L1813.45 1212.19 L1812.87 1212.19 L1812.28 1212.19 L1811.69 1212.19 L1811.11 1212.19 L1810.52 1212.19 L1809.94 1212.19 L1809.35 1212.19 L1808.76 1212.19 L1808.18 1212.19 L1807.59 1212.19 L1807 1212.19 L1806.42 1212.19 L1805.83 1212.19 L1805.24 1212.19 L1804.66 1212.19 L1804.07 1212.19 L1803.48 1212.19 L1802.9 1212.19 L1802.31 1212.19 L1801.73 1212.19 L1801.14 1212.19 L1800.55 1212.19 L1799.97 1212.19 L1799.38 1212.19 L1798.79 1212.19 L1798.21 1212.19 L1797.62 1212.19 L1797.03 1212.19 L1796.45 1212.19 L1795.86 1212.19 L1795.27 1212.19 L1794.69 1212.19 L1794.1 1212.19 L1793.52 1212.19 L1792.93 1212.19 L1792.34 1212.19 L1791.76 1212.19 L1791.17 1212.19 L1790.58 1212.19 L1790 1212.19 L1789.41 1212.19 L1788.82 1212.19 L1788.24 1212.19 L1787.65 1212.19 L1787.06 1212.19 L1786.48 1212.19 L1785.89 1212.19 L1785.31 1212.19 L1784.72 1212.19 L1784.13 1212.19 L1783.55 1212.19 L1782.96 1212.19 L1782.37 1212.19 L1781.79 1212.19 L1781.2 1212.19 L1780.61 1212.19 L1780.03 1212.19 L1779.44 1212.19 L1778.86 1212.19 L1778.27 1212.19 L1777.68 1212.19 L1777.1 1212.19 L1776.51 1212.19 L1775.92 1212.19 L1775.34 1212.19 L1774.75 1212.19 L1774.16 1212.19 L1773.58 1212.19 L1772.99 1212.19 L1772.4 1212.19 L1771.82 1212.19 L1771.23 1212.19 L1770.65 1212.19 L1770.06 1212.19 L1769.47 1212.19 L1768.89 1212.19 L1768.3 1212.19 L1767.71 1212.19 L1767.13 1212.19 L1766.54 1212.19 L1765.95 1212.19 L1765.37 1212.19 L1764.78 1212.19 L1764.19 1212.19 L1763.61 1212.19 L1763.02 1212.19 L1762.44 1212.19 L1761.85 1212.19 L1761.26 1212.19 L1760.68 1212.19 L1760.09 1212.19 L1759.5 1212.19 L1758.92 1212.19 L1758.33 1212.19 L1757.74 1212.19 L1757.16 1212.19 L1756.57 1212.19 L1755.99 1212.19 L1755.4 1212.19 L1754.81 1212.19 L1754.23 1212.19 L1753.64 1212.19 L1753.05 1212.19 L1752.47 1212.19 L1751.88 1212.19 L1751.29 1212.19 L1750.71 1212.19 L1750.12 1212.19 L1749.53 1212.19 L1748.95 1212.19 L1748.36 1212.19 L1747.78 1212.19 L1747.19 1212.19 L1746.6 1212.19 L1746.02 1212.19 L1745.43 1212.19 L1744.84 1212.19 L1744.26 1212.19 L1743.67 1212.19 L1743.08 1212.19 L1742.5 1212.19 L1741.91 1212.19 L1741.32 1212.19 L1740.74 1212.19 L1740.15 1212.19 L1739.57 1212.19 L1738.98 1212.19 L1738.39 1212.19 L1737.81 1212.19 L1737.22 1212.19 L1736.63 1212.19 L1736.05 1212.19 L1735.46 1212.19 L1734.87 1212.19 L1734.29 1212.19 L1733.7 1212.19 L1733.11 1212.19 L1732.53 1212.19 L1731.94 1212.19 L1731.36 1212.19 L1730.77 1212.19 L1730.18 1212.19 L1729.6 1212.19 L1729.01 1212.19 L1728.42 1212.19 L1727.84 1212.19 L1727.25 1212.19 L1726.66 1212.19 L1726.08 1212.19 L1725.49 1212.19 L1724.91 1212.19 L1724.32 1212.19 L1723.73 1212.19 L1723.15 1212.19 L1722.56 1212.19 L1721.97 1212.19 L1721.39 1212.19 L1720.8 1212.19 L1720.21 1212.19 L1719.63 1212.19 L1719.04 1212.19 L1718.45 1212.19 L1717.87 1212.19 L1717.28 1212.19 L1716.7 1212.19 L1716.11 1212.19 L1715.52 1212.19 L1714.94 1212.19 L1714.35 1212.19 L1713.76 1212.19 L1713.18 1212.19 L1712.59 1212.19 L1712 1212.19 L1711.42 1212.19 L1710.83 1212.19 L1710.24 1212.19 L1709.66 1212.19 L1709.07 1212.19 L1708.49 1212.19 L1707.9 1212.19 L1707.31 1212.19 L1706.73 1212.19 L1706.14 1212.19 L1705.55 1212.19 L1704.97 1212.19 L1704.38 1212.19 L1703.79 1212.19 L1703.21 1212.19 L1702.62 1212.19 L1702.04 1212.19 L1701.45 1212.19 L1700.86 1212.19 L1700.28 1212.19 L1699.69 1212.19 L1699.1 1212.19 L1698.52 1212.19 L1697.93 1212.19 L1697.34 1212.19 L1696.76 1212.19 L1696.17 1212.19 L1695.58 1212.19 L1695 1212.19 L1694.41 1212.19 L1693.83 1212.19 L1693.24 1212.19 L1692.65 1212.19 L1692.07 1212.19 L1691.48 1212.19 L1690.89 1212.19 L1690.31 1212.19 L1689.72 1212.19 L1689.13 1212.19 L1688.55 1212.19 L1687.96 1212.19 L1687.37 1212.19 L1686.79 1212.19 L1686.2 1212.19 L1685.62 1212.19 L1685.03 1212.19 L1684.44 1212.19 L1683.86 1212.19 L1683.27 1212.19 L1682.68 1212.19 L1682.1 1212.19 L1681.51 1212.19 L1680.92 1212.19 L1680.34 1212.19 L1679.75 1212.19 L1679.17 1212.19 L1678.58 1212.19 L1677.99 1212.19 L1677.41 1212.19 L1676.82 1212.19 L1676.23 1212.19 L1675.65 1212.19 L1675.06 1212.19 L1674.47 1212.19 L1673.89 1212.19 L1673.3 1212.19 L1672.71 1212.19 L1672.13 1212.19 L1671.54 1212.19 L1670.96 1212.19 L1670.37 1212.19 L1669.78 1212.19 L1669.2 1212.19 L1668.61 1212.19 L1668.02 1212.19 L1667.44 1212.19 L1666.85 1212.19 L1666.26 1212.19 L1665.68 1212.19 L1665.09 1212.19 L1664.5 1212.19 L1663.92 1212.19 L1663.33 1212.19 L1662.75 1212.19 L1662.16 1212.19 L1661.57 1212.19 L1660.99 1212.19 L1660.4 1212.19 L1659.81 1212.19 L1659.23 1212.19 L1658.64 1212.19 L1658.05 1212.19 L1657.47 1212.19 L1656.88 1212.19 L1656.29 1212.19 L1655.71 1212.19 L1655.12 1212.19 L1654.54 1212.19 L1653.95 1212.19 L1653.36 1212.19 L1652.78 1212.19 L1652.19 1212.19 L1651.6 1212.19 L1651.02 1212.19 L1650.43 1212.19 L1649.84 1212.19 L1649.26 1212.19 L1648.67 1212.19 L1648.09 1212.19 L1647.5 1212.19 L1646.91 1212.19 L1646.33 1212.19 L1645.74 1212.19 L1645.15 1212.19 L1644.57 1212.19 L1643.98 1212.19 L1643.39 1212.19 L1642.81 1212.19 L1642.22 1212.19 L1641.63 1212.19 L1641.05 1212.19 L1640.46 1212.19 L1639.88 1212.19 L1639.29 1212.19 L1638.7 1212.19 L1638.12 1212.19 L1637.53 1212.19 L1636.94 1212.19 L1636.36 1212.19 L1635.77 1212.19 L1635.18 1212.19 L1634.6 1212.19 L1634.01 1212.19 L1633.42 1212.19 L1632.84 1212.19 L1632.25 1212.19 L1631.67 1212.19 L1631.08 1212.19 L1630.49 1212.19 L1629.91 1212.19 L1629.32 1212.19 L1628.73 1212.19 L1628.15 1212.19 L1627.56 1212.19 L1626.97 1212.19 L1626.39 1212.19 L1625.8 1212.19 L1625.22 1212.19 L1624.63 1212.19 L1624.04 1212.19 L1623.46 1212.19 L1622.87 1212.19 L1622.28 1212.19 L1621.7 1212.19 L1621.11 1212.19 L1620.52 1212.19 L1619.94 1212.19 L1619.35 1212.19 L1618.76 1212.19 L1618.18 1212.19 L1617.59 1212.19 L1617.01 1212.19 L1616.42 1212.19 L1615.83 1212.19 L1615.25 1212.19 L1614.66 1212.19 L1614.07 1212.19 L1613.49 1212.19 L1612.9 1212.19 L1612.31 1212.19 L1611.73 1212.19 L1611.14 1212.19 L1610.55 1212.19 L1609.97 1212.19 L1609.38 1212.19 L1608.8 1212.19 L1608.21 1212.19 L1607.62 1212.19 L1607.04 1212.19 L1606.45 1212.19 L1605.86 1212.19 L1605.28 1212.19 L1604.69 1212.19 L1604.1 1212.19 L1603.52 1212.19 L1602.93 1212.19 L1602.34 1212.19 L1601.76 1212.19 L1601.17 1212.19 L1600.59 1212.19 L1600 1212.19 L1599.41 1212.19 L1598.83 1212.19 L1598.24 1212.19 L1597.65 1212.19 L1597.07 1212.19 L1596.48 1212.19 L1595.89 1212.19 L1595.31 1212.19 L1594.72 1212.19 L1594.14 1212.19 L1593.55 1212.19 L1592.96 1212.19 L1592.38 1212.19 L1591.79 1212.19 L1591.2 1212.19 L1590.62 1212.19 L1590.03 1212.19 L1589.44 1212.19 L1588.86 1212.19 L1588.27 1212.19 L1587.68 1212.19 L1587.1 1212.19 L1586.51 1212.19 L1585.93 1212.19 L1585.34 1212.19 L1584.75 1212.19 L1584.17 1212.19 L1583.58 1212.19 L1582.99 1212.19 L1582.41 1212.19 L1581.82 1212.19 L1581.23 1212.19 L1580.65 1212.19 L1580.06 1212.19 L1579.47 1212.19 L1578.89 1212.19 L1578.3 1212.19 L1577.72 1212.19 L1577.13 1212.19 L1576.54 1212.19 L1575.96 1212.19 L1575.37 1212.19 L1574.78 1212.19 L1574.2 1212.19 L1573.61 1212.19 L1573.02 1212.19 L1572.44 1212.19 L1571.85 1212.19 L1571.27 1212.19 L1570.68 1212.19 L1570.09 1212.19 L1569.51 1212.19 L1568.92 1212.19 L1568.33 1212.19 L1567.75 1212.19 L1567.16 1212.19 L1566.57 1212.19 L1565.99 1212.19 L1565.4 1212.19 L1564.81 1212.19 L1564.23 1212.19 L1563.64 1212.19 L1563.06 1212.19 L1562.47 1212.19 L1561.88 1212.19 L1561.3 1212.19 L1560.71 1212.19 L1560.12 1212.19 L1559.54 1212.19 L1558.95 1212.19 L1558.36 1212.19 L1557.78 1212.19 L1557.19 1212.19 L1556.6 1212.19 L1556.02 1212.19 L1555.43 1212.19 L1554.85 1212.19 L1554.26 1212.19 L1553.67 1212.19 L1553.09 1212.19 L1552.5 1212.19 L1551.91 1212.19 L1551.33 1212.19 L1550.74 1212.19 L1550.15 1212.19 L1549.57 1212.19 L1548.98 1212.19 L1548.4 1212.19 L1547.81 1212.19 L1547.22 1212.19 L1546.64 1212.19 L1546.05 1212.19 L1545.46 1212.19 L1544.88 1212.19 L1544.29 1212.19 L1543.7 1212.19 L1543.12 1212.19 L1542.53 1212.19 L1541.94 1212.19 L1541.36 1212.19 L1540.77 1212.19 L1540.19 1212.19 L1539.6 1212.19 L1539.01 1212.19 L1538.43 1212.19 L1537.84 1212.19 L1537.25 1212.19 L1536.67 1212.19 L1536.08 1212.19 L1535.49 1212.19 L1534.91 1212.19 L1534.32 1212.19 L1533.73 1212.19 L1533.15 1212.19 L1532.56 1212.19 L1531.98 1212.19 L1531.39 1212.19 L1530.8 1212.19 L1530.22 1212.19 L1529.63 1212.19 L1529.04 1212.19 L1528.46 1212.19 L1527.87 1212.19 L1527.28 1212.19 L1526.7 1212.19 L1526.11 1212.19 L1525.52 1212.19 L1524.94 1212.19 L1524.35 1212.19 L1523.77 1212.19 L1523.18 1212.19 L1522.59 1212.19 L1522.01 1212.19 L1521.42 1212.19 L1520.83 1212.19 L1520.25 1212.19 L1519.66 1212.19 L1519.07 1212.19 L1518.49 1212.19 L1517.9 1212.19 L1517.32 1212.19 L1516.73 1212.19 L1516.14 1212.19 L1515.56 1212.19 L1514.97 1212.19 L1514.38 1212.19 L1513.8 1212.19 L1513.21 1212.19 L1512.62 1212.19 L1512.04 1212.19 L1511.45 1212.19 L1510.86 1212.19 L1510.28 1212.19 L1509.69 1212.19 L1509.11 1212.19 L1508.52 1212.19 L1507.93 1212.19 L1507.35 1212.19 L1506.76 1212.19 L1506.17 1212.19 L1505.59 1212.19 L1505 1212.19 L1504.41 1212.19 L1503.83 1212.19 L1503.24 1212.19 L1502.65 1212.19 L1502.07 1212.19 L1501.48 1212.19 L1500.9 1212.19 L1500.31 1212.19 L1499.72 1212.19 L1499.14 1212.19 L1498.55 1212.19 L1497.96 1212.19 L1497.38 1212.19 L1496.79 1212.19 L1496.2 1212.19 L1495.62 1212.19 L1495.03 1212.19 L1494.45 1212.19 L1493.86 1212.19 L1493.27 1212.19 L1492.69 1212.19 L1492.1 1212.19 L1491.51 1212.19 L1490.93 1212.19 L1490.34 1212.19 L1489.75 1212.19 L1489.17 1212.19 L1488.58 1212.19 L1487.99 1212.19 L1487.41 1212.19 L1486.82 1212.19 L1486.24 1212.19 L1485.65 1212.19 L1485.06 1212.19 L1484.48 1212.19 L1483.89 1212.19 L1483.3 1212.19 L1482.72 1212.19 L1482.13 1212.19 L1481.54 1212.19 L1480.96 1212.19 L1480.37 1212.19 L1479.78 1212.19 L1479.2 1212.19 L1478.61 1212.19 L1478.03 1212.19 L1477.44 1212.19 L1476.85 1212.19 L1476.27 1212.19 L1475.68 1212.19 L1475.09 1212.19 L1474.51 1212.19 L1473.92 1212.19 L1473.33 1212.19 L1472.75 1212.19 L1472.16 1212.19 L1471.57 1212.19 L1470.99 1212.19 L1470.4 1212.19 L1469.82 1212.19 L1469.23 1212.19 L1468.64 1212.19 L1468.06 1212.19 L1467.47 1212.19 L1466.88 1212.19 L1466.3 1212.19 L1465.71 1212.19 L1465.12 1212.19 L1464.54 1212.19 L1463.95 1212.19 L1463.37 1212.19 L1462.78 1212.19 L1462.19 1212.19 L1461.61 1212.19 L1461.02 1212.19 L1460.43 1212.19 L1459.85 1212.19 L1459.26 1212.19 L1458.67 1212.19 L1458.09 1212.19 L1457.5 1212.19 L1456.91 1212.19 L1456.33 1212.19 L1455.74 1212.19 L1455.16 1212.19 L1454.57 1212.19 L1453.98 1212.19 L1453.4 1212.19 L1452.81 1212.19 L1452.22 1212.19 L1451.64 1212.19 L1451.05 1212.19 L1450.46 1212.19 L1449.88 1212.19 L1449.29 1212.19 L1448.7 1212.19 L1448.12 1212.19 L1447.53 1212.19 L1446.95 1212.19 L1446.36 1212.19 L1445.77 1212.19 L1445.19 1212.19 L1444.6 1212.19 L1444.01 1212.19 L1443.43 1212.19 L1442.84 1212.19 L1442.25 1212.19 L1441.67 1212.19 L1441.08 1212.19 L1440.5 1212.19 L1439.91 1212.19 L1439.32 1212.19 L1438.74 1212.19 L1438.15 1212.19 L1437.56 1212.19 L1436.98 1212.19 L1436.39 1212.19 L1435.8 1212.19 L1435.22 1212.19 L1434.63 1212.19 L1434.04 1212.19 L1433.46 1212.19 L1432.87 1212.19 L1432.29 1212.19 L1431.7 1212.19 L1431.11 1212.19 L1430.53 1212.19 L1429.94 1212.19 L1429.35 1212.19 L1428.77 1212.19 L1428.18 1212.19 L1427.59 1212.19 L1427.01 1212.19 L1426.42 1212.19 L1425.83 1212.19 L1425.25 1212.19 L1424.66 1212.19 L1424.08 1212.19 L1423.49 1212.19 L1422.9 1212.19 L1422.32 1212.19 L1421.73 1212.19 L1421.14 1212.19 L1420.56 1212.19 L1419.97 1212.19 L1419.38 1212.19 L1418.8 1212.19 L1418.21 1212.19 L1417.63 1212.19 L1417.04 1212.19 L1416.45 1212.19 L1415.87 1212.19 L1415.28 1212.19 L1414.69 1212.19 L1414.11 1212.19 L1413.52 1212.19 L1412.93 1212.19 L1412.35 1212.19 L1411.76 1212.19 L1411.17 1212.19 L1410.59 1212.19 L1410 1212.19 L1409.42 1212.19 L1408.83 1212.19 L1408.24 1212.19 L1407.66 1212.19 L1407.07 1212.19 L1406.48 1212.19 L1405.9 1212.19 L1405.31 1212.19 L1404.72 1212.19 L1404.14 1212.19 L1403.55 1212.19 L1402.96 1212.19 L1402.38 1212.19 L1401.79 1212.19 L1401.21 1212.19 L1400.62 1212.19 L1400.03 1212.19 L1399.45 1212.19 L1398.86 1212.19 L1398.27 1212.19 L1397.69 1212.19 L1397.1 1212.19 L1396.51 1212.19 L1395.93 1212.19 L1395.34 1212.19 L1394.75 1212.19 L1394.17 1212.19 L1393.58 1212.19 L1393 1212.19 L1392.41 1212.19 L1391.82 1212.19 L1391.24 1212.19 L1390.65 1212.19 L1390.06 1212.19 L1389.48 1212.19 L1388.89 1212.19 L1388.3 1212.19 L1387.72 1212.19 L1387.13 1212.19 L1386.55 1212.19 L1385.96 1212.19 L1385.37 1212.19 L1384.79 1212.19 L1384.2 1212.19 L1383.61 1212.19 L1383.03 1212.19 L1382.44 1212.19 L1381.85 1212.19 L1381.27 1212.19 L1380.68 1212.19 L1380.09 1212.19 L1379.51 1212.19 L1378.92 1212.19 L1378.34 1212.19 L1377.75 1212.19 L1377.16 1212.19 L1376.58 1212.19 L1375.99 1212.19 L1375.4 1212.19 L1374.82 1212.19 L1374.23 1212.19 L1373.64 1212.19 L1373.06 1212.19 L1372.47 1212.19 L1371.88 1212.19 L1371.3 1212.19 L1370.71 1212.19 L1370.13 1212.19 L1369.54 1212.19 L1368.95 1212.19 L1368.37 1212.19 L1367.78 1212.19 L1367.19 1212.19 L1366.61 1212.19 L1366.02 1212.19 L1365.43 1212.19 L1364.85 1212.19 L1364.26 1212.19 L1363.68 1212.19 L1363.09 1212.19 L1362.5 1212.19 L1361.92 1212.19 L1361.33 1212.19 L1360.74 1212.19 L1360.16 1212.19 L1359.57 1212.19 L1358.98 1212.19 L1358.4 1212.19 L1357.81 1212.19 L1357.22 1212.19 L1356.64 1212.19 L1356.05 1212.19 L1355.47 1212.19 L1354.88 1212.19 L1354.29 1212.19 L1353.71 1212.19 L1353.12 1212.19 L1352.53 1212.19 L1351.95 1212.19 L1351.36 1212.19 L1350.77 1212.19 L1350.19 1212.19 L1349.6 1212.19 L1349.01 1212.19 L1348.43 1212.19 L1347.84 1212.19 L1347.26 1212.19 L1346.67 1212.19 L1346.08 1212.19 L1345.5 1212.19 L1344.91 1212.19 L1344.32 1212.19 L1343.74 1212.19 L1343.15 1212.19 L1342.56 1212.19 L1341.98 1212.19 L1341.39 1212.19 L1340.8 1212.19 L1340.22 1212.19 L1339.63 1212.19 L1339.05 1212.19 L1338.46 1212.19 L1337.87 1212.19 L1337.29 1212.19 L1336.7 1212.19 L1336.11 1212.19 L1335.53 1212.19 L1334.94 1212.19 L1334.35 1212.19 L1333.77 1212.19 L1333.18 1212.19 L1332.6 1212.19 L1332.01 1212.19 L1331.42 1212.19 L1330.84 1212.19 L1330.25 1212.19 L1329.66 1212.19 L1329.08 1212.19 L1328.49 1212.19 L1327.9 1212.19 L1327.32 1212.19 L1326.73 1212.19 L1326.14 1212.19 L1325.56 1212.19 L1324.97 1212.19 L1324.39 1212.19 L1323.8 1212.19 L1323.21 1212.19 L1322.63 1212.19 L1322.04 1212.19 L1321.45 1212.19 L1320.87 1212.19 L1320.28 1212.19 L1319.69 1212.19 L1319.11 1212.19 L1318.52 1212.19 L1317.93 1212.19 L1317.35 1212.19 L1316.76 1212.19 L1316.18 1212.19 L1315.59 1212.19 L1315 1212.19 L1314.42 1212.19 L1313.83 1212.19 L1313.24 1212.19 L1312.66 1212.19 L1312.07 1212.19 L1311.48 1212.19 L1310.9 1212.19 L1310.31 1212.19 L1309.73 1212.19 L1309.14 1212.19 L1308.55 1212.19 L1307.97 1212.19 L1307.38 1212.19 L1306.79 1212.19 L1306.21 1212.19 L1305.62 1212.19 L1305.03 1212.19 L1304.45 1212.19 L1303.86 1212.19 L1303.27 1212.19 L1302.69 1212.19 L1302.1 1212.19 L1301.52 1212.19 L1300.93 1212.19 L1300.34 1212.19 L1299.76 1212.19 L1299.17 1212.19 L1298.58 1212.19 L1298 1212.19 L1297.41 1212.19 L1296.82 1212.19 L1296.24 1212.19 L1295.65 1212.19 L1295.06 1212.19 L1294.48 1212.19 L1293.89 1212.19 L1293.31 1212.19 L1292.72 1212.19 L1292.13 1212.19 L1291.55 1212.19 L1290.96 1212.19 L1290.37 1212.19 L1289.79 1212.19 L1289.2 1212.19 L1288.61 1212.19 L1288.03 1212.19 L1287.44 1212.19 L1286.86 1212.19 L1286.27 1212.19 L1285.68 1212.19 L1285.1 1212.19 L1284.51 1212.19 L1283.92 1212.19 L1283.34 1212.19 L1282.75 1212.19 L1282.16 1212.19 L1281.58 1212.19 L1280.99 1212.19 L1280.4 1212.19 L1279.82 1212.19 L1279.23 1212.19 L1278.65 1212.19 L1278.06 1212.19 L1277.47 1212.19 L1276.89 1212.19 L1276.3 1212.19 L1275.71 1212.19 L1275.13 1212.19 L1274.54 1212.19 L1273.95 1212.19 L1273.37 1212.19 L1272.78 1212.19 L1272.19 1212.19 L1271.61 1212.19 L1271.02 1212.19 L1270.44 1212.19 L1269.85 1212.19 L1269.26 1212.19 L1268.68 1212.19 L1268.09 1212.19 L1267.5 1212.19 L1266.92 1212.19 L1266.33 1212.19 L1265.74 1212.19 L1265.16 1212.19 L1264.57 1212.19 L1263.98 1212.19 L1263.4 1212.19 L1262.81 1212.19 L1262.23 1212.19 L1261.64 1212.19 L1261.05 1212.19 L1260.47 1212.19 L1259.88 1212.19 L1259.29 1212.19 L1258.71 1212.19 L1258.12 1212.19 L1257.53 1212.19 L1256.95 1212.19 L1256.36 1212.19 L1255.78 1212.19 L1255.19 1212.19 L1254.6 1212.19 L1254.02 1212.19 L1253.43 1212.19 L1252.84 1212.19 L1252.26 1212.19 L1251.67 1212.19 L1251.08 1212.19 L1250.5 1212.19 L1249.91 1212.19 L1249.32 1212.19 L1248.74 1212.19 L1248.15 1212.19 L1247.57 1212.19 L1246.98 1212.19 L1246.39 1212.19 L1245.81 1212.19 L1245.22 1212.19 L1244.63 1212.19 L1244.05 1212.19 L1243.46 1212.19 L1242.87 1212.19 L1242.29 1212.19 L1241.7 1212.19 L1241.11 1212.19 L1240.53 1212.19 L1239.94 1212.19 L1239.36 1212.19 L1238.77 1212.19 L1238.18 1212.19 L1237.6 1212.19 L1237.01 1212.19 L1236.42 1212.19 L1235.84 1212.19 L1235.25 1212.19 L1234.66 1212.19 L1234.08 1212.19 L1233.49 1212.19 L1232.91 1212.19 L1232.32 1212.19 L1231.73 1212.19 L1231.15 1212.19 L1230.56 1212.19 L1229.97 1212.19 L1229.39 1212.19 L1228.8 1212.19 L1228.21 1212.19 L1227.63 1212.19 L1227.04 1212.19 L1226.45 1212.19 L1225.87 1212.19 L1225.28 1212.19 L1224.7 1212.19 L1224.11 1212.19 L1223.52 1212.19 L1222.94 1212.19 L1222.35 1212.19 L1221.76 1212.19 L1221.18 1212.19 L1220.59 1212.19 L1220 1212.19 L1219.42 1212.19 L1218.83 1212.19 L1218.24 1212.19 L1217.66 1212.19 L1217.07 1212.19 L1216.49 1212.19 L1215.9 1212.19 L1215.31 1212.19 L1214.73 1212.19 L1214.14 1212.19 L1213.55 1212.19 L1212.97 1212.19 L1212.38 1212.19 L1211.79 1212.19 L1211.21 1212.19 L1210.62 1212.19 L1210.03 1212.19 L1209.45 1212.19 L1208.86 1212.19 L1208.28 1212.19 L1207.69 1212.19 L1207.1 1212.19 L1206.52 1212.19 L1205.93 1212.19 L1205.34 1212.19 L1204.76 1212.19 L1204.17 1212.19 L1203.58 1212.19 L1203 1212.19 L1202.41 1212.19 L1201.83 1212.19 L1201.24 1212.19 L1200.65 1212.19 L1200.07 1212.19 L1199.48 1212.19 L1198.89 1212.19 L1198.31 1212.19 L1197.72 1212.19 L1197.13 1212.19 L1196.55 1212.19 L1195.96 1212.19 L1195.37 1212.19 L1194.79 1212.19 L1194.2 1212.19 L1193.62 1212.19 L1193.03 1212.19 L1192.44 1212.19 L1191.86 1212.19 L1191.27 1212.19 L1190.68 1212.19 L1190.1 1212.19 L1189.51 1212.19 L1188.92 1212.19 L1188.34 1212.19 L1187.75 1212.19 L1187.16 1212.19 L1186.58 1212.19 L1185.99 1212.19 L1185.41 1212.19 L1184.82 1212.19 L1184.23 1212.19 L1183.65 1212.19 L1183.06 1212.19 L1182.47 1212.19 L1181.89 1212.19 L1181.3 1212.19 L1180.71 1212.19 L1180.13 1212.19 L1179.54 1212.19 L1178.96 1212.19 L1178.37 1212.19 L1177.78 1212.19 L1177.2 1212.19 L1176.61 1212.19 L1176.02 1212.19 L1175.44 1212.19 L1174.85 1212.19 L1174.26 1212.19 L1173.68 1212.19 L1173.09 1212.19 L1172.5 1212.19 L1171.92 1212.19 L1171.33 1212.19 L1170.75 1212.19 L1170.16 1212.19 L1169.57 1212.19 L1168.99 1212.19 L1168.4 1212.19 L1167.81 1212.19 L1167.23 1212.19 L1166.64 1212.19 L1166.05 1212.19 L1165.47 1212.19 L1164.88 1212.19 L1164.29 1212.19 L1163.71 1212.19 L1163.12 1212.19 L1162.54 1212.19 L1161.95 1212.19 L1161.36 1212.19 L1160.78 1212.19 L1160.19 1212.19 L1159.6 1212.19 L1159.02 1212.19 L1158.43 1212.19 L1157.84 1212.19 L1157.26 1212.19 L1156.67 1212.19 L1156.09 1212.19 L1155.5 1212.19 L1154.91 1212.19 L1154.33 1212.19 L1153.74 1212.19 L1153.15 1212.19 L1152.57 1212.19 L1151.98 1212.19 L1151.39 1212.19 L1150.81 1212.19 L1150.22 1212.19 L1149.63 1212.19 L1149.05 1212.19 L1148.46 1212.19 L1147.88 1212.19 L1147.29 1212.19 L1146.7 1212.19 L1146.12 1212.19 L1145.53 1212.19 L1144.94 1212.19 L1144.36 1212.19 L1143.77 1212.19 L1143.18 1212.19 L1142.6 1212.19 L1142.01 1212.19 L1141.42 1212.19 L1140.84 1212.19 L1140.25 1212.19 L1139.67 1212.19 L1139.08 1212.19 L1138.49 1212.19 L1137.91 1212.19 L1137.32 1212.19 L1136.73 1212.19 L1136.15 1212.19 L1135.56 1212.19 L1134.97 1212.19 L1134.39 1212.19 L1133.8 1212.19 L1133.21 1212.19 L1132.63 1212.19 L1132.04 1212.19 L1131.46 1212.19 L1130.87 1212.19 L1130.28 1212.19 L1129.7 1212.19 L1129.11 1212.19 L1128.52 1212.19 L1127.94 1212.19 L1127.35 1212.19 L1126.76 1212.19 L1126.18 1212.19 L1125.59 1212.19 L1125.01 1212.19 L1124.42 1212.19 L1123.83 1212.19 L1123.25 1212.19 L1122.66 1212.19 L1122.07 1212.19 L1121.49 1212.19 L1120.9 1212.19 L1120.31 1212.19 L1119.73 1212.19 L1119.14 1212.19 L1118.55 1212.19 L1117.97 1212.19 L1117.38 1212.19 L1116.8 1212.19 L1116.21 1212.19 L1115.62 1212.19 L1115.04 1212.19 L1114.45 1212.19 L1113.86 1212.19 L1113.28 1212.19 L1112.69 1212.19 L1112.1 1212.19 L1111.52 1212.19 L1110.93 1212.19 L1110.34 1212.19 L1109.76 1212.19 L1109.17 1212.19 L1108.59 1212.19 L1108 1212.19 L1107.41 1212.19 L1106.83 1212.19 L1106.24 1212.19 L1105.65 1212.19 L1105.07 1212.19 L1104.48 1212.19 L1103.89 1212.19 L1103.31 1212.19 L1102.72 1212.19 L1102.14 1212.19 L1101.55 1212.19 L1100.96 1212.19 L1100.38 1212.19 L1099.79 1212.19 L1099.2 1212.19 L1098.62 1212.19 L1098.03 1212.19 L1097.44 1212.19 L1096.86 1212.19 L1096.27 1212.19 L1095.68 1212.19 L1095.1 1212.19 L1094.51 1212.19 L1093.93 1212.19 L1093.34 1212.19 L1092.75 1212.19 L1092.17 1212.19 L1091.58 1212.19 L1090.99 1212.19 L1090.41 1212.19 L1089.82 1212.19 L1089.23 1212.19 L1088.65 1212.19 L1088.06 1212.19 L1087.47 1212.19 L1086.89 1212.19 L1086.3 1212.19 L1085.72 1212.19 L1085.13 1212.19 L1084.54 1212.19 L1083.96 1212.19 L1083.37 1212.19 L1082.78 1212.19 L1082.2 1212.19 L1081.61 1212.19 L1081.02 1212.19 L1080.44 1212.19 L1079.85 1212.19 L1079.26 1212.19 L1078.68 1212.19 L1078.09 1212.19 L1077.51 1212.19 L1076.92 1212.19 L1076.33 1212.19 L1075.75 1212.19 L1075.16 1212.19 L1074.57 1212.19 L1073.99 1212.19 L1073.4 1212.19 L1072.81 1212.19 L1072.23 1212.19 L1071.64 1212.19 L1071.06 1212.19 L1070.47 1212.19 L1069.88 1212.19 L1069.3 1212.19 L1068.71 1212.19 L1068.12 1212.19 L1067.54 1212.19 L1066.95 1212.19 L1066.36 1212.19 L1065.78 1212.19 L1065.19 1212.19 L1064.6 1212.19 L1064.02 1212.19 L1063.43 1212.19 L1062.85 1212.19 L1062.26 1212.19 L1061.67 1212.19 L1061.09 1212.19 L1060.5 1212.19 L1059.91 1212.19 L1059.33 1212.19 L1058.74 1212.19 L1058.15 1212.19 L1057.57 1212.19 L1056.98 1212.19 L1056.39 1212.19 L1055.81 1212.19 L1055.22 1212.19 L1054.64 1212.19 L1054.05 1212.19 L1053.46 1212.19 L1052.88 1212.19 L1052.29 1212.19 L1051.7 1212.19 L1051.12 1212.19 L1050.53 1212.19 L1049.94 1212.19 L1049.36 1212.19 L1048.77 1212.19 L1048.19 1212.19 L1047.6 1212.19 L1047.01 1212.19 L1046.43 1212.19 L1045.84 1212.19 L1045.25 1212.19 L1044.67 1212.19 L1044.08 1212.19 L1043.49 1212.19 L1042.91 1212.19 L1042.32 1212.19 L1041.73 1212.19 L1041.15 1212.19 L1040.56 1212.19 L1039.98 1212.19 L1039.39 1212.19 L1038.8 1212.19 L1038.22 1212.19 L1037.63 1212.19 L1037.04 1212.19 L1036.46 1212.19 L1035.87 1212.19 L1035.28 1212.19 L1034.7 1212.19 L1034.11 1212.19 L1033.52 1212.19 L1032.94 1212.19 L1032.35 1212.19 L1031.77 1212.19 L1031.18 1212.19 L1030.59 1212.19 L1030.01 1212.19 L1029.42 1212.19 L1028.83 1212.19 L1028.25 1212.19 L1027.66 1212.19 L1027.07 1212.19 L1026.49 1212.19 L1025.9 1212.19 L1025.32 1212.19 L1024.73 1212.19 L1024.14 1212.19 L1023.56 1212.19 L1022.97 1212.19 L1022.38 1212.19 L1021.8 1212.19 L1021.21 1212.19 L1020.62 1212.19 L1020.04 1212.19 L1019.45 1212.19 L1018.86 1212.19 L1018.28 1212.19 L1017.69 1212.19 L1017.11 1212.19 L1016.52 1212.19 L1015.93 1212.19 L1015.35 1212.19 L1014.76 1212.19 L1014.17 1212.19 L1013.59 1212.19 L1013 1212.19 L1012.41 1212.19 L1011.83 1212.19 L1011.24 1212.19 L1010.65 1212.19 L1010.07 1212.19 L1009.48 1212.19 L1008.9 1212.19 L1008.31 1212.19 L1007.72 1212.19 L1007.14 1212.19 L1006.55 1212.19 L1005.96 1212.19 L1005.38 1212.19 L1004.79 1212.19 L1004.2 1212.19 L1003.62 1212.19 L1003.03 1212.19 L1002.44 1212.19 L1001.86 1212.19 L1001.27 1212.19 L1000.69 1212.19 L1000.1 1212.19 L999.513 1212.19 L998.926 1212.19 L998.34 1212.19 L997.754 1212.19 L997.167 1212.19 L996.581 1212.19 L995.994 1212.19 L995.408 1212.19 L994.822 1212.19 L994.235 1212.19 L993.649 1212.19 L993.062 1212.19 L992.476 1212.19 L991.889 1212.19 L991.303 1212.19 L990.717 1212.19 L990.13 1212.19 L989.544 1212.19 L988.957 1212.19 L988.371 1212.19 L987.785 1212.19 L987.198 1212.19 L986.612 1212.19 L986.025 1212.19  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.26 986.612,1212.26 987.198,1212.26 987.785,1212.26 988.371,1212.26 988.957,1212.26 989.544,1212.26 990.13,1212.26 990.717,1212.26 991.303,1212.26 991.889,1212.26 992.476,1212.26 993.062,1212.26 993.649,1212.26 994.235,1212.26 994.822,1212.26 995.408,1212.26 995.994,1212.26 996.581,1212.26 997.167,1212.26 997.754,1212.26 998.34,1212.26 998.926,1212.26 999.513,1212.26 1000.1,1212.26 1000.69,1212.26 1001.27,1212.26 1001.86,1212.26 1002.44,1212.26 1003.03,1212.26 1003.62,1212.26 1004.2,1212.26 1004.79,1212.26 1005.38,1212.26 1005.96,1212.26 1006.55,1212.26 1007.14,1212.26 1007.72,1212.26 1008.31,1212.26 1008.9,1212.26 1009.48,1212.26 1010.07,1212.26 1010.65,1212.26 1011.24,1212.26 1011.83,1212.26 1012.41,1212.26 1013,1212.26 1013.59,1212.26 1014.17,1212.26 1014.76,1212.26 1015.35,1212.26 1015.93,1212.26 1016.52,1212.26 1017.11,1212.26 1017.69,1212.26 1018.28,1212.26 1018.86,1212.26 1019.45,1212.26 1020.04,1212.26 1020.62,1212.26 1021.21,1212.26 1021.8,1212.26 1022.38,1212.26 1022.97,1212.26 1023.56,1212.26 1024.14,1212.26 1024.73,1212.26 1025.32,1212.26 1025.9,1212.26 1026.49,1212.26 1027.07,1212.26 1027.66,1212.26 1028.25,1212.26 1028.83,1212.26 1029.42,1212.26 1030.01,1212.26 1030.59,1212.26 1031.18,1212.26 1031.77,1212.26 1032.35,1212.26 1032.94,1212.26 1033.52,1212.26 1034.11,1212.26 1034.7,1212.26 1035.28,1212.26 1035.87,1212.26 1036.46,1212.26 1037.04,1212.26 1037.63,1212.26 1038.22,1212.26 1038.8,1212.26 1039.39,1212.26 1039.98,1212.26 1040.56,1212.26 1041.15,1212.26 1041.73,1212.26 1042.32,1212.26 1042.91,1212.26 1043.49,1212.26 1044.08,1212.26 1044.67,1212.26 1045.25,1212.26 1045.84,1212.26 1046.43,1212.26 1047.01,1212.26 1047.6,1212.26 1048.19,1212.26 1048.77,1212.26 1049.36,1212.26 1049.94,1212.26 1050.53,1212.26 1051.12,1212.26 1051.7,1212.26 1052.29,1212.26 1052.88,1212.26 1053.46,1212.26 1054.05,1212.26 1054.64,1212.26 1055.22,1212.26 1055.81,1212.26 1056.39,1212.26 1056.98,1212.26 1057.57,1212.26 1058.15,1212.26 1058.74,1212.26 1059.33,1212.26 1059.91,1212.26 1060.5,1212.26 1061.09,1212.26 1061.67,1212.26 1062.26,1212.26 1062.85,1212.26 1063.43,1212.26 1064.02,1212.26 1064.6,1212.26 1065.19,1212.26 1065.78,1212.26 1066.36,1212.26 1066.95,1212.26 1067.54,1212.26 1068.12,1212.26 1068.71,1212.26 1069.3,1212.26 1069.88,1212.26 1070.47,1212.26 1071.06,1212.26 1071.64,1212.26 1072.23,1212.26 1072.81,1212.26 1073.4,1212.26 1073.99,1212.26 1074.57,1212.26 1075.16,1212.26 1075.75,1212.26 1076.33,1212.26 1076.92,1212.26 1077.51,1212.26 1078.09,1212.26 1078.68,1212.26 1079.26,1212.26 1079.85,1212.26 1080.44,1212.26 1081.02,1212.26 1081.61,1212.26 1082.2,1212.26 1082.78,1212.26 1083.37,1212.26 1083.96,1212.26 1084.54,1212.26 1085.13,1212.26 1085.72,1212.26 1086.3,1212.26 1086.89,1212.26 1087.47,1212.26 1088.06,1212.26 1088.65,1212.26 1089.23,1212.26 1089.82,1212.26 1090.41,1212.26 1090.99,1212.26 1091.58,1212.26 1092.17,1212.26 1092.75,1212.26 1093.34,1212.26 1093.93,1212.26 1094.51,1212.26 1095.1,1212.26 1095.68,1212.26 1096.27,1212.26 1096.86,1212.26 1097.44,1212.26 1098.03,1212.26 1098.62,1212.26 1099.2,1212.26 1099.79,1212.26 1100.38,1212.26 1100.96,1212.26 1101.55,1212.26 1102.14,1212.26 1102.72,1212.26 1103.31,1212.26 1103.89,1212.26 1104.48,1212.26 1105.07,1212.26 1105.65,1212.26 1106.24,1212.26 1106.83,1212.26 1107.41,1212.26 1108,1212.26 1108.59,1212.26 1109.17,1212.26 1109.76,1212.26 1110.34,1212.26 1110.93,1212.26 1111.52,1212.26 1112.1,1212.26 1112.69,1212.26 1113.28,1212.26 1113.86,1212.26 1114.45,1212.26 1115.04,1212.26 1115.62,1212.26 1116.21,1212.26 1116.8,1212.26 1117.38,1212.26 1117.97,1212.26 1118.55,1212.26 1119.14,1212.26 1119.73,1212.26 1120.31,1212.26 1120.9,1212.26 1121.49,1212.26 1122.07,1212.26 1122.66,1212.26 1123.25,1212.26 1123.83,1212.26 1124.42,1212.26 1125.01,1212.26 1125.59,1212.26 1126.18,1212.26 1126.76,1212.26 1127.35,1212.26 1127.94,1212.26 1128.52,1212.26 1129.11,1212.26 1129.7,1212.26 1130.28,1212.26 1130.87,1212.26 1131.46,1212.26 1132.04,1212.26 1132.63,1212.26 1133.21,1212.26 1133.8,1212.26 1134.39,1212.26 1134.97,1212.26 1135.56,1212.26 1136.15,1212.26 1136.73,1212.26 1137.32,1212.26 1137.91,1212.26 1138.49,1212.26 1139.08,1212.26 1139.67,1212.26 1140.25,1212.26 1140.84,1212.26 1141.42,1212.26 1142.01,1212.26 1142.6,1212.26 1143.18,1212.26 1143.77,1212.26 1144.36,1212.26 1144.94,1212.26 1145.53,1212.26 1146.12,1212.26 1146.7,1212.26 1147.29,1212.26 1147.88,1212.26 1148.46,1212.26 1149.05,1212.26 1149.63,1212.26 1150.22,1212.26 1150.81,1212.26 1151.39,1212.26 1151.98,1212.26 1152.57,1212.26 1153.15,1212.26 1153.74,1212.26 1154.33,1212.26 1154.91,1212.26 1155.5,1212.26 1156.09,1212.26 1156.67,1212.26 1157.26,1212.26 1157.84,1212.26 1158.43,1212.26 1159.02,1212.26 1159.6,1212.26 1160.19,1212.26 1160.78,1212.26 1161.36,1212.26 1161.95,1212.26 1162.54,1212.26 1163.12,1212.26 1163.71,1212.26 1164.29,1212.26 1164.88,1212.26 1165.47,1212.26 1166.05,1212.26 1166.64,1212.26 1167.23,1212.26 1167.81,1212.26 1168.4,1212.26 1168.99,1212.26 1169.57,1212.26 1170.16,1212.26 1170.75,1212.26 1171.33,1212.26 1171.92,1212.26 1172.5,1212.26 1173.09,1212.26 1173.68,1212.26 1174.26,1212.26 1174.85,1212.26 1175.44,1212.26 1176.02,1212.26 1176.61,1212.26 1177.2,1212.26 1177.78,1212.26 1178.37,1212.26 1178.96,1212.26 1179.54,1212.26 1180.13,1212.26 1180.71,1212.26 1181.3,1212.26 1181.89,1212.26 1182.47,1212.26 1183.06,1212.26 1183.65,1212.26 1184.23,1212.26 1184.82,1212.26 1185.41,1212.26 1185.99,1212.26 1186.58,1212.26 1187.16,1212.26 1187.75,1212.26 1188.34,1212.26 1188.92,1212.26 1189.51,1212.26 1190.1,1212.26 1190.68,1212.26 1191.27,1212.26 1191.86,1212.26 1192.44,1212.26 1193.03,1212.26 1193.62,1212.26 1194.2,1212.26 1194.79,1212.26 1195.37,1212.26 1195.96,1212.26 1196.55,1212.26 1197.13,1212.26 1197.72,1212.26 1198.31,1212.26 1198.89,1212.26 1199.48,1212.26 1200.07,1212.26 1200.65,1212.26 1201.24,1212.26 1201.83,1212.26 1202.41,1212.26 1203,1212.26 1203.58,1212.26 1204.17,1212.26 1204.76,1212.26 1205.34,1212.26 1205.93,1212.26 1206.52,1212.26 1207.1,1212.26 1207.69,1212.26 1208.28,1212.26 1208.86,1212.26 1209.45,1212.26 1210.03,1212.26 1210.62,1212.26 1211.21,1212.26 1211.79,1212.26 1212.38,1212.26 1212.97,1212.26 1213.55,1212.26 1214.14,1212.26 1214.73,1212.26 1215.31,1212.26 1215.9,1212.26 1216.49,1212.26 1217.07,1212.26 1217.66,1212.26 1218.24,1212.26 1218.83,1212.26 1219.42,1212.26 1220,1212.26 1220.59,1212.26 1221.18,1212.26 1221.76,1212.26 1222.35,1212.26 1222.94,1212.26 1223.52,1212.26 1224.11,1212.26 1224.7,1212.26 1225.28,1212.26 1225.87,1212.26 1226.45,1212.26 1227.04,1212.26 1227.63,1212.26 1228.21,1212.26 1228.8,1212.26 1229.39,1212.26 1229.97,1212.26 1230.56,1212.26 1231.15,1212.26 1231.73,1212.26 1232.32,1212.26 1232.91,1212.26 1233.49,1212.26 1234.08,1212.26 1234.66,1212.26 1235.25,1212.26 1235.84,1212.26 1236.42,1212.26 1237.01,1212.26 1237.6,1212.26 1238.18,1212.26 1238.77,1212.26 1239.36,1212.26 1239.94,1212.26 1240.53,1212.26 1241.11,1212.26 1241.7,1212.26 1242.29,1212.26 1242.87,1212.26 1243.46,1212.26 1244.05,1212.26 1244.63,1212.26 1245.22,1212.26 1245.81,1212.26 1246.39,1212.26 1246.98,1212.26 1247.57,1212.26 1248.15,1212.26 1248.74,1212.26 1249.32,1212.26 1249.91,1212.26 1250.5,1212.26 1251.08,1212.26 1251.67,1212.26 1252.26,1212.26 1252.84,1212.26 1253.43,1212.26 1254.02,1212.26 1254.6,1212.26 1255.19,1212.26 1255.78,1212.26 1256.36,1212.26 1256.95,1212.26 1257.53,1212.26 1258.12,1212.26 1258.71,1212.26 1259.29,1212.26 1259.88,1212.26 1260.47,1212.26 1261.05,1212.26 1261.64,1212.26 1262.23,1212.26 1262.81,1212.26 1263.4,1212.26 1263.98,1212.26 1264.57,1212.26 1265.16,1212.26 1265.74,1212.26 1266.33,1212.26 1266.92,1212.26 1267.5,1212.26 1268.09,1212.26 1268.68,1212.26 1269.26,1212.26 1269.85,1212.26 1270.44,1212.26 1271.02,1212.26 1271.61,1212.26 1272.19,1212.26 1272.78,1212.26 1273.37,1212.26 1273.95,1212.26 1274.54,1212.26 1275.13,1212.26 1275.71,1212.26 1276.3,1212.26 1276.89,1212.26 1277.47,1212.26 1278.06,1212.26 1278.65,1212.26 1279.23,1212.26 1279.82,1212.26 1280.4,1212.26 1280.99,1212.26 1281.58,1212.26 1282.16,1212.26 1282.75,1212.26 1283.34,1212.26 1283.92,1212.26 1284.51,1212.26 1285.1,1212.26 1285.68,1212.26 1286.27,1212.26 1286.86,1212.26 1287.44,1212.26 1288.03,1212.26 1288.61,1212.26 1289.2,1212.26 1289.79,1212.26 1290.37,1212.26 1290.96,1212.26 1291.55,1212.26 1292.13,1212.26 1292.72,1212.26 1293.31,1212.26 1293.89,1212.26 1294.48,1212.26 1295.06,1212.26 1295.65,1212.26 1296.24,1212.26 1296.82,1212.26 1297.41,1212.26 1298,1212.26 1298.58,1212.26 1299.17,1212.26 1299.76,1212.26 1300.34,1212.26 1300.93,1212.26 1301.52,1212.26 1302.1,1212.26 1302.69,1212.26 1303.27,1212.26 1303.86,1212.26 1304.45,1212.26 1305.03,1212.26 1305.62,1212.26 1306.21,1212.26 1306.79,1212.26 1307.38,1212.26 1307.97,1212.26 1308.55,1212.26 1309.14,1212.26 1309.73,1212.26 1310.31,1212.26 1310.9,1212.26 1311.48,1212.26 1312.07,1212.26 1312.66,1212.26 1313.24,1212.26 1313.83,1212.26 1314.42,1212.26 1315,1212.26 1315.59,1212.26 1316.18,1212.26 1316.76,1212.26 1317.35,1212.26 1317.93,1212.26 1318.52,1212.26 1319.11,1212.26 1319.69,1212.26 1320.28,1212.26 1320.87,1212.26 1321.45,1212.26 1322.04,1212.26 1322.63,1212.26 1323.21,1212.26 1323.8,1212.26 1324.39,1212.26 1324.97,1212.26 1325.56,1212.26 1326.14,1212.26 1326.73,1212.26 1327.32,1212.26 1327.9,1212.26 1328.49,1212.26 1329.08,1212.26 1329.66,1212.26 1330.25,1212.26 1330.84,1212.26 1331.42,1212.26 1332.01,1212.26 1332.6,1212.26 1333.18,1212.26 1333.77,1212.26 1334.35,1212.26 1334.94,1212.26 1335.53,1212.26 1336.11,1212.26 1336.7,1212.26 1337.29,1212.26 1337.87,1212.26 1338.46,1212.26 1339.05,1212.26 1339.63,1212.26 1340.22,1212.26 1340.8,1212.26 1341.39,1212.26 1341.98,1212.26 1342.56,1212.26 1343.15,1212.26 1343.74,1212.26 1344.32,1212.26 1344.91,1212.26 1345.5,1212.26 1346.08,1212.26 1346.67,1212.26 1347.26,1212.26 1347.84,1212.26 1348.43,1212.26 1349.01,1212.26 1349.6,1212.26 1350.19,1212.26 1350.77,1212.26 1351.36,1212.26 1351.95,1212.26 1352.53,1212.26 1353.12,1212.26 1353.71,1212.26 1354.29,1212.26 1354.88,1212.26 1355.47,1212.26 1356.05,1212.26 1356.64,1212.26 1357.22,1212.26 1357.81,1212.26 1358.4,1212.26 1358.98,1212.26 1359.57,1212.26 1360.16,1212.26 1360.74,1212.26 1361.33,1212.26 1361.92,1212.26 1362.5,1212.26 1363.09,1212.26 1363.68,1212.26 1364.26,1212.26 1364.85,1212.26 1365.43,1212.26 1366.02,1212.26 1366.61,1212.26 1367.19,1212.26 1367.78,1212.26 1368.37,1212.26 1368.95,1212.26 1369.54,1212.26 1370.13,1212.26 1370.71,1212.26 1371.3,1212.26 1371.88,1212.26 1372.47,1212.26 1373.06,1212.26 1373.64,1212.26 1374.23,1212.26 1374.82,1212.26 1375.4,1212.26 1375.99,1212.26 1376.58,1212.26 1377.16,1212.26 1377.75,1212.26 1378.34,1212.26 1378.92,1212.26 1379.51,1212.26 1380.09,1212.26 1380.68,1212.26 1381.27,1212.26 1381.85,1212.26 1382.44,1212.26 1383.03,1212.26 1383.61,1212.26 1384.2,1212.26 1384.79,1212.26 1385.37,1212.26 1385.96,1212.26 1386.55,1212.26 1387.13,1212.26 1387.72,1212.26 1388.3,1212.26 1388.89,1212.26 1389.48,1212.26 1390.06,1212.26 1390.65,1212.26 1391.24,1212.26 1391.82,1212.26 1392.41,1212.26 1393,1212.26 1393.58,1212.26 1394.17,1212.26 1394.75,1212.26 1395.34,1212.26 1395.93,1212.26 1396.51,1212.26 1397.1,1212.26 1397.69,1212.26 1398.27,1212.26 1398.86,1212.26 1399.45,1212.26 1400.03,1212.26 1400.62,1212.26 1401.21,1212.26 1401.79,1212.26 1402.38,1212.26 1402.96,1212.26 1403.55,1212.26 1404.14,1212.26 1404.72,1212.26 1405.31,1212.26 1405.9,1212.26 1406.48,1212.26 1407.07,1212.26 1407.66,1212.26 1408.24,1212.26 1408.83,1212.26 1409.42,1212.26 1410,1212.26 1410.59,1212.26 1411.17,1212.26 1411.76,1212.26 1412.35,1212.26 1412.93,1212.26 1413.52,1212.26 1414.11,1212.26 1414.69,1212.26 1415.28,1212.26 1415.87,1212.26 1416.45,1212.26 1417.04,1212.26 1417.63,1212.26 1418.21,1212.26 1418.8,1212.26 1419.38,1212.26 1419.97,1212.26 1420.56,1212.26 1421.14,1212.26 1421.73,1212.26 1422.32,1212.26 1422.9,1212.26 1423.49,1212.26 1424.08,1212.26 1424.66,1212.26 1425.25,1212.26 1425.83,1212.26 1426.42,1212.26 1427.01,1212.26 1427.59,1212.26 1428.18,1212.26 1428.77,1212.26 1429.35,1212.26 1429.94,1212.26 1430.53,1212.26 1431.11,1212.26 1431.7,1212.26 1432.29,1212.26 1432.87,1212.26 1433.46,1212.26 1434.04,1212.26 1434.63,1212.26 1435.22,1212.26 1435.8,1212.26 1436.39,1212.26 1436.98,1212.26 1437.56,1212.26 1438.15,1212.26 1438.74,1212.26 1439.32,1212.26 1439.91,1212.26 1440.5,1212.26 1441.08,1212.26 1441.67,1212.26 1442.25,1212.26 1442.84,1212.26 1443.43,1212.26 1444.01,1212.26 1444.6,1212.26 1445.19,1212.26 1445.77,1212.26 1446.36,1212.26 1446.95,1212.26 1447.53,1212.26 1448.12,1212.26 1448.7,1212.26 1449.29,1212.26 1449.88,1212.26 1450.46,1212.26 1451.05,1212.26 1451.64,1212.26 1452.22,1212.26 1452.81,1212.26 1453.4,1212.26 1453.98,1212.26 1454.57,1212.26 1455.16,1212.26 1455.74,1212.26 1456.33,1212.26 1456.91,1212.26 1457.5,1212.26 1458.09,1212.26 1458.67,1212.26 1459.26,1212.26 1459.85,1212.26 1460.43,1212.26 1461.02,1212.26 1461.61,1212.26 1462.19,1212.26 1462.78,1212.26 1463.37,1212.26 1463.95,1212.26 1464.54,1212.26 1465.12,1212.26 1465.71,1212.26 1466.3,1212.26 1466.88,1212.26 1467.47,1212.26 1468.06,1212.26 1468.64,1212.26 1469.23,1212.26 1469.82,1212.26 1470.4,1212.26 1470.99,1212.26 1471.57,1212.26 1472.16,1212.26 1472.75,1212.26 1473.33,1212.26 1473.92,1212.26 1474.51,1212.26 1475.09,1212.26 1475.68,1212.26 1476.27,1212.26 1476.85,1212.26 1477.44,1212.26 1478.03,1212.26 1478.61,1212.26 1479.2,1212.26 1479.78,1212.26 1480.37,1212.26 1480.96,1212.26 1481.54,1212.26 1482.13,1212.26 1482.72,1212.26 1483.3,1212.26 1483.89,1212.26 1484.48,1212.26 1485.06,1212.26 1485.65,1212.26 1486.24,1212.26 1486.82,1212.26 1487.41,1212.26 1487.99,1212.26 1488.58,1212.26 1489.17,1212.26 1489.75,1212.26 1490.34,1212.26 1490.93,1212.26 1491.51,1212.26 1492.1,1212.26 1492.69,1212.26 1493.27,1212.26 1493.86,1212.26 1494.45,1212.26 1495.03,1212.26 1495.62,1212.26 1496.2,1212.26 1496.79,1212.26 1497.38,1212.26 1497.96,1212.26 1498.55,1212.26 1499.14,1212.26 1499.72,1212.26 1500.31,1212.26 1500.9,1212.26 1501.48,1212.26 1502.07,1212.26 1502.65,1212.26 1503.24,1212.26 1503.83,1212.26 1504.41,1212.26 1505,1212.26 1505.59,1212.26 1506.17,1212.26 1506.76,1212.26 1507.35,1212.26 1507.93,1212.26 1508.52,1212.26 1509.11,1212.26 1509.69,1212.26 1510.28,1212.26 1510.86,1212.26 1511.45,1212.26 1512.04,1212.26 1512.62,1212.26 1513.21,1212.26 1513.8,1212.26 1514.38,1212.26 1514.97,1212.26 1515.56,1212.26 1516.14,1212.26 1516.73,1212.26 1517.32,1212.26 1517.9,1212.26 1518.49,1212.26 1519.07,1212.26 1519.66,1212.26 1520.25,1212.26 1520.83,1212.26 1521.42,1212.26 1522.01,1212.26 1522.59,1212.26 1523.18,1212.26 1523.77,1212.26 1524.35,1212.26 1524.94,1212.26 1525.52,1212.26 1526.11,1212.26 1526.7,1212.26 1527.28,1212.26 1527.87,1212.26 1528.46,1212.26 1529.04,1212.26 1529.63,1212.26 1530.22,1212.26 1530.8,1212.26 1531.39,1212.26 1531.98,1212.26 1532.56,1212.26 1533.15,1212.26 1533.73,1212.26 1534.32,1212.26 1534.91,1212.26 1535.49,1212.26 1536.08,1212.26 1536.67,1212.26 1537.25,1212.26 1537.84,1212.26 1538.43,1212.26 1539.01,1212.26 1539.6,1212.26 1540.19,1212.26 1540.77,1212.26 1541.36,1212.26 1541.94,1212.26 1542.53,1212.26 1543.12,1212.26 1543.7,1212.26 1544.29,1212.26 1544.88,1212.26 1545.46,1212.26 1546.05,1212.26 1546.64,1212.26 1547.22,1212.26 1547.81,1212.26 1548.4,1212.26 1548.98,1212.26 1549.57,1212.26 1550.15,1212.26 1550.74,1212.26 1551.33,1212.26 1551.91,1212.26 1552.5,1212.26 1553.09,1212.26 1553.67,1212.26 1554.26,1212.26 1554.85,1212.26 1555.43,1212.26 1556.02,1212.26 1556.6,1212.26 1557.19,1212.26 1557.78,1212.26 1558.36,1212.26 1558.95,1212.26 1559.54,1212.26 1560.12,1212.26 1560.71,1212.26 1561.3,1212.26 1561.88,1212.26 1562.47,1212.26 1563.06,1212.26 1563.64,1212.26 1564.23,1212.26 1564.81,1212.26 1565.4,1212.26 1565.99,1212.26 1566.57,1212.26 1567.16,1212.26 1567.75,1212.26 1568.33,1212.26 1568.92,1212.26 1569.51,1212.26 1570.09,1212.26 1570.68,1212.26 1571.27,1212.26 1571.85,1212.26 1572.44,1212.26 1573.02,1212.26 1573.61,1212.26 1574.2,1212.26 1574.78,1212.26 1575.37,1212.26 1575.96,1212.26 1576.54,1212.26 1577.13,1212.26 1577.72,1212.26 1578.3,1212.26 1578.89,1212.26 1579.47,1212.26 1580.06,1212.26 1580.65,1212.26 1581.23,1212.26 1581.82,1212.26 1582.41,1212.26 1582.99,1212.26 1583.58,1212.26 1584.17,1212.26 1584.75,1212.26 1585.34,1212.26 1585.93,1212.26 1586.51,1212.26 1587.1,1212.26 1587.68,1212.26 1588.27,1212.26 1588.86,1212.26 1589.44,1212.26 1590.03,1212.26 1590.62,1212.26 1591.2,1212.26 1591.79,1212.26 1592.38,1212.26 1592.96,1212.26 1593.55,1212.26 1594.14,1212.26 1594.72,1212.26 1595.31,1212.26 1595.89,1212.26 1596.48,1212.26 1597.07,1212.26 1597.65,1212.26 1598.24,1212.26 1598.83,1212.26 1599.41,1212.26 1600,1212.26 1600.59,1212.26 1601.17,1212.26 1601.76,1212.26 1602.34,1212.26 1602.93,1212.26 1603.52,1212.26 1604.1,1212.26 1604.69,1212.26 1605.28,1212.26 1605.86,1212.26 1606.45,1212.26 1607.04,1212.26 1607.62,1212.26 1608.21,1212.26 1608.8,1212.26 1609.38,1212.26 1609.97,1212.26 1610.55,1212.26 1611.14,1212.26 1611.73,1212.26 1612.31,1212.26 1612.9,1212.26 1613.49,1212.26 1614.07,1212.26 1614.66,1212.26 1615.25,1212.26 1615.83,1212.26 1616.42,1212.26 1617.01,1212.26 1617.59,1212.26 1618.18,1212.26 1618.76,1212.26 1619.35,1212.26 1619.94,1212.26 1620.52,1212.26 1621.11,1212.26 1621.7,1212.26 1622.28,1212.26 1622.87,1212.26 1623.46,1212.26 1624.04,1212.26 1624.63,1212.26 1625.22,1212.26 1625.8,1212.26 1626.39,1212.26 1626.97,1212.26 1627.56,1212.26 1628.15,1212.26 1628.73,1212.26 1629.32,1212.26 1629.91,1212.26 1630.49,1212.26 1631.08,1212.26 1631.67,1212.26 1632.25,1212.26 1632.84,1212.26 1633.42,1212.26 1634.01,1212.26 1634.6,1212.26 1635.18,1212.26 1635.77,1212.26 1636.36,1212.26 1636.94,1212.26 1637.53,1212.26 1638.12,1212.26 1638.7,1212.26 1639.29,1212.26 1639.88,1212.26 1640.46,1212.26 1641.05,1212.26 1641.63,1212.26 1642.22,1212.26 1642.81,1212.26 1643.39,1212.26 1643.98,1212.26 1644.57,1212.26 1645.15,1212.26 1645.74,1212.26 1646.33,1212.26 1646.91,1212.26 1647.5,1212.26 1648.09,1212.26 1648.67,1212.26 1649.26,1212.26 1649.84,1212.26 1650.43,1212.26 1651.02,1212.26 1651.6,1212.26 1652.19,1212.26 1652.78,1212.26 1653.36,1212.26 1653.95,1212.26 1654.54,1212.26 1655.12,1212.26 1655.71,1212.26 1656.29,1212.26 1656.88,1212.26 1657.47,1212.26 1658.05,1212.26 1658.64,1212.26 1659.23,1212.26 1659.81,1212.26 1660.4,1212.26 1660.99,1212.26 1661.57,1212.26 1662.16,1212.26 1662.75,1212.26 1663.33,1212.26 1663.92,1212.26 1664.5,1212.26 1665.09,1212.26 1665.68,1212.26 1666.26,1212.26 1666.85,1212.26 1667.44,1212.26 1668.02,1212.26 1668.61,1212.26 1669.2,1212.26 1669.78,1212.26 1670.37,1212.26 1670.96,1212.26 1671.54,1212.26 1672.13,1212.26 1672.71,1212.26 1673.3,1212.26 1673.89,1212.26 1674.47,1212.26 1675.06,1212.26 1675.65,1212.26 1676.23,1212.26 1676.82,1212.26 1677.41,1212.26 1677.99,1212.26 1678.58,1212.26 1679.17,1212.26 1679.75,1212.26 1680.34,1212.26 1680.92,1212.26 1681.51,1212.26 1682.1,1212.26 1682.68,1212.26 1683.27,1212.26 1683.86,1212.26 1684.44,1212.26 1685.03,1212.26 1685.62,1212.26 1686.2,1212.26 1686.79,1212.26 1687.37,1212.26 1687.96,1212.26 1688.55,1212.26 1689.13,1212.26 1689.72,1212.26 1690.31,1212.26 1690.89,1212.26 1691.48,1212.26 1692.07,1212.26 1692.65,1212.26 1693.24,1212.26 1693.83,1212.26 1694.41,1212.26 1695,1212.26 1695.58,1212.26 1696.17,1212.26 1696.76,1212.26 1697.34,1212.26 1697.93,1212.26 1698.52,1212.26 1699.1,1212.26 1699.69,1212.26 1700.28,1212.26 1700.86,1212.26 1701.45,1212.26 1702.04,1212.26 1702.62,1212.26 1703.21,1212.26 1703.79,1212.26 1704.38,1212.26 1704.97,1212.26 1705.55,1212.26 1706.14,1212.26 1706.73,1212.26 1707.31,1212.26 1707.9,1212.26 1708.49,1212.26 1709.07,1212.26 1709.66,1212.26 1710.24,1212.26 1710.83,1212.26 1711.42,1212.26 1712,1212.26 1712.59,1212.26 1713.18,1212.26 1713.76,1212.26 1714.35,1212.26 1714.94,1212.26 1715.52,1212.26 1716.11,1212.26 1716.7,1212.26 1717.28,1212.26 1717.87,1212.26 1718.45,1212.26 1719.04,1212.26 1719.63,1212.26 1720.21,1212.26 1720.8,1212.26 1721.39,1212.26 1721.97,1212.26 1722.56,1212.26 1723.15,1212.26 1723.73,1212.26 1724.32,1212.26 1724.91,1212.26 1725.49,1212.26 1726.08,1212.26 1726.66,1212.26 1727.25,1212.26 1727.84,1212.26 1728.42,1212.26 1729.01,1212.26 1729.6,1212.26 1730.18,1212.26 1730.77,1212.26 1731.36,1212.26 1731.94,1212.26 1732.53,1212.26 1733.11,1212.26 1733.7,1212.26 1734.29,1212.26 1734.87,1212.26 1735.46,1212.26 1736.05,1212.26 1736.63,1212.26 1737.22,1212.26 1737.81,1212.26 1738.39,1212.26 1738.98,1212.26 1739.57,1212.26 1740.15,1212.26 1740.74,1212.26 1741.32,1212.26 1741.91,1212.26 1742.5,1212.26 1743.08,1212.26 1743.67,1212.26 1744.26,1212.26 1744.84,1212.26 1745.43,1212.26 1746.02,1212.26 1746.6,1212.26 1747.19,1212.26 1747.78,1212.26 1748.36,1212.26 1748.95,1212.26 1749.53,1212.26 1750.12,1212.26 1750.71,1212.26 1751.29,1212.26 1751.88,1212.26 1752.47,1212.26 1753.05,1212.26 1753.64,1212.26 1754.23,1212.26 1754.81,1212.26 1755.4,1212.26 1755.99,1212.26 1756.57,1212.26 1757.16,1212.26 1757.74,1212.26 1758.33,1212.26 1758.92,1212.26 1759.5,1212.26 1760.09,1212.26 1760.68,1212.26 1761.26,1212.26 1761.85,1212.26 1762.44,1212.26 1763.02,1212.26 1763.61,1212.26 1764.19,1212.26 1764.78,1212.26 1765.37,1212.26 1765.95,1212.26 1766.54,1212.26 1767.13,1212.26 1767.71,1212.26 1768.3,1212.26 1768.89,1212.26 1769.47,1212.26 1770.06,1212.26 1770.65,1212.26 1771.23,1212.26 1771.82,1212.26 1772.4,1212.26 1772.99,1212.26 1773.58,1212.26 1774.16,1212.26 1774.75,1212.26 1775.34,1212.26 1775.92,1212.26 1776.51,1212.26 1777.1,1212.26 1777.68,1212.26 1778.27,1212.26 1778.86,1212.26 1779.44,1212.26 1780.03,1212.26 1780.61,1212.26 1781.2,1212.26 1781.79,1212.26 1782.37,1212.26 1782.96,1212.26 1783.55,1212.26 1784.13,1212.26 1784.72,1212.26 1785.31,1212.26 1785.89,1212.26 1786.48,1212.26 1787.06,1212.26 1787.65,1212.26 1788.24,1212.26 1788.82,1212.26 1789.41,1212.26 1790,1212.26 1790.58,1212.26 1791.17,1212.26 1791.76,1212.26 1792.34,1212.26 1792.93,1212.26 1793.52,1212.26 1794.1,1212.26 1794.69,1212.26 1795.27,1212.26 1795.86,1212.26 1796.45,1212.26 1797.03,1212.26 1797.62,1212.26 1798.21,1212.26 1798.79,1212.26 1799.38,1212.26 1799.97,1212.26 1800.55,1212.26 1801.14,1212.26 1801.73,1212.26 1802.31,1212.26 1802.9,1212.26 1803.48,1212.26 1804.07,1212.26 1804.66,1212.26 1805.24,1212.26 1805.83,1212.26 1806.42,1212.26 1807,1212.26 1807.59,1212.26 1808.18,1212.26 1808.76,1212.26 1809.35,1212.26 1809.94,1212.26 1810.52,1212.26 1811.11,1212.26 1811.69,1212.26 1812.28,1212.26 1812.87,1212.26 1813.45,1212.26 1814.04,1212.26 1814.63,1212.26 1815.21,1212.26 1815.8,1212.26 1816.39,1212.26 1816.97,1212.26 1817.56,1212.26 1818.14,1212.26 1818.73,1212.26 1819.32,1212.26 1819.9,1212.26 1820.49,1212.26 1821.08,1212.26 1821.66,1212.26 1822.25,1212.26 1822.84,1212.26 1823.42,1212.26 1824.01,1212.26 1824.6,1212.26 1825.18,1212.26 1825.77,1212.26 1826.35,1212.26 1826.94,1212.26 1827.53,1212.26 1828.11,1212.26 1828.7,1212.26 1829.29,1212.26 1829.87,1212.26 1830.46,1212.26 1831.05,1212.26 1831.63,1212.26 1832.22,1212.26 1832.81,1212.26 1833.39,1212.26 1833.98,1212.26 1834.56,1212.26 1835.15,1212.26 1835.74,1212.26 1836.32,1212.26 1836.91,1212.26 1837.5,1212.26 1838.08,1212.26 1838.67,1212.26 1839.26,1212.26 1839.84,1212.26 1840.43,1212.26 1841.01,1212.26 1841.6,1212.26 1842.19,1212.26 1842.77,1212.26 1843.36,1212.26 1843.95,1212.26 1844.53,1212.26 1845.12,1212.26 1845.71,1212.26 1846.29,1212.26 1846.88,1212.26 1847.47,1212.26 1848.05,1212.26 1848.64,1212.26 1849.22,1212.26 1849.81,1212.26 1850.4,1212.26 1850.98,1212.26 1851.57,1212.26 1852.16,1212.26 1852.74,1212.26 1853.33,1212.26 1853.92,1212.26 1854.5,1212.26 1855.09,1212.26 1855.68,1212.26 1856.26,1212.26 1856.85,1212.26 1857.43,1212.26 1858.02,1212.26 1858.61,1212.26 1859.19,1212.26 1859.78,1212.26 1860.37,1212.26 1860.95,1212.26 1861.54,1212.26 1862.13,1212.26 1862.71,1212.26 1863.3,1212.26 1863.88,1212.26 1864.47,1212.26 1865.06,1212.26 1865.64,1212.26 1866.23,1212.26 1866.82,1212.26 1867.4,1212.26 1867.99,1212.26 1868.58,1212.26 1869.16,1212.26 1869.75,1212.26 1870.34,1212.26 1870.92,1212.26 1871.51,1212.26 1872.09,1212.26 1872.68,1212.26 1873.27,1212.26 1873.85,1212.26 1874.44,1212.26 1875.03,1212.26 1875.61,1212.26 1876.2,1212.26 1876.79,1212.26 1877.37,1212.26 1877.96,1212.26 1878.55,1212.26 1879.13,1212.26 1879.72,1212.26 1880.3,1212.26 1880.89,1212.26 1881.48,1212.26 1882.06,1212.26 1882.65,1212.26 1883.24,1212.26 1883.82,1212.26 1884.41,1212.26 1885,1212.26 1885.58,1212.26 1886.17,1212.26 1886.76,1212.26 1887.34,1212.26 1887.93,1212.26 1888.51,1212.26 1889.1,1212.26 1889.69,1212.26 1890.27,1212.26 1890.86,1212.26 1891.45,1212.26 1892.03,1212.26 1892.62,1212.26 1893.21,1212.26 1893.79,1212.26 1894.38,1212.26 1894.96,1212.26 1895.55,1212.26 1896.14,1212.26 1896.72,1212.26 1897.31,1212.26 1897.9,1212.26 1898.48,1212.26 1899.07,1212.26 1899.66,1212.26 1900.24,1212.26 1900.83,1212.26 1901.42,1212.26 1902,1212.26 1902.59,1212.26 1903.17,1212.26 1903.76,1212.26 1904.35,1212.26 1904.93,1212.26 1905.52,1212.26 1906.11,1212.26 1906.69,1212.26 1907.28,1212.26 1907.87,1212.26 1908.45,1212.26 1909.04,1212.26 1909.63,1212.26 1910.21,1212.26 1910.8,1212.26 1911.38,1212.26 1911.97,1212.26 1912.56,1212.26 1913.14,1212.26 1913.73,1212.26 1914.32,1212.26 1914.9,1212.26 1915.49,1212.26 1916.08,1212.26 1916.66,1212.26 1917.25,1212.26 1917.83,1212.26 1918.42,1212.26 1919.01,1212.26 1919.59,1212.26 1920.18,1212.26 1920.77,1212.26 1921.35,1212.26 1921.94,1212.26 1922.53,1212.26 1923.11,1212.26 1923.7,1212.26 1924.29,1212.26 1924.87,1212.26 1925.46,1212.26 1926.04,1212.26 1926.63,1212.26 1927.22,1212.26 1927.8,1212.26 1928.39,1212.26 1928.98,1212.26 1929.56,1212.26 1930.15,1212.26 1930.74,1212.26 1931.32,1212.26 1931.91,1212.26 1932.5,1212.26 1933.08,1212.26 1933.67,1212.26 1934.25,1212.26 1934.84,1212.26 1935.43,1212.26 1936.01,1212.26 1936.6,1212.26 1937.19,1212.26 1937.77,1212.26 1938.36,1212.26 1938.95,1212.26 1939.53,1212.26 1940.12,1212.26 1940.71,1212.26 1941.29,1212.26 1941.88,1212.26 1942.46,1212.26 1943.05,1212.26 1943.64,1212.26 1944.22,1212.26 1944.81,1212.26 1945.4,1212.26 1945.98,1212.26 1946.57,1212.26 1947.16,1212.26 1947.74,1212.26 1948.33,1212.26 1948.91,1212.26 1949.5,1212.26 1950.09,1212.26 1950.67,1212.26 1951.26,1212.26 1951.85,1212.26 1952.43,1212.26 1953.02,1212.26 1953.61,1212.26 1954.19,1212.26 1954.78,1212.26 1955.37,1212.26 1955.95,1212.26 1956.54,1212.26 1957.12,1212.26 1957.71,1212.26 1958.3,1212.26 1958.88,1212.26 1959.47,1212.26 1960.06,1212.26 1960.64,1212.26 1961.23,1212.26 1961.82,1212.26 1962.4,1212.26 1962.99,1212.26 1963.58,1212.26 1964.16,1212.26 1964.75,1212.26 1965.33,1212.26 1965.92,1212.26 1966.51,1212.26 1967.09,1212.26 1967.68,1212.26 1968.27,1212.26 1968.85,1212.26 1969.44,1212.26 1970.03,1212.26 1970.61,1212.26 1971.2,1212.26 1971.78,1212.26 1972.37,1212.26 1972.96,1212.26 1973.54,1212.26 1974.13,1212.26 1974.72,1212.26 1975.3,1212.26 1975.89,1212.26 1976.48,1212.26 1977.06,1212.26 1977.65,1212.26 1978.24,1212.26 1978.82,1212.26 1979.41,1212.26 1979.99,1212.26 1980.58,1212.26 1981.17,1212.26 1981.75,1212.26 1982.34,1212.26 1982.93,1212.26 1983.51,1212.26 1984.1,1212.26 1984.69,1212.26 1985.27,1212.26 1985.86,1212.26 1986.45,1212.26 1987.03,1212.26 1987.62,1212.26 1988.2,1212.26 1988.79,1212.26 1989.38,1212.26 1989.96,1212.26 1990.55,1212.26 1991.14,1212.26 1991.72,1212.26 1992.31,1212.26 1992.9,1212.26 1993.48,1212.26 1994.07,1212.26 1994.65,1212.26 1995.24,1212.26 1995.83,1212.26 1996.41,1212.26 1997,1212.26 1997.59,1212.26 1998.17,1212.26 1998.76,1212.26 1999.35,1212.26 1999.93,1212.26 2000.52,1212.26 2001.11,1212.26 2001.69,1212.26 2002.28,1212.26 2002.86,1212.26 2003.45,1212.26 2004.04,1212.26 2004.62,1212.26 2005.21,1212.26 2005.8,1212.26 2006.38,1212.26 2006.97,1212.26 2007.56,1212.26 2008.14,1212.26 2008.73,1212.26 2009.32,1212.26 2009.9,1212.26 2010.49,1212.26 2011.07,1212.26 2011.66,1212.26 2012.25,1212.26 2012.83,1212.26 2013.42,1212.26 2014.01,1212.26 2014.59,1212.26 2015.18,1212.26 2015.77,1212.26 2016.35,1212.26 2016.94,1212.26 2017.53,1212.26 2018.11,1212.26 2018.7,1212.26 2019.28,1212.26 2019.87,1212.26 2020.46,1212.26 2021.04,1212.26 2021.63,1212.26 2022.22,1212.26 2022.8,1212.26 2023.39,1212.26 2023.98,1212.26 2024.56,1212.26 2025.15,1212.26 2025.73,1212.26 2026.32,1212.26 2026.91,1212.26 2027.49,1212.26 2028.08,1212.26 2028.67,1212.26 2029.25,1212.26 2029.84,1212.26 2030.43,1212.26 2031.01,1212.26 2031.6,1212.26 2032.19,1212.26 2032.77,1212.26 2033.36,1212.26 2033.94,1212.26 2034.53,1212.26 2035.12,1212.26 2035.7,1212.26 2036.29,1212.26 2036.88,1212.26 2037.46,1212.26 2038.05,1212.26 2038.64,1212.26 2039.22,1212.26 2039.81,1212.26 2040.4,1212.26 2040.98,1212.26 2041.57,1212.26 2042.15,1212.26 2042.74,1212.26 2043.33,1212.26 2043.91,1212.26 2044.5,1212.26 2045.09,1212.26 2045.67,1212.26 2046.26,1212.26 2046.85,1212.26 2047.43,1212.26 2048.02,1212.26 2048.6,1212.26 2049.19,1212.26 2049.78,1212.26 2050.36,1212.26 2050.95,1212.26 2051.54,1212.26 2052.12,1212.26 2052.71,1212.26 2053.3,1212.26 2053.88,1212.26 2054.47,1212.26 2055.06,1212.26 2055.64,1212.26 2056.23,1212.26 2056.81,1212.26 2057.4,1212.26 2057.99,1212.26 2058.57,1212.26 2059.16,1212.26 2059.75,1212.26 2060.33,1212.26 2060.92,1212.26 2061.51,1212.26 2062.09,1212.26 2062.68,1212.26 2063.27,1212.26 2063.85,1212.26 2064.44,1212.26 2065.02,1212.26 2065.61,1212.26 2066.2,1212.26 2066.78,1212.26 2067.37,1212.26 2067.96,1212.26 2068.54,1212.26 2069.13,1212.26 2069.72,1212.26 2070.3,1212.26 2070.89,1212.26 2071.48,1212.26 2072.06,1212.26 2072.65,1212.26 2073.23,1212.26 2073.82,1212.26 2074.41,1212.26 2074.99,1212.26 2075.58,1212.26 2076.17,1212.26 2076.75,1212.26 2077.34,1212.26 2077.93,1212.26 2078.51,1212.26 2079.1,1212.26 2079.68,1212.26 2080.27,1212.26 2080.86,1212.26 2081.44,1212.26 2082.03,1212.26 2082.62,1212.26 2083.2,1212.26 2083.79,1212.26 2084.38,1212.26 2084.96,1212.26 2085.55,1212.26 2086.14,1212.26 2086.72,1212.26 2087.31,1212.26 2087.89,1212.26 2088.48,1212.26 2089.07,1212.26 2089.65,1212.26 2090.24,1212.26 2090.83,1212.26 2091.41,1212.26 2092,1212.26 2092.59,1212.26 2093.17,1212.26 2093.76,1212.26 2094.35,1212.26 2094.93,1212.26 2095.52,1212.26 2096.1,1212.26 2096.69,1212.26 2097.28,1212.26 2097.86,1212.26 2098.45,1212.26 2099.04,1212.26 2099.62,1212.26 2100.21,1212.26 2100.8,1212.26 2101.38,1212.26 2101.97,1212.26 2102.55,1212.26 2103.14,1212.26 2103.73,1212.26 2104.31,1212.26 2104.9,1212.26 2105.49,1212.26 2106.07,1212.26 2106.66,1212.26 2107.25,1212.26 2107.83,1212.26 2108.42,1212.26 2109.01,1212.26 2109.59,1212.26 2110.18,1212.26 2110.76,1212.26 2111.35,1212.26 2111.94,1212.26 2112.52,1212.26 2113.11,1212.26 2113.7,1212.26 2114.28,1212.26 2114.87,1212.26 2115.46,1212.26 2116.04,1212.26 2116.63,1212.26 2117.22,1212.26 2117.8,1212.26 2118.39,1212.26 2118.97,1212.26 2119.56,1212.26 2120.15,1212.26 2120.73,1212.26 2121.32,1212.26 2121.91,1212.26 2122.49,1212.26 2123.08,1212.26 2123.67,1212.26 2124.25,1212.26 2124.84,1212.26 2125.42,1212.26 2126.01,1212.26 2126.6,1212.26 2127.18,1212.26 2127.77,1212.26 2128.36,1212.26 2128.94,1212.26 2129.53,1212.26 2130.12,1212.26 2130.7,1212.26 2131.29,1212.26 2131.88,1212.26 2132.46,1212.26 2133.05,1212.26 2133.63,1212.26 2134.22,1212.26 2134.81,1212.26 2135.39,1212.26 2135.98,1212.26 2136.57,1212.26 2137.15,1212.26 2137.74,1212.26 2138.33,1212.26 2138.91,1212.26 2139.5,1212.26 2140.09,1212.26 2140.67,1212.26 2141.26,1212.26 2141.84,1212.26 2142.43,1212.26 2143.02,1212.26 2143.6,1212.26 2144.19,1212.26 2144.78,1212.26 2145.36,1212.26 2145.95,1212.26 2146.54,1212.26 2147.12,1212.26 2147.71,1212.26 2148.3,1212.26 2148.88,1212.26 2149.47,1212.26 2150.05,1212.26 2150.64,1212.26 2151.23,1212.26 2151.81,1212.26 2152.4,1212.26 2152.99,1212.26 2153.57,1212.26 2154.16,1212.26 2154.75,1212.26 2155.33,1212.26 2155.92,1212.26 2156.5,1212.26 2157.09,1212.26 2157.68,1212.26 2158.26,1212.26 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.6,1195.21 1399.37,899.083 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.77 985.439,1195.21 2158.26,1195.21 2158.26,1228.77 985.439,1228.77 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip963\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip963)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9661.42 167.147,-10228.8 167.706,-10737 168.266,-11173.9 168.825,-11576 169.384,-11929.6 169.943,-12238 170.503,-11767.3 171.062,-12005.8 171.621,-11596.2 172.18,-11800.2 172.74,-11962.3 173.299,-12101 173.858,-12210.2 174.417,-11843.5 174.977,-11903.5 175.536,-11561 176.095,-11585.4 176.655,-11255 177.214,-11251.9 177.773,-10934 178.332,-10900.5 178.892,-10592.9 179.451,-10546 180.01,-10474.7 180.569,-10399.7 181.129,-10119 181.688,-10028.8 182.247,-9763.27 182.806,-9319.95 183.366,-9228.23 183.925,-9130.84 184.484,-9025.82 185.043,-8788.88 185.603,-8543.55 186.162,-8305.7 186.721,-8072.9 187.28,-7859.19 187.84,-7639.91 188.399,-7133.29 188.958,-6744.61 189.517,-6621.44 190.077,-6489.36 190.636,-6364.17 191.195,-6155.35 191.754,-5952.34 192.314,-5686.47 192.873,-5568.25 193.432,-5442.83 193.991,-5325.84 194.551,-5203.22 195.11,-5079.52 195.669,-4735.23 196.228,-4630.55 196.788,-4374.63 197.347,-4278.1 197.906,-4181.66 198.465,-4038.83 199.025,-3899.17 199.584,-3627.86 200.143,-3499.25 200.702,-3371.95 201.262,-3129.36 201.821,-3016.31 202.38,-2905.98 202.939,-2794.2 203.499,-2685.03 204.058,-2575.13 204.617,-2504.72 205.176,-2331.37 205.736,-2226.42 206.295,-2163.45 206.854,-1997.57 207.413,-1808.45 207.973,-1724.67 208.532,-1580.22 209.091,-1408.82 209.65,-1365.56 210.21,-1264.8 210.769,-1169.05 211.328,-1099.41 211.887,-977.225 212.447,-918.688 213.006,-834.688 213.565,-752.414 214.124,-649.96 214.684,-597.713 215.243,-549.877 215.802,-527.31 216.361,-474.226 216.921,-424.249 217.48,-374.691 218.039,-325.405 218.598,-278.54 219.158,-255.15 219.717,-185.584 220.276,-118.361 220.835,-74.9543 221.395,-12.58 221.954,2.13326 222.513,25.6203 223.072,87.0158 223.632,165.366 224.191,215.882 224.75,224.88 225.309,258.838 225.869,248.175 226.428,277.303 226.987,311.108 227.546,360.933 228.106,407.536 228.665,416.133 229.224,481.801 229.783,509.96 230.343,553.175 230.902,538.958 231.461,559.815 232.02,601.929 232.58,606.356 233.139,686.669 233.698,704.159 234.257,724.314 234.817,760.896 235.376,781.905 235.935,800.758 236.494,814.301 237.054,887.146 237.613,900.269 238.172,891.724 238.731,904.387 239.291,917.268 239.85,949.87 240.409,886.168 240.968,901.361 241.528,917.268 242.087,948.425 242.646,957.609 243.205,952.772 243.765,926.83 244.324,919.543 244.883,971.129 245.442,1005.5 246.002,999.016 246.561,1045.94 247.12,1035.26 247.679,1061.86 248.239,1070.22 248.798,1060.19 249.357,1053.79 249.916,1066.92 250.476,1056.56 251.035,1085.62 251.594,1128.34 252.153,1081.21 252.713,1106.18 253.272,1127.79 253.831,1117.16 254.39,1108.83 254.95,1098.35 255.509,1072.04 256.068,1034.2 256.627,1042.27 257.187,1049.05 257.746,1042.41 258.305,1073.73 258.864,1082.4 259.424,1074.24 259.983,1031.01 260.542,993.33 261.101,1004.84 261.661,1020.08 262.22,1013.9 262.779,1059.33 263.338,1035.81 263.898,1013.73 264.457,995.641 265.016,996.076 265.575,994.201 266.135,958.739 266.694,959.786 267.253,960.769 267.812,959.34 268.372,977.591 268.931,994.311 269.49,992.021 270.049,1037.74 270.609,1012.34 271.168,996.392 271.727,990.427 272.286,1037.14 272.846,1065.73 273.405,1094.73 273.964,1124.93 274.523,1118.19 275.083,1110.64 275.642,1153.66 276.201,1141.2 276.76,1147.17 277.32,1141.19 277.879,1130.61 278.438,1155.5 278.997,1161.61 279.557,1182.41 280.116,1153.16 280.675,1127.19 281.234,1131.42 281.794,1120.76 282.353,1130.04 282.912,1133.74 283.471,1135.48 284.031,1112 284.59,1103.48 285.149,1143.52 285.708,1150.27 286.268,1155.29 286.827,1128.93 287.386,1133.5 287.945,1125.42 288.505,1149 289.064,1118.28 289.623,1143.63 290.182,1133.3 290.742,1137.18 291.301,1126.38 291.86,1118.73 292.419,1094.49 292.979,1101.98 293.538,1094.24 294.097,1085.28 294.656,1091.55 295.216,1080.27 295.775,1086.31 296.334,1079.07 296.893,1067.6 297.453,1046.65 298.012,1054.5 298.571,1062.6 299.13,1039.5 299.69,1016.86 300.249,1009.66 300.808,1022.85 301.368,1029.41 301.927,1007.73 302.486,1036.08 303.045,1045.29 303.605,1042 304.164,1003.65 304.723,996.821 305.282,1007.89 305.842,1002.52 306.401,1000.99 306.96,1028.71 307.519,1021.78 308.079,1046.49 308.638,1021.66 309.197,983.557 309.756,1027.4 310.316,1035.88 310.875,1047.6 311.434,1026.71 311.993,1039.19 312.553,1016.97 313.112,1010.68 313.671,984.611 314.23,998.025 314.79,955.731 315.349,949.614 315.908,944.976 316.467,970.186 317.027,969.931 317.586,966.527 318.145,976.755 318.704,956.953 319.264,973.048 319.823,1000.83 320.382,994.77 320.941,988.076 321.501,999.166 322.06,976.066 322.619,967.779 323.178,965.104 323.738,925.78 324.297,889.542 324.856,872.161 325.415,903.992 325.975,919.489 326.534,962.816 327.093,956.598 327.652,916.751 328.212,880.42 328.771,913.883 329.33,931.435 329.889,941.972 330.449,936.342 331.008,932.859 331.567,931.266 332.126,917.117 332.686,881.728 333.245,911.941 333.804,891.717 334.363,920.353 334.923,881.465 335.482,880.845 336.041,848.367 336.6,833.812 337.16,836.404 337.719,838.189 338.278,839.761 338.837,872.713 339.397,900.82 339.956,900.093 340.515,883.616 341.074,848.605 341.634,847.125 342.193,833.757 342.752,819.838 343.311,839.208 343.871,874.613 344.43,876.596 344.989,874.235 345.548,872.57 346.108,871.343 346.667,905.945 347.226,900.127 347.785,912.691 348.345,893.273 348.904,887.208 349.463,849.073 350.022,866.483 350.582,877.828 351.141,875.748 351.7,872.136 352.259,869.076 352.819,865.737 353.378,894.617 353.937,858.485 354.496,860.197 355.056,858.795 355.615,874.634 356.174,857.112 356.733,837.008 357.293,824.094 357.852,825.842 358.411,840.914 358.97,828.248 359.53,862.265 360.089,841.77 360.648,857.45 361.207,855.428 361.767,868.236 362.326,881.914 362.885,898.023 363.444,927.793 364.004,925.246 364.563,936.621 365.122,961.573 365.681,940.461 366.241,918.266 366.8,894.093 367.359,871.543 367.918,885.162 368.478,863.447 369.037,896.174 369.596,891.476 370.155,904.141 370.715,897.964 371.274,875.873 371.833,873.366 372.392,884.757 372.952,899.156 373.511,877.63 374.07,873.005 374.629,867.795 375.189,864.016 375.748,856.13 376.307,867.501 376.866,864.879 377.426,831.675 377.985,830.821 378.544,849.253 379.103,863.241 379.663,877.668 380.222,873.268 380.781,867.234 381.34,865.026 381.9,879.194 382.459,905.945 383.018,916.22 383.577,941.871 384.137,898.801 384.696,891.349 385.255,885.268 385.814,895.837 386.374,894.502 386.933,893.332 387.492,906.061 388.051,932.605 388.611,920.308 389.17,930.203 389.729,940.406 390.288,947.469 390.848,906.398 391.407,902.367 391.966,896.847 392.525,875.704 393.085,854.901 393.644,864.977 394.203,895.338 394.762,906.34 395.322,884.572 395.881,878.123 396.44,893.86 396.999,893.051 397.559,903.661 398.118,916.653 398.677,910.964 399.236,890.542 399.796,867.634 400.355,863.424 400.914,856.504 401.473,872.123 402.033,851.081 402.592,880.095 403.151,827.098 403.71,823.306 404.27,836.465 404.829,819.075 405.388,834.465 405.947,804.68 406.507,789.881 407.066,817.761 407.625,849.051 408.184,862.541 408.744,854.046 409.303,868.849 409.862,862.685 410.421,872.96 410.981,882.599 411.54,876.434 412.099,887.962 412.658,885.225 413.218,863.905 413.777,857.348 414.336,868.203 414.895,861.032 415.455,856.52 416.014,820.193 416.573,819.464 417.132,815.259 417.692,830.626 418.251,812.34 418.81,827.337 419.369,857.479 419.929,866.032 420.488,879.783 421.047,908.081 421.606,900.699 422.166,958.222 422.725,947.302 423.284,935.736 423.843,942.374 424.403,935.401 424.962,913.421 425.521,875.289 426.08,837.288 426.64,803.119 427.199,771.25 427.758,752.594 428.318,749.824 428.877,750.877 429.436,735.211 429.995,786.685 430.555,814.008 431.114,843.364 431.673,848.899 432.232,827.212 432.792,840.938 433.351,850.641 433.91,846.758 434.469,823.839 435.029,788.681 435.588,739.898 436.147,758.722 436.706,759.065 437.266,802.403 437.825,801.177 438.384,762.642 438.943,762.919 439.503,758.549 440.062,742.429 440.621,727.333 441.18,698.006 441.74,702.944 442.299,719.829 442.858,739.707 443.417,725.427 443.977,676.252 444.536,696.484 445.095,698.476 445.654,712.976 446.214,714.133 446.773,747.279 447.332,745.793 447.891,713.666 448.451,687.183 449.01,658.861 449.569,678.366 450.128,695.72 450.688,701.254 451.247,670.715 451.806,659.462 452.365,646.888 452.925,652.189 453.484,657.779 454.043,663.636 454.602,704.856 455.162,706.437 455.721,722.572 456.28,771.618 456.839,736.968 457.399,722.503 457.958,723.553 458.517,741.932 459.076,728.458 459.636,743.096 460.195,777.54 460.754,760.815 461.313,743.048 461.873,744.658 462.432,728.902 462.991,729.258 463.55,727.333 464.11,714.002 464.669,714.558 465.228,749.148 465.787,782.385 466.347,767.717 466.906,783.977 467.465,779.131 468.024,793.436 468.584,792.6 469.143,804.003 469.702,831.388 470.261,824.758 470.821,836.263 471.38,812.784 471.939,826.221 472.498,824.127 473.058,821.004 473.617,820.659 474.176,786.421 474.735,738.44 475.295,737.747 475.854,721.959 476.413,723.137 476.972,723.291 477.532,726.132 478.091,740.693 478.65,740.598 479.209,738.397 479.769,721.989 480.328,726.779 480.887,754.445 481.446,755.74 482.006,769.09 482.565,766.149 483.124,761.308 483.683,743.556 484.243,741.727 484.802,726.769 485.361,729.998 485.92,729.725 486.48,731.402 487.039,733.55 487.598,717.662 488.157,722.758 488.717,721.817 489.276,741.161 489.835,740.822 490.394,774.082 490.954,789.158 491.513,801.667 492.072,767.943 492.631,766.547 493.191,732.266 493.75,751.162 494.309,749.501 494.868,697.772 495.428,698.279 495.987,712.784 496.546,747.297 497.105,731.311 497.665,748.667 498.224,714.157 498.783,701.803 499.342,690.141 499.902,676.914 500.461,630.725 501.02,620.925 501.579,645.579 502.139,663.198 502.698,668.392 503.257,687.376 503.816,704.516 504.376,707.304 504.935,711.361 505.494,710.16 506.053,726.714 506.613,678.127 507.172,712.688 507.731,712.616 508.29,713.272 508.85,711.659 509.409,713.036 509.968,712.254 510.527,745.535 511.087,741.889 511.646,772.449 512.205,783.128 512.764,798.084 513.324,775.872 513.883,755.573 514.442,736.945 515.001,734.396 515.561,714.819 516.12,733.173 516.679,732.161 517.238,796.105 517.798,778.583 518.357,775.008 518.916,784.754 519.475,768.943 520.035,767.499 520.594,752.168 521.153,719.078 521.712,718.287 522.272,719.569 522.831,718.197 523.39,702.089 523.949,715.044 524.509,713.572 525.068,727.466 525.627,731.739 526.186,764.326 526.746,763.102 527.305,795.544 527.864,793.322 528.423,791.438 528.983,805.864 529.542,802.513 530.101,814.364 530.66,825.774 531.22,805.297 531.779,801.885 532.338,799.632 532.897,792.262 533.457,804.579 534.016,814.244 534.575,809.423 535.134,838.602 535.694,834.349 536.253,862.448 536.812,837.759 537.371,846.841 537.931,825.463 538.49,819.252 539.049,812.403 539.608,792.735 540.168,804.934 540.727,832.515 541.286,779.622 541.845,762.679 542.405,777.473 542.964,773.297 543.523,784.079 544.082,796.672 544.642,793.707 545.201,759.027 545.76,738.311 546.319,739.378 546.879,675.591 547.438,692.933 547.997,678.885 548.556,647.761 549.116,667.063 549.675,636.903 550.234,690.447 550.793,691.82 551.353,674.466 551.912,661.312 552.471,683.235 553.031,669.333 553.59,686.108 554.149,670.841 554.708,723.344 555.268,723.582 555.827,689.716 556.386,707.506 556.945,753.051 557.505,799.416 558.064,841.464 558.623,836.476 559.182,833.707 559.742,842.154 560.301,818.327 560.86,826.835 561.419,837.401 561.979,829.873 562.538,821.823 563.097,769.145 563.656,769.294 564.216,751.481 564.775,737.425 565.334,721.007 565.893,719.265 566.453,704.127 567.012,688.182 567.571,671.076 568.13,673.667 568.69,713.364 569.249,680.898 569.808,702.857 570.367,722.252 570.927,756.28 571.486,754.368 572.045,787.752 572.604,767.227 573.164,751.877 573.723,750.448 574.282,733.052 574.841,717.79 575.401,651.243 575.96,653.71 576.519,638.494 577.078,673.652 577.638,691.938 578.197,724.727 578.756,708.918 579.315,724.116 579.875,723.487 580.434,738.709 580.993,751.913 581.552,746.135 582.112,761.602 582.671,760.22 583.23,808.347 583.789,801.087 584.349,764.215 584.908,729.166 585.467,727.119 586.026,726.968 586.586,775.048 587.145,754.176 587.704,782.207 588.263,765.053 588.823,745.785 589.382,763.211 589.941,777.597 590.5,753.775 591.06,734.646 591.619,749.408 592.178,749.818 592.737,745.621 593.297,709.124 593.856,696.98 594.415,728.199 594.974,745.891 595.534,743.883 596.093,742.558 596.652,727.526 597.211,709.362 597.771,714.48 598.33,712.355 598.889,709.388 599.448,725.051 600.008,723.238 600.567,723.013 601.126,688.142 601.685,706.981 602.245,706.304 602.804,706.594 603.363,722.285 603.922,756.498 604.482,753.813 605.041,735.395 605.6,716.965 606.159,699.466 606.719,668.334 607.278,687.198 607.837,670.893 608.396,675.712 608.956,630.433 609.515,635.076 610.074,638.319 610.633,646.378 611.193,667.101 611.752,717.932 612.311,715.322 612.87,730.949 613.43,775.523 613.989,739.385 614.548,720.179 615.107,700.179 615.667,717.593 616.226,717.16 616.785,715.759 617.344,734.478 617.904,721.39 618.463,719.201 619.022,700.924 619.581,730.208 620.141,697.539 620.7,633.353 621.259,622.99 621.818,642.069 622.378,628.784 622.937,649.298 623.496,651.636 624.055,656.659 624.615,659.134 625.174,628.933 625.733,632.607 626.292,601.455 626.852,605.952 627.411,595.84 627.97,600.583 628.529,588.662 629.089,598.04 629.648,603.902 630.207,588.931 630.766,628.792 631.326,649.617 631.885,655.427 632.444,674.678 633.003,659.323 633.563,679.941 634.122,695.336 634.681,695.496 635.24,712.023 635.8,693.813 636.359,647.105 636.918,584.591 637.477,589.372 638.037,596.078 638.596,582.261 639.155,605.202 639.714,608.164 640.274,608.062 640.833,613.108 641.392,617.564 641.951,625.643 642.511,615.364 643.07,601.473 643.629,589.58 644.188,646.186 644.748,650.512 645.307,672.591 645.866,676.002 646.425,678.302 646.985,712.344 647.544,696.118 648.103,728.258 648.662,744.855 649.222,757.789 649.781,769.377 650.34,764.219 650.899,774.061 651.459,799.783 652.018,762.489 652.577,792.303 653.136,741.061 653.696,805.007 654.255,768.97 654.814,766.332 655.373,746.514 655.933,745.466 656.492,742.124 657.051,771.094 657.61,785.695 658.17,770.297 658.729,765.182 659.288,765.694 659.847,778.726 660.407,772.68 660.966,784.962 661.525,764.672 662.084,742.51 662.644,740.644 663.203,754.861 663.762,734.833 664.321,700.093 664.881,681.85 665.44,731.812 665.999,742.998 666.558,722.551 667.118,751.522 667.677,749.251 668.236,762.213 668.795,741.655 669.355,721.755 669.914,720.18 670.473,719.982 671.032,686.545 671.592,669.382 672.151,672.798 672.71,687.294 673.269,703.648 673.829,702.229 674.388,719.046 674.947,686.48 675.506,671.926 676.066,675.393 676.625,678.682 677.184,663.397 677.743,679.259 678.303,659.508 678.862,629.928 679.421,632.237 679.981,652.167 680.54,623.249 681.099,613.304 681.658,583.41 682.218,571.115 682.777,610.344 683.336,629.014 683.895,600.51 684.455,608.007 685.014,577.942 685.573,617.712 686.132,656.076 686.692,657.958 687.251,676.974 687.81,697 688.369,732.463 688.929,735.182 689.488,750.297 690.047,733.647 690.606,699.476 691.166,686.485 691.725,702.191 692.284,751.985 692.843,752.27 693.403,732.304 693.962,713.811 694.521,684.065 695.08,684.533 695.64,683.031 696.199,699.193 696.758,715.312 697.317,666.857 697.877,717.864 698.436,733.337 698.995,733.1 699.554,679.918 700.114,681.493 700.673,681.724 701.232,653.399 701.791,574.473 702.351,582.115 702.91,569.514 703.469,592.134 704.028,596.521 704.588,664.255 705.147,682.743 705.706,695.423 706.265,693.218 706.825,706.783 707.384,689.489 707.943,686.916 708.502,687.685 709.062,675.605 709.621,659.997 710.18,696.441 710.739,726.638 711.299,726.162 711.858,724.279 712.417,756.208 712.976,755.713 713.536,769.323 714.095,748.846 714.654,746.384 715.213,761.499 715.773,793.079 716.332,771.745 716.891,802.909 717.45,794.687 718.01,804.164 718.569,815.513 719.128,794.558 719.687,838.609 720.247,880.477 720.806,869.138 721.365,885.949 721.924,874.614 722.484,848.197 723.043,838.335 723.602,845.152 724.161,847.234 724.721,836.084 725.28,795.459 725.839,773.65 726.398,750.002 726.958,745.903 727.517,748.667 728.076,747.971 728.635,761.108 729.195,774.614 729.754,790.378 730.313,753.453 730.872,748.295 731.432,710.312 731.991,691.78 732.55,709.831 733.109,711.153 733.669,706.546 734.228,708.397 734.787,693.224 735.346,708.186 735.906,675.218 736.465,658.871 737.024,660.218 737.583,711.349 738.143,725.708 738.702,707.851 739.261,722.051 739.82,718.405 740.38,716.544 740.939,714.72 741.498,727.872 742.057,726.489 742.617,728.731 743.176,758.741 743.735,757.02 744.294,735.047 744.854,763.477 745.413,761.538 745.972,742.842 746.531,723.873 747.091,721.272 747.65,719.355 748.209,719.097 748.768,716.634 749.328,749.948 749.887,731.244 750.446,726.464 751.005,756.13 751.565,733.549 752.124,746.186 752.683,710.296 753.242,707.414 753.802,690.1 754.361,690.004 754.92,689.986 755.479,675.181 756.039,677.853 756.598,693.932 757.157,694.955 757.716,661.464 758.276,629.874 758.835,633.196 759.394,651.16 759.953,685.861 760.513,653.239 761.072,641.142 761.631,694.337 762.19,695.557 762.75,649.308 763.309,670.139 763.868,670.474 764.427,689.673 764.987,705.781 765.546,701.427 766.105,700.955 766.664,716.876 767.224,696.237 767.783,709.677 768.342,709.819 768.901,657.408 769.461,658.414 770.02,659.205 770.579,660.962 771.138,644.369 771.698,629.263 772.257,667.12 772.816,699.259 773.375,662.189 773.935,662.611 774.494,664.728 775.053,667.26 775.612,671.242 776.172,704.493 776.731,720.027 777.29,715.463 777.849,701.07 778.409,635.493 778.968,637.873 779.527,643.715 780.086,642.727 780.646,630.59 781.205,670.187 781.764,655.44 782.323,673.643 782.883,658.361 783.442,660.312 784.001,647.511 784.56,665.09 785.12,681.93 785.679,685.156 786.238,669.509 786.797,689.111 787.357,658.094 787.916,681.725 788.475,684.775 789.034,699.086 789.594,714.82 790.153,713.198 790.712,725.634 791.271,722.552 791.831,736.678 792.39,707.227 792.949,711.571 793.508,761.319 794.068,806.46 794.627,773.389 795.186,755.019 795.745,739.275 796.305,734.881 796.864,733.439 797.423,680.895 797.982,700.244 798.542,701.837 799.101,698.974 799.66,698.169 800.219,698.761 800.779,733.511 801.338,697.504 801.897,728.409 802.456,711.254 803.016,679.132 803.575,647.952 804.134,664.669 804.693,681.118 805.253,730.2 805.812,775.509 806.371,738.965 806.931,752.3 807.49,763.054 808.049,758.504 808.608,774.48 809.168,817.976 809.727,809.012 810.286,772.088 810.845,736.225 811.405,717.41 811.964,745.943 812.523,758 813.082,753.863 813.642,783.148 814.201,792.628 814.76,784.805 815.319,796.216 815.879,788.125 816.438,733.876 816.997,735.765 817.556,716.118 818.116,715.447 818.675,710.187 819.234,728.032 819.793,726.92 820.353,739.659 820.912,702.731 821.471,719.677 822.03,718.057 822.59,683.593 823.149,678.009 823.708,694.843 824.267,679.161 824.827,680.713 825.386,695.117 825.945,691.003 826.504,705.182 827.064,720.799 827.623,702.84 828.182,685.35 828.741,733.347 829.301,725.241 829.86,723.979 830.419,705.498 830.978,722.687 831.538,732.332 832.097,763.569 832.656,722.361 833.215,737.502 833.775,739.634 834.334,708.339 834.893,678.807 835.452,695.45 836.012,678.117 836.571,643.607 837.13,645.11 837.689,642.793 838.249,662.235 838.808,665.075 839.367,685.53 839.926,685.027 840.486,669.047 841.045,653.291 841.604,655.913 842.163,703.747 842.723,719.51 843.282,684.181 843.841,665.876 844.4,649.501 844.96,686.116 845.519,683.807 846.078,668.763 846.637,669.452 847.197,638.716 847.756,655.667 848.315,687.855 848.874,685.415 849.434,688.167 849.993,641.439 850.552,627.57 851.111,666.867 851.671,669.726 852.23,637.109 852.789,635.444 853.348,620.021 853.908,592.039 854.467,563.263 855.026,553.205 855.585,544.106 856.145,555.809 856.704,559.984 857.263,566.336 857.822,555.633 858.382,564.532 858.941,573.706 859.5,567.191 860.059,586.817 860.619,591.523 861.178,610.837 861.737,614.898 862.296,637.456 862.856,621.732 863.415,642.213 863.974,630.452 864.533,666.924 865.093,664.63 865.652,630.521 866.211,650.992 866.77,634.395 867.33,656.964 867.889,625.682 868.448,660.544 869.007,661.038 869.567,664.456 870.126,684.125 870.685,699.053 871.244,696.301 871.804,693.959 872.363,694.605 872.922,710.795 873.481,727.041 874.041,708.897 874.6,690.224 875.159,693.307 875.718,676.986 876.278,693.314 876.837,675.551 877.396,710.719 877.955,727.584 878.515,755.364 879.074,767.743 879.633,765.747 880.192,760.378 880.752,774.024 881.311,816.832 881.87,796.884 882.429,775.315 882.989,751.051 883.548,750.178 884.107,767.08 884.666,763.96 885.226,795.889 885.785,793.75 886.344,739.109 886.903,732.627 887.463,716.202 888.022,714.055 888.581,694.05 889.14,662.53 889.7,680.371 890.259,679.204 890.818,681.783 891.377,684.529 891.937,679.783 892.496,683.553 893.055,687.578 893.614,685.506 894.174,667.904 894.733,704.329 895.292,686.006 895.851,687.218 896.411,686.52 896.97,672.198 897.529,703.925 898.088,750.246 898.648,764.966 899.207,758.187 899.766,772.098 900.325,716.163 900.885,714.363 901.444,727.81 902.003,676.9 902.562,692.354 903.122,693.179 903.681,676.982 904.24,679.72 904.799,698.147 905.359,699.336 905.918,732.596 906.477,749.486 907.036,778.078 907.596,773.392 908.155,690.484 908.714,709.604 909.273,676.181 909.833,658.705 910.392,643.422 910.951,629.268 911.51,659.432 912.07,692.338 912.629,675.017 913.188,674.295 913.747,691.407 914.307,675.391 914.866,695.982 915.425,695.388 915.984,661.781 916.544,631.838 917.103,652.931 917.662,658.112 918.221,676.873 918.781,673.942 919.34,689.462 919.899,687.555 920.458,687.298 921.018,670.591 921.577,654.624 922.136,670.894 922.695,670.013 923.255,655.32 923.814,643.458 924.373,663.343 924.932,647.119 925.492,617.635 926.051,604.434 926.61,612.364 927.169,572.227 927.729,577.877 928.288,583.177 928.847,573.532 929.406,560.987 929.966,599.554 930.525,603.887 931.084,622.643 931.644,610.786 932.203,615.538 932.762,617.793 933.321,638.87 933.881,624.166 934.44,626.01 934.999,628.283 935.558,630.771 936.118,635.297 936.677,637.725 937.236,641.133 937.795,642.762 938.355,641.121 938.914,646.379 939.473,615.939 940.032,606.363 940.592,596.834 941.151,586.999 941.71,628.054 942.269,596.589 942.829,582.838 943.388,606.532 943.947,626.215 944.506,625.104 945.066,643.684 945.625,630.36 946.184,652.969 946.743,661.741 947.303,676.445 947.862,645.109 948.421,647.409 948.98,646.034 949.54,632.294 950.099,654.637 950.658,640.32 951.217,672.12 951.777,674.527 952.336,692.246 952.895,725.558 953.454,707.424 954.014,692.986 954.573,692.536 955.132,692.106 955.691,705.881 956.251,705.094 956.81,737.403 957.369,734.331 957.928,733.169 958.488,745.56 959.047,760.163 959.606,722.977 960.165,721.592 960.725,705.51 961.284,706.863 961.843,719.295 962.402,717.3 962.962,715.102 963.521,715.089 964.08,682.235 964.639,715.221 965.199,725.019 965.758,739.702 966.317,719.934 966.876,746.418 967.436,772.946 967.995,735.836 968.554,697.274 969.113,678.908 969.673,661.296 970.232,680.006 970.791,678.475 971.35,680.784 971.91,696.729 972.469,743.973 973.028,726.47 973.587,692.6 974.147,689.846 974.706,671.152 975.265,688.824 975.824,690.358 976.384,639.897 976.943,660.609 977.502,659.033 978.061,675.168 978.621,661.403 979.18,679.25 979.739,698.943 980.298,748.234 980.858,765.24 981.417,744.336 981.976,727.126 982.535,709.197 983.095,742.329 983.654,738.827 984.213,723.866 984.772,708.123 985.332,704.802 985.891,671.11 986.45,656.014 987.009,672.455 987.569,656.935 988.128,675.462 988.687,691.996 989.246,741.863 989.806,757.254 990.365,801.962 990.924,815.19 991.483,826.413 992.043,832.766 992.602,810.306 993.161,821.86 993.72,795.577 994.28,805.2 994.839,788.912 995.398,801.905 995.957,763.692 996.517,774.396 997.076,751.631 997.635,763.041 998.194,740.331 998.754,770.216 999.313,733.758 999.872,748.757 1000.43,761.014 1000.99,756.227 1001.55,738.896 1002.11,717.517 1002.67,682.314 1003.23,697.607 1003.79,713.566 1004.35,727.45 1004.91,725.58 1005.46,709.492 1006.02,706.079 1006.58,685.981 1007.14,652.87 1007.7,653.512 1008.26,659.765 1008.82,640.25 1009.38,639.502 1009.94,658.603 1010.5,644.232 1011.06,610.428 1011.62,615.462 1012.18,650.826 1012.73,684.087 1013.29,650.017 1013.85,602.56 1014.41,622.428 1014.97,625.864 1015.53,626.557 1016.09,679.444 1016.65,677.655 1017.21,633.208 1017.77,636.305 1018.33,624.595 1018.89,627.723 1019.45,613.448 1020.01,597.654 1020.56,602.441 1021.12,591.99 1021.68,578.915 1022.24,582.92 1022.8,621.92 1023.36,642.742 1023.92,663.272 1024.48,668.435 1025.04,673.517 1025.6,675.294 1026.16,659.807 1026.72,662.369 1027.28,646.97 1027.83,631.305 1028.39,618.088 1028.95,687.693 1029.51,704.169 1030.07,688.653 1030.63,706.489 1031.19,701.572 1031.75,702.105 1032.31,685.621 1032.87,682.718 1033.43,694.599 1033.99,691.915 1034.55,674.707 1035.1,693.293 1035.66,657.253 1036.22,692.575 1036.78,694.033 1037.34,677.342 1037.9,658 1038.46,677.217 1039.02,660.544 1039.58,662.38 1040.14,711.127 1040.7,727.934 1041.26,737.687 1041.82,733.24 1042.38,729.838 1042.93,694.79 1043.49,693.642 1044.05,693.845 1044.61,708.76 1045.17,724.614 1045.73,740.232 1046.29,737.461 1046.85,723.501 1047.41,723.844 1047.97,690.633 1048.53,658.166 1049.09,673.468 1049.65,725.717 1050.2,728.45 1050.76,729.278 1051.32,759.863 1051.88,773.543 1052.44,787.646 1053,782.246 1053.56,792.605 1054.12,753.026 1054.68,795.018 1055.24,770.398 1055.8,732.292 1056.36,747.558 1056.92,747.466 1057.48,746.964 1058.03,748.176 1058.59,726.406 1059.15,724.982 1059.71,706.935 1060.27,690.545 1060.83,755.218 1061.39,782.072 1061.95,775.955 1062.51,735.994 1063.07,752.149 1063.63,752.415 1064.19,764.908 1064.75,743.155 1065.3,757.81 1065.86,754.548 1066.42,735.831 1066.98,747.441 1067.54,742.195 1068.1,723.228 1068.66,690.31 1069.22,703.802 1069.78,717.265 1070.34,665.637 1070.9,652.003 1071.46,653.36 1072.02,636.901 1072.57,641.103 1073.13,641.317 1073.69,644.679 1074.25,633.138 1074.81,620.686 1075.37,688.439 1075.93,692.427 1076.49,675.178 1077.05,672.984 1077.61,707.71 1078.17,708.265 1078.73,689.74 1079.29,689.968 1079.85,689.12 1080.4,689.44 1080.96,703.8 1081.52,690.193 1082.08,689.875 1082.64,689.449 1083.2,675.012 1083.76,690.449 1084.32,690.789 1084.88,658.691 1085.44,661.352 1086,632.005 1086.56,632.312 1087.12,602.701 1087.67,588.736 1088.23,581.241 1088.79,589.955 1089.35,611.452 1089.91,631.156 1090.47,648.172 1091.03,647.874 1091.59,648.292 1092.15,647.355 1092.71,683.43 1093.27,669.974 1093.83,639.119 1094.39,671.737 1094.94,708.22 1095.5,735.601 1096.06,717.509 1096.62,731.69 1097.18,746.256 1097.74,743.013 1098.3,742.513 1098.86,721.953 1099.42,738.567 1099.98,767.266 1100.54,747.662 1101.1,741.247 1101.66,739.718 1102.22,721.045 1102.77,735.496 1103.33,730.65 1103.89,726.771 1104.45,725.855 1105.01,738.136 1105.57,703.001 1106.13,703.784 1106.69,719.118 1107.25,704.17 1107.81,670.355 1108.37,671.721 1108.93,658.431 1109.49,645.255 1110.04,678.84 1110.6,676.949 1111.16,645.37 1111.72,727.443 1112.28,789.804 1112.84,813.912 1113.4,806.42 1113.96,835.838 1114.52,813.332 1115.08,790.977 1115.64,737.292 1116.2,719.78 1116.76,749.242 1117.31,713.797 1117.87,676.81 1118.43,677.216 1118.99,673.625 1119.55,628.799 1120.11,633.344 1120.67,617.328 1121.23,638.655 1121.79,658.976 1122.35,645.172 1122.91,633.944 1123.47,638.144 1124.03,656.369 1124.59,642.744 1125.14,617.339 1125.7,637.873 1126.26,654.535 1126.82,669.56 1127.38,670.365 1127.94,654.653 1128.5,673.832 1129.06,706.551 1129.62,686.318 1130.18,699.454 1130.74,697.307 1131.3,714.688 1131.86,714.319 1132.41,682.978 1132.97,681.91 1133.53,681.649 1134.09,666.176 1134.65,668.4 1135.21,685.86 1135.77,683.159 1136.33,694.12 1136.89,694.586 1137.45,678.691 1138.01,675.612 1138.57,642.108 1139.13,629.133 1139.68,631.802 1140.24,583.983 1140.8,575.908 1141.36,594.527 1141.92,626.919 1142.48,615.14 1143.04,634.554 1143.6,669.352 1144.16,657.075 1144.72,647.03 1145.28,667.203 1145.84,683.095 1146.4,668.305 1146.96,697.529 1147.51,679.425 1148.07,665.142 1148.63,679.957 1149.19,661.442 1149.75,663.076 1150.31,647.719 1150.87,636.054 1151.43,654.654 1151.99,684.935 1152.55,698.985 1153.11,731.644 1153.67,698.91 1154.23,712.697 1154.78,727.679 1155.34,735.525 1155.9,734.594 1156.46,732.467 1157.02,747.204 1157.58,743.665 1158.14,740.759 1158.7,737.131 1159.26,750.322 1159.82,730.692 1160.38,778.372 1160.94,756.401 1161.5,736.698 1162.05,698.601 1162.61,645.837 1163.17,663.898 1163.73,646.269 1164.29,647.425 1164.85,667.133 1165.41,635.409 1165.97,639.863 1166.53,628.547 1167.09,630.362 1167.65,667.857 1168.21,684.393 1168.77,668.078 1169.33,653.554 1169.88,638.233 1170.44,606.036 1171,624.885 1171.56,645.406 1172.12,678.126 1172.68,695.379 1173.24,707.509 1173.8,706.168 1174.36,711.016 1174.92,728.577 1175.48,693.867 1176.04,710.798 1176.6,727.68 1177.15,713.782 1177.71,697.384 1178.27,700.387 1178.83,683.629 1179.39,665.761 1179.95,667.852 1180.51,699.35 1181.07,695.967 1181.63,693.563 1182.19,696.25 1182.75,695.359 1183.31,712.639 1183.87,728.439 1184.43,711.28 1184.98,694.194 1185.54,706.333 1186.1,673.763 1186.66,675.059 1187.22,679.504 1187.78,697.935 1188.34,680.416 1188.9,682.866 1189.46,614.552 1190.02,665.81 1190.58,633.516 1191.14,670.033 1191.7,653.851 1192.25,637.404 1192.81,671.753 1193.37,686.629 1193.93,682.427 1194.49,682.184 1195.05,685.339 1195.61,702.823 1196.17,704.346 1196.73,717.142 1197.29,696.105 1197.85,711.806 1198.41,706.026 1198.97,720.328 1199.52,718.158 1200.08,697.373 1200.64,677.836 1201.2,741.253 1201.76,738.31 1202.32,668.559 1202.88,701.341 1203.44,718.016 1204,684.254 1204.56,700.669 1205.12,651.586 1205.68,669.446 1206.24,687.807 1206.8,639.767 1207.35,655.415 1207.91,656.939 1208.47,660.625 1209.03,665.161 1209.59,634.581 1210.15,637.198 1210.71,558.814 1211.27,584.711 1211.83,574.026 1212.39,545.904 1212.95,551.826 1213.51,542.201 1214.07,534.581 1214.62,563.151 1215.18,566.633 1215.74,638.94 1216.3,624.177 1216.86,645.213 1217.42,584.938 1217.98,592.822 1218.54,600.52 1219.1,592.611 1219.66,579.904 1220.22,616.014 1220.78,615.142 1221.34,605.647 1221.89,643.234 1222.45,628.437 1223.01,649.249 1223.57,620.95 1224.13,642.489 1224.69,633.659 1225.25,635.632 1225.81,627.716 1226.37,630.197 1226.93,642.765 1227.49,673.506 1228.05,640.206 1228.61,626.669 1229.17,632.041 1229.72,632.813 1230.28,619.733 1230.84,636.791 1231.4,689.29 1231.96,687.417 1232.52,684.625 1233.08,702.425 1233.64,669.602 1234.2,701.936 1234.76,715.459 1235.32,714.213 1235.88,747.998 1236.44,774.21 1236.99,819.957 1237.55,813.428 1238.11,838.457 1238.67,815.922 1239.23,792.075 1239.79,802.179 1240.35,778.273 1240.91,807.042 1241.47,753.266 1242.03,764.597 1242.59,779.751 1243.15,773.141 1243.71,753.72 1244.26,737.233 1244.82,733.049 1245.38,730.59 1245.94,728.751 1246.5,750.899 1247.06,750.218 1247.62,777.394 1248.18,790.05 1248.74,785.669 1249.3,814.198 1249.86,795.444 1250.42,819.812 1250.98,781.684 1251.54,775.929 1252.09,754.384 1252.65,734.369 1253.21,745.859 1253.77,726.83 1254.33,723.392 1254.89,753.211 1255.45,735.36 1256.01,714.909 1256.57,728.482 1257.13,695.142 1257.69,709.261 1258.25,673.481 1258.81,671.539 1259.36,671.363 1259.92,676.898 1260.48,677.622 1261.04,697.034 1261.6,699.112 1262.16,696.405 1262.72,677.117 1263.28,682.098 1263.84,685.622 1264.4,637.271 1264.96,626.05 1265.52,611.918 1266.08,583.813 1266.63,589.461 1267.19,579.375 1267.75,584.363 1268.31,574.997 1268.87,582.263 1269.43,592.75 1269.99,598.232 1270.55,603.921 1271.11,607.72 1271.67,596.144 1272.23,601.003 1272.79,571.797 1273.35,609.297 1273.91,614.582 1274.46,604.822 1275.02,611.935 1275.58,632.378 1276.14,619.723 1276.7,640.239 1277.26,671.361 1277.82,672.445 1278.38,675.247 1278.94,724.748 1279.5,721 1280.06,766.196 1280.62,791.939 1281.18,784.728 1281.73,794.341 1282.29,788.561 1282.85,778.522 1283.41,771.802 1283.97,755.345 1284.53,738.011 1285.09,720.25 1285.65,736.613 1286.21,781.464 1286.77,779.034 1287.33,774.204 1287.89,770.462 1288.45,767.174 1289,716.017 1289.56,779.76 1290.12,774.402 1290.68,786.483 1291.24,777.893 1291.8,771.234 1292.36,703.59 1292.92,700.977 1293.48,684.32 1294.04,684.763 1294.6,684.335 1295.16,714.103 1295.72,694.379 1296.28,677.94 1296.83,679.316 1297.39,646.583 1297.95,681.813 1298.51,682.579 1299.07,731.762 1299.63,728.944 1300.19,713.683 1300.75,694.95 1301.31,679.751 1301.87,666.373 1302.43,668.061 1302.99,698.859 1303.55,697.108 1304.1,696.365 1304.66,659.64 1305.22,664.528 1305.78,700.944 1306.34,698.349 1306.9,682.991 1307.46,748.123 1308.02,698.447 1308.58,681.589 1309.14,680.704 1309.7,665.34 1310.26,650.463 1310.82,651.47 1311.38,651.272 1311.93,620.742 1312.49,643.952 1313.05,679.529 1313.61,682.558 1314.17,712.84 1314.73,708.904 1315.29,707.748 1315.85,673.931 1316.41,672.131 1316.97,672.707 1317.53,673.513 1318.09,656.553 1318.65,658.287 1319.2,673.166 1319.76,674.961 1320.32,692.982 1320.88,692.534 1321.44,655.712 1322,641.754 1322.56,645.033 1323.12,647.487 1323.68,631.703 1324.24,618.993 1324.8,617.14 1325.36,619.499 1325.92,640.764 1326.47,640.576 1327.03,660.376 1327.59,628.869 1328.15,615.23 1328.71,617.279 1329.27,636.091 1329.83,622.792 1330.39,624.97 1330.95,645.296 1331.51,628.856 1332.07,599.721 1332.63,620.336 1333.19,627.254 1333.75,612.693 1334.3,616.938 1334.86,636.161 1335.42,667.562 1335.98,689.498 1336.54,672.354 1337.1,658.03 1337.66,657.675 1338.22,662.933 1338.78,631.578 1339.34,699.324 1339.9,681.546 1340.46,728.453 1341.02,712.929 1341.57,695.597 1342.13,693.691 1342.69,694.143 1343.25,664.951 1343.81,664.756 1344.37,654.895 1344.93,657.607 1345.49,676.552 1346.05,674.305 1346.61,677.028 1347.17,679.184 1347.73,682.899 1348.29,651.962 1348.84,686.609 1349.4,704.169 1349.96,716.334 1350.52,703.282 1351.08,703.679 1351.64,716.595 1352.2,731.092 1352.76,708.663 1353.32,757.243 1353.88,800.794 1354.44,780.124 1355,744.874 1355.56,726.287 1356.12,728.077 1356.67,696.646 1357.23,710.038 1357.79,711.237 1358.35,728.682 1358.91,743.982 1359.47,725.546 1360.03,692.657 1360.59,723.635 1361.15,685.711 1361.71,732.401 1362.27,699.682 1362.83,715.75 1363.39,713.337 1363.94,712.912 1364.5,759.677 1365.06,738.994 1365.62,770.413 1366.18,767.716 1366.74,762.442 1367.3,773.405 1367.86,751.715 1368.42,748.527 1368.98,763.574 1369.54,743.789 1370.1,758.076 1370.66,753.25 1371.21,732.754 1371.77,731.939 1372.33,710.762 1372.89,693.287 1373.45,692.844 1374.01,695.733 1374.57,694.735 1375.13,676.545 1375.69,679.204 1376.25,678.606 1376.81,694.92 1377.37,678.159 1377.93,660.265 1378.49,663.392 1379.04,664.6 1379.6,652.787 1380.16,639.16 1380.72,639.201 1381.28,691.09 1381.84,722.072 1382.4,721.643 1382.96,735.298 1383.52,731.467 1384.08,712.444 1384.64,694.303 1385.2,643.129 1385.76,696.401 1386.31,649.086 1386.87,619.055 1387.43,656.375 1387.99,659.566 1388.55,647.184 1389.11,668.247 1389.67,681.044 1390.23,665.859 1390.79,651.89 1391.35,637.118 1391.91,671.865 1392.47,684.86 1393.03,718.055 1393.58,713.586 1394.14,693.906 1394.7,676.458 1395.26,659.292 1395.82,645.289 1396.38,673.829 1396.94,675.135 1397.5,691.424 1398.06,677.551 1398.62,665.434 1399.18,663.808 1399.74,662.479 1400.3,631.836 1400.86,614.515 1401.41,619.99 1401.97,610.984 1402.53,567.102 1403.09,605.237 1403.65,607.173 1404.21,610.418 1404.77,565.766 1405.33,569.209 1405.89,560.354 1406.45,565.137 1407.01,541.578 1407.57,595.321 1408.13,582.263 1408.68,606.81 1409.24,659.707 1409.8,693.274 1410.36,676.72 1410.92,680.487 1411.48,681.318 1412.04,698.786 1412.6,648.569 1413.16,632.93 1413.72,669.039 1414.28,636.211 1414.84,640.562 1415.4,656.743 1415.95,642.521 1416.51,626.133 1417.07,627.723 1417.63,665.501 1418.19,717.871 1418.75,715.997 1419.31,714.173 1419.87,680.289 1420.43,681.129 1420.99,679.442 1421.55,696.484 1422.11,694.222 1422.67,696.295 1423.23,682.45 1423.78,687.461 1424.34,671.415 1424.9,671.108 1425.46,671.572 1426.02,673.656 1426.58,659.415 1427.14,696.994 1427.7,696.511 1428.26,696.49 1428.82,679.913 1429.38,667.225 1429.94,667.375 1430.5,668.883 1431.05,668.491 1431.61,689.24 1432.17,654.92 1432.73,636.668 1433.29,607.526 1433.85,625.866 1434.41,645.712 1434.97,649.405 1435.53,668.551 1436.09,669.238 1436.65,705.404 1437.21,702.456 1437.77,698.747 1438.33,696.709 1438.88,745.052 1439.44,724.78 1440,706.176 1440.56,722.559 1441.12,737.802 1441.68,720.215 1442.24,703.214 1442.8,688.934 1443.36,689.887 1443.92,689.726 1444.48,690.778 1445.04,691.136 1445.6,709.29 1446.15,723.045 1446.71,736.96 1447.27,698.97 1447.83,683.034 1448.39,701.465 1448.95,713.505 1449.51,695.081 1450.07,707.719 1450.63,721.155 1451.19,734.172 1451.75,716.859 1452.31,712.685 1452.87,730.346 1453.42,775.089 1453.98,756.954 1454.54,770.64 1455.1,749.982 1455.66,714.829 1456.22,742.904 1456.78,738.844 1457.34,737.22 1457.9,718.953 1458.46,714.651 1459.02,713.279 1459.58,711.327 1460.14,708.293 1460.7,688.874 1461.25,688.772 1461.81,660.807 1462.37,661.665 1462.93,648.916 1463.49,646.246 1464.05,618.529 1464.61,604.998 1465.17,659.756 1465.73,678.245 1466.29,660.335 1466.85,648.175 1467.41,651.559 1467.97,655.07 1468.52,658.229 1469.08,674.917 1469.64,640.892 1470.2,625.916 1470.76,611.42 1471.32,599.854 1471.88,589.417 1472.44,645.327 1473,681.369 1473.56,683.226 1474.12,682.269 1474.68,665.004 1475.24,649.483 1475.79,666.956 1476.35,651.79 1476.91,653.564 1477.47,672.72 1478.03,672.793 1478.59,690.552 1479.15,655.003 1479.71,675.546 1480.27,674.319 1480.83,703.086 1481.39,682.533 1481.95,686.577 1482.51,703.509 1483.07,718.649 1483.62,717.105 1484.18,713.066 1484.74,693.97 1485.3,695.829 1485.86,711.633 1486.42,758.112 1486.98,719.153 1487.54,685.484 1488.1,701.646 1488.66,655.571 1489.22,657.226 1489.78,674.846 1490.34,691.012 1490.89,701.061 1491.45,718.551 1492.01,734.045 1492.57,762.442 1493.13,789.58 1493.69,799.741 1494.25,793.807 1494.81,785.647 1495.37,795.734 1495.93,752.495 1496.49,744.978 1497.05,676.407 1497.61,676.969 1498.16,647.804 1498.72,633.428 1499.28,672.054 1499.84,641.496 1500.4,645.016 1500.96,661.717 1501.52,663.779 1502.08,647.646 1502.64,618.976 1503.2,655.324 1503.76,655.252 1504.32,639.943 1504.88,641.664 1505.44,659.747 1505.99,661.918 1506.55,680.937 1507.11,682.346 1507.67,664.326 1508.23,667.666 1508.79,699.617 1509.35,631.319 1509.91,652.072 1510.47,671.549 1511.03,703.896 1511.59,686.409 1512.15,716.897 1512.71,715.734 1513.26,711.232 1513.82,711.064 1514.38,673.89 1514.94,721.133 1515.5,754.604 1516.06,748.906 1516.62,762.102 1517.18,807.272 1517.74,799.21 1518.3,775.784 1518.86,754.906 1519.42,748.161 1519.98,745.989 1520.53,758.941 1521.09,737.52 1521.65,733.937 1522.21,712.917 1522.77,709.317 1523.33,708.186 1523.89,724.315 1524.45,721.678 1525.01,717.898 1525.57,728.454 1526.13,725.655 1526.69,705.702 1527.25,689.519 1527.81,655.556 1528.36,637.991 1528.92,624.1 1529.48,595.78 1530.04,581.869 1530.6,571.57 1531.16,613.724 1531.72,620.176 1532.28,610.058 1532.84,610.466 1533.4,614.032 1533.96,636.093 1534.52,652.289 1535.08,653.823 1535.63,640.332 1536.19,656.818 1536.75,657.406 1537.31,660.061 1537.87,645.163 1538.43,631.751 1538.99,681.929 1539.55,682.952 1540.11,684.282 1540.67,686.06 1541.23,670.692 1541.79,673.028 1542.35,675.252 1542.9,657.074 1543.46,689.304 1544.02,689.652 1544.58,652.138 1545.14,642.27 1545.7,660.916 1546.26,661.555 1546.82,678.181 1547.38,681.414 1547.94,695.837 1548.5,710.563 1549.06,690.474 1549.62,658.198 1550.18,656.009 1550.73,659.252 1551.29,680.519 1551.85,711.969 1552.41,679.496 1552.97,712.026 1553.53,676.154 1554.09,658.973 1554.65,624.729 1555.21,661.581 1555.77,679.7 1556.33,664.459 1556.89,667.155 1557.45,662.299 1558,649.222 1558.56,651.697 1559.12,656.148 1559.68,641.941 1560.24,622.858 1560.8,605.243 1561.36,610.723 1561.92,618.922 1562.48,626.286 1563.04,632.356 1563.6,651.377 1564.16,686.316 1564.72,688.507 1565.28,669.788 1565.83,653.989 1566.39,672.133 1566.95,642.538 1567.51,644.813 1568.07,678.906 1568.63,695.759 1569.19,678.288 1569.75,680 1570.31,709.938 1570.87,738.21 1571.43,748.462 1571.99,744.636 1572.55,744.02 1573.1,725.447 1573.66,724.035 1574.22,736.492 1574.78,749.094 1575.34,714.033 1575.9,713.233 1576.46,727.02 1577.02,724.673 1577.58,706.908 1578.14,658.379 1578.7,663.172 1579.26,650.476 1579.82,656.409 1580.37,656.421 1580.93,639.87 1581.49,643.256 1582.05,646.957 1582.61,613.013 1583.17,664.346 1583.73,648.858 1584.29,615.572 1584.85,619.533 1585.41,624.43 1585.97,644.66 1586.53,635.68 1587.09,655.802 1587.65,673.173 1588.2,671.549 1588.76,688.154 1589.32,654.386 1589.88,641.552 1590.44,660.478 1591,678.756 1591.56,712.144 1592.12,726.945 1592.68,689.504 1593.24,692.754 1593.8,678.218 1594.36,662.236 1594.92,682.869 1595.47,699.312 1596.03,713.376 1596.59,714.558 1597.15,732.014 1597.71,711.724 1598.27,727.749 1598.83,725.964 1599.39,720.591 1599.95,717.464 1600.51,714.391 1601.07,710.908 1601.63,706.972 1602.19,707.931 1602.74,705.357 1603.3,723.318 1603.86,721.851 1604.42,687.671 1604.98,685.948 1605.54,686.289 1606.1,689.388 1606.66,709.247 1607.22,706.81 1607.78,718.633 1608.34,701.684 1608.9,701.674 1609.46,703.007 1610.02,706.012 1610.57,674.783 1611.13,688.875 1611.69,660.46 1612.25,662.671 1612.81,648.083 1613.37,633.581 1613.93,635.933 1614.49,654.617 1615.05,639.302 1615.61,674.473 1616.17,674.615 1616.73,677.045 1617.29,660.342 1617.84,663.131 1618.4,633.255 1618.96,634.315 1619.52,621.122 1620.08,625.773 1620.64,625.087 1621.2,624.053 1621.76,605.829 1622.32,610.938 1622.88,637.738 1623.44,607.247 1624,611.136 1624.56,615.291 1625.11,616.948 1625.67,613.138 1626.23,618.36 1626.79,574.409 1627.35,583.294 1627.91,601.472 1628.47,608.231 1629.03,609.928 1629.59,632.656 1630.15,618.093 1630.71,625.666 1631.27,615.014 1631.83,619.84 1632.39,620.136 1632.94,607.042 1633.5,607.351 1634.06,610.429 1634.62,598.862 1635.18,604.942 1635.74,580.758 1636.3,606.289 1636.86,615.076 1637.42,664.911 1637.98,681.525 1638.54,697.672 1639.1,710.882 1639.66,710.728 1640.21,710.515 1640.77,757.475 1641.33,756.05 1641.89,738.743 1642.45,721.034 1643.01,720.229 1643.57,702.706 1644.13,721.176 1644.69,735.275 1645.25,733.97 1645.81,762.264 1646.37,775.562 1646.93,753.555 1647.48,717.012 1648.04,734.63 1648.6,717.882 1649.16,716.466 1649.72,776.206 1650.28,757.461 1650.84,751.633 1651.4,766.757 1651.96,777.023 1652.52,787.447 1653.08,751.087 1653.64,749.507 1654.2,746.871 1654.76,759.564 1655.31,788.648 1655.87,783.119 1656.43,764.426 1656.99,779.355 1657.55,822.111 1658.11,832.615 1658.67,824.501 1659.23,768.623 1659.79,765.371 1660.35,763.357 1660.91,777.063 1661.47,739.322 1662.03,749.841 1662.58,774.281 1663.14,754.826 1663.7,767.964 1664.26,763.39 1664.82,709.474 1665.38,706.358 1665.94,674.349 1666.5,673.523 1667.06,688.168 1667.62,686.433 1668.18,671.427 1668.74,688.516 1669.3,674.431 1669.85,654.752 1670.41,687.39 1670.97,705.16 1671.53,687.22 1672.09,686.662 1672.65,698.863 1673.21,697.805 1673.77,710.312 1674.33,688.389 1674.89,704.354 1675.45,720.068 1676.01,719.409 1676.57,715.702 1677.13,743.67 1677.68,706.793 1678.24,690.89 1678.8,689.727 1679.36,674.036 1679.92,684.642 1680.48,683.557 1681.04,682.879 1681.6,666.658 1682.16,635.963 1682.72,635.066 1683.28,670.955 1683.84,653.804 1684.4,654.289 1684.95,671.545 1685.51,720.497 1686.07,714.937 1686.63,729.74 1687.19,727.165 1687.75,741.528 1688.31,753.872 1688.87,700.595 1689.43,714.316 1689.99,678.826 1690.55,695.42 1691.11,695.593 1691.67,712.392 1692.23,678.488 1692.78,727.109 1693.34,694.654 1693.9,694.386 1694.46,705.726 1695.02,694.645 1695.58,674.631 1696.14,676.115 1696.7,631.227 1697.26,648.734 1697.82,651.593 1698.38,651.427 1698.94,620.765 1699.5,587.775 1700.05,608.422 1700.61,609.792 1701.17,600.737 1701.73,588.753 1702.29,592.086 1702.85,614.482 1703.41,631.966 1703.97,651.493 1704.53,675.965 1705.09,641.159 1705.65,640.656 1706.21,625.771 1706.77,625.152 1707.32,640.057 1707.88,659.281 1708.44,689.833 1709,672.547 1709.56,704.979 1710.12,675.478 1710.68,678.778 1711.24,698.799 1711.8,698.426 1712.36,679.345 1712.92,695.639 1713.48,693.216 1714.04,725.838 1714.6,722.096 1715.15,735.189 1715.71,731.983 1716.27,730.256 1716.83,744.124 1717.39,690.752 1717.95,638.601 1718.51,658 1719.07,674.122 1719.63,675.407 1720.19,656.58 1720.75,675.864 1721.31,658.448 1721.87,660.563 1722.42,662.726 1722.98,663.403 1723.54,663.312 1724.1,665.007 1724.66,666.813 1725.22,699.35 1725.78,700.58 1726.34,698.312 1726.9,680.107 1727.46,696.471 1728.02,696.378 1728.58,708.105 1729.14,723.28 1729.69,724.752 1730.25,704.664 1730.81,703.304 1731.37,702.65 1731.93,667.385 1732.49,652.511 1733.05,657.721 1733.61,609.611 1734.17,615.178 1734.73,650.678 1735.29,651.095 1735.85,665.058 1736.41,665.268 1736.97,662.591 1737.52,630.908 1738.08,650.057 1738.64,652.025 1739.2,636.205 1739.76,653.591 1740.32,699.648 1740.88,701.311 1741.44,686.828 1742,688.353 1742.56,688.879 1743.12,751.314 1743.68,778.115 1744.24,755.619 1744.79,765.414 1745.35,763.482 1745.91,726.309 1746.47,737.888 1747.03,700.199 1747.59,699.127 1748.15,700.359 1748.71,715.947 1749.27,697.782 1749.83,680.123 1750.39,696.936 1750.95,696.529 1751.51,722.575 1752.06,689.529 1752.62,720.634 1753.18,653.081 1753.74,670.973 1754.3,658.816 1754.86,660.362 1755.42,661.279 1755.98,646.048 1756.54,648.563 1757.1,650.934 1757.66,668.992 1758.22,637.044 1758.78,640.968 1759.34,626.521 1759.89,648.861 1760.45,640.407 1761.01,658.495 1761.57,660.058 1762.13,626.716 1762.69,612.556 1763.25,649.83 1763.81,667.037 1764.37,682.857 1764.93,683.832 1765.49,632.752 1766.05,587.666 1766.61,607.628 1767.16,658.282 1767.72,658.15 1768.28,648.242 1768.84,635.099 1769.4,635.768 1769.96,654.63 1770.52,686.45 1771.08,707.245 1771.64,688.306 1772.2,687.458 1772.76,690.287 1773.32,705.48 1773.88,721.582 1774.43,766.382 1774.99,745.956 1775.55,742.971 1776.11,724.068 1776.67,723.807 1777.23,738.363 1777.79,717.39 1778.35,715.166 1778.91,696.064 1779.47,743.944 1780.03,787.727 1780.59,763.338 1781.15,757.229 1781.71,770.274 1782.26,730.938 1782.82,730.155 1783.38,740.836 1783.94,770.98 1784.5,764.32 1785.06,731.652 1785.62,728.37 1786.18,727.74 1786.74,722.186 1787.3,703.29 1787.86,673.03 1788.42,691.479 1788.98,689.522 1789.53,672.594 1790.09,655.454 1790.65,643.457 1791.21,676.968 1791.77,662.644 1792.33,697.955 1792.89,714.171 1793.45,682.719 1794.01,699.466 1794.57,712.101 1795.13,695.023 1795.69,714.056 1796.25,679.106 1796.8,680.543 1797.36,680.265 1797.92,662.894 1798.48,682.661 1799.04,715.207 1799.6,710.071 1800.16,724.503 1800.72,734.777 1801.28,716.933 1801.84,732.862 1802.4,728.734 1802.96,758.019 1803.52,753.027 1804.08,701.44 1804.63,682.572 1805.19,679.832 1805.75,664.881 1806.31,694.762 1806.87,644.673 1807.43,662.406 1807.99,676.704 1808.55,660.169 1809.11,662.89 1809.67,698.082 1810.23,700.309 1810.79,747.899 1811.35,730.16 1811.9,759.567 1812.46,738.536 1813.02,754.656 1813.58,750.739 1814.14,761.754 1814.7,757.036 1815.26,753.562 1815.82,781.224 1816.38,743.759 1816.94,753.983 1817.5,718.402 1818.06,667.302 1818.62,703.148 1819.18,684.831 1819.73,634.227 1820.29,669.265 1820.85,686.866 1821.41,733.641 1821.97,683.283 1822.53,683.616 1823.09,726.858 1823.65,710.383 1824.21,677.807 1824.77,694.026 1825.33,695.682 1825.89,693.195 1826.45,678.097 1827,679.456 1827.56,663.227 1828.12,634.939 1828.68,623.197 1829.24,643.144 1829.8,648.128 1830.36,618.652 1830.92,620.828 1831.48,578.191 1832.04,585.833 1832.6,609.217 1833.16,626.197 1833.72,678.363 1834.27,695.851 1834.83,696.121 1835.39,695.121 1835.95,664.119 1836.51,648.242 1837.07,637.535 1837.63,705.372 1838.19,704.99 \"/>\n<path clip-path=\"url(#clip963)\" d=\"M720.247 692.455 L720.806 692.455 L721.365 692.455 L721.924 692.455 L722.484 692.455 L723.043 692.455 L723.602 692.455 L724.161 692.455 L724.721 692.455 L725.28 692.455 L725.839 692.455 L726.398 692.455 L726.958 692.455 L727.517 692.455 L728.076 692.455 L728.635 692.455 L729.195 692.455 L729.754 692.455 L730.313 692.455 L730.872 692.455 L731.432 692.455 L731.991 692.455 L732.55 692.455 L733.109 692.455 L733.669 692.455 L734.228 692.455 L734.787 692.455 L735.346 692.455 L735.906 692.455 L736.465 692.455 L737.024 692.455 L737.583 692.455 L738.143 692.455 L738.702 692.455 L739.261 692.455 L739.82 692.455 L740.38 692.455 L740.939 692.455 L741.498 692.455 L742.057 692.455 L742.617 692.455 L743.176 692.455 L743.735 692.455 L744.294 692.455 L744.854 692.455 L745.413 692.455 L745.972 692.455 L746.531 692.455 L747.091 692.455 L747.65 692.455 L748.209 692.455 L748.768 692.455 L749.328 692.455 L749.887 692.455 L750.446 692.455 L751.005 692.455 L751.565 692.455 L752.124 692.455 L752.683 692.455 L753.242 692.455 L753.802 692.455 L754.361 692.455 L754.92 692.455 L755.479 692.455 L756.039 692.455 L756.598 692.455 L757.157 692.455 L757.716 692.455 L758.276 692.455 L758.835 692.455 L759.394 692.455 L759.953 692.455 L760.513 692.455 L761.072 692.455 L761.631 692.455 L762.19 692.455 L762.75 692.455 L763.309 692.455 L763.868 692.455 L764.427 692.455 L764.987 692.455 L765.546 692.455 L766.105 692.455 L766.664 692.455 L767.224 692.455 L767.783 692.455 L768.342 692.455 L768.901 692.455 L769.461 692.455 L770.02 692.455 L770.579 692.455 L771.138 692.455 L771.698 692.455 L772.257 692.455 L772.816 692.455 L773.375 692.455 L773.935 692.455 L774.494 692.455 L775.053 692.455 L775.612 692.455 L776.172 692.455 L776.731 692.455 L777.29 692.455 L777.849 692.455 L778.409 692.455 L778.968 692.455 L779.527 692.455 L780.086 692.455 L780.646 692.455 L781.205 692.455 L781.764 692.455 L782.323 692.455 L782.883 692.455 L783.442 692.455 L784.001 692.455 L784.56 692.455 L785.12 692.455 L785.679 692.455 L786.238 692.455 L786.797 692.455 L787.357 692.455 L787.916 692.455 L788.475 692.455 L789.034 692.455 L789.594 692.455 L790.153 692.455 L790.712 692.455 L791.271 692.455 L791.831 692.455 L792.39 692.455 L792.949 692.455 L793.508 692.455 L794.068 692.455 L794.627 692.455 L795.186 692.455 L795.745 692.455 L796.305 692.455 L796.864 692.455 L797.423 692.455 L797.982 692.455 L798.542 692.455 L799.101 692.455 L799.66 692.455 L800.219 692.455 L800.779 692.455 L801.338 692.455 L801.897 692.455 L802.456 692.455 L803.016 692.455 L803.575 692.455 L804.134 692.455 L804.693 692.455 L805.253 692.455 L805.812 692.455 L806.371 692.455 L806.931 692.455 L807.49 692.455 L808.049 692.455 L808.608 692.455 L809.168 692.455 L809.727 692.455 L810.286 692.455 L810.845 692.455 L811.405 692.455 L811.964 692.455 L812.523 692.455 L813.082 692.455 L813.642 692.455 L814.201 692.455 L814.76 692.455 L815.319 692.455 L815.879 692.455 L816.438 692.455 L816.997 692.455 L817.556 692.455 L818.116 692.455 L818.675 692.455 L819.234 692.455 L819.793 692.455 L820.353 692.455 L820.912 692.455 L821.471 692.455 L822.03 692.455 L822.59 692.455 L823.149 692.455 L823.708 692.455 L824.267 692.455 L824.827 692.455 L825.386 692.455 L825.945 692.455 L826.504 692.455 L827.064 692.455 L827.623 692.455 L828.182 692.455 L828.741 692.455 L829.301 692.455 L829.86 692.455 L830.419 692.455 L830.978 692.455 L831.538 692.455 L832.097 692.455 L832.656 692.455 L833.215 692.455 L833.775 692.455 L834.334 692.455 L834.893 692.455 L835.452 692.455 L836.012 692.455 L836.571 692.455 L837.13 692.455 L837.689 692.455 L838.249 692.455 L838.808 692.455 L839.367 692.455 L839.926 692.455 L840.486 692.455 L841.045 692.455 L841.604 692.455 L842.163 692.455 L842.723 692.455 L843.282 692.455 L843.841 692.455 L844.4 692.455 L844.96 692.455 L845.519 692.455 L846.078 692.455 L846.637 692.455 L847.197 692.455 L847.756 692.455 L848.315 692.455 L848.874 692.455 L849.434 692.455 L849.993 692.455 L850.552 692.455 L851.111 692.455 L851.671 692.455 L852.23 692.455 L852.789 692.455 L853.348 692.455 L853.908 692.455 L854.467 692.455 L855.026 692.455 L855.585 692.455 L856.145 692.455 L856.704 692.455 L857.263 692.455 L857.822 692.455 L858.382 692.455 L858.941 692.455 L859.5 692.455 L860.059 692.455 L860.619 692.455 L861.178 692.455 L861.737 692.455 L862.296 692.455 L862.856 692.455 L863.415 692.455 L863.974 692.455 L864.533 692.455 L865.093 692.455 L865.652 692.455 L866.211 692.455 L866.77 692.455 L867.33 692.455 L867.889 692.455 L868.448 692.455 L869.007 692.455 L869.567 692.455 L870.126 692.455 L870.685 692.455 L871.244 692.455 L871.804 692.455 L872.363 692.455 L872.922 692.455 L873.481 692.455 L874.041 692.455 L874.6 692.455 L875.159 692.455 L875.718 692.455 L876.278 692.455 L876.837 692.455 L877.396 692.455 L877.955 692.455 L878.515 692.455 L879.074 692.455 L879.633 692.455 L880.192 692.455 L880.752 692.455 L881.311 692.455 L881.87 692.455 L882.429 692.455 L882.989 692.455 L883.548 692.455 L884.107 692.455 L884.666 692.455 L885.226 692.455 L885.785 692.455 L886.344 692.455 L886.903 692.455 L887.463 692.455 L888.022 692.455 L888.581 692.455 L889.14 692.455 L889.7 692.455 L890.259 692.455 L890.818 692.455 L891.377 692.455 L891.937 692.455 L892.496 692.455 L893.055 692.455 L893.614 692.455 L894.174 692.455 L894.733 692.455 L895.292 692.455 L895.851 692.455 L896.411 692.455 L896.97 692.455 L897.529 692.455 L898.088 692.455 L898.648 692.455 L899.207 692.455 L899.766 692.455 L900.325 692.455 L900.885 692.455 L901.444 692.455 L902.003 692.455 L902.562 692.455 L903.122 692.455 L903.681 692.455 L904.24 692.455 L904.799 692.455 L905.359 692.455 L905.918 692.455 L906.477 692.455 L907.036 692.455 L907.596 692.455 L908.155 692.455 L908.714 692.455 L909.273 692.455 L909.833 692.455 L910.392 692.455 L910.951 692.455 L911.51 692.455 L912.07 692.455 L912.629 692.455 L913.188 692.455 L913.747 692.455 L914.307 692.455 L914.866 692.455 L915.425 692.455 L915.984 692.455 L916.544 692.455 L917.103 692.455 L917.662 692.455 L918.221 692.455 L918.781 692.455 L919.34 692.455 L919.899 692.455 L920.458 692.455 L921.018 692.455 L921.577 692.455 L922.136 692.455 L922.695 692.455 L923.255 692.455 L923.814 692.455 L924.373 692.455 L924.932 692.455 L925.492 692.455 L926.051 692.455 L926.61 692.455 L927.169 692.455 L927.729 692.455 L928.288 692.455 L928.847 692.455 L929.406 692.455 L929.966 692.455 L930.525 692.455 L931.084 692.455 L931.644 692.455 L932.203 692.455 L932.762 692.455 L933.321 692.455 L933.881 692.455 L934.44 692.455 L934.999 692.455 L935.558 692.455 L936.118 692.455 L936.677 692.455 L937.236 692.455 L937.795 692.455 L938.355 692.455 L938.914 692.455 L939.473 692.455 L940.032 692.455 L940.592 692.455 L941.151 692.455 L941.71 692.455 L942.269 692.455 L942.829 692.455 L943.388 692.455 L943.947 692.455 L944.506 692.455 L945.066 692.455 L945.625 692.455 L946.184 692.455 L946.743 692.455 L947.303 692.455 L947.862 692.455 L948.421 692.455 L948.98 692.455 L949.54 692.455 L950.099 692.455 L950.658 692.455 L951.217 692.455 L951.777 692.455 L952.336 692.455 L952.895 692.455 L953.454 692.455 L954.014 692.455 L954.573 692.455 L955.132 692.455 L955.691 692.455 L956.251 692.455 L956.81 692.455 L957.369 692.455 L957.928 692.455 L958.488 692.455 L959.047 692.455 L959.606 692.455 L960.165 692.455 L960.725 692.455 L961.284 692.455 L961.843 692.455 L962.402 692.455 L962.962 692.455 L963.521 692.455 L964.08 692.455 L964.639 692.455 L965.199 692.455 L965.758 692.455 L966.317 692.455 L966.876 692.455 L967.436 692.455 L967.995 692.455 L968.554 692.455 L969.113 692.455 L969.673 692.455 L970.232 692.455 L970.791 692.455 L971.35 692.455 L971.91 692.455 L972.469 692.455 L973.028 692.455 L973.587 692.455 L974.147 692.455 L974.706 692.455 L975.265 692.455 L975.824 692.455 L976.384 692.455 L976.943 692.455 L977.502 692.455 L978.061 692.455 L978.621 692.455 L979.18 692.455 L979.739 692.455 L980.298 692.455 L980.858 692.455 L981.417 692.455 L981.976 692.455 L982.535 692.455 L983.095 692.455 L983.654 692.455 L984.213 692.455 L984.772 692.455 L985.332 692.455 L985.891 692.455 L986.45 692.455 L987.009 692.455 L987.569 692.455 L988.128 692.455 L988.687 692.455 L989.246 692.455 L989.806 692.455 L990.365 692.455 L990.924 692.455 L991.483 692.455 L992.043 692.455 L992.602 692.455 L993.161 692.455 L993.72 692.455 L994.28 692.455 L994.839 692.455 L995.398 692.455 L995.957 692.455 L996.517 692.455 L997.076 692.455 L997.635 692.455 L998.194 692.455 L998.754 692.455 L999.313 692.455 L999.872 692.455 L1000.43 692.455 L1000.99 692.455 L1001.55 692.455 L1002.11 692.455 L1002.67 692.455 L1003.23 692.455 L1003.79 692.455 L1004.35 692.455 L1004.91 692.455 L1005.46 692.455 L1006.02 692.455 L1006.58 692.455 L1007.14 692.455 L1007.7 692.455 L1008.26 692.455 L1008.82 692.455 L1009.38 692.455 L1009.94 692.455 L1010.5 692.455 L1011.06 692.455 L1011.62 692.455 L1012.18 692.455 L1012.73 692.455 L1013.29 692.455 L1013.85 692.455 L1014.41 692.455 L1014.97 692.455 L1015.53 692.455 L1016.09 692.455 L1016.65 692.455 L1017.21 692.455 L1017.77 692.455 L1018.33 692.455 L1018.89 692.455 L1019.45 692.455 L1020.01 692.455 L1020.56 692.455 L1021.12 692.455 L1021.68 692.455 L1022.24 692.455 L1022.8 692.455 L1023.36 692.455 L1023.92 692.455 L1024.48 692.455 L1025.04 692.455 L1025.6 692.455 L1026.16 692.455 L1026.72 692.455 L1027.28 692.455 L1027.83 692.455 L1028.39 692.455 L1028.95 692.455 L1029.51 692.455 L1030.07 692.455 L1030.63 692.455 L1031.19 692.455 L1031.75 692.455 L1032.31 692.455 L1032.87 692.455 L1033.43 692.455 L1033.99 692.455 L1034.55 692.455 L1035.1 692.455 L1035.66 692.455 L1036.22 692.455 L1036.78 692.455 L1037.34 692.455 L1037.9 692.455 L1038.46 692.455 L1039.02 692.455 L1039.58 692.455 L1040.14 692.455 L1040.7 692.455 L1041.26 692.455 L1041.82 692.455 L1042.38 692.455 L1042.93 692.455 L1043.49 692.455 L1044.05 692.455 L1044.61 692.455 L1045.17 692.455 L1045.73 692.455 L1046.29 692.455 L1046.85 692.455 L1047.41 692.455 L1047.97 692.455 L1048.53 692.455 L1049.09 692.455 L1049.65 692.455 L1050.2 692.455 L1050.76 692.455 L1051.32 692.455 L1051.88 692.455 L1052.44 692.455 L1053 692.455 L1053.56 692.455 L1054.12 692.455 L1054.68 692.455 L1055.24 692.455 L1055.8 692.455 L1056.36 692.455 L1056.92 692.455 L1057.48 692.455 L1058.03 692.455 L1058.59 692.455 L1059.15 692.455 L1059.71 692.455 L1060.27 692.455 L1060.83 692.455 L1061.39 692.455 L1061.95 692.455 L1062.51 692.455 L1063.07 692.455 L1063.63 692.455 L1064.19 692.455 L1064.75 692.455 L1065.3 692.455 L1065.86 692.455 L1066.42 692.455 L1066.98 692.455 L1067.54 692.455 L1068.1 692.455 L1068.66 692.455 L1069.22 692.455 L1069.78 692.455 L1070.34 692.455 L1070.9 692.455 L1071.46 692.455 L1072.02 692.455 L1072.57 692.455 L1073.13 692.455 L1073.69 692.455 L1074.25 692.455 L1074.81 692.455 L1075.37 692.455 L1075.93 692.455 L1076.49 692.455 L1077.05 692.455 L1077.61 692.455 L1078.17 692.455 L1078.73 692.455 L1079.29 692.455 L1079.85 692.455 L1080.4 692.455 L1080.96 692.455 L1081.52 692.455 L1082.08 692.455 L1082.64 692.455 L1083.2 692.455 L1083.76 692.455 L1084.32 692.455 L1084.88 692.455 L1085.44 692.455 L1086 692.455 L1086.56 692.455 L1087.12 692.455 L1087.67 692.455 L1088.23 692.455 L1088.79 692.455 L1089.35 692.455 L1089.91 692.455 L1090.47 692.455 L1091.03 692.455 L1091.59 692.455 L1092.15 692.455 L1092.71 692.455 L1093.27 692.455 L1093.83 692.455 L1094.39 692.455 L1094.94 692.455 L1095.5 692.455 L1096.06 692.455 L1096.62 692.455 L1097.18 692.455 L1097.74 692.455 L1098.3 692.455 L1098.86 692.455 L1099.42 692.455 L1099.98 692.455 L1100.54 692.455 L1101.1 692.455 L1101.66 692.455 L1102.22 692.455 L1102.77 692.455 L1103.33 692.455 L1103.89 692.455 L1104.45 692.455 L1105.01 692.455 L1105.57 692.455 L1106.13 692.455 L1106.69 692.455 L1107.25 692.455 L1107.81 692.455 L1108.37 692.455 L1108.93 692.455 L1109.49 692.455 L1110.04 692.455 L1110.6 692.455 L1111.16 692.455 L1111.72 692.455 L1112.28 692.455 L1112.84 692.455 L1113.4 692.455 L1113.96 692.455 L1114.52 692.455 L1115.08 692.455 L1115.64 692.455 L1116.2 692.455 L1116.76 692.455 L1117.31 692.455 L1117.87 692.455 L1118.43 692.455 L1118.99 692.455 L1119.55 692.455 L1120.11 692.455 L1120.67 692.455 L1121.23 692.455 L1121.79 692.455 L1122.35 692.455 L1122.91 692.455 L1123.47 692.455 L1124.03 692.455 L1124.59 692.455 L1125.14 692.455 L1125.7 692.455 L1126.26 692.455 L1126.82 692.455 L1127.38 692.455 L1127.94 692.455 L1128.5 692.455 L1129.06 692.455 L1129.62 692.455 L1130.18 692.455 L1130.74 692.455 L1131.3 692.455 L1131.86 692.455 L1132.41 692.455 L1132.97 692.455 L1133.53 692.455 L1134.09 692.455 L1134.65 692.455 L1135.21 692.455 L1135.77 692.455 L1136.33 692.455 L1136.89 692.455 L1137.45 692.455 L1138.01 692.455 L1138.57 692.455 L1139.13 692.455 L1139.68 692.455 L1140.24 692.455 L1140.8 692.455 L1141.36 692.455 L1141.92 692.455 L1142.48 692.455 L1143.04 692.455 L1143.6 692.455 L1144.16 692.455 L1144.72 692.455 L1145.28 692.455 L1145.84 692.455 L1146.4 692.455 L1146.96 692.455 L1147.51 692.455 L1148.07 692.455 L1148.63 692.455 L1149.19 692.455 L1149.75 692.455 L1150.31 692.455 L1150.87 692.455 L1151.43 692.455 L1151.99 692.455 L1152.55 692.455 L1153.11 692.455 L1153.67 692.455 L1154.23 692.455 L1154.78 692.455 L1155.34 692.455 L1155.9 692.455 L1156.46 692.455 L1157.02 692.455 L1157.58 692.455 L1158.14 692.455 L1158.7 692.455 L1159.26 692.455 L1159.82 692.455 L1160.38 692.455 L1160.94 692.455 L1161.5 692.455 L1162.05 692.455 L1162.61 692.455 L1163.17 692.455 L1163.73 692.455 L1164.29 692.455 L1164.85 692.455 L1165.41 692.455 L1165.97 692.455 L1166.53 692.455 L1167.09 692.455 L1167.65 692.455 L1168.21 692.455 L1168.77 692.455 L1169.33 692.455 L1169.88 692.455 L1170.44 692.455 L1171 692.455 L1171.56 692.455 L1172.12 692.455 L1172.68 692.455 L1173.24 692.455 L1173.8 692.455 L1174.36 692.455 L1174.92 692.455 L1175.48 692.455 L1176.04 692.455 L1176.6 692.455 L1177.15 692.455 L1177.71 692.455 L1178.27 692.455 L1178.83 692.455 L1179.39 692.455 L1179.95 692.455 L1180.51 692.455 L1181.07 692.455 L1181.63 692.455 L1182.19 692.455 L1182.75 692.455 L1183.31 692.455 L1183.87 692.455 L1184.43 692.455 L1184.98 692.455 L1185.54 692.455 L1186.1 692.455 L1186.66 692.455 L1187.22 692.455 L1187.78 692.455 L1188.34 692.455 L1188.9 692.455 L1189.46 692.455 L1190.02 692.455 L1190.58 692.455 L1191.14 692.455 L1191.7 692.455 L1192.25 692.455 L1192.81 692.455 L1193.37 692.455 L1193.93 692.455 L1194.49 692.455 L1195.05 692.455 L1195.61 692.455 L1196.17 692.455 L1196.73 692.455 L1197.29 692.455 L1197.85 692.455 L1198.41 692.455 L1198.97 692.455 L1199.52 692.455 L1200.08 692.455 L1200.64 692.455 L1201.2 692.455 L1201.76 692.455 L1202.32 692.455 L1202.88 692.455 L1203.44 692.455 L1204 692.455 L1204.56 692.455 L1205.12 692.455 L1205.68 692.455 L1206.24 692.455 L1206.8 692.455 L1207.35 692.455 L1207.91 692.455 L1208.47 692.455 L1209.03 692.455 L1209.59 692.455 L1210.15 692.455 L1210.71 692.455 L1211.27 692.455 L1211.83 692.455 L1212.39 692.455 L1212.95 692.455 L1213.51 692.455 L1214.07 692.455 L1214.62 692.455 L1215.18 692.455 L1215.74 692.455 L1216.3 692.455 L1216.86 692.455 L1217.42 692.455 L1217.98 692.455 L1218.54 692.455 L1219.1 692.455 L1219.66 692.455 L1220.22 692.455 L1220.78 692.455 L1221.34 692.455 L1221.89 692.455 L1222.45 692.455 L1223.01 692.455 L1223.57 692.455 L1224.13 692.455 L1224.69 692.455 L1225.25 692.455 L1225.81 692.455 L1226.37 692.455 L1226.93 692.455 L1227.49 692.455 L1228.05 692.455 L1228.61 692.455 L1229.17 692.455 L1229.72 692.455 L1230.28 692.455 L1230.84 692.455 L1231.4 692.455 L1231.96 692.455 L1232.52 692.455 L1233.08 692.455 L1233.64 692.455 L1234.2 692.455 L1234.76 692.455 L1235.32 692.455 L1235.88 692.455 L1236.44 692.455 L1236.99 692.455 L1237.55 692.455 L1238.11 692.455 L1238.67 692.455 L1239.23 692.455 L1239.79 692.455 L1240.35 692.455 L1240.91 692.455 L1241.47 692.455 L1242.03 692.455 L1242.59 692.455 L1243.15 692.455 L1243.71 692.455 L1244.26 692.455 L1244.82 692.455 L1245.38 692.455 L1245.94 692.455 L1246.5 692.455 L1247.06 692.455 L1247.62 692.455 L1248.18 692.455 L1248.74 692.455 L1249.3 692.455 L1249.86 692.455 L1250.42 692.455 L1250.98 692.455 L1251.54 692.455 L1252.09 692.455 L1252.65 692.455 L1253.21 692.455 L1253.77 692.455 L1254.33 692.455 L1254.89 692.455 L1255.45 692.455 L1256.01 692.455 L1256.57 692.455 L1257.13 692.455 L1257.69 692.455 L1258.25 692.455 L1258.81 692.455 L1259.36 692.455 L1259.92 692.455 L1260.48 692.455 L1261.04 692.455 L1261.6 692.455 L1262.16 692.455 L1262.72 692.455 L1263.28 692.455 L1263.84 692.455 L1264.4 692.455 L1264.96 692.455 L1265.52 692.455 L1266.08 692.455 L1266.63 692.455 L1267.19 692.455 L1267.75 692.455 L1268.31 692.455 L1268.87 692.455 L1269.43 692.455 L1269.99 692.455 L1270.55 692.455 L1271.11 692.455 L1271.67 692.455 L1272.23 692.455 L1272.79 692.455 L1273.35 692.455 L1273.91 692.455 L1274.46 692.455 L1275.02 692.455 L1275.58 692.455 L1276.14 692.455 L1276.7 692.455 L1277.26 692.455 L1277.82 692.455 L1278.38 692.455 L1278.94 692.455 L1279.5 692.455 L1280.06 692.455 L1280.62 692.455 L1281.18 692.455 L1281.73 692.455 L1282.29 692.455 L1282.85 692.455 L1283.41 692.455 L1283.97 692.455 L1284.53 692.455 L1285.09 692.455 L1285.65 692.455 L1286.21 692.455 L1286.77 692.455 L1287.33 692.455 L1287.89 692.455 L1288.45 692.455 L1289 692.455 L1289.56 692.455 L1290.12 692.455 L1290.68 692.455 L1291.24 692.455 L1291.8 692.455 L1292.36 692.455 L1292.92 692.455 L1293.48 692.455 L1294.04 692.455 L1294.6 692.455 L1295.16 692.455 L1295.72 692.455 L1296.28 692.455 L1296.83 692.455 L1297.39 692.455 L1297.95 692.455 L1298.51 692.455 L1299.07 692.455 L1299.63 692.455 L1300.19 692.455 L1300.75 692.455 L1301.31 692.455 L1301.87 692.455 L1302.43 692.455 L1302.99 692.455 L1303.55 692.455 L1304.1 692.455 L1304.66 692.455 L1305.22 692.455 L1305.78 692.455 L1306.34 692.455 L1306.9 692.455 L1307.46 692.455 L1308.02 692.455 L1308.58 692.455 L1309.14 692.455 L1309.7 692.455 L1310.26 692.455 L1310.82 692.455 L1311.38 692.455 L1311.93 692.455 L1312.49 692.455 L1313.05 692.455 L1313.61 692.455 L1314.17 692.455 L1314.73 692.455 L1315.29 692.455 L1315.85 692.455 L1316.41 692.455 L1316.97 692.455 L1317.53 692.455 L1318.09 692.455 L1318.65 692.455 L1319.2 692.455 L1319.76 692.455 L1320.32 692.455 L1320.88 692.455 L1321.44 692.455 L1322 692.455 L1322.56 692.455 L1323.12 692.455 L1323.68 692.455 L1324.24 692.455 L1324.8 692.455 L1325.36 692.455 L1325.92 692.455 L1326.47 692.455 L1327.03 692.455 L1327.59 692.455 L1328.15 692.455 L1328.71 692.455 L1329.27 692.455 L1329.83 692.455 L1330.39 692.455 L1330.95 692.455 L1331.51 692.455 L1332.07 692.455 L1332.63 692.455 L1333.19 692.455 L1333.75 692.455 L1334.3 692.455 L1334.86 692.455 L1335.42 692.455 L1335.98 692.455 L1336.54 692.455 L1337.1 692.455 L1337.66 692.455 L1338.22 692.455 L1338.78 692.455 L1339.34 692.455 L1339.9 692.455 L1340.46 692.455 L1341.02 692.455 L1341.57 692.455 L1342.13 692.455 L1342.69 692.455 L1343.25 692.455 L1343.81 692.455 L1344.37 692.455 L1344.93 692.455 L1345.49 692.455 L1346.05 692.455 L1346.61 692.455 L1347.17 692.455 L1347.73 692.455 L1348.29 692.455 L1348.84 692.455 L1349.4 692.455 L1349.96 692.455 L1350.52 692.455 L1351.08 692.455 L1351.64 692.455 L1352.2 692.455 L1352.76 692.455 L1353.32 692.455 L1353.88 692.455 L1354.44 692.455 L1355 692.455 L1355.56 692.455 L1356.12 692.455 L1356.67 692.455 L1357.23 692.455 L1357.79 692.455 L1358.35 692.455 L1358.91 692.455 L1359.47 692.455 L1360.03 692.455 L1360.59 692.455 L1361.15 692.455 L1361.71 692.455 L1362.27 692.455 L1362.83 692.455 L1363.39 692.455 L1363.94 692.455 L1364.5 692.455 L1365.06 692.455 L1365.62 692.455 L1366.18 692.455 L1366.74 692.455 L1367.3 692.455 L1367.86 692.455 L1368.42 692.455 L1368.98 692.455 L1369.54 692.455 L1370.1 692.455 L1370.66 692.455 L1371.21 692.455 L1371.77 692.455 L1372.33 692.455 L1372.89 692.455 L1373.45 692.455 L1374.01 692.455 L1374.57 692.455 L1375.13 692.455 L1375.69 692.455 L1376.25 692.455 L1376.81 692.455 L1377.37 692.455 L1377.93 692.455 L1378.49 692.455 L1379.04 692.455 L1379.6 692.455 L1380.16 692.455 L1380.72 692.455 L1381.28 692.455 L1381.84 692.455 L1382.4 692.455 L1382.96 692.455 L1383.52 692.455 L1384.08 692.455 L1384.64 692.455 L1385.2 692.455 L1385.76 692.455 L1386.31 692.455 L1386.87 692.455 L1387.43 692.455 L1387.99 692.455 L1388.55 692.455 L1389.11 692.455 L1389.67 692.455 L1390.23 692.455 L1390.79 692.455 L1391.35 692.455 L1391.91 692.455 L1392.47 692.455 L1393.03 692.455 L1393.58 692.455 L1394.14 692.455 L1394.7 692.455 L1395.26 692.455 L1395.82 692.455 L1396.38 692.455 L1396.94 692.455 L1397.5 692.455 L1398.06 692.455 L1398.62 692.455 L1399.18 692.455 L1399.74 692.455 L1400.3 692.455 L1400.86 692.455 L1401.41 692.455 L1401.97 692.455 L1402.53 692.455 L1403.09 692.455 L1403.65 692.455 L1404.21 692.455 L1404.77 692.455 L1405.33 692.455 L1405.89 692.455 L1406.45 692.455 L1407.01 692.455 L1407.57 692.455 L1408.13 692.455 L1408.68 692.455 L1409.24 692.455 L1409.8 692.455 L1410.36 692.455 L1410.92 692.455 L1411.48 692.455 L1412.04 692.455 L1412.6 692.455 L1413.16 692.455 L1413.72 692.455 L1414.28 692.455 L1414.84 692.455 L1415.4 692.455 L1415.95 692.455 L1416.51 692.455 L1417.07 692.455 L1417.63 692.455 L1418.19 692.455 L1418.75 692.455 L1419.31 692.455 L1419.87 692.455 L1420.43 692.455 L1420.99 692.455 L1421.55 692.455 L1422.11 692.455 L1422.67 692.455 L1423.23 692.455 L1423.78 692.455 L1424.34 692.455 L1424.9 692.455 L1425.46 692.455 L1426.02 692.455 L1426.58 692.455 L1427.14 692.455 L1427.7 692.455 L1428.26 692.455 L1428.82 692.455 L1429.38 692.455 L1429.94 692.455 L1430.5 692.455 L1431.05 692.455 L1431.61 692.455 L1432.17 692.455 L1432.73 692.455 L1433.29 692.455 L1433.85 692.455 L1434.41 692.455 L1434.97 692.455 L1435.53 692.455 L1436.09 692.455 L1436.65 692.455 L1437.21 692.455 L1437.77 692.455 L1438.33 692.455 L1438.88 692.455 L1439.44 692.455 L1440 692.455 L1440.56 692.455 L1441.12 692.455 L1441.68 692.455 L1442.24 692.455 L1442.8 692.455 L1443.36 692.455 L1443.92 692.455 L1444.48 692.455 L1445.04 692.455 L1445.6 692.455 L1446.15 692.455 L1446.71 692.455 L1447.27 692.455 L1447.83 692.455 L1448.39 692.455 L1448.95 692.455 L1449.51 692.455 L1450.07 692.455 L1450.63 692.455 L1451.19 692.455 L1451.75 692.455 L1452.31 692.455 L1452.87 692.455 L1453.42 692.455 L1453.98 692.455 L1454.54 692.455 L1455.1 692.455 L1455.66 692.455 L1456.22 692.455 L1456.78 692.455 L1457.34 692.455 L1457.9 692.455 L1458.46 692.455 L1459.02 692.455 L1459.58 692.455 L1460.14 692.455 L1460.7 692.455 L1461.25 692.455 L1461.81 692.455 L1462.37 692.455 L1462.93 692.455 L1463.49 692.455 L1464.05 692.455 L1464.61 692.455 L1465.17 692.455 L1465.73 692.455 L1466.29 692.455 L1466.85 692.455 L1467.41 692.455 L1467.97 692.455 L1468.52 692.455 L1469.08 692.455 L1469.64 692.455 L1470.2 692.455 L1470.76 692.455 L1471.32 692.455 L1471.88 692.455 L1472.44 692.455 L1473 692.455 L1473.56 692.455 L1474.12 692.455 L1474.68 692.455 L1475.24 692.455 L1475.79 692.455 L1476.35 692.455 L1476.91 692.455 L1477.47 692.455 L1478.03 692.455 L1478.59 692.455 L1479.15 692.455 L1479.71 692.455 L1480.27 692.455 L1480.83 692.455 L1481.39 692.455 L1481.95 692.455 L1482.51 692.455 L1483.07 692.455 L1483.62 692.455 L1484.18 692.455 L1484.74 692.455 L1485.3 692.455 L1485.86 692.455 L1486.42 692.455 L1486.98 692.455 L1487.54 692.455 L1488.1 692.455 L1488.66 692.455 L1489.22 692.455 L1489.78 692.455 L1490.34 692.455 L1490.89 692.455 L1491.45 692.455 L1492.01 692.455 L1492.57 692.455 L1493.13 692.455 L1493.69 692.455 L1494.25 692.455 L1494.81 692.455 L1495.37 692.455 L1495.93 692.455 L1496.49 692.455 L1497.05 692.455 L1497.61 692.455 L1498.16 692.455 L1498.72 692.455 L1499.28 692.455 L1499.84 692.455 L1500.4 692.455 L1500.96 692.455 L1501.52 692.455 L1502.08 692.455 L1502.64 692.455 L1503.2 692.455 L1503.76 692.455 L1504.32 692.455 L1504.88 692.455 L1505.44 692.455 L1505.99 692.455 L1506.55 692.455 L1507.11 692.455 L1507.67 692.455 L1508.23 692.455 L1508.79 692.455 L1509.35 692.455 L1509.91 692.455 L1510.47 692.455 L1511.03 692.455 L1511.59 692.455 L1512.15 692.455 L1512.71 692.455 L1513.26 692.455 L1513.82 692.455 L1514.38 692.455 L1514.94 692.455 L1515.5 692.455 L1516.06 692.455 L1516.62 692.455 L1517.18 692.455 L1517.74 692.455 L1518.3 692.455 L1518.86 692.455 L1519.42 692.455 L1519.98 692.455 L1520.53 692.455 L1521.09 692.455 L1521.65 692.455 L1522.21 692.455 L1522.77 692.455 L1523.33 692.455 L1523.89 692.455 L1524.45 692.455 L1525.01 692.455 L1525.57 692.455 L1526.13 692.455 L1526.69 692.455 L1527.25 692.455 L1527.81 692.455 L1528.36 692.455 L1528.92 692.455 L1529.48 692.455 L1530.04 692.455 L1530.6 692.455 L1531.16 692.455 L1531.72 692.455 L1532.28 692.455 L1532.84 692.455 L1533.4 692.455 L1533.96 692.455 L1534.52 692.455 L1535.08 692.455 L1535.63 692.455 L1536.19 692.455 L1536.75 692.455 L1537.31 692.455 L1537.87 692.455 L1538.43 692.455 L1538.99 692.455 L1539.55 692.455 L1540.11 692.455 L1540.67 692.455 L1541.23 692.455 L1541.79 692.455 L1542.35 692.455 L1542.9 692.455 L1543.46 692.455 L1544.02 692.455 L1544.58 692.455 L1545.14 692.455 L1545.7 692.455 L1546.26 692.455 L1546.82 692.455 L1547.38 692.455 L1547.94 692.455 L1548.5 692.455 L1549.06 692.455 L1549.62 692.455 L1550.18 692.455 L1550.73 692.455 L1551.29 692.455 L1551.85 692.455 L1552.41 692.455 L1552.97 692.455 L1553.53 692.455 L1554.09 692.455 L1554.65 692.455 L1555.21 692.455 L1555.77 692.455 L1556.33 692.455 L1556.89 692.455 L1557.45 692.455 L1558 692.455 L1558.56 692.455 L1559.12 692.455 L1559.68 692.455 L1560.24 692.455 L1560.8 692.455 L1561.36 692.455 L1561.92 692.455 L1562.48 692.455 L1563.04 692.455 L1563.6 692.455 L1564.16 692.455 L1564.72 692.455 L1565.28 692.455 L1565.83 692.455 L1566.39 692.455 L1566.95 692.455 L1567.51 692.455 L1568.07 692.455 L1568.63 692.455 L1569.19 692.455 L1569.75 692.455 L1570.31 692.455 L1570.87 692.455 L1571.43 692.455 L1571.99 692.455 L1572.55 692.455 L1573.1 692.455 L1573.66 692.455 L1574.22 692.455 L1574.78 692.455 L1575.34 692.455 L1575.9 692.455 L1576.46 692.455 L1577.02 692.455 L1577.58 692.455 L1578.14 692.455 L1578.7 692.455 L1579.26 692.455 L1579.82 692.455 L1580.37 692.455 L1580.93 692.455 L1581.49 692.455 L1582.05 692.455 L1582.61 692.455 L1583.17 692.455 L1583.73 692.455 L1584.29 692.455 L1584.85 692.455 L1585.41 692.455 L1585.97 692.455 L1586.53 692.455 L1587.09 692.455 L1587.65 692.455 L1588.2 692.455 L1588.76 692.455 L1589.32 692.455 L1589.88 692.455 L1590.44 692.455 L1591 692.455 L1591.56 692.455 L1592.12 692.455 L1592.68 692.455 L1593.24 692.455 L1593.8 692.455 L1594.36 692.455 L1594.92 692.455 L1595.47 692.455 L1596.03 692.455 L1596.59 692.455 L1597.15 692.455 L1597.71 692.455 L1598.27 692.455 L1598.83 692.455 L1599.39 692.455 L1599.95 692.455 L1600.51 692.455 L1601.07 692.455 L1601.63 692.455 L1602.19 692.455 L1602.74 692.455 L1603.3 692.455 L1603.86 692.455 L1604.42 692.455 L1604.98 692.455 L1605.54 692.455 L1606.1 692.455 L1606.66 692.455 L1607.22 692.455 L1607.78 692.455 L1608.34 692.455 L1608.9 692.455 L1609.46 692.455 L1610.02 692.455 L1610.57 692.455 L1611.13 692.455 L1611.69 692.455 L1612.25 692.455 L1612.81 692.455 L1613.37 692.455 L1613.93 692.455 L1614.49 692.455 L1615.05 692.455 L1615.61 692.455 L1616.17 692.455 L1616.73 692.455 L1617.29 692.455 L1617.84 692.455 L1618.4 692.455 L1618.96 692.455 L1619.52 692.455 L1620.08 692.455 L1620.64 692.455 L1621.2 692.455 L1621.76 692.455 L1622.32 692.455 L1622.88 692.455 L1623.44 692.455 L1624 692.455 L1624.56 692.455 L1625.11 692.455 L1625.67 692.455 L1626.23 692.455 L1626.79 692.455 L1627.35 692.455 L1627.91 692.455 L1628.47 692.455 L1629.03 692.455 L1629.59 692.455 L1630.15 692.455 L1630.71 692.455 L1631.27 692.455 L1631.83 692.455 L1632.39 692.455 L1632.94 692.455 L1633.5 692.455 L1634.06 692.455 L1634.62 692.455 L1635.18 692.455 L1635.74 692.455 L1636.3 692.455 L1636.86 692.455 L1637.42 692.455 L1637.98 692.455 L1638.54 692.455 L1639.1 692.455 L1639.66 692.455 L1640.21 692.455 L1640.77 692.455 L1641.33 692.455 L1641.89 692.455 L1642.45 692.455 L1643.01 692.455 L1643.57 692.455 L1644.13 692.455 L1644.69 692.455 L1645.25 692.455 L1645.81 692.455 L1646.37 692.455 L1646.93 692.455 L1647.48 692.455 L1648.04 692.455 L1648.6 692.455 L1649.16 692.455 L1649.72 692.455 L1650.28 692.455 L1650.84 692.455 L1651.4 692.455 L1651.96 692.455 L1652.52 692.455 L1653.08 692.455 L1653.64 692.455 L1654.2 692.455 L1654.76 692.455 L1655.31 692.455 L1655.87 692.455 L1656.43 692.455 L1656.99 692.455 L1657.55 692.455 L1658.11 692.455 L1658.67 692.455 L1659.23 692.455 L1659.79 692.455 L1660.35 692.455 L1660.91 692.455 L1661.47 692.455 L1662.03 692.455 L1662.58 692.455 L1663.14 692.455 L1663.7 692.455 L1664.26 692.455 L1664.82 692.455 L1665.38 692.455 L1665.94 692.455 L1666.5 692.455 L1667.06 692.455 L1667.62 692.455 L1668.18 692.455 L1668.74 692.455 L1669.3 692.455 L1669.85 692.455 L1670.41 692.455 L1670.97 692.455 L1671.53 692.455 L1672.09 692.455 L1672.65 692.455 L1673.21 692.455 L1673.77 692.455 L1674.33 692.455 L1674.89 692.455 L1675.45 692.455 L1676.01 692.455 L1676.57 692.455 L1677.13 692.455 L1677.68 692.455 L1678.24 692.455 L1678.8 692.455 L1679.36 692.455 L1679.92 692.455 L1680.48 692.455 L1681.04 692.455 L1681.6 692.455 L1682.16 692.455 L1682.72 692.455 L1683.28 692.455 L1683.84 692.455 L1684.4 692.455 L1684.95 692.455 L1685.51 692.455 L1686.07 692.455 L1686.63 692.455 L1687.19 692.455 L1687.75 692.455 L1688.31 692.455 L1688.87 692.455 L1689.43 692.455 L1689.99 692.455 L1690.55 692.455 L1691.11 692.455 L1691.67 692.455 L1692.23 692.455 L1692.78 692.455 L1693.34 692.455 L1693.9 692.455 L1694.46 692.455 L1695.02 692.455 L1695.58 692.455 L1696.14 692.455 L1696.7 692.455 L1697.26 692.455 L1697.82 692.455 L1698.38 692.455 L1698.94 692.455 L1699.5 692.455 L1700.05 692.455 L1700.61 692.455 L1701.17 692.455 L1701.73 692.455 L1702.29 692.455 L1702.85 692.455 L1703.41 692.455 L1703.97 692.455 L1704.53 692.455 L1705.09 692.455 L1705.65 692.455 L1706.21 692.455 L1706.77 692.455 L1707.32 692.455 L1707.88 692.455 L1708.44 692.455 L1709 692.455 L1709.56 692.455 L1710.12 692.455 L1710.68 692.455 L1711.24 692.455 L1711.8 692.455 L1712.36 692.455 L1712.92 692.455 L1713.48 692.455 L1714.04 692.455 L1714.6 692.455 L1715.15 692.455 L1715.71 692.455 L1716.27 692.455 L1716.83 692.455 L1717.39 692.455 L1717.95 692.455 L1718.51 692.455 L1719.07 692.455 L1719.63 692.455 L1720.19 692.455 L1720.75 692.455 L1721.31 692.455 L1721.87 692.455 L1722.42 692.455 L1722.98 692.455 L1723.54 692.455 L1724.1 692.455 L1724.66 692.455 L1725.22 692.455 L1725.78 692.455 L1726.34 692.455 L1726.9 692.455 L1727.46 692.455 L1728.02 692.455 L1728.58 692.455 L1729.14 692.455 L1729.69 692.455 L1730.25 692.455 L1730.81 692.455 L1731.37 692.455 L1731.93 692.455 L1732.49 692.455 L1733.05 692.455 L1733.61 692.455 L1734.17 692.455 L1734.73 692.455 L1735.29 692.455 L1735.85 692.455 L1736.41 692.455 L1736.97 692.455 L1737.52 692.455 L1738.08 692.455 L1738.64 692.455 L1739.2 692.455 L1739.76 692.455 L1740.32 692.455 L1740.88 692.455 L1741.44 692.455 L1742 692.455 L1742.56 692.455 L1743.12 692.455 L1743.68 692.455 L1744.24 692.455 L1744.79 692.455 L1745.35 692.455 L1745.91 692.455 L1746.47 692.455 L1747.03 692.455 L1747.59 692.455 L1748.15 692.455 L1748.71 692.455 L1749.27 692.455 L1749.83 692.455 L1750.39 692.455 L1750.95 692.455 L1751.51 692.455 L1752.06 692.455 L1752.62 692.455 L1753.18 692.455 L1753.74 692.455 L1754.3 692.455 L1754.86 692.455 L1755.42 692.455 L1755.98 692.455 L1756.54 692.455 L1757.1 692.455 L1757.66 692.455 L1758.22 692.455 L1758.78 692.455 L1759.34 692.455 L1759.89 692.455 L1760.45 692.455 L1761.01 692.455 L1761.57 692.455 L1762.13 692.455 L1762.69 692.455 L1763.25 692.455 L1763.81 692.455 L1764.37 692.455 L1764.93 692.455 L1765.49 692.455 L1766.05 692.455 L1766.61 692.455 L1767.16 692.455 L1767.72 692.455 L1768.28 692.455 L1768.84 692.455 L1769.4 692.455 L1769.96 692.455 L1770.52 692.455 L1771.08 692.455 L1771.64 692.455 L1772.2 692.455 L1772.76 692.455 L1773.32 692.455 L1773.88 692.455 L1774.43 692.455 L1774.99 692.455 L1775.55 692.455 L1776.11 692.455 L1776.67 692.455 L1777.23 692.455 L1777.79 692.455 L1778.35 692.455 L1778.91 692.455 L1779.47 692.455 L1780.03 692.455 L1780.59 692.455 L1781.15 692.455 L1781.71 692.455 L1782.26 692.455 L1782.82 692.455 L1783.38 692.455 L1783.94 692.455 L1784.5 692.455 L1785.06 692.455 L1785.62 692.455 L1786.18 692.455 L1786.74 692.455 L1787.3 692.455 L1787.86 692.455 L1788.42 692.455 L1788.98 692.455 L1789.53 692.455 L1790.09 692.455 L1790.65 692.455 L1791.21 692.455 L1791.77 692.455 L1792.33 692.455 L1792.89 692.455 L1793.45 692.455 L1794.01 692.455 L1794.57 692.455 L1795.13 692.455 L1795.69 692.455 L1796.25 692.455 L1796.8 692.455 L1797.36 692.455 L1797.92 692.455 L1798.48 692.455 L1799.04 692.455 L1799.6 692.455 L1800.16 692.455 L1800.72 692.455 L1801.28 692.455 L1801.84 692.455 L1802.4 692.455 L1802.96 692.455 L1803.52 692.455 L1804.08 692.455 L1804.63 692.455 L1805.19 692.455 L1805.75 692.455 L1806.31 692.455 L1806.87 692.455 L1807.43 692.455 L1807.99 692.455 L1808.55 692.455 L1809.11 692.455 L1809.67 692.455 L1810.23 692.455 L1810.79 692.455 L1811.35 692.455 L1811.9 692.455 L1812.46 692.455 L1813.02 692.455 L1813.58 692.455 L1814.14 692.455 L1814.7 692.455 L1815.26 692.455 L1815.82 692.455 L1816.38 692.455 L1816.94 692.455 L1817.5 692.455 L1818.06 692.455 L1818.62 692.455 L1819.18 692.455 L1819.73 692.455 L1820.29 692.455 L1820.85 692.455 L1821.41 692.455 L1821.97 692.455 L1822.53 692.455 L1823.09 692.455 L1823.65 692.455 L1824.21 692.455 L1824.77 692.455 L1825.33 692.455 L1825.89 692.455 L1826.45 692.455 L1827 692.455 L1827.56 692.455 L1828.12 692.455 L1828.68 692.455 L1829.24 692.455 L1829.8 692.455 L1830.36 692.455 L1830.92 692.455 L1831.48 692.455 L1832.04 692.455 L1832.6 692.455 L1833.16 692.455 L1833.72 692.455 L1834.27 692.455 L1834.83 692.455 L1835.39 692.455 L1835.95 692.455 L1836.51 692.455 L1837.07 692.455 L1837.63 692.455 L1838.19 692.455 L1838.19 683.532 L1837.63 683.532 L1837.07 683.532 L1836.51 683.532 L1835.95 683.532 L1835.39 683.532 L1834.83 683.532 L1834.27 683.532 L1833.72 683.532 L1833.16 683.532 L1832.6 683.532 L1832.04 683.532 L1831.48 683.532 L1830.92 683.532 L1830.36 683.532 L1829.8 683.532 L1829.24 683.532 L1828.68 683.532 L1828.12 683.532 L1827.56 683.532 L1827 683.532 L1826.45 683.532 L1825.89 683.532 L1825.33 683.532 L1824.77 683.532 L1824.21 683.532 L1823.65 683.532 L1823.09 683.532 L1822.53 683.532 L1821.97 683.532 L1821.41 683.532 L1820.85 683.532 L1820.29 683.532 L1819.73 683.532 L1819.18 683.532 L1818.62 683.532 L1818.06 683.532 L1817.5 683.532 L1816.94 683.532 L1816.38 683.532 L1815.82 683.532 L1815.26 683.532 L1814.7 683.532 L1814.14 683.532 L1813.58 683.532 L1813.02 683.532 L1812.46 683.532 L1811.9 683.532 L1811.35 683.532 L1810.79 683.532 L1810.23 683.532 L1809.67 683.532 L1809.11 683.532 L1808.55 683.532 L1807.99 683.532 L1807.43 683.532 L1806.87 683.532 L1806.31 683.532 L1805.75 683.532 L1805.19 683.532 L1804.63 683.532 L1804.08 683.532 L1803.52 683.532 L1802.96 683.532 L1802.4 683.532 L1801.84 683.532 L1801.28 683.532 L1800.72 683.532 L1800.16 683.532 L1799.6 683.532 L1799.04 683.532 L1798.48 683.532 L1797.92 683.532 L1797.36 683.532 L1796.8 683.532 L1796.25 683.532 L1795.69 683.532 L1795.13 683.532 L1794.57 683.532 L1794.01 683.532 L1793.45 683.532 L1792.89 683.532 L1792.33 683.532 L1791.77 683.532 L1791.21 683.532 L1790.65 683.532 L1790.09 683.532 L1789.53 683.532 L1788.98 683.532 L1788.42 683.532 L1787.86 683.532 L1787.3 683.532 L1786.74 683.532 L1786.18 683.532 L1785.62 683.532 L1785.06 683.532 L1784.5 683.532 L1783.94 683.532 L1783.38 683.532 L1782.82 683.532 L1782.26 683.532 L1781.71 683.532 L1781.15 683.532 L1780.59 683.532 L1780.03 683.532 L1779.47 683.532 L1778.91 683.532 L1778.35 683.532 L1777.79 683.532 L1777.23 683.532 L1776.67 683.532 L1776.11 683.532 L1775.55 683.532 L1774.99 683.532 L1774.43 683.532 L1773.88 683.532 L1773.32 683.532 L1772.76 683.532 L1772.2 683.532 L1771.64 683.532 L1771.08 683.532 L1770.52 683.532 L1769.96 683.532 L1769.4 683.532 L1768.84 683.532 L1768.28 683.532 L1767.72 683.532 L1767.16 683.532 L1766.61 683.532 L1766.05 683.532 L1765.49 683.532 L1764.93 683.532 L1764.37 683.532 L1763.81 683.532 L1763.25 683.532 L1762.69 683.532 L1762.13 683.532 L1761.57 683.532 L1761.01 683.532 L1760.45 683.532 L1759.89 683.532 L1759.34 683.532 L1758.78 683.532 L1758.22 683.532 L1757.66 683.532 L1757.1 683.532 L1756.54 683.532 L1755.98 683.532 L1755.42 683.532 L1754.86 683.532 L1754.3 683.532 L1753.74 683.532 L1753.18 683.532 L1752.62 683.532 L1752.06 683.532 L1751.51 683.532 L1750.95 683.532 L1750.39 683.532 L1749.83 683.532 L1749.27 683.532 L1748.71 683.532 L1748.15 683.532 L1747.59 683.532 L1747.03 683.532 L1746.47 683.532 L1745.91 683.532 L1745.35 683.532 L1744.79 683.532 L1744.24 683.532 L1743.68 683.532 L1743.12 683.532 L1742.56 683.532 L1742 683.532 L1741.44 683.532 L1740.88 683.532 L1740.32 683.532 L1739.76 683.532 L1739.2 683.532 L1738.64 683.532 L1738.08 683.532 L1737.52 683.532 L1736.97 683.532 L1736.41 683.532 L1735.85 683.532 L1735.29 683.532 L1734.73 683.532 L1734.17 683.532 L1733.61 683.532 L1733.05 683.532 L1732.49 683.532 L1731.93 683.532 L1731.37 683.532 L1730.81 683.532 L1730.25 683.532 L1729.69 683.532 L1729.14 683.532 L1728.58 683.532 L1728.02 683.532 L1727.46 683.532 L1726.9 683.532 L1726.34 683.532 L1725.78 683.532 L1725.22 683.532 L1724.66 683.532 L1724.1 683.532 L1723.54 683.532 L1722.98 683.532 L1722.42 683.532 L1721.87 683.532 L1721.31 683.532 L1720.75 683.532 L1720.19 683.532 L1719.63 683.532 L1719.07 683.532 L1718.51 683.532 L1717.95 683.532 L1717.39 683.532 L1716.83 683.532 L1716.27 683.532 L1715.71 683.532 L1715.15 683.532 L1714.6 683.532 L1714.04 683.532 L1713.48 683.532 L1712.92 683.532 L1712.36 683.532 L1711.8 683.532 L1711.24 683.532 L1710.68 683.532 L1710.12 683.532 L1709.56 683.532 L1709 683.532 L1708.44 683.532 L1707.88 683.532 L1707.32 683.532 L1706.77 683.532 L1706.21 683.532 L1705.65 683.532 L1705.09 683.532 L1704.53 683.532 L1703.97 683.532 L1703.41 683.532 L1702.85 683.532 L1702.29 683.532 L1701.73 683.532 L1701.17 683.532 L1700.61 683.532 L1700.05 683.532 L1699.5 683.532 L1698.94 683.532 L1698.38 683.532 L1697.82 683.532 L1697.26 683.532 L1696.7 683.532 L1696.14 683.532 L1695.58 683.532 L1695.02 683.532 L1694.46 683.532 L1693.9 683.532 L1693.34 683.532 L1692.78 683.532 L1692.23 683.532 L1691.67 683.532 L1691.11 683.532 L1690.55 683.532 L1689.99 683.532 L1689.43 683.532 L1688.87 683.532 L1688.31 683.532 L1687.75 683.532 L1687.19 683.532 L1686.63 683.532 L1686.07 683.532 L1685.51 683.532 L1684.95 683.532 L1684.4 683.532 L1683.84 683.532 L1683.28 683.532 L1682.72 683.532 L1682.16 683.532 L1681.6 683.532 L1681.04 683.532 L1680.48 683.532 L1679.92 683.532 L1679.36 683.532 L1678.8 683.532 L1678.24 683.532 L1677.68 683.532 L1677.13 683.532 L1676.57 683.532 L1676.01 683.532 L1675.45 683.532 L1674.89 683.532 L1674.33 683.532 L1673.77 683.532 L1673.21 683.532 L1672.65 683.532 L1672.09 683.532 L1671.53 683.532 L1670.97 683.532 L1670.41 683.532 L1669.85 683.532 L1669.3 683.532 L1668.74 683.532 L1668.18 683.532 L1667.62 683.532 L1667.06 683.532 L1666.5 683.532 L1665.94 683.532 L1665.38 683.532 L1664.82 683.532 L1664.26 683.532 L1663.7 683.532 L1663.14 683.532 L1662.58 683.532 L1662.03 683.532 L1661.47 683.532 L1660.91 683.532 L1660.35 683.532 L1659.79 683.532 L1659.23 683.532 L1658.67 683.532 L1658.11 683.532 L1657.55 683.532 L1656.99 683.532 L1656.43 683.532 L1655.87 683.532 L1655.31 683.532 L1654.76 683.532 L1654.2 683.532 L1653.64 683.532 L1653.08 683.532 L1652.52 683.532 L1651.96 683.532 L1651.4 683.532 L1650.84 683.532 L1650.28 683.532 L1649.72 683.532 L1649.16 683.532 L1648.6 683.532 L1648.04 683.532 L1647.48 683.532 L1646.93 683.532 L1646.37 683.532 L1645.81 683.532 L1645.25 683.532 L1644.69 683.532 L1644.13 683.532 L1643.57 683.532 L1643.01 683.532 L1642.45 683.532 L1641.89 683.532 L1641.33 683.532 L1640.77 683.532 L1640.21 683.532 L1639.66 683.532 L1639.1 683.532 L1638.54 683.532 L1637.98 683.532 L1637.42 683.532 L1636.86 683.532 L1636.3 683.532 L1635.74 683.532 L1635.18 683.532 L1634.62 683.532 L1634.06 683.532 L1633.5 683.532 L1632.94 683.532 L1632.39 683.532 L1631.83 683.532 L1631.27 683.532 L1630.71 683.532 L1630.15 683.532 L1629.59 683.532 L1629.03 683.532 L1628.47 683.532 L1627.91 683.532 L1627.35 683.532 L1626.79 683.532 L1626.23 683.532 L1625.67 683.532 L1625.11 683.532 L1624.56 683.532 L1624 683.532 L1623.44 683.532 L1622.88 683.532 L1622.32 683.532 L1621.76 683.532 L1621.2 683.532 L1620.64 683.532 L1620.08 683.532 L1619.52 683.532 L1618.96 683.532 L1618.4 683.532 L1617.84 683.532 L1617.29 683.532 L1616.73 683.532 L1616.17 683.532 L1615.61 683.532 L1615.05 683.532 L1614.49 683.532 L1613.93 683.532 L1613.37 683.532 L1612.81 683.532 L1612.25 683.532 L1611.69 683.532 L1611.13 683.532 L1610.57 683.532 L1610.02 683.532 L1609.46 683.532 L1608.9 683.532 L1608.34 683.532 L1607.78 683.532 L1607.22 683.532 L1606.66 683.532 L1606.1 683.532 L1605.54 683.532 L1604.98 683.532 L1604.42 683.532 L1603.86 683.532 L1603.3 683.532 L1602.74 683.532 L1602.19 683.532 L1601.63 683.532 L1601.07 683.532 L1600.51 683.532 L1599.95 683.532 L1599.39 683.532 L1598.83 683.532 L1598.27 683.532 L1597.71 683.532 L1597.15 683.532 L1596.59 683.532 L1596.03 683.532 L1595.47 683.532 L1594.92 683.532 L1594.36 683.532 L1593.8 683.532 L1593.24 683.532 L1592.68 683.532 L1592.12 683.532 L1591.56 683.532 L1591 683.532 L1590.44 683.532 L1589.88 683.532 L1589.32 683.532 L1588.76 683.532 L1588.2 683.532 L1587.65 683.532 L1587.09 683.532 L1586.53 683.532 L1585.97 683.532 L1585.41 683.532 L1584.85 683.532 L1584.29 683.532 L1583.73 683.532 L1583.17 683.532 L1582.61 683.532 L1582.05 683.532 L1581.49 683.532 L1580.93 683.532 L1580.37 683.532 L1579.82 683.532 L1579.26 683.532 L1578.7 683.532 L1578.14 683.532 L1577.58 683.532 L1577.02 683.532 L1576.46 683.532 L1575.9 683.532 L1575.34 683.532 L1574.78 683.532 L1574.22 683.532 L1573.66 683.532 L1573.1 683.532 L1572.55 683.532 L1571.99 683.532 L1571.43 683.532 L1570.87 683.532 L1570.31 683.532 L1569.75 683.532 L1569.19 683.532 L1568.63 683.532 L1568.07 683.532 L1567.51 683.532 L1566.95 683.532 L1566.39 683.532 L1565.83 683.532 L1565.28 683.532 L1564.72 683.532 L1564.16 683.532 L1563.6 683.532 L1563.04 683.532 L1562.48 683.532 L1561.92 683.532 L1561.36 683.532 L1560.8 683.532 L1560.24 683.532 L1559.68 683.532 L1559.12 683.532 L1558.56 683.532 L1558 683.532 L1557.45 683.532 L1556.89 683.532 L1556.33 683.532 L1555.77 683.532 L1555.21 683.532 L1554.65 683.532 L1554.09 683.532 L1553.53 683.532 L1552.97 683.532 L1552.41 683.532 L1551.85 683.532 L1551.29 683.532 L1550.73 683.532 L1550.18 683.532 L1549.62 683.532 L1549.06 683.532 L1548.5 683.532 L1547.94 683.532 L1547.38 683.532 L1546.82 683.532 L1546.26 683.532 L1545.7 683.532 L1545.14 683.532 L1544.58 683.532 L1544.02 683.532 L1543.46 683.532 L1542.9 683.532 L1542.35 683.532 L1541.79 683.532 L1541.23 683.532 L1540.67 683.532 L1540.11 683.532 L1539.55 683.532 L1538.99 683.532 L1538.43 683.532 L1537.87 683.532 L1537.31 683.532 L1536.75 683.532 L1536.19 683.532 L1535.63 683.532 L1535.08 683.532 L1534.52 683.532 L1533.96 683.532 L1533.4 683.532 L1532.84 683.532 L1532.28 683.532 L1531.72 683.532 L1531.16 683.532 L1530.6 683.532 L1530.04 683.532 L1529.48 683.532 L1528.92 683.532 L1528.36 683.532 L1527.81 683.532 L1527.25 683.532 L1526.69 683.532 L1526.13 683.532 L1525.57 683.532 L1525.01 683.532 L1524.45 683.532 L1523.89 683.532 L1523.33 683.532 L1522.77 683.532 L1522.21 683.532 L1521.65 683.532 L1521.09 683.532 L1520.53 683.532 L1519.98 683.532 L1519.42 683.532 L1518.86 683.532 L1518.3 683.532 L1517.74 683.532 L1517.18 683.532 L1516.62 683.532 L1516.06 683.532 L1515.5 683.532 L1514.94 683.532 L1514.38 683.532 L1513.82 683.532 L1513.26 683.532 L1512.71 683.532 L1512.15 683.532 L1511.59 683.532 L1511.03 683.532 L1510.47 683.532 L1509.91 683.532 L1509.35 683.532 L1508.79 683.532 L1508.23 683.532 L1507.67 683.532 L1507.11 683.532 L1506.55 683.532 L1505.99 683.532 L1505.44 683.532 L1504.88 683.532 L1504.32 683.532 L1503.76 683.532 L1503.2 683.532 L1502.64 683.532 L1502.08 683.532 L1501.52 683.532 L1500.96 683.532 L1500.4 683.532 L1499.84 683.532 L1499.28 683.532 L1498.72 683.532 L1498.16 683.532 L1497.61 683.532 L1497.05 683.532 L1496.49 683.532 L1495.93 683.532 L1495.37 683.532 L1494.81 683.532 L1494.25 683.532 L1493.69 683.532 L1493.13 683.532 L1492.57 683.532 L1492.01 683.532 L1491.45 683.532 L1490.89 683.532 L1490.34 683.532 L1489.78 683.532 L1489.22 683.532 L1488.66 683.532 L1488.1 683.532 L1487.54 683.532 L1486.98 683.532 L1486.42 683.532 L1485.86 683.532 L1485.3 683.532 L1484.74 683.532 L1484.18 683.532 L1483.62 683.532 L1483.07 683.532 L1482.51 683.532 L1481.95 683.532 L1481.39 683.532 L1480.83 683.532 L1480.27 683.532 L1479.71 683.532 L1479.15 683.532 L1478.59 683.532 L1478.03 683.532 L1477.47 683.532 L1476.91 683.532 L1476.35 683.532 L1475.79 683.532 L1475.24 683.532 L1474.68 683.532 L1474.12 683.532 L1473.56 683.532 L1473 683.532 L1472.44 683.532 L1471.88 683.532 L1471.32 683.532 L1470.76 683.532 L1470.2 683.532 L1469.64 683.532 L1469.08 683.532 L1468.52 683.532 L1467.97 683.532 L1467.41 683.532 L1466.85 683.532 L1466.29 683.532 L1465.73 683.532 L1465.17 683.532 L1464.61 683.532 L1464.05 683.532 L1463.49 683.532 L1462.93 683.532 L1462.37 683.532 L1461.81 683.532 L1461.25 683.532 L1460.7 683.532 L1460.14 683.532 L1459.58 683.532 L1459.02 683.532 L1458.46 683.532 L1457.9 683.532 L1457.34 683.532 L1456.78 683.532 L1456.22 683.532 L1455.66 683.532 L1455.1 683.532 L1454.54 683.532 L1453.98 683.532 L1453.42 683.532 L1452.87 683.532 L1452.31 683.532 L1451.75 683.532 L1451.19 683.532 L1450.63 683.532 L1450.07 683.532 L1449.51 683.532 L1448.95 683.532 L1448.39 683.532 L1447.83 683.532 L1447.27 683.532 L1446.71 683.532 L1446.15 683.532 L1445.6 683.532 L1445.04 683.532 L1444.48 683.532 L1443.92 683.532 L1443.36 683.532 L1442.8 683.532 L1442.24 683.532 L1441.68 683.532 L1441.12 683.532 L1440.56 683.532 L1440 683.532 L1439.44 683.532 L1438.88 683.532 L1438.33 683.532 L1437.77 683.532 L1437.21 683.532 L1436.65 683.532 L1436.09 683.532 L1435.53 683.532 L1434.97 683.532 L1434.41 683.532 L1433.85 683.532 L1433.29 683.532 L1432.73 683.532 L1432.17 683.532 L1431.61 683.532 L1431.05 683.532 L1430.5 683.532 L1429.94 683.532 L1429.38 683.532 L1428.82 683.532 L1428.26 683.532 L1427.7 683.532 L1427.14 683.532 L1426.58 683.532 L1426.02 683.532 L1425.46 683.532 L1424.9 683.532 L1424.34 683.532 L1423.78 683.532 L1423.23 683.532 L1422.67 683.532 L1422.11 683.532 L1421.55 683.532 L1420.99 683.532 L1420.43 683.532 L1419.87 683.532 L1419.31 683.532 L1418.75 683.532 L1418.19 683.532 L1417.63 683.532 L1417.07 683.532 L1416.51 683.532 L1415.95 683.532 L1415.4 683.532 L1414.84 683.532 L1414.28 683.532 L1413.72 683.532 L1413.16 683.532 L1412.6 683.532 L1412.04 683.532 L1411.48 683.532 L1410.92 683.532 L1410.36 683.532 L1409.8 683.532 L1409.24 683.532 L1408.68 683.532 L1408.13 683.532 L1407.57 683.532 L1407.01 683.532 L1406.45 683.532 L1405.89 683.532 L1405.33 683.532 L1404.77 683.532 L1404.21 683.532 L1403.65 683.532 L1403.09 683.532 L1402.53 683.532 L1401.97 683.532 L1401.41 683.532 L1400.86 683.532 L1400.3 683.532 L1399.74 683.532 L1399.18 683.532 L1398.62 683.532 L1398.06 683.532 L1397.5 683.532 L1396.94 683.532 L1396.38 683.532 L1395.82 683.532 L1395.26 683.532 L1394.7 683.532 L1394.14 683.532 L1393.58 683.532 L1393.03 683.532 L1392.47 683.532 L1391.91 683.532 L1391.35 683.532 L1390.79 683.532 L1390.23 683.532 L1389.67 683.532 L1389.11 683.532 L1388.55 683.532 L1387.99 683.532 L1387.43 683.532 L1386.87 683.532 L1386.31 683.532 L1385.76 683.532 L1385.2 683.532 L1384.64 683.532 L1384.08 683.532 L1383.52 683.532 L1382.96 683.532 L1382.4 683.532 L1381.84 683.532 L1381.28 683.532 L1380.72 683.532 L1380.16 683.532 L1379.6 683.532 L1379.04 683.532 L1378.49 683.532 L1377.93 683.532 L1377.37 683.532 L1376.81 683.532 L1376.25 683.532 L1375.69 683.532 L1375.13 683.532 L1374.57 683.532 L1374.01 683.532 L1373.45 683.532 L1372.89 683.532 L1372.33 683.532 L1371.77 683.532 L1371.21 683.532 L1370.66 683.532 L1370.1 683.532 L1369.54 683.532 L1368.98 683.532 L1368.42 683.532 L1367.86 683.532 L1367.3 683.532 L1366.74 683.532 L1366.18 683.532 L1365.62 683.532 L1365.06 683.532 L1364.5 683.532 L1363.94 683.532 L1363.39 683.532 L1362.83 683.532 L1362.27 683.532 L1361.71 683.532 L1361.15 683.532 L1360.59 683.532 L1360.03 683.532 L1359.47 683.532 L1358.91 683.532 L1358.35 683.532 L1357.79 683.532 L1357.23 683.532 L1356.67 683.532 L1356.12 683.532 L1355.56 683.532 L1355 683.532 L1354.44 683.532 L1353.88 683.532 L1353.32 683.532 L1352.76 683.532 L1352.2 683.532 L1351.64 683.532 L1351.08 683.532 L1350.52 683.532 L1349.96 683.532 L1349.4 683.532 L1348.84 683.532 L1348.29 683.532 L1347.73 683.532 L1347.17 683.532 L1346.61 683.532 L1346.05 683.532 L1345.49 683.532 L1344.93 683.532 L1344.37 683.532 L1343.81 683.532 L1343.25 683.532 L1342.69 683.532 L1342.13 683.532 L1341.57 683.532 L1341.02 683.532 L1340.46 683.532 L1339.9 683.532 L1339.34 683.532 L1338.78 683.532 L1338.22 683.532 L1337.66 683.532 L1337.1 683.532 L1336.54 683.532 L1335.98 683.532 L1335.42 683.532 L1334.86 683.532 L1334.3 683.532 L1333.75 683.532 L1333.19 683.532 L1332.63 683.532 L1332.07 683.532 L1331.51 683.532 L1330.95 683.532 L1330.39 683.532 L1329.83 683.532 L1329.27 683.532 L1328.71 683.532 L1328.15 683.532 L1327.59 683.532 L1327.03 683.532 L1326.47 683.532 L1325.92 683.532 L1325.36 683.532 L1324.8 683.532 L1324.24 683.532 L1323.68 683.532 L1323.12 683.532 L1322.56 683.532 L1322 683.532 L1321.44 683.532 L1320.88 683.532 L1320.32 683.532 L1319.76 683.532 L1319.2 683.532 L1318.65 683.532 L1318.09 683.532 L1317.53 683.532 L1316.97 683.532 L1316.41 683.532 L1315.85 683.532 L1315.29 683.532 L1314.73 683.532 L1314.17 683.532 L1313.61 683.532 L1313.05 683.532 L1312.49 683.532 L1311.93 683.532 L1311.38 683.532 L1310.82 683.532 L1310.26 683.532 L1309.7 683.532 L1309.14 683.532 L1308.58 683.532 L1308.02 683.532 L1307.46 683.532 L1306.9 683.532 L1306.34 683.532 L1305.78 683.532 L1305.22 683.532 L1304.66 683.532 L1304.1 683.532 L1303.55 683.532 L1302.99 683.532 L1302.43 683.532 L1301.87 683.532 L1301.31 683.532 L1300.75 683.532 L1300.19 683.532 L1299.63 683.532 L1299.07 683.532 L1298.51 683.532 L1297.95 683.532 L1297.39 683.532 L1296.83 683.532 L1296.28 683.532 L1295.72 683.532 L1295.16 683.532 L1294.6 683.532 L1294.04 683.532 L1293.48 683.532 L1292.92 683.532 L1292.36 683.532 L1291.8 683.532 L1291.24 683.532 L1290.68 683.532 L1290.12 683.532 L1289.56 683.532 L1289 683.532 L1288.45 683.532 L1287.89 683.532 L1287.33 683.532 L1286.77 683.532 L1286.21 683.532 L1285.65 683.532 L1285.09 683.532 L1284.53 683.532 L1283.97 683.532 L1283.41 683.532 L1282.85 683.532 L1282.29 683.532 L1281.73 683.532 L1281.18 683.532 L1280.62 683.532 L1280.06 683.532 L1279.5 683.532 L1278.94 683.532 L1278.38 683.532 L1277.82 683.532 L1277.26 683.532 L1276.7 683.532 L1276.14 683.532 L1275.58 683.532 L1275.02 683.532 L1274.46 683.532 L1273.91 683.532 L1273.35 683.532 L1272.79 683.532 L1272.23 683.532 L1271.67 683.532 L1271.11 683.532 L1270.55 683.532 L1269.99 683.532 L1269.43 683.532 L1268.87 683.532 L1268.31 683.532 L1267.75 683.532 L1267.19 683.532 L1266.63 683.532 L1266.08 683.532 L1265.52 683.532 L1264.96 683.532 L1264.4 683.532 L1263.84 683.532 L1263.28 683.532 L1262.72 683.532 L1262.16 683.532 L1261.6 683.532 L1261.04 683.532 L1260.48 683.532 L1259.92 683.532 L1259.36 683.532 L1258.81 683.532 L1258.25 683.532 L1257.69 683.532 L1257.13 683.532 L1256.57 683.532 L1256.01 683.532 L1255.45 683.532 L1254.89 683.532 L1254.33 683.532 L1253.77 683.532 L1253.21 683.532 L1252.65 683.532 L1252.09 683.532 L1251.54 683.532 L1250.98 683.532 L1250.42 683.532 L1249.86 683.532 L1249.3 683.532 L1248.74 683.532 L1248.18 683.532 L1247.62 683.532 L1247.06 683.532 L1246.5 683.532 L1245.94 683.532 L1245.38 683.532 L1244.82 683.532 L1244.26 683.532 L1243.71 683.532 L1243.15 683.532 L1242.59 683.532 L1242.03 683.532 L1241.47 683.532 L1240.91 683.532 L1240.35 683.532 L1239.79 683.532 L1239.23 683.532 L1238.67 683.532 L1238.11 683.532 L1237.55 683.532 L1236.99 683.532 L1236.44 683.532 L1235.88 683.532 L1235.32 683.532 L1234.76 683.532 L1234.2 683.532 L1233.64 683.532 L1233.08 683.532 L1232.52 683.532 L1231.96 683.532 L1231.4 683.532 L1230.84 683.532 L1230.28 683.532 L1229.72 683.532 L1229.17 683.532 L1228.61 683.532 L1228.05 683.532 L1227.49 683.532 L1226.93 683.532 L1226.37 683.532 L1225.81 683.532 L1225.25 683.532 L1224.69 683.532 L1224.13 683.532 L1223.57 683.532 L1223.01 683.532 L1222.45 683.532 L1221.89 683.532 L1221.34 683.532 L1220.78 683.532 L1220.22 683.532 L1219.66 683.532 L1219.1 683.532 L1218.54 683.532 L1217.98 683.532 L1217.42 683.532 L1216.86 683.532 L1216.3 683.532 L1215.74 683.532 L1215.18 683.532 L1214.62 683.532 L1214.07 683.532 L1213.51 683.532 L1212.95 683.532 L1212.39 683.532 L1211.83 683.532 L1211.27 683.532 L1210.71 683.532 L1210.15 683.532 L1209.59 683.532 L1209.03 683.532 L1208.47 683.532 L1207.91 683.532 L1207.35 683.532 L1206.8 683.532 L1206.24 683.532 L1205.68 683.532 L1205.12 683.532 L1204.56 683.532 L1204 683.532 L1203.44 683.532 L1202.88 683.532 L1202.32 683.532 L1201.76 683.532 L1201.2 683.532 L1200.64 683.532 L1200.08 683.532 L1199.52 683.532 L1198.97 683.532 L1198.41 683.532 L1197.85 683.532 L1197.29 683.532 L1196.73 683.532 L1196.17 683.532 L1195.61 683.532 L1195.05 683.532 L1194.49 683.532 L1193.93 683.532 L1193.37 683.532 L1192.81 683.532 L1192.25 683.532 L1191.7 683.532 L1191.14 683.532 L1190.58 683.532 L1190.02 683.532 L1189.46 683.532 L1188.9 683.532 L1188.34 683.532 L1187.78 683.532 L1187.22 683.532 L1186.66 683.532 L1186.1 683.532 L1185.54 683.532 L1184.98 683.532 L1184.43 683.532 L1183.87 683.532 L1183.31 683.532 L1182.75 683.532 L1182.19 683.532 L1181.63 683.532 L1181.07 683.532 L1180.51 683.532 L1179.95 683.532 L1179.39 683.532 L1178.83 683.532 L1178.27 683.532 L1177.71 683.532 L1177.15 683.532 L1176.6 683.532 L1176.04 683.532 L1175.48 683.532 L1174.92 683.532 L1174.36 683.532 L1173.8 683.532 L1173.24 683.532 L1172.68 683.532 L1172.12 683.532 L1171.56 683.532 L1171 683.532 L1170.44 683.532 L1169.88 683.532 L1169.33 683.532 L1168.77 683.532 L1168.21 683.532 L1167.65 683.532 L1167.09 683.532 L1166.53 683.532 L1165.97 683.532 L1165.41 683.532 L1164.85 683.532 L1164.29 683.532 L1163.73 683.532 L1163.17 683.532 L1162.61 683.532 L1162.05 683.532 L1161.5 683.532 L1160.94 683.532 L1160.38 683.532 L1159.82 683.532 L1159.26 683.532 L1158.7 683.532 L1158.14 683.532 L1157.58 683.532 L1157.02 683.532 L1156.46 683.532 L1155.9 683.532 L1155.34 683.532 L1154.78 683.532 L1154.23 683.532 L1153.67 683.532 L1153.11 683.532 L1152.55 683.532 L1151.99 683.532 L1151.43 683.532 L1150.87 683.532 L1150.31 683.532 L1149.75 683.532 L1149.19 683.532 L1148.63 683.532 L1148.07 683.532 L1147.51 683.532 L1146.96 683.532 L1146.4 683.532 L1145.84 683.532 L1145.28 683.532 L1144.72 683.532 L1144.16 683.532 L1143.6 683.532 L1143.04 683.532 L1142.48 683.532 L1141.92 683.532 L1141.36 683.532 L1140.8 683.532 L1140.24 683.532 L1139.68 683.532 L1139.13 683.532 L1138.57 683.532 L1138.01 683.532 L1137.45 683.532 L1136.89 683.532 L1136.33 683.532 L1135.77 683.532 L1135.21 683.532 L1134.65 683.532 L1134.09 683.532 L1133.53 683.532 L1132.97 683.532 L1132.41 683.532 L1131.86 683.532 L1131.3 683.532 L1130.74 683.532 L1130.18 683.532 L1129.62 683.532 L1129.06 683.532 L1128.5 683.532 L1127.94 683.532 L1127.38 683.532 L1126.82 683.532 L1126.26 683.532 L1125.7 683.532 L1125.14 683.532 L1124.59 683.532 L1124.03 683.532 L1123.47 683.532 L1122.91 683.532 L1122.35 683.532 L1121.79 683.532 L1121.23 683.532 L1120.67 683.532 L1120.11 683.532 L1119.55 683.532 L1118.99 683.532 L1118.43 683.532 L1117.87 683.532 L1117.31 683.532 L1116.76 683.532 L1116.2 683.532 L1115.64 683.532 L1115.08 683.532 L1114.52 683.532 L1113.96 683.532 L1113.4 683.532 L1112.84 683.532 L1112.28 683.532 L1111.72 683.532 L1111.16 683.532 L1110.6 683.532 L1110.04 683.532 L1109.49 683.532 L1108.93 683.532 L1108.37 683.532 L1107.81 683.532 L1107.25 683.532 L1106.69 683.532 L1106.13 683.532 L1105.57 683.532 L1105.01 683.532 L1104.45 683.532 L1103.89 683.532 L1103.33 683.532 L1102.77 683.532 L1102.22 683.532 L1101.66 683.532 L1101.1 683.532 L1100.54 683.532 L1099.98 683.532 L1099.42 683.532 L1098.86 683.532 L1098.3 683.532 L1097.74 683.532 L1097.18 683.532 L1096.62 683.532 L1096.06 683.532 L1095.5 683.532 L1094.94 683.532 L1094.39 683.532 L1093.83 683.532 L1093.27 683.532 L1092.71 683.532 L1092.15 683.532 L1091.59 683.532 L1091.03 683.532 L1090.47 683.532 L1089.91 683.532 L1089.35 683.532 L1088.79 683.532 L1088.23 683.532 L1087.67 683.532 L1087.12 683.532 L1086.56 683.532 L1086 683.532 L1085.44 683.532 L1084.88 683.532 L1084.32 683.532 L1083.76 683.532 L1083.2 683.532 L1082.64 683.532 L1082.08 683.532 L1081.52 683.532 L1080.96 683.532 L1080.4 683.532 L1079.85 683.532 L1079.29 683.532 L1078.73 683.532 L1078.17 683.532 L1077.61 683.532 L1077.05 683.532 L1076.49 683.532 L1075.93 683.532 L1075.37 683.532 L1074.81 683.532 L1074.25 683.532 L1073.69 683.532 L1073.13 683.532 L1072.57 683.532 L1072.02 683.532 L1071.46 683.532 L1070.9 683.532 L1070.34 683.532 L1069.78 683.532 L1069.22 683.532 L1068.66 683.532 L1068.1 683.532 L1067.54 683.532 L1066.98 683.532 L1066.42 683.532 L1065.86 683.532 L1065.3 683.532 L1064.75 683.532 L1064.19 683.532 L1063.63 683.532 L1063.07 683.532 L1062.51 683.532 L1061.95 683.532 L1061.39 683.532 L1060.83 683.532 L1060.27 683.532 L1059.71 683.532 L1059.15 683.532 L1058.59 683.532 L1058.03 683.532 L1057.48 683.532 L1056.92 683.532 L1056.36 683.532 L1055.8 683.532 L1055.24 683.532 L1054.68 683.532 L1054.12 683.532 L1053.56 683.532 L1053 683.532 L1052.44 683.532 L1051.88 683.532 L1051.32 683.532 L1050.76 683.532 L1050.2 683.532 L1049.65 683.532 L1049.09 683.532 L1048.53 683.532 L1047.97 683.532 L1047.41 683.532 L1046.85 683.532 L1046.29 683.532 L1045.73 683.532 L1045.17 683.532 L1044.61 683.532 L1044.05 683.532 L1043.49 683.532 L1042.93 683.532 L1042.38 683.532 L1041.82 683.532 L1041.26 683.532 L1040.7 683.532 L1040.14 683.532 L1039.58 683.532 L1039.02 683.532 L1038.46 683.532 L1037.9 683.532 L1037.34 683.532 L1036.78 683.532 L1036.22 683.532 L1035.66 683.532 L1035.1 683.532 L1034.55 683.532 L1033.99 683.532 L1033.43 683.532 L1032.87 683.532 L1032.31 683.532 L1031.75 683.532 L1031.19 683.532 L1030.63 683.532 L1030.07 683.532 L1029.51 683.532 L1028.95 683.532 L1028.39 683.532 L1027.83 683.532 L1027.28 683.532 L1026.72 683.532 L1026.16 683.532 L1025.6 683.532 L1025.04 683.532 L1024.48 683.532 L1023.92 683.532 L1023.36 683.532 L1022.8 683.532 L1022.24 683.532 L1021.68 683.532 L1021.12 683.532 L1020.56 683.532 L1020.01 683.532 L1019.45 683.532 L1018.89 683.532 L1018.33 683.532 L1017.77 683.532 L1017.21 683.532 L1016.65 683.532 L1016.09 683.532 L1015.53 683.532 L1014.97 683.532 L1014.41 683.532 L1013.85 683.532 L1013.29 683.532 L1012.73 683.532 L1012.18 683.532 L1011.62 683.532 L1011.06 683.532 L1010.5 683.532 L1009.94 683.532 L1009.38 683.532 L1008.82 683.532 L1008.26 683.532 L1007.7 683.532 L1007.14 683.532 L1006.58 683.532 L1006.02 683.532 L1005.46 683.532 L1004.91 683.532 L1004.35 683.532 L1003.79 683.532 L1003.23 683.532 L1002.67 683.532 L1002.11 683.532 L1001.55 683.532 L1000.99 683.532 L1000.43 683.532 L999.872 683.532 L999.313 683.532 L998.754 683.532 L998.194 683.532 L997.635 683.532 L997.076 683.532 L996.517 683.532 L995.957 683.532 L995.398 683.532 L994.839 683.532 L994.28 683.532 L993.72 683.532 L993.161 683.532 L992.602 683.532 L992.043 683.532 L991.483 683.532 L990.924 683.532 L990.365 683.532 L989.806 683.532 L989.246 683.532 L988.687 683.532 L988.128 683.532 L987.569 683.532 L987.009 683.532 L986.45 683.532 L985.891 683.532 L985.332 683.532 L984.772 683.532 L984.213 683.532 L983.654 683.532 L983.095 683.532 L982.535 683.532 L981.976 683.532 L981.417 683.532 L980.858 683.532 L980.298 683.532 L979.739 683.532 L979.18 683.532 L978.621 683.532 L978.061 683.532 L977.502 683.532 L976.943 683.532 L976.384 683.532 L975.824 683.532 L975.265 683.532 L974.706 683.532 L974.147 683.532 L973.587 683.532 L973.028 683.532 L972.469 683.532 L971.91 683.532 L971.35 683.532 L970.791 683.532 L970.232 683.532 L969.673 683.532 L969.113 683.532 L968.554 683.532 L967.995 683.532 L967.436 683.532 L966.876 683.532 L966.317 683.532 L965.758 683.532 L965.199 683.532 L964.639 683.532 L964.08 683.532 L963.521 683.532 L962.962 683.532 L962.402 683.532 L961.843 683.532 L961.284 683.532 L960.725 683.532 L960.165 683.532 L959.606 683.532 L959.047 683.532 L958.488 683.532 L957.928 683.532 L957.369 683.532 L956.81 683.532 L956.251 683.532 L955.691 683.532 L955.132 683.532 L954.573 683.532 L954.014 683.532 L953.454 683.532 L952.895 683.532 L952.336 683.532 L951.777 683.532 L951.217 683.532 L950.658 683.532 L950.099 683.532 L949.54 683.532 L948.98 683.532 L948.421 683.532 L947.862 683.532 L947.303 683.532 L946.743 683.532 L946.184 683.532 L945.625 683.532 L945.066 683.532 L944.506 683.532 L943.947 683.532 L943.388 683.532 L942.829 683.532 L942.269 683.532 L941.71 683.532 L941.151 683.532 L940.592 683.532 L940.032 683.532 L939.473 683.532 L938.914 683.532 L938.355 683.532 L937.795 683.532 L937.236 683.532 L936.677 683.532 L936.118 683.532 L935.558 683.532 L934.999 683.532 L934.44 683.532 L933.881 683.532 L933.321 683.532 L932.762 683.532 L932.203 683.532 L931.644 683.532 L931.084 683.532 L930.525 683.532 L929.966 683.532 L929.406 683.532 L928.847 683.532 L928.288 683.532 L927.729 683.532 L927.169 683.532 L926.61 683.532 L926.051 683.532 L925.492 683.532 L924.932 683.532 L924.373 683.532 L923.814 683.532 L923.255 683.532 L922.695 683.532 L922.136 683.532 L921.577 683.532 L921.018 683.532 L920.458 683.532 L919.899 683.532 L919.34 683.532 L918.781 683.532 L918.221 683.532 L917.662 683.532 L917.103 683.532 L916.544 683.532 L915.984 683.532 L915.425 683.532 L914.866 683.532 L914.307 683.532 L913.747 683.532 L913.188 683.532 L912.629 683.532 L912.07 683.532 L911.51 683.532 L910.951 683.532 L910.392 683.532 L909.833 683.532 L909.273 683.532 L908.714 683.532 L908.155 683.532 L907.596 683.532 L907.036 683.532 L906.477 683.532 L905.918 683.532 L905.359 683.532 L904.799 683.532 L904.24 683.532 L903.681 683.532 L903.122 683.532 L902.562 683.532 L902.003 683.532 L901.444 683.532 L900.885 683.532 L900.325 683.532 L899.766 683.532 L899.207 683.532 L898.648 683.532 L898.088 683.532 L897.529 683.532 L896.97 683.532 L896.411 683.532 L895.851 683.532 L895.292 683.532 L894.733 683.532 L894.174 683.532 L893.614 683.532 L893.055 683.532 L892.496 683.532 L891.937 683.532 L891.377 683.532 L890.818 683.532 L890.259 683.532 L889.7 683.532 L889.14 683.532 L888.581 683.532 L888.022 683.532 L887.463 683.532 L886.903 683.532 L886.344 683.532 L885.785 683.532 L885.226 683.532 L884.666 683.532 L884.107 683.532 L883.548 683.532 L882.989 683.532 L882.429 683.532 L881.87 683.532 L881.311 683.532 L880.752 683.532 L880.192 683.532 L879.633 683.532 L879.074 683.532 L878.515 683.532 L877.955 683.532 L877.396 683.532 L876.837 683.532 L876.278 683.532 L875.718 683.532 L875.159 683.532 L874.6 683.532 L874.041 683.532 L873.481 683.532 L872.922 683.532 L872.363 683.532 L871.804 683.532 L871.244 683.532 L870.685 683.532 L870.126 683.532 L869.567 683.532 L869.007 683.532 L868.448 683.532 L867.889 683.532 L867.33 683.532 L866.77 683.532 L866.211 683.532 L865.652 683.532 L865.093 683.532 L864.533 683.532 L863.974 683.532 L863.415 683.532 L862.856 683.532 L862.296 683.532 L861.737 683.532 L861.178 683.532 L860.619 683.532 L860.059 683.532 L859.5 683.532 L858.941 683.532 L858.382 683.532 L857.822 683.532 L857.263 683.532 L856.704 683.532 L856.145 683.532 L855.585 683.532 L855.026 683.532 L854.467 683.532 L853.908 683.532 L853.348 683.532 L852.789 683.532 L852.23 683.532 L851.671 683.532 L851.111 683.532 L850.552 683.532 L849.993 683.532 L849.434 683.532 L848.874 683.532 L848.315 683.532 L847.756 683.532 L847.197 683.532 L846.637 683.532 L846.078 683.532 L845.519 683.532 L844.96 683.532 L844.4 683.532 L843.841 683.532 L843.282 683.532 L842.723 683.532 L842.163 683.532 L841.604 683.532 L841.045 683.532 L840.486 683.532 L839.926 683.532 L839.367 683.532 L838.808 683.532 L838.249 683.532 L837.689 683.532 L837.13 683.532 L836.571 683.532 L836.012 683.532 L835.452 683.532 L834.893 683.532 L834.334 683.532 L833.775 683.532 L833.215 683.532 L832.656 683.532 L832.097 683.532 L831.538 683.532 L830.978 683.532 L830.419 683.532 L829.86 683.532 L829.301 683.532 L828.741 683.532 L828.182 683.532 L827.623 683.532 L827.064 683.532 L826.504 683.532 L825.945 683.532 L825.386 683.532 L824.827 683.532 L824.267 683.532 L823.708 683.532 L823.149 683.532 L822.59 683.532 L822.03 683.532 L821.471 683.532 L820.912 683.532 L820.353 683.532 L819.793 683.532 L819.234 683.532 L818.675 683.532 L818.116 683.532 L817.556 683.532 L816.997 683.532 L816.438 683.532 L815.879 683.532 L815.319 683.532 L814.76 683.532 L814.201 683.532 L813.642 683.532 L813.082 683.532 L812.523 683.532 L811.964 683.532 L811.405 683.532 L810.845 683.532 L810.286 683.532 L809.727 683.532 L809.168 683.532 L808.608 683.532 L808.049 683.532 L807.49 683.532 L806.931 683.532 L806.371 683.532 L805.812 683.532 L805.253 683.532 L804.693 683.532 L804.134 683.532 L803.575 683.532 L803.016 683.532 L802.456 683.532 L801.897 683.532 L801.338 683.532 L800.779 683.532 L800.219 683.532 L799.66 683.532 L799.101 683.532 L798.542 683.532 L797.982 683.532 L797.423 683.532 L796.864 683.532 L796.305 683.532 L795.745 683.532 L795.186 683.532 L794.627 683.532 L794.068 683.532 L793.508 683.532 L792.949 683.532 L792.39 683.532 L791.831 683.532 L791.271 683.532 L790.712 683.532 L790.153 683.532 L789.594 683.532 L789.034 683.532 L788.475 683.532 L787.916 683.532 L787.357 683.532 L786.797 683.532 L786.238 683.532 L785.679 683.532 L785.12 683.532 L784.56 683.532 L784.001 683.532 L783.442 683.532 L782.883 683.532 L782.323 683.532 L781.764 683.532 L781.205 683.532 L780.646 683.532 L780.086 683.532 L779.527 683.532 L778.968 683.532 L778.409 683.532 L777.849 683.532 L777.29 683.532 L776.731 683.532 L776.172 683.532 L775.612 683.532 L775.053 683.532 L774.494 683.532 L773.935 683.532 L773.375 683.532 L772.816 683.532 L772.257 683.532 L771.698 683.532 L771.138 683.532 L770.579 683.532 L770.02 683.532 L769.461 683.532 L768.901 683.532 L768.342 683.532 L767.783 683.532 L767.224 683.532 L766.664 683.532 L766.105 683.532 L765.546 683.532 L764.987 683.532 L764.427 683.532 L763.868 683.532 L763.309 683.532 L762.75 683.532 L762.19 683.532 L761.631 683.532 L761.072 683.532 L760.513 683.532 L759.953 683.532 L759.394 683.532 L758.835 683.532 L758.276 683.532 L757.716 683.532 L757.157 683.532 L756.598 683.532 L756.039 683.532 L755.479 683.532 L754.92 683.532 L754.361 683.532 L753.802 683.532 L753.242 683.532 L752.683 683.532 L752.124 683.532 L751.565 683.532 L751.005 683.532 L750.446 683.532 L749.887 683.532 L749.328 683.532 L748.768 683.532 L748.209 683.532 L747.65 683.532 L747.091 683.532 L746.531 683.532 L745.972 683.532 L745.413 683.532 L744.854 683.532 L744.294 683.532 L743.735 683.532 L743.176 683.532 L742.617 683.532 L742.057 683.532 L741.498 683.532 L740.939 683.532 L740.38 683.532 L739.82 683.532 L739.261 683.532 L738.702 683.532 L738.143 683.532 L737.583 683.532 L737.024 683.532 L736.465 683.532 L735.906 683.532 L735.346 683.532 L734.787 683.532 L734.228 683.532 L733.669 683.532 L733.109 683.532 L732.55 683.532 L731.991 683.532 L731.432 683.532 L730.872 683.532 L730.313 683.532 L729.754 683.532 L729.195 683.532 L728.635 683.532 L728.076 683.532 L727.517 683.532 L726.958 683.532 L726.398 683.532 L725.839 683.532 L725.28 683.532 L724.721 683.532 L724.161 683.532 L723.602 683.532 L723.043 683.532 L722.484 683.532 L721.924 683.532 L721.365 683.532 L720.806 683.532 L720.247 683.532  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.994 720.806,687.994 721.365,687.994 721.924,687.994 722.484,687.994 723.043,687.994 723.602,687.994 724.161,687.994 724.721,687.994 725.28,687.994 725.839,687.994 726.398,687.994 726.958,687.994 727.517,687.994 728.076,687.994 728.635,687.994 729.195,687.994 729.754,687.994 730.313,687.994 730.872,687.994 731.432,687.994 731.991,687.994 732.55,687.994 733.109,687.994 733.669,687.994 734.228,687.994 734.787,687.994 735.346,687.994 735.906,687.994 736.465,687.994 737.024,687.994 737.583,687.994 738.143,687.994 738.702,687.994 739.261,687.994 739.82,687.994 740.38,687.994 740.939,687.994 741.498,687.994 742.057,687.994 742.617,687.994 743.176,687.994 743.735,687.994 744.294,687.994 744.854,687.994 745.413,687.994 745.972,687.994 746.531,687.994 747.091,687.994 747.65,687.994 748.209,687.994 748.768,687.994 749.328,687.994 749.887,687.994 750.446,687.994 751.005,687.994 751.565,687.994 752.124,687.994 752.683,687.994 753.242,687.994 753.802,687.994 754.361,687.994 754.92,687.994 755.479,687.994 756.039,687.994 756.598,687.994 757.157,687.994 757.716,687.994 758.276,687.994 758.835,687.994 759.394,687.994 759.953,687.994 760.513,687.994 761.072,687.994 761.631,687.994 762.19,687.994 762.75,687.994 763.309,687.994 763.868,687.994 764.427,687.994 764.987,687.994 765.546,687.994 766.105,687.994 766.664,687.994 767.224,687.994 767.783,687.994 768.342,687.994 768.901,687.994 769.461,687.994 770.02,687.994 770.579,687.994 771.138,687.994 771.698,687.994 772.257,687.994 772.816,687.994 773.375,687.994 773.935,687.994 774.494,687.994 775.053,687.994 775.612,687.994 776.172,687.994 776.731,687.994 777.29,687.994 777.849,687.994 778.409,687.994 778.968,687.994 779.527,687.994 780.086,687.994 780.646,687.994 781.205,687.994 781.764,687.994 782.323,687.994 782.883,687.994 783.442,687.994 784.001,687.994 784.56,687.994 785.12,687.994 785.679,687.994 786.238,687.994 786.797,687.994 787.357,687.994 787.916,687.994 788.475,687.994 789.034,687.994 789.594,687.994 790.153,687.994 790.712,687.994 791.271,687.994 791.831,687.994 792.39,687.994 792.949,687.994 793.508,687.994 794.068,687.994 794.627,687.994 795.186,687.994 795.745,687.994 796.305,687.994 796.864,687.994 797.423,687.994 797.982,687.994 798.542,687.994 799.101,687.994 799.66,687.994 800.219,687.994 800.779,687.994 801.338,687.994 801.897,687.994 802.456,687.994 803.016,687.994 803.575,687.994 804.134,687.994 804.693,687.994 805.253,687.994 805.812,687.994 806.371,687.994 806.931,687.994 807.49,687.994 808.049,687.994 808.608,687.994 809.168,687.994 809.727,687.994 810.286,687.994 810.845,687.994 811.405,687.994 811.964,687.994 812.523,687.994 813.082,687.994 813.642,687.994 814.201,687.994 814.76,687.994 815.319,687.994 815.879,687.994 816.438,687.994 816.997,687.994 817.556,687.994 818.116,687.994 818.675,687.994 819.234,687.994 819.793,687.994 820.353,687.994 820.912,687.994 821.471,687.994 822.03,687.994 822.59,687.994 823.149,687.994 823.708,687.994 824.267,687.994 824.827,687.994 825.386,687.994 825.945,687.994 826.504,687.994 827.064,687.994 827.623,687.994 828.182,687.994 828.741,687.994 829.301,687.994 829.86,687.994 830.419,687.994 830.978,687.994 831.538,687.994 832.097,687.994 832.656,687.994 833.215,687.994 833.775,687.994 834.334,687.994 834.893,687.994 835.452,687.994 836.012,687.994 836.571,687.994 837.13,687.994 837.689,687.994 838.249,687.994 838.808,687.994 839.367,687.994 839.926,687.994 840.486,687.994 841.045,687.994 841.604,687.994 842.163,687.994 842.723,687.994 843.282,687.994 843.841,687.994 844.4,687.994 844.96,687.994 845.519,687.994 846.078,687.994 846.637,687.994 847.197,687.994 847.756,687.994 848.315,687.994 848.874,687.994 849.434,687.994 849.993,687.994 850.552,687.994 851.111,687.994 851.671,687.994 852.23,687.994 852.789,687.994 853.348,687.994 853.908,687.994 854.467,687.994 855.026,687.994 855.585,687.994 856.145,687.994 856.704,687.994 857.263,687.994 857.822,687.994 858.382,687.994 858.941,687.994 859.5,687.994 860.059,687.994 860.619,687.994 861.178,687.994 861.737,687.994 862.296,687.994 862.856,687.994 863.415,687.994 863.974,687.994 864.533,687.994 865.093,687.994 865.652,687.994 866.211,687.994 866.77,687.994 867.33,687.994 867.889,687.994 868.448,687.994 869.007,687.994 869.567,687.994 870.126,687.994 870.685,687.994 871.244,687.994 871.804,687.994 872.363,687.994 872.922,687.994 873.481,687.994 874.041,687.994 874.6,687.994 875.159,687.994 875.718,687.994 876.278,687.994 876.837,687.994 877.396,687.994 877.955,687.994 878.515,687.994 879.074,687.994 879.633,687.994 880.192,687.994 880.752,687.994 881.311,687.994 881.87,687.994 882.429,687.994 882.989,687.994 883.548,687.994 884.107,687.994 884.666,687.994 885.226,687.994 885.785,687.994 886.344,687.994 886.903,687.994 887.463,687.994 888.022,687.994 888.581,687.994 889.14,687.994 889.7,687.994 890.259,687.994 890.818,687.994 891.377,687.994 891.937,687.994 892.496,687.994 893.055,687.994 893.614,687.994 894.174,687.994 894.733,687.994 895.292,687.994 895.851,687.994 896.411,687.994 896.97,687.994 897.529,687.994 898.088,687.994 898.648,687.994 899.207,687.994 899.766,687.994 900.325,687.994 900.885,687.994 901.444,687.994 902.003,687.994 902.562,687.994 903.122,687.994 903.681,687.994 904.24,687.994 904.799,687.994 905.359,687.994 905.918,687.994 906.477,687.994 907.036,687.994 907.596,687.994 908.155,687.994 908.714,687.994 909.273,687.994 909.833,687.994 910.392,687.994 910.951,687.994 911.51,687.994 912.07,687.994 912.629,687.994 913.188,687.994 913.747,687.994 914.307,687.994 914.866,687.994 915.425,687.994 915.984,687.994 916.544,687.994 917.103,687.994 917.662,687.994 918.221,687.994 918.781,687.994 919.34,687.994 919.899,687.994 920.458,687.994 921.018,687.994 921.577,687.994 922.136,687.994 922.695,687.994 923.255,687.994 923.814,687.994 924.373,687.994 924.932,687.994 925.492,687.994 926.051,687.994 926.61,687.994 927.169,687.994 927.729,687.994 928.288,687.994 928.847,687.994 929.406,687.994 929.966,687.994 930.525,687.994 931.084,687.994 931.644,687.994 932.203,687.994 932.762,687.994 933.321,687.994 933.881,687.994 934.44,687.994 934.999,687.994 935.558,687.994 936.118,687.994 936.677,687.994 937.236,687.994 937.795,687.994 938.355,687.994 938.914,687.994 939.473,687.994 940.032,687.994 940.592,687.994 941.151,687.994 941.71,687.994 942.269,687.994 942.829,687.994 943.388,687.994 943.947,687.994 944.506,687.994 945.066,687.994 945.625,687.994 946.184,687.994 946.743,687.994 947.303,687.994 947.862,687.994 948.421,687.994 948.98,687.994 949.54,687.994 950.099,687.994 950.658,687.994 951.217,687.994 951.777,687.994 952.336,687.994 952.895,687.994 953.454,687.994 954.014,687.994 954.573,687.994 955.132,687.994 955.691,687.994 956.251,687.994 956.81,687.994 957.369,687.994 957.928,687.994 958.488,687.994 959.047,687.994 959.606,687.994 960.165,687.994 960.725,687.994 961.284,687.994 961.843,687.994 962.402,687.994 962.962,687.994 963.521,687.994 964.08,687.994 964.639,687.994 965.199,687.994 965.758,687.994 966.317,687.994 966.876,687.994 967.436,687.994 967.995,687.994 968.554,687.994 969.113,687.994 969.673,687.994 970.232,687.994 970.791,687.994 971.35,687.994 971.91,687.994 972.469,687.994 973.028,687.994 973.587,687.994 974.147,687.994 974.706,687.994 975.265,687.994 975.824,687.994 976.384,687.994 976.943,687.994 977.502,687.994 978.061,687.994 978.621,687.994 979.18,687.994 979.739,687.994 980.298,687.994 980.858,687.994 981.417,687.994 981.976,687.994 982.535,687.994 983.095,687.994 983.654,687.994 984.213,687.994 984.772,687.994 985.332,687.994 985.891,687.994 986.45,687.994 987.009,687.994 987.569,687.994 988.128,687.994 988.687,687.994 989.246,687.994 989.806,687.994 990.365,687.994 990.924,687.994 991.483,687.994 992.043,687.994 992.602,687.994 993.161,687.994 993.72,687.994 994.28,687.994 994.839,687.994 995.398,687.994 995.957,687.994 996.517,687.994 997.076,687.994 997.635,687.994 998.194,687.994 998.754,687.994 999.313,687.994 999.872,687.994 1000.43,687.994 1000.99,687.994 1001.55,687.994 1002.11,687.994 1002.67,687.994 1003.23,687.994 1003.79,687.994 1004.35,687.994 1004.91,687.994 1005.46,687.994 1006.02,687.994 1006.58,687.994 1007.14,687.994 1007.7,687.994 1008.26,687.994 1008.82,687.994 1009.38,687.994 1009.94,687.994 1010.5,687.994 1011.06,687.994 1011.62,687.994 1012.18,687.994 1012.73,687.994 1013.29,687.994 1013.85,687.994 1014.41,687.994 1014.97,687.994 1015.53,687.994 1016.09,687.994 1016.65,687.994 1017.21,687.994 1017.77,687.994 1018.33,687.994 1018.89,687.994 1019.45,687.994 1020.01,687.994 1020.56,687.994 1021.12,687.994 1021.68,687.994 1022.24,687.994 1022.8,687.994 1023.36,687.994 1023.92,687.994 1024.48,687.994 1025.04,687.994 1025.6,687.994 1026.16,687.994 1026.72,687.994 1027.28,687.994 1027.83,687.994 1028.39,687.994 1028.95,687.994 1029.51,687.994 1030.07,687.994 1030.63,687.994 1031.19,687.994 1031.75,687.994 1032.31,687.994 1032.87,687.994 1033.43,687.994 1033.99,687.994 1034.55,687.994 1035.1,687.994 1035.66,687.994 1036.22,687.994 1036.78,687.994 1037.34,687.994 1037.9,687.994 1038.46,687.994 1039.02,687.994 1039.58,687.994 1040.14,687.994 1040.7,687.994 1041.26,687.994 1041.82,687.994 1042.38,687.994 1042.93,687.994 1043.49,687.994 1044.05,687.994 1044.61,687.994 1045.17,687.994 1045.73,687.994 1046.29,687.994 1046.85,687.994 1047.41,687.994 1047.97,687.994 1048.53,687.994 1049.09,687.994 1049.65,687.994 1050.2,687.994 1050.76,687.994 1051.32,687.994 1051.88,687.994 1052.44,687.994 1053,687.994 1053.56,687.994 1054.12,687.994 1054.68,687.994 1055.24,687.994 1055.8,687.994 1056.36,687.994 1056.92,687.994 1057.48,687.994 1058.03,687.994 1058.59,687.994 1059.15,687.994 1059.71,687.994 1060.27,687.994 1060.83,687.994 1061.39,687.994 1061.95,687.994 1062.51,687.994 1063.07,687.994 1063.63,687.994 1064.19,687.994 1064.75,687.994 1065.3,687.994 1065.86,687.994 1066.42,687.994 1066.98,687.994 1067.54,687.994 1068.1,687.994 1068.66,687.994 1069.22,687.994 1069.78,687.994 1070.34,687.994 1070.9,687.994 1071.46,687.994 1072.02,687.994 1072.57,687.994 1073.13,687.994 1073.69,687.994 1074.25,687.994 1074.81,687.994 1075.37,687.994 1075.93,687.994 1076.49,687.994 1077.05,687.994 1077.61,687.994 1078.17,687.994 1078.73,687.994 1079.29,687.994 1079.85,687.994 1080.4,687.994 1080.96,687.994 1081.52,687.994 1082.08,687.994 1082.64,687.994 1083.2,687.994 1083.76,687.994 1084.32,687.994 1084.88,687.994 1085.44,687.994 1086,687.994 1086.56,687.994 1087.12,687.994 1087.67,687.994 1088.23,687.994 1088.79,687.994 1089.35,687.994 1089.91,687.994 1090.47,687.994 1091.03,687.994 1091.59,687.994 1092.15,687.994 1092.71,687.994 1093.27,687.994 1093.83,687.994 1094.39,687.994 1094.94,687.994 1095.5,687.994 1096.06,687.994 1096.62,687.994 1097.18,687.994 1097.74,687.994 1098.3,687.994 1098.86,687.994 1099.42,687.994 1099.98,687.994 1100.54,687.994 1101.1,687.994 1101.66,687.994 1102.22,687.994 1102.77,687.994 1103.33,687.994 1103.89,687.994 1104.45,687.994 1105.01,687.994 1105.57,687.994 1106.13,687.994 1106.69,687.994 1107.25,687.994 1107.81,687.994 1108.37,687.994 1108.93,687.994 1109.49,687.994 1110.04,687.994 1110.6,687.994 1111.16,687.994 1111.72,687.994 1112.28,687.994 1112.84,687.994 1113.4,687.994 1113.96,687.994 1114.52,687.994 1115.08,687.994 1115.64,687.994 1116.2,687.994 1116.76,687.994 1117.31,687.994 1117.87,687.994 1118.43,687.994 1118.99,687.994 1119.55,687.994 1120.11,687.994 1120.67,687.994 1121.23,687.994 1121.79,687.994 1122.35,687.994 1122.91,687.994 1123.47,687.994 1124.03,687.994 1124.59,687.994 1125.14,687.994 1125.7,687.994 1126.26,687.994 1126.82,687.994 1127.38,687.994 1127.94,687.994 1128.5,687.994 1129.06,687.994 1129.62,687.994 1130.18,687.994 1130.74,687.994 1131.3,687.994 1131.86,687.994 1132.41,687.994 1132.97,687.994 1133.53,687.994 1134.09,687.994 1134.65,687.994 1135.21,687.994 1135.77,687.994 1136.33,687.994 1136.89,687.994 1137.45,687.994 1138.01,687.994 1138.57,687.994 1139.13,687.994 1139.68,687.994 1140.24,687.994 1140.8,687.994 1141.36,687.994 1141.92,687.994 1142.48,687.994 1143.04,687.994 1143.6,687.994 1144.16,687.994 1144.72,687.994 1145.28,687.994 1145.84,687.994 1146.4,687.994 1146.96,687.994 1147.51,687.994 1148.07,687.994 1148.63,687.994 1149.19,687.994 1149.75,687.994 1150.31,687.994 1150.87,687.994 1151.43,687.994 1151.99,687.994 1152.55,687.994 1153.11,687.994 1153.67,687.994 1154.23,687.994 1154.78,687.994 1155.34,687.994 1155.9,687.994 1156.46,687.994 1157.02,687.994 1157.58,687.994 1158.14,687.994 1158.7,687.994 1159.26,687.994 1159.82,687.994 1160.38,687.994 1160.94,687.994 1161.5,687.994 1162.05,687.994 1162.61,687.994 1163.17,687.994 1163.73,687.994 1164.29,687.994 1164.85,687.994 1165.41,687.994 1165.97,687.994 1166.53,687.994 1167.09,687.994 1167.65,687.994 1168.21,687.994 1168.77,687.994 1169.33,687.994 1169.88,687.994 1170.44,687.994 1171,687.994 1171.56,687.994 1172.12,687.994 1172.68,687.994 1173.24,687.994 1173.8,687.994 1174.36,687.994 1174.92,687.994 1175.48,687.994 1176.04,687.994 1176.6,687.994 1177.15,687.994 1177.71,687.994 1178.27,687.994 1178.83,687.994 1179.39,687.994 1179.95,687.994 1180.51,687.994 1181.07,687.994 1181.63,687.994 1182.19,687.994 1182.75,687.994 1183.31,687.994 1183.87,687.994 1184.43,687.994 1184.98,687.994 1185.54,687.994 1186.1,687.994 1186.66,687.994 1187.22,687.994 1187.78,687.994 1188.34,687.994 1188.9,687.994 1189.46,687.994 1190.02,687.994 1190.58,687.994 1191.14,687.994 1191.7,687.994 1192.25,687.994 1192.81,687.994 1193.37,687.994 1193.93,687.994 1194.49,687.994 1195.05,687.994 1195.61,687.994 1196.17,687.994 1196.73,687.994 1197.29,687.994 1197.85,687.994 1198.41,687.994 1198.97,687.994 1199.52,687.994 1200.08,687.994 1200.64,687.994 1201.2,687.994 1201.76,687.994 1202.32,687.994 1202.88,687.994 1203.44,687.994 1204,687.994 1204.56,687.994 1205.12,687.994 1205.68,687.994 1206.24,687.994 1206.8,687.994 1207.35,687.994 1207.91,687.994 1208.47,687.994 1209.03,687.994 1209.59,687.994 1210.15,687.994 1210.71,687.994 1211.27,687.994 1211.83,687.994 1212.39,687.994 1212.95,687.994 1213.51,687.994 1214.07,687.994 1214.62,687.994 1215.18,687.994 1215.74,687.994 1216.3,687.994 1216.86,687.994 1217.42,687.994 1217.98,687.994 1218.54,687.994 1219.1,687.994 1219.66,687.994 1220.22,687.994 1220.78,687.994 1221.34,687.994 1221.89,687.994 1222.45,687.994 1223.01,687.994 1223.57,687.994 1224.13,687.994 1224.69,687.994 1225.25,687.994 1225.81,687.994 1226.37,687.994 1226.93,687.994 1227.49,687.994 1228.05,687.994 1228.61,687.994 1229.17,687.994 1229.72,687.994 1230.28,687.994 1230.84,687.994 1231.4,687.994 1231.96,687.994 1232.52,687.994 1233.08,687.994 1233.64,687.994 1234.2,687.994 1234.76,687.994 1235.32,687.994 1235.88,687.994 1236.44,687.994 1236.99,687.994 1237.55,687.994 1238.11,687.994 1238.67,687.994 1239.23,687.994 1239.79,687.994 1240.35,687.994 1240.91,687.994 1241.47,687.994 1242.03,687.994 1242.59,687.994 1243.15,687.994 1243.71,687.994 1244.26,687.994 1244.82,687.994 1245.38,687.994 1245.94,687.994 1246.5,687.994 1247.06,687.994 1247.62,687.994 1248.18,687.994 1248.74,687.994 1249.3,687.994 1249.86,687.994 1250.42,687.994 1250.98,687.994 1251.54,687.994 1252.09,687.994 1252.65,687.994 1253.21,687.994 1253.77,687.994 1254.33,687.994 1254.89,687.994 1255.45,687.994 1256.01,687.994 1256.57,687.994 1257.13,687.994 1257.69,687.994 1258.25,687.994 1258.81,687.994 1259.36,687.994 1259.92,687.994 1260.48,687.994 1261.04,687.994 1261.6,687.994 1262.16,687.994 1262.72,687.994 1263.28,687.994 1263.84,687.994 1264.4,687.994 1264.96,687.994 1265.52,687.994 1266.08,687.994 1266.63,687.994 1267.19,687.994 1267.75,687.994 1268.31,687.994 1268.87,687.994 1269.43,687.994 1269.99,687.994 1270.55,687.994 1271.11,687.994 1271.67,687.994 1272.23,687.994 1272.79,687.994 1273.35,687.994 1273.91,687.994 1274.46,687.994 1275.02,687.994 1275.58,687.994 1276.14,687.994 1276.7,687.994 1277.26,687.994 1277.82,687.994 1278.38,687.994 1278.94,687.994 1279.5,687.994 1280.06,687.994 1280.62,687.994 1281.18,687.994 1281.73,687.994 1282.29,687.994 1282.85,687.994 1283.41,687.994 1283.97,687.994 1284.53,687.994 1285.09,687.994 1285.65,687.994 1286.21,687.994 1286.77,687.994 1287.33,687.994 1287.89,687.994 1288.45,687.994 1289,687.994 1289.56,687.994 1290.12,687.994 1290.68,687.994 1291.24,687.994 1291.8,687.994 1292.36,687.994 1292.92,687.994 1293.48,687.994 1294.04,687.994 1294.6,687.994 1295.16,687.994 1295.72,687.994 1296.28,687.994 1296.83,687.994 1297.39,687.994 1297.95,687.994 1298.51,687.994 1299.07,687.994 1299.63,687.994 1300.19,687.994 1300.75,687.994 1301.31,687.994 1301.87,687.994 1302.43,687.994 1302.99,687.994 1303.55,687.994 1304.1,687.994 1304.66,687.994 1305.22,687.994 1305.78,687.994 1306.34,687.994 1306.9,687.994 1307.46,687.994 1308.02,687.994 1308.58,687.994 1309.14,687.994 1309.7,687.994 1310.26,687.994 1310.82,687.994 1311.38,687.994 1311.93,687.994 1312.49,687.994 1313.05,687.994 1313.61,687.994 1314.17,687.994 1314.73,687.994 1315.29,687.994 1315.85,687.994 1316.41,687.994 1316.97,687.994 1317.53,687.994 1318.09,687.994 1318.65,687.994 1319.2,687.994 1319.76,687.994 1320.32,687.994 1320.88,687.994 1321.44,687.994 1322,687.994 1322.56,687.994 1323.12,687.994 1323.68,687.994 1324.24,687.994 1324.8,687.994 1325.36,687.994 1325.92,687.994 1326.47,687.994 1327.03,687.994 1327.59,687.994 1328.15,687.994 1328.71,687.994 1329.27,687.994 1329.83,687.994 1330.39,687.994 1330.95,687.994 1331.51,687.994 1332.07,687.994 1332.63,687.994 1333.19,687.994 1333.75,687.994 1334.3,687.994 1334.86,687.994 1335.42,687.994 1335.98,687.994 1336.54,687.994 1337.1,687.994 1337.66,687.994 1338.22,687.994 1338.78,687.994 1339.34,687.994 1339.9,687.994 1340.46,687.994 1341.02,687.994 1341.57,687.994 1342.13,687.994 1342.69,687.994 1343.25,687.994 1343.81,687.994 1344.37,687.994 1344.93,687.994 1345.49,687.994 1346.05,687.994 1346.61,687.994 1347.17,687.994 1347.73,687.994 1348.29,687.994 1348.84,687.994 1349.4,687.994 1349.96,687.994 1350.52,687.994 1351.08,687.994 1351.64,687.994 1352.2,687.994 1352.76,687.994 1353.32,687.994 1353.88,687.994 1354.44,687.994 1355,687.994 1355.56,687.994 1356.12,687.994 1356.67,687.994 1357.23,687.994 1357.79,687.994 1358.35,687.994 1358.91,687.994 1359.47,687.994 1360.03,687.994 1360.59,687.994 1361.15,687.994 1361.71,687.994 1362.27,687.994 1362.83,687.994 1363.39,687.994 1363.94,687.994 1364.5,687.994 1365.06,687.994 1365.62,687.994 1366.18,687.994 1366.74,687.994 1367.3,687.994 1367.86,687.994 1368.42,687.994 1368.98,687.994 1369.54,687.994 1370.1,687.994 1370.66,687.994 1371.21,687.994 1371.77,687.994 1372.33,687.994 1372.89,687.994 1373.45,687.994 1374.01,687.994 1374.57,687.994 1375.13,687.994 1375.69,687.994 1376.25,687.994 1376.81,687.994 1377.37,687.994 1377.93,687.994 1378.49,687.994 1379.04,687.994 1379.6,687.994 1380.16,687.994 1380.72,687.994 1381.28,687.994 1381.84,687.994 1382.4,687.994 1382.96,687.994 1383.52,687.994 1384.08,687.994 1384.64,687.994 1385.2,687.994 1385.76,687.994 1386.31,687.994 1386.87,687.994 1387.43,687.994 1387.99,687.994 1388.55,687.994 1389.11,687.994 1389.67,687.994 1390.23,687.994 1390.79,687.994 1391.35,687.994 1391.91,687.994 1392.47,687.994 1393.03,687.994 1393.58,687.994 1394.14,687.994 1394.7,687.994 1395.26,687.994 1395.82,687.994 1396.38,687.994 1396.94,687.994 1397.5,687.994 1398.06,687.994 1398.62,687.994 1399.18,687.994 1399.74,687.994 1400.3,687.994 1400.86,687.994 1401.41,687.994 1401.97,687.994 1402.53,687.994 1403.09,687.994 1403.65,687.994 1404.21,687.994 1404.77,687.994 1405.33,687.994 1405.89,687.994 1406.45,687.994 1407.01,687.994 1407.57,687.994 1408.13,687.994 1408.68,687.994 1409.24,687.994 1409.8,687.994 1410.36,687.994 1410.92,687.994 1411.48,687.994 1412.04,687.994 1412.6,687.994 1413.16,687.994 1413.72,687.994 1414.28,687.994 1414.84,687.994 1415.4,687.994 1415.95,687.994 1416.51,687.994 1417.07,687.994 1417.63,687.994 1418.19,687.994 1418.75,687.994 1419.31,687.994 1419.87,687.994 1420.43,687.994 1420.99,687.994 1421.55,687.994 1422.11,687.994 1422.67,687.994 1423.23,687.994 1423.78,687.994 1424.34,687.994 1424.9,687.994 1425.46,687.994 1426.02,687.994 1426.58,687.994 1427.14,687.994 1427.7,687.994 1428.26,687.994 1428.82,687.994 1429.38,687.994 1429.94,687.994 1430.5,687.994 1431.05,687.994 1431.61,687.994 1432.17,687.994 1432.73,687.994 1433.29,687.994 1433.85,687.994 1434.41,687.994 1434.97,687.994 1435.53,687.994 1436.09,687.994 1436.65,687.994 1437.21,687.994 1437.77,687.994 1438.33,687.994 1438.88,687.994 1439.44,687.994 1440,687.994 1440.56,687.994 1441.12,687.994 1441.68,687.994 1442.24,687.994 1442.8,687.994 1443.36,687.994 1443.92,687.994 1444.48,687.994 1445.04,687.994 1445.6,687.994 1446.15,687.994 1446.71,687.994 1447.27,687.994 1447.83,687.994 1448.39,687.994 1448.95,687.994 1449.51,687.994 1450.07,687.994 1450.63,687.994 1451.19,687.994 1451.75,687.994 1452.31,687.994 1452.87,687.994 1453.42,687.994 1453.98,687.994 1454.54,687.994 1455.1,687.994 1455.66,687.994 1456.22,687.994 1456.78,687.994 1457.34,687.994 1457.9,687.994 1458.46,687.994 1459.02,687.994 1459.58,687.994 1460.14,687.994 1460.7,687.994 1461.25,687.994 1461.81,687.994 1462.37,687.994 1462.93,687.994 1463.49,687.994 1464.05,687.994 1464.61,687.994 1465.17,687.994 1465.73,687.994 1466.29,687.994 1466.85,687.994 1467.41,687.994 1467.97,687.994 1468.52,687.994 1469.08,687.994 1469.64,687.994 1470.2,687.994 1470.76,687.994 1471.32,687.994 1471.88,687.994 1472.44,687.994 1473,687.994 1473.56,687.994 1474.12,687.994 1474.68,687.994 1475.24,687.994 1475.79,687.994 1476.35,687.994 1476.91,687.994 1477.47,687.994 1478.03,687.994 1478.59,687.994 1479.15,687.994 1479.71,687.994 1480.27,687.994 1480.83,687.994 1481.39,687.994 1481.95,687.994 1482.51,687.994 1483.07,687.994 1483.62,687.994 1484.18,687.994 1484.74,687.994 1485.3,687.994 1485.86,687.994 1486.42,687.994 1486.98,687.994 1487.54,687.994 1488.1,687.994 1488.66,687.994 1489.22,687.994 1489.78,687.994 1490.34,687.994 1490.89,687.994 1491.45,687.994 1492.01,687.994 1492.57,687.994 1493.13,687.994 1493.69,687.994 1494.25,687.994 1494.81,687.994 1495.37,687.994 1495.93,687.994 1496.49,687.994 1497.05,687.994 1497.61,687.994 1498.16,687.994 1498.72,687.994 1499.28,687.994 1499.84,687.994 1500.4,687.994 1500.96,687.994 1501.52,687.994 1502.08,687.994 1502.64,687.994 1503.2,687.994 1503.76,687.994 1504.32,687.994 1504.88,687.994 1505.44,687.994 1505.99,687.994 1506.55,687.994 1507.11,687.994 1507.67,687.994 1508.23,687.994 1508.79,687.994 1509.35,687.994 1509.91,687.994 1510.47,687.994 1511.03,687.994 1511.59,687.994 1512.15,687.994 1512.71,687.994 1513.26,687.994 1513.82,687.994 1514.38,687.994 1514.94,687.994 1515.5,687.994 1516.06,687.994 1516.62,687.994 1517.18,687.994 1517.74,687.994 1518.3,687.994 1518.86,687.994 1519.42,687.994 1519.98,687.994 1520.53,687.994 1521.09,687.994 1521.65,687.994 1522.21,687.994 1522.77,687.994 1523.33,687.994 1523.89,687.994 1524.45,687.994 1525.01,687.994 1525.57,687.994 1526.13,687.994 1526.69,687.994 1527.25,687.994 1527.81,687.994 1528.36,687.994 1528.92,687.994 1529.48,687.994 1530.04,687.994 1530.6,687.994 1531.16,687.994 1531.72,687.994 1532.28,687.994 1532.84,687.994 1533.4,687.994 1533.96,687.994 1534.52,687.994 1535.08,687.994 1535.63,687.994 1536.19,687.994 1536.75,687.994 1537.31,687.994 1537.87,687.994 1538.43,687.994 1538.99,687.994 1539.55,687.994 1540.11,687.994 1540.67,687.994 1541.23,687.994 1541.79,687.994 1542.35,687.994 1542.9,687.994 1543.46,687.994 1544.02,687.994 1544.58,687.994 1545.14,687.994 1545.7,687.994 1546.26,687.994 1546.82,687.994 1547.38,687.994 1547.94,687.994 1548.5,687.994 1549.06,687.994 1549.62,687.994 1550.18,687.994 1550.73,687.994 1551.29,687.994 1551.85,687.994 1552.41,687.994 1552.97,687.994 1553.53,687.994 1554.09,687.994 1554.65,687.994 1555.21,687.994 1555.77,687.994 1556.33,687.994 1556.89,687.994 1557.45,687.994 1558,687.994 1558.56,687.994 1559.12,687.994 1559.68,687.994 1560.24,687.994 1560.8,687.994 1561.36,687.994 1561.92,687.994 1562.48,687.994 1563.04,687.994 1563.6,687.994 1564.16,687.994 1564.72,687.994 1565.28,687.994 1565.83,687.994 1566.39,687.994 1566.95,687.994 1567.51,687.994 1568.07,687.994 1568.63,687.994 1569.19,687.994 1569.75,687.994 1570.31,687.994 1570.87,687.994 1571.43,687.994 1571.99,687.994 1572.55,687.994 1573.1,687.994 1573.66,687.994 1574.22,687.994 1574.78,687.994 1575.34,687.994 1575.9,687.994 1576.46,687.994 1577.02,687.994 1577.58,687.994 1578.14,687.994 1578.7,687.994 1579.26,687.994 1579.82,687.994 1580.37,687.994 1580.93,687.994 1581.49,687.994 1582.05,687.994 1582.61,687.994 1583.17,687.994 1583.73,687.994 1584.29,687.994 1584.85,687.994 1585.41,687.994 1585.97,687.994 1586.53,687.994 1587.09,687.994 1587.65,687.994 1588.2,687.994 1588.76,687.994 1589.32,687.994 1589.88,687.994 1590.44,687.994 1591,687.994 1591.56,687.994 1592.12,687.994 1592.68,687.994 1593.24,687.994 1593.8,687.994 1594.36,687.994 1594.92,687.994 1595.47,687.994 1596.03,687.994 1596.59,687.994 1597.15,687.994 1597.71,687.994 1598.27,687.994 1598.83,687.994 1599.39,687.994 1599.95,687.994 1600.51,687.994 1601.07,687.994 1601.63,687.994 1602.19,687.994 1602.74,687.994 1603.3,687.994 1603.86,687.994 1604.42,687.994 1604.98,687.994 1605.54,687.994 1606.1,687.994 1606.66,687.994 1607.22,687.994 1607.78,687.994 1608.34,687.994 1608.9,687.994 1609.46,687.994 1610.02,687.994 1610.57,687.994 1611.13,687.994 1611.69,687.994 1612.25,687.994 1612.81,687.994 1613.37,687.994 1613.93,687.994 1614.49,687.994 1615.05,687.994 1615.61,687.994 1616.17,687.994 1616.73,687.994 1617.29,687.994 1617.84,687.994 1618.4,687.994 1618.96,687.994 1619.52,687.994 1620.08,687.994 1620.64,687.994 1621.2,687.994 1621.76,687.994 1622.32,687.994 1622.88,687.994 1623.44,687.994 1624,687.994 1624.56,687.994 1625.11,687.994 1625.67,687.994 1626.23,687.994 1626.79,687.994 1627.35,687.994 1627.91,687.994 1628.47,687.994 1629.03,687.994 1629.59,687.994 1630.15,687.994 1630.71,687.994 1631.27,687.994 1631.83,687.994 1632.39,687.994 1632.94,687.994 1633.5,687.994 1634.06,687.994 1634.62,687.994 1635.18,687.994 1635.74,687.994 1636.3,687.994 1636.86,687.994 1637.42,687.994 1637.98,687.994 1638.54,687.994 1639.1,687.994 1639.66,687.994 1640.21,687.994 1640.77,687.994 1641.33,687.994 1641.89,687.994 1642.45,687.994 1643.01,687.994 1643.57,687.994 1644.13,687.994 1644.69,687.994 1645.25,687.994 1645.81,687.994 1646.37,687.994 1646.93,687.994 1647.48,687.994 1648.04,687.994 1648.6,687.994 1649.16,687.994 1649.72,687.994 1650.28,687.994 1650.84,687.994 1651.4,687.994 1651.96,687.994 1652.52,687.994 1653.08,687.994 1653.64,687.994 1654.2,687.994 1654.76,687.994 1655.31,687.994 1655.87,687.994 1656.43,687.994 1656.99,687.994 1657.55,687.994 1658.11,687.994 1658.67,687.994 1659.23,687.994 1659.79,687.994 1660.35,687.994 1660.91,687.994 1661.47,687.994 1662.03,687.994 1662.58,687.994 1663.14,687.994 1663.7,687.994 1664.26,687.994 1664.82,687.994 1665.38,687.994 1665.94,687.994 1666.5,687.994 1667.06,687.994 1667.62,687.994 1668.18,687.994 1668.74,687.994 1669.3,687.994 1669.85,687.994 1670.41,687.994 1670.97,687.994 1671.53,687.994 1672.09,687.994 1672.65,687.994 1673.21,687.994 1673.77,687.994 1674.33,687.994 1674.89,687.994 1675.45,687.994 1676.01,687.994 1676.57,687.994 1677.13,687.994 1677.68,687.994 1678.24,687.994 1678.8,687.994 1679.36,687.994 1679.92,687.994 1680.48,687.994 1681.04,687.994 1681.6,687.994 1682.16,687.994 1682.72,687.994 1683.28,687.994 1683.84,687.994 1684.4,687.994 1684.95,687.994 1685.51,687.994 1686.07,687.994 1686.63,687.994 1687.19,687.994 1687.75,687.994 1688.31,687.994 1688.87,687.994 1689.43,687.994 1689.99,687.994 1690.55,687.994 1691.11,687.994 1691.67,687.994 1692.23,687.994 1692.78,687.994 1693.34,687.994 1693.9,687.994 1694.46,687.994 1695.02,687.994 1695.58,687.994 1696.14,687.994 1696.7,687.994 1697.26,687.994 1697.82,687.994 1698.38,687.994 1698.94,687.994 1699.5,687.994 1700.05,687.994 1700.61,687.994 1701.17,687.994 1701.73,687.994 1702.29,687.994 1702.85,687.994 1703.41,687.994 1703.97,687.994 1704.53,687.994 1705.09,687.994 1705.65,687.994 1706.21,687.994 1706.77,687.994 1707.32,687.994 1707.88,687.994 1708.44,687.994 1709,687.994 1709.56,687.994 1710.12,687.994 1710.68,687.994 1711.24,687.994 1711.8,687.994 1712.36,687.994 1712.92,687.994 1713.48,687.994 1714.04,687.994 1714.6,687.994 1715.15,687.994 1715.71,687.994 1716.27,687.994 1716.83,687.994 1717.39,687.994 1717.95,687.994 1718.51,687.994 1719.07,687.994 1719.63,687.994 1720.19,687.994 1720.75,687.994 1721.31,687.994 1721.87,687.994 1722.42,687.994 1722.98,687.994 1723.54,687.994 1724.1,687.994 1724.66,687.994 1725.22,687.994 1725.78,687.994 1726.34,687.994 1726.9,687.994 1727.46,687.994 1728.02,687.994 1728.58,687.994 1729.14,687.994 1729.69,687.994 1730.25,687.994 1730.81,687.994 1731.37,687.994 1731.93,687.994 1732.49,687.994 1733.05,687.994 1733.61,687.994 1734.17,687.994 1734.73,687.994 1735.29,687.994 1735.85,687.994 1736.41,687.994 1736.97,687.994 1737.52,687.994 1738.08,687.994 1738.64,687.994 1739.2,687.994 1739.76,687.994 1740.32,687.994 1740.88,687.994 1741.44,687.994 1742,687.994 1742.56,687.994 1743.12,687.994 1743.68,687.994 1744.24,687.994 1744.79,687.994 1745.35,687.994 1745.91,687.994 1746.47,687.994 1747.03,687.994 1747.59,687.994 1748.15,687.994 1748.71,687.994 1749.27,687.994 1749.83,687.994 1750.39,687.994 1750.95,687.994 1751.51,687.994 1752.06,687.994 1752.62,687.994 1753.18,687.994 1753.74,687.994 1754.3,687.994 1754.86,687.994 1755.42,687.994 1755.98,687.994 1756.54,687.994 1757.1,687.994 1757.66,687.994 1758.22,687.994 1758.78,687.994 1759.34,687.994 1759.89,687.994 1760.45,687.994 1761.01,687.994 1761.57,687.994 1762.13,687.994 1762.69,687.994 1763.25,687.994 1763.81,687.994 1764.37,687.994 1764.93,687.994 1765.49,687.994 1766.05,687.994 1766.61,687.994 1767.16,687.994 1767.72,687.994 1768.28,687.994 1768.84,687.994 1769.4,687.994 1769.96,687.994 1770.52,687.994 1771.08,687.994 1771.64,687.994 1772.2,687.994 1772.76,687.994 1773.32,687.994 1773.88,687.994 1774.43,687.994 1774.99,687.994 1775.55,687.994 1776.11,687.994 1776.67,687.994 1777.23,687.994 1777.79,687.994 1778.35,687.994 1778.91,687.994 1779.47,687.994 1780.03,687.994 1780.59,687.994 1781.15,687.994 1781.71,687.994 1782.26,687.994 1782.82,687.994 1783.38,687.994 1783.94,687.994 1784.5,687.994 1785.06,687.994 1785.62,687.994 1786.18,687.994 1786.74,687.994 1787.3,687.994 1787.86,687.994 1788.42,687.994 1788.98,687.994 1789.53,687.994 1790.09,687.994 1790.65,687.994 1791.21,687.994 1791.77,687.994 1792.33,687.994 1792.89,687.994 1793.45,687.994 1794.01,687.994 1794.57,687.994 1795.13,687.994 1795.69,687.994 1796.25,687.994 1796.8,687.994 1797.36,687.994 1797.92,687.994 1798.48,687.994 1799.04,687.994 1799.6,687.994 1800.16,687.994 1800.72,687.994 1801.28,687.994 1801.84,687.994 1802.4,687.994 1802.96,687.994 1803.52,687.994 1804.08,687.994 1804.63,687.994 1805.19,687.994 1805.75,687.994 1806.31,687.994 1806.87,687.994 1807.43,687.994 1807.99,687.994 1808.55,687.994 1809.11,687.994 1809.67,687.994 1810.23,687.994 1810.79,687.994 1811.35,687.994 1811.9,687.994 1812.46,687.994 1813.02,687.994 1813.58,687.994 1814.14,687.994 1814.7,687.994 1815.26,687.994 1815.82,687.994 1816.38,687.994 1816.94,687.994 1817.5,687.994 1818.06,687.994 1818.62,687.994 1819.18,687.994 1819.73,687.994 1820.29,687.994 1820.85,687.994 1821.41,687.994 1821.97,687.994 1822.53,687.994 1823.09,687.994 1823.65,687.994 1824.21,687.994 1824.77,687.994 1825.33,687.994 1825.89,687.994 1826.45,687.994 1827,687.994 1827.56,687.994 1828.12,687.994 1828.68,687.994 1829.24,687.994 1829.8,687.994 1830.36,687.994 1830.92,687.994 1831.48,687.994 1832.04,687.994 1832.6,687.994 1833.16,687.994 1833.72,687.994 1834.27,687.994 1834.83,687.994 1835.39,687.994 1835.95,687.994 1836.51,687.994 1837.07,687.994 1837.63,687.994 1838.19,687.994 \"/>\n<path clip-path=\"url(#clip963)\" d=\"M720.247 684.868 L720.806 684.868 L721.365 684.868 L721.924 684.868 L722.484 684.868 L723.043 684.868 L723.602 684.868 L724.161 684.868 L724.721 684.868 L725.28 684.868 L725.839 684.868 L726.398 684.868 L726.958 684.868 L727.517 684.868 L728.076 684.868 L728.635 684.868 L729.195 684.868 L729.754 684.868 L730.313 684.868 L730.872 684.868 L731.432 684.868 L731.991 684.868 L732.55 684.868 L733.109 684.868 L733.669 684.868 L734.228 684.868 L734.787 684.868 L735.346 684.868 L735.906 684.868 L736.465 684.868 L737.024 684.868 L737.583 684.868 L738.143 684.868 L738.702 684.868 L739.261 684.868 L739.82 684.868 L740.38 684.868 L740.939 684.868 L741.498 684.868 L742.057 684.868 L742.617 684.868 L743.176 684.868 L743.735 684.868 L744.294 684.868 L744.854 684.868 L745.413 684.868 L745.972 684.868 L746.531 684.868 L747.091 684.868 L747.65 684.868 L748.209 684.868 L748.768 684.868 L749.328 684.868 L749.887 684.868 L750.446 684.868 L751.005 684.868 L751.565 684.868 L752.124 684.868 L752.683 684.868 L753.242 684.868 L753.802 684.868 L754.361 684.868 L754.92 684.868 L755.479 684.868 L756.039 684.868 L756.598 684.868 L757.157 684.868 L757.716 684.868 L758.276 684.868 L758.835 684.868 L759.394 684.868 L759.953 684.868 L760.513 684.868 L761.072 684.868 L761.631 684.868 L762.19 684.868 L762.75 684.868 L763.309 684.868 L763.868 684.868 L764.427 684.868 L764.987 684.868 L765.546 684.868 L766.105 684.868 L766.664 684.868 L767.224 684.868 L767.783 684.868 L768.342 684.868 L768.901 684.868 L769.461 684.868 L770.02 684.868 L770.579 684.868 L771.138 684.868 L771.698 684.868 L772.257 684.868 L772.816 684.868 L773.375 684.868 L773.935 684.868 L774.494 684.868 L775.053 684.868 L775.612 684.868 L776.172 684.868 L776.731 684.868 L777.29 684.868 L777.849 684.868 L778.409 684.868 L778.968 684.868 L779.527 684.868 L780.086 684.868 L780.646 684.868 L781.205 684.868 L781.764 684.868 L782.323 684.868 L782.883 684.868 L783.442 684.868 L784.001 684.868 L784.56 684.868 L785.12 684.868 L785.679 684.868 L786.238 684.868 L786.797 684.868 L787.357 684.868 L787.916 684.868 L788.475 684.868 L789.034 684.868 L789.594 684.868 L790.153 684.868 L790.712 684.868 L791.271 684.868 L791.831 684.868 L792.39 684.868 L792.949 684.868 L793.508 684.868 L794.068 684.868 L794.627 684.868 L795.186 684.868 L795.745 684.868 L796.305 684.868 L796.864 684.868 L797.423 684.868 L797.982 684.868 L798.542 684.868 L799.101 684.868 L799.66 684.868 L800.219 684.868 L800.779 684.868 L801.338 684.868 L801.897 684.868 L802.456 684.868 L803.016 684.868 L803.575 684.868 L804.134 684.868 L804.693 684.868 L805.253 684.868 L805.812 684.868 L806.371 684.868 L806.931 684.868 L807.49 684.868 L808.049 684.868 L808.608 684.868 L809.168 684.868 L809.727 684.868 L810.286 684.868 L810.845 684.868 L811.405 684.868 L811.964 684.868 L812.523 684.868 L813.082 684.868 L813.642 684.868 L814.201 684.868 L814.76 684.868 L815.319 684.868 L815.879 684.868 L816.438 684.868 L816.997 684.868 L817.556 684.868 L818.116 684.868 L818.675 684.868 L819.234 684.868 L819.793 684.868 L820.353 684.868 L820.912 684.868 L821.471 684.868 L822.03 684.868 L822.59 684.868 L823.149 684.868 L823.708 684.868 L824.267 684.868 L824.827 684.868 L825.386 684.868 L825.945 684.868 L826.504 684.868 L827.064 684.868 L827.623 684.868 L828.182 684.868 L828.741 684.868 L829.301 684.868 L829.86 684.868 L830.419 684.868 L830.978 684.868 L831.538 684.868 L832.097 684.868 L832.656 684.868 L833.215 684.868 L833.775 684.868 L834.334 684.868 L834.893 684.868 L835.452 684.868 L836.012 684.868 L836.571 684.868 L837.13 684.868 L837.689 684.868 L838.249 684.868 L838.808 684.868 L839.367 684.868 L839.926 684.868 L840.486 684.868 L841.045 684.868 L841.604 684.868 L842.163 684.868 L842.723 684.868 L843.282 684.868 L843.841 684.868 L844.4 684.868 L844.96 684.868 L845.519 684.868 L846.078 684.868 L846.637 684.868 L847.197 684.868 L847.756 684.868 L848.315 684.868 L848.874 684.868 L849.434 684.868 L849.993 684.868 L850.552 684.868 L851.111 684.868 L851.671 684.868 L852.23 684.868 L852.789 684.868 L853.348 684.868 L853.908 684.868 L854.467 684.868 L855.026 684.868 L855.585 684.868 L856.145 684.868 L856.704 684.868 L857.263 684.868 L857.822 684.868 L858.382 684.868 L858.941 684.868 L859.5 684.868 L860.059 684.868 L860.619 684.868 L861.178 684.868 L861.737 684.868 L862.296 684.868 L862.856 684.868 L863.415 684.868 L863.974 684.868 L864.533 684.868 L865.093 684.868 L865.652 684.868 L866.211 684.868 L866.77 684.868 L867.33 684.868 L867.889 684.868 L868.448 684.868 L869.007 684.868 L869.567 684.868 L870.126 684.868 L870.685 684.868 L871.244 684.868 L871.804 684.868 L872.363 684.868 L872.922 684.868 L873.481 684.868 L874.041 684.868 L874.6 684.868 L875.159 684.868 L875.718 684.868 L876.278 684.868 L876.837 684.868 L877.396 684.868 L877.955 684.868 L878.515 684.868 L879.074 684.868 L879.633 684.868 L880.192 684.868 L880.752 684.868 L881.311 684.868 L881.87 684.868 L882.429 684.868 L882.989 684.868 L883.548 684.868 L884.107 684.868 L884.666 684.868 L885.226 684.868 L885.785 684.868 L886.344 684.868 L886.903 684.868 L887.463 684.868 L888.022 684.868 L888.581 684.868 L889.14 684.868 L889.7 684.868 L890.259 684.868 L890.818 684.868 L891.377 684.868 L891.937 684.868 L892.496 684.868 L893.055 684.868 L893.614 684.868 L894.174 684.868 L894.733 684.868 L895.292 684.868 L895.851 684.868 L896.411 684.868 L896.97 684.868 L897.529 684.868 L898.088 684.868 L898.648 684.868 L899.207 684.868 L899.766 684.868 L900.325 684.868 L900.885 684.868 L901.444 684.868 L902.003 684.868 L902.562 684.868 L903.122 684.868 L903.681 684.868 L904.24 684.868 L904.799 684.868 L905.359 684.868 L905.918 684.868 L906.477 684.868 L907.036 684.868 L907.596 684.868 L908.155 684.868 L908.714 684.868 L909.273 684.868 L909.833 684.868 L910.392 684.868 L910.951 684.868 L911.51 684.868 L912.07 684.868 L912.629 684.868 L913.188 684.868 L913.747 684.868 L914.307 684.868 L914.866 684.868 L915.425 684.868 L915.984 684.868 L916.544 684.868 L917.103 684.868 L917.662 684.868 L918.221 684.868 L918.781 684.868 L919.34 684.868 L919.899 684.868 L920.458 684.868 L921.018 684.868 L921.577 684.868 L922.136 684.868 L922.695 684.868 L923.255 684.868 L923.814 684.868 L924.373 684.868 L924.932 684.868 L925.492 684.868 L926.051 684.868 L926.61 684.868 L927.169 684.868 L927.729 684.868 L928.288 684.868 L928.847 684.868 L929.406 684.868 L929.966 684.868 L930.525 684.868 L931.084 684.868 L931.644 684.868 L932.203 684.868 L932.762 684.868 L933.321 684.868 L933.881 684.868 L934.44 684.868 L934.999 684.868 L935.558 684.868 L936.118 684.868 L936.677 684.868 L937.236 684.868 L937.795 684.868 L938.355 684.868 L938.914 684.868 L939.473 684.868 L940.032 684.868 L940.592 684.868 L941.151 684.868 L941.71 684.868 L942.269 684.868 L942.829 684.868 L943.388 684.868 L943.947 684.868 L944.506 684.868 L945.066 684.868 L945.625 684.868 L946.184 684.868 L946.743 684.868 L947.303 684.868 L947.862 684.868 L948.421 684.868 L948.98 684.868 L949.54 684.868 L950.099 684.868 L950.658 684.868 L951.217 684.868 L951.777 684.868 L952.336 684.868 L952.895 684.868 L953.454 684.868 L954.014 684.868 L954.573 684.868 L955.132 684.868 L955.691 684.868 L956.251 684.868 L956.81 684.868 L957.369 684.868 L957.928 684.868 L958.488 684.868 L959.047 684.868 L959.606 684.868 L960.165 684.868 L960.725 684.868 L961.284 684.868 L961.843 684.868 L962.402 684.868 L962.962 684.868 L963.521 684.868 L964.08 684.868 L964.639 684.868 L965.199 684.868 L965.758 684.868 L966.317 684.868 L966.876 684.868 L967.436 684.868 L967.995 684.868 L968.554 684.868 L969.113 684.868 L969.673 684.868 L970.232 684.868 L970.791 684.868 L971.35 684.868 L971.91 684.868 L972.469 684.868 L973.028 684.868 L973.587 684.868 L974.147 684.868 L974.706 684.868 L975.265 684.868 L975.824 684.868 L976.384 684.868 L976.943 684.868 L977.502 684.868 L978.061 684.868 L978.621 684.868 L979.18 684.868 L979.739 684.868 L980.298 684.868 L980.858 684.868 L981.417 684.868 L981.976 684.868 L982.535 684.868 L983.095 684.868 L983.654 684.868 L984.213 684.868 L984.772 684.868 L985.332 684.868 L985.891 684.868 L986.45 684.868 L987.009 684.868 L987.569 684.868 L988.128 684.868 L988.687 684.868 L989.246 684.868 L989.806 684.868 L990.365 684.868 L990.924 684.868 L991.483 684.868 L992.043 684.868 L992.602 684.868 L993.161 684.868 L993.72 684.868 L994.28 684.868 L994.839 684.868 L995.398 684.868 L995.957 684.868 L996.517 684.868 L997.076 684.868 L997.635 684.868 L998.194 684.868 L998.754 684.868 L999.313 684.868 L999.872 684.868 L1000.43 684.868 L1000.99 684.868 L1001.55 684.868 L1002.11 684.868 L1002.67 684.868 L1003.23 684.868 L1003.79 684.868 L1004.35 684.868 L1004.91 684.868 L1005.46 684.868 L1006.02 684.868 L1006.58 684.868 L1007.14 684.868 L1007.7 684.868 L1008.26 684.868 L1008.82 684.868 L1009.38 684.868 L1009.94 684.868 L1010.5 684.868 L1011.06 684.868 L1011.62 684.868 L1012.18 684.868 L1012.73 684.868 L1013.29 684.868 L1013.85 684.868 L1014.41 684.868 L1014.97 684.868 L1015.53 684.868 L1016.09 684.868 L1016.65 684.868 L1017.21 684.868 L1017.77 684.868 L1018.33 684.868 L1018.89 684.868 L1019.45 684.868 L1020.01 684.868 L1020.56 684.868 L1021.12 684.868 L1021.68 684.868 L1022.24 684.868 L1022.8 684.868 L1023.36 684.868 L1023.92 684.868 L1024.48 684.868 L1025.04 684.868 L1025.6 684.868 L1026.16 684.868 L1026.72 684.868 L1027.28 684.868 L1027.83 684.868 L1028.39 684.868 L1028.95 684.868 L1029.51 684.868 L1030.07 684.868 L1030.63 684.868 L1031.19 684.868 L1031.75 684.868 L1032.31 684.868 L1032.87 684.868 L1033.43 684.868 L1033.99 684.868 L1034.55 684.868 L1035.1 684.868 L1035.66 684.868 L1036.22 684.868 L1036.78 684.868 L1037.34 684.868 L1037.9 684.868 L1038.46 684.868 L1039.02 684.868 L1039.58 684.868 L1040.14 684.868 L1040.7 684.868 L1041.26 684.868 L1041.82 684.868 L1042.38 684.868 L1042.93 684.868 L1043.49 684.868 L1044.05 684.868 L1044.61 684.868 L1045.17 684.868 L1045.73 684.868 L1046.29 684.868 L1046.85 684.868 L1047.41 684.868 L1047.97 684.868 L1048.53 684.868 L1049.09 684.868 L1049.65 684.868 L1050.2 684.868 L1050.76 684.868 L1051.32 684.868 L1051.88 684.868 L1052.44 684.868 L1053 684.868 L1053.56 684.868 L1054.12 684.868 L1054.68 684.868 L1055.24 684.868 L1055.8 684.868 L1056.36 684.868 L1056.92 684.868 L1057.48 684.868 L1058.03 684.868 L1058.59 684.868 L1059.15 684.868 L1059.71 684.868 L1060.27 684.868 L1060.83 684.868 L1061.39 684.868 L1061.95 684.868 L1062.51 684.868 L1063.07 684.868 L1063.63 684.868 L1064.19 684.868 L1064.75 684.868 L1065.3 684.868 L1065.86 684.868 L1066.42 684.868 L1066.98 684.868 L1067.54 684.868 L1068.1 684.868 L1068.66 684.868 L1069.22 684.868 L1069.78 684.868 L1070.34 684.868 L1070.9 684.868 L1071.46 684.868 L1072.02 684.868 L1072.57 684.868 L1073.13 684.868 L1073.69 684.868 L1074.25 684.868 L1074.81 684.868 L1075.37 684.868 L1075.93 684.868 L1076.49 684.868 L1077.05 684.868 L1077.61 684.868 L1078.17 684.868 L1078.73 684.868 L1079.29 684.868 L1079.85 684.868 L1080.4 684.868 L1080.96 684.868 L1081.52 684.868 L1082.08 684.868 L1082.64 684.868 L1083.2 684.868 L1083.76 684.868 L1084.32 684.868 L1084.88 684.868 L1085.44 684.868 L1086 684.868 L1086.56 684.868 L1087.12 684.868 L1087.67 684.868 L1088.23 684.868 L1088.79 684.868 L1089.35 684.868 L1089.91 684.868 L1090.47 684.868 L1091.03 684.868 L1091.59 684.868 L1092.15 684.868 L1092.71 684.868 L1093.27 684.868 L1093.83 684.868 L1094.39 684.868 L1094.94 684.868 L1095.5 684.868 L1096.06 684.868 L1096.62 684.868 L1097.18 684.868 L1097.74 684.868 L1098.3 684.868 L1098.86 684.868 L1099.42 684.868 L1099.98 684.868 L1100.54 684.868 L1101.1 684.868 L1101.66 684.868 L1102.22 684.868 L1102.77 684.868 L1103.33 684.868 L1103.89 684.868 L1104.45 684.868 L1105.01 684.868 L1105.57 684.868 L1106.13 684.868 L1106.69 684.868 L1107.25 684.868 L1107.81 684.868 L1108.37 684.868 L1108.93 684.868 L1109.49 684.868 L1110.04 684.868 L1110.6 684.868 L1111.16 684.868 L1111.72 684.868 L1112.28 684.868 L1112.84 684.868 L1113.4 684.868 L1113.96 684.868 L1114.52 684.868 L1115.08 684.868 L1115.64 684.868 L1116.2 684.868 L1116.76 684.868 L1117.31 684.868 L1117.87 684.868 L1118.43 684.868 L1118.99 684.868 L1119.55 684.868 L1120.11 684.868 L1120.67 684.868 L1121.23 684.868 L1121.79 684.868 L1122.35 684.868 L1122.91 684.868 L1123.47 684.868 L1124.03 684.868 L1124.59 684.868 L1125.14 684.868 L1125.7 684.868 L1126.26 684.868 L1126.82 684.868 L1127.38 684.868 L1127.94 684.868 L1128.5 684.868 L1129.06 684.868 L1129.62 684.868 L1130.18 684.868 L1130.74 684.868 L1131.3 684.868 L1131.86 684.868 L1132.41 684.868 L1132.97 684.868 L1133.53 684.868 L1134.09 684.868 L1134.65 684.868 L1135.21 684.868 L1135.77 684.868 L1136.33 684.868 L1136.89 684.868 L1137.45 684.868 L1138.01 684.868 L1138.57 684.868 L1139.13 684.868 L1139.68 684.868 L1140.24 684.868 L1140.8 684.868 L1141.36 684.868 L1141.92 684.868 L1142.48 684.868 L1143.04 684.868 L1143.6 684.868 L1144.16 684.868 L1144.72 684.868 L1145.28 684.868 L1145.84 684.868 L1146.4 684.868 L1146.96 684.868 L1147.51 684.868 L1148.07 684.868 L1148.63 684.868 L1149.19 684.868 L1149.75 684.868 L1150.31 684.868 L1150.87 684.868 L1151.43 684.868 L1151.99 684.868 L1152.55 684.868 L1153.11 684.868 L1153.67 684.868 L1154.23 684.868 L1154.78 684.868 L1155.34 684.868 L1155.9 684.868 L1156.46 684.868 L1157.02 684.868 L1157.58 684.868 L1158.14 684.868 L1158.7 684.868 L1159.26 684.868 L1159.82 684.868 L1160.38 684.868 L1160.94 684.868 L1161.5 684.868 L1162.05 684.868 L1162.61 684.868 L1163.17 684.868 L1163.73 684.868 L1164.29 684.868 L1164.85 684.868 L1165.41 684.868 L1165.97 684.868 L1166.53 684.868 L1167.09 684.868 L1167.65 684.868 L1168.21 684.868 L1168.77 684.868 L1169.33 684.868 L1169.88 684.868 L1170.44 684.868 L1171 684.868 L1171.56 684.868 L1172.12 684.868 L1172.68 684.868 L1173.24 684.868 L1173.8 684.868 L1174.36 684.868 L1174.92 684.868 L1175.48 684.868 L1176.04 684.868 L1176.6 684.868 L1177.15 684.868 L1177.71 684.868 L1178.27 684.868 L1178.83 684.868 L1179.39 684.868 L1179.95 684.868 L1180.51 684.868 L1181.07 684.868 L1181.63 684.868 L1182.19 684.868 L1182.75 684.868 L1183.31 684.868 L1183.87 684.868 L1184.43 684.868 L1184.98 684.868 L1185.54 684.868 L1186.1 684.868 L1186.66 684.868 L1187.22 684.868 L1187.78 684.868 L1188.34 684.868 L1188.9 684.868 L1189.46 684.868 L1190.02 684.868 L1190.58 684.868 L1191.14 684.868 L1191.7 684.868 L1192.25 684.868 L1192.81 684.868 L1193.37 684.868 L1193.93 684.868 L1194.49 684.868 L1195.05 684.868 L1195.61 684.868 L1196.17 684.868 L1196.73 684.868 L1197.29 684.868 L1197.85 684.868 L1198.41 684.868 L1198.97 684.868 L1199.52 684.868 L1200.08 684.868 L1200.64 684.868 L1201.2 684.868 L1201.76 684.868 L1202.32 684.868 L1202.88 684.868 L1203.44 684.868 L1204 684.868 L1204.56 684.868 L1205.12 684.868 L1205.68 684.868 L1206.24 684.868 L1206.8 684.868 L1207.35 684.868 L1207.91 684.868 L1208.47 684.868 L1209.03 684.868 L1209.59 684.868 L1210.15 684.868 L1210.71 684.868 L1211.27 684.868 L1211.83 684.868 L1212.39 684.868 L1212.95 684.868 L1213.51 684.868 L1214.07 684.868 L1214.62 684.868 L1215.18 684.868 L1215.74 684.868 L1216.3 684.868 L1216.86 684.868 L1217.42 684.868 L1217.98 684.868 L1218.54 684.868 L1219.1 684.868 L1219.66 684.868 L1220.22 684.868 L1220.78 684.868 L1221.34 684.868 L1221.89 684.868 L1222.45 684.868 L1223.01 684.868 L1223.57 684.868 L1224.13 684.868 L1224.69 684.868 L1225.25 684.868 L1225.81 684.868 L1226.37 684.868 L1226.93 684.868 L1227.49 684.868 L1228.05 684.868 L1228.61 684.868 L1229.17 684.868 L1229.72 684.868 L1230.28 684.868 L1230.84 684.868 L1231.4 684.868 L1231.96 684.868 L1232.52 684.868 L1233.08 684.868 L1233.64 684.868 L1234.2 684.868 L1234.76 684.868 L1235.32 684.868 L1235.88 684.868 L1236.44 684.868 L1236.99 684.868 L1237.55 684.868 L1238.11 684.868 L1238.67 684.868 L1239.23 684.868 L1239.79 684.868 L1240.35 684.868 L1240.91 684.868 L1241.47 684.868 L1242.03 684.868 L1242.59 684.868 L1243.15 684.868 L1243.71 684.868 L1244.26 684.868 L1244.82 684.868 L1245.38 684.868 L1245.94 684.868 L1246.5 684.868 L1247.06 684.868 L1247.62 684.868 L1248.18 684.868 L1248.74 684.868 L1249.3 684.868 L1249.86 684.868 L1250.42 684.868 L1250.98 684.868 L1251.54 684.868 L1252.09 684.868 L1252.65 684.868 L1253.21 684.868 L1253.77 684.868 L1254.33 684.868 L1254.89 684.868 L1255.45 684.868 L1256.01 684.868 L1256.57 684.868 L1257.13 684.868 L1257.69 684.868 L1258.25 684.868 L1258.81 684.868 L1259.36 684.868 L1259.92 684.868 L1260.48 684.868 L1261.04 684.868 L1261.6 684.868 L1262.16 684.868 L1262.72 684.868 L1263.28 684.868 L1263.84 684.868 L1264.4 684.868 L1264.96 684.868 L1265.52 684.868 L1266.08 684.868 L1266.63 684.868 L1267.19 684.868 L1267.75 684.868 L1268.31 684.868 L1268.87 684.868 L1269.43 684.868 L1269.99 684.868 L1270.55 684.868 L1271.11 684.868 L1271.67 684.868 L1272.23 684.868 L1272.79 684.868 L1273.35 684.868 L1273.91 684.868 L1274.46 684.868 L1275.02 684.868 L1275.58 684.868 L1276.14 684.868 L1276.7 684.868 L1277.26 684.868 L1277.82 684.868 L1278.38 684.868 L1278.94 684.868 L1279.5 684.868 L1280.06 684.868 L1280.62 684.868 L1281.18 684.868 L1281.73 684.868 L1282.29 684.868 L1282.85 684.868 L1283.41 684.868 L1283.97 684.868 L1284.53 684.868 L1285.09 684.868 L1285.65 684.868 L1286.21 684.868 L1286.77 684.868 L1287.33 684.868 L1287.89 684.868 L1288.45 684.868 L1289 684.868 L1289.56 684.868 L1290.12 684.868 L1290.68 684.868 L1291.24 684.868 L1291.8 684.868 L1292.36 684.868 L1292.92 684.868 L1293.48 684.868 L1294.04 684.868 L1294.6 684.868 L1295.16 684.868 L1295.72 684.868 L1296.28 684.868 L1296.83 684.868 L1297.39 684.868 L1297.95 684.868 L1298.51 684.868 L1299.07 684.868 L1299.63 684.868 L1300.19 684.868 L1300.75 684.868 L1301.31 684.868 L1301.87 684.868 L1302.43 684.868 L1302.99 684.868 L1303.55 684.868 L1304.1 684.868 L1304.66 684.868 L1305.22 684.868 L1305.78 684.868 L1306.34 684.868 L1306.9 684.868 L1307.46 684.868 L1308.02 684.868 L1308.58 684.868 L1309.14 684.868 L1309.7 684.868 L1310.26 684.868 L1310.82 684.868 L1311.38 684.868 L1311.93 684.868 L1312.49 684.868 L1313.05 684.868 L1313.61 684.868 L1314.17 684.868 L1314.73 684.868 L1315.29 684.868 L1315.85 684.868 L1316.41 684.868 L1316.97 684.868 L1317.53 684.868 L1318.09 684.868 L1318.65 684.868 L1319.2 684.868 L1319.76 684.868 L1320.32 684.868 L1320.88 684.868 L1321.44 684.868 L1322 684.868 L1322.56 684.868 L1323.12 684.868 L1323.68 684.868 L1324.24 684.868 L1324.8 684.868 L1325.36 684.868 L1325.92 684.868 L1326.47 684.868 L1327.03 684.868 L1327.59 684.868 L1328.15 684.868 L1328.71 684.868 L1329.27 684.868 L1329.83 684.868 L1330.39 684.868 L1330.95 684.868 L1331.51 684.868 L1332.07 684.868 L1332.63 684.868 L1333.19 684.868 L1333.75 684.868 L1334.3 684.868 L1334.86 684.868 L1335.42 684.868 L1335.98 684.868 L1336.54 684.868 L1337.1 684.868 L1337.66 684.868 L1338.22 684.868 L1338.78 684.868 L1339.34 684.868 L1339.9 684.868 L1340.46 684.868 L1341.02 684.868 L1341.57 684.868 L1342.13 684.868 L1342.69 684.868 L1343.25 684.868 L1343.81 684.868 L1344.37 684.868 L1344.93 684.868 L1345.49 684.868 L1346.05 684.868 L1346.61 684.868 L1347.17 684.868 L1347.73 684.868 L1348.29 684.868 L1348.84 684.868 L1349.4 684.868 L1349.96 684.868 L1350.52 684.868 L1351.08 684.868 L1351.64 684.868 L1352.2 684.868 L1352.76 684.868 L1353.32 684.868 L1353.88 684.868 L1354.44 684.868 L1355 684.868 L1355.56 684.868 L1356.12 684.868 L1356.67 684.868 L1357.23 684.868 L1357.79 684.868 L1358.35 684.868 L1358.91 684.868 L1359.47 684.868 L1360.03 684.868 L1360.59 684.868 L1361.15 684.868 L1361.71 684.868 L1362.27 684.868 L1362.83 684.868 L1363.39 684.868 L1363.94 684.868 L1364.5 684.868 L1365.06 684.868 L1365.62 684.868 L1366.18 684.868 L1366.74 684.868 L1367.3 684.868 L1367.86 684.868 L1368.42 684.868 L1368.98 684.868 L1369.54 684.868 L1370.1 684.868 L1370.66 684.868 L1371.21 684.868 L1371.77 684.868 L1372.33 684.868 L1372.89 684.868 L1373.45 684.868 L1374.01 684.868 L1374.57 684.868 L1375.13 684.868 L1375.69 684.868 L1376.25 684.868 L1376.81 684.868 L1377.37 684.868 L1377.93 684.868 L1378.49 684.868 L1379.04 684.868 L1379.6 684.868 L1380.16 684.868 L1380.72 684.868 L1381.28 684.868 L1381.84 684.868 L1382.4 684.868 L1382.96 684.868 L1383.52 684.868 L1384.08 684.868 L1384.64 684.868 L1385.2 684.868 L1385.76 684.868 L1386.31 684.868 L1386.87 684.868 L1387.43 684.868 L1387.99 684.868 L1388.55 684.868 L1389.11 684.868 L1389.67 684.868 L1390.23 684.868 L1390.79 684.868 L1391.35 684.868 L1391.91 684.868 L1392.47 684.868 L1393.03 684.868 L1393.58 684.868 L1394.14 684.868 L1394.7 684.868 L1395.26 684.868 L1395.82 684.868 L1396.38 684.868 L1396.94 684.868 L1397.5 684.868 L1398.06 684.868 L1398.62 684.868 L1399.18 684.868 L1399.74 684.868 L1400.3 684.868 L1400.86 684.868 L1401.41 684.868 L1401.97 684.868 L1402.53 684.868 L1403.09 684.868 L1403.65 684.868 L1404.21 684.868 L1404.77 684.868 L1405.33 684.868 L1405.89 684.868 L1406.45 684.868 L1407.01 684.868 L1407.57 684.868 L1408.13 684.868 L1408.68 684.868 L1409.24 684.868 L1409.8 684.868 L1410.36 684.868 L1410.92 684.868 L1411.48 684.868 L1412.04 684.868 L1412.6 684.868 L1413.16 684.868 L1413.72 684.868 L1414.28 684.868 L1414.84 684.868 L1415.4 684.868 L1415.95 684.868 L1416.51 684.868 L1417.07 684.868 L1417.63 684.868 L1418.19 684.868 L1418.75 684.868 L1419.31 684.868 L1419.87 684.868 L1420.43 684.868 L1420.99 684.868 L1421.55 684.868 L1422.11 684.868 L1422.67 684.868 L1423.23 684.868 L1423.78 684.868 L1424.34 684.868 L1424.9 684.868 L1425.46 684.868 L1426.02 684.868 L1426.58 684.868 L1427.14 684.868 L1427.7 684.868 L1428.26 684.868 L1428.82 684.868 L1429.38 684.868 L1429.94 684.868 L1430.5 684.868 L1431.05 684.868 L1431.61 684.868 L1432.17 684.868 L1432.73 684.868 L1433.29 684.868 L1433.85 684.868 L1434.41 684.868 L1434.97 684.868 L1435.53 684.868 L1436.09 684.868 L1436.65 684.868 L1437.21 684.868 L1437.77 684.868 L1438.33 684.868 L1438.88 684.868 L1439.44 684.868 L1440 684.868 L1440.56 684.868 L1441.12 684.868 L1441.68 684.868 L1442.24 684.868 L1442.8 684.868 L1443.36 684.868 L1443.92 684.868 L1444.48 684.868 L1445.04 684.868 L1445.6 684.868 L1446.15 684.868 L1446.71 684.868 L1447.27 684.868 L1447.83 684.868 L1448.39 684.868 L1448.95 684.868 L1449.51 684.868 L1450.07 684.868 L1450.63 684.868 L1451.19 684.868 L1451.75 684.868 L1452.31 684.868 L1452.87 684.868 L1453.42 684.868 L1453.98 684.868 L1454.54 684.868 L1455.1 684.868 L1455.66 684.868 L1456.22 684.868 L1456.78 684.868 L1457.34 684.868 L1457.9 684.868 L1458.46 684.868 L1459.02 684.868 L1459.58 684.868 L1460.14 684.868 L1460.7 684.868 L1461.25 684.868 L1461.81 684.868 L1462.37 684.868 L1462.93 684.868 L1463.49 684.868 L1464.05 684.868 L1464.61 684.868 L1465.17 684.868 L1465.73 684.868 L1466.29 684.868 L1466.85 684.868 L1467.41 684.868 L1467.97 684.868 L1468.52 684.868 L1469.08 684.868 L1469.64 684.868 L1470.2 684.868 L1470.76 684.868 L1471.32 684.868 L1471.88 684.868 L1472.44 684.868 L1473 684.868 L1473.56 684.868 L1474.12 684.868 L1474.68 684.868 L1475.24 684.868 L1475.79 684.868 L1476.35 684.868 L1476.91 684.868 L1477.47 684.868 L1478.03 684.868 L1478.59 684.868 L1479.15 684.868 L1479.71 684.868 L1480.27 684.868 L1480.83 684.868 L1481.39 684.868 L1481.95 684.868 L1482.51 684.868 L1483.07 684.868 L1483.62 684.868 L1484.18 684.868 L1484.74 684.868 L1485.3 684.868 L1485.86 684.868 L1486.42 684.868 L1486.98 684.868 L1487.54 684.868 L1488.1 684.868 L1488.66 684.868 L1489.22 684.868 L1489.78 684.868 L1490.34 684.868 L1490.89 684.868 L1491.45 684.868 L1492.01 684.868 L1492.57 684.868 L1493.13 684.868 L1493.69 684.868 L1494.25 684.868 L1494.81 684.868 L1495.37 684.868 L1495.93 684.868 L1496.49 684.868 L1497.05 684.868 L1497.61 684.868 L1498.16 684.868 L1498.72 684.868 L1499.28 684.868 L1499.84 684.868 L1500.4 684.868 L1500.96 684.868 L1501.52 684.868 L1502.08 684.868 L1502.64 684.868 L1503.2 684.868 L1503.76 684.868 L1504.32 684.868 L1504.88 684.868 L1505.44 684.868 L1505.99 684.868 L1506.55 684.868 L1507.11 684.868 L1507.67 684.868 L1508.23 684.868 L1508.79 684.868 L1509.35 684.868 L1509.91 684.868 L1510.47 684.868 L1511.03 684.868 L1511.59 684.868 L1512.15 684.868 L1512.71 684.868 L1513.26 684.868 L1513.82 684.868 L1514.38 684.868 L1514.94 684.868 L1515.5 684.868 L1516.06 684.868 L1516.62 684.868 L1517.18 684.868 L1517.74 684.868 L1518.3 684.868 L1518.86 684.868 L1519.42 684.868 L1519.98 684.868 L1520.53 684.868 L1521.09 684.868 L1521.65 684.868 L1522.21 684.868 L1522.77 684.868 L1523.33 684.868 L1523.89 684.868 L1524.45 684.868 L1525.01 684.868 L1525.57 684.868 L1526.13 684.868 L1526.69 684.868 L1527.25 684.868 L1527.81 684.868 L1528.36 684.868 L1528.92 684.868 L1529.48 684.868 L1530.04 684.868 L1530.6 684.868 L1531.16 684.868 L1531.72 684.868 L1532.28 684.868 L1532.84 684.868 L1533.4 684.868 L1533.96 684.868 L1534.52 684.868 L1535.08 684.868 L1535.63 684.868 L1536.19 684.868 L1536.75 684.868 L1537.31 684.868 L1537.87 684.868 L1538.43 684.868 L1538.99 684.868 L1539.55 684.868 L1540.11 684.868 L1540.67 684.868 L1541.23 684.868 L1541.79 684.868 L1542.35 684.868 L1542.9 684.868 L1543.46 684.868 L1544.02 684.868 L1544.58 684.868 L1545.14 684.868 L1545.7 684.868 L1546.26 684.868 L1546.82 684.868 L1547.38 684.868 L1547.94 684.868 L1548.5 684.868 L1549.06 684.868 L1549.62 684.868 L1550.18 684.868 L1550.73 684.868 L1551.29 684.868 L1551.85 684.868 L1552.41 684.868 L1552.97 684.868 L1553.53 684.868 L1554.09 684.868 L1554.65 684.868 L1555.21 684.868 L1555.77 684.868 L1556.33 684.868 L1556.89 684.868 L1557.45 684.868 L1558 684.868 L1558.56 684.868 L1559.12 684.868 L1559.68 684.868 L1560.24 684.868 L1560.8 684.868 L1561.36 684.868 L1561.92 684.868 L1562.48 684.868 L1563.04 684.868 L1563.6 684.868 L1564.16 684.868 L1564.72 684.868 L1565.28 684.868 L1565.83 684.868 L1566.39 684.868 L1566.95 684.868 L1567.51 684.868 L1568.07 684.868 L1568.63 684.868 L1569.19 684.868 L1569.75 684.868 L1570.31 684.868 L1570.87 684.868 L1571.43 684.868 L1571.99 684.868 L1572.55 684.868 L1573.1 684.868 L1573.66 684.868 L1574.22 684.868 L1574.78 684.868 L1575.34 684.868 L1575.9 684.868 L1576.46 684.868 L1577.02 684.868 L1577.58 684.868 L1578.14 684.868 L1578.7 684.868 L1579.26 684.868 L1579.82 684.868 L1580.37 684.868 L1580.93 684.868 L1581.49 684.868 L1582.05 684.868 L1582.61 684.868 L1583.17 684.868 L1583.73 684.868 L1584.29 684.868 L1584.85 684.868 L1585.41 684.868 L1585.97 684.868 L1586.53 684.868 L1587.09 684.868 L1587.65 684.868 L1588.2 684.868 L1588.76 684.868 L1589.32 684.868 L1589.88 684.868 L1590.44 684.868 L1591 684.868 L1591.56 684.868 L1592.12 684.868 L1592.68 684.868 L1593.24 684.868 L1593.8 684.868 L1594.36 684.868 L1594.92 684.868 L1595.47 684.868 L1596.03 684.868 L1596.59 684.868 L1597.15 684.868 L1597.71 684.868 L1598.27 684.868 L1598.83 684.868 L1599.39 684.868 L1599.95 684.868 L1600.51 684.868 L1601.07 684.868 L1601.63 684.868 L1602.19 684.868 L1602.74 684.868 L1603.3 684.868 L1603.86 684.868 L1604.42 684.868 L1604.98 684.868 L1605.54 684.868 L1606.1 684.868 L1606.66 684.868 L1607.22 684.868 L1607.78 684.868 L1608.34 684.868 L1608.9 684.868 L1609.46 684.868 L1610.02 684.868 L1610.57 684.868 L1611.13 684.868 L1611.69 684.868 L1612.25 684.868 L1612.81 684.868 L1613.37 684.868 L1613.93 684.868 L1614.49 684.868 L1615.05 684.868 L1615.61 684.868 L1616.17 684.868 L1616.73 684.868 L1617.29 684.868 L1617.84 684.868 L1618.4 684.868 L1618.96 684.868 L1619.52 684.868 L1620.08 684.868 L1620.64 684.868 L1621.2 684.868 L1621.76 684.868 L1622.32 684.868 L1622.88 684.868 L1623.44 684.868 L1624 684.868 L1624.56 684.868 L1625.11 684.868 L1625.67 684.868 L1626.23 684.868 L1626.79 684.868 L1627.35 684.868 L1627.91 684.868 L1628.47 684.868 L1629.03 684.868 L1629.59 684.868 L1630.15 684.868 L1630.71 684.868 L1631.27 684.868 L1631.83 684.868 L1632.39 684.868 L1632.94 684.868 L1633.5 684.868 L1634.06 684.868 L1634.62 684.868 L1635.18 684.868 L1635.74 684.868 L1636.3 684.868 L1636.86 684.868 L1637.42 684.868 L1637.98 684.868 L1638.54 684.868 L1639.1 684.868 L1639.66 684.868 L1640.21 684.868 L1640.77 684.868 L1641.33 684.868 L1641.89 684.868 L1642.45 684.868 L1643.01 684.868 L1643.57 684.868 L1644.13 684.868 L1644.69 684.868 L1645.25 684.868 L1645.81 684.868 L1646.37 684.868 L1646.93 684.868 L1647.48 684.868 L1648.04 684.868 L1648.6 684.868 L1649.16 684.868 L1649.72 684.868 L1650.28 684.868 L1650.84 684.868 L1651.4 684.868 L1651.96 684.868 L1652.52 684.868 L1653.08 684.868 L1653.64 684.868 L1654.2 684.868 L1654.76 684.868 L1655.31 684.868 L1655.87 684.868 L1656.43 684.868 L1656.99 684.868 L1657.55 684.868 L1658.11 684.868 L1658.67 684.868 L1659.23 684.868 L1659.79 684.868 L1660.35 684.868 L1660.91 684.868 L1661.47 684.868 L1662.03 684.868 L1662.58 684.868 L1663.14 684.868 L1663.7 684.868 L1664.26 684.868 L1664.82 684.868 L1665.38 684.868 L1665.94 684.868 L1666.5 684.868 L1667.06 684.868 L1667.62 684.868 L1668.18 684.868 L1668.74 684.868 L1669.3 684.868 L1669.85 684.868 L1670.41 684.868 L1670.97 684.868 L1671.53 684.868 L1672.09 684.868 L1672.65 684.868 L1673.21 684.868 L1673.77 684.868 L1674.33 684.868 L1674.89 684.868 L1675.45 684.868 L1676.01 684.868 L1676.57 684.868 L1677.13 684.868 L1677.68 684.868 L1678.24 684.868 L1678.8 684.868 L1679.36 684.868 L1679.92 684.868 L1680.48 684.868 L1681.04 684.868 L1681.6 684.868 L1682.16 684.868 L1682.72 684.868 L1683.28 684.868 L1683.84 684.868 L1684.4 684.868 L1684.95 684.868 L1685.51 684.868 L1686.07 684.868 L1686.63 684.868 L1687.19 684.868 L1687.75 684.868 L1688.31 684.868 L1688.87 684.868 L1689.43 684.868 L1689.99 684.868 L1690.55 684.868 L1691.11 684.868 L1691.67 684.868 L1692.23 684.868 L1692.78 684.868 L1693.34 684.868 L1693.9 684.868 L1694.46 684.868 L1695.02 684.868 L1695.58 684.868 L1696.14 684.868 L1696.7 684.868 L1697.26 684.868 L1697.82 684.868 L1698.38 684.868 L1698.94 684.868 L1699.5 684.868 L1700.05 684.868 L1700.61 684.868 L1701.17 684.868 L1701.73 684.868 L1702.29 684.868 L1702.85 684.868 L1703.41 684.868 L1703.97 684.868 L1704.53 684.868 L1705.09 684.868 L1705.65 684.868 L1706.21 684.868 L1706.77 684.868 L1707.32 684.868 L1707.88 684.868 L1708.44 684.868 L1709 684.868 L1709.56 684.868 L1710.12 684.868 L1710.68 684.868 L1711.24 684.868 L1711.8 684.868 L1712.36 684.868 L1712.92 684.868 L1713.48 684.868 L1714.04 684.868 L1714.6 684.868 L1715.15 684.868 L1715.71 684.868 L1716.27 684.868 L1716.83 684.868 L1717.39 684.868 L1717.95 684.868 L1718.51 684.868 L1719.07 684.868 L1719.63 684.868 L1720.19 684.868 L1720.75 684.868 L1721.31 684.868 L1721.87 684.868 L1722.42 684.868 L1722.98 684.868 L1723.54 684.868 L1724.1 684.868 L1724.66 684.868 L1725.22 684.868 L1725.78 684.868 L1726.34 684.868 L1726.9 684.868 L1727.46 684.868 L1728.02 684.868 L1728.58 684.868 L1729.14 684.868 L1729.69 684.868 L1730.25 684.868 L1730.81 684.868 L1731.37 684.868 L1731.93 684.868 L1732.49 684.868 L1733.05 684.868 L1733.61 684.868 L1734.17 684.868 L1734.73 684.868 L1735.29 684.868 L1735.85 684.868 L1736.41 684.868 L1736.97 684.868 L1737.52 684.868 L1738.08 684.868 L1738.64 684.868 L1739.2 684.868 L1739.76 684.868 L1740.32 684.868 L1740.88 684.868 L1741.44 684.868 L1742 684.868 L1742.56 684.868 L1743.12 684.868 L1743.68 684.868 L1744.24 684.868 L1744.79 684.868 L1745.35 684.868 L1745.91 684.868 L1746.47 684.868 L1747.03 684.868 L1747.59 684.868 L1748.15 684.868 L1748.71 684.868 L1749.27 684.868 L1749.83 684.868 L1750.39 684.868 L1750.95 684.868 L1751.51 684.868 L1752.06 684.868 L1752.62 684.868 L1753.18 684.868 L1753.74 684.868 L1754.3 684.868 L1754.86 684.868 L1755.42 684.868 L1755.98 684.868 L1756.54 684.868 L1757.1 684.868 L1757.66 684.868 L1758.22 684.868 L1758.78 684.868 L1759.34 684.868 L1759.89 684.868 L1760.45 684.868 L1761.01 684.868 L1761.57 684.868 L1762.13 684.868 L1762.69 684.868 L1763.25 684.868 L1763.81 684.868 L1764.37 684.868 L1764.93 684.868 L1765.49 684.868 L1766.05 684.868 L1766.61 684.868 L1767.16 684.868 L1767.72 684.868 L1768.28 684.868 L1768.84 684.868 L1769.4 684.868 L1769.96 684.868 L1770.52 684.868 L1771.08 684.868 L1771.64 684.868 L1772.2 684.868 L1772.76 684.868 L1773.32 684.868 L1773.88 684.868 L1774.43 684.868 L1774.99 684.868 L1775.55 684.868 L1776.11 684.868 L1776.67 684.868 L1777.23 684.868 L1777.79 684.868 L1778.35 684.868 L1778.91 684.868 L1779.47 684.868 L1780.03 684.868 L1780.59 684.868 L1781.15 684.868 L1781.71 684.868 L1782.26 684.868 L1782.82 684.868 L1783.38 684.868 L1783.94 684.868 L1784.5 684.868 L1785.06 684.868 L1785.62 684.868 L1786.18 684.868 L1786.74 684.868 L1787.3 684.868 L1787.86 684.868 L1788.42 684.868 L1788.98 684.868 L1789.53 684.868 L1790.09 684.868 L1790.65 684.868 L1791.21 684.868 L1791.77 684.868 L1792.33 684.868 L1792.89 684.868 L1793.45 684.868 L1794.01 684.868 L1794.57 684.868 L1795.13 684.868 L1795.69 684.868 L1796.25 684.868 L1796.8 684.868 L1797.36 684.868 L1797.92 684.868 L1798.48 684.868 L1799.04 684.868 L1799.6 684.868 L1800.16 684.868 L1800.72 684.868 L1801.28 684.868 L1801.84 684.868 L1802.4 684.868 L1802.96 684.868 L1803.52 684.868 L1804.08 684.868 L1804.63 684.868 L1805.19 684.868 L1805.75 684.868 L1806.31 684.868 L1806.87 684.868 L1807.43 684.868 L1807.99 684.868 L1808.55 684.868 L1809.11 684.868 L1809.67 684.868 L1810.23 684.868 L1810.79 684.868 L1811.35 684.868 L1811.9 684.868 L1812.46 684.868 L1813.02 684.868 L1813.58 684.868 L1814.14 684.868 L1814.7 684.868 L1815.26 684.868 L1815.82 684.868 L1816.38 684.868 L1816.94 684.868 L1817.5 684.868 L1818.06 684.868 L1818.62 684.868 L1819.18 684.868 L1819.73 684.868 L1820.29 684.868 L1820.85 684.868 L1821.41 684.868 L1821.97 684.868 L1822.53 684.868 L1823.09 684.868 L1823.65 684.868 L1824.21 684.868 L1824.77 684.868 L1825.33 684.868 L1825.89 684.868 L1826.45 684.868 L1827 684.868 L1827.56 684.868 L1828.12 684.868 L1828.68 684.868 L1829.24 684.868 L1829.8 684.868 L1830.36 684.868 L1830.92 684.868 L1831.48 684.868 L1832.04 684.868 L1832.6 684.868 L1833.16 684.868 L1833.72 684.868 L1834.27 684.868 L1834.83 684.868 L1835.39 684.868 L1835.95 684.868 L1836.51 684.868 L1837.07 684.868 L1837.63 684.868 L1838.19 684.868 L1838.19 683.216 L1837.63 683.216 L1837.07 683.216 L1836.51 683.216 L1835.95 683.216 L1835.39 683.216 L1834.83 683.216 L1834.27 683.216 L1833.72 683.216 L1833.16 683.216 L1832.6 683.216 L1832.04 683.216 L1831.48 683.216 L1830.92 683.216 L1830.36 683.216 L1829.8 683.216 L1829.24 683.216 L1828.68 683.216 L1828.12 683.216 L1827.56 683.216 L1827 683.216 L1826.45 683.216 L1825.89 683.216 L1825.33 683.216 L1824.77 683.216 L1824.21 683.216 L1823.65 683.216 L1823.09 683.216 L1822.53 683.216 L1821.97 683.216 L1821.41 683.216 L1820.85 683.216 L1820.29 683.216 L1819.73 683.216 L1819.18 683.216 L1818.62 683.216 L1818.06 683.216 L1817.5 683.216 L1816.94 683.216 L1816.38 683.216 L1815.82 683.216 L1815.26 683.216 L1814.7 683.216 L1814.14 683.216 L1813.58 683.216 L1813.02 683.216 L1812.46 683.216 L1811.9 683.216 L1811.35 683.216 L1810.79 683.216 L1810.23 683.216 L1809.67 683.216 L1809.11 683.216 L1808.55 683.216 L1807.99 683.216 L1807.43 683.216 L1806.87 683.216 L1806.31 683.216 L1805.75 683.216 L1805.19 683.216 L1804.63 683.216 L1804.08 683.216 L1803.52 683.216 L1802.96 683.216 L1802.4 683.216 L1801.84 683.216 L1801.28 683.216 L1800.72 683.216 L1800.16 683.216 L1799.6 683.216 L1799.04 683.216 L1798.48 683.216 L1797.92 683.216 L1797.36 683.216 L1796.8 683.216 L1796.25 683.216 L1795.69 683.216 L1795.13 683.216 L1794.57 683.216 L1794.01 683.216 L1793.45 683.216 L1792.89 683.216 L1792.33 683.216 L1791.77 683.216 L1791.21 683.216 L1790.65 683.216 L1790.09 683.216 L1789.53 683.216 L1788.98 683.216 L1788.42 683.216 L1787.86 683.216 L1787.3 683.216 L1786.74 683.216 L1786.18 683.216 L1785.62 683.216 L1785.06 683.216 L1784.5 683.216 L1783.94 683.216 L1783.38 683.216 L1782.82 683.216 L1782.26 683.216 L1781.71 683.216 L1781.15 683.216 L1780.59 683.216 L1780.03 683.216 L1779.47 683.216 L1778.91 683.216 L1778.35 683.216 L1777.79 683.216 L1777.23 683.216 L1776.67 683.216 L1776.11 683.216 L1775.55 683.216 L1774.99 683.216 L1774.43 683.216 L1773.88 683.216 L1773.32 683.216 L1772.76 683.216 L1772.2 683.216 L1771.64 683.216 L1771.08 683.216 L1770.52 683.216 L1769.96 683.216 L1769.4 683.216 L1768.84 683.216 L1768.28 683.216 L1767.72 683.216 L1767.16 683.216 L1766.61 683.216 L1766.05 683.216 L1765.49 683.216 L1764.93 683.216 L1764.37 683.216 L1763.81 683.216 L1763.25 683.216 L1762.69 683.216 L1762.13 683.216 L1761.57 683.216 L1761.01 683.216 L1760.45 683.216 L1759.89 683.216 L1759.34 683.216 L1758.78 683.216 L1758.22 683.216 L1757.66 683.216 L1757.1 683.216 L1756.54 683.216 L1755.98 683.216 L1755.42 683.216 L1754.86 683.216 L1754.3 683.216 L1753.74 683.216 L1753.18 683.216 L1752.62 683.216 L1752.06 683.216 L1751.51 683.216 L1750.95 683.216 L1750.39 683.216 L1749.83 683.216 L1749.27 683.216 L1748.71 683.216 L1748.15 683.216 L1747.59 683.216 L1747.03 683.216 L1746.47 683.216 L1745.91 683.216 L1745.35 683.216 L1744.79 683.216 L1744.24 683.216 L1743.68 683.216 L1743.12 683.216 L1742.56 683.216 L1742 683.216 L1741.44 683.216 L1740.88 683.216 L1740.32 683.216 L1739.76 683.216 L1739.2 683.216 L1738.64 683.216 L1738.08 683.216 L1737.52 683.216 L1736.97 683.216 L1736.41 683.216 L1735.85 683.216 L1735.29 683.216 L1734.73 683.216 L1734.17 683.216 L1733.61 683.216 L1733.05 683.216 L1732.49 683.216 L1731.93 683.216 L1731.37 683.216 L1730.81 683.216 L1730.25 683.216 L1729.69 683.216 L1729.14 683.216 L1728.58 683.216 L1728.02 683.216 L1727.46 683.216 L1726.9 683.216 L1726.34 683.216 L1725.78 683.216 L1725.22 683.216 L1724.66 683.216 L1724.1 683.216 L1723.54 683.216 L1722.98 683.216 L1722.42 683.216 L1721.87 683.216 L1721.31 683.216 L1720.75 683.216 L1720.19 683.216 L1719.63 683.216 L1719.07 683.216 L1718.51 683.216 L1717.95 683.216 L1717.39 683.216 L1716.83 683.216 L1716.27 683.216 L1715.71 683.216 L1715.15 683.216 L1714.6 683.216 L1714.04 683.216 L1713.48 683.216 L1712.92 683.216 L1712.36 683.216 L1711.8 683.216 L1711.24 683.216 L1710.68 683.216 L1710.12 683.216 L1709.56 683.216 L1709 683.216 L1708.44 683.216 L1707.88 683.216 L1707.32 683.216 L1706.77 683.216 L1706.21 683.216 L1705.65 683.216 L1705.09 683.216 L1704.53 683.216 L1703.97 683.216 L1703.41 683.216 L1702.85 683.216 L1702.29 683.216 L1701.73 683.216 L1701.17 683.216 L1700.61 683.216 L1700.05 683.216 L1699.5 683.216 L1698.94 683.216 L1698.38 683.216 L1697.82 683.216 L1697.26 683.216 L1696.7 683.216 L1696.14 683.216 L1695.58 683.216 L1695.02 683.216 L1694.46 683.216 L1693.9 683.216 L1693.34 683.216 L1692.78 683.216 L1692.23 683.216 L1691.67 683.216 L1691.11 683.216 L1690.55 683.216 L1689.99 683.216 L1689.43 683.216 L1688.87 683.216 L1688.31 683.216 L1687.75 683.216 L1687.19 683.216 L1686.63 683.216 L1686.07 683.216 L1685.51 683.216 L1684.95 683.216 L1684.4 683.216 L1683.84 683.216 L1683.28 683.216 L1682.72 683.216 L1682.16 683.216 L1681.6 683.216 L1681.04 683.216 L1680.48 683.216 L1679.92 683.216 L1679.36 683.216 L1678.8 683.216 L1678.24 683.216 L1677.68 683.216 L1677.13 683.216 L1676.57 683.216 L1676.01 683.216 L1675.45 683.216 L1674.89 683.216 L1674.33 683.216 L1673.77 683.216 L1673.21 683.216 L1672.65 683.216 L1672.09 683.216 L1671.53 683.216 L1670.97 683.216 L1670.41 683.216 L1669.85 683.216 L1669.3 683.216 L1668.74 683.216 L1668.18 683.216 L1667.62 683.216 L1667.06 683.216 L1666.5 683.216 L1665.94 683.216 L1665.38 683.216 L1664.82 683.216 L1664.26 683.216 L1663.7 683.216 L1663.14 683.216 L1662.58 683.216 L1662.03 683.216 L1661.47 683.216 L1660.91 683.216 L1660.35 683.216 L1659.79 683.216 L1659.23 683.216 L1658.67 683.216 L1658.11 683.216 L1657.55 683.216 L1656.99 683.216 L1656.43 683.216 L1655.87 683.216 L1655.31 683.216 L1654.76 683.216 L1654.2 683.216 L1653.64 683.216 L1653.08 683.216 L1652.52 683.216 L1651.96 683.216 L1651.4 683.216 L1650.84 683.216 L1650.28 683.216 L1649.72 683.216 L1649.16 683.216 L1648.6 683.216 L1648.04 683.216 L1647.48 683.216 L1646.93 683.216 L1646.37 683.216 L1645.81 683.216 L1645.25 683.216 L1644.69 683.216 L1644.13 683.216 L1643.57 683.216 L1643.01 683.216 L1642.45 683.216 L1641.89 683.216 L1641.33 683.216 L1640.77 683.216 L1640.21 683.216 L1639.66 683.216 L1639.1 683.216 L1638.54 683.216 L1637.98 683.216 L1637.42 683.216 L1636.86 683.216 L1636.3 683.216 L1635.74 683.216 L1635.18 683.216 L1634.62 683.216 L1634.06 683.216 L1633.5 683.216 L1632.94 683.216 L1632.39 683.216 L1631.83 683.216 L1631.27 683.216 L1630.71 683.216 L1630.15 683.216 L1629.59 683.216 L1629.03 683.216 L1628.47 683.216 L1627.91 683.216 L1627.35 683.216 L1626.79 683.216 L1626.23 683.216 L1625.67 683.216 L1625.11 683.216 L1624.56 683.216 L1624 683.216 L1623.44 683.216 L1622.88 683.216 L1622.32 683.216 L1621.76 683.216 L1621.2 683.216 L1620.64 683.216 L1620.08 683.216 L1619.52 683.216 L1618.96 683.216 L1618.4 683.216 L1617.84 683.216 L1617.29 683.216 L1616.73 683.216 L1616.17 683.216 L1615.61 683.216 L1615.05 683.216 L1614.49 683.216 L1613.93 683.216 L1613.37 683.216 L1612.81 683.216 L1612.25 683.216 L1611.69 683.216 L1611.13 683.216 L1610.57 683.216 L1610.02 683.216 L1609.46 683.216 L1608.9 683.216 L1608.34 683.216 L1607.78 683.216 L1607.22 683.216 L1606.66 683.216 L1606.1 683.216 L1605.54 683.216 L1604.98 683.216 L1604.42 683.216 L1603.86 683.216 L1603.3 683.216 L1602.74 683.216 L1602.19 683.216 L1601.63 683.216 L1601.07 683.216 L1600.51 683.216 L1599.95 683.216 L1599.39 683.216 L1598.83 683.216 L1598.27 683.216 L1597.71 683.216 L1597.15 683.216 L1596.59 683.216 L1596.03 683.216 L1595.47 683.216 L1594.92 683.216 L1594.36 683.216 L1593.8 683.216 L1593.24 683.216 L1592.68 683.216 L1592.12 683.216 L1591.56 683.216 L1591 683.216 L1590.44 683.216 L1589.88 683.216 L1589.32 683.216 L1588.76 683.216 L1588.2 683.216 L1587.65 683.216 L1587.09 683.216 L1586.53 683.216 L1585.97 683.216 L1585.41 683.216 L1584.85 683.216 L1584.29 683.216 L1583.73 683.216 L1583.17 683.216 L1582.61 683.216 L1582.05 683.216 L1581.49 683.216 L1580.93 683.216 L1580.37 683.216 L1579.82 683.216 L1579.26 683.216 L1578.7 683.216 L1578.14 683.216 L1577.58 683.216 L1577.02 683.216 L1576.46 683.216 L1575.9 683.216 L1575.34 683.216 L1574.78 683.216 L1574.22 683.216 L1573.66 683.216 L1573.1 683.216 L1572.55 683.216 L1571.99 683.216 L1571.43 683.216 L1570.87 683.216 L1570.31 683.216 L1569.75 683.216 L1569.19 683.216 L1568.63 683.216 L1568.07 683.216 L1567.51 683.216 L1566.95 683.216 L1566.39 683.216 L1565.83 683.216 L1565.28 683.216 L1564.72 683.216 L1564.16 683.216 L1563.6 683.216 L1563.04 683.216 L1562.48 683.216 L1561.92 683.216 L1561.36 683.216 L1560.8 683.216 L1560.24 683.216 L1559.68 683.216 L1559.12 683.216 L1558.56 683.216 L1558 683.216 L1557.45 683.216 L1556.89 683.216 L1556.33 683.216 L1555.77 683.216 L1555.21 683.216 L1554.65 683.216 L1554.09 683.216 L1553.53 683.216 L1552.97 683.216 L1552.41 683.216 L1551.85 683.216 L1551.29 683.216 L1550.73 683.216 L1550.18 683.216 L1549.62 683.216 L1549.06 683.216 L1548.5 683.216 L1547.94 683.216 L1547.38 683.216 L1546.82 683.216 L1546.26 683.216 L1545.7 683.216 L1545.14 683.216 L1544.58 683.216 L1544.02 683.216 L1543.46 683.216 L1542.9 683.216 L1542.35 683.216 L1541.79 683.216 L1541.23 683.216 L1540.67 683.216 L1540.11 683.216 L1539.55 683.216 L1538.99 683.216 L1538.43 683.216 L1537.87 683.216 L1537.31 683.216 L1536.75 683.216 L1536.19 683.216 L1535.63 683.216 L1535.08 683.216 L1534.52 683.216 L1533.96 683.216 L1533.4 683.216 L1532.84 683.216 L1532.28 683.216 L1531.72 683.216 L1531.16 683.216 L1530.6 683.216 L1530.04 683.216 L1529.48 683.216 L1528.92 683.216 L1528.36 683.216 L1527.81 683.216 L1527.25 683.216 L1526.69 683.216 L1526.13 683.216 L1525.57 683.216 L1525.01 683.216 L1524.45 683.216 L1523.89 683.216 L1523.33 683.216 L1522.77 683.216 L1522.21 683.216 L1521.65 683.216 L1521.09 683.216 L1520.53 683.216 L1519.98 683.216 L1519.42 683.216 L1518.86 683.216 L1518.3 683.216 L1517.74 683.216 L1517.18 683.216 L1516.62 683.216 L1516.06 683.216 L1515.5 683.216 L1514.94 683.216 L1514.38 683.216 L1513.82 683.216 L1513.26 683.216 L1512.71 683.216 L1512.15 683.216 L1511.59 683.216 L1511.03 683.216 L1510.47 683.216 L1509.91 683.216 L1509.35 683.216 L1508.79 683.216 L1508.23 683.216 L1507.67 683.216 L1507.11 683.216 L1506.55 683.216 L1505.99 683.216 L1505.44 683.216 L1504.88 683.216 L1504.32 683.216 L1503.76 683.216 L1503.2 683.216 L1502.64 683.216 L1502.08 683.216 L1501.52 683.216 L1500.96 683.216 L1500.4 683.216 L1499.84 683.216 L1499.28 683.216 L1498.72 683.216 L1498.16 683.216 L1497.61 683.216 L1497.05 683.216 L1496.49 683.216 L1495.93 683.216 L1495.37 683.216 L1494.81 683.216 L1494.25 683.216 L1493.69 683.216 L1493.13 683.216 L1492.57 683.216 L1492.01 683.216 L1491.45 683.216 L1490.89 683.216 L1490.34 683.216 L1489.78 683.216 L1489.22 683.216 L1488.66 683.216 L1488.1 683.216 L1487.54 683.216 L1486.98 683.216 L1486.42 683.216 L1485.86 683.216 L1485.3 683.216 L1484.74 683.216 L1484.18 683.216 L1483.62 683.216 L1483.07 683.216 L1482.51 683.216 L1481.95 683.216 L1481.39 683.216 L1480.83 683.216 L1480.27 683.216 L1479.71 683.216 L1479.15 683.216 L1478.59 683.216 L1478.03 683.216 L1477.47 683.216 L1476.91 683.216 L1476.35 683.216 L1475.79 683.216 L1475.24 683.216 L1474.68 683.216 L1474.12 683.216 L1473.56 683.216 L1473 683.216 L1472.44 683.216 L1471.88 683.216 L1471.32 683.216 L1470.76 683.216 L1470.2 683.216 L1469.64 683.216 L1469.08 683.216 L1468.52 683.216 L1467.97 683.216 L1467.41 683.216 L1466.85 683.216 L1466.29 683.216 L1465.73 683.216 L1465.17 683.216 L1464.61 683.216 L1464.05 683.216 L1463.49 683.216 L1462.93 683.216 L1462.37 683.216 L1461.81 683.216 L1461.25 683.216 L1460.7 683.216 L1460.14 683.216 L1459.58 683.216 L1459.02 683.216 L1458.46 683.216 L1457.9 683.216 L1457.34 683.216 L1456.78 683.216 L1456.22 683.216 L1455.66 683.216 L1455.1 683.216 L1454.54 683.216 L1453.98 683.216 L1453.42 683.216 L1452.87 683.216 L1452.31 683.216 L1451.75 683.216 L1451.19 683.216 L1450.63 683.216 L1450.07 683.216 L1449.51 683.216 L1448.95 683.216 L1448.39 683.216 L1447.83 683.216 L1447.27 683.216 L1446.71 683.216 L1446.15 683.216 L1445.6 683.216 L1445.04 683.216 L1444.48 683.216 L1443.92 683.216 L1443.36 683.216 L1442.8 683.216 L1442.24 683.216 L1441.68 683.216 L1441.12 683.216 L1440.56 683.216 L1440 683.216 L1439.44 683.216 L1438.88 683.216 L1438.33 683.216 L1437.77 683.216 L1437.21 683.216 L1436.65 683.216 L1436.09 683.216 L1435.53 683.216 L1434.97 683.216 L1434.41 683.216 L1433.85 683.216 L1433.29 683.216 L1432.73 683.216 L1432.17 683.216 L1431.61 683.216 L1431.05 683.216 L1430.5 683.216 L1429.94 683.216 L1429.38 683.216 L1428.82 683.216 L1428.26 683.216 L1427.7 683.216 L1427.14 683.216 L1426.58 683.216 L1426.02 683.216 L1425.46 683.216 L1424.9 683.216 L1424.34 683.216 L1423.78 683.216 L1423.23 683.216 L1422.67 683.216 L1422.11 683.216 L1421.55 683.216 L1420.99 683.216 L1420.43 683.216 L1419.87 683.216 L1419.31 683.216 L1418.75 683.216 L1418.19 683.216 L1417.63 683.216 L1417.07 683.216 L1416.51 683.216 L1415.95 683.216 L1415.4 683.216 L1414.84 683.216 L1414.28 683.216 L1413.72 683.216 L1413.16 683.216 L1412.6 683.216 L1412.04 683.216 L1411.48 683.216 L1410.92 683.216 L1410.36 683.216 L1409.8 683.216 L1409.24 683.216 L1408.68 683.216 L1408.13 683.216 L1407.57 683.216 L1407.01 683.216 L1406.45 683.216 L1405.89 683.216 L1405.33 683.216 L1404.77 683.216 L1404.21 683.216 L1403.65 683.216 L1403.09 683.216 L1402.53 683.216 L1401.97 683.216 L1401.41 683.216 L1400.86 683.216 L1400.3 683.216 L1399.74 683.216 L1399.18 683.216 L1398.62 683.216 L1398.06 683.216 L1397.5 683.216 L1396.94 683.216 L1396.38 683.216 L1395.82 683.216 L1395.26 683.216 L1394.7 683.216 L1394.14 683.216 L1393.58 683.216 L1393.03 683.216 L1392.47 683.216 L1391.91 683.216 L1391.35 683.216 L1390.79 683.216 L1390.23 683.216 L1389.67 683.216 L1389.11 683.216 L1388.55 683.216 L1387.99 683.216 L1387.43 683.216 L1386.87 683.216 L1386.31 683.216 L1385.76 683.216 L1385.2 683.216 L1384.64 683.216 L1384.08 683.216 L1383.52 683.216 L1382.96 683.216 L1382.4 683.216 L1381.84 683.216 L1381.28 683.216 L1380.72 683.216 L1380.16 683.216 L1379.6 683.216 L1379.04 683.216 L1378.49 683.216 L1377.93 683.216 L1377.37 683.216 L1376.81 683.216 L1376.25 683.216 L1375.69 683.216 L1375.13 683.216 L1374.57 683.216 L1374.01 683.216 L1373.45 683.216 L1372.89 683.216 L1372.33 683.216 L1371.77 683.216 L1371.21 683.216 L1370.66 683.216 L1370.1 683.216 L1369.54 683.216 L1368.98 683.216 L1368.42 683.216 L1367.86 683.216 L1367.3 683.216 L1366.74 683.216 L1366.18 683.216 L1365.62 683.216 L1365.06 683.216 L1364.5 683.216 L1363.94 683.216 L1363.39 683.216 L1362.83 683.216 L1362.27 683.216 L1361.71 683.216 L1361.15 683.216 L1360.59 683.216 L1360.03 683.216 L1359.47 683.216 L1358.91 683.216 L1358.35 683.216 L1357.79 683.216 L1357.23 683.216 L1356.67 683.216 L1356.12 683.216 L1355.56 683.216 L1355 683.216 L1354.44 683.216 L1353.88 683.216 L1353.32 683.216 L1352.76 683.216 L1352.2 683.216 L1351.64 683.216 L1351.08 683.216 L1350.52 683.216 L1349.96 683.216 L1349.4 683.216 L1348.84 683.216 L1348.29 683.216 L1347.73 683.216 L1347.17 683.216 L1346.61 683.216 L1346.05 683.216 L1345.49 683.216 L1344.93 683.216 L1344.37 683.216 L1343.81 683.216 L1343.25 683.216 L1342.69 683.216 L1342.13 683.216 L1341.57 683.216 L1341.02 683.216 L1340.46 683.216 L1339.9 683.216 L1339.34 683.216 L1338.78 683.216 L1338.22 683.216 L1337.66 683.216 L1337.1 683.216 L1336.54 683.216 L1335.98 683.216 L1335.42 683.216 L1334.86 683.216 L1334.3 683.216 L1333.75 683.216 L1333.19 683.216 L1332.63 683.216 L1332.07 683.216 L1331.51 683.216 L1330.95 683.216 L1330.39 683.216 L1329.83 683.216 L1329.27 683.216 L1328.71 683.216 L1328.15 683.216 L1327.59 683.216 L1327.03 683.216 L1326.47 683.216 L1325.92 683.216 L1325.36 683.216 L1324.8 683.216 L1324.24 683.216 L1323.68 683.216 L1323.12 683.216 L1322.56 683.216 L1322 683.216 L1321.44 683.216 L1320.88 683.216 L1320.32 683.216 L1319.76 683.216 L1319.2 683.216 L1318.65 683.216 L1318.09 683.216 L1317.53 683.216 L1316.97 683.216 L1316.41 683.216 L1315.85 683.216 L1315.29 683.216 L1314.73 683.216 L1314.17 683.216 L1313.61 683.216 L1313.05 683.216 L1312.49 683.216 L1311.93 683.216 L1311.38 683.216 L1310.82 683.216 L1310.26 683.216 L1309.7 683.216 L1309.14 683.216 L1308.58 683.216 L1308.02 683.216 L1307.46 683.216 L1306.9 683.216 L1306.34 683.216 L1305.78 683.216 L1305.22 683.216 L1304.66 683.216 L1304.1 683.216 L1303.55 683.216 L1302.99 683.216 L1302.43 683.216 L1301.87 683.216 L1301.31 683.216 L1300.75 683.216 L1300.19 683.216 L1299.63 683.216 L1299.07 683.216 L1298.51 683.216 L1297.95 683.216 L1297.39 683.216 L1296.83 683.216 L1296.28 683.216 L1295.72 683.216 L1295.16 683.216 L1294.6 683.216 L1294.04 683.216 L1293.48 683.216 L1292.92 683.216 L1292.36 683.216 L1291.8 683.216 L1291.24 683.216 L1290.68 683.216 L1290.12 683.216 L1289.56 683.216 L1289 683.216 L1288.45 683.216 L1287.89 683.216 L1287.33 683.216 L1286.77 683.216 L1286.21 683.216 L1285.65 683.216 L1285.09 683.216 L1284.53 683.216 L1283.97 683.216 L1283.41 683.216 L1282.85 683.216 L1282.29 683.216 L1281.73 683.216 L1281.18 683.216 L1280.62 683.216 L1280.06 683.216 L1279.5 683.216 L1278.94 683.216 L1278.38 683.216 L1277.82 683.216 L1277.26 683.216 L1276.7 683.216 L1276.14 683.216 L1275.58 683.216 L1275.02 683.216 L1274.46 683.216 L1273.91 683.216 L1273.35 683.216 L1272.79 683.216 L1272.23 683.216 L1271.67 683.216 L1271.11 683.216 L1270.55 683.216 L1269.99 683.216 L1269.43 683.216 L1268.87 683.216 L1268.31 683.216 L1267.75 683.216 L1267.19 683.216 L1266.63 683.216 L1266.08 683.216 L1265.52 683.216 L1264.96 683.216 L1264.4 683.216 L1263.84 683.216 L1263.28 683.216 L1262.72 683.216 L1262.16 683.216 L1261.6 683.216 L1261.04 683.216 L1260.48 683.216 L1259.92 683.216 L1259.36 683.216 L1258.81 683.216 L1258.25 683.216 L1257.69 683.216 L1257.13 683.216 L1256.57 683.216 L1256.01 683.216 L1255.45 683.216 L1254.89 683.216 L1254.33 683.216 L1253.77 683.216 L1253.21 683.216 L1252.65 683.216 L1252.09 683.216 L1251.54 683.216 L1250.98 683.216 L1250.42 683.216 L1249.86 683.216 L1249.3 683.216 L1248.74 683.216 L1248.18 683.216 L1247.62 683.216 L1247.06 683.216 L1246.5 683.216 L1245.94 683.216 L1245.38 683.216 L1244.82 683.216 L1244.26 683.216 L1243.71 683.216 L1243.15 683.216 L1242.59 683.216 L1242.03 683.216 L1241.47 683.216 L1240.91 683.216 L1240.35 683.216 L1239.79 683.216 L1239.23 683.216 L1238.67 683.216 L1238.11 683.216 L1237.55 683.216 L1236.99 683.216 L1236.44 683.216 L1235.88 683.216 L1235.32 683.216 L1234.76 683.216 L1234.2 683.216 L1233.64 683.216 L1233.08 683.216 L1232.52 683.216 L1231.96 683.216 L1231.4 683.216 L1230.84 683.216 L1230.28 683.216 L1229.72 683.216 L1229.17 683.216 L1228.61 683.216 L1228.05 683.216 L1227.49 683.216 L1226.93 683.216 L1226.37 683.216 L1225.81 683.216 L1225.25 683.216 L1224.69 683.216 L1224.13 683.216 L1223.57 683.216 L1223.01 683.216 L1222.45 683.216 L1221.89 683.216 L1221.34 683.216 L1220.78 683.216 L1220.22 683.216 L1219.66 683.216 L1219.1 683.216 L1218.54 683.216 L1217.98 683.216 L1217.42 683.216 L1216.86 683.216 L1216.3 683.216 L1215.74 683.216 L1215.18 683.216 L1214.62 683.216 L1214.07 683.216 L1213.51 683.216 L1212.95 683.216 L1212.39 683.216 L1211.83 683.216 L1211.27 683.216 L1210.71 683.216 L1210.15 683.216 L1209.59 683.216 L1209.03 683.216 L1208.47 683.216 L1207.91 683.216 L1207.35 683.216 L1206.8 683.216 L1206.24 683.216 L1205.68 683.216 L1205.12 683.216 L1204.56 683.216 L1204 683.216 L1203.44 683.216 L1202.88 683.216 L1202.32 683.216 L1201.76 683.216 L1201.2 683.216 L1200.64 683.216 L1200.08 683.216 L1199.52 683.216 L1198.97 683.216 L1198.41 683.216 L1197.85 683.216 L1197.29 683.216 L1196.73 683.216 L1196.17 683.216 L1195.61 683.216 L1195.05 683.216 L1194.49 683.216 L1193.93 683.216 L1193.37 683.216 L1192.81 683.216 L1192.25 683.216 L1191.7 683.216 L1191.14 683.216 L1190.58 683.216 L1190.02 683.216 L1189.46 683.216 L1188.9 683.216 L1188.34 683.216 L1187.78 683.216 L1187.22 683.216 L1186.66 683.216 L1186.1 683.216 L1185.54 683.216 L1184.98 683.216 L1184.43 683.216 L1183.87 683.216 L1183.31 683.216 L1182.75 683.216 L1182.19 683.216 L1181.63 683.216 L1181.07 683.216 L1180.51 683.216 L1179.95 683.216 L1179.39 683.216 L1178.83 683.216 L1178.27 683.216 L1177.71 683.216 L1177.15 683.216 L1176.6 683.216 L1176.04 683.216 L1175.48 683.216 L1174.92 683.216 L1174.36 683.216 L1173.8 683.216 L1173.24 683.216 L1172.68 683.216 L1172.12 683.216 L1171.56 683.216 L1171 683.216 L1170.44 683.216 L1169.88 683.216 L1169.33 683.216 L1168.77 683.216 L1168.21 683.216 L1167.65 683.216 L1167.09 683.216 L1166.53 683.216 L1165.97 683.216 L1165.41 683.216 L1164.85 683.216 L1164.29 683.216 L1163.73 683.216 L1163.17 683.216 L1162.61 683.216 L1162.05 683.216 L1161.5 683.216 L1160.94 683.216 L1160.38 683.216 L1159.82 683.216 L1159.26 683.216 L1158.7 683.216 L1158.14 683.216 L1157.58 683.216 L1157.02 683.216 L1156.46 683.216 L1155.9 683.216 L1155.34 683.216 L1154.78 683.216 L1154.23 683.216 L1153.67 683.216 L1153.11 683.216 L1152.55 683.216 L1151.99 683.216 L1151.43 683.216 L1150.87 683.216 L1150.31 683.216 L1149.75 683.216 L1149.19 683.216 L1148.63 683.216 L1148.07 683.216 L1147.51 683.216 L1146.96 683.216 L1146.4 683.216 L1145.84 683.216 L1145.28 683.216 L1144.72 683.216 L1144.16 683.216 L1143.6 683.216 L1143.04 683.216 L1142.48 683.216 L1141.92 683.216 L1141.36 683.216 L1140.8 683.216 L1140.24 683.216 L1139.68 683.216 L1139.13 683.216 L1138.57 683.216 L1138.01 683.216 L1137.45 683.216 L1136.89 683.216 L1136.33 683.216 L1135.77 683.216 L1135.21 683.216 L1134.65 683.216 L1134.09 683.216 L1133.53 683.216 L1132.97 683.216 L1132.41 683.216 L1131.86 683.216 L1131.3 683.216 L1130.74 683.216 L1130.18 683.216 L1129.62 683.216 L1129.06 683.216 L1128.5 683.216 L1127.94 683.216 L1127.38 683.216 L1126.82 683.216 L1126.26 683.216 L1125.7 683.216 L1125.14 683.216 L1124.59 683.216 L1124.03 683.216 L1123.47 683.216 L1122.91 683.216 L1122.35 683.216 L1121.79 683.216 L1121.23 683.216 L1120.67 683.216 L1120.11 683.216 L1119.55 683.216 L1118.99 683.216 L1118.43 683.216 L1117.87 683.216 L1117.31 683.216 L1116.76 683.216 L1116.2 683.216 L1115.64 683.216 L1115.08 683.216 L1114.52 683.216 L1113.96 683.216 L1113.4 683.216 L1112.84 683.216 L1112.28 683.216 L1111.72 683.216 L1111.16 683.216 L1110.6 683.216 L1110.04 683.216 L1109.49 683.216 L1108.93 683.216 L1108.37 683.216 L1107.81 683.216 L1107.25 683.216 L1106.69 683.216 L1106.13 683.216 L1105.57 683.216 L1105.01 683.216 L1104.45 683.216 L1103.89 683.216 L1103.33 683.216 L1102.77 683.216 L1102.22 683.216 L1101.66 683.216 L1101.1 683.216 L1100.54 683.216 L1099.98 683.216 L1099.42 683.216 L1098.86 683.216 L1098.3 683.216 L1097.74 683.216 L1097.18 683.216 L1096.62 683.216 L1096.06 683.216 L1095.5 683.216 L1094.94 683.216 L1094.39 683.216 L1093.83 683.216 L1093.27 683.216 L1092.71 683.216 L1092.15 683.216 L1091.59 683.216 L1091.03 683.216 L1090.47 683.216 L1089.91 683.216 L1089.35 683.216 L1088.79 683.216 L1088.23 683.216 L1087.67 683.216 L1087.12 683.216 L1086.56 683.216 L1086 683.216 L1085.44 683.216 L1084.88 683.216 L1084.32 683.216 L1083.76 683.216 L1083.2 683.216 L1082.64 683.216 L1082.08 683.216 L1081.52 683.216 L1080.96 683.216 L1080.4 683.216 L1079.85 683.216 L1079.29 683.216 L1078.73 683.216 L1078.17 683.216 L1077.61 683.216 L1077.05 683.216 L1076.49 683.216 L1075.93 683.216 L1075.37 683.216 L1074.81 683.216 L1074.25 683.216 L1073.69 683.216 L1073.13 683.216 L1072.57 683.216 L1072.02 683.216 L1071.46 683.216 L1070.9 683.216 L1070.34 683.216 L1069.78 683.216 L1069.22 683.216 L1068.66 683.216 L1068.1 683.216 L1067.54 683.216 L1066.98 683.216 L1066.42 683.216 L1065.86 683.216 L1065.3 683.216 L1064.75 683.216 L1064.19 683.216 L1063.63 683.216 L1063.07 683.216 L1062.51 683.216 L1061.95 683.216 L1061.39 683.216 L1060.83 683.216 L1060.27 683.216 L1059.71 683.216 L1059.15 683.216 L1058.59 683.216 L1058.03 683.216 L1057.48 683.216 L1056.92 683.216 L1056.36 683.216 L1055.8 683.216 L1055.24 683.216 L1054.68 683.216 L1054.12 683.216 L1053.56 683.216 L1053 683.216 L1052.44 683.216 L1051.88 683.216 L1051.32 683.216 L1050.76 683.216 L1050.2 683.216 L1049.65 683.216 L1049.09 683.216 L1048.53 683.216 L1047.97 683.216 L1047.41 683.216 L1046.85 683.216 L1046.29 683.216 L1045.73 683.216 L1045.17 683.216 L1044.61 683.216 L1044.05 683.216 L1043.49 683.216 L1042.93 683.216 L1042.38 683.216 L1041.82 683.216 L1041.26 683.216 L1040.7 683.216 L1040.14 683.216 L1039.58 683.216 L1039.02 683.216 L1038.46 683.216 L1037.9 683.216 L1037.34 683.216 L1036.78 683.216 L1036.22 683.216 L1035.66 683.216 L1035.1 683.216 L1034.55 683.216 L1033.99 683.216 L1033.43 683.216 L1032.87 683.216 L1032.31 683.216 L1031.75 683.216 L1031.19 683.216 L1030.63 683.216 L1030.07 683.216 L1029.51 683.216 L1028.95 683.216 L1028.39 683.216 L1027.83 683.216 L1027.28 683.216 L1026.72 683.216 L1026.16 683.216 L1025.6 683.216 L1025.04 683.216 L1024.48 683.216 L1023.92 683.216 L1023.36 683.216 L1022.8 683.216 L1022.24 683.216 L1021.68 683.216 L1021.12 683.216 L1020.56 683.216 L1020.01 683.216 L1019.45 683.216 L1018.89 683.216 L1018.33 683.216 L1017.77 683.216 L1017.21 683.216 L1016.65 683.216 L1016.09 683.216 L1015.53 683.216 L1014.97 683.216 L1014.41 683.216 L1013.85 683.216 L1013.29 683.216 L1012.73 683.216 L1012.18 683.216 L1011.62 683.216 L1011.06 683.216 L1010.5 683.216 L1009.94 683.216 L1009.38 683.216 L1008.82 683.216 L1008.26 683.216 L1007.7 683.216 L1007.14 683.216 L1006.58 683.216 L1006.02 683.216 L1005.46 683.216 L1004.91 683.216 L1004.35 683.216 L1003.79 683.216 L1003.23 683.216 L1002.67 683.216 L1002.11 683.216 L1001.55 683.216 L1000.99 683.216 L1000.43 683.216 L999.872 683.216 L999.313 683.216 L998.754 683.216 L998.194 683.216 L997.635 683.216 L997.076 683.216 L996.517 683.216 L995.957 683.216 L995.398 683.216 L994.839 683.216 L994.28 683.216 L993.72 683.216 L993.161 683.216 L992.602 683.216 L992.043 683.216 L991.483 683.216 L990.924 683.216 L990.365 683.216 L989.806 683.216 L989.246 683.216 L988.687 683.216 L988.128 683.216 L987.569 683.216 L987.009 683.216 L986.45 683.216 L985.891 683.216 L985.332 683.216 L984.772 683.216 L984.213 683.216 L983.654 683.216 L983.095 683.216 L982.535 683.216 L981.976 683.216 L981.417 683.216 L980.858 683.216 L980.298 683.216 L979.739 683.216 L979.18 683.216 L978.621 683.216 L978.061 683.216 L977.502 683.216 L976.943 683.216 L976.384 683.216 L975.824 683.216 L975.265 683.216 L974.706 683.216 L974.147 683.216 L973.587 683.216 L973.028 683.216 L972.469 683.216 L971.91 683.216 L971.35 683.216 L970.791 683.216 L970.232 683.216 L969.673 683.216 L969.113 683.216 L968.554 683.216 L967.995 683.216 L967.436 683.216 L966.876 683.216 L966.317 683.216 L965.758 683.216 L965.199 683.216 L964.639 683.216 L964.08 683.216 L963.521 683.216 L962.962 683.216 L962.402 683.216 L961.843 683.216 L961.284 683.216 L960.725 683.216 L960.165 683.216 L959.606 683.216 L959.047 683.216 L958.488 683.216 L957.928 683.216 L957.369 683.216 L956.81 683.216 L956.251 683.216 L955.691 683.216 L955.132 683.216 L954.573 683.216 L954.014 683.216 L953.454 683.216 L952.895 683.216 L952.336 683.216 L951.777 683.216 L951.217 683.216 L950.658 683.216 L950.099 683.216 L949.54 683.216 L948.98 683.216 L948.421 683.216 L947.862 683.216 L947.303 683.216 L946.743 683.216 L946.184 683.216 L945.625 683.216 L945.066 683.216 L944.506 683.216 L943.947 683.216 L943.388 683.216 L942.829 683.216 L942.269 683.216 L941.71 683.216 L941.151 683.216 L940.592 683.216 L940.032 683.216 L939.473 683.216 L938.914 683.216 L938.355 683.216 L937.795 683.216 L937.236 683.216 L936.677 683.216 L936.118 683.216 L935.558 683.216 L934.999 683.216 L934.44 683.216 L933.881 683.216 L933.321 683.216 L932.762 683.216 L932.203 683.216 L931.644 683.216 L931.084 683.216 L930.525 683.216 L929.966 683.216 L929.406 683.216 L928.847 683.216 L928.288 683.216 L927.729 683.216 L927.169 683.216 L926.61 683.216 L926.051 683.216 L925.492 683.216 L924.932 683.216 L924.373 683.216 L923.814 683.216 L923.255 683.216 L922.695 683.216 L922.136 683.216 L921.577 683.216 L921.018 683.216 L920.458 683.216 L919.899 683.216 L919.34 683.216 L918.781 683.216 L918.221 683.216 L917.662 683.216 L917.103 683.216 L916.544 683.216 L915.984 683.216 L915.425 683.216 L914.866 683.216 L914.307 683.216 L913.747 683.216 L913.188 683.216 L912.629 683.216 L912.07 683.216 L911.51 683.216 L910.951 683.216 L910.392 683.216 L909.833 683.216 L909.273 683.216 L908.714 683.216 L908.155 683.216 L907.596 683.216 L907.036 683.216 L906.477 683.216 L905.918 683.216 L905.359 683.216 L904.799 683.216 L904.24 683.216 L903.681 683.216 L903.122 683.216 L902.562 683.216 L902.003 683.216 L901.444 683.216 L900.885 683.216 L900.325 683.216 L899.766 683.216 L899.207 683.216 L898.648 683.216 L898.088 683.216 L897.529 683.216 L896.97 683.216 L896.411 683.216 L895.851 683.216 L895.292 683.216 L894.733 683.216 L894.174 683.216 L893.614 683.216 L893.055 683.216 L892.496 683.216 L891.937 683.216 L891.377 683.216 L890.818 683.216 L890.259 683.216 L889.7 683.216 L889.14 683.216 L888.581 683.216 L888.022 683.216 L887.463 683.216 L886.903 683.216 L886.344 683.216 L885.785 683.216 L885.226 683.216 L884.666 683.216 L884.107 683.216 L883.548 683.216 L882.989 683.216 L882.429 683.216 L881.87 683.216 L881.311 683.216 L880.752 683.216 L880.192 683.216 L879.633 683.216 L879.074 683.216 L878.515 683.216 L877.955 683.216 L877.396 683.216 L876.837 683.216 L876.278 683.216 L875.718 683.216 L875.159 683.216 L874.6 683.216 L874.041 683.216 L873.481 683.216 L872.922 683.216 L872.363 683.216 L871.804 683.216 L871.244 683.216 L870.685 683.216 L870.126 683.216 L869.567 683.216 L869.007 683.216 L868.448 683.216 L867.889 683.216 L867.33 683.216 L866.77 683.216 L866.211 683.216 L865.652 683.216 L865.093 683.216 L864.533 683.216 L863.974 683.216 L863.415 683.216 L862.856 683.216 L862.296 683.216 L861.737 683.216 L861.178 683.216 L860.619 683.216 L860.059 683.216 L859.5 683.216 L858.941 683.216 L858.382 683.216 L857.822 683.216 L857.263 683.216 L856.704 683.216 L856.145 683.216 L855.585 683.216 L855.026 683.216 L854.467 683.216 L853.908 683.216 L853.348 683.216 L852.789 683.216 L852.23 683.216 L851.671 683.216 L851.111 683.216 L850.552 683.216 L849.993 683.216 L849.434 683.216 L848.874 683.216 L848.315 683.216 L847.756 683.216 L847.197 683.216 L846.637 683.216 L846.078 683.216 L845.519 683.216 L844.96 683.216 L844.4 683.216 L843.841 683.216 L843.282 683.216 L842.723 683.216 L842.163 683.216 L841.604 683.216 L841.045 683.216 L840.486 683.216 L839.926 683.216 L839.367 683.216 L838.808 683.216 L838.249 683.216 L837.689 683.216 L837.13 683.216 L836.571 683.216 L836.012 683.216 L835.452 683.216 L834.893 683.216 L834.334 683.216 L833.775 683.216 L833.215 683.216 L832.656 683.216 L832.097 683.216 L831.538 683.216 L830.978 683.216 L830.419 683.216 L829.86 683.216 L829.301 683.216 L828.741 683.216 L828.182 683.216 L827.623 683.216 L827.064 683.216 L826.504 683.216 L825.945 683.216 L825.386 683.216 L824.827 683.216 L824.267 683.216 L823.708 683.216 L823.149 683.216 L822.59 683.216 L822.03 683.216 L821.471 683.216 L820.912 683.216 L820.353 683.216 L819.793 683.216 L819.234 683.216 L818.675 683.216 L818.116 683.216 L817.556 683.216 L816.997 683.216 L816.438 683.216 L815.879 683.216 L815.319 683.216 L814.76 683.216 L814.201 683.216 L813.642 683.216 L813.082 683.216 L812.523 683.216 L811.964 683.216 L811.405 683.216 L810.845 683.216 L810.286 683.216 L809.727 683.216 L809.168 683.216 L808.608 683.216 L808.049 683.216 L807.49 683.216 L806.931 683.216 L806.371 683.216 L805.812 683.216 L805.253 683.216 L804.693 683.216 L804.134 683.216 L803.575 683.216 L803.016 683.216 L802.456 683.216 L801.897 683.216 L801.338 683.216 L800.779 683.216 L800.219 683.216 L799.66 683.216 L799.101 683.216 L798.542 683.216 L797.982 683.216 L797.423 683.216 L796.864 683.216 L796.305 683.216 L795.745 683.216 L795.186 683.216 L794.627 683.216 L794.068 683.216 L793.508 683.216 L792.949 683.216 L792.39 683.216 L791.831 683.216 L791.271 683.216 L790.712 683.216 L790.153 683.216 L789.594 683.216 L789.034 683.216 L788.475 683.216 L787.916 683.216 L787.357 683.216 L786.797 683.216 L786.238 683.216 L785.679 683.216 L785.12 683.216 L784.56 683.216 L784.001 683.216 L783.442 683.216 L782.883 683.216 L782.323 683.216 L781.764 683.216 L781.205 683.216 L780.646 683.216 L780.086 683.216 L779.527 683.216 L778.968 683.216 L778.409 683.216 L777.849 683.216 L777.29 683.216 L776.731 683.216 L776.172 683.216 L775.612 683.216 L775.053 683.216 L774.494 683.216 L773.935 683.216 L773.375 683.216 L772.816 683.216 L772.257 683.216 L771.698 683.216 L771.138 683.216 L770.579 683.216 L770.02 683.216 L769.461 683.216 L768.901 683.216 L768.342 683.216 L767.783 683.216 L767.224 683.216 L766.664 683.216 L766.105 683.216 L765.546 683.216 L764.987 683.216 L764.427 683.216 L763.868 683.216 L763.309 683.216 L762.75 683.216 L762.19 683.216 L761.631 683.216 L761.072 683.216 L760.513 683.216 L759.953 683.216 L759.394 683.216 L758.835 683.216 L758.276 683.216 L757.716 683.216 L757.157 683.216 L756.598 683.216 L756.039 683.216 L755.479 683.216 L754.92 683.216 L754.361 683.216 L753.802 683.216 L753.242 683.216 L752.683 683.216 L752.124 683.216 L751.565 683.216 L751.005 683.216 L750.446 683.216 L749.887 683.216 L749.328 683.216 L748.768 683.216 L748.209 683.216 L747.65 683.216 L747.091 683.216 L746.531 683.216 L745.972 683.216 L745.413 683.216 L744.854 683.216 L744.294 683.216 L743.735 683.216 L743.176 683.216 L742.617 683.216 L742.057 683.216 L741.498 683.216 L740.939 683.216 L740.38 683.216 L739.82 683.216 L739.261 683.216 L738.702 683.216 L738.143 683.216 L737.583 683.216 L737.024 683.216 L736.465 683.216 L735.906 683.216 L735.346 683.216 L734.787 683.216 L734.228 683.216 L733.669 683.216 L733.109 683.216 L732.55 683.216 L731.991 683.216 L731.432 683.216 L730.872 683.216 L730.313 683.216 L729.754 683.216 L729.195 683.216 L728.635 683.216 L728.076 683.216 L727.517 683.216 L726.958 683.216 L726.398 683.216 L725.839 683.216 L725.28 683.216 L724.721 683.216 L724.161 683.216 L723.602 683.216 L723.043 683.216 L722.484 683.216 L721.924 683.216 L721.365 683.216 L720.806 683.216 L720.247 683.216  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip963)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.058 720.806,684.058 721.365,684.058 721.924,684.058 722.484,684.058 723.043,684.058 723.602,684.058 724.161,684.058 724.721,684.058 725.28,684.058 725.839,684.058 726.398,684.058 726.958,684.058 727.517,684.058 728.076,684.058 728.635,684.058 729.195,684.058 729.754,684.058 730.313,684.058 730.872,684.058 731.432,684.058 731.991,684.058 732.55,684.058 733.109,684.058 733.669,684.058 734.228,684.058 734.787,684.058 735.346,684.058 735.906,684.058 736.465,684.058 737.024,684.058 737.583,684.058 738.143,684.058 738.702,684.058 739.261,684.058 739.82,684.058 740.38,684.058 740.939,684.058 741.498,684.058 742.057,684.058 742.617,684.058 743.176,684.058 743.735,684.058 744.294,684.058 744.854,684.058 745.413,684.058 745.972,684.058 746.531,684.058 747.091,684.058 747.65,684.058 748.209,684.058 748.768,684.058 749.328,684.058 749.887,684.058 750.446,684.058 751.005,684.058 751.565,684.058 752.124,684.058 752.683,684.058 753.242,684.058 753.802,684.058 754.361,684.058 754.92,684.058 755.479,684.058 756.039,684.058 756.598,684.058 757.157,684.058 757.716,684.058 758.276,684.058 758.835,684.058 759.394,684.058 759.953,684.058 760.513,684.058 761.072,684.058 761.631,684.058 762.19,684.058 762.75,684.058 763.309,684.058 763.868,684.058 764.427,684.058 764.987,684.058 765.546,684.058 766.105,684.058 766.664,684.058 767.224,684.058 767.783,684.058 768.342,684.058 768.901,684.058 769.461,684.058 770.02,684.058 770.579,684.058 771.138,684.058 771.698,684.058 772.257,684.058 772.816,684.058 773.375,684.058 773.935,684.058 774.494,684.058 775.053,684.058 775.612,684.058 776.172,684.058 776.731,684.058 777.29,684.058 777.849,684.058 778.409,684.058 778.968,684.058 779.527,684.058 780.086,684.058 780.646,684.058 781.205,684.058 781.764,684.058 782.323,684.058 782.883,684.058 783.442,684.058 784.001,684.058 784.56,684.058 785.12,684.058 785.679,684.058 786.238,684.058 786.797,684.058 787.357,684.058 787.916,684.058 788.475,684.058 789.034,684.058 789.594,684.058 790.153,684.058 790.712,684.058 791.271,684.058 791.831,684.058 792.39,684.058 792.949,684.058 793.508,684.058 794.068,684.058 794.627,684.058 795.186,684.058 795.745,684.058 796.305,684.058 796.864,684.058 797.423,684.058 797.982,684.058 798.542,684.058 799.101,684.058 799.66,684.058 800.219,684.058 800.779,684.058 801.338,684.058 801.897,684.058 802.456,684.058 803.016,684.058 803.575,684.058 804.134,684.058 804.693,684.058 805.253,684.058 805.812,684.058 806.371,684.058 806.931,684.058 807.49,684.058 808.049,684.058 808.608,684.058 809.168,684.058 809.727,684.058 810.286,684.058 810.845,684.058 811.405,684.058 811.964,684.058 812.523,684.058 813.082,684.058 813.642,684.058 814.201,684.058 814.76,684.058 815.319,684.058 815.879,684.058 816.438,684.058 816.997,684.058 817.556,684.058 818.116,684.058 818.675,684.058 819.234,684.058 819.793,684.058 820.353,684.058 820.912,684.058 821.471,684.058 822.03,684.058 822.59,684.058 823.149,684.058 823.708,684.058 824.267,684.058 824.827,684.058 825.386,684.058 825.945,684.058 826.504,684.058 827.064,684.058 827.623,684.058 828.182,684.058 828.741,684.058 829.301,684.058 829.86,684.058 830.419,684.058 830.978,684.058 831.538,684.058 832.097,684.058 832.656,684.058 833.215,684.058 833.775,684.058 834.334,684.058 834.893,684.058 835.452,684.058 836.012,684.058 836.571,684.058 837.13,684.058 837.689,684.058 838.249,684.058 838.808,684.058 839.367,684.058 839.926,684.058 840.486,684.058 841.045,684.058 841.604,684.058 842.163,684.058 842.723,684.058 843.282,684.058 843.841,684.058 844.4,684.058 844.96,684.058 845.519,684.058 846.078,684.058 846.637,684.058 847.197,684.058 847.756,684.058 848.315,684.058 848.874,684.058 849.434,684.058 849.993,684.058 850.552,684.058 851.111,684.058 851.671,684.058 852.23,684.058 852.789,684.058 853.348,684.058 853.908,684.058 854.467,684.058 855.026,684.058 855.585,684.058 856.145,684.058 856.704,684.058 857.263,684.058 857.822,684.058 858.382,684.058 858.941,684.058 859.5,684.058 860.059,684.058 860.619,684.058 861.178,684.058 861.737,684.058 862.296,684.058 862.856,684.058 863.415,684.058 863.974,684.058 864.533,684.058 865.093,684.058 865.652,684.058 866.211,684.058 866.77,684.058 867.33,684.058 867.889,684.058 868.448,684.058 869.007,684.058 869.567,684.058 870.126,684.058 870.685,684.058 871.244,684.058 871.804,684.058 872.363,684.058 872.922,684.058 873.481,684.058 874.041,684.058 874.6,684.058 875.159,684.058 875.718,684.058 876.278,684.058 876.837,684.058 877.396,684.058 877.955,684.058 878.515,684.058 879.074,684.058 879.633,684.058 880.192,684.058 880.752,684.058 881.311,684.058 881.87,684.058 882.429,684.058 882.989,684.058 883.548,684.058 884.107,684.058 884.666,684.058 885.226,684.058 885.785,684.058 886.344,684.058 886.903,684.058 887.463,684.058 888.022,684.058 888.581,684.058 889.14,684.058 889.7,684.058 890.259,684.058 890.818,684.058 891.377,684.058 891.937,684.058 892.496,684.058 893.055,684.058 893.614,684.058 894.174,684.058 894.733,684.058 895.292,684.058 895.851,684.058 896.411,684.058 896.97,684.058 897.529,684.058 898.088,684.058 898.648,684.058 899.207,684.058 899.766,684.058 900.325,684.058 900.885,684.058 901.444,684.058 902.003,684.058 902.562,684.058 903.122,684.058 903.681,684.058 904.24,684.058 904.799,684.058 905.359,684.058 905.918,684.058 906.477,684.058 907.036,684.058 907.596,684.058 908.155,684.058 908.714,684.058 909.273,684.058 909.833,684.058 910.392,684.058 910.951,684.058 911.51,684.058 912.07,684.058 912.629,684.058 913.188,684.058 913.747,684.058 914.307,684.058 914.866,684.058 915.425,684.058 915.984,684.058 916.544,684.058 917.103,684.058 917.662,684.058 918.221,684.058 918.781,684.058 919.34,684.058 919.899,684.058 920.458,684.058 921.018,684.058 921.577,684.058 922.136,684.058 922.695,684.058 923.255,684.058 923.814,684.058 924.373,684.058 924.932,684.058 925.492,684.058 926.051,684.058 926.61,684.058 927.169,684.058 927.729,684.058 928.288,684.058 928.847,684.058 929.406,684.058 929.966,684.058 930.525,684.058 931.084,684.058 931.644,684.058 932.203,684.058 932.762,684.058 933.321,684.058 933.881,684.058 934.44,684.058 934.999,684.058 935.558,684.058 936.118,684.058 936.677,684.058 937.236,684.058 937.795,684.058 938.355,684.058 938.914,684.058 939.473,684.058 940.032,684.058 940.592,684.058 941.151,684.058 941.71,684.058 942.269,684.058 942.829,684.058 943.388,684.058 943.947,684.058 944.506,684.058 945.066,684.058 945.625,684.058 946.184,684.058 946.743,684.058 947.303,684.058 947.862,684.058 948.421,684.058 948.98,684.058 949.54,684.058 950.099,684.058 950.658,684.058 951.217,684.058 951.777,684.058 952.336,684.058 952.895,684.058 953.454,684.058 954.014,684.058 954.573,684.058 955.132,684.058 955.691,684.058 956.251,684.058 956.81,684.058 957.369,684.058 957.928,684.058 958.488,684.058 959.047,684.058 959.606,684.058 960.165,684.058 960.725,684.058 961.284,684.058 961.843,684.058 962.402,684.058 962.962,684.058 963.521,684.058 964.08,684.058 964.639,684.058 965.199,684.058 965.758,684.058 966.317,684.058 966.876,684.058 967.436,684.058 967.995,684.058 968.554,684.058 969.113,684.058 969.673,684.058 970.232,684.058 970.791,684.058 971.35,684.058 971.91,684.058 972.469,684.058 973.028,684.058 973.587,684.058 974.147,684.058 974.706,684.058 975.265,684.058 975.824,684.058 976.384,684.058 976.943,684.058 977.502,684.058 978.061,684.058 978.621,684.058 979.18,684.058 979.739,684.058 980.298,684.058 980.858,684.058 981.417,684.058 981.976,684.058 982.535,684.058 983.095,684.058 983.654,684.058 984.213,684.058 984.772,684.058 985.332,684.058 985.891,684.058 986.45,684.058 987.009,684.058 987.569,684.058 988.128,684.058 988.687,684.058 989.246,684.058 989.806,684.058 990.365,684.058 990.924,684.058 991.483,684.058 992.043,684.058 992.602,684.058 993.161,684.058 993.72,684.058 994.28,684.058 994.839,684.058 995.398,684.058 995.957,684.058 996.517,684.058 997.076,684.058 997.635,684.058 998.194,684.058 998.754,684.058 999.313,684.058 999.872,684.058 1000.43,684.058 1000.99,684.058 1001.55,684.058 1002.11,684.058 1002.67,684.058 1003.23,684.058 1003.79,684.058 1004.35,684.058 1004.91,684.058 1005.46,684.058 1006.02,684.058 1006.58,684.058 1007.14,684.058 1007.7,684.058 1008.26,684.058 1008.82,684.058 1009.38,684.058 1009.94,684.058 1010.5,684.058 1011.06,684.058 1011.62,684.058 1012.18,684.058 1012.73,684.058 1013.29,684.058 1013.85,684.058 1014.41,684.058 1014.97,684.058 1015.53,684.058 1016.09,684.058 1016.65,684.058 1017.21,684.058 1017.77,684.058 1018.33,684.058 1018.89,684.058 1019.45,684.058 1020.01,684.058 1020.56,684.058 1021.12,684.058 1021.68,684.058 1022.24,684.058 1022.8,684.058 1023.36,684.058 1023.92,684.058 1024.48,684.058 1025.04,684.058 1025.6,684.058 1026.16,684.058 1026.72,684.058 1027.28,684.058 1027.83,684.058 1028.39,684.058 1028.95,684.058 1029.51,684.058 1030.07,684.058 1030.63,684.058 1031.19,684.058 1031.75,684.058 1032.31,684.058 1032.87,684.058 1033.43,684.058 1033.99,684.058 1034.55,684.058 1035.1,684.058 1035.66,684.058 1036.22,684.058 1036.78,684.058 1037.34,684.058 1037.9,684.058 1038.46,684.058 1039.02,684.058 1039.58,684.058 1040.14,684.058 1040.7,684.058 1041.26,684.058 1041.82,684.058 1042.38,684.058 1042.93,684.058 1043.49,684.058 1044.05,684.058 1044.61,684.058 1045.17,684.058 1045.73,684.058 1046.29,684.058 1046.85,684.058 1047.41,684.058 1047.97,684.058 1048.53,684.058 1049.09,684.058 1049.65,684.058 1050.2,684.058 1050.76,684.058 1051.32,684.058 1051.88,684.058 1052.44,684.058 1053,684.058 1053.56,684.058 1054.12,684.058 1054.68,684.058 1055.24,684.058 1055.8,684.058 1056.36,684.058 1056.92,684.058 1057.48,684.058 1058.03,684.058 1058.59,684.058 1059.15,684.058 1059.71,684.058 1060.27,684.058 1060.83,684.058 1061.39,684.058 1061.95,684.058 1062.51,684.058 1063.07,684.058 1063.63,684.058 1064.19,684.058 1064.75,684.058 1065.3,684.058 1065.86,684.058 1066.42,684.058 1066.98,684.058 1067.54,684.058 1068.1,684.058 1068.66,684.058 1069.22,684.058 1069.78,684.058 1070.34,684.058 1070.9,684.058 1071.46,684.058 1072.02,684.058 1072.57,684.058 1073.13,684.058 1073.69,684.058 1074.25,684.058 1074.81,684.058 1075.37,684.058 1075.93,684.058 1076.49,684.058 1077.05,684.058 1077.61,684.058 1078.17,684.058 1078.73,684.058 1079.29,684.058 1079.85,684.058 1080.4,684.058 1080.96,684.058 1081.52,684.058 1082.08,684.058 1082.64,684.058 1083.2,684.058 1083.76,684.058 1084.32,684.058 1084.88,684.058 1085.44,684.058 1086,684.058 1086.56,684.058 1087.12,684.058 1087.67,684.058 1088.23,684.058 1088.79,684.058 1089.35,684.058 1089.91,684.058 1090.47,684.058 1091.03,684.058 1091.59,684.058 1092.15,684.058 1092.71,684.058 1093.27,684.058 1093.83,684.058 1094.39,684.058 1094.94,684.058 1095.5,684.058 1096.06,684.058 1096.62,684.058 1097.18,684.058 1097.74,684.058 1098.3,684.058 1098.86,684.058 1099.42,684.058 1099.98,684.058 1100.54,684.058 1101.1,684.058 1101.66,684.058 1102.22,684.058 1102.77,684.058 1103.33,684.058 1103.89,684.058 1104.45,684.058 1105.01,684.058 1105.57,684.058 1106.13,684.058 1106.69,684.058 1107.25,684.058 1107.81,684.058 1108.37,684.058 1108.93,684.058 1109.49,684.058 1110.04,684.058 1110.6,684.058 1111.16,684.058 1111.72,684.058 1112.28,684.058 1112.84,684.058 1113.4,684.058 1113.96,684.058 1114.52,684.058 1115.08,684.058 1115.64,684.058 1116.2,684.058 1116.76,684.058 1117.31,684.058 1117.87,684.058 1118.43,684.058 1118.99,684.058 1119.55,684.058 1120.11,684.058 1120.67,684.058 1121.23,684.058 1121.79,684.058 1122.35,684.058 1122.91,684.058 1123.47,684.058 1124.03,684.058 1124.59,684.058 1125.14,684.058 1125.7,684.058 1126.26,684.058 1126.82,684.058 1127.38,684.058 1127.94,684.058 1128.5,684.058 1129.06,684.058 1129.62,684.058 1130.18,684.058 1130.74,684.058 1131.3,684.058 1131.86,684.058 1132.41,684.058 1132.97,684.058 1133.53,684.058 1134.09,684.058 1134.65,684.058 1135.21,684.058 1135.77,684.058 1136.33,684.058 1136.89,684.058 1137.45,684.058 1138.01,684.058 1138.57,684.058 1139.13,684.058 1139.68,684.058 1140.24,684.058 1140.8,684.058 1141.36,684.058 1141.92,684.058 1142.48,684.058 1143.04,684.058 1143.6,684.058 1144.16,684.058 1144.72,684.058 1145.28,684.058 1145.84,684.058 1146.4,684.058 1146.96,684.058 1147.51,684.058 1148.07,684.058 1148.63,684.058 1149.19,684.058 1149.75,684.058 1150.31,684.058 1150.87,684.058 1151.43,684.058 1151.99,684.058 1152.55,684.058 1153.11,684.058 1153.67,684.058 1154.23,684.058 1154.78,684.058 1155.34,684.058 1155.9,684.058 1156.46,684.058 1157.02,684.058 1157.58,684.058 1158.14,684.058 1158.7,684.058 1159.26,684.058 1159.82,684.058 1160.38,684.058 1160.94,684.058 1161.5,684.058 1162.05,684.058 1162.61,684.058 1163.17,684.058 1163.73,684.058 1164.29,684.058 1164.85,684.058 1165.41,684.058 1165.97,684.058 1166.53,684.058 1167.09,684.058 1167.65,684.058 1168.21,684.058 1168.77,684.058 1169.33,684.058 1169.88,684.058 1170.44,684.058 1171,684.058 1171.56,684.058 1172.12,684.058 1172.68,684.058 1173.24,684.058 1173.8,684.058 1174.36,684.058 1174.92,684.058 1175.48,684.058 1176.04,684.058 1176.6,684.058 1177.15,684.058 1177.71,684.058 1178.27,684.058 1178.83,684.058 1179.39,684.058 1179.95,684.058 1180.51,684.058 1181.07,684.058 1181.63,684.058 1182.19,684.058 1182.75,684.058 1183.31,684.058 1183.87,684.058 1184.43,684.058 1184.98,684.058 1185.54,684.058 1186.1,684.058 1186.66,684.058 1187.22,684.058 1187.78,684.058 1188.34,684.058 1188.9,684.058 1189.46,684.058 1190.02,684.058 1190.58,684.058 1191.14,684.058 1191.7,684.058 1192.25,684.058 1192.81,684.058 1193.37,684.058 1193.93,684.058 1194.49,684.058 1195.05,684.058 1195.61,684.058 1196.17,684.058 1196.73,684.058 1197.29,684.058 1197.85,684.058 1198.41,684.058 1198.97,684.058 1199.52,684.058 1200.08,684.058 1200.64,684.058 1201.2,684.058 1201.76,684.058 1202.32,684.058 1202.88,684.058 1203.44,684.058 1204,684.058 1204.56,684.058 1205.12,684.058 1205.68,684.058 1206.24,684.058 1206.8,684.058 1207.35,684.058 1207.91,684.058 1208.47,684.058 1209.03,684.058 1209.59,684.058 1210.15,684.058 1210.71,684.058 1211.27,684.058 1211.83,684.058 1212.39,684.058 1212.95,684.058 1213.51,684.058 1214.07,684.058 1214.62,684.058 1215.18,684.058 1215.74,684.058 1216.3,684.058 1216.86,684.058 1217.42,684.058 1217.98,684.058 1218.54,684.058 1219.1,684.058 1219.66,684.058 1220.22,684.058 1220.78,684.058 1221.34,684.058 1221.89,684.058 1222.45,684.058 1223.01,684.058 1223.57,684.058 1224.13,684.058 1224.69,684.058 1225.25,684.058 1225.81,684.058 1226.37,684.058 1226.93,684.058 1227.49,684.058 1228.05,684.058 1228.61,684.058 1229.17,684.058 1229.72,684.058 1230.28,684.058 1230.84,684.058 1231.4,684.058 1231.96,684.058 1232.52,684.058 1233.08,684.058 1233.64,684.058 1234.2,684.058 1234.76,684.058 1235.32,684.058 1235.88,684.058 1236.44,684.058 1236.99,684.058 1237.55,684.058 1238.11,684.058 1238.67,684.058 1239.23,684.058 1239.79,684.058 1240.35,684.058 1240.91,684.058 1241.47,684.058 1242.03,684.058 1242.59,684.058 1243.15,684.058 1243.71,684.058 1244.26,684.058 1244.82,684.058 1245.38,684.058 1245.94,684.058 1246.5,684.058 1247.06,684.058 1247.62,684.058 1248.18,684.058 1248.74,684.058 1249.3,684.058 1249.86,684.058 1250.42,684.058 1250.98,684.058 1251.54,684.058 1252.09,684.058 1252.65,684.058 1253.21,684.058 1253.77,684.058 1254.33,684.058 1254.89,684.058 1255.45,684.058 1256.01,684.058 1256.57,684.058 1257.13,684.058 1257.69,684.058 1258.25,684.058 1258.81,684.058 1259.36,684.058 1259.92,684.058 1260.48,684.058 1261.04,684.058 1261.6,684.058 1262.16,684.058 1262.72,684.058 1263.28,684.058 1263.84,684.058 1264.4,684.058 1264.96,684.058 1265.52,684.058 1266.08,684.058 1266.63,684.058 1267.19,684.058 1267.75,684.058 1268.31,684.058 1268.87,684.058 1269.43,684.058 1269.99,684.058 1270.55,684.058 1271.11,684.058 1271.67,684.058 1272.23,684.058 1272.79,684.058 1273.35,684.058 1273.91,684.058 1274.46,684.058 1275.02,684.058 1275.58,684.058 1276.14,684.058 1276.7,684.058 1277.26,684.058 1277.82,684.058 1278.38,684.058 1278.94,684.058 1279.5,684.058 1280.06,684.058 1280.62,684.058 1281.18,684.058 1281.73,684.058 1282.29,684.058 1282.85,684.058 1283.41,684.058 1283.97,684.058 1284.53,684.058 1285.09,684.058 1285.65,684.058 1286.21,684.058 1286.77,684.058 1287.33,684.058 1287.89,684.058 1288.45,684.058 1289,684.058 1289.56,684.058 1290.12,684.058 1290.68,684.058 1291.24,684.058 1291.8,684.058 1292.36,684.058 1292.92,684.058 1293.48,684.058 1294.04,684.058 1294.6,684.058 1295.16,684.058 1295.72,684.058 1296.28,684.058 1296.83,684.058 1297.39,684.058 1297.95,684.058 1298.51,684.058 1299.07,684.058 1299.63,684.058 1300.19,684.058 1300.75,684.058 1301.31,684.058 1301.87,684.058 1302.43,684.058 1302.99,684.058 1303.55,684.058 1304.1,684.058 1304.66,684.058 1305.22,684.058 1305.78,684.058 1306.34,684.058 1306.9,684.058 1307.46,684.058 1308.02,684.058 1308.58,684.058 1309.14,684.058 1309.7,684.058 1310.26,684.058 1310.82,684.058 1311.38,684.058 1311.93,684.058 1312.49,684.058 1313.05,684.058 1313.61,684.058 1314.17,684.058 1314.73,684.058 1315.29,684.058 1315.85,684.058 1316.41,684.058 1316.97,684.058 1317.53,684.058 1318.09,684.058 1318.65,684.058 1319.2,684.058 1319.76,684.058 1320.32,684.058 1320.88,684.058 1321.44,684.058 1322,684.058 1322.56,684.058 1323.12,684.058 1323.68,684.058 1324.24,684.058 1324.8,684.058 1325.36,684.058 1325.92,684.058 1326.47,684.058 1327.03,684.058 1327.59,684.058 1328.15,684.058 1328.71,684.058 1329.27,684.058 1329.83,684.058 1330.39,684.058 1330.95,684.058 1331.51,684.058 1332.07,684.058 1332.63,684.058 1333.19,684.058 1333.75,684.058 1334.3,684.058 1334.86,684.058 1335.42,684.058 1335.98,684.058 1336.54,684.058 1337.1,684.058 1337.66,684.058 1338.22,684.058 1338.78,684.058 1339.34,684.058 1339.9,684.058 1340.46,684.058 1341.02,684.058 1341.57,684.058 1342.13,684.058 1342.69,684.058 1343.25,684.058 1343.81,684.058 1344.37,684.058 1344.93,684.058 1345.49,684.058 1346.05,684.058 1346.61,684.058 1347.17,684.058 1347.73,684.058 1348.29,684.058 1348.84,684.058 1349.4,684.058 1349.96,684.058 1350.52,684.058 1351.08,684.058 1351.64,684.058 1352.2,684.058 1352.76,684.058 1353.32,684.058 1353.88,684.058 1354.44,684.058 1355,684.058 1355.56,684.058 1356.12,684.058 1356.67,684.058 1357.23,684.058 1357.79,684.058 1358.35,684.058 1358.91,684.058 1359.47,684.058 1360.03,684.058 1360.59,684.058 1361.15,684.058 1361.71,684.058 1362.27,684.058 1362.83,684.058 1363.39,684.058 1363.94,684.058 1364.5,684.058 1365.06,684.058 1365.62,684.058 1366.18,684.058 1366.74,684.058 1367.3,684.058 1367.86,684.058 1368.42,684.058 1368.98,684.058 1369.54,684.058 1370.1,684.058 1370.66,684.058 1371.21,684.058 1371.77,684.058 1372.33,684.058 1372.89,684.058 1373.45,684.058 1374.01,684.058 1374.57,684.058 1375.13,684.058 1375.69,684.058 1376.25,684.058 1376.81,684.058 1377.37,684.058 1377.93,684.058 1378.49,684.058 1379.04,684.058 1379.6,684.058 1380.16,684.058 1380.72,684.058 1381.28,684.058 1381.84,684.058 1382.4,684.058 1382.96,684.058 1383.52,684.058 1384.08,684.058 1384.64,684.058 1385.2,684.058 1385.76,684.058 1386.31,684.058 1386.87,684.058 1387.43,684.058 1387.99,684.058 1388.55,684.058 1389.11,684.058 1389.67,684.058 1390.23,684.058 1390.79,684.058 1391.35,684.058 1391.91,684.058 1392.47,684.058 1393.03,684.058 1393.58,684.058 1394.14,684.058 1394.7,684.058 1395.26,684.058 1395.82,684.058 1396.38,684.058 1396.94,684.058 1397.5,684.058 1398.06,684.058 1398.62,684.058 1399.18,684.058 1399.74,684.058 1400.3,684.058 1400.86,684.058 1401.41,684.058 1401.97,684.058 1402.53,684.058 1403.09,684.058 1403.65,684.058 1404.21,684.058 1404.77,684.058 1405.33,684.058 1405.89,684.058 1406.45,684.058 1407.01,684.058 1407.57,684.058 1408.13,684.058 1408.68,684.058 1409.24,684.058 1409.8,684.058 1410.36,684.058 1410.92,684.058 1411.48,684.058 1412.04,684.058 1412.6,684.058 1413.16,684.058 1413.72,684.058 1414.28,684.058 1414.84,684.058 1415.4,684.058 1415.95,684.058 1416.51,684.058 1417.07,684.058 1417.63,684.058 1418.19,684.058 1418.75,684.058 1419.31,684.058 1419.87,684.058 1420.43,684.058 1420.99,684.058 1421.55,684.058 1422.11,684.058 1422.67,684.058 1423.23,684.058 1423.78,684.058 1424.34,684.058 1424.9,684.058 1425.46,684.058 1426.02,684.058 1426.58,684.058 1427.14,684.058 1427.7,684.058 1428.26,684.058 1428.82,684.058 1429.38,684.058 1429.94,684.058 1430.5,684.058 1431.05,684.058 1431.61,684.058 1432.17,684.058 1432.73,684.058 1433.29,684.058 1433.85,684.058 1434.41,684.058 1434.97,684.058 1435.53,684.058 1436.09,684.058 1436.65,684.058 1437.21,684.058 1437.77,684.058 1438.33,684.058 1438.88,684.058 1439.44,684.058 1440,684.058 1440.56,684.058 1441.12,684.058 1441.68,684.058 1442.24,684.058 1442.8,684.058 1443.36,684.058 1443.92,684.058 1444.48,684.058 1445.04,684.058 1445.6,684.058 1446.15,684.058 1446.71,684.058 1447.27,684.058 1447.83,684.058 1448.39,684.058 1448.95,684.058 1449.51,684.058 1450.07,684.058 1450.63,684.058 1451.19,684.058 1451.75,684.058 1452.31,684.058 1452.87,684.058 1453.42,684.058 1453.98,684.058 1454.54,684.058 1455.1,684.058 1455.66,684.058 1456.22,684.058 1456.78,684.058 1457.34,684.058 1457.9,684.058 1458.46,684.058 1459.02,684.058 1459.58,684.058 1460.14,684.058 1460.7,684.058 1461.25,684.058 1461.81,684.058 1462.37,684.058 1462.93,684.058 1463.49,684.058 1464.05,684.058 1464.61,684.058 1465.17,684.058 1465.73,684.058 1466.29,684.058 1466.85,684.058 1467.41,684.058 1467.97,684.058 1468.52,684.058 1469.08,684.058 1469.64,684.058 1470.2,684.058 1470.76,684.058 1471.32,684.058 1471.88,684.058 1472.44,684.058 1473,684.058 1473.56,684.058 1474.12,684.058 1474.68,684.058 1475.24,684.058 1475.79,684.058 1476.35,684.058 1476.91,684.058 1477.47,684.058 1478.03,684.058 1478.59,684.058 1479.15,684.058 1479.71,684.058 1480.27,684.058 1480.83,684.058 1481.39,684.058 1481.95,684.058 1482.51,684.058 1483.07,684.058 1483.62,684.058 1484.18,684.058 1484.74,684.058 1485.3,684.058 1485.86,684.058 1486.42,684.058 1486.98,684.058 1487.54,684.058 1488.1,684.058 1488.66,684.058 1489.22,684.058 1489.78,684.058 1490.34,684.058 1490.89,684.058 1491.45,684.058 1492.01,684.058 1492.57,684.058 1493.13,684.058 1493.69,684.058 1494.25,684.058 1494.81,684.058 1495.37,684.058 1495.93,684.058 1496.49,684.058 1497.05,684.058 1497.61,684.058 1498.16,684.058 1498.72,684.058 1499.28,684.058 1499.84,684.058 1500.4,684.058 1500.96,684.058 1501.52,684.058 1502.08,684.058 1502.64,684.058 1503.2,684.058 1503.76,684.058 1504.32,684.058 1504.88,684.058 1505.44,684.058 1505.99,684.058 1506.55,684.058 1507.11,684.058 1507.67,684.058 1508.23,684.058 1508.79,684.058 1509.35,684.058 1509.91,684.058 1510.47,684.058 1511.03,684.058 1511.59,684.058 1512.15,684.058 1512.71,684.058 1513.26,684.058 1513.82,684.058 1514.38,684.058 1514.94,684.058 1515.5,684.058 1516.06,684.058 1516.62,684.058 1517.18,684.058 1517.74,684.058 1518.3,684.058 1518.86,684.058 1519.42,684.058 1519.98,684.058 1520.53,684.058 1521.09,684.058 1521.65,684.058 1522.21,684.058 1522.77,684.058 1523.33,684.058 1523.89,684.058 1524.45,684.058 1525.01,684.058 1525.57,684.058 1526.13,684.058 1526.69,684.058 1527.25,684.058 1527.81,684.058 1528.36,684.058 1528.92,684.058 1529.48,684.058 1530.04,684.058 1530.6,684.058 1531.16,684.058 1531.72,684.058 1532.28,684.058 1532.84,684.058 1533.4,684.058 1533.96,684.058 1534.52,684.058 1535.08,684.058 1535.63,684.058 1536.19,684.058 1536.75,684.058 1537.31,684.058 1537.87,684.058 1538.43,684.058 1538.99,684.058 1539.55,684.058 1540.11,684.058 1540.67,684.058 1541.23,684.058 1541.79,684.058 1542.35,684.058 1542.9,684.058 1543.46,684.058 1544.02,684.058 1544.58,684.058 1545.14,684.058 1545.7,684.058 1546.26,684.058 1546.82,684.058 1547.38,684.058 1547.94,684.058 1548.5,684.058 1549.06,684.058 1549.62,684.058 1550.18,684.058 1550.73,684.058 1551.29,684.058 1551.85,684.058 1552.41,684.058 1552.97,684.058 1553.53,684.058 1554.09,684.058 1554.65,684.058 1555.21,684.058 1555.77,684.058 1556.33,684.058 1556.89,684.058 1557.45,684.058 1558,684.058 1558.56,684.058 1559.12,684.058 1559.68,684.058 1560.24,684.058 1560.8,684.058 1561.36,684.058 1561.92,684.058 1562.48,684.058 1563.04,684.058 1563.6,684.058 1564.16,684.058 1564.72,684.058 1565.28,684.058 1565.83,684.058 1566.39,684.058 1566.95,684.058 1567.51,684.058 1568.07,684.058 1568.63,684.058 1569.19,684.058 1569.75,684.058 1570.31,684.058 1570.87,684.058 1571.43,684.058 1571.99,684.058 1572.55,684.058 1573.1,684.058 1573.66,684.058 1574.22,684.058 1574.78,684.058 1575.34,684.058 1575.9,684.058 1576.46,684.058 1577.02,684.058 1577.58,684.058 1578.14,684.058 1578.7,684.058 1579.26,684.058 1579.82,684.058 1580.37,684.058 1580.93,684.058 1581.49,684.058 1582.05,684.058 1582.61,684.058 1583.17,684.058 1583.73,684.058 1584.29,684.058 1584.85,684.058 1585.41,684.058 1585.97,684.058 1586.53,684.058 1587.09,684.058 1587.65,684.058 1588.2,684.058 1588.76,684.058 1589.32,684.058 1589.88,684.058 1590.44,684.058 1591,684.058 1591.56,684.058 1592.12,684.058 1592.68,684.058 1593.24,684.058 1593.8,684.058 1594.36,684.058 1594.92,684.058 1595.47,684.058 1596.03,684.058 1596.59,684.058 1597.15,684.058 1597.71,684.058 1598.27,684.058 1598.83,684.058 1599.39,684.058 1599.95,684.058 1600.51,684.058 1601.07,684.058 1601.63,684.058 1602.19,684.058 1602.74,684.058 1603.3,684.058 1603.86,684.058 1604.42,684.058 1604.98,684.058 1605.54,684.058 1606.1,684.058 1606.66,684.058 1607.22,684.058 1607.78,684.058 1608.34,684.058 1608.9,684.058 1609.46,684.058 1610.02,684.058 1610.57,684.058 1611.13,684.058 1611.69,684.058 1612.25,684.058 1612.81,684.058 1613.37,684.058 1613.93,684.058 1614.49,684.058 1615.05,684.058 1615.61,684.058 1616.17,684.058 1616.73,684.058 1617.29,684.058 1617.84,684.058 1618.4,684.058 1618.96,684.058 1619.52,684.058 1620.08,684.058 1620.64,684.058 1621.2,684.058 1621.76,684.058 1622.32,684.058 1622.88,684.058 1623.44,684.058 1624,684.058 1624.56,684.058 1625.11,684.058 1625.67,684.058 1626.23,684.058 1626.79,684.058 1627.35,684.058 1627.91,684.058 1628.47,684.058 1629.03,684.058 1629.59,684.058 1630.15,684.058 1630.71,684.058 1631.27,684.058 1631.83,684.058 1632.39,684.058 1632.94,684.058 1633.5,684.058 1634.06,684.058 1634.62,684.058 1635.18,684.058 1635.74,684.058 1636.3,684.058 1636.86,684.058 1637.42,684.058 1637.98,684.058 1638.54,684.058 1639.1,684.058 1639.66,684.058 1640.21,684.058 1640.77,684.058 1641.33,684.058 1641.89,684.058 1642.45,684.058 1643.01,684.058 1643.57,684.058 1644.13,684.058 1644.69,684.058 1645.25,684.058 1645.81,684.058 1646.37,684.058 1646.93,684.058 1647.48,684.058 1648.04,684.058 1648.6,684.058 1649.16,684.058 1649.72,684.058 1650.28,684.058 1650.84,684.058 1651.4,684.058 1651.96,684.058 1652.52,684.058 1653.08,684.058 1653.64,684.058 1654.2,684.058 1654.76,684.058 1655.31,684.058 1655.87,684.058 1656.43,684.058 1656.99,684.058 1657.55,684.058 1658.11,684.058 1658.67,684.058 1659.23,684.058 1659.79,684.058 1660.35,684.058 1660.91,684.058 1661.47,684.058 1662.03,684.058 1662.58,684.058 1663.14,684.058 1663.7,684.058 1664.26,684.058 1664.82,684.058 1665.38,684.058 1665.94,684.058 1666.5,684.058 1667.06,684.058 1667.62,684.058 1668.18,684.058 1668.74,684.058 1669.3,684.058 1669.85,684.058 1670.41,684.058 1670.97,684.058 1671.53,684.058 1672.09,684.058 1672.65,684.058 1673.21,684.058 1673.77,684.058 1674.33,684.058 1674.89,684.058 1675.45,684.058 1676.01,684.058 1676.57,684.058 1677.13,684.058 1677.68,684.058 1678.24,684.058 1678.8,684.058 1679.36,684.058 1679.92,684.058 1680.48,684.058 1681.04,684.058 1681.6,684.058 1682.16,684.058 1682.72,684.058 1683.28,684.058 1683.84,684.058 1684.4,684.058 1684.95,684.058 1685.51,684.058 1686.07,684.058 1686.63,684.058 1687.19,684.058 1687.75,684.058 1688.31,684.058 1688.87,684.058 1689.43,684.058 1689.99,684.058 1690.55,684.058 1691.11,684.058 1691.67,684.058 1692.23,684.058 1692.78,684.058 1693.34,684.058 1693.9,684.058 1694.46,684.058 1695.02,684.058 1695.58,684.058 1696.14,684.058 1696.7,684.058 1697.26,684.058 1697.82,684.058 1698.38,684.058 1698.94,684.058 1699.5,684.058 1700.05,684.058 1700.61,684.058 1701.17,684.058 1701.73,684.058 1702.29,684.058 1702.85,684.058 1703.41,684.058 1703.97,684.058 1704.53,684.058 1705.09,684.058 1705.65,684.058 1706.21,684.058 1706.77,684.058 1707.32,684.058 1707.88,684.058 1708.44,684.058 1709,684.058 1709.56,684.058 1710.12,684.058 1710.68,684.058 1711.24,684.058 1711.8,684.058 1712.36,684.058 1712.92,684.058 1713.48,684.058 1714.04,684.058 1714.6,684.058 1715.15,684.058 1715.71,684.058 1716.27,684.058 1716.83,684.058 1717.39,684.058 1717.95,684.058 1718.51,684.058 1719.07,684.058 1719.63,684.058 1720.19,684.058 1720.75,684.058 1721.31,684.058 1721.87,684.058 1722.42,684.058 1722.98,684.058 1723.54,684.058 1724.1,684.058 1724.66,684.058 1725.22,684.058 1725.78,684.058 1726.34,684.058 1726.9,684.058 1727.46,684.058 1728.02,684.058 1728.58,684.058 1729.14,684.058 1729.69,684.058 1730.25,684.058 1730.81,684.058 1731.37,684.058 1731.93,684.058 1732.49,684.058 1733.05,684.058 1733.61,684.058 1734.17,684.058 1734.73,684.058 1735.29,684.058 1735.85,684.058 1736.41,684.058 1736.97,684.058 1737.52,684.058 1738.08,684.058 1738.64,684.058 1739.2,684.058 1739.76,684.058 1740.32,684.058 1740.88,684.058 1741.44,684.058 1742,684.058 1742.56,684.058 1743.12,684.058 1743.68,684.058 1744.24,684.058 1744.79,684.058 1745.35,684.058 1745.91,684.058 1746.47,684.058 1747.03,684.058 1747.59,684.058 1748.15,684.058 1748.71,684.058 1749.27,684.058 1749.83,684.058 1750.39,684.058 1750.95,684.058 1751.51,684.058 1752.06,684.058 1752.62,684.058 1753.18,684.058 1753.74,684.058 1754.3,684.058 1754.86,684.058 1755.42,684.058 1755.98,684.058 1756.54,684.058 1757.1,684.058 1757.66,684.058 1758.22,684.058 1758.78,684.058 1759.34,684.058 1759.89,684.058 1760.45,684.058 1761.01,684.058 1761.57,684.058 1762.13,684.058 1762.69,684.058 1763.25,684.058 1763.81,684.058 1764.37,684.058 1764.93,684.058 1765.49,684.058 1766.05,684.058 1766.61,684.058 1767.16,684.058 1767.72,684.058 1768.28,684.058 1768.84,684.058 1769.4,684.058 1769.96,684.058 1770.52,684.058 1771.08,684.058 1771.64,684.058 1772.2,684.058 1772.76,684.058 1773.32,684.058 1773.88,684.058 1774.43,684.058 1774.99,684.058 1775.55,684.058 1776.11,684.058 1776.67,684.058 1777.23,684.058 1777.79,684.058 1778.35,684.058 1778.91,684.058 1779.47,684.058 1780.03,684.058 1780.59,684.058 1781.15,684.058 1781.71,684.058 1782.26,684.058 1782.82,684.058 1783.38,684.058 1783.94,684.058 1784.5,684.058 1785.06,684.058 1785.62,684.058 1786.18,684.058 1786.74,684.058 1787.3,684.058 1787.86,684.058 1788.42,684.058 1788.98,684.058 1789.53,684.058 1790.09,684.058 1790.65,684.058 1791.21,684.058 1791.77,684.058 1792.33,684.058 1792.89,684.058 1793.45,684.058 1794.01,684.058 1794.57,684.058 1795.13,684.058 1795.69,684.058 1796.25,684.058 1796.8,684.058 1797.36,684.058 1797.92,684.058 1798.48,684.058 1799.04,684.058 1799.6,684.058 1800.16,684.058 1800.72,684.058 1801.28,684.058 1801.84,684.058 1802.4,684.058 1802.96,684.058 1803.52,684.058 1804.08,684.058 1804.63,684.058 1805.19,684.058 1805.75,684.058 1806.31,684.058 1806.87,684.058 1807.43,684.058 1807.99,684.058 1808.55,684.058 1809.11,684.058 1809.67,684.058 1810.23,684.058 1810.79,684.058 1811.35,684.058 1811.9,684.058 1812.46,684.058 1813.02,684.058 1813.58,684.058 1814.14,684.058 1814.7,684.058 1815.26,684.058 1815.82,684.058 1816.38,684.058 1816.94,684.058 1817.5,684.058 1818.06,684.058 1818.62,684.058 1819.18,684.058 1819.73,684.058 1820.29,684.058 1820.85,684.058 1821.41,684.058 1821.97,684.058 1822.53,684.058 1823.09,684.058 1823.65,684.058 1824.21,684.058 1824.77,684.058 1825.33,684.058 1825.89,684.058 1826.45,684.058 1827,684.058 1827.56,684.058 1828.12,684.058 1828.68,684.058 1829.24,684.058 1829.8,684.058 1830.36,684.058 1830.92,684.058 1831.48,684.058 1832.04,684.058 1832.6,684.058 1833.16,684.058 1833.72,684.058 1834.27,684.058 1834.83,684.058 1835.39,684.058 1835.95,684.058 1836.51,684.058 1837.07,684.058 1837.63,684.058 1838.19,684.058 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037281792544008 ± 0.02246092149131813\nProjected Energy: -4.017467949869619 ± (0.004079066590678693, 0.0042371401990610735)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.541173</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.611e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.8835e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.638e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.392e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.706e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.937e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.363124291613378\n -0.7590191922770817\n  0.13584182219622143\n  0.1578999869460862\n  0.8767114411781307\n  1.5305929970973366\n  1.5835732611867375\n  3.072870330325869\n  3.1256726539518427\n  4.862107221562166\n  6.260694850380597\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
