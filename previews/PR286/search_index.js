var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20926806535085365 ± 0.0022353591730676506\n   G2(1) = 0.9181212528424644 ± 0.0012200093885254674\n   G2(2) = 0.9821684420110143 ± 0.000717831402857632\n   G2(3) = 0.990152544942191 ± 0.0012318075053532433\n   G2(4) = 0.9821684420110143 ± 0.000717831402857632\n   G2(5) = 0.9181212528424644 ± 0.0012200093885254674\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9909602192499056 ± 0.12370699938830206\n   Replica 2: -3.953014615735646 ± 0.12520863435448257\n   Replica 3: -4.063569616252674 ± 0.13842671107778728\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip110\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip111\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip112\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.47 2211.02,1003.47 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.122 2211.02,746.122 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.771 2211.02,488.771 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.421 2211.02,231.421 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.47 423.181,1003.47 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.122 423.181,746.122 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.771 423.181,488.771 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.421 423.181,231.421 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.52 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.86 Q344.395 1252.11 347.45 1247.52 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M290.043 1016.82 L306.363 1016.82 L306.363 1020.75 L284.418 1020.75 L284.418 1016.82 Q287.08 1014.06 291.664 1009.43 Q296.27 1004.78 297.451 1003.44 Q299.696 1000.91 300.576 999.178 Q301.478 997.419 301.478 995.729 Q301.478 992.974 299.534 991.238 Q297.613 989.502 294.511 989.502 Q292.312 989.502 289.858 990.266 Q287.427 991.03 284.65 992.581 L284.65 987.859 Q287.474 986.725 289.927 986.146 Q292.381 985.567 294.418 985.567 Q299.789 985.567 302.983 988.252 Q306.177 990.937 306.177 995.428 Q306.177 997.558 305.367 999.479 Q304.58 1001.38 302.474 1003.97 Q301.895 1004.64 298.793 1007.86 Q295.691 1011.05 290.043 1016.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 986.192 L334.58 986.192 L334.58 990.127 L320.506 990.127 L320.506 998.599 Q321.524 998.252 322.543 998.09 Q323.562 997.905 324.58 997.905 Q330.367 997.905 333.747 1001.08 Q337.126 1004.25 337.126 1009.66 Q337.126 1015.24 333.654 1018.34 Q330.182 1021.42 323.862 1021.42 Q321.687 1021.42 319.418 1021.05 Q317.173 1020.68 314.765 1019.94 L314.765 1015.24 Q316.849 1016.38 319.071 1016.93 Q321.293 1017.49 323.77 1017.49 Q327.774 1017.49 330.112 1015.38 Q332.45 1013.28 332.45 1009.66 Q332.45 1006.05 330.112 1003.95 Q327.774 1001.84 323.77 1001.84 Q321.895 1001.84 320.02 1002.26 Q318.168 1002.67 316.224 1003.55 L316.224 986.192 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 989.271 Q352.728 989.271 350.899 992.836 Q349.094 996.377 349.094 1003.51 Q349.094 1010.61 350.899 1014.18 Q352.728 1017.72 356.339 1017.72 Q359.973 1017.72 361.779 1014.18 Q363.608 1010.61 363.608 1003.51 Q363.608 996.377 361.779 992.836 Q359.973 989.271 356.339 989.271 M356.339 985.567 Q362.149 985.567 365.205 990.174 Q368.284 994.757 368.284 1003.51 Q368.284 1012.23 365.205 1016.84 Q362.149 1021.42 356.339 1021.42 Q350.529 1021.42 347.45 1016.84 Q344.395 1012.23 344.395 1003.51 Q344.395 994.757 347.45 990.174 Q350.529 985.567 356.339 985.567 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M286.062 728.842 L304.418 728.842 L304.418 732.777 L290.344 732.777 L290.344 741.249 Q291.363 740.902 292.381 740.74 Q293.4 740.555 294.418 740.555 Q300.205 740.555 303.585 743.726 Q306.964 746.897 306.964 752.314 Q306.964 757.892 303.492 760.994 Q300.02 764.073 293.701 764.073 Q291.525 764.073 289.256 763.703 Q287.011 763.332 284.603 762.591 L284.603 757.892 Q286.687 759.027 288.909 759.582 Q291.131 760.138 293.608 760.138 Q297.613 760.138 299.951 758.031 Q302.288 755.925 302.288 752.314 Q302.288 748.703 299.951 746.596 Q297.613 744.49 293.608 744.49 Q291.733 744.49 289.858 744.906 Q288.006 745.323 286.062 746.203 L286.062 728.842 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 731.92 Q322.566 731.92 320.737 735.485 Q318.932 739.027 318.932 746.156 Q318.932 753.263 320.737 756.828 Q322.566 760.369 326.177 760.369 Q329.811 760.369 331.617 756.828 Q333.446 753.263 333.446 746.156 Q333.446 739.027 331.617 735.485 Q329.811 731.92 326.177 731.92 M326.177 728.217 Q331.987 728.217 335.043 732.823 Q338.122 737.406 338.122 746.156 Q338.122 754.883 335.043 759.49 Q331.987 764.073 326.177 764.073 Q320.367 764.073 317.288 759.49 Q314.233 754.883 314.233 746.156 Q314.233 737.406 317.288 732.823 Q320.367 728.217 326.177 728.217 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 731.92 Q352.728 731.92 350.899 735.485 Q349.094 739.027 349.094 746.156 Q349.094 753.263 350.899 756.828 Q352.728 760.369 356.339 760.369 Q359.973 760.369 361.779 756.828 Q363.608 753.263 363.608 746.156 Q363.608 739.027 361.779 735.485 Q359.973 731.92 356.339 731.92 M356.339 728.217 Q362.149 728.217 365.205 732.823 Q368.284 737.406 368.284 746.156 Q368.284 754.883 365.205 759.49 Q362.149 764.073 356.339 764.073 Q350.529 764.073 347.45 759.49 Q344.395 754.883 344.395 746.156 Q344.395 737.406 347.45 732.823 Q350.529 728.217 356.339 728.217 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M284.835 471.491 L307.057 471.491 L307.057 473.482 L294.511 506.051 L289.627 506.051 L301.432 475.426 L284.835 475.426 L284.835 471.491 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 471.491 L334.58 471.491 L334.58 475.426 L320.506 475.426 L320.506 483.899 Q321.524 483.551 322.543 483.389 Q323.562 483.204 324.58 483.204 Q330.367 483.204 333.747 486.375 Q337.126 489.547 337.126 494.963 Q337.126 500.542 333.654 503.644 Q330.182 506.723 323.862 506.723 Q321.687 506.723 319.418 506.352 Q317.173 505.982 314.765 505.241 L314.765 500.542 Q316.849 501.676 319.071 502.232 Q321.293 502.787 323.77 502.787 Q327.774 502.787 330.112 500.681 Q332.45 498.574 332.45 494.963 Q332.45 491.352 330.112 489.246 Q327.774 487.139 323.77 487.139 Q321.895 487.139 320.02 487.556 Q318.168 487.973 316.224 488.852 L316.224 471.491 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 474.57 Q352.728 474.57 350.899 478.135 Q349.094 481.676 349.094 488.806 Q349.094 495.912 350.899 499.477 Q352.728 503.019 356.339 503.019 Q359.973 503.019 361.779 499.477 Q363.608 495.912 363.608 488.806 Q363.608 481.676 361.779 478.135 Q359.973 474.57 356.339 474.57 M356.339 470.866 Q362.149 470.866 365.205 475.473 Q368.284 480.056 368.284 488.806 Q368.284 497.533 365.205 502.139 Q362.149 506.723 356.339 506.723 Q350.529 506.723 347.45 502.139 Q344.395 497.533 344.395 488.806 Q344.395 480.056 347.45 475.473 Q350.529 470.866 356.339 470.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M256.664 244.766 L264.303 244.766 L264.303 218.4 L255.992 220.067 L255.992 215.807 L264.256 214.141 L268.932 214.141 L268.932 244.766 L276.571 244.766 L276.571 248.701 L256.664 248.701 L256.664 244.766 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M296.015 217.219 Q292.404 217.219 290.576 220.784 Q288.77 224.326 288.77 231.455 Q288.77 238.562 290.576 242.127 Q292.404 245.668 296.015 245.668 Q299.65 245.668 301.455 242.127 Q303.284 238.562 303.284 231.455 Q303.284 224.326 301.455 220.784 Q299.65 217.219 296.015 217.219 M296.015 213.516 Q301.826 213.516 304.881 218.122 Q307.96 222.706 307.96 231.455 Q307.96 240.182 304.881 244.789 Q301.826 249.372 296.015 249.372 Q290.205 249.372 287.127 244.789 Q284.071 240.182 284.071 231.455 Q284.071 222.706 287.127 218.122 Q290.205 213.516 296.015 213.516 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 217.219 Q322.566 217.219 320.737 220.784 Q318.932 224.326 318.932 231.455 Q318.932 238.562 320.737 242.127 Q322.566 245.668 326.177 245.668 Q329.811 245.668 331.617 242.127 Q333.446 238.562 333.446 231.455 Q333.446 224.326 331.617 220.784 Q329.811 217.219 326.177 217.219 M326.177 213.516 Q331.987 213.516 335.043 218.122 Q338.122 222.706 338.122 231.455 Q338.122 240.182 335.043 244.789 Q331.987 249.372 326.177 249.372 Q320.367 249.372 317.288 244.789 Q314.233 240.182 314.233 231.455 Q314.233 222.706 317.288 218.122 Q320.367 213.516 326.177 213.516 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 217.219 Q352.728 217.219 350.899 220.784 Q349.094 224.326 349.094 231.455 Q349.094 238.562 350.899 242.127 Q352.728 245.668 356.339 245.668 Q359.973 245.668 361.779 242.127 Q363.608 238.562 363.608 231.455 Q363.608 224.326 361.779 220.784 Q359.973 217.219 356.339 217.219 M356.339 213.516 Q362.149 213.516 365.205 218.122 Q368.284 222.706 368.284 231.455 Q368.284 240.182 365.205 244.789 Q362.149 249.372 356.339 249.372 Q350.529 249.372 347.45 244.789 Q344.395 240.182 344.395 231.455 Q344.395 222.706 347.45 218.122 Q350.529 213.516 356.339 213.516 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip112)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.421 4017.76,231.421 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.14 457.691,1248.89 458.259,1248.59 458.828,1248.17 459.396,1247.74 459.964,1247.21 460.533,1246.63 461.101,1244.94 461.669,1244.24 462.238,1243.45 462.806,1242.55 463.375,1240.55 463.943,1239.51 464.511,1237.33 465.08,1236.09 465.648,1234.74 466.216,1233.26 466.785,1231.68 467.353,1229.96 467.921,1228.1 468.49,1225.09 469.058,1222.99 469.626,1220.72 470.195,1217.27 470.763,1214.68 471.331,1211.93 471.9,1208.99 472.468,1205.87 473.036,1202.55 473.605,1199.05 474.173,1194.34 474.741,1190.4 475.31,1186.22 475.878,1179.78 476.446,1174.3 477.015,1169.68 477.583,1162.75 478.152,1156.47 478.72,1150.98 479.288,1145.29 479.857,1138.37 480.425,1131.21 480.993,1124.74 481.562,1117.11 482.13,1109.23 482.698,1101.18 483.267,1093.89 483.835,1083.31 484.403,1075.65 484.972,1064.71 485.54,1056.71 486.108,1045.42 486.677,1035.14 487.245,1025.7 487.813,1017.19 488.382,1007.53 488.95,998.81 489.518,989.89 490.087,979.787 490.655,970.65 491.224,959.299 491.792,946.874 492.36,935.513 492.929,924.176 493.497,913.787 494.065,903.508 494.634,893.144 495.202,881.738 495.77,869.324 496.339,855.919 496.907,845.824 497.475,834.584 498.044,823.63 498.612,813.675 499.18,803.64 499.749,793.622 500.317,780.493 500.885,769.528 501.454,757.483 502.022,747.746 502.59,738.097 503.159,726.288 503.727,716.647 504.295,708.293 504.864,697.94 505.432,687.779 506.001,678.687 506.569,669.827 507.137,660.995 507.706,650.07 508.274,641.465 508.842,633.908 509.411,624.173 509.979,616.68 510.547,607.195 511.116,598.782 511.684,590.63 512.252,581.631 512.821,574.734 513.389,566.183 513.957,557.645 514.526,546.935 515.094,537.619 515.662,530.827 516.231,526.282 516.799,520.421 517.367,511.662 517.936,503.048 518.504,498.879 519.072,492.672 519.641,487.624 520.209,482.529 520.778,476.355 521.346,471.297 521.914,465.286 522.483,460.653 523.051,457.905 523.619,451.109 524.188,446.6 524.756,442.127 525.324,435.45 525.893,430.155 526.461,424.952 527.029,420.841 527.598,415.866 528.166,412.956 528.734,408.917 529.303,405.107 529.871,402.566 530.439,397.638 531.008,393.832 531.576,388.153 532.144,383.797 532.713,379.297 533.281,375.028 533.85,370.011 534.418,367.071 534.986,363.283 535.555,361.502 536.123,358.857 536.691,354.096 537.26,350.438 537.828,345.064 538.396,343.934 538.965,343.758 539.533,341.19 540.101,335.849 540.67,332.807 541.238,331.687 541.806,326.579 542.375,321.757 542.943,319.371 543.511,318.093 544.08,316.781 544.648,314.25 545.216,311.869 545.785,308.582 546.353,306.438 546.921,303.287 547.49,303.481 548.058,303.621 548.627,302.37 549.195,302.431 549.763,300.301 550.332,295.176 550.9,293.565 551.468,293.655 552.037,289.755 552.605,286.03 553.173,284.549 553.742,285.347 554.31,282.872 554.878,282.501 555.447,281.266 556.015,280.993 556.583,279.504 557.152,279.246 557.72,278.668 558.288,278.237 558.857,279.821 559.425,277.173 559.993,274.754 560.562,274.492 561.13,275.072 561.698,270.656 562.267,271.694 562.835,271.281 563.404,268.868 563.972,267.62 564.54,268.55 565.109,268.261 565.677,267.032 566.245,265.767 566.814,263.396 567.382,262.383 567.95,260.329 568.519,259.233 569.087,260.425 569.655,260.514 570.224,260.695 570.792,260.697 571.36,257.582 571.929,256.706 572.497,255.855 573.065,255.018 573.634,254.486 574.202,254.75 574.77,255.049 575.339,255.426 575.907,255.629 576.476,255.771 577.044,256.078 577.612,254.764 578.181,255.682 578.749,252.797 579.317,250.902 579.886,250.235 580.454,249.811 581.022,250.246 581.591,251.818 582.159,254.185 582.727,254.326 583.296,255.443 583.864,254.326 584.432,254.146 585.001,254.108 585.569,253.139 586.137,253.159 586.706,252.112 587.274,252.209 587.842,254.26 588.411,253.087 588.979,252.995 589.547,252.84 590.116,248.505 590.684,246.493 591.253,244.439 591.821,242.742 592.389,244.287 592.958,245.887 593.526,247.128 594.094,246.36 594.663,247.55 595.231,247.685 595.799,247.727 596.368,246.001 596.936,245.025 597.504,246.181 598.073,244.346 598.641,245.622 599.209,246.962 599.778,242.947 600.346,243.189 600.914,245.313 601.483,245.462 602.051,245.763 602.619,243.826 603.188,240.99 603.756,239.55 604.325,237.991 604.893,238.647 605.461,238.24 606.03,240.04 606.598,239.682 607.166,241.141 607.735,240.463 608.303,241.06 608.871,241.479 609.44,240.004 610.008,239.278 610.576,240.741 611.145,239.162 611.713,239.483 612.281,238.92 612.85,242.522 613.418,243.734 613.986,243.704 614.555,242.413 615.123,242.312 615.691,241.755 616.26,243.021 616.828,240.748 617.396,238.974 617.965,236.503 618.533,237.063 619.102,236.527 619.67,235.022 620.238,237.898 620.807,239.11 621.375,241.634 621.943,242.967 622.512,244.151 623.08,240.955 623.648,241.186 624.217,241.177 624.785,241.295 625.353,242.538 625.922,243.611 626.49,243.44 627.058,243.371 627.627,242.304 628.195,243.53 628.763,243.448 629.332,243.402 629.9,243.304 630.468,242.173 631.037,238.918 631.605,238.082 632.173,238.147 632.742,237.335 633.31,237.807 633.879,239.012 634.447,238.206 635.015,239.352 635.584,239.448 636.152,238.481 636.72,237.707 637.289,235.877 637.857,235.248 638.425,236.767 638.994,236.193 639.562,236.74 640.13,239.27 640.699,239.682 641.267,239.931 641.835,236.73 642.404,236.931 642.972,239.304 643.54,240.518 644.109,239.791 644.677,238.843 645.245,239.015 645.814,240.22 646.382,238.98 646.951,239.148 647.519,240.309 648.087,241.437 648.656,243.344 649.224,243.945 649.792,243.539 650.361,241.185 650.929,240.169 651.497,240.151 652.066,236.891 652.634,237.315 653.202,237.446 653.771,237.679 654.339,239.968 654.907,240.673 655.476,239.565 656.044,240.77 656.612,240.493 657.181,239.32 657.749,241.368 658.317,242.235 658.886,240.889 659.454,241.916 660.022,240.695 660.591,239.462 661.159,240.291 661.728,241.216 662.296,239.976 662.864,240.685 663.433,239.321 664.001,239.355 664.569,240.325 665.138,239.988 665.706,238.805 666.274,237.755 666.843,236.588 667.411,236.664 667.979,235.64 668.548,234.607 669.116,234.903 669.684,237.96 670.253,232.882 670.821,232.106 671.389,233.573 671.958,234.803 672.526,234.852 673.094,232.965 673.663,233.242 674.231,233.529 674.799,235.825 675.368,234.798 675.936,233.751 676.505,233.07 677.073,233.208 677.641,234.712 678.21,234.017 678.778,236.351 679.346,235.396 679.915,234.548 680.483,233.777 681.051,232.868 681.62,233.234 682.188,233.617 682.756,233.78 683.325,231.84 683.893,232.123 684.461,230.294 685.03,232.503 685.598,231.942 686.166,230.084 686.735,231.634 687.303,234.018 687.871,234.284 688.44,236.558 689.008,238.73 689.577,239.598 690.145,239.169 690.713,236.933 691.282,236.855 691.85,237.992 692.418,238.812 692.987,239.827 693.555,242.757 694.123,241.116 694.692,241.823 695.26,240.196 695.828,240.961 696.397,240.374 696.965,239.018 697.533,237.654 698.102,237.186 698.67,237.079 699.238,237.888 699.807,238.754 700.375,240.531 700.943,240.339 701.512,238.861 702.08,238.468 702.648,239.263 703.217,240.006 703.785,238.727 704.354,237.079 704.922,235.72 705.49,236.56 706.059,236.352 706.627,236.131 707.195,237.987 707.764,238.66 708.332,237.557 708.9,237.049 709.469,237.741 710.037,237.338 710.605,239.096 711.174,239.985 711.742,238.638 712.31,233.278 712.879,233.344 713.447,232.344 714.015,232.238 714.584,231.562 715.152,229.54 715.72,231.755 716.289,231.728 716.857,230.817 717.425,233.054 717.994,231.021 718.562,229.944 719.131,228.021 719.699,230.578 720.267,232.667 720.836,234.63 721.404,234.541 721.972,231.374 722.541,232.457 723.109,231.709 723.677,236.041 724.246,235.886 724.814,234.812 725.382,233.492 725.951,233.363 726.519,230.364 727.087,228.6 727.656,227.973 728.224,228.395 728.792,229.841 729.361,231.134 729.929,231.251 730.497,231.33 731.066,231.404 731.634,231.576 732.203,231.849 732.771,231.826 733.339,232.012 733.908,231.209 734.476,228.404 735.044,228.764 735.613,228.195 736.181,226.494 736.749,225.82 737.318,224.39 737.886,225.112 738.454,224.815 739.023,223.427 739.591,224.944 740.159,227.945 740.728,228.419 741.296,228.897 741.864,229.489 742.433,228.834 743.001,228.232 743.569,229.698 744.138,230.333 744.706,231.657 745.274,229.966 745.843,231.387 746.411,230.725 746.98,231.316 747.548,232.632 748.116,233.872 748.685,234.972 749.253,232.847 749.821,234.172 750.39,235.261 750.958,235.286 751.526,236.501 752.095,237.19 752.663,236.972 753.231,234.998 753.8,232.94 754.368,235.238 754.936,236.24 755.505,235.036 756.073,234.831 756.641,234.868 757.21,234.905 757.778,234.892 758.346,233.981 758.915,234.065 759.483,234.248 760.052,234.155 760.62,234.101 761.188,234.075 761.757,233.958 762.325,231.825 762.893,236.002 763.462,236.899 764.03,237.612 764.598,239.532 765.167,239.217 765.735,235.916 766.303,235.992 766.872,233.709 767.44,231.666 768.008,230.812 768.577,229.888 769.145,231.259 769.713,230.514 770.282,229.881 770.85,231.21 771.418,230.393 771.987,231.969 772.555,231.921 773.123,232.937 773.692,233.959 774.26,234.869 774.829,236.711 775.397,236.359 775.965,234.063 776.534,234.15 777.102,234.005 777.67,235.129 778.239,237.128 778.807,236.835 779.375,234.602 779.944,235.399 780.512,234.235 781.08,234.083 781.649,234.051 782.217,234.113 782.785,233.135 783.354,233.114 783.922,232.164 784.49,231.363 785.059,229.446 785.627,230.76 786.195,230.882 786.764,230.933 787.332,231.26 787.9,232.486 788.469,233.618 789.037,235.499 789.606,237.322 790.174,237.362 790.742,236.118 791.311,236.115 791.879,237.201 792.447,236.104 793.016,234.184 793.584,234.123 794.152,233.061 794.721,232.181 795.289,231.113 795.857,232.216 796.426,232.216 796.994,234.289 797.562,234.432 798.131,235.386 798.699,235.012 799.267,237.006 799.836,236.635 800.404,233.261 800.972,233.116 801.541,233.118 802.109,233.383 802.678,235.277 803.246,234.958 803.814,234.815 804.383,234.693 804.951,231.292 805.519,230.277 806.088,229.41 806.656,230.785 807.224,229.049 807.793,230.349 808.361,230.611 808.929,231.851 809.498,229.766 810.066,229.752 810.634,229.941 811.203,230.249 811.771,229.261 812.339,227.508 812.908,227.305 813.476,226.636 814.044,228.976 814.613,231.44 815.181,232.485 815.749,233.661 816.318,233.611 816.886,234.548 817.455,234.529 818.023,235.36 818.591,233.189 819.16,232.23 819.728,233.136 820.296,235.096 820.865,236.041 821.433,235.607 822.001,236.239 822.57,237.957 823.138,237.445 823.706,236.136 824.275,233.9 824.843,233.725 825.411,234.883 825.98,233.677 826.548,233.292 827.116,231.296 827.685,229.166 828.253,230.521 828.821,230.869 829.39,229.948 829.958,231.219 830.526,231.181 831.095,230.251 831.663,233.732 832.232,232.581 832.8,233.503 833.368,229.42 833.937,229.568 834.505,232.78 835.073,232.917 835.642,232.051 836.21,232.117 836.778,232.078 837.347,231.783 837.915,229.934 838.483,231.912 839.052,231.629 839.62,234.085 840.188,234.988 840.757,235.801 841.325,234.553 841.893,234.157 842.462,232.08 843.03,231.013 843.598,228.976 844.167,230.262 844.735,228.264 845.304,226.286 845.872,225.666 846.44,225.113 847.009,225.629 847.577,226.36 848.145,228.013 848.714,228.408 849.282,229.674 849.85,228.842 850.419,229.891 850.987,231.059 851.555,231.221 852.124,231.371 852.692,231.651 853.26,231.92 853.829,230.896 854.397,231.047 854.965,229.118 855.534,229.35 856.102,231.73 856.67,232.043 857.239,234.252 857.807,233.505 858.375,233.591 858.944,235.719 859.512,234.418 860.081,235.347 860.649,236.281 861.217,235.87 861.786,235.787 862.354,235.888 862.922,234.555 863.491,234.355 864.059,233.292 864.627,233.282 865.196,232.264 865.764,231.308 866.332,229.448 866.901,229.711 867.469,232.551 868.037,230.411 868.606,229.309 869.174,230.532 869.742,229.725 870.311,228.858 870.879,227.219 871.447,226.323 872.016,230.625 872.584,230.711 873.152,229.849 873.721,229.969 874.289,231.136 874.858,231.253 875.426,231.36 875.994,230.361 876.563,231.647 877.131,229.726 877.699,230.957 878.268,232.02 878.836,232.014 879.404,231.157 879.973,232.203 880.541,233.358 881.109,234.446 881.678,234.484 882.246,234.558 882.814,235.437 883.383,235.313 883.951,234.066 884.519,235.959 885.088,236.76 885.656,235.581 886.224,234.298 886.793,234.161 887.361,232.798 887.93,232.651 888.498,232.683 889.066,232.636 889.635,232.812 890.203,232.503 890.771,231.583 891.34,230.578 891.908,227.495 892.476,225.644 893.045,226.119 893.613,227.633 894.181,227.876 894.75,227.296 895.318,226.398 895.886,228.085 896.455,229.47 897.023,230.754 897.591,230.804 898.16,231.966 898.728,231.035 899.296,231.142 899.865,230.235 900.433,230.439 901.001,229.47 901.57,228.692 902.138,231.039 902.707,233.02 903.275,232.995 903.843,231.964 904.412,232.071 904.98,233.191 905.548,231.117 906.117,233.357 906.685,232.271 907.253,234.511 907.822,230.22 908.39,230.523 908.958,233.892 909.527,233.857 910.095,233.685 910.663,233.43 911.232,233.429 911.8,233.335 912.368,232.364 912.937,233.341 913.505,234.107 914.073,233.073 914.642,234.08 915.21,234.058 915.779,232.884 916.347,231.911 916.915,234.939 917.484,234.748 918.052,233.628 918.62,233.487 919.189,231.496 919.757,230.554 920.325,232.767 920.894,231.454 921.462,234.452 922.03,238.351 922.599,236.045 923.167,234.969 923.735,234.736 924.304,236.551 924.872,235.327 925.44,234.287 926.009,235.127 926.577,235.05 927.145,236.639 927.714,236.123 928.282,235.686 928.85,234.51 929.419,236.239 929.987,235.682 930.556,237.413 931.124,236.99 931.692,236.523 932.261,232.074 932.829,231.94 933.397,231.878 933.966,229.972 934.534,230.036 935.102,232.05 935.671,231.876 936.239,230.952 936.807,229.795 937.376,231.092 937.944,234.178 938.512,233.922 939.081,233.698 939.649,235.594 940.217,233.306 940.786,232.222 941.354,233.165 941.922,233.064 942.491,230.821 943.059,230.956 943.627,230.979 944.196,230.861 944.764,229.811 945.333,229.95 945.901,229.83 946.469,232.133 947.038,232.207 947.606,231.296 948.174,231.297 948.743,231.291 949.311,232.245 949.879,234.203 950.448,234.097 951.016,232.914 951.584,234.763 952.153,234.467 952.721,235.295 953.289,235.015 953.858,235.784 954.426,236.625 954.994,235.271 955.563,236.873 956.131,235.175 956.699,236.005 957.268,234.445 957.836,232.463 958.405,231.252 958.973,231.076 959.541,231.918 960.11,229.49 960.678,228.338 961.246,229.381 961.815,229.577 962.383,228.591 962.951,229.712 963.52,226.733 964.088,226.922 964.656,225.255 965.225,224.752 965.793,226.491 966.361,225.697 966.93,224.892 967.498,225.338 968.066,226.764 968.635,229.145 969.203,232.562 969.771,234.534 970.34,236.524 970.908,236.176 971.476,237.902 972.045,236.618 972.613,235.095 973.182,235.794 973.75,234.429 974.318,233.153 974.887,234.227 975.455,233.952 976.023,230.758 976.592,230.757 977.16,229.637 977.728,228.674 978.297,229.86 978.865,229.981 979.433,231.102 980.002,228.867 980.57,229.121 981.138,229.183 981.707,228.223 982.275,226.622 982.843,227.786 983.412,225.906 983.98,227.131 984.548,229.469 985.117,229.544 985.685,230.626 986.253,230.512 986.822,230.843 987.39,229.977 987.959,229.009 988.527,230.048 989.095,230.235 989.664,230.333 990.232,231.504 990.8,232.354 991.369,231.238 991.937,230.412 992.505,231.459 993.074,232.373 993.642,233.423 994.21,232.293 994.779,232.261 995.347,231.847 995.915,230.929 996.484,230.706 997.052,230.735 997.62,228.739 998.189,227.764 998.757,227.032 999.325,228.34 999.894,228.714 1000.46,225.79 1001.03,226.097 1001.6,225.397 1002.17,227.787 1002.74,228.13 1003.3,228.348 1003.87,229.779 1004.44,231.045 1005.01,233.334 1005.58,234.141 1006.15,234.123 1006.71,233.926 1007.28,233.914 1007.85,232.835 1008.42,234.047 1008.99,232.939 1009.56,232.896 1010.12,234.881 1010.69,234.54 1011.26,232.295 1011.83,233.375 1012.4,234.27 1012.97,232.9 1013.53,231.68 1014.1,231.839 1014.67,232.879 1015.24,231.905 1015.81,231.744 1016.38,231.855 1016.94,232.96 1017.51,233.892 1018.08,231.731 1018.65,232.831 1019.22,233.773 1019.79,234.792 1020.35,231.598 1020.92,231.474 1021.49,231.267 1022.06,232.372 1022.63,231.329 1023.2,229.492 1023.76,228.525 1024.33,228.8 1024.9,230.003 1025.47,230.303 1026.04,230.323 1026.61,229.282 1027.17,229.598 1027.74,228.789 1028.31,230.105 1028.88,230.095 1029.45,230.337 1030.02,230.359 1030.58,231.828 1031.15,231.728 1031.72,232.479 1032.29,234.63 1032.86,235.462 1033.43,236.339 1033.99,233.968 1034.56,232.985 1035.13,232.002 1035.7,232.166 1036.27,233.534 1036.84,235.362 1037.4,232.001 1037.97,233.008 1038.54,231.738 1039.11,232.634 1039.68,231.436 1040.25,229.6 1040.81,231.052 1041.38,231.396 1041.95,232.376 1042.52,231.273 1043.09,233.492 1043.66,233.437 1044.22,235.435 1044.79,233.14 1045.36,232.049 1045.93,232.155 1046.5,232.119 1047.07,231.979 1047.63,231.004 1048.2,229.057 1048.77,227.144 1049.34,228.675 1049.91,229.885 1050.48,227.994 1051.05,229.291 1051.61,226.365 1052.18,227.615 1052.75,226.83 1053.32,226.465 1053.89,225.957 1054.46,229.623 1055.02,228.826 1055.59,229.06 1056.16,229.977 1056.73,231.055 1057.3,231.153 1057.87,232.469 1058.43,231.613 1059,230.819 1059.57,231.944 1060.14,231.965 1060.71,232.905 1061.28,231.722 1061.84,233.989 1062.41,231.776 1062.98,231.951 1063.55,233.016 1064.12,232.076 1064.69,231.974 1065.25,231.835 1065.82,232.823 1066.39,235.875 1066.96,235.46 1067.53,235.941 1068.1,235.606 1068.66,234.179 1069.23,234.788 1069.8,234.591 1070.37,234.274 1070.94,234.142 1071.51,233.902 1072.07,234.858 1072.64,234.57 1073.21,234.247 1073.78,234.217 1074.35,234.211 1074.92,232.889 1075.48,233.926 1076.05,231.615 1076.62,231.53 1077.19,230.582 1077.76,231.65 1078.33,231.905 1078.89,231.907 1079.46,232.724 1080.03,230.763 1080.6,231.934 1081.17,230.024 1081.74,230.019 1082.3,231.966 1082.87,228.89 1083.44,227.972 1084.01,227.962 1084.58,224.996 1085.15,225.531 1085.71,227.994 1086.28,229.373 1086.85,230.62 1087.42,231.747 1087.99,232.743 1088.56,232.615 1089.12,233.569 1089.69,231.348 1090.26,231.291 1090.83,233.398 1091.4,234.196 1091.97,233.655 1092.53,232.532 1093.1,231.423 1093.67,232.456 1094.24,232.351 1094.81,232.328 1095.38,232.019 1095.94,232.063 1096.51,231.033 1097.08,229.95 1097.65,233.109 1098.22,232.008 1098.79,231.897 1099.35,234.024 1099.92,235.765 1100.49,241.657 1101.06,238.683 1101.63,236.997 1102.2,236.659 1102.76,237.479 1103.33,234.623 1103.9,231.383 1104.47,231.439 1105.04,233.447 1105.61,233.071 1106.17,230.603 1106.74,229.417 1107.31,227.194 1107.88,231.507 1108.45,231.591 1109.02,230.559 1109.58,232.567 1110.15,233.579 1110.72,232.549 1111.29,234.329 1111.86,233.894 1112.43,234.479 1112.99,234.201 1113.56,236.254 1114.13,235.87 1114.7,235.363 1115.27,231.974 1115.84,230.743 1116.4,231.757 1116.97,231.85 1117.54,233.629 1118.11,234.261 1118.68,233.966 1119.25,232.548 1119.81,232.571 1120.38,233.384 1120.95,234.133 1121.52,231.596 1122.09,231.399 1122.66,230.049 1123.23,228.033 1123.79,228.314 1124.36,227.576 1124.93,228.822 1125.5,228.992 1126.07,226.872 1126.64,223.092 1127.2,223.734 1127.77,226.278 1128.34,226.447 1128.91,226.794 1129.48,227.209 1130.05,227.594 1130.61,228.738 1131.18,227.831 1131.75,227.947 1132.32,226.22 1132.89,226.716 1133.46,225.924 1134.02,223.366 1134.59,221.107 1135.16,219.895 1135.73,224.864 1136.3,225.284 1136.87,225.899 1137.43,226.457 1138,226.93 1138.57,226.352 1139.14,224.769 1139.71,224.579 1140.28,225.143 1140.84,229.678 1141.41,232.003 1141.98,231.222 1142.55,233.264 1143.12,234.131 1143.69,235.105 1144.25,235.224 1144.82,237.089 1145.39,235.889 1145.96,234.766 1146.53,235.733 1147.1,235.776 1147.66,235.518 1148.23,237.305 1148.8,237.952 1149.37,237.619 1149.94,237.259 1150.51,235.049 1151.07,235.773 1151.64,235.567 1152.21,234.353 1152.78,233.18 1153.35,234.064 1153.92,232.707 1154.48,232.371 1155.05,233.458 1155.62,235.125 1156.19,233.824 1156.76,233.673 1157.33,232.638 1157.89,231.568 1158.46,229.398 1159.03,228.419 1159.6,228.534 1160.17,232.127 1160.74,233.141 1161.3,233.303 1161.87,234.027 1162.44,233.724 1163.01,233.626 1163.58,233.559 1164.15,232.439 1164.71,233.484 1165.28,234.645 1165.85,233.178 1166.42,230.976 1166.99,231.909 1167.56,228.885 1168.12,228.015 1168.69,229.285 1169.26,230.325 1169.83,232.236 1170.4,229.27 1170.97,227.623 1171.53,227.936 1172.1,228.069 1172.67,228.25 1173.24,228.59 1173.81,228.979 1174.38,229.111 1174.94,229.375 1175.51,228.447 1176.08,227.899 1176.65,227.157 1177.22,227.598 1177.79,230.957 1178.35,231.069 1178.92,232.413 1179.49,232.13 1180.06,231.078 1180.63,233.136 1181.2,230.064 1181.76,231.494 1182.33,229.597 1182.9,229.7 1183.47,229.964 1184.04,231.162 1184.61,230.09 1185.17,232.253 1185.74,230.193 1186.31,230.347 1186.88,229.385 1187.45,229.66 1188.02,228.845 1188.58,228.181 1189.15,229.359 1189.72,230.709 1190.29,234.853 1190.86,235.407 1191.43,235.2 1192,234.187 1192.56,233.925 1193.13,234.812 1193.7,234.615 1194.27,235.686 1194.84,236.541 1195.41,235.216 1195.97,237.048 1196.54,235.637 1197.11,235.444 1197.68,236.079 1198.25,236.628 1198.82,236.298 1199.38,234.037 1199.95,233.834 1200.52,232.759 1201.09,231.753 1201.66,231.638 1202.23,231.643 1202.79,232.646 1203.36,231.428 1203.93,231.249 1204.5,229.152 1205.07,228.385 1205.64,228.571 1206.2,230.705 1206.77,231.666 1207.34,231.68 1207.91,231.828 1208.48,231.839 1209.05,231.636 1209.61,229.508 1210.18,228.565 1210.75,231.891 1211.32,234.117 1211.89,233.008 1212.46,231.914 1213.02,232.919 1213.59,230.607 1214.16,230.679 1214.73,229.577 1215.3,229.774 1215.87,228.889 1216.43,230.197 1217,230.385 1217.57,229.315 1218.14,230.447 1218.71,232.489 1219.28,230.244 1219.84,230.148 1220.41,232.426 1220.98,234.32 1221.55,233.964 1222.12,234.714 1222.69,234.606 1223.25,233.522 1223.82,233.175 1224.39,228.978 1224.96,229.197 1225.53,229.311 1226.1,231.437 1226.66,232.27 1227.23,231.112 1227.8,229.044 1228.37,231.403 1228.94,229.121 1229.51,230.224 1230.07,231.16 1230.64,231.148 1231.21,230.197 1231.78,230.413 1232.35,232.56 1232.92,234.731 1233.48,235.333 1234.05,235.201 1234.62,235.005 1235.19,233.719 1235.76,231.692 1236.33,231.501 1236.89,232.545 1237.46,232.463 1238.03,231.246 1238.6,232.225 1239.17,232.112 1239.74,233.13 1240.3,233.013 1240.87,231.97 1241.44,233.059 1242.01,232.824 1242.58,232.617 1243.15,231.634 1243.71,231.542 1244.28,233.569 1244.85,231.52 1245.42,235.779 1245.99,236.633 1246.56,236.367 1247.12,237.163 1247.69,237.792 1248.26,237.106 1248.83,234.687 1249.4,235.318 1249.97,233.904 1250.53,234.823 1251.1,232.509 1251.67,232.344 1252.24,232.249 1252.81,231.034 1253.38,233.356 1253.94,232.014 1254.51,231.824 1255.08,232.584 1255.65,228.211 1256.22,228.431 1256.79,228.336 1257.35,230.328 1257.92,230.327 1258.49,229.468 1259.06,228.613 1259.63,229.804 1260.2,229.951 1260.76,228.004 1261.33,227.029 1261.9,226.159 1262.47,227.38 1263.04,229.02 1263.61,230.068 1264.18,229.953 1264.74,228.815 1265.31,230.974 1265.88,230.738 1266.45,230.598 1267.02,230.588 1267.59,230.466 1268.15,231.501 1268.72,231.371 1269.29,230.569 1269.86,230.482 1270.43,230.464 1271,230.49 1271.56,232.384 1272.13,232.268 1272.7,232.287 1273.27,234.158 1273.84,232.912 1274.41,233.821 1274.97,232.57 1275.54,232.545 1276.11,232.304 1276.68,230.318 1277.25,230.081 1277.82,231.034 1278.38,231.029 1278.95,230.098 1279.52,230.287 1280.09,231.485 1280.66,231.456 1281.23,229.41 1281.79,227.487 1282.36,225.527 1282.93,227.981 1283.5,227.172 1284.07,227.282 1284.64,227.653 1285.2,225.776 1285.77,226.188 1286.34,226.454 1286.91,226.884 1287.48,231.301 1288.05,230.4 1288.61,231.654 1289.18,230.77 1289.75,229.815 1290.32,228.921 1290.89,230.205 1291.46,229.376 1292.02,227.558 1292.59,229.097 1293.16,229.162 1293.73,227.375 1294.3,226.722 1294.87,225.734 1295.43,226.327 1296,226.77 1296.57,224.181 1297.14,227.912 1297.71,227.22 1298.28,228.729 1298.84,227.986 1299.41,229.518 1299.98,228.818 1300.55,229.154 1301.12,229.535 1301.69,226.818 1302.25,225.181 1302.82,226.75 1303.39,225.899 1303.96,227.354 1304.53,225.778 1305.1,227.23 1305.66,228.729 1306.23,227.114 1306.8,226.409 1307.37,227.103 1307.94,228.793 1308.51,229.148 1309.07,231.484 1309.64,232.961 1310.21,234.279 1310.78,233.004 1311.35,232.1 1311.92,233.243 1312.48,236.213 1313.05,237.179 1313.62,236.807 1314.19,237.574 1314.76,235.285 1315.33,235.978 1315.89,237.899 1316.46,237.651 1317.03,237.327 1317.6,237.041 1318.17,237.727 1318.74,237.489 1319.3,236.927 1319.87,235.594 1320.44,234.317 1321.01,233.241 1321.58,234.302 1322.15,234.195 1322.71,232.088 1323.28,232.063 1323.85,229.174 1324.42,231.252 1324.99,232.261 1325.56,230.283 1326.12,233.465 1326.69,234.415 1327.26,235.271 1327.83,235.078 1328.4,233.528 1328.97,234.613 1329.53,234.43 1330.1,237.342 1330.67,237.908 1331.24,237.572 1331.81,237.388 1332.38,238.196 1332.94,236.922 1333.51,235.469 1334.08,235.097 1334.65,235.706 1335.22,236.341 1335.79,237.295 1336.36,237.778 1336.92,236.323 1337.49,236.947 1338.06,238.632 1338.63,235.907 1339.2,234.406 1339.77,233.911 1340.33,233.861 1340.9,235.906 1341.47,234.635 1342.04,236.386 1342.61,235.04 1343.18,236.69 1343.74,237.127 1344.31,236.612 1344.88,235.089 1345.45,234.962 1346.02,237.794 1346.59,238.276 1347.15,237.445 1347.72,236.961 1348.29,237.566 1348.86,235.928 1349.43,235.403 1350,235.87 1350.56,234.375 1351.13,234.144 1351.7,235.598 1352.27,233.138 1352.84,232.886 1353.41,232.66 1353.97,233.466 1354.54,230.075 1355.11,226.953 1355.68,226.172 1356.25,225.311 1356.82,225.52 1357.38,227.922 1357.95,227.04 1358.52,226.387 1359.09,225.477 1359.66,224.679 1360.23,223.986 1360.79,227.219 1361.36,229.687 1361.93,230.595 1362.5,229.581 1363.07,229.538 1363.64,229.582 1364.2,227.615 1364.77,227.044 1365.34,225.036 1365.91,226.583 1366.48,226.895 1367.05,227.301 1367.61,228.619 1368.18,228.751 1368.75,228.861 1369.32,229.964 1369.89,230.104 1370.46,230.226 1371.02,230.379 1371.59,229.398 1372.16,229.642 1372.73,229.598 1373.3,229.882 1373.87,228.072 1374.43,226.47 1375,227.875 1375.57,227.164 1376.14,226.544 1376.71,226.77 1377.28,226.984 1377.84,228.487 1378.41,228.652 1378.98,228.836 1379.55,230.179 1380.12,230.285 1380.69,232.26 1381.25,231.371 1381.82,229.392 1382.39,229.446 1382.96,230.739 1383.53,231.666 1384.1,231.444 1384.66,233.422 1385.23,231.26 1385.8,231.121 1386.37,230.344 1386.94,231.323 1387.51,232.356 1388.07,229.268 1388.64,228.265 1389.21,229.519 1389.78,229.45 1390.35,230.635 1390.92,229.467 1391.48,230.443 1392.05,229.627 1392.62,230.622 1393.19,230.891 1393.76,231.126 1394.33,231.102 1394.89,229.103 1395.46,230.362 1396.03,231.653 1396.6,231.932 1397.17,233.066 1397.74,232.134 1398.3,232.142 1398.87,231.041 1399.44,228.846 1400.01,231.062 1400.58,232.101 1401.15,230.066 1401.71,231.127 1402.28,232.113 1402.85,232.848 1403.42,233.68 1403.99,231.521 1404.56,231.475 1405.13,229.542 1405.69,232.663 1406.26,233.655 1406.83,231.381 1407.4,230.237 1407.97,230.41 1408.54,230.263 1409.1,232.483 1409.67,232.439 1410.24,231.437 1410.81,232.488 1411.38,230.432 1411.95,231.559 1412.51,229.509 1413.08,228.667 1413.65,230.73 1414.22,230.938 1414.79,232.21 1415.36,231.13 1415.92,231.014 1416.49,229.954 1417.06,229.962 1417.63,232.284 1418.2,232.44 1418.77,232.497 1419.33,230.422 1419.9,232.474 1420.47,231.97 1421.04,232.048 1421.61,232.912 1422.18,230.753 1422.74,231.879 1423.31,233.191 1423.88,233.221 1424.45,235.236 1425.02,230.983 1425.59,231.296 1426.15,233.232 1426.72,233.284 1427.29,232.048 1427.86,231.862 1428.43,232.779 1429,231.655 1429.56,232.788 1430.13,231.795 1430.7,231.912 1431.27,234.813 1431.84,233.584 1432.41,233.226 1432.97,232.044 1433.54,230.919 1434.11,231.001 1434.68,232.932 1435.25,234.018 1435.82,235.854 1436.38,234.592 1436.95,235.295 1437.52,234.923 1438.09,235.378 1438.66,235.219 1439.23,236.153 1439.79,234.858 1440.36,234.451 1440.93,234.068 1441.5,235.786 1442.07,234.377 1442.64,231.86 1443.2,228.747 1443.77,228.526 1444.34,231.767 1444.91,231.635 1445.48,231.587 1446.05,230.621 1446.61,228.341 1447.18,227.548 1447.75,229.937 1448.32,227.141 1448.89,228.468 1449.46,228.777 1450.02,228.738 1450.59,228.913 1451.16,229.064 1451.73,227.272 1452.3,228.596 1452.87,229.887 1453.43,230.953 1454,234.052 1454.57,235.864 1455.14,233.322 1455.71,232.255 1456.28,232.982 1456.84,230.745 1457.41,229.744 1457.98,231.069 1458.55,231.997 1459.12,231.95 1459.69,232.81 1460.25,234.877 1460.82,234.77 1461.39,234.425 1461.96,233.186 1462.53,232.102 1463.1,232.953 1463.66,233.931 1464.23,233.729 1464.8,235.761 1465.37,236.4 1465.94,235.062 1466.51,235.572 1467.07,234.156 1467.64,234.905 1468.21,234.447 1468.78,233.981 1469.35,234.625 1469.92,234.471 1470.48,234.328 1471.05,237.029 1471.62,237.548 1472.19,236.035 1472.76,235.727 1473.33,238.344 1473.89,236.852 1474.46,236.476 1475.03,234.799 1475.6,232.185 1476.17,231.013 1476.74,230.751 1477.31,229.692 1477.87,228.658 1478.44,228.611 1479.01,227.608 1479.58,228.762 1480.15,228.721 1480.72,228.86 1481.28,228.9 1481.85,226.844 1482.42,227.226 1482.99,227.27 1483.56,227.32 1484.13,225.466 1484.69,226.725 1485.26,224.774 1485.83,224.443 1486.4,225.037 1486.97,227.757 1487.54,228.025 1488.1,229.131 1488.67,229.109 1489.24,230.184 1489.81,231.458 1490.38,233.488 1490.95,233.247 1491.51,234.079 1492.08,232.822 1492.65,234.795 1493.22,234.215 1493.79,232 1494.36,231.647 1494.92,232.681 1495.49,232.758 1496.06,231.872 1496.63,230.781 1497.2,231.885 1497.77,230.886 1498.33,230.799 1498.9,232.78 1499.47,233.489 1500.04,232.148 1500.61,232.133 1501.18,232.095 1501.74,230.911 1502.31,231.921 1502.88,231.756 1503.45,231.521 1504.02,231.427 1504.59,232.482 1505.15,230.223 1505.72,231.402 1506.29,229.317 1506.86,227.484 1507.43,227.613 1508,230.837 1508.56,230.632 1509.13,229.649 1509.7,229.869 1510.27,229.946 1510.84,228.916 1511.41,230.292 1511.97,232.299 1512.54,232.13 1513.11,232.077 1513.68,232.042 1514.25,230.81 1514.82,229.696 1515.38,230.673 1515.95,230.662 1516.52,229.656 1517.09,229.791 1517.66,230.097 1518.23,230.106 1518.79,229.083 1519.36,228.266 1519.93,227.389 1520.5,226.632 1521.07,226.922 1521.64,228.19 1522.2,231.392 1522.77,232.375 1523.34,231.325 1523.91,231.365 1524.48,231.389 1525.05,232.249 1525.61,231.05 1526.18,230.181 1526.75,227.077 1527.32,227.452 1527.89,225.726 1528.46,227.192 1529.02,228.548 1529.59,229.826 1530.16,231.907 1530.73,231.924 1531.3,231.819 1531.87,231.593 1532.43,230.597 1533,229.541 1533.57,230.586 1534.14,229.576 1534.71,231.027 1535.28,229.193 1535.84,229.394 1536.41,230.586 1536.98,231.448 1537.55,230.336 1538.12,229.548 1538.69,226.766 1539.25,228.121 1539.82,227.447 1540.39,227.734 1540.96,229.121 1541.53,227.193 1542.1,227.788 1542.66,229.229 1543.23,230.481 1543.8,229.419 1544.37,229.512 1544.94,229.513 1545.51,227.65 1546.08,227.846 1546.64,227.118 1547.21,228.43 1547.78,229.781 1548.35,229.104 1548.92,227.786 1549.49,227.964 1550.05,229.398 1550.62,230.508 1551.19,230.888 1551.76,230.938 1552.33,233.068 1552.9,230.097 1553.46,229.108 1554.03,229.461 1554.6,229.594 1555.17,227.514 1555.74,226.853 1556.31,228.233 1556.87,227.482 1557.44,224.767 1558.01,225.461 1558.58,225.135 1559.15,223.753 1559.72,223.538 1560.28,223.094 1560.85,224.071 1561.42,227.859 1561.99,229.522 1562.56,231.778 1563.13,234.946 1563.69,234.786 1564.26,233.713 1564.83,232.478 1565.4,233.62 1565.97,233.493 1566.54,234.65 1567.1,231.619 1567.67,232.884 1568.24,232.944 1568.81,233.98 1569.38,233.053 1569.95,233.173 1570.51,233.154 1571.08,233.135 1571.65,233.044 1572.22,235.163 1572.79,235.977 1573.36,235.724 1573.92,233.493 1574.49,235.739 1575.06,235.543 1575.63,237.537 1576.2,236.258 1576.77,235.929 1577.33,235.632 1577.9,234.332 1578.47,233.182 1579.04,234.363 1579.61,235.39 1580.18,235.298 1580.74,234.191 1581.31,231.944 1581.88,232.003 1582.45,231.853 1583.02,232.966 1583.59,233.053 1584.15,234.853 1584.72,231.487 1585.29,232.614 1585.86,235.541 1586.43,235.374 1587,236.231 1587.56,233.795 1588.13,231.588 1588.7,231.532 1589.27,232.164 1589.84,234.152 1590.41,233.879 1590.97,230.712 1591.54,231.54 1592.11,231.591 1592.68,230.341 1593.25,232.353 1593.82,233.253 1594.38,232.031 1594.95,231.976 1595.52,231.834 1596.09,232.848 1596.66,232.786 1597.23,233.782 1597.79,234.662 1598.36,235.469 1598.93,236.083 1599.5,234.967 1600.07,233.667 1600.64,235.448 1601.2,234.067 1601.77,233.956 1602.34,232.776 1602.91,232.638 1603.48,232.716 1604.05,232.425 1604.61,231.383 1605.18,231.377 1605.75,232.511 1606.32,234.386 1606.89,234.281 1607.46,236.193 1608.02,236.224 1608.59,233.987 1609.16,234.645 1609.73,235.533 1610.3,236.303 1610.87,236.066 1611.43,235.99 1612,235.692 1612.57,236.247 1613.14,234.647 1613.71,235.262 1614.28,235.035 1614.84,234.612 1615.41,233.557 1615.98,233.449 1616.55,234.175 1617.12,234.984 1617.69,233.816 1618.26,231.391 1618.82,231.196 1619.39,232.219 1619.96,233.141 1620.53,233.856 1621.1,233.621 1621.67,232.264 1622.23,232.144 1622.8,233.075 1623.37,233.004 1623.94,232.93 1624.51,230.755 1625.08,231.784 1625.64,232.908 1626.21,232.645 1626.78,232.453 1627.35,231.434 1627.92,230.393 1628.49,229.293 1629.05,230.437 1629.62,230.25 1630.19,234.351 1630.76,233.138 1631.33,233.061 1631.9,231.657 1632.46,233.587 1633.03,233.072 1633.6,232.067 1634.17,230.916 1634.74,231.927 1635.31,229.669 1635.87,229.624 1636.44,230.392 1637.01,228.271 1637.58,228.461 1638.15,227.636 1638.72,227.646 1639.28,226.9 1639.85,228.095 1640.42,226.24 1640.99,225.393 1641.56,226.693 1642.13,227.146 1642.69,227.493 1643.26,230.577 1643.83,229.552 1644.4,227.585 1644.97,227.903 1645.54,231.255 1646.1,230.309 1646.67,228.296 1647.24,229.437 1647.81,228.601 1648.38,227.65 1648.95,226.774 1649.51,228.174 1650.08,228.244 1650.65,230.184 1651.22,229.192 1651.79,229.381 1652.36,229.519 1652.92,228.481 1653.49,228.671 1654.06,229.958 1654.63,230.987 1655.2,231.046 1655.77,231.157 1656.33,231.238 1656.9,231.077 1657.47,230.999 1658.04,232.877 1658.61,233.793 1659.18,234.545 1659.74,236.389 1660.31,234.144 1660.88,233.861 1661.45,233.59 1662.02,232.451 1662.59,232.377 1663.15,232.195 1663.72,231.038 1664.29,230.014 1664.86,230.067 1665.43,231.182 1666,231.439 1666.56,231.506 1667.13,231.367 1667.7,231.437 1668.27,233.456 1668.84,233.463 1669.41,233.38 1669.97,233.397 1670.54,232.387 1671.11,232.403 1671.68,231.164 1672.25,231.223 1672.82,230.209 1673.38,231.395 1673.95,232.422 1674.52,233.406 1675.09,231.043 1675.66,231.003 1676.23,232.212 1676.79,230.118 1677.36,230.134 1677.93,232.295 1678.5,231.108 1679.07,233.211 1679.64,231.123 1680.2,232.188 1680.77,229.959 1681.34,229.042 1681.91,226.999 1682.48,224.203 1683.05,222.571 1683.61,224.303 1684.18,226.735 1684.75,226.108 1685.32,225.485 1685.89,224.986 1686.46,224.377 1687.02,227.098 1687.59,228.737 1688.16,229.009 1688.73,228.309 1689.3,230.451 1689.87,231.616 1690.44,230.749 1691,230.864 1691.57,230.941 1692.14,231.88 1692.71,230.089 1693.28,230.29 1693.85,230.423 1694.41,230.593 1694.98,230.658 1695.55,230.854 1696.12,230.959 1696.69,230.169 1697.26,232.274 1697.82,232.539 1698.39,233.515 1698.96,232.353 1699.53,230.29 1700.1,229.596 1700.67,227.719 1701.23,232.155 1701.8,233.18 1702.37,232.131 1702.94,229.034 1703.51,228.221 1704.08,228.417 1704.64,228.679 1705.21,228.746 1705.78,229.025 1706.35,230.272 1706.92,229.344 1707.49,229.549 1708.05,230.972 1708.62,234.938 1709.19,233.739 1709.76,233.646 1710.33,236.717 1710.9,236.492 1711.46,236.258 1712.03,232.608 1712.6,231.375 1713.17,231.297 1713.74,233.39 1714.31,232.391 1714.87,230.056 1715.44,230.243 1716.01,231.397 1716.58,232.414 1717.15,232.535 1717.72,230.461 1718.28,229.619 1718.85,229.734 1719.42,228.896 1719.99,229.099 1720.56,229.312 1721.13,231.668 1721.69,230.626 1722.26,232.906 1722.83,232.871 1723.4,233.757 1723.97,234.537 1724.54,233.415 1725.1,233.286 1725.67,233.285 1726.24,232.098 1726.81,231.31 1727.38,231.21 1727.95,230.293 1728.51,231.414 1729.08,231.393 1729.65,231.627 1730.22,232.618 1730.79,231.585 1731.36,233.492 1731.92,235.384 1732.49,237.057 1733.06,237.797 1733.63,238.528 1734.2,237.047 1734.77,236.681 1735.33,236.235 1735.9,235.801 1736.47,234.63 1737.04,234.628 1737.61,234.248 1738.18,232.968 1738.74,234.827 1739.31,233.383 1739.88,233.042 1740.45,230.876 1741.02,229.722 1741.59,230.548 1742.15,230.697 1742.72,228.705 1743.29,231.062 1743.86,231.217 1744.43,231.476 1745,234.548 1745.56,234.396 1746.13,235.99 1746.7,237.86 1747.27,236.417 1747.84,235.868 1748.41,236.567 1748.97,233.282 1749.54,232.136 1750.11,230.007 1750.68,229.015 1751.25,230.222 1751.82,230.207 1752.38,228.277 1752.95,228.441 1753.52,227.674 1754.09,224.878 1754.66,225.429 1755.23,225.875 1755.79,225.293 1756.36,225.604 1756.93,225.993 1757.5,229.479 1758.07,229.576 1758.64,230.616 1759.21,230.762 1759.77,232.685 1760.34,232.348 1760.91,230.108 1761.48,227.145 1762.05,226.374 1762.62,227.725 1763.18,227.206 1763.75,229.473 1764.32,228.659 1764.89,228.2 1765.46,229.439 1766.03,226.669 1766.59,229.072 1767.16,230.292 1767.73,230.378 1768.3,228.341 1768.87,228.579 1769.44,228.58 1770,227.693 1770.57,226.908 1771.14,228.19 1771.71,228.355 1772.28,229.598 1772.85,230.764 1773.41,232.925 1773.98,233.875 1774.55,233.705 1775.12,234.496 1775.69,235.351 1776.26,235.286 1776.82,234.055 1777.39,232.95 1777.96,230.864 1778.53,229.733 1779.1,232.184 1779.67,233.1 1780.23,230.735 1780.8,231.653 1781.37,230.482 1781.94,230.493 1782.51,230.711 1783.08,229.859 1783.64,231.29 1784.21,231.413 1784.78,232.471 1785.35,231.208 1785.92,230.372 1786.49,230.333 1787.05,230.403 1787.62,230.612 1788.19,232.474 1788.76,232.669 1789.33,232.686 1789.9,232.503 1790.46,233.463 1791.03,234.607 1791.6,232.216 1792.17,232.253 1792.74,232.263 1793.31,233.333 1793.87,232.491 1794.44,231.25 1795.01,229.264 1795.58,228.41 1796.15,225.641 1796.72,226.176 1797.28,224.496 1797.85,224.146 1798.42,225.895 1798.99,228.287 1799.56,228.608 1800.13,228.863 1800.69,226.146 1801.26,226.52 1801.83,229.018 1802.4,231.37 1802.97,230.228 1803.54,231.476 1804.1,233.544 1804.67,231.398 1805.24,233.555 1805.81,235.576 1806.38,236.45 1806.95,236.181 1807.51,239.158 1808.08,238.848 1808.65,239.499 1809.22,239.141 1809.79,238.815 1810.36,237.385 1810.92,237.213 1811.49,236.981 1812.06,236.778 1812.63,236.649 1813.2,235.317 1813.77,235.129 1814.33,233.173 1814.9,231.942 1815.47,234.198 1816.04,233.854 1816.61,235.506 1817.18,236.017 1817.74,234.606 1818.31,231.157 1818.88,232.185 1819.45,232.213 1820.02,235.27 1820.59,234.956 1821.15,235.687 1821.72,232.295 1822.29,231.197 1822.86,229.193 1823.43,227.231 1824,226.683 1824.56,227.156 1825.13,229.61 1825.7,227.645 1826.27,229.158 1826.84,228.31 1827.41,228.631 1827.97,227.875 1828.54,229.169 1829.11,229.647 1829.68,228.741 1830.25,227.979 1830.82,229.25 1831.39,230.494 1831.95,230.565 1832.52,230.803 1833.09,231.756 1833.66,233.797 1834.23,233.719 1834.8,231.415 1835.36,228.275 1835.93,230.505 1836.5,227.513 1837.07,229.78 1837.64,231.976 1838.21,232.665 1838.77,233.636 1839.34,234.6 1839.91,234.192 1840.48,230.045 1841.05,231.326 1841.62,233.677 1842.18,233.41 1842.75,233.991 1843.32,233.675 1843.89,233.467 1844.46,233.334 1845.03,233.213 1845.59,234.057 1846.16,234.007 1846.73,233.984 1847.3,230.787 1847.87,232.071 1848.44,234.173 1849,234.011 1849.57,234.828 1850.14,234.768 1850.71,233.423 1851.28,233.35 1851.85,234.006 1852.41,233.751 1852.98,232.736 1853.55,233.572 1854.12,234.296 1854.69,234.028 1855.26,232.891 1855.82,231.703 1856.39,229.358 1856.96,228.468 1857.53,230.839 1858.1,229.842 1858.67,231.078 1859.23,231.117 1859.8,231.846 1860.37,229.814 1860.94,233.157 1861.51,235.28 1862.08,235.066 1862.64,235.789 1863.21,234.39 1863.78,234 1864.35,232.493 1864.92,234.361 1865.49,237.323 1866.05,237.793 1866.62,238.508 1867.19,238.721 1867.76,236.988 1868.33,236.589 1868.9,235.062 1869.46,232.459 1870.03,232.278 1870.6,233.109 1871.17,232.65 1871.74,231.5 1872.31,231.374 1872.87,229.225 1873.44,229.398 1874.01,228.558 1874.58,229.783 1875.15,228.748 1875.72,230.114 1876.28,230.057 1876.85,228.73 1877.42,226.716 1877.99,227.947 1878.56,229.068 1879.13,224.223 1879.69,225.623 1880.26,225.921 1880.83,225.403 1881.4,225.7 1881.97,227.062 1882.54,228.381 1883.1,229.54 1883.67,230.715 1884.24,229.672 1884.81,228.689 1885.38,225.754 1885.95,227.211 1886.51,226.455 1887.08,227.839 1887.65,226.123 1888.22,225.618 1888.79,225.936 1889.36,229.453 1889.92,229.575 1890.49,229.714 1891.06,229.042 1891.63,227.85 1892.2,230.101 1892.77,231.185 1893.33,230.318 1893.9,230.358 1894.47,230.462 1895.04,229.461 1895.61,228.605 1896.18,229.84 1896.74,229.905 1897.31,229.914 1897.88,230.044 1898.45,230.087 1899.02,230.342 1899.59,230.318 1900.16,230.489 1900.72,230.826 1901.29,230.836 1901.86,230.984 1902.43,231.07 1903,234.134 1903.57,234.156 1904.13,236.027 1904.7,235.976 1905.27,237.71 1905.84,239.247 1906.41,239.493 1906.98,239.068 1907.54,237.399 1908.11,234.98 1908.68,235.808 1909.25,233.376 1909.82,230.443 1910.39,231.576 1910.95,233.52 1911.52,233.482 1912.09,235.379 1912.66,235.128 1913.23,234.824 1913.8,234.406 1914.36,235.016 1914.93,234.813 1915.5,234.61 1916.07,234.434 1916.64,232.952 1917.21,231.633 1917.77,232.662 1918.34,232.701 1918.91,233.633 1919.48,234.351 1920.05,235.096 1920.62,234.756 1921.18,233.53 1921.75,234.302 1922.32,233.981 1922.89,233.565 1923.46,234.44 1924.03,230.156 1924.59,232.157 1925.16,232.149 1925.73,230.09 1926.3,230.111 1926.87,230.15 1927.44,229.198 1928,229.447 1928.57,232.587 1929.14,234.487 1929.71,234.191 1930.28,230.794 1930.85,231.878 1931.41,230.755 1931.98,229.746 1932.55,226.771 1933.12,223.931 1933.69,221.179 1934.26,222.875 1934.82,222.299 1935.39,224.967 1935.96,225.447 1936.53,228.107 1937.1,229.243 1937.67,230.506 1938.23,229.559 1938.8,226.696 1939.37,224.919 1939.94,226.41 1940.51,225.877 1941.08,228.51 1941.64,226.619 1942.21,226.949 1942.78,227.392 1943.35,229.555 1943.92,227.838 1944.49,229.136 1945.05,231.517 1945.62,231.784 1946.19,232.077 1946.76,232.965 1947.33,233.954 1947.9,232.826 1948.46,234.634 1949.03,234.566 1949.6,233.551 1950.17,234.685 1950.74,235.286 1951.31,234.061 1951.87,233.997 1952.44,233.814 1953.01,232.478 1953.58,234.423 1954.15,234.998 1954.72,234.787 1955.28,234.705 1955.85,235.674 1956.42,234.407 1956.99,233.238 1957.56,234.203 1958.13,234.089 1958.69,232.855 1959.26,233.617 1959.83,236.576 1960.4,236.155 1960.97,233.859 1961.54,233.527 1962.1,234.191 1962.67,234.811 1963.24,234.513 1963.81,234.196 1964.38,236.85 1964.95,234.153 1965.51,233.854 1966.08,231.624 1966.65,231.604 1967.22,229.368 1967.79,230.622 1968.36,230.621 1968.92,231.737 1969.49,229.316 1970.06,229.576 1970.63,228.574 1971.2,228.87 1971.77,229.817 1972.34,229.767 1972.9,230.121 1973.47,228.187 1974.04,228.465 1974.61,229.535 1975.18,228.41 1975.75,226.588 1976.31,223.794 1976.88,227.46 1977.45,227.79 1978.02,226.906 1978.59,227.215 1979.16,226.654 1979.72,227.199 1980.29,227.442 1980.86,226.571 1981.43,226.082 1982,225.52 1982.57,228.071 1983.13,229.449 1983.7,232.852 1984.27,232.805 1984.84,232.709 1985.41,230.637 1985.98,229.749 1986.54,232.952 1987.11,233.04 1987.68,232.823 1988.25,231.571 1988.82,230.369 1989.39,231.492 1989.95,232.554 1990.52,232.504 1991.09,230.252 1991.66,230.123 1992.23,231.246 1992.8,231.148 1993.36,234.326 1993.93,235.224 1994.5,235.046 1995.07,235.884 1995.64,234.504 1996.21,233.465 1996.77,234.123 1997.34,237.705 1997.91,237.155 1998.48,238.568 1999.05,236.796 1999.62,235.304 2000.18,234 2000.75,233.743 2001.32,231.48 2001.89,229.343 2002.46,229.232 2003.03,230.441 2003.59,229.561 2004.16,228.586 2004.73,229.958 2005.3,228.939 2005.87,230.118 2006.44,232.144 2007,231.89 2007.57,235.106 2008.14,235.708 2008.71,235.363 2009.28,236.099 2009.85,235.765 2010.41,235.407 2010.98,234.992 2011.55,233.556 2012.12,235.4 2012.69,236.071 2013.26,235.573 2013.82,234.016 2014.39,232.611 2014.96,232.67 2015.53,232.589 2016.1,232.369 2016.67,234.403 2017.23,235.021 2017.8,234.725 2018.37,234.335 2018.94,231.782 2019.51,231.649 2020.08,230.589 2020.64,228.456 2021.21,230.485 2021.78,230.349 2022.35,230.403 2022.92,230.314 2023.49,232.238 2024.05,231.097 2024.62,233.094 2025.19,230.619 2025.76,231.577 2026.33,231.299 2026.9,227.042 2027.46,226.327 2028.03,225.522 2028.6,226.95 2029.17,227.28 2029.74,227.482 2030.31,226.59 2030.87,227.162 2031.44,225.484 2032.01,224.87 2032.58,224.482 2033.15,226.042 2033.72,226.665 2034.28,225.188 2034.85,227.699 2035.42,228.916 2035.99,230.277 2036.56,230.399 2037.13,230.616 2037.69,230.785 2038.26,231.935 2038.83,232.032 2039.4,230.929 2039.97,231.02 2040.54,230.254 2041.11,232.496 2041.67,233.459 2042.24,233.328 2042.81,234.188 2043.38,233.091 2043.95,233.007 2044.52,233.032 2045.08,234.994 2045.65,233.707 2046.22,234.62 2046.79,234.218 2047.36,234.929 2047.93,234.643 2048.49,233.379 2049.06,233.517 2049.63,232.467 2050.2,232.379 2050.77,230.981 2051.34,230.125 2051.9,229.269 2052.47,229.579 2053.04,230.792 2053.61,230.913 2054.18,232.926 2054.75,236.6 2055.31,237.172 2055.88,236.847 2056.45,235.478 2057.02,232.312 2057.59,230.223 2058.16,230.509 2058.72,230.595 2059.29,230.663 2059.86,229.8 2060.43,229.705 2061,230.81 2061.57,229.657 2062.13,231.033 2062.7,229.099 2063.27,229.191 2063.84,229.001 2064.41,228.217 2064.98,226.378 2065.54,230.569 2066.11,231.66 2066.68,231.481 2067.25,230.44 2067.82,229.23 2068.39,228.189 2068.95,228.399 2069.52,227.358 2070.09,228.717 2070.66,229.002 2071.23,230.328 2071.8,231.363 2072.36,230.388 2072.93,227.353 2073.5,226.37 2074.07,225.71 2074.64,224.104 2075.21,224.889 2075.77,223.524 2076.34,224.272 2076.91,227.059 2077.48,227.537 2078.05,226.863 2078.62,228.363 2079.18,230.74 2079.75,230.95 2080.32,232.018 2080.89,232.168 2081.46,231.161 2082.03,230.129 2082.59,232.433 2083.16,232.646 2083.73,233.488 2084.3,234.575 2084.87,235.452 2085.44,235.209 2086,236.893 2086.57,235.433 2087.14,234.066 2087.71,234.939 2088.28,233.778 2088.85,233.608 2089.41,233.411 2089.98,233.198 2090.55,233.246 2091.12,232.204 2091.69,231.194 2092.26,231.183 2092.82,232.483 2093.39,231.451 2093.96,229.353 2094.53,229.67 2095.1,231.813 2095.67,232.002 2096.23,232.142 2096.8,231.108 2097.37,229.966 2097.94,228.142 2098.51,229.577 2099.08,228.626 2099.64,228.885 2100.21,229.116 2100.78,231.438 2101.35,231.382 2101.92,232.714 2102.49,231.707 2103.05,231.637 2103.62,231.775 2104.19,231.088 2104.76,232.225 2105.33,232.074 2105.9,232.864 2106.46,232.702 2107.03,234.788 2107.6,232.699 2108.17,232.968 2108.74,233.646 2109.31,236.787 2109.87,235.417 2110.44,235.112 2111.01,234.973 2111.58,238.817 2112.15,239.458 2112.72,238.804 2113.29,236.123 2113.85,236.729 2114.42,236.336 2114.99,235.952 2115.56,235.629 2116.13,235.522 2116.7,239.34 2117.26,238.689 2117.83,236.229 2118.4,231.747 2118.97,232.364 2119.54,232.264 2120.11,230.105 2120.67,231.231 2121.24,233.04 2121.81,232.896 2122.38,232.511 2122.95,233.354 2123.52,235.415 2124.08,235.033 2124.65,238.834 2125.22,239.175 2125.79,236.393 2126.36,235.03 2126.93,235.651 2127.49,234.245 2128.06,233.945 2128.63,230.559 2129.2,229.484 2129.77,228.508 2130.34,227.62 2130.9,226.766 2131.47,225.864 2132.04,227.132 2132.61,227.634 2133.18,227.59 2133.75,227.818 2134.31,226.124 2134.88,226.365 2135.45,230.667 2136.02,232.69 2136.59,231.418 2137.16,229.055 2137.72,232.109 2138.29,231.758 2138.86,230.436 2139.43,229.369 2140,227.293 2140.57,227.505 2141.13,227.689 2141.7,226.95 2142.27,229.237 2142.84,231.426 2143.41,232.398 2143.98,232.185 2144.54,231.27 2145.11,228.353 2145.68,229.573 2146.25,229.381 2146.82,226.483 2147.39,225.833 2147.95,226.169 2148.52,225.688 2149.09,226.311 2149.66,228.427 2150.23,227.439 2150.8,228.932 2151.36,229.318 2151.93,228.334 2152.5,228.665 2153.07,228.969 2153.64,228.189 2154.21,226.424 2154.77,224.922 2155.34,227.417 2155.91,228.917 2156.48,229.282 2157.05,229.282 2157.62,228.375 2158.18,228.556 2158.75,229.784 2159.32,228.716 2159.89,226.799 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.023\n  with uncertainty of ± 0.0020598700523713747\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01753 ± (0.00192959, 0.00196685) (MC)\n  95% confidence interval: [-4.02156, -4.01361]) (MC)\n  linear error propagation: -4.01773 ± 0.00205066\n  |δ_y| = |0.00131024| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017525174093465, val_l = 0.004032122843418584, val_u = 0.003914842963305354)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.72 2211.02,1146.72 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,986.495 2211.02,986.495 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,826.274 2211.02,826.274 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,666.054 2211.02,666.054 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,505.833 2211.02,505.833 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,345.612 2211.02,345.612 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.72 365.751,1146.72 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,986.495 365.751,986.495 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,826.274 365.751,826.274 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,666.054 365.751,666.054 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,505.833 365.751,505.833 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,345.612 365.751,345.612 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M298.909 1132.51 Q295.298 1132.51 293.469 1136.08 Q291.664 1139.62 291.664 1146.75 Q291.664 1153.86 293.469 1157.42 Q295.298 1160.96 298.909 1160.96 Q302.543 1160.96 304.349 1157.42 Q306.177 1153.86 306.177 1146.75 Q306.177 1139.62 304.349 1136.08 Q302.543 1132.51 298.909 1132.51 M298.909 1128.81 Q304.719 1128.81 307.775 1133.42 Q310.853 1138 310.853 1146.75 Q310.853 1155.48 307.775 1160.08 Q304.719 1164.67 298.909 1164.67 Q293.099 1164.67 290.02 1160.08 Q286.964 1155.48 286.964 1146.75 Q286.964 1138 290.02 1133.42 Q293.099 1128.81 298.909 1128.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M259.557 999.839 L267.196 999.839 L267.196 973.474 L258.886 975.14 L258.886 970.881 L267.15 969.215 L271.826 969.215 L271.826 999.839 L279.465 999.839 L279.465 1003.77 L259.557 1003.77 L259.557 999.839 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 972.293 Q295.298 972.293 293.469 975.858 Q291.664 979.4 291.664 986.529 Q291.664 993.636 293.469 997.201 Q295.298 1000.74 298.909 1000.74 Q302.543 1000.74 304.349 997.201 Q306.177 993.636 306.177 986.529 Q306.177 979.4 304.349 975.858 Q302.543 972.293 298.909 972.293 M298.909 968.59 Q304.719 968.59 307.775 973.196 Q310.853 977.779 310.853 986.529 Q310.853 995.256 307.775 999.863 Q304.719 1004.45 298.909 1004.45 Q293.099 1004.45 290.02 999.863 Q286.964 995.256 286.964 986.529 Q286.964 977.779 290.02 973.196 Q293.099 968.59 298.909 968.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M262.775 839.619 L279.094 839.619 L279.094 843.554 L257.15 843.554 L257.15 839.619 Q259.812 836.864 264.395 832.235 Q269.002 827.582 270.182 826.239 Q272.428 823.716 273.307 821.98 Q274.21 820.221 274.21 818.531 Q274.21 815.776 272.266 814.04 Q270.344 812.304 267.242 812.304 Q265.043 812.304 262.59 813.068 Q260.159 813.832 257.381 815.383 L257.381 810.661 Q260.205 809.526 262.659 808.948 Q265.113 808.369 267.15 808.369 Q272.52 808.369 275.715 811.054 Q278.909 813.739 278.909 818.23 Q278.909 820.36 278.099 822.281 Q277.312 824.179 275.205 826.772 Q274.627 827.443 271.525 830.661 Q268.423 833.855 262.775 839.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 812.073 Q295.298 812.073 293.469 815.638 Q291.664 819.179 291.664 826.309 Q291.664 833.415 293.469 836.98 Q295.298 840.522 298.909 840.522 Q302.543 840.522 304.349 836.98 Q306.177 833.415 306.177 826.309 Q306.177 819.179 304.349 815.638 Q302.543 812.073 298.909 812.073 M298.909 808.369 Q304.719 808.369 307.775 812.976 Q310.853 817.559 310.853 826.309 Q310.853 835.036 307.775 839.642 Q304.719 844.225 298.909 844.225 Q293.099 844.225 290.02 839.642 Q286.964 835.036 286.964 826.309 Q286.964 817.559 290.02 812.976 Q293.099 808.369 298.909 808.369 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M272.914 664.699 Q276.27 665.417 278.145 667.685 Q280.043 669.954 280.043 673.287 Q280.043 678.403 276.525 681.204 Q273.006 684.005 266.525 684.005 Q264.349 684.005 262.034 683.565 Q259.742 683.148 257.289 682.292 L257.289 677.778 Q259.233 678.912 261.548 679.491 Q263.863 680.07 266.386 680.07 Q270.784 680.07 273.076 678.334 Q275.39 676.597 275.39 673.287 Q275.39 670.232 273.238 668.519 Q271.108 666.783 267.289 666.783 L263.261 666.783 L263.261 662.94 L267.474 662.94 Q270.923 662.94 272.752 661.574 Q274.58 660.185 274.58 657.593 Q274.58 654.931 272.682 653.519 Q270.807 652.084 267.289 652.084 Q265.367 652.084 263.168 652.5 Q260.969 652.917 258.33 653.797 L258.33 649.63 Q260.992 648.889 263.307 648.519 Q265.645 648.149 267.705 648.149 Q273.029 648.149 276.131 650.579 Q279.233 652.986 279.233 657.107 Q279.233 659.977 277.59 661.968 Q275.946 663.935 272.914 664.699 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 651.852 Q295.298 651.852 293.469 655.417 Q291.664 658.959 291.664 666.088 Q291.664 673.195 293.469 676.759 Q295.298 680.301 298.909 680.301 Q302.543 680.301 304.349 676.759 Q306.177 673.195 306.177 666.088 Q306.177 658.959 304.349 655.417 Q302.543 651.852 298.909 651.852 M298.909 648.149 Q304.719 648.149 307.775 652.755 Q310.853 657.338 310.853 666.088 Q310.853 674.815 307.775 679.421 Q304.719 684.005 298.909 684.005 Q293.099 684.005 290.02 679.421 Q286.964 674.815 286.964 666.088 Q286.964 657.338 290.02 652.755 Q293.099 648.149 298.909 648.149 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M271.594 492.627 L259.789 511.076 L271.594 511.076 L271.594 492.627 M270.367 488.553 L276.247 488.553 L276.247 511.076 L281.177 511.076 L281.177 514.965 L276.247 514.965 L276.247 523.113 L271.594 523.113 L271.594 514.965 L255.992 514.965 L255.992 510.451 L270.367 488.553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 491.632 Q295.298 491.632 293.469 495.196 Q291.664 498.738 291.664 505.868 Q291.664 512.974 293.469 516.539 Q295.298 520.081 298.909 520.081 Q302.543 520.081 304.349 516.539 Q306.177 512.974 306.177 505.868 Q306.177 498.738 304.349 495.196 Q302.543 491.632 298.909 491.632 M298.909 487.928 Q304.719 487.928 307.775 492.534 Q310.853 497.118 310.853 505.868 Q310.853 514.594 307.775 519.201 Q304.719 523.784 298.909 523.784 Q293.099 523.784 290.02 519.201 Q286.964 514.594 286.964 505.868 Q286.964 497.118 290.02 492.534 Q293.099 487.928 298.909 487.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M258.793 328.332 L277.15 328.332 L277.15 332.268 L263.076 332.268 L263.076 340.74 Q264.094 340.393 265.113 340.231 Q266.131 340.045 267.15 340.045 Q272.937 340.045 276.316 343.217 Q279.696 346.388 279.696 351.805 Q279.696 357.383 276.224 360.485 Q272.752 363.564 266.432 363.564 Q264.256 363.564 261.988 363.193 Q259.742 362.823 257.335 362.082 L257.335 357.383 Q259.418 358.517 261.641 359.073 Q263.863 359.629 266.34 359.629 Q270.344 359.629 272.682 357.522 Q275.02 355.416 275.02 351.805 Q275.02 348.193 272.682 346.087 Q270.344 343.98 266.34 343.98 Q264.465 343.98 262.59 344.397 Q260.738 344.814 258.793 345.693 L258.793 328.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 331.411 Q295.298 331.411 293.469 334.976 Q291.664 338.518 291.664 345.647 Q291.664 352.754 293.469 356.318 Q295.298 359.86 298.909 359.86 Q302.543 359.86 304.349 356.318 Q306.177 352.754 306.177 345.647 Q306.177 338.518 304.349 334.976 Q302.543 331.411 298.909 331.411 M298.909 327.707 Q304.719 327.707 307.775 332.314 Q310.853 336.897 310.853 345.647 Q310.853 354.374 307.775 358.98 Q304.719 363.564 298.909 363.564 Q293.099 363.564 290.02 358.98 Q286.964 354.374 286.964 345.647 Q286.964 336.897 290.02 332.314 Q293.099 327.707 298.909 327.707 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1028.66 400.199,920.203 400.786,942.783 401.372,843.515 401.958,756.13 402.545,674.642 403.131,604.167 403.718,535.984 404.304,475.791 404.891,419.557 405.477,456.261 406.063,406.292 406.65,361.325 407.236,322.665 407.823,354.794 408.409,319.873 408.995,347.508 409.582,317.781 410.168,291.644 410.755,269.65 411.341,249.954 411.927,233.182 412.514,219.895 413.1,246.568 413.687,235.231 414.273,226.653 414.86,251.443 415.446,245.657 416.032,241.759 416.619,240.108 417.205,239.902 417.792,241.462 418.378,244.053 418.964,268.094 419.551,273.027 420.137,279.668 420.724,320.692 421.31,341.116 421.896,345.609 422.483,379.298 423.069,400.142 423.656,408.473 424.242,417.165 424.829,437.132 425.415,456.828 426.001,467.375 426.588,486.895 427.174,506.15 427.761,524.709 428.347,535.299 428.933,569.044 429.52,579.231 430.106,610.247 430.693,620.056 431.279,648.947 431.865,669.816 432.452,684.486 433.038,693.083 433.625,706.99 434.211,715.303 434.798,723.99 435.384,737.638 435.97,746.185 436.557,763.896 437.143,785.211 437.73,801.245 438.316,816.502 438.902,827.583 439.489,837.874 440.075,848.13 440.662,861.681 441.248,878.197 441.835,897.431 442.421,905.707 443.007,917.357 443.594,927.931 444.18,935.414 444.767,943.053 445.353,950.585 445.939,966.568 446.526,976.537 447.112,989.242 447.699,995.949 448.285,1002.46 448.871,1014.29 449.458,1020.86 450.044,1024.44 450.631,1032.76 451.217,1040.68 451.804,1046.24 452.39,1051.37 452.976,1056.54 453.563,1066.3 454.149,1071.2 454.736,1074.04 455.322,1081.47 455.908,1084.45 456.495,1091.54 457.081,1096.62 457.668,1101.3 458.254,1107.74 458.84,1110.29 459.427,1116.08 460.013,1121.97 460.6,1131.96 461.186,1139.53 461.773,1142.7 462.359,1142.01 462.945,1143.75 463.532,1150.67 464.118,1157.47 464.705,1156.79 465.291,1159.69 465.877,1160.75 466.464,1162 467.05,1165.16 467.637,1166.6 468.223,1169.71 468.809,1170.7 469.396,1168.72 469.982,1173.37 470.569,1174.48 471.155,1175.63 471.742,1180.38 472.328,1183.07 472.914,1185.74 473.501,1186.81 474.087,1189.32 474.674,1188.75 475.26,1189.99 475.846,1190.98 476.433,1190.12 477.019,1192.94 477.606,1194.18 478.192,1198.31 478.778,1200.59 479.365,1203.17 479.951,1205.51 480.538,1209.05 481.124,1209.65 481.711,1211.55 482.297,1210.63 482.883,1211.01 483.47,1214.5 484.056,1216.51 484.643,1221.06 485.229,1219.67 485.815,1216.95 486.402,1217.65 486.988,1222.33 487.575,1223.88 488.161,1222.8 488.748,1227.34 489.334,1231.58 489.92,1232.55 490.507,1232.03 491.093,1231.59 491.68,1232.88 492.266,1234.01 492.852,1236.44 493.439,1237.39 494.025,1239.76 494.612,1237.64 495.198,1235.59 495.784,1235.43 496.371,1233.51 496.957,1234.58 497.544,1239.77 498.13,1240.31 498.717,1238.59 499.303,1242.25 499.889,1245.76 500.476,1246.35 501.062,1243.92 501.649,1245.86 502.235,1245.04 502.821,1245.38 503.408,1244.47 503.994,1245.19 504.581,1244.31 505.167,1243.86 505.753,1243.23 506.34,1239.93 506.926,1242.22 507.513,1244.26 508.099,1243.51 508.686,1241.64 509.272,1246.38 509.858,1244.01 510.445,1243.53 511.031,1245.7 511.618,1246.4 512.204,1244.26 512.79,1243.69 513.377,1244.38 513.963,1245.14 514.55,1247.38 515.136,1247.9 515.722,1249.8 516.309,1250.5 516.895,1248.24 517.482,1247.4 518.068,1246.42 518.655,1245.68 519.241,1249.01 519.827,1249.49 520.414,1249.96 521,1250.43 521.587,1250.53 522.173,1249.6 522.759,1248.63 523.346,1247.54 523.932,1246.67 524.519,1245.88 525.105,1244.87 525.691,1245.95 526.278,1244.17 526.864,1247.31 527.451,1249.22 528.037,1249.6 528.624,1249.67 529.21,1248.65 529.796,1246.14 530.383,1242.56 530.969,1241.8 531.556,1239.77 532.142,1240.62 532.728,1240.28 533.315,1239.75 533.901,1240.44 534.488,1239.87 535.074,1240.68 535.661,1240.03 536.247,1236.85 536.833,1237.79 537.42,1237.37 538.006,1237.03 538.593,1242.1 539.179,1244.26 539.765,1246.53 540.352,1248.39 540.938,1246.12 541.525,1243.73 542.111,1241.77 542.697,1242.37 543.284,1240.46 543.87,1239.88 544.457,1239.42 545.043,1241.23 545.63,1242.12 546.216,1240.3 546.802,1242.29 547.389,1240.32 547.975,1238.24 548.562,1243.02 549.148,1242.42 549.734,1239.39 550.321,1238.85 550.907,1238.11 551.494,1240.24 552.08,1243.57 552.666,1245.18 553.253,1246.97 553.839,1245.97 554.426,1246.31 555.012,1243.83 555.599,1244.08 556.185,1242 556.771,1242.62 557.358,1241.63 557.944,1240.86 558.531,1242.49 559.117,1243.21 559.703,1241.14 560.29,1242.93 560.876,1242.32 561.463,1242.84 562.049,1238.04 562.635,1236.2 563.222,1235.93 563.808,1237.28 564.395,1237.14 564.981,1237.58 565.568,1235.7 566.154,1238.32 566.74,1240.36 567.327,1243.33 567.913,1242.49 568.5,1243.03 569.086,1244.82 569.672,1241.06 570.259,1239.35 570.845,1235.93 571.432,1233.96 572.018,1232.15 572.605,1235.93 573.191,1235.4 573.777,1235.16 574.364,1234.77 574.95,1232.93 575.537,1231.27 576.123,1231.18 576.709,1230.97 577.296,1232.04 577.882,1230.2 578.469,1230 579.055,1229.76 579.641,1229.58 580.228,1230.74 580.814,1234.64 581.401,1235.52 581.987,1235.27 582.574,1236.14 583.16,1235.39 583.746,1233.69 584.333,1234.53 584.919,1232.89 585.506,1232.57 586.092,1233.61 586.678,1234.42 587.265,1236.6 587.851,1237.29 588.438,1235.26 589.024,1235.86 589.61,1235.04 590.197,1231.67 590.783,1230.95 591.37,1230.43 591.956,1234.31 592.543,1233.92 593.129,1230.75 593.715,1228.99 594.302,1229.7 594.888,1230.7 595.475,1230.3 596.061,1228.56 596.647,1229.93 597.234,1229.53 597.82,1227.85 598.407,1226.18 598.993,1223.48 599.579,1222.41 600.166,1222.62 600.752,1225.34 601.339,1226.39 601.925,1226.2 602.512,1230.15 603.098,1229.47 603.684,1229.16 604.271,1228.71 604.857,1225.62 605.444,1224.51 606.03,1225.69 606.616,1223.95 607.203,1224.07 607.789,1225.34 608.376,1222.52 608.962,1221.16 609.548,1222.62 610.135,1221.06 610.721,1222.37 611.308,1223.71 611.894,1222.45 612.481,1221.04 613.067,1222.39 613.653,1221.26 614.24,1222.78 614.826,1222.54 615.413,1221.1 615.999,1221.31 616.585,1222.61 617.172,1223.77 617.758,1225.1 618.345,1224.87 618.931,1226.05 619.518,1227.26 620.104,1226.8 620.69,1222.81 621.277,1229.13 621.863,1230.07 622.45,1228.19 623.036,1226.57 623.622,1226.43 624.209,1228.74 624.795,1228.35 625.382,1227.94 625.968,1224.96 626.554,1226.16 627.141,1227.41 627.727,1228.22 628.314,1228 628.9,1226.04 629.487,1226.85 630.073,1223.81 630.659,1224.9 631.246,1225.88 631.832,1226.79 632.419,1227.89 633.005,1227.38 633.591,1226.85 634.178,1226.59 634.764,1229 635.351,1228.63 635.937,1230.93 636.523,1228.15 637.11,1228.84 637.696,1231.19 638.283,1229.25 638.869,1226.21 639.456,1225.81 640.042,1222.84 640.628,1219.94 641.215,1218.64 641.801,1218.99 642.388,1221.65 642.974,1221.62 643.56,1220.03 644.147,1218.81 644.733,1217.33 645.32,1213.36 645.906,1215.18 646.492,1214.03 647.079,1215.86 647.665,1214.66 648.252,1215.17 648.838,1216.69 649.425,1218.24 650.011,1218.68 650.597,1218.68 651.184,1217.5 651.77,1216.23 652.357,1213.77 652.943,1213.79 653.529,1215.46 654.116,1215.78 654.702,1214.58 655.289,1213.44 655.875,1214.86 656.462,1216.78 657.048,1218.38 657.634,1217.2 658.221,1217.33 658.807,1217.49 659.394,1215 659.98,1213.98 660.566,1215.21 661.153,1215.71 661.739,1214.68 662.326,1215.04 662.912,1212.64 663.498,1211.31 664.085,1212.82 664.671,1219.48 665.258,1219.35 665.844,1220.57 666.431,1220.68 667.017,1221.52 667.603,1224.09 668.19,1221.32 668.776,1221.35 669.363,1222.5 669.949,1219.67 670.535,1222.21 671.122,1223.59 671.708,1226.06 672.295,1222.91 672.881,1220.27 673.467,1217.74 674.054,1217.78 674.64,1221.73 675.227,1220.35 675.813,1221.28 676.4,1215.75 676.986,1215.84 677.572,1217.1 678.159,1218.69 678.745,1218.8 679.332,1222.57 679.918,1224.83 680.504,1225.69 681.091,1225.24 681.677,1223.49 682.264,1221.89 682.85,1221.74 683.436,1221.65 684.023,1221.56 684.609,1221.34 685.196,1220.99 685.782,1221.01 686.369,1220.76 686.955,1221.76 687.541,1225.33 688.128,1224.95 688.714,1225.73 689.301,1227.96 689.887,1228.94 690.473,1230.88 691.06,1230.15 691.646,1230.68 692.233,1232.59 692.819,1230.88 693.405,1227.25 693.992,1226.73 694.578,1226.2 695.165,1225.51 695.751,1226.39 696.338,1227.22 696.924,1225.44 697.51,1224.68 698.097,1223.02 698.683,1225.16 699.27,1223.4 699.856,1224.24 700.442,1223.51 701.029,1221.84 701.615,1220.23 702.202,1218.77 702.788,1221.38 703.375,1219.66 703.961,1218.2 704.547,1218.08 705.134,1216.43 705.72,1215.42 706.307,1215.56 706.893,1217.94 707.479,1220.47 708.066,1217.5 708.652,1216.13 709.239,1217.55 709.825,1217.72 710.411,1217.59 710.998,1217.45 711.584,1217.38 712.171,1218.46 712.757,1218.29 713.344,1217.99 713.93,1218.03 714.516,1218.03 715.103,1218 715.689,1218.08 716.276,1220.73 716.862,1215.41 717.448,1214.15 718.035,1213.1 718.621,1210.49 719.208,1210.69 719.794,1214.71 720.38,1214.5 720.967,1217.3 721.553,1219.84 722.14,1220.92 722.726,1222.1 723.313,1220.4 723.899,1221.35 724.485,1222.18 725.072,1220.53 725.658,1221.57 726.245,1219.6 726.831,1219.64 727.417,1218.34 728.004,1217 728.59,1215.78 729.177,1213.34 729.763,1213.66 730.349,1216.46 730.936,1216.29 731.522,1216.41 732.109,1214.91 732.695,1212.26 733.282,1212.5 733.868,1215.21 734.454,1214.11 735.041,1215.5 735.627,1215.62 736.214,1215.6 736.8,1215.45 737.386,1216.63 737.973,1216.61 738.559,1217.78 739.146,1218.78 739.732,1221.21 740.318,1219.59 740.905,1219.46 741.491,1219.4 742.078,1219 742.664,1217.45 743.251,1215.98 743.837,1213.53 744.423,1211.1 745.01,1210.9 745.596,1212.34 746.183,1212.23 746.769,1210.73 747.355,1211.98 747.942,1214.31 748.528,1214.32 749.115,1215.61 749.701,1216.68 750.288,1218.02 750.874,1216.63 751.46,1216.61 752.047,1213.95 752.633,1213.7 753.22,1212.41 753.806,1212.78 754.392,1210.15 754.979,1210.49 755.565,1214.66 756.152,1214.79 756.738,1214.75 757.324,1214.37 757.911,1211.91 758.497,1212.22 759.084,1212.31 759.67,1212.38 760.257,1216.63 760.843,1217.92 761.429,1219.05 762.016,1217.35 762.602,1219.57 763.189,1217.98 763.775,1217.67 764.361,1216.12 764.948,1218.76 765.534,1218.81 766.121,1218.62 766.707,1218.26 767.293,1219.55 767.88,1221.82 768.466,1222.17 769.053,1223.12 769.639,1220.28 770.226,1217.21 770.812,1215.89 771.398,1214.36 771.985,1214.37 772.571,1213.12 773.158,1213.07 773.744,1211.93 774.33,1214.6 774.917,1215.77 775.503,1214.6 776.09,1212.06 776.676,1210.77 777.262,1211.2 777.849,1210.29 778.435,1207.98 779.022,1208.47 779.608,1209.99 780.195,1212.72 780.781,1212.89 781.367,1211.35 781.954,1212.8 782.54,1213.24 783.127,1215.73 783.713,1218.43 784.299,1216.77 784.886,1216.35 785.472,1217.53 786.059,1215.96 786.645,1216.01 787.232,1217.2 787.818,1212.8 788.404,1214.21 788.991,1213.01 789.577,1218.14 790.164,1218 790.75,1213.97 791.336,1213.76 791.923,1214.83 792.509,1214.73 793.096,1214.76 793.682,1215.12 794.268,1217.46 794.855,1214.98 795.441,1215.33 796.028,1212.2 796.614,1210.98 797.201,1209.86 797.787,1211.34 798.373,1211.76 798.96,1214.34 799.546,1215.68 800.133,1218.27 800.719,1216.7 801.305,1219.26 801.892,1221.84 802.478,1222.75 803.065,1223.6 803.651,1223.1 804.237,1222.32 804.824,1220.36 805.41,1219.94 805.997,1218.41 806.583,1219.51 807.17,1218.24 807.756,1216.8 808.342,1216.6 808.929,1216.42 809.515,1216.06 810.102,1215.72 810.688,1217 811.274,1216.82 811.861,1219.28 812.447,1219.04 813.034,1216.08 813.62,1215.67 814.206,1212.84 814.793,1213.73 815.379,1213.56 815.966,1210.8 816.552,1212.35 817.139,1211.09 817.725,1209.8 818.311,1210.2 818.898,1210.2 819.484,1209.96 820.071,1211.55 820.657,1211.73 821.243,1213.01 821.83,1212.97 822.416,1214.22 823.003,1215.41 823.589,1217.78 824.175,1217.49 824.762,1213.93 825.348,1216.62 825.935,1218.04 826.521,1216.54 827.108,1217.59 827.694,1218.73 828.28,1220.87 828.867,1222.11 829.453,1216.78 830.04,1216.69 830.626,1217.81 831.212,1217.69 831.799,1216.25 832.385,1216.11 832.972,1215.97 833.558,1217.24 834.145,1215.64 834.731,1218.07 835.317,1216.55 835.904,1215.21 836.49,1215.21 837.077,1216.28 837.663,1214.96 838.249,1213.47 838.836,1212.03 839.422,1211.91 840.009,1211.74 840.595,1210.54 841.181,1210.6 841.768,1212.09 842.354,1209.61 842.941,1208.48 843.527,1209.85 844.114,1211.38 844.7,1211.48 845.286,1213.15 845.873,1213.3 846.459,1213.23 847.046,1213.26 847.632,1213 848.218,1213.36 848.805,1214.5 849.391,1215.78 849.978,1219.7 850.564,1222.14 851.15,1221.68 851.737,1219.9 852.323,1219.69 852.91,1220.51 853.496,1221.75 854.083,1219.74 854.669,1218.07 855.255,1216.49 855.842,1216.44 856.428,1214.98 857.015,1216.15 857.601,1216.02 858.187,1217.18 858.774,1216.95 859.36,1218.21 859.947,1219.24 860.533,1216.33 861.119,1213.82 861.706,1213.82 862.292,1215.09 862.879,1214.94 863.465,1213.5 864.052,1216.09 864.638,1213.25 865.224,1214.58 865.811,1211.71 866.397,1217.09 866.984,1216.73 867.57,1212.47 868.156,1212.46 868.743,1212.62 869.329,1212.88 869.916,1212.83 870.502,1212.9 871.089,1214.09 871.675,1212.83 872.261,1211.8 872.848,1213.05 873.434,1211.73 874.021,1211.69 874.607,1213.12 875.193,1214.32 875.78,1210.45 876.366,1210.61 876.953,1211.95 877.539,1212.08 878.125,1214.56 878.712,1215.75 879.298,1212.96 879.885,1214.6 880.471,1210.78 881.058,1205.73 881.644,1208.5 882.23,1209.76 882.817,1209.97 883.403,1207.57 883.99,1209 884.576,1210.23 885.162,1209.09 885.749,1209.09 886.335,1206.98 886.922,1207.51 887.508,1207.95 888.094,1209.34 888.681,1207.06 889.267,1207.65 889.854,1205.33 890.44,1205.72 891.027,1206.18 891.613,1211.72 892.199,1211.87 892.786,1211.94 893.372,1214.35 893.959,1214.3 894.545,1211.78 895.131,1211.98 895.718,1213.15 896.304,1214.63 896.891,1213.02 897.477,1209.1 898.063,1209.36 898.65,1209.59 899.236,1207.11 899.823,1209.92 900.409,1211.25 900.996,1210.04 901.582,1210.12 902.168,1212.93 902.755,1212.77 903.341,1212.76 903.928,1212.92 904.514,1214.26 905.1,1214.13 905.687,1214.31 906.273,1211.43 906.86,1211.32 907.446,1212.46 908.032,1212.46 908.619,1212.47 909.205,1211.26 909.792,1208.75 910.378,1208.81 910.965,1210.25 911.551,1207.86 912.137,1208.16 912.724,1207.02 913.31,1207.29 913.897,1206.22 914.483,1205.03 915.069,1206.63 915.656,1204.49 916.242,1206.52 916.829,1205.37 917.415,1207.24 918.002,1209.69 918.588,1211.2 919.174,1211.43 919.761,1210.37 920.347,1213.44 920.934,1214.95 921.52,1213.7 922.106,1213.5 922.693,1214.8 923.279,1213.45 923.866,1217.26 924.452,1217.14 925.038,1219.36 925.625,1220.15 926.211,1218.12 926.798,1219.24 927.384,1220.4 927.971,1220 928.557,1218.35 929.143,1215.45 929.73,1211.17 930.316,1208.63 930.903,1206.02 931.489,1206.33 932.075,1204.01 932.662,1205.49 933.248,1207.3 933.835,1206.32 934.421,1207.95 935.007,1209.5 935.594,1208.09 936.18,1208.37 936.767,1212.36 937.353,1212.38 937.94,1213.82 938.526,1215.08 939.112,1213.65 939.699,1213.54 940.285,1212.15 940.872,1214.99 941.458,1214.73 942.044,1214.71 942.631,1215.98 943.217,1218.09 943.804,1216.73 944.39,1219.2 944.976,1217.79 945.563,1214.94 946.149,1214.89 946.736,1213.56 947.322,1213.73 947.909,1213.33 948.495,1214.45 949.081,1215.71 949.668,1214.45 950.254,1214.25 950.841,1214.15 951.427,1212.69 952.013,1211.61 952.6,1213.01 953.186,1214.06 953.773,1212.76 954.359,1211.59 954.945,1210.23 955.532,1211.62 956.118,1211.64 956.705,1212.14 957.291,1213.3 957.878,1213.6 958.464,1213.58 959.05,1216.12 959.637,1217.43 960.223,1218.44 960.81,1216.9 961.396,1216.5 961.982,1220.27 962.569,1220.02 963.155,1221.03 963.742,1218.16 964.328,1217.82 964.915,1217.62 965.501,1215.89 966.087,1214.32 966.674,1211.42 967.26,1210.35 967.847,1210.3 968.433,1210.49 969.019,1210.44 969.606,1211.75 970.192,1210.17 970.779,1211.52 971.365,1211.53 971.951,1208.97 972.538,1209.32 973.124,1212.1 973.711,1210.7 974.297,1209.51 974.884,1211.19 975.47,1212.7 976.056,1212.49 976.643,1211.16 977.229,1212.36 977.816,1212.55 978.402,1212.4 978.988,1210.99 979.575,1209.76 980.161,1212.45 980.748,1211.04 981.334,1209.81 981.92,1208.45 982.507,1212.43 983.093,1212.59 983.68,1212.85 984.266,1211.45 984.853,1212.75 985.439,1215.08 986.025,1216.36 986.612,1216.08 987.198,1214.62 987.785,1214.28 988.371,1214.28 988.957,1215.62 989.544,1215.28 990.13,1216.35 990.717,1214.75 991.303,1214.79 991.889,1214.52 992.476,1214.52 993.062,1212.68 993.649,1212.79 994.235,1211.83 994.822,1209.07 995.408,1207.93 995.994,1206.71 996.581,1209.61 997.167,1210.79 997.754,1212.01 998.34,1211.78 998.926,1210.02 999.513,1207.64 1000.1,1211.82 1000.69,1210.53 1001.27,1212.1 1001.86,1210.96 1002.44,1212.45 1003.03,1214.78 1003.62,1212.98 1004.2,1212.55 1004.79,1211.31 1005.38,1212.69 1005.96,1209.87 1006.55,1209.89 1007.14,1207.29 1007.72,1210.12 1008.31,1211.46 1008.9,1211.31 1009.48,1211.34 1010.07,1211.5 1010.65,1212.72 1011.24,1215.2 1011.83,1217.68 1012.41,1215.85 1013,1214.38 1013.59,1216.82 1014.17,1215.26 1014.76,1219.02 1015.35,1217.56 1015.93,1218.65 1016.52,1219.23 1017.11,1219.99 1017.69,1215.49 1018.28,1216.54 1018.86,1216.31 1019.45,1215.21 1020.04,1213.87 1020.62,1213.76 1021.21,1212.09 1021.8,1213.16 1022.38,1214.16 1022.97,1212.74 1023.56,1212.7 1024.14,1211.5 1024.73,1212.96 1025.32,1210.07 1025.9,1212.82 1026.49,1212.59 1027.07,1211.22 1027.66,1212.38 1028.25,1212.49 1028.83,1212.66 1029.42,1211.39 1030.01,1207.47 1030.59,1207.89 1031.18,1207.17 1031.77,1207.49 1032.35,1209.2 1032.94,1208.36 1033.52,1208.52 1034.11,1208.85 1034.7,1208.94 1035.28,1209.18 1035.87,1207.9 1036.46,1208.18 1037.04,1208.52 1037.63,1208.48 1038.22,1208.42 1038.8,1210.03 1039.39,1208.68 1039.98,1211.55 1040.56,1211.66 1041.15,1212.86 1041.73,1211.52 1042.32,1211.19 1042.91,1211.18 1043.49,1210.13 1044.08,1212.59 1044.67,1211.12 1045.25,1213.53 1045.84,1213.57 1046.43,1211.13 1047.01,1215.02 1047.6,1216.25 1048.19,1216.35 1048.77,1220.18 1049.36,1219.67 1049.94,1216.7 1050.53,1215.04 1051.12,1213.51 1051.7,1212.09 1052.29,1210.82 1052.88,1210.95 1053.46,1209.71 1054.05,1212.48 1054.64,1212.55 1055.22,1209.88 1055.81,1208.81 1056.39,1209.43 1056.98,1210.8 1057.57,1212.19 1058.15,1210.87 1058.74,1210.98 1059.33,1210.99 1059.91,1211.36 1060.5,1211.29 1061.09,1212.58 1061.67,1213.96 1062.26,1209.99 1062.85,1211.34 1063.43,1211.47 1064.02,1208.75 1064.6,1206.47 1065.19,1198.82 1065.78,1202.38 1066.36,1204.35 1066.95,1204.64 1067.54,1203.46 1068.12,1206.96 1068.71,1211 1069.3,1210.93 1069.88,1208.38 1070.47,1208.8 1071.06,1211.9 1071.64,1213.42 1072.23,1216.29 1072.81,1210.93 1073.4,1210.82 1073.99,1212.12 1074.57,1209.59 1075.16,1208.28 1075.75,1209.53 1076.33,1207.24 1076.92,1207.72 1077.51,1206.91 1078.09,1207.19 1078.68,1204.51 1079.26,1204.88 1079.85,1205.41 1080.44,1209.63 1081.02,1211.18 1081.61,1209.91 1082.2,1209.78 1082.78,1207.51 1083.37,1206.65 1083.96,1206.95 1084.54,1208.69 1085.13,1208.63 1085.72,1207.57 1086.3,1206.57 1086.89,1209.73 1087.47,1209.97 1088.06,1211.69 1088.65,1214.28 1089.23,1214.01 1089.82,1215.02 1090.41,1213.53 1090.99,1213.38 1091.58,1216.13 1092.17,1221.01 1092.75,1220.41 1093.34,1217.39 1093.93,1217.3 1094.51,1216.99 1095.1,1216.58 1095.68,1216.2 1096.27,1214.84 1096.86,1216.06 1097.44,1216 1098.03,1218.27 1098.62,1217.77 1099.2,1218.89 1099.79,1222.25 1100.38,1225.3 1100.96,1227.08 1101.55,1221.11 1102.14,1220.74 1102.72,1220.11 1103.31,1219.55 1103.89,1219.07 1104.48,1219.91 1105.07,1222.04 1105.65,1222.44 1106.24,1221.9 1106.83,1216.32 1107.41,1213.41 1108,1214.39 1108.59,1211.8 1109.17,1210.65 1109.76,1209.34 1110.34,1209.1 1110.93,1206.62 1111.52,1208.01 1112.1,1209.33 1112.69,1208.02 1113.28,1207.86 1113.86,1208.08 1114.45,1205.69 1115.04,1204.72 1115.62,1204.98 1116.21,1205.29 1116.8,1207.96 1117.38,1206.95 1117.97,1207.1 1118.55,1208.54 1119.14,1209.96 1119.73,1208.8 1120.31,1210.46 1120.9,1210.85 1121.49,1209.45 1122.07,1207.27 1122.66,1208.84 1123.25,1208.97 1123.83,1210.23 1124.42,1211.56 1125.01,1214.31 1125.59,1215.6 1126.18,1215.53 1126.76,1211.04 1127.35,1209.73 1127.94,1209.49 1128.52,1208.52 1129.11,1208.84 1129.7,1208.91 1130.28,1208.94 1130.87,1210.31 1131.46,1208.95 1132.04,1207.42 1132.63,1209.21 1133.21,1211.97 1133.8,1210.79 1134.39,1214.62 1134.97,1215.78 1135.56,1214.26 1136.15,1212.99 1136.73,1210.59 1137.32,1214.34 1137.91,1216.48 1138.49,1216.17 1139.08,1216.09 1139.67,1215.95 1140.25,1215.59 1140.84,1215.17 1141.42,1215.07 1142.01,1214.79 1142.6,1216.02 1143.18,1216.78 1143.77,1217.81 1144.36,1217.36 1144.94,1213.19 1145.53,1213.06 1146.12,1211.36 1146.7,1211.7 1147.29,1213.02 1147.88,1210.41 1148.46,1214.27 1149.05,1212.49 1149.63,1214.9 1150.22,1214.81 1150.81,1214.52 1151.39,1213.03 1151.98,1214.4 1152.57,1211.69 1153.15,1214.28 1153.74,1214.12 1154.33,1215.36 1154.91,1215.07 1155.5,1216.14 1156.09,1217.05 1156.67,1215.64 1157.26,1213.98 1157.84,1208.72 1158.43,1207.93 1159.02,1208.1 1159.6,1209.29 1160.19,1209.56 1160.78,1208.37 1161.36,1208.53 1161.95,1207.09 1162.54,1205.89 1163.12,1207.45 1163.71,1205.02 1164.29,1206.68 1164.88,1206.82 1165.47,1205.91 1166.05,1205.09 1166.64,1205.38 1167.23,1208.15 1167.81,1208.34 1168.4,1209.65 1168.99,1210.89 1169.57,1211.03 1170.16,1211.02 1170.75,1209.74 1171.33,1211.25 1171.92,1211.48 1172.5,1214.15 1173.09,1215.17 1173.68,1215.01 1174.26,1212.38 1174.85,1211.18 1175.44,1211.15 1176.02,1210.96 1176.61,1210.93 1177.2,1211.18 1177.78,1213.88 1178.37,1215.12 1178.96,1210.97 1179.54,1208.13 1180.13,1209.47 1180.71,1210.82 1181.3,1209.53 1181.89,1212.43 1182.47,1212.36 1183.06,1213.78 1183.65,1213.57 1184.23,1214.74 1184.82,1213.14 1185.41,1212.93 1185.99,1214.32 1186.58,1212.93 1187.16,1210.36 1187.75,1213.19 1188.34,1213.34 1188.92,1210.48 1189.51,1208.04 1190.1,1208.42 1190.68,1207.41 1191.27,1207.46 1191.86,1208.76 1192.44,1209.15 1193.03,1214.44 1193.62,1214.22 1194.2,1214.13 1194.79,1211.49 1195.37,1210.43 1195.96,1211.88 1196.55,1214.51 1197.13,1211.57 1197.72,1214.47 1198.31,1213.13 1198.89,1211.97 1199.48,1211.99 1200.07,1213.21 1200.65,1212.96 1201.24,1210.26 1201.83,1207.47 1202.41,1206.62 1203,1206.69 1203.58,1206.84 1204.17,1208.39 1204.76,1210.91 1205.34,1211.15 1205.93,1209.82 1206.52,1209.9 1207.1,1211.42 1207.69,1210.18 1208.28,1210.3 1208.86,1208.99 1209.45,1209.1 1210.03,1210.38 1210.62,1208.98 1211.21,1209.24 1211.79,1209.47 1212.38,1210.69 1212.97,1210.8 1213.55,1208.22 1214.14,1210.77 1214.73,1205.35 1215.31,1204.15 1215.9,1204.36 1216.49,1203.22 1217.07,1202.27 1217.66,1202.99 1218.24,1205.93 1218.83,1205.05 1219.42,1206.75 1220,1205.52 1220.59,1208.38 1221.18,1208.56 1221.76,1208.66 1222.35,1210.18 1222.94,1207.24 1223.52,1208.9 1224.11,1209.13 1224.7,1208.15 1225.28,1213.67 1225.87,1213.47 1226.45,1213.67 1227.04,1211.22 1227.63,1211.25 1228.21,1212.36 1228.8,1213.5 1229.39,1212.06 1229.97,1211.91 1230.56,1214.41 1231.15,1215.73 1231.73,1216.94 1232.32,1215.53 1232.91,1213.55 1233.49,1212.28 1234.08,1212.46 1234.66,1213.94 1235.25,1211.27 1235.84,1211.58 1236.42,1211.77 1237.01,1211.81 1237.6,1211.98 1238.18,1210.69 1238.77,1210.86 1239.36,1211.88 1239.94,1212.01 1240.53,1212.05 1241.11,1212.04 1241.7,1209.66 1242.29,1209.78 1242.87,1209.74 1243.46,1207.34 1244.05,1208.85 1244.63,1207.66 1245.22,1209.19 1245.81,1209.2 1246.39,1209.47 1246.98,1211.97 1247.57,1212.3 1248.15,1211.13 1248.74,1211.14 1249.32,1212.33 1249.91,1212.13 1250.5,1210.63 1251.08,1210.67 1251.67,1213.26 1252.26,1215.75 1252.84,1218.33 1253.43,1215.37 1254.02,1216.48 1254.6,1216.44 1255.19,1216.08 1255.78,1218.55 1256.36,1218.16 1256.95,1217.96 1257.53,1217.54 1258.12,1212.05 1258.71,1213.2 1259.29,1211.63 1259.88,1212.75 1260.47,1213.98 1261.05,1215.15 1261.64,1213.59 1262.23,1214.67 1262.81,1217.02 1263.4,1215.17 1263.98,1215.14 1264.57,1217.46 1265.16,1218.39 1265.74,1219.75 1266.33,1219.15 1266.92,1218.71 1267.5,1222.1 1268.09,1217.56 1268.68,1218.52 1269.26,1216.72 1269.85,1217.73 1270.44,1215.87 1271.02,1216.81 1271.61,1216.45 1272.19,1216.02 1272.78,1219.51 1273.37,1221.69 1273.95,1219.86 1274.54,1221.05 1275.13,1219.35 1275.71,1221.44 1276.3,1219.75 1276.89,1217.96 1277.47,1220.07 1278.06,1221.06 1278.65,1220.31 1279.23,1218.28 1279.82,1217.89 1280.4,1214.99 1280.99,1213.11 1281.58,1211.39 1282.16,1212.94 1282.75,1214.05 1283.34,1212.58 1283.92,1208.76 1284.51,1207.4 1285.1,1207.73 1285.68,1206.62 1286.27,1209.39 1286.86,1208.41 1287.44,1205.84 1288.03,1205.99 1288.61,1206.25 1289.2,1206.47 1289.79,1205.45 1290.37,1205.6 1290.96,1206.17 1291.55,1207.73 1292.13,1209.25 1292.72,1210.55 1293.31,1209.16 1293.89,1209.22 1294.48,1211.83 1295.06,1211.85 1295.65,1215.5 1296.24,1212.92 1296.82,1211.64 1297.41,1214.13 1298,1210.12 1298.58,1208.85 1299.17,1207.69 1299.76,1207.84 1300.34,1209.72 1300.93,1208.29 1301.52,1208.44 1302.1,1204.65 1302.69,1203.78 1303.27,1204.05 1303.86,1204.13 1304.45,1202.95 1305.03,1204.41 1305.62,1206.12 1306.21,1206.5 1306.79,1205.63 1307.38,1204.71 1307.97,1203.37 1308.55,1202.61 1309.14,1204.31 1309.73,1203.39 1310.31,1201.1 1310.9,1204.4 1311.48,1206.2 1312.07,1206.75 1312.66,1206.76 1313.24,1204.09 1313.83,1205.6 1314.42,1203.28 1315,1204.88 1315.59,1202.68 1316.18,1201.99 1316.76,1202.51 1317.35,1204.32 1317.93,1204.39 1318.52,1200.69 1319.11,1199.91 1319.69,1200.8 1320.28,1201.27 1320.87,1200.36 1321.45,1202.3 1322.04,1202.85 1322.63,1202.16 1323.21,1203.95 1323.8,1204.17 1324.39,1202.25 1324.97,1205.28 1325.56,1205.56 1326.14,1205.81 1326.73,1204.76 1327.32,1209.01 1327.9,1213 1328.49,1214.1 1329.08,1215.32 1329.66,1215.2 1330.25,1212.31 1330.84,1213.52 1331.42,1214.45 1332.01,1215.73 1332.6,1216.88 1333.18,1217.92 1333.77,1214.02 1334.35,1211 1334.94,1209.89 1335.53,1211.2 1336.11,1211.3 1336.7,1211.29 1337.29,1213.83 1337.87,1214.65 1338.46,1217.29 1339.05,1215.5 1339.63,1215.22 1340.22,1214.82 1340.8,1213.25 1341.39,1213.16 1341.98,1213.08 1342.56,1211.75 1343.15,1211.61 1343.74,1211.49 1344.32,1211.32 1344.91,1212.59 1345.5,1212.33 1346.08,1212.43 1346.67,1212.12 1347.26,1214.45 1347.84,1216.56 1348.43,1214.9 1349.01,1215.89 1349.6,1216.78 1350.19,1216.62 1350.77,1216.46 1351.36,1214.67 1351.95,1214.54 1352.53,1214.37 1353.12,1212.73 1353.71,1212.63 1354.29,1210.15 1354.88,1211.26 1355.47,1213.77 1356.05,1213.75 1356.64,1212.16 1357.22,1211 1357.81,1211.28 1358.4,1208.76 1358.98,1211.46 1359.57,1211.64 1360.16,1212.63 1360.74,1211.42 1361.33,1210.11 1361.92,1214.01 1362.5,1215.33 1363.09,1213.82 1363.68,1213.95 1364.26,1212.5 1364.85,1214 1365.43,1212.81 1366.02,1213.87 1366.61,1212.65 1367.19,1212.33 1367.78,1212.05 1368.37,1212.08 1368.95,1214.63 1369.54,1213.09 1370.13,1211.48 1370.71,1211.12 1371.3,1209.66 1371.88,1210.81 1372.47,1210.78 1373.06,1212.16 1373.64,1214.95 1374.23,1212.21 1374.82,1210.89 1375.4,1213.46 1375.99,1212.15 1376.58,1210.9 1377.16,1209.95 1377.75,1208.86 1378.34,1211.55 1378.92,1211.6 1379.51,1214.05 1380.09,1210.14 1380.68,1208.84 1381.27,1211.68 1381.85,1213.13 1382.44,1212.94 1383.03,1213.16 1383.61,1210.37 1384.2,1210.39 1384.79,1211.64 1385.37,1210.31 1385.96,1212.89 1386.55,1211.48 1387.13,1214.08 1387.72,1215.2 1388.3,1212.65 1388.89,1212.4 1389.48,1210.8 1390.06,1212.15 1390.65,1212.31 1391.24,1213.66 1391.82,1213.69 1392.41,1210.78 1393,1210.56 1393.58,1210.46 1394.17,1213.07 1394.75,1210.49 1395.34,1211.1 1395.93,1210.99 1396.51,1209.87 1397.1,1212.58 1397.69,1211.17 1398.27,1209.49 1398.86,1209.4 1399.45,1206.79 1400.03,1212.11 1400.62,1211.72 1401.21,1209.26 1401.79,1209.15 1402.38,1210.68 1402.96,1210.9 1403.55,1209.72 1404.14,1211.12 1404.72,1209.67 1405.31,1210.9 1405.9,1210.74 1406.48,1207.04 1407.07,1208.52 1407.66,1208.92 1408.24,1210.38 1408.83,1211.79 1409.42,1211.7 1410,1209.26 1410.59,1207.84 1411.17,1205.43 1411.76,1206.93 1412.35,1205.95 1412.93,1206.33 1413.52,1205.66 1414.11,1205.77 1414.69,1204.48 1415.28,1206.02 1415.87,1206.45 1416.45,1206.86 1417.04,1204.61 1417.63,1206.29 1418.21,1209.42 1418.8,1213.36 1419.38,1213.71 1419.97,1209.67 1420.56,1209.83 1421.14,1209.88 1421.73,1211.1 1422.32,1214.01 1422.9,1215.09 1423.49,1212.16 1424.08,1215.74 1424.66,1214.17 1425.25,1213.85 1425.83,1213.97 1426.42,1213.81 1427.01,1213.68 1427.59,1216.01 1428.18,1214.44 1428.77,1212.87 1429.35,1211.56 1429.94,1207.63 1430.53,1205.25 1431.11,1208.38 1431.7,1209.69 1432.29,1208.74 1432.87,1211.55 1433.46,1212.84 1434.04,1211.2 1434.63,1210.03 1435.22,1210.07 1435.8,1208.97 1436.39,1206.3 1436.98,1206.35 1437.56,1206.71 1438.15,1208.21 1438.74,1209.54 1439.32,1208.44 1439.91,1207.16 1440.5,1207.35 1441.08,1204.71 1441.67,1203.78 1442.25,1205.37 1442.84,1204.63 1443.43,1206.33 1444.01,1205.3 1444.6,1205.8 1445.19,1206.32 1445.77,1205.43 1446.36,1205.55 1446.95,1205.66 1447.53,1202.14 1448.12,1201.34 1448.7,1203.12 1449.29,1203.39 1449.88,1199.94 1450.46,1201.68 1451.05,1202.02 1451.64,1204.03 1452.22,1207.28 1452.81,1208.75 1453.4,1209.09 1453.98,1210.45 1454.57,1211.8 1455.16,1211.93 1455.74,1213.27 1456.33,1211.9 1456.91,1212.02 1457.5,1211.91 1458.09,1211.93 1458.67,1214.59 1459.26,1214.22 1459.85,1214.27 1460.43,1214.31 1461.02,1216.75 1461.61,1215.31 1462.19,1217.89 1462.78,1218.48 1463.37,1217.9 1463.95,1214.62 1464.54,1214.37 1465.12,1213.06 1465.71,1213.14 1466.3,1211.83 1466.88,1210.25 1467.47,1207.67 1468.06,1207.92 1468.64,1206.82 1469.23,1208.35 1469.82,1205.8 1470.4,1206.46 1470.99,1209.21 1471.57,1209.64 1472.16,1208.32 1472.75,1208.19 1473.33,1209.29 1473.92,1210.66 1474.51,1209.27 1475.09,1210.53 1475.68,1210.65 1476.27,1208.15 1476.85,1207.22 1477.44,1208.87 1478.03,1208.87 1478.61,1208.9 1479.2,1210.39 1479.78,1209.12 1480.37,1209.32 1480.96,1209.61 1481.54,1209.72 1482.13,1208.38 1482.72,1211.23 1483.3,1209.76 1483.89,1212.4 1484.48,1214.78 1485.06,1214.71 1485.65,1210.72 1486.24,1211 1486.82,1212.26 1487.41,1212.03 1487.99,1211.97 1488.58,1213.31 1489.17,1211.63 1489.75,1209.11 1490.34,1209.3 1490.93,1209.35 1491.51,1209.38 1492.1,1210.93 1492.69,1212.36 1493.27,1211.16 1493.86,1211.19 1494.45,1212.49 1495.03,1212.36 1495.62,1212.01 1496.2,1212.03 1496.79,1213.36 1497.38,1214.46 1497.96,1215.64 1498.55,1216.7 1499.14,1216.45 1499.72,1214.96 1500.31,1210.98 1500.9,1209.73 1501.48,1211.05 1502.07,1211 1502.65,1210.97 1503.24,1209.88 1503.83,1211.38 1504.41,1212.49 1505,1216.45 1505.59,1216.09 1506.17,1218.37 1506.76,1216.65 1507.35,1215.04 1507.93,1213.5 1508.52,1210.89 1509.11,1210.86 1509.69,1210.98 1510.28,1211.26 1510.86,1212.52 1511.45,1213.88 1512.04,1212.6 1512.62,1213.9 1513.21,1212.11 1513.8,1214.44 1514.38,1214.24 1514.97,1212.78 1515.56,1211.71 1516.14,1213.12 1516.73,1214.15 1517.32,1217.71 1517.9,1216.12 1518.49,1217.05 1519.07,1216.79 1519.66,1215.12 1520.25,1217.62 1520.83,1216.97 1521.42,1215.24 1522.01,1213.7 1522.59,1215.07 1523.18,1215.01 1523.77,1215.05 1524.35,1217.46 1524.94,1217.3 1525.52,1218.32 1526.11,1216.76 1526.7,1215.12 1527.28,1216.02 1527.87,1217.75 1528.46,1217.62 1529.04,1215.88 1529.63,1214.53 1530.22,1214.07 1530.8,1214.02 1531.39,1211.32 1531.98,1215.06 1532.56,1216.34 1533.15,1215.95 1533.73,1215.83 1534.32,1218.51 1534.91,1219.45 1535.49,1217.81 1536.08,1218.84 1536.67,1222.37 1537.25,1221.66 1537.84,1222.22 1538.43,1224.12 1539.01,1224.58 1539.6,1225.34 1540.19,1224.31 1540.77,1219.71 1541.36,1217.69 1541.94,1214.87 1542.53,1210.83 1543.12,1210.95 1543.7,1212.23 1544.29,1213.75 1544.88,1212.27 1545.46,1212.37 1546.05,1210.85 1546.64,1214.62 1547.22,1213.01 1547.81,1212.9 1548.4,1211.54 1548.98,1212.66 1549.57,1212.46 1550.15,1212.44 1550.74,1212.43 1551.33,1212.5 1551.91,1209.76 1552.5,1208.63 1553.09,1208.84 1553.67,1211.57 1554.26,1208.66 1554.85,1208.8 1555.43,1206.15 1556.02,1207.63 1556.6,1207.93 1557.19,1208.2 1557.78,1209.75 1558.36,1211.14 1558.95,1209.6 1559.54,1208.21 1560.12,1208.23 1560.71,1209.55 1561.3,1212.34 1561.88,1212.25 1562.47,1212.42 1563.06,1211 1563.64,1210.85 1564.23,1208.52 1564.81,1212.71 1565.4,1211.28 1565.99,1207.52 1566.57,1207.63 1567.16,1206.44 1567.75,1209.42 1568.33,1212.17 1568.92,1212.24 1569.51,1211.43 1570.09,1208.88 1570.68,1209.17 1571.27,1213.13 1571.85,1212.1 1572.44,1212.03 1573.02,1213.61 1573.61,1211.08 1574.2,1209.91 1574.78,1211.42 1575.37,1211.48 1575.96,1211.64 1576.54,1210.34 1577.13,1210.39 1577.72,1209.09 1578.3,1207.91 1578.89,1206.8 1579.47,1205.91 1580.06,1207.22 1580.65,1208.79 1581.23,1206.46 1581.82,1208.12 1582.41,1208.2 1582.99,1209.64 1583.58,1209.78 1584.17,1209.65 1584.75,1209.99 1585.34,1211.28 1585.93,1211.29 1586.51,1209.85 1587.1,1207.44 1587.68,1207.5 1588.27,1204.99 1588.86,1204.83 1589.44,1207.56 1590.03,1206.66 1590.62,1205.45 1591.2,1204.36 1591.79,1204.55 1592.38,1204.53 1592.96,1204.79 1593.55,1203.98 1594.14,1205.9 1594.72,1205.03 1595.31,1205.23 1595.89,1205.67 1596.48,1206.94 1597.07,1207.02 1597.65,1206.05 1598.24,1204.95 1598.83,1206.35 1599.41,1209.37 1600,1209.62 1600.59,1208.33 1601.17,1207.13 1601.76,1206.18 1602.34,1206.42 1602.93,1208.09 1603.52,1208.22 1604.1,1207.02 1604.69,1207.07 1605.28,1207.12 1605.86,1209.85 1606.45,1208.56 1607.04,1207.12 1607.62,1207.42 1608.21,1207.63 1608.8,1208.9 1609.38,1210.22 1609.97,1211.64 1610.55,1210.25 1611.14,1210.51 1611.73,1205.32 1612.31,1206.79 1612.9,1206.85 1613.49,1208.59 1614.07,1206.13 1614.66,1206.73 1615.25,1207.97 1615.83,1209.42 1616.42,1208.15 1617.01,1211 1617.59,1211.1 1618.18,1210.17 1618.76,1212.88 1619.35,1212.72 1619.94,1213.84 1620.52,1213.92 1621.11,1214.96 1621.7,1213.56 1622.28,1215.99 1622.87,1217.19 1623.46,1215.69 1624.04,1215.24 1624.63,1214.91 1625.22,1211.1 1625.8,1212.42 1626.39,1214.95 1626.97,1214.65 1627.56,1210.49 1628.15,1211.69 1628.73,1214.27 1629.32,1212.9 1629.91,1214.01 1630.49,1215.28 1631.08,1216.49 1631.67,1214.83 1632.25,1214.82 1632.84,1212.44 1633.42,1213.73 1634.01,1213.55 1634.6,1213.42 1635.18,1214.79 1635.77,1214.62 1636.36,1213.06 1636.94,1211.79 1637.53,1211.72 1638.12,1211.59 1638.7,1211.49 1639.29,1211.7 1639.88,1211.81 1640.46,1209.43 1641.05,1208.23 1641.63,1207.22 1642.22,1204.79 1642.81,1207.53 1643.39,1207.82 1643.98,1208.1 1644.57,1209.5 1645.15,1209.56 1645.74,1209.77 1646.33,1211.22 1646.91,1212.53 1647.5,1212.5 1648.09,1211.12 1648.67,1210.8 1649.26,1210.71 1649.84,1210.89 1650.43,1210.8 1651.02,1208.23 1651.6,1208.17 1652.19,1208.23 1652.78,1208.16 1653.36,1209.39 1653.95,1209.35 1654.54,1210.9 1655.12,1210.83 1655.71,1212.12 1656.29,1210.64 1656.88,1209.34 1657.47,1208.06 1658.05,1211.02 1658.64,1211.08 1659.23,1209.55 1659.81,1212.19 1660.4,1212.2 1660.99,1209.49 1661.57,1210.98 1662.16,1208.31 1662.75,1210.92 1663.33,1209.58 1663.92,1212.39 1664.5,1213.59 1665.09,1216.23 1665.68,1219.87 1666.26,1222.11 1666.85,1220.15 1667.44,1217.25 1668.02,1218.16 1668.61,1219.08 1669.2,1219.86 1669.78,1220.78 1670.37,1217.52 1670.96,1215.55 1671.54,1215.28 1672.13,1216.22 1672.71,1213.59 1673.3,1212.13 1673.89,1213.23 1674.47,1213.1 1675.06,1213.01 1675.65,1211.83 1676.23,1214.1 1676.82,1213.87 1677.41,1213.73 1677.99,1213.54 1678.58,1213.48 1679.17,1213.25 1679.75,1213.13 1680.34,1214.15 1680.92,1211.5 1681.51,1211.15 1682.1,1209.88 1682.68,1211.3 1683.27,1213.9 1683.86,1214.81 1684.44,1217.23 1685.03,1211.7 1685.62,1210.37 1686.2,1211.66 1686.79,1215.58 1687.37,1216.67 1687.96,1216.5 1688.55,1216.24 1689.13,1216.22 1689.72,1215.94 1690.31,1214.42 1690.89,1215.62 1691.48,1215.41 1692.07,1213.65 1692.65,1208.62 1693.24,1210.06 1693.83,1210.12 1694.41,1206.15 1695,1206.31 1695.58,1206.48 1696.17,1211.01 1696.76,1212.54 1697.34,1212.64 1697.93,1209.98 1698.52,1211.21 1699.1,1214.15 1699.69,1213.95 1700.28,1212.51 1700.86,1211.22 1701.45,1211.04 1702.04,1213.65 1702.62,1214.74 1703.21,1214.64 1703.79,1215.74 1704.38,1215.55 1704.97,1215.33 1705.55,1212.4 1706.14,1213.71 1706.73,1210.84 1707.31,1210.84 1707.9,1209.68 1708.49,1208.63 1709.07,1209.98 1709.66,1210.09 1710.24,1210.05 1710.83,1211.51 1711.42,1212.5 1712,1212.63 1712.59,1213.8 1713.18,1212.4 1713.76,1212.43 1714.35,1212.13 1714.94,1210.87 1715.52,1212.15 1716.11,1209.72 1716.7,1207.26 1717.28,1205.03 1717.87,1203.94 1718.45,1202.85 1719.04,1204.56 1719.63,1204.89 1720.21,1205.32 1720.8,1205.76 1721.39,1207.14 1721.97,1207.06 1722.56,1207.47 1723.15,1209.03 1723.73,1206.62 1724.32,1208.38 1724.91,1208.76 1725.49,1211.47 1726.08,1212.95 1726.66,1211.94 1727.25,1211.78 1727.84,1214.32 1728.42,1211.4 1729.01,1211.21 1729.6,1210.89 1730.18,1206.98 1730.77,1207.09 1731.36,1204.99 1731.94,1202.49 1732.53,1204.17 1733.11,1204.74 1733.7,1203.74 1734.29,1207.8 1734.87,1209.21 1735.46,1211.9 1736.05,1213.19 1736.63,1211.72 1737.22,1211.77 1737.81,1214.24 1738.39,1214.11 1738.98,1215.16 1739.57,1218.79 1740.15,1218.25 1740.74,1217.84 1741.32,1218.71 1741.91,1218.47 1742.5,1218.12 1743.08,1213.85 1743.67,1213.77 1744.26,1212.5 1744.84,1212.33 1745.43,1209.91 1746.02,1210.3 1746.6,1213.12 1747.19,1216.91 1747.78,1217.99 1748.36,1216.41 1748.95,1217.16 1749.53,1214.39 1750.12,1215.47 1750.71,1216.12 1751.29,1214.63 1751.88,1218.19 1752.47,1215.26 1753.05,1213.77 1753.64,1213.69 1754.23,1216.3 1754.81,1216.08 1755.4,1216.15 1755.99,1217.34 1756.57,1218.43 1757.16,1216.92 1757.74,1216.79 1758.33,1215.29 1758.92,1213.85 1759.5,1211.12 1760.09,1209.88 1760.68,1210.03 1761.26,1208.97 1761.85,1207.8 1762.44,1207.79 1763.02,1209.26 1763.61,1210.6 1764.19,1213.21 1764.78,1214.66 1765.37,1211.59 1765.95,1210.41 1766.54,1213.37 1767.13,1212.22 1767.71,1213.7 1768.3,1213.71 1768.89,1213.46 1769.47,1214.56 1770.06,1212.78 1770.65,1212.63 1771.23,1211.28 1771.82,1212.86 1772.4,1213.93 1772.99,1214 1773.58,1213.94 1774.16,1213.7 1774.75,1211.36 1775.34,1211.08 1775.92,1211.03 1776.51,1211.23 1777.1,1209.98 1777.68,1208.48 1778.27,1211.44 1778.86,1211.37 1779.44,1211.34 1780.03,1209.96 1780.61,1210.98 1781.2,1212.53 1781.79,1215.06 1782.37,1216.19 1782.96,1219.77 1783.55,1219.24 1784.13,1221.49 1784.72,1222.1 1785.31,1220.07 1785.89,1217.19 1786.48,1216.86 1787.06,1216.6 1787.65,1220.1 1788.24,1219.76 1788.82,1216.72 1789.41,1213.8 1790,1215.25 1790.58,1213.7 1791.17,1211.06 1791.76,1213.74 1792.34,1211 1792.93,1208.37 1793.52,1207.15 1794.1,1207.37 1794.69,1203.45 1795.27,1203.65 1795.86,1202.63 1796.45,1202.89 1797.03,1203.11 1797.62,1204.75 1798.21,1204.83 1798.79,1204.98 1799.38,1205.1 1799.97,1205.13 1800.55,1206.7 1801.14,1206.84 1801.73,1209.24 1802.31,1210.76 1802.9,1207.88 1803.48,1208.25 1804.07,1206.08 1804.66,1205.33 1805.24,1207.01 1805.83,1211.32 1806.42,1210.02 1807,1209.96 1807.59,1206.05 1808.18,1206.36 1808.76,1205.34 1809.35,1209.55 1809.94,1210.92 1810.52,1213.47 1811.11,1216.01 1811.69,1216.81 1812.28,1216.33 1812.87,1213.32 1813.45,1215.86 1814.04,1214.04 1814.63,1215.17 1815.21,1214.84 1815.8,1215.86 1816.39,1214.31 1816.97,1213.76 1817.56,1214.96 1818.14,1215.99 1818.73,1214.46 1819.32,1212.94 1819.9,1212.87 1820.49,1212.59 1821.08,1211.4 1821.66,1208.79 1822.25,1208.83 1822.84,1211.7 1823.42,1215.69 1824.01,1212.94 1824.6,1216.75 1825.18,1213.98 1825.77,1211.23 1826.35,1210.34 1826.94,1209.08 1827.53,1207.79 1828.11,1208.23 1828.7,1213.44 1829.29,1211.84 1829.87,1208.86 1830.46,1209.14 1831.05,1208.35 1831.63,1208.69 1832.22,1208.9 1832.81,1209.02 1833.39,1209.12 1833.98,1208 1834.56,1208 1835.15,1207.97 1835.74,1211.97 1836.32,1210.35 1836.91,1207.66 1837.5,1207.8 1838.08,1206.69 1838.67,1206.69 1839.26,1208.31 1839.84,1208.36 1840.43,1207.47 1841.01,1207.73 1841.6,1208.97 1842.19,1207.87 1842.77,1206.9 1843.36,1207.16 1843.95,1208.55 1844.53,1210.02 1845.12,1212.99 1845.71,1214.17 1846.29,1211.24 1846.88,1212.52 1847.47,1210.99 1848.05,1210.94 1848.64,1210.03 1849.22,1212.6 1849.81,1208.39 1850.4,1205.64 1850.98,1205.82 1851.57,1204.81 1852.16,1206.48 1852.74,1206.9 1853.33,1208.76 1853.92,1206.35 1854.5,1202.5 1855.09,1201.75 1855.68,1200.68 1856.26,1200.23 1856.85,1202.26 1857.43,1202.63 1858.02,1204.45 1858.61,1207.67 1859.19,1207.88 1859.78,1206.8 1860.37,1207.34 1860.95,1208.77 1861.54,1208.93 1862.13,1211.66 1862.71,1211.49 1863.3,1212.61 1863.88,1211.13 1864.47,1212.48 1865.06,1210.81 1865.64,1210.92 1866.23,1212.64 1866.82,1215.25 1867.4,1213.81 1867.99,1212.48 1868.58,1218.66 1869.16,1217.07 1869.75,1216.84 1870.34,1217.63 1870.92,1217.41 1871.51,1215.83 1872.09,1214.27 1872.68,1212.87 1873.27,1211.43 1873.85,1212.77 1874.44,1214.06 1875.03,1217.84 1875.61,1216.14 1876.2,1217.2 1876.79,1215.57 1877.37,1217.83 1877.96,1218.6 1878.55,1218.34 1879.13,1214.03 1879.72,1213.92 1880.3,1213.79 1880.89,1214.69 1881.48,1216.25 1882.06,1213.49 1882.65,1212.15 1883.24,1213.26 1883.82,1213.23 1884.41,1213.13 1885,1214.42 1885.58,1215.55 1886.17,1214.06 1886.76,1214.01 1887.34,1214.04 1887.93,1213.91 1888.51,1213.89 1889.1,1213.6 1889.69,1213.66 1890.27,1213.47 1890.86,1213.07 1891.45,1213.07 1892.03,1212.9 1892.62,1212.8 1893.21,1208.91 1893.79,1208.81 1894.38,1206.36 1894.96,1206.31 1895.55,1203.98 1896.14,1201.86 1896.72,1201.35 1897.31,1201.69 1897.9,1203.63 1898.48,1206.57 1899.07,1205.43 1899.66,1208.42 1900.24,1212.09 1900.83,1210.68 1901.42,1208.21 1902,1208.2 1902.59,1205.73 1903.17,1205.95 1903.76,1206.25 1904.35,1206.7 1904.93,1205.85 1905.52,1206.02 1906.11,1206.19 1906.69,1206.33 1907.28,1208.14 1907.87,1209.78 1908.45,1208.47 1909.04,1208.39 1909.63,1207.17 1910.21,1206.2 1910.8,1205.18 1911.38,1205.52 1911.97,1207 1912.56,1205.96 1913.14,1206.3 1913.73,1206.77 1914.32,1205.6 1914.9,1210.97 1915.49,1208.46 1916.08,1208.45 1916.66,1211.05 1917.25,1211.05 1917.83,1211.04 1918.42,1212.28 1919.01,1212.02 1919.59,1208.08 1920.18,1205.63 1920.77,1205.93 1921.35,1210.18 1921.94,1208.82 1922.53,1210.24 1923.11,1211.53 1923.7,1215.34 1924.29,1219.04 1924.87,1222.69 1925.46,1220.81 1926.04,1221.75 1926.63,1218.61 1927.22,1218.17 1927.8,1214.95 1928.39,1213.6 1928.98,1212.05 1929.56,1213.27 1930.15,1216.94 1930.74,1219.31 1931.32,1217.58 1931.91,1218.38 1932.5,1215.19 1933.08,1217.65 1933.67,1217.36 1934.25,1216.91 1934.84,1214.27 1935.43,1216.49 1936.01,1214.94 1936.6,1211.97 1937.19,1211.63 1937.77,1211.25 1938.36,1210.1 1938.95,1208.81 1939.53,1210.18 1940.12,1207.84 1940.71,1207.85 1941.29,1209.06 1941.88,1207.56 1942.46,1206.72 1943.05,1208.18 1943.64,1208.2 1944.22,1208.37 1944.81,1210.01 1945.4,1207.5 1945.98,1206.7 1946.57,1206.88 1947.16,1206.9 1947.74,1205.58 1948.33,1207.09 1948.91,1208.5 1949.5,1207.23 1950.09,1207.3 1950.67,1208.81 1951.26,1207.8 1951.85,1203.98 1952.43,1204.39 1953.02,1207.19 1953.61,1207.56 1954.19,1206.66 1954.78,1205.8 1955.37,1206.09 1955.95,1206.42 1956.54,1202.97 1957.12,1206.27 1957.71,1206.58 1958.3,1209.36 1958.88,1209.38 1959.47,1212.21 1960.06,1210.67 1960.64,1210.69 1961.23,1209.3 1961.82,1212.36 1962.4,1212.08 1962.99,1213.4 1963.58,1213.09 1964.16,1211.96 1964.75,1212.06 1965.33,1211.65 1965.92,1214.14 1966.51,1213.86 1967.09,1212.58 1967.68,1214.05 1968.27,1216.43 1968.85,1220.08 1969.44,1215.64 1970.03,1215.32 1970.61,1216.53 1971.2,1216.25 1971.78,1217.07 1972.37,1216.49 1972.96,1216.29 1973.54,1217.49 1974.13,1218.23 1974.72,1219.07 1975.3,1216 1975.89,1214.33 1976.48,1210.06 1977.06,1210.08 1977.65,1210.17 1978.24,1212.77 1978.82,1213.92 1979.41,1209.89 1979.99,1209.74 1980.58,1209.98 1981.17,1211.53 1981.75,1213.06 1982.34,1211.66 1982.93,1210.31 1983.51,1210.34 1984.1,1213.17 1984.69,1213.37 1985.27,1211.97 1985.86,1212.1 1986.45,1208.07 1987.03,1206.85 1987.62,1206.98 1988.2,1205.82 1988.79,1207.47 1989.38,1208.72 1989.96,1207.83 1990.55,1203.19 1991.14,1203.74 1991.72,1201.79 1992.31,1203.87 1992.9,1205.64 1993.48,1207.21 1994.07,1207.47 1994.65,1210.29 1995.24,1213 1995.83,1213.19 1996.41,1211.71 1997,1212.86 1997.59,1214.14 1998.17,1212.47 1998.76,1213.8 1999.35,1212.36 1999.93,1209.82 2000.52,1210.13 2001.11,1206.02 2001.69,1205.17 2002.28,1205.5 2002.86,1204.46 2003.45,1204.77 2004.04,1205.12 2004.62,1205.55 2005.21,1207.29 2005.8,1204.89 2006.38,1203.93 2006.97,1204.45 2007.56,1206.33 2008.14,1208.05 2008.73,1207.95 2009.32,1208.02 2009.9,1208.27 2010.49,1205.66 2011.07,1204.8 2011.66,1205.09 2012.25,1205.5 2012.83,1208.67 2013.42,1208.83 2014.01,1210.17 2014.59,1212.9 2015.18,1210.4 2015.77,1210.6 2016.35,1210.55 2016.94,1210.69 2017.53,1208.28 2018.11,1209.71 2018.7,1207.18 2019.28,1210.28 2019.87,1209.08 2020.46,1209.43 2021.04,1214.83 2021.63,1215.84 2022.22,1216.99 2022.8,1215.33 2023.39,1215.02 2023.98,1214.87 2024.56,1216.1 2025.15,1215.49 2025.73,1217.72 2026.32,1218.64 2026.91,1219.29 2027.49,1217.5 2028.08,1216.84 2028.67,1218.83 2029.25,1215.81 2029.84,1214.36 2030.43,1212.69 2031.01,1212.57 2031.6,1212.32 2032.19,1212.12 2032.77,1210.68 2033.36,1210.54 2033.94,1211.93 2034.53,1211.83 2035.12,1212.81 2035.7,1209.99 2036.29,1208.74 2036.88,1208.85 2037.46,1207.71 2038.05,1209.04 2038.64,1209.1 2039.22,1209.03 2039.81,1206.49 2040.4,1208.05 2040.98,1206.83 2041.57,1207.26 2042.15,1206.28 2042.74,1206.56 2043.33,1208.09 2043.91,1207.86 2044.5,1209.15 2045.09,1209.23 2045.67,1210.99 2046.26,1212.08 2046.85,1213.2 2047.43,1212.86 2048.02,1211.37 2048.6,1211.23 2049.19,1208.68 2049.78,1203.97 2050.36,1203.11 2050.95,1203.38 2051.54,1204.99 2052.12,1208.92 2052.71,1211.55 2053.3,1211.22 2053.88,1211.13 2054.47,1211.06 2055.06,1212.18 2055.64,1212.34 2056.23,1210.98 2056.81,1212.46 2057.4,1210.75 2057.99,1213.22 2058.57,1213.16 2059.16,1213.45 2059.75,1214.51 2060.33,1216.91 2060.92,1211.73 2061.51,1210.37 2062.09,1210.59 2062.68,1211.91 2063.27,1213.47 2063.85,1214.84 2064.44,1214.66 2065.02,1216.05 2065.61,1214.43 2066.2,1214.13 2066.78,1212.51 2067.37,1211.23 2067.96,1212.47 2068.54,1216.34 2069.13,1217.68 2069.72,1218.64 2070.3,1220.81 2070.89,1220 2071.48,1221.88 2072.06,1221.14 2072.65,1217.79 2073.23,1217.3 2073.82,1218.25 2074.41,1216.46 2074.99,1213.52 2075.58,1213.28 2076.17,1211.93 2076.75,1211.72 2077.34,1212.99 2077.93,1214.3 2078.51,1211.41 2079.1,1211.11 2079.68,1210.01 2080.27,1208.57 2080.86,1207.38 2081.44,1207.59 2082.03,1205.34 2082.62,1207.07 2083.2,1208.71 2083.79,1207.53 2084.38,1208.93 2084.96,1209.08 2085.55,1209.28 2086.14,1209.5 2086.72,1209.4 2087.31,1210.68 2087.89,1211.94 2088.48,1211.96 2089.07,1210.31 2089.65,1211.6 2090.24,1214.26 2090.83,1213.91 2091.41,1211.23 2092,1210.98 2092.59,1210.79 2093.17,1212.08 2093.76,1213.54 2094.35,1215.89 2094.93,1214.15 2095.52,1215.4 2096.1,1215.14 2096.69,1214.92 2097.28,1212.03 2097.86,1212.1 2098.45,1210.41 2099.04,1211.65 2099.62,1211.74 2100.21,1211.56 2100.8,1212.42 2101.38,1210.98 2101.97,1211.15 2102.55,1210.13 2103.14,1210.3 2103.73,1207.62 2104.31,1210.19 2104.9,1209.82 2105.49,1208.92 2106.07,1204.86 2106.66,1206.47 2107.25,1206.76 2107.83,1206.84 2108.42,1201.85 2109.01,1200.84 2109.59,1201.48 2110.18,1204.72 2110.76,1203.83 2111.35,1204.2 2111.94,1204.56 2112.52,1204.86 2113.11,1204.9 2113.7,1199.92 2114.28,1200.55 2114.87,1203.51 2115.46,1209.1 2116.04,1208.31 2116.63,1208.41 2117.22,1211.13 2117.8,1209.73 2118.39,1207.44 2118.97,1207.58 2119.56,1208.04 2120.15,1206.94 2120.73,1204.26 2121.32,1204.65 2121.91,1199.71 2122.49,1199.08 2123.08,1202.45 2123.67,1204.06 2124.25,1203.18 2124.84,1204.86 2125.42,1205.18 2126.01,1209.42 2126.6,1210.8 2127.18,1212.09 2127.77,1213.28 2128.36,1214.46 2128.94,1215.71 2129.53,1214.25 2130.12,1213.72 2130.7,1213.87 2131.29,1213.68 2131.88,1215.91 2132.46,1215.74 2133.05,1210.41 2133.63,1207.86 2134.22,1209.45 2134.81,1212.44 2135.39,1208.63 2135.98,1209.06 2136.57,1210.73 2137.15,1212.1 2137.74,1214.78 2138.33,1214.62 2138.91,1214.48 2139.5,1215.51 2140.09,1212.73 2140.67,1210 2141.26,1208.77 2141.84,1209.01 2142.43,1210.16 2143.02,1213.86 2143.6,1212.39 2144.19,1212.68 2144.78,1216.4 2145.36,1217.34 2145.95,1217.06 2146.54,1217.8 2147.12,1217.15 2147.71,1214.6 2148.3,1215.93 2148.88,1214.14 2149.47,1213.71 2150.05,1215.01 2150.64,1214.66 2151.23,1214.35 2151.81,1215.4 2152.4,1217.71 2152.99,1219.73 2153.57,1216.74 2154.16,1214.94 2154.75,1214.54 2155.33,1214.59 2155.92,1215.8 2156.5,1215.64 2157.09,1214.16 2157.68,1215.55 2158.26,1218.04 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1211.64 L986.612 1211.64 L987.198 1211.64 L987.785 1211.64 L988.371 1211.64 L988.957 1211.64 L989.544 1211.64 L990.13 1211.64 L990.717 1211.64 L991.303 1211.64 L991.889 1211.64 L992.476 1211.64 L993.062 1211.64 L993.649 1211.64 L994.235 1211.64 L994.822 1211.64 L995.408 1211.64 L995.994 1211.64 L996.581 1211.64 L997.167 1211.64 L997.754 1211.64 L998.34 1211.64 L998.926 1211.64 L999.513 1211.64 L1000.1 1211.64 L1000.69 1211.64 L1001.27 1211.64 L1001.86 1211.64 L1002.44 1211.64 L1003.03 1211.64 L1003.62 1211.64 L1004.2 1211.64 L1004.79 1211.64 L1005.38 1211.64 L1005.96 1211.64 L1006.55 1211.64 L1007.14 1211.64 L1007.72 1211.64 L1008.31 1211.64 L1008.9 1211.64 L1009.48 1211.64 L1010.07 1211.64 L1010.65 1211.64 L1011.24 1211.64 L1011.83 1211.64 L1012.41 1211.64 L1013 1211.64 L1013.59 1211.64 L1014.17 1211.64 L1014.76 1211.64 L1015.35 1211.64 L1015.93 1211.64 L1016.52 1211.64 L1017.11 1211.64 L1017.69 1211.64 L1018.28 1211.64 L1018.86 1211.64 L1019.45 1211.64 L1020.04 1211.64 L1020.62 1211.64 L1021.21 1211.64 L1021.8 1211.64 L1022.38 1211.64 L1022.97 1211.64 L1023.56 1211.64 L1024.14 1211.64 L1024.73 1211.64 L1025.32 1211.64 L1025.9 1211.64 L1026.49 1211.64 L1027.07 1211.64 L1027.66 1211.64 L1028.25 1211.64 L1028.83 1211.64 L1029.42 1211.64 L1030.01 1211.64 L1030.59 1211.64 L1031.18 1211.64 L1031.77 1211.64 L1032.35 1211.64 L1032.94 1211.64 L1033.52 1211.64 L1034.11 1211.64 L1034.7 1211.64 L1035.28 1211.64 L1035.87 1211.64 L1036.46 1211.64 L1037.04 1211.64 L1037.63 1211.64 L1038.22 1211.64 L1038.8 1211.64 L1039.39 1211.64 L1039.98 1211.64 L1040.56 1211.64 L1041.15 1211.64 L1041.73 1211.64 L1042.32 1211.64 L1042.91 1211.64 L1043.49 1211.64 L1044.08 1211.64 L1044.67 1211.64 L1045.25 1211.64 L1045.84 1211.64 L1046.43 1211.64 L1047.01 1211.64 L1047.6 1211.64 L1048.19 1211.64 L1048.77 1211.64 L1049.36 1211.64 L1049.94 1211.64 L1050.53 1211.64 L1051.12 1211.64 L1051.7 1211.64 L1052.29 1211.64 L1052.88 1211.64 L1053.46 1211.64 L1054.05 1211.64 L1054.64 1211.64 L1055.22 1211.64 L1055.81 1211.64 L1056.39 1211.64 L1056.98 1211.64 L1057.57 1211.64 L1058.15 1211.64 L1058.74 1211.64 L1059.33 1211.64 L1059.91 1211.64 L1060.5 1211.64 L1061.09 1211.64 L1061.67 1211.64 L1062.26 1211.64 L1062.85 1211.64 L1063.43 1211.64 L1064.02 1211.64 L1064.6 1211.64 L1065.19 1211.64 L1065.78 1211.64 L1066.36 1211.64 L1066.95 1211.64 L1067.54 1211.64 L1068.12 1211.64 L1068.71 1211.64 L1069.3 1211.64 L1069.88 1211.64 L1070.47 1211.64 L1071.06 1211.64 L1071.64 1211.64 L1072.23 1211.64 L1072.81 1211.64 L1073.4 1211.64 L1073.99 1211.64 L1074.57 1211.64 L1075.16 1211.64 L1075.75 1211.64 L1076.33 1211.64 L1076.92 1211.64 L1077.51 1211.64 L1078.09 1211.64 L1078.68 1211.64 L1079.26 1211.64 L1079.85 1211.64 L1080.44 1211.64 L1081.02 1211.64 L1081.61 1211.64 L1082.2 1211.64 L1082.78 1211.64 L1083.37 1211.64 L1083.96 1211.64 L1084.54 1211.64 L1085.13 1211.64 L1085.72 1211.64 L1086.3 1211.64 L1086.89 1211.64 L1087.47 1211.64 L1088.06 1211.64 L1088.65 1211.64 L1089.23 1211.64 L1089.82 1211.64 L1090.41 1211.64 L1090.99 1211.64 L1091.58 1211.64 L1092.17 1211.64 L1092.75 1211.64 L1093.34 1211.64 L1093.93 1211.64 L1094.51 1211.64 L1095.1 1211.64 L1095.68 1211.64 L1096.27 1211.64 L1096.86 1211.64 L1097.44 1211.64 L1098.03 1211.64 L1098.62 1211.64 L1099.2 1211.64 L1099.79 1211.64 L1100.38 1211.64 L1100.96 1211.64 L1101.55 1211.64 L1102.14 1211.64 L1102.72 1211.64 L1103.31 1211.64 L1103.89 1211.64 L1104.48 1211.64 L1105.07 1211.64 L1105.65 1211.64 L1106.24 1211.64 L1106.83 1211.64 L1107.41 1211.64 L1108 1211.64 L1108.59 1211.64 L1109.17 1211.64 L1109.76 1211.64 L1110.34 1211.64 L1110.93 1211.64 L1111.52 1211.64 L1112.1 1211.64 L1112.69 1211.64 L1113.28 1211.64 L1113.86 1211.64 L1114.45 1211.64 L1115.04 1211.64 L1115.62 1211.64 L1116.21 1211.64 L1116.8 1211.64 L1117.38 1211.64 L1117.97 1211.64 L1118.55 1211.64 L1119.14 1211.64 L1119.73 1211.64 L1120.31 1211.64 L1120.9 1211.64 L1121.49 1211.64 L1122.07 1211.64 L1122.66 1211.64 L1123.25 1211.64 L1123.83 1211.64 L1124.42 1211.64 L1125.01 1211.64 L1125.59 1211.64 L1126.18 1211.64 L1126.76 1211.64 L1127.35 1211.64 L1127.94 1211.64 L1128.52 1211.64 L1129.11 1211.64 L1129.7 1211.64 L1130.28 1211.64 L1130.87 1211.64 L1131.46 1211.64 L1132.04 1211.64 L1132.63 1211.64 L1133.21 1211.64 L1133.8 1211.64 L1134.39 1211.64 L1134.97 1211.64 L1135.56 1211.64 L1136.15 1211.64 L1136.73 1211.64 L1137.32 1211.64 L1137.91 1211.64 L1138.49 1211.64 L1139.08 1211.64 L1139.67 1211.64 L1140.25 1211.64 L1140.84 1211.64 L1141.42 1211.64 L1142.01 1211.64 L1142.6 1211.64 L1143.18 1211.64 L1143.77 1211.64 L1144.36 1211.64 L1144.94 1211.64 L1145.53 1211.64 L1146.12 1211.64 L1146.7 1211.64 L1147.29 1211.64 L1147.88 1211.64 L1148.46 1211.64 L1149.05 1211.64 L1149.63 1211.64 L1150.22 1211.64 L1150.81 1211.64 L1151.39 1211.64 L1151.98 1211.64 L1152.57 1211.64 L1153.15 1211.64 L1153.74 1211.64 L1154.33 1211.64 L1154.91 1211.64 L1155.5 1211.64 L1156.09 1211.64 L1156.67 1211.64 L1157.26 1211.64 L1157.84 1211.64 L1158.43 1211.64 L1159.02 1211.64 L1159.6 1211.64 L1160.19 1211.64 L1160.78 1211.64 L1161.36 1211.64 L1161.95 1211.64 L1162.54 1211.64 L1163.12 1211.64 L1163.71 1211.64 L1164.29 1211.64 L1164.88 1211.64 L1165.47 1211.64 L1166.05 1211.64 L1166.64 1211.64 L1167.23 1211.64 L1167.81 1211.64 L1168.4 1211.64 L1168.99 1211.64 L1169.57 1211.64 L1170.16 1211.64 L1170.75 1211.64 L1171.33 1211.64 L1171.92 1211.64 L1172.5 1211.64 L1173.09 1211.64 L1173.68 1211.64 L1174.26 1211.64 L1174.85 1211.64 L1175.44 1211.64 L1176.02 1211.64 L1176.61 1211.64 L1177.2 1211.64 L1177.78 1211.64 L1178.37 1211.64 L1178.96 1211.64 L1179.54 1211.64 L1180.13 1211.64 L1180.71 1211.64 L1181.3 1211.64 L1181.89 1211.64 L1182.47 1211.64 L1183.06 1211.64 L1183.65 1211.64 L1184.23 1211.64 L1184.82 1211.64 L1185.41 1211.64 L1185.99 1211.64 L1186.58 1211.64 L1187.16 1211.64 L1187.75 1211.64 L1188.34 1211.64 L1188.92 1211.64 L1189.51 1211.64 L1190.1 1211.64 L1190.68 1211.64 L1191.27 1211.64 L1191.86 1211.64 L1192.44 1211.64 L1193.03 1211.64 L1193.62 1211.64 L1194.2 1211.64 L1194.79 1211.64 L1195.37 1211.64 L1195.96 1211.64 L1196.55 1211.64 L1197.13 1211.64 L1197.72 1211.64 L1198.31 1211.64 L1198.89 1211.64 L1199.48 1211.64 L1200.07 1211.64 L1200.65 1211.64 L1201.24 1211.64 L1201.83 1211.64 L1202.41 1211.64 L1203 1211.64 L1203.58 1211.64 L1204.17 1211.64 L1204.76 1211.64 L1205.34 1211.64 L1205.93 1211.64 L1206.52 1211.64 L1207.1 1211.64 L1207.69 1211.64 L1208.28 1211.64 L1208.86 1211.64 L1209.45 1211.64 L1210.03 1211.64 L1210.62 1211.64 L1211.21 1211.64 L1211.79 1211.64 L1212.38 1211.64 L1212.97 1211.64 L1213.55 1211.64 L1214.14 1211.64 L1214.73 1211.64 L1215.31 1211.64 L1215.9 1211.64 L1216.49 1211.64 L1217.07 1211.64 L1217.66 1211.64 L1218.24 1211.64 L1218.83 1211.64 L1219.42 1211.64 L1220 1211.64 L1220.59 1211.64 L1221.18 1211.64 L1221.76 1211.64 L1222.35 1211.64 L1222.94 1211.64 L1223.52 1211.64 L1224.11 1211.64 L1224.7 1211.64 L1225.28 1211.64 L1225.87 1211.64 L1226.45 1211.64 L1227.04 1211.64 L1227.63 1211.64 L1228.21 1211.64 L1228.8 1211.64 L1229.39 1211.64 L1229.97 1211.64 L1230.56 1211.64 L1231.15 1211.64 L1231.73 1211.64 L1232.32 1211.64 L1232.91 1211.64 L1233.49 1211.64 L1234.08 1211.64 L1234.66 1211.64 L1235.25 1211.64 L1235.84 1211.64 L1236.42 1211.64 L1237.01 1211.64 L1237.6 1211.64 L1238.18 1211.64 L1238.77 1211.64 L1239.36 1211.64 L1239.94 1211.64 L1240.53 1211.64 L1241.11 1211.64 L1241.7 1211.64 L1242.29 1211.64 L1242.87 1211.64 L1243.46 1211.64 L1244.05 1211.64 L1244.63 1211.64 L1245.22 1211.64 L1245.81 1211.64 L1246.39 1211.64 L1246.98 1211.64 L1247.57 1211.64 L1248.15 1211.64 L1248.74 1211.64 L1249.32 1211.64 L1249.91 1211.64 L1250.5 1211.64 L1251.08 1211.64 L1251.67 1211.64 L1252.26 1211.64 L1252.84 1211.64 L1253.43 1211.64 L1254.02 1211.64 L1254.6 1211.64 L1255.19 1211.64 L1255.78 1211.64 L1256.36 1211.64 L1256.95 1211.64 L1257.53 1211.64 L1258.12 1211.64 L1258.71 1211.64 L1259.29 1211.64 L1259.88 1211.64 L1260.47 1211.64 L1261.05 1211.64 L1261.64 1211.64 L1262.23 1211.64 L1262.81 1211.64 L1263.4 1211.64 L1263.98 1211.64 L1264.57 1211.64 L1265.16 1211.64 L1265.74 1211.64 L1266.33 1211.64 L1266.92 1211.64 L1267.5 1211.64 L1268.09 1211.64 L1268.68 1211.64 L1269.26 1211.64 L1269.85 1211.64 L1270.44 1211.64 L1271.02 1211.64 L1271.61 1211.64 L1272.19 1211.64 L1272.78 1211.64 L1273.37 1211.64 L1273.95 1211.64 L1274.54 1211.64 L1275.13 1211.64 L1275.71 1211.64 L1276.3 1211.64 L1276.89 1211.64 L1277.47 1211.64 L1278.06 1211.64 L1278.65 1211.64 L1279.23 1211.64 L1279.82 1211.64 L1280.4 1211.64 L1280.99 1211.64 L1281.58 1211.64 L1282.16 1211.64 L1282.75 1211.64 L1283.34 1211.64 L1283.92 1211.64 L1284.51 1211.64 L1285.1 1211.64 L1285.68 1211.64 L1286.27 1211.64 L1286.86 1211.64 L1287.44 1211.64 L1288.03 1211.64 L1288.61 1211.64 L1289.2 1211.64 L1289.79 1211.64 L1290.37 1211.64 L1290.96 1211.64 L1291.55 1211.64 L1292.13 1211.64 L1292.72 1211.64 L1293.31 1211.64 L1293.89 1211.64 L1294.48 1211.64 L1295.06 1211.64 L1295.65 1211.64 L1296.24 1211.64 L1296.82 1211.64 L1297.41 1211.64 L1298 1211.64 L1298.58 1211.64 L1299.17 1211.64 L1299.76 1211.64 L1300.34 1211.64 L1300.93 1211.64 L1301.52 1211.64 L1302.1 1211.64 L1302.69 1211.64 L1303.27 1211.64 L1303.86 1211.64 L1304.45 1211.64 L1305.03 1211.64 L1305.62 1211.64 L1306.21 1211.64 L1306.79 1211.64 L1307.38 1211.64 L1307.97 1211.64 L1308.55 1211.64 L1309.14 1211.64 L1309.73 1211.64 L1310.31 1211.64 L1310.9 1211.64 L1311.48 1211.64 L1312.07 1211.64 L1312.66 1211.64 L1313.24 1211.64 L1313.83 1211.64 L1314.42 1211.64 L1315 1211.64 L1315.59 1211.64 L1316.18 1211.64 L1316.76 1211.64 L1317.35 1211.64 L1317.93 1211.64 L1318.52 1211.64 L1319.11 1211.64 L1319.69 1211.64 L1320.28 1211.64 L1320.87 1211.64 L1321.45 1211.64 L1322.04 1211.64 L1322.63 1211.64 L1323.21 1211.64 L1323.8 1211.64 L1324.39 1211.64 L1324.97 1211.64 L1325.56 1211.64 L1326.14 1211.64 L1326.73 1211.64 L1327.32 1211.64 L1327.9 1211.64 L1328.49 1211.64 L1329.08 1211.64 L1329.66 1211.64 L1330.25 1211.64 L1330.84 1211.64 L1331.42 1211.64 L1332.01 1211.64 L1332.6 1211.64 L1333.18 1211.64 L1333.77 1211.64 L1334.35 1211.64 L1334.94 1211.64 L1335.53 1211.64 L1336.11 1211.64 L1336.7 1211.64 L1337.29 1211.64 L1337.87 1211.64 L1338.46 1211.64 L1339.05 1211.64 L1339.63 1211.64 L1340.22 1211.64 L1340.8 1211.64 L1341.39 1211.64 L1341.98 1211.64 L1342.56 1211.64 L1343.15 1211.64 L1343.74 1211.64 L1344.32 1211.64 L1344.91 1211.64 L1345.5 1211.64 L1346.08 1211.64 L1346.67 1211.64 L1347.26 1211.64 L1347.84 1211.64 L1348.43 1211.64 L1349.01 1211.64 L1349.6 1211.64 L1350.19 1211.64 L1350.77 1211.64 L1351.36 1211.64 L1351.95 1211.64 L1352.53 1211.64 L1353.12 1211.64 L1353.71 1211.64 L1354.29 1211.64 L1354.88 1211.64 L1355.47 1211.64 L1356.05 1211.64 L1356.64 1211.64 L1357.22 1211.64 L1357.81 1211.64 L1358.4 1211.64 L1358.98 1211.64 L1359.57 1211.64 L1360.16 1211.64 L1360.74 1211.64 L1361.33 1211.64 L1361.92 1211.64 L1362.5 1211.64 L1363.09 1211.64 L1363.68 1211.64 L1364.26 1211.64 L1364.85 1211.64 L1365.43 1211.64 L1366.02 1211.64 L1366.61 1211.64 L1367.19 1211.64 L1367.78 1211.64 L1368.37 1211.64 L1368.95 1211.64 L1369.54 1211.64 L1370.13 1211.64 L1370.71 1211.64 L1371.3 1211.64 L1371.88 1211.64 L1372.47 1211.64 L1373.06 1211.64 L1373.64 1211.64 L1374.23 1211.64 L1374.82 1211.64 L1375.4 1211.64 L1375.99 1211.64 L1376.58 1211.64 L1377.16 1211.64 L1377.75 1211.64 L1378.34 1211.64 L1378.92 1211.64 L1379.51 1211.64 L1380.09 1211.64 L1380.68 1211.64 L1381.27 1211.64 L1381.85 1211.64 L1382.44 1211.64 L1383.03 1211.64 L1383.61 1211.64 L1384.2 1211.64 L1384.79 1211.64 L1385.37 1211.64 L1385.96 1211.64 L1386.55 1211.64 L1387.13 1211.64 L1387.72 1211.64 L1388.3 1211.64 L1388.89 1211.64 L1389.48 1211.64 L1390.06 1211.64 L1390.65 1211.64 L1391.24 1211.64 L1391.82 1211.64 L1392.41 1211.64 L1393 1211.64 L1393.58 1211.64 L1394.17 1211.64 L1394.75 1211.64 L1395.34 1211.64 L1395.93 1211.64 L1396.51 1211.64 L1397.1 1211.64 L1397.69 1211.64 L1398.27 1211.64 L1398.86 1211.64 L1399.45 1211.64 L1400.03 1211.64 L1400.62 1211.64 L1401.21 1211.64 L1401.79 1211.64 L1402.38 1211.64 L1402.96 1211.64 L1403.55 1211.64 L1404.14 1211.64 L1404.72 1211.64 L1405.31 1211.64 L1405.9 1211.64 L1406.48 1211.64 L1407.07 1211.64 L1407.66 1211.64 L1408.24 1211.64 L1408.83 1211.64 L1409.42 1211.64 L1410 1211.64 L1410.59 1211.64 L1411.17 1211.64 L1411.76 1211.64 L1412.35 1211.64 L1412.93 1211.64 L1413.52 1211.64 L1414.11 1211.64 L1414.69 1211.64 L1415.28 1211.64 L1415.87 1211.64 L1416.45 1211.64 L1417.04 1211.64 L1417.63 1211.64 L1418.21 1211.64 L1418.8 1211.64 L1419.38 1211.64 L1419.97 1211.64 L1420.56 1211.64 L1421.14 1211.64 L1421.73 1211.64 L1422.32 1211.64 L1422.9 1211.64 L1423.49 1211.64 L1424.08 1211.64 L1424.66 1211.64 L1425.25 1211.64 L1425.83 1211.64 L1426.42 1211.64 L1427.01 1211.64 L1427.59 1211.64 L1428.18 1211.64 L1428.77 1211.64 L1429.35 1211.64 L1429.94 1211.64 L1430.53 1211.64 L1431.11 1211.64 L1431.7 1211.64 L1432.29 1211.64 L1432.87 1211.64 L1433.46 1211.64 L1434.04 1211.64 L1434.63 1211.64 L1435.22 1211.64 L1435.8 1211.64 L1436.39 1211.64 L1436.98 1211.64 L1437.56 1211.64 L1438.15 1211.64 L1438.74 1211.64 L1439.32 1211.64 L1439.91 1211.64 L1440.5 1211.64 L1441.08 1211.64 L1441.67 1211.64 L1442.25 1211.64 L1442.84 1211.64 L1443.43 1211.64 L1444.01 1211.64 L1444.6 1211.64 L1445.19 1211.64 L1445.77 1211.64 L1446.36 1211.64 L1446.95 1211.64 L1447.53 1211.64 L1448.12 1211.64 L1448.7 1211.64 L1449.29 1211.64 L1449.88 1211.64 L1450.46 1211.64 L1451.05 1211.64 L1451.64 1211.64 L1452.22 1211.64 L1452.81 1211.64 L1453.4 1211.64 L1453.98 1211.64 L1454.57 1211.64 L1455.16 1211.64 L1455.74 1211.64 L1456.33 1211.64 L1456.91 1211.64 L1457.5 1211.64 L1458.09 1211.64 L1458.67 1211.64 L1459.26 1211.64 L1459.85 1211.64 L1460.43 1211.64 L1461.02 1211.64 L1461.61 1211.64 L1462.19 1211.64 L1462.78 1211.64 L1463.37 1211.64 L1463.95 1211.64 L1464.54 1211.64 L1465.12 1211.64 L1465.71 1211.64 L1466.3 1211.64 L1466.88 1211.64 L1467.47 1211.64 L1468.06 1211.64 L1468.64 1211.64 L1469.23 1211.64 L1469.82 1211.64 L1470.4 1211.64 L1470.99 1211.64 L1471.57 1211.64 L1472.16 1211.64 L1472.75 1211.64 L1473.33 1211.64 L1473.92 1211.64 L1474.51 1211.64 L1475.09 1211.64 L1475.68 1211.64 L1476.27 1211.64 L1476.85 1211.64 L1477.44 1211.64 L1478.03 1211.64 L1478.61 1211.64 L1479.2 1211.64 L1479.78 1211.64 L1480.37 1211.64 L1480.96 1211.64 L1481.54 1211.64 L1482.13 1211.64 L1482.72 1211.64 L1483.3 1211.64 L1483.89 1211.64 L1484.48 1211.64 L1485.06 1211.64 L1485.65 1211.64 L1486.24 1211.64 L1486.82 1211.64 L1487.41 1211.64 L1487.99 1211.64 L1488.58 1211.64 L1489.17 1211.64 L1489.75 1211.64 L1490.34 1211.64 L1490.93 1211.64 L1491.51 1211.64 L1492.1 1211.64 L1492.69 1211.64 L1493.27 1211.64 L1493.86 1211.64 L1494.45 1211.64 L1495.03 1211.64 L1495.62 1211.64 L1496.2 1211.64 L1496.79 1211.64 L1497.38 1211.64 L1497.96 1211.64 L1498.55 1211.64 L1499.14 1211.64 L1499.72 1211.64 L1500.31 1211.64 L1500.9 1211.64 L1501.48 1211.64 L1502.07 1211.64 L1502.65 1211.64 L1503.24 1211.64 L1503.83 1211.64 L1504.41 1211.64 L1505 1211.64 L1505.59 1211.64 L1506.17 1211.64 L1506.76 1211.64 L1507.35 1211.64 L1507.93 1211.64 L1508.52 1211.64 L1509.11 1211.64 L1509.69 1211.64 L1510.28 1211.64 L1510.86 1211.64 L1511.45 1211.64 L1512.04 1211.64 L1512.62 1211.64 L1513.21 1211.64 L1513.8 1211.64 L1514.38 1211.64 L1514.97 1211.64 L1515.56 1211.64 L1516.14 1211.64 L1516.73 1211.64 L1517.32 1211.64 L1517.9 1211.64 L1518.49 1211.64 L1519.07 1211.64 L1519.66 1211.64 L1520.25 1211.64 L1520.83 1211.64 L1521.42 1211.64 L1522.01 1211.64 L1522.59 1211.64 L1523.18 1211.64 L1523.77 1211.64 L1524.35 1211.64 L1524.94 1211.64 L1525.52 1211.64 L1526.11 1211.64 L1526.7 1211.64 L1527.28 1211.64 L1527.87 1211.64 L1528.46 1211.64 L1529.04 1211.64 L1529.63 1211.64 L1530.22 1211.64 L1530.8 1211.64 L1531.39 1211.64 L1531.98 1211.64 L1532.56 1211.64 L1533.15 1211.64 L1533.73 1211.64 L1534.32 1211.64 L1534.91 1211.64 L1535.49 1211.64 L1536.08 1211.64 L1536.67 1211.64 L1537.25 1211.64 L1537.84 1211.64 L1538.43 1211.64 L1539.01 1211.64 L1539.6 1211.64 L1540.19 1211.64 L1540.77 1211.64 L1541.36 1211.64 L1541.94 1211.64 L1542.53 1211.64 L1543.12 1211.64 L1543.7 1211.64 L1544.29 1211.64 L1544.88 1211.64 L1545.46 1211.64 L1546.05 1211.64 L1546.64 1211.64 L1547.22 1211.64 L1547.81 1211.64 L1548.4 1211.64 L1548.98 1211.64 L1549.57 1211.64 L1550.15 1211.64 L1550.74 1211.64 L1551.33 1211.64 L1551.91 1211.64 L1552.5 1211.64 L1553.09 1211.64 L1553.67 1211.64 L1554.26 1211.64 L1554.85 1211.64 L1555.43 1211.64 L1556.02 1211.64 L1556.6 1211.64 L1557.19 1211.64 L1557.78 1211.64 L1558.36 1211.64 L1558.95 1211.64 L1559.54 1211.64 L1560.12 1211.64 L1560.71 1211.64 L1561.3 1211.64 L1561.88 1211.64 L1562.47 1211.64 L1563.06 1211.64 L1563.64 1211.64 L1564.23 1211.64 L1564.81 1211.64 L1565.4 1211.64 L1565.99 1211.64 L1566.57 1211.64 L1567.16 1211.64 L1567.75 1211.64 L1568.33 1211.64 L1568.92 1211.64 L1569.51 1211.64 L1570.09 1211.64 L1570.68 1211.64 L1571.27 1211.64 L1571.85 1211.64 L1572.44 1211.64 L1573.02 1211.64 L1573.61 1211.64 L1574.2 1211.64 L1574.78 1211.64 L1575.37 1211.64 L1575.96 1211.64 L1576.54 1211.64 L1577.13 1211.64 L1577.72 1211.64 L1578.3 1211.64 L1578.89 1211.64 L1579.47 1211.64 L1580.06 1211.64 L1580.65 1211.64 L1581.23 1211.64 L1581.82 1211.64 L1582.41 1211.64 L1582.99 1211.64 L1583.58 1211.64 L1584.17 1211.64 L1584.75 1211.64 L1585.34 1211.64 L1585.93 1211.64 L1586.51 1211.64 L1587.1 1211.64 L1587.68 1211.64 L1588.27 1211.64 L1588.86 1211.64 L1589.44 1211.64 L1590.03 1211.64 L1590.62 1211.64 L1591.2 1211.64 L1591.79 1211.64 L1592.38 1211.64 L1592.96 1211.64 L1593.55 1211.64 L1594.14 1211.64 L1594.72 1211.64 L1595.31 1211.64 L1595.89 1211.64 L1596.48 1211.64 L1597.07 1211.64 L1597.65 1211.64 L1598.24 1211.64 L1598.83 1211.64 L1599.41 1211.64 L1600 1211.64 L1600.59 1211.64 L1601.17 1211.64 L1601.76 1211.64 L1602.34 1211.64 L1602.93 1211.64 L1603.52 1211.64 L1604.1 1211.64 L1604.69 1211.64 L1605.28 1211.64 L1605.86 1211.64 L1606.45 1211.64 L1607.04 1211.64 L1607.62 1211.64 L1608.21 1211.64 L1608.8 1211.64 L1609.38 1211.64 L1609.97 1211.64 L1610.55 1211.64 L1611.14 1211.64 L1611.73 1211.64 L1612.31 1211.64 L1612.9 1211.64 L1613.49 1211.64 L1614.07 1211.64 L1614.66 1211.64 L1615.25 1211.64 L1615.83 1211.64 L1616.42 1211.64 L1617.01 1211.64 L1617.59 1211.64 L1618.18 1211.64 L1618.76 1211.64 L1619.35 1211.64 L1619.94 1211.64 L1620.52 1211.64 L1621.11 1211.64 L1621.7 1211.64 L1622.28 1211.64 L1622.87 1211.64 L1623.46 1211.64 L1624.04 1211.64 L1624.63 1211.64 L1625.22 1211.64 L1625.8 1211.64 L1626.39 1211.64 L1626.97 1211.64 L1627.56 1211.64 L1628.15 1211.64 L1628.73 1211.64 L1629.32 1211.64 L1629.91 1211.64 L1630.49 1211.64 L1631.08 1211.64 L1631.67 1211.64 L1632.25 1211.64 L1632.84 1211.64 L1633.42 1211.64 L1634.01 1211.64 L1634.6 1211.64 L1635.18 1211.64 L1635.77 1211.64 L1636.36 1211.64 L1636.94 1211.64 L1637.53 1211.64 L1638.12 1211.64 L1638.7 1211.64 L1639.29 1211.64 L1639.88 1211.64 L1640.46 1211.64 L1641.05 1211.64 L1641.63 1211.64 L1642.22 1211.64 L1642.81 1211.64 L1643.39 1211.64 L1643.98 1211.64 L1644.57 1211.64 L1645.15 1211.64 L1645.74 1211.64 L1646.33 1211.64 L1646.91 1211.64 L1647.5 1211.64 L1648.09 1211.64 L1648.67 1211.64 L1649.26 1211.64 L1649.84 1211.64 L1650.43 1211.64 L1651.02 1211.64 L1651.6 1211.64 L1652.19 1211.64 L1652.78 1211.64 L1653.36 1211.64 L1653.95 1211.64 L1654.54 1211.64 L1655.12 1211.64 L1655.71 1211.64 L1656.29 1211.64 L1656.88 1211.64 L1657.47 1211.64 L1658.05 1211.64 L1658.64 1211.64 L1659.23 1211.64 L1659.81 1211.64 L1660.4 1211.64 L1660.99 1211.64 L1661.57 1211.64 L1662.16 1211.64 L1662.75 1211.64 L1663.33 1211.64 L1663.92 1211.64 L1664.5 1211.64 L1665.09 1211.64 L1665.68 1211.64 L1666.26 1211.64 L1666.85 1211.64 L1667.44 1211.64 L1668.02 1211.64 L1668.61 1211.64 L1669.2 1211.64 L1669.78 1211.64 L1670.37 1211.64 L1670.96 1211.64 L1671.54 1211.64 L1672.13 1211.64 L1672.71 1211.64 L1673.3 1211.64 L1673.89 1211.64 L1674.47 1211.64 L1675.06 1211.64 L1675.65 1211.64 L1676.23 1211.64 L1676.82 1211.64 L1677.41 1211.64 L1677.99 1211.64 L1678.58 1211.64 L1679.17 1211.64 L1679.75 1211.64 L1680.34 1211.64 L1680.92 1211.64 L1681.51 1211.64 L1682.1 1211.64 L1682.68 1211.64 L1683.27 1211.64 L1683.86 1211.64 L1684.44 1211.64 L1685.03 1211.64 L1685.62 1211.64 L1686.2 1211.64 L1686.79 1211.64 L1687.37 1211.64 L1687.96 1211.64 L1688.55 1211.64 L1689.13 1211.64 L1689.72 1211.64 L1690.31 1211.64 L1690.89 1211.64 L1691.48 1211.64 L1692.07 1211.64 L1692.65 1211.64 L1693.24 1211.64 L1693.83 1211.64 L1694.41 1211.64 L1695 1211.64 L1695.58 1211.64 L1696.17 1211.64 L1696.76 1211.64 L1697.34 1211.64 L1697.93 1211.64 L1698.52 1211.64 L1699.1 1211.64 L1699.69 1211.64 L1700.28 1211.64 L1700.86 1211.64 L1701.45 1211.64 L1702.04 1211.64 L1702.62 1211.64 L1703.21 1211.64 L1703.79 1211.64 L1704.38 1211.64 L1704.97 1211.64 L1705.55 1211.64 L1706.14 1211.64 L1706.73 1211.64 L1707.31 1211.64 L1707.9 1211.64 L1708.49 1211.64 L1709.07 1211.64 L1709.66 1211.64 L1710.24 1211.64 L1710.83 1211.64 L1711.42 1211.64 L1712 1211.64 L1712.59 1211.64 L1713.18 1211.64 L1713.76 1211.64 L1714.35 1211.64 L1714.94 1211.64 L1715.52 1211.64 L1716.11 1211.64 L1716.7 1211.64 L1717.28 1211.64 L1717.87 1211.64 L1718.45 1211.64 L1719.04 1211.64 L1719.63 1211.64 L1720.21 1211.64 L1720.8 1211.64 L1721.39 1211.64 L1721.97 1211.64 L1722.56 1211.64 L1723.15 1211.64 L1723.73 1211.64 L1724.32 1211.64 L1724.91 1211.64 L1725.49 1211.64 L1726.08 1211.64 L1726.66 1211.64 L1727.25 1211.64 L1727.84 1211.64 L1728.42 1211.64 L1729.01 1211.64 L1729.6 1211.64 L1730.18 1211.64 L1730.77 1211.64 L1731.36 1211.64 L1731.94 1211.64 L1732.53 1211.64 L1733.11 1211.64 L1733.7 1211.64 L1734.29 1211.64 L1734.87 1211.64 L1735.46 1211.64 L1736.05 1211.64 L1736.63 1211.64 L1737.22 1211.64 L1737.81 1211.64 L1738.39 1211.64 L1738.98 1211.64 L1739.57 1211.64 L1740.15 1211.64 L1740.74 1211.64 L1741.32 1211.64 L1741.91 1211.64 L1742.5 1211.64 L1743.08 1211.64 L1743.67 1211.64 L1744.26 1211.64 L1744.84 1211.64 L1745.43 1211.64 L1746.02 1211.64 L1746.6 1211.64 L1747.19 1211.64 L1747.78 1211.64 L1748.36 1211.64 L1748.95 1211.64 L1749.53 1211.64 L1750.12 1211.64 L1750.71 1211.64 L1751.29 1211.64 L1751.88 1211.64 L1752.47 1211.64 L1753.05 1211.64 L1753.64 1211.64 L1754.23 1211.64 L1754.81 1211.64 L1755.4 1211.64 L1755.99 1211.64 L1756.57 1211.64 L1757.16 1211.64 L1757.74 1211.64 L1758.33 1211.64 L1758.92 1211.64 L1759.5 1211.64 L1760.09 1211.64 L1760.68 1211.64 L1761.26 1211.64 L1761.85 1211.64 L1762.44 1211.64 L1763.02 1211.64 L1763.61 1211.64 L1764.19 1211.64 L1764.78 1211.64 L1765.37 1211.64 L1765.95 1211.64 L1766.54 1211.64 L1767.13 1211.64 L1767.71 1211.64 L1768.3 1211.64 L1768.89 1211.64 L1769.47 1211.64 L1770.06 1211.64 L1770.65 1211.64 L1771.23 1211.64 L1771.82 1211.64 L1772.4 1211.64 L1772.99 1211.64 L1773.58 1211.64 L1774.16 1211.64 L1774.75 1211.64 L1775.34 1211.64 L1775.92 1211.64 L1776.51 1211.64 L1777.1 1211.64 L1777.68 1211.64 L1778.27 1211.64 L1778.86 1211.64 L1779.44 1211.64 L1780.03 1211.64 L1780.61 1211.64 L1781.2 1211.64 L1781.79 1211.64 L1782.37 1211.64 L1782.96 1211.64 L1783.55 1211.64 L1784.13 1211.64 L1784.72 1211.64 L1785.31 1211.64 L1785.89 1211.64 L1786.48 1211.64 L1787.06 1211.64 L1787.65 1211.64 L1788.24 1211.64 L1788.82 1211.64 L1789.41 1211.64 L1790 1211.64 L1790.58 1211.64 L1791.17 1211.64 L1791.76 1211.64 L1792.34 1211.64 L1792.93 1211.64 L1793.52 1211.64 L1794.1 1211.64 L1794.69 1211.64 L1795.27 1211.64 L1795.86 1211.64 L1796.45 1211.64 L1797.03 1211.64 L1797.62 1211.64 L1798.21 1211.64 L1798.79 1211.64 L1799.38 1211.64 L1799.97 1211.64 L1800.55 1211.64 L1801.14 1211.64 L1801.73 1211.64 L1802.31 1211.64 L1802.9 1211.64 L1803.48 1211.64 L1804.07 1211.64 L1804.66 1211.64 L1805.24 1211.64 L1805.83 1211.64 L1806.42 1211.64 L1807 1211.64 L1807.59 1211.64 L1808.18 1211.64 L1808.76 1211.64 L1809.35 1211.64 L1809.94 1211.64 L1810.52 1211.64 L1811.11 1211.64 L1811.69 1211.64 L1812.28 1211.64 L1812.87 1211.64 L1813.45 1211.64 L1814.04 1211.64 L1814.63 1211.64 L1815.21 1211.64 L1815.8 1211.64 L1816.39 1211.64 L1816.97 1211.64 L1817.56 1211.64 L1818.14 1211.64 L1818.73 1211.64 L1819.32 1211.64 L1819.9 1211.64 L1820.49 1211.64 L1821.08 1211.64 L1821.66 1211.64 L1822.25 1211.64 L1822.84 1211.64 L1823.42 1211.64 L1824.01 1211.64 L1824.6 1211.64 L1825.18 1211.64 L1825.77 1211.64 L1826.35 1211.64 L1826.94 1211.64 L1827.53 1211.64 L1828.11 1211.64 L1828.7 1211.64 L1829.29 1211.64 L1829.87 1211.64 L1830.46 1211.64 L1831.05 1211.64 L1831.63 1211.64 L1832.22 1211.64 L1832.81 1211.64 L1833.39 1211.64 L1833.98 1211.64 L1834.56 1211.64 L1835.15 1211.64 L1835.74 1211.64 L1836.32 1211.64 L1836.91 1211.64 L1837.5 1211.64 L1838.08 1211.64 L1838.67 1211.64 L1839.26 1211.64 L1839.84 1211.64 L1840.43 1211.64 L1841.01 1211.64 L1841.6 1211.64 L1842.19 1211.64 L1842.77 1211.64 L1843.36 1211.64 L1843.95 1211.64 L1844.53 1211.64 L1845.12 1211.64 L1845.71 1211.64 L1846.29 1211.64 L1846.88 1211.64 L1847.47 1211.64 L1848.05 1211.64 L1848.64 1211.64 L1849.22 1211.64 L1849.81 1211.64 L1850.4 1211.64 L1850.98 1211.64 L1851.57 1211.64 L1852.16 1211.64 L1852.74 1211.64 L1853.33 1211.64 L1853.92 1211.64 L1854.5 1211.64 L1855.09 1211.64 L1855.68 1211.64 L1856.26 1211.64 L1856.85 1211.64 L1857.43 1211.64 L1858.02 1211.64 L1858.61 1211.64 L1859.19 1211.64 L1859.78 1211.64 L1860.37 1211.64 L1860.95 1211.64 L1861.54 1211.64 L1862.13 1211.64 L1862.71 1211.64 L1863.3 1211.64 L1863.88 1211.64 L1864.47 1211.64 L1865.06 1211.64 L1865.64 1211.64 L1866.23 1211.64 L1866.82 1211.64 L1867.4 1211.64 L1867.99 1211.64 L1868.58 1211.64 L1869.16 1211.64 L1869.75 1211.64 L1870.34 1211.64 L1870.92 1211.64 L1871.51 1211.64 L1872.09 1211.64 L1872.68 1211.64 L1873.27 1211.64 L1873.85 1211.64 L1874.44 1211.64 L1875.03 1211.64 L1875.61 1211.64 L1876.2 1211.64 L1876.79 1211.64 L1877.37 1211.64 L1877.96 1211.64 L1878.55 1211.64 L1879.13 1211.64 L1879.72 1211.64 L1880.3 1211.64 L1880.89 1211.64 L1881.48 1211.64 L1882.06 1211.64 L1882.65 1211.64 L1883.24 1211.64 L1883.82 1211.64 L1884.41 1211.64 L1885 1211.64 L1885.58 1211.64 L1886.17 1211.64 L1886.76 1211.64 L1887.34 1211.64 L1887.93 1211.64 L1888.51 1211.64 L1889.1 1211.64 L1889.69 1211.64 L1890.27 1211.64 L1890.86 1211.64 L1891.45 1211.64 L1892.03 1211.64 L1892.62 1211.64 L1893.21 1211.64 L1893.79 1211.64 L1894.38 1211.64 L1894.96 1211.64 L1895.55 1211.64 L1896.14 1211.64 L1896.72 1211.64 L1897.31 1211.64 L1897.9 1211.64 L1898.48 1211.64 L1899.07 1211.64 L1899.66 1211.64 L1900.24 1211.64 L1900.83 1211.64 L1901.42 1211.64 L1902 1211.64 L1902.59 1211.64 L1903.17 1211.64 L1903.76 1211.64 L1904.35 1211.64 L1904.93 1211.64 L1905.52 1211.64 L1906.11 1211.64 L1906.69 1211.64 L1907.28 1211.64 L1907.87 1211.64 L1908.45 1211.64 L1909.04 1211.64 L1909.63 1211.64 L1910.21 1211.64 L1910.8 1211.64 L1911.38 1211.64 L1911.97 1211.64 L1912.56 1211.64 L1913.14 1211.64 L1913.73 1211.64 L1914.32 1211.64 L1914.9 1211.64 L1915.49 1211.64 L1916.08 1211.64 L1916.66 1211.64 L1917.25 1211.64 L1917.83 1211.64 L1918.42 1211.64 L1919.01 1211.64 L1919.59 1211.64 L1920.18 1211.64 L1920.77 1211.64 L1921.35 1211.64 L1921.94 1211.64 L1922.53 1211.64 L1923.11 1211.64 L1923.7 1211.64 L1924.29 1211.64 L1924.87 1211.64 L1925.46 1211.64 L1926.04 1211.64 L1926.63 1211.64 L1927.22 1211.64 L1927.8 1211.64 L1928.39 1211.64 L1928.98 1211.64 L1929.56 1211.64 L1930.15 1211.64 L1930.74 1211.64 L1931.32 1211.64 L1931.91 1211.64 L1932.5 1211.64 L1933.08 1211.64 L1933.67 1211.64 L1934.25 1211.64 L1934.84 1211.64 L1935.43 1211.64 L1936.01 1211.64 L1936.6 1211.64 L1937.19 1211.64 L1937.77 1211.64 L1938.36 1211.64 L1938.95 1211.64 L1939.53 1211.64 L1940.12 1211.64 L1940.71 1211.64 L1941.29 1211.64 L1941.88 1211.64 L1942.46 1211.64 L1943.05 1211.64 L1943.64 1211.64 L1944.22 1211.64 L1944.81 1211.64 L1945.4 1211.64 L1945.98 1211.64 L1946.57 1211.64 L1947.16 1211.64 L1947.74 1211.64 L1948.33 1211.64 L1948.91 1211.64 L1949.5 1211.64 L1950.09 1211.64 L1950.67 1211.64 L1951.26 1211.64 L1951.85 1211.64 L1952.43 1211.64 L1953.02 1211.64 L1953.61 1211.64 L1954.19 1211.64 L1954.78 1211.64 L1955.37 1211.64 L1955.95 1211.64 L1956.54 1211.64 L1957.12 1211.64 L1957.71 1211.64 L1958.3 1211.64 L1958.88 1211.64 L1959.47 1211.64 L1960.06 1211.64 L1960.64 1211.64 L1961.23 1211.64 L1961.82 1211.64 L1962.4 1211.64 L1962.99 1211.64 L1963.58 1211.64 L1964.16 1211.64 L1964.75 1211.64 L1965.33 1211.64 L1965.92 1211.64 L1966.51 1211.64 L1967.09 1211.64 L1967.68 1211.64 L1968.27 1211.64 L1968.85 1211.64 L1969.44 1211.64 L1970.03 1211.64 L1970.61 1211.64 L1971.2 1211.64 L1971.78 1211.64 L1972.37 1211.64 L1972.96 1211.64 L1973.54 1211.64 L1974.13 1211.64 L1974.72 1211.64 L1975.3 1211.64 L1975.89 1211.64 L1976.48 1211.64 L1977.06 1211.64 L1977.65 1211.64 L1978.24 1211.64 L1978.82 1211.64 L1979.41 1211.64 L1979.99 1211.64 L1980.58 1211.64 L1981.17 1211.64 L1981.75 1211.64 L1982.34 1211.64 L1982.93 1211.64 L1983.51 1211.64 L1984.1 1211.64 L1984.69 1211.64 L1985.27 1211.64 L1985.86 1211.64 L1986.45 1211.64 L1987.03 1211.64 L1987.62 1211.64 L1988.2 1211.64 L1988.79 1211.64 L1989.38 1211.64 L1989.96 1211.64 L1990.55 1211.64 L1991.14 1211.64 L1991.72 1211.64 L1992.31 1211.64 L1992.9 1211.64 L1993.48 1211.64 L1994.07 1211.64 L1994.65 1211.64 L1995.24 1211.64 L1995.83 1211.64 L1996.41 1211.64 L1997 1211.64 L1997.59 1211.64 L1998.17 1211.64 L1998.76 1211.64 L1999.35 1211.64 L1999.93 1211.64 L2000.52 1211.64 L2001.11 1211.64 L2001.69 1211.64 L2002.28 1211.64 L2002.86 1211.64 L2003.45 1211.64 L2004.04 1211.64 L2004.62 1211.64 L2005.21 1211.64 L2005.8 1211.64 L2006.38 1211.64 L2006.97 1211.64 L2007.56 1211.64 L2008.14 1211.64 L2008.73 1211.64 L2009.32 1211.64 L2009.9 1211.64 L2010.49 1211.64 L2011.07 1211.64 L2011.66 1211.64 L2012.25 1211.64 L2012.83 1211.64 L2013.42 1211.64 L2014.01 1211.64 L2014.59 1211.64 L2015.18 1211.64 L2015.77 1211.64 L2016.35 1211.64 L2016.94 1211.64 L2017.53 1211.64 L2018.11 1211.64 L2018.7 1211.64 L2019.28 1211.64 L2019.87 1211.64 L2020.46 1211.64 L2021.04 1211.64 L2021.63 1211.64 L2022.22 1211.64 L2022.8 1211.64 L2023.39 1211.64 L2023.98 1211.64 L2024.56 1211.64 L2025.15 1211.64 L2025.73 1211.64 L2026.32 1211.64 L2026.91 1211.64 L2027.49 1211.64 L2028.08 1211.64 L2028.67 1211.64 L2029.25 1211.64 L2029.84 1211.64 L2030.43 1211.64 L2031.01 1211.64 L2031.6 1211.64 L2032.19 1211.64 L2032.77 1211.64 L2033.36 1211.64 L2033.94 1211.64 L2034.53 1211.64 L2035.12 1211.64 L2035.7 1211.64 L2036.29 1211.64 L2036.88 1211.64 L2037.46 1211.64 L2038.05 1211.64 L2038.64 1211.64 L2039.22 1211.64 L2039.81 1211.64 L2040.4 1211.64 L2040.98 1211.64 L2041.57 1211.64 L2042.15 1211.64 L2042.74 1211.64 L2043.33 1211.64 L2043.91 1211.64 L2044.5 1211.64 L2045.09 1211.64 L2045.67 1211.64 L2046.26 1211.64 L2046.85 1211.64 L2047.43 1211.64 L2048.02 1211.64 L2048.6 1211.64 L2049.19 1211.64 L2049.78 1211.64 L2050.36 1211.64 L2050.95 1211.64 L2051.54 1211.64 L2052.12 1211.64 L2052.71 1211.64 L2053.3 1211.64 L2053.88 1211.64 L2054.47 1211.64 L2055.06 1211.64 L2055.64 1211.64 L2056.23 1211.64 L2056.81 1211.64 L2057.4 1211.64 L2057.99 1211.64 L2058.57 1211.64 L2059.16 1211.64 L2059.75 1211.64 L2060.33 1211.64 L2060.92 1211.64 L2061.51 1211.64 L2062.09 1211.64 L2062.68 1211.64 L2063.27 1211.64 L2063.85 1211.64 L2064.44 1211.64 L2065.02 1211.64 L2065.61 1211.64 L2066.2 1211.64 L2066.78 1211.64 L2067.37 1211.64 L2067.96 1211.64 L2068.54 1211.64 L2069.13 1211.64 L2069.72 1211.64 L2070.3 1211.64 L2070.89 1211.64 L2071.48 1211.64 L2072.06 1211.64 L2072.65 1211.64 L2073.23 1211.64 L2073.82 1211.64 L2074.41 1211.64 L2074.99 1211.64 L2075.58 1211.64 L2076.17 1211.64 L2076.75 1211.64 L2077.34 1211.64 L2077.93 1211.64 L2078.51 1211.64 L2079.1 1211.64 L2079.68 1211.64 L2080.27 1211.64 L2080.86 1211.64 L2081.44 1211.64 L2082.03 1211.64 L2082.62 1211.64 L2083.2 1211.64 L2083.79 1211.64 L2084.38 1211.64 L2084.96 1211.64 L2085.55 1211.64 L2086.14 1211.64 L2086.72 1211.64 L2087.31 1211.64 L2087.89 1211.64 L2088.48 1211.64 L2089.07 1211.64 L2089.65 1211.64 L2090.24 1211.64 L2090.83 1211.64 L2091.41 1211.64 L2092 1211.64 L2092.59 1211.64 L2093.17 1211.64 L2093.76 1211.64 L2094.35 1211.64 L2094.93 1211.64 L2095.52 1211.64 L2096.1 1211.64 L2096.69 1211.64 L2097.28 1211.64 L2097.86 1211.64 L2098.45 1211.64 L2099.04 1211.64 L2099.62 1211.64 L2100.21 1211.64 L2100.8 1211.64 L2101.38 1211.64 L2101.97 1211.64 L2102.55 1211.64 L2103.14 1211.64 L2103.73 1211.64 L2104.31 1211.64 L2104.9 1211.64 L2105.49 1211.64 L2106.07 1211.64 L2106.66 1211.64 L2107.25 1211.64 L2107.83 1211.64 L2108.42 1211.64 L2109.01 1211.64 L2109.59 1211.64 L2110.18 1211.64 L2110.76 1211.64 L2111.35 1211.64 L2111.94 1211.64 L2112.52 1211.64 L2113.11 1211.64 L2113.7 1211.64 L2114.28 1211.64 L2114.87 1211.64 L2115.46 1211.64 L2116.04 1211.64 L2116.63 1211.64 L2117.22 1211.64 L2117.8 1211.64 L2118.39 1211.64 L2118.97 1211.64 L2119.56 1211.64 L2120.15 1211.64 L2120.73 1211.64 L2121.32 1211.64 L2121.91 1211.64 L2122.49 1211.64 L2123.08 1211.64 L2123.67 1211.64 L2124.25 1211.64 L2124.84 1211.64 L2125.42 1211.64 L2126.01 1211.64 L2126.6 1211.64 L2127.18 1211.64 L2127.77 1211.64 L2128.36 1211.64 L2128.94 1211.64 L2129.53 1211.64 L2130.12 1211.64 L2130.7 1211.64 L2131.29 1211.64 L2131.88 1211.64 L2132.46 1211.64 L2133.05 1211.64 L2133.63 1211.64 L2134.22 1211.64 L2134.81 1211.64 L2135.39 1211.64 L2135.98 1211.64 L2136.57 1211.64 L2137.15 1211.64 L2137.74 1211.64 L2138.33 1211.64 L2138.91 1211.64 L2139.5 1211.64 L2140.09 1211.64 L2140.67 1211.64 L2141.26 1211.64 L2141.84 1211.64 L2142.43 1211.64 L2143.02 1211.64 L2143.6 1211.64 L2144.19 1211.64 L2144.78 1211.64 L2145.36 1211.64 L2145.95 1211.64 L2146.54 1211.64 L2147.12 1211.64 L2147.71 1211.64 L2148.3 1211.64 L2148.88 1211.64 L2149.47 1211.64 L2150.05 1211.64 L2150.64 1211.64 L2151.23 1211.64 L2151.81 1211.64 L2152.4 1211.64 L2152.99 1211.64 L2153.57 1211.64 L2154.16 1211.64 L2154.75 1211.64 L2155.33 1211.64 L2155.92 1211.64 L2156.5 1211.64 L2157.09 1211.64 L2157.68 1211.64 L2158.26 1211.64 L2158.26 1210.92 L2157.68 1210.92 L2157.09 1210.92 L2156.5 1210.92 L2155.92 1210.92 L2155.33 1210.92 L2154.75 1210.92 L2154.16 1210.92 L2153.57 1210.92 L2152.99 1210.92 L2152.4 1210.92 L2151.81 1210.92 L2151.23 1210.92 L2150.64 1210.92 L2150.05 1210.92 L2149.47 1210.92 L2148.88 1210.92 L2148.3 1210.92 L2147.71 1210.92 L2147.12 1210.92 L2146.54 1210.92 L2145.95 1210.92 L2145.36 1210.92 L2144.78 1210.92 L2144.19 1210.92 L2143.6 1210.92 L2143.02 1210.92 L2142.43 1210.92 L2141.84 1210.92 L2141.26 1210.92 L2140.67 1210.92 L2140.09 1210.92 L2139.5 1210.92 L2138.91 1210.92 L2138.33 1210.92 L2137.74 1210.92 L2137.15 1210.92 L2136.57 1210.92 L2135.98 1210.92 L2135.39 1210.92 L2134.81 1210.92 L2134.22 1210.92 L2133.63 1210.92 L2133.05 1210.92 L2132.46 1210.92 L2131.88 1210.92 L2131.29 1210.92 L2130.7 1210.92 L2130.12 1210.92 L2129.53 1210.92 L2128.94 1210.92 L2128.36 1210.92 L2127.77 1210.92 L2127.18 1210.92 L2126.6 1210.92 L2126.01 1210.92 L2125.42 1210.92 L2124.84 1210.92 L2124.25 1210.92 L2123.67 1210.92 L2123.08 1210.92 L2122.49 1210.92 L2121.91 1210.92 L2121.32 1210.92 L2120.73 1210.92 L2120.15 1210.92 L2119.56 1210.92 L2118.97 1210.92 L2118.39 1210.92 L2117.8 1210.92 L2117.22 1210.92 L2116.63 1210.92 L2116.04 1210.92 L2115.46 1210.92 L2114.87 1210.92 L2114.28 1210.92 L2113.7 1210.92 L2113.11 1210.92 L2112.52 1210.92 L2111.94 1210.92 L2111.35 1210.92 L2110.76 1210.92 L2110.18 1210.92 L2109.59 1210.92 L2109.01 1210.92 L2108.42 1210.92 L2107.83 1210.92 L2107.25 1210.92 L2106.66 1210.92 L2106.07 1210.92 L2105.49 1210.92 L2104.9 1210.92 L2104.31 1210.92 L2103.73 1210.92 L2103.14 1210.92 L2102.55 1210.92 L2101.97 1210.92 L2101.38 1210.92 L2100.8 1210.92 L2100.21 1210.92 L2099.62 1210.92 L2099.04 1210.92 L2098.45 1210.92 L2097.86 1210.92 L2097.28 1210.92 L2096.69 1210.92 L2096.1 1210.92 L2095.52 1210.92 L2094.93 1210.92 L2094.35 1210.92 L2093.76 1210.92 L2093.17 1210.92 L2092.59 1210.92 L2092 1210.92 L2091.41 1210.92 L2090.83 1210.92 L2090.24 1210.92 L2089.65 1210.92 L2089.07 1210.92 L2088.48 1210.92 L2087.89 1210.92 L2087.31 1210.92 L2086.72 1210.92 L2086.14 1210.92 L2085.55 1210.92 L2084.96 1210.92 L2084.38 1210.92 L2083.79 1210.92 L2083.2 1210.92 L2082.62 1210.92 L2082.03 1210.92 L2081.44 1210.92 L2080.86 1210.92 L2080.27 1210.92 L2079.68 1210.92 L2079.1 1210.92 L2078.51 1210.92 L2077.93 1210.92 L2077.34 1210.92 L2076.75 1210.92 L2076.17 1210.92 L2075.58 1210.92 L2074.99 1210.92 L2074.41 1210.92 L2073.82 1210.92 L2073.23 1210.92 L2072.65 1210.92 L2072.06 1210.92 L2071.48 1210.92 L2070.89 1210.92 L2070.3 1210.92 L2069.72 1210.92 L2069.13 1210.92 L2068.54 1210.92 L2067.96 1210.92 L2067.37 1210.92 L2066.78 1210.92 L2066.2 1210.92 L2065.61 1210.92 L2065.02 1210.92 L2064.44 1210.92 L2063.85 1210.92 L2063.27 1210.92 L2062.68 1210.92 L2062.09 1210.92 L2061.51 1210.92 L2060.92 1210.92 L2060.33 1210.92 L2059.75 1210.92 L2059.16 1210.92 L2058.57 1210.92 L2057.99 1210.92 L2057.4 1210.92 L2056.81 1210.92 L2056.23 1210.92 L2055.64 1210.92 L2055.06 1210.92 L2054.47 1210.92 L2053.88 1210.92 L2053.3 1210.92 L2052.71 1210.92 L2052.12 1210.92 L2051.54 1210.92 L2050.95 1210.92 L2050.36 1210.92 L2049.78 1210.92 L2049.19 1210.92 L2048.6 1210.92 L2048.02 1210.92 L2047.43 1210.92 L2046.85 1210.92 L2046.26 1210.92 L2045.67 1210.92 L2045.09 1210.92 L2044.5 1210.92 L2043.91 1210.92 L2043.33 1210.92 L2042.74 1210.92 L2042.15 1210.92 L2041.57 1210.92 L2040.98 1210.92 L2040.4 1210.92 L2039.81 1210.92 L2039.22 1210.92 L2038.64 1210.92 L2038.05 1210.92 L2037.46 1210.92 L2036.88 1210.92 L2036.29 1210.92 L2035.7 1210.92 L2035.12 1210.92 L2034.53 1210.92 L2033.94 1210.92 L2033.36 1210.92 L2032.77 1210.92 L2032.19 1210.92 L2031.6 1210.92 L2031.01 1210.92 L2030.43 1210.92 L2029.84 1210.92 L2029.25 1210.92 L2028.67 1210.92 L2028.08 1210.92 L2027.49 1210.92 L2026.91 1210.92 L2026.32 1210.92 L2025.73 1210.92 L2025.15 1210.92 L2024.56 1210.92 L2023.98 1210.92 L2023.39 1210.92 L2022.8 1210.92 L2022.22 1210.92 L2021.63 1210.92 L2021.04 1210.92 L2020.46 1210.92 L2019.87 1210.92 L2019.28 1210.92 L2018.7 1210.92 L2018.11 1210.92 L2017.53 1210.92 L2016.94 1210.92 L2016.35 1210.92 L2015.77 1210.92 L2015.18 1210.92 L2014.59 1210.92 L2014.01 1210.92 L2013.42 1210.92 L2012.83 1210.92 L2012.25 1210.92 L2011.66 1210.92 L2011.07 1210.92 L2010.49 1210.92 L2009.9 1210.92 L2009.32 1210.92 L2008.73 1210.92 L2008.14 1210.92 L2007.56 1210.92 L2006.97 1210.92 L2006.38 1210.92 L2005.8 1210.92 L2005.21 1210.92 L2004.62 1210.92 L2004.04 1210.92 L2003.45 1210.92 L2002.86 1210.92 L2002.28 1210.92 L2001.69 1210.92 L2001.11 1210.92 L2000.52 1210.92 L1999.93 1210.92 L1999.35 1210.92 L1998.76 1210.92 L1998.17 1210.92 L1997.59 1210.92 L1997 1210.92 L1996.41 1210.92 L1995.83 1210.92 L1995.24 1210.92 L1994.65 1210.92 L1994.07 1210.92 L1993.48 1210.92 L1992.9 1210.92 L1992.31 1210.92 L1991.72 1210.92 L1991.14 1210.92 L1990.55 1210.92 L1989.96 1210.92 L1989.38 1210.92 L1988.79 1210.92 L1988.2 1210.92 L1987.62 1210.92 L1987.03 1210.92 L1986.45 1210.92 L1985.86 1210.92 L1985.27 1210.92 L1984.69 1210.92 L1984.1 1210.92 L1983.51 1210.92 L1982.93 1210.92 L1982.34 1210.92 L1981.75 1210.92 L1981.17 1210.92 L1980.58 1210.92 L1979.99 1210.92 L1979.41 1210.92 L1978.82 1210.92 L1978.24 1210.92 L1977.65 1210.92 L1977.06 1210.92 L1976.48 1210.92 L1975.89 1210.92 L1975.3 1210.92 L1974.72 1210.92 L1974.13 1210.92 L1973.54 1210.92 L1972.96 1210.92 L1972.37 1210.92 L1971.78 1210.92 L1971.2 1210.92 L1970.61 1210.92 L1970.03 1210.92 L1969.44 1210.92 L1968.85 1210.92 L1968.27 1210.92 L1967.68 1210.92 L1967.09 1210.92 L1966.51 1210.92 L1965.92 1210.92 L1965.33 1210.92 L1964.75 1210.92 L1964.16 1210.92 L1963.58 1210.92 L1962.99 1210.92 L1962.4 1210.92 L1961.82 1210.92 L1961.23 1210.92 L1960.64 1210.92 L1960.06 1210.92 L1959.47 1210.92 L1958.88 1210.92 L1958.3 1210.92 L1957.71 1210.92 L1957.12 1210.92 L1956.54 1210.92 L1955.95 1210.92 L1955.37 1210.92 L1954.78 1210.92 L1954.19 1210.92 L1953.61 1210.92 L1953.02 1210.92 L1952.43 1210.92 L1951.85 1210.92 L1951.26 1210.92 L1950.67 1210.92 L1950.09 1210.92 L1949.5 1210.92 L1948.91 1210.92 L1948.33 1210.92 L1947.74 1210.92 L1947.16 1210.92 L1946.57 1210.92 L1945.98 1210.92 L1945.4 1210.92 L1944.81 1210.92 L1944.22 1210.92 L1943.64 1210.92 L1943.05 1210.92 L1942.46 1210.92 L1941.88 1210.92 L1941.29 1210.92 L1940.71 1210.92 L1940.12 1210.92 L1939.53 1210.92 L1938.95 1210.92 L1938.36 1210.92 L1937.77 1210.92 L1937.19 1210.92 L1936.6 1210.92 L1936.01 1210.92 L1935.43 1210.92 L1934.84 1210.92 L1934.25 1210.92 L1933.67 1210.92 L1933.08 1210.92 L1932.5 1210.92 L1931.91 1210.92 L1931.32 1210.92 L1930.74 1210.92 L1930.15 1210.92 L1929.56 1210.92 L1928.98 1210.92 L1928.39 1210.92 L1927.8 1210.92 L1927.22 1210.92 L1926.63 1210.92 L1926.04 1210.92 L1925.46 1210.92 L1924.87 1210.92 L1924.29 1210.92 L1923.7 1210.92 L1923.11 1210.92 L1922.53 1210.92 L1921.94 1210.92 L1921.35 1210.92 L1920.77 1210.92 L1920.18 1210.92 L1919.59 1210.92 L1919.01 1210.92 L1918.42 1210.92 L1917.83 1210.92 L1917.25 1210.92 L1916.66 1210.92 L1916.08 1210.92 L1915.49 1210.92 L1914.9 1210.92 L1914.32 1210.92 L1913.73 1210.92 L1913.14 1210.92 L1912.56 1210.92 L1911.97 1210.92 L1911.38 1210.92 L1910.8 1210.92 L1910.21 1210.92 L1909.63 1210.92 L1909.04 1210.92 L1908.45 1210.92 L1907.87 1210.92 L1907.28 1210.92 L1906.69 1210.92 L1906.11 1210.92 L1905.52 1210.92 L1904.93 1210.92 L1904.35 1210.92 L1903.76 1210.92 L1903.17 1210.92 L1902.59 1210.92 L1902 1210.92 L1901.42 1210.92 L1900.83 1210.92 L1900.24 1210.92 L1899.66 1210.92 L1899.07 1210.92 L1898.48 1210.92 L1897.9 1210.92 L1897.31 1210.92 L1896.72 1210.92 L1896.14 1210.92 L1895.55 1210.92 L1894.96 1210.92 L1894.38 1210.92 L1893.79 1210.92 L1893.21 1210.92 L1892.62 1210.92 L1892.03 1210.92 L1891.45 1210.92 L1890.86 1210.92 L1890.27 1210.92 L1889.69 1210.92 L1889.1 1210.92 L1888.51 1210.92 L1887.93 1210.92 L1887.34 1210.92 L1886.76 1210.92 L1886.17 1210.92 L1885.58 1210.92 L1885 1210.92 L1884.41 1210.92 L1883.82 1210.92 L1883.24 1210.92 L1882.65 1210.92 L1882.06 1210.92 L1881.48 1210.92 L1880.89 1210.92 L1880.3 1210.92 L1879.72 1210.92 L1879.13 1210.92 L1878.55 1210.92 L1877.96 1210.92 L1877.37 1210.92 L1876.79 1210.92 L1876.2 1210.92 L1875.61 1210.92 L1875.03 1210.92 L1874.44 1210.92 L1873.85 1210.92 L1873.27 1210.92 L1872.68 1210.92 L1872.09 1210.92 L1871.51 1210.92 L1870.92 1210.92 L1870.34 1210.92 L1869.75 1210.92 L1869.16 1210.92 L1868.58 1210.92 L1867.99 1210.92 L1867.4 1210.92 L1866.82 1210.92 L1866.23 1210.92 L1865.64 1210.92 L1865.06 1210.92 L1864.47 1210.92 L1863.88 1210.92 L1863.3 1210.92 L1862.71 1210.92 L1862.13 1210.92 L1861.54 1210.92 L1860.95 1210.92 L1860.37 1210.92 L1859.78 1210.92 L1859.19 1210.92 L1858.61 1210.92 L1858.02 1210.92 L1857.43 1210.92 L1856.85 1210.92 L1856.26 1210.92 L1855.68 1210.92 L1855.09 1210.92 L1854.5 1210.92 L1853.92 1210.92 L1853.33 1210.92 L1852.74 1210.92 L1852.16 1210.92 L1851.57 1210.92 L1850.98 1210.92 L1850.4 1210.92 L1849.81 1210.92 L1849.22 1210.92 L1848.64 1210.92 L1848.05 1210.92 L1847.47 1210.92 L1846.88 1210.92 L1846.29 1210.92 L1845.71 1210.92 L1845.12 1210.92 L1844.53 1210.92 L1843.95 1210.92 L1843.36 1210.92 L1842.77 1210.92 L1842.19 1210.92 L1841.6 1210.92 L1841.01 1210.92 L1840.43 1210.92 L1839.84 1210.92 L1839.26 1210.92 L1838.67 1210.92 L1838.08 1210.92 L1837.5 1210.92 L1836.91 1210.92 L1836.32 1210.92 L1835.74 1210.92 L1835.15 1210.92 L1834.56 1210.92 L1833.98 1210.92 L1833.39 1210.92 L1832.81 1210.92 L1832.22 1210.92 L1831.63 1210.92 L1831.05 1210.92 L1830.46 1210.92 L1829.87 1210.92 L1829.29 1210.92 L1828.7 1210.92 L1828.11 1210.92 L1827.53 1210.92 L1826.94 1210.92 L1826.35 1210.92 L1825.77 1210.92 L1825.18 1210.92 L1824.6 1210.92 L1824.01 1210.92 L1823.42 1210.92 L1822.84 1210.92 L1822.25 1210.92 L1821.66 1210.92 L1821.08 1210.92 L1820.49 1210.92 L1819.9 1210.92 L1819.32 1210.92 L1818.73 1210.92 L1818.14 1210.92 L1817.56 1210.92 L1816.97 1210.92 L1816.39 1210.92 L1815.8 1210.92 L1815.21 1210.92 L1814.63 1210.92 L1814.04 1210.92 L1813.45 1210.92 L1812.87 1210.92 L1812.28 1210.92 L1811.69 1210.92 L1811.11 1210.92 L1810.52 1210.92 L1809.94 1210.92 L1809.35 1210.92 L1808.76 1210.92 L1808.18 1210.92 L1807.59 1210.92 L1807 1210.92 L1806.42 1210.92 L1805.83 1210.92 L1805.24 1210.92 L1804.66 1210.92 L1804.07 1210.92 L1803.48 1210.92 L1802.9 1210.92 L1802.31 1210.92 L1801.73 1210.92 L1801.14 1210.92 L1800.55 1210.92 L1799.97 1210.92 L1799.38 1210.92 L1798.79 1210.92 L1798.21 1210.92 L1797.62 1210.92 L1797.03 1210.92 L1796.45 1210.92 L1795.86 1210.92 L1795.27 1210.92 L1794.69 1210.92 L1794.1 1210.92 L1793.52 1210.92 L1792.93 1210.92 L1792.34 1210.92 L1791.76 1210.92 L1791.17 1210.92 L1790.58 1210.92 L1790 1210.92 L1789.41 1210.92 L1788.82 1210.92 L1788.24 1210.92 L1787.65 1210.92 L1787.06 1210.92 L1786.48 1210.92 L1785.89 1210.92 L1785.31 1210.92 L1784.72 1210.92 L1784.13 1210.92 L1783.55 1210.92 L1782.96 1210.92 L1782.37 1210.92 L1781.79 1210.92 L1781.2 1210.92 L1780.61 1210.92 L1780.03 1210.92 L1779.44 1210.92 L1778.86 1210.92 L1778.27 1210.92 L1777.68 1210.92 L1777.1 1210.92 L1776.51 1210.92 L1775.92 1210.92 L1775.34 1210.92 L1774.75 1210.92 L1774.16 1210.92 L1773.58 1210.92 L1772.99 1210.92 L1772.4 1210.92 L1771.82 1210.92 L1771.23 1210.92 L1770.65 1210.92 L1770.06 1210.92 L1769.47 1210.92 L1768.89 1210.92 L1768.3 1210.92 L1767.71 1210.92 L1767.13 1210.92 L1766.54 1210.92 L1765.95 1210.92 L1765.37 1210.92 L1764.78 1210.92 L1764.19 1210.92 L1763.61 1210.92 L1763.02 1210.92 L1762.44 1210.92 L1761.85 1210.92 L1761.26 1210.92 L1760.68 1210.92 L1760.09 1210.92 L1759.5 1210.92 L1758.92 1210.92 L1758.33 1210.92 L1757.74 1210.92 L1757.16 1210.92 L1756.57 1210.92 L1755.99 1210.92 L1755.4 1210.92 L1754.81 1210.92 L1754.23 1210.92 L1753.64 1210.92 L1753.05 1210.92 L1752.47 1210.92 L1751.88 1210.92 L1751.29 1210.92 L1750.71 1210.92 L1750.12 1210.92 L1749.53 1210.92 L1748.95 1210.92 L1748.36 1210.92 L1747.78 1210.92 L1747.19 1210.92 L1746.6 1210.92 L1746.02 1210.92 L1745.43 1210.92 L1744.84 1210.92 L1744.26 1210.92 L1743.67 1210.92 L1743.08 1210.92 L1742.5 1210.92 L1741.91 1210.92 L1741.32 1210.92 L1740.74 1210.92 L1740.15 1210.92 L1739.57 1210.92 L1738.98 1210.92 L1738.39 1210.92 L1737.81 1210.92 L1737.22 1210.92 L1736.63 1210.92 L1736.05 1210.92 L1735.46 1210.92 L1734.87 1210.92 L1734.29 1210.92 L1733.7 1210.92 L1733.11 1210.92 L1732.53 1210.92 L1731.94 1210.92 L1731.36 1210.92 L1730.77 1210.92 L1730.18 1210.92 L1729.6 1210.92 L1729.01 1210.92 L1728.42 1210.92 L1727.84 1210.92 L1727.25 1210.92 L1726.66 1210.92 L1726.08 1210.92 L1725.49 1210.92 L1724.91 1210.92 L1724.32 1210.92 L1723.73 1210.92 L1723.15 1210.92 L1722.56 1210.92 L1721.97 1210.92 L1721.39 1210.92 L1720.8 1210.92 L1720.21 1210.92 L1719.63 1210.92 L1719.04 1210.92 L1718.45 1210.92 L1717.87 1210.92 L1717.28 1210.92 L1716.7 1210.92 L1716.11 1210.92 L1715.52 1210.92 L1714.94 1210.92 L1714.35 1210.92 L1713.76 1210.92 L1713.18 1210.92 L1712.59 1210.92 L1712 1210.92 L1711.42 1210.92 L1710.83 1210.92 L1710.24 1210.92 L1709.66 1210.92 L1709.07 1210.92 L1708.49 1210.92 L1707.9 1210.92 L1707.31 1210.92 L1706.73 1210.92 L1706.14 1210.92 L1705.55 1210.92 L1704.97 1210.92 L1704.38 1210.92 L1703.79 1210.92 L1703.21 1210.92 L1702.62 1210.92 L1702.04 1210.92 L1701.45 1210.92 L1700.86 1210.92 L1700.28 1210.92 L1699.69 1210.92 L1699.1 1210.92 L1698.52 1210.92 L1697.93 1210.92 L1697.34 1210.92 L1696.76 1210.92 L1696.17 1210.92 L1695.58 1210.92 L1695 1210.92 L1694.41 1210.92 L1693.83 1210.92 L1693.24 1210.92 L1692.65 1210.92 L1692.07 1210.92 L1691.48 1210.92 L1690.89 1210.92 L1690.31 1210.92 L1689.72 1210.92 L1689.13 1210.92 L1688.55 1210.92 L1687.96 1210.92 L1687.37 1210.92 L1686.79 1210.92 L1686.2 1210.92 L1685.62 1210.92 L1685.03 1210.92 L1684.44 1210.92 L1683.86 1210.92 L1683.27 1210.92 L1682.68 1210.92 L1682.1 1210.92 L1681.51 1210.92 L1680.92 1210.92 L1680.34 1210.92 L1679.75 1210.92 L1679.17 1210.92 L1678.58 1210.92 L1677.99 1210.92 L1677.41 1210.92 L1676.82 1210.92 L1676.23 1210.92 L1675.65 1210.92 L1675.06 1210.92 L1674.47 1210.92 L1673.89 1210.92 L1673.3 1210.92 L1672.71 1210.92 L1672.13 1210.92 L1671.54 1210.92 L1670.96 1210.92 L1670.37 1210.92 L1669.78 1210.92 L1669.2 1210.92 L1668.61 1210.92 L1668.02 1210.92 L1667.44 1210.92 L1666.85 1210.92 L1666.26 1210.92 L1665.68 1210.92 L1665.09 1210.92 L1664.5 1210.92 L1663.92 1210.92 L1663.33 1210.92 L1662.75 1210.92 L1662.16 1210.92 L1661.57 1210.92 L1660.99 1210.92 L1660.4 1210.92 L1659.81 1210.92 L1659.23 1210.92 L1658.64 1210.92 L1658.05 1210.92 L1657.47 1210.92 L1656.88 1210.92 L1656.29 1210.92 L1655.71 1210.92 L1655.12 1210.92 L1654.54 1210.92 L1653.95 1210.92 L1653.36 1210.92 L1652.78 1210.92 L1652.19 1210.92 L1651.6 1210.92 L1651.02 1210.92 L1650.43 1210.92 L1649.84 1210.92 L1649.26 1210.92 L1648.67 1210.92 L1648.09 1210.92 L1647.5 1210.92 L1646.91 1210.92 L1646.33 1210.92 L1645.74 1210.92 L1645.15 1210.92 L1644.57 1210.92 L1643.98 1210.92 L1643.39 1210.92 L1642.81 1210.92 L1642.22 1210.92 L1641.63 1210.92 L1641.05 1210.92 L1640.46 1210.92 L1639.88 1210.92 L1639.29 1210.92 L1638.7 1210.92 L1638.12 1210.92 L1637.53 1210.92 L1636.94 1210.92 L1636.36 1210.92 L1635.77 1210.92 L1635.18 1210.92 L1634.6 1210.92 L1634.01 1210.92 L1633.42 1210.92 L1632.84 1210.92 L1632.25 1210.92 L1631.67 1210.92 L1631.08 1210.92 L1630.49 1210.92 L1629.91 1210.92 L1629.32 1210.92 L1628.73 1210.92 L1628.15 1210.92 L1627.56 1210.92 L1626.97 1210.92 L1626.39 1210.92 L1625.8 1210.92 L1625.22 1210.92 L1624.63 1210.92 L1624.04 1210.92 L1623.46 1210.92 L1622.87 1210.92 L1622.28 1210.92 L1621.7 1210.92 L1621.11 1210.92 L1620.52 1210.92 L1619.94 1210.92 L1619.35 1210.92 L1618.76 1210.92 L1618.18 1210.92 L1617.59 1210.92 L1617.01 1210.92 L1616.42 1210.92 L1615.83 1210.92 L1615.25 1210.92 L1614.66 1210.92 L1614.07 1210.92 L1613.49 1210.92 L1612.9 1210.92 L1612.31 1210.92 L1611.73 1210.92 L1611.14 1210.92 L1610.55 1210.92 L1609.97 1210.92 L1609.38 1210.92 L1608.8 1210.92 L1608.21 1210.92 L1607.62 1210.92 L1607.04 1210.92 L1606.45 1210.92 L1605.86 1210.92 L1605.28 1210.92 L1604.69 1210.92 L1604.1 1210.92 L1603.52 1210.92 L1602.93 1210.92 L1602.34 1210.92 L1601.76 1210.92 L1601.17 1210.92 L1600.59 1210.92 L1600 1210.92 L1599.41 1210.92 L1598.83 1210.92 L1598.24 1210.92 L1597.65 1210.92 L1597.07 1210.92 L1596.48 1210.92 L1595.89 1210.92 L1595.31 1210.92 L1594.72 1210.92 L1594.14 1210.92 L1593.55 1210.92 L1592.96 1210.92 L1592.38 1210.92 L1591.79 1210.92 L1591.2 1210.92 L1590.62 1210.92 L1590.03 1210.92 L1589.44 1210.92 L1588.86 1210.92 L1588.27 1210.92 L1587.68 1210.92 L1587.1 1210.92 L1586.51 1210.92 L1585.93 1210.92 L1585.34 1210.92 L1584.75 1210.92 L1584.17 1210.92 L1583.58 1210.92 L1582.99 1210.92 L1582.41 1210.92 L1581.82 1210.92 L1581.23 1210.92 L1580.65 1210.92 L1580.06 1210.92 L1579.47 1210.92 L1578.89 1210.92 L1578.3 1210.92 L1577.72 1210.92 L1577.13 1210.92 L1576.54 1210.92 L1575.96 1210.92 L1575.37 1210.92 L1574.78 1210.92 L1574.2 1210.92 L1573.61 1210.92 L1573.02 1210.92 L1572.44 1210.92 L1571.85 1210.92 L1571.27 1210.92 L1570.68 1210.92 L1570.09 1210.92 L1569.51 1210.92 L1568.92 1210.92 L1568.33 1210.92 L1567.75 1210.92 L1567.16 1210.92 L1566.57 1210.92 L1565.99 1210.92 L1565.4 1210.92 L1564.81 1210.92 L1564.23 1210.92 L1563.64 1210.92 L1563.06 1210.92 L1562.47 1210.92 L1561.88 1210.92 L1561.3 1210.92 L1560.71 1210.92 L1560.12 1210.92 L1559.54 1210.92 L1558.95 1210.92 L1558.36 1210.92 L1557.78 1210.92 L1557.19 1210.92 L1556.6 1210.92 L1556.02 1210.92 L1555.43 1210.92 L1554.85 1210.92 L1554.26 1210.92 L1553.67 1210.92 L1553.09 1210.92 L1552.5 1210.92 L1551.91 1210.92 L1551.33 1210.92 L1550.74 1210.92 L1550.15 1210.92 L1549.57 1210.92 L1548.98 1210.92 L1548.4 1210.92 L1547.81 1210.92 L1547.22 1210.92 L1546.64 1210.92 L1546.05 1210.92 L1545.46 1210.92 L1544.88 1210.92 L1544.29 1210.92 L1543.7 1210.92 L1543.12 1210.92 L1542.53 1210.92 L1541.94 1210.92 L1541.36 1210.92 L1540.77 1210.92 L1540.19 1210.92 L1539.6 1210.92 L1539.01 1210.92 L1538.43 1210.92 L1537.84 1210.92 L1537.25 1210.92 L1536.67 1210.92 L1536.08 1210.92 L1535.49 1210.92 L1534.91 1210.92 L1534.32 1210.92 L1533.73 1210.92 L1533.15 1210.92 L1532.56 1210.92 L1531.98 1210.92 L1531.39 1210.92 L1530.8 1210.92 L1530.22 1210.92 L1529.63 1210.92 L1529.04 1210.92 L1528.46 1210.92 L1527.87 1210.92 L1527.28 1210.92 L1526.7 1210.92 L1526.11 1210.92 L1525.52 1210.92 L1524.94 1210.92 L1524.35 1210.92 L1523.77 1210.92 L1523.18 1210.92 L1522.59 1210.92 L1522.01 1210.92 L1521.42 1210.92 L1520.83 1210.92 L1520.25 1210.92 L1519.66 1210.92 L1519.07 1210.92 L1518.49 1210.92 L1517.9 1210.92 L1517.32 1210.92 L1516.73 1210.92 L1516.14 1210.92 L1515.56 1210.92 L1514.97 1210.92 L1514.38 1210.92 L1513.8 1210.92 L1513.21 1210.92 L1512.62 1210.92 L1512.04 1210.92 L1511.45 1210.92 L1510.86 1210.92 L1510.28 1210.92 L1509.69 1210.92 L1509.11 1210.92 L1508.52 1210.92 L1507.93 1210.92 L1507.35 1210.92 L1506.76 1210.92 L1506.17 1210.92 L1505.59 1210.92 L1505 1210.92 L1504.41 1210.92 L1503.83 1210.92 L1503.24 1210.92 L1502.65 1210.92 L1502.07 1210.92 L1501.48 1210.92 L1500.9 1210.92 L1500.31 1210.92 L1499.72 1210.92 L1499.14 1210.92 L1498.55 1210.92 L1497.96 1210.92 L1497.38 1210.92 L1496.79 1210.92 L1496.2 1210.92 L1495.62 1210.92 L1495.03 1210.92 L1494.45 1210.92 L1493.86 1210.92 L1493.27 1210.92 L1492.69 1210.92 L1492.1 1210.92 L1491.51 1210.92 L1490.93 1210.92 L1490.34 1210.92 L1489.75 1210.92 L1489.17 1210.92 L1488.58 1210.92 L1487.99 1210.92 L1487.41 1210.92 L1486.82 1210.92 L1486.24 1210.92 L1485.65 1210.92 L1485.06 1210.92 L1484.48 1210.92 L1483.89 1210.92 L1483.3 1210.92 L1482.72 1210.92 L1482.13 1210.92 L1481.54 1210.92 L1480.96 1210.92 L1480.37 1210.92 L1479.78 1210.92 L1479.2 1210.92 L1478.61 1210.92 L1478.03 1210.92 L1477.44 1210.92 L1476.85 1210.92 L1476.27 1210.92 L1475.68 1210.92 L1475.09 1210.92 L1474.51 1210.92 L1473.92 1210.92 L1473.33 1210.92 L1472.75 1210.92 L1472.16 1210.92 L1471.57 1210.92 L1470.99 1210.92 L1470.4 1210.92 L1469.82 1210.92 L1469.23 1210.92 L1468.64 1210.92 L1468.06 1210.92 L1467.47 1210.92 L1466.88 1210.92 L1466.3 1210.92 L1465.71 1210.92 L1465.12 1210.92 L1464.54 1210.92 L1463.95 1210.92 L1463.37 1210.92 L1462.78 1210.92 L1462.19 1210.92 L1461.61 1210.92 L1461.02 1210.92 L1460.43 1210.92 L1459.85 1210.92 L1459.26 1210.92 L1458.67 1210.92 L1458.09 1210.92 L1457.5 1210.92 L1456.91 1210.92 L1456.33 1210.92 L1455.74 1210.92 L1455.16 1210.92 L1454.57 1210.92 L1453.98 1210.92 L1453.4 1210.92 L1452.81 1210.92 L1452.22 1210.92 L1451.64 1210.92 L1451.05 1210.92 L1450.46 1210.92 L1449.88 1210.92 L1449.29 1210.92 L1448.7 1210.92 L1448.12 1210.92 L1447.53 1210.92 L1446.95 1210.92 L1446.36 1210.92 L1445.77 1210.92 L1445.19 1210.92 L1444.6 1210.92 L1444.01 1210.92 L1443.43 1210.92 L1442.84 1210.92 L1442.25 1210.92 L1441.67 1210.92 L1441.08 1210.92 L1440.5 1210.92 L1439.91 1210.92 L1439.32 1210.92 L1438.74 1210.92 L1438.15 1210.92 L1437.56 1210.92 L1436.98 1210.92 L1436.39 1210.92 L1435.8 1210.92 L1435.22 1210.92 L1434.63 1210.92 L1434.04 1210.92 L1433.46 1210.92 L1432.87 1210.92 L1432.29 1210.92 L1431.7 1210.92 L1431.11 1210.92 L1430.53 1210.92 L1429.94 1210.92 L1429.35 1210.92 L1428.77 1210.92 L1428.18 1210.92 L1427.59 1210.92 L1427.01 1210.92 L1426.42 1210.92 L1425.83 1210.92 L1425.25 1210.92 L1424.66 1210.92 L1424.08 1210.92 L1423.49 1210.92 L1422.9 1210.92 L1422.32 1210.92 L1421.73 1210.92 L1421.14 1210.92 L1420.56 1210.92 L1419.97 1210.92 L1419.38 1210.92 L1418.8 1210.92 L1418.21 1210.92 L1417.63 1210.92 L1417.04 1210.92 L1416.45 1210.92 L1415.87 1210.92 L1415.28 1210.92 L1414.69 1210.92 L1414.11 1210.92 L1413.52 1210.92 L1412.93 1210.92 L1412.35 1210.92 L1411.76 1210.92 L1411.17 1210.92 L1410.59 1210.92 L1410 1210.92 L1409.42 1210.92 L1408.83 1210.92 L1408.24 1210.92 L1407.66 1210.92 L1407.07 1210.92 L1406.48 1210.92 L1405.9 1210.92 L1405.31 1210.92 L1404.72 1210.92 L1404.14 1210.92 L1403.55 1210.92 L1402.96 1210.92 L1402.38 1210.92 L1401.79 1210.92 L1401.21 1210.92 L1400.62 1210.92 L1400.03 1210.92 L1399.45 1210.92 L1398.86 1210.92 L1398.27 1210.92 L1397.69 1210.92 L1397.1 1210.92 L1396.51 1210.92 L1395.93 1210.92 L1395.34 1210.92 L1394.75 1210.92 L1394.17 1210.92 L1393.58 1210.92 L1393 1210.92 L1392.41 1210.92 L1391.82 1210.92 L1391.24 1210.92 L1390.65 1210.92 L1390.06 1210.92 L1389.48 1210.92 L1388.89 1210.92 L1388.3 1210.92 L1387.72 1210.92 L1387.13 1210.92 L1386.55 1210.92 L1385.96 1210.92 L1385.37 1210.92 L1384.79 1210.92 L1384.2 1210.92 L1383.61 1210.92 L1383.03 1210.92 L1382.44 1210.92 L1381.85 1210.92 L1381.27 1210.92 L1380.68 1210.92 L1380.09 1210.92 L1379.51 1210.92 L1378.92 1210.92 L1378.34 1210.92 L1377.75 1210.92 L1377.16 1210.92 L1376.58 1210.92 L1375.99 1210.92 L1375.4 1210.92 L1374.82 1210.92 L1374.23 1210.92 L1373.64 1210.92 L1373.06 1210.92 L1372.47 1210.92 L1371.88 1210.92 L1371.3 1210.92 L1370.71 1210.92 L1370.13 1210.92 L1369.54 1210.92 L1368.95 1210.92 L1368.37 1210.92 L1367.78 1210.92 L1367.19 1210.92 L1366.61 1210.92 L1366.02 1210.92 L1365.43 1210.92 L1364.85 1210.92 L1364.26 1210.92 L1363.68 1210.92 L1363.09 1210.92 L1362.5 1210.92 L1361.92 1210.92 L1361.33 1210.92 L1360.74 1210.92 L1360.16 1210.92 L1359.57 1210.92 L1358.98 1210.92 L1358.4 1210.92 L1357.81 1210.92 L1357.22 1210.92 L1356.64 1210.92 L1356.05 1210.92 L1355.47 1210.92 L1354.88 1210.92 L1354.29 1210.92 L1353.71 1210.92 L1353.12 1210.92 L1352.53 1210.92 L1351.95 1210.92 L1351.36 1210.92 L1350.77 1210.92 L1350.19 1210.92 L1349.6 1210.92 L1349.01 1210.92 L1348.43 1210.92 L1347.84 1210.92 L1347.26 1210.92 L1346.67 1210.92 L1346.08 1210.92 L1345.5 1210.92 L1344.91 1210.92 L1344.32 1210.92 L1343.74 1210.92 L1343.15 1210.92 L1342.56 1210.92 L1341.98 1210.92 L1341.39 1210.92 L1340.8 1210.92 L1340.22 1210.92 L1339.63 1210.92 L1339.05 1210.92 L1338.46 1210.92 L1337.87 1210.92 L1337.29 1210.92 L1336.7 1210.92 L1336.11 1210.92 L1335.53 1210.92 L1334.94 1210.92 L1334.35 1210.92 L1333.77 1210.92 L1333.18 1210.92 L1332.6 1210.92 L1332.01 1210.92 L1331.42 1210.92 L1330.84 1210.92 L1330.25 1210.92 L1329.66 1210.92 L1329.08 1210.92 L1328.49 1210.92 L1327.9 1210.92 L1327.32 1210.92 L1326.73 1210.92 L1326.14 1210.92 L1325.56 1210.92 L1324.97 1210.92 L1324.39 1210.92 L1323.8 1210.92 L1323.21 1210.92 L1322.63 1210.92 L1322.04 1210.92 L1321.45 1210.92 L1320.87 1210.92 L1320.28 1210.92 L1319.69 1210.92 L1319.11 1210.92 L1318.52 1210.92 L1317.93 1210.92 L1317.35 1210.92 L1316.76 1210.92 L1316.18 1210.92 L1315.59 1210.92 L1315 1210.92 L1314.42 1210.92 L1313.83 1210.92 L1313.24 1210.92 L1312.66 1210.92 L1312.07 1210.92 L1311.48 1210.92 L1310.9 1210.92 L1310.31 1210.92 L1309.73 1210.92 L1309.14 1210.92 L1308.55 1210.92 L1307.97 1210.92 L1307.38 1210.92 L1306.79 1210.92 L1306.21 1210.92 L1305.62 1210.92 L1305.03 1210.92 L1304.45 1210.92 L1303.86 1210.92 L1303.27 1210.92 L1302.69 1210.92 L1302.1 1210.92 L1301.52 1210.92 L1300.93 1210.92 L1300.34 1210.92 L1299.76 1210.92 L1299.17 1210.92 L1298.58 1210.92 L1298 1210.92 L1297.41 1210.92 L1296.82 1210.92 L1296.24 1210.92 L1295.65 1210.92 L1295.06 1210.92 L1294.48 1210.92 L1293.89 1210.92 L1293.31 1210.92 L1292.72 1210.92 L1292.13 1210.92 L1291.55 1210.92 L1290.96 1210.92 L1290.37 1210.92 L1289.79 1210.92 L1289.2 1210.92 L1288.61 1210.92 L1288.03 1210.92 L1287.44 1210.92 L1286.86 1210.92 L1286.27 1210.92 L1285.68 1210.92 L1285.1 1210.92 L1284.51 1210.92 L1283.92 1210.92 L1283.34 1210.92 L1282.75 1210.92 L1282.16 1210.92 L1281.58 1210.92 L1280.99 1210.92 L1280.4 1210.92 L1279.82 1210.92 L1279.23 1210.92 L1278.65 1210.92 L1278.06 1210.92 L1277.47 1210.92 L1276.89 1210.92 L1276.3 1210.92 L1275.71 1210.92 L1275.13 1210.92 L1274.54 1210.92 L1273.95 1210.92 L1273.37 1210.92 L1272.78 1210.92 L1272.19 1210.92 L1271.61 1210.92 L1271.02 1210.92 L1270.44 1210.92 L1269.85 1210.92 L1269.26 1210.92 L1268.68 1210.92 L1268.09 1210.92 L1267.5 1210.92 L1266.92 1210.92 L1266.33 1210.92 L1265.74 1210.92 L1265.16 1210.92 L1264.57 1210.92 L1263.98 1210.92 L1263.4 1210.92 L1262.81 1210.92 L1262.23 1210.92 L1261.64 1210.92 L1261.05 1210.92 L1260.47 1210.92 L1259.88 1210.92 L1259.29 1210.92 L1258.71 1210.92 L1258.12 1210.92 L1257.53 1210.92 L1256.95 1210.92 L1256.36 1210.92 L1255.78 1210.92 L1255.19 1210.92 L1254.6 1210.92 L1254.02 1210.92 L1253.43 1210.92 L1252.84 1210.92 L1252.26 1210.92 L1251.67 1210.92 L1251.08 1210.92 L1250.5 1210.92 L1249.91 1210.92 L1249.32 1210.92 L1248.74 1210.92 L1248.15 1210.92 L1247.57 1210.92 L1246.98 1210.92 L1246.39 1210.92 L1245.81 1210.92 L1245.22 1210.92 L1244.63 1210.92 L1244.05 1210.92 L1243.46 1210.92 L1242.87 1210.92 L1242.29 1210.92 L1241.7 1210.92 L1241.11 1210.92 L1240.53 1210.92 L1239.94 1210.92 L1239.36 1210.92 L1238.77 1210.92 L1238.18 1210.92 L1237.6 1210.92 L1237.01 1210.92 L1236.42 1210.92 L1235.84 1210.92 L1235.25 1210.92 L1234.66 1210.92 L1234.08 1210.92 L1233.49 1210.92 L1232.91 1210.92 L1232.32 1210.92 L1231.73 1210.92 L1231.15 1210.92 L1230.56 1210.92 L1229.97 1210.92 L1229.39 1210.92 L1228.8 1210.92 L1228.21 1210.92 L1227.63 1210.92 L1227.04 1210.92 L1226.45 1210.92 L1225.87 1210.92 L1225.28 1210.92 L1224.7 1210.92 L1224.11 1210.92 L1223.52 1210.92 L1222.94 1210.92 L1222.35 1210.92 L1221.76 1210.92 L1221.18 1210.92 L1220.59 1210.92 L1220 1210.92 L1219.42 1210.92 L1218.83 1210.92 L1218.24 1210.92 L1217.66 1210.92 L1217.07 1210.92 L1216.49 1210.92 L1215.9 1210.92 L1215.31 1210.92 L1214.73 1210.92 L1214.14 1210.92 L1213.55 1210.92 L1212.97 1210.92 L1212.38 1210.92 L1211.79 1210.92 L1211.21 1210.92 L1210.62 1210.92 L1210.03 1210.92 L1209.45 1210.92 L1208.86 1210.92 L1208.28 1210.92 L1207.69 1210.92 L1207.1 1210.92 L1206.52 1210.92 L1205.93 1210.92 L1205.34 1210.92 L1204.76 1210.92 L1204.17 1210.92 L1203.58 1210.92 L1203 1210.92 L1202.41 1210.92 L1201.83 1210.92 L1201.24 1210.92 L1200.65 1210.92 L1200.07 1210.92 L1199.48 1210.92 L1198.89 1210.92 L1198.31 1210.92 L1197.72 1210.92 L1197.13 1210.92 L1196.55 1210.92 L1195.96 1210.92 L1195.37 1210.92 L1194.79 1210.92 L1194.2 1210.92 L1193.62 1210.92 L1193.03 1210.92 L1192.44 1210.92 L1191.86 1210.92 L1191.27 1210.92 L1190.68 1210.92 L1190.1 1210.92 L1189.51 1210.92 L1188.92 1210.92 L1188.34 1210.92 L1187.75 1210.92 L1187.16 1210.92 L1186.58 1210.92 L1185.99 1210.92 L1185.41 1210.92 L1184.82 1210.92 L1184.23 1210.92 L1183.65 1210.92 L1183.06 1210.92 L1182.47 1210.92 L1181.89 1210.92 L1181.3 1210.92 L1180.71 1210.92 L1180.13 1210.92 L1179.54 1210.92 L1178.96 1210.92 L1178.37 1210.92 L1177.78 1210.92 L1177.2 1210.92 L1176.61 1210.92 L1176.02 1210.92 L1175.44 1210.92 L1174.85 1210.92 L1174.26 1210.92 L1173.68 1210.92 L1173.09 1210.92 L1172.5 1210.92 L1171.92 1210.92 L1171.33 1210.92 L1170.75 1210.92 L1170.16 1210.92 L1169.57 1210.92 L1168.99 1210.92 L1168.4 1210.92 L1167.81 1210.92 L1167.23 1210.92 L1166.64 1210.92 L1166.05 1210.92 L1165.47 1210.92 L1164.88 1210.92 L1164.29 1210.92 L1163.71 1210.92 L1163.12 1210.92 L1162.54 1210.92 L1161.95 1210.92 L1161.36 1210.92 L1160.78 1210.92 L1160.19 1210.92 L1159.6 1210.92 L1159.02 1210.92 L1158.43 1210.92 L1157.84 1210.92 L1157.26 1210.92 L1156.67 1210.92 L1156.09 1210.92 L1155.5 1210.92 L1154.91 1210.92 L1154.33 1210.92 L1153.74 1210.92 L1153.15 1210.92 L1152.57 1210.92 L1151.98 1210.92 L1151.39 1210.92 L1150.81 1210.92 L1150.22 1210.92 L1149.63 1210.92 L1149.05 1210.92 L1148.46 1210.92 L1147.88 1210.92 L1147.29 1210.92 L1146.7 1210.92 L1146.12 1210.92 L1145.53 1210.92 L1144.94 1210.92 L1144.36 1210.92 L1143.77 1210.92 L1143.18 1210.92 L1142.6 1210.92 L1142.01 1210.92 L1141.42 1210.92 L1140.84 1210.92 L1140.25 1210.92 L1139.67 1210.92 L1139.08 1210.92 L1138.49 1210.92 L1137.91 1210.92 L1137.32 1210.92 L1136.73 1210.92 L1136.15 1210.92 L1135.56 1210.92 L1134.97 1210.92 L1134.39 1210.92 L1133.8 1210.92 L1133.21 1210.92 L1132.63 1210.92 L1132.04 1210.92 L1131.46 1210.92 L1130.87 1210.92 L1130.28 1210.92 L1129.7 1210.92 L1129.11 1210.92 L1128.52 1210.92 L1127.94 1210.92 L1127.35 1210.92 L1126.76 1210.92 L1126.18 1210.92 L1125.59 1210.92 L1125.01 1210.92 L1124.42 1210.92 L1123.83 1210.92 L1123.25 1210.92 L1122.66 1210.92 L1122.07 1210.92 L1121.49 1210.92 L1120.9 1210.92 L1120.31 1210.92 L1119.73 1210.92 L1119.14 1210.92 L1118.55 1210.92 L1117.97 1210.92 L1117.38 1210.92 L1116.8 1210.92 L1116.21 1210.92 L1115.62 1210.92 L1115.04 1210.92 L1114.45 1210.92 L1113.86 1210.92 L1113.28 1210.92 L1112.69 1210.92 L1112.1 1210.92 L1111.52 1210.92 L1110.93 1210.92 L1110.34 1210.92 L1109.76 1210.92 L1109.17 1210.92 L1108.59 1210.92 L1108 1210.92 L1107.41 1210.92 L1106.83 1210.92 L1106.24 1210.92 L1105.65 1210.92 L1105.07 1210.92 L1104.48 1210.92 L1103.89 1210.92 L1103.31 1210.92 L1102.72 1210.92 L1102.14 1210.92 L1101.55 1210.92 L1100.96 1210.92 L1100.38 1210.92 L1099.79 1210.92 L1099.2 1210.92 L1098.62 1210.92 L1098.03 1210.92 L1097.44 1210.92 L1096.86 1210.92 L1096.27 1210.92 L1095.68 1210.92 L1095.1 1210.92 L1094.51 1210.92 L1093.93 1210.92 L1093.34 1210.92 L1092.75 1210.92 L1092.17 1210.92 L1091.58 1210.92 L1090.99 1210.92 L1090.41 1210.92 L1089.82 1210.92 L1089.23 1210.92 L1088.65 1210.92 L1088.06 1210.92 L1087.47 1210.92 L1086.89 1210.92 L1086.3 1210.92 L1085.72 1210.92 L1085.13 1210.92 L1084.54 1210.92 L1083.96 1210.92 L1083.37 1210.92 L1082.78 1210.92 L1082.2 1210.92 L1081.61 1210.92 L1081.02 1210.92 L1080.44 1210.92 L1079.85 1210.92 L1079.26 1210.92 L1078.68 1210.92 L1078.09 1210.92 L1077.51 1210.92 L1076.92 1210.92 L1076.33 1210.92 L1075.75 1210.92 L1075.16 1210.92 L1074.57 1210.92 L1073.99 1210.92 L1073.4 1210.92 L1072.81 1210.92 L1072.23 1210.92 L1071.64 1210.92 L1071.06 1210.92 L1070.47 1210.92 L1069.88 1210.92 L1069.3 1210.92 L1068.71 1210.92 L1068.12 1210.92 L1067.54 1210.92 L1066.95 1210.92 L1066.36 1210.92 L1065.78 1210.92 L1065.19 1210.92 L1064.6 1210.92 L1064.02 1210.92 L1063.43 1210.92 L1062.85 1210.92 L1062.26 1210.92 L1061.67 1210.92 L1061.09 1210.92 L1060.5 1210.92 L1059.91 1210.92 L1059.33 1210.92 L1058.74 1210.92 L1058.15 1210.92 L1057.57 1210.92 L1056.98 1210.92 L1056.39 1210.92 L1055.81 1210.92 L1055.22 1210.92 L1054.64 1210.92 L1054.05 1210.92 L1053.46 1210.92 L1052.88 1210.92 L1052.29 1210.92 L1051.7 1210.92 L1051.12 1210.92 L1050.53 1210.92 L1049.94 1210.92 L1049.36 1210.92 L1048.77 1210.92 L1048.19 1210.92 L1047.6 1210.92 L1047.01 1210.92 L1046.43 1210.92 L1045.84 1210.92 L1045.25 1210.92 L1044.67 1210.92 L1044.08 1210.92 L1043.49 1210.92 L1042.91 1210.92 L1042.32 1210.92 L1041.73 1210.92 L1041.15 1210.92 L1040.56 1210.92 L1039.98 1210.92 L1039.39 1210.92 L1038.8 1210.92 L1038.22 1210.92 L1037.63 1210.92 L1037.04 1210.92 L1036.46 1210.92 L1035.87 1210.92 L1035.28 1210.92 L1034.7 1210.92 L1034.11 1210.92 L1033.52 1210.92 L1032.94 1210.92 L1032.35 1210.92 L1031.77 1210.92 L1031.18 1210.92 L1030.59 1210.92 L1030.01 1210.92 L1029.42 1210.92 L1028.83 1210.92 L1028.25 1210.92 L1027.66 1210.92 L1027.07 1210.92 L1026.49 1210.92 L1025.9 1210.92 L1025.32 1210.92 L1024.73 1210.92 L1024.14 1210.92 L1023.56 1210.92 L1022.97 1210.92 L1022.38 1210.92 L1021.8 1210.92 L1021.21 1210.92 L1020.62 1210.92 L1020.04 1210.92 L1019.45 1210.92 L1018.86 1210.92 L1018.28 1210.92 L1017.69 1210.92 L1017.11 1210.92 L1016.52 1210.92 L1015.93 1210.92 L1015.35 1210.92 L1014.76 1210.92 L1014.17 1210.92 L1013.59 1210.92 L1013 1210.92 L1012.41 1210.92 L1011.83 1210.92 L1011.24 1210.92 L1010.65 1210.92 L1010.07 1210.92 L1009.48 1210.92 L1008.9 1210.92 L1008.31 1210.92 L1007.72 1210.92 L1007.14 1210.92 L1006.55 1210.92 L1005.96 1210.92 L1005.38 1210.92 L1004.79 1210.92 L1004.2 1210.92 L1003.62 1210.92 L1003.03 1210.92 L1002.44 1210.92 L1001.86 1210.92 L1001.27 1210.92 L1000.69 1210.92 L1000.1 1210.92 L999.513 1210.92 L998.926 1210.92 L998.34 1210.92 L997.754 1210.92 L997.167 1210.92 L996.581 1210.92 L995.994 1210.92 L995.408 1210.92 L994.822 1210.92 L994.235 1210.92 L993.649 1210.92 L993.062 1210.92 L992.476 1210.92 L991.889 1210.92 L991.303 1210.92 L990.717 1210.92 L990.13 1210.92 L989.544 1210.92 L988.957 1210.92 L988.371 1210.92 L987.785 1210.92 L987.198 1210.92 L986.612 1210.92 L986.025 1210.92  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.28 986.612,1211.28 987.198,1211.28 987.785,1211.28 988.371,1211.28 988.957,1211.28 989.544,1211.28 990.13,1211.28 990.717,1211.28 991.303,1211.28 991.889,1211.28 992.476,1211.28 993.062,1211.28 993.649,1211.28 994.235,1211.28 994.822,1211.28 995.408,1211.28 995.994,1211.28 996.581,1211.28 997.167,1211.28 997.754,1211.28 998.34,1211.28 998.926,1211.28 999.513,1211.28 1000.1,1211.28 1000.69,1211.28 1001.27,1211.28 1001.86,1211.28 1002.44,1211.28 1003.03,1211.28 1003.62,1211.28 1004.2,1211.28 1004.79,1211.28 1005.38,1211.28 1005.96,1211.28 1006.55,1211.28 1007.14,1211.28 1007.72,1211.28 1008.31,1211.28 1008.9,1211.28 1009.48,1211.28 1010.07,1211.28 1010.65,1211.28 1011.24,1211.28 1011.83,1211.28 1012.41,1211.28 1013,1211.28 1013.59,1211.28 1014.17,1211.28 1014.76,1211.28 1015.35,1211.28 1015.93,1211.28 1016.52,1211.28 1017.11,1211.28 1017.69,1211.28 1018.28,1211.28 1018.86,1211.28 1019.45,1211.28 1020.04,1211.28 1020.62,1211.28 1021.21,1211.28 1021.8,1211.28 1022.38,1211.28 1022.97,1211.28 1023.56,1211.28 1024.14,1211.28 1024.73,1211.28 1025.32,1211.28 1025.9,1211.28 1026.49,1211.28 1027.07,1211.28 1027.66,1211.28 1028.25,1211.28 1028.83,1211.28 1029.42,1211.28 1030.01,1211.28 1030.59,1211.28 1031.18,1211.28 1031.77,1211.28 1032.35,1211.28 1032.94,1211.28 1033.52,1211.28 1034.11,1211.28 1034.7,1211.28 1035.28,1211.28 1035.87,1211.28 1036.46,1211.28 1037.04,1211.28 1037.63,1211.28 1038.22,1211.28 1038.8,1211.28 1039.39,1211.28 1039.98,1211.28 1040.56,1211.28 1041.15,1211.28 1041.73,1211.28 1042.32,1211.28 1042.91,1211.28 1043.49,1211.28 1044.08,1211.28 1044.67,1211.28 1045.25,1211.28 1045.84,1211.28 1046.43,1211.28 1047.01,1211.28 1047.6,1211.28 1048.19,1211.28 1048.77,1211.28 1049.36,1211.28 1049.94,1211.28 1050.53,1211.28 1051.12,1211.28 1051.7,1211.28 1052.29,1211.28 1052.88,1211.28 1053.46,1211.28 1054.05,1211.28 1054.64,1211.28 1055.22,1211.28 1055.81,1211.28 1056.39,1211.28 1056.98,1211.28 1057.57,1211.28 1058.15,1211.28 1058.74,1211.28 1059.33,1211.28 1059.91,1211.28 1060.5,1211.28 1061.09,1211.28 1061.67,1211.28 1062.26,1211.28 1062.85,1211.28 1063.43,1211.28 1064.02,1211.28 1064.6,1211.28 1065.19,1211.28 1065.78,1211.28 1066.36,1211.28 1066.95,1211.28 1067.54,1211.28 1068.12,1211.28 1068.71,1211.28 1069.3,1211.28 1069.88,1211.28 1070.47,1211.28 1071.06,1211.28 1071.64,1211.28 1072.23,1211.28 1072.81,1211.28 1073.4,1211.28 1073.99,1211.28 1074.57,1211.28 1075.16,1211.28 1075.75,1211.28 1076.33,1211.28 1076.92,1211.28 1077.51,1211.28 1078.09,1211.28 1078.68,1211.28 1079.26,1211.28 1079.85,1211.28 1080.44,1211.28 1081.02,1211.28 1081.61,1211.28 1082.2,1211.28 1082.78,1211.28 1083.37,1211.28 1083.96,1211.28 1084.54,1211.28 1085.13,1211.28 1085.72,1211.28 1086.3,1211.28 1086.89,1211.28 1087.47,1211.28 1088.06,1211.28 1088.65,1211.28 1089.23,1211.28 1089.82,1211.28 1090.41,1211.28 1090.99,1211.28 1091.58,1211.28 1092.17,1211.28 1092.75,1211.28 1093.34,1211.28 1093.93,1211.28 1094.51,1211.28 1095.1,1211.28 1095.68,1211.28 1096.27,1211.28 1096.86,1211.28 1097.44,1211.28 1098.03,1211.28 1098.62,1211.28 1099.2,1211.28 1099.79,1211.28 1100.38,1211.28 1100.96,1211.28 1101.55,1211.28 1102.14,1211.28 1102.72,1211.28 1103.31,1211.28 1103.89,1211.28 1104.48,1211.28 1105.07,1211.28 1105.65,1211.28 1106.24,1211.28 1106.83,1211.28 1107.41,1211.28 1108,1211.28 1108.59,1211.28 1109.17,1211.28 1109.76,1211.28 1110.34,1211.28 1110.93,1211.28 1111.52,1211.28 1112.1,1211.28 1112.69,1211.28 1113.28,1211.28 1113.86,1211.28 1114.45,1211.28 1115.04,1211.28 1115.62,1211.28 1116.21,1211.28 1116.8,1211.28 1117.38,1211.28 1117.97,1211.28 1118.55,1211.28 1119.14,1211.28 1119.73,1211.28 1120.31,1211.28 1120.9,1211.28 1121.49,1211.28 1122.07,1211.28 1122.66,1211.28 1123.25,1211.28 1123.83,1211.28 1124.42,1211.28 1125.01,1211.28 1125.59,1211.28 1126.18,1211.28 1126.76,1211.28 1127.35,1211.28 1127.94,1211.28 1128.52,1211.28 1129.11,1211.28 1129.7,1211.28 1130.28,1211.28 1130.87,1211.28 1131.46,1211.28 1132.04,1211.28 1132.63,1211.28 1133.21,1211.28 1133.8,1211.28 1134.39,1211.28 1134.97,1211.28 1135.56,1211.28 1136.15,1211.28 1136.73,1211.28 1137.32,1211.28 1137.91,1211.28 1138.49,1211.28 1139.08,1211.28 1139.67,1211.28 1140.25,1211.28 1140.84,1211.28 1141.42,1211.28 1142.01,1211.28 1142.6,1211.28 1143.18,1211.28 1143.77,1211.28 1144.36,1211.28 1144.94,1211.28 1145.53,1211.28 1146.12,1211.28 1146.7,1211.28 1147.29,1211.28 1147.88,1211.28 1148.46,1211.28 1149.05,1211.28 1149.63,1211.28 1150.22,1211.28 1150.81,1211.28 1151.39,1211.28 1151.98,1211.28 1152.57,1211.28 1153.15,1211.28 1153.74,1211.28 1154.33,1211.28 1154.91,1211.28 1155.5,1211.28 1156.09,1211.28 1156.67,1211.28 1157.26,1211.28 1157.84,1211.28 1158.43,1211.28 1159.02,1211.28 1159.6,1211.28 1160.19,1211.28 1160.78,1211.28 1161.36,1211.28 1161.95,1211.28 1162.54,1211.28 1163.12,1211.28 1163.71,1211.28 1164.29,1211.28 1164.88,1211.28 1165.47,1211.28 1166.05,1211.28 1166.64,1211.28 1167.23,1211.28 1167.81,1211.28 1168.4,1211.28 1168.99,1211.28 1169.57,1211.28 1170.16,1211.28 1170.75,1211.28 1171.33,1211.28 1171.92,1211.28 1172.5,1211.28 1173.09,1211.28 1173.68,1211.28 1174.26,1211.28 1174.85,1211.28 1175.44,1211.28 1176.02,1211.28 1176.61,1211.28 1177.2,1211.28 1177.78,1211.28 1178.37,1211.28 1178.96,1211.28 1179.54,1211.28 1180.13,1211.28 1180.71,1211.28 1181.3,1211.28 1181.89,1211.28 1182.47,1211.28 1183.06,1211.28 1183.65,1211.28 1184.23,1211.28 1184.82,1211.28 1185.41,1211.28 1185.99,1211.28 1186.58,1211.28 1187.16,1211.28 1187.75,1211.28 1188.34,1211.28 1188.92,1211.28 1189.51,1211.28 1190.1,1211.28 1190.68,1211.28 1191.27,1211.28 1191.86,1211.28 1192.44,1211.28 1193.03,1211.28 1193.62,1211.28 1194.2,1211.28 1194.79,1211.28 1195.37,1211.28 1195.96,1211.28 1196.55,1211.28 1197.13,1211.28 1197.72,1211.28 1198.31,1211.28 1198.89,1211.28 1199.48,1211.28 1200.07,1211.28 1200.65,1211.28 1201.24,1211.28 1201.83,1211.28 1202.41,1211.28 1203,1211.28 1203.58,1211.28 1204.17,1211.28 1204.76,1211.28 1205.34,1211.28 1205.93,1211.28 1206.52,1211.28 1207.1,1211.28 1207.69,1211.28 1208.28,1211.28 1208.86,1211.28 1209.45,1211.28 1210.03,1211.28 1210.62,1211.28 1211.21,1211.28 1211.79,1211.28 1212.38,1211.28 1212.97,1211.28 1213.55,1211.28 1214.14,1211.28 1214.73,1211.28 1215.31,1211.28 1215.9,1211.28 1216.49,1211.28 1217.07,1211.28 1217.66,1211.28 1218.24,1211.28 1218.83,1211.28 1219.42,1211.28 1220,1211.28 1220.59,1211.28 1221.18,1211.28 1221.76,1211.28 1222.35,1211.28 1222.94,1211.28 1223.52,1211.28 1224.11,1211.28 1224.7,1211.28 1225.28,1211.28 1225.87,1211.28 1226.45,1211.28 1227.04,1211.28 1227.63,1211.28 1228.21,1211.28 1228.8,1211.28 1229.39,1211.28 1229.97,1211.28 1230.56,1211.28 1231.15,1211.28 1231.73,1211.28 1232.32,1211.28 1232.91,1211.28 1233.49,1211.28 1234.08,1211.28 1234.66,1211.28 1235.25,1211.28 1235.84,1211.28 1236.42,1211.28 1237.01,1211.28 1237.6,1211.28 1238.18,1211.28 1238.77,1211.28 1239.36,1211.28 1239.94,1211.28 1240.53,1211.28 1241.11,1211.28 1241.7,1211.28 1242.29,1211.28 1242.87,1211.28 1243.46,1211.28 1244.05,1211.28 1244.63,1211.28 1245.22,1211.28 1245.81,1211.28 1246.39,1211.28 1246.98,1211.28 1247.57,1211.28 1248.15,1211.28 1248.74,1211.28 1249.32,1211.28 1249.91,1211.28 1250.5,1211.28 1251.08,1211.28 1251.67,1211.28 1252.26,1211.28 1252.84,1211.28 1253.43,1211.28 1254.02,1211.28 1254.6,1211.28 1255.19,1211.28 1255.78,1211.28 1256.36,1211.28 1256.95,1211.28 1257.53,1211.28 1258.12,1211.28 1258.71,1211.28 1259.29,1211.28 1259.88,1211.28 1260.47,1211.28 1261.05,1211.28 1261.64,1211.28 1262.23,1211.28 1262.81,1211.28 1263.4,1211.28 1263.98,1211.28 1264.57,1211.28 1265.16,1211.28 1265.74,1211.28 1266.33,1211.28 1266.92,1211.28 1267.5,1211.28 1268.09,1211.28 1268.68,1211.28 1269.26,1211.28 1269.85,1211.28 1270.44,1211.28 1271.02,1211.28 1271.61,1211.28 1272.19,1211.28 1272.78,1211.28 1273.37,1211.28 1273.95,1211.28 1274.54,1211.28 1275.13,1211.28 1275.71,1211.28 1276.3,1211.28 1276.89,1211.28 1277.47,1211.28 1278.06,1211.28 1278.65,1211.28 1279.23,1211.28 1279.82,1211.28 1280.4,1211.28 1280.99,1211.28 1281.58,1211.28 1282.16,1211.28 1282.75,1211.28 1283.34,1211.28 1283.92,1211.28 1284.51,1211.28 1285.1,1211.28 1285.68,1211.28 1286.27,1211.28 1286.86,1211.28 1287.44,1211.28 1288.03,1211.28 1288.61,1211.28 1289.2,1211.28 1289.79,1211.28 1290.37,1211.28 1290.96,1211.28 1291.55,1211.28 1292.13,1211.28 1292.72,1211.28 1293.31,1211.28 1293.89,1211.28 1294.48,1211.28 1295.06,1211.28 1295.65,1211.28 1296.24,1211.28 1296.82,1211.28 1297.41,1211.28 1298,1211.28 1298.58,1211.28 1299.17,1211.28 1299.76,1211.28 1300.34,1211.28 1300.93,1211.28 1301.52,1211.28 1302.1,1211.28 1302.69,1211.28 1303.27,1211.28 1303.86,1211.28 1304.45,1211.28 1305.03,1211.28 1305.62,1211.28 1306.21,1211.28 1306.79,1211.28 1307.38,1211.28 1307.97,1211.28 1308.55,1211.28 1309.14,1211.28 1309.73,1211.28 1310.31,1211.28 1310.9,1211.28 1311.48,1211.28 1312.07,1211.28 1312.66,1211.28 1313.24,1211.28 1313.83,1211.28 1314.42,1211.28 1315,1211.28 1315.59,1211.28 1316.18,1211.28 1316.76,1211.28 1317.35,1211.28 1317.93,1211.28 1318.52,1211.28 1319.11,1211.28 1319.69,1211.28 1320.28,1211.28 1320.87,1211.28 1321.45,1211.28 1322.04,1211.28 1322.63,1211.28 1323.21,1211.28 1323.8,1211.28 1324.39,1211.28 1324.97,1211.28 1325.56,1211.28 1326.14,1211.28 1326.73,1211.28 1327.32,1211.28 1327.9,1211.28 1328.49,1211.28 1329.08,1211.28 1329.66,1211.28 1330.25,1211.28 1330.84,1211.28 1331.42,1211.28 1332.01,1211.28 1332.6,1211.28 1333.18,1211.28 1333.77,1211.28 1334.35,1211.28 1334.94,1211.28 1335.53,1211.28 1336.11,1211.28 1336.7,1211.28 1337.29,1211.28 1337.87,1211.28 1338.46,1211.28 1339.05,1211.28 1339.63,1211.28 1340.22,1211.28 1340.8,1211.28 1341.39,1211.28 1341.98,1211.28 1342.56,1211.28 1343.15,1211.28 1343.74,1211.28 1344.32,1211.28 1344.91,1211.28 1345.5,1211.28 1346.08,1211.28 1346.67,1211.28 1347.26,1211.28 1347.84,1211.28 1348.43,1211.28 1349.01,1211.28 1349.6,1211.28 1350.19,1211.28 1350.77,1211.28 1351.36,1211.28 1351.95,1211.28 1352.53,1211.28 1353.12,1211.28 1353.71,1211.28 1354.29,1211.28 1354.88,1211.28 1355.47,1211.28 1356.05,1211.28 1356.64,1211.28 1357.22,1211.28 1357.81,1211.28 1358.4,1211.28 1358.98,1211.28 1359.57,1211.28 1360.16,1211.28 1360.74,1211.28 1361.33,1211.28 1361.92,1211.28 1362.5,1211.28 1363.09,1211.28 1363.68,1211.28 1364.26,1211.28 1364.85,1211.28 1365.43,1211.28 1366.02,1211.28 1366.61,1211.28 1367.19,1211.28 1367.78,1211.28 1368.37,1211.28 1368.95,1211.28 1369.54,1211.28 1370.13,1211.28 1370.71,1211.28 1371.3,1211.28 1371.88,1211.28 1372.47,1211.28 1373.06,1211.28 1373.64,1211.28 1374.23,1211.28 1374.82,1211.28 1375.4,1211.28 1375.99,1211.28 1376.58,1211.28 1377.16,1211.28 1377.75,1211.28 1378.34,1211.28 1378.92,1211.28 1379.51,1211.28 1380.09,1211.28 1380.68,1211.28 1381.27,1211.28 1381.85,1211.28 1382.44,1211.28 1383.03,1211.28 1383.61,1211.28 1384.2,1211.28 1384.79,1211.28 1385.37,1211.28 1385.96,1211.28 1386.55,1211.28 1387.13,1211.28 1387.72,1211.28 1388.3,1211.28 1388.89,1211.28 1389.48,1211.28 1390.06,1211.28 1390.65,1211.28 1391.24,1211.28 1391.82,1211.28 1392.41,1211.28 1393,1211.28 1393.58,1211.28 1394.17,1211.28 1394.75,1211.28 1395.34,1211.28 1395.93,1211.28 1396.51,1211.28 1397.1,1211.28 1397.69,1211.28 1398.27,1211.28 1398.86,1211.28 1399.45,1211.28 1400.03,1211.28 1400.62,1211.28 1401.21,1211.28 1401.79,1211.28 1402.38,1211.28 1402.96,1211.28 1403.55,1211.28 1404.14,1211.28 1404.72,1211.28 1405.31,1211.28 1405.9,1211.28 1406.48,1211.28 1407.07,1211.28 1407.66,1211.28 1408.24,1211.28 1408.83,1211.28 1409.42,1211.28 1410,1211.28 1410.59,1211.28 1411.17,1211.28 1411.76,1211.28 1412.35,1211.28 1412.93,1211.28 1413.52,1211.28 1414.11,1211.28 1414.69,1211.28 1415.28,1211.28 1415.87,1211.28 1416.45,1211.28 1417.04,1211.28 1417.63,1211.28 1418.21,1211.28 1418.8,1211.28 1419.38,1211.28 1419.97,1211.28 1420.56,1211.28 1421.14,1211.28 1421.73,1211.28 1422.32,1211.28 1422.9,1211.28 1423.49,1211.28 1424.08,1211.28 1424.66,1211.28 1425.25,1211.28 1425.83,1211.28 1426.42,1211.28 1427.01,1211.28 1427.59,1211.28 1428.18,1211.28 1428.77,1211.28 1429.35,1211.28 1429.94,1211.28 1430.53,1211.28 1431.11,1211.28 1431.7,1211.28 1432.29,1211.28 1432.87,1211.28 1433.46,1211.28 1434.04,1211.28 1434.63,1211.28 1435.22,1211.28 1435.8,1211.28 1436.39,1211.28 1436.98,1211.28 1437.56,1211.28 1438.15,1211.28 1438.74,1211.28 1439.32,1211.28 1439.91,1211.28 1440.5,1211.28 1441.08,1211.28 1441.67,1211.28 1442.25,1211.28 1442.84,1211.28 1443.43,1211.28 1444.01,1211.28 1444.6,1211.28 1445.19,1211.28 1445.77,1211.28 1446.36,1211.28 1446.95,1211.28 1447.53,1211.28 1448.12,1211.28 1448.7,1211.28 1449.29,1211.28 1449.88,1211.28 1450.46,1211.28 1451.05,1211.28 1451.64,1211.28 1452.22,1211.28 1452.81,1211.28 1453.4,1211.28 1453.98,1211.28 1454.57,1211.28 1455.16,1211.28 1455.74,1211.28 1456.33,1211.28 1456.91,1211.28 1457.5,1211.28 1458.09,1211.28 1458.67,1211.28 1459.26,1211.28 1459.85,1211.28 1460.43,1211.28 1461.02,1211.28 1461.61,1211.28 1462.19,1211.28 1462.78,1211.28 1463.37,1211.28 1463.95,1211.28 1464.54,1211.28 1465.12,1211.28 1465.71,1211.28 1466.3,1211.28 1466.88,1211.28 1467.47,1211.28 1468.06,1211.28 1468.64,1211.28 1469.23,1211.28 1469.82,1211.28 1470.4,1211.28 1470.99,1211.28 1471.57,1211.28 1472.16,1211.28 1472.75,1211.28 1473.33,1211.28 1473.92,1211.28 1474.51,1211.28 1475.09,1211.28 1475.68,1211.28 1476.27,1211.28 1476.85,1211.28 1477.44,1211.28 1478.03,1211.28 1478.61,1211.28 1479.2,1211.28 1479.78,1211.28 1480.37,1211.28 1480.96,1211.28 1481.54,1211.28 1482.13,1211.28 1482.72,1211.28 1483.3,1211.28 1483.89,1211.28 1484.48,1211.28 1485.06,1211.28 1485.65,1211.28 1486.24,1211.28 1486.82,1211.28 1487.41,1211.28 1487.99,1211.28 1488.58,1211.28 1489.17,1211.28 1489.75,1211.28 1490.34,1211.28 1490.93,1211.28 1491.51,1211.28 1492.1,1211.28 1492.69,1211.28 1493.27,1211.28 1493.86,1211.28 1494.45,1211.28 1495.03,1211.28 1495.62,1211.28 1496.2,1211.28 1496.79,1211.28 1497.38,1211.28 1497.96,1211.28 1498.55,1211.28 1499.14,1211.28 1499.72,1211.28 1500.31,1211.28 1500.9,1211.28 1501.48,1211.28 1502.07,1211.28 1502.65,1211.28 1503.24,1211.28 1503.83,1211.28 1504.41,1211.28 1505,1211.28 1505.59,1211.28 1506.17,1211.28 1506.76,1211.28 1507.35,1211.28 1507.93,1211.28 1508.52,1211.28 1509.11,1211.28 1509.69,1211.28 1510.28,1211.28 1510.86,1211.28 1511.45,1211.28 1512.04,1211.28 1512.62,1211.28 1513.21,1211.28 1513.8,1211.28 1514.38,1211.28 1514.97,1211.28 1515.56,1211.28 1516.14,1211.28 1516.73,1211.28 1517.32,1211.28 1517.9,1211.28 1518.49,1211.28 1519.07,1211.28 1519.66,1211.28 1520.25,1211.28 1520.83,1211.28 1521.42,1211.28 1522.01,1211.28 1522.59,1211.28 1523.18,1211.28 1523.77,1211.28 1524.35,1211.28 1524.94,1211.28 1525.52,1211.28 1526.11,1211.28 1526.7,1211.28 1527.28,1211.28 1527.87,1211.28 1528.46,1211.28 1529.04,1211.28 1529.63,1211.28 1530.22,1211.28 1530.8,1211.28 1531.39,1211.28 1531.98,1211.28 1532.56,1211.28 1533.15,1211.28 1533.73,1211.28 1534.32,1211.28 1534.91,1211.28 1535.49,1211.28 1536.08,1211.28 1536.67,1211.28 1537.25,1211.28 1537.84,1211.28 1538.43,1211.28 1539.01,1211.28 1539.6,1211.28 1540.19,1211.28 1540.77,1211.28 1541.36,1211.28 1541.94,1211.28 1542.53,1211.28 1543.12,1211.28 1543.7,1211.28 1544.29,1211.28 1544.88,1211.28 1545.46,1211.28 1546.05,1211.28 1546.64,1211.28 1547.22,1211.28 1547.81,1211.28 1548.4,1211.28 1548.98,1211.28 1549.57,1211.28 1550.15,1211.28 1550.74,1211.28 1551.33,1211.28 1551.91,1211.28 1552.5,1211.28 1553.09,1211.28 1553.67,1211.28 1554.26,1211.28 1554.85,1211.28 1555.43,1211.28 1556.02,1211.28 1556.6,1211.28 1557.19,1211.28 1557.78,1211.28 1558.36,1211.28 1558.95,1211.28 1559.54,1211.28 1560.12,1211.28 1560.71,1211.28 1561.3,1211.28 1561.88,1211.28 1562.47,1211.28 1563.06,1211.28 1563.64,1211.28 1564.23,1211.28 1564.81,1211.28 1565.4,1211.28 1565.99,1211.28 1566.57,1211.28 1567.16,1211.28 1567.75,1211.28 1568.33,1211.28 1568.92,1211.28 1569.51,1211.28 1570.09,1211.28 1570.68,1211.28 1571.27,1211.28 1571.85,1211.28 1572.44,1211.28 1573.02,1211.28 1573.61,1211.28 1574.2,1211.28 1574.78,1211.28 1575.37,1211.28 1575.96,1211.28 1576.54,1211.28 1577.13,1211.28 1577.72,1211.28 1578.3,1211.28 1578.89,1211.28 1579.47,1211.28 1580.06,1211.28 1580.65,1211.28 1581.23,1211.28 1581.82,1211.28 1582.41,1211.28 1582.99,1211.28 1583.58,1211.28 1584.17,1211.28 1584.75,1211.28 1585.34,1211.28 1585.93,1211.28 1586.51,1211.28 1587.1,1211.28 1587.68,1211.28 1588.27,1211.28 1588.86,1211.28 1589.44,1211.28 1590.03,1211.28 1590.62,1211.28 1591.2,1211.28 1591.79,1211.28 1592.38,1211.28 1592.96,1211.28 1593.55,1211.28 1594.14,1211.28 1594.72,1211.28 1595.31,1211.28 1595.89,1211.28 1596.48,1211.28 1597.07,1211.28 1597.65,1211.28 1598.24,1211.28 1598.83,1211.28 1599.41,1211.28 1600,1211.28 1600.59,1211.28 1601.17,1211.28 1601.76,1211.28 1602.34,1211.28 1602.93,1211.28 1603.52,1211.28 1604.1,1211.28 1604.69,1211.28 1605.28,1211.28 1605.86,1211.28 1606.45,1211.28 1607.04,1211.28 1607.62,1211.28 1608.21,1211.28 1608.8,1211.28 1609.38,1211.28 1609.97,1211.28 1610.55,1211.28 1611.14,1211.28 1611.73,1211.28 1612.31,1211.28 1612.9,1211.28 1613.49,1211.28 1614.07,1211.28 1614.66,1211.28 1615.25,1211.28 1615.83,1211.28 1616.42,1211.28 1617.01,1211.28 1617.59,1211.28 1618.18,1211.28 1618.76,1211.28 1619.35,1211.28 1619.94,1211.28 1620.52,1211.28 1621.11,1211.28 1621.7,1211.28 1622.28,1211.28 1622.87,1211.28 1623.46,1211.28 1624.04,1211.28 1624.63,1211.28 1625.22,1211.28 1625.8,1211.28 1626.39,1211.28 1626.97,1211.28 1627.56,1211.28 1628.15,1211.28 1628.73,1211.28 1629.32,1211.28 1629.91,1211.28 1630.49,1211.28 1631.08,1211.28 1631.67,1211.28 1632.25,1211.28 1632.84,1211.28 1633.42,1211.28 1634.01,1211.28 1634.6,1211.28 1635.18,1211.28 1635.77,1211.28 1636.36,1211.28 1636.94,1211.28 1637.53,1211.28 1638.12,1211.28 1638.7,1211.28 1639.29,1211.28 1639.88,1211.28 1640.46,1211.28 1641.05,1211.28 1641.63,1211.28 1642.22,1211.28 1642.81,1211.28 1643.39,1211.28 1643.98,1211.28 1644.57,1211.28 1645.15,1211.28 1645.74,1211.28 1646.33,1211.28 1646.91,1211.28 1647.5,1211.28 1648.09,1211.28 1648.67,1211.28 1649.26,1211.28 1649.84,1211.28 1650.43,1211.28 1651.02,1211.28 1651.6,1211.28 1652.19,1211.28 1652.78,1211.28 1653.36,1211.28 1653.95,1211.28 1654.54,1211.28 1655.12,1211.28 1655.71,1211.28 1656.29,1211.28 1656.88,1211.28 1657.47,1211.28 1658.05,1211.28 1658.64,1211.28 1659.23,1211.28 1659.81,1211.28 1660.4,1211.28 1660.99,1211.28 1661.57,1211.28 1662.16,1211.28 1662.75,1211.28 1663.33,1211.28 1663.92,1211.28 1664.5,1211.28 1665.09,1211.28 1665.68,1211.28 1666.26,1211.28 1666.85,1211.28 1667.44,1211.28 1668.02,1211.28 1668.61,1211.28 1669.2,1211.28 1669.78,1211.28 1670.37,1211.28 1670.96,1211.28 1671.54,1211.28 1672.13,1211.28 1672.71,1211.28 1673.3,1211.28 1673.89,1211.28 1674.47,1211.28 1675.06,1211.28 1675.65,1211.28 1676.23,1211.28 1676.82,1211.28 1677.41,1211.28 1677.99,1211.28 1678.58,1211.28 1679.17,1211.28 1679.75,1211.28 1680.34,1211.28 1680.92,1211.28 1681.51,1211.28 1682.1,1211.28 1682.68,1211.28 1683.27,1211.28 1683.86,1211.28 1684.44,1211.28 1685.03,1211.28 1685.62,1211.28 1686.2,1211.28 1686.79,1211.28 1687.37,1211.28 1687.96,1211.28 1688.55,1211.28 1689.13,1211.28 1689.72,1211.28 1690.31,1211.28 1690.89,1211.28 1691.48,1211.28 1692.07,1211.28 1692.65,1211.28 1693.24,1211.28 1693.83,1211.28 1694.41,1211.28 1695,1211.28 1695.58,1211.28 1696.17,1211.28 1696.76,1211.28 1697.34,1211.28 1697.93,1211.28 1698.52,1211.28 1699.1,1211.28 1699.69,1211.28 1700.28,1211.28 1700.86,1211.28 1701.45,1211.28 1702.04,1211.28 1702.62,1211.28 1703.21,1211.28 1703.79,1211.28 1704.38,1211.28 1704.97,1211.28 1705.55,1211.28 1706.14,1211.28 1706.73,1211.28 1707.31,1211.28 1707.9,1211.28 1708.49,1211.28 1709.07,1211.28 1709.66,1211.28 1710.24,1211.28 1710.83,1211.28 1711.42,1211.28 1712,1211.28 1712.59,1211.28 1713.18,1211.28 1713.76,1211.28 1714.35,1211.28 1714.94,1211.28 1715.52,1211.28 1716.11,1211.28 1716.7,1211.28 1717.28,1211.28 1717.87,1211.28 1718.45,1211.28 1719.04,1211.28 1719.63,1211.28 1720.21,1211.28 1720.8,1211.28 1721.39,1211.28 1721.97,1211.28 1722.56,1211.28 1723.15,1211.28 1723.73,1211.28 1724.32,1211.28 1724.91,1211.28 1725.49,1211.28 1726.08,1211.28 1726.66,1211.28 1727.25,1211.28 1727.84,1211.28 1728.42,1211.28 1729.01,1211.28 1729.6,1211.28 1730.18,1211.28 1730.77,1211.28 1731.36,1211.28 1731.94,1211.28 1732.53,1211.28 1733.11,1211.28 1733.7,1211.28 1734.29,1211.28 1734.87,1211.28 1735.46,1211.28 1736.05,1211.28 1736.63,1211.28 1737.22,1211.28 1737.81,1211.28 1738.39,1211.28 1738.98,1211.28 1739.57,1211.28 1740.15,1211.28 1740.74,1211.28 1741.32,1211.28 1741.91,1211.28 1742.5,1211.28 1743.08,1211.28 1743.67,1211.28 1744.26,1211.28 1744.84,1211.28 1745.43,1211.28 1746.02,1211.28 1746.6,1211.28 1747.19,1211.28 1747.78,1211.28 1748.36,1211.28 1748.95,1211.28 1749.53,1211.28 1750.12,1211.28 1750.71,1211.28 1751.29,1211.28 1751.88,1211.28 1752.47,1211.28 1753.05,1211.28 1753.64,1211.28 1754.23,1211.28 1754.81,1211.28 1755.4,1211.28 1755.99,1211.28 1756.57,1211.28 1757.16,1211.28 1757.74,1211.28 1758.33,1211.28 1758.92,1211.28 1759.5,1211.28 1760.09,1211.28 1760.68,1211.28 1761.26,1211.28 1761.85,1211.28 1762.44,1211.28 1763.02,1211.28 1763.61,1211.28 1764.19,1211.28 1764.78,1211.28 1765.37,1211.28 1765.95,1211.28 1766.54,1211.28 1767.13,1211.28 1767.71,1211.28 1768.3,1211.28 1768.89,1211.28 1769.47,1211.28 1770.06,1211.28 1770.65,1211.28 1771.23,1211.28 1771.82,1211.28 1772.4,1211.28 1772.99,1211.28 1773.58,1211.28 1774.16,1211.28 1774.75,1211.28 1775.34,1211.28 1775.92,1211.28 1776.51,1211.28 1777.1,1211.28 1777.68,1211.28 1778.27,1211.28 1778.86,1211.28 1779.44,1211.28 1780.03,1211.28 1780.61,1211.28 1781.2,1211.28 1781.79,1211.28 1782.37,1211.28 1782.96,1211.28 1783.55,1211.28 1784.13,1211.28 1784.72,1211.28 1785.31,1211.28 1785.89,1211.28 1786.48,1211.28 1787.06,1211.28 1787.65,1211.28 1788.24,1211.28 1788.82,1211.28 1789.41,1211.28 1790,1211.28 1790.58,1211.28 1791.17,1211.28 1791.76,1211.28 1792.34,1211.28 1792.93,1211.28 1793.52,1211.28 1794.1,1211.28 1794.69,1211.28 1795.27,1211.28 1795.86,1211.28 1796.45,1211.28 1797.03,1211.28 1797.62,1211.28 1798.21,1211.28 1798.79,1211.28 1799.38,1211.28 1799.97,1211.28 1800.55,1211.28 1801.14,1211.28 1801.73,1211.28 1802.31,1211.28 1802.9,1211.28 1803.48,1211.28 1804.07,1211.28 1804.66,1211.28 1805.24,1211.28 1805.83,1211.28 1806.42,1211.28 1807,1211.28 1807.59,1211.28 1808.18,1211.28 1808.76,1211.28 1809.35,1211.28 1809.94,1211.28 1810.52,1211.28 1811.11,1211.28 1811.69,1211.28 1812.28,1211.28 1812.87,1211.28 1813.45,1211.28 1814.04,1211.28 1814.63,1211.28 1815.21,1211.28 1815.8,1211.28 1816.39,1211.28 1816.97,1211.28 1817.56,1211.28 1818.14,1211.28 1818.73,1211.28 1819.32,1211.28 1819.9,1211.28 1820.49,1211.28 1821.08,1211.28 1821.66,1211.28 1822.25,1211.28 1822.84,1211.28 1823.42,1211.28 1824.01,1211.28 1824.6,1211.28 1825.18,1211.28 1825.77,1211.28 1826.35,1211.28 1826.94,1211.28 1827.53,1211.28 1828.11,1211.28 1828.7,1211.28 1829.29,1211.28 1829.87,1211.28 1830.46,1211.28 1831.05,1211.28 1831.63,1211.28 1832.22,1211.28 1832.81,1211.28 1833.39,1211.28 1833.98,1211.28 1834.56,1211.28 1835.15,1211.28 1835.74,1211.28 1836.32,1211.28 1836.91,1211.28 1837.5,1211.28 1838.08,1211.28 1838.67,1211.28 1839.26,1211.28 1839.84,1211.28 1840.43,1211.28 1841.01,1211.28 1841.6,1211.28 1842.19,1211.28 1842.77,1211.28 1843.36,1211.28 1843.95,1211.28 1844.53,1211.28 1845.12,1211.28 1845.71,1211.28 1846.29,1211.28 1846.88,1211.28 1847.47,1211.28 1848.05,1211.28 1848.64,1211.28 1849.22,1211.28 1849.81,1211.28 1850.4,1211.28 1850.98,1211.28 1851.57,1211.28 1852.16,1211.28 1852.74,1211.28 1853.33,1211.28 1853.92,1211.28 1854.5,1211.28 1855.09,1211.28 1855.68,1211.28 1856.26,1211.28 1856.85,1211.28 1857.43,1211.28 1858.02,1211.28 1858.61,1211.28 1859.19,1211.28 1859.78,1211.28 1860.37,1211.28 1860.95,1211.28 1861.54,1211.28 1862.13,1211.28 1862.71,1211.28 1863.3,1211.28 1863.88,1211.28 1864.47,1211.28 1865.06,1211.28 1865.64,1211.28 1866.23,1211.28 1866.82,1211.28 1867.4,1211.28 1867.99,1211.28 1868.58,1211.28 1869.16,1211.28 1869.75,1211.28 1870.34,1211.28 1870.92,1211.28 1871.51,1211.28 1872.09,1211.28 1872.68,1211.28 1873.27,1211.28 1873.85,1211.28 1874.44,1211.28 1875.03,1211.28 1875.61,1211.28 1876.2,1211.28 1876.79,1211.28 1877.37,1211.28 1877.96,1211.28 1878.55,1211.28 1879.13,1211.28 1879.72,1211.28 1880.3,1211.28 1880.89,1211.28 1881.48,1211.28 1882.06,1211.28 1882.65,1211.28 1883.24,1211.28 1883.82,1211.28 1884.41,1211.28 1885,1211.28 1885.58,1211.28 1886.17,1211.28 1886.76,1211.28 1887.34,1211.28 1887.93,1211.28 1888.51,1211.28 1889.1,1211.28 1889.69,1211.28 1890.27,1211.28 1890.86,1211.28 1891.45,1211.28 1892.03,1211.28 1892.62,1211.28 1893.21,1211.28 1893.79,1211.28 1894.38,1211.28 1894.96,1211.28 1895.55,1211.28 1896.14,1211.28 1896.72,1211.28 1897.31,1211.28 1897.9,1211.28 1898.48,1211.28 1899.07,1211.28 1899.66,1211.28 1900.24,1211.28 1900.83,1211.28 1901.42,1211.28 1902,1211.28 1902.59,1211.28 1903.17,1211.28 1903.76,1211.28 1904.35,1211.28 1904.93,1211.28 1905.52,1211.28 1906.11,1211.28 1906.69,1211.28 1907.28,1211.28 1907.87,1211.28 1908.45,1211.28 1909.04,1211.28 1909.63,1211.28 1910.21,1211.28 1910.8,1211.28 1911.38,1211.28 1911.97,1211.28 1912.56,1211.28 1913.14,1211.28 1913.73,1211.28 1914.32,1211.28 1914.9,1211.28 1915.49,1211.28 1916.08,1211.28 1916.66,1211.28 1917.25,1211.28 1917.83,1211.28 1918.42,1211.28 1919.01,1211.28 1919.59,1211.28 1920.18,1211.28 1920.77,1211.28 1921.35,1211.28 1921.94,1211.28 1922.53,1211.28 1923.11,1211.28 1923.7,1211.28 1924.29,1211.28 1924.87,1211.28 1925.46,1211.28 1926.04,1211.28 1926.63,1211.28 1927.22,1211.28 1927.8,1211.28 1928.39,1211.28 1928.98,1211.28 1929.56,1211.28 1930.15,1211.28 1930.74,1211.28 1931.32,1211.28 1931.91,1211.28 1932.5,1211.28 1933.08,1211.28 1933.67,1211.28 1934.25,1211.28 1934.84,1211.28 1935.43,1211.28 1936.01,1211.28 1936.6,1211.28 1937.19,1211.28 1937.77,1211.28 1938.36,1211.28 1938.95,1211.28 1939.53,1211.28 1940.12,1211.28 1940.71,1211.28 1941.29,1211.28 1941.88,1211.28 1942.46,1211.28 1943.05,1211.28 1943.64,1211.28 1944.22,1211.28 1944.81,1211.28 1945.4,1211.28 1945.98,1211.28 1946.57,1211.28 1947.16,1211.28 1947.74,1211.28 1948.33,1211.28 1948.91,1211.28 1949.5,1211.28 1950.09,1211.28 1950.67,1211.28 1951.26,1211.28 1951.85,1211.28 1952.43,1211.28 1953.02,1211.28 1953.61,1211.28 1954.19,1211.28 1954.78,1211.28 1955.37,1211.28 1955.95,1211.28 1956.54,1211.28 1957.12,1211.28 1957.71,1211.28 1958.3,1211.28 1958.88,1211.28 1959.47,1211.28 1960.06,1211.28 1960.64,1211.28 1961.23,1211.28 1961.82,1211.28 1962.4,1211.28 1962.99,1211.28 1963.58,1211.28 1964.16,1211.28 1964.75,1211.28 1965.33,1211.28 1965.92,1211.28 1966.51,1211.28 1967.09,1211.28 1967.68,1211.28 1968.27,1211.28 1968.85,1211.28 1969.44,1211.28 1970.03,1211.28 1970.61,1211.28 1971.2,1211.28 1971.78,1211.28 1972.37,1211.28 1972.96,1211.28 1973.54,1211.28 1974.13,1211.28 1974.72,1211.28 1975.3,1211.28 1975.89,1211.28 1976.48,1211.28 1977.06,1211.28 1977.65,1211.28 1978.24,1211.28 1978.82,1211.28 1979.41,1211.28 1979.99,1211.28 1980.58,1211.28 1981.17,1211.28 1981.75,1211.28 1982.34,1211.28 1982.93,1211.28 1983.51,1211.28 1984.1,1211.28 1984.69,1211.28 1985.27,1211.28 1985.86,1211.28 1986.45,1211.28 1987.03,1211.28 1987.62,1211.28 1988.2,1211.28 1988.79,1211.28 1989.38,1211.28 1989.96,1211.28 1990.55,1211.28 1991.14,1211.28 1991.72,1211.28 1992.31,1211.28 1992.9,1211.28 1993.48,1211.28 1994.07,1211.28 1994.65,1211.28 1995.24,1211.28 1995.83,1211.28 1996.41,1211.28 1997,1211.28 1997.59,1211.28 1998.17,1211.28 1998.76,1211.28 1999.35,1211.28 1999.93,1211.28 2000.52,1211.28 2001.11,1211.28 2001.69,1211.28 2002.28,1211.28 2002.86,1211.28 2003.45,1211.28 2004.04,1211.28 2004.62,1211.28 2005.21,1211.28 2005.8,1211.28 2006.38,1211.28 2006.97,1211.28 2007.56,1211.28 2008.14,1211.28 2008.73,1211.28 2009.32,1211.28 2009.9,1211.28 2010.49,1211.28 2011.07,1211.28 2011.66,1211.28 2012.25,1211.28 2012.83,1211.28 2013.42,1211.28 2014.01,1211.28 2014.59,1211.28 2015.18,1211.28 2015.77,1211.28 2016.35,1211.28 2016.94,1211.28 2017.53,1211.28 2018.11,1211.28 2018.7,1211.28 2019.28,1211.28 2019.87,1211.28 2020.46,1211.28 2021.04,1211.28 2021.63,1211.28 2022.22,1211.28 2022.8,1211.28 2023.39,1211.28 2023.98,1211.28 2024.56,1211.28 2025.15,1211.28 2025.73,1211.28 2026.32,1211.28 2026.91,1211.28 2027.49,1211.28 2028.08,1211.28 2028.67,1211.28 2029.25,1211.28 2029.84,1211.28 2030.43,1211.28 2031.01,1211.28 2031.6,1211.28 2032.19,1211.28 2032.77,1211.28 2033.36,1211.28 2033.94,1211.28 2034.53,1211.28 2035.12,1211.28 2035.7,1211.28 2036.29,1211.28 2036.88,1211.28 2037.46,1211.28 2038.05,1211.28 2038.64,1211.28 2039.22,1211.28 2039.81,1211.28 2040.4,1211.28 2040.98,1211.28 2041.57,1211.28 2042.15,1211.28 2042.74,1211.28 2043.33,1211.28 2043.91,1211.28 2044.5,1211.28 2045.09,1211.28 2045.67,1211.28 2046.26,1211.28 2046.85,1211.28 2047.43,1211.28 2048.02,1211.28 2048.6,1211.28 2049.19,1211.28 2049.78,1211.28 2050.36,1211.28 2050.95,1211.28 2051.54,1211.28 2052.12,1211.28 2052.71,1211.28 2053.3,1211.28 2053.88,1211.28 2054.47,1211.28 2055.06,1211.28 2055.64,1211.28 2056.23,1211.28 2056.81,1211.28 2057.4,1211.28 2057.99,1211.28 2058.57,1211.28 2059.16,1211.28 2059.75,1211.28 2060.33,1211.28 2060.92,1211.28 2061.51,1211.28 2062.09,1211.28 2062.68,1211.28 2063.27,1211.28 2063.85,1211.28 2064.44,1211.28 2065.02,1211.28 2065.61,1211.28 2066.2,1211.28 2066.78,1211.28 2067.37,1211.28 2067.96,1211.28 2068.54,1211.28 2069.13,1211.28 2069.72,1211.28 2070.3,1211.28 2070.89,1211.28 2071.48,1211.28 2072.06,1211.28 2072.65,1211.28 2073.23,1211.28 2073.82,1211.28 2074.41,1211.28 2074.99,1211.28 2075.58,1211.28 2076.17,1211.28 2076.75,1211.28 2077.34,1211.28 2077.93,1211.28 2078.51,1211.28 2079.1,1211.28 2079.68,1211.28 2080.27,1211.28 2080.86,1211.28 2081.44,1211.28 2082.03,1211.28 2082.62,1211.28 2083.2,1211.28 2083.79,1211.28 2084.38,1211.28 2084.96,1211.28 2085.55,1211.28 2086.14,1211.28 2086.72,1211.28 2087.31,1211.28 2087.89,1211.28 2088.48,1211.28 2089.07,1211.28 2089.65,1211.28 2090.24,1211.28 2090.83,1211.28 2091.41,1211.28 2092,1211.28 2092.59,1211.28 2093.17,1211.28 2093.76,1211.28 2094.35,1211.28 2094.93,1211.28 2095.52,1211.28 2096.1,1211.28 2096.69,1211.28 2097.28,1211.28 2097.86,1211.28 2098.45,1211.28 2099.04,1211.28 2099.62,1211.28 2100.21,1211.28 2100.8,1211.28 2101.38,1211.28 2101.97,1211.28 2102.55,1211.28 2103.14,1211.28 2103.73,1211.28 2104.31,1211.28 2104.9,1211.28 2105.49,1211.28 2106.07,1211.28 2106.66,1211.28 2107.25,1211.28 2107.83,1211.28 2108.42,1211.28 2109.01,1211.28 2109.59,1211.28 2110.18,1211.28 2110.76,1211.28 2111.35,1211.28 2111.94,1211.28 2112.52,1211.28 2113.11,1211.28 2113.7,1211.28 2114.28,1211.28 2114.87,1211.28 2115.46,1211.28 2116.04,1211.28 2116.63,1211.28 2117.22,1211.28 2117.8,1211.28 2118.39,1211.28 2118.97,1211.28 2119.56,1211.28 2120.15,1211.28 2120.73,1211.28 2121.32,1211.28 2121.91,1211.28 2122.49,1211.28 2123.08,1211.28 2123.67,1211.28 2124.25,1211.28 2124.84,1211.28 2125.42,1211.28 2126.01,1211.28 2126.6,1211.28 2127.18,1211.28 2127.77,1211.28 2128.36,1211.28 2128.94,1211.28 2129.53,1211.28 2130.12,1211.28 2130.7,1211.28 2131.29,1211.28 2131.88,1211.28 2132.46,1211.28 2133.05,1211.28 2133.63,1211.28 2134.22,1211.28 2134.81,1211.28 2135.39,1211.28 2135.98,1211.28 2136.57,1211.28 2137.15,1211.28 2137.74,1211.28 2138.33,1211.28 2138.91,1211.28 2139.5,1211.28 2140.09,1211.28 2140.67,1211.28 2141.26,1211.28 2141.84,1211.28 2142.43,1211.28 2143.02,1211.28 2143.6,1211.28 2144.19,1211.28 2144.78,1211.28 2145.36,1211.28 2145.95,1211.28 2146.54,1211.28 2147.12,1211.28 2147.71,1211.28 2148.3,1211.28 2148.88,1211.28 2149.47,1211.28 2150.05,1211.28 2150.64,1211.28 2151.23,1211.28 2151.81,1211.28 2152.4,1211.28 2152.99,1211.28 2153.57,1211.28 2154.16,1211.28 2154.75,1211.28 2155.33,1211.28 2155.92,1211.28 2156.5,1211.28 2157.09,1211.28 2157.68,1211.28 2158.26,1211.28 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1211.15 L986.612 1211.15 L987.198 1211.15 L987.785 1211.15 L988.371 1211.15 L988.957 1211.15 L989.544 1211.15 L990.13 1211.15 L990.717 1211.15 L991.303 1211.15 L991.889 1211.15 L992.476 1211.15 L993.062 1211.15 L993.649 1211.15 L994.235 1211.15 L994.822 1211.15 L995.408 1211.15 L995.994 1211.15 L996.581 1211.15 L997.167 1211.15 L997.754 1211.15 L998.34 1211.15 L998.926 1211.15 L999.513 1211.15 L1000.1 1211.15 L1000.69 1211.15 L1001.27 1211.15 L1001.86 1211.15 L1002.44 1211.15 L1003.03 1211.15 L1003.62 1211.15 L1004.2 1211.15 L1004.79 1211.15 L1005.38 1211.15 L1005.96 1211.15 L1006.55 1211.15 L1007.14 1211.15 L1007.72 1211.15 L1008.31 1211.15 L1008.9 1211.15 L1009.48 1211.15 L1010.07 1211.15 L1010.65 1211.15 L1011.24 1211.15 L1011.83 1211.15 L1012.41 1211.15 L1013 1211.15 L1013.59 1211.15 L1014.17 1211.15 L1014.76 1211.15 L1015.35 1211.15 L1015.93 1211.15 L1016.52 1211.15 L1017.11 1211.15 L1017.69 1211.15 L1018.28 1211.15 L1018.86 1211.15 L1019.45 1211.15 L1020.04 1211.15 L1020.62 1211.15 L1021.21 1211.15 L1021.8 1211.15 L1022.38 1211.15 L1022.97 1211.15 L1023.56 1211.15 L1024.14 1211.15 L1024.73 1211.15 L1025.32 1211.15 L1025.9 1211.15 L1026.49 1211.15 L1027.07 1211.15 L1027.66 1211.15 L1028.25 1211.15 L1028.83 1211.15 L1029.42 1211.15 L1030.01 1211.15 L1030.59 1211.15 L1031.18 1211.15 L1031.77 1211.15 L1032.35 1211.15 L1032.94 1211.15 L1033.52 1211.15 L1034.11 1211.15 L1034.7 1211.15 L1035.28 1211.15 L1035.87 1211.15 L1036.46 1211.15 L1037.04 1211.15 L1037.63 1211.15 L1038.22 1211.15 L1038.8 1211.15 L1039.39 1211.15 L1039.98 1211.15 L1040.56 1211.15 L1041.15 1211.15 L1041.73 1211.15 L1042.32 1211.15 L1042.91 1211.15 L1043.49 1211.15 L1044.08 1211.15 L1044.67 1211.15 L1045.25 1211.15 L1045.84 1211.15 L1046.43 1211.15 L1047.01 1211.15 L1047.6 1211.15 L1048.19 1211.15 L1048.77 1211.15 L1049.36 1211.15 L1049.94 1211.15 L1050.53 1211.15 L1051.12 1211.15 L1051.7 1211.15 L1052.29 1211.15 L1052.88 1211.15 L1053.46 1211.15 L1054.05 1211.15 L1054.64 1211.15 L1055.22 1211.15 L1055.81 1211.15 L1056.39 1211.15 L1056.98 1211.15 L1057.57 1211.15 L1058.15 1211.15 L1058.74 1211.15 L1059.33 1211.15 L1059.91 1211.15 L1060.5 1211.15 L1061.09 1211.15 L1061.67 1211.15 L1062.26 1211.15 L1062.85 1211.15 L1063.43 1211.15 L1064.02 1211.15 L1064.6 1211.15 L1065.19 1211.15 L1065.78 1211.15 L1066.36 1211.15 L1066.95 1211.15 L1067.54 1211.15 L1068.12 1211.15 L1068.71 1211.15 L1069.3 1211.15 L1069.88 1211.15 L1070.47 1211.15 L1071.06 1211.15 L1071.64 1211.15 L1072.23 1211.15 L1072.81 1211.15 L1073.4 1211.15 L1073.99 1211.15 L1074.57 1211.15 L1075.16 1211.15 L1075.75 1211.15 L1076.33 1211.15 L1076.92 1211.15 L1077.51 1211.15 L1078.09 1211.15 L1078.68 1211.15 L1079.26 1211.15 L1079.85 1211.15 L1080.44 1211.15 L1081.02 1211.15 L1081.61 1211.15 L1082.2 1211.15 L1082.78 1211.15 L1083.37 1211.15 L1083.96 1211.15 L1084.54 1211.15 L1085.13 1211.15 L1085.72 1211.15 L1086.3 1211.15 L1086.89 1211.15 L1087.47 1211.15 L1088.06 1211.15 L1088.65 1211.15 L1089.23 1211.15 L1089.82 1211.15 L1090.41 1211.15 L1090.99 1211.15 L1091.58 1211.15 L1092.17 1211.15 L1092.75 1211.15 L1093.34 1211.15 L1093.93 1211.15 L1094.51 1211.15 L1095.1 1211.15 L1095.68 1211.15 L1096.27 1211.15 L1096.86 1211.15 L1097.44 1211.15 L1098.03 1211.15 L1098.62 1211.15 L1099.2 1211.15 L1099.79 1211.15 L1100.38 1211.15 L1100.96 1211.15 L1101.55 1211.15 L1102.14 1211.15 L1102.72 1211.15 L1103.31 1211.15 L1103.89 1211.15 L1104.48 1211.15 L1105.07 1211.15 L1105.65 1211.15 L1106.24 1211.15 L1106.83 1211.15 L1107.41 1211.15 L1108 1211.15 L1108.59 1211.15 L1109.17 1211.15 L1109.76 1211.15 L1110.34 1211.15 L1110.93 1211.15 L1111.52 1211.15 L1112.1 1211.15 L1112.69 1211.15 L1113.28 1211.15 L1113.86 1211.15 L1114.45 1211.15 L1115.04 1211.15 L1115.62 1211.15 L1116.21 1211.15 L1116.8 1211.15 L1117.38 1211.15 L1117.97 1211.15 L1118.55 1211.15 L1119.14 1211.15 L1119.73 1211.15 L1120.31 1211.15 L1120.9 1211.15 L1121.49 1211.15 L1122.07 1211.15 L1122.66 1211.15 L1123.25 1211.15 L1123.83 1211.15 L1124.42 1211.15 L1125.01 1211.15 L1125.59 1211.15 L1126.18 1211.15 L1126.76 1211.15 L1127.35 1211.15 L1127.94 1211.15 L1128.52 1211.15 L1129.11 1211.15 L1129.7 1211.15 L1130.28 1211.15 L1130.87 1211.15 L1131.46 1211.15 L1132.04 1211.15 L1132.63 1211.15 L1133.21 1211.15 L1133.8 1211.15 L1134.39 1211.15 L1134.97 1211.15 L1135.56 1211.15 L1136.15 1211.15 L1136.73 1211.15 L1137.32 1211.15 L1137.91 1211.15 L1138.49 1211.15 L1139.08 1211.15 L1139.67 1211.15 L1140.25 1211.15 L1140.84 1211.15 L1141.42 1211.15 L1142.01 1211.15 L1142.6 1211.15 L1143.18 1211.15 L1143.77 1211.15 L1144.36 1211.15 L1144.94 1211.15 L1145.53 1211.15 L1146.12 1211.15 L1146.7 1211.15 L1147.29 1211.15 L1147.88 1211.15 L1148.46 1211.15 L1149.05 1211.15 L1149.63 1211.15 L1150.22 1211.15 L1150.81 1211.15 L1151.39 1211.15 L1151.98 1211.15 L1152.57 1211.15 L1153.15 1211.15 L1153.74 1211.15 L1154.33 1211.15 L1154.91 1211.15 L1155.5 1211.15 L1156.09 1211.15 L1156.67 1211.15 L1157.26 1211.15 L1157.84 1211.15 L1158.43 1211.15 L1159.02 1211.15 L1159.6 1211.15 L1160.19 1211.15 L1160.78 1211.15 L1161.36 1211.15 L1161.95 1211.15 L1162.54 1211.15 L1163.12 1211.15 L1163.71 1211.15 L1164.29 1211.15 L1164.88 1211.15 L1165.47 1211.15 L1166.05 1211.15 L1166.64 1211.15 L1167.23 1211.15 L1167.81 1211.15 L1168.4 1211.15 L1168.99 1211.15 L1169.57 1211.15 L1170.16 1211.15 L1170.75 1211.15 L1171.33 1211.15 L1171.92 1211.15 L1172.5 1211.15 L1173.09 1211.15 L1173.68 1211.15 L1174.26 1211.15 L1174.85 1211.15 L1175.44 1211.15 L1176.02 1211.15 L1176.61 1211.15 L1177.2 1211.15 L1177.78 1211.15 L1178.37 1211.15 L1178.96 1211.15 L1179.54 1211.15 L1180.13 1211.15 L1180.71 1211.15 L1181.3 1211.15 L1181.89 1211.15 L1182.47 1211.15 L1183.06 1211.15 L1183.65 1211.15 L1184.23 1211.15 L1184.82 1211.15 L1185.41 1211.15 L1185.99 1211.15 L1186.58 1211.15 L1187.16 1211.15 L1187.75 1211.15 L1188.34 1211.15 L1188.92 1211.15 L1189.51 1211.15 L1190.1 1211.15 L1190.68 1211.15 L1191.27 1211.15 L1191.86 1211.15 L1192.44 1211.15 L1193.03 1211.15 L1193.62 1211.15 L1194.2 1211.15 L1194.79 1211.15 L1195.37 1211.15 L1195.96 1211.15 L1196.55 1211.15 L1197.13 1211.15 L1197.72 1211.15 L1198.31 1211.15 L1198.89 1211.15 L1199.48 1211.15 L1200.07 1211.15 L1200.65 1211.15 L1201.24 1211.15 L1201.83 1211.15 L1202.41 1211.15 L1203 1211.15 L1203.58 1211.15 L1204.17 1211.15 L1204.76 1211.15 L1205.34 1211.15 L1205.93 1211.15 L1206.52 1211.15 L1207.1 1211.15 L1207.69 1211.15 L1208.28 1211.15 L1208.86 1211.15 L1209.45 1211.15 L1210.03 1211.15 L1210.62 1211.15 L1211.21 1211.15 L1211.79 1211.15 L1212.38 1211.15 L1212.97 1211.15 L1213.55 1211.15 L1214.14 1211.15 L1214.73 1211.15 L1215.31 1211.15 L1215.9 1211.15 L1216.49 1211.15 L1217.07 1211.15 L1217.66 1211.15 L1218.24 1211.15 L1218.83 1211.15 L1219.42 1211.15 L1220 1211.15 L1220.59 1211.15 L1221.18 1211.15 L1221.76 1211.15 L1222.35 1211.15 L1222.94 1211.15 L1223.52 1211.15 L1224.11 1211.15 L1224.7 1211.15 L1225.28 1211.15 L1225.87 1211.15 L1226.45 1211.15 L1227.04 1211.15 L1227.63 1211.15 L1228.21 1211.15 L1228.8 1211.15 L1229.39 1211.15 L1229.97 1211.15 L1230.56 1211.15 L1231.15 1211.15 L1231.73 1211.15 L1232.32 1211.15 L1232.91 1211.15 L1233.49 1211.15 L1234.08 1211.15 L1234.66 1211.15 L1235.25 1211.15 L1235.84 1211.15 L1236.42 1211.15 L1237.01 1211.15 L1237.6 1211.15 L1238.18 1211.15 L1238.77 1211.15 L1239.36 1211.15 L1239.94 1211.15 L1240.53 1211.15 L1241.11 1211.15 L1241.7 1211.15 L1242.29 1211.15 L1242.87 1211.15 L1243.46 1211.15 L1244.05 1211.15 L1244.63 1211.15 L1245.22 1211.15 L1245.81 1211.15 L1246.39 1211.15 L1246.98 1211.15 L1247.57 1211.15 L1248.15 1211.15 L1248.74 1211.15 L1249.32 1211.15 L1249.91 1211.15 L1250.5 1211.15 L1251.08 1211.15 L1251.67 1211.15 L1252.26 1211.15 L1252.84 1211.15 L1253.43 1211.15 L1254.02 1211.15 L1254.6 1211.15 L1255.19 1211.15 L1255.78 1211.15 L1256.36 1211.15 L1256.95 1211.15 L1257.53 1211.15 L1258.12 1211.15 L1258.71 1211.15 L1259.29 1211.15 L1259.88 1211.15 L1260.47 1211.15 L1261.05 1211.15 L1261.64 1211.15 L1262.23 1211.15 L1262.81 1211.15 L1263.4 1211.15 L1263.98 1211.15 L1264.57 1211.15 L1265.16 1211.15 L1265.74 1211.15 L1266.33 1211.15 L1266.92 1211.15 L1267.5 1211.15 L1268.09 1211.15 L1268.68 1211.15 L1269.26 1211.15 L1269.85 1211.15 L1270.44 1211.15 L1271.02 1211.15 L1271.61 1211.15 L1272.19 1211.15 L1272.78 1211.15 L1273.37 1211.15 L1273.95 1211.15 L1274.54 1211.15 L1275.13 1211.15 L1275.71 1211.15 L1276.3 1211.15 L1276.89 1211.15 L1277.47 1211.15 L1278.06 1211.15 L1278.65 1211.15 L1279.23 1211.15 L1279.82 1211.15 L1280.4 1211.15 L1280.99 1211.15 L1281.58 1211.15 L1282.16 1211.15 L1282.75 1211.15 L1283.34 1211.15 L1283.92 1211.15 L1284.51 1211.15 L1285.1 1211.15 L1285.68 1211.15 L1286.27 1211.15 L1286.86 1211.15 L1287.44 1211.15 L1288.03 1211.15 L1288.61 1211.15 L1289.2 1211.15 L1289.79 1211.15 L1290.37 1211.15 L1290.96 1211.15 L1291.55 1211.15 L1292.13 1211.15 L1292.72 1211.15 L1293.31 1211.15 L1293.89 1211.15 L1294.48 1211.15 L1295.06 1211.15 L1295.65 1211.15 L1296.24 1211.15 L1296.82 1211.15 L1297.41 1211.15 L1298 1211.15 L1298.58 1211.15 L1299.17 1211.15 L1299.76 1211.15 L1300.34 1211.15 L1300.93 1211.15 L1301.52 1211.15 L1302.1 1211.15 L1302.69 1211.15 L1303.27 1211.15 L1303.86 1211.15 L1304.45 1211.15 L1305.03 1211.15 L1305.62 1211.15 L1306.21 1211.15 L1306.79 1211.15 L1307.38 1211.15 L1307.97 1211.15 L1308.55 1211.15 L1309.14 1211.15 L1309.73 1211.15 L1310.31 1211.15 L1310.9 1211.15 L1311.48 1211.15 L1312.07 1211.15 L1312.66 1211.15 L1313.24 1211.15 L1313.83 1211.15 L1314.42 1211.15 L1315 1211.15 L1315.59 1211.15 L1316.18 1211.15 L1316.76 1211.15 L1317.35 1211.15 L1317.93 1211.15 L1318.52 1211.15 L1319.11 1211.15 L1319.69 1211.15 L1320.28 1211.15 L1320.87 1211.15 L1321.45 1211.15 L1322.04 1211.15 L1322.63 1211.15 L1323.21 1211.15 L1323.8 1211.15 L1324.39 1211.15 L1324.97 1211.15 L1325.56 1211.15 L1326.14 1211.15 L1326.73 1211.15 L1327.32 1211.15 L1327.9 1211.15 L1328.49 1211.15 L1329.08 1211.15 L1329.66 1211.15 L1330.25 1211.15 L1330.84 1211.15 L1331.42 1211.15 L1332.01 1211.15 L1332.6 1211.15 L1333.18 1211.15 L1333.77 1211.15 L1334.35 1211.15 L1334.94 1211.15 L1335.53 1211.15 L1336.11 1211.15 L1336.7 1211.15 L1337.29 1211.15 L1337.87 1211.15 L1338.46 1211.15 L1339.05 1211.15 L1339.63 1211.15 L1340.22 1211.15 L1340.8 1211.15 L1341.39 1211.15 L1341.98 1211.15 L1342.56 1211.15 L1343.15 1211.15 L1343.74 1211.15 L1344.32 1211.15 L1344.91 1211.15 L1345.5 1211.15 L1346.08 1211.15 L1346.67 1211.15 L1347.26 1211.15 L1347.84 1211.15 L1348.43 1211.15 L1349.01 1211.15 L1349.6 1211.15 L1350.19 1211.15 L1350.77 1211.15 L1351.36 1211.15 L1351.95 1211.15 L1352.53 1211.15 L1353.12 1211.15 L1353.71 1211.15 L1354.29 1211.15 L1354.88 1211.15 L1355.47 1211.15 L1356.05 1211.15 L1356.64 1211.15 L1357.22 1211.15 L1357.81 1211.15 L1358.4 1211.15 L1358.98 1211.15 L1359.57 1211.15 L1360.16 1211.15 L1360.74 1211.15 L1361.33 1211.15 L1361.92 1211.15 L1362.5 1211.15 L1363.09 1211.15 L1363.68 1211.15 L1364.26 1211.15 L1364.85 1211.15 L1365.43 1211.15 L1366.02 1211.15 L1366.61 1211.15 L1367.19 1211.15 L1367.78 1211.15 L1368.37 1211.15 L1368.95 1211.15 L1369.54 1211.15 L1370.13 1211.15 L1370.71 1211.15 L1371.3 1211.15 L1371.88 1211.15 L1372.47 1211.15 L1373.06 1211.15 L1373.64 1211.15 L1374.23 1211.15 L1374.82 1211.15 L1375.4 1211.15 L1375.99 1211.15 L1376.58 1211.15 L1377.16 1211.15 L1377.75 1211.15 L1378.34 1211.15 L1378.92 1211.15 L1379.51 1211.15 L1380.09 1211.15 L1380.68 1211.15 L1381.27 1211.15 L1381.85 1211.15 L1382.44 1211.15 L1383.03 1211.15 L1383.61 1211.15 L1384.2 1211.15 L1384.79 1211.15 L1385.37 1211.15 L1385.96 1211.15 L1386.55 1211.15 L1387.13 1211.15 L1387.72 1211.15 L1388.3 1211.15 L1388.89 1211.15 L1389.48 1211.15 L1390.06 1211.15 L1390.65 1211.15 L1391.24 1211.15 L1391.82 1211.15 L1392.41 1211.15 L1393 1211.15 L1393.58 1211.15 L1394.17 1211.15 L1394.75 1211.15 L1395.34 1211.15 L1395.93 1211.15 L1396.51 1211.15 L1397.1 1211.15 L1397.69 1211.15 L1398.27 1211.15 L1398.86 1211.15 L1399.45 1211.15 L1400.03 1211.15 L1400.62 1211.15 L1401.21 1211.15 L1401.79 1211.15 L1402.38 1211.15 L1402.96 1211.15 L1403.55 1211.15 L1404.14 1211.15 L1404.72 1211.15 L1405.31 1211.15 L1405.9 1211.15 L1406.48 1211.15 L1407.07 1211.15 L1407.66 1211.15 L1408.24 1211.15 L1408.83 1211.15 L1409.42 1211.15 L1410 1211.15 L1410.59 1211.15 L1411.17 1211.15 L1411.76 1211.15 L1412.35 1211.15 L1412.93 1211.15 L1413.52 1211.15 L1414.11 1211.15 L1414.69 1211.15 L1415.28 1211.15 L1415.87 1211.15 L1416.45 1211.15 L1417.04 1211.15 L1417.63 1211.15 L1418.21 1211.15 L1418.8 1211.15 L1419.38 1211.15 L1419.97 1211.15 L1420.56 1211.15 L1421.14 1211.15 L1421.73 1211.15 L1422.32 1211.15 L1422.9 1211.15 L1423.49 1211.15 L1424.08 1211.15 L1424.66 1211.15 L1425.25 1211.15 L1425.83 1211.15 L1426.42 1211.15 L1427.01 1211.15 L1427.59 1211.15 L1428.18 1211.15 L1428.77 1211.15 L1429.35 1211.15 L1429.94 1211.15 L1430.53 1211.15 L1431.11 1211.15 L1431.7 1211.15 L1432.29 1211.15 L1432.87 1211.15 L1433.46 1211.15 L1434.04 1211.15 L1434.63 1211.15 L1435.22 1211.15 L1435.8 1211.15 L1436.39 1211.15 L1436.98 1211.15 L1437.56 1211.15 L1438.15 1211.15 L1438.74 1211.15 L1439.32 1211.15 L1439.91 1211.15 L1440.5 1211.15 L1441.08 1211.15 L1441.67 1211.15 L1442.25 1211.15 L1442.84 1211.15 L1443.43 1211.15 L1444.01 1211.15 L1444.6 1211.15 L1445.19 1211.15 L1445.77 1211.15 L1446.36 1211.15 L1446.95 1211.15 L1447.53 1211.15 L1448.12 1211.15 L1448.7 1211.15 L1449.29 1211.15 L1449.88 1211.15 L1450.46 1211.15 L1451.05 1211.15 L1451.64 1211.15 L1452.22 1211.15 L1452.81 1211.15 L1453.4 1211.15 L1453.98 1211.15 L1454.57 1211.15 L1455.16 1211.15 L1455.74 1211.15 L1456.33 1211.15 L1456.91 1211.15 L1457.5 1211.15 L1458.09 1211.15 L1458.67 1211.15 L1459.26 1211.15 L1459.85 1211.15 L1460.43 1211.15 L1461.02 1211.15 L1461.61 1211.15 L1462.19 1211.15 L1462.78 1211.15 L1463.37 1211.15 L1463.95 1211.15 L1464.54 1211.15 L1465.12 1211.15 L1465.71 1211.15 L1466.3 1211.15 L1466.88 1211.15 L1467.47 1211.15 L1468.06 1211.15 L1468.64 1211.15 L1469.23 1211.15 L1469.82 1211.15 L1470.4 1211.15 L1470.99 1211.15 L1471.57 1211.15 L1472.16 1211.15 L1472.75 1211.15 L1473.33 1211.15 L1473.92 1211.15 L1474.51 1211.15 L1475.09 1211.15 L1475.68 1211.15 L1476.27 1211.15 L1476.85 1211.15 L1477.44 1211.15 L1478.03 1211.15 L1478.61 1211.15 L1479.2 1211.15 L1479.78 1211.15 L1480.37 1211.15 L1480.96 1211.15 L1481.54 1211.15 L1482.13 1211.15 L1482.72 1211.15 L1483.3 1211.15 L1483.89 1211.15 L1484.48 1211.15 L1485.06 1211.15 L1485.65 1211.15 L1486.24 1211.15 L1486.82 1211.15 L1487.41 1211.15 L1487.99 1211.15 L1488.58 1211.15 L1489.17 1211.15 L1489.75 1211.15 L1490.34 1211.15 L1490.93 1211.15 L1491.51 1211.15 L1492.1 1211.15 L1492.69 1211.15 L1493.27 1211.15 L1493.86 1211.15 L1494.45 1211.15 L1495.03 1211.15 L1495.62 1211.15 L1496.2 1211.15 L1496.79 1211.15 L1497.38 1211.15 L1497.96 1211.15 L1498.55 1211.15 L1499.14 1211.15 L1499.72 1211.15 L1500.31 1211.15 L1500.9 1211.15 L1501.48 1211.15 L1502.07 1211.15 L1502.65 1211.15 L1503.24 1211.15 L1503.83 1211.15 L1504.41 1211.15 L1505 1211.15 L1505.59 1211.15 L1506.17 1211.15 L1506.76 1211.15 L1507.35 1211.15 L1507.93 1211.15 L1508.52 1211.15 L1509.11 1211.15 L1509.69 1211.15 L1510.28 1211.15 L1510.86 1211.15 L1511.45 1211.15 L1512.04 1211.15 L1512.62 1211.15 L1513.21 1211.15 L1513.8 1211.15 L1514.38 1211.15 L1514.97 1211.15 L1515.56 1211.15 L1516.14 1211.15 L1516.73 1211.15 L1517.32 1211.15 L1517.9 1211.15 L1518.49 1211.15 L1519.07 1211.15 L1519.66 1211.15 L1520.25 1211.15 L1520.83 1211.15 L1521.42 1211.15 L1522.01 1211.15 L1522.59 1211.15 L1523.18 1211.15 L1523.77 1211.15 L1524.35 1211.15 L1524.94 1211.15 L1525.52 1211.15 L1526.11 1211.15 L1526.7 1211.15 L1527.28 1211.15 L1527.87 1211.15 L1528.46 1211.15 L1529.04 1211.15 L1529.63 1211.15 L1530.22 1211.15 L1530.8 1211.15 L1531.39 1211.15 L1531.98 1211.15 L1532.56 1211.15 L1533.15 1211.15 L1533.73 1211.15 L1534.32 1211.15 L1534.91 1211.15 L1535.49 1211.15 L1536.08 1211.15 L1536.67 1211.15 L1537.25 1211.15 L1537.84 1211.15 L1538.43 1211.15 L1539.01 1211.15 L1539.6 1211.15 L1540.19 1211.15 L1540.77 1211.15 L1541.36 1211.15 L1541.94 1211.15 L1542.53 1211.15 L1543.12 1211.15 L1543.7 1211.15 L1544.29 1211.15 L1544.88 1211.15 L1545.46 1211.15 L1546.05 1211.15 L1546.64 1211.15 L1547.22 1211.15 L1547.81 1211.15 L1548.4 1211.15 L1548.98 1211.15 L1549.57 1211.15 L1550.15 1211.15 L1550.74 1211.15 L1551.33 1211.15 L1551.91 1211.15 L1552.5 1211.15 L1553.09 1211.15 L1553.67 1211.15 L1554.26 1211.15 L1554.85 1211.15 L1555.43 1211.15 L1556.02 1211.15 L1556.6 1211.15 L1557.19 1211.15 L1557.78 1211.15 L1558.36 1211.15 L1558.95 1211.15 L1559.54 1211.15 L1560.12 1211.15 L1560.71 1211.15 L1561.3 1211.15 L1561.88 1211.15 L1562.47 1211.15 L1563.06 1211.15 L1563.64 1211.15 L1564.23 1211.15 L1564.81 1211.15 L1565.4 1211.15 L1565.99 1211.15 L1566.57 1211.15 L1567.16 1211.15 L1567.75 1211.15 L1568.33 1211.15 L1568.92 1211.15 L1569.51 1211.15 L1570.09 1211.15 L1570.68 1211.15 L1571.27 1211.15 L1571.85 1211.15 L1572.44 1211.15 L1573.02 1211.15 L1573.61 1211.15 L1574.2 1211.15 L1574.78 1211.15 L1575.37 1211.15 L1575.96 1211.15 L1576.54 1211.15 L1577.13 1211.15 L1577.72 1211.15 L1578.3 1211.15 L1578.89 1211.15 L1579.47 1211.15 L1580.06 1211.15 L1580.65 1211.15 L1581.23 1211.15 L1581.82 1211.15 L1582.41 1211.15 L1582.99 1211.15 L1583.58 1211.15 L1584.17 1211.15 L1584.75 1211.15 L1585.34 1211.15 L1585.93 1211.15 L1586.51 1211.15 L1587.1 1211.15 L1587.68 1211.15 L1588.27 1211.15 L1588.86 1211.15 L1589.44 1211.15 L1590.03 1211.15 L1590.62 1211.15 L1591.2 1211.15 L1591.79 1211.15 L1592.38 1211.15 L1592.96 1211.15 L1593.55 1211.15 L1594.14 1211.15 L1594.72 1211.15 L1595.31 1211.15 L1595.89 1211.15 L1596.48 1211.15 L1597.07 1211.15 L1597.65 1211.15 L1598.24 1211.15 L1598.83 1211.15 L1599.41 1211.15 L1600 1211.15 L1600.59 1211.15 L1601.17 1211.15 L1601.76 1211.15 L1602.34 1211.15 L1602.93 1211.15 L1603.52 1211.15 L1604.1 1211.15 L1604.69 1211.15 L1605.28 1211.15 L1605.86 1211.15 L1606.45 1211.15 L1607.04 1211.15 L1607.62 1211.15 L1608.21 1211.15 L1608.8 1211.15 L1609.38 1211.15 L1609.97 1211.15 L1610.55 1211.15 L1611.14 1211.15 L1611.73 1211.15 L1612.31 1211.15 L1612.9 1211.15 L1613.49 1211.15 L1614.07 1211.15 L1614.66 1211.15 L1615.25 1211.15 L1615.83 1211.15 L1616.42 1211.15 L1617.01 1211.15 L1617.59 1211.15 L1618.18 1211.15 L1618.76 1211.15 L1619.35 1211.15 L1619.94 1211.15 L1620.52 1211.15 L1621.11 1211.15 L1621.7 1211.15 L1622.28 1211.15 L1622.87 1211.15 L1623.46 1211.15 L1624.04 1211.15 L1624.63 1211.15 L1625.22 1211.15 L1625.8 1211.15 L1626.39 1211.15 L1626.97 1211.15 L1627.56 1211.15 L1628.15 1211.15 L1628.73 1211.15 L1629.32 1211.15 L1629.91 1211.15 L1630.49 1211.15 L1631.08 1211.15 L1631.67 1211.15 L1632.25 1211.15 L1632.84 1211.15 L1633.42 1211.15 L1634.01 1211.15 L1634.6 1211.15 L1635.18 1211.15 L1635.77 1211.15 L1636.36 1211.15 L1636.94 1211.15 L1637.53 1211.15 L1638.12 1211.15 L1638.7 1211.15 L1639.29 1211.15 L1639.88 1211.15 L1640.46 1211.15 L1641.05 1211.15 L1641.63 1211.15 L1642.22 1211.15 L1642.81 1211.15 L1643.39 1211.15 L1643.98 1211.15 L1644.57 1211.15 L1645.15 1211.15 L1645.74 1211.15 L1646.33 1211.15 L1646.91 1211.15 L1647.5 1211.15 L1648.09 1211.15 L1648.67 1211.15 L1649.26 1211.15 L1649.84 1211.15 L1650.43 1211.15 L1651.02 1211.15 L1651.6 1211.15 L1652.19 1211.15 L1652.78 1211.15 L1653.36 1211.15 L1653.95 1211.15 L1654.54 1211.15 L1655.12 1211.15 L1655.71 1211.15 L1656.29 1211.15 L1656.88 1211.15 L1657.47 1211.15 L1658.05 1211.15 L1658.64 1211.15 L1659.23 1211.15 L1659.81 1211.15 L1660.4 1211.15 L1660.99 1211.15 L1661.57 1211.15 L1662.16 1211.15 L1662.75 1211.15 L1663.33 1211.15 L1663.92 1211.15 L1664.5 1211.15 L1665.09 1211.15 L1665.68 1211.15 L1666.26 1211.15 L1666.85 1211.15 L1667.44 1211.15 L1668.02 1211.15 L1668.61 1211.15 L1669.2 1211.15 L1669.78 1211.15 L1670.37 1211.15 L1670.96 1211.15 L1671.54 1211.15 L1672.13 1211.15 L1672.71 1211.15 L1673.3 1211.15 L1673.89 1211.15 L1674.47 1211.15 L1675.06 1211.15 L1675.65 1211.15 L1676.23 1211.15 L1676.82 1211.15 L1677.41 1211.15 L1677.99 1211.15 L1678.58 1211.15 L1679.17 1211.15 L1679.75 1211.15 L1680.34 1211.15 L1680.92 1211.15 L1681.51 1211.15 L1682.1 1211.15 L1682.68 1211.15 L1683.27 1211.15 L1683.86 1211.15 L1684.44 1211.15 L1685.03 1211.15 L1685.62 1211.15 L1686.2 1211.15 L1686.79 1211.15 L1687.37 1211.15 L1687.96 1211.15 L1688.55 1211.15 L1689.13 1211.15 L1689.72 1211.15 L1690.31 1211.15 L1690.89 1211.15 L1691.48 1211.15 L1692.07 1211.15 L1692.65 1211.15 L1693.24 1211.15 L1693.83 1211.15 L1694.41 1211.15 L1695 1211.15 L1695.58 1211.15 L1696.17 1211.15 L1696.76 1211.15 L1697.34 1211.15 L1697.93 1211.15 L1698.52 1211.15 L1699.1 1211.15 L1699.69 1211.15 L1700.28 1211.15 L1700.86 1211.15 L1701.45 1211.15 L1702.04 1211.15 L1702.62 1211.15 L1703.21 1211.15 L1703.79 1211.15 L1704.38 1211.15 L1704.97 1211.15 L1705.55 1211.15 L1706.14 1211.15 L1706.73 1211.15 L1707.31 1211.15 L1707.9 1211.15 L1708.49 1211.15 L1709.07 1211.15 L1709.66 1211.15 L1710.24 1211.15 L1710.83 1211.15 L1711.42 1211.15 L1712 1211.15 L1712.59 1211.15 L1713.18 1211.15 L1713.76 1211.15 L1714.35 1211.15 L1714.94 1211.15 L1715.52 1211.15 L1716.11 1211.15 L1716.7 1211.15 L1717.28 1211.15 L1717.87 1211.15 L1718.45 1211.15 L1719.04 1211.15 L1719.63 1211.15 L1720.21 1211.15 L1720.8 1211.15 L1721.39 1211.15 L1721.97 1211.15 L1722.56 1211.15 L1723.15 1211.15 L1723.73 1211.15 L1724.32 1211.15 L1724.91 1211.15 L1725.49 1211.15 L1726.08 1211.15 L1726.66 1211.15 L1727.25 1211.15 L1727.84 1211.15 L1728.42 1211.15 L1729.01 1211.15 L1729.6 1211.15 L1730.18 1211.15 L1730.77 1211.15 L1731.36 1211.15 L1731.94 1211.15 L1732.53 1211.15 L1733.11 1211.15 L1733.7 1211.15 L1734.29 1211.15 L1734.87 1211.15 L1735.46 1211.15 L1736.05 1211.15 L1736.63 1211.15 L1737.22 1211.15 L1737.81 1211.15 L1738.39 1211.15 L1738.98 1211.15 L1739.57 1211.15 L1740.15 1211.15 L1740.74 1211.15 L1741.32 1211.15 L1741.91 1211.15 L1742.5 1211.15 L1743.08 1211.15 L1743.67 1211.15 L1744.26 1211.15 L1744.84 1211.15 L1745.43 1211.15 L1746.02 1211.15 L1746.6 1211.15 L1747.19 1211.15 L1747.78 1211.15 L1748.36 1211.15 L1748.95 1211.15 L1749.53 1211.15 L1750.12 1211.15 L1750.71 1211.15 L1751.29 1211.15 L1751.88 1211.15 L1752.47 1211.15 L1753.05 1211.15 L1753.64 1211.15 L1754.23 1211.15 L1754.81 1211.15 L1755.4 1211.15 L1755.99 1211.15 L1756.57 1211.15 L1757.16 1211.15 L1757.74 1211.15 L1758.33 1211.15 L1758.92 1211.15 L1759.5 1211.15 L1760.09 1211.15 L1760.68 1211.15 L1761.26 1211.15 L1761.85 1211.15 L1762.44 1211.15 L1763.02 1211.15 L1763.61 1211.15 L1764.19 1211.15 L1764.78 1211.15 L1765.37 1211.15 L1765.95 1211.15 L1766.54 1211.15 L1767.13 1211.15 L1767.71 1211.15 L1768.3 1211.15 L1768.89 1211.15 L1769.47 1211.15 L1770.06 1211.15 L1770.65 1211.15 L1771.23 1211.15 L1771.82 1211.15 L1772.4 1211.15 L1772.99 1211.15 L1773.58 1211.15 L1774.16 1211.15 L1774.75 1211.15 L1775.34 1211.15 L1775.92 1211.15 L1776.51 1211.15 L1777.1 1211.15 L1777.68 1211.15 L1778.27 1211.15 L1778.86 1211.15 L1779.44 1211.15 L1780.03 1211.15 L1780.61 1211.15 L1781.2 1211.15 L1781.79 1211.15 L1782.37 1211.15 L1782.96 1211.15 L1783.55 1211.15 L1784.13 1211.15 L1784.72 1211.15 L1785.31 1211.15 L1785.89 1211.15 L1786.48 1211.15 L1787.06 1211.15 L1787.65 1211.15 L1788.24 1211.15 L1788.82 1211.15 L1789.41 1211.15 L1790 1211.15 L1790.58 1211.15 L1791.17 1211.15 L1791.76 1211.15 L1792.34 1211.15 L1792.93 1211.15 L1793.52 1211.15 L1794.1 1211.15 L1794.69 1211.15 L1795.27 1211.15 L1795.86 1211.15 L1796.45 1211.15 L1797.03 1211.15 L1797.62 1211.15 L1798.21 1211.15 L1798.79 1211.15 L1799.38 1211.15 L1799.97 1211.15 L1800.55 1211.15 L1801.14 1211.15 L1801.73 1211.15 L1802.31 1211.15 L1802.9 1211.15 L1803.48 1211.15 L1804.07 1211.15 L1804.66 1211.15 L1805.24 1211.15 L1805.83 1211.15 L1806.42 1211.15 L1807 1211.15 L1807.59 1211.15 L1808.18 1211.15 L1808.76 1211.15 L1809.35 1211.15 L1809.94 1211.15 L1810.52 1211.15 L1811.11 1211.15 L1811.69 1211.15 L1812.28 1211.15 L1812.87 1211.15 L1813.45 1211.15 L1814.04 1211.15 L1814.63 1211.15 L1815.21 1211.15 L1815.8 1211.15 L1816.39 1211.15 L1816.97 1211.15 L1817.56 1211.15 L1818.14 1211.15 L1818.73 1211.15 L1819.32 1211.15 L1819.9 1211.15 L1820.49 1211.15 L1821.08 1211.15 L1821.66 1211.15 L1822.25 1211.15 L1822.84 1211.15 L1823.42 1211.15 L1824.01 1211.15 L1824.6 1211.15 L1825.18 1211.15 L1825.77 1211.15 L1826.35 1211.15 L1826.94 1211.15 L1827.53 1211.15 L1828.11 1211.15 L1828.7 1211.15 L1829.29 1211.15 L1829.87 1211.15 L1830.46 1211.15 L1831.05 1211.15 L1831.63 1211.15 L1832.22 1211.15 L1832.81 1211.15 L1833.39 1211.15 L1833.98 1211.15 L1834.56 1211.15 L1835.15 1211.15 L1835.74 1211.15 L1836.32 1211.15 L1836.91 1211.15 L1837.5 1211.15 L1838.08 1211.15 L1838.67 1211.15 L1839.26 1211.15 L1839.84 1211.15 L1840.43 1211.15 L1841.01 1211.15 L1841.6 1211.15 L1842.19 1211.15 L1842.77 1211.15 L1843.36 1211.15 L1843.95 1211.15 L1844.53 1211.15 L1845.12 1211.15 L1845.71 1211.15 L1846.29 1211.15 L1846.88 1211.15 L1847.47 1211.15 L1848.05 1211.15 L1848.64 1211.15 L1849.22 1211.15 L1849.81 1211.15 L1850.4 1211.15 L1850.98 1211.15 L1851.57 1211.15 L1852.16 1211.15 L1852.74 1211.15 L1853.33 1211.15 L1853.92 1211.15 L1854.5 1211.15 L1855.09 1211.15 L1855.68 1211.15 L1856.26 1211.15 L1856.85 1211.15 L1857.43 1211.15 L1858.02 1211.15 L1858.61 1211.15 L1859.19 1211.15 L1859.78 1211.15 L1860.37 1211.15 L1860.95 1211.15 L1861.54 1211.15 L1862.13 1211.15 L1862.71 1211.15 L1863.3 1211.15 L1863.88 1211.15 L1864.47 1211.15 L1865.06 1211.15 L1865.64 1211.15 L1866.23 1211.15 L1866.82 1211.15 L1867.4 1211.15 L1867.99 1211.15 L1868.58 1211.15 L1869.16 1211.15 L1869.75 1211.15 L1870.34 1211.15 L1870.92 1211.15 L1871.51 1211.15 L1872.09 1211.15 L1872.68 1211.15 L1873.27 1211.15 L1873.85 1211.15 L1874.44 1211.15 L1875.03 1211.15 L1875.61 1211.15 L1876.2 1211.15 L1876.79 1211.15 L1877.37 1211.15 L1877.96 1211.15 L1878.55 1211.15 L1879.13 1211.15 L1879.72 1211.15 L1880.3 1211.15 L1880.89 1211.15 L1881.48 1211.15 L1882.06 1211.15 L1882.65 1211.15 L1883.24 1211.15 L1883.82 1211.15 L1884.41 1211.15 L1885 1211.15 L1885.58 1211.15 L1886.17 1211.15 L1886.76 1211.15 L1887.34 1211.15 L1887.93 1211.15 L1888.51 1211.15 L1889.1 1211.15 L1889.69 1211.15 L1890.27 1211.15 L1890.86 1211.15 L1891.45 1211.15 L1892.03 1211.15 L1892.62 1211.15 L1893.21 1211.15 L1893.79 1211.15 L1894.38 1211.15 L1894.96 1211.15 L1895.55 1211.15 L1896.14 1211.15 L1896.72 1211.15 L1897.31 1211.15 L1897.9 1211.15 L1898.48 1211.15 L1899.07 1211.15 L1899.66 1211.15 L1900.24 1211.15 L1900.83 1211.15 L1901.42 1211.15 L1902 1211.15 L1902.59 1211.15 L1903.17 1211.15 L1903.76 1211.15 L1904.35 1211.15 L1904.93 1211.15 L1905.52 1211.15 L1906.11 1211.15 L1906.69 1211.15 L1907.28 1211.15 L1907.87 1211.15 L1908.45 1211.15 L1909.04 1211.15 L1909.63 1211.15 L1910.21 1211.15 L1910.8 1211.15 L1911.38 1211.15 L1911.97 1211.15 L1912.56 1211.15 L1913.14 1211.15 L1913.73 1211.15 L1914.32 1211.15 L1914.9 1211.15 L1915.49 1211.15 L1916.08 1211.15 L1916.66 1211.15 L1917.25 1211.15 L1917.83 1211.15 L1918.42 1211.15 L1919.01 1211.15 L1919.59 1211.15 L1920.18 1211.15 L1920.77 1211.15 L1921.35 1211.15 L1921.94 1211.15 L1922.53 1211.15 L1923.11 1211.15 L1923.7 1211.15 L1924.29 1211.15 L1924.87 1211.15 L1925.46 1211.15 L1926.04 1211.15 L1926.63 1211.15 L1927.22 1211.15 L1927.8 1211.15 L1928.39 1211.15 L1928.98 1211.15 L1929.56 1211.15 L1930.15 1211.15 L1930.74 1211.15 L1931.32 1211.15 L1931.91 1211.15 L1932.5 1211.15 L1933.08 1211.15 L1933.67 1211.15 L1934.25 1211.15 L1934.84 1211.15 L1935.43 1211.15 L1936.01 1211.15 L1936.6 1211.15 L1937.19 1211.15 L1937.77 1211.15 L1938.36 1211.15 L1938.95 1211.15 L1939.53 1211.15 L1940.12 1211.15 L1940.71 1211.15 L1941.29 1211.15 L1941.88 1211.15 L1942.46 1211.15 L1943.05 1211.15 L1943.64 1211.15 L1944.22 1211.15 L1944.81 1211.15 L1945.4 1211.15 L1945.98 1211.15 L1946.57 1211.15 L1947.16 1211.15 L1947.74 1211.15 L1948.33 1211.15 L1948.91 1211.15 L1949.5 1211.15 L1950.09 1211.15 L1950.67 1211.15 L1951.26 1211.15 L1951.85 1211.15 L1952.43 1211.15 L1953.02 1211.15 L1953.61 1211.15 L1954.19 1211.15 L1954.78 1211.15 L1955.37 1211.15 L1955.95 1211.15 L1956.54 1211.15 L1957.12 1211.15 L1957.71 1211.15 L1958.3 1211.15 L1958.88 1211.15 L1959.47 1211.15 L1960.06 1211.15 L1960.64 1211.15 L1961.23 1211.15 L1961.82 1211.15 L1962.4 1211.15 L1962.99 1211.15 L1963.58 1211.15 L1964.16 1211.15 L1964.75 1211.15 L1965.33 1211.15 L1965.92 1211.15 L1966.51 1211.15 L1967.09 1211.15 L1967.68 1211.15 L1968.27 1211.15 L1968.85 1211.15 L1969.44 1211.15 L1970.03 1211.15 L1970.61 1211.15 L1971.2 1211.15 L1971.78 1211.15 L1972.37 1211.15 L1972.96 1211.15 L1973.54 1211.15 L1974.13 1211.15 L1974.72 1211.15 L1975.3 1211.15 L1975.89 1211.15 L1976.48 1211.15 L1977.06 1211.15 L1977.65 1211.15 L1978.24 1211.15 L1978.82 1211.15 L1979.41 1211.15 L1979.99 1211.15 L1980.58 1211.15 L1981.17 1211.15 L1981.75 1211.15 L1982.34 1211.15 L1982.93 1211.15 L1983.51 1211.15 L1984.1 1211.15 L1984.69 1211.15 L1985.27 1211.15 L1985.86 1211.15 L1986.45 1211.15 L1987.03 1211.15 L1987.62 1211.15 L1988.2 1211.15 L1988.79 1211.15 L1989.38 1211.15 L1989.96 1211.15 L1990.55 1211.15 L1991.14 1211.15 L1991.72 1211.15 L1992.31 1211.15 L1992.9 1211.15 L1993.48 1211.15 L1994.07 1211.15 L1994.65 1211.15 L1995.24 1211.15 L1995.83 1211.15 L1996.41 1211.15 L1997 1211.15 L1997.59 1211.15 L1998.17 1211.15 L1998.76 1211.15 L1999.35 1211.15 L1999.93 1211.15 L2000.52 1211.15 L2001.11 1211.15 L2001.69 1211.15 L2002.28 1211.15 L2002.86 1211.15 L2003.45 1211.15 L2004.04 1211.15 L2004.62 1211.15 L2005.21 1211.15 L2005.8 1211.15 L2006.38 1211.15 L2006.97 1211.15 L2007.56 1211.15 L2008.14 1211.15 L2008.73 1211.15 L2009.32 1211.15 L2009.9 1211.15 L2010.49 1211.15 L2011.07 1211.15 L2011.66 1211.15 L2012.25 1211.15 L2012.83 1211.15 L2013.42 1211.15 L2014.01 1211.15 L2014.59 1211.15 L2015.18 1211.15 L2015.77 1211.15 L2016.35 1211.15 L2016.94 1211.15 L2017.53 1211.15 L2018.11 1211.15 L2018.7 1211.15 L2019.28 1211.15 L2019.87 1211.15 L2020.46 1211.15 L2021.04 1211.15 L2021.63 1211.15 L2022.22 1211.15 L2022.8 1211.15 L2023.39 1211.15 L2023.98 1211.15 L2024.56 1211.15 L2025.15 1211.15 L2025.73 1211.15 L2026.32 1211.15 L2026.91 1211.15 L2027.49 1211.15 L2028.08 1211.15 L2028.67 1211.15 L2029.25 1211.15 L2029.84 1211.15 L2030.43 1211.15 L2031.01 1211.15 L2031.6 1211.15 L2032.19 1211.15 L2032.77 1211.15 L2033.36 1211.15 L2033.94 1211.15 L2034.53 1211.15 L2035.12 1211.15 L2035.7 1211.15 L2036.29 1211.15 L2036.88 1211.15 L2037.46 1211.15 L2038.05 1211.15 L2038.64 1211.15 L2039.22 1211.15 L2039.81 1211.15 L2040.4 1211.15 L2040.98 1211.15 L2041.57 1211.15 L2042.15 1211.15 L2042.74 1211.15 L2043.33 1211.15 L2043.91 1211.15 L2044.5 1211.15 L2045.09 1211.15 L2045.67 1211.15 L2046.26 1211.15 L2046.85 1211.15 L2047.43 1211.15 L2048.02 1211.15 L2048.6 1211.15 L2049.19 1211.15 L2049.78 1211.15 L2050.36 1211.15 L2050.95 1211.15 L2051.54 1211.15 L2052.12 1211.15 L2052.71 1211.15 L2053.3 1211.15 L2053.88 1211.15 L2054.47 1211.15 L2055.06 1211.15 L2055.64 1211.15 L2056.23 1211.15 L2056.81 1211.15 L2057.4 1211.15 L2057.99 1211.15 L2058.57 1211.15 L2059.16 1211.15 L2059.75 1211.15 L2060.33 1211.15 L2060.92 1211.15 L2061.51 1211.15 L2062.09 1211.15 L2062.68 1211.15 L2063.27 1211.15 L2063.85 1211.15 L2064.44 1211.15 L2065.02 1211.15 L2065.61 1211.15 L2066.2 1211.15 L2066.78 1211.15 L2067.37 1211.15 L2067.96 1211.15 L2068.54 1211.15 L2069.13 1211.15 L2069.72 1211.15 L2070.3 1211.15 L2070.89 1211.15 L2071.48 1211.15 L2072.06 1211.15 L2072.65 1211.15 L2073.23 1211.15 L2073.82 1211.15 L2074.41 1211.15 L2074.99 1211.15 L2075.58 1211.15 L2076.17 1211.15 L2076.75 1211.15 L2077.34 1211.15 L2077.93 1211.15 L2078.51 1211.15 L2079.1 1211.15 L2079.68 1211.15 L2080.27 1211.15 L2080.86 1211.15 L2081.44 1211.15 L2082.03 1211.15 L2082.62 1211.15 L2083.2 1211.15 L2083.79 1211.15 L2084.38 1211.15 L2084.96 1211.15 L2085.55 1211.15 L2086.14 1211.15 L2086.72 1211.15 L2087.31 1211.15 L2087.89 1211.15 L2088.48 1211.15 L2089.07 1211.15 L2089.65 1211.15 L2090.24 1211.15 L2090.83 1211.15 L2091.41 1211.15 L2092 1211.15 L2092.59 1211.15 L2093.17 1211.15 L2093.76 1211.15 L2094.35 1211.15 L2094.93 1211.15 L2095.52 1211.15 L2096.1 1211.15 L2096.69 1211.15 L2097.28 1211.15 L2097.86 1211.15 L2098.45 1211.15 L2099.04 1211.15 L2099.62 1211.15 L2100.21 1211.15 L2100.8 1211.15 L2101.38 1211.15 L2101.97 1211.15 L2102.55 1211.15 L2103.14 1211.15 L2103.73 1211.15 L2104.31 1211.15 L2104.9 1211.15 L2105.49 1211.15 L2106.07 1211.15 L2106.66 1211.15 L2107.25 1211.15 L2107.83 1211.15 L2108.42 1211.15 L2109.01 1211.15 L2109.59 1211.15 L2110.18 1211.15 L2110.76 1211.15 L2111.35 1211.15 L2111.94 1211.15 L2112.52 1211.15 L2113.11 1211.15 L2113.7 1211.15 L2114.28 1211.15 L2114.87 1211.15 L2115.46 1211.15 L2116.04 1211.15 L2116.63 1211.15 L2117.22 1211.15 L2117.8 1211.15 L2118.39 1211.15 L2118.97 1211.15 L2119.56 1211.15 L2120.15 1211.15 L2120.73 1211.15 L2121.32 1211.15 L2121.91 1211.15 L2122.49 1211.15 L2123.08 1211.15 L2123.67 1211.15 L2124.25 1211.15 L2124.84 1211.15 L2125.42 1211.15 L2126.01 1211.15 L2126.6 1211.15 L2127.18 1211.15 L2127.77 1211.15 L2128.36 1211.15 L2128.94 1211.15 L2129.53 1211.15 L2130.12 1211.15 L2130.7 1211.15 L2131.29 1211.15 L2131.88 1211.15 L2132.46 1211.15 L2133.05 1211.15 L2133.63 1211.15 L2134.22 1211.15 L2134.81 1211.15 L2135.39 1211.15 L2135.98 1211.15 L2136.57 1211.15 L2137.15 1211.15 L2137.74 1211.15 L2138.33 1211.15 L2138.91 1211.15 L2139.5 1211.15 L2140.09 1211.15 L2140.67 1211.15 L2141.26 1211.15 L2141.84 1211.15 L2142.43 1211.15 L2143.02 1211.15 L2143.6 1211.15 L2144.19 1211.15 L2144.78 1211.15 L2145.36 1211.15 L2145.95 1211.15 L2146.54 1211.15 L2147.12 1211.15 L2147.71 1211.15 L2148.3 1211.15 L2148.88 1211.15 L2149.47 1211.15 L2150.05 1211.15 L2150.64 1211.15 L2151.23 1211.15 L2151.81 1211.15 L2152.4 1211.15 L2152.99 1211.15 L2153.57 1211.15 L2154.16 1211.15 L2154.75 1211.15 L2155.33 1211.15 L2155.92 1211.15 L2156.5 1211.15 L2157.09 1211.15 L2157.68 1211.15 L2158.26 1211.15 L2158.26 1211.02 L2157.68 1211.02 L2157.09 1211.02 L2156.5 1211.02 L2155.92 1211.02 L2155.33 1211.02 L2154.75 1211.02 L2154.16 1211.02 L2153.57 1211.02 L2152.99 1211.02 L2152.4 1211.02 L2151.81 1211.02 L2151.23 1211.02 L2150.64 1211.02 L2150.05 1211.02 L2149.47 1211.02 L2148.88 1211.02 L2148.3 1211.02 L2147.71 1211.02 L2147.12 1211.02 L2146.54 1211.02 L2145.95 1211.02 L2145.36 1211.02 L2144.78 1211.02 L2144.19 1211.02 L2143.6 1211.02 L2143.02 1211.02 L2142.43 1211.02 L2141.84 1211.02 L2141.26 1211.02 L2140.67 1211.02 L2140.09 1211.02 L2139.5 1211.02 L2138.91 1211.02 L2138.33 1211.02 L2137.74 1211.02 L2137.15 1211.02 L2136.57 1211.02 L2135.98 1211.02 L2135.39 1211.02 L2134.81 1211.02 L2134.22 1211.02 L2133.63 1211.02 L2133.05 1211.02 L2132.46 1211.02 L2131.88 1211.02 L2131.29 1211.02 L2130.7 1211.02 L2130.12 1211.02 L2129.53 1211.02 L2128.94 1211.02 L2128.36 1211.02 L2127.77 1211.02 L2127.18 1211.02 L2126.6 1211.02 L2126.01 1211.02 L2125.42 1211.02 L2124.84 1211.02 L2124.25 1211.02 L2123.67 1211.02 L2123.08 1211.02 L2122.49 1211.02 L2121.91 1211.02 L2121.32 1211.02 L2120.73 1211.02 L2120.15 1211.02 L2119.56 1211.02 L2118.97 1211.02 L2118.39 1211.02 L2117.8 1211.02 L2117.22 1211.02 L2116.63 1211.02 L2116.04 1211.02 L2115.46 1211.02 L2114.87 1211.02 L2114.28 1211.02 L2113.7 1211.02 L2113.11 1211.02 L2112.52 1211.02 L2111.94 1211.02 L2111.35 1211.02 L2110.76 1211.02 L2110.18 1211.02 L2109.59 1211.02 L2109.01 1211.02 L2108.42 1211.02 L2107.83 1211.02 L2107.25 1211.02 L2106.66 1211.02 L2106.07 1211.02 L2105.49 1211.02 L2104.9 1211.02 L2104.31 1211.02 L2103.73 1211.02 L2103.14 1211.02 L2102.55 1211.02 L2101.97 1211.02 L2101.38 1211.02 L2100.8 1211.02 L2100.21 1211.02 L2099.62 1211.02 L2099.04 1211.02 L2098.45 1211.02 L2097.86 1211.02 L2097.28 1211.02 L2096.69 1211.02 L2096.1 1211.02 L2095.52 1211.02 L2094.93 1211.02 L2094.35 1211.02 L2093.76 1211.02 L2093.17 1211.02 L2092.59 1211.02 L2092 1211.02 L2091.41 1211.02 L2090.83 1211.02 L2090.24 1211.02 L2089.65 1211.02 L2089.07 1211.02 L2088.48 1211.02 L2087.89 1211.02 L2087.31 1211.02 L2086.72 1211.02 L2086.14 1211.02 L2085.55 1211.02 L2084.96 1211.02 L2084.38 1211.02 L2083.79 1211.02 L2083.2 1211.02 L2082.62 1211.02 L2082.03 1211.02 L2081.44 1211.02 L2080.86 1211.02 L2080.27 1211.02 L2079.68 1211.02 L2079.1 1211.02 L2078.51 1211.02 L2077.93 1211.02 L2077.34 1211.02 L2076.75 1211.02 L2076.17 1211.02 L2075.58 1211.02 L2074.99 1211.02 L2074.41 1211.02 L2073.82 1211.02 L2073.23 1211.02 L2072.65 1211.02 L2072.06 1211.02 L2071.48 1211.02 L2070.89 1211.02 L2070.3 1211.02 L2069.72 1211.02 L2069.13 1211.02 L2068.54 1211.02 L2067.96 1211.02 L2067.37 1211.02 L2066.78 1211.02 L2066.2 1211.02 L2065.61 1211.02 L2065.02 1211.02 L2064.44 1211.02 L2063.85 1211.02 L2063.27 1211.02 L2062.68 1211.02 L2062.09 1211.02 L2061.51 1211.02 L2060.92 1211.02 L2060.33 1211.02 L2059.75 1211.02 L2059.16 1211.02 L2058.57 1211.02 L2057.99 1211.02 L2057.4 1211.02 L2056.81 1211.02 L2056.23 1211.02 L2055.64 1211.02 L2055.06 1211.02 L2054.47 1211.02 L2053.88 1211.02 L2053.3 1211.02 L2052.71 1211.02 L2052.12 1211.02 L2051.54 1211.02 L2050.95 1211.02 L2050.36 1211.02 L2049.78 1211.02 L2049.19 1211.02 L2048.6 1211.02 L2048.02 1211.02 L2047.43 1211.02 L2046.85 1211.02 L2046.26 1211.02 L2045.67 1211.02 L2045.09 1211.02 L2044.5 1211.02 L2043.91 1211.02 L2043.33 1211.02 L2042.74 1211.02 L2042.15 1211.02 L2041.57 1211.02 L2040.98 1211.02 L2040.4 1211.02 L2039.81 1211.02 L2039.22 1211.02 L2038.64 1211.02 L2038.05 1211.02 L2037.46 1211.02 L2036.88 1211.02 L2036.29 1211.02 L2035.7 1211.02 L2035.12 1211.02 L2034.53 1211.02 L2033.94 1211.02 L2033.36 1211.02 L2032.77 1211.02 L2032.19 1211.02 L2031.6 1211.02 L2031.01 1211.02 L2030.43 1211.02 L2029.84 1211.02 L2029.25 1211.02 L2028.67 1211.02 L2028.08 1211.02 L2027.49 1211.02 L2026.91 1211.02 L2026.32 1211.02 L2025.73 1211.02 L2025.15 1211.02 L2024.56 1211.02 L2023.98 1211.02 L2023.39 1211.02 L2022.8 1211.02 L2022.22 1211.02 L2021.63 1211.02 L2021.04 1211.02 L2020.46 1211.02 L2019.87 1211.02 L2019.28 1211.02 L2018.7 1211.02 L2018.11 1211.02 L2017.53 1211.02 L2016.94 1211.02 L2016.35 1211.02 L2015.77 1211.02 L2015.18 1211.02 L2014.59 1211.02 L2014.01 1211.02 L2013.42 1211.02 L2012.83 1211.02 L2012.25 1211.02 L2011.66 1211.02 L2011.07 1211.02 L2010.49 1211.02 L2009.9 1211.02 L2009.32 1211.02 L2008.73 1211.02 L2008.14 1211.02 L2007.56 1211.02 L2006.97 1211.02 L2006.38 1211.02 L2005.8 1211.02 L2005.21 1211.02 L2004.62 1211.02 L2004.04 1211.02 L2003.45 1211.02 L2002.86 1211.02 L2002.28 1211.02 L2001.69 1211.02 L2001.11 1211.02 L2000.52 1211.02 L1999.93 1211.02 L1999.35 1211.02 L1998.76 1211.02 L1998.17 1211.02 L1997.59 1211.02 L1997 1211.02 L1996.41 1211.02 L1995.83 1211.02 L1995.24 1211.02 L1994.65 1211.02 L1994.07 1211.02 L1993.48 1211.02 L1992.9 1211.02 L1992.31 1211.02 L1991.72 1211.02 L1991.14 1211.02 L1990.55 1211.02 L1989.96 1211.02 L1989.38 1211.02 L1988.79 1211.02 L1988.2 1211.02 L1987.62 1211.02 L1987.03 1211.02 L1986.45 1211.02 L1985.86 1211.02 L1985.27 1211.02 L1984.69 1211.02 L1984.1 1211.02 L1983.51 1211.02 L1982.93 1211.02 L1982.34 1211.02 L1981.75 1211.02 L1981.17 1211.02 L1980.58 1211.02 L1979.99 1211.02 L1979.41 1211.02 L1978.82 1211.02 L1978.24 1211.02 L1977.65 1211.02 L1977.06 1211.02 L1976.48 1211.02 L1975.89 1211.02 L1975.3 1211.02 L1974.72 1211.02 L1974.13 1211.02 L1973.54 1211.02 L1972.96 1211.02 L1972.37 1211.02 L1971.78 1211.02 L1971.2 1211.02 L1970.61 1211.02 L1970.03 1211.02 L1969.44 1211.02 L1968.85 1211.02 L1968.27 1211.02 L1967.68 1211.02 L1967.09 1211.02 L1966.51 1211.02 L1965.92 1211.02 L1965.33 1211.02 L1964.75 1211.02 L1964.16 1211.02 L1963.58 1211.02 L1962.99 1211.02 L1962.4 1211.02 L1961.82 1211.02 L1961.23 1211.02 L1960.64 1211.02 L1960.06 1211.02 L1959.47 1211.02 L1958.88 1211.02 L1958.3 1211.02 L1957.71 1211.02 L1957.12 1211.02 L1956.54 1211.02 L1955.95 1211.02 L1955.37 1211.02 L1954.78 1211.02 L1954.19 1211.02 L1953.61 1211.02 L1953.02 1211.02 L1952.43 1211.02 L1951.85 1211.02 L1951.26 1211.02 L1950.67 1211.02 L1950.09 1211.02 L1949.5 1211.02 L1948.91 1211.02 L1948.33 1211.02 L1947.74 1211.02 L1947.16 1211.02 L1946.57 1211.02 L1945.98 1211.02 L1945.4 1211.02 L1944.81 1211.02 L1944.22 1211.02 L1943.64 1211.02 L1943.05 1211.02 L1942.46 1211.02 L1941.88 1211.02 L1941.29 1211.02 L1940.71 1211.02 L1940.12 1211.02 L1939.53 1211.02 L1938.95 1211.02 L1938.36 1211.02 L1937.77 1211.02 L1937.19 1211.02 L1936.6 1211.02 L1936.01 1211.02 L1935.43 1211.02 L1934.84 1211.02 L1934.25 1211.02 L1933.67 1211.02 L1933.08 1211.02 L1932.5 1211.02 L1931.91 1211.02 L1931.32 1211.02 L1930.74 1211.02 L1930.15 1211.02 L1929.56 1211.02 L1928.98 1211.02 L1928.39 1211.02 L1927.8 1211.02 L1927.22 1211.02 L1926.63 1211.02 L1926.04 1211.02 L1925.46 1211.02 L1924.87 1211.02 L1924.29 1211.02 L1923.7 1211.02 L1923.11 1211.02 L1922.53 1211.02 L1921.94 1211.02 L1921.35 1211.02 L1920.77 1211.02 L1920.18 1211.02 L1919.59 1211.02 L1919.01 1211.02 L1918.42 1211.02 L1917.83 1211.02 L1917.25 1211.02 L1916.66 1211.02 L1916.08 1211.02 L1915.49 1211.02 L1914.9 1211.02 L1914.32 1211.02 L1913.73 1211.02 L1913.14 1211.02 L1912.56 1211.02 L1911.97 1211.02 L1911.38 1211.02 L1910.8 1211.02 L1910.21 1211.02 L1909.63 1211.02 L1909.04 1211.02 L1908.45 1211.02 L1907.87 1211.02 L1907.28 1211.02 L1906.69 1211.02 L1906.11 1211.02 L1905.52 1211.02 L1904.93 1211.02 L1904.35 1211.02 L1903.76 1211.02 L1903.17 1211.02 L1902.59 1211.02 L1902 1211.02 L1901.42 1211.02 L1900.83 1211.02 L1900.24 1211.02 L1899.66 1211.02 L1899.07 1211.02 L1898.48 1211.02 L1897.9 1211.02 L1897.31 1211.02 L1896.72 1211.02 L1896.14 1211.02 L1895.55 1211.02 L1894.96 1211.02 L1894.38 1211.02 L1893.79 1211.02 L1893.21 1211.02 L1892.62 1211.02 L1892.03 1211.02 L1891.45 1211.02 L1890.86 1211.02 L1890.27 1211.02 L1889.69 1211.02 L1889.1 1211.02 L1888.51 1211.02 L1887.93 1211.02 L1887.34 1211.02 L1886.76 1211.02 L1886.17 1211.02 L1885.58 1211.02 L1885 1211.02 L1884.41 1211.02 L1883.82 1211.02 L1883.24 1211.02 L1882.65 1211.02 L1882.06 1211.02 L1881.48 1211.02 L1880.89 1211.02 L1880.3 1211.02 L1879.72 1211.02 L1879.13 1211.02 L1878.55 1211.02 L1877.96 1211.02 L1877.37 1211.02 L1876.79 1211.02 L1876.2 1211.02 L1875.61 1211.02 L1875.03 1211.02 L1874.44 1211.02 L1873.85 1211.02 L1873.27 1211.02 L1872.68 1211.02 L1872.09 1211.02 L1871.51 1211.02 L1870.92 1211.02 L1870.34 1211.02 L1869.75 1211.02 L1869.16 1211.02 L1868.58 1211.02 L1867.99 1211.02 L1867.4 1211.02 L1866.82 1211.02 L1866.23 1211.02 L1865.64 1211.02 L1865.06 1211.02 L1864.47 1211.02 L1863.88 1211.02 L1863.3 1211.02 L1862.71 1211.02 L1862.13 1211.02 L1861.54 1211.02 L1860.95 1211.02 L1860.37 1211.02 L1859.78 1211.02 L1859.19 1211.02 L1858.61 1211.02 L1858.02 1211.02 L1857.43 1211.02 L1856.85 1211.02 L1856.26 1211.02 L1855.68 1211.02 L1855.09 1211.02 L1854.5 1211.02 L1853.92 1211.02 L1853.33 1211.02 L1852.74 1211.02 L1852.16 1211.02 L1851.57 1211.02 L1850.98 1211.02 L1850.4 1211.02 L1849.81 1211.02 L1849.22 1211.02 L1848.64 1211.02 L1848.05 1211.02 L1847.47 1211.02 L1846.88 1211.02 L1846.29 1211.02 L1845.71 1211.02 L1845.12 1211.02 L1844.53 1211.02 L1843.95 1211.02 L1843.36 1211.02 L1842.77 1211.02 L1842.19 1211.02 L1841.6 1211.02 L1841.01 1211.02 L1840.43 1211.02 L1839.84 1211.02 L1839.26 1211.02 L1838.67 1211.02 L1838.08 1211.02 L1837.5 1211.02 L1836.91 1211.02 L1836.32 1211.02 L1835.74 1211.02 L1835.15 1211.02 L1834.56 1211.02 L1833.98 1211.02 L1833.39 1211.02 L1832.81 1211.02 L1832.22 1211.02 L1831.63 1211.02 L1831.05 1211.02 L1830.46 1211.02 L1829.87 1211.02 L1829.29 1211.02 L1828.7 1211.02 L1828.11 1211.02 L1827.53 1211.02 L1826.94 1211.02 L1826.35 1211.02 L1825.77 1211.02 L1825.18 1211.02 L1824.6 1211.02 L1824.01 1211.02 L1823.42 1211.02 L1822.84 1211.02 L1822.25 1211.02 L1821.66 1211.02 L1821.08 1211.02 L1820.49 1211.02 L1819.9 1211.02 L1819.32 1211.02 L1818.73 1211.02 L1818.14 1211.02 L1817.56 1211.02 L1816.97 1211.02 L1816.39 1211.02 L1815.8 1211.02 L1815.21 1211.02 L1814.63 1211.02 L1814.04 1211.02 L1813.45 1211.02 L1812.87 1211.02 L1812.28 1211.02 L1811.69 1211.02 L1811.11 1211.02 L1810.52 1211.02 L1809.94 1211.02 L1809.35 1211.02 L1808.76 1211.02 L1808.18 1211.02 L1807.59 1211.02 L1807 1211.02 L1806.42 1211.02 L1805.83 1211.02 L1805.24 1211.02 L1804.66 1211.02 L1804.07 1211.02 L1803.48 1211.02 L1802.9 1211.02 L1802.31 1211.02 L1801.73 1211.02 L1801.14 1211.02 L1800.55 1211.02 L1799.97 1211.02 L1799.38 1211.02 L1798.79 1211.02 L1798.21 1211.02 L1797.62 1211.02 L1797.03 1211.02 L1796.45 1211.02 L1795.86 1211.02 L1795.27 1211.02 L1794.69 1211.02 L1794.1 1211.02 L1793.52 1211.02 L1792.93 1211.02 L1792.34 1211.02 L1791.76 1211.02 L1791.17 1211.02 L1790.58 1211.02 L1790 1211.02 L1789.41 1211.02 L1788.82 1211.02 L1788.24 1211.02 L1787.65 1211.02 L1787.06 1211.02 L1786.48 1211.02 L1785.89 1211.02 L1785.31 1211.02 L1784.72 1211.02 L1784.13 1211.02 L1783.55 1211.02 L1782.96 1211.02 L1782.37 1211.02 L1781.79 1211.02 L1781.2 1211.02 L1780.61 1211.02 L1780.03 1211.02 L1779.44 1211.02 L1778.86 1211.02 L1778.27 1211.02 L1777.68 1211.02 L1777.1 1211.02 L1776.51 1211.02 L1775.92 1211.02 L1775.34 1211.02 L1774.75 1211.02 L1774.16 1211.02 L1773.58 1211.02 L1772.99 1211.02 L1772.4 1211.02 L1771.82 1211.02 L1771.23 1211.02 L1770.65 1211.02 L1770.06 1211.02 L1769.47 1211.02 L1768.89 1211.02 L1768.3 1211.02 L1767.71 1211.02 L1767.13 1211.02 L1766.54 1211.02 L1765.95 1211.02 L1765.37 1211.02 L1764.78 1211.02 L1764.19 1211.02 L1763.61 1211.02 L1763.02 1211.02 L1762.44 1211.02 L1761.85 1211.02 L1761.26 1211.02 L1760.68 1211.02 L1760.09 1211.02 L1759.5 1211.02 L1758.92 1211.02 L1758.33 1211.02 L1757.74 1211.02 L1757.16 1211.02 L1756.57 1211.02 L1755.99 1211.02 L1755.4 1211.02 L1754.81 1211.02 L1754.23 1211.02 L1753.64 1211.02 L1753.05 1211.02 L1752.47 1211.02 L1751.88 1211.02 L1751.29 1211.02 L1750.71 1211.02 L1750.12 1211.02 L1749.53 1211.02 L1748.95 1211.02 L1748.36 1211.02 L1747.78 1211.02 L1747.19 1211.02 L1746.6 1211.02 L1746.02 1211.02 L1745.43 1211.02 L1744.84 1211.02 L1744.26 1211.02 L1743.67 1211.02 L1743.08 1211.02 L1742.5 1211.02 L1741.91 1211.02 L1741.32 1211.02 L1740.74 1211.02 L1740.15 1211.02 L1739.57 1211.02 L1738.98 1211.02 L1738.39 1211.02 L1737.81 1211.02 L1737.22 1211.02 L1736.63 1211.02 L1736.05 1211.02 L1735.46 1211.02 L1734.87 1211.02 L1734.29 1211.02 L1733.7 1211.02 L1733.11 1211.02 L1732.53 1211.02 L1731.94 1211.02 L1731.36 1211.02 L1730.77 1211.02 L1730.18 1211.02 L1729.6 1211.02 L1729.01 1211.02 L1728.42 1211.02 L1727.84 1211.02 L1727.25 1211.02 L1726.66 1211.02 L1726.08 1211.02 L1725.49 1211.02 L1724.91 1211.02 L1724.32 1211.02 L1723.73 1211.02 L1723.15 1211.02 L1722.56 1211.02 L1721.97 1211.02 L1721.39 1211.02 L1720.8 1211.02 L1720.21 1211.02 L1719.63 1211.02 L1719.04 1211.02 L1718.45 1211.02 L1717.87 1211.02 L1717.28 1211.02 L1716.7 1211.02 L1716.11 1211.02 L1715.52 1211.02 L1714.94 1211.02 L1714.35 1211.02 L1713.76 1211.02 L1713.18 1211.02 L1712.59 1211.02 L1712 1211.02 L1711.42 1211.02 L1710.83 1211.02 L1710.24 1211.02 L1709.66 1211.02 L1709.07 1211.02 L1708.49 1211.02 L1707.9 1211.02 L1707.31 1211.02 L1706.73 1211.02 L1706.14 1211.02 L1705.55 1211.02 L1704.97 1211.02 L1704.38 1211.02 L1703.79 1211.02 L1703.21 1211.02 L1702.62 1211.02 L1702.04 1211.02 L1701.45 1211.02 L1700.86 1211.02 L1700.28 1211.02 L1699.69 1211.02 L1699.1 1211.02 L1698.52 1211.02 L1697.93 1211.02 L1697.34 1211.02 L1696.76 1211.02 L1696.17 1211.02 L1695.58 1211.02 L1695 1211.02 L1694.41 1211.02 L1693.83 1211.02 L1693.24 1211.02 L1692.65 1211.02 L1692.07 1211.02 L1691.48 1211.02 L1690.89 1211.02 L1690.31 1211.02 L1689.72 1211.02 L1689.13 1211.02 L1688.55 1211.02 L1687.96 1211.02 L1687.37 1211.02 L1686.79 1211.02 L1686.2 1211.02 L1685.62 1211.02 L1685.03 1211.02 L1684.44 1211.02 L1683.86 1211.02 L1683.27 1211.02 L1682.68 1211.02 L1682.1 1211.02 L1681.51 1211.02 L1680.92 1211.02 L1680.34 1211.02 L1679.75 1211.02 L1679.17 1211.02 L1678.58 1211.02 L1677.99 1211.02 L1677.41 1211.02 L1676.82 1211.02 L1676.23 1211.02 L1675.65 1211.02 L1675.06 1211.02 L1674.47 1211.02 L1673.89 1211.02 L1673.3 1211.02 L1672.71 1211.02 L1672.13 1211.02 L1671.54 1211.02 L1670.96 1211.02 L1670.37 1211.02 L1669.78 1211.02 L1669.2 1211.02 L1668.61 1211.02 L1668.02 1211.02 L1667.44 1211.02 L1666.85 1211.02 L1666.26 1211.02 L1665.68 1211.02 L1665.09 1211.02 L1664.5 1211.02 L1663.92 1211.02 L1663.33 1211.02 L1662.75 1211.02 L1662.16 1211.02 L1661.57 1211.02 L1660.99 1211.02 L1660.4 1211.02 L1659.81 1211.02 L1659.23 1211.02 L1658.64 1211.02 L1658.05 1211.02 L1657.47 1211.02 L1656.88 1211.02 L1656.29 1211.02 L1655.71 1211.02 L1655.12 1211.02 L1654.54 1211.02 L1653.95 1211.02 L1653.36 1211.02 L1652.78 1211.02 L1652.19 1211.02 L1651.6 1211.02 L1651.02 1211.02 L1650.43 1211.02 L1649.84 1211.02 L1649.26 1211.02 L1648.67 1211.02 L1648.09 1211.02 L1647.5 1211.02 L1646.91 1211.02 L1646.33 1211.02 L1645.74 1211.02 L1645.15 1211.02 L1644.57 1211.02 L1643.98 1211.02 L1643.39 1211.02 L1642.81 1211.02 L1642.22 1211.02 L1641.63 1211.02 L1641.05 1211.02 L1640.46 1211.02 L1639.88 1211.02 L1639.29 1211.02 L1638.7 1211.02 L1638.12 1211.02 L1637.53 1211.02 L1636.94 1211.02 L1636.36 1211.02 L1635.77 1211.02 L1635.18 1211.02 L1634.6 1211.02 L1634.01 1211.02 L1633.42 1211.02 L1632.84 1211.02 L1632.25 1211.02 L1631.67 1211.02 L1631.08 1211.02 L1630.49 1211.02 L1629.91 1211.02 L1629.32 1211.02 L1628.73 1211.02 L1628.15 1211.02 L1627.56 1211.02 L1626.97 1211.02 L1626.39 1211.02 L1625.8 1211.02 L1625.22 1211.02 L1624.63 1211.02 L1624.04 1211.02 L1623.46 1211.02 L1622.87 1211.02 L1622.28 1211.02 L1621.7 1211.02 L1621.11 1211.02 L1620.52 1211.02 L1619.94 1211.02 L1619.35 1211.02 L1618.76 1211.02 L1618.18 1211.02 L1617.59 1211.02 L1617.01 1211.02 L1616.42 1211.02 L1615.83 1211.02 L1615.25 1211.02 L1614.66 1211.02 L1614.07 1211.02 L1613.49 1211.02 L1612.9 1211.02 L1612.31 1211.02 L1611.73 1211.02 L1611.14 1211.02 L1610.55 1211.02 L1609.97 1211.02 L1609.38 1211.02 L1608.8 1211.02 L1608.21 1211.02 L1607.62 1211.02 L1607.04 1211.02 L1606.45 1211.02 L1605.86 1211.02 L1605.28 1211.02 L1604.69 1211.02 L1604.1 1211.02 L1603.52 1211.02 L1602.93 1211.02 L1602.34 1211.02 L1601.76 1211.02 L1601.17 1211.02 L1600.59 1211.02 L1600 1211.02 L1599.41 1211.02 L1598.83 1211.02 L1598.24 1211.02 L1597.65 1211.02 L1597.07 1211.02 L1596.48 1211.02 L1595.89 1211.02 L1595.31 1211.02 L1594.72 1211.02 L1594.14 1211.02 L1593.55 1211.02 L1592.96 1211.02 L1592.38 1211.02 L1591.79 1211.02 L1591.2 1211.02 L1590.62 1211.02 L1590.03 1211.02 L1589.44 1211.02 L1588.86 1211.02 L1588.27 1211.02 L1587.68 1211.02 L1587.1 1211.02 L1586.51 1211.02 L1585.93 1211.02 L1585.34 1211.02 L1584.75 1211.02 L1584.17 1211.02 L1583.58 1211.02 L1582.99 1211.02 L1582.41 1211.02 L1581.82 1211.02 L1581.23 1211.02 L1580.65 1211.02 L1580.06 1211.02 L1579.47 1211.02 L1578.89 1211.02 L1578.3 1211.02 L1577.72 1211.02 L1577.13 1211.02 L1576.54 1211.02 L1575.96 1211.02 L1575.37 1211.02 L1574.78 1211.02 L1574.2 1211.02 L1573.61 1211.02 L1573.02 1211.02 L1572.44 1211.02 L1571.85 1211.02 L1571.27 1211.02 L1570.68 1211.02 L1570.09 1211.02 L1569.51 1211.02 L1568.92 1211.02 L1568.33 1211.02 L1567.75 1211.02 L1567.16 1211.02 L1566.57 1211.02 L1565.99 1211.02 L1565.4 1211.02 L1564.81 1211.02 L1564.23 1211.02 L1563.64 1211.02 L1563.06 1211.02 L1562.47 1211.02 L1561.88 1211.02 L1561.3 1211.02 L1560.71 1211.02 L1560.12 1211.02 L1559.54 1211.02 L1558.95 1211.02 L1558.36 1211.02 L1557.78 1211.02 L1557.19 1211.02 L1556.6 1211.02 L1556.02 1211.02 L1555.43 1211.02 L1554.85 1211.02 L1554.26 1211.02 L1553.67 1211.02 L1553.09 1211.02 L1552.5 1211.02 L1551.91 1211.02 L1551.33 1211.02 L1550.74 1211.02 L1550.15 1211.02 L1549.57 1211.02 L1548.98 1211.02 L1548.4 1211.02 L1547.81 1211.02 L1547.22 1211.02 L1546.64 1211.02 L1546.05 1211.02 L1545.46 1211.02 L1544.88 1211.02 L1544.29 1211.02 L1543.7 1211.02 L1543.12 1211.02 L1542.53 1211.02 L1541.94 1211.02 L1541.36 1211.02 L1540.77 1211.02 L1540.19 1211.02 L1539.6 1211.02 L1539.01 1211.02 L1538.43 1211.02 L1537.84 1211.02 L1537.25 1211.02 L1536.67 1211.02 L1536.08 1211.02 L1535.49 1211.02 L1534.91 1211.02 L1534.32 1211.02 L1533.73 1211.02 L1533.15 1211.02 L1532.56 1211.02 L1531.98 1211.02 L1531.39 1211.02 L1530.8 1211.02 L1530.22 1211.02 L1529.63 1211.02 L1529.04 1211.02 L1528.46 1211.02 L1527.87 1211.02 L1527.28 1211.02 L1526.7 1211.02 L1526.11 1211.02 L1525.52 1211.02 L1524.94 1211.02 L1524.35 1211.02 L1523.77 1211.02 L1523.18 1211.02 L1522.59 1211.02 L1522.01 1211.02 L1521.42 1211.02 L1520.83 1211.02 L1520.25 1211.02 L1519.66 1211.02 L1519.07 1211.02 L1518.49 1211.02 L1517.9 1211.02 L1517.32 1211.02 L1516.73 1211.02 L1516.14 1211.02 L1515.56 1211.02 L1514.97 1211.02 L1514.38 1211.02 L1513.8 1211.02 L1513.21 1211.02 L1512.62 1211.02 L1512.04 1211.02 L1511.45 1211.02 L1510.86 1211.02 L1510.28 1211.02 L1509.69 1211.02 L1509.11 1211.02 L1508.52 1211.02 L1507.93 1211.02 L1507.35 1211.02 L1506.76 1211.02 L1506.17 1211.02 L1505.59 1211.02 L1505 1211.02 L1504.41 1211.02 L1503.83 1211.02 L1503.24 1211.02 L1502.65 1211.02 L1502.07 1211.02 L1501.48 1211.02 L1500.9 1211.02 L1500.31 1211.02 L1499.72 1211.02 L1499.14 1211.02 L1498.55 1211.02 L1497.96 1211.02 L1497.38 1211.02 L1496.79 1211.02 L1496.2 1211.02 L1495.62 1211.02 L1495.03 1211.02 L1494.45 1211.02 L1493.86 1211.02 L1493.27 1211.02 L1492.69 1211.02 L1492.1 1211.02 L1491.51 1211.02 L1490.93 1211.02 L1490.34 1211.02 L1489.75 1211.02 L1489.17 1211.02 L1488.58 1211.02 L1487.99 1211.02 L1487.41 1211.02 L1486.82 1211.02 L1486.24 1211.02 L1485.65 1211.02 L1485.06 1211.02 L1484.48 1211.02 L1483.89 1211.02 L1483.3 1211.02 L1482.72 1211.02 L1482.13 1211.02 L1481.54 1211.02 L1480.96 1211.02 L1480.37 1211.02 L1479.78 1211.02 L1479.2 1211.02 L1478.61 1211.02 L1478.03 1211.02 L1477.44 1211.02 L1476.85 1211.02 L1476.27 1211.02 L1475.68 1211.02 L1475.09 1211.02 L1474.51 1211.02 L1473.92 1211.02 L1473.33 1211.02 L1472.75 1211.02 L1472.16 1211.02 L1471.57 1211.02 L1470.99 1211.02 L1470.4 1211.02 L1469.82 1211.02 L1469.23 1211.02 L1468.64 1211.02 L1468.06 1211.02 L1467.47 1211.02 L1466.88 1211.02 L1466.3 1211.02 L1465.71 1211.02 L1465.12 1211.02 L1464.54 1211.02 L1463.95 1211.02 L1463.37 1211.02 L1462.78 1211.02 L1462.19 1211.02 L1461.61 1211.02 L1461.02 1211.02 L1460.43 1211.02 L1459.85 1211.02 L1459.26 1211.02 L1458.67 1211.02 L1458.09 1211.02 L1457.5 1211.02 L1456.91 1211.02 L1456.33 1211.02 L1455.74 1211.02 L1455.16 1211.02 L1454.57 1211.02 L1453.98 1211.02 L1453.4 1211.02 L1452.81 1211.02 L1452.22 1211.02 L1451.64 1211.02 L1451.05 1211.02 L1450.46 1211.02 L1449.88 1211.02 L1449.29 1211.02 L1448.7 1211.02 L1448.12 1211.02 L1447.53 1211.02 L1446.95 1211.02 L1446.36 1211.02 L1445.77 1211.02 L1445.19 1211.02 L1444.6 1211.02 L1444.01 1211.02 L1443.43 1211.02 L1442.84 1211.02 L1442.25 1211.02 L1441.67 1211.02 L1441.08 1211.02 L1440.5 1211.02 L1439.91 1211.02 L1439.32 1211.02 L1438.74 1211.02 L1438.15 1211.02 L1437.56 1211.02 L1436.98 1211.02 L1436.39 1211.02 L1435.8 1211.02 L1435.22 1211.02 L1434.63 1211.02 L1434.04 1211.02 L1433.46 1211.02 L1432.87 1211.02 L1432.29 1211.02 L1431.7 1211.02 L1431.11 1211.02 L1430.53 1211.02 L1429.94 1211.02 L1429.35 1211.02 L1428.77 1211.02 L1428.18 1211.02 L1427.59 1211.02 L1427.01 1211.02 L1426.42 1211.02 L1425.83 1211.02 L1425.25 1211.02 L1424.66 1211.02 L1424.08 1211.02 L1423.49 1211.02 L1422.9 1211.02 L1422.32 1211.02 L1421.73 1211.02 L1421.14 1211.02 L1420.56 1211.02 L1419.97 1211.02 L1419.38 1211.02 L1418.8 1211.02 L1418.21 1211.02 L1417.63 1211.02 L1417.04 1211.02 L1416.45 1211.02 L1415.87 1211.02 L1415.28 1211.02 L1414.69 1211.02 L1414.11 1211.02 L1413.52 1211.02 L1412.93 1211.02 L1412.35 1211.02 L1411.76 1211.02 L1411.17 1211.02 L1410.59 1211.02 L1410 1211.02 L1409.42 1211.02 L1408.83 1211.02 L1408.24 1211.02 L1407.66 1211.02 L1407.07 1211.02 L1406.48 1211.02 L1405.9 1211.02 L1405.31 1211.02 L1404.72 1211.02 L1404.14 1211.02 L1403.55 1211.02 L1402.96 1211.02 L1402.38 1211.02 L1401.79 1211.02 L1401.21 1211.02 L1400.62 1211.02 L1400.03 1211.02 L1399.45 1211.02 L1398.86 1211.02 L1398.27 1211.02 L1397.69 1211.02 L1397.1 1211.02 L1396.51 1211.02 L1395.93 1211.02 L1395.34 1211.02 L1394.75 1211.02 L1394.17 1211.02 L1393.58 1211.02 L1393 1211.02 L1392.41 1211.02 L1391.82 1211.02 L1391.24 1211.02 L1390.65 1211.02 L1390.06 1211.02 L1389.48 1211.02 L1388.89 1211.02 L1388.3 1211.02 L1387.72 1211.02 L1387.13 1211.02 L1386.55 1211.02 L1385.96 1211.02 L1385.37 1211.02 L1384.79 1211.02 L1384.2 1211.02 L1383.61 1211.02 L1383.03 1211.02 L1382.44 1211.02 L1381.85 1211.02 L1381.27 1211.02 L1380.68 1211.02 L1380.09 1211.02 L1379.51 1211.02 L1378.92 1211.02 L1378.34 1211.02 L1377.75 1211.02 L1377.16 1211.02 L1376.58 1211.02 L1375.99 1211.02 L1375.4 1211.02 L1374.82 1211.02 L1374.23 1211.02 L1373.64 1211.02 L1373.06 1211.02 L1372.47 1211.02 L1371.88 1211.02 L1371.3 1211.02 L1370.71 1211.02 L1370.13 1211.02 L1369.54 1211.02 L1368.95 1211.02 L1368.37 1211.02 L1367.78 1211.02 L1367.19 1211.02 L1366.61 1211.02 L1366.02 1211.02 L1365.43 1211.02 L1364.85 1211.02 L1364.26 1211.02 L1363.68 1211.02 L1363.09 1211.02 L1362.5 1211.02 L1361.92 1211.02 L1361.33 1211.02 L1360.74 1211.02 L1360.16 1211.02 L1359.57 1211.02 L1358.98 1211.02 L1358.4 1211.02 L1357.81 1211.02 L1357.22 1211.02 L1356.64 1211.02 L1356.05 1211.02 L1355.47 1211.02 L1354.88 1211.02 L1354.29 1211.02 L1353.71 1211.02 L1353.12 1211.02 L1352.53 1211.02 L1351.95 1211.02 L1351.36 1211.02 L1350.77 1211.02 L1350.19 1211.02 L1349.6 1211.02 L1349.01 1211.02 L1348.43 1211.02 L1347.84 1211.02 L1347.26 1211.02 L1346.67 1211.02 L1346.08 1211.02 L1345.5 1211.02 L1344.91 1211.02 L1344.32 1211.02 L1343.74 1211.02 L1343.15 1211.02 L1342.56 1211.02 L1341.98 1211.02 L1341.39 1211.02 L1340.8 1211.02 L1340.22 1211.02 L1339.63 1211.02 L1339.05 1211.02 L1338.46 1211.02 L1337.87 1211.02 L1337.29 1211.02 L1336.7 1211.02 L1336.11 1211.02 L1335.53 1211.02 L1334.94 1211.02 L1334.35 1211.02 L1333.77 1211.02 L1333.18 1211.02 L1332.6 1211.02 L1332.01 1211.02 L1331.42 1211.02 L1330.84 1211.02 L1330.25 1211.02 L1329.66 1211.02 L1329.08 1211.02 L1328.49 1211.02 L1327.9 1211.02 L1327.32 1211.02 L1326.73 1211.02 L1326.14 1211.02 L1325.56 1211.02 L1324.97 1211.02 L1324.39 1211.02 L1323.8 1211.02 L1323.21 1211.02 L1322.63 1211.02 L1322.04 1211.02 L1321.45 1211.02 L1320.87 1211.02 L1320.28 1211.02 L1319.69 1211.02 L1319.11 1211.02 L1318.52 1211.02 L1317.93 1211.02 L1317.35 1211.02 L1316.76 1211.02 L1316.18 1211.02 L1315.59 1211.02 L1315 1211.02 L1314.42 1211.02 L1313.83 1211.02 L1313.24 1211.02 L1312.66 1211.02 L1312.07 1211.02 L1311.48 1211.02 L1310.9 1211.02 L1310.31 1211.02 L1309.73 1211.02 L1309.14 1211.02 L1308.55 1211.02 L1307.97 1211.02 L1307.38 1211.02 L1306.79 1211.02 L1306.21 1211.02 L1305.62 1211.02 L1305.03 1211.02 L1304.45 1211.02 L1303.86 1211.02 L1303.27 1211.02 L1302.69 1211.02 L1302.1 1211.02 L1301.52 1211.02 L1300.93 1211.02 L1300.34 1211.02 L1299.76 1211.02 L1299.17 1211.02 L1298.58 1211.02 L1298 1211.02 L1297.41 1211.02 L1296.82 1211.02 L1296.24 1211.02 L1295.65 1211.02 L1295.06 1211.02 L1294.48 1211.02 L1293.89 1211.02 L1293.31 1211.02 L1292.72 1211.02 L1292.13 1211.02 L1291.55 1211.02 L1290.96 1211.02 L1290.37 1211.02 L1289.79 1211.02 L1289.2 1211.02 L1288.61 1211.02 L1288.03 1211.02 L1287.44 1211.02 L1286.86 1211.02 L1286.27 1211.02 L1285.68 1211.02 L1285.1 1211.02 L1284.51 1211.02 L1283.92 1211.02 L1283.34 1211.02 L1282.75 1211.02 L1282.16 1211.02 L1281.58 1211.02 L1280.99 1211.02 L1280.4 1211.02 L1279.82 1211.02 L1279.23 1211.02 L1278.65 1211.02 L1278.06 1211.02 L1277.47 1211.02 L1276.89 1211.02 L1276.3 1211.02 L1275.71 1211.02 L1275.13 1211.02 L1274.54 1211.02 L1273.95 1211.02 L1273.37 1211.02 L1272.78 1211.02 L1272.19 1211.02 L1271.61 1211.02 L1271.02 1211.02 L1270.44 1211.02 L1269.85 1211.02 L1269.26 1211.02 L1268.68 1211.02 L1268.09 1211.02 L1267.5 1211.02 L1266.92 1211.02 L1266.33 1211.02 L1265.74 1211.02 L1265.16 1211.02 L1264.57 1211.02 L1263.98 1211.02 L1263.4 1211.02 L1262.81 1211.02 L1262.23 1211.02 L1261.64 1211.02 L1261.05 1211.02 L1260.47 1211.02 L1259.88 1211.02 L1259.29 1211.02 L1258.71 1211.02 L1258.12 1211.02 L1257.53 1211.02 L1256.95 1211.02 L1256.36 1211.02 L1255.78 1211.02 L1255.19 1211.02 L1254.6 1211.02 L1254.02 1211.02 L1253.43 1211.02 L1252.84 1211.02 L1252.26 1211.02 L1251.67 1211.02 L1251.08 1211.02 L1250.5 1211.02 L1249.91 1211.02 L1249.32 1211.02 L1248.74 1211.02 L1248.15 1211.02 L1247.57 1211.02 L1246.98 1211.02 L1246.39 1211.02 L1245.81 1211.02 L1245.22 1211.02 L1244.63 1211.02 L1244.05 1211.02 L1243.46 1211.02 L1242.87 1211.02 L1242.29 1211.02 L1241.7 1211.02 L1241.11 1211.02 L1240.53 1211.02 L1239.94 1211.02 L1239.36 1211.02 L1238.77 1211.02 L1238.18 1211.02 L1237.6 1211.02 L1237.01 1211.02 L1236.42 1211.02 L1235.84 1211.02 L1235.25 1211.02 L1234.66 1211.02 L1234.08 1211.02 L1233.49 1211.02 L1232.91 1211.02 L1232.32 1211.02 L1231.73 1211.02 L1231.15 1211.02 L1230.56 1211.02 L1229.97 1211.02 L1229.39 1211.02 L1228.8 1211.02 L1228.21 1211.02 L1227.63 1211.02 L1227.04 1211.02 L1226.45 1211.02 L1225.87 1211.02 L1225.28 1211.02 L1224.7 1211.02 L1224.11 1211.02 L1223.52 1211.02 L1222.94 1211.02 L1222.35 1211.02 L1221.76 1211.02 L1221.18 1211.02 L1220.59 1211.02 L1220 1211.02 L1219.42 1211.02 L1218.83 1211.02 L1218.24 1211.02 L1217.66 1211.02 L1217.07 1211.02 L1216.49 1211.02 L1215.9 1211.02 L1215.31 1211.02 L1214.73 1211.02 L1214.14 1211.02 L1213.55 1211.02 L1212.97 1211.02 L1212.38 1211.02 L1211.79 1211.02 L1211.21 1211.02 L1210.62 1211.02 L1210.03 1211.02 L1209.45 1211.02 L1208.86 1211.02 L1208.28 1211.02 L1207.69 1211.02 L1207.1 1211.02 L1206.52 1211.02 L1205.93 1211.02 L1205.34 1211.02 L1204.76 1211.02 L1204.17 1211.02 L1203.58 1211.02 L1203 1211.02 L1202.41 1211.02 L1201.83 1211.02 L1201.24 1211.02 L1200.65 1211.02 L1200.07 1211.02 L1199.48 1211.02 L1198.89 1211.02 L1198.31 1211.02 L1197.72 1211.02 L1197.13 1211.02 L1196.55 1211.02 L1195.96 1211.02 L1195.37 1211.02 L1194.79 1211.02 L1194.2 1211.02 L1193.62 1211.02 L1193.03 1211.02 L1192.44 1211.02 L1191.86 1211.02 L1191.27 1211.02 L1190.68 1211.02 L1190.1 1211.02 L1189.51 1211.02 L1188.92 1211.02 L1188.34 1211.02 L1187.75 1211.02 L1187.16 1211.02 L1186.58 1211.02 L1185.99 1211.02 L1185.41 1211.02 L1184.82 1211.02 L1184.23 1211.02 L1183.65 1211.02 L1183.06 1211.02 L1182.47 1211.02 L1181.89 1211.02 L1181.3 1211.02 L1180.71 1211.02 L1180.13 1211.02 L1179.54 1211.02 L1178.96 1211.02 L1178.37 1211.02 L1177.78 1211.02 L1177.2 1211.02 L1176.61 1211.02 L1176.02 1211.02 L1175.44 1211.02 L1174.85 1211.02 L1174.26 1211.02 L1173.68 1211.02 L1173.09 1211.02 L1172.5 1211.02 L1171.92 1211.02 L1171.33 1211.02 L1170.75 1211.02 L1170.16 1211.02 L1169.57 1211.02 L1168.99 1211.02 L1168.4 1211.02 L1167.81 1211.02 L1167.23 1211.02 L1166.64 1211.02 L1166.05 1211.02 L1165.47 1211.02 L1164.88 1211.02 L1164.29 1211.02 L1163.71 1211.02 L1163.12 1211.02 L1162.54 1211.02 L1161.95 1211.02 L1161.36 1211.02 L1160.78 1211.02 L1160.19 1211.02 L1159.6 1211.02 L1159.02 1211.02 L1158.43 1211.02 L1157.84 1211.02 L1157.26 1211.02 L1156.67 1211.02 L1156.09 1211.02 L1155.5 1211.02 L1154.91 1211.02 L1154.33 1211.02 L1153.74 1211.02 L1153.15 1211.02 L1152.57 1211.02 L1151.98 1211.02 L1151.39 1211.02 L1150.81 1211.02 L1150.22 1211.02 L1149.63 1211.02 L1149.05 1211.02 L1148.46 1211.02 L1147.88 1211.02 L1147.29 1211.02 L1146.7 1211.02 L1146.12 1211.02 L1145.53 1211.02 L1144.94 1211.02 L1144.36 1211.02 L1143.77 1211.02 L1143.18 1211.02 L1142.6 1211.02 L1142.01 1211.02 L1141.42 1211.02 L1140.84 1211.02 L1140.25 1211.02 L1139.67 1211.02 L1139.08 1211.02 L1138.49 1211.02 L1137.91 1211.02 L1137.32 1211.02 L1136.73 1211.02 L1136.15 1211.02 L1135.56 1211.02 L1134.97 1211.02 L1134.39 1211.02 L1133.8 1211.02 L1133.21 1211.02 L1132.63 1211.02 L1132.04 1211.02 L1131.46 1211.02 L1130.87 1211.02 L1130.28 1211.02 L1129.7 1211.02 L1129.11 1211.02 L1128.52 1211.02 L1127.94 1211.02 L1127.35 1211.02 L1126.76 1211.02 L1126.18 1211.02 L1125.59 1211.02 L1125.01 1211.02 L1124.42 1211.02 L1123.83 1211.02 L1123.25 1211.02 L1122.66 1211.02 L1122.07 1211.02 L1121.49 1211.02 L1120.9 1211.02 L1120.31 1211.02 L1119.73 1211.02 L1119.14 1211.02 L1118.55 1211.02 L1117.97 1211.02 L1117.38 1211.02 L1116.8 1211.02 L1116.21 1211.02 L1115.62 1211.02 L1115.04 1211.02 L1114.45 1211.02 L1113.86 1211.02 L1113.28 1211.02 L1112.69 1211.02 L1112.1 1211.02 L1111.52 1211.02 L1110.93 1211.02 L1110.34 1211.02 L1109.76 1211.02 L1109.17 1211.02 L1108.59 1211.02 L1108 1211.02 L1107.41 1211.02 L1106.83 1211.02 L1106.24 1211.02 L1105.65 1211.02 L1105.07 1211.02 L1104.48 1211.02 L1103.89 1211.02 L1103.31 1211.02 L1102.72 1211.02 L1102.14 1211.02 L1101.55 1211.02 L1100.96 1211.02 L1100.38 1211.02 L1099.79 1211.02 L1099.2 1211.02 L1098.62 1211.02 L1098.03 1211.02 L1097.44 1211.02 L1096.86 1211.02 L1096.27 1211.02 L1095.68 1211.02 L1095.1 1211.02 L1094.51 1211.02 L1093.93 1211.02 L1093.34 1211.02 L1092.75 1211.02 L1092.17 1211.02 L1091.58 1211.02 L1090.99 1211.02 L1090.41 1211.02 L1089.82 1211.02 L1089.23 1211.02 L1088.65 1211.02 L1088.06 1211.02 L1087.47 1211.02 L1086.89 1211.02 L1086.3 1211.02 L1085.72 1211.02 L1085.13 1211.02 L1084.54 1211.02 L1083.96 1211.02 L1083.37 1211.02 L1082.78 1211.02 L1082.2 1211.02 L1081.61 1211.02 L1081.02 1211.02 L1080.44 1211.02 L1079.85 1211.02 L1079.26 1211.02 L1078.68 1211.02 L1078.09 1211.02 L1077.51 1211.02 L1076.92 1211.02 L1076.33 1211.02 L1075.75 1211.02 L1075.16 1211.02 L1074.57 1211.02 L1073.99 1211.02 L1073.4 1211.02 L1072.81 1211.02 L1072.23 1211.02 L1071.64 1211.02 L1071.06 1211.02 L1070.47 1211.02 L1069.88 1211.02 L1069.3 1211.02 L1068.71 1211.02 L1068.12 1211.02 L1067.54 1211.02 L1066.95 1211.02 L1066.36 1211.02 L1065.78 1211.02 L1065.19 1211.02 L1064.6 1211.02 L1064.02 1211.02 L1063.43 1211.02 L1062.85 1211.02 L1062.26 1211.02 L1061.67 1211.02 L1061.09 1211.02 L1060.5 1211.02 L1059.91 1211.02 L1059.33 1211.02 L1058.74 1211.02 L1058.15 1211.02 L1057.57 1211.02 L1056.98 1211.02 L1056.39 1211.02 L1055.81 1211.02 L1055.22 1211.02 L1054.64 1211.02 L1054.05 1211.02 L1053.46 1211.02 L1052.88 1211.02 L1052.29 1211.02 L1051.7 1211.02 L1051.12 1211.02 L1050.53 1211.02 L1049.94 1211.02 L1049.36 1211.02 L1048.77 1211.02 L1048.19 1211.02 L1047.6 1211.02 L1047.01 1211.02 L1046.43 1211.02 L1045.84 1211.02 L1045.25 1211.02 L1044.67 1211.02 L1044.08 1211.02 L1043.49 1211.02 L1042.91 1211.02 L1042.32 1211.02 L1041.73 1211.02 L1041.15 1211.02 L1040.56 1211.02 L1039.98 1211.02 L1039.39 1211.02 L1038.8 1211.02 L1038.22 1211.02 L1037.63 1211.02 L1037.04 1211.02 L1036.46 1211.02 L1035.87 1211.02 L1035.28 1211.02 L1034.7 1211.02 L1034.11 1211.02 L1033.52 1211.02 L1032.94 1211.02 L1032.35 1211.02 L1031.77 1211.02 L1031.18 1211.02 L1030.59 1211.02 L1030.01 1211.02 L1029.42 1211.02 L1028.83 1211.02 L1028.25 1211.02 L1027.66 1211.02 L1027.07 1211.02 L1026.49 1211.02 L1025.9 1211.02 L1025.32 1211.02 L1024.73 1211.02 L1024.14 1211.02 L1023.56 1211.02 L1022.97 1211.02 L1022.38 1211.02 L1021.8 1211.02 L1021.21 1211.02 L1020.62 1211.02 L1020.04 1211.02 L1019.45 1211.02 L1018.86 1211.02 L1018.28 1211.02 L1017.69 1211.02 L1017.11 1211.02 L1016.52 1211.02 L1015.93 1211.02 L1015.35 1211.02 L1014.76 1211.02 L1014.17 1211.02 L1013.59 1211.02 L1013 1211.02 L1012.41 1211.02 L1011.83 1211.02 L1011.24 1211.02 L1010.65 1211.02 L1010.07 1211.02 L1009.48 1211.02 L1008.9 1211.02 L1008.31 1211.02 L1007.72 1211.02 L1007.14 1211.02 L1006.55 1211.02 L1005.96 1211.02 L1005.38 1211.02 L1004.79 1211.02 L1004.2 1211.02 L1003.62 1211.02 L1003.03 1211.02 L1002.44 1211.02 L1001.86 1211.02 L1001.27 1211.02 L1000.69 1211.02 L1000.1 1211.02 L999.513 1211.02 L998.926 1211.02 L998.34 1211.02 L997.754 1211.02 L997.167 1211.02 L996.581 1211.02 L995.994 1211.02 L995.408 1211.02 L994.822 1211.02 L994.235 1211.02 L993.649 1211.02 L993.062 1211.02 L992.476 1211.02 L991.889 1211.02 L991.303 1211.02 L990.717 1211.02 L990.13 1211.02 L989.544 1211.02 L988.957 1211.02 L988.371 1211.02 L987.785 1211.02 L987.198 1211.02 L986.612 1211.02 L986.025 1211.02  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.08 986.612,1211.08 987.198,1211.08 987.785,1211.08 988.371,1211.08 988.957,1211.08 989.544,1211.08 990.13,1211.08 990.717,1211.08 991.303,1211.08 991.889,1211.08 992.476,1211.08 993.062,1211.08 993.649,1211.08 994.235,1211.08 994.822,1211.08 995.408,1211.08 995.994,1211.08 996.581,1211.08 997.167,1211.08 997.754,1211.08 998.34,1211.08 998.926,1211.08 999.513,1211.08 1000.1,1211.08 1000.69,1211.08 1001.27,1211.08 1001.86,1211.08 1002.44,1211.08 1003.03,1211.08 1003.62,1211.08 1004.2,1211.08 1004.79,1211.08 1005.38,1211.08 1005.96,1211.08 1006.55,1211.08 1007.14,1211.08 1007.72,1211.08 1008.31,1211.08 1008.9,1211.08 1009.48,1211.08 1010.07,1211.08 1010.65,1211.08 1011.24,1211.08 1011.83,1211.08 1012.41,1211.08 1013,1211.08 1013.59,1211.08 1014.17,1211.08 1014.76,1211.08 1015.35,1211.08 1015.93,1211.08 1016.52,1211.08 1017.11,1211.08 1017.69,1211.08 1018.28,1211.08 1018.86,1211.08 1019.45,1211.08 1020.04,1211.08 1020.62,1211.08 1021.21,1211.08 1021.8,1211.08 1022.38,1211.08 1022.97,1211.08 1023.56,1211.08 1024.14,1211.08 1024.73,1211.08 1025.32,1211.08 1025.9,1211.08 1026.49,1211.08 1027.07,1211.08 1027.66,1211.08 1028.25,1211.08 1028.83,1211.08 1029.42,1211.08 1030.01,1211.08 1030.59,1211.08 1031.18,1211.08 1031.77,1211.08 1032.35,1211.08 1032.94,1211.08 1033.52,1211.08 1034.11,1211.08 1034.7,1211.08 1035.28,1211.08 1035.87,1211.08 1036.46,1211.08 1037.04,1211.08 1037.63,1211.08 1038.22,1211.08 1038.8,1211.08 1039.39,1211.08 1039.98,1211.08 1040.56,1211.08 1041.15,1211.08 1041.73,1211.08 1042.32,1211.08 1042.91,1211.08 1043.49,1211.08 1044.08,1211.08 1044.67,1211.08 1045.25,1211.08 1045.84,1211.08 1046.43,1211.08 1047.01,1211.08 1047.6,1211.08 1048.19,1211.08 1048.77,1211.08 1049.36,1211.08 1049.94,1211.08 1050.53,1211.08 1051.12,1211.08 1051.7,1211.08 1052.29,1211.08 1052.88,1211.08 1053.46,1211.08 1054.05,1211.08 1054.64,1211.08 1055.22,1211.08 1055.81,1211.08 1056.39,1211.08 1056.98,1211.08 1057.57,1211.08 1058.15,1211.08 1058.74,1211.08 1059.33,1211.08 1059.91,1211.08 1060.5,1211.08 1061.09,1211.08 1061.67,1211.08 1062.26,1211.08 1062.85,1211.08 1063.43,1211.08 1064.02,1211.08 1064.6,1211.08 1065.19,1211.08 1065.78,1211.08 1066.36,1211.08 1066.95,1211.08 1067.54,1211.08 1068.12,1211.08 1068.71,1211.08 1069.3,1211.08 1069.88,1211.08 1070.47,1211.08 1071.06,1211.08 1071.64,1211.08 1072.23,1211.08 1072.81,1211.08 1073.4,1211.08 1073.99,1211.08 1074.57,1211.08 1075.16,1211.08 1075.75,1211.08 1076.33,1211.08 1076.92,1211.08 1077.51,1211.08 1078.09,1211.08 1078.68,1211.08 1079.26,1211.08 1079.85,1211.08 1080.44,1211.08 1081.02,1211.08 1081.61,1211.08 1082.2,1211.08 1082.78,1211.08 1083.37,1211.08 1083.96,1211.08 1084.54,1211.08 1085.13,1211.08 1085.72,1211.08 1086.3,1211.08 1086.89,1211.08 1087.47,1211.08 1088.06,1211.08 1088.65,1211.08 1089.23,1211.08 1089.82,1211.08 1090.41,1211.08 1090.99,1211.08 1091.58,1211.08 1092.17,1211.08 1092.75,1211.08 1093.34,1211.08 1093.93,1211.08 1094.51,1211.08 1095.1,1211.08 1095.68,1211.08 1096.27,1211.08 1096.86,1211.08 1097.44,1211.08 1098.03,1211.08 1098.62,1211.08 1099.2,1211.08 1099.79,1211.08 1100.38,1211.08 1100.96,1211.08 1101.55,1211.08 1102.14,1211.08 1102.72,1211.08 1103.31,1211.08 1103.89,1211.08 1104.48,1211.08 1105.07,1211.08 1105.65,1211.08 1106.24,1211.08 1106.83,1211.08 1107.41,1211.08 1108,1211.08 1108.59,1211.08 1109.17,1211.08 1109.76,1211.08 1110.34,1211.08 1110.93,1211.08 1111.52,1211.08 1112.1,1211.08 1112.69,1211.08 1113.28,1211.08 1113.86,1211.08 1114.45,1211.08 1115.04,1211.08 1115.62,1211.08 1116.21,1211.08 1116.8,1211.08 1117.38,1211.08 1117.97,1211.08 1118.55,1211.08 1119.14,1211.08 1119.73,1211.08 1120.31,1211.08 1120.9,1211.08 1121.49,1211.08 1122.07,1211.08 1122.66,1211.08 1123.25,1211.08 1123.83,1211.08 1124.42,1211.08 1125.01,1211.08 1125.59,1211.08 1126.18,1211.08 1126.76,1211.08 1127.35,1211.08 1127.94,1211.08 1128.52,1211.08 1129.11,1211.08 1129.7,1211.08 1130.28,1211.08 1130.87,1211.08 1131.46,1211.08 1132.04,1211.08 1132.63,1211.08 1133.21,1211.08 1133.8,1211.08 1134.39,1211.08 1134.97,1211.08 1135.56,1211.08 1136.15,1211.08 1136.73,1211.08 1137.32,1211.08 1137.91,1211.08 1138.49,1211.08 1139.08,1211.08 1139.67,1211.08 1140.25,1211.08 1140.84,1211.08 1141.42,1211.08 1142.01,1211.08 1142.6,1211.08 1143.18,1211.08 1143.77,1211.08 1144.36,1211.08 1144.94,1211.08 1145.53,1211.08 1146.12,1211.08 1146.7,1211.08 1147.29,1211.08 1147.88,1211.08 1148.46,1211.08 1149.05,1211.08 1149.63,1211.08 1150.22,1211.08 1150.81,1211.08 1151.39,1211.08 1151.98,1211.08 1152.57,1211.08 1153.15,1211.08 1153.74,1211.08 1154.33,1211.08 1154.91,1211.08 1155.5,1211.08 1156.09,1211.08 1156.67,1211.08 1157.26,1211.08 1157.84,1211.08 1158.43,1211.08 1159.02,1211.08 1159.6,1211.08 1160.19,1211.08 1160.78,1211.08 1161.36,1211.08 1161.95,1211.08 1162.54,1211.08 1163.12,1211.08 1163.71,1211.08 1164.29,1211.08 1164.88,1211.08 1165.47,1211.08 1166.05,1211.08 1166.64,1211.08 1167.23,1211.08 1167.81,1211.08 1168.4,1211.08 1168.99,1211.08 1169.57,1211.08 1170.16,1211.08 1170.75,1211.08 1171.33,1211.08 1171.92,1211.08 1172.5,1211.08 1173.09,1211.08 1173.68,1211.08 1174.26,1211.08 1174.85,1211.08 1175.44,1211.08 1176.02,1211.08 1176.61,1211.08 1177.2,1211.08 1177.78,1211.08 1178.37,1211.08 1178.96,1211.08 1179.54,1211.08 1180.13,1211.08 1180.71,1211.08 1181.3,1211.08 1181.89,1211.08 1182.47,1211.08 1183.06,1211.08 1183.65,1211.08 1184.23,1211.08 1184.82,1211.08 1185.41,1211.08 1185.99,1211.08 1186.58,1211.08 1187.16,1211.08 1187.75,1211.08 1188.34,1211.08 1188.92,1211.08 1189.51,1211.08 1190.1,1211.08 1190.68,1211.08 1191.27,1211.08 1191.86,1211.08 1192.44,1211.08 1193.03,1211.08 1193.62,1211.08 1194.2,1211.08 1194.79,1211.08 1195.37,1211.08 1195.96,1211.08 1196.55,1211.08 1197.13,1211.08 1197.72,1211.08 1198.31,1211.08 1198.89,1211.08 1199.48,1211.08 1200.07,1211.08 1200.65,1211.08 1201.24,1211.08 1201.83,1211.08 1202.41,1211.08 1203,1211.08 1203.58,1211.08 1204.17,1211.08 1204.76,1211.08 1205.34,1211.08 1205.93,1211.08 1206.52,1211.08 1207.1,1211.08 1207.69,1211.08 1208.28,1211.08 1208.86,1211.08 1209.45,1211.08 1210.03,1211.08 1210.62,1211.08 1211.21,1211.08 1211.79,1211.08 1212.38,1211.08 1212.97,1211.08 1213.55,1211.08 1214.14,1211.08 1214.73,1211.08 1215.31,1211.08 1215.9,1211.08 1216.49,1211.08 1217.07,1211.08 1217.66,1211.08 1218.24,1211.08 1218.83,1211.08 1219.42,1211.08 1220,1211.08 1220.59,1211.08 1221.18,1211.08 1221.76,1211.08 1222.35,1211.08 1222.94,1211.08 1223.52,1211.08 1224.11,1211.08 1224.7,1211.08 1225.28,1211.08 1225.87,1211.08 1226.45,1211.08 1227.04,1211.08 1227.63,1211.08 1228.21,1211.08 1228.8,1211.08 1229.39,1211.08 1229.97,1211.08 1230.56,1211.08 1231.15,1211.08 1231.73,1211.08 1232.32,1211.08 1232.91,1211.08 1233.49,1211.08 1234.08,1211.08 1234.66,1211.08 1235.25,1211.08 1235.84,1211.08 1236.42,1211.08 1237.01,1211.08 1237.6,1211.08 1238.18,1211.08 1238.77,1211.08 1239.36,1211.08 1239.94,1211.08 1240.53,1211.08 1241.11,1211.08 1241.7,1211.08 1242.29,1211.08 1242.87,1211.08 1243.46,1211.08 1244.05,1211.08 1244.63,1211.08 1245.22,1211.08 1245.81,1211.08 1246.39,1211.08 1246.98,1211.08 1247.57,1211.08 1248.15,1211.08 1248.74,1211.08 1249.32,1211.08 1249.91,1211.08 1250.5,1211.08 1251.08,1211.08 1251.67,1211.08 1252.26,1211.08 1252.84,1211.08 1253.43,1211.08 1254.02,1211.08 1254.6,1211.08 1255.19,1211.08 1255.78,1211.08 1256.36,1211.08 1256.95,1211.08 1257.53,1211.08 1258.12,1211.08 1258.71,1211.08 1259.29,1211.08 1259.88,1211.08 1260.47,1211.08 1261.05,1211.08 1261.64,1211.08 1262.23,1211.08 1262.81,1211.08 1263.4,1211.08 1263.98,1211.08 1264.57,1211.08 1265.16,1211.08 1265.74,1211.08 1266.33,1211.08 1266.92,1211.08 1267.5,1211.08 1268.09,1211.08 1268.68,1211.08 1269.26,1211.08 1269.85,1211.08 1270.44,1211.08 1271.02,1211.08 1271.61,1211.08 1272.19,1211.08 1272.78,1211.08 1273.37,1211.08 1273.95,1211.08 1274.54,1211.08 1275.13,1211.08 1275.71,1211.08 1276.3,1211.08 1276.89,1211.08 1277.47,1211.08 1278.06,1211.08 1278.65,1211.08 1279.23,1211.08 1279.82,1211.08 1280.4,1211.08 1280.99,1211.08 1281.58,1211.08 1282.16,1211.08 1282.75,1211.08 1283.34,1211.08 1283.92,1211.08 1284.51,1211.08 1285.1,1211.08 1285.68,1211.08 1286.27,1211.08 1286.86,1211.08 1287.44,1211.08 1288.03,1211.08 1288.61,1211.08 1289.2,1211.08 1289.79,1211.08 1290.37,1211.08 1290.96,1211.08 1291.55,1211.08 1292.13,1211.08 1292.72,1211.08 1293.31,1211.08 1293.89,1211.08 1294.48,1211.08 1295.06,1211.08 1295.65,1211.08 1296.24,1211.08 1296.82,1211.08 1297.41,1211.08 1298,1211.08 1298.58,1211.08 1299.17,1211.08 1299.76,1211.08 1300.34,1211.08 1300.93,1211.08 1301.52,1211.08 1302.1,1211.08 1302.69,1211.08 1303.27,1211.08 1303.86,1211.08 1304.45,1211.08 1305.03,1211.08 1305.62,1211.08 1306.21,1211.08 1306.79,1211.08 1307.38,1211.08 1307.97,1211.08 1308.55,1211.08 1309.14,1211.08 1309.73,1211.08 1310.31,1211.08 1310.9,1211.08 1311.48,1211.08 1312.07,1211.08 1312.66,1211.08 1313.24,1211.08 1313.83,1211.08 1314.42,1211.08 1315,1211.08 1315.59,1211.08 1316.18,1211.08 1316.76,1211.08 1317.35,1211.08 1317.93,1211.08 1318.52,1211.08 1319.11,1211.08 1319.69,1211.08 1320.28,1211.08 1320.87,1211.08 1321.45,1211.08 1322.04,1211.08 1322.63,1211.08 1323.21,1211.08 1323.8,1211.08 1324.39,1211.08 1324.97,1211.08 1325.56,1211.08 1326.14,1211.08 1326.73,1211.08 1327.32,1211.08 1327.9,1211.08 1328.49,1211.08 1329.08,1211.08 1329.66,1211.08 1330.25,1211.08 1330.84,1211.08 1331.42,1211.08 1332.01,1211.08 1332.6,1211.08 1333.18,1211.08 1333.77,1211.08 1334.35,1211.08 1334.94,1211.08 1335.53,1211.08 1336.11,1211.08 1336.7,1211.08 1337.29,1211.08 1337.87,1211.08 1338.46,1211.08 1339.05,1211.08 1339.63,1211.08 1340.22,1211.08 1340.8,1211.08 1341.39,1211.08 1341.98,1211.08 1342.56,1211.08 1343.15,1211.08 1343.74,1211.08 1344.32,1211.08 1344.91,1211.08 1345.5,1211.08 1346.08,1211.08 1346.67,1211.08 1347.26,1211.08 1347.84,1211.08 1348.43,1211.08 1349.01,1211.08 1349.6,1211.08 1350.19,1211.08 1350.77,1211.08 1351.36,1211.08 1351.95,1211.08 1352.53,1211.08 1353.12,1211.08 1353.71,1211.08 1354.29,1211.08 1354.88,1211.08 1355.47,1211.08 1356.05,1211.08 1356.64,1211.08 1357.22,1211.08 1357.81,1211.08 1358.4,1211.08 1358.98,1211.08 1359.57,1211.08 1360.16,1211.08 1360.74,1211.08 1361.33,1211.08 1361.92,1211.08 1362.5,1211.08 1363.09,1211.08 1363.68,1211.08 1364.26,1211.08 1364.85,1211.08 1365.43,1211.08 1366.02,1211.08 1366.61,1211.08 1367.19,1211.08 1367.78,1211.08 1368.37,1211.08 1368.95,1211.08 1369.54,1211.08 1370.13,1211.08 1370.71,1211.08 1371.3,1211.08 1371.88,1211.08 1372.47,1211.08 1373.06,1211.08 1373.64,1211.08 1374.23,1211.08 1374.82,1211.08 1375.4,1211.08 1375.99,1211.08 1376.58,1211.08 1377.16,1211.08 1377.75,1211.08 1378.34,1211.08 1378.92,1211.08 1379.51,1211.08 1380.09,1211.08 1380.68,1211.08 1381.27,1211.08 1381.85,1211.08 1382.44,1211.08 1383.03,1211.08 1383.61,1211.08 1384.2,1211.08 1384.79,1211.08 1385.37,1211.08 1385.96,1211.08 1386.55,1211.08 1387.13,1211.08 1387.72,1211.08 1388.3,1211.08 1388.89,1211.08 1389.48,1211.08 1390.06,1211.08 1390.65,1211.08 1391.24,1211.08 1391.82,1211.08 1392.41,1211.08 1393,1211.08 1393.58,1211.08 1394.17,1211.08 1394.75,1211.08 1395.34,1211.08 1395.93,1211.08 1396.51,1211.08 1397.1,1211.08 1397.69,1211.08 1398.27,1211.08 1398.86,1211.08 1399.45,1211.08 1400.03,1211.08 1400.62,1211.08 1401.21,1211.08 1401.79,1211.08 1402.38,1211.08 1402.96,1211.08 1403.55,1211.08 1404.14,1211.08 1404.72,1211.08 1405.31,1211.08 1405.9,1211.08 1406.48,1211.08 1407.07,1211.08 1407.66,1211.08 1408.24,1211.08 1408.83,1211.08 1409.42,1211.08 1410,1211.08 1410.59,1211.08 1411.17,1211.08 1411.76,1211.08 1412.35,1211.08 1412.93,1211.08 1413.52,1211.08 1414.11,1211.08 1414.69,1211.08 1415.28,1211.08 1415.87,1211.08 1416.45,1211.08 1417.04,1211.08 1417.63,1211.08 1418.21,1211.08 1418.8,1211.08 1419.38,1211.08 1419.97,1211.08 1420.56,1211.08 1421.14,1211.08 1421.73,1211.08 1422.32,1211.08 1422.9,1211.08 1423.49,1211.08 1424.08,1211.08 1424.66,1211.08 1425.25,1211.08 1425.83,1211.08 1426.42,1211.08 1427.01,1211.08 1427.59,1211.08 1428.18,1211.08 1428.77,1211.08 1429.35,1211.08 1429.94,1211.08 1430.53,1211.08 1431.11,1211.08 1431.7,1211.08 1432.29,1211.08 1432.87,1211.08 1433.46,1211.08 1434.04,1211.08 1434.63,1211.08 1435.22,1211.08 1435.8,1211.08 1436.39,1211.08 1436.98,1211.08 1437.56,1211.08 1438.15,1211.08 1438.74,1211.08 1439.32,1211.08 1439.91,1211.08 1440.5,1211.08 1441.08,1211.08 1441.67,1211.08 1442.25,1211.08 1442.84,1211.08 1443.43,1211.08 1444.01,1211.08 1444.6,1211.08 1445.19,1211.08 1445.77,1211.08 1446.36,1211.08 1446.95,1211.08 1447.53,1211.08 1448.12,1211.08 1448.7,1211.08 1449.29,1211.08 1449.88,1211.08 1450.46,1211.08 1451.05,1211.08 1451.64,1211.08 1452.22,1211.08 1452.81,1211.08 1453.4,1211.08 1453.98,1211.08 1454.57,1211.08 1455.16,1211.08 1455.74,1211.08 1456.33,1211.08 1456.91,1211.08 1457.5,1211.08 1458.09,1211.08 1458.67,1211.08 1459.26,1211.08 1459.85,1211.08 1460.43,1211.08 1461.02,1211.08 1461.61,1211.08 1462.19,1211.08 1462.78,1211.08 1463.37,1211.08 1463.95,1211.08 1464.54,1211.08 1465.12,1211.08 1465.71,1211.08 1466.3,1211.08 1466.88,1211.08 1467.47,1211.08 1468.06,1211.08 1468.64,1211.08 1469.23,1211.08 1469.82,1211.08 1470.4,1211.08 1470.99,1211.08 1471.57,1211.08 1472.16,1211.08 1472.75,1211.08 1473.33,1211.08 1473.92,1211.08 1474.51,1211.08 1475.09,1211.08 1475.68,1211.08 1476.27,1211.08 1476.85,1211.08 1477.44,1211.08 1478.03,1211.08 1478.61,1211.08 1479.2,1211.08 1479.78,1211.08 1480.37,1211.08 1480.96,1211.08 1481.54,1211.08 1482.13,1211.08 1482.72,1211.08 1483.3,1211.08 1483.89,1211.08 1484.48,1211.08 1485.06,1211.08 1485.65,1211.08 1486.24,1211.08 1486.82,1211.08 1487.41,1211.08 1487.99,1211.08 1488.58,1211.08 1489.17,1211.08 1489.75,1211.08 1490.34,1211.08 1490.93,1211.08 1491.51,1211.08 1492.1,1211.08 1492.69,1211.08 1493.27,1211.08 1493.86,1211.08 1494.45,1211.08 1495.03,1211.08 1495.62,1211.08 1496.2,1211.08 1496.79,1211.08 1497.38,1211.08 1497.96,1211.08 1498.55,1211.08 1499.14,1211.08 1499.72,1211.08 1500.31,1211.08 1500.9,1211.08 1501.48,1211.08 1502.07,1211.08 1502.65,1211.08 1503.24,1211.08 1503.83,1211.08 1504.41,1211.08 1505,1211.08 1505.59,1211.08 1506.17,1211.08 1506.76,1211.08 1507.35,1211.08 1507.93,1211.08 1508.52,1211.08 1509.11,1211.08 1509.69,1211.08 1510.28,1211.08 1510.86,1211.08 1511.45,1211.08 1512.04,1211.08 1512.62,1211.08 1513.21,1211.08 1513.8,1211.08 1514.38,1211.08 1514.97,1211.08 1515.56,1211.08 1516.14,1211.08 1516.73,1211.08 1517.32,1211.08 1517.9,1211.08 1518.49,1211.08 1519.07,1211.08 1519.66,1211.08 1520.25,1211.08 1520.83,1211.08 1521.42,1211.08 1522.01,1211.08 1522.59,1211.08 1523.18,1211.08 1523.77,1211.08 1524.35,1211.08 1524.94,1211.08 1525.52,1211.08 1526.11,1211.08 1526.7,1211.08 1527.28,1211.08 1527.87,1211.08 1528.46,1211.08 1529.04,1211.08 1529.63,1211.08 1530.22,1211.08 1530.8,1211.08 1531.39,1211.08 1531.98,1211.08 1532.56,1211.08 1533.15,1211.08 1533.73,1211.08 1534.32,1211.08 1534.91,1211.08 1535.49,1211.08 1536.08,1211.08 1536.67,1211.08 1537.25,1211.08 1537.84,1211.08 1538.43,1211.08 1539.01,1211.08 1539.6,1211.08 1540.19,1211.08 1540.77,1211.08 1541.36,1211.08 1541.94,1211.08 1542.53,1211.08 1543.12,1211.08 1543.7,1211.08 1544.29,1211.08 1544.88,1211.08 1545.46,1211.08 1546.05,1211.08 1546.64,1211.08 1547.22,1211.08 1547.81,1211.08 1548.4,1211.08 1548.98,1211.08 1549.57,1211.08 1550.15,1211.08 1550.74,1211.08 1551.33,1211.08 1551.91,1211.08 1552.5,1211.08 1553.09,1211.08 1553.67,1211.08 1554.26,1211.08 1554.85,1211.08 1555.43,1211.08 1556.02,1211.08 1556.6,1211.08 1557.19,1211.08 1557.78,1211.08 1558.36,1211.08 1558.95,1211.08 1559.54,1211.08 1560.12,1211.08 1560.71,1211.08 1561.3,1211.08 1561.88,1211.08 1562.47,1211.08 1563.06,1211.08 1563.64,1211.08 1564.23,1211.08 1564.81,1211.08 1565.4,1211.08 1565.99,1211.08 1566.57,1211.08 1567.16,1211.08 1567.75,1211.08 1568.33,1211.08 1568.92,1211.08 1569.51,1211.08 1570.09,1211.08 1570.68,1211.08 1571.27,1211.08 1571.85,1211.08 1572.44,1211.08 1573.02,1211.08 1573.61,1211.08 1574.2,1211.08 1574.78,1211.08 1575.37,1211.08 1575.96,1211.08 1576.54,1211.08 1577.13,1211.08 1577.72,1211.08 1578.3,1211.08 1578.89,1211.08 1579.47,1211.08 1580.06,1211.08 1580.65,1211.08 1581.23,1211.08 1581.82,1211.08 1582.41,1211.08 1582.99,1211.08 1583.58,1211.08 1584.17,1211.08 1584.75,1211.08 1585.34,1211.08 1585.93,1211.08 1586.51,1211.08 1587.1,1211.08 1587.68,1211.08 1588.27,1211.08 1588.86,1211.08 1589.44,1211.08 1590.03,1211.08 1590.62,1211.08 1591.2,1211.08 1591.79,1211.08 1592.38,1211.08 1592.96,1211.08 1593.55,1211.08 1594.14,1211.08 1594.72,1211.08 1595.31,1211.08 1595.89,1211.08 1596.48,1211.08 1597.07,1211.08 1597.65,1211.08 1598.24,1211.08 1598.83,1211.08 1599.41,1211.08 1600,1211.08 1600.59,1211.08 1601.17,1211.08 1601.76,1211.08 1602.34,1211.08 1602.93,1211.08 1603.52,1211.08 1604.1,1211.08 1604.69,1211.08 1605.28,1211.08 1605.86,1211.08 1606.45,1211.08 1607.04,1211.08 1607.62,1211.08 1608.21,1211.08 1608.8,1211.08 1609.38,1211.08 1609.97,1211.08 1610.55,1211.08 1611.14,1211.08 1611.73,1211.08 1612.31,1211.08 1612.9,1211.08 1613.49,1211.08 1614.07,1211.08 1614.66,1211.08 1615.25,1211.08 1615.83,1211.08 1616.42,1211.08 1617.01,1211.08 1617.59,1211.08 1618.18,1211.08 1618.76,1211.08 1619.35,1211.08 1619.94,1211.08 1620.52,1211.08 1621.11,1211.08 1621.7,1211.08 1622.28,1211.08 1622.87,1211.08 1623.46,1211.08 1624.04,1211.08 1624.63,1211.08 1625.22,1211.08 1625.8,1211.08 1626.39,1211.08 1626.97,1211.08 1627.56,1211.08 1628.15,1211.08 1628.73,1211.08 1629.32,1211.08 1629.91,1211.08 1630.49,1211.08 1631.08,1211.08 1631.67,1211.08 1632.25,1211.08 1632.84,1211.08 1633.42,1211.08 1634.01,1211.08 1634.6,1211.08 1635.18,1211.08 1635.77,1211.08 1636.36,1211.08 1636.94,1211.08 1637.53,1211.08 1638.12,1211.08 1638.7,1211.08 1639.29,1211.08 1639.88,1211.08 1640.46,1211.08 1641.05,1211.08 1641.63,1211.08 1642.22,1211.08 1642.81,1211.08 1643.39,1211.08 1643.98,1211.08 1644.57,1211.08 1645.15,1211.08 1645.74,1211.08 1646.33,1211.08 1646.91,1211.08 1647.5,1211.08 1648.09,1211.08 1648.67,1211.08 1649.26,1211.08 1649.84,1211.08 1650.43,1211.08 1651.02,1211.08 1651.6,1211.08 1652.19,1211.08 1652.78,1211.08 1653.36,1211.08 1653.95,1211.08 1654.54,1211.08 1655.12,1211.08 1655.71,1211.08 1656.29,1211.08 1656.88,1211.08 1657.47,1211.08 1658.05,1211.08 1658.64,1211.08 1659.23,1211.08 1659.81,1211.08 1660.4,1211.08 1660.99,1211.08 1661.57,1211.08 1662.16,1211.08 1662.75,1211.08 1663.33,1211.08 1663.92,1211.08 1664.5,1211.08 1665.09,1211.08 1665.68,1211.08 1666.26,1211.08 1666.85,1211.08 1667.44,1211.08 1668.02,1211.08 1668.61,1211.08 1669.2,1211.08 1669.78,1211.08 1670.37,1211.08 1670.96,1211.08 1671.54,1211.08 1672.13,1211.08 1672.71,1211.08 1673.3,1211.08 1673.89,1211.08 1674.47,1211.08 1675.06,1211.08 1675.65,1211.08 1676.23,1211.08 1676.82,1211.08 1677.41,1211.08 1677.99,1211.08 1678.58,1211.08 1679.17,1211.08 1679.75,1211.08 1680.34,1211.08 1680.92,1211.08 1681.51,1211.08 1682.1,1211.08 1682.68,1211.08 1683.27,1211.08 1683.86,1211.08 1684.44,1211.08 1685.03,1211.08 1685.62,1211.08 1686.2,1211.08 1686.79,1211.08 1687.37,1211.08 1687.96,1211.08 1688.55,1211.08 1689.13,1211.08 1689.72,1211.08 1690.31,1211.08 1690.89,1211.08 1691.48,1211.08 1692.07,1211.08 1692.65,1211.08 1693.24,1211.08 1693.83,1211.08 1694.41,1211.08 1695,1211.08 1695.58,1211.08 1696.17,1211.08 1696.76,1211.08 1697.34,1211.08 1697.93,1211.08 1698.52,1211.08 1699.1,1211.08 1699.69,1211.08 1700.28,1211.08 1700.86,1211.08 1701.45,1211.08 1702.04,1211.08 1702.62,1211.08 1703.21,1211.08 1703.79,1211.08 1704.38,1211.08 1704.97,1211.08 1705.55,1211.08 1706.14,1211.08 1706.73,1211.08 1707.31,1211.08 1707.9,1211.08 1708.49,1211.08 1709.07,1211.08 1709.66,1211.08 1710.24,1211.08 1710.83,1211.08 1711.42,1211.08 1712,1211.08 1712.59,1211.08 1713.18,1211.08 1713.76,1211.08 1714.35,1211.08 1714.94,1211.08 1715.52,1211.08 1716.11,1211.08 1716.7,1211.08 1717.28,1211.08 1717.87,1211.08 1718.45,1211.08 1719.04,1211.08 1719.63,1211.08 1720.21,1211.08 1720.8,1211.08 1721.39,1211.08 1721.97,1211.08 1722.56,1211.08 1723.15,1211.08 1723.73,1211.08 1724.32,1211.08 1724.91,1211.08 1725.49,1211.08 1726.08,1211.08 1726.66,1211.08 1727.25,1211.08 1727.84,1211.08 1728.42,1211.08 1729.01,1211.08 1729.6,1211.08 1730.18,1211.08 1730.77,1211.08 1731.36,1211.08 1731.94,1211.08 1732.53,1211.08 1733.11,1211.08 1733.7,1211.08 1734.29,1211.08 1734.87,1211.08 1735.46,1211.08 1736.05,1211.08 1736.63,1211.08 1737.22,1211.08 1737.81,1211.08 1738.39,1211.08 1738.98,1211.08 1739.57,1211.08 1740.15,1211.08 1740.74,1211.08 1741.32,1211.08 1741.91,1211.08 1742.5,1211.08 1743.08,1211.08 1743.67,1211.08 1744.26,1211.08 1744.84,1211.08 1745.43,1211.08 1746.02,1211.08 1746.6,1211.08 1747.19,1211.08 1747.78,1211.08 1748.36,1211.08 1748.95,1211.08 1749.53,1211.08 1750.12,1211.08 1750.71,1211.08 1751.29,1211.08 1751.88,1211.08 1752.47,1211.08 1753.05,1211.08 1753.64,1211.08 1754.23,1211.08 1754.81,1211.08 1755.4,1211.08 1755.99,1211.08 1756.57,1211.08 1757.16,1211.08 1757.74,1211.08 1758.33,1211.08 1758.92,1211.08 1759.5,1211.08 1760.09,1211.08 1760.68,1211.08 1761.26,1211.08 1761.85,1211.08 1762.44,1211.08 1763.02,1211.08 1763.61,1211.08 1764.19,1211.08 1764.78,1211.08 1765.37,1211.08 1765.95,1211.08 1766.54,1211.08 1767.13,1211.08 1767.71,1211.08 1768.3,1211.08 1768.89,1211.08 1769.47,1211.08 1770.06,1211.08 1770.65,1211.08 1771.23,1211.08 1771.82,1211.08 1772.4,1211.08 1772.99,1211.08 1773.58,1211.08 1774.16,1211.08 1774.75,1211.08 1775.34,1211.08 1775.92,1211.08 1776.51,1211.08 1777.1,1211.08 1777.68,1211.08 1778.27,1211.08 1778.86,1211.08 1779.44,1211.08 1780.03,1211.08 1780.61,1211.08 1781.2,1211.08 1781.79,1211.08 1782.37,1211.08 1782.96,1211.08 1783.55,1211.08 1784.13,1211.08 1784.72,1211.08 1785.31,1211.08 1785.89,1211.08 1786.48,1211.08 1787.06,1211.08 1787.65,1211.08 1788.24,1211.08 1788.82,1211.08 1789.41,1211.08 1790,1211.08 1790.58,1211.08 1791.17,1211.08 1791.76,1211.08 1792.34,1211.08 1792.93,1211.08 1793.52,1211.08 1794.1,1211.08 1794.69,1211.08 1795.27,1211.08 1795.86,1211.08 1796.45,1211.08 1797.03,1211.08 1797.62,1211.08 1798.21,1211.08 1798.79,1211.08 1799.38,1211.08 1799.97,1211.08 1800.55,1211.08 1801.14,1211.08 1801.73,1211.08 1802.31,1211.08 1802.9,1211.08 1803.48,1211.08 1804.07,1211.08 1804.66,1211.08 1805.24,1211.08 1805.83,1211.08 1806.42,1211.08 1807,1211.08 1807.59,1211.08 1808.18,1211.08 1808.76,1211.08 1809.35,1211.08 1809.94,1211.08 1810.52,1211.08 1811.11,1211.08 1811.69,1211.08 1812.28,1211.08 1812.87,1211.08 1813.45,1211.08 1814.04,1211.08 1814.63,1211.08 1815.21,1211.08 1815.8,1211.08 1816.39,1211.08 1816.97,1211.08 1817.56,1211.08 1818.14,1211.08 1818.73,1211.08 1819.32,1211.08 1819.9,1211.08 1820.49,1211.08 1821.08,1211.08 1821.66,1211.08 1822.25,1211.08 1822.84,1211.08 1823.42,1211.08 1824.01,1211.08 1824.6,1211.08 1825.18,1211.08 1825.77,1211.08 1826.35,1211.08 1826.94,1211.08 1827.53,1211.08 1828.11,1211.08 1828.7,1211.08 1829.29,1211.08 1829.87,1211.08 1830.46,1211.08 1831.05,1211.08 1831.63,1211.08 1832.22,1211.08 1832.81,1211.08 1833.39,1211.08 1833.98,1211.08 1834.56,1211.08 1835.15,1211.08 1835.74,1211.08 1836.32,1211.08 1836.91,1211.08 1837.5,1211.08 1838.08,1211.08 1838.67,1211.08 1839.26,1211.08 1839.84,1211.08 1840.43,1211.08 1841.01,1211.08 1841.6,1211.08 1842.19,1211.08 1842.77,1211.08 1843.36,1211.08 1843.95,1211.08 1844.53,1211.08 1845.12,1211.08 1845.71,1211.08 1846.29,1211.08 1846.88,1211.08 1847.47,1211.08 1848.05,1211.08 1848.64,1211.08 1849.22,1211.08 1849.81,1211.08 1850.4,1211.08 1850.98,1211.08 1851.57,1211.08 1852.16,1211.08 1852.74,1211.08 1853.33,1211.08 1853.92,1211.08 1854.5,1211.08 1855.09,1211.08 1855.68,1211.08 1856.26,1211.08 1856.85,1211.08 1857.43,1211.08 1858.02,1211.08 1858.61,1211.08 1859.19,1211.08 1859.78,1211.08 1860.37,1211.08 1860.95,1211.08 1861.54,1211.08 1862.13,1211.08 1862.71,1211.08 1863.3,1211.08 1863.88,1211.08 1864.47,1211.08 1865.06,1211.08 1865.64,1211.08 1866.23,1211.08 1866.82,1211.08 1867.4,1211.08 1867.99,1211.08 1868.58,1211.08 1869.16,1211.08 1869.75,1211.08 1870.34,1211.08 1870.92,1211.08 1871.51,1211.08 1872.09,1211.08 1872.68,1211.08 1873.27,1211.08 1873.85,1211.08 1874.44,1211.08 1875.03,1211.08 1875.61,1211.08 1876.2,1211.08 1876.79,1211.08 1877.37,1211.08 1877.96,1211.08 1878.55,1211.08 1879.13,1211.08 1879.72,1211.08 1880.3,1211.08 1880.89,1211.08 1881.48,1211.08 1882.06,1211.08 1882.65,1211.08 1883.24,1211.08 1883.82,1211.08 1884.41,1211.08 1885,1211.08 1885.58,1211.08 1886.17,1211.08 1886.76,1211.08 1887.34,1211.08 1887.93,1211.08 1888.51,1211.08 1889.1,1211.08 1889.69,1211.08 1890.27,1211.08 1890.86,1211.08 1891.45,1211.08 1892.03,1211.08 1892.62,1211.08 1893.21,1211.08 1893.79,1211.08 1894.38,1211.08 1894.96,1211.08 1895.55,1211.08 1896.14,1211.08 1896.72,1211.08 1897.31,1211.08 1897.9,1211.08 1898.48,1211.08 1899.07,1211.08 1899.66,1211.08 1900.24,1211.08 1900.83,1211.08 1901.42,1211.08 1902,1211.08 1902.59,1211.08 1903.17,1211.08 1903.76,1211.08 1904.35,1211.08 1904.93,1211.08 1905.52,1211.08 1906.11,1211.08 1906.69,1211.08 1907.28,1211.08 1907.87,1211.08 1908.45,1211.08 1909.04,1211.08 1909.63,1211.08 1910.21,1211.08 1910.8,1211.08 1911.38,1211.08 1911.97,1211.08 1912.56,1211.08 1913.14,1211.08 1913.73,1211.08 1914.32,1211.08 1914.9,1211.08 1915.49,1211.08 1916.08,1211.08 1916.66,1211.08 1917.25,1211.08 1917.83,1211.08 1918.42,1211.08 1919.01,1211.08 1919.59,1211.08 1920.18,1211.08 1920.77,1211.08 1921.35,1211.08 1921.94,1211.08 1922.53,1211.08 1923.11,1211.08 1923.7,1211.08 1924.29,1211.08 1924.87,1211.08 1925.46,1211.08 1926.04,1211.08 1926.63,1211.08 1927.22,1211.08 1927.8,1211.08 1928.39,1211.08 1928.98,1211.08 1929.56,1211.08 1930.15,1211.08 1930.74,1211.08 1931.32,1211.08 1931.91,1211.08 1932.5,1211.08 1933.08,1211.08 1933.67,1211.08 1934.25,1211.08 1934.84,1211.08 1935.43,1211.08 1936.01,1211.08 1936.6,1211.08 1937.19,1211.08 1937.77,1211.08 1938.36,1211.08 1938.95,1211.08 1939.53,1211.08 1940.12,1211.08 1940.71,1211.08 1941.29,1211.08 1941.88,1211.08 1942.46,1211.08 1943.05,1211.08 1943.64,1211.08 1944.22,1211.08 1944.81,1211.08 1945.4,1211.08 1945.98,1211.08 1946.57,1211.08 1947.16,1211.08 1947.74,1211.08 1948.33,1211.08 1948.91,1211.08 1949.5,1211.08 1950.09,1211.08 1950.67,1211.08 1951.26,1211.08 1951.85,1211.08 1952.43,1211.08 1953.02,1211.08 1953.61,1211.08 1954.19,1211.08 1954.78,1211.08 1955.37,1211.08 1955.95,1211.08 1956.54,1211.08 1957.12,1211.08 1957.71,1211.08 1958.3,1211.08 1958.88,1211.08 1959.47,1211.08 1960.06,1211.08 1960.64,1211.08 1961.23,1211.08 1961.82,1211.08 1962.4,1211.08 1962.99,1211.08 1963.58,1211.08 1964.16,1211.08 1964.75,1211.08 1965.33,1211.08 1965.92,1211.08 1966.51,1211.08 1967.09,1211.08 1967.68,1211.08 1968.27,1211.08 1968.85,1211.08 1969.44,1211.08 1970.03,1211.08 1970.61,1211.08 1971.2,1211.08 1971.78,1211.08 1972.37,1211.08 1972.96,1211.08 1973.54,1211.08 1974.13,1211.08 1974.72,1211.08 1975.3,1211.08 1975.89,1211.08 1976.48,1211.08 1977.06,1211.08 1977.65,1211.08 1978.24,1211.08 1978.82,1211.08 1979.41,1211.08 1979.99,1211.08 1980.58,1211.08 1981.17,1211.08 1981.75,1211.08 1982.34,1211.08 1982.93,1211.08 1983.51,1211.08 1984.1,1211.08 1984.69,1211.08 1985.27,1211.08 1985.86,1211.08 1986.45,1211.08 1987.03,1211.08 1987.62,1211.08 1988.2,1211.08 1988.79,1211.08 1989.38,1211.08 1989.96,1211.08 1990.55,1211.08 1991.14,1211.08 1991.72,1211.08 1992.31,1211.08 1992.9,1211.08 1993.48,1211.08 1994.07,1211.08 1994.65,1211.08 1995.24,1211.08 1995.83,1211.08 1996.41,1211.08 1997,1211.08 1997.59,1211.08 1998.17,1211.08 1998.76,1211.08 1999.35,1211.08 1999.93,1211.08 2000.52,1211.08 2001.11,1211.08 2001.69,1211.08 2002.28,1211.08 2002.86,1211.08 2003.45,1211.08 2004.04,1211.08 2004.62,1211.08 2005.21,1211.08 2005.8,1211.08 2006.38,1211.08 2006.97,1211.08 2007.56,1211.08 2008.14,1211.08 2008.73,1211.08 2009.32,1211.08 2009.9,1211.08 2010.49,1211.08 2011.07,1211.08 2011.66,1211.08 2012.25,1211.08 2012.83,1211.08 2013.42,1211.08 2014.01,1211.08 2014.59,1211.08 2015.18,1211.08 2015.77,1211.08 2016.35,1211.08 2016.94,1211.08 2017.53,1211.08 2018.11,1211.08 2018.7,1211.08 2019.28,1211.08 2019.87,1211.08 2020.46,1211.08 2021.04,1211.08 2021.63,1211.08 2022.22,1211.08 2022.8,1211.08 2023.39,1211.08 2023.98,1211.08 2024.56,1211.08 2025.15,1211.08 2025.73,1211.08 2026.32,1211.08 2026.91,1211.08 2027.49,1211.08 2028.08,1211.08 2028.67,1211.08 2029.25,1211.08 2029.84,1211.08 2030.43,1211.08 2031.01,1211.08 2031.6,1211.08 2032.19,1211.08 2032.77,1211.08 2033.36,1211.08 2033.94,1211.08 2034.53,1211.08 2035.12,1211.08 2035.7,1211.08 2036.29,1211.08 2036.88,1211.08 2037.46,1211.08 2038.05,1211.08 2038.64,1211.08 2039.22,1211.08 2039.81,1211.08 2040.4,1211.08 2040.98,1211.08 2041.57,1211.08 2042.15,1211.08 2042.74,1211.08 2043.33,1211.08 2043.91,1211.08 2044.5,1211.08 2045.09,1211.08 2045.67,1211.08 2046.26,1211.08 2046.85,1211.08 2047.43,1211.08 2048.02,1211.08 2048.6,1211.08 2049.19,1211.08 2049.78,1211.08 2050.36,1211.08 2050.95,1211.08 2051.54,1211.08 2052.12,1211.08 2052.71,1211.08 2053.3,1211.08 2053.88,1211.08 2054.47,1211.08 2055.06,1211.08 2055.64,1211.08 2056.23,1211.08 2056.81,1211.08 2057.4,1211.08 2057.99,1211.08 2058.57,1211.08 2059.16,1211.08 2059.75,1211.08 2060.33,1211.08 2060.92,1211.08 2061.51,1211.08 2062.09,1211.08 2062.68,1211.08 2063.27,1211.08 2063.85,1211.08 2064.44,1211.08 2065.02,1211.08 2065.61,1211.08 2066.2,1211.08 2066.78,1211.08 2067.37,1211.08 2067.96,1211.08 2068.54,1211.08 2069.13,1211.08 2069.72,1211.08 2070.3,1211.08 2070.89,1211.08 2071.48,1211.08 2072.06,1211.08 2072.65,1211.08 2073.23,1211.08 2073.82,1211.08 2074.41,1211.08 2074.99,1211.08 2075.58,1211.08 2076.17,1211.08 2076.75,1211.08 2077.34,1211.08 2077.93,1211.08 2078.51,1211.08 2079.1,1211.08 2079.68,1211.08 2080.27,1211.08 2080.86,1211.08 2081.44,1211.08 2082.03,1211.08 2082.62,1211.08 2083.2,1211.08 2083.79,1211.08 2084.38,1211.08 2084.96,1211.08 2085.55,1211.08 2086.14,1211.08 2086.72,1211.08 2087.31,1211.08 2087.89,1211.08 2088.48,1211.08 2089.07,1211.08 2089.65,1211.08 2090.24,1211.08 2090.83,1211.08 2091.41,1211.08 2092,1211.08 2092.59,1211.08 2093.17,1211.08 2093.76,1211.08 2094.35,1211.08 2094.93,1211.08 2095.52,1211.08 2096.1,1211.08 2096.69,1211.08 2097.28,1211.08 2097.86,1211.08 2098.45,1211.08 2099.04,1211.08 2099.62,1211.08 2100.21,1211.08 2100.8,1211.08 2101.38,1211.08 2101.97,1211.08 2102.55,1211.08 2103.14,1211.08 2103.73,1211.08 2104.31,1211.08 2104.9,1211.08 2105.49,1211.08 2106.07,1211.08 2106.66,1211.08 2107.25,1211.08 2107.83,1211.08 2108.42,1211.08 2109.01,1211.08 2109.59,1211.08 2110.18,1211.08 2110.76,1211.08 2111.35,1211.08 2111.94,1211.08 2112.52,1211.08 2113.11,1211.08 2113.7,1211.08 2114.28,1211.08 2114.87,1211.08 2115.46,1211.08 2116.04,1211.08 2116.63,1211.08 2117.22,1211.08 2117.8,1211.08 2118.39,1211.08 2118.97,1211.08 2119.56,1211.08 2120.15,1211.08 2120.73,1211.08 2121.32,1211.08 2121.91,1211.08 2122.49,1211.08 2123.08,1211.08 2123.67,1211.08 2124.25,1211.08 2124.84,1211.08 2125.42,1211.08 2126.01,1211.08 2126.6,1211.08 2127.18,1211.08 2127.77,1211.08 2128.36,1211.08 2128.94,1211.08 2129.53,1211.08 2130.12,1211.08 2130.7,1211.08 2131.29,1211.08 2131.88,1211.08 2132.46,1211.08 2133.05,1211.08 2133.63,1211.08 2134.22,1211.08 2134.81,1211.08 2135.39,1211.08 2135.98,1211.08 2136.57,1211.08 2137.15,1211.08 2137.74,1211.08 2138.33,1211.08 2138.91,1211.08 2139.5,1211.08 2140.09,1211.08 2140.67,1211.08 2141.26,1211.08 2141.84,1211.08 2142.43,1211.08 2143.02,1211.08 2143.6,1211.08 2144.19,1211.08 2144.78,1211.08 2145.36,1211.08 2145.95,1211.08 2146.54,1211.08 2147.12,1211.08 2147.71,1211.08 2148.3,1211.08 2148.88,1211.08 2149.47,1211.08 2150.05,1211.08 2150.64,1211.08 2151.23,1211.08 2151.81,1211.08 2152.4,1211.08 2152.99,1211.08 2153.57,1211.08 2154.16,1211.08 2154.75,1211.08 2155.33,1211.08 2155.92,1211.08 2156.5,1211.08 2157.09,1211.08 2157.68,1211.08 2158.26,1211.08 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.12,1193.18 1399.64,899.083 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.43 985.439,1193.18 2158.26,1193.18 2158.26,1228.43 985.439,1228.43 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip143\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip143)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3872.82 163.232,-4956.16 163.792,-5966.4 164.351,-6840.1 164.91,-7685.39 165.469,-8431.62 166.029,-9128.78 166.588,-8673.74 167.147,-9293.22 167.706,-9850.69 168.266,-10330 168.825,-9931.66 169.384,-10364.6 169.943,-10022 170.503,-10390.5 171.062,-10714.6 171.621,-10987.2 172.18,-11231.4 172.74,-11439.3 173.299,-11604.1 173.858,-11273.4 174.417,-11413.9 174.977,-11520.3 175.536,-11213 176.095,-11284.7 176.655,-11333 177.214,-11353.5 177.773,-11356 178.332,-11336.7 178.892,-11304.6 179.451,-11006.5 180.01,-10945.4 180.569,-10863 181.129,-10354.4 181.688,-10101.2 182.247,-10045.5 182.806,-9627.88 183.366,-9369.47 183.925,-9266.19 184.484,-9158.43 185.043,-8910.89 185.603,-8666.71 186.162,-8535.95 186.721,-8293.97 187.28,-8055.25 187.84,-7825.16 188.399,-7693.88 188.958,-7275.53 189.517,-7149.24 190.077,-6764.72 190.636,-6643.11 191.195,-6284.95 191.754,-6026.22 192.314,-5844.36 192.873,-5737.78 193.432,-5565.36 193.991,-5462.31 194.551,-5354.61 195.11,-5185.41 195.669,-5079.45 196.228,-4859.88 196.788,-4595.64 197.347,-4396.85 197.906,-4207.71 198.465,-4070.33 199.025,-3942.75 199.584,-3815.61 200.143,-3647.61 200.702,-3442.86 201.262,-3204.4 201.821,-3101.8 202.38,-2957.37 202.939,-2826.28 203.499,-2733.52 204.058,-2638.81 204.617,-2545.43 205.176,-2347.28 205.736,-2223.69 206.295,-2066.19 206.854,-1983.03 207.413,-1902.35 207.973,-1755.62 208.532,-1674.16 209.091,-1629.82 209.65,-1526.68 210.21,-1428.54 210.769,-1359.58 211.328,-1295.91 211.887,-1231.82 212.447,-1110.91 213.006,-1050.07 213.565,-1014.96 214.124,-922.824 214.684,-885.885 215.243,-797.936 215.802,-735.01 216.361,-676.914 216.921,-597.126 217.48,-565.514 218.039,-493.713 218.598,-420.713 219.158,-296.825 219.717,-202.995 220.276,-163.702 220.835,-172.327 221.395,-150.753 221.954,-64.8781 222.513,19.4318 223.072,11.012 223.632,46.8809 224.191,60.0099 224.75,75.5137 225.309,114.705 225.869,132.53 226.428,171.146 226.987,183.361 227.546,158.864 228.106,216.513 228.665,230.22 229.224,244.493 229.783,303.358 230.343,336.817 230.902,369.855 231.461,383.186 232.02,414.273 232.58,407.238 233.139,422.613 233.698,434.785 234.257,424.125 234.817,459.125 235.376,474.473 235.935,525.733 236.494,553.928 237.054,585.985 237.613,615 238.172,658.79 238.731,666.23 239.291,689.885 239.85,678.445 240.409,683.106 240.968,726.445 241.528,751.378 242.087,807.715 242.646,790.527 243.205,756.847 243.765,765.448 244.324,823.484 244.883,842.706 245.442,829.296 246.002,885.586 246.561,938.209 247.12,950.143 247.679,943.753 248.239,938.343 248.798,954.231 249.357,968.292 249.916,998.472 250.476,1010.17 251.035,1039.54 251.594,1013.25 252.153,987.823 252.713,985.886 253.272,962.143 253.831,975.417 254.39,1039.67 254.95,1046.35 255.509,1025.05 256.068,1070.46 256.627,1113.99 257.187,1121.27 257.746,1091.17 258.305,1115.14 258.864,1105 259.424,1109.27 259.983,1098.01 260.542,1106.94 261.101,1095.99 261.661,1090.41 262.22,1082.6 262.779,1041.65 263.338,1070.04 263.898,1095.4 264.457,1086.04 265.016,1062.93 265.575,1121.61 266.135,1092.25 266.694,1086.34 267.253,1113.25 267.812,1121.86 268.372,1095.3 268.931,1088.35 269.49,1096.82 270.049,1106.26 270.609,1134.03 271.168,1140.47 271.727,1164.06 272.286,1172.77 272.846,1144.76 273.405,1134.23 273.964,1122.18 274.523,1112.99 275.083,1154.22 275.642,1160.19 276.201,1166.01 276.76,1171.87 277.32,1173.08 277.879,1161.62 278.438,1149.52 278.997,1136.05 279.557,1125.29 280.116,1115.44 280.675,1102.87 281.234,1116.35 281.794,1094.26 282.353,1133.14 282.912,1156.91 283.471,1161.54 284.031,1162.47 284.59,1149.78 285.149,1118.67 285.708,1074.25 286.268,1064.86 286.827,1039.72 287.386,1050.21 287.945,1045.97 288.505,1039.48 289.064,1047.98 289.623,1040.89 290.182,1050.94 290.742,1042.93 291.301,1003.46 291.86,1015.2 292.419,1009.92 292.979,1005.67 293.538,1068.55 294.097,1095.42 294.656,1123.52 295.216,1146.52 295.775,1118.39 296.334,1088.85 296.893,1064.53 297.453,1071.91 298.012,1048.25 298.571,1041.07 299.13,1035.33 299.69,1057.84 300.249,1068.89 300.808,1046.22 301.368,1070.91 301.927,1046.53 302.486,1020.71 303.045,1079.93 303.605,1072.5 304.164,1034.98 304.723,1028.28 305.282,1019.12 305.842,1045.55 306.401,1086.84 306.96,1106.74 307.519,1128.94 308.079,1116.5 308.638,1120.73 309.197,1090.06 309.756,1093.07 310.316,1067.34 310.875,1075.09 311.434,1062.81 311.993,1053.16 312.553,1073.47 313.112,1082.33 313.671,1056.66 314.23,1078.84 314.79,1071.34 315.349,1077.79 315.908,1018.23 316.467,995.48 317.027,992.133 317.586,1008.88 318.145,1007.07 318.704,1012.56 319.264,989.192 319.823,1021.75 320.382,1047.03 320.941,1083.83 321.501,1073.4 322.06,1080.14 322.619,1102.35 323.178,1055.72 323.738,1034.51 324.297,992.038 324.856,967.657 325.415,945.2 325.975,992.12 326.534,985.496 327.093,982.6 327.652,977.696 328.212,954.871 328.771,934.32 329.33,933.262 329.889,930.634 330.449,943.903 331.008,921.01 331.567,918.553 332.126,915.552 332.686,913.397 333.245,927.711 333.804,976.085 334.363,987.006 334.923,983.914 335.482,994.699 336.041,985.389 336.6,964.313 337.16,974.738 337.719,954.458 338.278,950.483 338.837,963.33 339.397,973.407 339.956,1000.44 340.515,1008.99 341.074,983.787 341.634,991.215 342.193,981.078 342.752,939.338 343.311,930.381 343.871,923.854 344.43,971.956 344.989,967.142 345.548,927.827 346.108,906.105 346.667,914.829 347.226,927.271 347.785,922.248 348.345,900.773 348.904,917.727 349.463,912.722 350.022,891.895 350.582,871.207 351.141,837.758 351.7,824.481 352.259,827.048 352.819,860.757 353.378,873.874 353.937,871.445 354.496,920.423 355.056,912.011 355.615,908.117 356.174,902.554 356.733,864.323 357.293,850.477 357.852,865.195 358.411,843.537 358.97,845.04 359.53,860.848 360.089,825.871 360.648,808.989 361.207,827.044 361.767,807.777 362.326,823.929 362.885,840.634 363.444,824.979 364.004,807.527 364.563,824.192 365.122,810.28 365.681,829.056 366.241,826.077 366.8,808.215 367.359,810.816 367.918,826.928 368.478,841.284 369.037,857.792 369.596,854.995 370.155,869.567 370.715,884.59 371.274,878.927 371.833,829.475 372.392,907.73 372.952,919.502 373.511,896.154 374.07,876.068 374.629,874.258 375.189,902.983 375.748,898.132 376.307,893.038 376.866,856.129 377.426,870.993 377.985,886.483 378.544,896.51 379.103,893.813 379.663,869.525 380.222,879.475 380.781,841.799 381.34,855.37 381.9,867.534 382.459,878.746 383.018,892.359 383.577,886.133 384.137,879.534 384.696,876.286 385.255,906.134 385.814,901.548 386.374,930.134 386.933,895.695 387.492,904.208 388.051,933.281 388.611,909.307 389.17,871.648 389.729,866.65 390.288,829.817 390.848,793.818 391.407,777.791 391.966,782.067 392.525,815.1 393.085,814.626 393.644,794.937 394.203,779.897 394.762,761.5 395.322,712.315 395.881,734.894 396.44,720.652 396.999,743.278 397.559,728.401 398.118,734.782 398.677,753.529 399.236,772.786 399.796,778.273 400.355,778.188 400.914,763.611 401.473,747.887 402.033,717.411 402.592,717.631 403.151,738.33 403.71,742.257 404.27,727.456 404.829,713.244 405.388,730.876 405.947,754.716 406.507,774.463 407.066,759.856 407.625,761.548 408.184,763.518 408.744,732.677 409.303,719.984 409.862,735.214 410.421,741.356 410.981,728.661 411.54,733.086 412.099,703.396 412.658,686.897 413.218,705.622 413.777,788.153 414.336,786.532 414.895,801.712 415.455,803.09 416.014,813.497 416.573,845.265 417.132,810.985 417.692,811.319 418.251,825.554 418.81,790.506 419.369,822.032 419.929,839.091 420.488,869.765 421.047,830.63 421.606,797.993 422.166,766.63 422.725,767.041 423.284,816.012 423.843,798.965 424.403,810.436 424.962,741.972 425.521,743.005 426.08,758.597 426.64,778.377 427.199,779.783 427.758,826.413 428.318,854.472 428.877,865.183 429.436,859.613 429.995,837.834 430.555,817.988 431.114,816.229 431.673,815.033 432.232,813.898 432.792,811.196 433.351,806.847 433.91,807.072 434.469,804.022 435.029,816.481 435.588,860.649 436.147,855.932 436.706,865.673 437.266,893.346 437.825,905.427 438.384,929.531 438.943,920.399 439.503,926.984 440.062,950.717 440.621,929.457 441.18,884.422 441.74,878.065 442.299,871.48 442.858,862.953 443.417,873.835 443.977,884.085 444.536,862.05 445.095,852.586 445.654,832.084 446.214,858.63 446.773,836.716 447.332,847.145 447.891,838.064 448.451,817.358 449.01,797.43 449.569,779.297 450.128,811.742 450.688,790.397 451.247,772.349 451.806,770.764 452.365,750.347 452.925,737.878 453.484,739.542 454.043,769.045 454.602,800.411 455.162,763.67 455.721,746.649 456.28,764.195 456.839,766.311 457.399,764.673 457.958,763.021 458.517,762.152 459.076,775.47 459.636,773.342 460.195,769.633 460.754,770.24 461.313,770.241 461.873,769.827 462.432,770.841 462.991,803.7 463.55,737.651 464.11,722.038 464.669,709.05 465.228,676.681 465.787,679.176 466.347,729.051 466.906,726.459 467.465,761.106 468.024,792.597 468.584,805.974 469.143,820.689 469.702,799.595 470.261,811.374 470.821,821.609 471.38,801.166 471.939,814.102 472.498,789.6 473.058,790.185 473.617,774.028 474.176,757.437 474.735,742.275 475.295,712.082 475.854,716.01 476.413,750.774 476.972,748.582 477.532,750.034 478.091,731.478 478.65,698.704 479.209,701.58 479.769,735.216 480.328,721.635 480.887,738.787 481.446,740.32 482.006,740.012 482.565,738.214 483.124,752.815 483.683,752.614 484.243,767.073 484.802,779.451 485.361,809.629 485.92,789.574 486.48,787.859 487.039,787.217 487.598,782.223 488.157,762.96 488.717,744.776 489.276,714.4 489.835,684.288 490.394,681.822 490.954,699.67 491.513,698.266 492.072,679.637 492.631,695.202 493.191,724.087 493.75,724.203 494.309,740.12 494.868,753.485 495.428,770.075 495.987,752.805 496.546,752.557 497.105,719.612 497.665,716.47 498.224,700.455 498.783,705.142 499.342,672.493 499.902,676.645 500.461,728.341 501.02,730.047 501.579,729.493 502.139,724.799 502.698,694.275 503.257,698.136 503.816,699.291 504.376,700.169 504.935,752.797 505.494,768.801 506.053,782.783 506.613,761.777 507.172,789.271 507.731,769.572 508.29,765.778 508.85,746.512 509.409,779.185 509.968,779.91 510.527,777.461 511.087,773.072 511.646,788.964 512.205,817.16 512.764,821.54 513.324,833.299 513.883,798.058 514.442,760.055 515.001,743.598 515.561,724.721 516.12,724.808 516.679,709.345 517.238,708.679 517.798,694.583 518.357,727.642 518.916,742.217 519.475,727.685 520.035,696.216 520.594,680.134 521.153,685.566 521.712,674.274 522.272,645.593 522.831,651.679 523.39,670.53 523.949,704.407 524.509,706.396 525.068,687.395 525.627,705.372 526.186,710.743 526.746,741.623 527.305,775.158 527.864,754.552 528.423,749.356 528.983,764.019 529.542,744.478 530.101,745.132 530.66,759.844 531.22,705.364 531.779,722.806 532.338,707.896 532.897,771.541 533.457,769.838 534.016,719.853 534.575,717.271 535.134,730.455 535.694,729.223 536.253,729.622 536.812,734.064 537.371,763.056 537.931,732.383 538.49,736.682 539.049,697.9 539.608,682.805 540.168,668.856 540.727,687.221 541.286,692.507 541.845,724.427 542.405,741.027 542.964,773.178 543.523,753.712 544.082,785.467 544.642,817.452 545.201,828.754 545.76,839.179 546.319,833.046 546.879,823.377 547.438,799.018 547.997,793.859 548.556,774.907 549.116,788.518 549.675,772.826 550.234,754.922 550.793,752.491 551.353,750.19 551.912,745.796 552.471,741.492 553.031,757.464 553.59,755.24 554.149,785.684 554.708,782.751 555.268,745.958 555.827,740.931 556.386,705.895 556.945,716.811 557.505,714.801 558.064,680.53 558.623,699.757 559.182,684.145 559.742,668.162 560.301,673.156 560.86,673.091 561.419,670.158 561.979,689.831 562.538,692.02 563.097,707.9 563.656,707.479 564.216,722.953 564.775,737.743 565.334,767.033 565.893,763.513 566.453,719.332 567.012,752.685 567.571,770.318 568.13,751.747 568.69,764.703 569.249,778.853 569.808,805.359 570.367,820.703 570.927,754.734 571.486,753.619 572.045,767.396 572.604,765.997 573.164,748.093 573.723,746.326 574.282,744.702 574.841,760.441 575.401,740.525 575.96,770.689 576.519,751.838 577.078,735.244 577.638,735.163 578.197,748.474 578.756,732.076 579.315,713.626 579.875,695.85 580.434,694.32 580.993,692.205 581.552,677.344 582.112,678.07 582.671,696.556 583.23,665.829 583.789,651.749 584.349,668.754 584.908,687.737 585.467,689.011 586.026,709.666 586.586,711.553 587.145,710.67 587.704,711.02 588.263,707.871 588.823,712.313 589.382,726.475 589.941,742.244 590.5,790.93 591.06,821.148 591.619,815.487 592.178,793.381 592.737,790.737 593.297,800.926 593.856,816.286 594.415,791.375 594.974,770.643 595.534,751.053 596.093,750.478 596.652,732.375 597.211,746.862 597.771,745.299 598.33,759.65 598.889,756.806 599.448,772.352 600.008,785.178 600.567,749.121 601.126,718.021 601.685,717.929 602.245,733.684 602.804,731.831 603.363,713.975 603.922,746.117 604.482,710.913 605.041,727.436 605.6,691.837 606.159,758.51 606.719,754.106 607.278,701.297 607.837,701.09 608.396,703.052 608.956,706.373 609.515,705.762 610.074,706.627 610.633,721.342 611.193,705.652 611.752,692.967 612.311,708.45 612.87,692.052 613.43,691.574 613.989,709.295 614.548,724.177 615.107,676.246 615.667,678.173 616.226,694.834 616.785,696.372 617.344,727.124 617.904,741.921 618.463,707.335 619.022,727.605 619.581,680.316 620.141,617.702 620.7,652.06 621.259,667.643 621.818,670.216 622.378,640.51 622.937,658.27 623.496,673.489 624.055,659.336 624.615,659.404 625.174,633.153 625.733,639.7 626.292,645.156 626.852,662.42 627.411,634.136 627.97,641.465 628.529,612.757 629.089,617.599 629.648,623.266 630.207,691.922 630.766,693.831 631.326,694.66 631.885,724.509 632.444,723.951 633.003,692.672 633.563,695.22 634.122,709.636 634.681,727.982 635.24,708.08 635.8,659.531 636.359,662.72 636.918,665.488 637.477,634.83 638.037,669.663 638.596,686.186 639.155,671.068 639.714,672.117 640.274,706.938 640.833,705.007 641.392,704.792 641.951,706.781 642.511,723.474 643.07,721.773 643.629,724.122 644.188,688.359 644.748,686.973 645.307,701.087 645.866,701.105 646.425,701.233 646.985,686.259 647.544,655.117 648.103,655.936 648.662,673.765 649.222,644.131 649.781,647.76 650.34,633.736 650.899,636.971 651.459,623.709 652.018,609.045 652.577,628.845 653.136,602.315 653.696,627.488 654.255,613.201 654.814,636.442 655.373,666.776 655.933,685.535 656.492,688.346 657.051,675.195 657.61,713.249 658.17,731.938 658.729,716.505 659.288,714.06 659.847,730.114 660.407,713.376 660.966,760.667 661.525,759.147 662.084,786.644 662.644,796.406 663.203,771.236 663.762,785.189 664.321,799.55 664.881,794.579 665.44,774.123 665.999,738.19 666.558,685.114 667.118,653.657 667.677,621.239 668.236,625.155 668.795,596.367 669.355,614.678 669.914,637.169 670.473,624.983 671.032,645.191 671.592,664.403 672.151,646.923 672.71,650.393 673.269,699.939 673.829,700.161 674.388,717.99 674.947,733.665 675.506,715.868 676.066,714.46 676.625,697.264 677.184,732.506 677.743,729.295 678.303,729.031 678.862,744.803 679.421,770.892 679.981,754.121 680.54,784.721 681.099,767.21 681.658,731.839 682.218,731.253 682.777,714.824 683.336,716.868 683.895,711.927 684.455,725.741 685.014,741.399 685.573,725.813 686.132,723.298 686.692,722.11 687.251,704.02 687.81,690.6 688.369,707.898 688.929,720.944 689.488,704.785 690.047,690.38 690.606,673.531 691.166,690.73 691.725,690.95 692.284,697.217 692.843,711.539 693.403,715.207 693.962,714.97 694.521,746.552 695.08,762.685 695.64,775.291 696.199,756.132 696.758,751.206 697.317,797.89 697.877,794.815 698.436,807.421 698.995,771.817 699.554,767.561 700.114,765.14 700.673,743.611 701.232,724.202 701.791,688.252 702.351,674.927 702.91,674.377 703.469,676.652 704.028,676.058 704.588,692.305 705.147,672.76 705.706,689.421 706.265,689.628 706.825,657.85 707.384,662.168 707.943,696.619 708.502,679.323 709.062,664.587 709.621,685.323 710.18,704.094 710.739,701.508 711.299,684.996 711.858,699.887 712.417,702.276 712.976,700.427 713.536,682.882 714.095,667.698 714.654,701.008 715.213,683.577 715.773,668.284 716.332,651.467 716.891,700.795 717.45,702.706 718.01,705.939 718.569,688.579 719.128,704.724 719.687,733.648 720.247,749.435 720.806,746 721.365,727.902 721.924,723.628 722.484,723.648 723.043,740.357 723.602,736.06 724.161,749.32 724.721,729.46 725.28,730.021 725.839,726.628 726.398,726.612 726.958,703.809 727.517,705.268 728.076,693.334 728.635,659.071 729.195,644.941 729.754,629.809 730.313,665.756 730.872,680.484 731.432,695.5 731.991,692.735 732.55,670.932 733.109,641.414 733.669,693.222 734.228,677.171 734.787,696.692 735.346,682.487 735.906,700.98 736.465,729.854 737.024,707.582 737.583,702.285 738.143,686.854 738.702,703.935 739.261,669 739.82,669.233 740.38,637.058 740.939,672.058 741.498,688.716 742.057,686.849 742.617,687.192 743.176,689.179 743.735,704.361 744.294,735.113 744.854,765.862 745.413,743.151 745.972,724.988 746.531,755.166 747.091,735.853 747.65,782.423 748.209,764.378 748.768,777.862 749.328,785.006 749.887,794.492 750.446,738.643 751.005,751.73 751.565,748.856 752.124,735.162 752.683,718.652 753.242,717.217 753.802,696.575 754.361,709.746 754.92,722.175 755.479,704.649 756.039,704.157 756.598,689.175 757.157,707.356 757.716,671.521 758.276,705.629 758.835,702.763 759.394,685.805 759.953,700.124 760.513,701.532 761.072,703.548 761.631,687.85 762.19,639.227 762.75,644.414 763.309,635.557 763.868,639.456 764.427,660.709 764.987,650.24 765.546,652.305 766.105,656.341 766.664,657.542 767.224,660.476 767.783,644.625 768.342,648.111 768.901,652.229 769.461,651.837 770.02,651.062 770.579,671.053 771.138,654.244 771.698,689.899 772.257,691.179 772.816,706.071 773.375,689.514 773.935,685.435 774.494,685.248 775.053,672.22 775.612,702.704 776.172,684.484 776.731,714.382 777.29,714.882 777.849,684.67 778.409,732.893 778.968,748.086 779.527,749.31 780.086,796.852 780.646,790.463 781.205,753.668 781.764,733.066 782.323,714.087 782.883,696.589 783.442,680.802 784.001,682.411 784.56,667.001 785.12,701.334 785.679,702.252 786.238,669.092 786.797,655.885 787.357,663.569 787.916,680.589 788.475,697.721 789.034,681.433 789.594,682.781 790.153,682.853 790.712,687.433 791.271,686.565 791.831,702.588 792.39,719.735 792.949,670.447 793.508,687.287 794.068,688.844 794.627,655.167 795.186,626.847 795.745,532.077 796.305,576.126 796.864,600.591 797.423,604.213 797.982,589.605 798.542,632.897 799.101,683.002 799.66,682.135 800.219,650.487 800.779,655.789 801.338,694.149 801.897,713.056 802.456,748.567 803.016,682.1 803.575,680.747 804.134,696.947 804.693,665.577 805.253,649.274 805.812,664.852 806.371,636.424 806.931,642.389 807.49,632.379 808.049,635.834 808.608,602.517 809.168,607.101 809.727,613.734 810.286,666.005 810.845,685.216 811.405,669.453 811.964,667.886 812.523,639.707 813.082,629.048 813.642,632.835 814.201,654.411 814.76,653.694 815.319,640.523 815.879,628.102 816.438,667.266 816.997,670.312 817.556,691.549 818.116,723.649 818.675,720.29 819.234,732.819 819.793,714.447 820.353,712.577 820.912,746.593 821.471,807.149 822.03,799.675 822.59,762.236 823.149,761.175 823.708,757.254 824.267,752.174 824.827,747.436 825.386,730.67 825.945,745.73 826.504,745.019 827.064,773.16 827.623,766.989 828.182,780.851 828.741,822.554 829.301,860.283 829.86,882.332 830.419,808.312 830.978,803.769 831.538,796.023 832.097,788.976 832.656,783.099 833.215,793.546 833.775,819.89 834.334,824.901 834.893,818.191 835.452,748.988 836.012,712.946 836.571,725.063 837.13,692.939 837.689,678.686 838.249,662.473 838.808,659.449 839.367,628.772 839.926,646.004 840.486,662.367 841.045,646.06 841.604,644.046 842.163,646.767 842.723,617.237 843.282,605.163 843.841,608.408 844.4,612.2 844.96,645.35 845.519,632.788 846.078,634.699 846.637,652.587 847.197,670.189 847.756,655.7 848.315,676.287 848.874,681.198 849.434,663.753 849.993,636.809 850.552,656.2 851.111,657.852 851.671,673.477 852.23,689.96 852.789,724.054 853.348,740.048 853.908,739.169 854.467,683.539 855.026,667.337 855.585,664.264 856.145,652.248 856.704,656.232 857.263,657.066 857.822,657.433 858.382,674.431 858.941,657.652 859.5,638.679 860.059,660.842 860.619,694.99 861.178,680.428 861.737,727.845 862.296,742.287 862.856,723.397 863.415,707.705 863.974,677.959 864.533,724.375 865.093,750.902 865.652,747.16 866.211,746.148 866.77,744.341 867.33,739.98 867.889,734.746 868.448,733.427 869.007,729.992 869.567,745.2 870.126,754.711 870.685,767.442 871.244,761.832 871.804,710.238 872.363,708.612 872.922,687.549 873.481,691.71 874.041,708.047 874.6,675.739 875.159,723.589 875.718,701.505 876.278,731.321 876.837,730.263 877.396,726.65 877.955,708.248 878.515,725.192 879.074,691.555 879.633,723.729 880.192,721.688 880.752,737.137 881.311,733.448 881.87,746.798 882.429,758.007 882.989,740.512 883.548,719.924 884.107,654.799 884.666,644.993 885.226,647.03 885.785,661.857 886.344,665.145 886.903,650.359 887.463,652.429 888.022,634.509 888.581,619.674 889.14,639.03 889.7,608.876 890.259,629.463 890.818,631.206 891.377,619.924 891.937,609.794 892.496,613.412 893.055,647.634 893.614,650.023 894.174,666.243 894.733,681.678 895.292,683.392 895.851,683.236 896.411,667.365 896.97,686.182 897.529,688.988 898.088,722.032 898.648,734.776 899.207,732.787 899.766,700.118 900.325,685.216 900.885,684.917 901.444,682.5 902.003,682.208 902.562,685.282 903.122,718.685 903.681,734.093 904.24,682.671 904.799,647.411 905.359,664.077 905.918,680.826 906.477,664.844 907.036,700.793 907.596,699.912 908.155,717.474 908.714,714.942 909.273,729.359 909.833,709.586 910.392,706.996 910.951,724.143 911.51,706.998 912.07,675.136 912.629,710.153 913.188,712.037 913.747,676.556 914.307,646.38 914.866,651.103 915.425,638.461 915.984,639.16 916.544,655.287 917.103,660.104 917.662,725.633 918.221,722.937 918.781,721.828 919.34,689.045 919.899,675.917 920.458,693.886 921.018,726.503 921.577,690.143 922.136,726.034 922.695,709.413 923.255,695.048 923.814,695.324 924.373,710.37 924.932,707.345 925.492,673.845 926.051,639.243 926.61,628.704 927.169,629.577 927.729,631.506 928.288,650.714 928.847,681.956 929.406,684.882 929.966,668.405 930.525,669.352 931.084,688.203 931.644,672.827 932.203,674.362 932.762,658.1 933.321,659.421 933.881,675.368 934.44,658.029 934.999,661.228 935.558,664.059 936.118,679.174 936.677,680.559 937.236,648.579 937.795,680.205 938.355,612.976 938.914,598.121 939.473,600.71 940.032,586.588 940.592,574.848 941.151,583.727 941.71,620.224 942.269,609.245 942.829,630.382 943.388,615.102 943.947,650.566 944.506,652.826 945.066,654.029 945.625,672.914 946.184,636.448 946.743,657.001 947.303,659.81 947.862,647.712 948.421,716.133 948.98,713.677 949.54,716.082 950.099,685.746 950.658,686.092 951.217,699.931 951.777,713.962 952.336,696.114 952.895,694.308 953.454,725.347 954.014,741.684 954.573,756.678 955.132,739.167 955.691,714.671 956.251,698.934 956.81,701.156 957.369,719.491 957.928,686.348 958.488,690.21 959.047,692.613 959.606,693.037 960.165,695.21 960.725,679.214 961.284,681.237 961.843,693.875 962.402,695.502 962.962,696.07 963.521,695.957 964.08,666.422 964.639,667.962 965.199,667.392 965.758,637.624 966.317,656.425 966.876,641.625 967.436,660.626 967.995,660.659 968.554,664.117 969.113,695.103 969.673,699.171 970.232,684.595 970.791,684.797 971.35,699.557 971.91,696.989 972.469,678.495 973.028,678.931 973.587,711.098 974.147,741.916 974.706,773.843 975.265,737.181 975.824,750.937 976.384,750.522 976.943,745.987 977.502,776.567 978.061,771.843 978.621,769.287 979.18,764.073 979.739,696.088 980.298,710.306 980.858,690.876 981.417,704.717 981.976,719.952 982.535,734.483 983.095,715.084 983.654,728.48 984.213,757.659 984.772,734.685 985.332,734.391 985.891,763.128 986.45,774.625 987.009,791.552 987.569,784.004 988.128,778.629 988.687,820.601 989.246,764.381 989.806,776.314 990.365,753.931 990.924,766.425 991.483,743.43 992.043,755.008 992.602,750.532 993.161,745.248 993.72,788.479 994.28,815.535 994.839,792.873 995.398,807.654 995.957,786.543 996.517,812.507 997.076,791.488 997.635,769.258 998.194,795.426 998.754,807.794 999.313,798.467 999.872,773.277 1000.43,768.505 1000.99,732.477 1001.55,709.182 1002.11,687.897 1002.67,707.132 1003.23,720.896 1003.79,702.664 1004.35,655.199 1004.91,638.428 1005.46,642.535 1006.02,628.72 1006.58,663.029 1007.14,650.879 1007.7,619.057 1008.26,620.972 1008.82,624.186 1009.38,626.882 1009.94,614.272 1010.5,616.09 1011.06,623.114 1011.62,642.495 1012.18,661.381 1012.73,677.461 1013.29,660.157 1013.85,660.962 1014.41,693.331 1014.97,693.524 1015.53,738.781 1016.09,706.793 1016.65,690.956 1017.21,721.828 1017.77,672.055 1018.33,656.427 1018.89,641.978 1019.45,643.846 1020.01,667.187 1020.56,649.4 1021.12,651.299 1021.68,604.326 1022.24,593.521 1022.8,596.843 1023.36,597.848 1023.92,583.203 1024.48,601.287 1025.04,622.57 1025.6,627.192 1026.16,616.425 1026.72,605.063 1027.28,588.438 1027.83,578.967 1028.39,600.037 1028.95,588.641 1029.51,560.237 1030.07,601.144 1030.63,623.479 1031.19,630.372 1031.75,630.4 1032.31,597.338 1032.87,616.034 1033.43,587.358 1033.99,607.105 1034.55,579.899 1035.1,571.338 1035.66,577.724 1036.22,600.2 1036.78,601.084 1037.34,555.17 1037.9,545.564 1038.46,556.605 1039.02,562.407 1039.58,551.109 1040.14,575.134 1040.7,582.042 1041.26,573.425 1041.82,595.668 1042.38,598.405 1042.93,574.585 1043.49,612.149 1044.05,615.582 1044.61,618.695 1045.17,605.612 1045.73,658.376 1046.29,707.819 1046.85,721.44 1047.41,736.536 1047.97,735.143 1048.53,699.314 1049.09,714.217 1049.65,725.807 1050.2,741.606 1050.76,755.928 1051.32,768.834 1051.88,720.509 1052.44,683.047 1053,669.312 1053.56,685.513 1054.12,686.755 1054.68,686.636 1055.24,718.096 1055.8,728.217 1056.36,761.028 1056.92,738.77 1057.48,735.368 1058.03,730.391 1058.59,710.971 1059.15,709.775 1059.71,708.871 1060.27,692.313 1060.83,690.565 1061.39,689.056 1061.95,687.019 1062.51,702.767 1063.07,699.55 1063.63,700.799 1064.19,696.883 1064.75,725.796 1065.3,751.951 1065.86,731.438 1066.42,743.686 1066.98,754.719 1067.54,752.684 1068.1,750.761 1068.66,728.546 1069.22,726.86 1069.78,724.818 1070.34,704.515 1070.9,703.233 1071.46,672.484 1072.02,686.237 1072.57,717.379 1073.13,717.157 1073.69,697.427 1074.25,683.046 1074.81,686.468 1075.37,655.29 1075.93,688.731 1076.49,690.977 1077.05,703.294 1077.61,688.223 1078.17,671.979 1078.73,720.287 1079.29,736.693 1079.85,717.972 1080.4,719.642 1080.96,701.625 1081.52,720.232 1082.08,705.482 1082.64,718.625 1083.2,703.518 1083.76,699.539 1084.32,696.011 1084.88,696.476 1085.44,728.003 1086,708.929 1086.56,688.943 1087.12,684.476 1087.67,666.438 1088.23,680.628 1088.79,680.275 1089.35,697.396 1089.91,732.019 1090.47,697.974 1091.03,681.724 1091.59,713.549 1092.15,697.274 1092.71,681.833 1093.27,670.039 1093.83,656.473 1094.39,689.796 1094.94,690.491 1095.5,720.888 1096.06,672.335 1096.62,656.307 1097.18,691.46 1097.74,709.48 1098.3,707.126 1098.86,709.754 1099.42,675.159 1099.98,675.514 1100.54,690.987 1101.1,674.42 1101.66,706.473 1102.22,689.032 1102.77,721.252 1103.33,735.067 1103.89,703.476 1104.45,700.419 1105.01,680.545 1105.57,697.303 1106.13,699.226 1106.69,716.018 1107.25,716.354 1107.81,680.245 1108.37,677.52 1108.93,676.303 1109.49,708.652 1110.04,676.644 1110.6,684.266 1111.16,682.859 1111.72,669.054 1112.28,702.594 1112.84,685.072 1113.4,664.258 1113.96,663.233 1114.52,630.866 1115.08,696.762 1115.64,691.965 1116.2,661.503 1116.76,660.115 1117.31,679.032 1117.87,681.772 1118.43,667.185 1118.99,684.47 1119.55,666.545 1120.11,681.772 1120.67,679.805 1121.23,633.894 1121.79,652.247 1122.35,657.232 1122.91,675.311 1123.47,692.823 1124.03,691.69 1124.59,661.407 1125.14,643.794 1125.7,613.99 1126.26,632.56 1126.82,620.471 1127.38,625.148 1127.94,616.88 1128.5,618.167 1129.06,602.231 1129.62,621.234 1130.18,626.601 1130.74,631.708 1131.3,603.757 1131.86,624.664 1132.41,663.444 1132.97,712.272 1133.53,716.575 1134.09,666.498 1134.65,668.46 1135.21,669.149 1135.77,684.306 1136.33,720.387 1136.89,733.78 1137.45,697.458 1138.01,741.813 1138.57,722.311 1139.13,718.364 1139.68,719.802 1140.24,717.877 1140.8,716.274 1141.36,745.13 1141.92,725.638 1142.48,706.224 1143.04,689.921 1143.6,641.226 1144.16,611.783 1144.72,650.554 1145.28,666.782 1145.84,655.065 1146.4,689.82 1146.96,705.784 1147.51,685.457 1148.07,670.95 1148.63,671.506 1149.19,657.8 1149.75,624.743 1150.31,625.367 1150.87,629.783 1151.43,648.401 1151.99,664.944 1152.55,651.322 1153.11,635.413 1153.67,637.829 1154.23,605.014 1154.78,593.574 1155.34,613.187 1155.9,603.996 1156.46,625.087 1157.02,612.415 1157.58,618.56 1158.14,624.985 1158.7,614.034 1159.26,615.465 1159.82,616.788 1160.38,573.176 1160.94,563.231 1161.5,585.274 1162.05,588.713 1162.61,545.947 1163.17,567.436 1163.73,571.714 1164.29,596.669 1164.85,636.852 1165.41,655.074 1165.97,659.324 1166.53,676.188 1167.09,692.962 1167.65,694.566 1168.21,711.166 1168.77,694.223 1169.33,695.688 1169.88,694.348 1170.44,694.495 1171,727.542 1171.56,722.968 1172.12,723.56 1172.68,724.058 1173.24,754.365 1173.8,736.482 1174.36,768.487 1174.92,775.705 1175.48,768.555 1176.04,727.912 1176.6,724.83 1177.15,708.509 1177.71,709.552 1178.27,693.37 1178.83,673.714 1179.39,641.695 1179.95,644.871 1180.51,631.178 1181.07,650.183 1181.63,618.605 1182.19,626.733 1182.75,660.802 1183.31,666.185 1183.87,649.81 1184.43,648.213 1184.98,661.765 1185.54,678.803 1186.1,661.615 1186.66,677.202 1187.22,678.737 1187.78,647.722 1188.34,636.122 1188.9,656.634 1189.46,656.633 1190.02,657.011 1190.58,675.458 1191.14,659.712 1191.7,662.151 1192.25,665.747 1192.81,667.194 1193.37,650.573 1193.93,685.818 1194.49,667.629 1195.05,700.427 1195.61,729.862 1196.17,729.052 1196.73,679.561 1197.29,682.972 1197.85,698.67 1198.41,695.755 1198.97,695.036 1199.52,711.676 1200.08,690.82 1200.64,659.572 1201.2,661.967 1201.76,662.582 1202.32,662.929 1202.88,682.137 1203.44,699.848 1204,685.015 1204.56,685.413 1205.12,701.473 1205.68,699.881 1206.24,695.574 1206.8,695.843 1207.35,712.333 1207.91,725.89 1208.47,740.609 1209.03,753.723 1209.59,750.651 1210.15,732.147 1210.71,682.817 1211.27,667.335 1211.83,683.586 1212.39,682.974 1212.95,682.619 1213.51,669.082 1214.07,687.708 1214.62,701.494 1215.18,750.615 1215.74,746.084 1216.3,774.355 1216.86,753.125 1217.42,733.162 1217.98,713.965 1218.54,681.706 1219.1,681.283 1219.66,682.78 1220.22,686.228 1220.78,701.843 1221.34,718.706 1221.89,702.852 1222.45,718.994 1223.01,696.734 1223.57,725.7 1224.13,723.232 1224.69,705.109 1225.25,691.802 1225.81,709.299 1226.37,722.02 1226.93,766.259 1227.49,746.451 1228.05,758.035 1228.61,754.761 1229.17,734.123 1229.72,765.095 1230.28,757.065 1230.84,735.55 1231.4,716.548 1231.96,733.533 1232.52,732.693 1233.08,733.261 1233.64,763.109 1234.2,761.187 1234.76,773.714 1235.32,754.451 1235.88,734.144 1236.44,745.296 1236.99,766.699 1237.55,765.036 1238.11,743.581 1238.67,726.756 1239.23,721.058 1239.79,720.425 1240.35,687.024 1240.91,733.303 1241.47,749.248 1242.03,744.416 1242.59,742.931 1243.15,776.158 1243.71,787.723 1244.26,767.49 1244.82,780.254 1245.38,824.002 1245.94,815.188 1246.5,822.119 1247.06,845.668 1247.62,851.385 1248.18,860.744 1248.74,848.045 1249.3,790.965 1249.86,765.95 1250.42,731.04 1250.98,680.954 1251.54,682.391 1252.09,698.301 1252.65,717.067 1253.21,698.738 1253.77,700.06 1254.33,681.149 1254.89,727.949 1255.45,707.959 1256.01,706.566 1256.57,689.745 1257.13,703.577 1257.69,701.183 1258.25,700.937 1258.81,700.703 1259.36,701.617 1259.92,667.662 1260.48,653.633 1261.04,656.23 1261.6,690.126 1262.16,654.015 1262.72,655.784 1263.28,622.942 1263.84,641.301 1264.4,645.008 1264.96,648.307 1265.52,667.554 1266.08,684.798 1266.63,665.609 1267.19,648.481 1267.75,648.705 1268.31,664.994 1268.87,699.58 1269.43,698.477 1269.99,700.671 1270.55,682.997 1271.11,681.136 1271.67,652.227 1272.23,704.259 1272.79,686.472 1273.35,639.899 1273.91,641.266 1274.46,626.498 1275.02,663.487 1275.58,697.56 1276.14,698.379 1276.7,688.388 1277.26,656.803 1277.82,660.278 1278.38,709.424 1278.94,696.61 1279.5,695.761 1280.06,715.385 1280.62,684.043 1281.18,669.559 1281.73,688.268 1282.29,688.947 1282.85,690.999 1283.41,674.893 1283.97,675.429 1284.53,659.303 1285.09,644.673 1285.65,630.925 1286.21,619.958 1286.77,636.168 1287.33,655.591 1287.89,626.764 1288.45,647.339 1289,648.273 1289.56,666.104 1290.12,667.858 1290.68,666.254 1291.24,670.45 1291.8,686.542 1292.36,686.655 1292.92,668.804 1293.48,638.883 1294.04,639.626 1294.6,608.519 1295.16,606.565 1295.72,640.425 1296.28,629.243 1296.83,614.217 1297.39,600.767 1297.95,603.004 1298.51,602.768 1299.07,606.06 1299.63,595.965 1300.19,619.758 1300.75,609.05 1301.31,611.453 1301.87,617.009 1302.43,632.671 1302.99,633.721 1303.55,621.645 1304.1,608.013 1304.66,625.356 1305.22,662.83 1305.78,665.91 1306.34,649.871 1306.9,635.097 1307.46,623.276 1308.02,626.228 1308.58,646.959 1309.14,648.583 1309.7,633.685 1310.26,634.291 1310.82,634.978 1311.38,668.758 1311.93,652.772 1312.49,634.94 1313.05,638.628 1313.61,641.283 1314.17,657.01 1314.73,673.389 1315.29,690.999 1315.85,673.681 1316.41,676.92 1316.97,612.646 1317.53,630.883 1318.09,631.578 1318.65,653.197 1319.2,622.694 1319.76,630.15 1320.32,645.487 1320.88,663.403 1321.44,647.65 1322,683.021 1322.56,684.265 1323.12,672.738 1323.68,706.39 1324.24,704.378 1324.8,718.231 1325.36,719.242 1325.92,732.105 1326.47,714.755 1327.03,744.867 1327.59,759.732 1328.15,741.227 1328.71,735.57 1329.27,731.456 1329.83,684.21 1330.39,700.59 1330.95,732.056 1331.51,728.245 1332.07,676.652 1332.63,691.585 1333.19,723.555 1333.75,706.599 1334.3,720.342 1334.86,736.138 1335.42,751.034 1335.98,730.512 1336.54,730.409 1337.1,700.909 1337.66,716.885 1338.22,714.603 1338.78,713.064 1339.34,729.957 1339.9,727.873 1340.46,708.507 1341.02,692.764 1341.57,691.971 1342.13,690.339 1342.69,689.155 1343.25,691.745 1343.81,693.081 1344.37,663.618 1344.93,648.723 1345.49,636.108 1346.05,606.006 1346.61,639.948 1347.17,643.564 1347.73,647.09 1348.29,664.377 1348.84,665.227 1349.4,667.807 1349.96,685.777 1350.52,702.016 1351.08,701.605 1351.64,684.493 1352.2,680.515 1352.76,679.452 1353.32,681.618 1353.88,680.531 1354.44,648.699 1355,647.968 1355.56,648.648 1356.12,647.775 1356.67,663.092 1357.23,662.537 1357.79,681.742 1358.35,680.899 1358.91,696.906 1359.47,678.621 1360.03,662.448 1360.59,646.62 1361.15,683.245 1361.71,684 1362.27,665.081 1362.83,697.805 1363.39,697.949 1363.94,664.337 1364.5,682.76 1365.06,649.721 1365.62,682.072 1366.18,665.38 1366.74,700.232 1367.3,715.094 1367.86,747.883 1368.42,793.022 1368.98,820.744 1369.54,796.408 1370.1,760.516 1370.66,771.782 1371.21,783.188 1371.77,792.816 1372.33,804.324 1372.89,763.888 1373.45,739.493 1374.01,736.047 1374.57,747.795 1375.13,715.083 1375.69,697.05 1376.25,710.645 1376.81,709.04 1377.37,707.99 1377.93,693.352 1378.49,721.406 1379.04,718.651 1379.6,716.908 1380.16,714.543 1380.72,713.776 1381.28,710.927 1381.84,709.448 1382.4,722.031 1382.96,689.269 1383.52,684.833 1384.08,669.093 1384.64,686.767 1385.2,718.962 1385.76,730.221 1386.31,760.258 1386.87,691.655 1387.43,675.267 1387.99,691.263 1388.55,739.764 1389.11,753.267 1389.67,751.171 1390.23,747.99 1390.79,747.779 1391.35,744.224 1391.91,725.372 1392.47,740.307 1393.03,737.732 1393.58,715.928 1394.14,653.517 1394.7,671.375 1395.26,672.115 1395.82,622.895 1396.38,624.826 1396.94,626.955 1397.5,683.104 1398.06,702.152 1398.62,703.403 1399.18,670.442 1399.74,685.589 1400.3,722.056 1400.86,719.537 1401.41,701.736 1401.97,685.731 1402.53,683.504 1403.09,715.823 1403.65,729.356 1404.21,728.105 1404.77,741.79 1405.33,739.38 1405.89,736.759 1406.45,700.337 1407.01,716.664 1407.57,680.995 1408.13,681.095 1408.68,666.67 1409.24,653.627 1409.8,670.385 1410.36,671.792 1410.92,671.238 1411.48,689.38 1412.04,701.581 1412.6,703.184 1413.16,717.686 1413.72,700.385 1414.28,700.721 1414.84,697.041 1415.4,681.367 1415.95,697.277 1416.51,667.155 1417.07,636.638 1417.63,608.954 1418.19,595.494 1418.75,581.932 1419.31,603.19 1419.87,607.249 1420.43,612.67 1420.99,618.051 1421.55,635.199 1422.11,634.231 1422.67,639.249 1423.23,658.57 1423.78,628.743 1424.34,650.489 1424.9,655.27 1425.46,688.885 1426.02,707.195 1426.58,694.739 1427.14,692.658 1427.7,724.194 1428.26,687.976 1428.82,685.642 1429.38,681.632 1429.94,633.172 1430.5,634.614 1431.05,608.489 1431.61,577.477 1432.17,598.332 1432.73,605.478 1433.29,593.041 1433.85,643.339 1434.41,660.831 1434.97,694.127 1435.53,710.159 1436.09,691.921 1436.65,692.531 1437.21,723.23 1437.77,721.616 1438.33,734.577 1438.88,779.545 1439.44,772.921 1440,767.784 1440.56,778.61 1441.12,775.628 1441.68,771.328 1442.24,718.301 1442.8,717.384 1443.36,701.59 1443.92,699.54 1444.48,669.468 1445.04,674.376 1445.6,709.359 1446.15,756.286 1446.71,769.688 1447.27,750.07 1447.83,759.34 1448.39,725.048 1448.95,738.439 1449.51,746.494 1450.07,728.042 1450.63,772.112 1451.19,735.881 1451.75,717.425 1452.31,716.418 1452.87,748.743 1453.42,745.967 1453.98,746.826 1454.54,761.626 1455.1,775.083 1455.66,756.358 1456.22,754.771 1456.78,736.193 1457.34,718.41 1457.9,684.574 1458.46,669.121 1459.02,671.04 1459.58,657.848 1460.14,643.395 1460.7,643.209 1461.25,661.458 1461.81,678.076 1462.37,710.458 1462.93,728.429 1463.49,690.373 1464.05,675.694 1464.61,712.437 1465.17,698.193 1465.73,716.552 1466.29,716.664 1466.85,713.529 1467.41,727.145 1467.97,705.11 1468.52,703.209 1469.08,686.557 1469.64,706.12 1470.2,719.344 1470.76,720.276 1471.32,719.513 1471.88,716.533 1472.44,687.466 1473,684.071 1473.56,683.42 1474.12,685.914 1474.68,670.431 1475.24,651.74 1475.79,688.479 1476.35,687.652 1476.91,687.238 1477.47,670.108 1478.03,682.788 1478.59,702.01 1479.15,733.299 1479.71,747.375 1480.27,791.724 1480.83,785.122 1481.39,813.035 1481.95,820.631 1482.51,795.498 1483.07,759.706 1483.62,755.633 1484.18,752.497 1484.74,795.896 1485.3,791.659 1485.86,753.975 1486.42,717.731 1486.98,735.722 1487.54,716.447 1488.1,683.824 1488.66,716.994 1489.22,683.011 1489.78,650.429 1490.34,635.322 1490.89,638.024 1491.45,589.381 1492.01,591.902 1492.57,579.274 1493.13,582.458 1493.69,585.239 1494.25,605.599 1494.81,606.477 1495.37,608.361 1495.93,609.854 1496.49,610.231 1497.05,629.693 1497.61,631.455 1498.16,661.184 1498.72,680.042 1499.28,644.31 1499.84,648.872 1500.4,622.025 1500.96,612.685 1501.52,633.565 1502.08,686.971 1502.64,670.85 1503.2,670.181 1503.76,621.687 1504.32,625.456 1504.88,612.818 1505.44,665.039 1505.99,682.058 1506.55,713.645 1507.11,745.131 1507.67,755.015 1508.23,749.059 1508.79,711.839 1509.35,743.254 1509.91,720.665 1510.47,734.683 1511.03,730.597 1511.59,743.328 1512.15,724.109 1512.71,717.289 1513.26,732.073 1513.82,744.857 1514.38,725.96 1514.94,707.076 1515.5,706.239 1516.06,702.765 1516.62,687.952 1517.18,655.674 1517.74,656.158 1518.3,691.765 1518.86,741.137 1519.42,707.063 1519.98,754.349 1520.53,719.954 1521.09,685.902 1521.65,674.867 1522.21,659.165 1522.77,643.276 1523.33,648.727 1523.89,713.214 1524.45,693.487 1525.01,656.45 1525.57,659.975 1526.13,650.187 1526.69,654.375 1527.25,656.962 1527.81,658.435 1528.36,659.746 1528.92,645.869 1529.48,645.854 1530.04,645.416 1530.6,695.011 1531.16,674.99 1531.72,641.637 1532.28,643.34 1532.84,629.645 1533.4,629.536 1533.96,649.728 1534.52,650.268 1535.08,639.314 1535.63,642.541 1536.19,657.83 1536.75,644.245 1537.31,632.143 1537.87,635.481 1538.43,652.622 1538.99,670.892 1539.55,707.686 1540.11,722.304 1540.67,685.949 1541.23,701.815 1541.79,682.852 1542.35,682.342 1542.9,670.964 1543.46,702.801 1544.02,650.668 1544.58,616.607 1545.14,618.795 1545.7,606.242 1546.26,627.001 1546.82,632.24 1547.38,655.203 1547.94,625.412 1548.5,577.65 1549.06,568.383 1549.62,555.075 1550.18,549.513 1550.73,574.699 1551.29,579.292 1551.85,601.834 1552.41,641.801 1552.97,644.331 1553.53,630.96 1554.09,637.684 1554.65,655.418 1555.21,657.368 1555.77,691.182 1556.33,689.154 1556.89,702.974 1557.45,684.607 1558,701.374 1558.56,680.724 1559.12,682.021 1559.68,703.309 1560.24,735.736 1560.8,717.868 1561.36,701.345 1561.92,778 1562.48,758.315 1563.04,755.436 1563.6,765.235 1564.16,762.437 1564.72,742.854 1565.28,723.506 1565.83,706.243 1566.39,688.343 1566.95,704.965 1567.51,720.946 1568.07,767.819 1568.63,746.728 1569.19,759.874 1569.75,739.699 1570.31,767.715 1570.87,777.247 1571.43,774.049 1571.99,720.574 1572.55,719.257 1573.1,717.649 1573.66,728.723 1574.22,748.174 1574.78,713.915 1575.34,697.276 1575.9,710.985 1576.46,710.698 1577.02,709.385 1577.58,725.43 1578.14,739.482 1578.7,720.944 1579.26,720.396 1579.82,720.731 1580.37,719.15 1580.93,718.901 1581.49,715.304 1582.05,716.006 1582.61,713.657 1583.17,708.652 1583.73,708.678 1584.29,706.523 1584.85,705.311 1585.41,657.122 1585.97,655.924 1586.53,625.513 1587.09,624.895 1587.65,596.049 1588.2,569.733 1588.76,563.402 1589.32,567.643 1589.88,591.719 1590.44,628.137 1591,613.951 1591.56,650.996 1592.12,696.596 1592.68,679.071 1593.24,648.388 1593.8,648.336 1594.36,617.737 1594.92,620.476 1595.47,624.144 1596.03,629.683 1596.59,619.124 1597.15,621.231 1597.71,623.377 1598.27,625.173 1598.83,647.623 1599.39,667.949 1599.95,651.658 1600.51,650.661 1601.07,635.568 1601.63,623.552 1602.19,610.878 1602.74,615.106 1603.3,633.431 1603.86,620.596 1604.42,624.785 1604.98,630.546 1605.54,616.073 1606.1,682.655 1606.66,651.543 1607.22,651.439 1607.78,683.63 1608.34,683.702 1608.9,683.506 1609.46,698.861 1610.02,695.622 1610.57,646.811 1611.13,616.477 1611.69,620.206 1612.25,672.897 1612.81,656.021 1613.37,673.56 1613.93,689.632 1614.49,736.848 1615.05,782.736 1615.61,827.993 1616.17,804.679 1616.73,816.309 1617.29,777.417 1617.84,771.882 1618.4,732.035 1618.96,715.218 1619.52,696.032 1620.08,711.204 1620.64,756.714 1621.2,785.998 1621.76,764.647 1622.32,774.544 1622.88,734.958 1623.44,765.523 1624,761.827 1624.56,756.26 1625.11,723.536 1625.67,751.082 1626.23,731.812 1626.79,695.058 1627.35,690.82 1627.91,686.1 1628.47,671.901 1629.03,655.824 1629.59,672.837 1630.15,643.871 1630.71,643.941 1631.27,659.002 1631.83,640.437 1632.39,629.927 1632.94,648.076 1633.5,648.269 1634.06,650.369 1634.62,670.692 1635.18,639.686 1635.74,629.674 1636.3,631.903 1636.86,632.155 1637.42,615.833 1637.98,634.527 1638.54,652.053 1639.1,636.27 1639.66,637.214 1640.21,655.858 1640.77,643.384 1641.33,595.947 1641.89,601.027 1642.45,635.828 1643.01,640.318 1643.57,629.184 1644.13,618.537 1644.69,622.204 1645.25,626.241 1645.81,583.434 1646.37,624.38 1646.93,628.265 1647.48,662.66 1648.04,662.916 1648.6,698.043 1649.16,678.946 1649.72,679.216 1650.28,661.898 1650.84,699.884 1651.4,696.44 1651.96,712.763 1652.52,708.982 1653.08,694.897 1653.64,696.177 1654.2,691.109 1654.76,721.905 1655.31,718.539 1655.87,702.64 1656.43,720.885 1656.99,750.399 1657.55,795.619 1658.11,740.554 1658.67,736.603 1659.23,751.59 1659.79,748.142 1660.35,758.232 1660.91,751.147 1661.47,748.647 1662.03,763.525 1662.58,772.672 1663.14,783.123 1663.7,744.952 1664.26,724.343 1664.82,671.382 1665.38,671.68 1665.94,672.771 1666.5,704.998 1667.06,719.204 1667.62,669.301 1668.18,667.429 1668.74,670.364 1669.3,689.653 1669.85,708.527 1670.41,691.175 1670.97,674.418 1671.53,674.865 1672.09,709.974 1672.65,712.375 1673.21,695.107 1673.77,696.697 1674.33,646.673 1674.89,631.603 1675.45,633.228 1676.01,618.867 1676.57,639.294 1677.13,654.746 1677.68,643.725 1678.24,586.24 1678.8,592.999 1679.36,568.842 1679.92,594.692 1680.48,616.633 1681.04,636.033 1681.6,639.293 1682.16,674.238 1682.72,707.844 1683.28,710.228 1683.84,691.888 1684.4,706.03 1684.95,721.92 1685.51,701.241 1686.07,717.702 1686.63,699.936 1687.19,668.453 1687.75,672.232 1688.31,621.344 1688.87,610.688 1689.43,614.822 1689.99,601.964 1690.55,605.799 1691.11,610.116 1691.67,615.431 1692.23,637.006 1692.78,607.22 1693.34,595.382 1693.9,601.811 1694.46,625.132 1695.02,646.486 1695.58,645.193 1696.14,646.092 1696.7,649.186 1697.26,616.815 1697.82,606.128 1698.38,609.697 1698.94,614.825 1699.5,654.183 1700.05,656.178 1700.61,672.779 1701.17,706.562 1701.73,675.596 1702.29,678.023 1702.85,677.497 1703.41,679.213 1703.97,649.275 1704.53,666.986 1705.09,635.621 1705.65,674.096 1706.21,659.261 1706.77,663.592 1707.32,730.506 1707.88,743.059 1708.44,757.231 1709,736.686 1709.56,732.881 1710.12,731 1710.68,746.198 1711.24,738.712 1711.8,766.31 1712.36,777.757 1712.92,785.84 1713.48,763.553 1714.04,755.457 1714.6,780.052 1715.15,742.624 1715.71,724.663 1716.27,704.039 1716.83,702.48 1717.39,699.386 1717.95,696.965 1718.51,679.056 1719.07,677.376 1719.63,694.55 1720.19,693.272 1720.75,705.447 1721.31,670.515 1721.87,654.996 1722.42,656.428 1722.98,642.272 1723.54,658.713 1724.1,659.526 1724.66,658.638 1725.22,627.174 1725.78,646.399 1726.34,631.277 1726.9,636.627 1727.46,624.54 1728.02,627.97 1728.58,646.924 1729.14,644.141 1729.69,660.054 1730.25,661.123 1730.81,682.846 1731.37,696.44 1731.93,710.304 1732.49,706.097 1733.05,687.574 1733.61,685.864 1734.17,654.321 1734.73,595.814 1735.29,585.162 1735.85,588.525 1736.41,608.495 1736.97,657.214 1737.52,689.82 1738.08,685.694 1738.64,684.62 1739.2,683.813 1739.76,697.619 1740.32,699.602 1740.88,682.764 1741.44,701.086 1742,679.986 1742.56,710.509 1743.12,709.789 1743.68,713.449 1744.24,726.519 1744.79,756.343 1745.35,692.092 1745.91,675.181 1746.47,677.922 1747.03,694.297 1747.59,713.624 1748.15,730.635 1748.71,728.346 1749.27,745.602 1749.83,725.539 1750.39,721.888 1750.95,701.79 1751.51,685.845 1752.06,701.201 1752.62,749.194 1753.18,765.852 1753.74,777.751 1754.3,804.637 1754.86,794.607 1755.42,817.96 1755.98,808.699 1756.54,767.26 1757.1,761.11 1757.66,772.869 1758.22,750.738 1758.78,714.326 1759.34,711.239 1759.89,694.569 1760.45,692.013 1761.01,707.643 1761.57,723.954 1762.13,688.094 1762.69,684.419 1763.25,670.754 1763.81,652.959 1764.37,638.122 1764.93,640.721 1765.49,612.908 1766.05,634.324 1766.61,654.67 1767.16,640.065 1767.72,657.317 1768.28,659.256 1768.84,661.701 1769.4,664.435 1769.96,663.132 1770.52,679.003 1771.08,694.667 1771.64,694.9 1772.2,674.502 1772.76,690.426 1773.32,723.431 1773.88,719.079 1774.43,685.897 1774.99,682.802 1775.55,680.416 1776.11,696.473 1776.67,714.543 1777.23,743.644 1777.79,722.107 1778.35,737.63 1778.91,734.411 1779.47,731.575 1780.03,695.762 1780.59,696.639 1781.15,675.658 1781.71,691.137 1782.26,692.14 1782.82,689.909 1783.38,700.607 1783.94,682.804 1784.5,684.946 1785.06,672.283 1785.62,674.391 1786.18,641.074 1786.74,673.013 1787.3,668.37 1787.86,657.198 1788.42,606.863 1788.98,626.878 1789.53,630.462 1790.09,631.514 1790.65,569.562 1791.21,557.106 1791.77,564.986 1792.33,605.175 1792.89,594.123 1793.45,598.696 1794.01,603.248 1794.57,606.952 1795.13,607.348 1795.69,545.611 1796.25,553.476 1796.8,590.197 1797.36,659.453 1797.92,649.63 1798.48,650.922 1799.04,684.638 1799.6,667.337 1800.16,638.879 1800.72,640.661 1801.28,646.27 1801.84,632.641 1802.4,599.494 1802.96,604.307 1803.52,543.006 1804.08,535.308 1804.63,576.981 1805.19,596.983 1805.75,586.062 1806.31,606.968 1806.87,610.827 1807.43,663.411 1807.99,680.581 1808.55,696.497 1809.11,711.332 1809.67,725.896 1810.23,741.458 1810.79,723.305 1811.35,716.76 1811.9,718.608 1812.46,716.216 1813.02,743.885 1813.58,741.734 1814.14,675.753 1814.7,644.115 1815.26,663.777 1815.82,700.936 1816.38,653.612 1816.94,658.935 1817.5,679.64 1818.06,696.723 1818.62,729.935 1819.18,727.889 1819.73,726.202 1820.29,738.945 1820.85,704.426 1821.41,670.673 1821.97,655.356 1822.53,658.415 1823.09,672.592 1823.65,718.489 1824.21,700.281 1824.77,703.866 1825.33,749.976 1825.89,761.666 1826.45,758.123 1827,767.275 1827.56,759.282 1828.12,727.67 1828.68,744.095 1829.24,721.894 1829.8,716.596 1830.36,732.7 1830.92,728.451 1831.48,724.531 1832.04,737.529 1832.6,766.203 1833.16,791.264 1833.72,754.184 1834.27,731.873 1834.83,726.902 1835.39,727.573 1835.95,742.472 1836.51,740.573 1837.07,722.162 1837.63,739.454 1838.19,770.36 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 691.014 L720.806 691.014 L721.365 691.014 L721.924 691.014 L722.484 691.014 L723.043 691.014 L723.602 691.014 L724.161 691.014 L724.721 691.014 L725.28 691.014 L725.839 691.014 L726.398 691.014 L726.958 691.014 L727.517 691.014 L728.076 691.014 L728.635 691.014 L729.195 691.014 L729.754 691.014 L730.313 691.014 L730.872 691.014 L731.432 691.014 L731.991 691.014 L732.55 691.014 L733.109 691.014 L733.669 691.014 L734.228 691.014 L734.787 691.014 L735.346 691.014 L735.906 691.014 L736.465 691.014 L737.024 691.014 L737.583 691.014 L738.143 691.014 L738.702 691.014 L739.261 691.014 L739.82 691.014 L740.38 691.014 L740.939 691.014 L741.498 691.014 L742.057 691.014 L742.617 691.014 L743.176 691.014 L743.735 691.014 L744.294 691.014 L744.854 691.014 L745.413 691.014 L745.972 691.014 L746.531 691.014 L747.091 691.014 L747.65 691.014 L748.209 691.014 L748.768 691.014 L749.328 691.014 L749.887 691.014 L750.446 691.014 L751.005 691.014 L751.565 691.014 L752.124 691.014 L752.683 691.014 L753.242 691.014 L753.802 691.014 L754.361 691.014 L754.92 691.014 L755.479 691.014 L756.039 691.014 L756.598 691.014 L757.157 691.014 L757.716 691.014 L758.276 691.014 L758.835 691.014 L759.394 691.014 L759.953 691.014 L760.513 691.014 L761.072 691.014 L761.631 691.014 L762.19 691.014 L762.75 691.014 L763.309 691.014 L763.868 691.014 L764.427 691.014 L764.987 691.014 L765.546 691.014 L766.105 691.014 L766.664 691.014 L767.224 691.014 L767.783 691.014 L768.342 691.014 L768.901 691.014 L769.461 691.014 L770.02 691.014 L770.579 691.014 L771.138 691.014 L771.698 691.014 L772.257 691.014 L772.816 691.014 L773.375 691.014 L773.935 691.014 L774.494 691.014 L775.053 691.014 L775.612 691.014 L776.172 691.014 L776.731 691.014 L777.29 691.014 L777.849 691.014 L778.409 691.014 L778.968 691.014 L779.527 691.014 L780.086 691.014 L780.646 691.014 L781.205 691.014 L781.764 691.014 L782.323 691.014 L782.883 691.014 L783.442 691.014 L784.001 691.014 L784.56 691.014 L785.12 691.014 L785.679 691.014 L786.238 691.014 L786.797 691.014 L787.357 691.014 L787.916 691.014 L788.475 691.014 L789.034 691.014 L789.594 691.014 L790.153 691.014 L790.712 691.014 L791.271 691.014 L791.831 691.014 L792.39 691.014 L792.949 691.014 L793.508 691.014 L794.068 691.014 L794.627 691.014 L795.186 691.014 L795.745 691.014 L796.305 691.014 L796.864 691.014 L797.423 691.014 L797.982 691.014 L798.542 691.014 L799.101 691.014 L799.66 691.014 L800.219 691.014 L800.779 691.014 L801.338 691.014 L801.897 691.014 L802.456 691.014 L803.016 691.014 L803.575 691.014 L804.134 691.014 L804.693 691.014 L805.253 691.014 L805.812 691.014 L806.371 691.014 L806.931 691.014 L807.49 691.014 L808.049 691.014 L808.608 691.014 L809.168 691.014 L809.727 691.014 L810.286 691.014 L810.845 691.014 L811.405 691.014 L811.964 691.014 L812.523 691.014 L813.082 691.014 L813.642 691.014 L814.201 691.014 L814.76 691.014 L815.319 691.014 L815.879 691.014 L816.438 691.014 L816.997 691.014 L817.556 691.014 L818.116 691.014 L818.675 691.014 L819.234 691.014 L819.793 691.014 L820.353 691.014 L820.912 691.014 L821.471 691.014 L822.03 691.014 L822.59 691.014 L823.149 691.014 L823.708 691.014 L824.267 691.014 L824.827 691.014 L825.386 691.014 L825.945 691.014 L826.504 691.014 L827.064 691.014 L827.623 691.014 L828.182 691.014 L828.741 691.014 L829.301 691.014 L829.86 691.014 L830.419 691.014 L830.978 691.014 L831.538 691.014 L832.097 691.014 L832.656 691.014 L833.215 691.014 L833.775 691.014 L834.334 691.014 L834.893 691.014 L835.452 691.014 L836.012 691.014 L836.571 691.014 L837.13 691.014 L837.689 691.014 L838.249 691.014 L838.808 691.014 L839.367 691.014 L839.926 691.014 L840.486 691.014 L841.045 691.014 L841.604 691.014 L842.163 691.014 L842.723 691.014 L843.282 691.014 L843.841 691.014 L844.4 691.014 L844.96 691.014 L845.519 691.014 L846.078 691.014 L846.637 691.014 L847.197 691.014 L847.756 691.014 L848.315 691.014 L848.874 691.014 L849.434 691.014 L849.993 691.014 L850.552 691.014 L851.111 691.014 L851.671 691.014 L852.23 691.014 L852.789 691.014 L853.348 691.014 L853.908 691.014 L854.467 691.014 L855.026 691.014 L855.585 691.014 L856.145 691.014 L856.704 691.014 L857.263 691.014 L857.822 691.014 L858.382 691.014 L858.941 691.014 L859.5 691.014 L860.059 691.014 L860.619 691.014 L861.178 691.014 L861.737 691.014 L862.296 691.014 L862.856 691.014 L863.415 691.014 L863.974 691.014 L864.533 691.014 L865.093 691.014 L865.652 691.014 L866.211 691.014 L866.77 691.014 L867.33 691.014 L867.889 691.014 L868.448 691.014 L869.007 691.014 L869.567 691.014 L870.126 691.014 L870.685 691.014 L871.244 691.014 L871.804 691.014 L872.363 691.014 L872.922 691.014 L873.481 691.014 L874.041 691.014 L874.6 691.014 L875.159 691.014 L875.718 691.014 L876.278 691.014 L876.837 691.014 L877.396 691.014 L877.955 691.014 L878.515 691.014 L879.074 691.014 L879.633 691.014 L880.192 691.014 L880.752 691.014 L881.311 691.014 L881.87 691.014 L882.429 691.014 L882.989 691.014 L883.548 691.014 L884.107 691.014 L884.666 691.014 L885.226 691.014 L885.785 691.014 L886.344 691.014 L886.903 691.014 L887.463 691.014 L888.022 691.014 L888.581 691.014 L889.14 691.014 L889.7 691.014 L890.259 691.014 L890.818 691.014 L891.377 691.014 L891.937 691.014 L892.496 691.014 L893.055 691.014 L893.614 691.014 L894.174 691.014 L894.733 691.014 L895.292 691.014 L895.851 691.014 L896.411 691.014 L896.97 691.014 L897.529 691.014 L898.088 691.014 L898.648 691.014 L899.207 691.014 L899.766 691.014 L900.325 691.014 L900.885 691.014 L901.444 691.014 L902.003 691.014 L902.562 691.014 L903.122 691.014 L903.681 691.014 L904.24 691.014 L904.799 691.014 L905.359 691.014 L905.918 691.014 L906.477 691.014 L907.036 691.014 L907.596 691.014 L908.155 691.014 L908.714 691.014 L909.273 691.014 L909.833 691.014 L910.392 691.014 L910.951 691.014 L911.51 691.014 L912.07 691.014 L912.629 691.014 L913.188 691.014 L913.747 691.014 L914.307 691.014 L914.866 691.014 L915.425 691.014 L915.984 691.014 L916.544 691.014 L917.103 691.014 L917.662 691.014 L918.221 691.014 L918.781 691.014 L919.34 691.014 L919.899 691.014 L920.458 691.014 L921.018 691.014 L921.577 691.014 L922.136 691.014 L922.695 691.014 L923.255 691.014 L923.814 691.014 L924.373 691.014 L924.932 691.014 L925.492 691.014 L926.051 691.014 L926.61 691.014 L927.169 691.014 L927.729 691.014 L928.288 691.014 L928.847 691.014 L929.406 691.014 L929.966 691.014 L930.525 691.014 L931.084 691.014 L931.644 691.014 L932.203 691.014 L932.762 691.014 L933.321 691.014 L933.881 691.014 L934.44 691.014 L934.999 691.014 L935.558 691.014 L936.118 691.014 L936.677 691.014 L937.236 691.014 L937.795 691.014 L938.355 691.014 L938.914 691.014 L939.473 691.014 L940.032 691.014 L940.592 691.014 L941.151 691.014 L941.71 691.014 L942.269 691.014 L942.829 691.014 L943.388 691.014 L943.947 691.014 L944.506 691.014 L945.066 691.014 L945.625 691.014 L946.184 691.014 L946.743 691.014 L947.303 691.014 L947.862 691.014 L948.421 691.014 L948.98 691.014 L949.54 691.014 L950.099 691.014 L950.658 691.014 L951.217 691.014 L951.777 691.014 L952.336 691.014 L952.895 691.014 L953.454 691.014 L954.014 691.014 L954.573 691.014 L955.132 691.014 L955.691 691.014 L956.251 691.014 L956.81 691.014 L957.369 691.014 L957.928 691.014 L958.488 691.014 L959.047 691.014 L959.606 691.014 L960.165 691.014 L960.725 691.014 L961.284 691.014 L961.843 691.014 L962.402 691.014 L962.962 691.014 L963.521 691.014 L964.08 691.014 L964.639 691.014 L965.199 691.014 L965.758 691.014 L966.317 691.014 L966.876 691.014 L967.436 691.014 L967.995 691.014 L968.554 691.014 L969.113 691.014 L969.673 691.014 L970.232 691.014 L970.791 691.014 L971.35 691.014 L971.91 691.014 L972.469 691.014 L973.028 691.014 L973.587 691.014 L974.147 691.014 L974.706 691.014 L975.265 691.014 L975.824 691.014 L976.384 691.014 L976.943 691.014 L977.502 691.014 L978.061 691.014 L978.621 691.014 L979.18 691.014 L979.739 691.014 L980.298 691.014 L980.858 691.014 L981.417 691.014 L981.976 691.014 L982.535 691.014 L983.095 691.014 L983.654 691.014 L984.213 691.014 L984.772 691.014 L985.332 691.014 L985.891 691.014 L986.45 691.014 L987.009 691.014 L987.569 691.014 L988.128 691.014 L988.687 691.014 L989.246 691.014 L989.806 691.014 L990.365 691.014 L990.924 691.014 L991.483 691.014 L992.043 691.014 L992.602 691.014 L993.161 691.014 L993.72 691.014 L994.28 691.014 L994.839 691.014 L995.398 691.014 L995.957 691.014 L996.517 691.014 L997.076 691.014 L997.635 691.014 L998.194 691.014 L998.754 691.014 L999.313 691.014 L999.872 691.014 L1000.43 691.014 L1000.99 691.014 L1001.55 691.014 L1002.11 691.014 L1002.67 691.014 L1003.23 691.014 L1003.79 691.014 L1004.35 691.014 L1004.91 691.014 L1005.46 691.014 L1006.02 691.014 L1006.58 691.014 L1007.14 691.014 L1007.7 691.014 L1008.26 691.014 L1008.82 691.014 L1009.38 691.014 L1009.94 691.014 L1010.5 691.014 L1011.06 691.014 L1011.62 691.014 L1012.18 691.014 L1012.73 691.014 L1013.29 691.014 L1013.85 691.014 L1014.41 691.014 L1014.97 691.014 L1015.53 691.014 L1016.09 691.014 L1016.65 691.014 L1017.21 691.014 L1017.77 691.014 L1018.33 691.014 L1018.89 691.014 L1019.45 691.014 L1020.01 691.014 L1020.56 691.014 L1021.12 691.014 L1021.68 691.014 L1022.24 691.014 L1022.8 691.014 L1023.36 691.014 L1023.92 691.014 L1024.48 691.014 L1025.04 691.014 L1025.6 691.014 L1026.16 691.014 L1026.72 691.014 L1027.28 691.014 L1027.83 691.014 L1028.39 691.014 L1028.95 691.014 L1029.51 691.014 L1030.07 691.014 L1030.63 691.014 L1031.19 691.014 L1031.75 691.014 L1032.31 691.014 L1032.87 691.014 L1033.43 691.014 L1033.99 691.014 L1034.55 691.014 L1035.1 691.014 L1035.66 691.014 L1036.22 691.014 L1036.78 691.014 L1037.34 691.014 L1037.9 691.014 L1038.46 691.014 L1039.02 691.014 L1039.58 691.014 L1040.14 691.014 L1040.7 691.014 L1041.26 691.014 L1041.82 691.014 L1042.38 691.014 L1042.93 691.014 L1043.49 691.014 L1044.05 691.014 L1044.61 691.014 L1045.17 691.014 L1045.73 691.014 L1046.29 691.014 L1046.85 691.014 L1047.41 691.014 L1047.97 691.014 L1048.53 691.014 L1049.09 691.014 L1049.65 691.014 L1050.2 691.014 L1050.76 691.014 L1051.32 691.014 L1051.88 691.014 L1052.44 691.014 L1053 691.014 L1053.56 691.014 L1054.12 691.014 L1054.68 691.014 L1055.24 691.014 L1055.8 691.014 L1056.36 691.014 L1056.92 691.014 L1057.48 691.014 L1058.03 691.014 L1058.59 691.014 L1059.15 691.014 L1059.71 691.014 L1060.27 691.014 L1060.83 691.014 L1061.39 691.014 L1061.95 691.014 L1062.51 691.014 L1063.07 691.014 L1063.63 691.014 L1064.19 691.014 L1064.75 691.014 L1065.3 691.014 L1065.86 691.014 L1066.42 691.014 L1066.98 691.014 L1067.54 691.014 L1068.1 691.014 L1068.66 691.014 L1069.22 691.014 L1069.78 691.014 L1070.34 691.014 L1070.9 691.014 L1071.46 691.014 L1072.02 691.014 L1072.57 691.014 L1073.13 691.014 L1073.69 691.014 L1074.25 691.014 L1074.81 691.014 L1075.37 691.014 L1075.93 691.014 L1076.49 691.014 L1077.05 691.014 L1077.61 691.014 L1078.17 691.014 L1078.73 691.014 L1079.29 691.014 L1079.85 691.014 L1080.4 691.014 L1080.96 691.014 L1081.52 691.014 L1082.08 691.014 L1082.64 691.014 L1083.2 691.014 L1083.76 691.014 L1084.32 691.014 L1084.88 691.014 L1085.44 691.014 L1086 691.014 L1086.56 691.014 L1087.12 691.014 L1087.67 691.014 L1088.23 691.014 L1088.79 691.014 L1089.35 691.014 L1089.91 691.014 L1090.47 691.014 L1091.03 691.014 L1091.59 691.014 L1092.15 691.014 L1092.71 691.014 L1093.27 691.014 L1093.83 691.014 L1094.39 691.014 L1094.94 691.014 L1095.5 691.014 L1096.06 691.014 L1096.62 691.014 L1097.18 691.014 L1097.74 691.014 L1098.3 691.014 L1098.86 691.014 L1099.42 691.014 L1099.98 691.014 L1100.54 691.014 L1101.1 691.014 L1101.66 691.014 L1102.22 691.014 L1102.77 691.014 L1103.33 691.014 L1103.89 691.014 L1104.45 691.014 L1105.01 691.014 L1105.57 691.014 L1106.13 691.014 L1106.69 691.014 L1107.25 691.014 L1107.81 691.014 L1108.37 691.014 L1108.93 691.014 L1109.49 691.014 L1110.04 691.014 L1110.6 691.014 L1111.16 691.014 L1111.72 691.014 L1112.28 691.014 L1112.84 691.014 L1113.4 691.014 L1113.96 691.014 L1114.52 691.014 L1115.08 691.014 L1115.64 691.014 L1116.2 691.014 L1116.76 691.014 L1117.31 691.014 L1117.87 691.014 L1118.43 691.014 L1118.99 691.014 L1119.55 691.014 L1120.11 691.014 L1120.67 691.014 L1121.23 691.014 L1121.79 691.014 L1122.35 691.014 L1122.91 691.014 L1123.47 691.014 L1124.03 691.014 L1124.59 691.014 L1125.14 691.014 L1125.7 691.014 L1126.26 691.014 L1126.82 691.014 L1127.38 691.014 L1127.94 691.014 L1128.5 691.014 L1129.06 691.014 L1129.62 691.014 L1130.18 691.014 L1130.74 691.014 L1131.3 691.014 L1131.86 691.014 L1132.41 691.014 L1132.97 691.014 L1133.53 691.014 L1134.09 691.014 L1134.65 691.014 L1135.21 691.014 L1135.77 691.014 L1136.33 691.014 L1136.89 691.014 L1137.45 691.014 L1138.01 691.014 L1138.57 691.014 L1139.13 691.014 L1139.68 691.014 L1140.24 691.014 L1140.8 691.014 L1141.36 691.014 L1141.92 691.014 L1142.48 691.014 L1143.04 691.014 L1143.6 691.014 L1144.16 691.014 L1144.72 691.014 L1145.28 691.014 L1145.84 691.014 L1146.4 691.014 L1146.96 691.014 L1147.51 691.014 L1148.07 691.014 L1148.63 691.014 L1149.19 691.014 L1149.75 691.014 L1150.31 691.014 L1150.87 691.014 L1151.43 691.014 L1151.99 691.014 L1152.55 691.014 L1153.11 691.014 L1153.67 691.014 L1154.23 691.014 L1154.78 691.014 L1155.34 691.014 L1155.9 691.014 L1156.46 691.014 L1157.02 691.014 L1157.58 691.014 L1158.14 691.014 L1158.7 691.014 L1159.26 691.014 L1159.82 691.014 L1160.38 691.014 L1160.94 691.014 L1161.5 691.014 L1162.05 691.014 L1162.61 691.014 L1163.17 691.014 L1163.73 691.014 L1164.29 691.014 L1164.85 691.014 L1165.41 691.014 L1165.97 691.014 L1166.53 691.014 L1167.09 691.014 L1167.65 691.014 L1168.21 691.014 L1168.77 691.014 L1169.33 691.014 L1169.88 691.014 L1170.44 691.014 L1171 691.014 L1171.56 691.014 L1172.12 691.014 L1172.68 691.014 L1173.24 691.014 L1173.8 691.014 L1174.36 691.014 L1174.92 691.014 L1175.48 691.014 L1176.04 691.014 L1176.6 691.014 L1177.15 691.014 L1177.71 691.014 L1178.27 691.014 L1178.83 691.014 L1179.39 691.014 L1179.95 691.014 L1180.51 691.014 L1181.07 691.014 L1181.63 691.014 L1182.19 691.014 L1182.75 691.014 L1183.31 691.014 L1183.87 691.014 L1184.43 691.014 L1184.98 691.014 L1185.54 691.014 L1186.1 691.014 L1186.66 691.014 L1187.22 691.014 L1187.78 691.014 L1188.34 691.014 L1188.9 691.014 L1189.46 691.014 L1190.02 691.014 L1190.58 691.014 L1191.14 691.014 L1191.7 691.014 L1192.25 691.014 L1192.81 691.014 L1193.37 691.014 L1193.93 691.014 L1194.49 691.014 L1195.05 691.014 L1195.61 691.014 L1196.17 691.014 L1196.73 691.014 L1197.29 691.014 L1197.85 691.014 L1198.41 691.014 L1198.97 691.014 L1199.52 691.014 L1200.08 691.014 L1200.64 691.014 L1201.2 691.014 L1201.76 691.014 L1202.32 691.014 L1202.88 691.014 L1203.44 691.014 L1204 691.014 L1204.56 691.014 L1205.12 691.014 L1205.68 691.014 L1206.24 691.014 L1206.8 691.014 L1207.35 691.014 L1207.91 691.014 L1208.47 691.014 L1209.03 691.014 L1209.59 691.014 L1210.15 691.014 L1210.71 691.014 L1211.27 691.014 L1211.83 691.014 L1212.39 691.014 L1212.95 691.014 L1213.51 691.014 L1214.07 691.014 L1214.62 691.014 L1215.18 691.014 L1215.74 691.014 L1216.3 691.014 L1216.86 691.014 L1217.42 691.014 L1217.98 691.014 L1218.54 691.014 L1219.1 691.014 L1219.66 691.014 L1220.22 691.014 L1220.78 691.014 L1221.34 691.014 L1221.89 691.014 L1222.45 691.014 L1223.01 691.014 L1223.57 691.014 L1224.13 691.014 L1224.69 691.014 L1225.25 691.014 L1225.81 691.014 L1226.37 691.014 L1226.93 691.014 L1227.49 691.014 L1228.05 691.014 L1228.61 691.014 L1229.17 691.014 L1229.72 691.014 L1230.28 691.014 L1230.84 691.014 L1231.4 691.014 L1231.96 691.014 L1232.52 691.014 L1233.08 691.014 L1233.64 691.014 L1234.2 691.014 L1234.76 691.014 L1235.32 691.014 L1235.88 691.014 L1236.44 691.014 L1236.99 691.014 L1237.55 691.014 L1238.11 691.014 L1238.67 691.014 L1239.23 691.014 L1239.79 691.014 L1240.35 691.014 L1240.91 691.014 L1241.47 691.014 L1242.03 691.014 L1242.59 691.014 L1243.15 691.014 L1243.71 691.014 L1244.26 691.014 L1244.82 691.014 L1245.38 691.014 L1245.94 691.014 L1246.5 691.014 L1247.06 691.014 L1247.62 691.014 L1248.18 691.014 L1248.74 691.014 L1249.3 691.014 L1249.86 691.014 L1250.42 691.014 L1250.98 691.014 L1251.54 691.014 L1252.09 691.014 L1252.65 691.014 L1253.21 691.014 L1253.77 691.014 L1254.33 691.014 L1254.89 691.014 L1255.45 691.014 L1256.01 691.014 L1256.57 691.014 L1257.13 691.014 L1257.69 691.014 L1258.25 691.014 L1258.81 691.014 L1259.36 691.014 L1259.92 691.014 L1260.48 691.014 L1261.04 691.014 L1261.6 691.014 L1262.16 691.014 L1262.72 691.014 L1263.28 691.014 L1263.84 691.014 L1264.4 691.014 L1264.96 691.014 L1265.52 691.014 L1266.08 691.014 L1266.63 691.014 L1267.19 691.014 L1267.75 691.014 L1268.31 691.014 L1268.87 691.014 L1269.43 691.014 L1269.99 691.014 L1270.55 691.014 L1271.11 691.014 L1271.67 691.014 L1272.23 691.014 L1272.79 691.014 L1273.35 691.014 L1273.91 691.014 L1274.46 691.014 L1275.02 691.014 L1275.58 691.014 L1276.14 691.014 L1276.7 691.014 L1277.26 691.014 L1277.82 691.014 L1278.38 691.014 L1278.94 691.014 L1279.5 691.014 L1280.06 691.014 L1280.62 691.014 L1281.18 691.014 L1281.73 691.014 L1282.29 691.014 L1282.85 691.014 L1283.41 691.014 L1283.97 691.014 L1284.53 691.014 L1285.09 691.014 L1285.65 691.014 L1286.21 691.014 L1286.77 691.014 L1287.33 691.014 L1287.89 691.014 L1288.45 691.014 L1289 691.014 L1289.56 691.014 L1290.12 691.014 L1290.68 691.014 L1291.24 691.014 L1291.8 691.014 L1292.36 691.014 L1292.92 691.014 L1293.48 691.014 L1294.04 691.014 L1294.6 691.014 L1295.16 691.014 L1295.72 691.014 L1296.28 691.014 L1296.83 691.014 L1297.39 691.014 L1297.95 691.014 L1298.51 691.014 L1299.07 691.014 L1299.63 691.014 L1300.19 691.014 L1300.75 691.014 L1301.31 691.014 L1301.87 691.014 L1302.43 691.014 L1302.99 691.014 L1303.55 691.014 L1304.1 691.014 L1304.66 691.014 L1305.22 691.014 L1305.78 691.014 L1306.34 691.014 L1306.9 691.014 L1307.46 691.014 L1308.02 691.014 L1308.58 691.014 L1309.14 691.014 L1309.7 691.014 L1310.26 691.014 L1310.82 691.014 L1311.38 691.014 L1311.93 691.014 L1312.49 691.014 L1313.05 691.014 L1313.61 691.014 L1314.17 691.014 L1314.73 691.014 L1315.29 691.014 L1315.85 691.014 L1316.41 691.014 L1316.97 691.014 L1317.53 691.014 L1318.09 691.014 L1318.65 691.014 L1319.2 691.014 L1319.76 691.014 L1320.32 691.014 L1320.88 691.014 L1321.44 691.014 L1322 691.014 L1322.56 691.014 L1323.12 691.014 L1323.68 691.014 L1324.24 691.014 L1324.8 691.014 L1325.36 691.014 L1325.92 691.014 L1326.47 691.014 L1327.03 691.014 L1327.59 691.014 L1328.15 691.014 L1328.71 691.014 L1329.27 691.014 L1329.83 691.014 L1330.39 691.014 L1330.95 691.014 L1331.51 691.014 L1332.07 691.014 L1332.63 691.014 L1333.19 691.014 L1333.75 691.014 L1334.3 691.014 L1334.86 691.014 L1335.42 691.014 L1335.98 691.014 L1336.54 691.014 L1337.1 691.014 L1337.66 691.014 L1338.22 691.014 L1338.78 691.014 L1339.34 691.014 L1339.9 691.014 L1340.46 691.014 L1341.02 691.014 L1341.57 691.014 L1342.13 691.014 L1342.69 691.014 L1343.25 691.014 L1343.81 691.014 L1344.37 691.014 L1344.93 691.014 L1345.49 691.014 L1346.05 691.014 L1346.61 691.014 L1347.17 691.014 L1347.73 691.014 L1348.29 691.014 L1348.84 691.014 L1349.4 691.014 L1349.96 691.014 L1350.52 691.014 L1351.08 691.014 L1351.64 691.014 L1352.2 691.014 L1352.76 691.014 L1353.32 691.014 L1353.88 691.014 L1354.44 691.014 L1355 691.014 L1355.56 691.014 L1356.12 691.014 L1356.67 691.014 L1357.23 691.014 L1357.79 691.014 L1358.35 691.014 L1358.91 691.014 L1359.47 691.014 L1360.03 691.014 L1360.59 691.014 L1361.15 691.014 L1361.71 691.014 L1362.27 691.014 L1362.83 691.014 L1363.39 691.014 L1363.94 691.014 L1364.5 691.014 L1365.06 691.014 L1365.62 691.014 L1366.18 691.014 L1366.74 691.014 L1367.3 691.014 L1367.86 691.014 L1368.42 691.014 L1368.98 691.014 L1369.54 691.014 L1370.1 691.014 L1370.66 691.014 L1371.21 691.014 L1371.77 691.014 L1372.33 691.014 L1372.89 691.014 L1373.45 691.014 L1374.01 691.014 L1374.57 691.014 L1375.13 691.014 L1375.69 691.014 L1376.25 691.014 L1376.81 691.014 L1377.37 691.014 L1377.93 691.014 L1378.49 691.014 L1379.04 691.014 L1379.6 691.014 L1380.16 691.014 L1380.72 691.014 L1381.28 691.014 L1381.84 691.014 L1382.4 691.014 L1382.96 691.014 L1383.52 691.014 L1384.08 691.014 L1384.64 691.014 L1385.2 691.014 L1385.76 691.014 L1386.31 691.014 L1386.87 691.014 L1387.43 691.014 L1387.99 691.014 L1388.55 691.014 L1389.11 691.014 L1389.67 691.014 L1390.23 691.014 L1390.79 691.014 L1391.35 691.014 L1391.91 691.014 L1392.47 691.014 L1393.03 691.014 L1393.58 691.014 L1394.14 691.014 L1394.7 691.014 L1395.26 691.014 L1395.82 691.014 L1396.38 691.014 L1396.94 691.014 L1397.5 691.014 L1398.06 691.014 L1398.62 691.014 L1399.18 691.014 L1399.74 691.014 L1400.3 691.014 L1400.86 691.014 L1401.41 691.014 L1401.97 691.014 L1402.53 691.014 L1403.09 691.014 L1403.65 691.014 L1404.21 691.014 L1404.77 691.014 L1405.33 691.014 L1405.89 691.014 L1406.45 691.014 L1407.01 691.014 L1407.57 691.014 L1408.13 691.014 L1408.68 691.014 L1409.24 691.014 L1409.8 691.014 L1410.36 691.014 L1410.92 691.014 L1411.48 691.014 L1412.04 691.014 L1412.6 691.014 L1413.16 691.014 L1413.72 691.014 L1414.28 691.014 L1414.84 691.014 L1415.4 691.014 L1415.95 691.014 L1416.51 691.014 L1417.07 691.014 L1417.63 691.014 L1418.19 691.014 L1418.75 691.014 L1419.31 691.014 L1419.87 691.014 L1420.43 691.014 L1420.99 691.014 L1421.55 691.014 L1422.11 691.014 L1422.67 691.014 L1423.23 691.014 L1423.78 691.014 L1424.34 691.014 L1424.9 691.014 L1425.46 691.014 L1426.02 691.014 L1426.58 691.014 L1427.14 691.014 L1427.7 691.014 L1428.26 691.014 L1428.82 691.014 L1429.38 691.014 L1429.94 691.014 L1430.5 691.014 L1431.05 691.014 L1431.61 691.014 L1432.17 691.014 L1432.73 691.014 L1433.29 691.014 L1433.85 691.014 L1434.41 691.014 L1434.97 691.014 L1435.53 691.014 L1436.09 691.014 L1436.65 691.014 L1437.21 691.014 L1437.77 691.014 L1438.33 691.014 L1438.88 691.014 L1439.44 691.014 L1440 691.014 L1440.56 691.014 L1441.12 691.014 L1441.68 691.014 L1442.24 691.014 L1442.8 691.014 L1443.36 691.014 L1443.92 691.014 L1444.48 691.014 L1445.04 691.014 L1445.6 691.014 L1446.15 691.014 L1446.71 691.014 L1447.27 691.014 L1447.83 691.014 L1448.39 691.014 L1448.95 691.014 L1449.51 691.014 L1450.07 691.014 L1450.63 691.014 L1451.19 691.014 L1451.75 691.014 L1452.31 691.014 L1452.87 691.014 L1453.42 691.014 L1453.98 691.014 L1454.54 691.014 L1455.1 691.014 L1455.66 691.014 L1456.22 691.014 L1456.78 691.014 L1457.34 691.014 L1457.9 691.014 L1458.46 691.014 L1459.02 691.014 L1459.58 691.014 L1460.14 691.014 L1460.7 691.014 L1461.25 691.014 L1461.81 691.014 L1462.37 691.014 L1462.93 691.014 L1463.49 691.014 L1464.05 691.014 L1464.61 691.014 L1465.17 691.014 L1465.73 691.014 L1466.29 691.014 L1466.85 691.014 L1467.41 691.014 L1467.97 691.014 L1468.52 691.014 L1469.08 691.014 L1469.64 691.014 L1470.2 691.014 L1470.76 691.014 L1471.32 691.014 L1471.88 691.014 L1472.44 691.014 L1473 691.014 L1473.56 691.014 L1474.12 691.014 L1474.68 691.014 L1475.24 691.014 L1475.79 691.014 L1476.35 691.014 L1476.91 691.014 L1477.47 691.014 L1478.03 691.014 L1478.59 691.014 L1479.15 691.014 L1479.71 691.014 L1480.27 691.014 L1480.83 691.014 L1481.39 691.014 L1481.95 691.014 L1482.51 691.014 L1483.07 691.014 L1483.62 691.014 L1484.18 691.014 L1484.74 691.014 L1485.3 691.014 L1485.86 691.014 L1486.42 691.014 L1486.98 691.014 L1487.54 691.014 L1488.1 691.014 L1488.66 691.014 L1489.22 691.014 L1489.78 691.014 L1490.34 691.014 L1490.89 691.014 L1491.45 691.014 L1492.01 691.014 L1492.57 691.014 L1493.13 691.014 L1493.69 691.014 L1494.25 691.014 L1494.81 691.014 L1495.37 691.014 L1495.93 691.014 L1496.49 691.014 L1497.05 691.014 L1497.61 691.014 L1498.16 691.014 L1498.72 691.014 L1499.28 691.014 L1499.84 691.014 L1500.4 691.014 L1500.96 691.014 L1501.52 691.014 L1502.08 691.014 L1502.64 691.014 L1503.2 691.014 L1503.76 691.014 L1504.32 691.014 L1504.88 691.014 L1505.44 691.014 L1505.99 691.014 L1506.55 691.014 L1507.11 691.014 L1507.67 691.014 L1508.23 691.014 L1508.79 691.014 L1509.35 691.014 L1509.91 691.014 L1510.47 691.014 L1511.03 691.014 L1511.59 691.014 L1512.15 691.014 L1512.71 691.014 L1513.26 691.014 L1513.82 691.014 L1514.38 691.014 L1514.94 691.014 L1515.5 691.014 L1516.06 691.014 L1516.62 691.014 L1517.18 691.014 L1517.74 691.014 L1518.3 691.014 L1518.86 691.014 L1519.42 691.014 L1519.98 691.014 L1520.53 691.014 L1521.09 691.014 L1521.65 691.014 L1522.21 691.014 L1522.77 691.014 L1523.33 691.014 L1523.89 691.014 L1524.45 691.014 L1525.01 691.014 L1525.57 691.014 L1526.13 691.014 L1526.69 691.014 L1527.25 691.014 L1527.81 691.014 L1528.36 691.014 L1528.92 691.014 L1529.48 691.014 L1530.04 691.014 L1530.6 691.014 L1531.16 691.014 L1531.72 691.014 L1532.28 691.014 L1532.84 691.014 L1533.4 691.014 L1533.96 691.014 L1534.52 691.014 L1535.08 691.014 L1535.63 691.014 L1536.19 691.014 L1536.75 691.014 L1537.31 691.014 L1537.87 691.014 L1538.43 691.014 L1538.99 691.014 L1539.55 691.014 L1540.11 691.014 L1540.67 691.014 L1541.23 691.014 L1541.79 691.014 L1542.35 691.014 L1542.9 691.014 L1543.46 691.014 L1544.02 691.014 L1544.58 691.014 L1545.14 691.014 L1545.7 691.014 L1546.26 691.014 L1546.82 691.014 L1547.38 691.014 L1547.94 691.014 L1548.5 691.014 L1549.06 691.014 L1549.62 691.014 L1550.18 691.014 L1550.73 691.014 L1551.29 691.014 L1551.85 691.014 L1552.41 691.014 L1552.97 691.014 L1553.53 691.014 L1554.09 691.014 L1554.65 691.014 L1555.21 691.014 L1555.77 691.014 L1556.33 691.014 L1556.89 691.014 L1557.45 691.014 L1558 691.014 L1558.56 691.014 L1559.12 691.014 L1559.68 691.014 L1560.24 691.014 L1560.8 691.014 L1561.36 691.014 L1561.92 691.014 L1562.48 691.014 L1563.04 691.014 L1563.6 691.014 L1564.16 691.014 L1564.72 691.014 L1565.28 691.014 L1565.83 691.014 L1566.39 691.014 L1566.95 691.014 L1567.51 691.014 L1568.07 691.014 L1568.63 691.014 L1569.19 691.014 L1569.75 691.014 L1570.31 691.014 L1570.87 691.014 L1571.43 691.014 L1571.99 691.014 L1572.55 691.014 L1573.1 691.014 L1573.66 691.014 L1574.22 691.014 L1574.78 691.014 L1575.34 691.014 L1575.9 691.014 L1576.46 691.014 L1577.02 691.014 L1577.58 691.014 L1578.14 691.014 L1578.7 691.014 L1579.26 691.014 L1579.82 691.014 L1580.37 691.014 L1580.93 691.014 L1581.49 691.014 L1582.05 691.014 L1582.61 691.014 L1583.17 691.014 L1583.73 691.014 L1584.29 691.014 L1584.85 691.014 L1585.41 691.014 L1585.97 691.014 L1586.53 691.014 L1587.09 691.014 L1587.65 691.014 L1588.2 691.014 L1588.76 691.014 L1589.32 691.014 L1589.88 691.014 L1590.44 691.014 L1591 691.014 L1591.56 691.014 L1592.12 691.014 L1592.68 691.014 L1593.24 691.014 L1593.8 691.014 L1594.36 691.014 L1594.92 691.014 L1595.47 691.014 L1596.03 691.014 L1596.59 691.014 L1597.15 691.014 L1597.71 691.014 L1598.27 691.014 L1598.83 691.014 L1599.39 691.014 L1599.95 691.014 L1600.51 691.014 L1601.07 691.014 L1601.63 691.014 L1602.19 691.014 L1602.74 691.014 L1603.3 691.014 L1603.86 691.014 L1604.42 691.014 L1604.98 691.014 L1605.54 691.014 L1606.1 691.014 L1606.66 691.014 L1607.22 691.014 L1607.78 691.014 L1608.34 691.014 L1608.9 691.014 L1609.46 691.014 L1610.02 691.014 L1610.57 691.014 L1611.13 691.014 L1611.69 691.014 L1612.25 691.014 L1612.81 691.014 L1613.37 691.014 L1613.93 691.014 L1614.49 691.014 L1615.05 691.014 L1615.61 691.014 L1616.17 691.014 L1616.73 691.014 L1617.29 691.014 L1617.84 691.014 L1618.4 691.014 L1618.96 691.014 L1619.52 691.014 L1620.08 691.014 L1620.64 691.014 L1621.2 691.014 L1621.76 691.014 L1622.32 691.014 L1622.88 691.014 L1623.44 691.014 L1624 691.014 L1624.56 691.014 L1625.11 691.014 L1625.67 691.014 L1626.23 691.014 L1626.79 691.014 L1627.35 691.014 L1627.91 691.014 L1628.47 691.014 L1629.03 691.014 L1629.59 691.014 L1630.15 691.014 L1630.71 691.014 L1631.27 691.014 L1631.83 691.014 L1632.39 691.014 L1632.94 691.014 L1633.5 691.014 L1634.06 691.014 L1634.62 691.014 L1635.18 691.014 L1635.74 691.014 L1636.3 691.014 L1636.86 691.014 L1637.42 691.014 L1637.98 691.014 L1638.54 691.014 L1639.1 691.014 L1639.66 691.014 L1640.21 691.014 L1640.77 691.014 L1641.33 691.014 L1641.89 691.014 L1642.45 691.014 L1643.01 691.014 L1643.57 691.014 L1644.13 691.014 L1644.69 691.014 L1645.25 691.014 L1645.81 691.014 L1646.37 691.014 L1646.93 691.014 L1647.48 691.014 L1648.04 691.014 L1648.6 691.014 L1649.16 691.014 L1649.72 691.014 L1650.28 691.014 L1650.84 691.014 L1651.4 691.014 L1651.96 691.014 L1652.52 691.014 L1653.08 691.014 L1653.64 691.014 L1654.2 691.014 L1654.76 691.014 L1655.31 691.014 L1655.87 691.014 L1656.43 691.014 L1656.99 691.014 L1657.55 691.014 L1658.11 691.014 L1658.67 691.014 L1659.23 691.014 L1659.79 691.014 L1660.35 691.014 L1660.91 691.014 L1661.47 691.014 L1662.03 691.014 L1662.58 691.014 L1663.14 691.014 L1663.7 691.014 L1664.26 691.014 L1664.82 691.014 L1665.38 691.014 L1665.94 691.014 L1666.5 691.014 L1667.06 691.014 L1667.62 691.014 L1668.18 691.014 L1668.74 691.014 L1669.3 691.014 L1669.85 691.014 L1670.41 691.014 L1670.97 691.014 L1671.53 691.014 L1672.09 691.014 L1672.65 691.014 L1673.21 691.014 L1673.77 691.014 L1674.33 691.014 L1674.89 691.014 L1675.45 691.014 L1676.01 691.014 L1676.57 691.014 L1677.13 691.014 L1677.68 691.014 L1678.24 691.014 L1678.8 691.014 L1679.36 691.014 L1679.92 691.014 L1680.48 691.014 L1681.04 691.014 L1681.6 691.014 L1682.16 691.014 L1682.72 691.014 L1683.28 691.014 L1683.84 691.014 L1684.4 691.014 L1684.95 691.014 L1685.51 691.014 L1686.07 691.014 L1686.63 691.014 L1687.19 691.014 L1687.75 691.014 L1688.31 691.014 L1688.87 691.014 L1689.43 691.014 L1689.99 691.014 L1690.55 691.014 L1691.11 691.014 L1691.67 691.014 L1692.23 691.014 L1692.78 691.014 L1693.34 691.014 L1693.9 691.014 L1694.46 691.014 L1695.02 691.014 L1695.58 691.014 L1696.14 691.014 L1696.7 691.014 L1697.26 691.014 L1697.82 691.014 L1698.38 691.014 L1698.94 691.014 L1699.5 691.014 L1700.05 691.014 L1700.61 691.014 L1701.17 691.014 L1701.73 691.014 L1702.29 691.014 L1702.85 691.014 L1703.41 691.014 L1703.97 691.014 L1704.53 691.014 L1705.09 691.014 L1705.65 691.014 L1706.21 691.014 L1706.77 691.014 L1707.32 691.014 L1707.88 691.014 L1708.44 691.014 L1709 691.014 L1709.56 691.014 L1710.12 691.014 L1710.68 691.014 L1711.24 691.014 L1711.8 691.014 L1712.36 691.014 L1712.92 691.014 L1713.48 691.014 L1714.04 691.014 L1714.6 691.014 L1715.15 691.014 L1715.71 691.014 L1716.27 691.014 L1716.83 691.014 L1717.39 691.014 L1717.95 691.014 L1718.51 691.014 L1719.07 691.014 L1719.63 691.014 L1720.19 691.014 L1720.75 691.014 L1721.31 691.014 L1721.87 691.014 L1722.42 691.014 L1722.98 691.014 L1723.54 691.014 L1724.1 691.014 L1724.66 691.014 L1725.22 691.014 L1725.78 691.014 L1726.34 691.014 L1726.9 691.014 L1727.46 691.014 L1728.02 691.014 L1728.58 691.014 L1729.14 691.014 L1729.69 691.014 L1730.25 691.014 L1730.81 691.014 L1731.37 691.014 L1731.93 691.014 L1732.49 691.014 L1733.05 691.014 L1733.61 691.014 L1734.17 691.014 L1734.73 691.014 L1735.29 691.014 L1735.85 691.014 L1736.41 691.014 L1736.97 691.014 L1737.52 691.014 L1738.08 691.014 L1738.64 691.014 L1739.2 691.014 L1739.76 691.014 L1740.32 691.014 L1740.88 691.014 L1741.44 691.014 L1742 691.014 L1742.56 691.014 L1743.12 691.014 L1743.68 691.014 L1744.24 691.014 L1744.79 691.014 L1745.35 691.014 L1745.91 691.014 L1746.47 691.014 L1747.03 691.014 L1747.59 691.014 L1748.15 691.014 L1748.71 691.014 L1749.27 691.014 L1749.83 691.014 L1750.39 691.014 L1750.95 691.014 L1751.51 691.014 L1752.06 691.014 L1752.62 691.014 L1753.18 691.014 L1753.74 691.014 L1754.3 691.014 L1754.86 691.014 L1755.42 691.014 L1755.98 691.014 L1756.54 691.014 L1757.1 691.014 L1757.66 691.014 L1758.22 691.014 L1758.78 691.014 L1759.34 691.014 L1759.89 691.014 L1760.45 691.014 L1761.01 691.014 L1761.57 691.014 L1762.13 691.014 L1762.69 691.014 L1763.25 691.014 L1763.81 691.014 L1764.37 691.014 L1764.93 691.014 L1765.49 691.014 L1766.05 691.014 L1766.61 691.014 L1767.16 691.014 L1767.72 691.014 L1768.28 691.014 L1768.84 691.014 L1769.4 691.014 L1769.96 691.014 L1770.52 691.014 L1771.08 691.014 L1771.64 691.014 L1772.2 691.014 L1772.76 691.014 L1773.32 691.014 L1773.88 691.014 L1774.43 691.014 L1774.99 691.014 L1775.55 691.014 L1776.11 691.014 L1776.67 691.014 L1777.23 691.014 L1777.79 691.014 L1778.35 691.014 L1778.91 691.014 L1779.47 691.014 L1780.03 691.014 L1780.59 691.014 L1781.15 691.014 L1781.71 691.014 L1782.26 691.014 L1782.82 691.014 L1783.38 691.014 L1783.94 691.014 L1784.5 691.014 L1785.06 691.014 L1785.62 691.014 L1786.18 691.014 L1786.74 691.014 L1787.3 691.014 L1787.86 691.014 L1788.42 691.014 L1788.98 691.014 L1789.53 691.014 L1790.09 691.014 L1790.65 691.014 L1791.21 691.014 L1791.77 691.014 L1792.33 691.014 L1792.89 691.014 L1793.45 691.014 L1794.01 691.014 L1794.57 691.014 L1795.13 691.014 L1795.69 691.014 L1796.25 691.014 L1796.8 691.014 L1797.36 691.014 L1797.92 691.014 L1798.48 691.014 L1799.04 691.014 L1799.6 691.014 L1800.16 691.014 L1800.72 691.014 L1801.28 691.014 L1801.84 691.014 L1802.4 691.014 L1802.96 691.014 L1803.52 691.014 L1804.08 691.014 L1804.63 691.014 L1805.19 691.014 L1805.75 691.014 L1806.31 691.014 L1806.87 691.014 L1807.43 691.014 L1807.99 691.014 L1808.55 691.014 L1809.11 691.014 L1809.67 691.014 L1810.23 691.014 L1810.79 691.014 L1811.35 691.014 L1811.9 691.014 L1812.46 691.014 L1813.02 691.014 L1813.58 691.014 L1814.14 691.014 L1814.7 691.014 L1815.26 691.014 L1815.82 691.014 L1816.38 691.014 L1816.94 691.014 L1817.5 691.014 L1818.06 691.014 L1818.62 691.014 L1819.18 691.014 L1819.73 691.014 L1820.29 691.014 L1820.85 691.014 L1821.41 691.014 L1821.97 691.014 L1822.53 691.014 L1823.09 691.014 L1823.65 691.014 L1824.21 691.014 L1824.77 691.014 L1825.33 691.014 L1825.89 691.014 L1826.45 691.014 L1827 691.014 L1827.56 691.014 L1828.12 691.014 L1828.68 691.014 L1829.24 691.014 L1829.8 691.014 L1830.36 691.014 L1830.92 691.014 L1831.48 691.014 L1832.04 691.014 L1832.6 691.014 L1833.16 691.014 L1833.72 691.014 L1834.27 691.014 L1834.83 691.014 L1835.39 691.014 L1835.95 691.014 L1836.51 691.014 L1837.07 691.014 L1837.63 691.014 L1838.19 691.014 L1838.19 681.975 L1837.63 681.975 L1837.07 681.975 L1836.51 681.975 L1835.95 681.975 L1835.39 681.975 L1834.83 681.975 L1834.27 681.975 L1833.72 681.975 L1833.16 681.975 L1832.6 681.975 L1832.04 681.975 L1831.48 681.975 L1830.92 681.975 L1830.36 681.975 L1829.8 681.975 L1829.24 681.975 L1828.68 681.975 L1828.12 681.975 L1827.56 681.975 L1827 681.975 L1826.45 681.975 L1825.89 681.975 L1825.33 681.975 L1824.77 681.975 L1824.21 681.975 L1823.65 681.975 L1823.09 681.975 L1822.53 681.975 L1821.97 681.975 L1821.41 681.975 L1820.85 681.975 L1820.29 681.975 L1819.73 681.975 L1819.18 681.975 L1818.62 681.975 L1818.06 681.975 L1817.5 681.975 L1816.94 681.975 L1816.38 681.975 L1815.82 681.975 L1815.26 681.975 L1814.7 681.975 L1814.14 681.975 L1813.58 681.975 L1813.02 681.975 L1812.46 681.975 L1811.9 681.975 L1811.35 681.975 L1810.79 681.975 L1810.23 681.975 L1809.67 681.975 L1809.11 681.975 L1808.55 681.975 L1807.99 681.975 L1807.43 681.975 L1806.87 681.975 L1806.31 681.975 L1805.75 681.975 L1805.19 681.975 L1804.63 681.975 L1804.08 681.975 L1803.52 681.975 L1802.96 681.975 L1802.4 681.975 L1801.84 681.975 L1801.28 681.975 L1800.72 681.975 L1800.16 681.975 L1799.6 681.975 L1799.04 681.975 L1798.48 681.975 L1797.92 681.975 L1797.36 681.975 L1796.8 681.975 L1796.25 681.975 L1795.69 681.975 L1795.13 681.975 L1794.57 681.975 L1794.01 681.975 L1793.45 681.975 L1792.89 681.975 L1792.33 681.975 L1791.77 681.975 L1791.21 681.975 L1790.65 681.975 L1790.09 681.975 L1789.53 681.975 L1788.98 681.975 L1788.42 681.975 L1787.86 681.975 L1787.3 681.975 L1786.74 681.975 L1786.18 681.975 L1785.62 681.975 L1785.06 681.975 L1784.5 681.975 L1783.94 681.975 L1783.38 681.975 L1782.82 681.975 L1782.26 681.975 L1781.71 681.975 L1781.15 681.975 L1780.59 681.975 L1780.03 681.975 L1779.47 681.975 L1778.91 681.975 L1778.35 681.975 L1777.79 681.975 L1777.23 681.975 L1776.67 681.975 L1776.11 681.975 L1775.55 681.975 L1774.99 681.975 L1774.43 681.975 L1773.88 681.975 L1773.32 681.975 L1772.76 681.975 L1772.2 681.975 L1771.64 681.975 L1771.08 681.975 L1770.52 681.975 L1769.96 681.975 L1769.4 681.975 L1768.84 681.975 L1768.28 681.975 L1767.72 681.975 L1767.16 681.975 L1766.61 681.975 L1766.05 681.975 L1765.49 681.975 L1764.93 681.975 L1764.37 681.975 L1763.81 681.975 L1763.25 681.975 L1762.69 681.975 L1762.13 681.975 L1761.57 681.975 L1761.01 681.975 L1760.45 681.975 L1759.89 681.975 L1759.34 681.975 L1758.78 681.975 L1758.22 681.975 L1757.66 681.975 L1757.1 681.975 L1756.54 681.975 L1755.98 681.975 L1755.42 681.975 L1754.86 681.975 L1754.3 681.975 L1753.74 681.975 L1753.18 681.975 L1752.62 681.975 L1752.06 681.975 L1751.51 681.975 L1750.95 681.975 L1750.39 681.975 L1749.83 681.975 L1749.27 681.975 L1748.71 681.975 L1748.15 681.975 L1747.59 681.975 L1747.03 681.975 L1746.47 681.975 L1745.91 681.975 L1745.35 681.975 L1744.79 681.975 L1744.24 681.975 L1743.68 681.975 L1743.12 681.975 L1742.56 681.975 L1742 681.975 L1741.44 681.975 L1740.88 681.975 L1740.32 681.975 L1739.76 681.975 L1739.2 681.975 L1738.64 681.975 L1738.08 681.975 L1737.52 681.975 L1736.97 681.975 L1736.41 681.975 L1735.85 681.975 L1735.29 681.975 L1734.73 681.975 L1734.17 681.975 L1733.61 681.975 L1733.05 681.975 L1732.49 681.975 L1731.93 681.975 L1731.37 681.975 L1730.81 681.975 L1730.25 681.975 L1729.69 681.975 L1729.14 681.975 L1728.58 681.975 L1728.02 681.975 L1727.46 681.975 L1726.9 681.975 L1726.34 681.975 L1725.78 681.975 L1725.22 681.975 L1724.66 681.975 L1724.1 681.975 L1723.54 681.975 L1722.98 681.975 L1722.42 681.975 L1721.87 681.975 L1721.31 681.975 L1720.75 681.975 L1720.19 681.975 L1719.63 681.975 L1719.07 681.975 L1718.51 681.975 L1717.95 681.975 L1717.39 681.975 L1716.83 681.975 L1716.27 681.975 L1715.71 681.975 L1715.15 681.975 L1714.6 681.975 L1714.04 681.975 L1713.48 681.975 L1712.92 681.975 L1712.36 681.975 L1711.8 681.975 L1711.24 681.975 L1710.68 681.975 L1710.12 681.975 L1709.56 681.975 L1709 681.975 L1708.44 681.975 L1707.88 681.975 L1707.32 681.975 L1706.77 681.975 L1706.21 681.975 L1705.65 681.975 L1705.09 681.975 L1704.53 681.975 L1703.97 681.975 L1703.41 681.975 L1702.85 681.975 L1702.29 681.975 L1701.73 681.975 L1701.17 681.975 L1700.61 681.975 L1700.05 681.975 L1699.5 681.975 L1698.94 681.975 L1698.38 681.975 L1697.82 681.975 L1697.26 681.975 L1696.7 681.975 L1696.14 681.975 L1695.58 681.975 L1695.02 681.975 L1694.46 681.975 L1693.9 681.975 L1693.34 681.975 L1692.78 681.975 L1692.23 681.975 L1691.67 681.975 L1691.11 681.975 L1690.55 681.975 L1689.99 681.975 L1689.43 681.975 L1688.87 681.975 L1688.31 681.975 L1687.75 681.975 L1687.19 681.975 L1686.63 681.975 L1686.07 681.975 L1685.51 681.975 L1684.95 681.975 L1684.4 681.975 L1683.84 681.975 L1683.28 681.975 L1682.72 681.975 L1682.16 681.975 L1681.6 681.975 L1681.04 681.975 L1680.48 681.975 L1679.92 681.975 L1679.36 681.975 L1678.8 681.975 L1678.24 681.975 L1677.68 681.975 L1677.13 681.975 L1676.57 681.975 L1676.01 681.975 L1675.45 681.975 L1674.89 681.975 L1674.33 681.975 L1673.77 681.975 L1673.21 681.975 L1672.65 681.975 L1672.09 681.975 L1671.53 681.975 L1670.97 681.975 L1670.41 681.975 L1669.85 681.975 L1669.3 681.975 L1668.74 681.975 L1668.18 681.975 L1667.62 681.975 L1667.06 681.975 L1666.5 681.975 L1665.94 681.975 L1665.38 681.975 L1664.82 681.975 L1664.26 681.975 L1663.7 681.975 L1663.14 681.975 L1662.58 681.975 L1662.03 681.975 L1661.47 681.975 L1660.91 681.975 L1660.35 681.975 L1659.79 681.975 L1659.23 681.975 L1658.67 681.975 L1658.11 681.975 L1657.55 681.975 L1656.99 681.975 L1656.43 681.975 L1655.87 681.975 L1655.31 681.975 L1654.76 681.975 L1654.2 681.975 L1653.64 681.975 L1653.08 681.975 L1652.52 681.975 L1651.96 681.975 L1651.4 681.975 L1650.84 681.975 L1650.28 681.975 L1649.72 681.975 L1649.16 681.975 L1648.6 681.975 L1648.04 681.975 L1647.48 681.975 L1646.93 681.975 L1646.37 681.975 L1645.81 681.975 L1645.25 681.975 L1644.69 681.975 L1644.13 681.975 L1643.57 681.975 L1643.01 681.975 L1642.45 681.975 L1641.89 681.975 L1641.33 681.975 L1640.77 681.975 L1640.21 681.975 L1639.66 681.975 L1639.1 681.975 L1638.54 681.975 L1637.98 681.975 L1637.42 681.975 L1636.86 681.975 L1636.3 681.975 L1635.74 681.975 L1635.18 681.975 L1634.62 681.975 L1634.06 681.975 L1633.5 681.975 L1632.94 681.975 L1632.39 681.975 L1631.83 681.975 L1631.27 681.975 L1630.71 681.975 L1630.15 681.975 L1629.59 681.975 L1629.03 681.975 L1628.47 681.975 L1627.91 681.975 L1627.35 681.975 L1626.79 681.975 L1626.23 681.975 L1625.67 681.975 L1625.11 681.975 L1624.56 681.975 L1624 681.975 L1623.44 681.975 L1622.88 681.975 L1622.32 681.975 L1621.76 681.975 L1621.2 681.975 L1620.64 681.975 L1620.08 681.975 L1619.52 681.975 L1618.96 681.975 L1618.4 681.975 L1617.84 681.975 L1617.29 681.975 L1616.73 681.975 L1616.17 681.975 L1615.61 681.975 L1615.05 681.975 L1614.49 681.975 L1613.93 681.975 L1613.37 681.975 L1612.81 681.975 L1612.25 681.975 L1611.69 681.975 L1611.13 681.975 L1610.57 681.975 L1610.02 681.975 L1609.46 681.975 L1608.9 681.975 L1608.34 681.975 L1607.78 681.975 L1607.22 681.975 L1606.66 681.975 L1606.1 681.975 L1605.54 681.975 L1604.98 681.975 L1604.42 681.975 L1603.86 681.975 L1603.3 681.975 L1602.74 681.975 L1602.19 681.975 L1601.63 681.975 L1601.07 681.975 L1600.51 681.975 L1599.95 681.975 L1599.39 681.975 L1598.83 681.975 L1598.27 681.975 L1597.71 681.975 L1597.15 681.975 L1596.59 681.975 L1596.03 681.975 L1595.47 681.975 L1594.92 681.975 L1594.36 681.975 L1593.8 681.975 L1593.24 681.975 L1592.68 681.975 L1592.12 681.975 L1591.56 681.975 L1591 681.975 L1590.44 681.975 L1589.88 681.975 L1589.32 681.975 L1588.76 681.975 L1588.2 681.975 L1587.65 681.975 L1587.09 681.975 L1586.53 681.975 L1585.97 681.975 L1585.41 681.975 L1584.85 681.975 L1584.29 681.975 L1583.73 681.975 L1583.17 681.975 L1582.61 681.975 L1582.05 681.975 L1581.49 681.975 L1580.93 681.975 L1580.37 681.975 L1579.82 681.975 L1579.26 681.975 L1578.7 681.975 L1578.14 681.975 L1577.58 681.975 L1577.02 681.975 L1576.46 681.975 L1575.9 681.975 L1575.34 681.975 L1574.78 681.975 L1574.22 681.975 L1573.66 681.975 L1573.1 681.975 L1572.55 681.975 L1571.99 681.975 L1571.43 681.975 L1570.87 681.975 L1570.31 681.975 L1569.75 681.975 L1569.19 681.975 L1568.63 681.975 L1568.07 681.975 L1567.51 681.975 L1566.95 681.975 L1566.39 681.975 L1565.83 681.975 L1565.28 681.975 L1564.72 681.975 L1564.16 681.975 L1563.6 681.975 L1563.04 681.975 L1562.48 681.975 L1561.92 681.975 L1561.36 681.975 L1560.8 681.975 L1560.24 681.975 L1559.68 681.975 L1559.12 681.975 L1558.56 681.975 L1558 681.975 L1557.45 681.975 L1556.89 681.975 L1556.33 681.975 L1555.77 681.975 L1555.21 681.975 L1554.65 681.975 L1554.09 681.975 L1553.53 681.975 L1552.97 681.975 L1552.41 681.975 L1551.85 681.975 L1551.29 681.975 L1550.73 681.975 L1550.18 681.975 L1549.62 681.975 L1549.06 681.975 L1548.5 681.975 L1547.94 681.975 L1547.38 681.975 L1546.82 681.975 L1546.26 681.975 L1545.7 681.975 L1545.14 681.975 L1544.58 681.975 L1544.02 681.975 L1543.46 681.975 L1542.9 681.975 L1542.35 681.975 L1541.79 681.975 L1541.23 681.975 L1540.67 681.975 L1540.11 681.975 L1539.55 681.975 L1538.99 681.975 L1538.43 681.975 L1537.87 681.975 L1537.31 681.975 L1536.75 681.975 L1536.19 681.975 L1535.63 681.975 L1535.08 681.975 L1534.52 681.975 L1533.96 681.975 L1533.4 681.975 L1532.84 681.975 L1532.28 681.975 L1531.72 681.975 L1531.16 681.975 L1530.6 681.975 L1530.04 681.975 L1529.48 681.975 L1528.92 681.975 L1528.36 681.975 L1527.81 681.975 L1527.25 681.975 L1526.69 681.975 L1526.13 681.975 L1525.57 681.975 L1525.01 681.975 L1524.45 681.975 L1523.89 681.975 L1523.33 681.975 L1522.77 681.975 L1522.21 681.975 L1521.65 681.975 L1521.09 681.975 L1520.53 681.975 L1519.98 681.975 L1519.42 681.975 L1518.86 681.975 L1518.3 681.975 L1517.74 681.975 L1517.18 681.975 L1516.62 681.975 L1516.06 681.975 L1515.5 681.975 L1514.94 681.975 L1514.38 681.975 L1513.82 681.975 L1513.26 681.975 L1512.71 681.975 L1512.15 681.975 L1511.59 681.975 L1511.03 681.975 L1510.47 681.975 L1509.91 681.975 L1509.35 681.975 L1508.79 681.975 L1508.23 681.975 L1507.67 681.975 L1507.11 681.975 L1506.55 681.975 L1505.99 681.975 L1505.44 681.975 L1504.88 681.975 L1504.32 681.975 L1503.76 681.975 L1503.2 681.975 L1502.64 681.975 L1502.08 681.975 L1501.52 681.975 L1500.96 681.975 L1500.4 681.975 L1499.84 681.975 L1499.28 681.975 L1498.72 681.975 L1498.16 681.975 L1497.61 681.975 L1497.05 681.975 L1496.49 681.975 L1495.93 681.975 L1495.37 681.975 L1494.81 681.975 L1494.25 681.975 L1493.69 681.975 L1493.13 681.975 L1492.57 681.975 L1492.01 681.975 L1491.45 681.975 L1490.89 681.975 L1490.34 681.975 L1489.78 681.975 L1489.22 681.975 L1488.66 681.975 L1488.1 681.975 L1487.54 681.975 L1486.98 681.975 L1486.42 681.975 L1485.86 681.975 L1485.3 681.975 L1484.74 681.975 L1484.18 681.975 L1483.62 681.975 L1483.07 681.975 L1482.51 681.975 L1481.95 681.975 L1481.39 681.975 L1480.83 681.975 L1480.27 681.975 L1479.71 681.975 L1479.15 681.975 L1478.59 681.975 L1478.03 681.975 L1477.47 681.975 L1476.91 681.975 L1476.35 681.975 L1475.79 681.975 L1475.24 681.975 L1474.68 681.975 L1474.12 681.975 L1473.56 681.975 L1473 681.975 L1472.44 681.975 L1471.88 681.975 L1471.32 681.975 L1470.76 681.975 L1470.2 681.975 L1469.64 681.975 L1469.08 681.975 L1468.52 681.975 L1467.97 681.975 L1467.41 681.975 L1466.85 681.975 L1466.29 681.975 L1465.73 681.975 L1465.17 681.975 L1464.61 681.975 L1464.05 681.975 L1463.49 681.975 L1462.93 681.975 L1462.37 681.975 L1461.81 681.975 L1461.25 681.975 L1460.7 681.975 L1460.14 681.975 L1459.58 681.975 L1459.02 681.975 L1458.46 681.975 L1457.9 681.975 L1457.34 681.975 L1456.78 681.975 L1456.22 681.975 L1455.66 681.975 L1455.1 681.975 L1454.54 681.975 L1453.98 681.975 L1453.42 681.975 L1452.87 681.975 L1452.31 681.975 L1451.75 681.975 L1451.19 681.975 L1450.63 681.975 L1450.07 681.975 L1449.51 681.975 L1448.95 681.975 L1448.39 681.975 L1447.83 681.975 L1447.27 681.975 L1446.71 681.975 L1446.15 681.975 L1445.6 681.975 L1445.04 681.975 L1444.48 681.975 L1443.92 681.975 L1443.36 681.975 L1442.8 681.975 L1442.24 681.975 L1441.68 681.975 L1441.12 681.975 L1440.56 681.975 L1440 681.975 L1439.44 681.975 L1438.88 681.975 L1438.33 681.975 L1437.77 681.975 L1437.21 681.975 L1436.65 681.975 L1436.09 681.975 L1435.53 681.975 L1434.97 681.975 L1434.41 681.975 L1433.85 681.975 L1433.29 681.975 L1432.73 681.975 L1432.17 681.975 L1431.61 681.975 L1431.05 681.975 L1430.5 681.975 L1429.94 681.975 L1429.38 681.975 L1428.82 681.975 L1428.26 681.975 L1427.7 681.975 L1427.14 681.975 L1426.58 681.975 L1426.02 681.975 L1425.46 681.975 L1424.9 681.975 L1424.34 681.975 L1423.78 681.975 L1423.23 681.975 L1422.67 681.975 L1422.11 681.975 L1421.55 681.975 L1420.99 681.975 L1420.43 681.975 L1419.87 681.975 L1419.31 681.975 L1418.75 681.975 L1418.19 681.975 L1417.63 681.975 L1417.07 681.975 L1416.51 681.975 L1415.95 681.975 L1415.4 681.975 L1414.84 681.975 L1414.28 681.975 L1413.72 681.975 L1413.16 681.975 L1412.6 681.975 L1412.04 681.975 L1411.48 681.975 L1410.92 681.975 L1410.36 681.975 L1409.8 681.975 L1409.24 681.975 L1408.68 681.975 L1408.13 681.975 L1407.57 681.975 L1407.01 681.975 L1406.45 681.975 L1405.89 681.975 L1405.33 681.975 L1404.77 681.975 L1404.21 681.975 L1403.65 681.975 L1403.09 681.975 L1402.53 681.975 L1401.97 681.975 L1401.41 681.975 L1400.86 681.975 L1400.3 681.975 L1399.74 681.975 L1399.18 681.975 L1398.62 681.975 L1398.06 681.975 L1397.5 681.975 L1396.94 681.975 L1396.38 681.975 L1395.82 681.975 L1395.26 681.975 L1394.7 681.975 L1394.14 681.975 L1393.58 681.975 L1393.03 681.975 L1392.47 681.975 L1391.91 681.975 L1391.35 681.975 L1390.79 681.975 L1390.23 681.975 L1389.67 681.975 L1389.11 681.975 L1388.55 681.975 L1387.99 681.975 L1387.43 681.975 L1386.87 681.975 L1386.31 681.975 L1385.76 681.975 L1385.2 681.975 L1384.64 681.975 L1384.08 681.975 L1383.52 681.975 L1382.96 681.975 L1382.4 681.975 L1381.84 681.975 L1381.28 681.975 L1380.72 681.975 L1380.16 681.975 L1379.6 681.975 L1379.04 681.975 L1378.49 681.975 L1377.93 681.975 L1377.37 681.975 L1376.81 681.975 L1376.25 681.975 L1375.69 681.975 L1375.13 681.975 L1374.57 681.975 L1374.01 681.975 L1373.45 681.975 L1372.89 681.975 L1372.33 681.975 L1371.77 681.975 L1371.21 681.975 L1370.66 681.975 L1370.1 681.975 L1369.54 681.975 L1368.98 681.975 L1368.42 681.975 L1367.86 681.975 L1367.3 681.975 L1366.74 681.975 L1366.18 681.975 L1365.62 681.975 L1365.06 681.975 L1364.5 681.975 L1363.94 681.975 L1363.39 681.975 L1362.83 681.975 L1362.27 681.975 L1361.71 681.975 L1361.15 681.975 L1360.59 681.975 L1360.03 681.975 L1359.47 681.975 L1358.91 681.975 L1358.35 681.975 L1357.79 681.975 L1357.23 681.975 L1356.67 681.975 L1356.12 681.975 L1355.56 681.975 L1355 681.975 L1354.44 681.975 L1353.88 681.975 L1353.32 681.975 L1352.76 681.975 L1352.2 681.975 L1351.64 681.975 L1351.08 681.975 L1350.52 681.975 L1349.96 681.975 L1349.4 681.975 L1348.84 681.975 L1348.29 681.975 L1347.73 681.975 L1347.17 681.975 L1346.61 681.975 L1346.05 681.975 L1345.49 681.975 L1344.93 681.975 L1344.37 681.975 L1343.81 681.975 L1343.25 681.975 L1342.69 681.975 L1342.13 681.975 L1341.57 681.975 L1341.02 681.975 L1340.46 681.975 L1339.9 681.975 L1339.34 681.975 L1338.78 681.975 L1338.22 681.975 L1337.66 681.975 L1337.1 681.975 L1336.54 681.975 L1335.98 681.975 L1335.42 681.975 L1334.86 681.975 L1334.3 681.975 L1333.75 681.975 L1333.19 681.975 L1332.63 681.975 L1332.07 681.975 L1331.51 681.975 L1330.95 681.975 L1330.39 681.975 L1329.83 681.975 L1329.27 681.975 L1328.71 681.975 L1328.15 681.975 L1327.59 681.975 L1327.03 681.975 L1326.47 681.975 L1325.92 681.975 L1325.36 681.975 L1324.8 681.975 L1324.24 681.975 L1323.68 681.975 L1323.12 681.975 L1322.56 681.975 L1322 681.975 L1321.44 681.975 L1320.88 681.975 L1320.32 681.975 L1319.76 681.975 L1319.2 681.975 L1318.65 681.975 L1318.09 681.975 L1317.53 681.975 L1316.97 681.975 L1316.41 681.975 L1315.85 681.975 L1315.29 681.975 L1314.73 681.975 L1314.17 681.975 L1313.61 681.975 L1313.05 681.975 L1312.49 681.975 L1311.93 681.975 L1311.38 681.975 L1310.82 681.975 L1310.26 681.975 L1309.7 681.975 L1309.14 681.975 L1308.58 681.975 L1308.02 681.975 L1307.46 681.975 L1306.9 681.975 L1306.34 681.975 L1305.78 681.975 L1305.22 681.975 L1304.66 681.975 L1304.1 681.975 L1303.55 681.975 L1302.99 681.975 L1302.43 681.975 L1301.87 681.975 L1301.31 681.975 L1300.75 681.975 L1300.19 681.975 L1299.63 681.975 L1299.07 681.975 L1298.51 681.975 L1297.95 681.975 L1297.39 681.975 L1296.83 681.975 L1296.28 681.975 L1295.72 681.975 L1295.16 681.975 L1294.6 681.975 L1294.04 681.975 L1293.48 681.975 L1292.92 681.975 L1292.36 681.975 L1291.8 681.975 L1291.24 681.975 L1290.68 681.975 L1290.12 681.975 L1289.56 681.975 L1289 681.975 L1288.45 681.975 L1287.89 681.975 L1287.33 681.975 L1286.77 681.975 L1286.21 681.975 L1285.65 681.975 L1285.09 681.975 L1284.53 681.975 L1283.97 681.975 L1283.41 681.975 L1282.85 681.975 L1282.29 681.975 L1281.73 681.975 L1281.18 681.975 L1280.62 681.975 L1280.06 681.975 L1279.5 681.975 L1278.94 681.975 L1278.38 681.975 L1277.82 681.975 L1277.26 681.975 L1276.7 681.975 L1276.14 681.975 L1275.58 681.975 L1275.02 681.975 L1274.46 681.975 L1273.91 681.975 L1273.35 681.975 L1272.79 681.975 L1272.23 681.975 L1271.67 681.975 L1271.11 681.975 L1270.55 681.975 L1269.99 681.975 L1269.43 681.975 L1268.87 681.975 L1268.31 681.975 L1267.75 681.975 L1267.19 681.975 L1266.63 681.975 L1266.08 681.975 L1265.52 681.975 L1264.96 681.975 L1264.4 681.975 L1263.84 681.975 L1263.28 681.975 L1262.72 681.975 L1262.16 681.975 L1261.6 681.975 L1261.04 681.975 L1260.48 681.975 L1259.92 681.975 L1259.36 681.975 L1258.81 681.975 L1258.25 681.975 L1257.69 681.975 L1257.13 681.975 L1256.57 681.975 L1256.01 681.975 L1255.45 681.975 L1254.89 681.975 L1254.33 681.975 L1253.77 681.975 L1253.21 681.975 L1252.65 681.975 L1252.09 681.975 L1251.54 681.975 L1250.98 681.975 L1250.42 681.975 L1249.86 681.975 L1249.3 681.975 L1248.74 681.975 L1248.18 681.975 L1247.62 681.975 L1247.06 681.975 L1246.5 681.975 L1245.94 681.975 L1245.38 681.975 L1244.82 681.975 L1244.26 681.975 L1243.71 681.975 L1243.15 681.975 L1242.59 681.975 L1242.03 681.975 L1241.47 681.975 L1240.91 681.975 L1240.35 681.975 L1239.79 681.975 L1239.23 681.975 L1238.67 681.975 L1238.11 681.975 L1237.55 681.975 L1236.99 681.975 L1236.44 681.975 L1235.88 681.975 L1235.32 681.975 L1234.76 681.975 L1234.2 681.975 L1233.64 681.975 L1233.08 681.975 L1232.52 681.975 L1231.96 681.975 L1231.4 681.975 L1230.84 681.975 L1230.28 681.975 L1229.72 681.975 L1229.17 681.975 L1228.61 681.975 L1228.05 681.975 L1227.49 681.975 L1226.93 681.975 L1226.37 681.975 L1225.81 681.975 L1225.25 681.975 L1224.69 681.975 L1224.13 681.975 L1223.57 681.975 L1223.01 681.975 L1222.45 681.975 L1221.89 681.975 L1221.34 681.975 L1220.78 681.975 L1220.22 681.975 L1219.66 681.975 L1219.1 681.975 L1218.54 681.975 L1217.98 681.975 L1217.42 681.975 L1216.86 681.975 L1216.3 681.975 L1215.74 681.975 L1215.18 681.975 L1214.62 681.975 L1214.07 681.975 L1213.51 681.975 L1212.95 681.975 L1212.39 681.975 L1211.83 681.975 L1211.27 681.975 L1210.71 681.975 L1210.15 681.975 L1209.59 681.975 L1209.03 681.975 L1208.47 681.975 L1207.91 681.975 L1207.35 681.975 L1206.8 681.975 L1206.24 681.975 L1205.68 681.975 L1205.12 681.975 L1204.56 681.975 L1204 681.975 L1203.44 681.975 L1202.88 681.975 L1202.32 681.975 L1201.76 681.975 L1201.2 681.975 L1200.64 681.975 L1200.08 681.975 L1199.52 681.975 L1198.97 681.975 L1198.41 681.975 L1197.85 681.975 L1197.29 681.975 L1196.73 681.975 L1196.17 681.975 L1195.61 681.975 L1195.05 681.975 L1194.49 681.975 L1193.93 681.975 L1193.37 681.975 L1192.81 681.975 L1192.25 681.975 L1191.7 681.975 L1191.14 681.975 L1190.58 681.975 L1190.02 681.975 L1189.46 681.975 L1188.9 681.975 L1188.34 681.975 L1187.78 681.975 L1187.22 681.975 L1186.66 681.975 L1186.1 681.975 L1185.54 681.975 L1184.98 681.975 L1184.43 681.975 L1183.87 681.975 L1183.31 681.975 L1182.75 681.975 L1182.19 681.975 L1181.63 681.975 L1181.07 681.975 L1180.51 681.975 L1179.95 681.975 L1179.39 681.975 L1178.83 681.975 L1178.27 681.975 L1177.71 681.975 L1177.15 681.975 L1176.6 681.975 L1176.04 681.975 L1175.48 681.975 L1174.92 681.975 L1174.36 681.975 L1173.8 681.975 L1173.24 681.975 L1172.68 681.975 L1172.12 681.975 L1171.56 681.975 L1171 681.975 L1170.44 681.975 L1169.88 681.975 L1169.33 681.975 L1168.77 681.975 L1168.21 681.975 L1167.65 681.975 L1167.09 681.975 L1166.53 681.975 L1165.97 681.975 L1165.41 681.975 L1164.85 681.975 L1164.29 681.975 L1163.73 681.975 L1163.17 681.975 L1162.61 681.975 L1162.05 681.975 L1161.5 681.975 L1160.94 681.975 L1160.38 681.975 L1159.82 681.975 L1159.26 681.975 L1158.7 681.975 L1158.14 681.975 L1157.58 681.975 L1157.02 681.975 L1156.46 681.975 L1155.9 681.975 L1155.34 681.975 L1154.78 681.975 L1154.23 681.975 L1153.67 681.975 L1153.11 681.975 L1152.55 681.975 L1151.99 681.975 L1151.43 681.975 L1150.87 681.975 L1150.31 681.975 L1149.75 681.975 L1149.19 681.975 L1148.63 681.975 L1148.07 681.975 L1147.51 681.975 L1146.96 681.975 L1146.4 681.975 L1145.84 681.975 L1145.28 681.975 L1144.72 681.975 L1144.16 681.975 L1143.6 681.975 L1143.04 681.975 L1142.48 681.975 L1141.92 681.975 L1141.36 681.975 L1140.8 681.975 L1140.24 681.975 L1139.68 681.975 L1139.13 681.975 L1138.57 681.975 L1138.01 681.975 L1137.45 681.975 L1136.89 681.975 L1136.33 681.975 L1135.77 681.975 L1135.21 681.975 L1134.65 681.975 L1134.09 681.975 L1133.53 681.975 L1132.97 681.975 L1132.41 681.975 L1131.86 681.975 L1131.3 681.975 L1130.74 681.975 L1130.18 681.975 L1129.62 681.975 L1129.06 681.975 L1128.5 681.975 L1127.94 681.975 L1127.38 681.975 L1126.82 681.975 L1126.26 681.975 L1125.7 681.975 L1125.14 681.975 L1124.59 681.975 L1124.03 681.975 L1123.47 681.975 L1122.91 681.975 L1122.35 681.975 L1121.79 681.975 L1121.23 681.975 L1120.67 681.975 L1120.11 681.975 L1119.55 681.975 L1118.99 681.975 L1118.43 681.975 L1117.87 681.975 L1117.31 681.975 L1116.76 681.975 L1116.2 681.975 L1115.64 681.975 L1115.08 681.975 L1114.52 681.975 L1113.96 681.975 L1113.4 681.975 L1112.84 681.975 L1112.28 681.975 L1111.72 681.975 L1111.16 681.975 L1110.6 681.975 L1110.04 681.975 L1109.49 681.975 L1108.93 681.975 L1108.37 681.975 L1107.81 681.975 L1107.25 681.975 L1106.69 681.975 L1106.13 681.975 L1105.57 681.975 L1105.01 681.975 L1104.45 681.975 L1103.89 681.975 L1103.33 681.975 L1102.77 681.975 L1102.22 681.975 L1101.66 681.975 L1101.1 681.975 L1100.54 681.975 L1099.98 681.975 L1099.42 681.975 L1098.86 681.975 L1098.3 681.975 L1097.74 681.975 L1097.18 681.975 L1096.62 681.975 L1096.06 681.975 L1095.5 681.975 L1094.94 681.975 L1094.39 681.975 L1093.83 681.975 L1093.27 681.975 L1092.71 681.975 L1092.15 681.975 L1091.59 681.975 L1091.03 681.975 L1090.47 681.975 L1089.91 681.975 L1089.35 681.975 L1088.79 681.975 L1088.23 681.975 L1087.67 681.975 L1087.12 681.975 L1086.56 681.975 L1086 681.975 L1085.44 681.975 L1084.88 681.975 L1084.32 681.975 L1083.76 681.975 L1083.2 681.975 L1082.64 681.975 L1082.08 681.975 L1081.52 681.975 L1080.96 681.975 L1080.4 681.975 L1079.85 681.975 L1079.29 681.975 L1078.73 681.975 L1078.17 681.975 L1077.61 681.975 L1077.05 681.975 L1076.49 681.975 L1075.93 681.975 L1075.37 681.975 L1074.81 681.975 L1074.25 681.975 L1073.69 681.975 L1073.13 681.975 L1072.57 681.975 L1072.02 681.975 L1071.46 681.975 L1070.9 681.975 L1070.34 681.975 L1069.78 681.975 L1069.22 681.975 L1068.66 681.975 L1068.1 681.975 L1067.54 681.975 L1066.98 681.975 L1066.42 681.975 L1065.86 681.975 L1065.3 681.975 L1064.75 681.975 L1064.19 681.975 L1063.63 681.975 L1063.07 681.975 L1062.51 681.975 L1061.95 681.975 L1061.39 681.975 L1060.83 681.975 L1060.27 681.975 L1059.71 681.975 L1059.15 681.975 L1058.59 681.975 L1058.03 681.975 L1057.48 681.975 L1056.92 681.975 L1056.36 681.975 L1055.8 681.975 L1055.24 681.975 L1054.68 681.975 L1054.12 681.975 L1053.56 681.975 L1053 681.975 L1052.44 681.975 L1051.88 681.975 L1051.32 681.975 L1050.76 681.975 L1050.2 681.975 L1049.65 681.975 L1049.09 681.975 L1048.53 681.975 L1047.97 681.975 L1047.41 681.975 L1046.85 681.975 L1046.29 681.975 L1045.73 681.975 L1045.17 681.975 L1044.61 681.975 L1044.05 681.975 L1043.49 681.975 L1042.93 681.975 L1042.38 681.975 L1041.82 681.975 L1041.26 681.975 L1040.7 681.975 L1040.14 681.975 L1039.58 681.975 L1039.02 681.975 L1038.46 681.975 L1037.9 681.975 L1037.34 681.975 L1036.78 681.975 L1036.22 681.975 L1035.66 681.975 L1035.1 681.975 L1034.55 681.975 L1033.99 681.975 L1033.43 681.975 L1032.87 681.975 L1032.31 681.975 L1031.75 681.975 L1031.19 681.975 L1030.63 681.975 L1030.07 681.975 L1029.51 681.975 L1028.95 681.975 L1028.39 681.975 L1027.83 681.975 L1027.28 681.975 L1026.72 681.975 L1026.16 681.975 L1025.6 681.975 L1025.04 681.975 L1024.48 681.975 L1023.92 681.975 L1023.36 681.975 L1022.8 681.975 L1022.24 681.975 L1021.68 681.975 L1021.12 681.975 L1020.56 681.975 L1020.01 681.975 L1019.45 681.975 L1018.89 681.975 L1018.33 681.975 L1017.77 681.975 L1017.21 681.975 L1016.65 681.975 L1016.09 681.975 L1015.53 681.975 L1014.97 681.975 L1014.41 681.975 L1013.85 681.975 L1013.29 681.975 L1012.73 681.975 L1012.18 681.975 L1011.62 681.975 L1011.06 681.975 L1010.5 681.975 L1009.94 681.975 L1009.38 681.975 L1008.82 681.975 L1008.26 681.975 L1007.7 681.975 L1007.14 681.975 L1006.58 681.975 L1006.02 681.975 L1005.46 681.975 L1004.91 681.975 L1004.35 681.975 L1003.79 681.975 L1003.23 681.975 L1002.67 681.975 L1002.11 681.975 L1001.55 681.975 L1000.99 681.975 L1000.43 681.975 L999.872 681.975 L999.313 681.975 L998.754 681.975 L998.194 681.975 L997.635 681.975 L997.076 681.975 L996.517 681.975 L995.957 681.975 L995.398 681.975 L994.839 681.975 L994.28 681.975 L993.72 681.975 L993.161 681.975 L992.602 681.975 L992.043 681.975 L991.483 681.975 L990.924 681.975 L990.365 681.975 L989.806 681.975 L989.246 681.975 L988.687 681.975 L988.128 681.975 L987.569 681.975 L987.009 681.975 L986.45 681.975 L985.891 681.975 L985.332 681.975 L984.772 681.975 L984.213 681.975 L983.654 681.975 L983.095 681.975 L982.535 681.975 L981.976 681.975 L981.417 681.975 L980.858 681.975 L980.298 681.975 L979.739 681.975 L979.18 681.975 L978.621 681.975 L978.061 681.975 L977.502 681.975 L976.943 681.975 L976.384 681.975 L975.824 681.975 L975.265 681.975 L974.706 681.975 L974.147 681.975 L973.587 681.975 L973.028 681.975 L972.469 681.975 L971.91 681.975 L971.35 681.975 L970.791 681.975 L970.232 681.975 L969.673 681.975 L969.113 681.975 L968.554 681.975 L967.995 681.975 L967.436 681.975 L966.876 681.975 L966.317 681.975 L965.758 681.975 L965.199 681.975 L964.639 681.975 L964.08 681.975 L963.521 681.975 L962.962 681.975 L962.402 681.975 L961.843 681.975 L961.284 681.975 L960.725 681.975 L960.165 681.975 L959.606 681.975 L959.047 681.975 L958.488 681.975 L957.928 681.975 L957.369 681.975 L956.81 681.975 L956.251 681.975 L955.691 681.975 L955.132 681.975 L954.573 681.975 L954.014 681.975 L953.454 681.975 L952.895 681.975 L952.336 681.975 L951.777 681.975 L951.217 681.975 L950.658 681.975 L950.099 681.975 L949.54 681.975 L948.98 681.975 L948.421 681.975 L947.862 681.975 L947.303 681.975 L946.743 681.975 L946.184 681.975 L945.625 681.975 L945.066 681.975 L944.506 681.975 L943.947 681.975 L943.388 681.975 L942.829 681.975 L942.269 681.975 L941.71 681.975 L941.151 681.975 L940.592 681.975 L940.032 681.975 L939.473 681.975 L938.914 681.975 L938.355 681.975 L937.795 681.975 L937.236 681.975 L936.677 681.975 L936.118 681.975 L935.558 681.975 L934.999 681.975 L934.44 681.975 L933.881 681.975 L933.321 681.975 L932.762 681.975 L932.203 681.975 L931.644 681.975 L931.084 681.975 L930.525 681.975 L929.966 681.975 L929.406 681.975 L928.847 681.975 L928.288 681.975 L927.729 681.975 L927.169 681.975 L926.61 681.975 L926.051 681.975 L925.492 681.975 L924.932 681.975 L924.373 681.975 L923.814 681.975 L923.255 681.975 L922.695 681.975 L922.136 681.975 L921.577 681.975 L921.018 681.975 L920.458 681.975 L919.899 681.975 L919.34 681.975 L918.781 681.975 L918.221 681.975 L917.662 681.975 L917.103 681.975 L916.544 681.975 L915.984 681.975 L915.425 681.975 L914.866 681.975 L914.307 681.975 L913.747 681.975 L913.188 681.975 L912.629 681.975 L912.07 681.975 L911.51 681.975 L910.951 681.975 L910.392 681.975 L909.833 681.975 L909.273 681.975 L908.714 681.975 L908.155 681.975 L907.596 681.975 L907.036 681.975 L906.477 681.975 L905.918 681.975 L905.359 681.975 L904.799 681.975 L904.24 681.975 L903.681 681.975 L903.122 681.975 L902.562 681.975 L902.003 681.975 L901.444 681.975 L900.885 681.975 L900.325 681.975 L899.766 681.975 L899.207 681.975 L898.648 681.975 L898.088 681.975 L897.529 681.975 L896.97 681.975 L896.411 681.975 L895.851 681.975 L895.292 681.975 L894.733 681.975 L894.174 681.975 L893.614 681.975 L893.055 681.975 L892.496 681.975 L891.937 681.975 L891.377 681.975 L890.818 681.975 L890.259 681.975 L889.7 681.975 L889.14 681.975 L888.581 681.975 L888.022 681.975 L887.463 681.975 L886.903 681.975 L886.344 681.975 L885.785 681.975 L885.226 681.975 L884.666 681.975 L884.107 681.975 L883.548 681.975 L882.989 681.975 L882.429 681.975 L881.87 681.975 L881.311 681.975 L880.752 681.975 L880.192 681.975 L879.633 681.975 L879.074 681.975 L878.515 681.975 L877.955 681.975 L877.396 681.975 L876.837 681.975 L876.278 681.975 L875.718 681.975 L875.159 681.975 L874.6 681.975 L874.041 681.975 L873.481 681.975 L872.922 681.975 L872.363 681.975 L871.804 681.975 L871.244 681.975 L870.685 681.975 L870.126 681.975 L869.567 681.975 L869.007 681.975 L868.448 681.975 L867.889 681.975 L867.33 681.975 L866.77 681.975 L866.211 681.975 L865.652 681.975 L865.093 681.975 L864.533 681.975 L863.974 681.975 L863.415 681.975 L862.856 681.975 L862.296 681.975 L861.737 681.975 L861.178 681.975 L860.619 681.975 L860.059 681.975 L859.5 681.975 L858.941 681.975 L858.382 681.975 L857.822 681.975 L857.263 681.975 L856.704 681.975 L856.145 681.975 L855.585 681.975 L855.026 681.975 L854.467 681.975 L853.908 681.975 L853.348 681.975 L852.789 681.975 L852.23 681.975 L851.671 681.975 L851.111 681.975 L850.552 681.975 L849.993 681.975 L849.434 681.975 L848.874 681.975 L848.315 681.975 L847.756 681.975 L847.197 681.975 L846.637 681.975 L846.078 681.975 L845.519 681.975 L844.96 681.975 L844.4 681.975 L843.841 681.975 L843.282 681.975 L842.723 681.975 L842.163 681.975 L841.604 681.975 L841.045 681.975 L840.486 681.975 L839.926 681.975 L839.367 681.975 L838.808 681.975 L838.249 681.975 L837.689 681.975 L837.13 681.975 L836.571 681.975 L836.012 681.975 L835.452 681.975 L834.893 681.975 L834.334 681.975 L833.775 681.975 L833.215 681.975 L832.656 681.975 L832.097 681.975 L831.538 681.975 L830.978 681.975 L830.419 681.975 L829.86 681.975 L829.301 681.975 L828.741 681.975 L828.182 681.975 L827.623 681.975 L827.064 681.975 L826.504 681.975 L825.945 681.975 L825.386 681.975 L824.827 681.975 L824.267 681.975 L823.708 681.975 L823.149 681.975 L822.59 681.975 L822.03 681.975 L821.471 681.975 L820.912 681.975 L820.353 681.975 L819.793 681.975 L819.234 681.975 L818.675 681.975 L818.116 681.975 L817.556 681.975 L816.997 681.975 L816.438 681.975 L815.879 681.975 L815.319 681.975 L814.76 681.975 L814.201 681.975 L813.642 681.975 L813.082 681.975 L812.523 681.975 L811.964 681.975 L811.405 681.975 L810.845 681.975 L810.286 681.975 L809.727 681.975 L809.168 681.975 L808.608 681.975 L808.049 681.975 L807.49 681.975 L806.931 681.975 L806.371 681.975 L805.812 681.975 L805.253 681.975 L804.693 681.975 L804.134 681.975 L803.575 681.975 L803.016 681.975 L802.456 681.975 L801.897 681.975 L801.338 681.975 L800.779 681.975 L800.219 681.975 L799.66 681.975 L799.101 681.975 L798.542 681.975 L797.982 681.975 L797.423 681.975 L796.864 681.975 L796.305 681.975 L795.745 681.975 L795.186 681.975 L794.627 681.975 L794.068 681.975 L793.508 681.975 L792.949 681.975 L792.39 681.975 L791.831 681.975 L791.271 681.975 L790.712 681.975 L790.153 681.975 L789.594 681.975 L789.034 681.975 L788.475 681.975 L787.916 681.975 L787.357 681.975 L786.797 681.975 L786.238 681.975 L785.679 681.975 L785.12 681.975 L784.56 681.975 L784.001 681.975 L783.442 681.975 L782.883 681.975 L782.323 681.975 L781.764 681.975 L781.205 681.975 L780.646 681.975 L780.086 681.975 L779.527 681.975 L778.968 681.975 L778.409 681.975 L777.849 681.975 L777.29 681.975 L776.731 681.975 L776.172 681.975 L775.612 681.975 L775.053 681.975 L774.494 681.975 L773.935 681.975 L773.375 681.975 L772.816 681.975 L772.257 681.975 L771.698 681.975 L771.138 681.975 L770.579 681.975 L770.02 681.975 L769.461 681.975 L768.901 681.975 L768.342 681.975 L767.783 681.975 L767.224 681.975 L766.664 681.975 L766.105 681.975 L765.546 681.975 L764.987 681.975 L764.427 681.975 L763.868 681.975 L763.309 681.975 L762.75 681.975 L762.19 681.975 L761.631 681.975 L761.072 681.975 L760.513 681.975 L759.953 681.975 L759.394 681.975 L758.835 681.975 L758.276 681.975 L757.716 681.975 L757.157 681.975 L756.598 681.975 L756.039 681.975 L755.479 681.975 L754.92 681.975 L754.361 681.975 L753.802 681.975 L753.242 681.975 L752.683 681.975 L752.124 681.975 L751.565 681.975 L751.005 681.975 L750.446 681.975 L749.887 681.975 L749.328 681.975 L748.768 681.975 L748.209 681.975 L747.65 681.975 L747.091 681.975 L746.531 681.975 L745.972 681.975 L745.413 681.975 L744.854 681.975 L744.294 681.975 L743.735 681.975 L743.176 681.975 L742.617 681.975 L742.057 681.975 L741.498 681.975 L740.939 681.975 L740.38 681.975 L739.82 681.975 L739.261 681.975 L738.702 681.975 L738.143 681.975 L737.583 681.975 L737.024 681.975 L736.465 681.975 L735.906 681.975 L735.346 681.975 L734.787 681.975 L734.228 681.975 L733.669 681.975 L733.109 681.975 L732.55 681.975 L731.991 681.975 L731.432 681.975 L730.872 681.975 L730.313 681.975 L729.754 681.975 L729.195 681.975 L728.635 681.975 L728.076 681.975 L727.517 681.975 L726.958 681.975 L726.398 681.975 L725.839 681.975 L725.28 681.975 L724.721 681.975 L724.161 681.975 L723.602 681.975 L723.043 681.975 L722.484 681.975 L721.924 681.975 L721.365 681.975 L720.806 681.975 L720.247 681.975  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.494 720.806,686.494 721.365,686.494 721.924,686.494 722.484,686.494 723.043,686.494 723.602,686.494 724.161,686.494 724.721,686.494 725.28,686.494 725.839,686.494 726.398,686.494 726.958,686.494 727.517,686.494 728.076,686.494 728.635,686.494 729.195,686.494 729.754,686.494 730.313,686.494 730.872,686.494 731.432,686.494 731.991,686.494 732.55,686.494 733.109,686.494 733.669,686.494 734.228,686.494 734.787,686.494 735.346,686.494 735.906,686.494 736.465,686.494 737.024,686.494 737.583,686.494 738.143,686.494 738.702,686.494 739.261,686.494 739.82,686.494 740.38,686.494 740.939,686.494 741.498,686.494 742.057,686.494 742.617,686.494 743.176,686.494 743.735,686.494 744.294,686.494 744.854,686.494 745.413,686.494 745.972,686.494 746.531,686.494 747.091,686.494 747.65,686.494 748.209,686.494 748.768,686.494 749.328,686.494 749.887,686.494 750.446,686.494 751.005,686.494 751.565,686.494 752.124,686.494 752.683,686.494 753.242,686.494 753.802,686.494 754.361,686.494 754.92,686.494 755.479,686.494 756.039,686.494 756.598,686.494 757.157,686.494 757.716,686.494 758.276,686.494 758.835,686.494 759.394,686.494 759.953,686.494 760.513,686.494 761.072,686.494 761.631,686.494 762.19,686.494 762.75,686.494 763.309,686.494 763.868,686.494 764.427,686.494 764.987,686.494 765.546,686.494 766.105,686.494 766.664,686.494 767.224,686.494 767.783,686.494 768.342,686.494 768.901,686.494 769.461,686.494 770.02,686.494 770.579,686.494 771.138,686.494 771.698,686.494 772.257,686.494 772.816,686.494 773.375,686.494 773.935,686.494 774.494,686.494 775.053,686.494 775.612,686.494 776.172,686.494 776.731,686.494 777.29,686.494 777.849,686.494 778.409,686.494 778.968,686.494 779.527,686.494 780.086,686.494 780.646,686.494 781.205,686.494 781.764,686.494 782.323,686.494 782.883,686.494 783.442,686.494 784.001,686.494 784.56,686.494 785.12,686.494 785.679,686.494 786.238,686.494 786.797,686.494 787.357,686.494 787.916,686.494 788.475,686.494 789.034,686.494 789.594,686.494 790.153,686.494 790.712,686.494 791.271,686.494 791.831,686.494 792.39,686.494 792.949,686.494 793.508,686.494 794.068,686.494 794.627,686.494 795.186,686.494 795.745,686.494 796.305,686.494 796.864,686.494 797.423,686.494 797.982,686.494 798.542,686.494 799.101,686.494 799.66,686.494 800.219,686.494 800.779,686.494 801.338,686.494 801.897,686.494 802.456,686.494 803.016,686.494 803.575,686.494 804.134,686.494 804.693,686.494 805.253,686.494 805.812,686.494 806.371,686.494 806.931,686.494 807.49,686.494 808.049,686.494 808.608,686.494 809.168,686.494 809.727,686.494 810.286,686.494 810.845,686.494 811.405,686.494 811.964,686.494 812.523,686.494 813.082,686.494 813.642,686.494 814.201,686.494 814.76,686.494 815.319,686.494 815.879,686.494 816.438,686.494 816.997,686.494 817.556,686.494 818.116,686.494 818.675,686.494 819.234,686.494 819.793,686.494 820.353,686.494 820.912,686.494 821.471,686.494 822.03,686.494 822.59,686.494 823.149,686.494 823.708,686.494 824.267,686.494 824.827,686.494 825.386,686.494 825.945,686.494 826.504,686.494 827.064,686.494 827.623,686.494 828.182,686.494 828.741,686.494 829.301,686.494 829.86,686.494 830.419,686.494 830.978,686.494 831.538,686.494 832.097,686.494 832.656,686.494 833.215,686.494 833.775,686.494 834.334,686.494 834.893,686.494 835.452,686.494 836.012,686.494 836.571,686.494 837.13,686.494 837.689,686.494 838.249,686.494 838.808,686.494 839.367,686.494 839.926,686.494 840.486,686.494 841.045,686.494 841.604,686.494 842.163,686.494 842.723,686.494 843.282,686.494 843.841,686.494 844.4,686.494 844.96,686.494 845.519,686.494 846.078,686.494 846.637,686.494 847.197,686.494 847.756,686.494 848.315,686.494 848.874,686.494 849.434,686.494 849.993,686.494 850.552,686.494 851.111,686.494 851.671,686.494 852.23,686.494 852.789,686.494 853.348,686.494 853.908,686.494 854.467,686.494 855.026,686.494 855.585,686.494 856.145,686.494 856.704,686.494 857.263,686.494 857.822,686.494 858.382,686.494 858.941,686.494 859.5,686.494 860.059,686.494 860.619,686.494 861.178,686.494 861.737,686.494 862.296,686.494 862.856,686.494 863.415,686.494 863.974,686.494 864.533,686.494 865.093,686.494 865.652,686.494 866.211,686.494 866.77,686.494 867.33,686.494 867.889,686.494 868.448,686.494 869.007,686.494 869.567,686.494 870.126,686.494 870.685,686.494 871.244,686.494 871.804,686.494 872.363,686.494 872.922,686.494 873.481,686.494 874.041,686.494 874.6,686.494 875.159,686.494 875.718,686.494 876.278,686.494 876.837,686.494 877.396,686.494 877.955,686.494 878.515,686.494 879.074,686.494 879.633,686.494 880.192,686.494 880.752,686.494 881.311,686.494 881.87,686.494 882.429,686.494 882.989,686.494 883.548,686.494 884.107,686.494 884.666,686.494 885.226,686.494 885.785,686.494 886.344,686.494 886.903,686.494 887.463,686.494 888.022,686.494 888.581,686.494 889.14,686.494 889.7,686.494 890.259,686.494 890.818,686.494 891.377,686.494 891.937,686.494 892.496,686.494 893.055,686.494 893.614,686.494 894.174,686.494 894.733,686.494 895.292,686.494 895.851,686.494 896.411,686.494 896.97,686.494 897.529,686.494 898.088,686.494 898.648,686.494 899.207,686.494 899.766,686.494 900.325,686.494 900.885,686.494 901.444,686.494 902.003,686.494 902.562,686.494 903.122,686.494 903.681,686.494 904.24,686.494 904.799,686.494 905.359,686.494 905.918,686.494 906.477,686.494 907.036,686.494 907.596,686.494 908.155,686.494 908.714,686.494 909.273,686.494 909.833,686.494 910.392,686.494 910.951,686.494 911.51,686.494 912.07,686.494 912.629,686.494 913.188,686.494 913.747,686.494 914.307,686.494 914.866,686.494 915.425,686.494 915.984,686.494 916.544,686.494 917.103,686.494 917.662,686.494 918.221,686.494 918.781,686.494 919.34,686.494 919.899,686.494 920.458,686.494 921.018,686.494 921.577,686.494 922.136,686.494 922.695,686.494 923.255,686.494 923.814,686.494 924.373,686.494 924.932,686.494 925.492,686.494 926.051,686.494 926.61,686.494 927.169,686.494 927.729,686.494 928.288,686.494 928.847,686.494 929.406,686.494 929.966,686.494 930.525,686.494 931.084,686.494 931.644,686.494 932.203,686.494 932.762,686.494 933.321,686.494 933.881,686.494 934.44,686.494 934.999,686.494 935.558,686.494 936.118,686.494 936.677,686.494 937.236,686.494 937.795,686.494 938.355,686.494 938.914,686.494 939.473,686.494 940.032,686.494 940.592,686.494 941.151,686.494 941.71,686.494 942.269,686.494 942.829,686.494 943.388,686.494 943.947,686.494 944.506,686.494 945.066,686.494 945.625,686.494 946.184,686.494 946.743,686.494 947.303,686.494 947.862,686.494 948.421,686.494 948.98,686.494 949.54,686.494 950.099,686.494 950.658,686.494 951.217,686.494 951.777,686.494 952.336,686.494 952.895,686.494 953.454,686.494 954.014,686.494 954.573,686.494 955.132,686.494 955.691,686.494 956.251,686.494 956.81,686.494 957.369,686.494 957.928,686.494 958.488,686.494 959.047,686.494 959.606,686.494 960.165,686.494 960.725,686.494 961.284,686.494 961.843,686.494 962.402,686.494 962.962,686.494 963.521,686.494 964.08,686.494 964.639,686.494 965.199,686.494 965.758,686.494 966.317,686.494 966.876,686.494 967.436,686.494 967.995,686.494 968.554,686.494 969.113,686.494 969.673,686.494 970.232,686.494 970.791,686.494 971.35,686.494 971.91,686.494 972.469,686.494 973.028,686.494 973.587,686.494 974.147,686.494 974.706,686.494 975.265,686.494 975.824,686.494 976.384,686.494 976.943,686.494 977.502,686.494 978.061,686.494 978.621,686.494 979.18,686.494 979.739,686.494 980.298,686.494 980.858,686.494 981.417,686.494 981.976,686.494 982.535,686.494 983.095,686.494 983.654,686.494 984.213,686.494 984.772,686.494 985.332,686.494 985.891,686.494 986.45,686.494 987.009,686.494 987.569,686.494 988.128,686.494 988.687,686.494 989.246,686.494 989.806,686.494 990.365,686.494 990.924,686.494 991.483,686.494 992.043,686.494 992.602,686.494 993.161,686.494 993.72,686.494 994.28,686.494 994.839,686.494 995.398,686.494 995.957,686.494 996.517,686.494 997.076,686.494 997.635,686.494 998.194,686.494 998.754,686.494 999.313,686.494 999.872,686.494 1000.43,686.494 1000.99,686.494 1001.55,686.494 1002.11,686.494 1002.67,686.494 1003.23,686.494 1003.79,686.494 1004.35,686.494 1004.91,686.494 1005.46,686.494 1006.02,686.494 1006.58,686.494 1007.14,686.494 1007.7,686.494 1008.26,686.494 1008.82,686.494 1009.38,686.494 1009.94,686.494 1010.5,686.494 1011.06,686.494 1011.62,686.494 1012.18,686.494 1012.73,686.494 1013.29,686.494 1013.85,686.494 1014.41,686.494 1014.97,686.494 1015.53,686.494 1016.09,686.494 1016.65,686.494 1017.21,686.494 1017.77,686.494 1018.33,686.494 1018.89,686.494 1019.45,686.494 1020.01,686.494 1020.56,686.494 1021.12,686.494 1021.68,686.494 1022.24,686.494 1022.8,686.494 1023.36,686.494 1023.92,686.494 1024.48,686.494 1025.04,686.494 1025.6,686.494 1026.16,686.494 1026.72,686.494 1027.28,686.494 1027.83,686.494 1028.39,686.494 1028.95,686.494 1029.51,686.494 1030.07,686.494 1030.63,686.494 1031.19,686.494 1031.75,686.494 1032.31,686.494 1032.87,686.494 1033.43,686.494 1033.99,686.494 1034.55,686.494 1035.1,686.494 1035.66,686.494 1036.22,686.494 1036.78,686.494 1037.34,686.494 1037.9,686.494 1038.46,686.494 1039.02,686.494 1039.58,686.494 1040.14,686.494 1040.7,686.494 1041.26,686.494 1041.82,686.494 1042.38,686.494 1042.93,686.494 1043.49,686.494 1044.05,686.494 1044.61,686.494 1045.17,686.494 1045.73,686.494 1046.29,686.494 1046.85,686.494 1047.41,686.494 1047.97,686.494 1048.53,686.494 1049.09,686.494 1049.65,686.494 1050.2,686.494 1050.76,686.494 1051.32,686.494 1051.88,686.494 1052.44,686.494 1053,686.494 1053.56,686.494 1054.12,686.494 1054.68,686.494 1055.24,686.494 1055.8,686.494 1056.36,686.494 1056.92,686.494 1057.48,686.494 1058.03,686.494 1058.59,686.494 1059.15,686.494 1059.71,686.494 1060.27,686.494 1060.83,686.494 1061.39,686.494 1061.95,686.494 1062.51,686.494 1063.07,686.494 1063.63,686.494 1064.19,686.494 1064.75,686.494 1065.3,686.494 1065.86,686.494 1066.42,686.494 1066.98,686.494 1067.54,686.494 1068.1,686.494 1068.66,686.494 1069.22,686.494 1069.78,686.494 1070.34,686.494 1070.9,686.494 1071.46,686.494 1072.02,686.494 1072.57,686.494 1073.13,686.494 1073.69,686.494 1074.25,686.494 1074.81,686.494 1075.37,686.494 1075.93,686.494 1076.49,686.494 1077.05,686.494 1077.61,686.494 1078.17,686.494 1078.73,686.494 1079.29,686.494 1079.85,686.494 1080.4,686.494 1080.96,686.494 1081.52,686.494 1082.08,686.494 1082.64,686.494 1083.2,686.494 1083.76,686.494 1084.32,686.494 1084.88,686.494 1085.44,686.494 1086,686.494 1086.56,686.494 1087.12,686.494 1087.67,686.494 1088.23,686.494 1088.79,686.494 1089.35,686.494 1089.91,686.494 1090.47,686.494 1091.03,686.494 1091.59,686.494 1092.15,686.494 1092.71,686.494 1093.27,686.494 1093.83,686.494 1094.39,686.494 1094.94,686.494 1095.5,686.494 1096.06,686.494 1096.62,686.494 1097.18,686.494 1097.74,686.494 1098.3,686.494 1098.86,686.494 1099.42,686.494 1099.98,686.494 1100.54,686.494 1101.1,686.494 1101.66,686.494 1102.22,686.494 1102.77,686.494 1103.33,686.494 1103.89,686.494 1104.45,686.494 1105.01,686.494 1105.57,686.494 1106.13,686.494 1106.69,686.494 1107.25,686.494 1107.81,686.494 1108.37,686.494 1108.93,686.494 1109.49,686.494 1110.04,686.494 1110.6,686.494 1111.16,686.494 1111.72,686.494 1112.28,686.494 1112.84,686.494 1113.4,686.494 1113.96,686.494 1114.52,686.494 1115.08,686.494 1115.64,686.494 1116.2,686.494 1116.76,686.494 1117.31,686.494 1117.87,686.494 1118.43,686.494 1118.99,686.494 1119.55,686.494 1120.11,686.494 1120.67,686.494 1121.23,686.494 1121.79,686.494 1122.35,686.494 1122.91,686.494 1123.47,686.494 1124.03,686.494 1124.59,686.494 1125.14,686.494 1125.7,686.494 1126.26,686.494 1126.82,686.494 1127.38,686.494 1127.94,686.494 1128.5,686.494 1129.06,686.494 1129.62,686.494 1130.18,686.494 1130.74,686.494 1131.3,686.494 1131.86,686.494 1132.41,686.494 1132.97,686.494 1133.53,686.494 1134.09,686.494 1134.65,686.494 1135.21,686.494 1135.77,686.494 1136.33,686.494 1136.89,686.494 1137.45,686.494 1138.01,686.494 1138.57,686.494 1139.13,686.494 1139.68,686.494 1140.24,686.494 1140.8,686.494 1141.36,686.494 1141.92,686.494 1142.48,686.494 1143.04,686.494 1143.6,686.494 1144.16,686.494 1144.72,686.494 1145.28,686.494 1145.84,686.494 1146.4,686.494 1146.96,686.494 1147.51,686.494 1148.07,686.494 1148.63,686.494 1149.19,686.494 1149.75,686.494 1150.31,686.494 1150.87,686.494 1151.43,686.494 1151.99,686.494 1152.55,686.494 1153.11,686.494 1153.67,686.494 1154.23,686.494 1154.78,686.494 1155.34,686.494 1155.9,686.494 1156.46,686.494 1157.02,686.494 1157.58,686.494 1158.14,686.494 1158.7,686.494 1159.26,686.494 1159.82,686.494 1160.38,686.494 1160.94,686.494 1161.5,686.494 1162.05,686.494 1162.61,686.494 1163.17,686.494 1163.73,686.494 1164.29,686.494 1164.85,686.494 1165.41,686.494 1165.97,686.494 1166.53,686.494 1167.09,686.494 1167.65,686.494 1168.21,686.494 1168.77,686.494 1169.33,686.494 1169.88,686.494 1170.44,686.494 1171,686.494 1171.56,686.494 1172.12,686.494 1172.68,686.494 1173.24,686.494 1173.8,686.494 1174.36,686.494 1174.92,686.494 1175.48,686.494 1176.04,686.494 1176.6,686.494 1177.15,686.494 1177.71,686.494 1178.27,686.494 1178.83,686.494 1179.39,686.494 1179.95,686.494 1180.51,686.494 1181.07,686.494 1181.63,686.494 1182.19,686.494 1182.75,686.494 1183.31,686.494 1183.87,686.494 1184.43,686.494 1184.98,686.494 1185.54,686.494 1186.1,686.494 1186.66,686.494 1187.22,686.494 1187.78,686.494 1188.34,686.494 1188.9,686.494 1189.46,686.494 1190.02,686.494 1190.58,686.494 1191.14,686.494 1191.7,686.494 1192.25,686.494 1192.81,686.494 1193.37,686.494 1193.93,686.494 1194.49,686.494 1195.05,686.494 1195.61,686.494 1196.17,686.494 1196.73,686.494 1197.29,686.494 1197.85,686.494 1198.41,686.494 1198.97,686.494 1199.52,686.494 1200.08,686.494 1200.64,686.494 1201.2,686.494 1201.76,686.494 1202.32,686.494 1202.88,686.494 1203.44,686.494 1204,686.494 1204.56,686.494 1205.12,686.494 1205.68,686.494 1206.24,686.494 1206.8,686.494 1207.35,686.494 1207.91,686.494 1208.47,686.494 1209.03,686.494 1209.59,686.494 1210.15,686.494 1210.71,686.494 1211.27,686.494 1211.83,686.494 1212.39,686.494 1212.95,686.494 1213.51,686.494 1214.07,686.494 1214.62,686.494 1215.18,686.494 1215.74,686.494 1216.3,686.494 1216.86,686.494 1217.42,686.494 1217.98,686.494 1218.54,686.494 1219.1,686.494 1219.66,686.494 1220.22,686.494 1220.78,686.494 1221.34,686.494 1221.89,686.494 1222.45,686.494 1223.01,686.494 1223.57,686.494 1224.13,686.494 1224.69,686.494 1225.25,686.494 1225.81,686.494 1226.37,686.494 1226.93,686.494 1227.49,686.494 1228.05,686.494 1228.61,686.494 1229.17,686.494 1229.72,686.494 1230.28,686.494 1230.84,686.494 1231.4,686.494 1231.96,686.494 1232.52,686.494 1233.08,686.494 1233.64,686.494 1234.2,686.494 1234.76,686.494 1235.32,686.494 1235.88,686.494 1236.44,686.494 1236.99,686.494 1237.55,686.494 1238.11,686.494 1238.67,686.494 1239.23,686.494 1239.79,686.494 1240.35,686.494 1240.91,686.494 1241.47,686.494 1242.03,686.494 1242.59,686.494 1243.15,686.494 1243.71,686.494 1244.26,686.494 1244.82,686.494 1245.38,686.494 1245.94,686.494 1246.5,686.494 1247.06,686.494 1247.62,686.494 1248.18,686.494 1248.74,686.494 1249.3,686.494 1249.86,686.494 1250.42,686.494 1250.98,686.494 1251.54,686.494 1252.09,686.494 1252.65,686.494 1253.21,686.494 1253.77,686.494 1254.33,686.494 1254.89,686.494 1255.45,686.494 1256.01,686.494 1256.57,686.494 1257.13,686.494 1257.69,686.494 1258.25,686.494 1258.81,686.494 1259.36,686.494 1259.92,686.494 1260.48,686.494 1261.04,686.494 1261.6,686.494 1262.16,686.494 1262.72,686.494 1263.28,686.494 1263.84,686.494 1264.4,686.494 1264.96,686.494 1265.52,686.494 1266.08,686.494 1266.63,686.494 1267.19,686.494 1267.75,686.494 1268.31,686.494 1268.87,686.494 1269.43,686.494 1269.99,686.494 1270.55,686.494 1271.11,686.494 1271.67,686.494 1272.23,686.494 1272.79,686.494 1273.35,686.494 1273.91,686.494 1274.46,686.494 1275.02,686.494 1275.58,686.494 1276.14,686.494 1276.7,686.494 1277.26,686.494 1277.82,686.494 1278.38,686.494 1278.94,686.494 1279.5,686.494 1280.06,686.494 1280.62,686.494 1281.18,686.494 1281.73,686.494 1282.29,686.494 1282.85,686.494 1283.41,686.494 1283.97,686.494 1284.53,686.494 1285.09,686.494 1285.65,686.494 1286.21,686.494 1286.77,686.494 1287.33,686.494 1287.89,686.494 1288.45,686.494 1289,686.494 1289.56,686.494 1290.12,686.494 1290.68,686.494 1291.24,686.494 1291.8,686.494 1292.36,686.494 1292.92,686.494 1293.48,686.494 1294.04,686.494 1294.6,686.494 1295.16,686.494 1295.72,686.494 1296.28,686.494 1296.83,686.494 1297.39,686.494 1297.95,686.494 1298.51,686.494 1299.07,686.494 1299.63,686.494 1300.19,686.494 1300.75,686.494 1301.31,686.494 1301.87,686.494 1302.43,686.494 1302.99,686.494 1303.55,686.494 1304.1,686.494 1304.66,686.494 1305.22,686.494 1305.78,686.494 1306.34,686.494 1306.9,686.494 1307.46,686.494 1308.02,686.494 1308.58,686.494 1309.14,686.494 1309.7,686.494 1310.26,686.494 1310.82,686.494 1311.38,686.494 1311.93,686.494 1312.49,686.494 1313.05,686.494 1313.61,686.494 1314.17,686.494 1314.73,686.494 1315.29,686.494 1315.85,686.494 1316.41,686.494 1316.97,686.494 1317.53,686.494 1318.09,686.494 1318.65,686.494 1319.2,686.494 1319.76,686.494 1320.32,686.494 1320.88,686.494 1321.44,686.494 1322,686.494 1322.56,686.494 1323.12,686.494 1323.68,686.494 1324.24,686.494 1324.8,686.494 1325.36,686.494 1325.92,686.494 1326.47,686.494 1327.03,686.494 1327.59,686.494 1328.15,686.494 1328.71,686.494 1329.27,686.494 1329.83,686.494 1330.39,686.494 1330.95,686.494 1331.51,686.494 1332.07,686.494 1332.63,686.494 1333.19,686.494 1333.75,686.494 1334.3,686.494 1334.86,686.494 1335.42,686.494 1335.98,686.494 1336.54,686.494 1337.1,686.494 1337.66,686.494 1338.22,686.494 1338.78,686.494 1339.34,686.494 1339.9,686.494 1340.46,686.494 1341.02,686.494 1341.57,686.494 1342.13,686.494 1342.69,686.494 1343.25,686.494 1343.81,686.494 1344.37,686.494 1344.93,686.494 1345.49,686.494 1346.05,686.494 1346.61,686.494 1347.17,686.494 1347.73,686.494 1348.29,686.494 1348.84,686.494 1349.4,686.494 1349.96,686.494 1350.52,686.494 1351.08,686.494 1351.64,686.494 1352.2,686.494 1352.76,686.494 1353.32,686.494 1353.88,686.494 1354.44,686.494 1355,686.494 1355.56,686.494 1356.12,686.494 1356.67,686.494 1357.23,686.494 1357.79,686.494 1358.35,686.494 1358.91,686.494 1359.47,686.494 1360.03,686.494 1360.59,686.494 1361.15,686.494 1361.71,686.494 1362.27,686.494 1362.83,686.494 1363.39,686.494 1363.94,686.494 1364.5,686.494 1365.06,686.494 1365.62,686.494 1366.18,686.494 1366.74,686.494 1367.3,686.494 1367.86,686.494 1368.42,686.494 1368.98,686.494 1369.54,686.494 1370.1,686.494 1370.66,686.494 1371.21,686.494 1371.77,686.494 1372.33,686.494 1372.89,686.494 1373.45,686.494 1374.01,686.494 1374.57,686.494 1375.13,686.494 1375.69,686.494 1376.25,686.494 1376.81,686.494 1377.37,686.494 1377.93,686.494 1378.49,686.494 1379.04,686.494 1379.6,686.494 1380.16,686.494 1380.72,686.494 1381.28,686.494 1381.84,686.494 1382.4,686.494 1382.96,686.494 1383.52,686.494 1384.08,686.494 1384.64,686.494 1385.2,686.494 1385.76,686.494 1386.31,686.494 1386.87,686.494 1387.43,686.494 1387.99,686.494 1388.55,686.494 1389.11,686.494 1389.67,686.494 1390.23,686.494 1390.79,686.494 1391.35,686.494 1391.91,686.494 1392.47,686.494 1393.03,686.494 1393.58,686.494 1394.14,686.494 1394.7,686.494 1395.26,686.494 1395.82,686.494 1396.38,686.494 1396.94,686.494 1397.5,686.494 1398.06,686.494 1398.62,686.494 1399.18,686.494 1399.74,686.494 1400.3,686.494 1400.86,686.494 1401.41,686.494 1401.97,686.494 1402.53,686.494 1403.09,686.494 1403.65,686.494 1404.21,686.494 1404.77,686.494 1405.33,686.494 1405.89,686.494 1406.45,686.494 1407.01,686.494 1407.57,686.494 1408.13,686.494 1408.68,686.494 1409.24,686.494 1409.8,686.494 1410.36,686.494 1410.92,686.494 1411.48,686.494 1412.04,686.494 1412.6,686.494 1413.16,686.494 1413.72,686.494 1414.28,686.494 1414.84,686.494 1415.4,686.494 1415.95,686.494 1416.51,686.494 1417.07,686.494 1417.63,686.494 1418.19,686.494 1418.75,686.494 1419.31,686.494 1419.87,686.494 1420.43,686.494 1420.99,686.494 1421.55,686.494 1422.11,686.494 1422.67,686.494 1423.23,686.494 1423.78,686.494 1424.34,686.494 1424.9,686.494 1425.46,686.494 1426.02,686.494 1426.58,686.494 1427.14,686.494 1427.7,686.494 1428.26,686.494 1428.82,686.494 1429.38,686.494 1429.94,686.494 1430.5,686.494 1431.05,686.494 1431.61,686.494 1432.17,686.494 1432.73,686.494 1433.29,686.494 1433.85,686.494 1434.41,686.494 1434.97,686.494 1435.53,686.494 1436.09,686.494 1436.65,686.494 1437.21,686.494 1437.77,686.494 1438.33,686.494 1438.88,686.494 1439.44,686.494 1440,686.494 1440.56,686.494 1441.12,686.494 1441.68,686.494 1442.24,686.494 1442.8,686.494 1443.36,686.494 1443.92,686.494 1444.48,686.494 1445.04,686.494 1445.6,686.494 1446.15,686.494 1446.71,686.494 1447.27,686.494 1447.83,686.494 1448.39,686.494 1448.95,686.494 1449.51,686.494 1450.07,686.494 1450.63,686.494 1451.19,686.494 1451.75,686.494 1452.31,686.494 1452.87,686.494 1453.42,686.494 1453.98,686.494 1454.54,686.494 1455.1,686.494 1455.66,686.494 1456.22,686.494 1456.78,686.494 1457.34,686.494 1457.9,686.494 1458.46,686.494 1459.02,686.494 1459.58,686.494 1460.14,686.494 1460.7,686.494 1461.25,686.494 1461.81,686.494 1462.37,686.494 1462.93,686.494 1463.49,686.494 1464.05,686.494 1464.61,686.494 1465.17,686.494 1465.73,686.494 1466.29,686.494 1466.85,686.494 1467.41,686.494 1467.97,686.494 1468.52,686.494 1469.08,686.494 1469.64,686.494 1470.2,686.494 1470.76,686.494 1471.32,686.494 1471.88,686.494 1472.44,686.494 1473,686.494 1473.56,686.494 1474.12,686.494 1474.68,686.494 1475.24,686.494 1475.79,686.494 1476.35,686.494 1476.91,686.494 1477.47,686.494 1478.03,686.494 1478.59,686.494 1479.15,686.494 1479.71,686.494 1480.27,686.494 1480.83,686.494 1481.39,686.494 1481.95,686.494 1482.51,686.494 1483.07,686.494 1483.62,686.494 1484.18,686.494 1484.74,686.494 1485.3,686.494 1485.86,686.494 1486.42,686.494 1486.98,686.494 1487.54,686.494 1488.1,686.494 1488.66,686.494 1489.22,686.494 1489.78,686.494 1490.34,686.494 1490.89,686.494 1491.45,686.494 1492.01,686.494 1492.57,686.494 1493.13,686.494 1493.69,686.494 1494.25,686.494 1494.81,686.494 1495.37,686.494 1495.93,686.494 1496.49,686.494 1497.05,686.494 1497.61,686.494 1498.16,686.494 1498.72,686.494 1499.28,686.494 1499.84,686.494 1500.4,686.494 1500.96,686.494 1501.52,686.494 1502.08,686.494 1502.64,686.494 1503.2,686.494 1503.76,686.494 1504.32,686.494 1504.88,686.494 1505.44,686.494 1505.99,686.494 1506.55,686.494 1507.11,686.494 1507.67,686.494 1508.23,686.494 1508.79,686.494 1509.35,686.494 1509.91,686.494 1510.47,686.494 1511.03,686.494 1511.59,686.494 1512.15,686.494 1512.71,686.494 1513.26,686.494 1513.82,686.494 1514.38,686.494 1514.94,686.494 1515.5,686.494 1516.06,686.494 1516.62,686.494 1517.18,686.494 1517.74,686.494 1518.3,686.494 1518.86,686.494 1519.42,686.494 1519.98,686.494 1520.53,686.494 1521.09,686.494 1521.65,686.494 1522.21,686.494 1522.77,686.494 1523.33,686.494 1523.89,686.494 1524.45,686.494 1525.01,686.494 1525.57,686.494 1526.13,686.494 1526.69,686.494 1527.25,686.494 1527.81,686.494 1528.36,686.494 1528.92,686.494 1529.48,686.494 1530.04,686.494 1530.6,686.494 1531.16,686.494 1531.72,686.494 1532.28,686.494 1532.84,686.494 1533.4,686.494 1533.96,686.494 1534.52,686.494 1535.08,686.494 1535.63,686.494 1536.19,686.494 1536.75,686.494 1537.31,686.494 1537.87,686.494 1538.43,686.494 1538.99,686.494 1539.55,686.494 1540.11,686.494 1540.67,686.494 1541.23,686.494 1541.79,686.494 1542.35,686.494 1542.9,686.494 1543.46,686.494 1544.02,686.494 1544.58,686.494 1545.14,686.494 1545.7,686.494 1546.26,686.494 1546.82,686.494 1547.38,686.494 1547.94,686.494 1548.5,686.494 1549.06,686.494 1549.62,686.494 1550.18,686.494 1550.73,686.494 1551.29,686.494 1551.85,686.494 1552.41,686.494 1552.97,686.494 1553.53,686.494 1554.09,686.494 1554.65,686.494 1555.21,686.494 1555.77,686.494 1556.33,686.494 1556.89,686.494 1557.45,686.494 1558,686.494 1558.56,686.494 1559.12,686.494 1559.68,686.494 1560.24,686.494 1560.8,686.494 1561.36,686.494 1561.92,686.494 1562.48,686.494 1563.04,686.494 1563.6,686.494 1564.16,686.494 1564.72,686.494 1565.28,686.494 1565.83,686.494 1566.39,686.494 1566.95,686.494 1567.51,686.494 1568.07,686.494 1568.63,686.494 1569.19,686.494 1569.75,686.494 1570.31,686.494 1570.87,686.494 1571.43,686.494 1571.99,686.494 1572.55,686.494 1573.1,686.494 1573.66,686.494 1574.22,686.494 1574.78,686.494 1575.34,686.494 1575.9,686.494 1576.46,686.494 1577.02,686.494 1577.58,686.494 1578.14,686.494 1578.7,686.494 1579.26,686.494 1579.82,686.494 1580.37,686.494 1580.93,686.494 1581.49,686.494 1582.05,686.494 1582.61,686.494 1583.17,686.494 1583.73,686.494 1584.29,686.494 1584.85,686.494 1585.41,686.494 1585.97,686.494 1586.53,686.494 1587.09,686.494 1587.65,686.494 1588.2,686.494 1588.76,686.494 1589.32,686.494 1589.88,686.494 1590.44,686.494 1591,686.494 1591.56,686.494 1592.12,686.494 1592.68,686.494 1593.24,686.494 1593.8,686.494 1594.36,686.494 1594.92,686.494 1595.47,686.494 1596.03,686.494 1596.59,686.494 1597.15,686.494 1597.71,686.494 1598.27,686.494 1598.83,686.494 1599.39,686.494 1599.95,686.494 1600.51,686.494 1601.07,686.494 1601.63,686.494 1602.19,686.494 1602.74,686.494 1603.3,686.494 1603.86,686.494 1604.42,686.494 1604.98,686.494 1605.54,686.494 1606.1,686.494 1606.66,686.494 1607.22,686.494 1607.78,686.494 1608.34,686.494 1608.9,686.494 1609.46,686.494 1610.02,686.494 1610.57,686.494 1611.13,686.494 1611.69,686.494 1612.25,686.494 1612.81,686.494 1613.37,686.494 1613.93,686.494 1614.49,686.494 1615.05,686.494 1615.61,686.494 1616.17,686.494 1616.73,686.494 1617.29,686.494 1617.84,686.494 1618.4,686.494 1618.96,686.494 1619.52,686.494 1620.08,686.494 1620.64,686.494 1621.2,686.494 1621.76,686.494 1622.32,686.494 1622.88,686.494 1623.44,686.494 1624,686.494 1624.56,686.494 1625.11,686.494 1625.67,686.494 1626.23,686.494 1626.79,686.494 1627.35,686.494 1627.91,686.494 1628.47,686.494 1629.03,686.494 1629.59,686.494 1630.15,686.494 1630.71,686.494 1631.27,686.494 1631.83,686.494 1632.39,686.494 1632.94,686.494 1633.5,686.494 1634.06,686.494 1634.62,686.494 1635.18,686.494 1635.74,686.494 1636.3,686.494 1636.86,686.494 1637.42,686.494 1637.98,686.494 1638.54,686.494 1639.1,686.494 1639.66,686.494 1640.21,686.494 1640.77,686.494 1641.33,686.494 1641.89,686.494 1642.45,686.494 1643.01,686.494 1643.57,686.494 1644.13,686.494 1644.69,686.494 1645.25,686.494 1645.81,686.494 1646.37,686.494 1646.93,686.494 1647.48,686.494 1648.04,686.494 1648.6,686.494 1649.16,686.494 1649.72,686.494 1650.28,686.494 1650.84,686.494 1651.4,686.494 1651.96,686.494 1652.52,686.494 1653.08,686.494 1653.64,686.494 1654.2,686.494 1654.76,686.494 1655.31,686.494 1655.87,686.494 1656.43,686.494 1656.99,686.494 1657.55,686.494 1658.11,686.494 1658.67,686.494 1659.23,686.494 1659.79,686.494 1660.35,686.494 1660.91,686.494 1661.47,686.494 1662.03,686.494 1662.58,686.494 1663.14,686.494 1663.7,686.494 1664.26,686.494 1664.82,686.494 1665.38,686.494 1665.94,686.494 1666.5,686.494 1667.06,686.494 1667.62,686.494 1668.18,686.494 1668.74,686.494 1669.3,686.494 1669.85,686.494 1670.41,686.494 1670.97,686.494 1671.53,686.494 1672.09,686.494 1672.65,686.494 1673.21,686.494 1673.77,686.494 1674.33,686.494 1674.89,686.494 1675.45,686.494 1676.01,686.494 1676.57,686.494 1677.13,686.494 1677.68,686.494 1678.24,686.494 1678.8,686.494 1679.36,686.494 1679.92,686.494 1680.48,686.494 1681.04,686.494 1681.6,686.494 1682.16,686.494 1682.72,686.494 1683.28,686.494 1683.84,686.494 1684.4,686.494 1684.95,686.494 1685.51,686.494 1686.07,686.494 1686.63,686.494 1687.19,686.494 1687.75,686.494 1688.31,686.494 1688.87,686.494 1689.43,686.494 1689.99,686.494 1690.55,686.494 1691.11,686.494 1691.67,686.494 1692.23,686.494 1692.78,686.494 1693.34,686.494 1693.9,686.494 1694.46,686.494 1695.02,686.494 1695.58,686.494 1696.14,686.494 1696.7,686.494 1697.26,686.494 1697.82,686.494 1698.38,686.494 1698.94,686.494 1699.5,686.494 1700.05,686.494 1700.61,686.494 1701.17,686.494 1701.73,686.494 1702.29,686.494 1702.85,686.494 1703.41,686.494 1703.97,686.494 1704.53,686.494 1705.09,686.494 1705.65,686.494 1706.21,686.494 1706.77,686.494 1707.32,686.494 1707.88,686.494 1708.44,686.494 1709,686.494 1709.56,686.494 1710.12,686.494 1710.68,686.494 1711.24,686.494 1711.8,686.494 1712.36,686.494 1712.92,686.494 1713.48,686.494 1714.04,686.494 1714.6,686.494 1715.15,686.494 1715.71,686.494 1716.27,686.494 1716.83,686.494 1717.39,686.494 1717.95,686.494 1718.51,686.494 1719.07,686.494 1719.63,686.494 1720.19,686.494 1720.75,686.494 1721.31,686.494 1721.87,686.494 1722.42,686.494 1722.98,686.494 1723.54,686.494 1724.1,686.494 1724.66,686.494 1725.22,686.494 1725.78,686.494 1726.34,686.494 1726.9,686.494 1727.46,686.494 1728.02,686.494 1728.58,686.494 1729.14,686.494 1729.69,686.494 1730.25,686.494 1730.81,686.494 1731.37,686.494 1731.93,686.494 1732.49,686.494 1733.05,686.494 1733.61,686.494 1734.17,686.494 1734.73,686.494 1735.29,686.494 1735.85,686.494 1736.41,686.494 1736.97,686.494 1737.52,686.494 1738.08,686.494 1738.64,686.494 1739.2,686.494 1739.76,686.494 1740.32,686.494 1740.88,686.494 1741.44,686.494 1742,686.494 1742.56,686.494 1743.12,686.494 1743.68,686.494 1744.24,686.494 1744.79,686.494 1745.35,686.494 1745.91,686.494 1746.47,686.494 1747.03,686.494 1747.59,686.494 1748.15,686.494 1748.71,686.494 1749.27,686.494 1749.83,686.494 1750.39,686.494 1750.95,686.494 1751.51,686.494 1752.06,686.494 1752.62,686.494 1753.18,686.494 1753.74,686.494 1754.3,686.494 1754.86,686.494 1755.42,686.494 1755.98,686.494 1756.54,686.494 1757.1,686.494 1757.66,686.494 1758.22,686.494 1758.78,686.494 1759.34,686.494 1759.89,686.494 1760.45,686.494 1761.01,686.494 1761.57,686.494 1762.13,686.494 1762.69,686.494 1763.25,686.494 1763.81,686.494 1764.37,686.494 1764.93,686.494 1765.49,686.494 1766.05,686.494 1766.61,686.494 1767.16,686.494 1767.72,686.494 1768.28,686.494 1768.84,686.494 1769.4,686.494 1769.96,686.494 1770.52,686.494 1771.08,686.494 1771.64,686.494 1772.2,686.494 1772.76,686.494 1773.32,686.494 1773.88,686.494 1774.43,686.494 1774.99,686.494 1775.55,686.494 1776.11,686.494 1776.67,686.494 1777.23,686.494 1777.79,686.494 1778.35,686.494 1778.91,686.494 1779.47,686.494 1780.03,686.494 1780.59,686.494 1781.15,686.494 1781.71,686.494 1782.26,686.494 1782.82,686.494 1783.38,686.494 1783.94,686.494 1784.5,686.494 1785.06,686.494 1785.62,686.494 1786.18,686.494 1786.74,686.494 1787.3,686.494 1787.86,686.494 1788.42,686.494 1788.98,686.494 1789.53,686.494 1790.09,686.494 1790.65,686.494 1791.21,686.494 1791.77,686.494 1792.33,686.494 1792.89,686.494 1793.45,686.494 1794.01,686.494 1794.57,686.494 1795.13,686.494 1795.69,686.494 1796.25,686.494 1796.8,686.494 1797.36,686.494 1797.92,686.494 1798.48,686.494 1799.04,686.494 1799.6,686.494 1800.16,686.494 1800.72,686.494 1801.28,686.494 1801.84,686.494 1802.4,686.494 1802.96,686.494 1803.52,686.494 1804.08,686.494 1804.63,686.494 1805.19,686.494 1805.75,686.494 1806.31,686.494 1806.87,686.494 1807.43,686.494 1807.99,686.494 1808.55,686.494 1809.11,686.494 1809.67,686.494 1810.23,686.494 1810.79,686.494 1811.35,686.494 1811.9,686.494 1812.46,686.494 1813.02,686.494 1813.58,686.494 1814.14,686.494 1814.7,686.494 1815.26,686.494 1815.82,686.494 1816.38,686.494 1816.94,686.494 1817.5,686.494 1818.06,686.494 1818.62,686.494 1819.18,686.494 1819.73,686.494 1820.29,686.494 1820.85,686.494 1821.41,686.494 1821.97,686.494 1822.53,686.494 1823.09,686.494 1823.65,686.494 1824.21,686.494 1824.77,686.494 1825.33,686.494 1825.89,686.494 1826.45,686.494 1827,686.494 1827.56,686.494 1828.12,686.494 1828.68,686.494 1829.24,686.494 1829.8,686.494 1830.36,686.494 1830.92,686.494 1831.48,686.494 1832.04,686.494 1832.6,686.494 1833.16,686.494 1833.72,686.494 1834.27,686.494 1834.83,686.494 1835.39,686.494 1835.95,686.494 1836.51,686.494 1837.07,686.494 1837.63,686.494 1838.19,686.494 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 684.87 L720.806 684.87 L721.365 684.87 L721.924 684.87 L722.484 684.87 L723.043 684.87 L723.602 684.87 L724.161 684.87 L724.721 684.87 L725.28 684.87 L725.839 684.87 L726.398 684.87 L726.958 684.87 L727.517 684.87 L728.076 684.87 L728.635 684.87 L729.195 684.87 L729.754 684.87 L730.313 684.87 L730.872 684.87 L731.432 684.87 L731.991 684.87 L732.55 684.87 L733.109 684.87 L733.669 684.87 L734.228 684.87 L734.787 684.87 L735.346 684.87 L735.906 684.87 L736.465 684.87 L737.024 684.87 L737.583 684.87 L738.143 684.87 L738.702 684.87 L739.261 684.87 L739.82 684.87 L740.38 684.87 L740.939 684.87 L741.498 684.87 L742.057 684.87 L742.617 684.87 L743.176 684.87 L743.735 684.87 L744.294 684.87 L744.854 684.87 L745.413 684.87 L745.972 684.87 L746.531 684.87 L747.091 684.87 L747.65 684.87 L748.209 684.87 L748.768 684.87 L749.328 684.87 L749.887 684.87 L750.446 684.87 L751.005 684.87 L751.565 684.87 L752.124 684.87 L752.683 684.87 L753.242 684.87 L753.802 684.87 L754.361 684.87 L754.92 684.87 L755.479 684.87 L756.039 684.87 L756.598 684.87 L757.157 684.87 L757.716 684.87 L758.276 684.87 L758.835 684.87 L759.394 684.87 L759.953 684.87 L760.513 684.87 L761.072 684.87 L761.631 684.87 L762.19 684.87 L762.75 684.87 L763.309 684.87 L763.868 684.87 L764.427 684.87 L764.987 684.87 L765.546 684.87 L766.105 684.87 L766.664 684.87 L767.224 684.87 L767.783 684.87 L768.342 684.87 L768.901 684.87 L769.461 684.87 L770.02 684.87 L770.579 684.87 L771.138 684.87 L771.698 684.87 L772.257 684.87 L772.816 684.87 L773.375 684.87 L773.935 684.87 L774.494 684.87 L775.053 684.87 L775.612 684.87 L776.172 684.87 L776.731 684.87 L777.29 684.87 L777.849 684.87 L778.409 684.87 L778.968 684.87 L779.527 684.87 L780.086 684.87 L780.646 684.87 L781.205 684.87 L781.764 684.87 L782.323 684.87 L782.883 684.87 L783.442 684.87 L784.001 684.87 L784.56 684.87 L785.12 684.87 L785.679 684.87 L786.238 684.87 L786.797 684.87 L787.357 684.87 L787.916 684.87 L788.475 684.87 L789.034 684.87 L789.594 684.87 L790.153 684.87 L790.712 684.87 L791.271 684.87 L791.831 684.87 L792.39 684.87 L792.949 684.87 L793.508 684.87 L794.068 684.87 L794.627 684.87 L795.186 684.87 L795.745 684.87 L796.305 684.87 L796.864 684.87 L797.423 684.87 L797.982 684.87 L798.542 684.87 L799.101 684.87 L799.66 684.87 L800.219 684.87 L800.779 684.87 L801.338 684.87 L801.897 684.87 L802.456 684.87 L803.016 684.87 L803.575 684.87 L804.134 684.87 L804.693 684.87 L805.253 684.87 L805.812 684.87 L806.371 684.87 L806.931 684.87 L807.49 684.87 L808.049 684.87 L808.608 684.87 L809.168 684.87 L809.727 684.87 L810.286 684.87 L810.845 684.87 L811.405 684.87 L811.964 684.87 L812.523 684.87 L813.082 684.87 L813.642 684.87 L814.201 684.87 L814.76 684.87 L815.319 684.87 L815.879 684.87 L816.438 684.87 L816.997 684.87 L817.556 684.87 L818.116 684.87 L818.675 684.87 L819.234 684.87 L819.793 684.87 L820.353 684.87 L820.912 684.87 L821.471 684.87 L822.03 684.87 L822.59 684.87 L823.149 684.87 L823.708 684.87 L824.267 684.87 L824.827 684.87 L825.386 684.87 L825.945 684.87 L826.504 684.87 L827.064 684.87 L827.623 684.87 L828.182 684.87 L828.741 684.87 L829.301 684.87 L829.86 684.87 L830.419 684.87 L830.978 684.87 L831.538 684.87 L832.097 684.87 L832.656 684.87 L833.215 684.87 L833.775 684.87 L834.334 684.87 L834.893 684.87 L835.452 684.87 L836.012 684.87 L836.571 684.87 L837.13 684.87 L837.689 684.87 L838.249 684.87 L838.808 684.87 L839.367 684.87 L839.926 684.87 L840.486 684.87 L841.045 684.87 L841.604 684.87 L842.163 684.87 L842.723 684.87 L843.282 684.87 L843.841 684.87 L844.4 684.87 L844.96 684.87 L845.519 684.87 L846.078 684.87 L846.637 684.87 L847.197 684.87 L847.756 684.87 L848.315 684.87 L848.874 684.87 L849.434 684.87 L849.993 684.87 L850.552 684.87 L851.111 684.87 L851.671 684.87 L852.23 684.87 L852.789 684.87 L853.348 684.87 L853.908 684.87 L854.467 684.87 L855.026 684.87 L855.585 684.87 L856.145 684.87 L856.704 684.87 L857.263 684.87 L857.822 684.87 L858.382 684.87 L858.941 684.87 L859.5 684.87 L860.059 684.87 L860.619 684.87 L861.178 684.87 L861.737 684.87 L862.296 684.87 L862.856 684.87 L863.415 684.87 L863.974 684.87 L864.533 684.87 L865.093 684.87 L865.652 684.87 L866.211 684.87 L866.77 684.87 L867.33 684.87 L867.889 684.87 L868.448 684.87 L869.007 684.87 L869.567 684.87 L870.126 684.87 L870.685 684.87 L871.244 684.87 L871.804 684.87 L872.363 684.87 L872.922 684.87 L873.481 684.87 L874.041 684.87 L874.6 684.87 L875.159 684.87 L875.718 684.87 L876.278 684.87 L876.837 684.87 L877.396 684.87 L877.955 684.87 L878.515 684.87 L879.074 684.87 L879.633 684.87 L880.192 684.87 L880.752 684.87 L881.311 684.87 L881.87 684.87 L882.429 684.87 L882.989 684.87 L883.548 684.87 L884.107 684.87 L884.666 684.87 L885.226 684.87 L885.785 684.87 L886.344 684.87 L886.903 684.87 L887.463 684.87 L888.022 684.87 L888.581 684.87 L889.14 684.87 L889.7 684.87 L890.259 684.87 L890.818 684.87 L891.377 684.87 L891.937 684.87 L892.496 684.87 L893.055 684.87 L893.614 684.87 L894.174 684.87 L894.733 684.87 L895.292 684.87 L895.851 684.87 L896.411 684.87 L896.97 684.87 L897.529 684.87 L898.088 684.87 L898.648 684.87 L899.207 684.87 L899.766 684.87 L900.325 684.87 L900.885 684.87 L901.444 684.87 L902.003 684.87 L902.562 684.87 L903.122 684.87 L903.681 684.87 L904.24 684.87 L904.799 684.87 L905.359 684.87 L905.918 684.87 L906.477 684.87 L907.036 684.87 L907.596 684.87 L908.155 684.87 L908.714 684.87 L909.273 684.87 L909.833 684.87 L910.392 684.87 L910.951 684.87 L911.51 684.87 L912.07 684.87 L912.629 684.87 L913.188 684.87 L913.747 684.87 L914.307 684.87 L914.866 684.87 L915.425 684.87 L915.984 684.87 L916.544 684.87 L917.103 684.87 L917.662 684.87 L918.221 684.87 L918.781 684.87 L919.34 684.87 L919.899 684.87 L920.458 684.87 L921.018 684.87 L921.577 684.87 L922.136 684.87 L922.695 684.87 L923.255 684.87 L923.814 684.87 L924.373 684.87 L924.932 684.87 L925.492 684.87 L926.051 684.87 L926.61 684.87 L927.169 684.87 L927.729 684.87 L928.288 684.87 L928.847 684.87 L929.406 684.87 L929.966 684.87 L930.525 684.87 L931.084 684.87 L931.644 684.87 L932.203 684.87 L932.762 684.87 L933.321 684.87 L933.881 684.87 L934.44 684.87 L934.999 684.87 L935.558 684.87 L936.118 684.87 L936.677 684.87 L937.236 684.87 L937.795 684.87 L938.355 684.87 L938.914 684.87 L939.473 684.87 L940.032 684.87 L940.592 684.87 L941.151 684.87 L941.71 684.87 L942.269 684.87 L942.829 684.87 L943.388 684.87 L943.947 684.87 L944.506 684.87 L945.066 684.87 L945.625 684.87 L946.184 684.87 L946.743 684.87 L947.303 684.87 L947.862 684.87 L948.421 684.87 L948.98 684.87 L949.54 684.87 L950.099 684.87 L950.658 684.87 L951.217 684.87 L951.777 684.87 L952.336 684.87 L952.895 684.87 L953.454 684.87 L954.014 684.87 L954.573 684.87 L955.132 684.87 L955.691 684.87 L956.251 684.87 L956.81 684.87 L957.369 684.87 L957.928 684.87 L958.488 684.87 L959.047 684.87 L959.606 684.87 L960.165 684.87 L960.725 684.87 L961.284 684.87 L961.843 684.87 L962.402 684.87 L962.962 684.87 L963.521 684.87 L964.08 684.87 L964.639 684.87 L965.199 684.87 L965.758 684.87 L966.317 684.87 L966.876 684.87 L967.436 684.87 L967.995 684.87 L968.554 684.87 L969.113 684.87 L969.673 684.87 L970.232 684.87 L970.791 684.87 L971.35 684.87 L971.91 684.87 L972.469 684.87 L973.028 684.87 L973.587 684.87 L974.147 684.87 L974.706 684.87 L975.265 684.87 L975.824 684.87 L976.384 684.87 L976.943 684.87 L977.502 684.87 L978.061 684.87 L978.621 684.87 L979.18 684.87 L979.739 684.87 L980.298 684.87 L980.858 684.87 L981.417 684.87 L981.976 684.87 L982.535 684.87 L983.095 684.87 L983.654 684.87 L984.213 684.87 L984.772 684.87 L985.332 684.87 L985.891 684.87 L986.45 684.87 L987.009 684.87 L987.569 684.87 L988.128 684.87 L988.687 684.87 L989.246 684.87 L989.806 684.87 L990.365 684.87 L990.924 684.87 L991.483 684.87 L992.043 684.87 L992.602 684.87 L993.161 684.87 L993.72 684.87 L994.28 684.87 L994.839 684.87 L995.398 684.87 L995.957 684.87 L996.517 684.87 L997.076 684.87 L997.635 684.87 L998.194 684.87 L998.754 684.87 L999.313 684.87 L999.872 684.87 L1000.43 684.87 L1000.99 684.87 L1001.55 684.87 L1002.11 684.87 L1002.67 684.87 L1003.23 684.87 L1003.79 684.87 L1004.35 684.87 L1004.91 684.87 L1005.46 684.87 L1006.02 684.87 L1006.58 684.87 L1007.14 684.87 L1007.7 684.87 L1008.26 684.87 L1008.82 684.87 L1009.38 684.87 L1009.94 684.87 L1010.5 684.87 L1011.06 684.87 L1011.62 684.87 L1012.18 684.87 L1012.73 684.87 L1013.29 684.87 L1013.85 684.87 L1014.41 684.87 L1014.97 684.87 L1015.53 684.87 L1016.09 684.87 L1016.65 684.87 L1017.21 684.87 L1017.77 684.87 L1018.33 684.87 L1018.89 684.87 L1019.45 684.87 L1020.01 684.87 L1020.56 684.87 L1021.12 684.87 L1021.68 684.87 L1022.24 684.87 L1022.8 684.87 L1023.36 684.87 L1023.92 684.87 L1024.48 684.87 L1025.04 684.87 L1025.6 684.87 L1026.16 684.87 L1026.72 684.87 L1027.28 684.87 L1027.83 684.87 L1028.39 684.87 L1028.95 684.87 L1029.51 684.87 L1030.07 684.87 L1030.63 684.87 L1031.19 684.87 L1031.75 684.87 L1032.31 684.87 L1032.87 684.87 L1033.43 684.87 L1033.99 684.87 L1034.55 684.87 L1035.1 684.87 L1035.66 684.87 L1036.22 684.87 L1036.78 684.87 L1037.34 684.87 L1037.9 684.87 L1038.46 684.87 L1039.02 684.87 L1039.58 684.87 L1040.14 684.87 L1040.7 684.87 L1041.26 684.87 L1041.82 684.87 L1042.38 684.87 L1042.93 684.87 L1043.49 684.87 L1044.05 684.87 L1044.61 684.87 L1045.17 684.87 L1045.73 684.87 L1046.29 684.87 L1046.85 684.87 L1047.41 684.87 L1047.97 684.87 L1048.53 684.87 L1049.09 684.87 L1049.65 684.87 L1050.2 684.87 L1050.76 684.87 L1051.32 684.87 L1051.88 684.87 L1052.44 684.87 L1053 684.87 L1053.56 684.87 L1054.12 684.87 L1054.68 684.87 L1055.24 684.87 L1055.8 684.87 L1056.36 684.87 L1056.92 684.87 L1057.48 684.87 L1058.03 684.87 L1058.59 684.87 L1059.15 684.87 L1059.71 684.87 L1060.27 684.87 L1060.83 684.87 L1061.39 684.87 L1061.95 684.87 L1062.51 684.87 L1063.07 684.87 L1063.63 684.87 L1064.19 684.87 L1064.75 684.87 L1065.3 684.87 L1065.86 684.87 L1066.42 684.87 L1066.98 684.87 L1067.54 684.87 L1068.1 684.87 L1068.66 684.87 L1069.22 684.87 L1069.78 684.87 L1070.34 684.87 L1070.9 684.87 L1071.46 684.87 L1072.02 684.87 L1072.57 684.87 L1073.13 684.87 L1073.69 684.87 L1074.25 684.87 L1074.81 684.87 L1075.37 684.87 L1075.93 684.87 L1076.49 684.87 L1077.05 684.87 L1077.61 684.87 L1078.17 684.87 L1078.73 684.87 L1079.29 684.87 L1079.85 684.87 L1080.4 684.87 L1080.96 684.87 L1081.52 684.87 L1082.08 684.87 L1082.64 684.87 L1083.2 684.87 L1083.76 684.87 L1084.32 684.87 L1084.88 684.87 L1085.44 684.87 L1086 684.87 L1086.56 684.87 L1087.12 684.87 L1087.67 684.87 L1088.23 684.87 L1088.79 684.87 L1089.35 684.87 L1089.91 684.87 L1090.47 684.87 L1091.03 684.87 L1091.59 684.87 L1092.15 684.87 L1092.71 684.87 L1093.27 684.87 L1093.83 684.87 L1094.39 684.87 L1094.94 684.87 L1095.5 684.87 L1096.06 684.87 L1096.62 684.87 L1097.18 684.87 L1097.74 684.87 L1098.3 684.87 L1098.86 684.87 L1099.42 684.87 L1099.98 684.87 L1100.54 684.87 L1101.1 684.87 L1101.66 684.87 L1102.22 684.87 L1102.77 684.87 L1103.33 684.87 L1103.89 684.87 L1104.45 684.87 L1105.01 684.87 L1105.57 684.87 L1106.13 684.87 L1106.69 684.87 L1107.25 684.87 L1107.81 684.87 L1108.37 684.87 L1108.93 684.87 L1109.49 684.87 L1110.04 684.87 L1110.6 684.87 L1111.16 684.87 L1111.72 684.87 L1112.28 684.87 L1112.84 684.87 L1113.4 684.87 L1113.96 684.87 L1114.52 684.87 L1115.08 684.87 L1115.64 684.87 L1116.2 684.87 L1116.76 684.87 L1117.31 684.87 L1117.87 684.87 L1118.43 684.87 L1118.99 684.87 L1119.55 684.87 L1120.11 684.87 L1120.67 684.87 L1121.23 684.87 L1121.79 684.87 L1122.35 684.87 L1122.91 684.87 L1123.47 684.87 L1124.03 684.87 L1124.59 684.87 L1125.14 684.87 L1125.7 684.87 L1126.26 684.87 L1126.82 684.87 L1127.38 684.87 L1127.94 684.87 L1128.5 684.87 L1129.06 684.87 L1129.62 684.87 L1130.18 684.87 L1130.74 684.87 L1131.3 684.87 L1131.86 684.87 L1132.41 684.87 L1132.97 684.87 L1133.53 684.87 L1134.09 684.87 L1134.65 684.87 L1135.21 684.87 L1135.77 684.87 L1136.33 684.87 L1136.89 684.87 L1137.45 684.87 L1138.01 684.87 L1138.57 684.87 L1139.13 684.87 L1139.68 684.87 L1140.24 684.87 L1140.8 684.87 L1141.36 684.87 L1141.92 684.87 L1142.48 684.87 L1143.04 684.87 L1143.6 684.87 L1144.16 684.87 L1144.72 684.87 L1145.28 684.87 L1145.84 684.87 L1146.4 684.87 L1146.96 684.87 L1147.51 684.87 L1148.07 684.87 L1148.63 684.87 L1149.19 684.87 L1149.75 684.87 L1150.31 684.87 L1150.87 684.87 L1151.43 684.87 L1151.99 684.87 L1152.55 684.87 L1153.11 684.87 L1153.67 684.87 L1154.23 684.87 L1154.78 684.87 L1155.34 684.87 L1155.9 684.87 L1156.46 684.87 L1157.02 684.87 L1157.58 684.87 L1158.14 684.87 L1158.7 684.87 L1159.26 684.87 L1159.82 684.87 L1160.38 684.87 L1160.94 684.87 L1161.5 684.87 L1162.05 684.87 L1162.61 684.87 L1163.17 684.87 L1163.73 684.87 L1164.29 684.87 L1164.85 684.87 L1165.41 684.87 L1165.97 684.87 L1166.53 684.87 L1167.09 684.87 L1167.65 684.87 L1168.21 684.87 L1168.77 684.87 L1169.33 684.87 L1169.88 684.87 L1170.44 684.87 L1171 684.87 L1171.56 684.87 L1172.12 684.87 L1172.68 684.87 L1173.24 684.87 L1173.8 684.87 L1174.36 684.87 L1174.92 684.87 L1175.48 684.87 L1176.04 684.87 L1176.6 684.87 L1177.15 684.87 L1177.71 684.87 L1178.27 684.87 L1178.83 684.87 L1179.39 684.87 L1179.95 684.87 L1180.51 684.87 L1181.07 684.87 L1181.63 684.87 L1182.19 684.87 L1182.75 684.87 L1183.31 684.87 L1183.87 684.87 L1184.43 684.87 L1184.98 684.87 L1185.54 684.87 L1186.1 684.87 L1186.66 684.87 L1187.22 684.87 L1187.78 684.87 L1188.34 684.87 L1188.9 684.87 L1189.46 684.87 L1190.02 684.87 L1190.58 684.87 L1191.14 684.87 L1191.7 684.87 L1192.25 684.87 L1192.81 684.87 L1193.37 684.87 L1193.93 684.87 L1194.49 684.87 L1195.05 684.87 L1195.61 684.87 L1196.17 684.87 L1196.73 684.87 L1197.29 684.87 L1197.85 684.87 L1198.41 684.87 L1198.97 684.87 L1199.52 684.87 L1200.08 684.87 L1200.64 684.87 L1201.2 684.87 L1201.76 684.87 L1202.32 684.87 L1202.88 684.87 L1203.44 684.87 L1204 684.87 L1204.56 684.87 L1205.12 684.87 L1205.68 684.87 L1206.24 684.87 L1206.8 684.87 L1207.35 684.87 L1207.91 684.87 L1208.47 684.87 L1209.03 684.87 L1209.59 684.87 L1210.15 684.87 L1210.71 684.87 L1211.27 684.87 L1211.83 684.87 L1212.39 684.87 L1212.95 684.87 L1213.51 684.87 L1214.07 684.87 L1214.62 684.87 L1215.18 684.87 L1215.74 684.87 L1216.3 684.87 L1216.86 684.87 L1217.42 684.87 L1217.98 684.87 L1218.54 684.87 L1219.1 684.87 L1219.66 684.87 L1220.22 684.87 L1220.78 684.87 L1221.34 684.87 L1221.89 684.87 L1222.45 684.87 L1223.01 684.87 L1223.57 684.87 L1224.13 684.87 L1224.69 684.87 L1225.25 684.87 L1225.81 684.87 L1226.37 684.87 L1226.93 684.87 L1227.49 684.87 L1228.05 684.87 L1228.61 684.87 L1229.17 684.87 L1229.72 684.87 L1230.28 684.87 L1230.84 684.87 L1231.4 684.87 L1231.96 684.87 L1232.52 684.87 L1233.08 684.87 L1233.64 684.87 L1234.2 684.87 L1234.76 684.87 L1235.32 684.87 L1235.88 684.87 L1236.44 684.87 L1236.99 684.87 L1237.55 684.87 L1238.11 684.87 L1238.67 684.87 L1239.23 684.87 L1239.79 684.87 L1240.35 684.87 L1240.91 684.87 L1241.47 684.87 L1242.03 684.87 L1242.59 684.87 L1243.15 684.87 L1243.71 684.87 L1244.26 684.87 L1244.82 684.87 L1245.38 684.87 L1245.94 684.87 L1246.5 684.87 L1247.06 684.87 L1247.62 684.87 L1248.18 684.87 L1248.74 684.87 L1249.3 684.87 L1249.86 684.87 L1250.42 684.87 L1250.98 684.87 L1251.54 684.87 L1252.09 684.87 L1252.65 684.87 L1253.21 684.87 L1253.77 684.87 L1254.33 684.87 L1254.89 684.87 L1255.45 684.87 L1256.01 684.87 L1256.57 684.87 L1257.13 684.87 L1257.69 684.87 L1258.25 684.87 L1258.81 684.87 L1259.36 684.87 L1259.92 684.87 L1260.48 684.87 L1261.04 684.87 L1261.6 684.87 L1262.16 684.87 L1262.72 684.87 L1263.28 684.87 L1263.84 684.87 L1264.4 684.87 L1264.96 684.87 L1265.52 684.87 L1266.08 684.87 L1266.63 684.87 L1267.19 684.87 L1267.75 684.87 L1268.31 684.87 L1268.87 684.87 L1269.43 684.87 L1269.99 684.87 L1270.55 684.87 L1271.11 684.87 L1271.67 684.87 L1272.23 684.87 L1272.79 684.87 L1273.35 684.87 L1273.91 684.87 L1274.46 684.87 L1275.02 684.87 L1275.58 684.87 L1276.14 684.87 L1276.7 684.87 L1277.26 684.87 L1277.82 684.87 L1278.38 684.87 L1278.94 684.87 L1279.5 684.87 L1280.06 684.87 L1280.62 684.87 L1281.18 684.87 L1281.73 684.87 L1282.29 684.87 L1282.85 684.87 L1283.41 684.87 L1283.97 684.87 L1284.53 684.87 L1285.09 684.87 L1285.65 684.87 L1286.21 684.87 L1286.77 684.87 L1287.33 684.87 L1287.89 684.87 L1288.45 684.87 L1289 684.87 L1289.56 684.87 L1290.12 684.87 L1290.68 684.87 L1291.24 684.87 L1291.8 684.87 L1292.36 684.87 L1292.92 684.87 L1293.48 684.87 L1294.04 684.87 L1294.6 684.87 L1295.16 684.87 L1295.72 684.87 L1296.28 684.87 L1296.83 684.87 L1297.39 684.87 L1297.95 684.87 L1298.51 684.87 L1299.07 684.87 L1299.63 684.87 L1300.19 684.87 L1300.75 684.87 L1301.31 684.87 L1301.87 684.87 L1302.43 684.87 L1302.99 684.87 L1303.55 684.87 L1304.1 684.87 L1304.66 684.87 L1305.22 684.87 L1305.78 684.87 L1306.34 684.87 L1306.9 684.87 L1307.46 684.87 L1308.02 684.87 L1308.58 684.87 L1309.14 684.87 L1309.7 684.87 L1310.26 684.87 L1310.82 684.87 L1311.38 684.87 L1311.93 684.87 L1312.49 684.87 L1313.05 684.87 L1313.61 684.87 L1314.17 684.87 L1314.73 684.87 L1315.29 684.87 L1315.85 684.87 L1316.41 684.87 L1316.97 684.87 L1317.53 684.87 L1318.09 684.87 L1318.65 684.87 L1319.2 684.87 L1319.76 684.87 L1320.32 684.87 L1320.88 684.87 L1321.44 684.87 L1322 684.87 L1322.56 684.87 L1323.12 684.87 L1323.68 684.87 L1324.24 684.87 L1324.8 684.87 L1325.36 684.87 L1325.92 684.87 L1326.47 684.87 L1327.03 684.87 L1327.59 684.87 L1328.15 684.87 L1328.71 684.87 L1329.27 684.87 L1329.83 684.87 L1330.39 684.87 L1330.95 684.87 L1331.51 684.87 L1332.07 684.87 L1332.63 684.87 L1333.19 684.87 L1333.75 684.87 L1334.3 684.87 L1334.86 684.87 L1335.42 684.87 L1335.98 684.87 L1336.54 684.87 L1337.1 684.87 L1337.66 684.87 L1338.22 684.87 L1338.78 684.87 L1339.34 684.87 L1339.9 684.87 L1340.46 684.87 L1341.02 684.87 L1341.57 684.87 L1342.13 684.87 L1342.69 684.87 L1343.25 684.87 L1343.81 684.87 L1344.37 684.87 L1344.93 684.87 L1345.49 684.87 L1346.05 684.87 L1346.61 684.87 L1347.17 684.87 L1347.73 684.87 L1348.29 684.87 L1348.84 684.87 L1349.4 684.87 L1349.96 684.87 L1350.52 684.87 L1351.08 684.87 L1351.64 684.87 L1352.2 684.87 L1352.76 684.87 L1353.32 684.87 L1353.88 684.87 L1354.44 684.87 L1355 684.87 L1355.56 684.87 L1356.12 684.87 L1356.67 684.87 L1357.23 684.87 L1357.79 684.87 L1358.35 684.87 L1358.91 684.87 L1359.47 684.87 L1360.03 684.87 L1360.59 684.87 L1361.15 684.87 L1361.71 684.87 L1362.27 684.87 L1362.83 684.87 L1363.39 684.87 L1363.94 684.87 L1364.5 684.87 L1365.06 684.87 L1365.62 684.87 L1366.18 684.87 L1366.74 684.87 L1367.3 684.87 L1367.86 684.87 L1368.42 684.87 L1368.98 684.87 L1369.54 684.87 L1370.1 684.87 L1370.66 684.87 L1371.21 684.87 L1371.77 684.87 L1372.33 684.87 L1372.89 684.87 L1373.45 684.87 L1374.01 684.87 L1374.57 684.87 L1375.13 684.87 L1375.69 684.87 L1376.25 684.87 L1376.81 684.87 L1377.37 684.87 L1377.93 684.87 L1378.49 684.87 L1379.04 684.87 L1379.6 684.87 L1380.16 684.87 L1380.72 684.87 L1381.28 684.87 L1381.84 684.87 L1382.4 684.87 L1382.96 684.87 L1383.52 684.87 L1384.08 684.87 L1384.64 684.87 L1385.2 684.87 L1385.76 684.87 L1386.31 684.87 L1386.87 684.87 L1387.43 684.87 L1387.99 684.87 L1388.55 684.87 L1389.11 684.87 L1389.67 684.87 L1390.23 684.87 L1390.79 684.87 L1391.35 684.87 L1391.91 684.87 L1392.47 684.87 L1393.03 684.87 L1393.58 684.87 L1394.14 684.87 L1394.7 684.87 L1395.26 684.87 L1395.82 684.87 L1396.38 684.87 L1396.94 684.87 L1397.5 684.87 L1398.06 684.87 L1398.62 684.87 L1399.18 684.87 L1399.74 684.87 L1400.3 684.87 L1400.86 684.87 L1401.41 684.87 L1401.97 684.87 L1402.53 684.87 L1403.09 684.87 L1403.65 684.87 L1404.21 684.87 L1404.77 684.87 L1405.33 684.87 L1405.89 684.87 L1406.45 684.87 L1407.01 684.87 L1407.57 684.87 L1408.13 684.87 L1408.68 684.87 L1409.24 684.87 L1409.8 684.87 L1410.36 684.87 L1410.92 684.87 L1411.48 684.87 L1412.04 684.87 L1412.6 684.87 L1413.16 684.87 L1413.72 684.87 L1414.28 684.87 L1414.84 684.87 L1415.4 684.87 L1415.95 684.87 L1416.51 684.87 L1417.07 684.87 L1417.63 684.87 L1418.19 684.87 L1418.75 684.87 L1419.31 684.87 L1419.87 684.87 L1420.43 684.87 L1420.99 684.87 L1421.55 684.87 L1422.11 684.87 L1422.67 684.87 L1423.23 684.87 L1423.78 684.87 L1424.34 684.87 L1424.9 684.87 L1425.46 684.87 L1426.02 684.87 L1426.58 684.87 L1427.14 684.87 L1427.7 684.87 L1428.26 684.87 L1428.82 684.87 L1429.38 684.87 L1429.94 684.87 L1430.5 684.87 L1431.05 684.87 L1431.61 684.87 L1432.17 684.87 L1432.73 684.87 L1433.29 684.87 L1433.85 684.87 L1434.41 684.87 L1434.97 684.87 L1435.53 684.87 L1436.09 684.87 L1436.65 684.87 L1437.21 684.87 L1437.77 684.87 L1438.33 684.87 L1438.88 684.87 L1439.44 684.87 L1440 684.87 L1440.56 684.87 L1441.12 684.87 L1441.68 684.87 L1442.24 684.87 L1442.8 684.87 L1443.36 684.87 L1443.92 684.87 L1444.48 684.87 L1445.04 684.87 L1445.6 684.87 L1446.15 684.87 L1446.71 684.87 L1447.27 684.87 L1447.83 684.87 L1448.39 684.87 L1448.95 684.87 L1449.51 684.87 L1450.07 684.87 L1450.63 684.87 L1451.19 684.87 L1451.75 684.87 L1452.31 684.87 L1452.87 684.87 L1453.42 684.87 L1453.98 684.87 L1454.54 684.87 L1455.1 684.87 L1455.66 684.87 L1456.22 684.87 L1456.78 684.87 L1457.34 684.87 L1457.9 684.87 L1458.46 684.87 L1459.02 684.87 L1459.58 684.87 L1460.14 684.87 L1460.7 684.87 L1461.25 684.87 L1461.81 684.87 L1462.37 684.87 L1462.93 684.87 L1463.49 684.87 L1464.05 684.87 L1464.61 684.87 L1465.17 684.87 L1465.73 684.87 L1466.29 684.87 L1466.85 684.87 L1467.41 684.87 L1467.97 684.87 L1468.52 684.87 L1469.08 684.87 L1469.64 684.87 L1470.2 684.87 L1470.76 684.87 L1471.32 684.87 L1471.88 684.87 L1472.44 684.87 L1473 684.87 L1473.56 684.87 L1474.12 684.87 L1474.68 684.87 L1475.24 684.87 L1475.79 684.87 L1476.35 684.87 L1476.91 684.87 L1477.47 684.87 L1478.03 684.87 L1478.59 684.87 L1479.15 684.87 L1479.71 684.87 L1480.27 684.87 L1480.83 684.87 L1481.39 684.87 L1481.95 684.87 L1482.51 684.87 L1483.07 684.87 L1483.62 684.87 L1484.18 684.87 L1484.74 684.87 L1485.3 684.87 L1485.86 684.87 L1486.42 684.87 L1486.98 684.87 L1487.54 684.87 L1488.1 684.87 L1488.66 684.87 L1489.22 684.87 L1489.78 684.87 L1490.34 684.87 L1490.89 684.87 L1491.45 684.87 L1492.01 684.87 L1492.57 684.87 L1493.13 684.87 L1493.69 684.87 L1494.25 684.87 L1494.81 684.87 L1495.37 684.87 L1495.93 684.87 L1496.49 684.87 L1497.05 684.87 L1497.61 684.87 L1498.16 684.87 L1498.72 684.87 L1499.28 684.87 L1499.84 684.87 L1500.4 684.87 L1500.96 684.87 L1501.52 684.87 L1502.08 684.87 L1502.64 684.87 L1503.2 684.87 L1503.76 684.87 L1504.32 684.87 L1504.88 684.87 L1505.44 684.87 L1505.99 684.87 L1506.55 684.87 L1507.11 684.87 L1507.67 684.87 L1508.23 684.87 L1508.79 684.87 L1509.35 684.87 L1509.91 684.87 L1510.47 684.87 L1511.03 684.87 L1511.59 684.87 L1512.15 684.87 L1512.71 684.87 L1513.26 684.87 L1513.82 684.87 L1514.38 684.87 L1514.94 684.87 L1515.5 684.87 L1516.06 684.87 L1516.62 684.87 L1517.18 684.87 L1517.74 684.87 L1518.3 684.87 L1518.86 684.87 L1519.42 684.87 L1519.98 684.87 L1520.53 684.87 L1521.09 684.87 L1521.65 684.87 L1522.21 684.87 L1522.77 684.87 L1523.33 684.87 L1523.89 684.87 L1524.45 684.87 L1525.01 684.87 L1525.57 684.87 L1526.13 684.87 L1526.69 684.87 L1527.25 684.87 L1527.81 684.87 L1528.36 684.87 L1528.92 684.87 L1529.48 684.87 L1530.04 684.87 L1530.6 684.87 L1531.16 684.87 L1531.72 684.87 L1532.28 684.87 L1532.84 684.87 L1533.4 684.87 L1533.96 684.87 L1534.52 684.87 L1535.08 684.87 L1535.63 684.87 L1536.19 684.87 L1536.75 684.87 L1537.31 684.87 L1537.87 684.87 L1538.43 684.87 L1538.99 684.87 L1539.55 684.87 L1540.11 684.87 L1540.67 684.87 L1541.23 684.87 L1541.79 684.87 L1542.35 684.87 L1542.9 684.87 L1543.46 684.87 L1544.02 684.87 L1544.58 684.87 L1545.14 684.87 L1545.7 684.87 L1546.26 684.87 L1546.82 684.87 L1547.38 684.87 L1547.94 684.87 L1548.5 684.87 L1549.06 684.87 L1549.62 684.87 L1550.18 684.87 L1550.73 684.87 L1551.29 684.87 L1551.85 684.87 L1552.41 684.87 L1552.97 684.87 L1553.53 684.87 L1554.09 684.87 L1554.65 684.87 L1555.21 684.87 L1555.77 684.87 L1556.33 684.87 L1556.89 684.87 L1557.45 684.87 L1558 684.87 L1558.56 684.87 L1559.12 684.87 L1559.68 684.87 L1560.24 684.87 L1560.8 684.87 L1561.36 684.87 L1561.92 684.87 L1562.48 684.87 L1563.04 684.87 L1563.6 684.87 L1564.16 684.87 L1564.72 684.87 L1565.28 684.87 L1565.83 684.87 L1566.39 684.87 L1566.95 684.87 L1567.51 684.87 L1568.07 684.87 L1568.63 684.87 L1569.19 684.87 L1569.75 684.87 L1570.31 684.87 L1570.87 684.87 L1571.43 684.87 L1571.99 684.87 L1572.55 684.87 L1573.1 684.87 L1573.66 684.87 L1574.22 684.87 L1574.78 684.87 L1575.34 684.87 L1575.9 684.87 L1576.46 684.87 L1577.02 684.87 L1577.58 684.87 L1578.14 684.87 L1578.7 684.87 L1579.26 684.87 L1579.82 684.87 L1580.37 684.87 L1580.93 684.87 L1581.49 684.87 L1582.05 684.87 L1582.61 684.87 L1583.17 684.87 L1583.73 684.87 L1584.29 684.87 L1584.85 684.87 L1585.41 684.87 L1585.97 684.87 L1586.53 684.87 L1587.09 684.87 L1587.65 684.87 L1588.2 684.87 L1588.76 684.87 L1589.32 684.87 L1589.88 684.87 L1590.44 684.87 L1591 684.87 L1591.56 684.87 L1592.12 684.87 L1592.68 684.87 L1593.24 684.87 L1593.8 684.87 L1594.36 684.87 L1594.92 684.87 L1595.47 684.87 L1596.03 684.87 L1596.59 684.87 L1597.15 684.87 L1597.71 684.87 L1598.27 684.87 L1598.83 684.87 L1599.39 684.87 L1599.95 684.87 L1600.51 684.87 L1601.07 684.87 L1601.63 684.87 L1602.19 684.87 L1602.74 684.87 L1603.3 684.87 L1603.86 684.87 L1604.42 684.87 L1604.98 684.87 L1605.54 684.87 L1606.1 684.87 L1606.66 684.87 L1607.22 684.87 L1607.78 684.87 L1608.34 684.87 L1608.9 684.87 L1609.46 684.87 L1610.02 684.87 L1610.57 684.87 L1611.13 684.87 L1611.69 684.87 L1612.25 684.87 L1612.81 684.87 L1613.37 684.87 L1613.93 684.87 L1614.49 684.87 L1615.05 684.87 L1615.61 684.87 L1616.17 684.87 L1616.73 684.87 L1617.29 684.87 L1617.84 684.87 L1618.4 684.87 L1618.96 684.87 L1619.52 684.87 L1620.08 684.87 L1620.64 684.87 L1621.2 684.87 L1621.76 684.87 L1622.32 684.87 L1622.88 684.87 L1623.44 684.87 L1624 684.87 L1624.56 684.87 L1625.11 684.87 L1625.67 684.87 L1626.23 684.87 L1626.79 684.87 L1627.35 684.87 L1627.91 684.87 L1628.47 684.87 L1629.03 684.87 L1629.59 684.87 L1630.15 684.87 L1630.71 684.87 L1631.27 684.87 L1631.83 684.87 L1632.39 684.87 L1632.94 684.87 L1633.5 684.87 L1634.06 684.87 L1634.62 684.87 L1635.18 684.87 L1635.74 684.87 L1636.3 684.87 L1636.86 684.87 L1637.42 684.87 L1637.98 684.87 L1638.54 684.87 L1639.1 684.87 L1639.66 684.87 L1640.21 684.87 L1640.77 684.87 L1641.33 684.87 L1641.89 684.87 L1642.45 684.87 L1643.01 684.87 L1643.57 684.87 L1644.13 684.87 L1644.69 684.87 L1645.25 684.87 L1645.81 684.87 L1646.37 684.87 L1646.93 684.87 L1647.48 684.87 L1648.04 684.87 L1648.6 684.87 L1649.16 684.87 L1649.72 684.87 L1650.28 684.87 L1650.84 684.87 L1651.4 684.87 L1651.96 684.87 L1652.52 684.87 L1653.08 684.87 L1653.64 684.87 L1654.2 684.87 L1654.76 684.87 L1655.31 684.87 L1655.87 684.87 L1656.43 684.87 L1656.99 684.87 L1657.55 684.87 L1658.11 684.87 L1658.67 684.87 L1659.23 684.87 L1659.79 684.87 L1660.35 684.87 L1660.91 684.87 L1661.47 684.87 L1662.03 684.87 L1662.58 684.87 L1663.14 684.87 L1663.7 684.87 L1664.26 684.87 L1664.82 684.87 L1665.38 684.87 L1665.94 684.87 L1666.5 684.87 L1667.06 684.87 L1667.62 684.87 L1668.18 684.87 L1668.74 684.87 L1669.3 684.87 L1669.85 684.87 L1670.41 684.87 L1670.97 684.87 L1671.53 684.87 L1672.09 684.87 L1672.65 684.87 L1673.21 684.87 L1673.77 684.87 L1674.33 684.87 L1674.89 684.87 L1675.45 684.87 L1676.01 684.87 L1676.57 684.87 L1677.13 684.87 L1677.68 684.87 L1678.24 684.87 L1678.8 684.87 L1679.36 684.87 L1679.92 684.87 L1680.48 684.87 L1681.04 684.87 L1681.6 684.87 L1682.16 684.87 L1682.72 684.87 L1683.28 684.87 L1683.84 684.87 L1684.4 684.87 L1684.95 684.87 L1685.51 684.87 L1686.07 684.87 L1686.63 684.87 L1687.19 684.87 L1687.75 684.87 L1688.31 684.87 L1688.87 684.87 L1689.43 684.87 L1689.99 684.87 L1690.55 684.87 L1691.11 684.87 L1691.67 684.87 L1692.23 684.87 L1692.78 684.87 L1693.34 684.87 L1693.9 684.87 L1694.46 684.87 L1695.02 684.87 L1695.58 684.87 L1696.14 684.87 L1696.7 684.87 L1697.26 684.87 L1697.82 684.87 L1698.38 684.87 L1698.94 684.87 L1699.5 684.87 L1700.05 684.87 L1700.61 684.87 L1701.17 684.87 L1701.73 684.87 L1702.29 684.87 L1702.85 684.87 L1703.41 684.87 L1703.97 684.87 L1704.53 684.87 L1705.09 684.87 L1705.65 684.87 L1706.21 684.87 L1706.77 684.87 L1707.32 684.87 L1707.88 684.87 L1708.44 684.87 L1709 684.87 L1709.56 684.87 L1710.12 684.87 L1710.68 684.87 L1711.24 684.87 L1711.8 684.87 L1712.36 684.87 L1712.92 684.87 L1713.48 684.87 L1714.04 684.87 L1714.6 684.87 L1715.15 684.87 L1715.71 684.87 L1716.27 684.87 L1716.83 684.87 L1717.39 684.87 L1717.95 684.87 L1718.51 684.87 L1719.07 684.87 L1719.63 684.87 L1720.19 684.87 L1720.75 684.87 L1721.31 684.87 L1721.87 684.87 L1722.42 684.87 L1722.98 684.87 L1723.54 684.87 L1724.1 684.87 L1724.66 684.87 L1725.22 684.87 L1725.78 684.87 L1726.34 684.87 L1726.9 684.87 L1727.46 684.87 L1728.02 684.87 L1728.58 684.87 L1729.14 684.87 L1729.69 684.87 L1730.25 684.87 L1730.81 684.87 L1731.37 684.87 L1731.93 684.87 L1732.49 684.87 L1733.05 684.87 L1733.61 684.87 L1734.17 684.87 L1734.73 684.87 L1735.29 684.87 L1735.85 684.87 L1736.41 684.87 L1736.97 684.87 L1737.52 684.87 L1738.08 684.87 L1738.64 684.87 L1739.2 684.87 L1739.76 684.87 L1740.32 684.87 L1740.88 684.87 L1741.44 684.87 L1742 684.87 L1742.56 684.87 L1743.12 684.87 L1743.68 684.87 L1744.24 684.87 L1744.79 684.87 L1745.35 684.87 L1745.91 684.87 L1746.47 684.87 L1747.03 684.87 L1747.59 684.87 L1748.15 684.87 L1748.71 684.87 L1749.27 684.87 L1749.83 684.87 L1750.39 684.87 L1750.95 684.87 L1751.51 684.87 L1752.06 684.87 L1752.62 684.87 L1753.18 684.87 L1753.74 684.87 L1754.3 684.87 L1754.86 684.87 L1755.42 684.87 L1755.98 684.87 L1756.54 684.87 L1757.1 684.87 L1757.66 684.87 L1758.22 684.87 L1758.78 684.87 L1759.34 684.87 L1759.89 684.87 L1760.45 684.87 L1761.01 684.87 L1761.57 684.87 L1762.13 684.87 L1762.69 684.87 L1763.25 684.87 L1763.81 684.87 L1764.37 684.87 L1764.93 684.87 L1765.49 684.87 L1766.05 684.87 L1766.61 684.87 L1767.16 684.87 L1767.72 684.87 L1768.28 684.87 L1768.84 684.87 L1769.4 684.87 L1769.96 684.87 L1770.52 684.87 L1771.08 684.87 L1771.64 684.87 L1772.2 684.87 L1772.76 684.87 L1773.32 684.87 L1773.88 684.87 L1774.43 684.87 L1774.99 684.87 L1775.55 684.87 L1776.11 684.87 L1776.67 684.87 L1777.23 684.87 L1777.79 684.87 L1778.35 684.87 L1778.91 684.87 L1779.47 684.87 L1780.03 684.87 L1780.59 684.87 L1781.15 684.87 L1781.71 684.87 L1782.26 684.87 L1782.82 684.87 L1783.38 684.87 L1783.94 684.87 L1784.5 684.87 L1785.06 684.87 L1785.62 684.87 L1786.18 684.87 L1786.74 684.87 L1787.3 684.87 L1787.86 684.87 L1788.42 684.87 L1788.98 684.87 L1789.53 684.87 L1790.09 684.87 L1790.65 684.87 L1791.21 684.87 L1791.77 684.87 L1792.33 684.87 L1792.89 684.87 L1793.45 684.87 L1794.01 684.87 L1794.57 684.87 L1795.13 684.87 L1795.69 684.87 L1796.25 684.87 L1796.8 684.87 L1797.36 684.87 L1797.92 684.87 L1798.48 684.87 L1799.04 684.87 L1799.6 684.87 L1800.16 684.87 L1800.72 684.87 L1801.28 684.87 L1801.84 684.87 L1802.4 684.87 L1802.96 684.87 L1803.52 684.87 L1804.08 684.87 L1804.63 684.87 L1805.19 684.87 L1805.75 684.87 L1806.31 684.87 L1806.87 684.87 L1807.43 684.87 L1807.99 684.87 L1808.55 684.87 L1809.11 684.87 L1809.67 684.87 L1810.23 684.87 L1810.79 684.87 L1811.35 684.87 L1811.9 684.87 L1812.46 684.87 L1813.02 684.87 L1813.58 684.87 L1814.14 684.87 L1814.7 684.87 L1815.26 684.87 L1815.82 684.87 L1816.38 684.87 L1816.94 684.87 L1817.5 684.87 L1818.06 684.87 L1818.62 684.87 L1819.18 684.87 L1819.73 684.87 L1820.29 684.87 L1820.85 684.87 L1821.41 684.87 L1821.97 684.87 L1822.53 684.87 L1823.09 684.87 L1823.65 684.87 L1824.21 684.87 L1824.77 684.87 L1825.33 684.87 L1825.89 684.87 L1826.45 684.87 L1827 684.87 L1827.56 684.87 L1828.12 684.87 L1828.68 684.87 L1829.24 684.87 L1829.8 684.87 L1830.36 684.87 L1830.92 684.87 L1831.48 684.87 L1832.04 684.87 L1832.6 684.87 L1833.16 684.87 L1833.72 684.87 L1834.27 684.87 L1834.83 684.87 L1835.39 684.87 L1835.95 684.87 L1836.51 684.87 L1837.07 684.87 L1837.63 684.87 L1838.19 684.87 L1838.19 683.292 L1837.63 683.292 L1837.07 683.292 L1836.51 683.292 L1835.95 683.292 L1835.39 683.292 L1834.83 683.292 L1834.27 683.292 L1833.72 683.292 L1833.16 683.292 L1832.6 683.292 L1832.04 683.292 L1831.48 683.292 L1830.92 683.292 L1830.36 683.292 L1829.8 683.292 L1829.24 683.292 L1828.68 683.292 L1828.12 683.292 L1827.56 683.292 L1827 683.292 L1826.45 683.292 L1825.89 683.292 L1825.33 683.292 L1824.77 683.292 L1824.21 683.292 L1823.65 683.292 L1823.09 683.292 L1822.53 683.292 L1821.97 683.292 L1821.41 683.292 L1820.85 683.292 L1820.29 683.292 L1819.73 683.292 L1819.18 683.292 L1818.62 683.292 L1818.06 683.292 L1817.5 683.292 L1816.94 683.292 L1816.38 683.292 L1815.82 683.292 L1815.26 683.292 L1814.7 683.292 L1814.14 683.292 L1813.58 683.292 L1813.02 683.292 L1812.46 683.292 L1811.9 683.292 L1811.35 683.292 L1810.79 683.292 L1810.23 683.292 L1809.67 683.292 L1809.11 683.292 L1808.55 683.292 L1807.99 683.292 L1807.43 683.292 L1806.87 683.292 L1806.31 683.292 L1805.75 683.292 L1805.19 683.292 L1804.63 683.292 L1804.08 683.292 L1803.52 683.292 L1802.96 683.292 L1802.4 683.292 L1801.84 683.292 L1801.28 683.292 L1800.72 683.292 L1800.16 683.292 L1799.6 683.292 L1799.04 683.292 L1798.48 683.292 L1797.92 683.292 L1797.36 683.292 L1796.8 683.292 L1796.25 683.292 L1795.69 683.292 L1795.13 683.292 L1794.57 683.292 L1794.01 683.292 L1793.45 683.292 L1792.89 683.292 L1792.33 683.292 L1791.77 683.292 L1791.21 683.292 L1790.65 683.292 L1790.09 683.292 L1789.53 683.292 L1788.98 683.292 L1788.42 683.292 L1787.86 683.292 L1787.3 683.292 L1786.74 683.292 L1786.18 683.292 L1785.62 683.292 L1785.06 683.292 L1784.5 683.292 L1783.94 683.292 L1783.38 683.292 L1782.82 683.292 L1782.26 683.292 L1781.71 683.292 L1781.15 683.292 L1780.59 683.292 L1780.03 683.292 L1779.47 683.292 L1778.91 683.292 L1778.35 683.292 L1777.79 683.292 L1777.23 683.292 L1776.67 683.292 L1776.11 683.292 L1775.55 683.292 L1774.99 683.292 L1774.43 683.292 L1773.88 683.292 L1773.32 683.292 L1772.76 683.292 L1772.2 683.292 L1771.64 683.292 L1771.08 683.292 L1770.52 683.292 L1769.96 683.292 L1769.4 683.292 L1768.84 683.292 L1768.28 683.292 L1767.72 683.292 L1767.16 683.292 L1766.61 683.292 L1766.05 683.292 L1765.49 683.292 L1764.93 683.292 L1764.37 683.292 L1763.81 683.292 L1763.25 683.292 L1762.69 683.292 L1762.13 683.292 L1761.57 683.292 L1761.01 683.292 L1760.45 683.292 L1759.89 683.292 L1759.34 683.292 L1758.78 683.292 L1758.22 683.292 L1757.66 683.292 L1757.1 683.292 L1756.54 683.292 L1755.98 683.292 L1755.42 683.292 L1754.86 683.292 L1754.3 683.292 L1753.74 683.292 L1753.18 683.292 L1752.62 683.292 L1752.06 683.292 L1751.51 683.292 L1750.95 683.292 L1750.39 683.292 L1749.83 683.292 L1749.27 683.292 L1748.71 683.292 L1748.15 683.292 L1747.59 683.292 L1747.03 683.292 L1746.47 683.292 L1745.91 683.292 L1745.35 683.292 L1744.79 683.292 L1744.24 683.292 L1743.68 683.292 L1743.12 683.292 L1742.56 683.292 L1742 683.292 L1741.44 683.292 L1740.88 683.292 L1740.32 683.292 L1739.76 683.292 L1739.2 683.292 L1738.64 683.292 L1738.08 683.292 L1737.52 683.292 L1736.97 683.292 L1736.41 683.292 L1735.85 683.292 L1735.29 683.292 L1734.73 683.292 L1734.17 683.292 L1733.61 683.292 L1733.05 683.292 L1732.49 683.292 L1731.93 683.292 L1731.37 683.292 L1730.81 683.292 L1730.25 683.292 L1729.69 683.292 L1729.14 683.292 L1728.58 683.292 L1728.02 683.292 L1727.46 683.292 L1726.9 683.292 L1726.34 683.292 L1725.78 683.292 L1725.22 683.292 L1724.66 683.292 L1724.1 683.292 L1723.54 683.292 L1722.98 683.292 L1722.42 683.292 L1721.87 683.292 L1721.31 683.292 L1720.75 683.292 L1720.19 683.292 L1719.63 683.292 L1719.07 683.292 L1718.51 683.292 L1717.95 683.292 L1717.39 683.292 L1716.83 683.292 L1716.27 683.292 L1715.71 683.292 L1715.15 683.292 L1714.6 683.292 L1714.04 683.292 L1713.48 683.292 L1712.92 683.292 L1712.36 683.292 L1711.8 683.292 L1711.24 683.292 L1710.68 683.292 L1710.12 683.292 L1709.56 683.292 L1709 683.292 L1708.44 683.292 L1707.88 683.292 L1707.32 683.292 L1706.77 683.292 L1706.21 683.292 L1705.65 683.292 L1705.09 683.292 L1704.53 683.292 L1703.97 683.292 L1703.41 683.292 L1702.85 683.292 L1702.29 683.292 L1701.73 683.292 L1701.17 683.292 L1700.61 683.292 L1700.05 683.292 L1699.5 683.292 L1698.94 683.292 L1698.38 683.292 L1697.82 683.292 L1697.26 683.292 L1696.7 683.292 L1696.14 683.292 L1695.58 683.292 L1695.02 683.292 L1694.46 683.292 L1693.9 683.292 L1693.34 683.292 L1692.78 683.292 L1692.23 683.292 L1691.67 683.292 L1691.11 683.292 L1690.55 683.292 L1689.99 683.292 L1689.43 683.292 L1688.87 683.292 L1688.31 683.292 L1687.75 683.292 L1687.19 683.292 L1686.63 683.292 L1686.07 683.292 L1685.51 683.292 L1684.95 683.292 L1684.4 683.292 L1683.84 683.292 L1683.28 683.292 L1682.72 683.292 L1682.16 683.292 L1681.6 683.292 L1681.04 683.292 L1680.48 683.292 L1679.92 683.292 L1679.36 683.292 L1678.8 683.292 L1678.24 683.292 L1677.68 683.292 L1677.13 683.292 L1676.57 683.292 L1676.01 683.292 L1675.45 683.292 L1674.89 683.292 L1674.33 683.292 L1673.77 683.292 L1673.21 683.292 L1672.65 683.292 L1672.09 683.292 L1671.53 683.292 L1670.97 683.292 L1670.41 683.292 L1669.85 683.292 L1669.3 683.292 L1668.74 683.292 L1668.18 683.292 L1667.62 683.292 L1667.06 683.292 L1666.5 683.292 L1665.94 683.292 L1665.38 683.292 L1664.82 683.292 L1664.26 683.292 L1663.7 683.292 L1663.14 683.292 L1662.58 683.292 L1662.03 683.292 L1661.47 683.292 L1660.91 683.292 L1660.35 683.292 L1659.79 683.292 L1659.23 683.292 L1658.67 683.292 L1658.11 683.292 L1657.55 683.292 L1656.99 683.292 L1656.43 683.292 L1655.87 683.292 L1655.31 683.292 L1654.76 683.292 L1654.2 683.292 L1653.64 683.292 L1653.08 683.292 L1652.52 683.292 L1651.96 683.292 L1651.4 683.292 L1650.84 683.292 L1650.28 683.292 L1649.72 683.292 L1649.16 683.292 L1648.6 683.292 L1648.04 683.292 L1647.48 683.292 L1646.93 683.292 L1646.37 683.292 L1645.81 683.292 L1645.25 683.292 L1644.69 683.292 L1644.13 683.292 L1643.57 683.292 L1643.01 683.292 L1642.45 683.292 L1641.89 683.292 L1641.33 683.292 L1640.77 683.292 L1640.21 683.292 L1639.66 683.292 L1639.1 683.292 L1638.54 683.292 L1637.98 683.292 L1637.42 683.292 L1636.86 683.292 L1636.3 683.292 L1635.74 683.292 L1635.18 683.292 L1634.62 683.292 L1634.06 683.292 L1633.5 683.292 L1632.94 683.292 L1632.39 683.292 L1631.83 683.292 L1631.27 683.292 L1630.71 683.292 L1630.15 683.292 L1629.59 683.292 L1629.03 683.292 L1628.47 683.292 L1627.91 683.292 L1627.35 683.292 L1626.79 683.292 L1626.23 683.292 L1625.67 683.292 L1625.11 683.292 L1624.56 683.292 L1624 683.292 L1623.44 683.292 L1622.88 683.292 L1622.32 683.292 L1621.76 683.292 L1621.2 683.292 L1620.64 683.292 L1620.08 683.292 L1619.52 683.292 L1618.96 683.292 L1618.4 683.292 L1617.84 683.292 L1617.29 683.292 L1616.73 683.292 L1616.17 683.292 L1615.61 683.292 L1615.05 683.292 L1614.49 683.292 L1613.93 683.292 L1613.37 683.292 L1612.81 683.292 L1612.25 683.292 L1611.69 683.292 L1611.13 683.292 L1610.57 683.292 L1610.02 683.292 L1609.46 683.292 L1608.9 683.292 L1608.34 683.292 L1607.78 683.292 L1607.22 683.292 L1606.66 683.292 L1606.1 683.292 L1605.54 683.292 L1604.98 683.292 L1604.42 683.292 L1603.86 683.292 L1603.3 683.292 L1602.74 683.292 L1602.19 683.292 L1601.63 683.292 L1601.07 683.292 L1600.51 683.292 L1599.95 683.292 L1599.39 683.292 L1598.83 683.292 L1598.27 683.292 L1597.71 683.292 L1597.15 683.292 L1596.59 683.292 L1596.03 683.292 L1595.47 683.292 L1594.92 683.292 L1594.36 683.292 L1593.8 683.292 L1593.24 683.292 L1592.68 683.292 L1592.12 683.292 L1591.56 683.292 L1591 683.292 L1590.44 683.292 L1589.88 683.292 L1589.32 683.292 L1588.76 683.292 L1588.2 683.292 L1587.65 683.292 L1587.09 683.292 L1586.53 683.292 L1585.97 683.292 L1585.41 683.292 L1584.85 683.292 L1584.29 683.292 L1583.73 683.292 L1583.17 683.292 L1582.61 683.292 L1582.05 683.292 L1581.49 683.292 L1580.93 683.292 L1580.37 683.292 L1579.82 683.292 L1579.26 683.292 L1578.7 683.292 L1578.14 683.292 L1577.58 683.292 L1577.02 683.292 L1576.46 683.292 L1575.9 683.292 L1575.34 683.292 L1574.78 683.292 L1574.22 683.292 L1573.66 683.292 L1573.1 683.292 L1572.55 683.292 L1571.99 683.292 L1571.43 683.292 L1570.87 683.292 L1570.31 683.292 L1569.75 683.292 L1569.19 683.292 L1568.63 683.292 L1568.07 683.292 L1567.51 683.292 L1566.95 683.292 L1566.39 683.292 L1565.83 683.292 L1565.28 683.292 L1564.72 683.292 L1564.16 683.292 L1563.6 683.292 L1563.04 683.292 L1562.48 683.292 L1561.92 683.292 L1561.36 683.292 L1560.8 683.292 L1560.24 683.292 L1559.68 683.292 L1559.12 683.292 L1558.56 683.292 L1558 683.292 L1557.45 683.292 L1556.89 683.292 L1556.33 683.292 L1555.77 683.292 L1555.21 683.292 L1554.65 683.292 L1554.09 683.292 L1553.53 683.292 L1552.97 683.292 L1552.41 683.292 L1551.85 683.292 L1551.29 683.292 L1550.73 683.292 L1550.18 683.292 L1549.62 683.292 L1549.06 683.292 L1548.5 683.292 L1547.94 683.292 L1547.38 683.292 L1546.82 683.292 L1546.26 683.292 L1545.7 683.292 L1545.14 683.292 L1544.58 683.292 L1544.02 683.292 L1543.46 683.292 L1542.9 683.292 L1542.35 683.292 L1541.79 683.292 L1541.23 683.292 L1540.67 683.292 L1540.11 683.292 L1539.55 683.292 L1538.99 683.292 L1538.43 683.292 L1537.87 683.292 L1537.31 683.292 L1536.75 683.292 L1536.19 683.292 L1535.63 683.292 L1535.08 683.292 L1534.52 683.292 L1533.96 683.292 L1533.4 683.292 L1532.84 683.292 L1532.28 683.292 L1531.72 683.292 L1531.16 683.292 L1530.6 683.292 L1530.04 683.292 L1529.48 683.292 L1528.92 683.292 L1528.36 683.292 L1527.81 683.292 L1527.25 683.292 L1526.69 683.292 L1526.13 683.292 L1525.57 683.292 L1525.01 683.292 L1524.45 683.292 L1523.89 683.292 L1523.33 683.292 L1522.77 683.292 L1522.21 683.292 L1521.65 683.292 L1521.09 683.292 L1520.53 683.292 L1519.98 683.292 L1519.42 683.292 L1518.86 683.292 L1518.3 683.292 L1517.74 683.292 L1517.18 683.292 L1516.62 683.292 L1516.06 683.292 L1515.5 683.292 L1514.94 683.292 L1514.38 683.292 L1513.82 683.292 L1513.26 683.292 L1512.71 683.292 L1512.15 683.292 L1511.59 683.292 L1511.03 683.292 L1510.47 683.292 L1509.91 683.292 L1509.35 683.292 L1508.79 683.292 L1508.23 683.292 L1507.67 683.292 L1507.11 683.292 L1506.55 683.292 L1505.99 683.292 L1505.44 683.292 L1504.88 683.292 L1504.32 683.292 L1503.76 683.292 L1503.2 683.292 L1502.64 683.292 L1502.08 683.292 L1501.52 683.292 L1500.96 683.292 L1500.4 683.292 L1499.84 683.292 L1499.28 683.292 L1498.72 683.292 L1498.16 683.292 L1497.61 683.292 L1497.05 683.292 L1496.49 683.292 L1495.93 683.292 L1495.37 683.292 L1494.81 683.292 L1494.25 683.292 L1493.69 683.292 L1493.13 683.292 L1492.57 683.292 L1492.01 683.292 L1491.45 683.292 L1490.89 683.292 L1490.34 683.292 L1489.78 683.292 L1489.22 683.292 L1488.66 683.292 L1488.1 683.292 L1487.54 683.292 L1486.98 683.292 L1486.42 683.292 L1485.86 683.292 L1485.3 683.292 L1484.74 683.292 L1484.18 683.292 L1483.62 683.292 L1483.07 683.292 L1482.51 683.292 L1481.95 683.292 L1481.39 683.292 L1480.83 683.292 L1480.27 683.292 L1479.71 683.292 L1479.15 683.292 L1478.59 683.292 L1478.03 683.292 L1477.47 683.292 L1476.91 683.292 L1476.35 683.292 L1475.79 683.292 L1475.24 683.292 L1474.68 683.292 L1474.12 683.292 L1473.56 683.292 L1473 683.292 L1472.44 683.292 L1471.88 683.292 L1471.32 683.292 L1470.76 683.292 L1470.2 683.292 L1469.64 683.292 L1469.08 683.292 L1468.52 683.292 L1467.97 683.292 L1467.41 683.292 L1466.85 683.292 L1466.29 683.292 L1465.73 683.292 L1465.17 683.292 L1464.61 683.292 L1464.05 683.292 L1463.49 683.292 L1462.93 683.292 L1462.37 683.292 L1461.81 683.292 L1461.25 683.292 L1460.7 683.292 L1460.14 683.292 L1459.58 683.292 L1459.02 683.292 L1458.46 683.292 L1457.9 683.292 L1457.34 683.292 L1456.78 683.292 L1456.22 683.292 L1455.66 683.292 L1455.1 683.292 L1454.54 683.292 L1453.98 683.292 L1453.42 683.292 L1452.87 683.292 L1452.31 683.292 L1451.75 683.292 L1451.19 683.292 L1450.63 683.292 L1450.07 683.292 L1449.51 683.292 L1448.95 683.292 L1448.39 683.292 L1447.83 683.292 L1447.27 683.292 L1446.71 683.292 L1446.15 683.292 L1445.6 683.292 L1445.04 683.292 L1444.48 683.292 L1443.92 683.292 L1443.36 683.292 L1442.8 683.292 L1442.24 683.292 L1441.68 683.292 L1441.12 683.292 L1440.56 683.292 L1440 683.292 L1439.44 683.292 L1438.88 683.292 L1438.33 683.292 L1437.77 683.292 L1437.21 683.292 L1436.65 683.292 L1436.09 683.292 L1435.53 683.292 L1434.97 683.292 L1434.41 683.292 L1433.85 683.292 L1433.29 683.292 L1432.73 683.292 L1432.17 683.292 L1431.61 683.292 L1431.05 683.292 L1430.5 683.292 L1429.94 683.292 L1429.38 683.292 L1428.82 683.292 L1428.26 683.292 L1427.7 683.292 L1427.14 683.292 L1426.58 683.292 L1426.02 683.292 L1425.46 683.292 L1424.9 683.292 L1424.34 683.292 L1423.78 683.292 L1423.23 683.292 L1422.67 683.292 L1422.11 683.292 L1421.55 683.292 L1420.99 683.292 L1420.43 683.292 L1419.87 683.292 L1419.31 683.292 L1418.75 683.292 L1418.19 683.292 L1417.63 683.292 L1417.07 683.292 L1416.51 683.292 L1415.95 683.292 L1415.4 683.292 L1414.84 683.292 L1414.28 683.292 L1413.72 683.292 L1413.16 683.292 L1412.6 683.292 L1412.04 683.292 L1411.48 683.292 L1410.92 683.292 L1410.36 683.292 L1409.8 683.292 L1409.24 683.292 L1408.68 683.292 L1408.13 683.292 L1407.57 683.292 L1407.01 683.292 L1406.45 683.292 L1405.89 683.292 L1405.33 683.292 L1404.77 683.292 L1404.21 683.292 L1403.65 683.292 L1403.09 683.292 L1402.53 683.292 L1401.97 683.292 L1401.41 683.292 L1400.86 683.292 L1400.3 683.292 L1399.74 683.292 L1399.18 683.292 L1398.62 683.292 L1398.06 683.292 L1397.5 683.292 L1396.94 683.292 L1396.38 683.292 L1395.82 683.292 L1395.26 683.292 L1394.7 683.292 L1394.14 683.292 L1393.58 683.292 L1393.03 683.292 L1392.47 683.292 L1391.91 683.292 L1391.35 683.292 L1390.79 683.292 L1390.23 683.292 L1389.67 683.292 L1389.11 683.292 L1388.55 683.292 L1387.99 683.292 L1387.43 683.292 L1386.87 683.292 L1386.31 683.292 L1385.76 683.292 L1385.2 683.292 L1384.64 683.292 L1384.08 683.292 L1383.52 683.292 L1382.96 683.292 L1382.4 683.292 L1381.84 683.292 L1381.28 683.292 L1380.72 683.292 L1380.16 683.292 L1379.6 683.292 L1379.04 683.292 L1378.49 683.292 L1377.93 683.292 L1377.37 683.292 L1376.81 683.292 L1376.25 683.292 L1375.69 683.292 L1375.13 683.292 L1374.57 683.292 L1374.01 683.292 L1373.45 683.292 L1372.89 683.292 L1372.33 683.292 L1371.77 683.292 L1371.21 683.292 L1370.66 683.292 L1370.1 683.292 L1369.54 683.292 L1368.98 683.292 L1368.42 683.292 L1367.86 683.292 L1367.3 683.292 L1366.74 683.292 L1366.18 683.292 L1365.62 683.292 L1365.06 683.292 L1364.5 683.292 L1363.94 683.292 L1363.39 683.292 L1362.83 683.292 L1362.27 683.292 L1361.71 683.292 L1361.15 683.292 L1360.59 683.292 L1360.03 683.292 L1359.47 683.292 L1358.91 683.292 L1358.35 683.292 L1357.79 683.292 L1357.23 683.292 L1356.67 683.292 L1356.12 683.292 L1355.56 683.292 L1355 683.292 L1354.44 683.292 L1353.88 683.292 L1353.32 683.292 L1352.76 683.292 L1352.2 683.292 L1351.64 683.292 L1351.08 683.292 L1350.52 683.292 L1349.96 683.292 L1349.4 683.292 L1348.84 683.292 L1348.29 683.292 L1347.73 683.292 L1347.17 683.292 L1346.61 683.292 L1346.05 683.292 L1345.49 683.292 L1344.93 683.292 L1344.37 683.292 L1343.81 683.292 L1343.25 683.292 L1342.69 683.292 L1342.13 683.292 L1341.57 683.292 L1341.02 683.292 L1340.46 683.292 L1339.9 683.292 L1339.34 683.292 L1338.78 683.292 L1338.22 683.292 L1337.66 683.292 L1337.1 683.292 L1336.54 683.292 L1335.98 683.292 L1335.42 683.292 L1334.86 683.292 L1334.3 683.292 L1333.75 683.292 L1333.19 683.292 L1332.63 683.292 L1332.07 683.292 L1331.51 683.292 L1330.95 683.292 L1330.39 683.292 L1329.83 683.292 L1329.27 683.292 L1328.71 683.292 L1328.15 683.292 L1327.59 683.292 L1327.03 683.292 L1326.47 683.292 L1325.92 683.292 L1325.36 683.292 L1324.8 683.292 L1324.24 683.292 L1323.68 683.292 L1323.12 683.292 L1322.56 683.292 L1322 683.292 L1321.44 683.292 L1320.88 683.292 L1320.32 683.292 L1319.76 683.292 L1319.2 683.292 L1318.65 683.292 L1318.09 683.292 L1317.53 683.292 L1316.97 683.292 L1316.41 683.292 L1315.85 683.292 L1315.29 683.292 L1314.73 683.292 L1314.17 683.292 L1313.61 683.292 L1313.05 683.292 L1312.49 683.292 L1311.93 683.292 L1311.38 683.292 L1310.82 683.292 L1310.26 683.292 L1309.7 683.292 L1309.14 683.292 L1308.58 683.292 L1308.02 683.292 L1307.46 683.292 L1306.9 683.292 L1306.34 683.292 L1305.78 683.292 L1305.22 683.292 L1304.66 683.292 L1304.1 683.292 L1303.55 683.292 L1302.99 683.292 L1302.43 683.292 L1301.87 683.292 L1301.31 683.292 L1300.75 683.292 L1300.19 683.292 L1299.63 683.292 L1299.07 683.292 L1298.51 683.292 L1297.95 683.292 L1297.39 683.292 L1296.83 683.292 L1296.28 683.292 L1295.72 683.292 L1295.16 683.292 L1294.6 683.292 L1294.04 683.292 L1293.48 683.292 L1292.92 683.292 L1292.36 683.292 L1291.8 683.292 L1291.24 683.292 L1290.68 683.292 L1290.12 683.292 L1289.56 683.292 L1289 683.292 L1288.45 683.292 L1287.89 683.292 L1287.33 683.292 L1286.77 683.292 L1286.21 683.292 L1285.65 683.292 L1285.09 683.292 L1284.53 683.292 L1283.97 683.292 L1283.41 683.292 L1282.85 683.292 L1282.29 683.292 L1281.73 683.292 L1281.18 683.292 L1280.62 683.292 L1280.06 683.292 L1279.5 683.292 L1278.94 683.292 L1278.38 683.292 L1277.82 683.292 L1277.26 683.292 L1276.7 683.292 L1276.14 683.292 L1275.58 683.292 L1275.02 683.292 L1274.46 683.292 L1273.91 683.292 L1273.35 683.292 L1272.79 683.292 L1272.23 683.292 L1271.67 683.292 L1271.11 683.292 L1270.55 683.292 L1269.99 683.292 L1269.43 683.292 L1268.87 683.292 L1268.31 683.292 L1267.75 683.292 L1267.19 683.292 L1266.63 683.292 L1266.08 683.292 L1265.52 683.292 L1264.96 683.292 L1264.4 683.292 L1263.84 683.292 L1263.28 683.292 L1262.72 683.292 L1262.16 683.292 L1261.6 683.292 L1261.04 683.292 L1260.48 683.292 L1259.92 683.292 L1259.36 683.292 L1258.81 683.292 L1258.25 683.292 L1257.69 683.292 L1257.13 683.292 L1256.57 683.292 L1256.01 683.292 L1255.45 683.292 L1254.89 683.292 L1254.33 683.292 L1253.77 683.292 L1253.21 683.292 L1252.65 683.292 L1252.09 683.292 L1251.54 683.292 L1250.98 683.292 L1250.42 683.292 L1249.86 683.292 L1249.3 683.292 L1248.74 683.292 L1248.18 683.292 L1247.62 683.292 L1247.06 683.292 L1246.5 683.292 L1245.94 683.292 L1245.38 683.292 L1244.82 683.292 L1244.26 683.292 L1243.71 683.292 L1243.15 683.292 L1242.59 683.292 L1242.03 683.292 L1241.47 683.292 L1240.91 683.292 L1240.35 683.292 L1239.79 683.292 L1239.23 683.292 L1238.67 683.292 L1238.11 683.292 L1237.55 683.292 L1236.99 683.292 L1236.44 683.292 L1235.88 683.292 L1235.32 683.292 L1234.76 683.292 L1234.2 683.292 L1233.64 683.292 L1233.08 683.292 L1232.52 683.292 L1231.96 683.292 L1231.4 683.292 L1230.84 683.292 L1230.28 683.292 L1229.72 683.292 L1229.17 683.292 L1228.61 683.292 L1228.05 683.292 L1227.49 683.292 L1226.93 683.292 L1226.37 683.292 L1225.81 683.292 L1225.25 683.292 L1224.69 683.292 L1224.13 683.292 L1223.57 683.292 L1223.01 683.292 L1222.45 683.292 L1221.89 683.292 L1221.34 683.292 L1220.78 683.292 L1220.22 683.292 L1219.66 683.292 L1219.1 683.292 L1218.54 683.292 L1217.98 683.292 L1217.42 683.292 L1216.86 683.292 L1216.3 683.292 L1215.74 683.292 L1215.18 683.292 L1214.62 683.292 L1214.07 683.292 L1213.51 683.292 L1212.95 683.292 L1212.39 683.292 L1211.83 683.292 L1211.27 683.292 L1210.71 683.292 L1210.15 683.292 L1209.59 683.292 L1209.03 683.292 L1208.47 683.292 L1207.91 683.292 L1207.35 683.292 L1206.8 683.292 L1206.24 683.292 L1205.68 683.292 L1205.12 683.292 L1204.56 683.292 L1204 683.292 L1203.44 683.292 L1202.88 683.292 L1202.32 683.292 L1201.76 683.292 L1201.2 683.292 L1200.64 683.292 L1200.08 683.292 L1199.52 683.292 L1198.97 683.292 L1198.41 683.292 L1197.85 683.292 L1197.29 683.292 L1196.73 683.292 L1196.17 683.292 L1195.61 683.292 L1195.05 683.292 L1194.49 683.292 L1193.93 683.292 L1193.37 683.292 L1192.81 683.292 L1192.25 683.292 L1191.7 683.292 L1191.14 683.292 L1190.58 683.292 L1190.02 683.292 L1189.46 683.292 L1188.9 683.292 L1188.34 683.292 L1187.78 683.292 L1187.22 683.292 L1186.66 683.292 L1186.1 683.292 L1185.54 683.292 L1184.98 683.292 L1184.43 683.292 L1183.87 683.292 L1183.31 683.292 L1182.75 683.292 L1182.19 683.292 L1181.63 683.292 L1181.07 683.292 L1180.51 683.292 L1179.95 683.292 L1179.39 683.292 L1178.83 683.292 L1178.27 683.292 L1177.71 683.292 L1177.15 683.292 L1176.6 683.292 L1176.04 683.292 L1175.48 683.292 L1174.92 683.292 L1174.36 683.292 L1173.8 683.292 L1173.24 683.292 L1172.68 683.292 L1172.12 683.292 L1171.56 683.292 L1171 683.292 L1170.44 683.292 L1169.88 683.292 L1169.33 683.292 L1168.77 683.292 L1168.21 683.292 L1167.65 683.292 L1167.09 683.292 L1166.53 683.292 L1165.97 683.292 L1165.41 683.292 L1164.85 683.292 L1164.29 683.292 L1163.73 683.292 L1163.17 683.292 L1162.61 683.292 L1162.05 683.292 L1161.5 683.292 L1160.94 683.292 L1160.38 683.292 L1159.82 683.292 L1159.26 683.292 L1158.7 683.292 L1158.14 683.292 L1157.58 683.292 L1157.02 683.292 L1156.46 683.292 L1155.9 683.292 L1155.34 683.292 L1154.78 683.292 L1154.23 683.292 L1153.67 683.292 L1153.11 683.292 L1152.55 683.292 L1151.99 683.292 L1151.43 683.292 L1150.87 683.292 L1150.31 683.292 L1149.75 683.292 L1149.19 683.292 L1148.63 683.292 L1148.07 683.292 L1147.51 683.292 L1146.96 683.292 L1146.4 683.292 L1145.84 683.292 L1145.28 683.292 L1144.72 683.292 L1144.16 683.292 L1143.6 683.292 L1143.04 683.292 L1142.48 683.292 L1141.92 683.292 L1141.36 683.292 L1140.8 683.292 L1140.24 683.292 L1139.68 683.292 L1139.13 683.292 L1138.57 683.292 L1138.01 683.292 L1137.45 683.292 L1136.89 683.292 L1136.33 683.292 L1135.77 683.292 L1135.21 683.292 L1134.65 683.292 L1134.09 683.292 L1133.53 683.292 L1132.97 683.292 L1132.41 683.292 L1131.86 683.292 L1131.3 683.292 L1130.74 683.292 L1130.18 683.292 L1129.62 683.292 L1129.06 683.292 L1128.5 683.292 L1127.94 683.292 L1127.38 683.292 L1126.82 683.292 L1126.26 683.292 L1125.7 683.292 L1125.14 683.292 L1124.59 683.292 L1124.03 683.292 L1123.47 683.292 L1122.91 683.292 L1122.35 683.292 L1121.79 683.292 L1121.23 683.292 L1120.67 683.292 L1120.11 683.292 L1119.55 683.292 L1118.99 683.292 L1118.43 683.292 L1117.87 683.292 L1117.31 683.292 L1116.76 683.292 L1116.2 683.292 L1115.64 683.292 L1115.08 683.292 L1114.52 683.292 L1113.96 683.292 L1113.4 683.292 L1112.84 683.292 L1112.28 683.292 L1111.72 683.292 L1111.16 683.292 L1110.6 683.292 L1110.04 683.292 L1109.49 683.292 L1108.93 683.292 L1108.37 683.292 L1107.81 683.292 L1107.25 683.292 L1106.69 683.292 L1106.13 683.292 L1105.57 683.292 L1105.01 683.292 L1104.45 683.292 L1103.89 683.292 L1103.33 683.292 L1102.77 683.292 L1102.22 683.292 L1101.66 683.292 L1101.1 683.292 L1100.54 683.292 L1099.98 683.292 L1099.42 683.292 L1098.86 683.292 L1098.3 683.292 L1097.74 683.292 L1097.18 683.292 L1096.62 683.292 L1096.06 683.292 L1095.5 683.292 L1094.94 683.292 L1094.39 683.292 L1093.83 683.292 L1093.27 683.292 L1092.71 683.292 L1092.15 683.292 L1091.59 683.292 L1091.03 683.292 L1090.47 683.292 L1089.91 683.292 L1089.35 683.292 L1088.79 683.292 L1088.23 683.292 L1087.67 683.292 L1087.12 683.292 L1086.56 683.292 L1086 683.292 L1085.44 683.292 L1084.88 683.292 L1084.32 683.292 L1083.76 683.292 L1083.2 683.292 L1082.64 683.292 L1082.08 683.292 L1081.52 683.292 L1080.96 683.292 L1080.4 683.292 L1079.85 683.292 L1079.29 683.292 L1078.73 683.292 L1078.17 683.292 L1077.61 683.292 L1077.05 683.292 L1076.49 683.292 L1075.93 683.292 L1075.37 683.292 L1074.81 683.292 L1074.25 683.292 L1073.69 683.292 L1073.13 683.292 L1072.57 683.292 L1072.02 683.292 L1071.46 683.292 L1070.9 683.292 L1070.34 683.292 L1069.78 683.292 L1069.22 683.292 L1068.66 683.292 L1068.1 683.292 L1067.54 683.292 L1066.98 683.292 L1066.42 683.292 L1065.86 683.292 L1065.3 683.292 L1064.75 683.292 L1064.19 683.292 L1063.63 683.292 L1063.07 683.292 L1062.51 683.292 L1061.95 683.292 L1061.39 683.292 L1060.83 683.292 L1060.27 683.292 L1059.71 683.292 L1059.15 683.292 L1058.59 683.292 L1058.03 683.292 L1057.48 683.292 L1056.92 683.292 L1056.36 683.292 L1055.8 683.292 L1055.24 683.292 L1054.68 683.292 L1054.12 683.292 L1053.56 683.292 L1053 683.292 L1052.44 683.292 L1051.88 683.292 L1051.32 683.292 L1050.76 683.292 L1050.2 683.292 L1049.65 683.292 L1049.09 683.292 L1048.53 683.292 L1047.97 683.292 L1047.41 683.292 L1046.85 683.292 L1046.29 683.292 L1045.73 683.292 L1045.17 683.292 L1044.61 683.292 L1044.05 683.292 L1043.49 683.292 L1042.93 683.292 L1042.38 683.292 L1041.82 683.292 L1041.26 683.292 L1040.7 683.292 L1040.14 683.292 L1039.58 683.292 L1039.02 683.292 L1038.46 683.292 L1037.9 683.292 L1037.34 683.292 L1036.78 683.292 L1036.22 683.292 L1035.66 683.292 L1035.1 683.292 L1034.55 683.292 L1033.99 683.292 L1033.43 683.292 L1032.87 683.292 L1032.31 683.292 L1031.75 683.292 L1031.19 683.292 L1030.63 683.292 L1030.07 683.292 L1029.51 683.292 L1028.95 683.292 L1028.39 683.292 L1027.83 683.292 L1027.28 683.292 L1026.72 683.292 L1026.16 683.292 L1025.6 683.292 L1025.04 683.292 L1024.48 683.292 L1023.92 683.292 L1023.36 683.292 L1022.8 683.292 L1022.24 683.292 L1021.68 683.292 L1021.12 683.292 L1020.56 683.292 L1020.01 683.292 L1019.45 683.292 L1018.89 683.292 L1018.33 683.292 L1017.77 683.292 L1017.21 683.292 L1016.65 683.292 L1016.09 683.292 L1015.53 683.292 L1014.97 683.292 L1014.41 683.292 L1013.85 683.292 L1013.29 683.292 L1012.73 683.292 L1012.18 683.292 L1011.62 683.292 L1011.06 683.292 L1010.5 683.292 L1009.94 683.292 L1009.38 683.292 L1008.82 683.292 L1008.26 683.292 L1007.7 683.292 L1007.14 683.292 L1006.58 683.292 L1006.02 683.292 L1005.46 683.292 L1004.91 683.292 L1004.35 683.292 L1003.79 683.292 L1003.23 683.292 L1002.67 683.292 L1002.11 683.292 L1001.55 683.292 L1000.99 683.292 L1000.43 683.292 L999.872 683.292 L999.313 683.292 L998.754 683.292 L998.194 683.292 L997.635 683.292 L997.076 683.292 L996.517 683.292 L995.957 683.292 L995.398 683.292 L994.839 683.292 L994.28 683.292 L993.72 683.292 L993.161 683.292 L992.602 683.292 L992.043 683.292 L991.483 683.292 L990.924 683.292 L990.365 683.292 L989.806 683.292 L989.246 683.292 L988.687 683.292 L988.128 683.292 L987.569 683.292 L987.009 683.292 L986.45 683.292 L985.891 683.292 L985.332 683.292 L984.772 683.292 L984.213 683.292 L983.654 683.292 L983.095 683.292 L982.535 683.292 L981.976 683.292 L981.417 683.292 L980.858 683.292 L980.298 683.292 L979.739 683.292 L979.18 683.292 L978.621 683.292 L978.061 683.292 L977.502 683.292 L976.943 683.292 L976.384 683.292 L975.824 683.292 L975.265 683.292 L974.706 683.292 L974.147 683.292 L973.587 683.292 L973.028 683.292 L972.469 683.292 L971.91 683.292 L971.35 683.292 L970.791 683.292 L970.232 683.292 L969.673 683.292 L969.113 683.292 L968.554 683.292 L967.995 683.292 L967.436 683.292 L966.876 683.292 L966.317 683.292 L965.758 683.292 L965.199 683.292 L964.639 683.292 L964.08 683.292 L963.521 683.292 L962.962 683.292 L962.402 683.292 L961.843 683.292 L961.284 683.292 L960.725 683.292 L960.165 683.292 L959.606 683.292 L959.047 683.292 L958.488 683.292 L957.928 683.292 L957.369 683.292 L956.81 683.292 L956.251 683.292 L955.691 683.292 L955.132 683.292 L954.573 683.292 L954.014 683.292 L953.454 683.292 L952.895 683.292 L952.336 683.292 L951.777 683.292 L951.217 683.292 L950.658 683.292 L950.099 683.292 L949.54 683.292 L948.98 683.292 L948.421 683.292 L947.862 683.292 L947.303 683.292 L946.743 683.292 L946.184 683.292 L945.625 683.292 L945.066 683.292 L944.506 683.292 L943.947 683.292 L943.388 683.292 L942.829 683.292 L942.269 683.292 L941.71 683.292 L941.151 683.292 L940.592 683.292 L940.032 683.292 L939.473 683.292 L938.914 683.292 L938.355 683.292 L937.795 683.292 L937.236 683.292 L936.677 683.292 L936.118 683.292 L935.558 683.292 L934.999 683.292 L934.44 683.292 L933.881 683.292 L933.321 683.292 L932.762 683.292 L932.203 683.292 L931.644 683.292 L931.084 683.292 L930.525 683.292 L929.966 683.292 L929.406 683.292 L928.847 683.292 L928.288 683.292 L927.729 683.292 L927.169 683.292 L926.61 683.292 L926.051 683.292 L925.492 683.292 L924.932 683.292 L924.373 683.292 L923.814 683.292 L923.255 683.292 L922.695 683.292 L922.136 683.292 L921.577 683.292 L921.018 683.292 L920.458 683.292 L919.899 683.292 L919.34 683.292 L918.781 683.292 L918.221 683.292 L917.662 683.292 L917.103 683.292 L916.544 683.292 L915.984 683.292 L915.425 683.292 L914.866 683.292 L914.307 683.292 L913.747 683.292 L913.188 683.292 L912.629 683.292 L912.07 683.292 L911.51 683.292 L910.951 683.292 L910.392 683.292 L909.833 683.292 L909.273 683.292 L908.714 683.292 L908.155 683.292 L907.596 683.292 L907.036 683.292 L906.477 683.292 L905.918 683.292 L905.359 683.292 L904.799 683.292 L904.24 683.292 L903.681 683.292 L903.122 683.292 L902.562 683.292 L902.003 683.292 L901.444 683.292 L900.885 683.292 L900.325 683.292 L899.766 683.292 L899.207 683.292 L898.648 683.292 L898.088 683.292 L897.529 683.292 L896.97 683.292 L896.411 683.292 L895.851 683.292 L895.292 683.292 L894.733 683.292 L894.174 683.292 L893.614 683.292 L893.055 683.292 L892.496 683.292 L891.937 683.292 L891.377 683.292 L890.818 683.292 L890.259 683.292 L889.7 683.292 L889.14 683.292 L888.581 683.292 L888.022 683.292 L887.463 683.292 L886.903 683.292 L886.344 683.292 L885.785 683.292 L885.226 683.292 L884.666 683.292 L884.107 683.292 L883.548 683.292 L882.989 683.292 L882.429 683.292 L881.87 683.292 L881.311 683.292 L880.752 683.292 L880.192 683.292 L879.633 683.292 L879.074 683.292 L878.515 683.292 L877.955 683.292 L877.396 683.292 L876.837 683.292 L876.278 683.292 L875.718 683.292 L875.159 683.292 L874.6 683.292 L874.041 683.292 L873.481 683.292 L872.922 683.292 L872.363 683.292 L871.804 683.292 L871.244 683.292 L870.685 683.292 L870.126 683.292 L869.567 683.292 L869.007 683.292 L868.448 683.292 L867.889 683.292 L867.33 683.292 L866.77 683.292 L866.211 683.292 L865.652 683.292 L865.093 683.292 L864.533 683.292 L863.974 683.292 L863.415 683.292 L862.856 683.292 L862.296 683.292 L861.737 683.292 L861.178 683.292 L860.619 683.292 L860.059 683.292 L859.5 683.292 L858.941 683.292 L858.382 683.292 L857.822 683.292 L857.263 683.292 L856.704 683.292 L856.145 683.292 L855.585 683.292 L855.026 683.292 L854.467 683.292 L853.908 683.292 L853.348 683.292 L852.789 683.292 L852.23 683.292 L851.671 683.292 L851.111 683.292 L850.552 683.292 L849.993 683.292 L849.434 683.292 L848.874 683.292 L848.315 683.292 L847.756 683.292 L847.197 683.292 L846.637 683.292 L846.078 683.292 L845.519 683.292 L844.96 683.292 L844.4 683.292 L843.841 683.292 L843.282 683.292 L842.723 683.292 L842.163 683.292 L841.604 683.292 L841.045 683.292 L840.486 683.292 L839.926 683.292 L839.367 683.292 L838.808 683.292 L838.249 683.292 L837.689 683.292 L837.13 683.292 L836.571 683.292 L836.012 683.292 L835.452 683.292 L834.893 683.292 L834.334 683.292 L833.775 683.292 L833.215 683.292 L832.656 683.292 L832.097 683.292 L831.538 683.292 L830.978 683.292 L830.419 683.292 L829.86 683.292 L829.301 683.292 L828.741 683.292 L828.182 683.292 L827.623 683.292 L827.064 683.292 L826.504 683.292 L825.945 683.292 L825.386 683.292 L824.827 683.292 L824.267 683.292 L823.708 683.292 L823.149 683.292 L822.59 683.292 L822.03 683.292 L821.471 683.292 L820.912 683.292 L820.353 683.292 L819.793 683.292 L819.234 683.292 L818.675 683.292 L818.116 683.292 L817.556 683.292 L816.997 683.292 L816.438 683.292 L815.879 683.292 L815.319 683.292 L814.76 683.292 L814.201 683.292 L813.642 683.292 L813.082 683.292 L812.523 683.292 L811.964 683.292 L811.405 683.292 L810.845 683.292 L810.286 683.292 L809.727 683.292 L809.168 683.292 L808.608 683.292 L808.049 683.292 L807.49 683.292 L806.931 683.292 L806.371 683.292 L805.812 683.292 L805.253 683.292 L804.693 683.292 L804.134 683.292 L803.575 683.292 L803.016 683.292 L802.456 683.292 L801.897 683.292 L801.338 683.292 L800.779 683.292 L800.219 683.292 L799.66 683.292 L799.101 683.292 L798.542 683.292 L797.982 683.292 L797.423 683.292 L796.864 683.292 L796.305 683.292 L795.745 683.292 L795.186 683.292 L794.627 683.292 L794.068 683.292 L793.508 683.292 L792.949 683.292 L792.39 683.292 L791.831 683.292 L791.271 683.292 L790.712 683.292 L790.153 683.292 L789.594 683.292 L789.034 683.292 L788.475 683.292 L787.916 683.292 L787.357 683.292 L786.797 683.292 L786.238 683.292 L785.679 683.292 L785.12 683.292 L784.56 683.292 L784.001 683.292 L783.442 683.292 L782.883 683.292 L782.323 683.292 L781.764 683.292 L781.205 683.292 L780.646 683.292 L780.086 683.292 L779.527 683.292 L778.968 683.292 L778.409 683.292 L777.849 683.292 L777.29 683.292 L776.731 683.292 L776.172 683.292 L775.612 683.292 L775.053 683.292 L774.494 683.292 L773.935 683.292 L773.375 683.292 L772.816 683.292 L772.257 683.292 L771.698 683.292 L771.138 683.292 L770.579 683.292 L770.02 683.292 L769.461 683.292 L768.901 683.292 L768.342 683.292 L767.783 683.292 L767.224 683.292 L766.664 683.292 L766.105 683.292 L765.546 683.292 L764.987 683.292 L764.427 683.292 L763.868 683.292 L763.309 683.292 L762.75 683.292 L762.19 683.292 L761.631 683.292 L761.072 683.292 L760.513 683.292 L759.953 683.292 L759.394 683.292 L758.835 683.292 L758.276 683.292 L757.716 683.292 L757.157 683.292 L756.598 683.292 L756.039 683.292 L755.479 683.292 L754.92 683.292 L754.361 683.292 L753.802 683.292 L753.242 683.292 L752.683 683.292 L752.124 683.292 L751.565 683.292 L751.005 683.292 L750.446 683.292 L749.887 683.292 L749.328 683.292 L748.768 683.292 L748.209 683.292 L747.65 683.292 L747.091 683.292 L746.531 683.292 L745.972 683.292 L745.413 683.292 L744.854 683.292 L744.294 683.292 L743.735 683.292 L743.176 683.292 L742.617 683.292 L742.057 683.292 L741.498 683.292 L740.939 683.292 L740.38 683.292 L739.82 683.292 L739.261 683.292 L738.702 683.292 L738.143 683.292 L737.583 683.292 L737.024 683.292 L736.465 683.292 L735.906 683.292 L735.346 683.292 L734.787 683.292 L734.228 683.292 L733.669 683.292 L733.109 683.292 L732.55 683.292 L731.991 683.292 L731.432 683.292 L730.872 683.292 L730.313 683.292 L729.754 683.292 L729.195 683.292 L728.635 683.292 L728.076 683.292 L727.517 683.292 L726.958 683.292 L726.398 683.292 L725.839 683.292 L725.28 683.292 L724.721 683.292 L724.161 683.292 L723.602 683.292 L723.043 683.292 L722.484 683.292 L721.924 683.292 L721.365 683.292 L720.806 683.292 L720.247 683.292  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.069 720.806,684.069 721.365,684.069 721.924,684.069 722.484,684.069 723.043,684.069 723.602,684.069 724.161,684.069 724.721,684.069 725.28,684.069 725.839,684.069 726.398,684.069 726.958,684.069 727.517,684.069 728.076,684.069 728.635,684.069 729.195,684.069 729.754,684.069 730.313,684.069 730.872,684.069 731.432,684.069 731.991,684.069 732.55,684.069 733.109,684.069 733.669,684.069 734.228,684.069 734.787,684.069 735.346,684.069 735.906,684.069 736.465,684.069 737.024,684.069 737.583,684.069 738.143,684.069 738.702,684.069 739.261,684.069 739.82,684.069 740.38,684.069 740.939,684.069 741.498,684.069 742.057,684.069 742.617,684.069 743.176,684.069 743.735,684.069 744.294,684.069 744.854,684.069 745.413,684.069 745.972,684.069 746.531,684.069 747.091,684.069 747.65,684.069 748.209,684.069 748.768,684.069 749.328,684.069 749.887,684.069 750.446,684.069 751.005,684.069 751.565,684.069 752.124,684.069 752.683,684.069 753.242,684.069 753.802,684.069 754.361,684.069 754.92,684.069 755.479,684.069 756.039,684.069 756.598,684.069 757.157,684.069 757.716,684.069 758.276,684.069 758.835,684.069 759.394,684.069 759.953,684.069 760.513,684.069 761.072,684.069 761.631,684.069 762.19,684.069 762.75,684.069 763.309,684.069 763.868,684.069 764.427,684.069 764.987,684.069 765.546,684.069 766.105,684.069 766.664,684.069 767.224,684.069 767.783,684.069 768.342,684.069 768.901,684.069 769.461,684.069 770.02,684.069 770.579,684.069 771.138,684.069 771.698,684.069 772.257,684.069 772.816,684.069 773.375,684.069 773.935,684.069 774.494,684.069 775.053,684.069 775.612,684.069 776.172,684.069 776.731,684.069 777.29,684.069 777.849,684.069 778.409,684.069 778.968,684.069 779.527,684.069 780.086,684.069 780.646,684.069 781.205,684.069 781.764,684.069 782.323,684.069 782.883,684.069 783.442,684.069 784.001,684.069 784.56,684.069 785.12,684.069 785.679,684.069 786.238,684.069 786.797,684.069 787.357,684.069 787.916,684.069 788.475,684.069 789.034,684.069 789.594,684.069 790.153,684.069 790.712,684.069 791.271,684.069 791.831,684.069 792.39,684.069 792.949,684.069 793.508,684.069 794.068,684.069 794.627,684.069 795.186,684.069 795.745,684.069 796.305,684.069 796.864,684.069 797.423,684.069 797.982,684.069 798.542,684.069 799.101,684.069 799.66,684.069 800.219,684.069 800.779,684.069 801.338,684.069 801.897,684.069 802.456,684.069 803.016,684.069 803.575,684.069 804.134,684.069 804.693,684.069 805.253,684.069 805.812,684.069 806.371,684.069 806.931,684.069 807.49,684.069 808.049,684.069 808.608,684.069 809.168,684.069 809.727,684.069 810.286,684.069 810.845,684.069 811.405,684.069 811.964,684.069 812.523,684.069 813.082,684.069 813.642,684.069 814.201,684.069 814.76,684.069 815.319,684.069 815.879,684.069 816.438,684.069 816.997,684.069 817.556,684.069 818.116,684.069 818.675,684.069 819.234,684.069 819.793,684.069 820.353,684.069 820.912,684.069 821.471,684.069 822.03,684.069 822.59,684.069 823.149,684.069 823.708,684.069 824.267,684.069 824.827,684.069 825.386,684.069 825.945,684.069 826.504,684.069 827.064,684.069 827.623,684.069 828.182,684.069 828.741,684.069 829.301,684.069 829.86,684.069 830.419,684.069 830.978,684.069 831.538,684.069 832.097,684.069 832.656,684.069 833.215,684.069 833.775,684.069 834.334,684.069 834.893,684.069 835.452,684.069 836.012,684.069 836.571,684.069 837.13,684.069 837.689,684.069 838.249,684.069 838.808,684.069 839.367,684.069 839.926,684.069 840.486,684.069 841.045,684.069 841.604,684.069 842.163,684.069 842.723,684.069 843.282,684.069 843.841,684.069 844.4,684.069 844.96,684.069 845.519,684.069 846.078,684.069 846.637,684.069 847.197,684.069 847.756,684.069 848.315,684.069 848.874,684.069 849.434,684.069 849.993,684.069 850.552,684.069 851.111,684.069 851.671,684.069 852.23,684.069 852.789,684.069 853.348,684.069 853.908,684.069 854.467,684.069 855.026,684.069 855.585,684.069 856.145,684.069 856.704,684.069 857.263,684.069 857.822,684.069 858.382,684.069 858.941,684.069 859.5,684.069 860.059,684.069 860.619,684.069 861.178,684.069 861.737,684.069 862.296,684.069 862.856,684.069 863.415,684.069 863.974,684.069 864.533,684.069 865.093,684.069 865.652,684.069 866.211,684.069 866.77,684.069 867.33,684.069 867.889,684.069 868.448,684.069 869.007,684.069 869.567,684.069 870.126,684.069 870.685,684.069 871.244,684.069 871.804,684.069 872.363,684.069 872.922,684.069 873.481,684.069 874.041,684.069 874.6,684.069 875.159,684.069 875.718,684.069 876.278,684.069 876.837,684.069 877.396,684.069 877.955,684.069 878.515,684.069 879.074,684.069 879.633,684.069 880.192,684.069 880.752,684.069 881.311,684.069 881.87,684.069 882.429,684.069 882.989,684.069 883.548,684.069 884.107,684.069 884.666,684.069 885.226,684.069 885.785,684.069 886.344,684.069 886.903,684.069 887.463,684.069 888.022,684.069 888.581,684.069 889.14,684.069 889.7,684.069 890.259,684.069 890.818,684.069 891.377,684.069 891.937,684.069 892.496,684.069 893.055,684.069 893.614,684.069 894.174,684.069 894.733,684.069 895.292,684.069 895.851,684.069 896.411,684.069 896.97,684.069 897.529,684.069 898.088,684.069 898.648,684.069 899.207,684.069 899.766,684.069 900.325,684.069 900.885,684.069 901.444,684.069 902.003,684.069 902.562,684.069 903.122,684.069 903.681,684.069 904.24,684.069 904.799,684.069 905.359,684.069 905.918,684.069 906.477,684.069 907.036,684.069 907.596,684.069 908.155,684.069 908.714,684.069 909.273,684.069 909.833,684.069 910.392,684.069 910.951,684.069 911.51,684.069 912.07,684.069 912.629,684.069 913.188,684.069 913.747,684.069 914.307,684.069 914.866,684.069 915.425,684.069 915.984,684.069 916.544,684.069 917.103,684.069 917.662,684.069 918.221,684.069 918.781,684.069 919.34,684.069 919.899,684.069 920.458,684.069 921.018,684.069 921.577,684.069 922.136,684.069 922.695,684.069 923.255,684.069 923.814,684.069 924.373,684.069 924.932,684.069 925.492,684.069 926.051,684.069 926.61,684.069 927.169,684.069 927.729,684.069 928.288,684.069 928.847,684.069 929.406,684.069 929.966,684.069 930.525,684.069 931.084,684.069 931.644,684.069 932.203,684.069 932.762,684.069 933.321,684.069 933.881,684.069 934.44,684.069 934.999,684.069 935.558,684.069 936.118,684.069 936.677,684.069 937.236,684.069 937.795,684.069 938.355,684.069 938.914,684.069 939.473,684.069 940.032,684.069 940.592,684.069 941.151,684.069 941.71,684.069 942.269,684.069 942.829,684.069 943.388,684.069 943.947,684.069 944.506,684.069 945.066,684.069 945.625,684.069 946.184,684.069 946.743,684.069 947.303,684.069 947.862,684.069 948.421,684.069 948.98,684.069 949.54,684.069 950.099,684.069 950.658,684.069 951.217,684.069 951.777,684.069 952.336,684.069 952.895,684.069 953.454,684.069 954.014,684.069 954.573,684.069 955.132,684.069 955.691,684.069 956.251,684.069 956.81,684.069 957.369,684.069 957.928,684.069 958.488,684.069 959.047,684.069 959.606,684.069 960.165,684.069 960.725,684.069 961.284,684.069 961.843,684.069 962.402,684.069 962.962,684.069 963.521,684.069 964.08,684.069 964.639,684.069 965.199,684.069 965.758,684.069 966.317,684.069 966.876,684.069 967.436,684.069 967.995,684.069 968.554,684.069 969.113,684.069 969.673,684.069 970.232,684.069 970.791,684.069 971.35,684.069 971.91,684.069 972.469,684.069 973.028,684.069 973.587,684.069 974.147,684.069 974.706,684.069 975.265,684.069 975.824,684.069 976.384,684.069 976.943,684.069 977.502,684.069 978.061,684.069 978.621,684.069 979.18,684.069 979.739,684.069 980.298,684.069 980.858,684.069 981.417,684.069 981.976,684.069 982.535,684.069 983.095,684.069 983.654,684.069 984.213,684.069 984.772,684.069 985.332,684.069 985.891,684.069 986.45,684.069 987.009,684.069 987.569,684.069 988.128,684.069 988.687,684.069 989.246,684.069 989.806,684.069 990.365,684.069 990.924,684.069 991.483,684.069 992.043,684.069 992.602,684.069 993.161,684.069 993.72,684.069 994.28,684.069 994.839,684.069 995.398,684.069 995.957,684.069 996.517,684.069 997.076,684.069 997.635,684.069 998.194,684.069 998.754,684.069 999.313,684.069 999.872,684.069 1000.43,684.069 1000.99,684.069 1001.55,684.069 1002.11,684.069 1002.67,684.069 1003.23,684.069 1003.79,684.069 1004.35,684.069 1004.91,684.069 1005.46,684.069 1006.02,684.069 1006.58,684.069 1007.14,684.069 1007.7,684.069 1008.26,684.069 1008.82,684.069 1009.38,684.069 1009.94,684.069 1010.5,684.069 1011.06,684.069 1011.62,684.069 1012.18,684.069 1012.73,684.069 1013.29,684.069 1013.85,684.069 1014.41,684.069 1014.97,684.069 1015.53,684.069 1016.09,684.069 1016.65,684.069 1017.21,684.069 1017.77,684.069 1018.33,684.069 1018.89,684.069 1019.45,684.069 1020.01,684.069 1020.56,684.069 1021.12,684.069 1021.68,684.069 1022.24,684.069 1022.8,684.069 1023.36,684.069 1023.92,684.069 1024.48,684.069 1025.04,684.069 1025.6,684.069 1026.16,684.069 1026.72,684.069 1027.28,684.069 1027.83,684.069 1028.39,684.069 1028.95,684.069 1029.51,684.069 1030.07,684.069 1030.63,684.069 1031.19,684.069 1031.75,684.069 1032.31,684.069 1032.87,684.069 1033.43,684.069 1033.99,684.069 1034.55,684.069 1035.1,684.069 1035.66,684.069 1036.22,684.069 1036.78,684.069 1037.34,684.069 1037.9,684.069 1038.46,684.069 1039.02,684.069 1039.58,684.069 1040.14,684.069 1040.7,684.069 1041.26,684.069 1041.82,684.069 1042.38,684.069 1042.93,684.069 1043.49,684.069 1044.05,684.069 1044.61,684.069 1045.17,684.069 1045.73,684.069 1046.29,684.069 1046.85,684.069 1047.41,684.069 1047.97,684.069 1048.53,684.069 1049.09,684.069 1049.65,684.069 1050.2,684.069 1050.76,684.069 1051.32,684.069 1051.88,684.069 1052.44,684.069 1053,684.069 1053.56,684.069 1054.12,684.069 1054.68,684.069 1055.24,684.069 1055.8,684.069 1056.36,684.069 1056.92,684.069 1057.48,684.069 1058.03,684.069 1058.59,684.069 1059.15,684.069 1059.71,684.069 1060.27,684.069 1060.83,684.069 1061.39,684.069 1061.95,684.069 1062.51,684.069 1063.07,684.069 1063.63,684.069 1064.19,684.069 1064.75,684.069 1065.3,684.069 1065.86,684.069 1066.42,684.069 1066.98,684.069 1067.54,684.069 1068.1,684.069 1068.66,684.069 1069.22,684.069 1069.78,684.069 1070.34,684.069 1070.9,684.069 1071.46,684.069 1072.02,684.069 1072.57,684.069 1073.13,684.069 1073.69,684.069 1074.25,684.069 1074.81,684.069 1075.37,684.069 1075.93,684.069 1076.49,684.069 1077.05,684.069 1077.61,684.069 1078.17,684.069 1078.73,684.069 1079.29,684.069 1079.85,684.069 1080.4,684.069 1080.96,684.069 1081.52,684.069 1082.08,684.069 1082.64,684.069 1083.2,684.069 1083.76,684.069 1084.32,684.069 1084.88,684.069 1085.44,684.069 1086,684.069 1086.56,684.069 1087.12,684.069 1087.67,684.069 1088.23,684.069 1088.79,684.069 1089.35,684.069 1089.91,684.069 1090.47,684.069 1091.03,684.069 1091.59,684.069 1092.15,684.069 1092.71,684.069 1093.27,684.069 1093.83,684.069 1094.39,684.069 1094.94,684.069 1095.5,684.069 1096.06,684.069 1096.62,684.069 1097.18,684.069 1097.74,684.069 1098.3,684.069 1098.86,684.069 1099.42,684.069 1099.98,684.069 1100.54,684.069 1101.1,684.069 1101.66,684.069 1102.22,684.069 1102.77,684.069 1103.33,684.069 1103.89,684.069 1104.45,684.069 1105.01,684.069 1105.57,684.069 1106.13,684.069 1106.69,684.069 1107.25,684.069 1107.81,684.069 1108.37,684.069 1108.93,684.069 1109.49,684.069 1110.04,684.069 1110.6,684.069 1111.16,684.069 1111.72,684.069 1112.28,684.069 1112.84,684.069 1113.4,684.069 1113.96,684.069 1114.52,684.069 1115.08,684.069 1115.64,684.069 1116.2,684.069 1116.76,684.069 1117.31,684.069 1117.87,684.069 1118.43,684.069 1118.99,684.069 1119.55,684.069 1120.11,684.069 1120.67,684.069 1121.23,684.069 1121.79,684.069 1122.35,684.069 1122.91,684.069 1123.47,684.069 1124.03,684.069 1124.59,684.069 1125.14,684.069 1125.7,684.069 1126.26,684.069 1126.82,684.069 1127.38,684.069 1127.94,684.069 1128.5,684.069 1129.06,684.069 1129.62,684.069 1130.18,684.069 1130.74,684.069 1131.3,684.069 1131.86,684.069 1132.41,684.069 1132.97,684.069 1133.53,684.069 1134.09,684.069 1134.65,684.069 1135.21,684.069 1135.77,684.069 1136.33,684.069 1136.89,684.069 1137.45,684.069 1138.01,684.069 1138.57,684.069 1139.13,684.069 1139.68,684.069 1140.24,684.069 1140.8,684.069 1141.36,684.069 1141.92,684.069 1142.48,684.069 1143.04,684.069 1143.6,684.069 1144.16,684.069 1144.72,684.069 1145.28,684.069 1145.84,684.069 1146.4,684.069 1146.96,684.069 1147.51,684.069 1148.07,684.069 1148.63,684.069 1149.19,684.069 1149.75,684.069 1150.31,684.069 1150.87,684.069 1151.43,684.069 1151.99,684.069 1152.55,684.069 1153.11,684.069 1153.67,684.069 1154.23,684.069 1154.78,684.069 1155.34,684.069 1155.9,684.069 1156.46,684.069 1157.02,684.069 1157.58,684.069 1158.14,684.069 1158.7,684.069 1159.26,684.069 1159.82,684.069 1160.38,684.069 1160.94,684.069 1161.5,684.069 1162.05,684.069 1162.61,684.069 1163.17,684.069 1163.73,684.069 1164.29,684.069 1164.85,684.069 1165.41,684.069 1165.97,684.069 1166.53,684.069 1167.09,684.069 1167.65,684.069 1168.21,684.069 1168.77,684.069 1169.33,684.069 1169.88,684.069 1170.44,684.069 1171,684.069 1171.56,684.069 1172.12,684.069 1172.68,684.069 1173.24,684.069 1173.8,684.069 1174.36,684.069 1174.92,684.069 1175.48,684.069 1176.04,684.069 1176.6,684.069 1177.15,684.069 1177.71,684.069 1178.27,684.069 1178.83,684.069 1179.39,684.069 1179.95,684.069 1180.51,684.069 1181.07,684.069 1181.63,684.069 1182.19,684.069 1182.75,684.069 1183.31,684.069 1183.87,684.069 1184.43,684.069 1184.98,684.069 1185.54,684.069 1186.1,684.069 1186.66,684.069 1187.22,684.069 1187.78,684.069 1188.34,684.069 1188.9,684.069 1189.46,684.069 1190.02,684.069 1190.58,684.069 1191.14,684.069 1191.7,684.069 1192.25,684.069 1192.81,684.069 1193.37,684.069 1193.93,684.069 1194.49,684.069 1195.05,684.069 1195.61,684.069 1196.17,684.069 1196.73,684.069 1197.29,684.069 1197.85,684.069 1198.41,684.069 1198.97,684.069 1199.52,684.069 1200.08,684.069 1200.64,684.069 1201.2,684.069 1201.76,684.069 1202.32,684.069 1202.88,684.069 1203.44,684.069 1204,684.069 1204.56,684.069 1205.12,684.069 1205.68,684.069 1206.24,684.069 1206.8,684.069 1207.35,684.069 1207.91,684.069 1208.47,684.069 1209.03,684.069 1209.59,684.069 1210.15,684.069 1210.71,684.069 1211.27,684.069 1211.83,684.069 1212.39,684.069 1212.95,684.069 1213.51,684.069 1214.07,684.069 1214.62,684.069 1215.18,684.069 1215.74,684.069 1216.3,684.069 1216.86,684.069 1217.42,684.069 1217.98,684.069 1218.54,684.069 1219.1,684.069 1219.66,684.069 1220.22,684.069 1220.78,684.069 1221.34,684.069 1221.89,684.069 1222.45,684.069 1223.01,684.069 1223.57,684.069 1224.13,684.069 1224.69,684.069 1225.25,684.069 1225.81,684.069 1226.37,684.069 1226.93,684.069 1227.49,684.069 1228.05,684.069 1228.61,684.069 1229.17,684.069 1229.72,684.069 1230.28,684.069 1230.84,684.069 1231.4,684.069 1231.96,684.069 1232.52,684.069 1233.08,684.069 1233.64,684.069 1234.2,684.069 1234.76,684.069 1235.32,684.069 1235.88,684.069 1236.44,684.069 1236.99,684.069 1237.55,684.069 1238.11,684.069 1238.67,684.069 1239.23,684.069 1239.79,684.069 1240.35,684.069 1240.91,684.069 1241.47,684.069 1242.03,684.069 1242.59,684.069 1243.15,684.069 1243.71,684.069 1244.26,684.069 1244.82,684.069 1245.38,684.069 1245.94,684.069 1246.5,684.069 1247.06,684.069 1247.62,684.069 1248.18,684.069 1248.74,684.069 1249.3,684.069 1249.86,684.069 1250.42,684.069 1250.98,684.069 1251.54,684.069 1252.09,684.069 1252.65,684.069 1253.21,684.069 1253.77,684.069 1254.33,684.069 1254.89,684.069 1255.45,684.069 1256.01,684.069 1256.57,684.069 1257.13,684.069 1257.69,684.069 1258.25,684.069 1258.81,684.069 1259.36,684.069 1259.92,684.069 1260.48,684.069 1261.04,684.069 1261.6,684.069 1262.16,684.069 1262.72,684.069 1263.28,684.069 1263.84,684.069 1264.4,684.069 1264.96,684.069 1265.52,684.069 1266.08,684.069 1266.63,684.069 1267.19,684.069 1267.75,684.069 1268.31,684.069 1268.87,684.069 1269.43,684.069 1269.99,684.069 1270.55,684.069 1271.11,684.069 1271.67,684.069 1272.23,684.069 1272.79,684.069 1273.35,684.069 1273.91,684.069 1274.46,684.069 1275.02,684.069 1275.58,684.069 1276.14,684.069 1276.7,684.069 1277.26,684.069 1277.82,684.069 1278.38,684.069 1278.94,684.069 1279.5,684.069 1280.06,684.069 1280.62,684.069 1281.18,684.069 1281.73,684.069 1282.29,684.069 1282.85,684.069 1283.41,684.069 1283.97,684.069 1284.53,684.069 1285.09,684.069 1285.65,684.069 1286.21,684.069 1286.77,684.069 1287.33,684.069 1287.89,684.069 1288.45,684.069 1289,684.069 1289.56,684.069 1290.12,684.069 1290.68,684.069 1291.24,684.069 1291.8,684.069 1292.36,684.069 1292.92,684.069 1293.48,684.069 1294.04,684.069 1294.6,684.069 1295.16,684.069 1295.72,684.069 1296.28,684.069 1296.83,684.069 1297.39,684.069 1297.95,684.069 1298.51,684.069 1299.07,684.069 1299.63,684.069 1300.19,684.069 1300.75,684.069 1301.31,684.069 1301.87,684.069 1302.43,684.069 1302.99,684.069 1303.55,684.069 1304.1,684.069 1304.66,684.069 1305.22,684.069 1305.78,684.069 1306.34,684.069 1306.9,684.069 1307.46,684.069 1308.02,684.069 1308.58,684.069 1309.14,684.069 1309.7,684.069 1310.26,684.069 1310.82,684.069 1311.38,684.069 1311.93,684.069 1312.49,684.069 1313.05,684.069 1313.61,684.069 1314.17,684.069 1314.73,684.069 1315.29,684.069 1315.85,684.069 1316.41,684.069 1316.97,684.069 1317.53,684.069 1318.09,684.069 1318.65,684.069 1319.2,684.069 1319.76,684.069 1320.32,684.069 1320.88,684.069 1321.44,684.069 1322,684.069 1322.56,684.069 1323.12,684.069 1323.68,684.069 1324.24,684.069 1324.8,684.069 1325.36,684.069 1325.92,684.069 1326.47,684.069 1327.03,684.069 1327.59,684.069 1328.15,684.069 1328.71,684.069 1329.27,684.069 1329.83,684.069 1330.39,684.069 1330.95,684.069 1331.51,684.069 1332.07,684.069 1332.63,684.069 1333.19,684.069 1333.75,684.069 1334.3,684.069 1334.86,684.069 1335.42,684.069 1335.98,684.069 1336.54,684.069 1337.1,684.069 1337.66,684.069 1338.22,684.069 1338.78,684.069 1339.34,684.069 1339.9,684.069 1340.46,684.069 1341.02,684.069 1341.57,684.069 1342.13,684.069 1342.69,684.069 1343.25,684.069 1343.81,684.069 1344.37,684.069 1344.93,684.069 1345.49,684.069 1346.05,684.069 1346.61,684.069 1347.17,684.069 1347.73,684.069 1348.29,684.069 1348.84,684.069 1349.4,684.069 1349.96,684.069 1350.52,684.069 1351.08,684.069 1351.64,684.069 1352.2,684.069 1352.76,684.069 1353.32,684.069 1353.88,684.069 1354.44,684.069 1355,684.069 1355.56,684.069 1356.12,684.069 1356.67,684.069 1357.23,684.069 1357.79,684.069 1358.35,684.069 1358.91,684.069 1359.47,684.069 1360.03,684.069 1360.59,684.069 1361.15,684.069 1361.71,684.069 1362.27,684.069 1362.83,684.069 1363.39,684.069 1363.94,684.069 1364.5,684.069 1365.06,684.069 1365.62,684.069 1366.18,684.069 1366.74,684.069 1367.3,684.069 1367.86,684.069 1368.42,684.069 1368.98,684.069 1369.54,684.069 1370.1,684.069 1370.66,684.069 1371.21,684.069 1371.77,684.069 1372.33,684.069 1372.89,684.069 1373.45,684.069 1374.01,684.069 1374.57,684.069 1375.13,684.069 1375.69,684.069 1376.25,684.069 1376.81,684.069 1377.37,684.069 1377.93,684.069 1378.49,684.069 1379.04,684.069 1379.6,684.069 1380.16,684.069 1380.72,684.069 1381.28,684.069 1381.84,684.069 1382.4,684.069 1382.96,684.069 1383.52,684.069 1384.08,684.069 1384.64,684.069 1385.2,684.069 1385.76,684.069 1386.31,684.069 1386.87,684.069 1387.43,684.069 1387.99,684.069 1388.55,684.069 1389.11,684.069 1389.67,684.069 1390.23,684.069 1390.79,684.069 1391.35,684.069 1391.91,684.069 1392.47,684.069 1393.03,684.069 1393.58,684.069 1394.14,684.069 1394.7,684.069 1395.26,684.069 1395.82,684.069 1396.38,684.069 1396.94,684.069 1397.5,684.069 1398.06,684.069 1398.62,684.069 1399.18,684.069 1399.74,684.069 1400.3,684.069 1400.86,684.069 1401.41,684.069 1401.97,684.069 1402.53,684.069 1403.09,684.069 1403.65,684.069 1404.21,684.069 1404.77,684.069 1405.33,684.069 1405.89,684.069 1406.45,684.069 1407.01,684.069 1407.57,684.069 1408.13,684.069 1408.68,684.069 1409.24,684.069 1409.8,684.069 1410.36,684.069 1410.92,684.069 1411.48,684.069 1412.04,684.069 1412.6,684.069 1413.16,684.069 1413.72,684.069 1414.28,684.069 1414.84,684.069 1415.4,684.069 1415.95,684.069 1416.51,684.069 1417.07,684.069 1417.63,684.069 1418.19,684.069 1418.75,684.069 1419.31,684.069 1419.87,684.069 1420.43,684.069 1420.99,684.069 1421.55,684.069 1422.11,684.069 1422.67,684.069 1423.23,684.069 1423.78,684.069 1424.34,684.069 1424.9,684.069 1425.46,684.069 1426.02,684.069 1426.58,684.069 1427.14,684.069 1427.7,684.069 1428.26,684.069 1428.82,684.069 1429.38,684.069 1429.94,684.069 1430.5,684.069 1431.05,684.069 1431.61,684.069 1432.17,684.069 1432.73,684.069 1433.29,684.069 1433.85,684.069 1434.41,684.069 1434.97,684.069 1435.53,684.069 1436.09,684.069 1436.65,684.069 1437.21,684.069 1437.77,684.069 1438.33,684.069 1438.88,684.069 1439.44,684.069 1440,684.069 1440.56,684.069 1441.12,684.069 1441.68,684.069 1442.24,684.069 1442.8,684.069 1443.36,684.069 1443.92,684.069 1444.48,684.069 1445.04,684.069 1445.6,684.069 1446.15,684.069 1446.71,684.069 1447.27,684.069 1447.83,684.069 1448.39,684.069 1448.95,684.069 1449.51,684.069 1450.07,684.069 1450.63,684.069 1451.19,684.069 1451.75,684.069 1452.31,684.069 1452.87,684.069 1453.42,684.069 1453.98,684.069 1454.54,684.069 1455.1,684.069 1455.66,684.069 1456.22,684.069 1456.78,684.069 1457.34,684.069 1457.9,684.069 1458.46,684.069 1459.02,684.069 1459.58,684.069 1460.14,684.069 1460.7,684.069 1461.25,684.069 1461.81,684.069 1462.37,684.069 1462.93,684.069 1463.49,684.069 1464.05,684.069 1464.61,684.069 1465.17,684.069 1465.73,684.069 1466.29,684.069 1466.85,684.069 1467.41,684.069 1467.97,684.069 1468.52,684.069 1469.08,684.069 1469.64,684.069 1470.2,684.069 1470.76,684.069 1471.32,684.069 1471.88,684.069 1472.44,684.069 1473,684.069 1473.56,684.069 1474.12,684.069 1474.68,684.069 1475.24,684.069 1475.79,684.069 1476.35,684.069 1476.91,684.069 1477.47,684.069 1478.03,684.069 1478.59,684.069 1479.15,684.069 1479.71,684.069 1480.27,684.069 1480.83,684.069 1481.39,684.069 1481.95,684.069 1482.51,684.069 1483.07,684.069 1483.62,684.069 1484.18,684.069 1484.74,684.069 1485.3,684.069 1485.86,684.069 1486.42,684.069 1486.98,684.069 1487.54,684.069 1488.1,684.069 1488.66,684.069 1489.22,684.069 1489.78,684.069 1490.34,684.069 1490.89,684.069 1491.45,684.069 1492.01,684.069 1492.57,684.069 1493.13,684.069 1493.69,684.069 1494.25,684.069 1494.81,684.069 1495.37,684.069 1495.93,684.069 1496.49,684.069 1497.05,684.069 1497.61,684.069 1498.16,684.069 1498.72,684.069 1499.28,684.069 1499.84,684.069 1500.4,684.069 1500.96,684.069 1501.52,684.069 1502.08,684.069 1502.64,684.069 1503.2,684.069 1503.76,684.069 1504.32,684.069 1504.88,684.069 1505.44,684.069 1505.99,684.069 1506.55,684.069 1507.11,684.069 1507.67,684.069 1508.23,684.069 1508.79,684.069 1509.35,684.069 1509.91,684.069 1510.47,684.069 1511.03,684.069 1511.59,684.069 1512.15,684.069 1512.71,684.069 1513.26,684.069 1513.82,684.069 1514.38,684.069 1514.94,684.069 1515.5,684.069 1516.06,684.069 1516.62,684.069 1517.18,684.069 1517.74,684.069 1518.3,684.069 1518.86,684.069 1519.42,684.069 1519.98,684.069 1520.53,684.069 1521.09,684.069 1521.65,684.069 1522.21,684.069 1522.77,684.069 1523.33,684.069 1523.89,684.069 1524.45,684.069 1525.01,684.069 1525.57,684.069 1526.13,684.069 1526.69,684.069 1527.25,684.069 1527.81,684.069 1528.36,684.069 1528.92,684.069 1529.48,684.069 1530.04,684.069 1530.6,684.069 1531.16,684.069 1531.72,684.069 1532.28,684.069 1532.84,684.069 1533.4,684.069 1533.96,684.069 1534.52,684.069 1535.08,684.069 1535.63,684.069 1536.19,684.069 1536.75,684.069 1537.31,684.069 1537.87,684.069 1538.43,684.069 1538.99,684.069 1539.55,684.069 1540.11,684.069 1540.67,684.069 1541.23,684.069 1541.79,684.069 1542.35,684.069 1542.9,684.069 1543.46,684.069 1544.02,684.069 1544.58,684.069 1545.14,684.069 1545.7,684.069 1546.26,684.069 1546.82,684.069 1547.38,684.069 1547.94,684.069 1548.5,684.069 1549.06,684.069 1549.62,684.069 1550.18,684.069 1550.73,684.069 1551.29,684.069 1551.85,684.069 1552.41,684.069 1552.97,684.069 1553.53,684.069 1554.09,684.069 1554.65,684.069 1555.21,684.069 1555.77,684.069 1556.33,684.069 1556.89,684.069 1557.45,684.069 1558,684.069 1558.56,684.069 1559.12,684.069 1559.68,684.069 1560.24,684.069 1560.8,684.069 1561.36,684.069 1561.92,684.069 1562.48,684.069 1563.04,684.069 1563.6,684.069 1564.16,684.069 1564.72,684.069 1565.28,684.069 1565.83,684.069 1566.39,684.069 1566.95,684.069 1567.51,684.069 1568.07,684.069 1568.63,684.069 1569.19,684.069 1569.75,684.069 1570.31,684.069 1570.87,684.069 1571.43,684.069 1571.99,684.069 1572.55,684.069 1573.1,684.069 1573.66,684.069 1574.22,684.069 1574.78,684.069 1575.34,684.069 1575.9,684.069 1576.46,684.069 1577.02,684.069 1577.58,684.069 1578.14,684.069 1578.7,684.069 1579.26,684.069 1579.82,684.069 1580.37,684.069 1580.93,684.069 1581.49,684.069 1582.05,684.069 1582.61,684.069 1583.17,684.069 1583.73,684.069 1584.29,684.069 1584.85,684.069 1585.41,684.069 1585.97,684.069 1586.53,684.069 1587.09,684.069 1587.65,684.069 1588.2,684.069 1588.76,684.069 1589.32,684.069 1589.88,684.069 1590.44,684.069 1591,684.069 1591.56,684.069 1592.12,684.069 1592.68,684.069 1593.24,684.069 1593.8,684.069 1594.36,684.069 1594.92,684.069 1595.47,684.069 1596.03,684.069 1596.59,684.069 1597.15,684.069 1597.71,684.069 1598.27,684.069 1598.83,684.069 1599.39,684.069 1599.95,684.069 1600.51,684.069 1601.07,684.069 1601.63,684.069 1602.19,684.069 1602.74,684.069 1603.3,684.069 1603.86,684.069 1604.42,684.069 1604.98,684.069 1605.54,684.069 1606.1,684.069 1606.66,684.069 1607.22,684.069 1607.78,684.069 1608.34,684.069 1608.9,684.069 1609.46,684.069 1610.02,684.069 1610.57,684.069 1611.13,684.069 1611.69,684.069 1612.25,684.069 1612.81,684.069 1613.37,684.069 1613.93,684.069 1614.49,684.069 1615.05,684.069 1615.61,684.069 1616.17,684.069 1616.73,684.069 1617.29,684.069 1617.84,684.069 1618.4,684.069 1618.96,684.069 1619.52,684.069 1620.08,684.069 1620.64,684.069 1621.2,684.069 1621.76,684.069 1622.32,684.069 1622.88,684.069 1623.44,684.069 1624,684.069 1624.56,684.069 1625.11,684.069 1625.67,684.069 1626.23,684.069 1626.79,684.069 1627.35,684.069 1627.91,684.069 1628.47,684.069 1629.03,684.069 1629.59,684.069 1630.15,684.069 1630.71,684.069 1631.27,684.069 1631.83,684.069 1632.39,684.069 1632.94,684.069 1633.5,684.069 1634.06,684.069 1634.62,684.069 1635.18,684.069 1635.74,684.069 1636.3,684.069 1636.86,684.069 1637.42,684.069 1637.98,684.069 1638.54,684.069 1639.1,684.069 1639.66,684.069 1640.21,684.069 1640.77,684.069 1641.33,684.069 1641.89,684.069 1642.45,684.069 1643.01,684.069 1643.57,684.069 1644.13,684.069 1644.69,684.069 1645.25,684.069 1645.81,684.069 1646.37,684.069 1646.93,684.069 1647.48,684.069 1648.04,684.069 1648.6,684.069 1649.16,684.069 1649.72,684.069 1650.28,684.069 1650.84,684.069 1651.4,684.069 1651.96,684.069 1652.52,684.069 1653.08,684.069 1653.64,684.069 1654.2,684.069 1654.76,684.069 1655.31,684.069 1655.87,684.069 1656.43,684.069 1656.99,684.069 1657.55,684.069 1658.11,684.069 1658.67,684.069 1659.23,684.069 1659.79,684.069 1660.35,684.069 1660.91,684.069 1661.47,684.069 1662.03,684.069 1662.58,684.069 1663.14,684.069 1663.7,684.069 1664.26,684.069 1664.82,684.069 1665.38,684.069 1665.94,684.069 1666.5,684.069 1667.06,684.069 1667.62,684.069 1668.18,684.069 1668.74,684.069 1669.3,684.069 1669.85,684.069 1670.41,684.069 1670.97,684.069 1671.53,684.069 1672.09,684.069 1672.65,684.069 1673.21,684.069 1673.77,684.069 1674.33,684.069 1674.89,684.069 1675.45,684.069 1676.01,684.069 1676.57,684.069 1677.13,684.069 1677.68,684.069 1678.24,684.069 1678.8,684.069 1679.36,684.069 1679.92,684.069 1680.48,684.069 1681.04,684.069 1681.6,684.069 1682.16,684.069 1682.72,684.069 1683.28,684.069 1683.84,684.069 1684.4,684.069 1684.95,684.069 1685.51,684.069 1686.07,684.069 1686.63,684.069 1687.19,684.069 1687.75,684.069 1688.31,684.069 1688.87,684.069 1689.43,684.069 1689.99,684.069 1690.55,684.069 1691.11,684.069 1691.67,684.069 1692.23,684.069 1692.78,684.069 1693.34,684.069 1693.9,684.069 1694.46,684.069 1695.02,684.069 1695.58,684.069 1696.14,684.069 1696.7,684.069 1697.26,684.069 1697.82,684.069 1698.38,684.069 1698.94,684.069 1699.5,684.069 1700.05,684.069 1700.61,684.069 1701.17,684.069 1701.73,684.069 1702.29,684.069 1702.85,684.069 1703.41,684.069 1703.97,684.069 1704.53,684.069 1705.09,684.069 1705.65,684.069 1706.21,684.069 1706.77,684.069 1707.32,684.069 1707.88,684.069 1708.44,684.069 1709,684.069 1709.56,684.069 1710.12,684.069 1710.68,684.069 1711.24,684.069 1711.8,684.069 1712.36,684.069 1712.92,684.069 1713.48,684.069 1714.04,684.069 1714.6,684.069 1715.15,684.069 1715.71,684.069 1716.27,684.069 1716.83,684.069 1717.39,684.069 1717.95,684.069 1718.51,684.069 1719.07,684.069 1719.63,684.069 1720.19,684.069 1720.75,684.069 1721.31,684.069 1721.87,684.069 1722.42,684.069 1722.98,684.069 1723.54,684.069 1724.1,684.069 1724.66,684.069 1725.22,684.069 1725.78,684.069 1726.34,684.069 1726.9,684.069 1727.46,684.069 1728.02,684.069 1728.58,684.069 1729.14,684.069 1729.69,684.069 1730.25,684.069 1730.81,684.069 1731.37,684.069 1731.93,684.069 1732.49,684.069 1733.05,684.069 1733.61,684.069 1734.17,684.069 1734.73,684.069 1735.29,684.069 1735.85,684.069 1736.41,684.069 1736.97,684.069 1737.52,684.069 1738.08,684.069 1738.64,684.069 1739.2,684.069 1739.76,684.069 1740.32,684.069 1740.88,684.069 1741.44,684.069 1742,684.069 1742.56,684.069 1743.12,684.069 1743.68,684.069 1744.24,684.069 1744.79,684.069 1745.35,684.069 1745.91,684.069 1746.47,684.069 1747.03,684.069 1747.59,684.069 1748.15,684.069 1748.71,684.069 1749.27,684.069 1749.83,684.069 1750.39,684.069 1750.95,684.069 1751.51,684.069 1752.06,684.069 1752.62,684.069 1753.18,684.069 1753.74,684.069 1754.3,684.069 1754.86,684.069 1755.42,684.069 1755.98,684.069 1756.54,684.069 1757.1,684.069 1757.66,684.069 1758.22,684.069 1758.78,684.069 1759.34,684.069 1759.89,684.069 1760.45,684.069 1761.01,684.069 1761.57,684.069 1762.13,684.069 1762.69,684.069 1763.25,684.069 1763.81,684.069 1764.37,684.069 1764.93,684.069 1765.49,684.069 1766.05,684.069 1766.61,684.069 1767.16,684.069 1767.72,684.069 1768.28,684.069 1768.84,684.069 1769.4,684.069 1769.96,684.069 1770.52,684.069 1771.08,684.069 1771.64,684.069 1772.2,684.069 1772.76,684.069 1773.32,684.069 1773.88,684.069 1774.43,684.069 1774.99,684.069 1775.55,684.069 1776.11,684.069 1776.67,684.069 1777.23,684.069 1777.79,684.069 1778.35,684.069 1778.91,684.069 1779.47,684.069 1780.03,684.069 1780.59,684.069 1781.15,684.069 1781.71,684.069 1782.26,684.069 1782.82,684.069 1783.38,684.069 1783.94,684.069 1784.5,684.069 1785.06,684.069 1785.62,684.069 1786.18,684.069 1786.74,684.069 1787.3,684.069 1787.86,684.069 1788.42,684.069 1788.98,684.069 1789.53,684.069 1790.09,684.069 1790.65,684.069 1791.21,684.069 1791.77,684.069 1792.33,684.069 1792.89,684.069 1793.45,684.069 1794.01,684.069 1794.57,684.069 1795.13,684.069 1795.69,684.069 1796.25,684.069 1796.8,684.069 1797.36,684.069 1797.92,684.069 1798.48,684.069 1799.04,684.069 1799.6,684.069 1800.16,684.069 1800.72,684.069 1801.28,684.069 1801.84,684.069 1802.4,684.069 1802.96,684.069 1803.52,684.069 1804.08,684.069 1804.63,684.069 1805.19,684.069 1805.75,684.069 1806.31,684.069 1806.87,684.069 1807.43,684.069 1807.99,684.069 1808.55,684.069 1809.11,684.069 1809.67,684.069 1810.23,684.069 1810.79,684.069 1811.35,684.069 1811.9,684.069 1812.46,684.069 1813.02,684.069 1813.58,684.069 1814.14,684.069 1814.7,684.069 1815.26,684.069 1815.82,684.069 1816.38,684.069 1816.94,684.069 1817.5,684.069 1818.06,684.069 1818.62,684.069 1819.18,684.069 1819.73,684.069 1820.29,684.069 1820.85,684.069 1821.41,684.069 1821.97,684.069 1822.53,684.069 1823.09,684.069 1823.65,684.069 1824.21,684.069 1824.77,684.069 1825.33,684.069 1825.89,684.069 1826.45,684.069 1827,684.069 1827.56,684.069 1828.12,684.069 1828.68,684.069 1829.24,684.069 1829.8,684.069 1830.36,684.069 1830.92,684.069 1831.48,684.069 1832.04,684.069 1832.6,684.069 1833.16,684.069 1833.72,684.069 1834.27,684.069 1834.83,684.069 1835.39,684.069 1835.95,684.069 1836.51,684.069 1837.07,684.069 1837.63,684.069 1838.19,684.069 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0297333605379935 ± 0.022752008376934262\nProjected Energy: -4.017525174093465 ± (0.004032122843418584, 0.003914842963305354)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.480465</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4417e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.615e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.408e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.333e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.745e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.057e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133637\n -0.759019192277071\n  0.13584182219622853\n  0.157899986946072\n  0.8767114411781325\n  1.530592997097333\n  1.583573261186734\n  3.072870330325868\n  3.125672653951841\n  4.862107221562172\n  6.260694850380592\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
