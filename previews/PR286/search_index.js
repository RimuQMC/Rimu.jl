var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21689111526984126 ± 0.0015305342950392988\n   G2(1) = 0.9164207371322968 ± 0.0008249192628757768\n   G2(2) = 0.980736797635748 ± 0.0006521285171732609\n   G2(3) = 0.9887938151940695 ± 0.0009968484323899696\n   G2(4) = 0.980736797635748 ± 0.0006521285171732609\n   G2(5) = 0.9164207371322968 ± 0.0008249192628757768\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.002724542313383 ± 0.159648567645066\n   Replica 2: -4.060546990809963 ± 0.13257376824403017\n   Replica 3: -4.024466793627027 ± 0.13036916529326356\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip590\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip590)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip591\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip590)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip592\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.3 2211.02,1003.3 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.765 2211.02,745.765 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.233 2211.02,488.233 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.7 2211.02,230.7 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip590)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.3 423.181,1003.3 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.765 423.181,745.765 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.233 423.181,488.233 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.7 423.181,230.7 \"/>\n<path clip-path=\"url(#clip590)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M290.043 1016.64 L306.363 1016.64 L306.363 1020.58 L284.418 1020.58 L284.418 1016.64 Q287.08 1013.89 291.664 1009.26 Q296.27 1004.61 297.451 1003.26 Q299.696 1000.74 300.576 999.004 Q301.478 997.244 301.478 995.554 Q301.478 992.8 299.534 991.064 Q297.613 989.328 294.511 989.328 Q292.312 989.328 289.858 990.092 Q287.427 990.855 284.65 992.406 L284.65 987.684 Q287.474 986.55 289.927 985.971 Q292.381 985.393 294.418 985.393 Q299.789 985.393 302.983 988.078 Q306.177 990.763 306.177 995.254 Q306.177 997.383 305.367 999.304 Q304.58 1001.2 302.474 1003.8 Q301.895 1004.47 298.793 1007.68 Q295.691 1010.88 290.043 1016.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M316.224 986.018 L334.58 986.018 L334.58 989.953 L320.506 989.953 L320.506 998.425 Q321.524 998.078 322.543 997.916 Q323.562 997.73 324.58 997.73 Q330.367 997.73 333.747 1000.9 Q337.126 1004.07 337.126 1009.49 Q337.126 1015.07 333.654 1018.17 Q330.182 1021.25 323.862 1021.25 Q321.687 1021.25 319.418 1020.88 Q317.173 1020.51 314.765 1019.77 L314.765 1015.07 Q316.849 1016.2 319.071 1016.76 Q321.293 1017.31 323.77 1017.31 Q327.774 1017.31 330.112 1015.21 Q332.45 1013.1 332.45 1009.49 Q332.45 1005.88 330.112 1003.77 Q327.774 1001.67 323.77 1001.67 Q321.895 1001.67 320.02 1002.08 Q318.168 1002.5 316.224 1003.38 L316.224 986.018 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M356.339 989.096 Q352.728 989.096 350.899 992.661 Q349.094 996.203 349.094 1003.33 Q349.094 1010.44 350.899 1014 Q352.728 1017.55 356.339 1017.55 Q359.973 1017.55 361.779 1014 Q363.608 1010.44 363.608 1003.33 Q363.608 996.203 361.779 992.661 Q359.973 989.096 356.339 989.096 M356.339 985.393 Q362.149 985.393 365.205 989.999 Q368.284 994.582 368.284 1003.33 Q368.284 1012.06 365.205 1016.67 Q362.149 1021.25 356.339 1021.25 Q350.529 1021.25 347.45 1016.67 Q344.395 1012.06 344.395 1003.33 Q344.395 994.582 347.45 989.999 Q350.529 985.393 356.339 985.393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M286.062 728.485 L304.418 728.485 L304.418 732.42 L290.344 732.42 L290.344 740.892 Q291.363 740.545 292.381 740.383 Q293.4 740.198 294.418 740.198 Q300.205 740.198 303.585 743.369 Q306.964 746.541 306.964 751.957 Q306.964 757.536 303.492 760.638 Q300.02 763.716 293.701 763.716 Q291.525 763.716 289.256 763.346 Q287.011 762.976 284.603 762.235 L284.603 757.536 Q286.687 758.67 288.909 759.226 Q291.131 759.781 293.608 759.781 Q297.613 759.781 299.951 757.675 Q302.288 755.568 302.288 751.957 Q302.288 748.346 299.951 746.24 Q297.613 744.133 293.608 744.133 Q291.733 744.133 289.858 744.55 Q288.006 744.967 286.062 745.846 L286.062 728.485 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M326.177 731.564 Q322.566 731.564 320.737 735.129 Q318.932 738.67 318.932 745.8 Q318.932 752.906 320.737 756.471 Q322.566 760.013 326.177 760.013 Q329.811 760.013 331.617 756.471 Q333.446 752.906 333.446 745.8 Q333.446 738.67 331.617 735.129 Q329.811 731.564 326.177 731.564 M326.177 727.86 Q331.987 727.86 335.043 732.467 Q338.122 737.05 338.122 745.8 Q338.122 754.527 335.043 759.133 Q331.987 763.716 326.177 763.716 Q320.367 763.716 317.288 759.133 Q314.233 754.527 314.233 745.8 Q314.233 737.05 317.288 732.467 Q320.367 727.86 326.177 727.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M356.339 731.564 Q352.728 731.564 350.899 735.129 Q349.094 738.67 349.094 745.8 Q349.094 752.906 350.899 756.471 Q352.728 760.013 356.339 760.013 Q359.973 760.013 361.779 756.471 Q363.608 752.906 363.608 745.8 Q363.608 738.67 361.779 735.129 Q359.973 731.564 356.339 731.564 M356.339 727.86 Q362.149 727.86 365.205 732.467 Q368.284 737.05 368.284 745.8 Q368.284 754.527 365.205 759.133 Q362.149 763.716 356.339 763.716 Q350.529 763.716 347.45 759.133 Q344.395 754.527 344.395 745.8 Q344.395 737.05 347.45 732.467 Q350.529 727.86 356.339 727.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M284.835 470.953 L307.057 470.953 L307.057 472.944 L294.511 505.513 L289.627 505.513 L301.432 474.888 L284.835 474.888 L284.835 470.953 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M316.224 470.953 L334.58 470.953 L334.58 474.888 L320.506 474.888 L320.506 483.36 Q321.524 483.013 322.543 482.851 Q323.562 482.666 324.58 482.666 Q330.367 482.666 333.747 485.837 Q337.126 489.008 337.126 494.425 Q337.126 500.004 333.654 503.105 Q330.182 506.184 323.862 506.184 Q321.687 506.184 319.418 505.814 Q317.173 505.443 314.765 504.703 L314.765 500.004 Q316.849 501.138 319.071 501.693 Q321.293 502.249 323.77 502.249 Q327.774 502.249 330.112 500.142 Q332.45 498.036 332.45 494.425 Q332.45 490.814 330.112 488.707 Q327.774 486.601 323.77 486.601 Q321.895 486.601 320.02 487.018 Q318.168 487.434 316.224 488.314 L316.224 470.953 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M356.339 474.031 Q352.728 474.031 350.899 477.596 Q349.094 481.138 349.094 488.268 Q349.094 495.374 350.899 498.939 Q352.728 502.48 356.339 502.48 Q359.973 502.48 361.779 498.939 Q363.608 495.374 363.608 488.268 Q363.608 481.138 361.779 477.596 Q359.973 474.031 356.339 474.031 M356.339 470.328 Q362.149 470.328 365.205 474.934 Q368.284 479.518 368.284 488.268 Q368.284 496.994 365.205 501.601 Q362.149 506.184 356.339 506.184 Q350.529 506.184 347.45 501.601 Q344.395 496.994 344.395 488.268 Q344.395 479.518 347.45 474.934 Q350.529 470.328 356.339 470.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M256.664 244.045 L264.303 244.045 L264.303 217.68 L255.992 219.346 L255.992 215.087 L264.256 213.42 L268.932 213.42 L268.932 244.045 L276.571 244.045 L276.571 247.98 L256.664 247.98 L256.664 244.045 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M296.015 216.499 Q292.404 216.499 290.576 220.064 Q288.77 223.606 288.77 230.735 Q288.77 237.842 290.576 241.406 Q292.404 244.948 296.015 244.948 Q299.65 244.948 301.455 241.406 Q303.284 237.842 303.284 230.735 Q303.284 223.606 301.455 220.064 Q299.65 216.499 296.015 216.499 M296.015 212.795 Q301.826 212.795 304.881 217.402 Q307.96 221.985 307.96 230.735 Q307.96 239.462 304.881 244.068 Q301.826 248.652 296.015 248.652 Q290.205 248.652 287.127 244.068 Q284.071 239.462 284.071 230.735 Q284.071 221.985 287.127 217.402 Q290.205 212.795 296.015 212.795 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M326.177 216.499 Q322.566 216.499 320.737 220.064 Q318.932 223.606 318.932 230.735 Q318.932 237.842 320.737 241.406 Q322.566 244.948 326.177 244.948 Q329.811 244.948 331.617 241.406 Q333.446 237.842 333.446 230.735 Q333.446 223.606 331.617 220.064 Q329.811 216.499 326.177 216.499 M326.177 212.795 Q331.987 212.795 335.043 217.402 Q338.122 221.985 338.122 230.735 Q338.122 239.462 335.043 244.068 Q331.987 248.652 326.177 248.652 Q320.367 248.652 317.288 244.068 Q314.233 239.462 314.233 230.735 Q314.233 221.985 317.288 217.402 Q320.367 212.795 326.177 212.795 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M356.339 216.499 Q352.728 216.499 350.899 220.064 Q349.094 223.606 349.094 230.735 Q349.094 237.842 350.899 241.406 Q352.728 244.948 356.339 244.948 Q359.973 244.948 361.779 241.406 Q363.608 237.842 363.608 230.735 Q363.608 223.606 361.779 220.064 Q359.973 216.499 356.339 216.499 M356.339 212.795 Q362.149 212.795 365.205 217.402 Q368.284 221.985 368.284 230.735 Q368.284 239.462 365.205 244.068 Q362.149 248.652 356.339 248.652 Q350.529 248.652 347.45 244.068 Q344.395 239.462 344.395 230.735 Q344.395 221.985 347.45 217.402 Q350.529 212.795 356.339 212.795 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip592)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.7 4017.76,230.7 \"/>\n<polyline clip-path=\"url(#clip592)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1243.2 463.375,1242.2 463.943,1241.1 464.511,1237.84 465.08,1236.55 465.648,1235.14 466.216,1233.62 466.785,1231.96 467.353,1230.16 467.921,1228.25 468.49,1225.15 469.058,1223 469.626,1218.62 470.195,1215.1 470.763,1212.39 471.331,1209.51 471.9,1206.46 472.468,1203.22 473.036,1199.82 473.605,1196.23 474.173,1190.37 474.741,1186.35 475.31,1181.06 475.878,1175.49 476.446,1170.77 477.015,1165.76 477.583,1160.6 478.152,1155.19 478.72,1149.53 479.288,1142.67 479.857,1135.56 480.425,1129.19 480.993,1121.55 481.562,1113.66 482.13,1103.5 482.698,1095.3 483.267,1087.8 483.835,1079.08 484.403,1071.3 484.972,1063.32 485.54,1053.04 486.108,1044.53 486.677,1034.95 487.245,1025.36 487.813,1015.67 488.382,1003.76 488.95,993.778 489.518,984.861 490.087,974.645 490.655,964.425 491.224,954.091 491.792,943.681 492.36,933.172 492.929,923.732 493.497,912.112 494.065,901.302 494.634,890.73 495.202,879.128 495.77,868.479 496.339,855.743 496.907,845.217 497.475,831.518 498.044,821.03 498.612,808.748 499.18,798.43 499.749,788.251 500.317,777.136 500.885,766.025 501.454,753.975 502.022,744.237 502.59,735.496 503.159,726.933 503.727,717.253 504.295,705.555 504.864,695.239 505.432,685.964 506.001,674.619 506.569,665.516 507.137,657.751 507.706,647.857 508.274,636.975 508.842,626.436 509.411,616.2 509.979,608.914 510.547,601.867 511.116,595.855 511.684,584.539 512.252,576.832 512.821,570.267 513.389,562.804 513.957,556.315 514.526,548.92 515.094,542.626 515.662,534.334 516.231,528.295 516.799,523.139 517.367,517.153 517.936,510.268 518.504,504.305 519.072,499.342 519.641,493.398 520.209,484.476 520.778,475.958 521.346,469.84 521.914,462.678 522.483,454.747 523.051,450.345 523.619,443.882 524.188,436.505 524.756,431.493 525.324,427.674 525.893,422.803 526.461,415.002 527.029,409.593 527.598,406.506 528.166,402.432 528.734,397.419 529.303,393.506 529.871,389.756 530.439,385.837 531.008,383.051 531.576,379.337 532.144,374.394 532.713,368.755 533.281,364.477 533.85,362.152 534.418,360.097 534.986,357.867 535.555,354.737 536.123,351.473 536.691,349.454 537.26,344.476 537.828,339.594 538.396,336.839 538.965,335.184 539.533,330.726 540.101,329.674 540.67,329.315 541.238,327.984 541.806,324.473 542.375,321.219 542.943,319.179 543.511,318.023 544.08,316.979 544.648,315.018 545.216,313.945 545.785,313.88 546.353,313.591 546.921,312.364 547.49,309.942 548.058,308.831 548.627,306.62 549.195,305.545 549.763,302.346 550.332,301.358 550.9,297.375 551.468,295.54 552.037,295.016 552.605,294.108 553.173,293.192 553.742,294.371 554.31,291.422 554.878,288.384 555.447,286.683 556.015,286.192 556.583,285.514 557.152,283.86 557.72,283.201 558.288,280.723 558.857,281.136 559.425,281.649 559.993,281.045 560.562,279.461 561.13,279.773 561.698,277.895 562.267,277.41 562.835,276.757 563.404,276.089 563.972,272.223 564.54,271.903 565.109,269.494 565.677,267.004 566.245,265.78 566.814,265.587 567.382,264.517 567.95,263.275 568.519,263.064 569.087,263.038 569.655,261.946 570.224,263.029 570.792,262.828 571.36,263.75 571.929,263.363 572.497,263.219 573.065,260.932 573.634,257.741 574.202,258.975 574.77,258.83 575.339,258.824 575.907,259.662 576.476,256.236 577.044,255.346 577.612,256.502 578.181,256.438 578.749,257.258 579.317,258.059 579.886,259.154 580.454,257.757 581.022,255.478 581.591,253.564 582.159,253.501 582.727,252.663 583.296,252.791 583.864,252.865 584.432,252.85 585.001,251.891 585.569,250.959 586.137,251.105 586.706,251.345 587.274,251.374 587.842,248.322 588.411,248.747 588.979,249.797 589.547,248.781 590.116,246.916 590.684,248.119 591.253,246.072 591.821,248.375 592.389,244.441 592.958,248.248 593.526,245.233 594.094,246.702 594.663,246.855 595.231,246.878 595.799,247.851 596.368,246.875 596.936,246.839 597.504,246.871 598.073,243.649 598.641,243.842 599.209,241.784 599.778,241.307 600.346,241.955 600.914,241.445 601.483,240.708 602.051,238.941 602.619,240.599 603.188,241.01 603.756,241.522 604.325,241.902 604.893,244.257 605.461,245.463 606.03,246.595 606.598,244.62 607.166,243.735 607.735,245.148 608.303,245.043 608.871,245.077 609.44,244.992 610.008,245.039 610.576,245.046 611.145,245.977 611.713,245.694 612.281,245.627 612.85,245.556 613.418,244.568 613.986,243.319 614.555,243.333 615.123,244.372 615.691,243.274 616.26,243.34 616.828,243.25 617.396,241.102 617.965,237.039 618.533,236.681 619.102,237.012 619.67,238.445 620.238,238.777 620.807,240.999 621.375,239.145 621.943,237.193 622.512,233.587 623.08,235.253 623.648,236.708 624.217,238.283 624.785,238.543 625.353,240.597 625.922,239.619 626.49,238.653 627.058,239.013 627.627,239.356 628.195,240.534 628.763,240.762 629.332,241.835 629.9,239.914 630.468,239.984 631.037,239.284 631.605,239.439 632.173,238.547 632.742,236.745 633.31,237.227 633.879,240.423 634.447,238.274 635.015,237.258 635.584,238.584 636.152,237.695 636.72,234.894 637.289,236.234 637.857,234.515 638.425,235.977 638.994,234.062 639.562,234.415 640.13,233.852 640.699,234.181 641.267,235.242 641.835,238.709 642.404,239.026 642.972,236.089 643.54,236.419 644.109,236.807 644.677,237.144 645.245,239.202 645.814,239.297 646.382,241.63 646.951,239.659 647.519,237.5 648.087,238.737 648.656,239.907 649.224,237.729 649.792,235.727 650.361,236.047 650.929,236.276 651.497,236.343 652.066,235.288 652.634,233.516 653.202,231.89 653.771,233.413 654.339,234.815 654.907,234.067 655.476,232.569 656.044,234.066 656.612,235.648 657.181,238.986 657.749,239.001 658.317,239.997 658.886,241.178 659.454,241.132 660.022,241.965 660.591,241.646 661.159,240.29 661.728,238.153 662.296,240.318 662.864,241.237 663.433,238.913 664.001,240.59 664.569,239.331 665.138,239.302 665.706,238.063 666.274,237.924 666.843,239.079 667.411,239.006 667.979,238.916 668.548,237.7 669.116,236.622 669.684,237.793 670.253,240.713 670.821,241.582 671.389,240.093 671.958,240.977 672.526,239.906 673.094,238.545 673.663,238.468 674.231,238.016 674.799,236.733 675.368,237.631 675.936,237.472 676.505,235.056 677.073,231.976 677.641,232.13 678.21,232.675 678.778,235.022 679.346,233.819 679.915,233.738 680.483,233.044 681.051,230.967 681.62,229.081 682.188,229.592 682.756,230.098 683.325,232.564 683.893,232.757 684.461,235.075 685.03,235.173 685.598,234.222 686.166,234.493 686.735,233.718 687.303,234.711 687.871,234.693 688.44,234.899 689.008,235.095 689.577,235.058 690.145,237.117 690.713,235.002 691.282,235.139 691.85,233.809 692.418,232.884 692.987,229.907 693.555,230.279 694.123,229.564 694.692,232.868 695.26,233.068 695.828,230.18 696.397,227.618 696.965,227.975 697.533,228.514 698.102,227.67 698.67,228.115 699.238,228.536 699.807,230.297 700.375,229.736 700.943,229.049 701.512,231.498 702.08,231.851 702.648,231.831 703.217,231.212 703.785,233.415 704.354,232.78 704.922,231.904 705.49,230.398 706.059,228.85 706.627,230.327 707.195,230.686 707.764,232.1 708.332,232.308 708.9,232.58 709.469,231.749 710.037,230.8 710.605,230.294 711.174,228.625 711.742,231.085 712.31,232.63 712.879,235.072 713.447,234.867 714.015,233.955 714.584,235.034 715.152,235.197 715.72,234.274 716.289,236.513 716.857,236.415 717.425,236.017 717.994,231.85 718.562,230.96 719.131,232.448 719.699,233.638 720.267,231.663 720.836,230.644 721.404,233.159 721.972,233.394 722.541,232.73 723.109,233.015 723.677,233.278 724.246,233.439 724.814,232.631 725.382,232.94 725.951,235.006 726.519,234.068 727.087,234.207 727.656,237.335 728.224,237.235 728.792,234.979 729.361,233.94 729.929,234.031 730.497,232.003 731.066,231.193 731.634,230.493 732.203,231.615 732.771,231.787 733.339,235.117 733.908,235.09 734.476,234.95 735.044,234.73 735.613,233.463 736.181,235.658 736.749,236.47 737.318,236.392 737.886,236.174 738.454,237.181 739.023,235.99 739.591,235.947 740.159,234.771 740.728,236.588 741.296,235.438 741.864,237.313 742.433,238.175 743.001,241.889 743.569,239.505 744.138,238.144 744.706,238.748 745.274,239.284 745.843,238.932 746.411,237.384 746.98,237.02 747.548,236.851 748.116,238.921 748.685,237.41 749.253,237.072 749.821,237.955 750.39,236.448 750.958,235.166 751.526,235.157 752.095,235.122 752.663,235.685 753.231,235.447 753.8,236.171 754.368,237.147 754.936,237.627 755.505,237.206 756.073,236.903 756.641,235.691 757.21,234.306 757.778,233.217 758.346,232.018 758.915,230.829 759.483,228.859 760.052,228.129 760.62,229.375 761.188,229.463 761.757,229.557 762.325,229.796 762.893,230.244 763.462,230.424 764.03,231.603 764.598,230.749 765.167,230.804 765.735,229.89 766.303,227.934 766.872,226.388 767.44,225.774 768.008,224.216 768.577,224.631 769.145,225.261 769.713,227.807 770.282,228.417 770.85,227.7 771.418,229.046 771.987,231.318 772.555,232.461 773.123,232.283 773.692,232.214 774.26,234.22 774.829,233.114 775.397,233.178 775.965,233.15 776.534,232.004 777.102,230.976 777.67,229.222 778.239,229.576 778.807,228.627 779.375,227.819 779.944,225.047 780.512,225.716 781.08,225.178 781.649,223.859 782.217,226.53 782.785,230.251 783.354,232.53 783.922,229.52 784.49,225.551 785.059,227.215 785.627,227.727 786.195,229.387 786.764,229.525 787.332,228.713 787.9,229.021 788.469,228.331 789.037,229.736 789.606,233.189 790.174,232.068 790.742,231.248 791.311,232.309 791.879,230.241 792.447,231.447 793.016,228.413 793.584,230.728 794.152,231.828 794.721,235.135 795.289,233.94 795.857,232.762 796.426,232.829 796.994,232.792 797.562,233.966 798.131,232.746 798.699,233.867 799.267,235.848 799.836,237.77 800.404,236.459 800.972,236.357 801.541,237.012 802.109,236.823 802.678,235.42 803.246,237.471 803.814,238.287 804.383,236.947 804.951,236.693 805.519,236.473 806.088,236.296 806.656,236.096 807.224,234.987 807.793,235.02 808.361,237.038 808.929,235.748 809.498,234.413 810.066,236.357 810.634,236.086 811.203,237.736 811.771,237.5 812.339,237.215 812.908,234.783 813.476,232.485 814.044,231.259 814.613,230.429 815.181,227.519 815.749,226.825 816.318,229.366 816.886,230.583 817.455,230.523 818.023,232.783 818.591,231.688 819.16,232.712 819.728,231.672 820.296,230.473 820.865,233.665 821.433,231.617 822.001,232.647 822.57,233.695 823.138,232.574 823.706,230.25 824.275,231.521 824.843,230.254 825.411,230.219 825.98,230.215 826.548,230.518 827.116,233.676 827.685,230.576 828.253,228.927 828.821,231.11 829.39,228.976 829.958,229.192 830.526,226.173 831.095,226.644 831.663,228.051 832.232,227.315 832.8,225.782 833.368,225.273 833.937,226.919 834.505,227.284 835.073,228.544 835.642,227.919 836.21,229.071 836.778,231.353 837.347,232.561 837.915,232.382 838.483,232.434 839.052,231.471 839.62,233.421 840.188,233.178 840.757,233.987 841.325,233.99 841.893,235.847 842.462,234.601 843.03,234.41 843.598,236.112 844.167,235.657 844.735,237.488 845.304,235.927 845.872,236.587 846.44,238.21 847.009,239.036 847.577,237.408 848.145,235.83 848.714,236.686 849.282,237.232 849.85,237.804 850.419,237.215 850.987,235.791 851.555,236.584 852.124,235.935 852.692,233.623 853.26,232.102 853.829,232.078 854.397,232.099 854.965,230.881 855.534,229.697 856.102,226.637 856.67,226.758 857.239,226.011 857.807,225.315 858.375,229.724 858.944,229.658 859.512,229.984 860.081,228.05 860.649,226.276 861.217,226.68 861.786,228.292 862.354,228.603 862.922,227.649 863.491,227.879 864.059,230.11 864.627,228.965 865.196,230.216 865.764,230.074 866.332,231.129 866.901,232.165 867.469,232.124 868.037,230.062 868.606,232.185 869.174,231.256 869.742,232.414 870.311,232.464 870.879,235.621 871.447,237.207 872.016,237.738 872.584,237.307 873.152,236.927 873.721,234.697 874.289,236.444 874.858,236.992 875.426,234.449 875.994,235.2 876.563,231.815 877.131,231.549 877.699,231.533 878.268,228.15 878.836,232.405 879.404,233.186 879.973,237.209 880.541,234.686 881.109,234.215 881.678,231.895 882.246,232.903 882.814,232.691 883.383,233.599 883.951,231.147 884.519,233.195 885.088,229.989 885.656,229.11 886.224,228.141 886.793,227.066 887.361,227.163 887.93,228.277 888.498,229.433 889.066,229.457 889.635,229.426 890.203,229.501 890.771,228.615 891.34,229.89 891.908,228.875 892.476,229.898 893.045,231.67 893.613,228.459 894.181,229.58 894.75,229.724 895.318,229.563 895.886,230.625 896.455,230.704 897.023,231.663 897.591,230.363 898.16,233.495 898.728,232.27 899.296,230.991 899.865,230.887 900.433,229.897 901.001,229.996 901.57,229.958 902.138,231.308 902.707,231.998 903.275,230.733 903.843,230.881 904.412,229.536 904.98,229.657 905.548,228.687 906.117,228.873 906.685,230.721 907.253,231.783 907.822,230.895 908.39,229.739 908.958,227.83 909.527,227.111 910.095,226.314 910.663,226.549 911.232,225.86 911.8,228.293 912.368,228.597 912.937,228.719 913.505,229.768 914.073,230.77 914.642,229.84 915.21,229.006 915.779,229.143 916.347,229.289 916.915,230.3 917.484,230.529 918.052,230.561 918.62,231.566 919.189,231.699 919.757,232.609 920.325,232.652 920.894,234.568 921.462,234.344 922.03,233.132 922.599,232.101 923.167,232.045 923.735,234.107 924.304,232.852 924.872,233.644 925.44,233.33 926.009,233.105 926.577,230.759 927.145,230.711 927.714,229.892 928.282,230.939 928.85,232.207 929.419,231.037 929.987,230.014 930.556,229.949 931.124,227.903 931.692,227.125 932.261,227.503 932.829,228.72 933.397,228.915 933.966,229.264 934.534,228.24 935.102,226.585 935.671,224.009 936.239,225.607 936.807,224.109 937.376,224.696 937.944,222.909 938.512,222.454 939.081,223.023 939.649,223.706 940.217,222.221 940.786,224.937 941.354,226.411 941.922,227.9 942.491,228.195 943.059,227.308 943.627,228.704 944.196,229.999 944.764,228.166 945.333,231.59 945.901,231.744 946.469,231.872 947.038,230.015 947.606,232.271 948.174,230.996 948.743,231.102 949.311,230.308 949.879,230.25 950.448,232.298 951.016,233.107 951.584,232.099 952.153,232.244 952.721,230.426 953.289,231.695 953.858,231.664 954.426,232.892 954.994,230.645 955.563,231.874 956.131,231.678 956.699,230.528 957.268,230.72 957.836,230.894 958.405,233.248 958.973,230.997 959.541,231.216 960.11,231.377 960.678,231.251 961.246,229.212 961.815,229.32 962.383,227.393 962.951,228.57 963.52,228.787 964.088,229.211 964.656,231.828 965.225,229.116 965.793,226.235 966.361,225.594 966.93,227.076 967.498,227.505 968.066,227.904 968.635,228.187 969.203,229.407 969.771,231.775 970.34,233.82 970.908,231.859 971.476,232.049 972.045,235.138 972.613,235.168 973.182,237 973.75,238.774 974.318,238.213 974.887,239.876 975.455,239.169 976.023,238.713 976.592,237.126 977.16,237.671 977.728,237.165 978.297,235.704 978.865,235.565 979.433,237.393 980.002,234.958 980.57,234.697 981.138,234.437 981.707,233.099 982.275,234.959 982.843,235.485 983.412,233.013 983.98,232.88 984.548,232.733 985.117,233.644 985.685,234.479 986.253,234.316 986.822,232.952 987.39,232.89 987.959,232.83 988.527,232.651 989.095,234.307 989.664,234.297 990.232,232.95 990.8,231.732 991.369,231.797 991.937,230.664 992.505,229.501 993.074,230.629 993.642,230.562 994.21,230.774 994.779,231.786 995.347,232.791 995.915,236.776 996.484,236.246 997.052,234.857 997.62,233.396 998.189,231.353 998.757,233.207 999.325,234.026 999.894,230.611 1000.46,232.523 1001.03,232.367 1001.6,230.174 1002.17,227.859 1002.74,227.058 1003.3,229.417 1003.87,230.255 1004.44,230.328 1005.01,229.225 1005.58,229.504 1006.15,229.325 1006.71,229.392 1007.28,231.61 1007.85,232.491 1008.42,235.485 1008.99,236.216 1009.56,235.926 1010.12,235.584 1010.69,236.316 1011.26,232.943 1011.83,232.721 1012.4,232.458 1012.97,233.255 1013.53,232.05 1014.1,231.714 1014.67,232.432 1015.24,231.201 1015.81,230.091 1016.38,228.07 1016.94,229.104 1017.51,229.227 1018.08,230.398 1018.65,229.302 1019.22,229.437 1019.79,227.394 1020.35,225.464 1020.92,226.687 1021.49,226.049 1022.06,224.499 1022.63,224.924 1023.2,226.399 1023.76,227.748 1024.33,224.831 1024.9,223.075 1025.47,222.56 1026.04,222.174 1026.61,222.771 1027.17,224.59 1027.74,225.116 1028.31,228.486 1028.88,227.572 1029.45,227.713 1030.02,231.229 1030.58,230.33 1031.15,231.353 1031.72,231.229 1032.29,234.398 1032.86,236.275 1033.43,237.131 1033.99,235.664 1034.56,236.464 1035.13,236.268 1035.7,235.701 1036.27,236.42 1036.84,233.81 1037.4,232.724 1037.97,232.561 1038.54,235.478 1039.11,235.441 1039.68,235.358 1040.25,234.238 1040.81,231.829 1041.38,231.607 1041.95,232.387 1042.52,233.412 1043.09,234.415 1043.66,233.241 1044.22,233.05 1044.79,232.732 1045.36,231.462 1045.93,231.187 1046.5,229.863 1047.07,228.886 1047.63,227.941 1048.2,228.202 1048.77,230.472 1049.34,231.37 1049.91,230.324 1050.48,231.304 1051.05,231.13 1051.61,227.071 1052.18,227.31 1052.75,228.453 1053.32,228.692 1053.89,228.832 1054.46,227.92 1055.02,230.02 1055.59,229.926 1056.16,228.943 1056.73,228.964 1057.3,228.074 1057.87,229.488 1058.43,228.681 1059,230.053 1059.57,230.011 1060.14,229.104 1060.71,228.13 1061.28,229.411 1061.84,229.485 1062.41,229.559 1062.98,231.655 1063.55,231.87 1064.12,230.91 1064.69,230.666 1065.25,229.706 1065.82,228.011 1066.39,231.337 1066.96,230.239 1067.53,230.436 1068.1,228.318 1068.66,229.348 1069.23,228.651 1069.8,228.596 1070.37,230.937 1070.94,232.945 1071.51,235 1072.07,233.81 1072.64,233.722 1073.21,233.454 1073.78,231.361 1074.35,231.138 1074.92,232.23 1075.48,231.922 1076.05,230.658 1076.62,231.685 1077.19,231.62 1077.76,231.328 1078.33,232.291 1078.89,232.373 1079.46,232.295 1080.03,231.027 1080.6,233.152 1081.17,233.958 1081.74,230.714 1082.3,230.477 1082.87,230.576 1083.44,231.656 1084.01,229.414 1084.58,229.711 1085.15,230.833 1085.71,231.968 1086.28,233.702 1086.85,235.361 1087.42,235.02 1087.99,236.596 1088.56,239.19 1089.12,238.419 1089.69,237.705 1090.26,236.147 1090.83,234.884 1091.4,235.444 1091.97,234.006 1092.53,233.652 1093.1,233.315 1093.67,232.071 1094.24,232.886 1094.81,231.956 1095.38,231.934 1095.94,231.836 1096.51,229.757 1097.08,229.542 1097.65,230.709 1098.22,230.878 1098.79,231.946 1099.35,230.828 1099.92,229.581 1100.49,229.556 1101.06,227.289 1101.63,226.54 1102.2,227.685 1102.76,229.793 1103.33,227.887 1103.9,227.071 1104.47,226.071 1105.04,226.364 1105.61,227.682 1106.17,230.846 1106.74,231.68 1107.31,230.659 1107.88,231.507 1108.45,232.378 1109.02,233.981 1109.58,231.804 1110.15,230.61 1110.72,230.608 1111.29,230.536 1111.86,230.607 1112.43,230.717 1112.99,231.66 1113.56,232.641 1114.13,232.513 1114.7,230.235 1115.27,230.047 1115.84,231.06 1116.4,230.286 1116.97,231.158 1117.54,231.174 1118.11,229.057 1118.68,229.224 1119.25,229.136 1119.81,226.245 1120.38,226.52 1120.95,227.001 1121.52,226.237 1122.09,224.366 1122.66,225.805 1123.23,225.994 1123.79,226.352 1124.36,226.635 1124.93,227.078 1125.5,229.442 1126.07,228.547 1126.64,229.851 1127.2,230.881 1127.77,229.888 1128.34,231.983 1128.91,234.906 1129.48,234.511 1130.05,233.163 1130.61,233.909 1131.18,235.607 1131.75,235.37 1132.32,235.151 1132.89,235.797 1133.46,235.248 1134.02,235.084 1134.59,235.616 1135.16,234.327 1135.73,233.759 1136.3,233.557 1136.87,232.3 1137.43,232.976 1138,236.791 1138.57,237.185 1139.14,235.658 1139.71,235.181 1140.28,233.956 1140.84,236.281 1141.41,235.75 1141.98,234.255 1142.55,231.888 1143.12,231.563 1143.69,230.328 1144.25,231.403 1144.82,232.104 1145.39,230.586 1145.96,232.711 1146.53,227.436 1147.1,225.619 1147.66,225.877 1148.23,226.205 1148.8,226.332 1149.37,225.402 1149.94,224.775 1150.51,222.781 1151.07,224.389 1151.64,223.918 1152.21,223.368 1152.78,221.839 1153.35,222.501 1153.92,221.853 1154.48,223.389 1155.05,225.973 1155.62,226.263 1156.19,227.78 1156.76,226.942 1157.33,226.96 1157.89,226.259 1158.46,228.853 1159.03,231.185 1159.6,231.325 1160.17,231.447 1160.74,228.138 1161.3,228.447 1161.87,229.707 1162.44,228.768 1163.01,229.974 1163.58,228.039 1164.15,227.153 1164.71,228.679 1165.28,227.798 1165.85,227.904 1166.42,229.166 1166.99,228.267 1167.56,229.54 1168.12,228.78 1168.69,229.179 1169.26,229.449 1169.83,228.484 1170.4,226.578 1170.97,228.983 1171.53,228.059 1172.1,229.31 1172.67,227.414 1173.24,226.516 1173.81,225.616 1174.38,225.054 1174.94,225.642 1175.51,224.825 1176.08,225.192 1176.65,225.555 1177.22,226.012 1177.79,225.176 1178.35,225.653 1178.92,227.308 1179.49,228.945 1180.06,227.935 1180.63,228.302 1181.2,228.696 1181.76,228.887 1182.33,229.097 1182.9,229.555 1183.47,232.025 1184.04,234.236 1184.61,234.079 1185.17,232.912 1185.74,231.771 1186.31,230.919 1186.88,229.912 1187.45,229.156 1188.02,228.436 1188.58,229.004 1189.15,231.326 1189.72,232.3 1190.29,231.415 1190.86,232.658 1191.43,234.686 1192,234.361 1192.56,235.165 1193.13,232.66 1193.7,235.535 1194.27,236.293 1194.84,233.73 1195.41,233.642 1195.97,231.586 1196.54,231.801 1197.11,231.965 1197.68,229.9 1198.25,228.954 1198.82,229.281 1199.38,229.488 1199.95,231.733 1200.52,233.778 1201.09,236.911 1201.66,236.762 1202.23,237.451 1202.79,238.251 1203.36,237.647 1203.93,239.131 1204.5,235.49 1205.07,234.104 1205.64,235.079 1206.2,232.751 1206.77,229.571 1207.34,228.601 1207.91,227.733 1208.48,226.943 1209.05,227.317 1209.61,228.767 1210.18,229.908 1210.75,232.065 1211.32,233.034 1211.89,229.891 1212.46,231.09 1213.02,230.984 1213.59,231.111 1214.16,229.994 1214.73,230.136 1215.3,229.896 1215.87,229.066 1216.43,232.415 1217,231.275 1217.57,231.498 1218.14,230.562 1218.71,232.676 1219.28,231.644 1219.84,233.894 1220.41,233.754 1220.98,234.886 1221.55,234.714 1222.12,236.459 1222.69,236.123 1223.25,235.77 1223.82,234.542 1224.39,233.28 1224.96,233.221 1225.53,237.169 1226.1,233.768 1226.66,232.723 1227.23,232.635 1227.8,234.583 1228.37,232.519 1228.94,229.49 1229.51,228.494 1230.07,226.608 1230.64,226.795 1231.21,227.166 1231.78,226.174 1232.35,227.499 1232.92,227.817 1233.48,228.914 1234.05,228.187 1234.62,228.093 1235.19,230.445 1235.76,230.394 1236.33,231.518 1236.89,227.307 1237.46,228.391 1238.03,230.523 1238.6,230.499 1239.17,230.638 1239.74,230.712 1240.3,231.653 1240.87,233.506 1241.44,232.626 1242.01,232.202 1242.58,232.318 1243.15,233.044 1243.71,235.008 1244.28,231.627 1244.85,232.563 1245.42,231.497 1245.99,230.55 1246.56,230.586 1247.12,231.706 1247.69,231.541 1248.26,232.424 1248.83,233.372 1249.4,233.27 1249.97,232.212 1250.53,230.181 1251.1,230.103 1251.67,228.135 1252.24,226.334 1252.81,232.747 1253.38,231.659 1253.94,231.836 1254.51,231.789 1255.08,230.805 1255.65,233.672 1256.22,233.341 1256.79,232.125 1257.35,230.01 1257.92,231.031 1258.49,230.918 1259.06,231.088 1259.63,231.972 1260.2,231.1 1260.76,232.131 1261.33,230.949 1261.9,229.763 1262.47,230.787 1263.04,229.785 1263.61,229.712 1264.18,230.794 1264.74,232.006 1265.31,232.04 1265.88,232.14 1266.45,230.926 1267.02,231.02 1267.59,229.842 1268.15,228.946 1268.72,231.155 1269.29,231.195 1269.86,228.022 1270.43,228.271 1271,228.389 1271.56,229.546 1272.13,228.835 1272.7,228.801 1273.27,228.899 1273.84,229.155 1274.41,230.495 1274.97,229.403 1275.54,229.527 1276.11,229.388 1276.68,230.606 1277.25,229.63 1277.82,230.649 1278.38,230.778 1278.95,229.649 1279.52,232.878 1280.09,232.947 1280.66,231.752 1281.23,230.888 1281.79,229.829 1282.36,228.788 1282.93,226.934 1283.5,227.264 1284.07,227.484 1284.64,227.59 1285.2,228.825 1285.77,229.758 1286.34,232.85 1286.91,232.934 1287.48,231.833 1288.05,230.904 1288.61,228.738 1289.18,228.746 1289.75,228.84 1290.32,230.16 1290.89,231.4 1291.46,230.318 1292.02,230.375 1292.59,231.524 1293.16,233.406 1293.73,234.146 1294.3,232.704 1294.87,231.498 1295.43,233.414 1296,231.246 1296.57,229.224 1297.14,228.326 1297.71,228.651 1298.28,228.686 1298.84,227.743 1299.41,226.015 1299.98,226.47 1300.55,227.749 1301.12,232.096 1301.69,234.26 1302.25,232.999 1302.82,229.857 1303.39,230.121 1303.96,230.32 1304.53,230.552 1305.1,231.545 1305.66,230.549 1306.23,231.608 1306.8,231.536 1307.37,232.447 1307.94,234.575 1308.51,234.148 1309.07,231.839 1309.64,232.769 1310.21,232.983 1310.78,232.784 1311.35,233.841 1311.92,233.737 1312.48,232.495 1313.05,233.486 1313.62,231.352 1314.19,231.462 1314.76,229.225 1315.33,229.255 1315.89,228.409 1316.46,228.705 1317.03,228.816 1317.6,228.909 1318.17,232.106 1318.74,231.924 1319.3,228.761 1319.87,231.046 1320.44,230.886 1321.01,229.888 1321.58,228.102 1322.15,228.149 1322.71,228.353 1323.28,227.491 1323.85,228.783 1324.42,230.91 1324.99,230.771 1325.56,228.828 1326.12,228.721 1326.69,229.734 1327.26,231.228 1327.83,230.303 1328.4,230.255 1328.97,229.292 1329.53,229.468 1330.1,230.469 1330.67,230.349 1331.24,232.246 1331.81,231.97 1332.38,231.736 1332.94,230.573 1333.51,230.739 1334.08,229.864 1334.65,231.853 1335.22,231.827 1335.79,231.636 1336.36,230.407 1336.92,229.352 1337.49,227.4 1338.06,228.769 1338.63,228.931 1339.2,230.163 1339.77,231.129 1340.33,231.057 1340.9,229.871 1341.47,232.059 1342.04,232.929 1342.61,234.047 1343.18,234.957 1343.74,233.638 1344.31,234.658 1344.88,234.479 1345.45,235.407 1346.02,235.033 1346.59,234.586 1347.15,236.281 1347.72,237.88 1348.29,236.385 1348.86,235.976 1349.43,232.434 1350,231.426 1350.56,231.274 1351.13,231.367 1351.7,231.157 1352.27,230.985 1352.84,231.079 1353.41,231.005 1353.97,229.962 1354.54,230.084 1355.11,229.715 1355.68,228.489 1356.25,228.617 1356.82,228.667 1357.38,227.808 1357.95,225.859 1358.52,226.248 1359.09,228.652 1359.66,228.746 1360.23,230.974 1360.79,227.835 1361.36,228.053 1361.93,231.33 1362.5,230.015 1363.07,228.869 1363.64,228.224 1364.2,230.816 1364.77,229.761 1365.34,228.855 1365.91,225.821 1366.48,225.178 1367.05,225.725 1367.61,226.233 1368.18,223.399 1368.75,227.189 1369.32,225.498 1369.89,228.141 1370.46,227.413 1371.02,227.793 1371.59,227.185 1372.16,228.632 1372.73,230.862 1373.3,231.013 1373.87,232.122 1374.43,233.311 1375,234.211 1375.57,233.895 1376.14,235.026 1376.71,235.886 1377.28,235.63 1377.84,235.28 1378.41,233.983 1378.98,234.985 1379.55,241.723 1380.12,241.854 1380.69,243.047 1381.25,242.076 1381.82,241.125 1382.39,238.249 1382.96,237.66 1383.53,234.052 1384.1,232.643 1384.66,229.227 1385.23,226.209 1385.8,225.392 1386.37,226.753 1386.94,225.808 1387.51,227.232 1388.07,226.245 1388.64,225.577 1389.21,228.978 1389.78,230.169 1390.35,231.191 1390.92,230.989 1391.48,230.046 1392.05,229.994 1392.62,231.159 1393.19,232.069 1393.76,230.863 1394.33,229.824 1394.89,228.988 1395.46,229.157 1396.03,230.196 1396.6,228.347 1397.17,228.446 1397.74,229.548 1398.3,231.624 1398.87,232.605 1399.44,232.429 1400.01,235.205 1400.58,234.885 1401.15,234.431 1401.71,233.135 1402.28,233.958 1402.85,232.52 1403.42,233.439 1403.99,228.92 1404.56,227.953 1405.13,226.826 1405.69,225.964 1406.26,226.356 1406.83,227.558 1407.4,226.493 1407.97,225.783 1408.54,225.924 1409.1,226.405 1409.67,226.568 1410.24,224.878 1410.81,224.149 1411.38,224.688 1411.95,226.313 1412.51,225.713 1413.08,223 1413.65,224.787 1414.22,226.42 1414.79,225.847 1415.36,228.339 1415.92,229.749 1416.49,230.77 1417.06,229.875 1417.63,231.151 1418.2,231.313 1418.77,232.221 1419.33,233.256 1419.9,233.076 1420.47,229.902 1421.04,229.82 1421.61,229.993 1422.18,232.3 1422.74,234.29 1423.31,234.223 1423.88,233.093 1424.45,237.121 1425.02,236.619 1425.59,236.167 1426.15,235.781 1426.72,234.527 1427.29,234.392 1427.86,237.229 1428.43,236.873 1429,237.376 1429.56,236.962 1430.13,235.477 1430.7,234.157 1431.27,231.829 1431.84,233.97 1432.41,234.665 1432.97,233.301 1433.54,230.988 1434.11,230.871 1434.68,231.019 1435.25,232.119 1435.82,230.956 1436.38,230.986 1436.95,233.084 1437.52,234.891 1438.09,234.667 1438.66,234.068 1439.23,235.763 1439.79,235.21 1440.36,236.807 1440.93,235.104 1441.5,233.682 1442.07,230.375 1442.64,230.514 1443.2,230.429 1443.77,229.287 1444.34,229.361 1444.91,230.425 1445.48,232.468 1446.05,231.147 1446.61,228.789 1447.18,229.898 1447.75,227.447 1448.32,228.51 1448.89,227.412 1449.46,227.495 1450.02,227.377 1450.59,228.359 1451.16,227.557 1451.73,227.765 1452.3,225.962 1452.87,225.335 1453.43,225.54 1454,226.826 1454.57,230.068 1455.14,226.977 1455.71,227.113 1456.28,226.51 1456.84,224.699 1457.41,224.134 1457.98,222.719 1458.55,224.472 1459.12,222.804 1459.69,227.263 1460.25,227.313 1460.82,226.513 1461.39,227.874 1461.96,228.203 1462.53,227.109 1463.1,227.285 1463.66,227.376 1464.23,227.767 1464.8,228.046 1465.37,227.222 1465.94,227.52 1466.51,225.754 1467.07,227.274 1467.64,226.536 1468.21,225.943 1468.78,227.48 1469.35,226.868 1469.92,227.271 1470.48,226.456 1471.05,227.004 1471.62,226.629 1472.19,226.137 1472.76,228.674 1473.33,232.903 1473.89,235.178 1474.46,234.924 1475.03,233.75 1475.6,232.611 1476.17,232.517 1476.74,232.492 1477.31,232.397 1477.87,232.284 1478.44,229.285 1479.01,231.404 1479.58,233.468 1480.15,233.298 1480.72,232.311 1481.28,234.326 1481.85,234.161 1482.42,235.106 1482.99,234.816 1483.56,232.447 1484.13,232.469 1484.69,230.419 1485.26,230.352 1485.83,231.555 1486.4,231.727 1486.97,231.557 1487.54,233.602 1488.1,231.529 1488.67,231.672 1489.24,231.578 1489.81,233.589 1490.38,232.282 1490.95,232.259 1491.51,234.451 1492.08,233.011 1492.65,232.951 1493.22,233.835 1493.79,234.856 1494.36,233.465 1494.92,234.276 1495.49,234.175 1496.06,236.054 1496.63,236.66 1497.2,237.215 1497.77,234.997 1498.33,233.405 1498.9,233.247 1499.47,235.111 1500.04,234.604 1500.61,232.452 1501.18,232.069 1501.74,234.809 1502.31,233.526 1502.88,233.324 1503.45,234.055 1504.02,232.984 1504.59,232.617 1505.15,234.386 1505.72,234.143 1506.29,232.916 1506.86,233.595 1507.43,233.43 1508,234.395 1508.56,234.114 1509.13,235.838 1509.7,235.45 1510.27,233.027 1510.84,234.521 1511.41,234.087 1511.97,235.795 1512.54,232.51 1513.11,232.222 1513.68,233.815 1514.25,233.567 1514.82,236.395 1515.38,234.555 1515.95,234.071 1516.52,232.482 1517.09,232.143 1517.66,232.007 1518.23,231.822 1518.79,232.776 1519.36,233.436 1519.93,232.101 1520.5,230.793 1521.07,229.662 1521.64,229.434 1522.2,228.383 1522.77,228.162 1523.34,227.104 1523.91,226.432 1524.48,225.956 1525.05,227.321 1525.61,225.268 1526.18,225.592 1526.75,225.905 1527.32,226.029 1527.89,226.127 1528.46,225.529 1529.02,226.902 1529.59,225.019 1530.16,221.217 1530.73,220.827 1531.3,220.709 1531.87,223.439 1532.43,220.854 1533,223.559 1533.57,227.286 1534.14,226.646 1534.71,225.97 1535.28,225.227 1535.84,225.493 1536.41,225.842 1536.98,227.306 1537.55,228.56 1538.12,226.523 1538.69,226.618 1539.25,231.247 1539.82,231.415 1540.39,230.388 1540.96,231.681 1541.53,235.596 1542.1,235.225 1542.66,233.829 1543.23,234.393 1543.8,235.258 1544.37,235.053 1544.94,235.875 1545.51,236.48 1546.08,233.816 1546.64,234.522 1547.21,234.135 1547.78,233.684 1548.35,230.453 1548.92,229.496 1549.49,229.449 1550.05,227.344 1550.62,228.394 1551.19,228.659 1551.76,229.085 1552.33,230.377 1552.9,229.351 1553.46,229.353 1554.03,229.645 1554.6,229.913 1555.17,232.102 1555.74,233.006 1556.31,232.93 1556.87,231.706 1557.44,230.789 1558.01,232.879 1558.58,231.812 1559.15,228.739 1559.72,229.729 1560.28,230.629 1560.85,229.501 1561.42,230.53 1561.99,229.535 1562.56,227.672 1563.13,226.712 1563.69,227.041 1564.26,228.287 1564.83,227.59 1565.4,227.861 1565.97,228.968 1566.54,229.094 1567.1,229.17 1567.67,229.254 1568.24,228.174 1568.81,229.474 1569.38,231.661 1569.95,230.5 1570.51,231.496 1571.08,231.33 1571.65,232.407 1572.22,232.27 1572.79,233.34 1573.36,235.281 1573.92,234.075 1574.49,231.666 1575.06,231.612 1575.63,233.529 1576.2,231.417 1576.77,231.303 1577.33,233.479 1577.9,233.198 1578.47,233.171 1579.04,233.805 1579.61,233.551 1580.18,232.343 1580.74,232.211 1581.31,231.058 1581.88,231.108 1582.45,232.066 1583.02,233.102 1583.59,232.93 1584.15,230.716 1584.72,231.438 1585.29,231.331 1585.86,231.173 1586.43,231.039 1587,234.32 1587.56,235.121 1588.13,235.86 1588.7,235.438 1589.27,235.909 1589.84,235.579 1590.41,234.292 1590.97,235.038 1591.54,234.385 1592.11,233.963 1592.68,233.863 1593.25,231.664 1593.82,230.468 1594.38,230.556 1594.95,231.755 1595.52,230.714 1596.09,231.536 1596.66,228.339 1597.23,229.343 1597.79,228.436 1598.36,228.547 1598.93,227.497 1599.5,227.808 1600.07,227.997 1600.64,229.192 1601.2,230.383 1601.77,229.387 1602.34,230.552 1602.91,228.624 1603.48,228.765 1604.05,228.748 1604.61,229.801 1605.18,229.975 1605.75,230.953 1606.32,231.845 1606.89,232.631 1607.46,232.553 1608.02,232.345 1608.59,231.261 1609.16,232.255 1609.73,234.1 1610.3,232.773 1610.87,233.414 1611.43,233.342 1612,233.172 1612.57,232.838 1613.14,234.782 1613.71,233.45 1614.28,232.278 1614.84,233.206 1615.41,232.614 1615.98,232.451 1616.55,233.206 1617.12,232.847 1617.69,230.633 1618.26,231.697 1618.82,231.507 1619.39,231.203 1619.96,230.947 1620.53,234.194 1621.1,233.125 1621.67,231.811 1622.23,233.842 1622.8,233.597 1623.37,232.281 1623.94,228.976 1624.51,231.253 1625.08,233.111 1625.64,230.727 1626.21,229.71 1626.78,229.943 1627.35,228.97 1627.92,231.13 1628.49,232.127 1629.05,234.189 1629.62,233.842 1630.19,234.638 1630.76,234.243 1631.33,232.756 1631.9,232.624 1632.46,233.465 1633.03,232.995 1633.6,229.525 1634.17,231.524 1634.74,231.274 1635.31,231.856 1635.87,230.729 1636.44,231.668 1637.01,230.676 1637.58,232.585 1638.15,230.097 1638.72,229.991 1639.28,230.942 1639.85,231.035 1640.42,229.841 1640.99,231 1641.56,229.754 1642.13,229.671 1642.69,227.517 1643.26,225.552 1643.83,224.957 1644.4,225.381 1644.97,225.652 1645.54,225.863 1646.1,224.92 1646.67,223.284 1647.24,223.51 1647.81,223.706 1648.38,223.901 1648.95,223.241 1649.51,223.528 1650.08,225.04 1650.65,222.196 1651.22,222.598 1651.79,222.249 1652.36,220.57 1652.92,220.248 1653.49,219.895 1654.06,220.717 1654.63,222.394 1655.2,225.289 1655.77,224.838 1656.33,226.34 1656.9,228.56 1657.47,228.884 1658.04,226.987 1658.61,227.204 1659.18,228.653 1659.74,229.832 1660.31,229.88 1660.88,229.909 1661.45,230.995 1662.02,227.096 1662.59,226.496 1663.15,226.925 1663.72,228.367 1664.29,228.604 1664.86,230.121 1665.43,229.196 1666,230.265 1666.56,228.479 1667.13,227.585 1667.7,225.904 1668.27,227.356 1668.84,227.673 1669.41,227.97 1669.97,229.374 1670.54,229.792 1671.11,228.968 1671.68,230.238 1672.25,231.556 1672.82,230.691 1673.38,229.783 1673.95,227.076 1674.52,225.66 1675.09,224.254 1675.66,225.89 1676.23,226.415 1676.79,226.845 1677.36,228.162 1677.93,229.488 1678.5,231.17 1679.07,233.217 1679.64,232.417 1680.2,230.372 1680.77,229.557 1681.34,230.758 1681.91,230.805 1682.48,229.728 1683.05,228.716 1683.61,229.99 1684.18,230.264 1684.75,232.419 1685.32,232.606 1685.89,233.709 1686.46,233.534 1687.02,233.013 1687.59,234.084 1688.16,232.776 1688.73,233.968 1689.3,231.946 1689.87,231.939 1690.44,232.167 1691,231.402 1691.57,231.536 1692.14,231.829 1692.71,232.883 1693.28,234.928 1693.85,231.621 1694.41,231.708 1694.98,231.743 1695.55,232.622 1696.12,233.64 1696.69,232.495 1697.26,231.547 1697.82,231.581 1698.39,231.559 1698.96,230.798 1699.53,231.943 1700.1,230.873 1700.67,231.057 1701.23,234.228 1701.8,232.93 1702.37,234.923 1702.94,235.577 1703.51,235.286 1704.08,233.901 1704.64,233.758 1705.21,234.697 1705.78,232.566 1706.35,232.398 1706.92,232.266 1707.49,235.228 1708.05,234.739 1708.62,234.742 1709.19,234.454 1709.76,233.09 1710.33,230.888 1710.9,230.917 1711.46,230.947 1712.03,229.198 1712.6,230.403 1713.17,233.733 1713.74,232.412 1714.31,233.641 1714.87,233.551 1715.44,235.431 1716.01,235.082 1716.58,234.781 1717.15,235.408 1717.72,236.121 1718.28,236.529 1718.85,234.969 1719.42,233.443 1719.99,235.346 1720.56,234.974 1721.13,234.828 1721.69,234.244 1722.26,232.682 1722.83,233.562 1723.4,232.329 1723.97,231.263 1724.54,229.132 1725.1,230.22 1725.67,231.214 1726.24,232.216 1726.81,232.823 1727.38,232.786 1727.95,234.409 1728.51,235.085 1729.08,233.566 1729.65,233.224 1730.22,233.15 1730.79,232.861 1731.36,231.744 1731.92,230.499 1732.49,230.447 1733.06,231.455 1733.63,229.347 1734.2,227.35 1734.77,227.782 1735.33,226.97 1735.9,226.115 1736.47,227.32 1737.04,227.437 1737.61,228.403 1738.18,227.354 1738.74,229.611 1739.31,229.686 1739.88,227.779 1740.45,225.96 1741.02,226.512 1741.59,226.78 1742.15,228.202 1742.72,231.416 1743.29,232.284 1743.86,231.008 1744.43,231.036 1745,230.145 1745.56,230.068 1746.13,230.132 1746.7,230.098 1747.27,232.048 1747.84,229.84 1748.41,228.702 1748.97,227.74 1749.54,228.874 1750.11,230.884 1750.68,231.973 1751.25,231.884 1751.82,231.888 1752.38,232.907 1752.95,233.623 1753.52,233.526 1754.09,233.476 1754.66,234.374 1755.23,233.959 1755.79,233.783 1756.36,230.47 1756.93,228.337 1757.5,228.497 1758.07,227.761 1758.64,228.75 1759.21,228.763 1759.77,228.878 1760.34,228.143 1760.91,226.116 1761.48,229.637 1762.05,228.659 1762.62,228.992 1763.18,229.176 1763.75,231.472 1764.32,229.486 1764.89,229.585 1765.46,229.744 1766.03,231.966 1766.59,231.954 1767.16,232.753 1767.73,231.488 1768.3,233.516 1768.87,233.417 1769.44,233.352 1770,234.242 1770.57,236.242 1771.14,237.938 1771.71,237.088 1772.28,235.666 1772.85,232.212 1773.41,228.809 1773.98,227.889 1774.55,229.063 1775.12,230.097 1775.69,231.14 1776.26,232.364 1776.82,234.099 1777.39,232.795 1777.96,230.598 1778.53,230.496 1779.1,229.291 1779.67,230.439 1780.23,230.294 1780.8,228.227 1781.37,228.276 1781.94,227.37 1782.51,226.693 1783.08,230.053 1783.64,229.211 1784.21,230.334 1784.78,229.181 1785.35,229.043 1785.92,233.278 1786.49,232.839 1787.05,232.714 1787.62,232.555 1788.19,233.319 1788.76,236.362 1789.33,234.752 1789.9,233.257 1790.46,232.079 1791.03,232.26 1791.6,233.331 1792.17,233.047 1792.74,233.144 1793.31,232.985 1793.87,234.827 1794.44,234.606 1795.01,234.214 1795.58,233.973 1796.15,235.672 1796.72,233.848 1797.28,231.58 1797.85,231.51 1798.42,230.318 1798.99,230.183 1799.56,230.103 1800.13,230.255 1800.69,230.172 1801.26,230.989 1801.83,229.96 1802.4,229.847 1802.97,229.825 1803.54,228.753 1804.1,229.833 1804.67,228.845 1805.24,230.15 1805.81,229.054 1806.38,230.092 1806.95,229.101 1807.51,231.288 1808.08,230.155 1808.65,229.887 1809.22,231.156 1809.79,229.09 1810.36,231.173 1810.92,231.036 1811.49,229.979 1812.06,230.653 1812.63,230.65 1813.2,230.768 1813.77,230.673 1814.33,231.435 1814.9,231.474 1815.47,231.371 1816.04,232.219 1816.61,229.871 1817.18,230.016 1817.74,227.818 1818.31,227.817 1818.88,230.048 1819.45,229.95 1820.02,229.095 1820.59,229.168 1821.15,228.968 1821.72,229.028 1822.29,230.089 1822.86,229.932 1823.43,227.66 1824,227.766 1824.56,227.856 1825.13,226.939 1825.7,227.978 1826.27,228.072 1826.84,227.356 1827.41,227.723 1827.97,227.892 1828.54,227.991 1829.11,228.084 1829.68,229.198 1830.25,230.126 1830.82,230.323 1831.39,230.316 1831.95,229.33 1832.52,228.399 1833.09,227.469 1833.66,228.804 1834.23,227.962 1834.8,227.224 1835.36,228.562 1835.93,229.849 1836.5,229.939 1837.07,231.157 1837.64,231.072 1838.21,231.889 1838.77,231.902 1839.34,232.017 1839.91,229.789 1840.48,229.812 1841.05,231.184 1841.62,232.141 1842.18,232.08 1842.75,231.95 1843.32,230.031 1843.89,228.203 1844.46,225.251 1845.03,224.631 1845.59,225.952 1846.16,226.382 1846.73,227.703 1847.3,228.103 1847.87,228.14 1848.44,232.19 1849,233.186 1849.57,232.709 1850.14,229.676 1850.71,230.706 1851.28,231.673 1851.85,231.711 1852.41,230.916 1852.98,232.052 1853.55,230.95 1854.12,232.999 1854.69,231.915 1855.26,234.995 1855.82,234.515 1856.39,232.071 1856.96,231.182 1857.53,230 1858.1,227.263 1858.67,228.452 1859.23,228.519 1859.8,230.775 1860.37,229.906 1860.94,230.771 1861.51,229.793 1862.08,229.878 1862.64,229.138 1863.21,230.337 1863.78,229.45 1864.35,228.592 1864.92,229.709 1865.49,228.65 1866.05,228.744 1866.62,227.008 1867.19,227.464 1867.76,226.786 1868.33,227.224 1868.9,229.614 1869.46,227.756 1870.03,230.081 1870.6,227.959 1871.17,229.304 1871.74,228.49 1872.31,231.074 1872.87,230.993 1873.44,232.695 1874.01,233.391 1874.58,232.983 1875.15,230.756 1875.72,231.827 1876.28,231.864 1876.85,230.828 1877.42,230.682 1877.99,232.7 1878.56,231.754 1879.13,229.782 1879.69,230.058 1880.26,232.36 1880.83,232.213 1881.4,232.111 1881.97,232.158 1882.54,234.143 1883.1,229.749 1883.67,228.617 1884.24,228.633 1884.81,227.89 1885.38,228.126 1885.95,227.318 1886.51,228.718 1887.08,230.227 1887.65,230.429 1888.22,230.57 1888.79,231.456 1889.36,230.334 1889.92,229.422 1890.49,232.56 1891.06,230.424 1891.63,231.515 1892.2,231.463 1892.77,230.396 1893.33,230.444 1893.9,232.793 1894.47,231.594 1895.04,233.371 1895.61,231.964 1896.18,233.952 1896.74,232.542 1897.31,230.255 1897.88,230.074 1898.45,228.215 1899.02,229.513 1899.59,229.632 1900.16,227.819 1900.72,226.964 1901.29,228.505 1901.86,228.651 1902.43,228.835 1903,230.011 1903.57,232.209 1904.13,232.284 1904.7,232.253 1905.27,232.218 1905.84,234.182 1906.41,232.982 1906.98,232.96 1907.54,234.699 1908.11,234.482 1908.68,236.38 1909.25,237.056 1909.82,235.571 1910.39,236.2 1910.95,235.95 1911.52,237.878 1912.09,236.266 1912.66,235.837 1913.23,234.499 1913.8,234.298 1914.36,233.718 1914.93,230.317 1915.5,229.353 1916.07,230.394 1916.64,231.528 1917.21,231.533 1917.77,231.247 1918.34,229.166 1918.91,231.327 1919.48,231.378 1920.05,231.263 1920.62,228.039 1921.18,225.225 1921.75,226.51 1922.32,226.835 1922.89,229.212 1923.46,227.189 1924.03,226.181 1924.59,226.433 1925.16,223.738 1925.73,226.367 1926.3,225.494 1926.87,226.816 1927.44,230.055 1928,228.862 1928.57,229.234 1929.14,228.054 1929.71,227.068 1930.28,228.331 1930.85,230.648 1931.41,229.581 1931.98,230.958 1932.55,232.065 1933.12,230.083 1933.69,229.29 1934.26,230.466 1934.82,230.353 1935.39,229.833 1935.96,228.055 1936.53,229.266 1937.1,231.257 1937.67,232.547 1938.23,234.571 1938.8,234.272 1939.37,233.118 1939.94,233.201 1940.51,235.903 1941.08,234.513 1941.64,232.228 1942.21,232.159 1942.78,232.989 1943.35,231.931 1943.92,233.196 1944.49,231.91 1945.05,230.687 1945.62,231.926 1946.19,232.823 1946.76,231.661 1947.33,231.594 1947.9,230.486 1948.46,230.498 1949.03,229.762 1949.6,228.849 1950.17,230.105 1950.74,231.245 1951.31,233.323 1951.87,232.036 1952.44,231.172 1953.01,229.061 1953.58,225.152 1954.15,227.537 1954.72,226.638 1955.28,224.864 1955.85,226.279 1956.42,225.491 1956.99,225.083 1957.56,226.426 1958.13,228.786 1958.69,229.128 1959.26,231.272 1959.83,231.379 1960.4,229.262 1960.97,228.474 1961.54,230.842 1962.1,230.985 1962.67,231.131 1963.24,232.258 1963.81,230.054 1964.38,230.181 1964.95,232.332 1965.51,232.638 1966.08,233.691 1966.65,234.542 1967.22,233.441 1967.79,231.323 1968.36,231.405 1968.92,231.224 1969.49,231.231 1970.06,232.247 1970.63,233.09 1971.2,232.064 1971.77,232.102 1972.34,233.042 1972.9,233.833 1973.47,235.732 1974.04,236.471 1974.61,237.115 1975.18,236.714 1975.75,233.26 1976.31,233.184 1976.88,233.009 1977.45,235.035 1978.02,234.724 1978.59,234.383 1979.16,234.172 1979.72,233.603 1980.29,237.448 1980.86,236.995 1981.43,236.31 1982,233.882 1982.57,233.415 1983.13,231.964 1983.7,231.734 1984.27,229.56 1984.84,229.397 1985.41,231.463 1985.98,233.369 1986.54,235.199 1987.11,235.946 1987.68,232.588 1988.25,232.471 1988.82,231.127 1989.39,227.773 1989.95,229.136 1990.52,227.128 1991.09,227.356 1991.66,227.539 1992.23,227.79 1992.8,229.186 1993.36,228.136 1993.93,229.082 1994.5,230.305 1995.07,228.137 1995.64,229.351 1996.21,230.434 1996.77,229.237 1997.34,229.202 1997.91,229.346 1998.48,230.299 1999.05,231.399 1999.62,232.628 2000.18,232.349 2000.75,230.086 2001.32,231.072 2001.89,234.034 2002.46,232.9 2003.03,233.744 2003.59,234.416 2004.16,235.075 2004.73,235.931 2005.3,236.392 2005.87,236.984 2006.44,235.307 2007,234.771 2007.57,235.362 2008.14,233.755 2008.71,231.752 2009.28,233.765 2009.85,232.59 2010.41,232.262 2010.98,233.04 2011.55,232.917 2012.12,232.689 2012.69,231.585 2013.26,230.221 2013.82,229.131 2014.39,226.969 2014.96,228.214 2015.53,228.239 2016.1,228.341 2016.67,226.451 2017.23,228.748 2017.8,228.782 2018.37,229.785 2018.94,229.732 2019.51,231.678 2020.08,231.337 2020.64,228.214 2021.21,228.272 2021.78,228.299 2022.35,229.419 2022.92,229.388 2023.49,230.376 2024.05,229.129 2024.62,230.073 2025.19,228.835 2025.76,227.92 2026.33,228.084 2026.9,227.136 2027.46,228.266 2028.03,228.403 2028.6,226.53 2029.17,223.789 2029.74,223.284 2030.31,224.771 2030.87,223.056 2031.44,223.563 2032.01,226.196 2032.58,225.569 2033.15,226.895 2033.72,228.192 2034.28,230.29 2034.85,231.366 2035.42,232.333 2035.99,233.36 2036.56,233.069 2037.13,234.127 2037.69,233.859 2038.26,232.602 2038.83,233.621 2039.4,232.484 2039.97,232.391 2040.54,231.405 2041.11,232.318 2041.67,233.986 2042.24,233.697 2042.81,232.551 2043.38,231.173 2043.95,230.955 2044.52,230.74 2045.08,231.862 2045.65,232.861 2046.22,229.542 2046.79,230.638 2047.36,231.597 2047.93,231.339 2048.49,232.061 2049.06,230.01 2049.63,230.961 2050.2,231.975 2050.77,232.689 2051.34,232.63 2051.9,231.542 2052.47,231.584 2053.04,231.659 2053.61,232.512 2054.18,232.261 2054.75,231.059 2055.31,232.031 2055.88,230.914 2056.45,231.091 2057.02,231.982 2057.59,230.882 2058.16,230.634 2058.72,230.724 2059.29,230.676 2059.86,229.706 2060.43,229.915 2061,232.116 2061.57,232.82 2062.13,234.57 2062.7,231.989 2063.27,232.718 2063.84,232.475 2064.41,233.251 2064.98,232.882 2065.54,229.58 2066.11,230.747 2066.68,230.582 2067.25,230.567 2067.82,229.469 2068.39,229.504 2068.95,229.588 2069.52,227.692 2070.09,226.756 2070.66,225.22 2071.23,226.559 2071.8,225.821 2072.36,227.1 2072.93,227.124 2073.5,228.484 2074.07,228.537 2074.64,229.477 2075.21,228.671 2075.77,225.841 2076.34,226.251 2076.91,227.319 2077.48,229.35 2078.05,229.351 2078.62,228.298 2079.18,225.318 2079.75,225.945 2080.32,227.307 2080.89,228.506 2081.46,230.866 2082.03,231.02 2082.59,231.122 2083.16,228.88 2083.73,231.162 2084.3,232.135 2084.87,233.137 2085.44,232.914 2086,232.835 2086.57,232.846 2087.14,232.793 2087.71,232.67 2088.28,230.464 2088.85,230.534 2089.41,230.334 2089.98,231.523 2090.55,234.617 2091.12,234.275 2091.69,233.124 2092.26,231.123 2092.82,232.137 2093.39,232.874 2093.96,231.67 2094.53,230.435 2095.1,229.206 2095.67,228.154 2096.23,230.26 2096.8,229.471 2097.37,230.592 2097.94,231.838 2098.51,229.589 2099.08,230.726 2099.64,230.786 2100.21,230.621 2100.78,228.587 2101.35,229.793 2101.92,230.856 2102.49,231.882 2103.05,231.822 2103.62,231.742 2104.19,231.497 2104.76,232.56 2105.33,231.261 2105.9,230.442 2106.46,228.517 2107.03,226.819 2107.6,225.283 2108.17,224.786 2108.74,227.248 2109.31,226.497 2109.87,228.818 2110.44,230.029 2111.01,230.319 2111.58,228.418 2112.15,228.657 2112.72,231.989 2113.29,230.929 2113.85,230.937 2114.42,230.895 2114.99,228.854 2115.56,229.002 2116.13,228.172 2116.7,227.481 2117.26,229.025 2117.83,229.06 2118.4,228.503 2118.97,228.566 2119.54,228.802 2120.11,230.023 2120.67,231.126 2121.24,229.156 2121.81,226.125 2122.38,227.71 2122.95,229.048 2123.52,228.183 2124.08,233.838 2124.65,233.722 2125.22,232.666 2125.79,234.479 2126.36,236.258 2126.93,235.828 2127.49,235.574 2128.06,235.116 2128.63,235.955 2129.2,233.349 2129.77,231.045 2130.34,229.954 2130.9,225.926 2131.47,225.372 2132.04,226.948 2132.61,225.086 2133.18,228.541 2133.75,229.781 2134.31,229.796 2134.88,229.818 2135.45,231.834 2136.02,228.701 2136.59,227.989 2137.16,228.233 2137.72,228.474 2138.29,227.851 2138.86,228.076 2139.43,230.543 2140,231.743 2140.57,231.411 2141.13,232.474 2141.7,231.271 2142.27,233.258 2142.84,231.148 2143.41,231.35 2143.98,232.277 2144.54,231.328 2145.11,234.446 2145.68,235.095 2146.25,234.384 2146.82,235.201 2147.39,234.684 2147.95,234.45 2148.52,234.08 2149.09,234.922 2149.66,232.633 2150.23,232.39 2150.8,230.121 2151.36,230.229 2151.93,231.339 2152.5,232.337 2153.07,231.961 2153.64,230.752 2154.21,229.879 2154.77,228.588 2155.34,229.83 2155.91,228.937 2156.48,230.041 2157.05,230.326 2157.62,231.325 2158.18,230.143 2158.75,231.198 2159.32,233.033 2159.89,232.868 \"/>\n<path clip-path=\"url(#clip590)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip590)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip590)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip590)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip590)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip590)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.018\n  with uncertainty of ± 0.0011265906140464504\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01587 ± (0.00394816, 0.00382568) (MC)\n  95% confidence interval: [-4.02391, -4.0085]) (MC)\n  linear error propagation: -4.01592 ± 0.00389547\n  |δ_y| = |0.00288599| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0158682002505195, val_l = 0.008038482278760029, val_u = 0.0073668407435425465)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip620\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip621\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip622\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.35 2211.02,1152.35 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,997.511 2211.02,997.511 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,842.674 2211.02,842.674 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,687.837 2211.02,687.837 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,532.999 2211.02,532.999 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,378.162 2211.02,378.162 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,223.325 2211.02,223.325 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.35 365.751,1152.35 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,997.511 365.751,997.511 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,842.674 365.751,842.674 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,687.837 365.751,687.837 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,532.999 365.751,532.999 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,378.162 365.751,378.162 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,223.325 365.751,223.325 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M298.909 1138.15 Q295.298 1138.15 293.469 1141.71 Q291.664 1145.25 291.664 1152.38 Q291.664 1159.49 293.469 1163.05 Q295.298 1166.6 298.909 1166.6 Q302.543 1166.6 304.349 1163.05 Q306.177 1159.49 306.177 1152.38 Q306.177 1145.25 304.349 1141.71 Q302.543 1138.15 298.909 1138.15 M298.909 1134.44 Q304.719 1134.44 307.775 1139.05 Q310.853 1143.63 310.853 1152.38 Q310.853 1161.11 307.775 1165.72 Q304.719 1170.3 298.909 1170.3 Q293.099 1170.3 290.02 1165.72 Q286.964 1161.11 286.964 1152.38 Q286.964 1143.63 290.02 1139.05 Q293.099 1134.44 298.909 1134.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M259.557 1010.86 L267.196 1010.86 L267.196 984.49 L258.886 986.157 L258.886 981.898 L267.15 980.231 L271.826 980.231 L271.826 1010.86 L279.465 1010.86 L279.465 1014.79 L259.557 1014.79 L259.557 1010.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M298.909 983.31 Q295.298 983.31 293.469 986.874 Q291.664 990.416 291.664 997.546 Q291.664 1004.65 293.469 1008.22 Q295.298 1011.76 298.909 1011.76 Q302.543 1011.76 304.349 1008.22 Q306.177 1004.65 306.177 997.546 Q306.177 990.416 304.349 986.874 Q302.543 983.31 298.909 983.31 M298.909 979.606 Q304.719 979.606 307.775 984.212 Q310.853 988.796 310.853 997.546 Q310.853 1006.27 307.775 1010.88 Q304.719 1015.46 298.909 1015.46 Q293.099 1015.46 290.02 1010.88 Q286.964 1006.27 286.964 997.546 Q286.964 988.796 290.02 984.212 Q293.099 979.606 298.909 979.606 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M262.775 856.019 L279.094 856.019 L279.094 859.954 L257.15 859.954 L257.15 856.019 Q259.812 853.264 264.395 848.634 Q269.002 843.982 270.182 842.639 Q272.428 840.116 273.307 838.38 Q274.21 836.621 274.21 834.931 Q274.21 832.176 272.266 830.44 Q270.344 828.704 267.242 828.704 Q265.043 828.704 262.59 829.468 Q260.159 830.232 257.381 831.783 L257.381 827.06 Q260.205 825.926 262.659 825.347 Q265.113 824.769 267.15 824.769 Q272.52 824.769 275.715 827.454 Q278.909 830.139 278.909 834.63 Q278.909 836.759 278.099 838.681 Q277.312 840.579 275.205 843.171 Q274.627 843.843 271.525 847.06 Q268.423 850.255 262.775 856.019 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M298.909 828.472 Q295.298 828.472 293.469 832.037 Q291.664 835.579 291.664 842.708 Q291.664 849.815 293.469 853.38 Q295.298 856.921 298.909 856.921 Q302.543 856.921 304.349 853.38 Q306.177 849.815 306.177 842.708 Q306.177 835.579 304.349 832.037 Q302.543 828.472 298.909 828.472 M298.909 824.769 Q304.719 824.769 307.775 829.375 Q310.853 833.959 310.853 842.708 Q310.853 851.435 307.775 856.042 Q304.719 860.625 298.909 860.625 Q293.099 860.625 290.02 856.042 Q286.964 851.435 286.964 842.708 Q286.964 833.959 290.02 829.375 Q293.099 824.769 298.909 824.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M272.914 686.482 Q276.27 687.2 278.145 689.468 Q280.043 691.737 280.043 695.07 Q280.043 700.186 276.525 702.987 Q273.006 705.788 266.525 705.788 Q264.349 705.788 262.034 705.348 Q259.742 704.931 257.289 704.075 L257.289 699.561 Q259.233 700.695 261.548 701.274 Q263.863 701.853 266.386 701.853 Q270.784 701.853 273.076 700.117 Q275.39 698.38 275.39 695.07 Q275.39 692.015 273.238 690.302 Q271.108 688.566 267.289 688.566 L263.261 688.566 L263.261 684.723 L267.474 684.723 Q270.923 684.723 272.752 683.357 Q274.58 681.969 274.58 679.376 Q274.58 676.714 272.682 675.302 Q270.807 673.867 267.289 673.867 Q265.367 673.867 263.168 674.283 Q260.969 674.7 258.33 675.58 L258.33 671.413 Q260.992 670.672 263.307 670.302 Q265.645 669.932 267.705 669.932 Q273.029 669.932 276.131 672.362 Q279.233 674.769 279.233 678.89 Q279.233 681.76 277.59 683.751 Q275.946 685.719 272.914 686.482 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M298.909 673.635 Q295.298 673.635 293.469 677.2 Q291.664 680.742 291.664 687.871 Q291.664 694.978 293.469 698.543 Q295.298 702.084 298.909 702.084 Q302.543 702.084 304.349 698.543 Q306.177 694.978 306.177 687.871 Q306.177 680.742 304.349 677.2 Q302.543 673.635 298.909 673.635 M298.909 669.932 Q304.719 669.932 307.775 674.538 Q310.853 679.121 310.853 687.871 Q310.853 696.598 307.775 701.205 Q304.719 705.788 298.909 705.788 Q293.099 705.788 290.02 701.205 Q286.964 696.598 286.964 687.871 Q286.964 679.121 290.02 674.538 Q293.099 669.932 298.909 669.932 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M271.594 519.793 L259.789 538.242 L271.594 538.242 L271.594 519.793 M270.367 515.719 L276.247 515.719 L276.247 538.242 L281.177 538.242 L281.177 542.131 L276.247 542.131 L276.247 550.279 L271.594 550.279 L271.594 542.131 L255.992 542.131 L255.992 537.617 L270.367 515.719 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M298.909 518.798 Q295.298 518.798 293.469 522.363 Q291.664 525.904 291.664 533.034 Q291.664 540.141 293.469 543.705 Q295.298 547.247 298.909 547.247 Q302.543 547.247 304.349 543.705 Q306.177 540.141 306.177 533.034 Q306.177 525.904 304.349 522.363 Q302.543 518.798 298.909 518.798 M298.909 515.094 Q304.719 515.094 307.775 519.701 Q310.853 524.284 310.853 533.034 Q310.853 541.761 307.775 546.367 Q304.719 550.951 298.909 550.951 Q293.099 550.951 290.02 546.367 Q286.964 541.761 286.964 533.034 Q286.964 524.284 290.02 519.701 Q293.099 515.094 298.909 515.094 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M258.793 360.882 L277.15 360.882 L277.15 364.817 L263.076 364.817 L263.076 373.289 Q264.094 372.942 265.113 372.78 Q266.131 372.595 267.15 372.595 Q272.937 372.595 276.316 375.766 Q279.696 378.938 279.696 384.354 Q279.696 389.933 276.224 393.035 Q272.752 396.113 266.432 396.113 Q264.256 396.113 261.988 395.743 Q259.742 395.373 257.335 394.632 L257.335 389.933 Q259.418 391.067 261.641 391.623 Q263.863 392.178 266.34 392.178 Q270.344 392.178 272.682 390.072 Q275.02 387.965 275.02 384.354 Q275.02 380.743 272.682 378.637 Q270.344 376.53 266.34 376.53 Q264.465 376.53 262.59 376.947 Q260.738 377.364 258.793 378.243 L258.793 360.882 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M298.909 363.961 Q295.298 363.961 293.469 367.526 Q291.664 371.067 291.664 378.197 Q291.664 385.303 293.469 388.868 Q295.298 392.41 298.909 392.41 Q302.543 392.41 304.349 388.868 Q306.177 385.303 306.177 378.197 Q306.177 371.067 304.349 367.526 Q302.543 363.961 298.909 363.961 M298.909 360.257 Q304.719 360.257 307.775 364.864 Q310.853 369.447 310.853 378.197 Q310.853 386.924 307.775 391.53 Q304.719 396.113 298.909 396.113 Q293.099 396.113 290.02 391.53 Q286.964 386.924 286.964 378.197 Q286.964 369.447 290.02 364.864 Q293.099 360.257 298.909 360.257 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M269.326 221.462 Q266.178 221.462 264.326 223.614 Q262.497 225.767 262.497 229.517 Q262.497 233.244 264.326 235.42 Q266.178 237.573 269.326 237.573 Q272.474 237.573 274.303 235.42 Q276.154 233.244 276.154 229.517 Q276.154 225.767 274.303 223.614 Q272.474 221.462 269.326 221.462 M278.608 206.809 L278.608 211.068 Q276.849 210.235 275.043 209.795 Q273.261 209.355 271.502 209.355 Q266.872 209.355 264.418 212.48 Q261.988 215.605 261.641 221.924 Q263.006 219.911 265.066 218.846 Q267.127 217.758 269.603 217.758 Q274.812 217.758 277.821 220.929 Q280.853 224.077 280.853 229.517 Q280.853 234.841 277.705 238.059 Q274.557 241.276 269.326 241.276 Q263.33 241.276 260.159 236.693 Q256.988 232.086 256.988 223.36 Q256.988 215.165 260.877 210.304 Q264.766 205.42 271.316 205.42 Q273.076 205.42 274.858 205.767 Q276.664 206.114 278.608 206.809 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M298.909 209.124 Q295.298 209.124 293.469 212.688 Q291.664 216.23 291.664 223.36 Q291.664 230.466 293.469 234.031 Q295.298 237.573 298.909 237.573 Q302.543 237.573 304.349 234.031 Q306.177 230.466 306.177 223.36 Q306.177 216.23 304.349 212.688 Q302.543 209.124 298.909 209.124 M298.909 205.42 Q304.719 205.42 307.775 210.026 Q310.853 214.61 310.853 223.36 Q310.853 232.086 307.775 236.693 Q304.719 241.276 298.909 241.276 Q293.099 241.276 290.02 236.693 Q286.964 232.086 286.964 223.36 Q286.964 214.61 290.02 210.026 Q293.099 205.42 298.909 205.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip622)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1038.26 400.199,933.447 400.786,837.278 401.372,749.171 401.958,668.59 402.545,595.038 403.131,528.054 403.718,467.212 404.304,412.112 404.891,362.383 405.477,317.678 406.063,277.672 406.65,242.06 407.236,286.62 407.823,255.759 408.409,228.641 408.995,323.654 409.582,298.627 410.168,276.86 410.755,258.139 411.341,243.052 411.927,230.755 412.514,219.895 413.1,249.186 413.687,240.103 414.273,296.391 414.86,318.718 415.446,314.236 416.032,311.512 416.619,309.981 417.205,310.357 417.792,311.261 418.378,313.463 418.964,354.635 419.551,358.196 420.137,379.973 420.724,401.852 421.31,408.165 421.896,416.143 422.483,423.917 423.069,432.606 423.656,442.051 424.242,462.585 424.829,482.714 425.415,493.189 426.001,513.519 426.588,533.562 427.174,569.688 427.761,587.359 428.347,598.014 428.933,615.95 429.52,625.93 430.106,636.135 430.693,659.276 431.279,670.345 431.865,686.437 432.452,701.4 433.038,715.792 433.625,740.12 434.211,753.885 434.798,761.936 435.384,775.236 435.97,787.837 436.557,800.274 437.143,812.429 437.73,824.434 438.316,831.94 438.902,847.088 439.489,858.824 440.075,869.361 440.662,883.002 441.248,893.172 441.835,909.621 442.421,918.908 443.007,937.394 443.594,946.209 444.18,959.922 444.767,968.033 445.353,975.698 445.939,985.768 446.526,995.734 447.112,1007.97 447.699,1014.44 448.285,1018.54 448.871,1022.29 449.458,1028.71 450.044,1039.77 450.631,1047.72 451.217,1053.42 451.804,1063.66 452.39,1069.16 452.976,1071.95 453.563,1079.25 454.149,1088.62 454.736,1097.36 455.322,1105.58 455.908,1108.16 456.495,1110.41 457.081,1110.82 457.668,1121.3 458.254,1125.19 458.84,1127.11 459.427,1130.79 460.013,1132.83 460.6,1136.62 461.186,1138.58 461.773,1144.15 462.359,1145.96 462.945,1146.37 463.532,1148.31 464.118,1151.88 464.705,1154.04 465.291,1154.65 465.877,1156.99 466.464,1164.3 467.05,1171.08 467.637,1174.16 468.223,1179 468.809,1185.17 469.396,1185.98 469.982,1190.07 470.569,1195.69 471.155,1197.82 471.742,1198.26 472.328,1200.36 472.914,1206.96 473.501,1210.13 474.087,1209.98 474.674,1211.35 475.26,1214.19 475.846,1215.53 476.433,1216.72 477.019,1218.24 477.606,1218.21 478.192,1219.58 478.778,1222.78 479.365,1227.07 479.951,1229.55 480.538,1229.38 481.124,1228.88 481.711,1228.68 482.297,1229.79 482.883,1231.16 483.47,1230.87 484.056,1234.72 484.643,1238.53 485.229,1239.54 485.815,1239.1 486.402,1242.52 486.988,1241.42 487.575,1239.41 488.161,1238.72 488.748,1241.01 489.334,1243.02 489.92,1243.49 490.507,1242.81 491.093,1242.02 491.68,1242.47 492.266,1241.79 492.852,1239.79 493.439,1238.09 494.025,1237.64 494.612,1238.82 495.198,1238.31 495.784,1239.29 496.371,1238.82 496.957,1241.17 497.544,1240.69 498.13,1244.16 498.717,1244.91 499.303,1243.98 499.889,1243.57 500.476,1243.2 501.062,1240.1 501.649,1242.37 502.235,1244.82 502.821,1245.6 503.408,1244.85 503.994,1244.36 504.581,1245.15 505.167,1244.69 505.753,1246.59 506.34,1244.82 506.926,1242.92 507.513,1242.44 508.099,1243.24 508.686,1241.64 509.272,1242.84 509.858,1242.3 510.445,1241.99 511.031,1241.72 511.618,1245.55 512.204,1244.94 512.79,1247.01 513.377,1249.22 513.963,1249.89 514.55,1249.28 515.136,1249.78 515.722,1250.53 516.309,1250 516.895,1249.24 517.482,1249.83 518.068,1247.7 518.655,1247.16 519.241,1245.21 519.827,1244.89 520.414,1244.28 521,1246.38 521.587,1249.66 522.173,1247.45 522.759,1246.94 523.346,1246.27 523.932,1244.52 524.519,1248.13 525.105,1248.63 525.691,1246.57 526.278,1246.03 526.864,1244.37 527.451,1242.71 528.037,1240.67 528.624,1241.73 529.21,1243.94 529.796,1245.74 530.383,1245.26 530.969,1245.76 531.556,1245.06 532.142,1244.44 532.728,1243.92 533.315,1244.58 533.901,1245.23 534.488,1244.56 535.074,1243.76 535.661,1243.22 536.247,1246.53 536.833,1245.58 537.42,1243.83 538.006,1244.63 538.593,1246.52 539.179,1244.63 539.765,1246.75 540.352,1243.51 540.938,1247.98 541.525,1242.91 542.111,1246.24 542.697,1244.06 543.284,1243.48 543.87,1243.06 544.457,1241.46 545.043,1242.26 545.63,1241.91 546.216,1241.48 546.802,1245.09 547.389,1244.54 547.975,1246.78 548.562,1247.1 549.148,1246.04 549.734,1246.4 550.321,1247.05 550.907,1249 551.494,1246.75 552.08,1246 552.666,1245.12 553.253,1244.38 553.839,1241.19 554.426,1239.36 555.012,1237.59 555.599,1239.67 556.185,1240.43 556.771,1238.36 557.358,1238.14 557.944,1237.75 558.531,1237.51 559.117,1237.1 559.703,1236.75 560.29,1235.24 560.876,1235.22 561.463,1234.94 562.049,1234.67 562.635,1235.54 563.222,1236.75 563.808,1236.43 564.395,1234.83 564.981,1235.87 565.568,1235.48 566.154,1235.29 566.74,1237.65 567.327,1242.42 567.913,1242.71 568.5,1242.16 569.086,1240.24 569.672,1239.64 570.259,1236.69 570.845,1238.74 571.432,1240.95 572.018,1245.23 572.605,1243.11 573.191,1241.21 573.777,1239.12 574.364,1238.62 574.95,1235.89 575.537,1236.86 576.123,1237.84 576.709,1237.2 577.296,1236.57 577.882,1234.91 578.469,1234.39 579.055,1232.81 579.641,1234.92 580.228,1234.61 580.814,1235.26 581.401,1234.86 581.987,1235.75 582.574,1237.79 583.16,1237.04 583.746,1232.94 584.333,1235.36 584.919,1236.43 585.506,1234.64 586.092,1235.54 586.678,1238.83 587.265,1237.08 587.851,1239.06 588.438,1237.17 589.024,1239.4 589.61,1238.88 590.197,1239.49 590.783,1239.01 591.37,1237.62 591.956,1233.23 592.543,1232.64 593.129,1236.07 593.715,1235.53 594.302,1234.91 594.888,1234.35 595.475,1231.65 596.061,1231.33 596.647,1228.23 597.234,1230.41 597.82,1232.86 598.407,1231.17 598.993,1229.53 599.579,1232 600.166,1234.3 600.752,1233.78 601.339,1233.37 601.925,1233.16 602.512,1234.32 603.098,1236.39 603.684,1238.32 604.271,1236.42 604.857,1234.63 605.444,1235.45 606.03,1237.21 606.616,1235.33 607.203,1233.3 607.789,1229.06 608.376,1228.84 608.962,1227.41 609.548,1225.72 610.135,1225.52 610.721,1224.24 611.308,1224.36 611.894,1225.78 612.481,1228.19 613.067,1225.33 613.653,1223.96 614.24,1226.58 614.826,1224.31 615.413,1225.63 615.999,1225.46 616.585,1226.78 617.172,1226.77 617.758,1225.17 618.345,1225.06 618.931,1224.97 619.518,1226.27 620.104,1227.44 620.69,1225.85 621.277,1222.07 621.863,1220.75 622.45,1222.33 623.036,1221.01 623.622,1222.08 624.209,1223.55 624.795,1223.45 625.382,1223.82 625.968,1225.23 626.554,1223.98 627.141,1224 627.727,1226.82 628.314,1230.5 628.9,1230.28 629.487,1229.58 630.073,1226.65 630.659,1228.02 631.246,1228.05 631.832,1228.83 632.419,1231.32 633.005,1233.63 633.591,1233.04 634.178,1232.45 634.764,1229.43 635.351,1229.15 635.937,1226.25 636.523,1226.02 637.11,1227.09 637.696,1226.67 638.283,1227.53 638.869,1226.24 639.456,1226.16 640.042,1225.81 640.628,1225.47 641.215,1225.41 641.801,1222.76 642.388,1225.22 642.974,1224.94 643.56,1226.48 644.147,1227.54 644.733,1231.14 645.32,1230.7 645.906,1231.59 646.492,1227.56 647.079,1227.26 647.665,1230.75 648.252,1233.9 648.838,1233.54 649.425,1232.94 650.011,1234.03 650.597,1233.56 651.184,1233.11 651.77,1231 652.357,1231.7 652.943,1232.56 653.529,1229.6 654.116,1229.15 654.702,1229.14 655.289,1229.88 655.875,1227.16 656.462,1227.87 657.048,1228.9 657.634,1230.72 658.221,1232.62 658.807,1230.86 659.394,1230.43 659.98,1228.69 660.566,1228.4 661.153,1228.03 661.739,1229 662.326,1230.14 662.912,1230.76 663.498,1232.82 664.085,1229.85 664.671,1227.94 665.258,1224.89 665.844,1225.04 666.431,1226.06 667.017,1224.66 667.603,1224.35 668.19,1225.38 668.776,1222.54 669.363,1222.52 669.949,1222.87 670.535,1227.87 671.122,1228.93 671.708,1227.1 672.295,1225.59 672.881,1227.95 673.467,1229.18 674.054,1226.09 674.64,1225.74 675.227,1226.49 675.813,1226.09 676.4,1225.71 676.986,1225.46 677.572,1226.38 678.159,1225.96 678.745,1223.36 679.332,1224.41 679.918,1224.16 680.504,1220.22 681.091,1220.18 681.677,1222.81 682.264,1223.98 682.85,1223.79 683.436,1226.2 684.023,1227.17 684.609,1228.01 685.196,1226.64 685.782,1226.41 686.369,1222.29 686.955,1222.22 687.541,1222.28 688.128,1222.45 688.714,1223.91 689.301,1221.14 689.887,1220.02 690.473,1219.98 691.06,1220.11 691.646,1218.74 692.233,1220.05 692.819,1219.98 693.405,1221.3 693.992,1218.96 694.578,1220.24 695.165,1217.81 695.751,1216.59 696.338,1211.81 696.924,1214.49 697.51,1215.96 698.097,1215.03 698.683,1214.18 699.27,1214.41 699.856,1216.12 700.442,1216.41 701.029,1216.46 701.615,1213.76 702.202,1215.43 702.788,1215.68 703.375,1214.44 703.961,1216.12 704.547,1217.56 705.134,1217.47 705.72,1217.4 706.307,1216.6 706.893,1216.78 707.479,1215.77 708.066,1214.43 708.652,1213.69 709.239,1214.04 709.825,1214.26 710.411,1215.6 710.998,1217.19 711.584,1218.44 712.171,1219.85 712.757,1221.28 713.344,1223.69 713.93,1224.63 714.516,1223.16 715.103,1223.09 715.689,1223 716.276,1222.74 716.862,1222.21 717.448,1222 718.035,1220.56 718.621,1221.59 719.208,1221.52 719.794,1222.64 720.38,1225.05 720.967,1227.01 721.553,1227.86 722.14,1229.88 722.726,1229.53 723.313,1228.91 723.899,1225.93 724.485,1225.25 725.072,1226.18 725.658,1224.61 726.245,1221.86 726.831,1220.44 727.417,1220.62 728.004,1220.67 728.59,1218.16 729.177,1219.44 729.763,1219.3 730.349,1219.28 730.936,1220.62 731.522,1221.85 732.109,1224 732.695,1223.6 733.282,1224.79 733.868,1225.83 734.454,1229.28 735.041,1228.6 735.627,1229.38 736.214,1231.12 736.8,1228.02 737.386,1223.57 737.973,1220.78 738.559,1224.43 739.146,1229.32 739.732,1227.41 740.318,1226.86 740.905,1224.9 741.491,1224.77 742.078,1225.79 742.664,1225.46 743.251,1226.34 743.837,1224.68 744.423,1220.47 745.01,1221.78 745.596,1222.76 746.183,1221.44 746.769,1223.94 747.355,1222.47 747.942,1226.17 748.528,1223.39 749.115,1222.04 749.701,1217.95 750.288,1219.31 750.874,1220.68 751.46,1220.55 752.047,1220.54 752.633,1219.05 753.22,1220.47 753.806,1219.04 754.392,1216.53 754.979,1214.03 755.565,1215.48 756.152,1215.47 756.738,1214.52 757.324,1214.6 757.911,1216.19 758.497,1213.54 759.084,1212.37 759.67,1213.84 760.257,1214.01 760.843,1214.13 761.429,1214.21 762.016,1214.32 762.602,1215.56 763.189,1215.42 763.775,1212.82 764.361,1214.26 764.948,1215.78 765.534,1213.3 766.121,1213.5 766.707,1211.33 767.293,1211.45 767.88,1211.64 768.466,1214.48 769.053,1217.21 769.639,1218.67 770.226,1219.68 770.812,1223.25 771.398,1224.17 771.985,1221.16 772.571,1219.7 773.158,1219.77 773.744,1217 774.33,1218.3 774.917,1217.02 775.503,1218.24 776.09,1219.69 776.676,1215.78 777.262,1218.22 777.849,1216.94 778.435,1215.6 779.022,1216.91 779.608,1219.71 780.195,1218.17 780.781,1219.7 781.367,1219.75 781.954,1219.77 782.54,1219.41 783.127,1215.54 783.713,1219.27 784.299,1221.29 784.886,1218.66 785.472,1221.27 786.059,1221.05 786.645,1224.77 787.232,1224.31 787.818,1222.68 788.404,1223.65 788.991,1225.6 789.577,1226.34 790.164,1224.46 790.75,1224.11 791.336,1222.65 791.923,1223.46 792.509,1222.12 793.096,1219.36 793.682,1217.86 794.268,1218.04 794.855,1217.93 795.441,1219.07 796.028,1216.66 796.614,1216.89 797.201,1215.84 797.787,1215.76 798.373,1213.39 798.96,1214.8 799.546,1214.94 800.133,1212.76 800.719,1213.19 801.305,1210.81 801.892,1212.57 802.478,1211.63 803.065,1209.48 803.651,1208.28 804.237,1210.09 804.824,1211.88 805.41,1210.7 805.997,1209.88 806.583,1209.02 807.17,1209.57 807.756,1211.17 808.342,1210.07 808.929,1210.73 809.515,1213.45 810.102,1215.25 810.688,1215.24 811.274,1215.18 811.861,1216.65 812.447,1218.09 813.034,1221.86 813.62,1221.81 814.206,1222.82 814.793,1223.78 815.379,1218.52 815.966,1218.62 816.552,1218.25 817.139,1220.63 817.725,1222.87 818.311,1222.48 818.898,1220.6 819.484,1220.28 820.071,1221.5 820.657,1221.29 821.243,1218.63 821.83,1220.04 822.416,1218.55 823.003,1218.74 823.589,1217.46 824.175,1216.18 824.762,1216.19 825.348,1218.69 825.935,1216.1 826.521,1217.2 827.108,1215.77 827.694,1215.67 828.28,1211.74 828.867,1209.66 829.453,1208.85 830.04,1209.21 830.626,1209.52 831.212,1212.12 831.799,1209.87 832.385,1209.06 832.972,1212.04 833.558,1211.02 834.145,1215.08 834.731,1215.38 835.317,1215.38 835.904,1219.5 836.49,1214.35 837.077,1213.35 837.663,1208.33 838.249,1211.29 838.836,1211.77 839.422,1214.54 840.009,1213.27 840.595,1213.48 841.181,1212.31 841.768,1215.26 842.354,1212.73 842.941,1216.6 843.527,1217.7 844.114,1218.92 844.7,1220.3 845.286,1220.27 845.873,1218.99 846.459,1217.63 847.046,1217.63 847.632,1217.7 848.218,1217.64 848.805,1218.75 849.391,1217.24 849.978,1218.51 850.564,1217.3 851.15,1215.14 851.737,1219.06 852.323,1217.74 852.91,1217.59 853.496,1217.81 854.083,1216.53 854.669,1216.44 855.255,1215.26 855.842,1216.83 856.428,1213 857.015,1214.43 857.601,1215.97 858.187,1216.09 858.774,1217.3 859.36,1217.19 859.947,1217.26 860.533,1215.62 861.119,1214.76 861.706,1216.28 862.292,1216.1 862.879,1217.74 863.465,1217.62 864.052,1218.83 864.638,1218.66 865.224,1216.43 865.811,1215.13 866.397,1216.19 866.984,1217.61 867.57,1219.97 868.156,1220.91 868.743,1221.97 869.329,1221.79 869.916,1222.73 870.502,1219.88 871.089,1219.56 871.675,1219.46 872.261,1218.23 872.848,1217.02 873.434,1218.16 874.021,1219.2 874.607,1219.07 875.193,1218.93 875.78,1217.73 876.366,1217.46 876.953,1217.42 877.539,1216.19 878.125,1216.01 878.712,1214.87 879.298,1214.77 879.885,1212.36 880.471,1212.55 881.058,1213.95 881.644,1215.16 882.23,1215.19 882.817,1212.63 883.403,1214.09 883.99,1213.06 884.576,1213.38 885.162,1213.59 885.749,1216.41 886.335,1216.47 886.922,1217.47 887.508,1216.21 888.094,1214.65 888.681,1216.05 889.267,1217.29 889.854,1217.39 890.44,1219.91 891.027,1220.93 891.613,1220.56 892.199,1219.14 892.786,1218.95 893.372,1218.57 893.959,1219.86 894.545,1221.94 895.131,1225.18 895.718,1223.39 896.304,1225.34 896.891,1224.78 897.477,1227.1 898.063,1227.85 898.65,1227.35 899.236,1226.7 899.823,1228.68 900.409,1225.57 900.996,1223.91 901.582,1222.19 902.168,1221.9 902.755,1223.05 903.341,1221.42 903.928,1219.88 904.514,1222.14 905.1,1218.01 905.687,1217.8 906.273,1217.61 906.86,1219.86 907.446,1217.11 908.032,1218.64 908.619,1218.5 909.205,1219.47 909.792,1219.55 910.378,1217.05 910.965,1216.01 911.551,1217.19 912.137,1216.98 912.724,1219.18 913.31,1217.63 913.897,1217.64 914.483,1216.11 915.069,1218.81 915.656,1217.31 916.242,1217.52 916.829,1218.91 917.415,1218.68 918.002,1218.46 918.588,1215.57 919.174,1218.27 919.761,1217.99 920.347,1217.78 920.934,1217.92 921.52,1220.41 922.106,1220.31 922.693,1222.7 923.279,1221.34 923.866,1221.13 924.452,1220.65 925.038,1217.48 925.625,1220.78 926.211,1224.34 926.798,1225.23 927.384,1223.54 927.971,1223.11 928.557,1222.7 929.143,1222.42 929.73,1220.98 930.316,1218.11 930.903,1215.57 931.489,1217.91 932.075,1217.64 932.662,1213.81 933.248,1213.67 933.835,1211.3 934.421,1208.96 935.007,1209.46 935.594,1207.22 936.18,1207.87 936.767,1208.23 937.353,1210 937.94,1209.17 938.526,1209.63 939.112,1211.27 939.699,1211.32 940.285,1208.95 940.872,1211.79 941.458,1212.01 942.044,1212.24 942.631,1213.79 943.217,1211.45 943.804,1210.69 944.39,1213.62 944.976,1213.73 945.563,1213.86 946.149,1212.69 946.736,1211.59 947.322,1211.7 947.909,1213.29 948.495,1213.31 949.081,1213.33 949.668,1213.5 950.254,1211.42 950.841,1211.34 951.427,1212.91 952.013,1214.36 952.6,1214.25 953.186,1215.62 953.773,1217.04 954.359,1215.69 954.945,1215.77 955.532,1215.52 956.118,1214.27 956.705,1213.01 957.291,1208.05 957.878,1208.56 958.464,1210.14 959.05,1211.84 959.637,1214.28 960.223,1211.99 960.81,1210.92 961.396,1215.04 961.982,1212.69 962.569,1212.84 963.155,1215.49 963.742,1218.34 964.328,1219.39 964.915,1216.59 965.501,1215.59 966.087,1215.51 966.674,1216.87 967.26,1216.57 967.847,1216.81 968.433,1216.76 969.019,1214.08 969.606,1212.97 970.192,1209.25 970.779,1208.23 971.365,1208.45 971.951,1208.75 972.538,1207.73 973.124,1211.75 973.711,1211.96 974.297,1212.24 974.884,1211.22 975.47,1212.64 976.056,1213.02 976.643,1212.11 977.229,1213.58 977.816,1214.93 978.402,1217.42 978.988,1216.22 979.575,1216.1 980.161,1214.7 980.748,1216.06 981.334,1215.92 981.92,1218.45 982.507,1220.89 983.093,1219.52 983.68,1220.4 984.266,1222.4 984.853,1222.03 985.439,1220.37 986.025,1218.83 986.612,1222.46 987.198,1224.74 987.785,1225.55 988.371,1226.21 988.957,1225.69 989.544,1223.66 990.13,1223.17 990.717,1219.19 991.303,1220.36 991.889,1220.26 992.476,1216.03 993.062,1217.11 993.649,1215.87 994.235,1216.01 994.822,1212.1 995.408,1209.7 995.994,1208.5 996.581,1210.16 997.167,1209.05 997.754,1209.16 998.34,1209.72 998.926,1208.71 999.513,1211.79 1000.1,1213.05 1000.69,1213.2 1001.27,1209.57 1001.86,1209.5 1002.44,1209.49 1003.03,1210.75 1003.62,1213.63 1004.2,1213.88 1004.79,1212.9 1005.38,1211.6 1005.96,1210.3 1006.55,1211.65 1007.14,1211.83 1007.72,1212.16 1008.31,1213.67 1008.9,1213.99 1009.48,1215.6 1010.07,1216.82 1010.65,1218.02 1011.24,1217.77 1011.83,1215.04 1012.41,1213.95 1013,1215.21 1013.59,1214.02 1014.17,1214.22 1014.76,1219.18 1015.35,1218.98 1015.93,1217.66 1016.52,1217.42 1017.11,1217.3 1017.69,1218.46 1018.28,1215.96 1018.86,1216.09 1019.45,1217.31 1020.04,1217.33 1020.62,1218.46 1021.21,1216.79 1021.8,1217.81 1022.38,1216.17 1022.97,1216.24 1023.56,1217.37 1024.14,1218.6 1024.73,1217.09 1025.32,1217.03 1025.9,1216.97 1026.49,1214.43 1027.07,1214.14 1027.66,1215.29 1028.25,1215.59 1028.83,1216.76 1029.42,1218.86 1030.01,1214.85 1030.59,1216.18 1031.18,1215.95 1031.77,1218.55 1032.35,1217.35 1032.94,1218.24 1033.52,1218.35 1034.11,1215.53 1034.7,1213.06 1035.28,1210.48 1035.87,1211.84 1036.46,1211.87 1037.04,1212.13 1037.63,1214.64 1038.22,1214.89 1038.8,1213.54 1039.39,1213.89 1039.98,1215.41 1040.56,1214.15 1041.15,1214.2 1041.73,1214.54 1042.32,1213.34 1042.91,1213.2 1043.49,1213.26 1044.08,1214.78 1044.67,1212.16 1045.25,1211.11 1045.84,1215.02 1046.43,1215.31 1047.01,1215.19 1047.6,1213.87 1048.19,1216.59 1048.77,1216.26 1049.36,1214.91 1049.94,1213.51 1050.53,1211.35 1051.12,1209.24 1051.7,1209.54 1052.29,1207.5 1052.88,1204.15 1053.46,1204.9 1054.05,1205.6 1054.64,1207.35 1055.22,1208.77 1055.81,1207.98 1056.39,1209.64 1056.98,1210 1057.57,1210.34 1058.15,1211.81 1058.74,1210.77 1059.33,1211.86 1059.91,1211.86 1060.5,1211.95 1061.09,1214.47 1061.67,1214.76 1062.26,1213.35 1062.85,1213.15 1063.43,1211.83 1064.02,1213.17 1064.6,1214.7 1065.19,1214.76 1065.78,1217.56 1066.36,1218.56 1066.95,1217.26 1067.54,1214.75 1068.12,1217.1 1068.71,1218.17 1069.3,1219.48 1069.88,1219.23 1070.47,1217.72 1071.06,1213.92 1071.64,1212.89 1072.23,1214.12 1072.81,1213.08 1073.4,1212 1073.99,1209.98 1074.57,1212.58 1075.16,1214.02 1075.75,1214.02 1076.33,1214.12 1076.92,1214.03 1077.51,1213.9 1078.09,1212.74 1078.68,1211.51 1079.26,1211.62 1079.85,1214.38 1080.44,1214.62 1081.02,1213.39 1081.61,1214.33 1082.2,1213.27 1082.78,1213.24 1083.37,1215.83 1083.96,1215.66 1084.54,1215.8 1085.13,1219.38 1085.72,1219.15 1086.3,1218.66 1086.89,1219.68 1087.47,1222.07 1088.06,1220.47 1088.65,1220.36 1089.23,1220.03 1089.82,1219.79 1090.41,1219.35 1090.99,1216.54 1091.58,1217.67 1092.17,1216.12 1092.75,1214.88 1093.34,1216.09 1093.93,1213.54 1094.51,1209.92 1095.1,1210.3 1095.68,1211.87 1096.27,1210.89 1096.86,1208.72 1097.44,1208.9 1098.03,1209.05 1098.62,1208.15 1099.2,1208.7 1099.79,1208.8 1100.38,1208.04 1100.96,1209.5 1101.55,1210.12 1102.14,1210.29 1102.72,1211.77 1103.31,1210.9 1103.89,1206.15 1104.48,1205.51 1105.07,1207.24 1105.65,1207.71 1106.24,1209.11 1106.83,1206.16 1107.41,1206.68 1108,1208.4 1108.59,1211.23 1109.17,1211.6 1109.76,1213.09 1110.34,1211.78 1110.93,1210.91 1111.52,1212.74 1112.1,1210.13 1112.69,1216.55 1113.28,1218.84 1113.86,1218.65 1114.45,1218.37 1115.04,1218.32 1115.62,1219.56 1116.21,1220.45 1116.8,1223.02 1117.38,1221.26 1117.97,1221.98 1118.55,1222.81 1119.14,1224.85 1119.73,1224.26 1120.31,1225.24 1120.9,1223.58 1121.49,1220.61 1122.07,1220.37 1122.66,1218.62 1123.25,1219.71 1123.83,1219.78 1124.42,1220.73 1125.01,1217.66 1125.59,1214.85 1126.18,1214.67 1126.76,1214.5 1127.35,1218.54 1127.94,1218.22 1128.52,1216.73 1129.11,1217.91 1129.7,1216.48 1130.28,1218.86 1130.87,1220.01 1131.46,1218.23 1132.04,1219.36 1132.63,1219.3 1133.21,1217.82 1133.8,1218.96 1134.39,1217.45 1134.97,1218.41 1135.56,1217.97 1136.15,1217.68 1136.73,1218.89 1137.32,1221.27 1137.91,1218.43 1138.49,1219.6 1139.08,1218.13 1139.67,1220.49 1140.25,1221.66 1140.84,1222.86 1141.42,1223.67 1142.01,1223.09 1142.6,1224.21 1143.18,1223.9 1143.77,1223.59 1144.36,1223.15 1144.94,1224.29 1145.53,1223.84 1146.12,1221.94 1146.7,1220.02 1147.29,1221.3 1147.88,1220.91 1148.46,1220.49 1149.05,1220.3 1149.63,1220.09 1150.22,1219.57 1150.81,1216.56 1151.39,1213.81 1151.98,1213.92 1152.57,1215.28 1153.15,1216.62 1153.74,1217.64 1154.33,1218.87 1154.91,1219.82 1155.5,1220.74 1156.09,1220.1 1156.67,1217.29 1157.26,1216.08 1157.84,1217.13 1158.43,1215.58 1159.02,1213.04 1159.6,1213.35 1160.19,1212.27 1160.78,1215.24 1161.36,1211.66 1161.95,1210.61 1162.54,1213.63 1163.12,1213.66 1163.71,1216.12 1164.29,1215.83 1164.88,1215.61 1165.47,1218.11 1166.05,1219.29 1166.64,1218.93 1167.23,1218.71 1167.81,1215.99 1168.4,1213.45 1168.99,1209.51 1169.57,1209.55 1170.16,1208.55 1170.75,1207.4 1171.33,1207.96 1171.92,1205.96 1172.5,1210.25 1173.09,1211.84 1173.68,1210.56 1174.26,1213.32 1174.85,1217.17 1175.44,1218.39 1176.02,1219.5 1176.61,1220.54 1177.2,1220.17 1177.78,1218.48 1178.37,1217.13 1178.96,1214.5 1179.54,1213.28 1180.13,1217.08 1180.71,1215.63 1181.3,1215.75 1181.89,1215.58 1182.47,1216.94 1183.06,1216.79 1183.65,1217.09 1184.23,1218.13 1184.82,1214.06 1185.41,1215.42 1185.99,1215.13 1186.58,1216.26 1187.16,1213.67 1187.75,1214.89 1188.34,1212.1 1188.92,1212.2 1189.51,1210.73 1190.1,1210.84 1190.68,1208.6 1191.27,1208.87 1191.86,1209.18 1192.44,1210.57 1193.03,1212.03 1193.62,1212.04 1194.2,1207.11 1194.79,1211.15 1195.37,1212.36 1195.96,1212.42 1196.55,1209.98 1197.13,1212.42 1197.72,1216.09 1198.31,1217.34 1198.89,1219.7 1199.48,1219.57 1200.07,1219.21 1200.65,1220.51 1201.24,1219 1201.83,1218.68 1202.41,1217.41 1203,1218.34 1203.58,1218.52 1204.17,1215.7 1204.76,1215.77 1205.34,1214.4 1205.93,1219.54 1206.52,1218.29 1207.1,1215.74 1207.69,1215.77 1208.28,1215.6 1208.86,1215.52 1209.45,1214.36 1210.03,1212.06 1210.62,1213.08 1211.21,1213.55 1211.79,1213.37 1212.38,1212.44 1212.97,1209.97 1213.55,1214.02 1214.14,1212.85 1214.73,1214.11 1215.31,1215.26 1215.9,1215.22 1216.49,1213.84 1217.07,1214.02 1217.66,1212.92 1218.24,1211.71 1218.83,1211.77 1219.42,1213.01 1220,1215.47 1220.59,1215.57 1221.18,1218 1221.76,1220.26 1222.35,1212.51 1222.94,1213.8 1223.52,1213.56 1224.11,1213.59 1224.7,1214.77 1225.28,1211.24 1225.87,1211.58 1226.45,1213.01 1227.04,1215.57 1227.63,1214.34 1228.21,1214.47 1228.8,1214.25 1229.39,1213.16 1229.97,1214.2 1230.56,1212.92 1231.15,1214.34 1231.73,1215.79 1232.32,1214.55 1232.91,1215.78 1233.49,1215.89 1234.08,1214.59 1234.66,1213.1 1235.25,1213.03 1235.84,1212.87 1236.42,1214.33 1237.01,1214.21 1237.6,1215.64 1238.18,1216.76 1238.77,1214.1 1239.36,1214.04 1239.94,1217.91 1240.53,1217.67 1241.11,1217.58 1241.7,1216.22 1242.29,1217.12 1242.87,1217.21 1243.46,1217.13 1244.05,1216.86 1244.63,1215.26 1245.22,1216.6 1245.81,1216.48 1246.39,1216.68 1246.98,1215.22 1247.57,1216.42 1248.15,1215.19 1248.74,1215.04 1249.32,1216.42 1249.91,1212.48 1250.5,1212.34 1251.08,1213.76 1251.67,1214.79 1252.26,1216.09 1252.84,1217.38 1253.43,1219.7 1254.02,1219.38 1254.6,1219.2 1255.19,1219.15 1255.78,1217.71 1256.36,1216.61 1256.95,1212.84 1257.53,1212.68 1258.12,1213.98 1258.71,1215.1 1259.29,1217.75 1259.88,1217.78 1260.47,1217.72 1261.05,1216.14 1261.64,1214.64 1262.23,1215.95 1262.81,1215.88 1263.4,1214.48 1263.98,1212.15 1264.57,1211.18 1265.16,1212.87 1265.74,1214.3 1266.33,1211.92 1266.92,1214.52 1267.5,1216.99 1268.09,1218.12 1268.68,1217.78 1269.26,1217.79 1269.85,1218.99 1270.44,1221.17 1271.02,1220.73 1271.61,1219.27 1272.19,1214.01 1272.78,1211.32 1273.37,1212.78 1273.95,1216.59 1274.54,1216.28 1275.13,1216.05 1275.71,1215.78 1276.3,1214.56 1276.89,1215.76 1277.47,1214.47 1278.06,1214.53 1278.65,1213.4 1279.23,1210.74 1279.82,1211.17 1280.4,1213.92 1280.99,1212.75 1281.58,1212.44 1282.16,1212.63 1282.75,1211.28 1283.34,1211.33 1283.92,1212.79 1284.51,1211.53 1285.1,1214.08 1285.68,1213.93 1286.27,1216.65 1286.86,1216.65 1287.44,1217.72 1288.03,1217.42 1288.61,1217.33 1289.2,1217.26 1289.79,1213.38 1290.37,1213.57 1290.96,1217.42 1291.55,1214.67 1292.13,1214.85 1292.72,1216.07 1293.31,1218.28 1293.89,1218.28 1294.48,1218.1 1295.06,1219.21 1295.65,1217.7 1296.24,1215.14 1296.82,1215.31 1297.41,1217.69 1298,1217.86 1298.58,1216.67 1299.17,1214.86 1299.76,1215.98 1300.34,1216.05 1300.93,1217.24 1301.52,1217.06 1302.1,1215.86 1302.69,1216.02 1303.27,1213.7 1303.86,1214 1304.45,1214.26 1305.03,1215.66 1305.62,1215.46 1306.21,1216.53 1306.79,1214.11 1307.38,1214.11 1307.97,1214.32 1308.55,1215.81 1309.14,1217.11 1309.73,1219.53 1310.31,1217.93 1310.9,1217.78 1311.48,1216.31 1312.07,1215.14 1312.66,1215.22 1313.24,1216.66 1313.83,1214 1314.42,1212.9 1315,1211.47 1315.59,1210.27 1316.18,1211.79 1316.76,1210.46 1317.35,1210.59 1317.93,1209.36 1318.52,1209.7 1319.11,1210.15 1319.69,1207.97 1320.28,1205.86 1320.87,1207.53 1321.45,1207.9 1322.04,1212.13 1322.63,1213.33 1323.21,1213.5 1323.8,1213.37 1324.39,1213.61 1324.97,1213.81 1325.56,1213.69 1326.14,1213.77 1326.73,1215.04 1327.32,1214.91 1327.9,1215.38 1328.49,1216.9 1329.08,1216.8 1329.66,1216.78 1330.25,1217.88 1330.84,1220.34 1331.42,1219.98 1332.01,1217.14 1332.6,1217.08 1333.18,1214.4 1333.77,1218.23 1334.35,1218.04 1334.94,1214.08 1335.53,1215.68 1336.11,1217.1 1336.7,1217.94 1337.29,1214.82 1337.87,1216.11 1338.46,1217.24 1339.05,1221 1339.63,1221.9 1340.22,1221.36 1340.8,1220.86 1341.39,1224.43 1341.98,1219.98 1342.56,1222.13 1343.15,1219.02 1343.74,1219.97 1344.32,1219.59 1344.91,1220.4 1345.5,1218.72 1346.08,1216.03 1346.67,1215.84 1347.26,1214.47 1347.84,1212.98 1348.43,1211.81 1349.01,1212.11 1349.6,1210.64 1350.19,1209.48 1350.77,1209.67 1351.36,1209.98 1351.95,1211.47 1352.53,1210.16 1353.12,1201.73 1353.71,1201.3 1354.29,1199.55 1354.88,1200.46 1355.47,1201.36 1356.05,1204.67 1356.64,1205.21 1357.22,1209.49 1357.81,1211.14 1358.4,1215.29 1358.98,1219.01 1359.57,1220.12 1360.16,1218.58 1360.74,1219.83 1361.33,1218.21 1361.92,1219.5 1362.5,1220.42 1363.09,1216.39 1363.68,1214.97 1364.26,1213.73 1364.85,1213.96 1365.43,1215.11 1366.02,1215.19 1366.61,1213.78 1367.19,1212.65 1367.78,1214.1 1368.37,1215.37 1368.95,1216.42 1369.54,1216.25 1370.13,1215.01 1370.71,1217.29 1371.3,1217.23 1371.88,1215.93 1372.47,1213.41 1373.06,1212.19 1373.64,1212.36 1374.23,1208.9 1374.82,1209.19 1375.4,1209.64 1375.99,1211.15 1376.58,1210.08 1377.16,1211.77 1377.75,1210.59 1378.34,1216.07 1378.92,1217.3 1379.51,1218.74 1380.09,1219.89 1380.68,1219.52 1381.27,1218.16 1381.85,1219.54 1382.44,1220.5 1383.03,1220.45 1383.61,1219.98 1384.2,1219.88 1384.79,1222.04 1385.37,1223.07 1385.96,1222.57 1386.55,1220.73 1387.13,1221.57 1387.72,1225 1388.3,1223 1388.89,1221.15 1389.48,1221.95 1390.06,1219.03 1390.65,1217.36 1391.24,1216.13 1391.82,1217.22 1392.41,1215.68 1393,1215.47 1393.58,1214.34 1394.17,1213.03 1394.75,1213.19 1395.34,1217.03 1395.93,1217.15 1396.51,1216.96 1397.1,1214.14 1397.69,1211.66 1398.27,1211.65 1398.86,1212.96 1399.45,1207.94 1400.03,1208.4 1400.62,1208.82 1401.21,1209.16 1401.79,1210.59 1402.38,1210.66 1402.96,1207.07 1403.55,1207.36 1404.14,1206.59 1404.72,1206.94 1405.31,1208.62 1405.9,1210.13 1406.48,1212.9 1407.07,1210.25 1407.66,1209.31 1408.24,1210.89 1408.83,1213.67 1409.42,1213.81 1410,1213.62 1410.59,1212.27 1411.17,1213.66 1411.76,1213.62 1412.35,1211.03 1412.93,1208.75 1413.52,1208.93 1414.11,1209.57 1414.69,1207.4 1415.28,1207.96 1415.87,1205.88 1416.45,1207.83 1417.04,1209.48 1417.63,1213.47 1418.21,1213.3 1418.8,1213.41 1419.38,1214.82 1419.97,1214.76 1420.56,1213.49 1421.14,1210.99 1421.73,1212.57 1422.32,1215.45 1422.9,1214.14 1423.49,1217.16 1424.08,1215.93 1424.66,1217.33 1425.25,1217.31 1425.83,1217.53 1426.42,1216.41 1427.01,1217.44 1427.59,1217.27 1428.18,1219.54 1428.77,1220.42 1429.35,1220.3 1429.94,1218.85 1430.53,1214.98 1431.11,1218.77 1431.7,1218.7 1432.29,1219.52 1432.87,1221.83 1433.46,1222.66 1434.04,1224.54 1434.63,1222.6 1435.22,1224.78 1435.8,1219.53 1436.39,1219.55 1436.98,1220.61 1437.56,1219.05 1438.15,1218.71 1438.74,1220.11 1439.32,1219.98 1439.91,1219.95 1440.5,1219.56 1441.08,1219.28 1441.67,1220.36 1442.25,1220.07 1442.84,1222.31 1443.43,1220.57 1444.01,1221.55 1444.6,1222.38 1445.19,1220.62 1445.77,1221.44 1446.36,1221.04 1446.95,1222.12 1447.53,1221.55 1448.12,1222.1 1448.7,1222.8 1449.29,1219.8 1449.88,1214.66 1450.46,1211.81 1451.05,1212.02 1451.64,1213.36 1452.22,1214.69 1452.81,1214.76 1453.4,1214.74 1453.98,1214.82 1454.57,1214.92 1455.16,1218.56 1455.74,1215.99 1456.33,1213.44 1456.91,1213.58 1457.5,1214.73 1458.09,1212.22 1458.67,1212.33 1459.26,1211.09 1459.85,1211.34 1460.43,1214.15 1461.02,1214.08 1461.61,1216.56 1462.19,1216.64 1462.78,1215.18 1463.37,1214.95 1463.95,1215.13 1464.54,1212.6 1465.12,1215.07 1465.71,1214.88 1466.3,1214.97 1466.88,1212.48 1467.47,1214.02 1468.06,1214.01 1468.64,1211.27 1469.23,1212.95 1469.82,1212.97 1470.4,1211.83 1470.99,1210.5 1471.57,1212.11 1472.16,1211.04 1472.75,1211.08 1473.33,1208.68 1473.92,1207.81 1474.51,1206.98 1475.09,1209.56 1475.68,1211.41 1476.27,1211.54 1476.85,1209.19 1477.44,1209.71 1478.03,1212.26 1478.61,1212.69 1479.2,1209.28 1479.78,1210.76 1480.37,1210.94 1480.96,1209.98 1481.54,1211.22 1482.13,1211.61 1482.72,1209.39 1483.3,1209.6 1483.89,1211.03 1484.48,1210.14 1485.06,1210.27 1485.65,1209.02 1486.24,1209.28 1486.82,1207.07 1487.41,1207.43 1487.99,1210.29 1488.58,1208.4 1489.17,1208.84 1489.75,1206.66 1490.34,1210.58 1490.93,1210.89 1491.51,1208.89 1492.1,1209.12 1492.69,1205.57 1493.27,1207.7 1493.86,1208.2 1494.45,1210.08 1495.03,1210.45 1495.62,1210.58 1496.2,1210.78 1496.79,1209.58 1497.38,1208.72 1497.96,1210.29 1498.55,1211.86 1499.14,1213.25 1499.72,1213.55 1500.31,1214.87 1500.9,1215.19 1501.48,1216.55 1502.07,1217.46 1502.65,1218.14 1503.24,1216.59 1503.83,1219.18 1504.41,1218.91 1505,1218.65 1505.59,1218.62 1506.17,1218.61 1506.76,1219.45 1507.35,1217.89 1507.93,1220.28 1508.52,1225.05 1509.11,1225.75 1509.69,1226.13 1510.28,1223.05 1510.86,1226.37 1511.45,1223.31 1512.04,1218.94 1512.62,1219.8 1513.21,1220.72 1513.8,1221.74 1514.38,1221.55 1514.97,1221.25 1515.56,1219.58 1516.14,1218.12 1516.73,1220.67 1517.32,1220.65 1517.9,1215.08 1518.49,1214.86 1519.07,1216.1 1519.66,1214.53 1520.25,1209.69 1520.83,1210.03 1521.42,1211.64 1522.01,1210.87 1522.59,1209.71 1523.18,1209.85 1523.77,1208.74 1524.35,1207.87 1524.94,1211.01 1525.52,1210.06 1526.11,1210.45 1526.7,1210.92 1527.28,1214.82 1527.87,1216 1528.46,1216.08 1529.04,1218.69 1529.63,1217.48 1530.22,1217.22 1530.8,1216.74 1531.39,1215.2 1531.98,1216.46 1532.56,1216.49 1533.15,1216.17 1533.73,1215.86 1534.32,1213.2 1534.91,1212.05 1535.49,1212.09 1536.08,1213.54 1536.67,1214.64 1537.25,1212.08 1537.84,1213.33 1538.43,1217.07 1539.01,1215.91 1539.6,1214.83 1540.19,1216.21 1540.77,1214.98 1541.36,1216.2 1541.94,1218.51 1542.53,1219.76 1543.12,1219.45 1543.7,1218.02 1544.29,1218.93 1544.88,1218.67 1545.46,1217.38 1546.05,1217.27 1546.64,1217.22 1547.22,1217.15 1547.81,1218.51 1548.4,1216.98 1548.98,1214.32 1549.57,1215.72 1550.15,1214.51 1550.74,1214.69 1551.33,1213.36 1551.91,1213.48 1552.5,1212.13 1553.09,1209.68 1553.67,1211.05 1554.26,1213.93 1554.85,1213.97 1555.43,1211.6 1556.02,1214.12 1556.6,1214.25 1557.19,1211.56 1557.78,1211.84 1558.36,1211.81 1558.95,1210.97 1559.54,1211.21 1560.12,1212.63 1560.71,1212.75 1561.3,1214.13 1561.88,1214.06 1562.47,1212.87 1563.06,1211.56 1563.64,1211.72 1564.23,1214.38 1564.81,1213.5 1565.4,1213.61 1565.99,1213.79 1566.57,1213.94 1567.16,1209.9 1567.75,1208.83 1568.33,1207.81 1568.92,1208.21 1569.51,1207.51 1570.09,1207.79 1570.68,1209.26 1571.27,1208.26 1571.85,1208.96 1572.44,1209.39 1573.02,1209.43 1573.61,1212.06 1574.2,1213.5 1574.78,1213.4 1575.37,1211.93 1575.96,1213.18 1576.54,1212.17 1577.13,1216.07 1577.72,1214.9 1578.3,1216.04 1578.89,1215.96 1579.47,1217.3 1580.06,1216.99 1580.65,1216.83 1581.23,1215.43 1581.82,1214.01 1582.41,1215.24 1582.99,1213.84 1583.58,1216.21 1584.17,1216.09 1584.75,1216.15 1585.34,1214.91 1585.93,1214.72 1586.51,1213.54 1587.1,1212.44 1587.68,1211.44 1588.27,1211.49 1588.86,1211.7 1589.44,1213 1590.03,1211.76 1590.62,1209.46 1591.2,1211.01 1591.79,1210.17 1592.38,1210.19 1592.96,1210.34 1593.55,1210.69 1594.14,1208.24 1594.72,1209.79 1595.31,1211.16 1595.89,1209.98 1596.48,1210.65 1597.07,1210.8 1597.65,1209.83 1598.24,1210.21 1598.83,1212.88 1599.41,1211.58 1600,1211.79 1600.59,1212.14 1601.17,1212.44 1601.76,1208.45 1602.34,1209.68 1602.93,1211.23 1603.52,1208.71 1604.1,1208.94 1604.69,1210.48 1605.28,1214.5 1605.86,1211.75 1606.45,1209.45 1607.04,1212.32 1607.62,1213.57 1608.21,1213.31 1608.8,1214.52 1609.38,1211.91 1609.97,1210.68 1610.55,1208.11 1611.14,1208.45 1611.73,1207.4 1612.31,1207.79 1612.9,1209.53 1613.49,1209.64 1614.07,1208.56 1614.66,1209.07 1615.25,1213.28 1615.83,1210.85 1616.42,1211.14 1617.01,1210.41 1617.59,1211.77 1618.18,1210.61 1618.76,1211.81 1619.35,1209.47 1619.94,1212.47 1620.52,1212.62 1621.11,1211.47 1621.7,1211.35 1622.28,1212.81 1622.87,1211.41 1623.46,1212.93 1624.04,1213.05 1624.63,1215.71 1625.22,1218.19 1625.8,1219.04 1626.39,1218.66 1626.97,1218.46 1627.56,1218.32 1628.15,1219.59 1628.73,1221.72 1629.32,1221.62 1629.91,1221.55 1630.49,1221.48 1631.08,1222.45 1631.67,1222.28 1632.25,1220.61 1632.84,1224.21 1633.42,1223.92 1634.01,1224.54 1634.6,1226.79 1635.18,1227.42 1635.77,1228.1 1636.36,1227.36 1636.94,1225.56 1637.53,1222.23 1638.12,1222.91 1638.7,1221.22 1639.29,1218.61 1639.88,1218.26 1640.46,1220.63 1641.05,1220.45 1641.63,1218.76 1642.22,1217.37 1642.81,1217.33 1643.39,1217.31 1643.98,1216 1644.57,1220.77 1645.15,1221.59 1645.74,1221.17 1646.33,1219.49 1646.91,1219.26 1647.5,1217.45 1648.09,1218.6 1648.67,1217.32 1649.26,1219.52 1649.84,1220.67 1650.43,1222.8 1651.02,1221.14 1651.6,1220.83 1652.19,1220.54 1652.78,1218.89 1653.36,1218.41 1653.95,1219.44 1654.54,1217.92 1655.12,1216.32 1655.71,1217.36 1656.29,1218.47 1656.88,1221.81 1657.47,1223.62 1658.05,1225.46 1658.64,1223.62 1659.23,1223.09 1659.81,1222.67 1660.4,1221.15 1660.99,1219.59 1661.57,1217.56 1662.16,1215.03 1662.75,1215.95 1663.33,1218.42 1663.92,1219.43 1664.5,1217.99 1665.09,1217.93 1665.68,1219.24 1666.26,1220.51 1666.85,1218.99 1667.44,1218.68 1668.02,1216.04 1668.61,1215.77 1669.2,1214.37 1669.78,1214.51 1670.37,1215.08 1670.96,1213.71 1671.54,1215.24 1672.13,1213.72 1672.71,1216.13 1673.3,1216.11 1673.89,1215.8 1674.47,1216.7 1675.06,1216.52 1675.65,1216.14 1676.23,1214.82 1676.82,1212.25 1677.41,1216.21 1677.99,1216.09 1678.58,1216.02 1679.17,1214.91 1679.75,1213.61 1680.34,1214.95 1680.92,1216.07 1681.51,1216.01 1682.1,1216.02 1682.68,1216.93 1683.27,1215.52 1683.86,1216.81 1684.44,1216.58 1685.03,1212.67 1685.62,1214.18 1686.2,1211.68 1686.79,1210.77 1687.37,1211.01 1687.96,1212.6 1688.55,1212.7 1689.13,1211.47 1689.72,1214 1690.31,1214.16 1690.89,1214.28 1691.48,1210.6 1692.07,1211.09 1692.65,1210.99 1693.24,1211.25 1693.83,1212.84 1694.41,1215.48 1695,1215.44 1695.58,1215.4 1696.17,1217.54 1696.76,1216.1 1697.34,1212.02 1697.93,1213.57 1698.52,1212.01 1699.1,1212.06 1699.69,1209.67 1700.28,1209.99 1700.86,1210.25 1701.45,1209.38 1702.04,1208.39 1702.62,1207.76 1703.21,1209.54 1703.79,1211.31 1704.38,1208.9 1704.97,1209.25 1705.55,1209.33 1706.14,1209.95 1706.73,1211.78 1707.31,1210.65 1707.9,1212.1 1708.49,1213.37 1709.07,1215.97 1709.66,1214.67 1710.24,1213.47 1710.83,1212.22 1711.42,1211.44 1712,1211.44 1712.59,1209.39 1713.18,1208.47 1713.76,1210.23 1714.35,1210.58 1714.94,1210.61 1715.52,1210.91 1716.11,1212.23 1716.7,1213.73 1717.28,1213.8 1717.87,1212.57 1718.45,1215.14 1719.04,1217.61 1719.63,1217.17 1720.21,1218.23 1720.8,1219.36 1721.39,1218 1721.97,1217.94 1722.56,1216.84 1723.15,1218.17 1723.73,1215.49 1724.32,1215.43 1724.91,1217.78 1725.49,1220.08 1726.08,1219.52 1726.66,1219.29 1727.25,1217.65 1727.84,1213.77 1728.42,1212.68 1729.01,1214.21 1729.6,1214.17 1730.18,1215.25 1730.77,1215.36 1731.36,1215.3 1731.94,1215.35 1732.53,1212.98 1733.11,1215.65 1733.7,1217.07 1734.29,1218.29 1734.87,1216.98 1735.46,1214.56 1736.05,1213.22 1736.63,1213.29 1737.22,1213.26 1737.81,1211.98 1738.39,1211.05 1738.98,1211.1 1739.57,1211.09 1740.15,1209.92 1740.74,1210.34 1741.32,1210.48 1741.91,1214.47 1742.5,1217.09 1743.08,1216.95 1743.67,1217.91 1744.26,1216.77 1744.84,1216.8 1745.43,1216.7 1746.02,1217.65 1746.6,1220.19 1747.19,1215.99 1747.78,1217.21 1748.36,1216.85 1748.95,1216.67 1749.53,1213.89 1750.12,1216.31 1750.71,1216.21 1751.29,1216.05 1751.88,1213.34 1752.47,1213.33 1753.05,1212.32 1753.64,1213.82 1754.23,1211.31 1754.81,1211.36 1755.4,1211.38 1755.99,1210.22 1756.57,1207.67 1757.16,1205.44 1757.74,1206.32 1758.33,1207.92 1758.92,1212.05 1759.5,1216.19 1760.09,1217.36 1760.68,1215.99 1761.26,1214.76 1761.85,1213.5 1762.44,1211.98 1763.02,1209.81 1763.61,1211.33 1764.19,1213.98 1764.78,1214.1 1765.37,1215.59 1765.95,1214.21 1766.54,1214.4 1767.13,1216.94 1767.71,1216.94 1768.3,1218.1 1768.89,1219.01 1769.47,1215 1770.06,1216.04 1770.65,1214.7 1771.23,1216.12 1771.82,1216.33 1772.4,1211.17 1772.99,1211.65 1773.58,1211.75 1774.16,1211.9 1774.75,1210.92 1775.34,1207.11 1775.92,1208.95 1776.51,1210.7 1777.1,1212.08 1777.68,1211.83 1778.27,1210.47 1778.86,1210.76 1779.44,1210.58 1780.03,1210.72 1780.61,1208.4 1781.2,1208.57 1781.79,1208.96 1782.37,1209.17 1782.96,1207 1783.55,1209.13 1784.13,1211.84 1784.72,1211.9 1785.31,1213.35 1785.89,1213.52 1786.48,1213.63 1787.06,1213.46 1787.65,1213.57 1788.24,1212.58 1788.82,1213.84 1789.41,1213.99 1790,1214.04 1790.58,1215.37 1791.17,1214.1 1791.76,1215.33 1792.34,1213.78 1792.93,1215.13 1793.52,1213.9 1794.1,1215.13 1794.69,1212.49 1795.27,1213.86 1795.86,1214.2 1796.45,1212.66 1797.03,1215.19 1797.62,1212.67 1798.21,1212.83 1798.79,1214.12 1799.38,1213.31 1799.97,1213.31 1800.55,1213.17 1801.14,1213.28 1801.73,1212.35 1802.31,1212.28 1802.9,1212.39 1803.48,1211.33 1804.07,1214.18 1804.66,1214.02 1805.24,1216.73 1805.83,1216.8 1806.42,1214.14 1807,1214.27 1807.59,1215.34 1808.18,1215.29 1808.76,1215.57 1809.35,1215.54 1809.94,1214.28 1810.52,1214.48 1811.11,1217.28 1811.69,1217.23 1812.28,1217.19 1812.87,1218.38 1813.45,1217.2 1814.04,1217.15 1814.63,1218.09 1815.21,1217.72 1815.8,1217.58 1816.39,1217.53 1816.97,1217.48 1817.56,1216.18 1818.14,1215.08 1818.73,1214.85 1819.32,1214.87 1819.9,1216.09 1820.49,1217.26 1821.08,1218.45 1821.66,1216.9 1822.25,1217.97 1822.84,1218.94 1823.42,1217.39 1824.01,1215.86 1824.6,1215.77 1825.18,1214.3 1825.77,1214.39 1826.35,1213.38 1826.94,1213.34 1827.53,1213.17 1828.11,1215.87 1828.7,1215.86 1829.29,1214.2 1829.87,1213.01 1830.46,1213.05 1831.05,1213.18 1831.63,1215.5 1832.22,1217.76 1832.81,1221.42 1833.39,1222.31 1833.98,1220.85 1834.56,1220.43 1835.15,1218.92 1835.74,1218.51 1836.32,1218.52 1836.91,1213.62 1837.5,1212.36 1838.08,1212.89 1838.67,1216.56 1839.26,1215.32 1839.84,1214.14 1840.43,1214.07 1841.01,1215.02 1841.6,1213.62 1842.19,1214.94 1842.77,1212.41 1843.36,1213.69 1843.95,1209.87 1844.53,1210.36 1845.12,1213.28 1845.71,1214.33 1846.29,1215.77 1846.88,1219.14 1847.47,1217.77 1848.05,1217.74 1848.64,1215.03 1849.22,1216.09 1849.81,1215.05 1850.4,1216.25 1850.98,1216.16 1851.57,1217.09 1852.16,1215.66 1852.74,1216.76 1853.33,1217.84 1853.92,1216.52 1854.5,1217.84 1855.09,1217.77 1855.68,1219.94 1856.26,1219.48 1856.85,1220.38 1857.43,1219.94 1858.02,1217.1 1858.61,1219.4 1859.19,1216.62 1859.78,1219.24 1860.37,1217.66 1860.95,1218.69 1861.54,1215.57 1862.13,1215.66 1862.71,1213.57 1863.3,1212.66 1863.88,1213.1 1864.47,1215.78 1865.06,1214.46 1865.64,1214.39 1866.23,1215.63 1866.82,1215.81 1867.4,1213.33 1867.99,1214.45 1868.58,1216.84 1869.16,1216.52 1869.75,1213.72 1870.34,1213.86 1870.92,1213.94 1871.51,1213.85 1872.09,1211.38 1872.68,1216.69 1873.27,1218.1 1873.85,1218.13 1874.44,1219.09 1875.03,1218.87 1875.61,1219.92 1876.2,1218.29 1876.79,1216.49 1877.37,1216.25 1877.96,1216.08 1878.55,1215 1879.13,1216.36 1879.72,1217.48 1880.3,1213.66 1880.89,1216.24 1881.48,1214.91 1882.06,1214.95 1882.65,1216.24 1883.24,1216.19 1883.82,1213.32 1884.41,1214.74 1885,1212.53 1885.58,1214.2 1886.17,1211.72 1886.76,1213.38 1887.34,1216.14 1887.93,1216.37 1888.51,1218.67 1889.1,1217.14 1889.69,1217.02 1890.27,1219.26 1890.86,1220.38 1891.45,1218.58 1892.03,1218.46 1892.62,1218.28 1893.21,1216.89 1893.79,1214.21 1894.38,1214.08 1894.96,1214.08 1895.55,1214.08 1896.14,1211.63 1896.72,1213.02 1897.31,1213 1897.9,1210.8 1898.48,1210.97 1899.07,1208.54 1899.66,1207.57 1900.24,1209.25 1900.83,1208.36 1901.42,1208.53 1902,1206.03 1902.59,1207.84 1903.17,1208.24 1903.76,1209.76 1904.35,1209.92 1904.93,1210.55 1905.52,1214.65 1906.11,1215.84 1906.69,1214.6 1907.28,1213.21 1907.87,1213.19 1908.45,1213.52 1909.04,1216.06 1909.63,1213.44 1910.21,1213.37 1910.8,1213.49 1911.38,1217.43 1911.97,1220.93 1912.56,1219.49 1913.14,1219.2 1913.73,1216.38 1914.32,1218.89 1914.9,1220.21 1915.49,1220.01 1916.08,1223.4 1916.66,1220.36 1917.25,1221.53 1917.83,1220.04 1918.42,1216.17 1919.01,1217.64 1919.59,1217.23 1920.18,1218.71 1920.77,1219.98 1921.35,1218.52 1921.94,1215.74 1922.53,1217.05 1923.11,1215.39 1923.7,1214.03 1924.29,1216.42 1924.87,1217.41 1925.46,1216 1926.04,1216.15 1926.63,1216.79 1927.22,1218.99 1927.8,1217.57 1928.39,1215.17 1928.98,1213.57 1929.56,1211.04 1930.15,1211.31 1930.74,1212.64 1931.32,1212.48 1931.91,1209.1 1932.5,1210.68 1933.08,1213.4 1933.67,1213.45 1934.25,1212.39 1934.84,1213.64 1935.43,1212.06 1936.01,1213.58 1936.6,1215.05 1937.19,1213.53 1937.77,1212.4 1938.36,1213.77 1938.95,1213.83 1939.53,1215.17 1940.12,1215.16 1940.71,1216.07 1941.29,1217.21 1941.88,1215.71 1942.46,1214.33 1943.05,1211.76 1943.64,1213.28 1944.22,1214.31 1944.81,1216.89 1945.4,1221.7 1945.98,1218.92 1946.57,1220.1 1947.16,1222.36 1947.74,1220.77 1948.33,1221.84 1948.91,1222.46 1949.5,1220.96 1950.09,1218.18 1950.67,1217.81 1951.26,1215.21 1951.85,1215.07 1952.43,1217.65 1953.02,1218.65 1953.61,1215.8 1954.19,1215.62 1954.78,1215.43 1955.37,1214.04 1955.95,1216.71 1956.54,1216.57 1957.12,1213.94 1957.71,1213.53 1958.3,1212.18 1958.88,1211.06 1959.47,1212.33 1960.06,1214.86 1960.64,1214.75 1961.23,1214.95 1961.82,1214.93 1962.4,1213.67 1962.99,1212.6 1963.58,1213.8 1964.16,1213.72 1964.75,1212.53 1965.33,1211.5 1965.92,1209.09 1966.51,1208.06 1967.09,1207.12 1967.68,1207.46 1968.27,1211.57 1968.85,1211.6 1969.44,1211.76 1970.03,1209.21 1970.61,1209.49 1971.2,1209.81 1971.78,1209.98 1972.37,1210.6 1972.96,1205.79 1973.54,1206.19 1974.13,1206.88 1974.72,1209.74 1975.3,1210.23 1975.89,1211.95 1976.48,1212.2 1977.06,1214.85 1977.65,1215.07 1978.24,1212.57 1978.82,1210.21 1979.41,1207.9 1979.99,1206.87 1980.58,1210.87 1981.17,1210.97 1981.75,1212.58 1982.34,1216.68 1982.93,1215.08 1983.51,1217.57 1984.1,1217.38 1984.69,1217.24 1985.27,1217.01 1985.86,1215.37 1986.45,1216.69 1987.03,1215.59 1987.62,1214.13 1988.2,1216.8 1988.79,1215.37 1989.38,1214.08 1989.96,1215.55 1990.55,1215.63 1991.14,1215.49 1991.72,1214.35 1992.31,1213.01 1992.9,1211.49 1993.48,1211.78 1994.07,1214.52 1994.65,1213.33 1995.24,1209.68 1995.83,1210.99 1996.41,1209.9 1997,1209 1997.59,1208.1 1998.17,1206.94 1998.76,1206.25 1999.35,1205.38 1999.93,1207.29 2000.52,1207.84 2001.11,1207.02 2001.69,1208.88 2002.28,1211.27 2002.86,1208.77 2003.45,1210.14 2004.04,1210.5 2004.62,1209.51 2005.21,1209.6 2005.8,1209.83 2006.38,1211.14 2006.97,1212.79 2007.56,1214.14 2008.14,1216.82 2008.73,1215.39 2009.32,1215.42 2009.9,1215.35 2010.49,1217.72 2011.07,1215.01 2011.66,1215.02 2012.25,1213.83 2012.83,1213.92 2013.42,1211.56 2014.01,1211.95 2014.59,1215.76 2015.18,1215.75 2015.77,1215.78 2016.35,1214.46 2016.94,1214.53 2017.53,1213.35 2018.11,1214.89 2018.7,1213.77 2019.28,1215.3 2019.87,1216.47 2020.46,1216.33 2021.04,1217.55 2021.63,1216.26 2022.22,1216.15 2022.8,1218.49 2023.39,1221.94 2023.98,1222.72 2024.56,1221.08 2025.15,1223.32 2025.73,1222.88 2026.32,1219.84 2026.91,1220.72 2027.49,1219.22 2028.08,1217.73 2028.67,1215.22 2029.25,1213.91 2029.84,1212.7 2030.43,1211.4 2031.01,1211.69 2031.6,1210.34 2032.19,1210.58 2032.77,1212.05 2033.36,1210.75 2033.94,1212.08 2034.53,1212.15 2035.12,1213.32 2035.7,1212.18 2036.29,1210.1 2036.88,1210.37 2037.46,1211.71 2038.05,1213.36 2038.64,1213.61 2039.22,1213.87 2039.81,1212.49 2040.4,1211.24 2040.98,1215.26 2041.57,1213.94 2042.15,1212.77 2042.74,1213.06 2043.33,1212.16 2043.91,1214.64 2044.5,1213.49 2045.09,1212.24 2045.67,1211.34 2046.26,1211.36 2046.85,1212.65 2047.43,1212.58 2048.02,1212.46 2048.6,1211.39 2049.19,1211.66 2049.78,1213.1 2050.36,1211.89 2050.95,1213.23 2051.54,1213.01 2052.12,1211.91 2052.71,1213.23 2053.3,1213.53 2053.88,1213.42 2054.47,1213.48 2055.06,1214.67 2055.64,1214.44 2056.23,1211.75 2056.81,1210.85 2057.4,1208.65 2057.99,1211.73 2058.57,1210.8 2059.16,1211.05 2059.75,1210.06 2060.33,1210.45 2060.92,1214.45 2061.51,1213.05 2062.09,1213.25 2062.68,1213.27 2063.27,1214.62 2063.85,1214.6 2064.44,1214.53 2065.02,1216.88 2065.61,1218.09 2066.2,1220.06 2066.78,1218.56 2067.37,1219.56 2067.96,1218.12 2068.54,1218.17 2069.13,1216.6 2069.72,1216.58 2070.3,1215.48 2070.89,1216.5 2071.48,1220.01 2072.06,1219.63 2072.65,1218.43 2073.23,1216.02 2073.82,1216.06 2074.41,1217.38 2074.99,1221.08 2075.58,1220.44 2076.17,1218.89 2076.75,1217.5 2077.34,1214.66 2077.93,1214.47 2078.51,1214.34 2079.1,1217.08 2079.68,1214.32 2080.27,1213.12 2080.86,1211.85 2081.44,1212.07 2082.03,1212.11 2082.62,1212.05 2083.2,1212.06 2083.79,1212.16 2084.38,1214.82 2084.96,1214.74 2085.55,1214.99 2086.14,1213.54 2086.72,1209.72 2087.31,1210.04 2087.89,1211.37 2088.48,1213.77 2089.07,1212.52 2089.65,1211.58 2090.24,1213 2090.83,1214.5 2091.41,1216.01 2092,1217.33 2092.59,1214.81 2093.17,1215.79 2093.76,1214.45 2094.35,1212.92 2094.93,1215.65 2095.52,1214.29 2096.1,1214.21 2096.69,1214.41 2097.28,1216.91 2097.86,1215.48 2098.45,1214.2 2099.04,1212.93 2099.62,1212.98 2100.21,1213.05 2100.8,1213.33 2101.38,1212 2101.97,1213.55 2102.55,1214.54 2103.14,1216.91 2103.73,1219.04 2104.31,1221.01 2104.9,1221.74 2105.49,1218.88 2106.07,1219.88 2106.66,1217.14 2107.25,1215.7 2107.83,1215.36 2108.42,1217.7 2109.01,1217.46 2109.59,1213.43 2110.18,1214.7 2110.76,1214.68 2111.35,1214.73 2111.94,1217.23 2112.52,1217.09 2113.11,1218.14 2113.7,1219.05 2114.28,1217.24 2114.87,1217.24 2115.46,1217.96 2116.04,1217.93 2116.63,1217.7 2117.22,1216.25 2117.8,1214.91 2118.39,1217.31 2118.97,1221.06 2119.56,1219.23 2120.15,1217.66 2120.73,1218.76 2121.32,1211.89 2121.91,1211.95 2122.49,1213.18 2123.08,1210.9 2123.67,1208.62 2124.25,1209.01 2124.84,1209.2 2125.42,1209.65 2126.01,1208.51 2126.6,1211.59 2127.18,1214.36 2127.77,1215.69 2128.36,1220.63 2128.94,1221.42 2129.53,1219.63 2130.12,1221.99 2130.7,1217.9 2131.29,1216.44 2131.88,1216.44 2132.46,1216.44 2133.05,1213.98 2133.63,1217.8 2134.22,1218.72 2134.81,1218.48 2135.39,1218.25 2135.98,1219.06 2136.57,1218.86 2137.15,1215.9 2137.74,1214.43 2138.33,1214.81 2138.91,1213.49 2139.5,1214.92 2140.09,1212.47 2140.67,1215 2141.26,1214.74 2141.84,1213.59 2142.43,1214.71 2143.02,1210.87 2143.6,1209.98 2144.19,1210.75 2144.78,1209.65 2145.36,1210.18 2145.95,1210.37 2146.54,1210.74 2147.12,1209.62 2147.71,1212.33 2148.3,1212.59 2148.88,1215.33 2149.47,1215.21 2150.05,1213.86 2150.64,1212.62 2151.23,1213.04 2151.81,1214.5 2152.4,1215.57 2152.99,1217.17 2153.57,1215.7 2154.16,1216.81 2154.75,1215.5 2155.33,1215.17 2155.92,1213.95 2156.5,1215.39 2157.09,1214.1 2157.68,1211.84 2158.26,1211.99 \"/>\n<path clip-path=\"url(#clip622)\" d=\"M986.025 1215.06 L986.612 1215.06 L987.198 1215.06 L987.785 1215.06 L988.371 1215.06 L988.957 1215.06 L989.544 1215.06 L990.13 1215.06 L990.717 1215.06 L991.303 1215.06 L991.889 1215.06 L992.476 1215.06 L993.062 1215.06 L993.649 1215.06 L994.235 1215.06 L994.822 1215.06 L995.408 1215.06 L995.994 1215.06 L996.581 1215.06 L997.167 1215.06 L997.754 1215.06 L998.34 1215.06 L998.926 1215.06 L999.513 1215.06 L1000.1 1215.06 L1000.69 1215.06 L1001.27 1215.06 L1001.86 1215.06 L1002.44 1215.06 L1003.03 1215.06 L1003.62 1215.06 L1004.2 1215.06 L1004.79 1215.06 L1005.38 1215.06 L1005.96 1215.06 L1006.55 1215.06 L1007.14 1215.06 L1007.72 1215.06 L1008.31 1215.06 L1008.9 1215.06 L1009.48 1215.06 L1010.07 1215.06 L1010.65 1215.06 L1011.24 1215.06 L1011.83 1215.06 L1012.41 1215.06 L1013 1215.06 L1013.59 1215.06 L1014.17 1215.06 L1014.76 1215.06 L1015.35 1215.06 L1015.93 1215.06 L1016.52 1215.06 L1017.11 1215.06 L1017.69 1215.06 L1018.28 1215.06 L1018.86 1215.06 L1019.45 1215.06 L1020.04 1215.06 L1020.62 1215.06 L1021.21 1215.06 L1021.8 1215.06 L1022.38 1215.06 L1022.97 1215.06 L1023.56 1215.06 L1024.14 1215.06 L1024.73 1215.06 L1025.32 1215.06 L1025.9 1215.06 L1026.49 1215.06 L1027.07 1215.06 L1027.66 1215.06 L1028.25 1215.06 L1028.83 1215.06 L1029.42 1215.06 L1030.01 1215.06 L1030.59 1215.06 L1031.18 1215.06 L1031.77 1215.06 L1032.35 1215.06 L1032.94 1215.06 L1033.52 1215.06 L1034.11 1215.06 L1034.7 1215.06 L1035.28 1215.06 L1035.87 1215.06 L1036.46 1215.06 L1037.04 1215.06 L1037.63 1215.06 L1038.22 1215.06 L1038.8 1215.06 L1039.39 1215.06 L1039.98 1215.06 L1040.56 1215.06 L1041.15 1215.06 L1041.73 1215.06 L1042.32 1215.06 L1042.91 1215.06 L1043.49 1215.06 L1044.08 1215.06 L1044.67 1215.06 L1045.25 1215.06 L1045.84 1215.06 L1046.43 1215.06 L1047.01 1215.06 L1047.6 1215.06 L1048.19 1215.06 L1048.77 1215.06 L1049.36 1215.06 L1049.94 1215.06 L1050.53 1215.06 L1051.12 1215.06 L1051.7 1215.06 L1052.29 1215.06 L1052.88 1215.06 L1053.46 1215.06 L1054.05 1215.06 L1054.64 1215.06 L1055.22 1215.06 L1055.81 1215.06 L1056.39 1215.06 L1056.98 1215.06 L1057.57 1215.06 L1058.15 1215.06 L1058.74 1215.06 L1059.33 1215.06 L1059.91 1215.06 L1060.5 1215.06 L1061.09 1215.06 L1061.67 1215.06 L1062.26 1215.06 L1062.85 1215.06 L1063.43 1215.06 L1064.02 1215.06 L1064.6 1215.06 L1065.19 1215.06 L1065.78 1215.06 L1066.36 1215.06 L1066.95 1215.06 L1067.54 1215.06 L1068.12 1215.06 L1068.71 1215.06 L1069.3 1215.06 L1069.88 1215.06 L1070.47 1215.06 L1071.06 1215.06 L1071.64 1215.06 L1072.23 1215.06 L1072.81 1215.06 L1073.4 1215.06 L1073.99 1215.06 L1074.57 1215.06 L1075.16 1215.06 L1075.75 1215.06 L1076.33 1215.06 L1076.92 1215.06 L1077.51 1215.06 L1078.09 1215.06 L1078.68 1215.06 L1079.26 1215.06 L1079.85 1215.06 L1080.44 1215.06 L1081.02 1215.06 L1081.61 1215.06 L1082.2 1215.06 L1082.78 1215.06 L1083.37 1215.06 L1083.96 1215.06 L1084.54 1215.06 L1085.13 1215.06 L1085.72 1215.06 L1086.3 1215.06 L1086.89 1215.06 L1087.47 1215.06 L1088.06 1215.06 L1088.65 1215.06 L1089.23 1215.06 L1089.82 1215.06 L1090.41 1215.06 L1090.99 1215.06 L1091.58 1215.06 L1092.17 1215.06 L1092.75 1215.06 L1093.34 1215.06 L1093.93 1215.06 L1094.51 1215.06 L1095.1 1215.06 L1095.68 1215.06 L1096.27 1215.06 L1096.86 1215.06 L1097.44 1215.06 L1098.03 1215.06 L1098.62 1215.06 L1099.2 1215.06 L1099.79 1215.06 L1100.38 1215.06 L1100.96 1215.06 L1101.55 1215.06 L1102.14 1215.06 L1102.72 1215.06 L1103.31 1215.06 L1103.89 1215.06 L1104.48 1215.06 L1105.07 1215.06 L1105.65 1215.06 L1106.24 1215.06 L1106.83 1215.06 L1107.41 1215.06 L1108 1215.06 L1108.59 1215.06 L1109.17 1215.06 L1109.76 1215.06 L1110.34 1215.06 L1110.93 1215.06 L1111.52 1215.06 L1112.1 1215.06 L1112.69 1215.06 L1113.28 1215.06 L1113.86 1215.06 L1114.45 1215.06 L1115.04 1215.06 L1115.62 1215.06 L1116.21 1215.06 L1116.8 1215.06 L1117.38 1215.06 L1117.97 1215.06 L1118.55 1215.06 L1119.14 1215.06 L1119.73 1215.06 L1120.31 1215.06 L1120.9 1215.06 L1121.49 1215.06 L1122.07 1215.06 L1122.66 1215.06 L1123.25 1215.06 L1123.83 1215.06 L1124.42 1215.06 L1125.01 1215.06 L1125.59 1215.06 L1126.18 1215.06 L1126.76 1215.06 L1127.35 1215.06 L1127.94 1215.06 L1128.52 1215.06 L1129.11 1215.06 L1129.7 1215.06 L1130.28 1215.06 L1130.87 1215.06 L1131.46 1215.06 L1132.04 1215.06 L1132.63 1215.06 L1133.21 1215.06 L1133.8 1215.06 L1134.39 1215.06 L1134.97 1215.06 L1135.56 1215.06 L1136.15 1215.06 L1136.73 1215.06 L1137.32 1215.06 L1137.91 1215.06 L1138.49 1215.06 L1139.08 1215.06 L1139.67 1215.06 L1140.25 1215.06 L1140.84 1215.06 L1141.42 1215.06 L1142.01 1215.06 L1142.6 1215.06 L1143.18 1215.06 L1143.77 1215.06 L1144.36 1215.06 L1144.94 1215.06 L1145.53 1215.06 L1146.12 1215.06 L1146.7 1215.06 L1147.29 1215.06 L1147.88 1215.06 L1148.46 1215.06 L1149.05 1215.06 L1149.63 1215.06 L1150.22 1215.06 L1150.81 1215.06 L1151.39 1215.06 L1151.98 1215.06 L1152.57 1215.06 L1153.15 1215.06 L1153.74 1215.06 L1154.33 1215.06 L1154.91 1215.06 L1155.5 1215.06 L1156.09 1215.06 L1156.67 1215.06 L1157.26 1215.06 L1157.84 1215.06 L1158.43 1215.06 L1159.02 1215.06 L1159.6 1215.06 L1160.19 1215.06 L1160.78 1215.06 L1161.36 1215.06 L1161.95 1215.06 L1162.54 1215.06 L1163.12 1215.06 L1163.71 1215.06 L1164.29 1215.06 L1164.88 1215.06 L1165.47 1215.06 L1166.05 1215.06 L1166.64 1215.06 L1167.23 1215.06 L1167.81 1215.06 L1168.4 1215.06 L1168.99 1215.06 L1169.57 1215.06 L1170.16 1215.06 L1170.75 1215.06 L1171.33 1215.06 L1171.92 1215.06 L1172.5 1215.06 L1173.09 1215.06 L1173.68 1215.06 L1174.26 1215.06 L1174.85 1215.06 L1175.44 1215.06 L1176.02 1215.06 L1176.61 1215.06 L1177.2 1215.06 L1177.78 1215.06 L1178.37 1215.06 L1178.96 1215.06 L1179.54 1215.06 L1180.13 1215.06 L1180.71 1215.06 L1181.3 1215.06 L1181.89 1215.06 L1182.47 1215.06 L1183.06 1215.06 L1183.65 1215.06 L1184.23 1215.06 L1184.82 1215.06 L1185.41 1215.06 L1185.99 1215.06 L1186.58 1215.06 L1187.16 1215.06 L1187.75 1215.06 L1188.34 1215.06 L1188.92 1215.06 L1189.51 1215.06 L1190.1 1215.06 L1190.68 1215.06 L1191.27 1215.06 L1191.86 1215.06 L1192.44 1215.06 L1193.03 1215.06 L1193.62 1215.06 L1194.2 1215.06 L1194.79 1215.06 L1195.37 1215.06 L1195.96 1215.06 L1196.55 1215.06 L1197.13 1215.06 L1197.72 1215.06 L1198.31 1215.06 L1198.89 1215.06 L1199.48 1215.06 L1200.07 1215.06 L1200.65 1215.06 L1201.24 1215.06 L1201.83 1215.06 L1202.41 1215.06 L1203 1215.06 L1203.58 1215.06 L1204.17 1215.06 L1204.76 1215.06 L1205.34 1215.06 L1205.93 1215.06 L1206.52 1215.06 L1207.1 1215.06 L1207.69 1215.06 L1208.28 1215.06 L1208.86 1215.06 L1209.45 1215.06 L1210.03 1215.06 L1210.62 1215.06 L1211.21 1215.06 L1211.79 1215.06 L1212.38 1215.06 L1212.97 1215.06 L1213.55 1215.06 L1214.14 1215.06 L1214.73 1215.06 L1215.31 1215.06 L1215.9 1215.06 L1216.49 1215.06 L1217.07 1215.06 L1217.66 1215.06 L1218.24 1215.06 L1218.83 1215.06 L1219.42 1215.06 L1220 1215.06 L1220.59 1215.06 L1221.18 1215.06 L1221.76 1215.06 L1222.35 1215.06 L1222.94 1215.06 L1223.52 1215.06 L1224.11 1215.06 L1224.7 1215.06 L1225.28 1215.06 L1225.87 1215.06 L1226.45 1215.06 L1227.04 1215.06 L1227.63 1215.06 L1228.21 1215.06 L1228.8 1215.06 L1229.39 1215.06 L1229.97 1215.06 L1230.56 1215.06 L1231.15 1215.06 L1231.73 1215.06 L1232.32 1215.06 L1232.91 1215.06 L1233.49 1215.06 L1234.08 1215.06 L1234.66 1215.06 L1235.25 1215.06 L1235.84 1215.06 L1236.42 1215.06 L1237.01 1215.06 L1237.6 1215.06 L1238.18 1215.06 L1238.77 1215.06 L1239.36 1215.06 L1239.94 1215.06 L1240.53 1215.06 L1241.11 1215.06 L1241.7 1215.06 L1242.29 1215.06 L1242.87 1215.06 L1243.46 1215.06 L1244.05 1215.06 L1244.63 1215.06 L1245.22 1215.06 L1245.81 1215.06 L1246.39 1215.06 L1246.98 1215.06 L1247.57 1215.06 L1248.15 1215.06 L1248.74 1215.06 L1249.32 1215.06 L1249.91 1215.06 L1250.5 1215.06 L1251.08 1215.06 L1251.67 1215.06 L1252.26 1215.06 L1252.84 1215.06 L1253.43 1215.06 L1254.02 1215.06 L1254.6 1215.06 L1255.19 1215.06 L1255.78 1215.06 L1256.36 1215.06 L1256.95 1215.06 L1257.53 1215.06 L1258.12 1215.06 L1258.71 1215.06 L1259.29 1215.06 L1259.88 1215.06 L1260.47 1215.06 L1261.05 1215.06 L1261.64 1215.06 L1262.23 1215.06 L1262.81 1215.06 L1263.4 1215.06 L1263.98 1215.06 L1264.57 1215.06 L1265.16 1215.06 L1265.74 1215.06 L1266.33 1215.06 L1266.92 1215.06 L1267.5 1215.06 L1268.09 1215.06 L1268.68 1215.06 L1269.26 1215.06 L1269.85 1215.06 L1270.44 1215.06 L1271.02 1215.06 L1271.61 1215.06 L1272.19 1215.06 L1272.78 1215.06 L1273.37 1215.06 L1273.95 1215.06 L1274.54 1215.06 L1275.13 1215.06 L1275.71 1215.06 L1276.3 1215.06 L1276.89 1215.06 L1277.47 1215.06 L1278.06 1215.06 L1278.65 1215.06 L1279.23 1215.06 L1279.82 1215.06 L1280.4 1215.06 L1280.99 1215.06 L1281.58 1215.06 L1282.16 1215.06 L1282.75 1215.06 L1283.34 1215.06 L1283.92 1215.06 L1284.51 1215.06 L1285.1 1215.06 L1285.68 1215.06 L1286.27 1215.06 L1286.86 1215.06 L1287.44 1215.06 L1288.03 1215.06 L1288.61 1215.06 L1289.2 1215.06 L1289.79 1215.06 L1290.37 1215.06 L1290.96 1215.06 L1291.55 1215.06 L1292.13 1215.06 L1292.72 1215.06 L1293.31 1215.06 L1293.89 1215.06 L1294.48 1215.06 L1295.06 1215.06 L1295.65 1215.06 L1296.24 1215.06 L1296.82 1215.06 L1297.41 1215.06 L1298 1215.06 L1298.58 1215.06 L1299.17 1215.06 L1299.76 1215.06 L1300.34 1215.06 L1300.93 1215.06 L1301.52 1215.06 L1302.1 1215.06 L1302.69 1215.06 L1303.27 1215.06 L1303.86 1215.06 L1304.45 1215.06 L1305.03 1215.06 L1305.62 1215.06 L1306.21 1215.06 L1306.79 1215.06 L1307.38 1215.06 L1307.97 1215.06 L1308.55 1215.06 L1309.14 1215.06 L1309.73 1215.06 L1310.31 1215.06 L1310.9 1215.06 L1311.48 1215.06 L1312.07 1215.06 L1312.66 1215.06 L1313.24 1215.06 L1313.83 1215.06 L1314.42 1215.06 L1315 1215.06 L1315.59 1215.06 L1316.18 1215.06 L1316.76 1215.06 L1317.35 1215.06 L1317.93 1215.06 L1318.52 1215.06 L1319.11 1215.06 L1319.69 1215.06 L1320.28 1215.06 L1320.87 1215.06 L1321.45 1215.06 L1322.04 1215.06 L1322.63 1215.06 L1323.21 1215.06 L1323.8 1215.06 L1324.39 1215.06 L1324.97 1215.06 L1325.56 1215.06 L1326.14 1215.06 L1326.73 1215.06 L1327.32 1215.06 L1327.9 1215.06 L1328.49 1215.06 L1329.08 1215.06 L1329.66 1215.06 L1330.25 1215.06 L1330.84 1215.06 L1331.42 1215.06 L1332.01 1215.06 L1332.6 1215.06 L1333.18 1215.06 L1333.77 1215.06 L1334.35 1215.06 L1334.94 1215.06 L1335.53 1215.06 L1336.11 1215.06 L1336.7 1215.06 L1337.29 1215.06 L1337.87 1215.06 L1338.46 1215.06 L1339.05 1215.06 L1339.63 1215.06 L1340.22 1215.06 L1340.8 1215.06 L1341.39 1215.06 L1341.98 1215.06 L1342.56 1215.06 L1343.15 1215.06 L1343.74 1215.06 L1344.32 1215.06 L1344.91 1215.06 L1345.5 1215.06 L1346.08 1215.06 L1346.67 1215.06 L1347.26 1215.06 L1347.84 1215.06 L1348.43 1215.06 L1349.01 1215.06 L1349.6 1215.06 L1350.19 1215.06 L1350.77 1215.06 L1351.36 1215.06 L1351.95 1215.06 L1352.53 1215.06 L1353.12 1215.06 L1353.71 1215.06 L1354.29 1215.06 L1354.88 1215.06 L1355.47 1215.06 L1356.05 1215.06 L1356.64 1215.06 L1357.22 1215.06 L1357.81 1215.06 L1358.4 1215.06 L1358.98 1215.06 L1359.57 1215.06 L1360.16 1215.06 L1360.74 1215.06 L1361.33 1215.06 L1361.92 1215.06 L1362.5 1215.06 L1363.09 1215.06 L1363.68 1215.06 L1364.26 1215.06 L1364.85 1215.06 L1365.43 1215.06 L1366.02 1215.06 L1366.61 1215.06 L1367.19 1215.06 L1367.78 1215.06 L1368.37 1215.06 L1368.95 1215.06 L1369.54 1215.06 L1370.13 1215.06 L1370.71 1215.06 L1371.3 1215.06 L1371.88 1215.06 L1372.47 1215.06 L1373.06 1215.06 L1373.64 1215.06 L1374.23 1215.06 L1374.82 1215.06 L1375.4 1215.06 L1375.99 1215.06 L1376.58 1215.06 L1377.16 1215.06 L1377.75 1215.06 L1378.34 1215.06 L1378.92 1215.06 L1379.51 1215.06 L1380.09 1215.06 L1380.68 1215.06 L1381.27 1215.06 L1381.85 1215.06 L1382.44 1215.06 L1383.03 1215.06 L1383.61 1215.06 L1384.2 1215.06 L1384.79 1215.06 L1385.37 1215.06 L1385.96 1215.06 L1386.55 1215.06 L1387.13 1215.06 L1387.72 1215.06 L1388.3 1215.06 L1388.89 1215.06 L1389.48 1215.06 L1390.06 1215.06 L1390.65 1215.06 L1391.24 1215.06 L1391.82 1215.06 L1392.41 1215.06 L1393 1215.06 L1393.58 1215.06 L1394.17 1215.06 L1394.75 1215.06 L1395.34 1215.06 L1395.93 1215.06 L1396.51 1215.06 L1397.1 1215.06 L1397.69 1215.06 L1398.27 1215.06 L1398.86 1215.06 L1399.45 1215.06 L1400.03 1215.06 L1400.62 1215.06 L1401.21 1215.06 L1401.79 1215.06 L1402.38 1215.06 L1402.96 1215.06 L1403.55 1215.06 L1404.14 1215.06 L1404.72 1215.06 L1405.31 1215.06 L1405.9 1215.06 L1406.48 1215.06 L1407.07 1215.06 L1407.66 1215.06 L1408.24 1215.06 L1408.83 1215.06 L1409.42 1215.06 L1410 1215.06 L1410.59 1215.06 L1411.17 1215.06 L1411.76 1215.06 L1412.35 1215.06 L1412.93 1215.06 L1413.52 1215.06 L1414.11 1215.06 L1414.69 1215.06 L1415.28 1215.06 L1415.87 1215.06 L1416.45 1215.06 L1417.04 1215.06 L1417.63 1215.06 L1418.21 1215.06 L1418.8 1215.06 L1419.38 1215.06 L1419.97 1215.06 L1420.56 1215.06 L1421.14 1215.06 L1421.73 1215.06 L1422.32 1215.06 L1422.9 1215.06 L1423.49 1215.06 L1424.08 1215.06 L1424.66 1215.06 L1425.25 1215.06 L1425.83 1215.06 L1426.42 1215.06 L1427.01 1215.06 L1427.59 1215.06 L1428.18 1215.06 L1428.77 1215.06 L1429.35 1215.06 L1429.94 1215.06 L1430.53 1215.06 L1431.11 1215.06 L1431.7 1215.06 L1432.29 1215.06 L1432.87 1215.06 L1433.46 1215.06 L1434.04 1215.06 L1434.63 1215.06 L1435.22 1215.06 L1435.8 1215.06 L1436.39 1215.06 L1436.98 1215.06 L1437.56 1215.06 L1438.15 1215.06 L1438.74 1215.06 L1439.32 1215.06 L1439.91 1215.06 L1440.5 1215.06 L1441.08 1215.06 L1441.67 1215.06 L1442.25 1215.06 L1442.84 1215.06 L1443.43 1215.06 L1444.01 1215.06 L1444.6 1215.06 L1445.19 1215.06 L1445.77 1215.06 L1446.36 1215.06 L1446.95 1215.06 L1447.53 1215.06 L1448.12 1215.06 L1448.7 1215.06 L1449.29 1215.06 L1449.88 1215.06 L1450.46 1215.06 L1451.05 1215.06 L1451.64 1215.06 L1452.22 1215.06 L1452.81 1215.06 L1453.4 1215.06 L1453.98 1215.06 L1454.57 1215.06 L1455.16 1215.06 L1455.74 1215.06 L1456.33 1215.06 L1456.91 1215.06 L1457.5 1215.06 L1458.09 1215.06 L1458.67 1215.06 L1459.26 1215.06 L1459.85 1215.06 L1460.43 1215.06 L1461.02 1215.06 L1461.61 1215.06 L1462.19 1215.06 L1462.78 1215.06 L1463.37 1215.06 L1463.95 1215.06 L1464.54 1215.06 L1465.12 1215.06 L1465.71 1215.06 L1466.3 1215.06 L1466.88 1215.06 L1467.47 1215.06 L1468.06 1215.06 L1468.64 1215.06 L1469.23 1215.06 L1469.82 1215.06 L1470.4 1215.06 L1470.99 1215.06 L1471.57 1215.06 L1472.16 1215.06 L1472.75 1215.06 L1473.33 1215.06 L1473.92 1215.06 L1474.51 1215.06 L1475.09 1215.06 L1475.68 1215.06 L1476.27 1215.06 L1476.85 1215.06 L1477.44 1215.06 L1478.03 1215.06 L1478.61 1215.06 L1479.2 1215.06 L1479.78 1215.06 L1480.37 1215.06 L1480.96 1215.06 L1481.54 1215.06 L1482.13 1215.06 L1482.72 1215.06 L1483.3 1215.06 L1483.89 1215.06 L1484.48 1215.06 L1485.06 1215.06 L1485.65 1215.06 L1486.24 1215.06 L1486.82 1215.06 L1487.41 1215.06 L1487.99 1215.06 L1488.58 1215.06 L1489.17 1215.06 L1489.75 1215.06 L1490.34 1215.06 L1490.93 1215.06 L1491.51 1215.06 L1492.1 1215.06 L1492.69 1215.06 L1493.27 1215.06 L1493.86 1215.06 L1494.45 1215.06 L1495.03 1215.06 L1495.62 1215.06 L1496.2 1215.06 L1496.79 1215.06 L1497.38 1215.06 L1497.96 1215.06 L1498.55 1215.06 L1499.14 1215.06 L1499.72 1215.06 L1500.31 1215.06 L1500.9 1215.06 L1501.48 1215.06 L1502.07 1215.06 L1502.65 1215.06 L1503.24 1215.06 L1503.83 1215.06 L1504.41 1215.06 L1505 1215.06 L1505.59 1215.06 L1506.17 1215.06 L1506.76 1215.06 L1507.35 1215.06 L1507.93 1215.06 L1508.52 1215.06 L1509.11 1215.06 L1509.69 1215.06 L1510.28 1215.06 L1510.86 1215.06 L1511.45 1215.06 L1512.04 1215.06 L1512.62 1215.06 L1513.21 1215.06 L1513.8 1215.06 L1514.38 1215.06 L1514.97 1215.06 L1515.56 1215.06 L1516.14 1215.06 L1516.73 1215.06 L1517.32 1215.06 L1517.9 1215.06 L1518.49 1215.06 L1519.07 1215.06 L1519.66 1215.06 L1520.25 1215.06 L1520.83 1215.06 L1521.42 1215.06 L1522.01 1215.06 L1522.59 1215.06 L1523.18 1215.06 L1523.77 1215.06 L1524.35 1215.06 L1524.94 1215.06 L1525.52 1215.06 L1526.11 1215.06 L1526.7 1215.06 L1527.28 1215.06 L1527.87 1215.06 L1528.46 1215.06 L1529.04 1215.06 L1529.63 1215.06 L1530.22 1215.06 L1530.8 1215.06 L1531.39 1215.06 L1531.98 1215.06 L1532.56 1215.06 L1533.15 1215.06 L1533.73 1215.06 L1534.32 1215.06 L1534.91 1215.06 L1535.49 1215.06 L1536.08 1215.06 L1536.67 1215.06 L1537.25 1215.06 L1537.84 1215.06 L1538.43 1215.06 L1539.01 1215.06 L1539.6 1215.06 L1540.19 1215.06 L1540.77 1215.06 L1541.36 1215.06 L1541.94 1215.06 L1542.53 1215.06 L1543.12 1215.06 L1543.7 1215.06 L1544.29 1215.06 L1544.88 1215.06 L1545.46 1215.06 L1546.05 1215.06 L1546.64 1215.06 L1547.22 1215.06 L1547.81 1215.06 L1548.4 1215.06 L1548.98 1215.06 L1549.57 1215.06 L1550.15 1215.06 L1550.74 1215.06 L1551.33 1215.06 L1551.91 1215.06 L1552.5 1215.06 L1553.09 1215.06 L1553.67 1215.06 L1554.26 1215.06 L1554.85 1215.06 L1555.43 1215.06 L1556.02 1215.06 L1556.6 1215.06 L1557.19 1215.06 L1557.78 1215.06 L1558.36 1215.06 L1558.95 1215.06 L1559.54 1215.06 L1560.12 1215.06 L1560.71 1215.06 L1561.3 1215.06 L1561.88 1215.06 L1562.47 1215.06 L1563.06 1215.06 L1563.64 1215.06 L1564.23 1215.06 L1564.81 1215.06 L1565.4 1215.06 L1565.99 1215.06 L1566.57 1215.06 L1567.16 1215.06 L1567.75 1215.06 L1568.33 1215.06 L1568.92 1215.06 L1569.51 1215.06 L1570.09 1215.06 L1570.68 1215.06 L1571.27 1215.06 L1571.85 1215.06 L1572.44 1215.06 L1573.02 1215.06 L1573.61 1215.06 L1574.2 1215.06 L1574.78 1215.06 L1575.37 1215.06 L1575.96 1215.06 L1576.54 1215.06 L1577.13 1215.06 L1577.72 1215.06 L1578.3 1215.06 L1578.89 1215.06 L1579.47 1215.06 L1580.06 1215.06 L1580.65 1215.06 L1581.23 1215.06 L1581.82 1215.06 L1582.41 1215.06 L1582.99 1215.06 L1583.58 1215.06 L1584.17 1215.06 L1584.75 1215.06 L1585.34 1215.06 L1585.93 1215.06 L1586.51 1215.06 L1587.1 1215.06 L1587.68 1215.06 L1588.27 1215.06 L1588.86 1215.06 L1589.44 1215.06 L1590.03 1215.06 L1590.62 1215.06 L1591.2 1215.06 L1591.79 1215.06 L1592.38 1215.06 L1592.96 1215.06 L1593.55 1215.06 L1594.14 1215.06 L1594.72 1215.06 L1595.31 1215.06 L1595.89 1215.06 L1596.48 1215.06 L1597.07 1215.06 L1597.65 1215.06 L1598.24 1215.06 L1598.83 1215.06 L1599.41 1215.06 L1600 1215.06 L1600.59 1215.06 L1601.17 1215.06 L1601.76 1215.06 L1602.34 1215.06 L1602.93 1215.06 L1603.52 1215.06 L1604.1 1215.06 L1604.69 1215.06 L1605.28 1215.06 L1605.86 1215.06 L1606.45 1215.06 L1607.04 1215.06 L1607.62 1215.06 L1608.21 1215.06 L1608.8 1215.06 L1609.38 1215.06 L1609.97 1215.06 L1610.55 1215.06 L1611.14 1215.06 L1611.73 1215.06 L1612.31 1215.06 L1612.9 1215.06 L1613.49 1215.06 L1614.07 1215.06 L1614.66 1215.06 L1615.25 1215.06 L1615.83 1215.06 L1616.42 1215.06 L1617.01 1215.06 L1617.59 1215.06 L1618.18 1215.06 L1618.76 1215.06 L1619.35 1215.06 L1619.94 1215.06 L1620.52 1215.06 L1621.11 1215.06 L1621.7 1215.06 L1622.28 1215.06 L1622.87 1215.06 L1623.46 1215.06 L1624.04 1215.06 L1624.63 1215.06 L1625.22 1215.06 L1625.8 1215.06 L1626.39 1215.06 L1626.97 1215.06 L1627.56 1215.06 L1628.15 1215.06 L1628.73 1215.06 L1629.32 1215.06 L1629.91 1215.06 L1630.49 1215.06 L1631.08 1215.06 L1631.67 1215.06 L1632.25 1215.06 L1632.84 1215.06 L1633.42 1215.06 L1634.01 1215.06 L1634.6 1215.06 L1635.18 1215.06 L1635.77 1215.06 L1636.36 1215.06 L1636.94 1215.06 L1637.53 1215.06 L1638.12 1215.06 L1638.7 1215.06 L1639.29 1215.06 L1639.88 1215.06 L1640.46 1215.06 L1641.05 1215.06 L1641.63 1215.06 L1642.22 1215.06 L1642.81 1215.06 L1643.39 1215.06 L1643.98 1215.06 L1644.57 1215.06 L1645.15 1215.06 L1645.74 1215.06 L1646.33 1215.06 L1646.91 1215.06 L1647.5 1215.06 L1648.09 1215.06 L1648.67 1215.06 L1649.26 1215.06 L1649.84 1215.06 L1650.43 1215.06 L1651.02 1215.06 L1651.6 1215.06 L1652.19 1215.06 L1652.78 1215.06 L1653.36 1215.06 L1653.95 1215.06 L1654.54 1215.06 L1655.12 1215.06 L1655.71 1215.06 L1656.29 1215.06 L1656.88 1215.06 L1657.47 1215.06 L1658.05 1215.06 L1658.64 1215.06 L1659.23 1215.06 L1659.81 1215.06 L1660.4 1215.06 L1660.99 1215.06 L1661.57 1215.06 L1662.16 1215.06 L1662.75 1215.06 L1663.33 1215.06 L1663.92 1215.06 L1664.5 1215.06 L1665.09 1215.06 L1665.68 1215.06 L1666.26 1215.06 L1666.85 1215.06 L1667.44 1215.06 L1668.02 1215.06 L1668.61 1215.06 L1669.2 1215.06 L1669.78 1215.06 L1670.37 1215.06 L1670.96 1215.06 L1671.54 1215.06 L1672.13 1215.06 L1672.71 1215.06 L1673.3 1215.06 L1673.89 1215.06 L1674.47 1215.06 L1675.06 1215.06 L1675.65 1215.06 L1676.23 1215.06 L1676.82 1215.06 L1677.41 1215.06 L1677.99 1215.06 L1678.58 1215.06 L1679.17 1215.06 L1679.75 1215.06 L1680.34 1215.06 L1680.92 1215.06 L1681.51 1215.06 L1682.1 1215.06 L1682.68 1215.06 L1683.27 1215.06 L1683.86 1215.06 L1684.44 1215.06 L1685.03 1215.06 L1685.62 1215.06 L1686.2 1215.06 L1686.79 1215.06 L1687.37 1215.06 L1687.96 1215.06 L1688.55 1215.06 L1689.13 1215.06 L1689.72 1215.06 L1690.31 1215.06 L1690.89 1215.06 L1691.48 1215.06 L1692.07 1215.06 L1692.65 1215.06 L1693.24 1215.06 L1693.83 1215.06 L1694.41 1215.06 L1695 1215.06 L1695.58 1215.06 L1696.17 1215.06 L1696.76 1215.06 L1697.34 1215.06 L1697.93 1215.06 L1698.52 1215.06 L1699.1 1215.06 L1699.69 1215.06 L1700.28 1215.06 L1700.86 1215.06 L1701.45 1215.06 L1702.04 1215.06 L1702.62 1215.06 L1703.21 1215.06 L1703.79 1215.06 L1704.38 1215.06 L1704.97 1215.06 L1705.55 1215.06 L1706.14 1215.06 L1706.73 1215.06 L1707.31 1215.06 L1707.9 1215.06 L1708.49 1215.06 L1709.07 1215.06 L1709.66 1215.06 L1710.24 1215.06 L1710.83 1215.06 L1711.42 1215.06 L1712 1215.06 L1712.59 1215.06 L1713.18 1215.06 L1713.76 1215.06 L1714.35 1215.06 L1714.94 1215.06 L1715.52 1215.06 L1716.11 1215.06 L1716.7 1215.06 L1717.28 1215.06 L1717.87 1215.06 L1718.45 1215.06 L1719.04 1215.06 L1719.63 1215.06 L1720.21 1215.06 L1720.8 1215.06 L1721.39 1215.06 L1721.97 1215.06 L1722.56 1215.06 L1723.15 1215.06 L1723.73 1215.06 L1724.32 1215.06 L1724.91 1215.06 L1725.49 1215.06 L1726.08 1215.06 L1726.66 1215.06 L1727.25 1215.06 L1727.84 1215.06 L1728.42 1215.06 L1729.01 1215.06 L1729.6 1215.06 L1730.18 1215.06 L1730.77 1215.06 L1731.36 1215.06 L1731.94 1215.06 L1732.53 1215.06 L1733.11 1215.06 L1733.7 1215.06 L1734.29 1215.06 L1734.87 1215.06 L1735.46 1215.06 L1736.05 1215.06 L1736.63 1215.06 L1737.22 1215.06 L1737.81 1215.06 L1738.39 1215.06 L1738.98 1215.06 L1739.57 1215.06 L1740.15 1215.06 L1740.74 1215.06 L1741.32 1215.06 L1741.91 1215.06 L1742.5 1215.06 L1743.08 1215.06 L1743.67 1215.06 L1744.26 1215.06 L1744.84 1215.06 L1745.43 1215.06 L1746.02 1215.06 L1746.6 1215.06 L1747.19 1215.06 L1747.78 1215.06 L1748.36 1215.06 L1748.95 1215.06 L1749.53 1215.06 L1750.12 1215.06 L1750.71 1215.06 L1751.29 1215.06 L1751.88 1215.06 L1752.47 1215.06 L1753.05 1215.06 L1753.64 1215.06 L1754.23 1215.06 L1754.81 1215.06 L1755.4 1215.06 L1755.99 1215.06 L1756.57 1215.06 L1757.16 1215.06 L1757.74 1215.06 L1758.33 1215.06 L1758.92 1215.06 L1759.5 1215.06 L1760.09 1215.06 L1760.68 1215.06 L1761.26 1215.06 L1761.85 1215.06 L1762.44 1215.06 L1763.02 1215.06 L1763.61 1215.06 L1764.19 1215.06 L1764.78 1215.06 L1765.37 1215.06 L1765.95 1215.06 L1766.54 1215.06 L1767.13 1215.06 L1767.71 1215.06 L1768.3 1215.06 L1768.89 1215.06 L1769.47 1215.06 L1770.06 1215.06 L1770.65 1215.06 L1771.23 1215.06 L1771.82 1215.06 L1772.4 1215.06 L1772.99 1215.06 L1773.58 1215.06 L1774.16 1215.06 L1774.75 1215.06 L1775.34 1215.06 L1775.92 1215.06 L1776.51 1215.06 L1777.1 1215.06 L1777.68 1215.06 L1778.27 1215.06 L1778.86 1215.06 L1779.44 1215.06 L1780.03 1215.06 L1780.61 1215.06 L1781.2 1215.06 L1781.79 1215.06 L1782.37 1215.06 L1782.96 1215.06 L1783.55 1215.06 L1784.13 1215.06 L1784.72 1215.06 L1785.31 1215.06 L1785.89 1215.06 L1786.48 1215.06 L1787.06 1215.06 L1787.65 1215.06 L1788.24 1215.06 L1788.82 1215.06 L1789.41 1215.06 L1790 1215.06 L1790.58 1215.06 L1791.17 1215.06 L1791.76 1215.06 L1792.34 1215.06 L1792.93 1215.06 L1793.52 1215.06 L1794.1 1215.06 L1794.69 1215.06 L1795.27 1215.06 L1795.86 1215.06 L1796.45 1215.06 L1797.03 1215.06 L1797.62 1215.06 L1798.21 1215.06 L1798.79 1215.06 L1799.38 1215.06 L1799.97 1215.06 L1800.55 1215.06 L1801.14 1215.06 L1801.73 1215.06 L1802.31 1215.06 L1802.9 1215.06 L1803.48 1215.06 L1804.07 1215.06 L1804.66 1215.06 L1805.24 1215.06 L1805.83 1215.06 L1806.42 1215.06 L1807 1215.06 L1807.59 1215.06 L1808.18 1215.06 L1808.76 1215.06 L1809.35 1215.06 L1809.94 1215.06 L1810.52 1215.06 L1811.11 1215.06 L1811.69 1215.06 L1812.28 1215.06 L1812.87 1215.06 L1813.45 1215.06 L1814.04 1215.06 L1814.63 1215.06 L1815.21 1215.06 L1815.8 1215.06 L1816.39 1215.06 L1816.97 1215.06 L1817.56 1215.06 L1818.14 1215.06 L1818.73 1215.06 L1819.32 1215.06 L1819.9 1215.06 L1820.49 1215.06 L1821.08 1215.06 L1821.66 1215.06 L1822.25 1215.06 L1822.84 1215.06 L1823.42 1215.06 L1824.01 1215.06 L1824.6 1215.06 L1825.18 1215.06 L1825.77 1215.06 L1826.35 1215.06 L1826.94 1215.06 L1827.53 1215.06 L1828.11 1215.06 L1828.7 1215.06 L1829.29 1215.06 L1829.87 1215.06 L1830.46 1215.06 L1831.05 1215.06 L1831.63 1215.06 L1832.22 1215.06 L1832.81 1215.06 L1833.39 1215.06 L1833.98 1215.06 L1834.56 1215.06 L1835.15 1215.06 L1835.74 1215.06 L1836.32 1215.06 L1836.91 1215.06 L1837.5 1215.06 L1838.08 1215.06 L1838.67 1215.06 L1839.26 1215.06 L1839.84 1215.06 L1840.43 1215.06 L1841.01 1215.06 L1841.6 1215.06 L1842.19 1215.06 L1842.77 1215.06 L1843.36 1215.06 L1843.95 1215.06 L1844.53 1215.06 L1845.12 1215.06 L1845.71 1215.06 L1846.29 1215.06 L1846.88 1215.06 L1847.47 1215.06 L1848.05 1215.06 L1848.64 1215.06 L1849.22 1215.06 L1849.81 1215.06 L1850.4 1215.06 L1850.98 1215.06 L1851.57 1215.06 L1852.16 1215.06 L1852.74 1215.06 L1853.33 1215.06 L1853.92 1215.06 L1854.5 1215.06 L1855.09 1215.06 L1855.68 1215.06 L1856.26 1215.06 L1856.85 1215.06 L1857.43 1215.06 L1858.02 1215.06 L1858.61 1215.06 L1859.19 1215.06 L1859.78 1215.06 L1860.37 1215.06 L1860.95 1215.06 L1861.54 1215.06 L1862.13 1215.06 L1862.71 1215.06 L1863.3 1215.06 L1863.88 1215.06 L1864.47 1215.06 L1865.06 1215.06 L1865.64 1215.06 L1866.23 1215.06 L1866.82 1215.06 L1867.4 1215.06 L1867.99 1215.06 L1868.58 1215.06 L1869.16 1215.06 L1869.75 1215.06 L1870.34 1215.06 L1870.92 1215.06 L1871.51 1215.06 L1872.09 1215.06 L1872.68 1215.06 L1873.27 1215.06 L1873.85 1215.06 L1874.44 1215.06 L1875.03 1215.06 L1875.61 1215.06 L1876.2 1215.06 L1876.79 1215.06 L1877.37 1215.06 L1877.96 1215.06 L1878.55 1215.06 L1879.13 1215.06 L1879.72 1215.06 L1880.3 1215.06 L1880.89 1215.06 L1881.48 1215.06 L1882.06 1215.06 L1882.65 1215.06 L1883.24 1215.06 L1883.82 1215.06 L1884.41 1215.06 L1885 1215.06 L1885.58 1215.06 L1886.17 1215.06 L1886.76 1215.06 L1887.34 1215.06 L1887.93 1215.06 L1888.51 1215.06 L1889.1 1215.06 L1889.69 1215.06 L1890.27 1215.06 L1890.86 1215.06 L1891.45 1215.06 L1892.03 1215.06 L1892.62 1215.06 L1893.21 1215.06 L1893.79 1215.06 L1894.38 1215.06 L1894.96 1215.06 L1895.55 1215.06 L1896.14 1215.06 L1896.72 1215.06 L1897.31 1215.06 L1897.9 1215.06 L1898.48 1215.06 L1899.07 1215.06 L1899.66 1215.06 L1900.24 1215.06 L1900.83 1215.06 L1901.42 1215.06 L1902 1215.06 L1902.59 1215.06 L1903.17 1215.06 L1903.76 1215.06 L1904.35 1215.06 L1904.93 1215.06 L1905.52 1215.06 L1906.11 1215.06 L1906.69 1215.06 L1907.28 1215.06 L1907.87 1215.06 L1908.45 1215.06 L1909.04 1215.06 L1909.63 1215.06 L1910.21 1215.06 L1910.8 1215.06 L1911.38 1215.06 L1911.97 1215.06 L1912.56 1215.06 L1913.14 1215.06 L1913.73 1215.06 L1914.32 1215.06 L1914.9 1215.06 L1915.49 1215.06 L1916.08 1215.06 L1916.66 1215.06 L1917.25 1215.06 L1917.83 1215.06 L1918.42 1215.06 L1919.01 1215.06 L1919.59 1215.06 L1920.18 1215.06 L1920.77 1215.06 L1921.35 1215.06 L1921.94 1215.06 L1922.53 1215.06 L1923.11 1215.06 L1923.7 1215.06 L1924.29 1215.06 L1924.87 1215.06 L1925.46 1215.06 L1926.04 1215.06 L1926.63 1215.06 L1927.22 1215.06 L1927.8 1215.06 L1928.39 1215.06 L1928.98 1215.06 L1929.56 1215.06 L1930.15 1215.06 L1930.74 1215.06 L1931.32 1215.06 L1931.91 1215.06 L1932.5 1215.06 L1933.08 1215.06 L1933.67 1215.06 L1934.25 1215.06 L1934.84 1215.06 L1935.43 1215.06 L1936.01 1215.06 L1936.6 1215.06 L1937.19 1215.06 L1937.77 1215.06 L1938.36 1215.06 L1938.95 1215.06 L1939.53 1215.06 L1940.12 1215.06 L1940.71 1215.06 L1941.29 1215.06 L1941.88 1215.06 L1942.46 1215.06 L1943.05 1215.06 L1943.64 1215.06 L1944.22 1215.06 L1944.81 1215.06 L1945.4 1215.06 L1945.98 1215.06 L1946.57 1215.06 L1947.16 1215.06 L1947.74 1215.06 L1948.33 1215.06 L1948.91 1215.06 L1949.5 1215.06 L1950.09 1215.06 L1950.67 1215.06 L1951.26 1215.06 L1951.85 1215.06 L1952.43 1215.06 L1953.02 1215.06 L1953.61 1215.06 L1954.19 1215.06 L1954.78 1215.06 L1955.37 1215.06 L1955.95 1215.06 L1956.54 1215.06 L1957.12 1215.06 L1957.71 1215.06 L1958.3 1215.06 L1958.88 1215.06 L1959.47 1215.06 L1960.06 1215.06 L1960.64 1215.06 L1961.23 1215.06 L1961.82 1215.06 L1962.4 1215.06 L1962.99 1215.06 L1963.58 1215.06 L1964.16 1215.06 L1964.75 1215.06 L1965.33 1215.06 L1965.92 1215.06 L1966.51 1215.06 L1967.09 1215.06 L1967.68 1215.06 L1968.27 1215.06 L1968.85 1215.06 L1969.44 1215.06 L1970.03 1215.06 L1970.61 1215.06 L1971.2 1215.06 L1971.78 1215.06 L1972.37 1215.06 L1972.96 1215.06 L1973.54 1215.06 L1974.13 1215.06 L1974.72 1215.06 L1975.3 1215.06 L1975.89 1215.06 L1976.48 1215.06 L1977.06 1215.06 L1977.65 1215.06 L1978.24 1215.06 L1978.82 1215.06 L1979.41 1215.06 L1979.99 1215.06 L1980.58 1215.06 L1981.17 1215.06 L1981.75 1215.06 L1982.34 1215.06 L1982.93 1215.06 L1983.51 1215.06 L1984.1 1215.06 L1984.69 1215.06 L1985.27 1215.06 L1985.86 1215.06 L1986.45 1215.06 L1987.03 1215.06 L1987.62 1215.06 L1988.2 1215.06 L1988.79 1215.06 L1989.38 1215.06 L1989.96 1215.06 L1990.55 1215.06 L1991.14 1215.06 L1991.72 1215.06 L1992.31 1215.06 L1992.9 1215.06 L1993.48 1215.06 L1994.07 1215.06 L1994.65 1215.06 L1995.24 1215.06 L1995.83 1215.06 L1996.41 1215.06 L1997 1215.06 L1997.59 1215.06 L1998.17 1215.06 L1998.76 1215.06 L1999.35 1215.06 L1999.93 1215.06 L2000.52 1215.06 L2001.11 1215.06 L2001.69 1215.06 L2002.28 1215.06 L2002.86 1215.06 L2003.45 1215.06 L2004.04 1215.06 L2004.62 1215.06 L2005.21 1215.06 L2005.8 1215.06 L2006.38 1215.06 L2006.97 1215.06 L2007.56 1215.06 L2008.14 1215.06 L2008.73 1215.06 L2009.32 1215.06 L2009.9 1215.06 L2010.49 1215.06 L2011.07 1215.06 L2011.66 1215.06 L2012.25 1215.06 L2012.83 1215.06 L2013.42 1215.06 L2014.01 1215.06 L2014.59 1215.06 L2015.18 1215.06 L2015.77 1215.06 L2016.35 1215.06 L2016.94 1215.06 L2017.53 1215.06 L2018.11 1215.06 L2018.7 1215.06 L2019.28 1215.06 L2019.87 1215.06 L2020.46 1215.06 L2021.04 1215.06 L2021.63 1215.06 L2022.22 1215.06 L2022.8 1215.06 L2023.39 1215.06 L2023.98 1215.06 L2024.56 1215.06 L2025.15 1215.06 L2025.73 1215.06 L2026.32 1215.06 L2026.91 1215.06 L2027.49 1215.06 L2028.08 1215.06 L2028.67 1215.06 L2029.25 1215.06 L2029.84 1215.06 L2030.43 1215.06 L2031.01 1215.06 L2031.6 1215.06 L2032.19 1215.06 L2032.77 1215.06 L2033.36 1215.06 L2033.94 1215.06 L2034.53 1215.06 L2035.12 1215.06 L2035.7 1215.06 L2036.29 1215.06 L2036.88 1215.06 L2037.46 1215.06 L2038.05 1215.06 L2038.64 1215.06 L2039.22 1215.06 L2039.81 1215.06 L2040.4 1215.06 L2040.98 1215.06 L2041.57 1215.06 L2042.15 1215.06 L2042.74 1215.06 L2043.33 1215.06 L2043.91 1215.06 L2044.5 1215.06 L2045.09 1215.06 L2045.67 1215.06 L2046.26 1215.06 L2046.85 1215.06 L2047.43 1215.06 L2048.02 1215.06 L2048.6 1215.06 L2049.19 1215.06 L2049.78 1215.06 L2050.36 1215.06 L2050.95 1215.06 L2051.54 1215.06 L2052.12 1215.06 L2052.71 1215.06 L2053.3 1215.06 L2053.88 1215.06 L2054.47 1215.06 L2055.06 1215.06 L2055.64 1215.06 L2056.23 1215.06 L2056.81 1215.06 L2057.4 1215.06 L2057.99 1215.06 L2058.57 1215.06 L2059.16 1215.06 L2059.75 1215.06 L2060.33 1215.06 L2060.92 1215.06 L2061.51 1215.06 L2062.09 1215.06 L2062.68 1215.06 L2063.27 1215.06 L2063.85 1215.06 L2064.44 1215.06 L2065.02 1215.06 L2065.61 1215.06 L2066.2 1215.06 L2066.78 1215.06 L2067.37 1215.06 L2067.96 1215.06 L2068.54 1215.06 L2069.13 1215.06 L2069.72 1215.06 L2070.3 1215.06 L2070.89 1215.06 L2071.48 1215.06 L2072.06 1215.06 L2072.65 1215.06 L2073.23 1215.06 L2073.82 1215.06 L2074.41 1215.06 L2074.99 1215.06 L2075.58 1215.06 L2076.17 1215.06 L2076.75 1215.06 L2077.34 1215.06 L2077.93 1215.06 L2078.51 1215.06 L2079.1 1215.06 L2079.68 1215.06 L2080.27 1215.06 L2080.86 1215.06 L2081.44 1215.06 L2082.03 1215.06 L2082.62 1215.06 L2083.2 1215.06 L2083.79 1215.06 L2084.38 1215.06 L2084.96 1215.06 L2085.55 1215.06 L2086.14 1215.06 L2086.72 1215.06 L2087.31 1215.06 L2087.89 1215.06 L2088.48 1215.06 L2089.07 1215.06 L2089.65 1215.06 L2090.24 1215.06 L2090.83 1215.06 L2091.41 1215.06 L2092 1215.06 L2092.59 1215.06 L2093.17 1215.06 L2093.76 1215.06 L2094.35 1215.06 L2094.93 1215.06 L2095.52 1215.06 L2096.1 1215.06 L2096.69 1215.06 L2097.28 1215.06 L2097.86 1215.06 L2098.45 1215.06 L2099.04 1215.06 L2099.62 1215.06 L2100.21 1215.06 L2100.8 1215.06 L2101.38 1215.06 L2101.97 1215.06 L2102.55 1215.06 L2103.14 1215.06 L2103.73 1215.06 L2104.31 1215.06 L2104.9 1215.06 L2105.49 1215.06 L2106.07 1215.06 L2106.66 1215.06 L2107.25 1215.06 L2107.83 1215.06 L2108.42 1215.06 L2109.01 1215.06 L2109.59 1215.06 L2110.18 1215.06 L2110.76 1215.06 L2111.35 1215.06 L2111.94 1215.06 L2112.52 1215.06 L2113.11 1215.06 L2113.7 1215.06 L2114.28 1215.06 L2114.87 1215.06 L2115.46 1215.06 L2116.04 1215.06 L2116.63 1215.06 L2117.22 1215.06 L2117.8 1215.06 L2118.39 1215.06 L2118.97 1215.06 L2119.56 1215.06 L2120.15 1215.06 L2120.73 1215.06 L2121.32 1215.06 L2121.91 1215.06 L2122.49 1215.06 L2123.08 1215.06 L2123.67 1215.06 L2124.25 1215.06 L2124.84 1215.06 L2125.42 1215.06 L2126.01 1215.06 L2126.6 1215.06 L2127.18 1215.06 L2127.77 1215.06 L2128.36 1215.06 L2128.94 1215.06 L2129.53 1215.06 L2130.12 1215.06 L2130.7 1215.06 L2131.29 1215.06 L2131.88 1215.06 L2132.46 1215.06 L2133.05 1215.06 L2133.63 1215.06 L2134.22 1215.06 L2134.81 1215.06 L2135.39 1215.06 L2135.98 1215.06 L2136.57 1215.06 L2137.15 1215.06 L2137.74 1215.06 L2138.33 1215.06 L2138.91 1215.06 L2139.5 1215.06 L2140.09 1215.06 L2140.67 1215.06 L2141.26 1215.06 L2141.84 1215.06 L2142.43 1215.06 L2143.02 1215.06 L2143.6 1215.06 L2144.19 1215.06 L2144.78 1215.06 L2145.36 1215.06 L2145.95 1215.06 L2146.54 1215.06 L2147.12 1215.06 L2147.71 1215.06 L2148.3 1215.06 L2148.88 1215.06 L2149.47 1215.06 L2150.05 1215.06 L2150.64 1215.06 L2151.23 1215.06 L2151.81 1215.06 L2152.4 1215.06 L2152.99 1215.06 L2153.57 1215.06 L2154.16 1215.06 L2154.75 1215.06 L2155.33 1215.06 L2155.92 1215.06 L2156.5 1215.06 L2157.09 1215.06 L2157.68 1215.06 L2158.26 1215.06 L2158.26 1214.51 L2157.68 1214.51 L2157.09 1214.51 L2156.5 1214.51 L2155.92 1214.51 L2155.33 1214.51 L2154.75 1214.51 L2154.16 1214.51 L2153.57 1214.51 L2152.99 1214.51 L2152.4 1214.51 L2151.81 1214.51 L2151.23 1214.51 L2150.64 1214.51 L2150.05 1214.51 L2149.47 1214.51 L2148.88 1214.51 L2148.3 1214.51 L2147.71 1214.51 L2147.12 1214.51 L2146.54 1214.51 L2145.95 1214.51 L2145.36 1214.51 L2144.78 1214.51 L2144.19 1214.51 L2143.6 1214.51 L2143.02 1214.51 L2142.43 1214.51 L2141.84 1214.51 L2141.26 1214.51 L2140.67 1214.51 L2140.09 1214.51 L2139.5 1214.51 L2138.91 1214.51 L2138.33 1214.51 L2137.74 1214.51 L2137.15 1214.51 L2136.57 1214.51 L2135.98 1214.51 L2135.39 1214.51 L2134.81 1214.51 L2134.22 1214.51 L2133.63 1214.51 L2133.05 1214.51 L2132.46 1214.51 L2131.88 1214.51 L2131.29 1214.51 L2130.7 1214.51 L2130.12 1214.51 L2129.53 1214.51 L2128.94 1214.51 L2128.36 1214.51 L2127.77 1214.51 L2127.18 1214.51 L2126.6 1214.51 L2126.01 1214.51 L2125.42 1214.51 L2124.84 1214.51 L2124.25 1214.51 L2123.67 1214.51 L2123.08 1214.51 L2122.49 1214.51 L2121.91 1214.51 L2121.32 1214.51 L2120.73 1214.51 L2120.15 1214.51 L2119.56 1214.51 L2118.97 1214.51 L2118.39 1214.51 L2117.8 1214.51 L2117.22 1214.51 L2116.63 1214.51 L2116.04 1214.51 L2115.46 1214.51 L2114.87 1214.51 L2114.28 1214.51 L2113.7 1214.51 L2113.11 1214.51 L2112.52 1214.51 L2111.94 1214.51 L2111.35 1214.51 L2110.76 1214.51 L2110.18 1214.51 L2109.59 1214.51 L2109.01 1214.51 L2108.42 1214.51 L2107.83 1214.51 L2107.25 1214.51 L2106.66 1214.51 L2106.07 1214.51 L2105.49 1214.51 L2104.9 1214.51 L2104.31 1214.51 L2103.73 1214.51 L2103.14 1214.51 L2102.55 1214.51 L2101.97 1214.51 L2101.38 1214.51 L2100.8 1214.51 L2100.21 1214.51 L2099.62 1214.51 L2099.04 1214.51 L2098.45 1214.51 L2097.86 1214.51 L2097.28 1214.51 L2096.69 1214.51 L2096.1 1214.51 L2095.52 1214.51 L2094.93 1214.51 L2094.35 1214.51 L2093.76 1214.51 L2093.17 1214.51 L2092.59 1214.51 L2092 1214.51 L2091.41 1214.51 L2090.83 1214.51 L2090.24 1214.51 L2089.65 1214.51 L2089.07 1214.51 L2088.48 1214.51 L2087.89 1214.51 L2087.31 1214.51 L2086.72 1214.51 L2086.14 1214.51 L2085.55 1214.51 L2084.96 1214.51 L2084.38 1214.51 L2083.79 1214.51 L2083.2 1214.51 L2082.62 1214.51 L2082.03 1214.51 L2081.44 1214.51 L2080.86 1214.51 L2080.27 1214.51 L2079.68 1214.51 L2079.1 1214.51 L2078.51 1214.51 L2077.93 1214.51 L2077.34 1214.51 L2076.75 1214.51 L2076.17 1214.51 L2075.58 1214.51 L2074.99 1214.51 L2074.41 1214.51 L2073.82 1214.51 L2073.23 1214.51 L2072.65 1214.51 L2072.06 1214.51 L2071.48 1214.51 L2070.89 1214.51 L2070.3 1214.51 L2069.72 1214.51 L2069.13 1214.51 L2068.54 1214.51 L2067.96 1214.51 L2067.37 1214.51 L2066.78 1214.51 L2066.2 1214.51 L2065.61 1214.51 L2065.02 1214.51 L2064.44 1214.51 L2063.85 1214.51 L2063.27 1214.51 L2062.68 1214.51 L2062.09 1214.51 L2061.51 1214.51 L2060.92 1214.51 L2060.33 1214.51 L2059.75 1214.51 L2059.16 1214.51 L2058.57 1214.51 L2057.99 1214.51 L2057.4 1214.51 L2056.81 1214.51 L2056.23 1214.51 L2055.64 1214.51 L2055.06 1214.51 L2054.47 1214.51 L2053.88 1214.51 L2053.3 1214.51 L2052.71 1214.51 L2052.12 1214.51 L2051.54 1214.51 L2050.95 1214.51 L2050.36 1214.51 L2049.78 1214.51 L2049.19 1214.51 L2048.6 1214.51 L2048.02 1214.51 L2047.43 1214.51 L2046.85 1214.51 L2046.26 1214.51 L2045.67 1214.51 L2045.09 1214.51 L2044.5 1214.51 L2043.91 1214.51 L2043.33 1214.51 L2042.74 1214.51 L2042.15 1214.51 L2041.57 1214.51 L2040.98 1214.51 L2040.4 1214.51 L2039.81 1214.51 L2039.22 1214.51 L2038.64 1214.51 L2038.05 1214.51 L2037.46 1214.51 L2036.88 1214.51 L2036.29 1214.51 L2035.7 1214.51 L2035.12 1214.51 L2034.53 1214.51 L2033.94 1214.51 L2033.36 1214.51 L2032.77 1214.51 L2032.19 1214.51 L2031.6 1214.51 L2031.01 1214.51 L2030.43 1214.51 L2029.84 1214.51 L2029.25 1214.51 L2028.67 1214.51 L2028.08 1214.51 L2027.49 1214.51 L2026.91 1214.51 L2026.32 1214.51 L2025.73 1214.51 L2025.15 1214.51 L2024.56 1214.51 L2023.98 1214.51 L2023.39 1214.51 L2022.8 1214.51 L2022.22 1214.51 L2021.63 1214.51 L2021.04 1214.51 L2020.46 1214.51 L2019.87 1214.51 L2019.28 1214.51 L2018.7 1214.51 L2018.11 1214.51 L2017.53 1214.51 L2016.94 1214.51 L2016.35 1214.51 L2015.77 1214.51 L2015.18 1214.51 L2014.59 1214.51 L2014.01 1214.51 L2013.42 1214.51 L2012.83 1214.51 L2012.25 1214.51 L2011.66 1214.51 L2011.07 1214.51 L2010.49 1214.51 L2009.9 1214.51 L2009.32 1214.51 L2008.73 1214.51 L2008.14 1214.51 L2007.56 1214.51 L2006.97 1214.51 L2006.38 1214.51 L2005.8 1214.51 L2005.21 1214.51 L2004.62 1214.51 L2004.04 1214.51 L2003.45 1214.51 L2002.86 1214.51 L2002.28 1214.51 L2001.69 1214.51 L2001.11 1214.51 L2000.52 1214.51 L1999.93 1214.51 L1999.35 1214.51 L1998.76 1214.51 L1998.17 1214.51 L1997.59 1214.51 L1997 1214.51 L1996.41 1214.51 L1995.83 1214.51 L1995.24 1214.51 L1994.65 1214.51 L1994.07 1214.51 L1993.48 1214.51 L1992.9 1214.51 L1992.31 1214.51 L1991.72 1214.51 L1991.14 1214.51 L1990.55 1214.51 L1989.96 1214.51 L1989.38 1214.51 L1988.79 1214.51 L1988.2 1214.51 L1987.62 1214.51 L1987.03 1214.51 L1986.45 1214.51 L1985.86 1214.51 L1985.27 1214.51 L1984.69 1214.51 L1984.1 1214.51 L1983.51 1214.51 L1982.93 1214.51 L1982.34 1214.51 L1981.75 1214.51 L1981.17 1214.51 L1980.58 1214.51 L1979.99 1214.51 L1979.41 1214.51 L1978.82 1214.51 L1978.24 1214.51 L1977.65 1214.51 L1977.06 1214.51 L1976.48 1214.51 L1975.89 1214.51 L1975.3 1214.51 L1974.72 1214.51 L1974.13 1214.51 L1973.54 1214.51 L1972.96 1214.51 L1972.37 1214.51 L1971.78 1214.51 L1971.2 1214.51 L1970.61 1214.51 L1970.03 1214.51 L1969.44 1214.51 L1968.85 1214.51 L1968.27 1214.51 L1967.68 1214.51 L1967.09 1214.51 L1966.51 1214.51 L1965.92 1214.51 L1965.33 1214.51 L1964.75 1214.51 L1964.16 1214.51 L1963.58 1214.51 L1962.99 1214.51 L1962.4 1214.51 L1961.82 1214.51 L1961.23 1214.51 L1960.64 1214.51 L1960.06 1214.51 L1959.47 1214.51 L1958.88 1214.51 L1958.3 1214.51 L1957.71 1214.51 L1957.12 1214.51 L1956.54 1214.51 L1955.95 1214.51 L1955.37 1214.51 L1954.78 1214.51 L1954.19 1214.51 L1953.61 1214.51 L1953.02 1214.51 L1952.43 1214.51 L1951.85 1214.51 L1951.26 1214.51 L1950.67 1214.51 L1950.09 1214.51 L1949.5 1214.51 L1948.91 1214.51 L1948.33 1214.51 L1947.74 1214.51 L1947.16 1214.51 L1946.57 1214.51 L1945.98 1214.51 L1945.4 1214.51 L1944.81 1214.51 L1944.22 1214.51 L1943.64 1214.51 L1943.05 1214.51 L1942.46 1214.51 L1941.88 1214.51 L1941.29 1214.51 L1940.71 1214.51 L1940.12 1214.51 L1939.53 1214.51 L1938.95 1214.51 L1938.36 1214.51 L1937.77 1214.51 L1937.19 1214.51 L1936.6 1214.51 L1936.01 1214.51 L1935.43 1214.51 L1934.84 1214.51 L1934.25 1214.51 L1933.67 1214.51 L1933.08 1214.51 L1932.5 1214.51 L1931.91 1214.51 L1931.32 1214.51 L1930.74 1214.51 L1930.15 1214.51 L1929.56 1214.51 L1928.98 1214.51 L1928.39 1214.51 L1927.8 1214.51 L1927.22 1214.51 L1926.63 1214.51 L1926.04 1214.51 L1925.46 1214.51 L1924.87 1214.51 L1924.29 1214.51 L1923.7 1214.51 L1923.11 1214.51 L1922.53 1214.51 L1921.94 1214.51 L1921.35 1214.51 L1920.77 1214.51 L1920.18 1214.51 L1919.59 1214.51 L1919.01 1214.51 L1918.42 1214.51 L1917.83 1214.51 L1917.25 1214.51 L1916.66 1214.51 L1916.08 1214.51 L1915.49 1214.51 L1914.9 1214.51 L1914.32 1214.51 L1913.73 1214.51 L1913.14 1214.51 L1912.56 1214.51 L1911.97 1214.51 L1911.38 1214.51 L1910.8 1214.51 L1910.21 1214.51 L1909.63 1214.51 L1909.04 1214.51 L1908.45 1214.51 L1907.87 1214.51 L1907.28 1214.51 L1906.69 1214.51 L1906.11 1214.51 L1905.52 1214.51 L1904.93 1214.51 L1904.35 1214.51 L1903.76 1214.51 L1903.17 1214.51 L1902.59 1214.51 L1902 1214.51 L1901.42 1214.51 L1900.83 1214.51 L1900.24 1214.51 L1899.66 1214.51 L1899.07 1214.51 L1898.48 1214.51 L1897.9 1214.51 L1897.31 1214.51 L1896.72 1214.51 L1896.14 1214.51 L1895.55 1214.51 L1894.96 1214.51 L1894.38 1214.51 L1893.79 1214.51 L1893.21 1214.51 L1892.62 1214.51 L1892.03 1214.51 L1891.45 1214.51 L1890.86 1214.51 L1890.27 1214.51 L1889.69 1214.51 L1889.1 1214.51 L1888.51 1214.51 L1887.93 1214.51 L1887.34 1214.51 L1886.76 1214.51 L1886.17 1214.51 L1885.58 1214.51 L1885 1214.51 L1884.41 1214.51 L1883.82 1214.51 L1883.24 1214.51 L1882.65 1214.51 L1882.06 1214.51 L1881.48 1214.51 L1880.89 1214.51 L1880.3 1214.51 L1879.72 1214.51 L1879.13 1214.51 L1878.55 1214.51 L1877.96 1214.51 L1877.37 1214.51 L1876.79 1214.51 L1876.2 1214.51 L1875.61 1214.51 L1875.03 1214.51 L1874.44 1214.51 L1873.85 1214.51 L1873.27 1214.51 L1872.68 1214.51 L1872.09 1214.51 L1871.51 1214.51 L1870.92 1214.51 L1870.34 1214.51 L1869.75 1214.51 L1869.16 1214.51 L1868.58 1214.51 L1867.99 1214.51 L1867.4 1214.51 L1866.82 1214.51 L1866.23 1214.51 L1865.64 1214.51 L1865.06 1214.51 L1864.47 1214.51 L1863.88 1214.51 L1863.3 1214.51 L1862.71 1214.51 L1862.13 1214.51 L1861.54 1214.51 L1860.95 1214.51 L1860.37 1214.51 L1859.78 1214.51 L1859.19 1214.51 L1858.61 1214.51 L1858.02 1214.51 L1857.43 1214.51 L1856.85 1214.51 L1856.26 1214.51 L1855.68 1214.51 L1855.09 1214.51 L1854.5 1214.51 L1853.92 1214.51 L1853.33 1214.51 L1852.74 1214.51 L1852.16 1214.51 L1851.57 1214.51 L1850.98 1214.51 L1850.4 1214.51 L1849.81 1214.51 L1849.22 1214.51 L1848.64 1214.51 L1848.05 1214.51 L1847.47 1214.51 L1846.88 1214.51 L1846.29 1214.51 L1845.71 1214.51 L1845.12 1214.51 L1844.53 1214.51 L1843.95 1214.51 L1843.36 1214.51 L1842.77 1214.51 L1842.19 1214.51 L1841.6 1214.51 L1841.01 1214.51 L1840.43 1214.51 L1839.84 1214.51 L1839.26 1214.51 L1838.67 1214.51 L1838.08 1214.51 L1837.5 1214.51 L1836.91 1214.51 L1836.32 1214.51 L1835.74 1214.51 L1835.15 1214.51 L1834.56 1214.51 L1833.98 1214.51 L1833.39 1214.51 L1832.81 1214.51 L1832.22 1214.51 L1831.63 1214.51 L1831.05 1214.51 L1830.46 1214.51 L1829.87 1214.51 L1829.29 1214.51 L1828.7 1214.51 L1828.11 1214.51 L1827.53 1214.51 L1826.94 1214.51 L1826.35 1214.51 L1825.77 1214.51 L1825.18 1214.51 L1824.6 1214.51 L1824.01 1214.51 L1823.42 1214.51 L1822.84 1214.51 L1822.25 1214.51 L1821.66 1214.51 L1821.08 1214.51 L1820.49 1214.51 L1819.9 1214.51 L1819.32 1214.51 L1818.73 1214.51 L1818.14 1214.51 L1817.56 1214.51 L1816.97 1214.51 L1816.39 1214.51 L1815.8 1214.51 L1815.21 1214.51 L1814.63 1214.51 L1814.04 1214.51 L1813.45 1214.51 L1812.87 1214.51 L1812.28 1214.51 L1811.69 1214.51 L1811.11 1214.51 L1810.52 1214.51 L1809.94 1214.51 L1809.35 1214.51 L1808.76 1214.51 L1808.18 1214.51 L1807.59 1214.51 L1807 1214.51 L1806.42 1214.51 L1805.83 1214.51 L1805.24 1214.51 L1804.66 1214.51 L1804.07 1214.51 L1803.48 1214.51 L1802.9 1214.51 L1802.31 1214.51 L1801.73 1214.51 L1801.14 1214.51 L1800.55 1214.51 L1799.97 1214.51 L1799.38 1214.51 L1798.79 1214.51 L1798.21 1214.51 L1797.62 1214.51 L1797.03 1214.51 L1796.45 1214.51 L1795.86 1214.51 L1795.27 1214.51 L1794.69 1214.51 L1794.1 1214.51 L1793.52 1214.51 L1792.93 1214.51 L1792.34 1214.51 L1791.76 1214.51 L1791.17 1214.51 L1790.58 1214.51 L1790 1214.51 L1789.41 1214.51 L1788.82 1214.51 L1788.24 1214.51 L1787.65 1214.51 L1787.06 1214.51 L1786.48 1214.51 L1785.89 1214.51 L1785.31 1214.51 L1784.72 1214.51 L1784.13 1214.51 L1783.55 1214.51 L1782.96 1214.51 L1782.37 1214.51 L1781.79 1214.51 L1781.2 1214.51 L1780.61 1214.51 L1780.03 1214.51 L1779.44 1214.51 L1778.86 1214.51 L1778.27 1214.51 L1777.68 1214.51 L1777.1 1214.51 L1776.51 1214.51 L1775.92 1214.51 L1775.34 1214.51 L1774.75 1214.51 L1774.16 1214.51 L1773.58 1214.51 L1772.99 1214.51 L1772.4 1214.51 L1771.82 1214.51 L1771.23 1214.51 L1770.65 1214.51 L1770.06 1214.51 L1769.47 1214.51 L1768.89 1214.51 L1768.3 1214.51 L1767.71 1214.51 L1767.13 1214.51 L1766.54 1214.51 L1765.95 1214.51 L1765.37 1214.51 L1764.78 1214.51 L1764.19 1214.51 L1763.61 1214.51 L1763.02 1214.51 L1762.44 1214.51 L1761.85 1214.51 L1761.26 1214.51 L1760.68 1214.51 L1760.09 1214.51 L1759.5 1214.51 L1758.92 1214.51 L1758.33 1214.51 L1757.74 1214.51 L1757.16 1214.51 L1756.57 1214.51 L1755.99 1214.51 L1755.4 1214.51 L1754.81 1214.51 L1754.23 1214.51 L1753.64 1214.51 L1753.05 1214.51 L1752.47 1214.51 L1751.88 1214.51 L1751.29 1214.51 L1750.71 1214.51 L1750.12 1214.51 L1749.53 1214.51 L1748.95 1214.51 L1748.36 1214.51 L1747.78 1214.51 L1747.19 1214.51 L1746.6 1214.51 L1746.02 1214.51 L1745.43 1214.51 L1744.84 1214.51 L1744.26 1214.51 L1743.67 1214.51 L1743.08 1214.51 L1742.5 1214.51 L1741.91 1214.51 L1741.32 1214.51 L1740.74 1214.51 L1740.15 1214.51 L1739.57 1214.51 L1738.98 1214.51 L1738.39 1214.51 L1737.81 1214.51 L1737.22 1214.51 L1736.63 1214.51 L1736.05 1214.51 L1735.46 1214.51 L1734.87 1214.51 L1734.29 1214.51 L1733.7 1214.51 L1733.11 1214.51 L1732.53 1214.51 L1731.94 1214.51 L1731.36 1214.51 L1730.77 1214.51 L1730.18 1214.51 L1729.6 1214.51 L1729.01 1214.51 L1728.42 1214.51 L1727.84 1214.51 L1727.25 1214.51 L1726.66 1214.51 L1726.08 1214.51 L1725.49 1214.51 L1724.91 1214.51 L1724.32 1214.51 L1723.73 1214.51 L1723.15 1214.51 L1722.56 1214.51 L1721.97 1214.51 L1721.39 1214.51 L1720.8 1214.51 L1720.21 1214.51 L1719.63 1214.51 L1719.04 1214.51 L1718.45 1214.51 L1717.87 1214.51 L1717.28 1214.51 L1716.7 1214.51 L1716.11 1214.51 L1715.52 1214.51 L1714.94 1214.51 L1714.35 1214.51 L1713.76 1214.51 L1713.18 1214.51 L1712.59 1214.51 L1712 1214.51 L1711.42 1214.51 L1710.83 1214.51 L1710.24 1214.51 L1709.66 1214.51 L1709.07 1214.51 L1708.49 1214.51 L1707.9 1214.51 L1707.31 1214.51 L1706.73 1214.51 L1706.14 1214.51 L1705.55 1214.51 L1704.97 1214.51 L1704.38 1214.51 L1703.79 1214.51 L1703.21 1214.51 L1702.62 1214.51 L1702.04 1214.51 L1701.45 1214.51 L1700.86 1214.51 L1700.28 1214.51 L1699.69 1214.51 L1699.1 1214.51 L1698.52 1214.51 L1697.93 1214.51 L1697.34 1214.51 L1696.76 1214.51 L1696.17 1214.51 L1695.58 1214.51 L1695 1214.51 L1694.41 1214.51 L1693.83 1214.51 L1693.24 1214.51 L1692.65 1214.51 L1692.07 1214.51 L1691.48 1214.51 L1690.89 1214.51 L1690.31 1214.51 L1689.72 1214.51 L1689.13 1214.51 L1688.55 1214.51 L1687.96 1214.51 L1687.37 1214.51 L1686.79 1214.51 L1686.2 1214.51 L1685.62 1214.51 L1685.03 1214.51 L1684.44 1214.51 L1683.86 1214.51 L1683.27 1214.51 L1682.68 1214.51 L1682.1 1214.51 L1681.51 1214.51 L1680.92 1214.51 L1680.34 1214.51 L1679.75 1214.51 L1679.17 1214.51 L1678.58 1214.51 L1677.99 1214.51 L1677.41 1214.51 L1676.82 1214.51 L1676.23 1214.51 L1675.65 1214.51 L1675.06 1214.51 L1674.47 1214.51 L1673.89 1214.51 L1673.3 1214.51 L1672.71 1214.51 L1672.13 1214.51 L1671.54 1214.51 L1670.96 1214.51 L1670.37 1214.51 L1669.78 1214.51 L1669.2 1214.51 L1668.61 1214.51 L1668.02 1214.51 L1667.44 1214.51 L1666.85 1214.51 L1666.26 1214.51 L1665.68 1214.51 L1665.09 1214.51 L1664.5 1214.51 L1663.92 1214.51 L1663.33 1214.51 L1662.75 1214.51 L1662.16 1214.51 L1661.57 1214.51 L1660.99 1214.51 L1660.4 1214.51 L1659.81 1214.51 L1659.23 1214.51 L1658.64 1214.51 L1658.05 1214.51 L1657.47 1214.51 L1656.88 1214.51 L1656.29 1214.51 L1655.71 1214.51 L1655.12 1214.51 L1654.54 1214.51 L1653.95 1214.51 L1653.36 1214.51 L1652.78 1214.51 L1652.19 1214.51 L1651.6 1214.51 L1651.02 1214.51 L1650.43 1214.51 L1649.84 1214.51 L1649.26 1214.51 L1648.67 1214.51 L1648.09 1214.51 L1647.5 1214.51 L1646.91 1214.51 L1646.33 1214.51 L1645.74 1214.51 L1645.15 1214.51 L1644.57 1214.51 L1643.98 1214.51 L1643.39 1214.51 L1642.81 1214.51 L1642.22 1214.51 L1641.63 1214.51 L1641.05 1214.51 L1640.46 1214.51 L1639.88 1214.51 L1639.29 1214.51 L1638.7 1214.51 L1638.12 1214.51 L1637.53 1214.51 L1636.94 1214.51 L1636.36 1214.51 L1635.77 1214.51 L1635.18 1214.51 L1634.6 1214.51 L1634.01 1214.51 L1633.42 1214.51 L1632.84 1214.51 L1632.25 1214.51 L1631.67 1214.51 L1631.08 1214.51 L1630.49 1214.51 L1629.91 1214.51 L1629.32 1214.51 L1628.73 1214.51 L1628.15 1214.51 L1627.56 1214.51 L1626.97 1214.51 L1626.39 1214.51 L1625.8 1214.51 L1625.22 1214.51 L1624.63 1214.51 L1624.04 1214.51 L1623.46 1214.51 L1622.87 1214.51 L1622.28 1214.51 L1621.7 1214.51 L1621.11 1214.51 L1620.52 1214.51 L1619.94 1214.51 L1619.35 1214.51 L1618.76 1214.51 L1618.18 1214.51 L1617.59 1214.51 L1617.01 1214.51 L1616.42 1214.51 L1615.83 1214.51 L1615.25 1214.51 L1614.66 1214.51 L1614.07 1214.51 L1613.49 1214.51 L1612.9 1214.51 L1612.31 1214.51 L1611.73 1214.51 L1611.14 1214.51 L1610.55 1214.51 L1609.97 1214.51 L1609.38 1214.51 L1608.8 1214.51 L1608.21 1214.51 L1607.62 1214.51 L1607.04 1214.51 L1606.45 1214.51 L1605.86 1214.51 L1605.28 1214.51 L1604.69 1214.51 L1604.1 1214.51 L1603.52 1214.51 L1602.93 1214.51 L1602.34 1214.51 L1601.76 1214.51 L1601.17 1214.51 L1600.59 1214.51 L1600 1214.51 L1599.41 1214.51 L1598.83 1214.51 L1598.24 1214.51 L1597.65 1214.51 L1597.07 1214.51 L1596.48 1214.51 L1595.89 1214.51 L1595.31 1214.51 L1594.72 1214.51 L1594.14 1214.51 L1593.55 1214.51 L1592.96 1214.51 L1592.38 1214.51 L1591.79 1214.51 L1591.2 1214.51 L1590.62 1214.51 L1590.03 1214.51 L1589.44 1214.51 L1588.86 1214.51 L1588.27 1214.51 L1587.68 1214.51 L1587.1 1214.51 L1586.51 1214.51 L1585.93 1214.51 L1585.34 1214.51 L1584.75 1214.51 L1584.17 1214.51 L1583.58 1214.51 L1582.99 1214.51 L1582.41 1214.51 L1581.82 1214.51 L1581.23 1214.51 L1580.65 1214.51 L1580.06 1214.51 L1579.47 1214.51 L1578.89 1214.51 L1578.3 1214.51 L1577.72 1214.51 L1577.13 1214.51 L1576.54 1214.51 L1575.96 1214.51 L1575.37 1214.51 L1574.78 1214.51 L1574.2 1214.51 L1573.61 1214.51 L1573.02 1214.51 L1572.44 1214.51 L1571.85 1214.51 L1571.27 1214.51 L1570.68 1214.51 L1570.09 1214.51 L1569.51 1214.51 L1568.92 1214.51 L1568.33 1214.51 L1567.75 1214.51 L1567.16 1214.51 L1566.57 1214.51 L1565.99 1214.51 L1565.4 1214.51 L1564.81 1214.51 L1564.23 1214.51 L1563.64 1214.51 L1563.06 1214.51 L1562.47 1214.51 L1561.88 1214.51 L1561.3 1214.51 L1560.71 1214.51 L1560.12 1214.51 L1559.54 1214.51 L1558.95 1214.51 L1558.36 1214.51 L1557.78 1214.51 L1557.19 1214.51 L1556.6 1214.51 L1556.02 1214.51 L1555.43 1214.51 L1554.85 1214.51 L1554.26 1214.51 L1553.67 1214.51 L1553.09 1214.51 L1552.5 1214.51 L1551.91 1214.51 L1551.33 1214.51 L1550.74 1214.51 L1550.15 1214.51 L1549.57 1214.51 L1548.98 1214.51 L1548.4 1214.51 L1547.81 1214.51 L1547.22 1214.51 L1546.64 1214.51 L1546.05 1214.51 L1545.46 1214.51 L1544.88 1214.51 L1544.29 1214.51 L1543.7 1214.51 L1543.12 1214.51 L1542.53 1214.51 L1541.94 1214.51 L1541.36 1214.51 L1540.77 1214.51 L1540.19 1214.51 L1539.6 1214.51 L1539.01 1214.51 L1538.43 1214.51 L1537.84 1214.51 L1537.25 1214.51 L1536.67 1214.51 L1536.08 1214.51 L1535.49 1214.51 L1534.91 1214.51 L1534.32 1214.51 L1533.73 1214.51 L1533.15 1214.51 L1532.56 1214.51 L1531.98 1214.51 L1531.39 1214.51 L1530.8 1214.51 L1530.22 1214.51 L1529.63 1214.51 L1529.04 1214.51 L1528.46 1214.51 L1527.87 1214.51 L1527.28 1214.51 L1526.7 1214.51 L1526.11 1214.51 L1525.52 1214.51 L1524.94 1214.51 L1524.35 1214.51 L1523.77 1214.51 L1523.18 1214.51 L1522.59 1214.51 L1522.01 1214.51 L1521.42 1214.51 L1520.83 1214.51 L1520.25 1214.51 L1519.66 1214.51 L1519.07 1214.51 L1518.49 1214.51 L1517.9 1214.51 L1517.32 1214.51 L1516.73 1214.51 L1516.14 1214.51 L1515.56 1214.51 L1514.97 1214.51 L1514.38 1214.51 L1513.8 1214.51 L1513.21 1214.51 L1512.62 1214.51 L1512.04 1214.51 L1511.45 1214.51 L1510.86 1214.51 L1510.28 1214.51 L1509.69 1214.51 L1509.11 1214.51 L1508.52 1214.51 L1507.93 1214.51 L1507.35 1214.51 L1506.76 1214.51 L1506.17 1214.51 L1505.59 1214.51 L1505 1214.51 L1504.41 1214.51 L1503.83 1214.51 L1503.24 1214.51 L1502.65 1214.51 L1502.07 1214.51 L1501.48 1214.51 L1500.9 1214.51 L1500.31 1214.51 L1499.72 1214.51 L1499.14 1214.51 L1498.55 1214.51 L1497.96 1214.51 L1497.38 1214.51 L1496.79 1214.51 L1496.2 1214.51 L1495.62 1214.51 L1495.03 1214.51 L1494.45 1214.51 L1493.86 1214.51 L1493.27 1214.51 L1492.69 1214.51 L1492.1 1214.51 L1491.51 1214.51 L1490.93 1214.51 L1490.34 1214.51 L1489.75 1214.51 L1489.17 1214.51 L1488.58 1214.51 L1487.99 1214.51 L1487.41 1214.51 L1486.82 1214.51 L1486.24 1214.51 L1485.65 1214.51 L1485.06 1214.51 L1484.48 1214.51 L1483.89 1214.51 L1483.3 1214.51 L1482.72 1214.51 L1482.13 1214.51 L1481.54 1214.51 L1480.96 1214.51 L1480.37 1214.51 L1479.78 1214.51 L1479.2 1214.51 L1478.61 1214.51 L1478.03 1214.51 L1477.44 1214.51 L1476.85 1214.51 L1476.27 1214.51 L1475.68 1214.51 L1475.09 1214.51 L1474.51 1214.51 L1473.92 1214.51 L1473.33 1214.51 L1472.75 1214.51 L1472.16 1214.51 L1471.57 1214.51 L1470.99 1214.51 L1470.4 1214.51 L1469.82 1214.51 L1469.23 1214.51 L1468.64 1214.51 L1468.06 1214.51 L1467.47 1214.51 L1466.88 1214.51 L1466.3 1214.51 L1465.71 1214.51 L1465.12 1214.51 L1464.54 1214.51 L1463.95 1214.51 L1463.37 1214.51 L1462.78 1214.51 L1462.19 1214.51 L1461.61 1214.51 L1461.02 1214.51 L1460.43 1214.51 L1459.85 1214.51 L1459.26 1214.51 L1458.67 1214.51 L1458.09 1214.51 L1457.5 1214.51 L1456.91 1214.51 L1456.33 1214.51 L1455.74 1214.51 L1455.16 1214.51 L1454.57 1214.51 L1453.98 1214.51 L1453.4 1214.51 L1452.81 1214.51 L1452.22 1214.51 L1451.64 1214.51 L1451.05 1214.51 L1450.46 1214.51 L1449.88 1214.51 L1449.29 1214.51 L1448.7 1214.51 L1448.12 1214.51 L1447.53 1214.51 L1446.95 1214.51 L1446.36 1214.51 L1445.77 1214.51 L1445.19 1214.51 L1444.6 1214.51 L1444.01 1214.51 L1443.43 1214.51 L1442.84 1214.51 L1442.25 1214.51 L1441.67 1214.51 L1441.08 1214.51 L1440.5 1214.51 L1439.91 1214.51 L1439.32 1214.51 L1438.74 1214.51 L1438.15 1214.51 L1437.56 1214.51 L1436.98 1214.51 L1436.39 1214.51 L1435.8 1214.51 L1435.22 1214.51 L1434.63 1214.51 L1434.04 1214.51 L1433.46 1214.51 L1432.87 1214.51 L1432.29 1214.51 L1431.7 1214.51 L1431.11 1214.51 L1430.53 1214.51 L1429.94 1214.51 L1429.35 1214.51 L1428.77 1214.51 L1428.18 1214.51 L1427.59 1214.51 L1427.01 1214.51 L1426.42 1214.51 L1425.83 1214.51 L1425.25 1214.51 L1424.66 1214.51 L1424.08 1214.51 L1423.49 1214.51 L1422.9 1214.51 L1422.32 1214.51 L1421.73 1214.51 L1421.14 1214.51 L1420.56 1214.51 L1419.97 1214.51 L1419.38 1214.51 L1418.8 1214.51 L1418.21 1214.51 L1417.63 1214.51 L1417.04 1214.51 L1416.45 1214.51 L1415.87 1214.51 L1415.28 1214.51 L1414.69 1214.51 L1414.11 1214.51 L1413.52 1214.51 L1412.93 1214.51 L1412.35 1214.51 L1411.76 1214.51 L1411.17 1214.51 L1410.59 1214.51 L1410 1214.51 L1409.42 1214.51 L1408.83 1214.51 L1408.24 1214.51 L1407.66 1214.51 L1407.07 1214.51 L1406.48 1214.51 L1405.9 1214.51 L1405.31 1214.51 L1404.72 1214.51 L1404.14 1214.51 L1403.55 1214.51 L1402.96 1214.51 L1402.38 1214.51 L1401.79 1214.51 L1401.21 1214.51 L1400.62 1214.51 L1400.03 1214.51 L1399.45 1214.51 L1398.86 1214.51 L1398.27 1214.51 L1397.69 1214.51 L1397.1 1214.51 L1396.51 1214.51 L1395.93 1214.51 L1395.34 1214.51 L1394.75 1214.51 L1394.17 1214.51 L1393.58 1214.51 L1393 1214.51 L1392.41 1214.51 L1391.82 1214.51 L1391.24 1214.51 L1390.65 1214.51 L1390.06 1214.51 L1389.48 1214.51 L1388.89 1214.51 L1388.3 1214.51 L1387.72 1214.51 L1387.13 1214.51 L1386.55 1214.51 L1385.96 1214.51 L1385.37 1214.51 L1384.79 1214.51 L1384.2 1214.51 L1383.61 1214.51 L1383.03 1214.51 L1382.44 1214.51 L1381.85 1214.51 L1381.27 1214.51 L1380.68 1214.51 L1380.09 1214.51 L1379.51 1214.51 L1378.92 1214.51 L1378.34 1214.51 L1377.75 1214.51 L1377.16 1214.51 L1376.58 1214.51 L1375.99 1214.51 L1375.4 1214.51 L1374.82 1214.51 L1374.23 1214.51 L1373.64 1214.51 L1373.06 1214.51 L1372.47 1214.51 L1371.88 1214.51 L1371.3 1214.51 L1370.71 1214.51 L1370.13 1214.51 L1369.54 1214.51 L1368.95 1214.51 L1368.37 1214.51 L1367.78 1214.51 L1367.19 1214.51 L1366.61 1214.51 L1366.02 1214.51 L1365.43 1214.51 L1364.85 1214.51 L1364.26 1214.51 L1363.68 1214.51 L1363.09 1214.51 L1362.5 1214.51 L1361.92 1214.51 L1361.33 1214.51 L1360.74 1214.51 L1360.16 1214.51 L1359.57 1214.51 L1358.98 1214.51 L1358.4 1214.51 L1357.81 1214.51 L1357.22 1214.51 L1356.64 1214.51 L1356.05 1214.51 L1355.47 1214.51 L1354.88 1214.51 L1354.29 1214.51 L1353.71 1214.51 L1353.12 1214.51 L1352.53 1214.51 L1351.95 1214.51 L1351.36 1214.51 L1350.77 1214.51 L1350.19 1214.51 L1349.6 1214.51 L1349.01 1214.51 L1348.43 1214.51 L1347.84 1214.51 L1347.26 1214.51 L1346.67 1214.51 L1346.08 1214.51 L1345.5 1214.51 L1344.91 1214.51 L1344.32 1214.51 L1343.74 1214.51 L1343.15 1214.51 L1342.56 1214.51 L1341.98 1214.51 L1341.39 1214.51 L1340.8 1214.51 L1340.22 1214.51 L1339.63 1214.51 L1339.05 1214.51 L1338.46 1214.51 L1337.87 1214.51 L1337.29 1214.51 L1336.7 1214.51 L1336.11 1214.51 L1335.53 1214.51 L1334.94 1214.51 L1334.35 1214.51 L1333.77 1214.51 L1333.18 1214.51 L1332.6 1214.51 L1332.01 1214.51 L1331.42 1214.51 L1330.84 1214.51 L1330.25 1214.51 L1329.66 1214.51 L1329.08 1214.51 L1328.49 1214.51 L1327.9 1214.51 L1327.32 1214.51 L1326.73 1214.51 L1326.14 1214.51 L1325.56 1214.51 L1324.97 1214.51 L1324.39 1214.51 L1323.8 1214.51 L1323.21 1214.51 L1322.63 1214.51 L1322.04 1214.51 L1321.45 1214.51 L1320.87 1214.51 L1320.28 1214.51 L1319.69 1214.51 L1319.11 1214.51 L1318.52 1214.51 L1317.93 1214.51 L1317.35 1214.51 L1316.76 1214.51 L1316.18 1214.51 L1315.59 1214.51 L1315 1214.51 L1314.42 1214.51 L1313.83 1214.51 L1313.24 1214.51 L1312.66 1214.51 L1312.07 1214.51 L1311.48 1214.51 L1310.9 1214.51 L1310.31 1214.51 L1309.73 1214.51 L1309.14 1214.51 L1308.55 1214.51 L1307.97 1214.51 L1307.38 1214.51 L1306.79 1214.51 L1306.21 1214.51 L1305.62 1214.51 L1305.03 1214.51 L1304.45 1214.51 L1303.86 1214.51 L1303.27 1214.51 L1302.69 1214.51 L1302.1 1214.51 L1301.52 1214.51 L1300.93 1214.51 L1300.34 1214.51 L1299.76 1214.51 L1299.17 1214.51 L1298.58 1214.51 L1298 1214.51 L1297.41 1214.51 L1296.82 1214.51 L1296.24 1214.51 L1295.65 1214.51 L1295.06 1214.51 L1294.48 1214.51 L1293.89 1214.51 L1293.31 1214.51 L1292.72 1214.51 L1292.13 1214.51 L1291.55 1214.51 L1290.96 1214.51 L1290.37 1214.51 L1289.79 1214.51 L1289.2 1214.51 L1288.61 1214.51 L1288.03 1214.51 L1287.44 1214.51 L1286.86 1214.51 L1286.27 1214.51 L1285.68 1214.51 L1285.1 1214.51 L1284.51 1214.51 L1283.92 1214.51 L1283.34 1214.51 L1282.75 1214.51 L1282.16 1214.51 L1281.58 1214.51 L1280.99 1214.51 L1280.4 1214.51 L1279.82 1214.51 L1279.23 1214.51 L1278.65 1214.51 L1278.06 1214.51 L1277.47 1214.51 L1276.89 1214.51 L1276.3 1214.51 L1275.71 1214.51 L1275.13 1214.51 L1274.54 1214.51 L1273.95 1214.51 L1273.37 1214.51 L1272.78 1214.51 L1272.19 1214.51 L1271.61 1214.51 L1271.02 1214.51 L1270.44 1214.51 L1269.85 1214.51 L1269.26 1214.51 L1268.68 1214.51 L1268.09 1214.51 L1267.5 1214.51 L1266.92 1214.51 L1266.33 1214.51 L1265.74 1214.51 L1265.16 1214.51 L1264.57 1214.51 L1263.98 1214.51 L1263.4 1214.51 L1262.81 1214.51 L1262.23 1214.51 L1261.64 1214.51 L1261.05 1214.51 L1260.47 1214.51 L1259.88 1214.51 L1259.29 1214.51 L1258.71 1214.51 L1258.12 1214.51 L1257.53 1214.51 L1256.95 1214.51 L1256.36 1214.51 L1255.78 1214.51 L1255.19 1214.51 L1254.6 1214.51 L1254.02 1214.51 L1253.43 1214.51 L1252.84 1214.51 L1252.26 1214.51 L1251.67 1214.51 L1251.08 1214.51 L1250.5 1214.51 L1249.91 1214.51 L1249.32 1214.51 L1248.74 1214.51 L1248.15 1214.51 L1247.57 1214.51 L1246.98 1214.51 L1246.39 1214.51 L1245.81 1214.51 L1245.22 1214.51 L1244.63 1214.51 L1244.05 1214.51 L1243.46 1214.51 L1242.87 1214.51 L1242.29 1214.51 L1241.7 1214.51 L1241.11 1214.51 L1240.53 1214.51 L1239.94 1214.51 L1239.36 1214.51 L1238.77 1214.51 L1238.18 1214.51 L1237.6 1214.51 L1237.01 1214.51 L1236.42 1214.51 L1235.84 1214.51 L1235.25 1214.51 L1234.66 1214.51 L1234.08 1214.51 L1233.49 1214.51 L1232.91 1214.51 L1232.32 1214.51 L1231.73 1214.51 L1231.15 1214.51 L1230.56 1214.51 L1229.97 1214.51 L1229.39 1214.51 L1228.8 1214.51 L1228.21 1214.51 L1227.63 1214.51 L1227.04 1214.51 L1226.45 1214.51 L1225.87 1214.51 L1225.28 1214.51 L1224.7 1214.51 L1224.11 1214.51 L1223.52 1214.51 L1222.94 1214.51 L1222.35 1214.51 L1221.76 1214.51 L1221.18 1214.51 L1220.59 1214.51 L1220 1214.51 L1219.42 1214.51 L1218.83 1214.51 L1218.24 1214.51 L1217.66 1214.51 L1217.07 1214.51 L1216.49 1214.51 L1215.9 1214.51 L1215.31 1214.51 L1214.73 1214.51 L1214.14 1214.51 L1213.55 1214.51 L1212.97 1214.51 L1212.38 1214.51 L1211.79 1214.51 L1211.21 1214.51 L1210.62 1214.51 L1210.03 1214.51 L1209.45 1214.51 L1208.86 1214.51 L1208.28 1214.51 L1207.69 1214.51 L1207.1 1214.51 L1206.52 1214.51 L1205.93 1214.51 L1205.34 1214.51 L1204.76 1214.51 L1204.17 1214.51 L1203.58 1214.51 L1203 1214.51 L1202.41 1214.51 L1201.83 1214.51 L1201.24 1214.51 L1200.65 1214.51 L1200.07 1214.51 L1199.48 1214.51 L1198.89 1214.51 L1198.31 1214.51 L1197.72 1214.51 L1197.13 1214.51 L1196.55 1214.51 L1195.96 1214.51 L1195.37 1214.51 L1194.79 1214.51 L1194.2 1214.51 L1193.62 1214.51 L1193.03 1214.51 L1192.44 1214.51 L1191.86 1214.51 L1191.27 1214.51 L1190.68 1214.51 L1190.1 1214.51 L1189.51 1214.51 L1188.92 1214.51 L1188.34 1214.51 L1187.75 1214.51 L1187.16 1214.51 L1186.58 1214.51 L1185.99 1214.51 L1185.41 1214.51 L1184.82 1214.51 L1184.23 1214.51 L1183.65 1214.51 L1183.06 1214.51 L1182.47 1214.51 L1181.89 1214.51 L1181.3 1214.51 L1180.71 1214.51 L1180.13 1214.51 L1179.54 1214.51 L1178.96 1214.51 L1178.37 1214.51 L1177.78 1214.51 L1177.2 1214.51 L1176.61 1214.51 L1176.02 1214.51 L1175.44 1214.51 L1174.85 1214.51 L1174.26 1214.51 L1173.68 1214.51 L1173.09 1214.51 L1172.5 1214.51 L1171.92 1214.51 L1171.33 1214.51 L1170.75 1214.51 L1170.16 1214.51 L1169.57 1214.51 L1168.99 1214.51 L1168.4 1214.51 L1167.81 1214.51 L1167.23 1214.51 L1166.64 1214.51 L1166.05 1214.51 L1165.47 1214.51 L1164.88 1214.51 L1164.29 1214.51 L1163.71 1214.51 L1163.12 1214.51 L1162.54 1214.51 L1161.95 1214.51 L1161.36 1214.51 L1160.78 1214.51 L1160.19 1214.51 L1159.6 1214.51 L1159.02 1214.51 L1158.43 1214.51 L1157.84 1214.51 L1157.26 1214.51 L1156.67 1214.51 L1156.09 1214.51 L1155.5 1214.51 L1154.91 1214.51 L1154.33 1214.51 L1153.74 1214.51 L1153.15 1214.51 L1152.57 1214.51 L1151.98 1214.51 L1151.39 1214.51 L1150.81 1214.51 L1150.22 1214.51 L1149.63 1214.51 L1149.05 1214.51 L1148.46 1214.51 L1147.88 1214.51 L1147.29 1214.51 L1146.7 1214.51 L1146.12 1214.51 L1145.53 1214.51 L1144.94 1214.51 L1144.36 1214.51 L1143.77 1214.51 L1143.18 1214.51 L1142.6 1214.51 L1142.01 1214.51 L1141.42 1214.51 L1140.84 1214.51 L1140.25 1214.51 L1139.67 1214.51 L1139.08 1214.51 L1138.49 1214.51 L1137.91 1214.51 L1137.32 1214.51 L1136.73 1214.51 L1136.15 1214.51 L1135.56 1214.51 L1134.97 1214.51 L1134.39 1214.51 L1133.8 1214.51 L1133.21 1214.51 L1132.63 1214.51 L1132.04 1214.51 L1131.46 1214.51 L1130.87 1214.51 L1130.28 1214.51 L1129.7 1214.51 L1129.11 1214.51 L1128.52 1214.51 L1127.94 1214.51 L1127.35 1214.51 L1126.76 1214.51 L1126.18 1214.51 L1125.59 1214.51 L1125.01 1214.51 L1124.42 1214.51 L1123.83 1214.51 L1123.25 1214.51 L1122.66 1214.51 L1122.07 1214.51 L1121.49 1214.51 L1120.9 1214.51 L1120.31 1214.51 L1119.73 1214.51 L1119.14 1214.51 L1118.55 1214.51 L1117.97 1214.51 L1117.38 1214.51 L1116.8 1214.51 L1116.21 1214.51 L1115.62 1214.51 L1115.04 1214.51 L1114.45 1214.51 L1113.86 1214.51 L1113.28 1214.51 L1112.69 1214.51 L1112.1 1214.51 L1111.52 1214.51 L1110.93 1214.51 L1110.34 1214.51 L1109.76 1214.51 L1109.17 1214.51 L1108.59 1214.51 L1108 1214.51 L1107.41 1214.51 L1106.83 1214.51 L1106.24 1214.51 L1105.65 1214.51 L1105.07 1214.51 L1104.48 1214.51 L1103.89 1214.51 L1103.31 1214.51 L1102.72 1214.51 L1102.14 1214.51 L1101.55 1214.51 L1100.96 1214.51 L1100.38 1214.51 L1099.79 1214.51 L1099.2 1214.51 L1098.62 1214.51 L1098.03 1214.51 L1097.44 1214.51 L1096.86 1214.51 L1096.27 1214.51 L1095.68 1214.51 L1095.1 1214.51 L1094.51 1214.51 L1093.93 1214.51 L1093.34 1214.51 L1092.75 1214.51 L1092.17 1214.51 L1091.58 1214.51 L1090.99 1214.51 L1090.41 1214.51 L1089.82 1214.51 L1089.23 1214.51 L1088.65 1214.51 L1088.06 1214.51 L1087.47 1214.51 L1086.89 1214.51 L1086.3 1214.51 L1085.72 1214.51 L1085.13 1214.51 L1084.54 1214.51 L1083.96 1214.51 L1083.37 1214.51 L1082.78 1214.51 L1082.2 1214.51 L1081.61 1214.51 L1081.02 1214.51 L1080.44 1214.51 L1079.85 1214.51 L1079.26 1214.51 L1078.68 1214.51 L1078.09 1214.51 L1077.51 1214.51 L1076.92 1214.51 L1076.33 1214.51 L1075.75 1214.51 L1075.16 1214.51 L1074.57 1214.51 L1073.99 1214.51 L1073.4 1214.51 L1072.81 1214.51 L1072.23 1214.51 L1071.64 1214.51 L1071.06 1214.51 L1070.47 1214.51 L1069.88 1214.51 L1069.3 1214.51 L1068.71 1214.51 L1068.12 1214.51 L1067.54 1214.51 L1066.95 1214.51 L1066.36 1214.51 L1065.78 1214.51 L1065.19 1214.51 L1064.6 1214.51 L1064.02 1214.51 L1063.43 1214.51 L1062.85 1214.51 L1062.26 1214.51 L1061.67 1214.51 L1061.09 1214.51 L1060.5 1214.51 L1059.91 1214.51 L1059.33 1214.51 L1058.74 1214.51 L1058.15 1214.51 L1057.57 1214.51 L1056.98 1214.51 L1056.39 1214.51 L1055.81 1214.51 L1055.22 1214.51 L1054.64 1214.51 L1054.05 1214.51 L1053.46 1214.51 L1052.88 1214.51 L1052.29 1214.51 L1051.7 1214.51 L1051.12 1214.51 L1050.53 1214.51 L1049.94 1214.51 L1049.36 1214.51 L1048.77 1214.51 L1048.19 1214.51 L1047.6 1214.51 L1047.01 1214.51 L1046.43 1214.51 L1045.84 1214.51 L1045.25 1214.51 L1044.67 1214.51 L1044.08 1214.51 L1043.49 1214.51 L1042.91 1214.51 L1042.32 1214.51 L1041.73 1214.51 L1041.15 1214.51 L1040.56 1214.51 L1039.98 1214.51 L1039.39 1214.51 L1038.8 1214.51 L1038.22 1214.51 L1037.63 1214.51 L1037.04 1214.51 L1036.46 1214.51 L1035.87 1214.51 L1035.28 1214.51 L1034.7 1214.51 L1034.11 1214.51 L1033.52 1214.51 L1032.94 1214.51 L1032.35 1214.51 L1031.77 1214.51 L1031.18 1214.51 L1030.59 1214.51 L1030.01 1214.51 L1029.42 1214.51 L1028.83 1214.51 L1028.25 1214.51 L1027.66 1214.51 L1027.07 1214.51 L1026.49 1214.51 L1025.9 1214.51 L1025.32 1214.51 L1024.73 1214.51 L1024.14 1214.51 L1023.56 1214.51 L1022.97 1214.51 L1022.38 1214.51 L1021.8 1214.51 L1021.21 1214.51 L1020.62 1214.51 L1020.04 1214.51 L1019.45 1214.51 L1018.86 1214.51 L1018.28 1214.51 L1017.69 1214.51 L1017.11 1214.51 L1016.52 1214.51 L1015.93 1214.51 L1015.35 1214.51 L1014.76 1214.51 L1014.17 1214.51 L1013.59 1214.51 L1013 1214.51 L1012.41 1214.51 L1011.83 1214.51 L1011.24 1214.51 L1010.65 1214.51 L1010.07 1214.51 L1009.48 1214.51 L1008.9 1214.51 L1008.31 1214.51 L1007.72 1214.51 L1007.14 1214.51 L1006.55 1214.51 L1005.96 1214.51 L1005.38 1214.51 L1004.79 1214.51 L1004.2 1214.51 L1003.62 1214.51 L1003.03 1214.51 L1002.44 1214.51 L1001.86 1214.51 L1001.27 1214.51 L1000.69 1214.51 L1000.1 1214.51 L999.513 1214.51 L998.926 1214.51 L998.34 1214.51 L997.754 1214.51 L997.167 1214.51 L996.581 1214.51 L995.994 1214.51 L995.408 1214.51 L994.822 1214.51 L994.235 1214.51 L993.649 1214.51 L993.062 1214.51 L992.476 1214.51 L991.889 1214.51 L991.303 1214.51 L990.717 1214.51 L990.13 1214.51 L989.544 1214.51 L988.957 1214.51 L988.371 1214.51 L987.785 1214.51 L987.198 1214.51 L986.612 1214.51 L986.025 1214.51  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.78 986.612,1214.78 987.198,1214.78 987.785,1214.78 988.371,1214.78 988.957,1214.78 989.544,1214.78 990.13,1214.78 990.717,1214.78 991.303,1214.78 991.889,1214.78 992.476,1214.78 993.062,1214.78 993.649,1214.78 994.235,1214.78 994.822,1214.78 995.408,1214.78 995.994,1214.78 996.581,1214.78 997.167,1214.78 997.754,1214.78 998.34,1214.78 998.926,1214.78 999.513,1214.78 1000.1,1214.78 1000.69,1214.78 1001.27,1214.78 1001.86,1214.78 1002.44,1214.78 1003.03,1214.78 1003.62,1214.78 1004.2,1214.78 1004.79,1214.78 1005.38,1214.78 1005.96,1214.78 1006.55,1214.78 1007.14,1214.78 1007.72,1214.78 1008.31,1214.78 1008.9,1214.78 1009.48,1214.78 1010.07,1214.78 1010.65,1214.78 1011.24,1214.78 1011.83,1214.78 1012.41,1214.78 1013,1214.78 1013.59,1214.78 1014.17,1214.78 1014.76,1214.78 1015.35,1214.78 1015.93,1214.78 1016.52,1214.78 1017.11,1214.78 1017.69,1214.78 1018.28,1214.78 1018.86,1214.78 1019.45,1214.78 1020.04,1214.78 1020.62,1214.78 1021.21,1214.78 1021.8,1214.78 1022.38,1214.78 1022.97,1214.78 1023.56,1214.78 1024.14,1214.78 1024.73,1214.78 1025.32,1214.78 1025.9,1214.78 1026.49,1214.78 1027.07,1214.78 1027.66,1214.78 1028.25,1214.78 1028.83,1214.78 1029.42,1214.78 1030.01,1214.78 1030.59,1214.78 1031.18,1214.78 1031.77,1214.78 1032.35,1214.78 1032.94,1214.78 1033.52,1214.78 1034.11,1214.78 1034.7,1214.78 1035.28,1214.78 1035.87,1214.78 1036.46,1214.78 1037.04,1214.78 1037.63,1214.78 1038.22,1214.78 1038.8,1214.78 1039.39,1214.78 1039.98,1214.78 1040.56,1214.78 1041.15,1214.78 1041.73,1214.78 1042.32,1214.78 1042.91,1214.78 1043.49,1214.78 1044.08,1214.78 1044.67,1214.78 1045.25,1214.78 1045.84,1214.78 1046.43,1214.78 1047.01,1214.78 1047.6,1214.78 1048.19,1214.78 1048.77,1214.78 1049.36,1214.78 1049.94,1214.78 1050.53,1214.78 1051.12,1214.78 1051.7,1214.78 1052.29,1214.78 1052.88,1214.78 1053.46,1214.78 1054.05,1214.78 1054.64,1214.78 1055.22,1214.78 1055.81,1214.78 1056.39,1214.78 1056.98,1214.78 1057.57,1214.78 1058.15,1214.78 1058.74,1214.78 1059.33,1214.78 1059.91,1214.78 1060.5,1214.78 1061.09,1214.78 1061.67,1214.78 1062.26,1214.78 1062.85,1214.78 1063.43,1214.78 1064.02,1214.78 1064.6,1214.78 1065.19,1214.78 1065.78,1214.78 1066.36,1214.78 1066.95,1214.78 1067.54,1214.78 1068.12,1214.78 1068.71,1214.78 1069.3,1214.78 1069.88,1214.78 1070.47,1214.78 1071.06,1214.78 1071.64,1214.78 1072.23,1214.78 1072.81,1214.78 1073.4,1214.78 1073.99,1214.78 1074.57,1214.78 1075.16,1214.78 1075.75,1214.78 1076.33,1214.78 1076.92,1214.78 1077.51,1214.78 1078.09,1214.78 1078.68,1214.78 1079.26,1214.78 1079.85,1214.78 1080.44,1214.78 1081.02,1214.78 1081.61,1214.78 1082.2,1214.78 1082.78,1214.78 1083.37,1214.78 1083.96,1214.78 1084.54,1214.78 1085.13,1214.78 1085.72,1214.78 1086.3,1214.78 1086.89,1214.78 1087.47,1214.78 1088.06,1214.78 1088.65,1214.78 1089.23,1214.78 1089.82,1214.78 1090.41,1214.78 1090.99,1214.78 1091.58,1214.78 1092.17,1214.78 1092.75,1214.78 1093.34,1214.78 1093.93,1214.78 1094.51,1214.78 1095.1,1214.78 1095.68,1214.78 1096.27,1214.78 1096.86,1214.78 1097.44,1214.78 1098.03,1214.78 1098.62,1214.78 1099.2,1214.78 1099.79,1214.78 1100.38,1214.78 1100.96,1214.78 1101.55,1214.78 1102.14,1214.78 1102.72,1214.78 1103.31,1214.78 1103.89,1214.78 1104.48,1214.78 1105.07,1214.78 1105.65,1214.78 1106.24,1214.78 1106.83,1214.78 1107.41,1214.78 1108,1214.78 1108.59,1214.78 1109.17,1214.78 1109.76,1214.78 1110.34,1214.78 1110.93,1214.78 1111.52,1214.78 1112.1,1214.78 1112.69,1214.78 1113.28,1214.78 1113.86,1214.78 1114.45,1214.78 1115.04,1214.78 1115.62,1214.78 1116.21,1214.78 1116.8,1214.78 1117.38,1214.78 1117.97,1214.78 1118.55,1214.78 1119.14,1214.78 1119.73,1214.78 1120.31,1214.78 1120.9,1214.78 1121.49,1214.78 1122.07,1214.78 1122.66,1214.78 1123.25,1214.78 1123.83,1214.78 1124.42,1214.78 1125.01,1214.78 1125.59,1214.78 1126.18,1214.78 1126.76,1214.78 1127.35,1214.78 1127.94,1214.78 1128.52,1214.78 1129.11,1214.78 1129.7,1214.78 1130.28,1214.78 1130.87,1214.78 1131.46,1214.78 1132.04,1214.78 1132.63,1214.78 1133.21,1214.78 1133.8,1214.78 1134.39,1214.78 1134.97,1214.78 1135.56,1214.78 1136.15,1214.78 1136.73,1214.78 1137.32,1214.78 1137.91,1214.78 1138.49,1214.78 1139.08,1214.78 1139.67,1214.78 1140.25,1214.78 1140.84,1214.78 1141.42,1214.78 1142.01,1214.78 1142.6,1214.78 1143.18,1214.78 1143.77,1214.78 1144.36,1214.78 1144.94,1214.78 1145.53,1214.78 1146.12,1214.78 1146.7,1214.78 1147.29,1214.78 1147.88,1214.78 1148.46,1214.78 1149.05,1214.78 1149.63,1214.78 1150.22,1214.78 1150.81,1214.78 1151.39,1214.78 1151.98,1214.78 1152.57,1214.78 1153.15,1214.78 1153.74,1214.78 1154.33,1214.78 1154.91,1214.78 1155.5,1214.78 1156.09,1214.78 1156.67,1214.78 1157.26,1214.78 1157.84,1214.78 1158.43,1214.78 1159.02,1214.78 1159.6,1214.78 1160.19,1214.78 1160.78,1214.78 1161.36,1214.78 1161.95,1214.78 1162.54,1214.78 1163.12,1214.78 1163.71,1214.78 1164.29,1214.78 1164.88,1214.78 1165.47,1214.78 1166.05,1214.78 1166.64,1214.78 1167.23,1214.78 1167.81,1214.78 1168.4,1214.78 1168.99,1214.78 1169.57,1214.78 1170.16,1214.78 1170.75,1214.78 1171.33,1214.78 1171.92,1214.78 1172.5,1214.78 1173.09,1214.78 1173.68,1214.78 1174.26,1214.78 1174.85,1214.78 1175.44,1214.78 1176.02,1214.78 1176.61,1214.78 1177.2,1214.78 1177.78,1214.78 1178.37,1214.78 1178.96,1214.78 1179.54,1214.78 1180.13,1214.78 1180.71,1214.78 1181.3,1214.78 1181.89,1214.78 1182.47,1214.78 1183.06,1214.78 1183.65,1214.78 1184.23,1214.78 1184.82,1214.78 1185.41,1214.78 1185.99,1214.78 1186.58,1214.78 1187.16,1214.78 1187.75,1214.78 1188.34,1214.78 1188.92,1214.78 1189.51,1214.78 1190.1,1214.78 1190.68,1214.78 1191.27,1214.78 1191.86,1214.78 1192.44,1214.78 1193.03,1214.78 1193.62,1214.78 1194.2,1214.78 1194.79,1214.78 1195.37,1214.78 1195.96,1214.78 1196.55,1214.78 1197.13,1214.78 1197.72,1214.78 1198.31,1214.78 1198.89,1214.78 1199.48,1214.78 1200.07,1214.78 1200.65,1214.78 1201.24,1214.78 1201.83,1214.78 1202.41,1214.78 1203,1214.78 1203.58,1214.78 1204.17,1214.78 1204.76,1214.78 1205.34,1214.78 1205.93,1214.78 1206.52,1214.78 1207.1,1214.78 1207.69,1214.78 1208.28,1214.78 1208.86,1214.78 1209.45,1214.78 1210.03,1214.78 1210.62,1214.78 1211.21,1214.78 1211.79,1214.78 1212.38,1214.78 1212.97,1214.78 1213.55,1214.78 1214.14,1214.78 1214.73,1214.78 1215.31,1214.78 1215.9,1214.78 1216.49,1214.78 1217.07,1214.78 1217.66,1214.78 1218.24,1214.78 1218.83,1214.78 1219.42,1214.78 1220,1214.78 1220.59,1214.78 1221.18,1214.78 1221.76,1214.78 1222.35,1214.78 1222.94,1214.78 1223.52,1214.78 1224.11,1214.78 1224.7,1214.78 1225.28,1214.78 1225.87,1214.78 1226.45,1214.78 1227.04,1214.78 1227.63,1214.78 1228.21,1214.78 1228.8,1214.78 1229.39,1214.78 1229.97,1214.78 1230.56,1214.78 1231.15,1214.78 1231.73,1214.78 1232.32,1214.78 1232.91,1214.78 1233.49,1214.78 1234.08,1214.78 1234.66,1214.78 1235.25,1214.78 1235.84,1214.78 1236.42,1214.78 1237.01,1214.78 1237.6,1214.78 1238.18,1214.78 1238.77,1214.78 1239.36,1214.78 1239.94,1214.78 1240.53,1214.78 1241.11,1214.78 1241.7,1214.78 1242.29,1214.78 1242.87,1214.78 1243.46,1214.78 1244.05,1214.78 1244.63,1214.78 1245.22,1214.78 1245.81,1214.78 1246.39,1214.78 1246.98,1214.78 1247.57,1214.78 1248.15,1214.78 1248.74,1214.78 1249.32,1214.78 1249.91,1214.78 1250.5,1214.78 1251.08,1214.78 1251.67,1214.78 1252.26,1214.78 1252.84,1214.78 1253.43,1214.78 1254.02,1214.78 1254.6,1214.78 1255.19,1214.78 1255.78,1214.78 1256.36,1214.78 1256.95,1214.78 1257.53,1214.78 1258.12,1214.78 1258.71,1214.78 1259.29,1214.78 1259.88,1214.78 1260.47,1214.78 1261.05,1214.78 1261.64,1214.78 1262.23,1214.78 1262.81,1214.78 1263.4,1214.78 1263.98,1214.78 1264.57,1214.78 1265.16,1214.78 1265.74,1214.78 1266.33,1214.78 1266.92,1214.78 1267.5,1214.78 1268.09,1214.78 1268.68,1214.78 1269.26,1214.78 1269.85,1214.78 1270.44,1214.78 1271.02,1214.78 1271.61,1214.78 1272.19,1214.78 1272.78,1214.78 1273.37,1214.78 1273.95,1214.78 1274.54,1214.78 1275.13,1214.78 1275.71,1214.78 1276.3,1214.78 1276.89,1214.78 1277.47,1214.78 1278.06,1214.78 1278.65,1214.78 1279.23,1214.78 1279.82,1214.78 1280.4,1214.78 1280.99,1214.78 1281.58,1214.78 1282.16,1214.78 1282.75,1214.78 1283.34,1214.78 1283.92,1214.78 1284.51,1214.78 1285.1,1214.78 1285.68,1214.78 1286.27,1214.78 1286.86,1214.78 1287.44,1214.78 1288.03,1214.78 1288.61,1214.78 1289.2,1214.78 1289.79,1214.78 1290.37,1214.78 1290.96,1214.78 1291.55,1214.78 1292.13,1214.78 1292.72,1214.78 1293.31,1214.78 1293.89,1214.78 1294.48,1214.78 1295.06,1214.78 1295.65,1214.78 1296.24,1214.78 1296.82,1214.78 1297.41,1214.78 1298,1214.78 1298.58,1214.78 1299.17,1214.78 1299.76,1214.78 1300.34,1214.78 1300.93,1214.78 1301.52,1214.78 1302.1,1214.78 1302.69,1214.78 1303.27,1214.78 1303.86,1214.78 1304.45,1214.78 1305.03,1214.78 1305.62,1214.78 1306.21,1214.78 1306.79,1214.78 1307.38,1214.78 1307.97,1214.78 1308.55,1214.78 1309.14,1214.78 1309.73,1214.78 1310.31,1214.78 1310.9,1214.78 1311.48,1214.78 1312.07,1214.78 1312.66,1214.78 1313.24,1214.78 1313.83,1214.78 1314.42,1214.78 1315,1214.78 1315.59,1214.78 1316.18,1214.78 1316.76,1214.78 1317.35,1214.78 1317.93,1214.78 1318.52,1214.78 1319.11,1214.78 1319.69,1214.78 1320.28,1214.78 1320.87,1214.78 1321.45,1214.78 1322.04,1214.78 1322.63,1214.78 1323.21,1214.78 1323.8,1214.78 1324.39,1214.78 1324.97,1214.78 1325.56,1214.78 1326.14,1214.78 1326.73,1214.78 1327.32,1214.78 1327.9,1214.78 1328.49,1214.78 1329.08,1214.78 1329.66,1214.78 1330.25,1214.78 1330.84,1214.78 1331.42,1214.78 1332.01,1214.78 1332.6,1214.78 1333.18,1214.78 1333.77,1214.78 1334.35,1214.78 1334.94,1214.78 1335.53,1214.78 1336.11,1214.78 1336.7,1214.78 1337.29,1214.78 1337.87,1214.78 1338.46,1214.78 1339.05,1214.78 1339.63,1214.78 1340.22,1214.78 1340.8,1214.78 1341.39,1214.78 1341.98,1214.78 1342.56,1214.78 1343.15,1214.78 1343.74,1214.78 1344.32,1214.78 1344.91,1214.78 1345.5,1214.78 1346.08,1214.78 1346.67,1214.78 1347.26,1214.78 1347.84,1214.78 1348.43,1214.78 1349.01,1214.78 1349.6,1214.78 1350.19,1214.78 1350.77,1214.78 1351.36,1214.78 1351.95,1214.78 1352.53,1214.78 1353.12,1214.78 1353.71,1214.78 1354.29,1214.78 1354.88,1214.78 1355.47,1214.78 1356.05,1214.78 1356.64,1214.78 1357.22,1214.78 1357.81,1214.78 1358.4,1214.78 1358.98,1214.78 1359.57,1214.78 1360.16,1214.78 1360.74,1214.78 1361.33,1214.78 1361.92,1214.78 1362.5,1214.78 1363.09,1214.78 1363.68,1214.78 1364.26,1214.78 1364.85,1214.78 1365.43,1214.78 1366.02,1214.78 1366.61,1214.78 1367.19,1214.78 1367.78,1214.78 1368.37,1214.78 1368.95,1214.78 1369.54,1214.78 1370.13,1214.78 1370.71,1214.78 1371.3,1214.78 1371.88,1214.78 1372.47,1214.78 1373.06,1214.78 1373.64,1214.78 1374.23,1214.78 1374.82,1214.78 1375.4,1214.78 1375.99,1214.78 1376.58,1214.78 1377.16,1214.78 1377.75,1214.78 1378.34,1214.78 1378.92,1214.78 1379.51,1214.78 1380.09,1214.78 1380.68,1214.78 1381.27,1214.78 1381.85,1214.78 1382.44,1214.78 1383.03,1214.78 1383.61,1214.78 1384.2,1214.78 1384.79,1214.78 1385.37,1214.78 1385.96,1214.78 1386.55,1214.78 1387.13,1214.78 1387.72,1214.78 1388.3,1214.78 1388.89,1214.78 1389.48,1214.78 1390.06,1214.78 1390.65,1214.78 1391.24,1214.78 1391.82,1214.78 1392.41,1214.78 1393,1214.78 1393.58,1214.78 1394.17,1214.78 1394.75,1214.78 1395.34,1214.78 1395.93,1214.78 1396.51,1214.78 1397.1,1214.78 1397.69,1214.78 1398.27,1214.78 1398.86,1214.78 1399.45,1214.78 1400.03,1214.78 1400.62,1214.78 1401.21,1214.78 1401.79,1214.78 1402.38,1214.78 1402.96,1214.78 1403.55,1214.78 1404.14,1214.78 1404.72,1214.78 1405.31,1214.78 1405.9,1214.78 1406.48,1214.78 1407.07,1214.78 1407.66,1214.78 1408.24,1214.78 1408.83,1214.78 1409.42,1214.78 1410,1214.78 1410.59,1214.78 1411.17,1214.78 1411.76,1214.78 1412.35,1214.78 1412.93,1214.78 1413.52,1214.78 1414.11,1214.78 1414.69,1214.78 1415.28,1214.78 1415.87,1214.78 1416.45,1214.78 1417.04,1214.78 1417.63,1214.78 1418.21,1214.78 1418.8,1214.78 1419.38,1214.78 1419.97,1214.78 1420.56,1214.78 1421.14,1214.78 1421.73,1214.78 1422.32,1214.78 1422.9,1214.78 1423.49,1214.78 1424.08,1214.78 1424.66,1214.78 1425.25,1214.78 1425.83,1214.78 1426.42,1214.78 1427.01,1214.78 1427.59,1214.78 1428.18,1214.78 1428.77,1214.78 1429.35,1214.78 1429.94,1214.78 1430.53,1214.78 1431.11,1214.78 1431.7,1214.78 1432.29,1214.78 1432.87,1214.78 1433.46,1214.78 1434.04,1214.78 1434.63,1214.78 1435.22,1214.78 1435.8,1214.78 1436.39,1214.78 1436.98,1214.78 1437.56,1214.78 1438.15,1214.78 1438.74,1214.78 1439.32,1214.78 1439.91,1214.78 1440.5,1214.78 1441.08,1214.78 1441.67,1214.78 1442.25,1214.78 1442.84,1214.78 1443.43,1214.78 1444.01,1214.78 1444.6,1214.78 1445.19,1214.78 1445.77,1214.78 1446.36,1214.78 1446.95,1214.78 1447.53,1214.78 1448.12,1214.78 1448.7,1214.78 1449.29,1214.78 1449.88,1214.78 1450.46,1214.78 1451.05,1214.78 1451.64,1214.78 1452.22,1214.78 1452.81,1214.78 1453.4,1214.78 1453.98,1214.78 1454.57,1214.78 1455.16,1214.78 1455.74,1214.78 1456.33,1214.78 1456.91,1214.78 1457.5,1214.78 1458.09,1214.78 1458.67,1214.78 1459.26,1214.78 1459.85,1214.78 1460.43,1214.78 1461.02,1214.78 1461.61,1214.78 1462.19,1214.78 1462.78,1214.78 1463.37,1214.78 1463.95,1214.78 1464.54,1214.78 1465.12,1214.78 1465.71,1214.78 1466.3,1214.78 1466.88,1214.78 1467.47,1214.78 1468.06,1214.78 1468.64,1214.78 1469.23,1214.78 1469.82,1214.78 1470.4,1214.78 1470.99,1214.78 1471.57,1214.78 1472.16,1214.78 1472.75,1214.78 1473.33,1214.78 1473.92,1214.78 1474.51,1214.78 1475.09,1214.78 1475.68,1214.78 1476.27,1214.78 1476.85,1214.78 1477.44,1214.78 1478.03,1214.78 1478.61,1214.78 1479.2,1214.78 1479.78,1214.78 1480.37,1214.78 1480.96,1214.78 1481.54,1214.78 1482.13,1214.78 1482.72,1214.78 1483.3,1214.78 1483.89,1214.78 1484.48,1214.78 1485.06,1214.78 1485.65,1214.78 1486.24,1214.78 1486.82,1214.78 1487.41,1214.78 1487.99,1214.78 1488.58,1214.78 1489.17,1214.78 1489.75,1214.78 1490.34,1214.78 1490.93,1214.78 1491.51,1214.78 1492.1,1214.78 1492.69,1214.78 1493.27,1214.78 1493.86,1214.78 1494.45,1214.78 1495.03,1214.78 1495.62,1214.78 1496.2,1214.78 1496.79,1214.78 1497.38,1214.78 1497.96,1214.78 1498.55,1214.78 1499.14,1214.78 1499.72,1214.78 1500.31,1214.78 1500.9,1214.78 1501.48,1214.78 1502.07,1214.78 1502.65,1214.78 1503.24,1214.78 1503.83,1214.78 1504.41,1214.78 1505,1214.78 1505.59,1214.78 1506.17,1214.78 1506.76,1214.78 1507.35,1214.78 1507.93,1214.78 1508.52,1214.78 1509.11,1214.78 1509.69,1214.78 1510.28,1214.78 1510.86,1214.78 1511.45,1214.78 1512.04,1214.78 1512.62,1214.78 1513.21,1214.78 1513.8,1214.78 1514.38,1214.78 1514.97,1214.78 1515.56,1214.78 1516.14,1214.78 1516.73,1214.78 1517.32,1214.78 1517.9,1214.78 1518.49,1214.78 1519.07,1214.78 1519.66,1214.78 1520.25,1214.78 1520.83,1214.78 1521.42,1214.78 1522.01,1214.78 1522.59,1214.78 1523.18,1214.78 1523.77,1214.78 1524.35,1214.78 1524.94,1214.78 1525.52,1214.78 1526.11,1214.78 1526.7,1214.78 1527.28,1214.78 1527.87,1214.78 1528.46,1214.78 1529.04,1214.78 1529.63,1214.78 1530.22,1214.78 1530.8,1214.78 1531.39,1214.78 1531.98,1214.78 1532.56,1214.78 1533.15,1214.78 1533.73,1214.78 1534.32,1214.78 1534.91,1214.78 1535.49,1214.78 1536.08,1214.78 1536.67,1214.78 1537.25,1214.78 1537.84,1214.78 1538.43,1214.78 1539.01,1214.78 1539.6,1214.78 1540.19,1214.78 1540.77,1214.78 1541.36,1214.78 1541.94,1214.78 1542.53,1214.78 1543.12,1214.78 1543.7,1214.78 1544.29,1214.78 1544.88,1214.78 1545.46,1214.78 1546.05,1214.78 1546.64,1214.78 1547.22,1214.78 1547.81,1214.78 1548.4,1214.78 1548.98,1214.78 1549.57,1214.78 1550.15,1214.78 1550.74,1214.78 1551.33,1214.78 1551.91,1214.78 1552.5,1214.78 1553.09,1214.78 1553.67,1214.78 1554.26,1214.78 1554.85,1214.78 1555.43,1214.78 1556.02,1214.78 1556.6,1214.78 1557.19,1214.78 1557.78,1214.78 1558.36,1214.78 1558.95,1214.78 1559.54,1214.78 1560.12,1214.78 1560.71,1214.78 1561.3,1214.78 1561.88,1214.78 1562.47,1214.78 1563.06,1214.78 1563.64,1214.78 1564.23,1214.78 1564.81,1214.78 1565.4,1214.78 1565.99,1214.78 1566.57,1214.78 1567.16,1214.78 1567.75,1214.78 1568.33,1214.78 1568.92,1214.78 1569.51,1214.78 1570.09,1214.78 1570.68,1214.78 1571.27,1214.78 1571.85,1214.78 1572.44,1214.78 1573.02,1214.78 1573.61,1214.78 1574.2,1214.78 1574.78,1214.78 1575.37,1214.78 1575.96,1214.78 1576.54,1214.78 1577.13,1214.78 1577.72,1214.78 1578.3,1214.78 1578.89,1214.78 1579.47,1214.78 1580.06,1214.78 1580.65,1214.78 1581.23,1214.78 1581.82,1214.78 1582.41,1214.78 1582.99,1214.78 1583.58,1214.78 1584.17,1214.78 1584.75,1214.78 1585.34,1214.78 1585.93,1214.78 1586.51,1214.78 1587.1,1214.78 1587.68,1214.78 1588.27,1214.78 1588.86,1214.78 1589.44,1214.78 1590.03,1214.78 1590.62,1214.78 1591.2,1214.78 1591.79,1214.78 1592.38,1214.78 1592.96,1214.78 1593.55,1214.78 1594.14,1214.78 1594.72,1214.78 1595.31,1214.78 1595.89,1214.78 1596.48,1214.78 1597.07,1214.78 1597.65,1214.78 1598.24,1214.78 1598.83,1214.78 1599.41,1214.78 1600,1214.78 1600.59,1214.78 1601.17,1214.78 1601.76,1214.78 1602.34,1214.78 1602.93,1214.78 1603.52,1214.78 1604.1,1214.78 1604.69,1214.78 1605.28,1214.78 1605.86,1214.78 1606.45,1214.78 1607.04,1214.78 1607.62,1214.78 1608.21,1214.78 1608.8,1214.78 1609.38,1214.78 1609.97,1214.78 1610.55,1214.78 1611.14,1214.78 1611.73,1214.78 1612.31,1214.78 1612.9,1214.78 1613.49,1214.78 1614.07,1214.78 1614.66,1214.78 1615.25,1214.78 1615.83,1214.78 1616.42,1214.78 1617.01,1214.78 1617.59,1214.78 1618.18,1214.78 1618.76,1214.78 1619.35,1214.78 1619.94,1214.78 1620.52,1214.78 1621.11,1214.78 1621.7,1214.78 1622.28,1214.78 1622.87,1214.78 1623.46,1214.78 1624.04,1214.78 1624.63,1214.78 1625.22,1214.78 1625.8,1214.78 1626.39,1214.78 1626.97,1214.78 1627.56,1214.78 1628.15,1214.78 1628.73,1214.78 1629.32,1214.78 1629.91,1214.78 1630.49,1214.78 1631.08,1214.78 1631.67,1214.78 1632.25,1214.78 1632.84,1214.78 1633.42,1214.78 1634.01,1214.78 1634.6,1214.78 1635.18,1214.78 1635.77,1214.78 1636.36,1214.78 1636.94,1214.78 1637.53,1214.78 1638.12,1214.78 1638.7,1214.78 1639.29,1214.78 1639.88,1214.78 1640.46,1214.78 1641.05,1214.78 1641.63,1214.78 1642.22,1214.78 1642.81,1214.78 1643.39,1214.78 1643.98,1214.78 1644.57,1214.78 1645.15,1214.78 1645.74,1214.78 1646.33,1214.78 1646.91,1214.78 1647.5,1214.78 1648.09,1214.78 1648.67,1214.78 1649.26,1214.78 1649.84,1214.78 1650.43,1214.78 1651.02,1214.78 1651.6,1214.78 1652.19,1214.78 1652.78,1214.78 1653.36,1214.78 1653.95,1214.78 1654.54,1214.78 1655.12,1214.78 1655.71,1214.78 1656.29,1214.78 1656.88,1214.78 1657.47,1214.78 1658.05,1214.78 1658.64,1214.78 1659.23,1214.78 1659.81,1214.78 1660.4,1214.78 1660.99,1214.78 1661.57,1214.78 1662.16,1214.78 1662.75,1214.78 1663.33,1214.78 1663.92,1214.78 1664.5,1214.78 1665.09,1214.78 1665.68,1214.78 1666.26,1214.78 1666.85,1214.78 1667.44,1214.78 1668.02,1214.78 1668.61,1214.78 1669.2,1214.78 1669.78,1214.78 1670.37,1214.78 1670.96,1214.78 1671.54,1214.78 1672.13,1214.78 1672.71,1214.78 1673.3,1214.78 1673.89,1214.78 1674.47,1214.78 1675.06,1214.78 1675.65,1214.78 1676.23,1214.78 1676.82,1214.78 1677.41,1214.78 1677.99,1214.78 1678.58,1214.78 1679.17,1214.78 1679.75,1214.78 1680.34,1214.78 1680.92,1214.78 1681.51,1214.78 1682.1,1214.78 1682.68,1214.78 1683.27,1214.78 1683.86,1214.78 1684.44,1214.78 1685.03,1214.78 1685.62,1214.78 1686.2,1214.78 1686.79,1214.78 1687.37,1214.78 1687.96,1214.78 1688.55,1214.78 1689.13,1214.78 1689.72,1214.78 1690.31,1214.78 1690.89,1214.78 1691.48,1214.78 1692.07,1214.78 1692.65,1214.78 1693.24,1214.78 1693.83,1214.78 1694.41,1214.78 1695,1214.78 1695.58,1214.78 1696.17,1214.78 1696.76,1214.78 1697.34,1214.78 1697.93,1214.78 1698.52,1214.78 1699.1,1214.78 1699.69,1214.78 1700.28,1214.78 1700.86,1214.78 1701.45,1214.78 1702.04,1214.78 1702.62,1214.78 1703.21,1214.78 1703.79,1214.78 1704.38,1214.78 1704.97,1214.78 1705.55,1214.78 1706.14,1214.78 1706.73,1214.78 1707.31,1214.78 1707.9,1214.78 1708.49,1214.78 1709.07,1214.78 1709.66,1214.78 1710.24,1214.78 1710.83,1214.78 1711.42,1214.78 1712,1214.78 1712.59,1214.78 1713.18,1214.78 1713.76,1214.78 1714.35,1214.78 1714.94,1214.78 1715.52,1214.78 1716.11,1214.78 1716.7,1214.78 1717.28,1214.78 1717.87,1214.78 1718.45,1214.78 1719.04,1214.78 1719.63,1214.78 1720.21,1214.78 1720.8,1214.78 1721.39,1214.78 1721.97,1214.78 1722.56,1214.78 1723.15,1214.78 1723.73,1214.78 1724.32,1214.78 1724.91,1214.78 1725.49,1214.78 1726.08,1214.78 1726.66,1214.78 1727.25,1214.78 1727.84,1214.78 1728.42,1214.78 1729.01,1214.78 1729.6,1214.78 1730.18,1214.78 1730.77,1214.78 1731.36,1214.78 1731.94,1214.78 1732.53,1214.78 1733.11,1214.78 1733.7,1214.78 1734.29,1214.78 1734.87,1214.78 1735.46,1214.78 1736.05,1214.78 1736.63,1214.78 1737.22,1214.78 1737.81,1214.78 1738.39,1214.78 1738.98,1214.78 1739.57,1214.78 1740.15,1214.78 1740.74,1214.78 1741.32,1214.78 1741.91,1214.78 1742.5,1214.78 1743.08,1214.78 1743.67,1214.78 1744.26,1214.78 1744.84,1214.78 1745.43,1214.78 1746.02,1214.78 1746.6,1214.78 1747.19,1214.78 1747.78,1214.78 1748.36,1214.78 1748.95,1214.78 1749.53,1214.78 1750.12,1214.78 1750.71,1214.78 1751.29,1214.78 1751.88,1214.78 1752.47,1214.78 1753.05,1214.78 1753.64,1214.78 1754.23,1214.78 1754.81,1214.78 1755.4,1214.78 1755.99,1214.78 1756.57,1214.78 1757.16,1214.78 1757.74,1214.78 1758.33,1214.78 1758.92,1214.78 1759.5,1214.78 1760.09,1214.78 1760.68,1214.78 1761.26,1214.78 1761.85,1214.78 1762.44,1214.78 1763.02,1214.78 1763.61,1214.78 1764.19,1214.78 1764.78,1214.78 1765.37,1214.78 1765.95,1214.78 1766.54,1214.78 1767.13,1214.78 1767.71,1214.78 1768.3,1214.78 1768.89,1214.78 1769.47,1214.78 1770.06,1214.78 1770.65,1214.78 1771.23,1214.78 1771.82,1214.78 1772.4,1214.78 1772.99,1214.78 1773.58,1214.78 1774.16,1214.78 1774.75,1214.78 1775.34,1214.78 1775.92,1214.78 1776.51,1214.78 1777.1,1214.78 1777.68,1214.78 1778.27,1214.78 1778.86,1214.78 1779.44,1214.78 1780.03,1214.78 1780.61,1214.78 1781.2,1214.78 1781.79,1214.78 1782.37,1214.78 1782.96,1214.78 1783.55,1214.78 1784.13,1214.78 1784.72,1214.78 1785.31,1214.78 1785.89,1214.78 1786.48,1214.78 1787.06,1214.78 1787.65,1214.78 1788.24,1214.78 1788.82,1214.78 1789.41,1214.78 1790,1214.78 1790.58,1214.78 1791.17,1214.78 1791.76,1214.78 1792.34,1214.78 1792.93,1214.78 1793.52,1214.78 1794.1,1214.78 1794.69,1214.78 1795.27,1214.78 1795.86,1214.78 1796.45,1214.78 1797.03,1214.78 1797.62,1214.78 1798.21,1214.78 1798.79,1214.78 1799.38,1214.78 1799.97,1214.78 1800.55,1214.78 1801.14,1214.78 1801.73,1214.78 1802.31,1214.78 1802.9,1214.78 1803.48,1214.78 1804.07,1214.78 1804.66,1214.78 1805.24,1214.78 1805.83,1214.78 1806.42,1214.78 1807,1214.78 1807.59,1214.78 1808.18,1214.78 1808.76,1214.78 1809.35,1214.78 1809.94,1214.78 1810.52,1214.78 1811.11,1214.78 1811.69,1214.78 1812.28,1214.78 1812.87,1214.78 1813.45,1214.78 1814.04,1214.78 1814.63,1214.78 1815.21,1214.78 1815.8,1214.78 1816.39,1214.78 1816.97,1214.78 1817.56,1214.78 1818.14,1214.78 1818.73,1214.78 1819.32,1214.78 1819.9,1214.78 1820.49,1214.78 1821.08,1214.78 1821.66,1214.78 1822.25,1214.78 1822.84,1214.78 1823.42,1214.78 1824.01,1214.78 1824.6,1214.78 1825.18,1214.78 1825.77,1214.78 1826.35,1214.78 1826.94,1214.78 1827.53,1214.78 1828.11,1214.78 1828.7,1214.78 1829.29,1214.78 1829.87,1214.78 1830.46,1214.78 1831.05,1214.78 1831.63,1214.78 1832.22,1214.78 1832.81,1214.78 1833.39,1214.78 1833.98,1214.78 1834.56,1214.78 1835.15,1214.78 1835.74,1214.78 1836.32,1214.78 1836.91,1214.78 1837.5,1214.78 1838.08,1214.78 1838.67,1214.78 1839.26,1214.78 1839.84,1214.78 1840.43,1214.78 1841.01,1214.78 1841.6,1214.78 1842.19,1214.78 1842.77,1214.78 1843.36,1214.78 1843.95,1214.78 1844.53,1214.78 1845.12,1214.78 1845.71,1214.78 1846.29,1214.78 1846.88,1214.78 1847.47,1214.78 1848.05,1214.78 1848.64,1214.78 1849.22,1214.78 1849.81,1214.78 1850.4,1214.78 1850.98,1214.78 1851.57,1214.78 1852.16,1214.78 1852.74,1214.78 1853.33,1214.78 1853.92,1214.78 1854.5,1214.78 1855.09,1214.78 1855.68,1214.78 1856.26,1214.78 1856.85,1214.78 1857.43,1214.78 1858.02,1214.78 1858.61,1214.78 1859.19,1214.78 1859.78,1214.78 1860.37,1214.78 1860.95,1214.78 1861.54,1214.78 1862.13,1214.78 1862.71,1214.78 1863.3,1214.78 1863.88,1214.78 1864.47,1214.78 1865.06,1214.78 1865.64,1214.78 1866.23,1214.78 1866.82,1214.78 1867.4,1214.78 1867.99,1214.78 1868.58,1214.78 1869.16,1214.78 1869.75,1214.78 1870.34,1214.78 1870.92,1214.78 1871.51,1214.78 1872.09,1214.78 1872.68,1214.78 1873.27,1214.78 1873.85,1214.78 1874.44,1214.78 1875.03,1214.78 1875.61,1214.78 1876.2,1214.78 1876.79,1214.78 1877.37,1214.78 1877.96,1214.78 1878.55,1214.78 1879.13,1214.78 1879.72,1214.78 1880.3,1214.78 1880.89,1214.78 1881.48,1214.78 1882.06,1214.78 1882.65,1214.78 1883.24,1214.78 1883.82,1214.78 1884.41,1214.78 1885,1214.78 1885.58,1214.78 1886.17,1214.78 1886.76,1214.78 1887.34,1214.78 1887.93,1214.78 1888.51,1214.78 1889.1,1214.78 1889.69,1214.78 1890.27,1214.78 1890.86,1214.78 1891.45,1214.78 1892.03,1214.78 1892.62,1214.78 1893.21,1214.78 1893.79,1214.78 1894.38,1214.78 1894.96,1214.78 1895.55,1214.78 1896.14,1214.78 1896.72,1214.78 1897.31,1214.78 1897.9,1214.78 1898.48,1214.78 1899.07,1214.78 1899.66,1214.78 1900.24,1214.78 1900.83,1214.78 1901.42,1214.78 1902,1214.78 1902.59,1214.78 1903.17,1214.78 1903.76,1214.78 1904.35,1214.78 1904.93,1214.78 1905.52,1214.78 1906.11,1214.78 1906.69,1214.78 1907.28,1214.78 1907.87,1214.78 1908.45,1214.78 1909.04,1214.78 1909.63,1214.78 1910.21,1214.78 1910.8,1214.78 1911.38,1214.78 1911.97,1214.78 1912.56,1214.78 1913.14,1214.78 1913.73,1214.78 1914.32,1214.78 1914.9,1214.78 1915.49,1214.78 1916.08,1214.78 1916.66,1214.78 1917.25,1214.78 1917.83,1214.78 1918.42,1214.78 1919.01,1214.78 1919.59,1214.78 1920.18,1214.78 1920.77,1214.78 1921.35,1214.78 1921.94,1214.78 1922.53,1214.78 1923.11,1214.78 1923.7,1214.78 1924.29,1214.78 1924.87,1214.78 1925.46,1214.78 1926.04,1214.78 1926.63,1214.78 1927.22,1214.78 1927.8,1214.78 1928.39,1214.78 1928.98,1214.78 1929.56,1214.78 1930.15,1214.78 1930.74,1214.78 1931.32,1214.78 1931.91,1214.78 1932.5,1214.78 1933.08,1214.78 1933.67,1214.78 1934.25,1214.78 1934.84,1214.78 1935.43,1214.78 1936.01,1214.78 1936.6,1214.78 1937.19,1214.78 1937.77,1214.78 1938.36,1214.78 1938.95,1214.78 1939.53,1214.78 1940.12,1214.78 1940.71,1214.78 1941.29,1214.78 1941.88,1214.78 1942.46,1214.78 1943.05,1214.78 1943.64,1214.78 1944.22,1214.78 1944.81,1214.78 1945.4,1214.78 1945.98,1214.78 1946.57,1214.78 1947.16,1214.78 1947.74,1214.78 1948.33,1214.78 1948.91,1214.78 1949.5,1214.78 1950.09,1214.78 1950.67,1214.78 1951.26,1214.78 1951.85,1214.78 1952.43,1214.78 1953.02,1214.78 1953.61,1214.78 1954.19,1214.78 1954.78,1214.78 1955.37,1214.78 1955.95,1214.78 1956.54,1214.78 1957.12,1214.78 1957.71,1214.78 1958.3,1214.78 1958.88,1214.78 1959.47,1214.78 1960.06,1214.78 1960.64,1214.78 1961.23,1214.78 1961.82,1214.78 1962.4,1214.78 1962.99,1214.78 1963.58,1214.78 1964.16,1214.78 1964.75,1214.78 1965.33,1214.78 1965.92,1214.78 1966.51,1214.78 1967.09,1214.78 1967.68,1214.78 1968.27,1214.78 1968.85,1214.78 1969.44,1214.78 1970.03,1214.78 1970.61,1214.78 1971.2,1214.78 1971.78,1214.78 1972.37,1214.78 1972.96,1214.78 1973.54,1214.78 1974.13,1214.78 1974.72,1214.78 1975.3,1214.78 1975.89,1214.78 1976.48,1214.78 1977.06,1214.78 1977.65,1214.78 1978.24,1214.78 1978.82,1214.78 1979.41,1214.78 1979.99,1214.78 1980.58,1214.78 1981.17,1214.78 1981.75,1214.78 1982.34,1214.78 1982.93,1214.78 1983.51,1214.78 1984.1,1214.78 1984.69,1214.78 1985.27,1214.78 1985.86,1214.78 1986.45,1214.78 1987.03,1214.78 1987.62,1214.78 1988.2,1214.78 1988.79,1214.78 1989.38,1214.78 1989.96,1214.78 1990.55,1214.78 1991.14,1214.78 1991.72,1214.78 1992.31,1214.78 1992.9,1214.78 1993.48,1214.78 1994.07,1214.78 1994.65,1214.78 1995.24,1214.78 1995.83,1214.78 1996.41,1214.78 1997,1214.78 1997.59,1214.78 1998.17,1214.78 1998.76,1214.78 1999.35,1214.78 1999.93,1214.78 2000.52,1214.78 2001.11,1214.78 2001.69,1214.78 2002.28,1214.78 2002.86,1214.78 2003.45,1214.78 2004.04,1214.78 2004.62,1214.78 2005.21,1214.78 2005.8,1214.78 2006.38,1214.78 2006.97,1214.78 2007.56,1214.78 2008.14,1214.78 2008.73,1214.78 2009.32,1214.78 2009.9,1214.78 2010.49,1214.78 2011.07,1214.78 2011.66,1214.78 2012.25,1214.78 2012.83,1214.78 2013.42,1214.78 2014.01,1214.78 2014.59,1214.78 2015.18,1214.78 2015.77,1214.78 2016.35,1214.78 2016.94,1214.78 2017.53,1214.78 2018.11,1214.78 2018.7,1214.78 2019.28,1214.78 2019.87,1214.78 2020.46,1214.78 2021.04,1214.78 2021.63,1214.78 2022.22,1214.78 2022.8,1214.78 2023.39,1214.78 2023.98,1214.78 2024.56,1214.78 2025.15,1214.78 2025.73,1214.78 2026.32,1214.78 2026.91,1214.78 2027.49,1214.78 2028.08,1214.78 2028.67,1214.78 2029.25,1214.78 2029.84,1214.78 2030.43,1214.78 2031.01,1214.78 2031.6,1214.78 2032.19,1214.78 2032.77,1214.78 2033.36,1214.78 2033.94,1214.78 2034.53,1214.78 2035.12,1214.78 2035.7,1214.78 2036.29,1214.78 2036.88,1214.78 2037.46,1214.78 2038.05,1214.78 2038.64,1214.78 2039.22,1214.78 2039.81,1214.78 2040.4,1214.78 2040.98,1214.78 2041.57,1214.78 2042.15,1214.78 2042.74,1214.78 2043.33,1214.78 2043.91,1214.78 2044.5,1214.78 2045.09,1214.78 2045.67,1214.78 2046.26,1214.78 2046.85,1214.78 2047.43,1214.78 2048.02,1214.78 2048.6,1214.78 2049.19,1214.78 2049.78,1214.78 2050.36,1214.78 2050.95,1214.78 2051.54,1214.78 2052.12,1214.78 2052.71,1214.78 2053.3,1214.78 2053.88,1214.78 2054.47,1214.78 2055.06,1214.78 2055.64,1214.78 2056.23,1214.78 2056.81,1214.78 2057.4,1214.78 2057.99,1214.78 2058.57,1214.78 2059.16,1214.78 2059.75,1214.78 2060.33,1214.78 2060.92,1214.78 2061.51,1214.78 2062.09,1214.78 2062.68,1214.78 2063.27,1214.78 2063.85,1214.78 2064.44,1214.78 2065.02,1214.78 2065.61,1214.78 2066.2,1214.78 2066.78,1214.78 2067.37,1214.78 2067.96,1214.78 2068.54,1214.78 2069.13,1214.78 2069.72,1214.78 2070.3,1214.78 2070.89,1214.78 2071.48,1214.78 2072.06,1214.78 2072.65,1214.78 2073.23,1214.78 2073.82,1214.78 2074.41,1214.78 2074.99,1214.78 2075.58,1214.78 2076.17,1214.78 2076.75,1214.78 2077.34,1214.78 2077.93,1214.78 2078.51,1214.78 2079.1,1214.78 2079.68,1214.78 2080.27,1214.78 2080.86,1214.78 2081.44,1214.78 2082.03,1214.78 2082.62,1214.78 2083.2,1214.78 2083.79,1214.78 2084.38,1214.78 2084.96,1214.78 2085.55,1214.78 2086.14,1214.78 2086.72,1214.78 2087.31,1214.78 2087.89,1214.78 2088.48,1214.78 2089.07,1214.78 2089.65,1214.78 2090.24,1214.78 2090.83,1214.78 2091.41,1214.78 2092,1214.78 2092.59,1214.78 2093.17,1214.78 2093.76,1214.78 2094.35,1214.78 2094.93,1214.78 2095.52,1214.78 2096.1,1214.78 2096.69,1214.78 2097.28,1214.78 2097.86,1214.78 2098.45,1214.78 2099.04,1214.78 2099.62,1214.78 2100.21,1214.78 2100.8,1214.78 2101.38,1214.78 2101.97,1214.78 2102.55,1214.78 2103.14,1214.78 2103.73,1214.78 2104.31,1214.78 2104.9,1214.78 2105.49,1214.78 2106.07,1214.78 2106.66,1214.78 2107.25,1214.78 2107.83,1214.78 2108.42,1214.78 2109.01,1214.78 2109.59,1214.78 2110.18,1214.78 2110.76,1214.78 2111.35,1214.78 2111.94,1214.78 2112.52,1214.78 2113.11,1214.78 2113.7,1214.78 2114.28,1214.78 2114.87,1214.78 2115.46,1214.78 2116.04,1214.78 2116.63,1214.78 2117.22,1214.78 2117.8,1214.78 2118.39,1214.78 2118.97,1214.78 2119.56,1214.78 2120.15,1214.78 2120.73,1214.78 2121.32,1214.78 2121.91,1214.78 2122.49,1214.78 2123.08,1214.78 2123.67,1214.78 2124.25,1214.78 2124.84,1214.78 2125.42,1214.78 2126.01,1214.78 2126.6,1214.78 2127.18,1214.78 2127.77,1214.78 2128.36,1214.78 2128.94,1214.78 2129.53,1214.78 2130.12,1214.78 2130.7,1214.78 2131.29,1214.78 2131.88,1214.78 2132.46,1214.78 2133.05,1214.78 2133.63,1214.78 2134.22,1214.78 2134.81,1214.78 2135.39,1214.78 2135.98,1214.78 2136.57,1214.78 2137.15,1214.78 2137.74,1214.78 2138.33,1214.78 2138.91,1214.78 2139.5,1214.78 2140.09,1214.78 2140.67,1214.78 2141.26,1214.78 2141.84,1214.78 2142.43,1214.78 2143.02,1214.78 2143.6,1214.78 2144.19,1214.78 2144.78,1214.78 2145.36,1214.78 2145.95,1214.78 2146.54,1214.78 2147.12,1214.78 2147.71,1214.78 2148.3,1214.78 2148.88,1214.78 2149.47,1214.78 2150.05,1214.78 2150.64,1214.78 2151.23,1214.78 2151.81,1214.78 2152.4,1214.78 2152.99,1214.78 2153.57,1214.78 2154.16,1214.78 2154.75,1214.78 2155.33,1214.78 2155.92,1214.78 2156.5,1214.78 2157.09,1214.78 2157.68,1214.78 2158.26,1214.78 \"/>\n<path clip-path=\"url(#clip622)\" d=\"M986.025 1214.65 L986.612 1214.65 L987.198 1214.65 L987.785 1214.65 L988.371 1214.65 L988.957 1214.65 L989.544 1214.65 L990.13 1214.65 L990.717 1214.65 L991.303 1214.65 L991.889 1214.65 L992.476 1214.65 L993.062 1214.65 L993.649 1214.65 L994.235 1214.65 L994.822 1214.65 L995.408 1214.65 L995.994 1214.65 L996.581 1214.65 L997.167 1214.65 L997.754 1214.65 L998.34 1214.65 L998.926 1214.65 L999.513 1214.65 L1000.1 1214.65 L1000.69 1214.65 L1001.27 1214.65 L1001.86 1214.65 L1002.44 1214.65 L1003.03 1214.65 L1003.62 1214.65 L1004.2 1214.65 L1004.79 1214.65 L1005.38 1214.65 L1005.96 1214.65 L1006.55 1214.65 L1007.14 1214.65 L1007.72 1214.65 L1008.31 1214.65 L1008.9 1214.65 L1009.48 1214.65 L1010.07 1214.65 L1010.65 1214.65 L1011.24 1214.65 L1011.83 1214.65 L1012.41 1214.65 L1013 1214.65 L1013.59 1214.65 L1014.17 1214.65 L1014.76 1214.65 L1015.35 1214.65 L1015.93 1214.65 L1016.52 1214.65 L1017.11 1214.65 L1017.69 1214.65 L1018.28 1214.65 L1018.86 1214.65 L1019.45 1214.65 L1020.04 1214.65 L1020.62 1214.65 L1021.21 1214.65 L1021.8 1214.65 L1022.38 1214.65 L1022.97 1214.65 L1023.56 1214.65 L1024.14 1214.65 L1024.73 1214.65 L1025.32 1214.65 L1025.9 1214.65 L1026.49 1214.65 L1027.07 1214.65 L1027.66 1214.65 L1028.25 1214.65 L1028.83 1214.65 L1029.42 1214.65 L1030.01 1214.65 L1030.59 1214.65 L1031.18 1214.65 L1031.77 1214.65 L1032.35 1214.65 L1032.94 1214.65 L1033.52 1214.65 L1034.11 1214.65 L1034.7 1214.65 L1035.28 1214.65 L1035.87 1214.65 L1036.46 1214.65 L1037.04 1214.65 L1037.63 1214.65 L1038.22 1214.65 L1038.8 1214.65 L1039.39 1214.65 L1039.98 1214.65 L1040.56 1214.65 L1041.15 1214.65 L1041.73 1214.65 L1042.32 1214.65 L1042.91 1214.65 L1043.49 1214.65 L1044.08 1214.65 L1044.67 1214.65 L1045.25 1214.65 L1045.84 1214.65 L1046.43 1214.65 L1047.01 1214.65 L1047.6 1214.65 L1048.19 1214.65 L1048.77 1214.65 L1049.36 1214.65 L1049.94 1214.65 L1050.53 1214.65 L1051.12 1214.65 L1051.7 1214.65 L1052.29 1214.65 L1052.88 1214.65 L1053.46 1214.65 L1054.05 1214.65 L1054.64 1214.65 L1055.22 1214.65 L1055.81 1214.65 L1056.39 1214.65 L1056.98 1214.65 L1057.57 1214.65 L1058.15 1214.65 L1058.74 1214.65 L1059.33 1214.65 L1059.91 1214.65 L1060.5 1214.65 L1061.09 1214.65 L1061.67 1214.65 L1062.26 1214.65 L1062.85 1214.65 L1063.43 1214.65 L1064.02 1214.65 L1064.6 1214.65 L1065.19 1214.65 L1065.78 1214.65 L1066.36 1214.65 L1066.95 1214.65 L1067.54 1214.65 L1068.12 1214.65 L1068.71 1214.65 L1069.3 1214.65 L1069.88 1214.65 L1070.47 1214.65 L1071.06 1214.65 L1071.64 1214.65 L1072.23 1214.65 L1072.81 1214.65 L1073.4 1214.65 L1073.99 1214.65 L1074.57 1214.65 L1075.16 1214.65 L1075.75 1214.65 L1076.33 1214.65 L1076.92 1214.65 L1077.51 1214.65 L1078.09 1214.65 L1078.68 1214.65 L1079.26 1214.65 L1079.85 1214.65 L1080.44 1214.65 L1081.02 1214.65 L1081.61 1214.65 L1082.2 1214.65 L1082.78 1214.65 L1083.37 1214.65 L1083.96 1214.65 L1084.54 1214.65 L1085.13 1214.65 L1085.72 1214.65 L1086.3 1214.65 L1086.89 1214.65 L1087.47 1214.65 L1088.06 1214.65 L1088.65 1214.65 L1089.23 1214.65 L1089.82 1214.65 L1090.41 1214.65 L1090.99 1214.65 L1091.58 1214.65 L1092.17 1214.65 L1092.75 1214.65 L1093.34 1214.65 L1093.93 1214.65 L1094.51 1214.65 L1095.1 1214.65 L1095.68 1214.65 L1096.27 1214.65 L1096.86 1214.65 L1097.44 1214.65 L1098.03 1214.65 L1098.62 1214.65 L1099.2 1214.65 L1099.79 1214.65 L1100.38 1214.65 L1100.96 1214.65 L1101.55 1214.65 L1102.14 1214.65 L1102.72 1214.65 L1103.31 1214.65 L1103.89 1214.65 L1104.48 1214.65 L1105.07 1214.65 L1105.65 1214.65 L1106.24 1214.65 L1106.83 1214.65 L1107.41 1214.65 L1108 1214.65 L1108.59 1214.65 L1109.17 1214.65 L1109.76 1214.65 L1110.34 1214.65 L1110.93 1214.65 L1111.52 1214.65 L1112.1 1214.65 L1112.69 1214.65 L1113.28 1214.65 L1113.86 1214.65 L1114.45 1214.65 L1115.04 1214.65 L1115.62 1214.65 L1116.21 1214.65 L1116.8 1214.65 L1117.38 1214.65 L1117.97 1214.65 L1118.55 1214.65 L1119.14 1214.65 L1119.73 1214.65 L1120.31 1214.65 L1120.9 1214.65 L1121.49 1214.65 L1122.07 1214.65 L1122.66 1214.65 L1123.25 1214.65 L1123.83 1214.65 L1124.42 1214.65 L1125.01 1214.65 L1125.59 1214.65 L1126.18 1214.65 L1126.76 1214.65 L1127.35 1214.65 L1127.94 1214.65 L1128.52 1214.65 L1129.11 1214.65 L1129.7 1214.65 L1130.28 1214.65 L1130.87 1214.65 L1131.46 1214.65 L1132.04 1214.65 L1132.63 1214.65 L1133.21 1214.65 L1133.8 1214.65 L1134.39 1214.65 L1134.97 1214.65 L1135.56 1214.65 L1136.15 1214.65 L1136.73 1214.65 L1137.32 1214.65 L1137.91 1214.65 L1138.49 1214.65 L1139.08 1214.65 L1139.67 1214.65 L1140.25 1214.65 L1140.84 1214.65 L1141.42 1214.65 L1142.01 1214.65 L1142.6 1214.65 L1143.18 1214.65 L1143.77 1214.65 L1144.36 1214.65 L1144.94 1214.65 L1145.53 1214.65 L1146.12 1214.65 L1146.7 1214.65 L1147.29 1214.65 L1147.88 1214.65 L1148.46 1214.65 L1149.05 1214.65 L1149.63 1214.65 L1150.22 1214.65 L1150.81 1214.65 L1151.39 1214.65 L1151.98 1214.65 L1152.57 1214.65 L1153.15 1214.65 L1153.74 1214.65 L1154.33 1214.65 L1154.91 1214.65 L1155.5 1214.65 L1156.09 1214.65 L1156.67 1214.65 L1157.26 1214.65 L1157.84 1214.65 L1158.43 1214.65 L1159.02 1214.65 L1159.6 1214.65 L1160.19 1214.65 L1160.78 1214.65 L1161.36 1214.65 L1161.95 1214.65 L1162.54 1214.65 L1163.12 1214.65 L1163.71 1214.65 L1164.29 1214.65 L1164.88 1214.65 L1165.47 1214.65 L1166.05 1214.65 L1166.64 1214.65 L1167.23 1214.65 L1167.81 1214.65 L1168.4 1214.65 L1168.99 1214.65 L1169.57 1214.65 L1170.16 1214.65 L1170.75 1214.65 L1171.33 1214.65 L1171.92 1214.65 L1172.5 1214.65 L1173.09 1214.65 L1173.68 1214.65 L1174.26 1214.65 L1174.85 1214.65 L1175.44 1214.65 L1176.02 1214.65 L1176.61 1214.65 L1177.2 1214.65 L1177.78 1214.65 L1178.37 1214.65 L1178.96 1214.65 L1179.54 1214.65 L1180.13 1214.65 L1180.71 1214.65 L1181.3 1214.65 L1181.89 1214.65 L1182.47 1214.65 L1183.06 1214.65 L1183.65 1214.65 L1184.23 1214.65 L1184.82 1214.65 L1185.41 1214.65 L1185.99 1214.65 L1186.58 1214.65 L1187.16 1214.65 L1187.75 1214.65 L1188.34 1214.65 L1188.92 1214.65 L1189.51 1214.65 L1190.1 1214.65 L1190.68 1214.65 L1191.27 1214.65 L1191.86 1214.65 L1192.44 1214.65 L1193.03 1214.65 L1193.62 1214.65 L1194.2 1214.65 L1194.79 1214.65 L1195.37 1214.65 L1195.96 1214.65 L1196.55 1214.65 L1197.13 1214.65 L1197.72 1214.65 L1198.31 1214.65 L1198.89 1214.65 L1199.48 1214.65 L1200.07 1214.65 L1200.65 1214.65 L1201.24 1214.65 L1201.83 1214.65 L1202.41 1214.65 L1203 1214.65 L1203.58 1214.65 L1204.17 1214.65 L1204.76 1214.65 L1205.34 1214.65 L1205.93 1214.65 L1206.52 1214.65 L1207.1 1214.65 L1207.69 1214.65 L1208.28 1214.65 L1208.86 1214.65 L1209.45 1214.65 L1210.03 1214.65 L1210.62 1214.65 L1211.21 1214.65 L1211.79 1214.65 L1212.38 1214.65 L1212.97 1214.65 L1213.55 1214.65 L1214.14 1214.65 L1214.73 1214.65 L1215.31 1214.65 L1215.9 1214.65 L1216.49 1214.65 L1217.07 1214.65 L1217.66 1214.65 L1218.24 1214.65 L1218.83 1214.65 L1219.42 1214.65 L1220 1214.65 L1220.59 1214.65 L1221.18 1214.65 L1221.76 1214.65 L1222.35 1214.65 L1222.94 1214.65 L1223.52 1214.65 L1224.11 1214.65 L1224.7 1214.65 L1225.28 1214.65 L1225.87 1214.65 L1226.45 1214.65 L1227.04 1214.65 L1227.63 1214.65 L1228.21 1214.65 L1228.8 1214.65 L1229.39 1214.65 L1229.97 1214.65 L1230.56 1214.65 L1231.15 1214.65 L1231.73 1214.65 L1232.32 1214.65 L1232.91 1214.65 L1233.49 1214.65 L1234.08 1214.65 L1234.66 1214.65 L1235.25 1214.65 L1235.84 1214.65 L1236.42 1214.65 L1237.01 1214.65 L1237.6 1214.65 L1238.18 1214.65 L1238.77 1214.65 L1239.36 1214.65 L1239.94 1214.65 L1240.53 1214.65 L1241.11 1214.65 L1241.7 1214.65 L1242.29 1214.65 L1242.87 1214.65 L1243.46 1214.65 L1244.05 1214.65 L1244.63 1214.65 L1245.22 1214.65 L1245.81 1214.65 L1246.39 1214.65 L1246.98 1214.65 L1247.57 1214.65 L1248.15 1214.65 L1248.74 1214.65 L1249.32 1214.65 L1249.91 1214.65 L1250.5 1214.65 L1251.08 1214.65 L1251.67 1214.65 L1252.26 1214.65 L1252.84 1214.65 L1253.43 1214.65 L1254.02 1214.65 L1254.6 1214.65 L1255.19 1214.65 L1255.78 1214.65 L1256.36 1214.65 L1256.95 1214.65 L1257.53 1214.65 L1258.12 1214.65 L1258.71 1214.65 L1259.29 1214.65 L1259.88 1214.65 L1260.47 1214.65 L1261.05 1214.65 L1261.64 1214.65 L1262.23 1214.65 L1262.81 1214.65 L1263.4 1214.65 L1263.98 1214.65 L1264.57 1214.65 L1265.16 1214.65 L1265.74 1214.65 L1266.33 1214.65 L1266.92 1214.65 L1267.5 1214.65 L1268.09 1214.65 L1268.68 1214.65 L1269.26 1214.65 L1269.85 1214.65 L1270.44 1214.65 L1271.02 1214.65 L1271.61 1214.65 L1272.19 1214.65 L1272.78 1214.65 L1273.37 1214.65 L1273.95 1214.65 L1274.54 1214.65 L1275.13 1214.65 L1275.71 1214.65 L1276.3 1214.65 L1276.89 1214.65 L1277.47 1214.65 L1278.06 1214.65 L1278.65 1214.65 L1279.23 1214.65 L1279.82 1214.65 L1280.4 1214.65 L1280.99 1214.65 L1281.58 1214.65 L1282.16 1214.65 L1282.75 1214.65 L1283.34 1214.65 L1283.92 1214.65 L1284.51 1214.65 L1285.1 1214.65 L1285.68 1214.65 L1286.27 1214.65 L1286.86 1214.65 L1287.44 1214.65 L1288.03 1214.65 L1288.61 1214.65 L1289.2 1214.65 L1289.79 1214.65 L1290.37 1214.65 L1290.96 1214.65 L1291.55 1214.65 L1292.13 1214.65 L1292.72 1214.65 L1293.31 1214.65 L1293.89 1214.65 L1294.48 1214.65 L1295.06 1214.65 L1295.65 1214.65 L1296.24 1214.65 L1296.82 1214.65 L1297.41 1214.65 L1298 1214.65 L1298.58 1214.65 L1299.17 1214.65 L1299.76 1214.65 L1300.34 1214.65 L1300.93 1214.65 L1301.52 1214.65 L1302.1 1214.65 L1302.69 1214.65 L1303.27 1214.65 L1303.86 1214.65 L1304.45 1214.65 L1305.03 1214.65 L1305.62 1214.65 L1306.21 1214.65 L1306.79 1214.65 L1307.38 1214.65 L1307.97 1214.65 L1308.55 1214.65 L1309.14 1214.65 L1309.73 1214.65 L1310.31 1214.65 L1310.9 1214.65 L1311.48 1214.65 L1312.07 1214.65 L1312.66 1214.65 L1313.24 1214.65 L1313.83 1214.65 L1314.42 1214.65 L1315 1214.65 L1315.59 1214.65 L1316.18 1214.65 L1316.76 1214.65 L1317.35 1214.65 L1317.93 1214.65 L1318.52 1214.65 L1319.11 1214.65 L1319.69 1214.65 L1320.28 1214.65 L1320.87 1214.65 L1321.45 1214.65 L1322.04 1214.65 L1322.63 1214.65 L1323.21 1214.65 L1323.8 1214.65 L1324.39 1214.65 L1324.97 1214.65 L1325.56 1214.65 L1326.14 1214.65 L1326.73 1214.65 L1327.32 1214.65 L1327.9 1214.65 L1328.49 1214.65 L1329.08 1214.65 L1329.66 1214.65 L1330.25 1214.65 L1330.84 1214.65 L1331.42 1214.65 L1332.01 1214.65 L1332.6 1214.65 L1333.18 1214.65 L1333.77 1214.65 L1334.35 1214.65 L1334.94 1214.65 L1335.53 1214.65 L1336.11 1214.65 L1336.7 1214.65 L1337.29 1214.65 L1337.87 1214.65 L1338.46 1214.65 L1339.05 1214.65 L1339.63 1214.65 L1340.22 1214.65 L1340.8 1214.65 L1341.39 1214.65 L1341.98 1214.65 L1342.56 1214.65 L1343.15 1214.65 L1343.74 1214.65 L1344.32 1214.65 L1344.91 1214.65 L1345.5 1214.65 L1346.08 1214.65 L1346.67 1214.65 L1347.26 1214.65 L1347.84 1214.65 L1348.43 1214.65 L1349.01 1214.65 L1349.6 1214.65 L1350.19 1214.65 L1350.77 1214.65 L1351.36 1214.65 L1351.95 1214.65 L1352.53 1214.65 L1353.12 1214.65 L1353.71 1214.65 L1354.29 1214.65 L1354.88 1214.65 L1355.47 1214.65 L1356.05 1214.65 L1356.64 1214.65 L1357.22 1214.65 L1357.81 1214.65 L1358.4 1214.65 L1358.98 1214.65 L1359.57 1214.65 L1360.16 1214.65 L1360.74 1214.65 L1361.33 1214.65 L1361.92 1214.65 L1362.5 1214.65 L1363.09 1214.65 L1363.68 1214.65 L1364.26 1214.65 L1364.85 1214.65 L1365.43 1214.65 L1366.02 1214.65 L1366.61 1214.65 L1367.19 1214.65 L1367.78 1214.65 L1368.37 1214.65 L1368.95 1214.65 L1369.54 1214.65 L1370.13 1214.65 L1370.71 1214.65 L1371.3 1214.65 L1371.88 1214.65 L1372.47 1214.65 L1373.06 1214.65 L1373.64 1214.65 L1374.23 1214.65 L1374.82 1214.65 L1375.4 1214.65 L1375.99 1214.65 L1376.58 1214.65 L1377.16 1214.65 L1377.75 1214.65 L1378.34 1214.65 L1378.92 1214.65 L1379.51 1214.65 L1380.09 1214.65 L1380.68 1214.65 L1381.27 1214.65 L1381.85 1214.65 L1382.44 1214.65 L1383.03 1214.65 L1383.61 1214.65 L1384.2 1214.65 L1384.79 1214.65 L1385.37 1214.65 L1385.96 1214.65 L1386.55 1214.65 L1387.13 1214.65 L1387.72 1214.65 L1388.3 1214.65 L1388.89 1214.65 L1389.48 1214.65 L1390.06 1214.65 L1390.65 1214.65 L1391.24 1214.65 L1391.82 1214.65 L1392.41 1214.65 L1393 1214.65 L1393.58 1214.65 L1394.17 1214.65 L1394.75 1214.65 L1395.34 1214.65 L1395.93 1214.65 L1396.51 1214.65 L1397.1 1214.65 L1397.69 1214.65 L1398.27 1214.65 L1398.86 1214.65 L1399.45 1214.65 L1400.03 1214.65 L1400.62 1214.65 L1401.21 1214.65 L1401.79 1214.65 L1402.38 1214.65 L1402.96 1214.65 L1403.55 1214.65 L1404.14 1214.65 L1404.72 1214.65 L1405.31 1214.65 L1405.9 1214.65 L1406.48 1214.65 L1407.07 1214.65 L1407.66 1214.65 L1408.24 1214.65 L1408.83 1214.65 L1409.42 1214.65 L1410 1214.65 L1410.59 1214.65 L1411.17 1214.65 L1411.76 1214.65 L1412.35 1214.65 L1412.93 1214.65 L1413.52 1214.65 L1414.11 1214.65 L1414.69 1214.65 L1415.28 1214.65 L1415.87 1214.65 L1416.45 1214.65 L1417.04 1214.65 L1417.63 1214.65 L1418.21 1214.65 L1418.8 1214.65 L1419.38 1214.65 L1419.97 1214.65 L1420.56 1214.65 L1421.14 1214.65 L1421.73 1214.65 L1422.32 1214.65 L1422.9 1214.65 L1423.49 1214.65 L1424.08 1214.65 L1424.66 1214.65 L1425.25 1214.65 L1425.83 1214.65 L1426.42 1214.65 L1427.01 1214.65 L1427.59 1214.65 L1428.18 1214.65 L1428.77 1214.65 L1429.35 1214.65 L1429.94 1214.65 L1430.53 1214.65 L1431.11 1214.65 L1431.7 1214.65 L1432.29 1214.65 L1432.87 1214.65 L1433.46 1214.65 L1434.04 1214.65 L1434.63 1214.65 L1435.22 1214.65 L1435.8 1214.65 L1436.39 1214.65 L1436.98 1214.65 L1437.56 1214.65 L1438.15 1214.65 L1438.74 1214.65 L1439.32 1214.65 L1439.91 1214.65 L1440.5 1214.65 L1441.08 1214.65 L1441.67 1214.65 L1442.25 1214.65 L1442.84 1214.65 L1443.43 1214.65 L1444.01 1214.65 L1444.6 1214.65 L1445.19 1214.65 L1445.77 1214.65 L1446.36 1214.65 L1446.95 1214.65 L1447.53 1214.65 L1448.12 1214.65 L1448.7 1214.65 L1449.29 1214.65 L1449.88 1214.65 L1450.46 1214.65 L1451.05 1214.65 L1451.64 1214.65 L1452.22 1214.65 L1452.81 1214.65 L1453.4 1214.65 L1453.98 1214.65 L1454.57 1214.65 L1455.16 1214.65 L1455.74 1214.65 L1456.33 1214.65 L1456.91 1214.65 L1457.5 1214.65 L1458.09 1214.65 L1458.67 1214.65 L1459.26 1214.65 L1459.85 1214.65 L1460.43 1214.65 L1461.02 1214.65 L1461.61 1214.65 L1462.19 1214.65 L1462.78 1214.65 L1463.37 1214.65 L1463.95 1214.65 L1464.54 1214.65 L1465.12 1214.65 L1465.71 1214.65 L1466.3 1214.65 L1466.88 1214.65 L1467.47 1214.65 L1468.06 1214.65 L1468.64 1214.65 L1469.23 1214.65 L1469.82 1214.65 L1470.4 1214.65 L1470.99 1214.65 L1471.57 1214.65 L1472.16 1214.65 L1472.75 1214.65 L1473.33 1214.65 L1473.92 1214.65 L1474.51 1214.65 L1475.09 1214.65 L1475.68 1214.65 L1476.27 1214.65 L1476.85 1214.65 L1477.44 1214.65 L1478.03 1214.65 L1478.61 1214.65 L1479.2 1214.65 L1479.78 1214.65 L1480.37 1214.65 L1480.96 1214.65 L1481.54 1214.65 L1482.13 1214.65 L1482.72 1214.65 L1483.3 1214.65 L1483.89 1214.65 L1484.48 1214.65 L1485.06 1214.65 L1485.65 1214.65 L1486.24 1214.65 L1486.82 1214.65 L1487.41 1214.65 L1487.99 1214.65 L1488.58 1214.65 L1489.17 1214.65 L1489.75 1214.65 L1490.34 1214.65 L1490.93 1214.65 L1491.51 1214.65 L1492.1 1214.65 L1492.69 1214.65 L1493.27 1214.65 L1493.86 1214.65 L1494.45 1214.65 L1495.03 1214.65 L1495.62 1214.65 L1496.2 1214.65 L1496.79 1214.65 L1497.38 1214.65 L1497.96 1214.65 L1498.55 1214.65 L1499.14 1214.65 L1499.72 1214.65 L1500.31 1214.65 L1500.9 1214.65 L1501.48 1214.65 L1502.07 1214.65 L1502.65 1214.65 L1503.24 1214.65 L1503.83 1214.65 L1504.41 1214.65 L1505 1214.65 L1505.59 1214.65 L1506.17 1214.65 L1506.76 1214.65 L1507.35 1214.65 L1507.93 1214.65 L1508.52 1214.65 L1509.11 1214.65 L1509.69 1214.65 L1510.28 1214.65 L1510.86 1214.65 L1511.45 1214.65 L1512.04 1214.65 L1512.62 1214.65 L1513.21 1214.65 L1513.8 1214.65 L1514.38 1214.65 L1514.97 1214.65 L1515.56 1214.65 L1516.14 1214.65 L1516.73 1214.65 L1517.32 1214.65 L1517.9 1214.65 L1518.49 1214.65 L1519.07 1214.65 L1519.66 1214.65 L1520.25 1214.65 L1520.83 1214.65 L1521.42 1214.65 L1522.01 1214.65 L1522.59 1214.65 L1523.18 1214.65 L1523.77 1214.65 L1524.35 1214.65 L1524.94 1214.65 L1525.52 1214.65 L1526.11 1214.65 L1526.7 1214.65 L1527.28 1214.65 L1527.87 1214.65 L1528.46 1214.65 L1529.04 1214.65 L1529.63 1214.65 L1530.22 1214.65 L1530.8 1214.65 L1531.39 1214.65 L1531.98 1214.65 L1532.56 1214.65 L1533.15 1214.65 L1533.73 1214.65 L1534.32 1214.65 L1534.91 1214.65 L1535.49 1214.65 L1536.08 1214.65 L1536.67 1214.65 L1537.25 1214.65 L1537.84 1214.65 L1538.43 1214.65 L1539.01 1214.65 L1539.6 1214.65 L1540.19 1214.65 L1540.77 1214.65 L1541.36 1214.65 L1541.94 1214.65 L1542.53 1214.65 L1543.12 1214.65 L1543.7 1214.65 L1544.29 1214.65 L1544.88 1214.65 L1545.46 1214.65 L1546.05 1214.65 L1546.64 1214.65 L1547.22 1214.65 L1547.81 1214.65 L1548.4 1214.65 L1548.98 1214.65 L1549.57 1214.65 L1550.15 1214.65 L1550.74 1214.65 L1551.33 1214.65 L1551.91 1214.65 L1552.5 1214.65 L1553.09 1214.65 L1553.67 1214.65 L1554.26 1214.65 L1554.85 1214.65 L1555.43 1214.65 L1556.02 1214.65 L1556.6 1214.65 L1557.19 1214.65 L1557.78 1214.65 L1558.36 1214.65 L1558.95 1214.65 L1559.54 1214.65 L1560.12 1214.65 L1560.71 1214.65 L1561.3 1214.65 L1561.88 1214.65 L1562.47 1214.65 L1563.06 1214.65 L1563.64 1214.65 L1564.23 1214.65 L1564.81 1214.65 L1565.4 1214.65 L1565.99 1214.65 L1566.57 1214.65 L1567.16 1214.65 L1567.75 1214.65 L1568.33 1214.65 L1568.92 1214.65 L1569.51 1214.65 L1570.09 1214.65 L1570.68 1214.65 L1571.27 1214.65 L1571.85 1214.65 L1572.44 1214.65 L1573.02 1214.65 L1573.61 1214.65 L1574.2 1214.65 L1574.78 1214.65 L1575.37 1214.65 L1575.96 1214.65 L1576.54 1214.65 L1577.13 1214.65 L1577.72 1214.65 L1578.3 1214.65 L1578.89 1214.65 L1579.47 1214.65 L1580.06 1214.65 L1580.65 1214.65 L1581.23 1214.65 L1581.82 1214.65 L1582.41 1214.65 L1582.99 1214.65 L1583.58 1214.65 L1584.17 1214.65 L1584.75 1214.65 L1585.34 1214.65 L1585.93 1214.65 L1586.51 1214.65 L1587.1 1214.65 L1587.68 1214.65 L1588.27 1214.65 L1588.86 1214.65 L1589.44 1214.65 L1590.03 1214.65 L1590.62 1214.65 L1591.2 1214.65 L1591.79 1214.65 L1592.38 1214.65 L1592.96 1214.65 L1593.55 1214.65 L1594.14 1214.65 L1594.72 1214.65 L1595.31 1214.65 L1595.89 1214.65 L1596.48 1214.65 L1597.07 1214.65 L1597.65 1214.65 L1598.24 1214.65 L1598.83 1214.65 L1599.41 1214.65 L1600 1214.65 L1600.59 1214.65 L1601.17 1214.65 L1601.76 1214.65 L1602.34 1214.65 L1602.93 1214.65 L1603.52 1214.65 L1604.1 1214.65 L1604.69 1214.65 L1605.28 1214.65 L1605.86 1214.65 L1606.45 1214.65 L1607.04 1214.65 L1607.62 1214.65 L1608.21 1214.65 L1608.8 1214.65 L1609.38 1214.65 L1609.97 1214.65 L1610.55 1214.65 L1611.14 1214.65 L1611.73 1214.65 L1612.31 1214.65 L1612.9 1214.65 L1613.49 1214.65 L1614.07 1214.65 L1614.66 1214.65 L1615.25 1214.65 L1615.83 1214.65 L1616.42 1214.65 L1617.01 1214.65 L1617.59 1214.65 L1618.18 1214.65 L1618.76 1214.65 L1619.35 1214.65 L1619.94 1214.65 L1620.52 1214.65 L1621.11 1214.65 L1621.7 1214.65 L1622.28 1214.65 L1622.87 1214.65 L1623.46 1214.65 L1624.04 1214.65 L1624.63 1214.65 L1625.22 1214.65 L1625.8 1214.65 L1626.39 1214.65 L1626.97 1214.65 L1627.56 1214.65 L1628.15 1214.65 L1628.73 1214.65 L1629.32 1214.65 L1629.91 1214.65 L1630.49 1214.65 L1631.08 1214.65 L1631.67 1214.65 L1632.25 1214.65 L1632.84 1214.65 L1633.42 1214.65 L1634.01 1214.65 L1634.6 1214.65 L1635.18 1214.65 L1635.77 1214.65 L1636.36 1214.65 L1636.94 1214.65 L1637.53 1214.65 L1638.12 1214.65 L1638.7 1214.65 L1639.29 1214.65 L1639.88 1214.65 L1640.46 1214.65 L1641.05 1214.65 L1641.63 1214.65 L1642.22 1214.65 L1642.81 1214.65 L1643.39 1214.65 L1643.98 1214.65 L1644.57 1214.65 L1645.15 1214.65 L1645.74 1214.65 L1646.33 1214.65 L1646.91 1214.65 L1647.5 1214.65 L1648.09 1214.65 L1648.67 1214.65 L1649.26 1214.65 L1649.84 1214.65 L1650.43 1214.65 L1651.02 1214.65 L1651.6 1214.65 L1652.19 1214.65 L1652.78 1214.65 L1653.36 1214.65 L1653.95 1214.65 L1654.54 1214.65 L1655.12 1214.65 L1655.71 1214.65 L1656.29 1214.65 L1656.88 1214.65 L1657.47 1214.65 L1658.05 1214.65 L1658.64 1214.65 L1659.23 1214.65 L1659.81 1214.65 L1660.4 1214.65 L1660.99 1214.65 L1661.57 1214.65 L1662.16 1214.65 L1662.75 1214.65 L1663.33 1214.65 L1663.92 1214.65 L1664.5 1214.65 L1665.09 1214.65 L1665.68 1214.65 L1666.26 1214.65 L1666.85 1214.65 L1667.44 1214.65 L1668.02 1214.65 L1668.61 1214.65 L1669.2 1214.65 L1669.78 1214.65 L1670.37 1214.65 L1670.96 1214.65 L1671.54 1214.65 L1672.13 1214.65 L1672.71 1214.65 L1673.3 1214.65 L1673.89 1214.65 L1674.47 1214.65 L1675.06 1214.65 L1675.65 1214.65 L1676.23 1214.65 L1676.82 1214.65 L1677.41 1214.65 L1677.99 1214.65 L1678.58 1214.65 L1679.17 1214.65 L1679.75 1214.65 L1680.34 1214.65 L1680.92 1214.65 L1681.51 1214.65 L1682.1 1214.65 L1682.68 1214.65 L1683.27 1214.65 L1683.86 1214.65 L1684.44 1214.65 L1685.03 1214.65 L1685.62 1214.65 L1686.2 1214.65 L1686.79 1214.65 L1687.37 1214.65 L1687.96 1214.65 L1688.55 1214.65 L1689.13 1214.65 L1689.72 1214.65 L1690.31 1214.65 L1690.89 1214.65 L1691.48 1214.65 L1692.07 1214.65 L1692.65 1214.65 L1693.24 1214.65 L1693.83 1214.65 L1694.41 1214.65 L1695 1214.65 L1695.58 1214.65 L1696.17 1214.65 L1696.76 1214.65 L1697.34 1214.65 L1697.93 1214.65 L1698.52 1214.65 L1699.1 1214.65 L1699.69 1214.65 L1700.28 1214.65 L1700.86 1214.65 L1701.45 1214.65 L1702.04 1214.65 L1702.62 1214.65 L1703.21 1214.65 L1703.79 1214.65 L1704.38 1214.65 L1704.97 1214.65 L1705.55 1214.65 L1706.14 1214.65 L1706.73 1214.65 L1707.31 1214.65 L1707.9 1214.65 L1708.49 1214.65 L1709.07 1214.65 L1709.66 1214.65 L1710.24 1214.65 L1710.83 1214.65 L1711.42 1214.65 L1712 1214.65 L1712.59 1214.65 L1713.18 1214.65 L1713.76 1214.65 L1714.35 1214.65 L1714.94 1214.65 L1715.52 1214.65 L1716.11 1214.65 L1716.7 1214.65 L1717.28 1214.65 L1717.87 1214.65 L1718.45 1214.65 L1719.04 1214.65 L1719.63 1214.65 L1720.21 1214.65 L1720.8 1214.65 L1721.39 1214.65 L1721.97 1214.65 L1722.56 1214.65 L1723.15 1214.65 L1723.73 1214.65 L1724.32 1214.65 L1724.91 1214.65 L1725.49 1214.65 L1726.08 1214.65 L1726.66 1214.65 L1727.25 1214.65 L1727.84 1214.65 L1728.42 1214.65 L1729.01 1214.65 L1729.6 1214.65 L1730.18 1214.65 L1730.77 1214.65 L1731.36 1214.65 L1731.94 1214.65 L1732.53 1214.65 L1733.11 1214.65 L1733.7 1214.65 L1734.29 1214.65 L1734.87 1214.65 L1735.46 1214.65 L1736.05 1214.65 L1736.63 1214.65 L1737.22 1214.65 L1737.81 1214.65 L1738.39 1214.65 L1738.98 1214.65 L1739.57 1214.65 L1740.15 1214.65 L1740.74 1214.65 L1741.32 1214.65 L1741.91 1214.65 L1742.5 1214.65 L1743.08 1214.65 L1743.67 1214.65 L1744.26 1214.65 L1744.84 1214.65 L1745.43 1214.65 L1746.02 1214.65 L1746.6 1214.65 L1747.19 1214.65 L1747.78 1214.65 L1748.36 1214.65 L1748.95 1214.65 L1749.53 1214.65 L1750.12 1214.65 L1750.71 1214.65 L1751.29 1214.65 L1751.88 1214.65 L1752.47 1214.65 L1753.05 1214.65 L1753.64 1214.65 L1754.23 1214.65 L1754.81 1214.65 L1755.4 1214.65 L1755.99 1214.65 L1756.57 1214.65 L1757.16 1214.65 L1757.74 1214.65 L1758.33 1214.65 L1758.92 1214.65 L1759.5 1214.65 L1760.09 1214.65 L1760.68 1214.65 L1761.26 1214.65 L1761.85 1214.65 L1762.44 1214.65 L1763.02 1214.65 L1763.61 1214.65 L1764.19 1214.65 L1764.78 1214.65 L1765.37 1214.65 L1765.95 1214.65 L1766.54 1214.65 L1767.13 1214.65 L1767.71 1214.65 L1768.3 1214.65 L1768.89 1214.65 L1769.47 1214.65 L1770.06 1214.65 L1770.65 1214.65 L1771.23 1214.65 L1771.82 1214.65 L1772.4 1214.65 L1772.99 1214.65 L1773.58 1214.65 L1774.16 1214.65 L1774.75 1214.65 L1775.34 1214.65 L1775.92 1214.65 L1776.51 1214.65 L1777.1 1214.65 L1777.68 1214.65 L1778.27 1214.65 L1778.86 1214.65 L1779.44 1214.65 L1780.03 1214.65 L1780.61 1214.65 L1781.2 1214.65 L1781.79 1214.65 L1782.37 1214.65 L1782.96 1214.65 L1783.55 1214.65 L1784.13 1214.65 L1784.72 1214.65 L1785.31 1214.65 L1785.89 1214.65 L1786.48 1214.65 L1787.06 1214.65 L1787.65 1214.65 L1788.24 1214.65 L1788.82 1214.65 L1789.41 1214.65 L1790 1214.65 L1790.58 1214.65 L1791.17 1214.65 L1791.76 1214.65 L1792.34 1214.65 L1792.93 1214.65 L1793.52 1214.65 L1794.1 1214.65 L1794.69 1214.65 L1795.27 1214.65 L1795.86 1214.65 L1796.45 1214.65 L1797.03 1214.65 L1797.62 1214.65 L1798.21 1214.65 L1798.79 1214.65 L1799.38 1214.65 L1799.97 1214.65 L1800.55 1214.65 L1801.14 1214.65 L1801.73 1214.65 L1802.31 1214.65 L1802.9 1214.65 L1803.48 1214.65 L1804.07 1214.65 L1804.66 1214.65 L1805.24 1214.65 L1805.83 1214.65 L1806.42 1214.65 L1807 1214.65 L1807.59 1214.65 L1808.18 1214.65 L1808.76 1214.65 L1809.35 1214.65 L1809.94 1214.65 L1810.52 1214.65 L1811.11 1214.65 L1811.69 1214.65 L1812.28 1214.65 L1812.87 1214.65 L1813.45 1214.65 L1814.04 1214.65 L1814.63 1214.65 L1815.21 1214.65 L1815.8 1214.65 L1816.39 1214.65 L1816.97 1214.65 L1817.56 1214.65 L1818.14 1214.65 L1818.73 1214.65 L1819.32 1214.65 L1819.9 1214.65 L1820.49 1214.65 L1821.08 1214.65 L1821.66 1214.65 L1822.25 1214.65 L1822.84 1214.65 L1823.42 1214.65 L1824.01 1214.65 L1824.6 1214.65 L1825.18 1214.65 L1825.77 1214.65 L1826.35 1214.65 L1826.94 1214.65 L1827.53 1214.65 L1828.11 1214.65 L1828.7 1214.65 L1829.29 1214.65 L1829.87 1214.65 L1830.46 1214.65 L1831.05 1214.65 L1831.63 1214.65 L1832.22 1214.65 L1832.81 1214.65 L1833.39 1214.65 L1833.98 1214.65 L1834.56 1214.65 L1835.15 1214.65 L1835.74 1214.65 L1836.32 1214.65 L1836.91 1214.65 L1837.5 1214.65 L1838.08 1214.65 L1838.67 1214.65 L1839.26 1214.65 L1839.84 1214.65 L1840.43 1214.65 L1841.01 1214.65 L1841.6 1214.65 L1842.19 1214.65 L1842.77 1214.65 L1843.36 1214.65 L1843.95 1214.65 L1844.53 1214.65 L1845.12 1214.65 L1845.71 1214.65 L1846.29 1214.65 L1846.88 1214.65 L1847.47 1214.65 L1848.05 1214.65 L1848.64 1214.65 L1849.22 1214.65 L1849.81 1214.65 L1850.4 1214.65 L1850.98 1214.65 L1851.57 1214.65 L1852.16 1214.65 L1852.74 1214.65 L1853.33 1214.65 L1853.92 1214.65 L1854.5 1214.65 L1855.09 1214.65 L1855.68 1214.65 L1856.26 1214.65 L1856.85 1214.65 L1857.43 1214.65 L1858.02 1214.65 L1858.61 1214.65 L1859.19 1214.65 L1859.78 1214.65 L1860.37 1214.65 L1860.95 1214.65 L1861.54 1214.65 L1862.13 1214.65 L1862.71 1214.65 L1863.3 1214.65 L1863.88 1214.65 L1864.47 1214.65 L1865.06 1214.65 L1865.64 1214.65 L1866.23 1214.65 L1866.82 1214.65 L1867.4 1214.65 L1867.99 1214.65 L1868.58 1214.65 L1869.16 1214.65 L1869.75 1214.65 L1870.34 1214.65 L1870.92 1214.65 L1871.51 1214.65 L1872.09 1214.65 L1872.68 1214.65 L1873.27 1214.65 L1873.85 1214.65 L1874.44 1214.65 L1875.03 1214.65 L1875.61 1214.65 L1876.2 1214.65 L1876.79 1214.65 L1877.37 1214.65 L1877.96 1214.65 L1878.55 1214.65 L1879.13 1214.65 L1879.72 1214.65 L1880.3 1214.65 L1880.89 1214.65 L1881.48 1214.65 L1882.06 1214.65 L1882.65 1214.65 L1883.24 1214.65 L1883.82 1214.65 L1884.41 1214.65 L1885 1214.65 L1885.58 1214.65 L1886.17 1214.65 L1886.76 1214.65 L1887.34 1214.65 L1887.93 1214.65 L1888.51 1214.65 L1889.1 1214.65 L1889.69 1214.65 L1890.27 1214.65 L1890.86 1214.65 L1891.45 1214.65 L1892.03 1214.65 L1892.62 1214.65 L1893.21 1214.65 L1893.79 1214.65 L1894.38 1214.65 L1894.96 1214.65 L1895.55 1214.65 L1896.14 1214.65 L1896.72 1214.65 L1897.31 1214.65 L1897.9 1214.65 L1898.48 1214.65 L1899.07 1214.65 L1899.66 1214.65 L1900.24 1214.65 L1900.83 1214.65 L1901.42 1214.65 L1902 1214.65 L1902.59 1214.65 L1903.17 1214.65 L1903.76 1214.65 L1904.35 1214.65 L1904.93 1214.65 L1905.52 1214.65 L1906.11 1214.65 L1906.69 1214.65 L1907.28 1214.65 L1907.87 1214.65 L1908.45 1214.65 L1909.04 1214.65 L1909.63 1214.65 L1910.21 1214.65 L1910.8 1214.65 L1911.38 1214.65 L1911.97 1214.65 L1912.56 1214.65 L1913.14 1214.65 L1913.73 1214.65 L1914.32 1214.65 L1914.9 1214.65 L1915.49 1214.65 L1916.08 1214.65 L1916.66 1214.65 L1917.25 1214.65 L1917.83 1214.65 L1918.42 1214.65 L1919.01 1214.65 L1919.59 1214.65 L1920.18 1214.65 L1920.77 1214.65 L1921.35 1214.65 L1921.94 1214.65 L1922.53 1214.65 L1923.11 1214.65 L1923.7 1214.65 L1924.29 1214.65 L1924.87 1214.65 L1925.46 1214.65 L1926.04 1214.65 L1926.63 1214.65 L1927.22 1214.65 L1927.8 1214.65 L1928.39 1214.65 L1928.98 1214.65 L1929.56 1214.65 L1930.15 1214.65 L1930.74 1214.65 L1931.32 1214.65 L1931.91 1214.65 L1932.5 1214.65 L1933.08 1214.65 L1933.67 1214.65 L1934.25 1214.65 L1934.84 1214.65 L1935.43 1214.65 L1936.01 1214.65 L1936.6 1214.65 L1937.19 1214.65 L1937.77 1214.65 L1938.36 1214.65 L1938.95 1214.65 L1939.53 1214.65 L1940.12 1214.65 L1940.71 1214.65 L1941.29 1214.65 L1941.88 1214.65 L1942.46 1214.65 L1943.05 1214.65 L1943.64 1214.65 L1944.22 1214.65 L1944.81 1214.65 L1945.4 1214.65 L1945.98 1214.65 L1946.57 1214.65 L1947.16 1214.65 L1947.74 1214.65 L1948.33 1214.65 L1948.91 1214.65 L1949.5 1214.65 L1950.09 1214.65 L1950.67 1214.65 L1951.26 1214.65 L1951.85 1214.65 L1952.43 1214.65 L1953.02 1214.65 L1953.61 1214.65 L1954.19 1214.65 L1954.78 1214.65 L1955.37 1214.65 L1955.95 1214.65 L1956.54 1214.65 L1957.12 1214.65 L1957.71 1214.65 L1958.3 1214.65 L1958.88 1214.65 L1959.47 1214.65 L1960.06 1214.65 L1960.64 1214.65 L1961.23 1214.65 L1961.82 1214.65 L1962.4 1214.65 L1962.99 1214.65 L1963.58 1214.65 L1964.16 1214.65 L1964.75 1214.65 L1965.33 1214.65 L1965.92 1214.65 L1966.51 1214.65 L1967.09 1214.65 L1967.68 1214.65 L1968.27 1214.65 L1968.85 1214.65 L1969.44 1214.65 L1970.03 1214.65 L1970.61 1214.65 L1971.2 1214.65 L1971.78 1214.65 L1972.37 1214.65 L1972.96 1214.65 L1973.54 1214.65 L1974.13 1214.65 L1974.72 1214.65 L1975.3 1214.65 L1975.89 1214.65 L1976.48 1214.65 L1977.06 1214.65 L1977.65 1214.65 L1978.24 1214.65 L1978.82 1214.65 L1979.41 1214.65 L1979.99 1214.65 L1980.58 1214.65 L1981.17 1214.65 L1981.75 1214.65 L1982.34 1214.65 L1982.93 1214.65 L1983.51 1214.65 L1984.1 1214.65 L1984.69 1214.65 L1985.27 1214.65 L1985.86 1214.65 L1986.45 1214.65 L1987.03 1214.65 L1987.62 1214.65 L1988.2 1214.65 L1988.79 1214.65 L1989.38 1214.65 L1989.96 1214.65 L1990.55 1214.65 L1991.14 1214.65 L1991.72 1214.65 L1992.31 1214.65 L1992.9 1214.65 L1993.48 1214.65 L1994.07 1214.65 L1994.65 1214.65 L1995.24 1214.65 L1995.83 1214.65 L1996.41 1214.65 L1997 1214.65 L1997.59 1214.65 L1998.17 1214.65 L1998.76 1214.65 L1999.35 1214.65 L1999.93 1214.65 L2000.52 1214.65 L2001.11 1214.65 L2001.69 1214.65 L2002.28 1214.65 L2002.86 1214.65 L2003.45 1214.65 L2004.04 1214.65 L2004.62 1214.65 L2005.21 1214.65 L2005.8 1214.65 L2006.38 1214.65 L2006.97 1214.65 L2007.56 1214.65 L2008.14 1214.65 L2008.73 1214.65 L2009.32 1214.65 L2009.9 1214.65 L2010.49 1214.65 L2011.07 1214.65 L2011.66 1214.65 L2012.25 1214.65 L2012.83 1214.65 L2013.42 1214.65 L2014.01 1214.65 L2014.59 1214.65 L2015.18 1214.65 L2015.77 1214.65 L2016.35 1214.65 L2016.94 1214.65 L2017.53 1214.65 L2018.11 1214.65 L2018.7 1214.65 L2019.28 1214.65 L2019.87 1214.65 L2020.46 1214.65 L2021.04 1214.65 L2021.63 1214.65 L2022.22 1214.65 L2022.8 1214.65 L2023.39 1214.65 L2023.98 1214.65 L2024.56 1214.65 L2025.15 1214.65 L2025.73 1214.65 L2026.32 1214.65 L2026.91 1214.65 L2027.49 1214.65 L2028.08 1214.65 L2028.67 1214.65 L2029.25 1214.65 L2029.84 1214.65 L2030.43 1214.65 L2031.01 1214.65 L2031.6 1214.65 L2032.19 1214.65 L2032.77 1214.65 L2033.36 1214.65 L2033.94 1214.65 L2034.53 1214.65 L2035.12 1214.65 L2035.7 1214.65 L2036.29 1214.65 L2036.88 1214.65 L2037.46 1214.65 L2038.05 1214.65 L2038.64 1214.65 L2039.22 1214.65 L2039.81 1214.65 L2040.4 1214.65 L2040.98 1214.65 L2041.57 1214.65 L2042.15 1214.65 L2042.74 1214.65 L2043.33 1214.65 L2043.91 1214.65 L2044.5 1214.65 L2045.09 1214.65 L2045.67 1214.65 L2046.26 1214.65 L2046.85 1214.65 L2047.43 1214.65 L2048.02 1214.65 L2048.6 1214.65 L2049.19 1214.65 L2049.78 1214.65 L2050.36 1214.65 L2050.95 1214.65 L2051.54 1214.65 L2052.12 1214.65 L2052.71 1214.65 L2053.3 1214.65 L2053.88 1214.65 L2054.47 1214.65 L2055.06 1214.65 L2055.64 1214.65 L2056.23 1214.65 L2056.81 1214.65 L2057.4 1214.65 L2057.99 1214.65 L2058.57 1214.65 L2059.16 1214.65 L2059.75 1214.65 L2060.33 1214.65 L2060.92 1214.65 L2061.51 1214.65 L2062.09 1214.65 L2062.68 1214.65 L2063.27 1214.65 L2063.85 1214.65 L2064.44 1214.65 L2065.02 1214.65 L2065.61 1214.65 L2066.2 1214.65 L2066.78 1214.65 L2067.37 1214.65 L2067.96 1214.65 L2068.54 1214.65 L2069.13 1214.65 L2069.72 1214.65 L2070.3 1214.65 L2070.89 1214.65 L2071.48 1214.65 L2072.06 1214.65 L2072.65 1214.65 L2073.23 1214.65 L2073.82 1214.65 L2074.41 1214.65 L2074.99 1214.65 L2075.58 1214.65 L2076.17 1214.65 L2076.75 1214.65 L2077.34 1214.65 L2077.93 1214.65 L2078.51 1214.65 L2079.1 1214.65 L2079.68 1214.65 L2080.27 1214.65 L2080.86 1214.65 L2081.44 1214.65 L2082.03 1214.65 L2082.62 1214.65 L2083.2 1214.65 L2083.79 1214.65 L2084.38 1214.65 L2084.96 1214.65 L2085.55 1214.65 L2086.14 1214.65 L2086.72 1214.65 L2087.31 1214.65 L2087.89 1214.65 L2088.48 1214.65 L2089.07 1214.65 L2089.65 1214.65 L2090.24 1214.65 L2090.83 1214.65 L2091.41 1214.65 L2092 1214.65 L2092.59 1214.65 L2093.17 1214.65 L2093.76 1214.65 L2094.35 1214.65 L2094.93 1214.65 L2095.52 1214.65 L2096.1 1214.65 L2096.69 1214.65 L2097.28 1214.65 L2097.86 1214.65 L2098.45 1214.65 L2099.04 1214.65 L2099.62 1214.65 L2100.21 1214.65 L2100.8 1214.65 L2101.38 1214.65 L2101.97 1214.65 L2102.55 1214.65 L2103.14 1214.65 L2103.73 1214.65 L2104.31 1214.65 L2104.9 1214.65 L2105.49 1214.65 L2106.07 1214.65 L2106.66 1214.65 L2107.25 1214.65 L2107.83 1214.65 L2108.42 1214.65 L2109.01 1214.65 L2109.59 1214.65 L2110.18 1214.65 L2110.76 1214.65 L2111.35 1214.65 L2111.94 1214.65 L2112.52 1214.65 L2113.11 1214.65 L2113.7 1214.65 L2114.28 1214.65 L2114.87 1214.65 L2115.46 1214.65 L2116.04 1214.65 L2116.63 1214.65 L2117.22 1214.65 L2117.8 1214.65 L2118.39 1214.65 L2118.97 1214.65 L2119.56 1214.65 L2120.15 1214.65 L2120.73 1214.65 L2121.32 1214.65 L2121.91 1214.65 L2122.49 1214.65 L2123.08 1214.65 L2123.67 1214.65 L2124.25 1214.65 L2124.84 1214.65 L2125.42 1214.65 L2126.01 1214.65 L2126.6 1214.65 L2127.18 1214.65 L2127.77 1214.65 L2128.36 1214.65 L2128.94 1214.65 L2129.53 1214.65 L2130.12 1214.65 L2130.7 1214.65 L2131.29 1214.65 L2131.88 1214.65 L2132.46 1214.65 L2133.05 1214.65 L2133.63 1214.65 L2134.22 1214.65 L2134.81 1214.65 L2135.39 1214.65 L2135.98 1214.65 L2136.57 1214.65 L2137.15 1214.65 L2137.74 1214.65 L2138.33 1214.65 L2138.91 1214.65 L2139.5 1214.65 L2140.09 1214.65 L2140.67 1214.65 L2141.26 1214.65 L2141.84 1214.65 L2142.43 1214.65 L2143.02 1214.65 L2143.6 1214.65 L2144.19 1214.65 L2144.78 1214.65 L2145.36 1214.65 L2145.95 1214.65 L2146.54 1214.65 L2147.12 1214.65 L2147.71 1214.65 L2148.3 1214.65 L2148.88 1214.65 L2149.47 1214.65 L2150.05 1214.65 L2150.64 1214.65 L2151.23 1214.65 L2151.81 1214.65 L2152.4 1214.65 L2152.99 1214.65 L2153.57 1214.65 L2154.16 1214.65 L2154.75 1214.65 L2155.33 1214.65 L2155.92 1214.65 L2156.5 1214.65 L2157.09 1214.65 L2157.68 1214.65 L2158.26 1214.65 L2158.26 1214.41 L2157.68 1214.41 L2157.09 1214.41 L2156.5 1214.41 L2155.92 1214.41 L2155.33 1214.41 L2154.75 1214.41 L2154.16 1214.41 L2153.57 1214.41 L2152.99 1214.41 L2152.4 1214.41 L2151.81 1214.41 L2151.23 1214.41 L2150.64 1214.41 L2150.05 1214.41 L2149.47 1214.41 L2148.88 1214.41 L2148.3 1214.41 L2147.71 1214.41 L2147.12 1214.41 L2146.54 1214.41 L2145.95 1214.41 L2145.36 1214.41 L2144.78 1214.41 L2144.19 1214.41 L2143.6 1214.41 L2143.02 1214.41 L2142.43 1214.41 L2141.84 1214.41 L2141.26 1214.41 L2140.67 1214.41 L2140.09 1214.41 L2139.5 1214.41 L2138.91 1214.41 L2138.33 1214.41 L2137.74 1214.41 L2137.15 1214.41 L2136.57 1214.41 L2135.98 1214.41 L2135.39 1214.41 L2134.81 1214.41 L2134.22 1214.41 L2133.63 1214.41 L2133.05 1214.41 L2132.46 1214.41 L2131.88 1214.41 L2131.29 1214.41 L2130.7 1214.41 L2130.12 1214.41 L2129.53 1214.41 L2128.94 1214.41 L2128.36 1214.41 L2127.77 1214.41 L2127.18 1214.41 L2126.6 1214.41 L2126.01 1214.41 L2125.42 1214.41 L2124.84 1214.41 L2124.25 1214.41 L2123.67 1214.41 L2123.08 1214.41 L2122.49 1214.41 L2121.91 1214.41 L2121.32 1214.41 L2120.73 1214.41 L2120.15 1214.41 L2119.56 1214.41 L2118.97 1214.41 L2118.39 1214.41 L2117.8 1214.41 L2117.22 1214.41 L2116.63 1214.41 L2116.04 1214.41 L2115.46 1214.41 L2114.87 1214.41 L2114.28 1214.41 L2113.7 1214.41 L2113.11 1214.41 L2112.52 1214.41 L2111.94 1214.41 L2111.35 1214.41 L2110.76 1214.41 L2110.18 1214.41 L2109.59 1214.41 L2109.01 1214.41 L2108.42 1214.41 L2107.83 1214.41 L2107.25 1214.41 L2106.66 1214.41 L2106.07 1214.41 L2105.49 1214.41 L2104.9 1214.41 L2104.31 1214.41 L2103.73 1214.41 L2103.14 1214.41 L2102.55 1214.41 L2101.97 1214.41 L2101.38 1214.41 L2100.8 1214.41 L2100.21 1214.41 L2099.62 1214.41 L2099.04 1214.41 L2098.45 1214.41 L2097.86 1214.41 L2097.28 1214.41 L2096.69 1214.41 L2096.1 1214.41 L2095.52 1214.41 L2094.93 1214.41 L2094.35 1214.41 L2093.76 1214.41 L2093.17 1214.41 L2092.59 1214.41 L2092 1214.41 L2091.41 1214.41 L2090.83 1214.41 L2090.24 1214.41 L2089.65 1214.41 L2089.07 1214.41 L2088.48 1214.41 L2087.89 1214.41 L2087.31 1214.41 L2086.72 1214.41 L2086.14 1214.41 L2085.55 1214.41 L2084.96 1214.41 L2084.38 1214.41 L2083.79 1214.41 L2083.2 1214.41 L2082.62 1214.41 L2082.03 1214.41 L2081.44 1214.41 L2080.86 1214.41 L2080.27 1214.41 L2079.68 1214.41 L2079.1 1214.41 L2078.51 1214.41 L2077.93 1214.41 L2077.34 1214.41 L2076.75 1214.41 L2076.17 1214.41 L2075.58 1214.41 L2074.99 1214.41 L2074.41 1214.41 L2073.82 1214.41 L2073.23 1214.41 L2072.65 1214.41 L2072.06 1214.41 L2071.48 1214.41 L2070.89 1214.41 L2070.3 1214.41 L2069.72 1214.41 L2069.13 1214.41 L2068.54 1214.41 L2067.96 1214.41 L2067.37 1214.41 L2066.78 1214.41 L2066.2 1214.41 L2065.61 1214.41 L2065.02 1214.41 L2064.44 1214.41 L2063.85 1214.41 L2063.27 1214.41 L2062.68 1214.41 L2062.09 1214.41 L2061.51 1214.41 L2060.92 1214.41 L2060.33 1214.41 L2059.75 1214.41 L2059.16 1214.41 L2058.57 1214.41 L2057.99 1214.41 L2057.4 1214.41 L2056.81 1214.41 L2056.23 1214.41 L2055.64 1214.41 L2055.06 1214.41 L2054.47 1214.41 L2053.88 1214.41 L2053.3 1214.41 L2052.71 1214.41 L2052.12 1214.41 L2051.54 1214.41 L2050.95 1214.41 L2050.36 1214.41 L2049.78 1214.41 L2049.19 1214.41 L2048.6 1214.41 L2048.02 1214.41 L2047.43 1214.41 L2046.85 1214.41 L2046.26 1214.41 L2045.67 1214.41 L2045.09 1214.41 L2044.5 1214.41 L2043.91 1214.41 L2043.33 1214.41 L2042.74 1214.41 L2042.15 1214.41 L2041.57 1214.41 L2040.98 1214.41 L2040.4 1214.41 L2039.81 1214.41 L2039.22 1214.41 L2038.64 1214.41 L2038.05 1214.41 L2037.46 1214.41 L2036.88 1214.41 L2036.29 1214.41 L2035.7 1214.41 L2035.12 1214.41 L2034.53 1214.41 L2033.94 1214.41 L2033.36 1214.41 L2032.77 1214.41 L2032.19 1214.41 L2031.6 1214.41 L2031.01 1214.41 L2030.43 1214.41 L2029.84 1214.41 L2029.25 1214.41 L2028.67 1214.41 L2028.08 1214.41 L2027.49 1214.41 L2026.91 1214.41 L2026.32 1214.41 L2025.73 1214.41 L2025.15 1214.41 L2024.56 1214.41 L2023.98 1214.41 L2023.39 1214.41 L2022.8 1214.41 L2022.22 1214.41 L2021.63 1214.41 L2021.04 1214.41 L2020.46 1214.41 L2019.87 1214.41 L2019.28 1214.41 L2018.7 1214.41 L2018.11 1214.41 L2017.53 1214.41 L2016.94 1214.41 L2016.35 1214.41 L2015.77 1214.41 L2015.18 1214.41 L2014.59 1214.41 L2014.01 1214.41 L2013.42 1214.41 L2012.83 1214.41 L2012.25 1214.41 L2011.66 1214.41 L2011.07 1214.41 L2010.49 1214.41 L2009.9 1214.41 L2009.32 1214.41 L2008.73 1214.41 L2008.14 1214.41 L2007.56 1214.41 L2006.97 1214.41 L2006.38 1214.41 L2005.8 1214.41 L2005.21 1214.41 L2004.62 1214.41 L2004.04 1214.41 L2003.45 1214.41 L2002.86 1214.41 L2002.28 1214.41 L2001.69 1214.41 L2001.11 1214.41 L2000.52 1214.41 L1999.93 1214.41 L1999.35 1214.41 L1998.76 1214.41 L1998.17 1214.41 L1997.59 1214.41 L1997 1214.41 L1996.41 1214.41 L1995.83 1214.41 L1995.24 1214.41 L1994.65 1214.41 L1994.07 1214.41 L1993.48 1214.41 L1992.9 1214.41 L1992.31 1214.41 L1991.72 1214.41 L1991.14 1214.41 L1990.55 1214.41 L1989.96 1214.41 L1989.38 1214.41 L1988.79 1214.41 L1988.2 1214.41 L1987.62 1214.41 L1987.03 1214.41 L1986.45 1214.41 L1985.86 1214.41 L1985.27 1214.41 L1984.69 1214.41 L1984.1 1214.41 L1983.51 1214.41 L1982.93 1214.41 L1982.34 1214.41 L1981.75 1214.41 L1981.17 1214.41 L1980.58 1214.41 L1979.99 1214.41 L1979.41 1214.41 L1978.82 1214.41 L1978.24 1214.41 L1977.65 1214.41 L1977.06 1214.41 L1976.48 1214.41 L1975.89 1214.41 L1975.3 1214.41 L1974.72 1214.41 L1974.13 1214.41 L1973.54 1214.41 L1972.96 1214.41 L1972.37 1214.41 L1971.78 1214.41 L1971.2 1214.41 L1970.61 1214.41 L1970.03 1214.41 L1969.44 1214.41 L1968.85 1214.41 L1968.27 1214.41 L1967.68 1214.41 L1967.09 1214.41 L1966.51 1214.41 L1965.92 1214.41 L1965.33 1214.41 L1964.75 1214.41 L1964.16 1214.41 L1963.58 1214.41 L1962.99 1214.41 L1962.4 1214.41 L1961.82 1214.41 L1961.23 1214.41 L1960.64 1214.41 L1960.06 1214.41 L1959.47 1214.41 L1958.88 1214.41 L1958.3 1214.41 L1957.71 1214.41 L1957.12 1214.41 L1956.54 1214.41 L1955.95 1214.41 L1955.37 1214.41 L1954.78 1214.41 L1954.19 1214.41 L1953.61 1214.41 L1953.02 1214.41 L1952.43 1214.41 L1951.85 1214.41 L1951.26 1214.41 L1950.67 1214.41 L1950.09 1214.41 L1949.5 1214.41 L1948.91 1214.41 L1948.33 1214.41 L1947.74 1214.41 L1947.16 1214.41 L1946.57 1214.41 L1945.98 1214.41 L1945.4 1214.41 L1944.81 1214.41 L1944.22 1214.41 L1943.64 1214.41 L1943.05 1214.41 L1942.46 1214.41 L1941.88 1214.41 L1941.29 1214.41 L1940.71 1214.41 L1940.12 1214.41 L1939.53 1214.41 L1938.95 1214.41 L1938.36 1214.41 L1937.77 1214.41 L1937.19 1214.41 L1936.6 1214.41 L1936.01 1214.41 L1935.43 1214.41 L1934.84 1214.41 L1934.25 1214.41 L1933.67 1214.41 L1933.08 1214.41 L1932.5 1214.41 L1931.91 1214.41 L1931.32 1214.41 L1930.74 1214.41 L1930.15 1214.41 L1929.56 1214.41 L1928.98 1214.41 L1928.39 1214.41 L1927.8 1214.41 L1927.22 1214.41 L1926.63 1214.41 L1926.04 1214.41 L1925.46 1214.41 L1924.87 1214.41 L1924.29 1214.41 L1923.7 1214.41 L1923.11 1214.41 L1922.53 1214.41 L1921.94 1214.41 L1921.35 1214.41 L1920.77 1214.41 L1920.18 1214.41 L1919.59 1214.41 L1919.01 1214.41 L1918.42 1214.41 L1917.83 1214.41 L1917.25 1214.41 L1916.66 1214.41 L1916.08 1214.41 L1915.49 1214.41 L1914.9 1214.41 L1914.32 1214.41 L1913.73 1214.41 L1913.14 1214.41 L1912.56 1214.41 L1911.97 1214.41 L1911.38 1214.41 L1910.8 1214.41 L1910.21 1214.41 L1909.63 1214.41 L1909.04 1214.41 L1908.45 1214.41 L1907.87 1214.41 L1907.28 1214.41 L1906.69 1214.41 L1906.11 1214.41 L1905.52 1214.41 L1904.93 1214.41 L1904.35 1214.41 L1903.76 1214.41 L1903.17 1214.41 L1902.59 1214.41 L1902 1214.41 L1901.42 1214.41 L1900.83 1214.41 L1900.24 1214.41 L1899.66 1214.41 L1899.07 1214.41 L1898.48 1214.41 L1897.9 1214.41 L1897.31 1214.41 L1896.72 1214.41 L1896.14 1214.41 L1895.55 1214.41 L1894.96 1214.41 L1894.38 1214.41 L1893.79 1214.41 L1893.21 1214.41 L1892.62 1214.41 L1892.03 1214.41 L1891.45 1214.41 L1890.86 1214.41 L1890.27 1214.41 L1889.69 1214.41 L1889.1 1214.41 L1888.51 1214.41 L1887.93 1214.41 L1887.34 1214.41 L1886.76 1214.41 L1886.17 1214.41 L1885.58 1214.41 L1885 1214.41 L1884.41 1214.41 L1883.82 1214.41 L1883.24 1214.41 L1882.65 1214.41 L1882.06 1214.41 L1881.48 1214.41 L1880.89 1214.41 L1880.3 1214.41 L1879.72 1214.41 L1879.13 1214.41 L1878.55 1214.41 L1877.96 1214.41 L1877.37 1214.41 L1876.79 1214.41 L1876.2 1214.41 L1875.61 1214.41 L1875.03 1214.41 L1874.44 1214.41 L1873.85 1214.41 L1873.27 1214.41 L1872.68 1214.41 L1872.09 1214.41 L1871.51 1214.41 L1870.92 1214.41 L1870.34 1214.41 L1869.75 1214.41 L1869.16 1214.41 L1868.58 1214.41 L1867.99 1214.41 L1867.4 1214.41 L1866.82 1214.41 L1866.23 1214.41 L1865.64 1214.41 L1865.06 1214.41 L1864.47 1214.41 L1863.88 1214.41 L1863.3 1214.41 L1862.71 1214.41 L1862.13 1214.41 L1861.54 1214.41 L1860.95 1214.41 L1860.37 1214.41 L1859.78 1214.41 L1859.19 1214.41 L1858.61 1214.41 L1858.02 1214.41 L1857.43 1214.41 L1856.85 1214.41 L1856.26 1214.41 L1855.68 1214.41 L1855.09 1214.41 L1854.5 1214.41 L1853.92 1214.41 L1853.33 1214.41 L1852.74 1214.41 L1852.16 1214.41 L1851.57 1214.41 L1850.98 1214.41 L1850.4 1214.41 L1849.81 1214.41 L1849.22 1214.41 L1848.64 1214.41 L1848.05 1214.41 L1847.47 1214.41 L1846.88 1214.41 L1846.29 1214.41 L1845.71 1214.41 L1845.12 1214.41 L1844.53 1214.41 L1843.95 1214.41 L1843.36 1214.41 L1842.77 1214.41 L1842.19 1214.41 L1841.6 1214.41 L1841.01 1214.41 L1840.43 1214.41 L1839.84 1214.41 L1839.26 1214.41 L1838.67 1214.41 L1838.08 1214.41 L1837.5 1214.41 L1836.91 1214.41 L1836.32 1214.41 L1835.74 1214.41 L1835.15 1214.41 L1834.56 1214.41 L1833.98 1214.41 L1833.39 1214.41 L1832.81 1214.41 L1832.22 1214.41 L1831.63 1214.41 L1831.05 1214.41 L1830.46 1214.41 L1829.87 1214.41 L1829.29 1214.41 L1828.7 1214.41 L1828.11 1214.41 L1827.53 1214.41 L1826.94 1214.41 L1826.35 1214.41 L1825.77 1214.41 L1825.18 1214.41 L1824.6 1214.41 L1824.01 1214.41 L1823.42 1214.41 L1822.84 1214.41 L1822.25 1214.41 L1821.66 1214.41 L1821.08 1214.41 L1820.49 1214.41 L1819.9 1214.41 L1819.32 1214.41 L1818.73 1214.41 L1818.14 1214.41 L1817.56 1214.41 L1816.97 1214.41 L1816.39 1214.41 L1815.8 1214.41 L1815.21 1214.41 L1814.63 1214.41 L1814.04 1214.41 L1813.45 1214.41 L1812.87 1214.41 L1812.28 1214.41 L1811.69 1214.41 L1811.11 1214.41 L1810.52 1214.41 L1809.94 1214.41 L1809.35 1214.41 L1808.76 1214.41 L1808.18 1214.41 L1807.59 1214.41 L1807 1214.41 L1806.42 1214.41 L1805.83 1214.41 L1805.24 1214.41 L1804.66 1214.41 L1804.07 1214.41 L1803.48 1214.41 L1802.9 1214.41 L1802.31 1214.41 L1801.73 1214.41 L1801.14 1214.41 L1800.55 1214.41 L1799.97 1214.41 L1799.38 1214.41 L1798.79 1214.41 L1798.21 1214.41 L1797.62 1214.41 L1797.03 1214.41 L1796.45 1214.41 L1795.86 1214.41 L1795.27 1214.41 L1794.69 1214.41 L1794.1 1214.41 L1793.52 1214.41 L1792.93 1214.41 L1792.34 1214.41 L1791.76 1214.41 L1791.17 1214.41 L1790.58 1214.41 L1790 1214.41 L1789.41 1214.41 L1788.82 1214.41 L1788.24 1214.41 L1787.65 1214.41 L1787.06 1214.41 L1786.48 1214.41 L1785.89 1214.41 L1785.31 1214.41 L1784.72 1214.41 L1784.13 1214.41 L1783.55 1214.41 L1782.96 1214.41 L1782.37 1214.41 L1781.79 1214.41 L1781.2 1214.41 L1780.61 1214.41 L1780.03 1214.41 L1779.44 1214.41 L1778.86 1214.41 L1778.27 1214.41 L1777.68 1214.41 L1777.1 1214.41 L1776.51 1214.41 L1775.92 1214.41 L1775.34 1214.41 L1774.75 1214.41 L1774.16 1214.41 L1773.58 1214.41 L1772.99 1214.41 L1772.4 1214.41 L1771.82 1214.41 L1771.23 1214.41 L1770.65 1214.41 L1770.06 1214.41 L1769.47 1214.41 L1768.89 1214.41 L1768.3 1214.41 L1767.71 1214.41 L1767.13 1214.41 L1766.54 1214.41 L1765.95 1214.41 L1765.37 1214.41 L1764.78 1214.41 L1764.19 1214.41 L1763.61 1214.41 L1763.02 1214.41 L1762.44 1214.41 L1761.85 1214.41 L1761.26 1214.41 L1760.68 1214.41 L1760.09 1214.41 L1759.5 1214.41 L1758.92 1214.41 L1758.33 1214.41 L1757.74 1214.41 L1757.16 1214.41 L1756.57 1214.41 L1755.99 1214.41 L1755.4 1214.41 L1754.81 1214.41 L1754.23 1214.41 L1753.64 1214.41 L1753.05 1214.41 L1752.47 1214.41 L1751.88 1214.41 L1751.29 1214.41 L1750.71 1214.41 L1750.12 1214.41 L1749.53 1214.41 L1748.95 1214.41 L1748.36 1214.41 L1747.78 1214.41 L1747.19 1214.41 L1746.6 1214.41 L1746.02 1214.41 L1745.43 1214.41 L1744.84 1214.41 L1744.26 1214.41 L1743.67 1214.41 L1743.08 1214.41 L1742.5 1214.41 L1741.91 1214.41 L1741.32 1214.41 L1740.74 1214.41 L1740.15 1214.41 L1739.57 1214.41 L1738.98 1214.41 L1738.39 1214.41 L1737.81 1214.41 L1737.22 1214.41 L1736.63 1214.41 L1736.05 1214.41 L1735.46 1214.41 L1734.87 1214.41 L1734.29 1214.41 L1733.7 1214.41 L1733.11 1214.41 L1732.53 1214.41 L1731.94 1214.41 L1731.36 1214.41 L1730.77 1214.41 L1730.18 1214.41 L1729.6 1214.41 L1729.01 1214.41 L1728.42 1214.41 L1727.84 1214.41 L1727.25 1214.41 L1726.66 1214.41 L1726.08 1214.41 L1725.49 1214.41 L1724.91 1214.41 L1724.32 1214.41 L1723.73 1214.41 L1723.15 1214.41 L1722.56 1214.41 L1721.97 1214.41 L1721.39 1214.41 L1720.8 1214.41 L1720.21 1214.41 L1719.63 1214.41 L1719.04 1214.41 L1718.45 1214.41 L1717.87 1214.41 L1717.28 1214.41 L1716.7 1214.41 L1716.11 1214.41 L1715.52 1214.41 L1714.94 1214.41 L1714.35 1214.41 L1713.76 1214.41 L1713.18 1214.41 L1712.59 1214.41 L1712 1214.41 L1711.42 1214.41 L1710.83 1214.41 L1710.24 1214.41 L1709.66 1214.41 L1709.07 1214.41 L1708.49 1214.41 L1707.9 1214.41 L1707.31 1214.41 L1706.73 1214.41 L1706.14 1214.41 L1705.55 1214.41 L1704.97 1214.41 L1704.38 1214.41 L1703.79 1214.41 L1703.21 1214.41 L1702.62 1214.41 L1702.04 1214.41 L1701.45 1214.41 L1700.86 1214.41 L1700.28 1214.41 L1699.69 1214.41 L1699.1 1214.41 L1698.52 1214.41 L1697.93 1214.41 L1697.34 1214.41 L1696.76 1214.41 L1696.17 1214.41 L1695.58 1214.41 L1695 1214.41 L1694.41 1214.41 L1693.83 1214.41 L1693.24 1214.41 L1692.65 1214.41 L1692.07 1214.41 L1691.48 1214.41 L1690.89 1214.41 L1690.31 1214.41 L1689.72 1214.41 L1689.13 1214.41 L1688.55 1214.41 L1687.96 1214.41 L1687.37 1214.41 L1686.79 1214.41 L1686.2 1214.41 L1685.62 1214.41 L1685.03 1214.41 L1684.44 1214.41 L1683.86 1214.41 L1683.27 1214.41 L1682.68 1214.41 L1682.1 1214.41 L1681.51 1214.41 L1680.92 1214.41 L1680.34 1214.41 L1679.75 1214.41 L1679.17 1214.41 L1678.58 1214.41 L1677.99 1214.41 L1677.41 1214.41 L1676.82 1214.41 L1676.23 1214.41 L1675.65 1214.41 L1675.06 1214.41 L1674.47 1214.41 L1673.89 1214.41 L1673.3 1214.41 L1672.71 1214.41 L1672.13 1214.41 L1671.54 1214.41 L1670.96 1214.41 L1670.37 1214.41 L1669.78 1214.41 L1669.2 1214.41 L1668.61 1214.41 L1668.02 1214.41 L1667.44 1214.41 L1666.85 1214.41 L1666.26 1214.41 L1665.68 1214.41 L1665.09 1214.41 L1664.5 1214.41 L1663.92 1214.41 L1663.33 1214.41 L1662.75 1214.41 L1662.16 1214.41 L1661.57 1214.41 L1660.99 1214.41 L1660.4 1214.41 L1659.81 1214.41 L1659.23 1214.41 L1658.64 1214.41 L1658.05 1214.41 L1657.47 1214.41 L1656.88 1214.41 L1656.29 1214.41 L1655.71 1214.41 L1655.12 1214.41 L1654.54 1214.41 L1653.95 1214.41 L1653.36 1214.41 L1652.78 1214.41 L1652.19 1214.41 L1651.6 1214.41 L1651.02 1214.41 L1650.43 1214.41 L1649.84 1214.41 L1649.26 1214.41 L1648.67 1214.41 L1648.09 1214.41 L1647.5 1214.41 L1646.91 1214.41 L1646.33 1214.41 L1645.74 1214.41 L1645.15 1214.41 L1644.57 1214.41 L1643.98 1214.41 L1643.39 1214.41 L1642.81 1214.41 L1642.22 1214.41 L1641.63 1214.41 L1641.05 1214.41 L1640.46 1214.41 L1639.88 1214.41 L1639.29 1214.41 L1638.7 1214.41 L1638.12 1214.41 L1637.53 1214.41 L1636.94 1214.41 L1636.36 1214.41 L1635.77 1214.41 L1635.18 1214.41 L1634.6 1214.41 L1634.01 1214.41 L1633.42 1214.41 L1632.84 1214.41 L1632.25 1214.41 L1631.67 1214.41 L1631.08 1214.41 L1630.49 1214.41 L1629.91 1214.41 L1629.32 1214.41 L1628.73 1214.41 L1628.15 1214.41 L1627.56 1214.41 L1626.97 1214.41 L1626.39 1214.41 L1625.8 1214.41 L1625.22 1214.41 L1624.63 1214.41 L1624.04 1214.41 L1623.46 1214.41 L1622.87 1214.41 L1622.28 1214.41 L1621.7 1214.41 L1621.11 1214.41 L1620.52 1214.41 L1619.94 1214.41 L1619.35 1214.41 L1618.76 1214.41 L1618.18 1214.41 L1617.59 1214.41 L1617.01 1214.41 L1616.42 1214.41 L1615.83 1214.41 L1615.25 1214.41 L1614.66 1214.41 L1614.07 1214.41 L1613.49 1214.41 L1612.9 1214.41 L1612.31 1214.41 L1611.73 1214.41 L1611.14 1214.41 L1610.55 1214.41 L1609.97 1214.41 L1609.38 1214.41 L1608.8 1214.41 L1608.21 1214.41 L1607.62 1214.41 L1607.04 1214.41 L1606.45 1214.41 L1605.86 1214.41 L1605.28 1214.41 L1604.69 1214.41 L1604.1 1214.41 L1603.52 1214.41 L1602.93 1214.41 L1602.34 1214.41 L1601.76 1214.41 L1601.17 1214.41 L1600.59 1214.41 L1600 1214.41 L1599.41 1214.41 L1598.83 1214.41 L1598.24 1214.41 L1597.65 1214.41 L1597.07 1214.41 L1596.48 1214.41 L1595.89 1214.41 L1595.31 1214.41 L1594.72 1214.41 L1594.14 1214.41 L1593.55 1214.41 L1592.96 1214.41 L1592.38 1214.41 L1591.79 1214.41 L1591.2 1214.41 L1590.62 1214.41 L1590.03 1214.41 L1589.44 1214.41 L1588.86 1214.41 L1588.27 1214.41 L1587.68 1214.41 L1587.1 1214.41 L1586.51 1214.41 L1585.93 1214.41 L1585.34 1214.41 L1584.75 1214.41 L1584.17 1214.41 L1583.58 1214.41 L1582.99 1214.41 L1582.41 1214.41 L1581.82 1214.41 L1581.23 1214.41 L1580.65 1214.41 L1580.06 1214.41 L1579.47 1214.41 L1578.89 1214.41 L1578.3 1214.41 L1577.72 1214.41 L1577.13 1214.41 L1576.54 1214.41 L1575.96 1214.41 L1575.37 1214.41 L1574.78 1214.41 L1574.2 1214.41 L1573.61 1214.41 L1573.02 1214.41 L1572.44 1214.41 L1571.85 1214.41 L1571.27 1214.41 L1570.68 1214.41 L1570.09 1214.41 L1569.51 1214.41 L1568.92 1214.41 L1568.33 1214.41 L1567.75 1214.41 L1567.16 1214.41 L1566.57 1214.41 L1565.99 1214.41 L1565.4 1214.41 L1564.81 1214.41 L1564.23 1214.41 L1563.64 1214.41 L1563.06 1214.41 L1562.47 1214.41 L1561.88 1214.41 L1561.3 1214.41 L1560.71 1214.41 L1560.12 1214.41 L1559.54 1214.41 L1558.95 1214.41 L1558.36 1214.41 L1557.78 1214.41 L1557.19 1214.41 L1556.6 1214.41 L1556.02 1214.41 L1555.43 1214.41 L1554.85 1214.41 L1554.26 1214.41 L1553.67 1214.41 L1553.09 1214.41 L1552.5 1214.41 L1551.91 1214.41 L1551.33 1214.41 L1550.74 1214.41 L1550.15 1214.41 L1549.57 1214.41 L1548.98 1214.41 L1548.4 1214.41 L1547.81 1214.41 L1547.22 1214.41 L1546.64 1214.41 L1546.05 1214.41 L1545.46 1214.41 L1544.88 1214.41 L1544.29 1214.41 L1543.7 1214.41 L1543.12 1214.41 L1542.53 1214.41 L1541.94 1214.41 L1541.36 1214.41 L1540.77 1214.41 L1540.19 1214.41 L1539.6 1214.41 L1539.01 1214.41 L1538.43 1214.41 L1537.84 1214.41 L1537.25 1214.41 L1536.67 1214.41 L1536.08 1214.41 L1535.49 1214.41 L1534.91 1214.41 L1534.32 1214.41 L1533.73 1214.41 L1533.15 1214.41 L1532.56 1214.41 L1531.98 1214.41 L1531.39 1214.41 L1530.8 1214.41 L1530.22 1214.41 L1529.63 1214.41 L1529.04 1214.41 L1528.46 1214.41 L1527.87 1214.41 L1527.28 1214.41 L1526.7 1214.41 L1526.11 1214.41 L1525.52 1214.41 L1524.94 1214.41 L1524.35 1214.41 L1523.77 1214.41 L1523.18 1214.41 L1522.59 1214.41 L1522.01 1214.41 L1521.42 1214.41 L1520.83 1214.41 L1520.25 1214.41 L1519.66 1214.41 L1519.07 1214.41 L1518.49 1214.41 L1517.9 1214.41 L1517.32 1214.41 L1516.73 1214.41 L1516.14 1214.41 L1515.56 1214.41 L1514.97 1214.41 L1514.38 1214.41 L1513.8 1214.41 L1513.21 1214.41 L1512.62 1214.41 L1512.04 1214.41 L1511.45 1214.41 L1510.86 1214.41 L1510.28 1214.41 L1509.69 1214.41 L1509.11 1214.41 L1508.52 1214.41 L1507.93 1214.41 L1507.35 1214.41 L1506.76 1214.41 L1506.17 1214.41 L1505.59 1214.41 L1505 1214.41 L1504.41 1214.41 L1503.83 1214.41 L1503.24 1214.41 L1502.65 1214.41 L1502.07 1214.41 L1501.48 1214.41 L1500.9 1214.41 L1500.31 1214.41 L1499.72 1214.41 L1499.14 1214.41 L1498.55 1214.41 L1497.96 1214.41 L1497.38 1214.41 L1496.79 1214.41 L1496.2 1214.41 L1495.62 1214.41 L1495.03 1214.41 L1494.45 1214.41 L1493.86 1214.41 L1493.27 1214.41 L1492.69 1214.41 L1492.1 1214.41 L1491.51 1214.41 L1490.93 1214.41 L1490.34 1214.41 L1489.75 1214.41 L1489.17 1214.41 L1488.58 1214.41 L1487.99 1214.41 L1487.41 1214.41 L1486.82 1214.41 L1486.24 1214.41 L1485.65 1214.41 L1485.06 1214.41 L1484.48 1214.41 L1483.89 1214.41 L1483.3 1214.41 L1482.72 1214.41 L1482.13 1214.41 L1481.54 1214.41 L1480.96 1214.41 L1480.37 1214.41 L1479.78 1214.41 L1479.2 1214.41 L1478.61 1214.41 L1478.03 1214.41 L1477.44 1214.41 L1476.85 1214.41 L1476.27 1214.41 L1475.68 1214.41 L1475.09 1214.41 L1474.51 1214.41 L1473.92 1214.41 L1473.33 1214.41 L1472.75 1214.41 L1472.16 1214.41 L1471.57 1214.41 L1470.99 1214.41 L1470.4 1214.41 L1469.82 1214.41 L1469.23 1214.41 L1468.64 1214.41 L1468.06 1214.41 L1467.47 1214.41 L1466.88 1214.41 L1466.3 1214.41 L1465.71 1214.41 L1465.12 1214.41 L1464.54 1214.41 L1463.95 1214.41 L1463.37 1214.41 L1462.78 1214.41 L1462.19 1214.41 L1461.61 1214.41 L1461.02 1214.41 L1460.43 1214.41 L1459.85 1214.41 L1459.26 1214.41 L1458.67 1214.41 L1458.09 1214.41 L1457.5 1214.41 L1456.91 1214.41 L1456.33 1214.41 L1455.74 1214.41 L1455.16 1214.41 L1454.57 1214.41 L1453.98 1214.41 L1453.4 1214.41 L1452.81 1214.41 L1452.22 1214.41 L1451.64 1214.41 L1451.05 1214.41 L1450.46 1214.41 L1449.88 1214.41 L1449.29 1214.41 L1448.7 1214.41 L1448.12 1214.41 L1447.53 1214.41 L1446.95 1214.41 L1446.36 1214.41 L1445.77 1214.41 L1445.19 1214.41 L1444.6 1214.41 L1444.01 1214.41 L1443.43 1214.41 L1442.84 1214.41 L1442.25 1214.41 L1441.67 1214.41 L1441.08 1214.41 L1440.5 1214.41 L1439.91 1214.41 L1439.32 1214.41 L1438.74 1214.41 L1438.15 1214.41 L1437.56 1214.41 L1436.98 1214.41 L1436.39 1214.41 L1435.8 1214.41 L1435.22 1214.41 L1434.63 1214.41 L1434.04 1214.41 L1433.46 1214.41 L1432.87 1214.41 L1432.29 1214.41 L1431.7 1214.41 L1431.11 1214.41 L1430.53 1214.41 L1429.94 1214.41 L1429.35 1214.41 L1428.77 1214.41 L1428.18 1214.41 L1427.59 1214.41 L1427.01 1214.41 L1426.42 1214.41 L1425.83 1214.41 L1425.25 1214.41 L1424.66 1214.41 L1424.08 1214.41 L1423.49 1214.41 L1422.9 1214.41 L1422.32 1214.41 L1421.73 1214.41 L1421.14 1214.41 L1420.56 1214.41 L1419.97 1214.41 L1419.38 1214.41 L1418.8 1214.41 L1418.21 1214.41 L1417.63 1214.41 L1417.04 1214.41 L1416.45 1214.41 L1415.87 1214.41 L1415.28 1214.41 L1414.69 1214.41 L1414.11 1214.41 L1413.52 1214.41 L1412.93 1214.41 L1412.35 1214.41 L1411.76 1214.41 L1411.17 1214.41 L1410.59 1214.41 L1410 1214.41 L1409.42 1214.41 L1408.83 1214.41 L1408.24 1214.41 L1407.66 1214.41 L1407.07 1214.41 L1406.48 1214.41 L1405.9 1214.41 L1405.31 1214.41 L1404.72 1214.41 L1404.14 1214.41 L1403.55 1214.41 L1402.96 1214.41 L1402.38 1214.41 L1401.79 1214.41 L1401.21 1214.41 L1400.62 1214.41 L1400.03 1214.41 L1399.45 1214.41 L1398.86 1214.41 L1398.27 1214.41 L1397.69 1214.41 L1397.1 1214.41 L1396.51 1214.41 L1395.93 1214.41 L1395.34 1214.41 L1394.75 1214.41 L1394.17 1214.41 L1393.58 1214.41 L1393 1214.41 L1392.41 1214.41 L1391.82 1214.41 L1391.24 1214.41 L1390.65 1214.41 L1390.06 1214.41 L1389.48 1214.41 L1388.89 1214.41 L1388.3 1214.41 L1387.72 1214.41 L1387.13 1214.41 L1386.55 1214.41 L1385.96 1214.41 L1385.37 1214.41 L1384.79 1214.41 L1384.2 1214.41 L1383.61 1214.41 L1383.03 1214.41 L1382.44 1214.41 L1381.85 1214.41 L1381.27 1214.41 L1380.68 1214.41 L1380.09 1214.41 L1379.51 1214.41 L1378.92 1214.41 L1378.34 1214.41 L1377.75 1214.41 L1377.16 1214.41 L1376.58 1214.41 L1375.99 1214.41 L1375.4 1214.41 L1374.82 1214.41 L1374.23 1214.41 L1373.64 1214.41 L1373.06 1214.41 L1372.47 1214.41 L1371.88 1214.41 L1371.3 1214.41 L1370.71 1214.41 L1370.13 1214.41 L1369.54 1214.41 L1368.95 1214.41 L1368.37 1214.41 L1367.78 1214.41 L1367.19 1214.41 L1366.61 1214.41 L1366.02 1214.41 L1365.43 1214.41 L1364.85 1214.41 L1364.26 1214.41 L1363.68 1214.41 L1363.09 1214.41 L1362.5 1214.41 L1361.92 1214.41 L1361.33 1214.41 L1360.74 1214.41 L1360.16 1214.41 L1359.57 1214.41 L1358.98 1214.41 L1358.4 1214.41 L1357.81 1214.41 L1357.22 1214.41 L1356.64 1214.41 L1356.05 1214.41 L1355.47 1214.41 L1354.88 1214.41 L1354.29 1214.41 L1353.71 1214.41 L1353.12 1214.41 L1352.53 1214.41 L1351.95 1214.41 L1351.36 1214.41 L1350.77 1214.41 L1350.19 1214.41 L1349.6 1214.41 L1349.01 1214.41 L1348.43 1214.41 L1347.84 1214.41 L1347.26 1214.41 L1346.67 1214.41 L1346.08 1214.41 L1345.5 1214.41 L1344.91 1214.41 L1344.32 1214.41 L1343.74 1214.41 L1343.15 1214.41 L1342.56 1214.41 L1341.98 1214.41 L1341.39 1214.41 L1340.8 1214.41 L1340.22 1214.41 L1339.63 1214.41 L1339.05 1214.41 L1338.46 1214.41 L1337.87 1214.41 L1337.29 1214.41 L1336.7 1214.41 L1336.11 1214.41 L1335.53 1214.41 L1334.94 1214.41 L1334.35 1214.41 L1333.77 1214.41 L1333.18 1214.41 L1332.6 1214.41 L1332.01 1214.41 L1331.42 1214.41 L1330.84 1214.41 L1330.25 1214.41 L1329.66 1214.41 L1329.08 1214.41 L1328.49 1214.41 L1327.9 1214.41 L1327.32 1214.41 L1326.73 1214.41 L1326.14 1214.41 L1325.56 1214.41 L1324.97 1214.41 L1324.39 1214.41 L1323.8 1214.41 L1323.21 1214.41 L1322.63 1214.41 L1322.04 1214.41 L1321.45 1214.41 L1320.87 1214.41 L1320.28 1214.41 L1319.69 1214.41 L1319.11 1214.41 L1318.52 1214.41 L1317.93 1214.41 L1317.35 1214.41 L1316.76 1214.41 L1316.18 1214.41 L1315.59 1214.41 L1315 1214.41 L1314.42 1214.41 L1313.83 1214.41 L1313.24 1214.41 L1312.66 1214.41 L1312.07 1214.41 L1311.48 1214.41 L1310.9 1214.41 L1310.31 1214.41 L1309.73 1214.41 L1309.14 1214.41 L1308.55 1214.41 L1307.97 1214.41 L1307.38 1214.41 L1306.79 1214.41 L1306.21 1214.41 L1305.62 1214.41 L1305.03 1214.41 L1304.45 1214.41 L1303.86 1214.41 L1303.27 1214.41 L1302.69 1214.41 L1302.1 1214.41 L1301.52 1214.41 L1300.93 1214.41 L1300.34 1214.41 L1299.76 1214.41 L1299.17 1214.41 L1298.58 1214.41 L1298 1214.41 L1297.41 1214.41 L1296.82 1214.41 L1296.24 1214.41 L1295.65 1214.41 L1295.06 1214.41 L1294.48 1214.41 L1293.89 1214.41 L1293.31 1214.41 L1292.72 1214.41 L1292.13 1214.41 L1291.55 1214.41 L1290.96 1214.41 L1290.37 1214.41 L1289.79 1214.41 L1289.2 1214.41 L1288.61 1214.41 L1288.03 1214.41 L1287.44 1214.41 L1286.86 1214.41 L1286.27 1214.41 L1285.68 1214.41 L1285.1 1214.41 L1284.51 1214.41 L1283.92 1214.41 L1283.34 1214.41 L1282.75 1214.41 L1282.16 1214.41 L1281.58 1214.41 L1280.99 1214.41 L1280.4 1214.41 L1279.82 1214.41 L1279.23 1214.41 L1278.65 1214.41 L1278.06 1214.41 L1277.47 1214.41 L1276.89 1214.41 L1276.3 1214.41 L1275.71 1214.41 L1275.13 1214.41 L1274.54 1214.41 L1273.95 1214.41 L1273.37 1214.41 L1272.78 1214.41 L1272.19 1214.41 L1271.61 1214.41 L1271.02 1214.41 L1270.44 1214.41 L1269.85 1214.41 L1269.26 1214.41 L1268.68 1214.41 L1268.09 1214.41 L1267.5 1214.41 L1266.92 1214.41 L1266.33 1214.41 L1265.74 1214.41 L1265.16 1214.41 L1264.57 1214.41 L1263.98 1214.41 L1263.4 1214.41 L1262.81 1214.41 L1262.23 1214.41 L1261.64 1214.41 L1261.05 1214.41 L1260.47 1214.41 L1259.88 1214.41 L1259.29 1214.41 L1258.71 1214.41 L1258.12 1214.41 L1257.53 1214.41 L1256.95 1214.41 L1256.36 1214.41 L1255.78 1214.41 L1255.19 1214.41 L1254.6 1214.41 L1254.02 1214.41 L1253.43 1214.41 L1252.84 1214.41 L1252.26 1214.41 L1251.67 1214.41 L1251.08 1214.41 L1250.5 1214.41 L1249.91 1214.41 L1249.32 1214.41 L1248.74 1214.41 L1248.15 1214.41 L1247.57 1214.41 L1246.98 1214.41 L1246.39 1214.41 L1245.81 1214.41 L1245.22 1214.41 L1244.63 1214.41 L1244.05 1214.41 L1243.46 1214.41 L1242.87 1214.41 L1242.29 1214.41 L1241.7 1214.41 L1241.11 1214.41 L1240.53 1214.41 L1239.94 1214.41 L1239.36 1214.41 L1238.77 1214.41 L1238.18 1214.41 L1237.6 1214.41 L1237.01 1214.41 L1236.42 1214.41 L1235.84 1214.41 L1235.25 1214.41 L1234.66 1214.41 L1234.08 1214.41 L1233.49 1214.41 L1232.91 1214.41 L1232.32 1214.41 L1231.73 1214.41 L1231.15 1214.41 L1230.56 1214.41 L1229.97 1214.41 L1229.39 1214.41 L1228.8 1214.41 L1228.21 1214.41 L1227.63 1214.41 L1227.04 1214.41 L1226.45 1214.41 L1225.87 1214.41 L1225.28 1214.41 L1224.7 1214.41 L1224.11 1214.41 L1223.52 1214.41 L1222.94 1214.41 L1222.35 1214.41 L1221.76 1214.41 L1221.18 1214.41 L1220.59 1214.41 L1220 1214.41 L1219.42 1214.41 L1218.83 1214.41 L1218.24 1214.41 L1217.66 1214.41 L1217.07 1214.41 L1216.49 1214.41 L1215.9 1214.41 L1215.31 1214.41 L1214.73 1214.41 L1214.14 1214.41 L1213.55 1214.41 L1212.97 1214.41 L1212.38 1214.41 L1211.79 1214.41 L1211.21 1214.41 L1210.62 1214.41 L1210.03 1214.41 L1209.45 1214.41 L1208.86 1214.41 L1208.28 1214.41 L1207.69 1214.41 L1207.1 1214.41 L1206.52 1214.41 L1205.93 1214.41 L1205.34 1214.41 L1204.76 1214.41 L1204.17 1214.41 L1203.58 1214.41 L1203 1214.41 L1202.41 1214.41 L1201.83 1214.41 L1201.24 1214.41 L1200.65 1214.41 L1200.07 1214.41 L1199.48 1214.41 L1198.89 1214.41 L1198.31 1214.41 L1197.72 1214.41 L1197.13 1214.41 L1196.55 1214.41 L1195.96 1214.41 L1195.37 1214.41 L1194.79 1214.41 L1194.2 1214.41 L1193.62 1214.41 L1193.03 1214.41 L1192.44 1214.41 L1191.86 1214.41 L1191.27 1214.41 L1190.68 1214.41 L1190.1 1214.41 L1189.51 1214.41 L1188.92 1214.41 L1188.34 1214.41 L1187.75 1214.41 L1187.16 1214.41 L1186.58 1214.41 L1185.99 1214.41 L1185.41 1214.41 L1184.82 1214.41 L1184.23 1214.41 L1183.65 1214.41 L1183.06 1214.41 L1182.47 1214.41 L1181.89 1214.41 L1181.3 1214.41 L1180.71 1214.41 L1180.13 1214.41 L1179.54 1214.41 L1178.96 1214.41 L1178.37 1214.41 L1177.78 1214.41 L1177.2 1214.41 L1176.61 1214.41 L1176.02 1214.41 L1175.44 1214.41 L1174.85 1214.41 L1174.26 1214.41 L1173.68 1214.41 L1173.09 1214.41 L1172.5 1214.41 L1171.92 1214.41 L1171.33 1214.41 L1170.75 1214.41 L1170.16 1214.41 L1169.57 1214.41 L1168.99 1214.41 L1168.4 1214.41 L1167.81 1214.41 L1167.23 1214.41 L1166.64 1214.41 L1166.05 1214.41 L1165.47 1214.41 L1164.88 1214.41 L1164.29 1214.41 L1163.71 1214.41 L1163.12 1214.41 L1162.54 1214.41 L1161.95 1214.41 L1161.36 1214.41 L1160.78 1214.41 L1160.19 1214.41 L1159.6 1214.41 L1159.02 1214.41 L1158.43 1214.41 L1157.84 1214.41 L1157.26 1214.41 L1156.67 1214.41 L1156.09 1214.41 L1155.5 1214.41 L1154.91 1214.41 L1154.33 1214.41 L1153.74 1214.41 L1153.15 1214.41 L1152.57 1214.41 L1151.98 1214.41 L1151.39 1214.41 L1150.81 1214.41 L1150.22 1214.41 L1149.63 1214.41 L1149.05 1214.41 L1148.46 1214.41 L1147.88 1214.41 L1147.29 1214.41 L1146.7 1214.41 L1146.12 1214.41 L1145.53 1214.41 L1144.94 1214.41 L1144.36 1214.41 L1143.77 1214.41 L1143.18 1214.41 L1142.6 1214.41 L1142.01 1214.41 L1141.42 1214.41 L1140.84 1214.41 L1140.25 1214.41 L1139.67 1214.41 L1139.08 1214.41 L1138.49 1214.41 L1137.91 1214.41 L1137.32 1214.41 L1136.73 1214.41 L1136.15 1214.41 L1135.56 1214.41 L1134.97 1214.41 L1134.39 1214.41 L1133.8 1214.41 L1133.21 1214.41 L1132.63 1214.41 L1132.04 1214.41 L1131.46 1214.41 L1130.87 1214.41 L1130.28 1214.41 L1129.7 1214.41 L1129.11 1214.41 L1128.52 1214.41 L1127.94 1214.41 L1127.35 1214.41 L1126.76 1214.41 L1126.18 1214.41 L1125.59 1214.41 L1125.01 1214.41 L1124.42 1214.41 L1123.83 1214.41 L1123.25 1214.41 L1122.66 1214.41 L1122.07 1214.41 L1121.49 1214.41 L1120.9 1214.41 L1120.31 1214.41 L1119.73 1214.41 L1119.14 1214.41 L1118.55 1214.41 L1117.97 1214.41 L1117.38 1214.41 L1116.8 1214.41 L1116.21 1214.41 L1115.62 1214.41 L1115.04 1214.41 L1114.45 1214.41 L1113.86 1214.41 L1113.28 1214.41 L1112.69 1214.41 L1112.1 1214.41 L1111.52 1214.41 L1110.93 1214.41 L1110.34 1214.41 L1109.76 1214.41 L1109.17 1214.41 L1108.59 1214.41 L1108 1214.41 L1107.41 1214.41 L1106.83 1214.41 L1106.24 1214.41 L1105.65 1214.41 L1105.07 1214.41 L1104.48 1214.41 L1103.89 1214.41 L1103.31 1214.41 L1102.72 1214.41 L1102.14 1214.41 L1101.55 1214.41 L1100.96 1214.41 L1100.38 1214.41 L1099.79 1214.41 L1099.2 1214.41 L1098.62 1214.41 L1098.03 1214.41 L1097.44 1214.41 L1096.86 1214.41 L1096.27 1214.41 L1095.68 1214.41 L1095.1 1214.41 L1094.51 1214.41 L1093.93 1214.41 L1093.34 1214.41 L1092.75 1214.41 L1092.17 1214.41 L1091.58 1214.41 L1090.99 1214.41 L1090.41 1214.41 L1089.82 1214.41 L1089.23 1214.41 L1088.65 1214.41 L1088.06 1214.41 L1087.47 1214.41 L1086.89 1214.41 L1086.3 1214.41 L1085.72 1214.41 L1085.13 1214.41 L1084.54 1214.41 L1083.96 1214.41 L1083.37 1214.41 L1082.78 1214.41 L1082.2 1214.41 L1081.61 1214.41 L1081.02 1214.41 L1080.44 1214.41 L1079.85 1214.41 L1079.26 1214.41 L1078.68 1214.41 L1078.09 1214.41 L1077.51 1214.41 L1076.92 1214.41 L1076.33 1214.41 L1075.75 1214.41 L1075.16 1214.41 L1074.57 1214.41 L1073.99 1214.41 L1073.4 1214.41 L1072.81 1214.41 L1072.23 1214.41 L1071.64 1214.41 L1071.06 1214.41 L1070.47 1214.41 L1069.88 1214.41 L1069.3 1214.41 L1068.71 1214.41 L1068.12 1214.41 L1067.54 1214.41 L1066.95 1214.41 L1066.36 1214.41 L1065.78 1214.41 L1065.19 1214.41 L1064.6 1214.41 L1064.02 1214.41 L1063.43 1214.41 L1062.85 1214.41 L1062.26 1214.41 L1061.67 1214.41 L1061.09 1214.41 L1060.5 1214.41 L1059.91 1214.41 L1059.33 1214.41 L1058.74 1214.41 L1058.15 1214.41 L1057.57 1214.41 L1056.98 1214.41 L1056.39 1214.41 L1055.81 1214.41 L1055.22 1214.41 L1054.64 1214.41 L1054.05 1214.41 L1053.46 1214.41 L1052.88 1214.41 L1052.29 1214.41 L1051.7 1214.41 L1051.12 1214.41 L1050.53 1214.41 L1049.94 1214.41 L1049.36 1214.41 L1048.77 1214.41 L1048.19 1214.41 L1047.6 1214.41 L1047.01 1214.41 L1046.43 1214.41 L1045.84 1214.41 L1045.25 1214.41 L1044.67 1214.41 L1044.08 1214.41 L1043.49 1214.41 L1042.91 1214.41 L1042.32 1214.41 L1041.73 1214.41 L1041.15 1214.41 L1040.56 1214.41 L1039.98 1214.41 L1039.39 1214.41 L1038.8 1214.41 L1038.22 1214.41 L1037.63 1214.41 L1037.04 1214.41 L1036.46 1214.41 L1035.87 1214.41 L1035.28 1214.41 L1034.7 1214.41 L1034.11 1214.41 L1033.52 1214.41 L1032.94 1214.41 L1032.35 1214.41 L1031.77 1214.41 L1031.18 1214.41 L1030.59 1214.41 L1030.01 1214.41 L1029.42 1214.41 L1028.83 1214.41 L1028.25 1214.41 L1027.66 1214.41 L1027.07 1214.41 L1026.49 1214.41 L1025.9 1214.41 L1025.32 1214.41 L1024.73 1214.41 L1024.14 1214.41 L1023.56 1214.41 L1022.97 1214.41 L1022.38 1214.41 L1021.8 1214.41 L1021.21 1214.41 L1020.62 1214.41 L1020.04 1214.41 L1019.45 1214.41 L1018.86 1214.41 L1018.28 1214.41 L1017.69 1214.41 L1017.11 1214.41 L1016.52 1214.41 L1015.93 1214.41 L1015.35 1214.41 L1014.76 1214.41 L1014.17 1214.41 L1013.59 1214.41 L1013 1214.41 L1012.41 1214.41 L1011.83 1214.41 L1011.24 1214.41 L1010.65 1214.41 L1010.07 1214.41 L1009.48 1214.41 L1008.9 1214.41 L1008.31 1214.41 L1007.72 1214.41 L1007.14 1214.41 L1006.55 1214.41 L1005.96 1214.41 L1005.38 1214.41 L1004.79 1214.41 L1004.2 1214.41 L1003.62 1214.41 L1003.03 1214.41 L1002.44 1214.41 L1001.86 1214.41 L1001.27 1214.41 L1000.69 1214.41 L1000.1 1214.41 L999.513 1214.41 L998.926 1214.41 L998.34 1214.41 L997.754 1214.41 L997.167 1214.41 L996.581 1214.41 L995.994 1214.41 L995.408 1214.41 L994.822 1214.41 L994.235 1214.41 L993.649 1214.41 L993.062 1214.41 L992.476 1214.41 L991.889 1214.41 L991.303 1214.41 L990.717 1214.41 L990.13 1214.41 L989.544 1214.41 L988.957 1214.41 L988.371 1214.41 L987.785 1214.41 L987.198 1214.41 L986.612 1214.41 L986.025 1214.41  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.53 986.612,1214.53 987.198,1214.53 987.785,1214.53 988.371,1214.53 988.957,1214.53 989.544,1214.53 990.13,1214.53 990.717,1214.53 991.303,1214.53 991.889,1214.53 992.476,1214.53 993.062,1214.53 993.649,1214.53 994.235,1214.53 994.822,1214.53 995.408,1214.53 995.994,1214.53 996.581,1214.53 997.167,1214.53 997.754,1214.53 998.34,1214.53 998.926,1214.53 999.513,1214.53 1000.1,1214.53 1000.69,1214.53 1001.27,1214.53 1001.86,1214.53 1002.44,1214.53 1003.03,1214.53 1003.62,1214.53 1004.2,1214.53 1004.79,1214.53 1005.38,1214.53 1005.96,1214.53 1006.55,1214.53 1007.14,1214.53 1007.72,1214.53 1008.31,1214.53 1008.9,1214.53 1009.48,1214.53 1010.07,1214.53 1010.65,1214.53 1011.24,1214.53 1011.83,1214.53 1012.41,1214.53 1013,1214.53 1013.59,1214.53 1014.17,1214.53 1014.76,1214.53 1015.35,1214.53 1015.93,1214.53 1016.52,1214.53 1017.11,1214.53 1017.69,1214.53 1018.28,1214.53 1018.86,1214.53 1019.45,1214.53 1020.04,1214.53 1020.62,1214.53 1021.21,1214.53 1021.8,1214.53 1022.38,1214.53 1022.97,1214.53 1023.56,1214.53 1024.14,1214.53 1024.73,1214.53 1025.32,1214.53 1025.9,1214.53 1026.49,1214.53 1027.07,1214.53 1027.66,1214.53 1028.25,1214.53 1028.83,1214.53 1029.42,1214.53 1030.01,1214.53 1030.59,1214.53 1031.18,1214.53 1031.77,1214.53 1032.35,1214.53 1032.94,1214.53 1033.52,1214.53 1034.11,1214.53 1034.7,1214.53 1035.28,1214.53 1035.87,1214.53 1036.46,1214.53 1037.04,1214.53 1037.63,1214.53 1038.22,1214.53 1038.8,1214.53 1039.39,1214.53 1039.98,1214.53 1040.56,1214.53 1041.15,1214.53 1041.73,1214.53 1042.32,1214.53 1042.91,1214.53 1043.49,1214.53 1044.08,1214.53 1044.67,1214.53 1045.25,1214.53 1045.84,1214.53 1046.43,1214.53 1047.01,1214.53 1047.6,1214.53 1048.19,1214.53 1048.77,1214.53 1049.36,1214.53 1049.94,1214.53 1050.53,1214.53 1051.12,1214.53 1051.7,1214.53 1052.29,1214.53 1052.88,1214.53 1053.46,1214.53 1054.05,1214.53 1054.64,1214.53 1055.22,1214.53 1055.81,1214.53 1056.39,1214.53 1056.98,1214.53 1057.57,1214.53 1058.15,1214.53 1058.74,1214.53 1059.33,1214.53 1059.91,1214.53 1060.5,1214.53 1061.09,1214.53 1061.67,1214.53 1062.26,1214.53 1062.85,1214.53 1063.43,1214.53 1064.02,1214.53 1064.6,1214.53 1065.19,1214.53 1065.78,1214.53 1066.36,1214.53 1066.95,1214.53 1067.54,1214.53 1068.12,1214.53 1068.71,1214.53 1069.3,1214.53 1069.88,1214.53 1070.47,1214.53 1071.06,1214.53 1071.64,1214.53 1072.23,1214.53 1072.81,1214.53 1073.4,1214.53 1073.99,1214.53 1074.57,1214.53 1075.16,1214.53 1075.75,1214.53 1076.33,1214.53 1076.92,1214.53 1077.51,1214.53 1078.09,1214.53 1078.68,1214.53 1079.26,1214.53 1079.85,1214.53 1080.44,1214.53 1081.02,1214.53 1081.61,1214.53 1082.2,1214.53 1082.78,1214.53 1083.37,1214.53 1083.96,1214.53 1084.54,1214.53 1085.13,1214.53 1085.72,1214.53 1086.3,1214.53 1086.89,1214.53 1087.47,1214.53 1088.06,1214.53 1088.65,1214.53 1089.23,1214.53 1089.82,1214.53 1090.41,1214.53 1090.99,1214.53 1091.58,1214.53 1092.17,1214.53 1092.75,1214.53 1093.34,1214.53 1093.93,1214.53 1094.51,1214.53 1095.1,1214.53 1095.68,1214.53 1096.27,1214.53 1096.86,1214.53 1097.44,1214.53 1098.03,1214.53 1098.62,1214.53 1099.2,1214.53 1099.79,1214.53 1100.38,1214.53 1100.96,1214.53 1101.55,1214.53 1102.14,1214.53 1102.72,1214.53 1103.31,1214.53 1103.89,1214.53 1104.48,1214.53 1105.07,1214.53 1105.65,1214.53 1106.24,1214.53 1106.83,1214.53 1107.41,1214.53 1108,1214.53 1108.59,1214.53 1109.17,1214.53 1109.76,1214.53 1110.34,1214.53 1110.93,1214.53 1111.52,1214.53 1112.1,1214.53 1112.69,1214.53 1113.28,1214.53 1113.86,1214.53 1114.45,1214.53 1115.04,1214.53 1115.62,1214.53 1116.21,1214.53 1116.8,1214.53 1117.38,1214.53 1117.97,1214.53 1118.55,1214.53 1119.14,1214.53 1119.73,1214.53 1120.31,1214.53 1120.9,1214.53 1121.49,1214.53 1122.07,1214.53 1122.66,1214.53 1123.25,1214.53 1123.83,1214.53 1124.42,1214.53 1125.01,1214.53 1125.59,1214.53 1126.18,1214.53 1126.76,1214.53 1127.35,1214.53 1127.94,1214.53 1128.52,1214.53 1129.11,1214.53 1129.7,1214.53 1130.28,1214.53 1130.87,1214.53 1131.46,1214.53 1132.04,1214.53 1132.63,1214.53 1133.21,1214.53 1133.8,1214.53 1134.39,1214.53 1134.97,1214.53 1135.56,1214.53 1136.15,1214.53 1136.73,1214.53 1137.32,1214.53 1137.91,1214.53 1138.49,1214.53 1139.08,1214.53 1139.67,1214.53 1140.25,1214.53 1140.84,1214.53 1141.42,1214.53 1142.01,1214.53 1142.6,1214.53 1143.18,1214.53 1143.77,1214.53 1144.36,1214.53 1144.94,1214.53 1145.53,1214.53 1146.12,1214.53 1146.7,1214.53 1147.29,1214.53 1147.88,1214.53 1148.46,1214.53 1149.05,1214.53 1149.63,1214.53 1150.22,1214.53 1150.81,1214.53 1151.39,1214.53 1151.98,1214.53 1152.57,1214.53 1153.15,1214.53 1153.74,1214.53 1154.33,1214.53 1154.91,1214.53 1155.5,1214.53 1156.09,1214.53 1156.67,1214.53 1157.26,1214.53 1157.84,1214.53 1158.43,1214.53 1159.02,1214.53 1159.6,1214.53 1160.19,1214.53 1160.78,1214.53 1161.36,1214.53 1161.95,1214.53 1162.54,1214.53 1163.12,1214.53 1163.71,1214.53 1164.29,1214.53 1164.88,1214.53 1165.47,1214.53 1166.05,1214.53 1166.64,1214.53 1167.23,1214.53 1167.81,1214.53 1168.4,1214.53 1168.99,1214.53 1169.57,1214.53 1170.16,1214.53 1170.75,1214.53 1171.33,1214.53 1171.92,1214.53 1172.5,1214.53 1173.09,1214.53 1173.68,1214.53 1174.26,1214.53 1174.85,1214.53 1175.44,1214.53 1176.02,1214.53 1176.61,1214.53 1177.2,1214.53 1177.78,1214.53 1178.37,1214.53 1178.96,1214.53 1179.54,1214.53 1180.13,1214.53 1180.71,1214.53 1181.3,1214.53 1181.89,1214.53 1182.47,1214.53 1183.06,1214.53 1183.65,1214.53 1184.23,1214.53 1184.82,1214.53 1185.41,1214.53 1185.99,1214.53 1186.58,1214.53 1187.16,1214.53 1187.75,1214.53 1188.34,1214.53 1188.92,1214.53 1189.51,1214.53 1190.1,1214.53 1190.68,1214.53 1191.27,1214.53 1191.86,1214.53 1192.44,1214.53 1193.03,1214.53 1193.62,1214.53 1194.2,1214.53 1194.79,1214.53 1195.37,1214.53 1195.96,1214.53 1196.55,1214.53 1197.13,1214.53 1197.72,1214.53 1198.31,1214.53 1198.89,1214.53 1199.48,1214.53 1200.07,1214.53 1200.65,1214.53 1201.24,1214.53 1201.83,1214.53 1202.41,1214.53 1203,1214.53 1203.58,1214.53 1204.17,1214.53 1204.76,1214.53 1205.34,1214.53 1205.93,1214.53 1206.52,1214.53 1207.1,1214.53 1207.69,1214.53 1208.28,1214.53 1208.86,1214.53 1209.45,1214.53 1210.03,1214.53 1210.62,1214.53 1211.21,1214.53 1211.79,1214.53 1212.38,1214.53 1212.97,1214.53 1213.55,1214.53 1214.14,1214.53 1214.73,1214.53 1215.31,1214.53 1215.9,1214.53 1216.49,1214.53 1217.07,1214.53 1217.66,1214.53 1218.24,1214.53 1218.83,1214.53 1219.42,1214.53 1220,1214.53 1220.59,1214.53 1221.18,1214.53 1221.76,1214.53 1222.35,1214.53 1222.94,1214.53 1223.52,1214.53 1224.11,1214.53 1224.7,1214.53 1225.28,1214.53 1225.87,1214.53 1226.45,1214.53 1227.04,1214.53 1227.63,1214.53 1228.21,1214.53 1228.8,1214.53 1229.39,1214.53 1229.97,1214.53 1230.56,1214.53 1231.15,1214.53 1231.73,1214.53 1232.32,1214.53 1232.91,1214.53 1233.49,1214.53 1234.08,1214.53 1234.66,1214.53 1235.25,1214.53 1235.84,1214.53 1236.42,1214.53 1237.01,1214.53 1237.6,1214.53 1238.18,1214.53 1238.77,1214.53 1239.36,1214.53 1239.94,1214.53 1240.53,1214.53 1241.11,1214.53 1241.7,1214.53 1242.29,1214.53 1242.87,1214.53 1243.46,1214.53 1244.05,1214.53 1244.63,1214.53 1245.22,1214.53 1245.81,1214.53 1246.39,1214.53 1246.98,1214.53 1247.57,1214.53 1248.15,1214.53 1248.74,1214.53 1249.32,1214.53 1249.91,1214.53 1250.5,1214.53 1251.08,1214.53 1251.67,1214.53 1252.26,1214.53 1252.84,1214.53 1253.43,1214.53 1254.02,1214.53 1254.6,1214.53 1255.19,1214.53 1255.78,1214.53 1256.36,1214.53 1256.95,1214.53 1257.53,1214.53 1258.12,1214.53 1258.71,1214.53 1259.29,1214.53 1259.88,1214.53 1260.47,1214.53 1261.05,1214.53 1261.64,1214.53 1262.23,1214.53 1262.81,1214.53 1263.4,1214.53 1263.98,1214.53 1264.57,1214.53 1265.16,1214.53 1265.74,1214.53 1266.33,1214.53 1266.92,1214.53 1267.5,1214.53 1268.09,1214.53 1268.68,1214.53 1269.26,1214.53 1269.85,1214.53 1270.44,1214.53 1271.02,1214.53 1271.61,1214.53 1272.19,1214.53 1272.78,1214.53 1273.37,1214.53 1273.95,1214.53 1274.54,1214.53 1275.13,1214.53 1275.71,1214.53 1276.3,1214.53 1276.89,1214.53 1277.47,1214.53 1278.06,1214.53 1278.65,1214.53 1279.23,1214.53 1279.82,1214.53 1280.4,1214.53 1280.99,1214.53 1281.58,1214.53 1282.16,1214.53 1282.75,1214.53 1283.34,1214.53 1283.92,1214.53 1284.51,1214.53 1285.1,1214.53 1285.68,1214.53 1286.27,1214.53 1286.86,1214.53 1287.44,1214.53 1288.03,1214.53 1288.61,1214.53 1289.2,1214.53 1289.79,1214.53 1290.37,1214.53 1290.96,1214.53 1291.55,1214.53 1292.13,1214.53 1292.72,1214.53 1293.31,1214.53 1293.89,1214.53 1294.48,1214.53 1295.06,1214.53 1295.65,1214.53 1296.24,1214.53 1296.82,1214.53 1297.41,1214.53 1298,1214.53 1298.58,1214.53 1299.17,1214.53 1299.76,1214.53 1300.34,1214.53 1300.93,1214.53 1301.52,1214.53 1302.1,1214.53 1302.69,1214.53 1303.27,1214.53 1303.86,1214.53 1304.45,1214.53 1305.03,1214.53 1305.62,1214.53 1306.21,1214.53 1306.79,1214.53 1307.38,1214.53 1307.97,1214.53 1308.55,1214.53 1309.14,1214.53 1309.73,1214.53 1310.31,1214.53 1310.9,1214.53 1311.48,1214.53 1312.07,1214.53 1312.66,1214.53 1313.24,1214.53 1313.83,1214.53 1314.42,1214.53 1315,1214.53 1315.59,1214.53 1316.18,1214.53 1316.76,1214.53 1317.35,1214.53 1317.93,1214.53 1318.52,1214.53 1319.11,1214.53 1319.69,1214.53 1320.28,1214.53 1320.87,1214.53 1321.45,1214.53 1322.04,1214.53 1322.63,1214.53 1323.21,1214.53 1323.8,1214.53 1324.39,1214.53 1324.97,1214.53 1325.56,1214.53 1326.14,1214.53 1326.73,1214.53 1327.32,1214.53 1327.9,1214.53 1328.49,1214.53 1329.08,1214.53 1329.66,1214.53 1330.25,1214.53 1330.84,1214.53 1331.42,1214.53 1332.01,1214.53 1332.6,1214.53 1333.18,1214.53 1333.77,1214.53 1334.35,1214.53 1334.94,1214.53 1335.53,1214.53 1336.11,1214.53 1336.7,1214.53 1337.29,1214.53 1337.87,1214.53 1338.46,1214.53 1339.05,1214.53 1339.63,1214.53 1340.22,1214.53 1340.8,1214.53 1341.39,1214.53 1341.98,1214.53 1342.56,1214.53 1343.15,1214.53 1343.74,1214.53 1344.32,1214.53 1344.91,1214.53 1345.5,1214.53 1346.08,1214.53 1346.67,1214.53 1347.26,1214.53 1347.84,1214.53 1348.43,1214.53 1349.01,1214.53 1349.6,1214.53 1350.19,1214.53 1350.77,1214.53 1351.36,1214.53 1351.95,1214.53 1352.53,1214.53 1353.12,1214.53 1353.71,1214.53 1354.29,1214.53 1354.88,1214.53 1355.47,1214.53 1356.05,1214.53 1356.64,1214.53 1357.22,1214.53 1357.81,1214.53 1358.4,1214.53 1358.98,1214.53 1359.57,1214.53 1360.16,1214.53 1360.74,1214.53 1361.33,1214.53 1361.92,1214.53 1362.5,1214.53 1363.09,1214.53 1363.68,1214.53 1364.26,1214.53 1364.85,1214.53 1365.43,1214.53 1366.02,1214.53 1366.61,1214.53 1367.19,1214.53 1367.78,1214.53 1368.37,1214.53 1368.95,1214.53 1369.54,1214.53 1370.13,1214.53 1370.71,1214.53 1371.3,1214.53 1371.88,1214.53 1372.47,1214.53 1373.06,1214.53 1373.64,1214.53 1374.23,1214.53 1374.82,1214.53 1375.4,1214.53 1375.99,1214.53 1376.58,1214.53 1377.16,1214.53 1377.75,1214.53 1378.34,1214.53 1378.92,1214.53 1379.51,1214.53 1380.09,1214.53 1380.68,1214.53 1381.27,1214.53 1381.85,1214.53 1382.44,1214.53 1383.03,1214.53 1383.61,1214.53 1384.2,1214.53 1384.79,1214.53 1385.37,1214.53 1385.96,1214.53 1386.55,1214.53 1387.13,1214.53 1387.72,1214.53 1388.3,1214.53 1388.89,1214.53 1389.48,1214.53 1390.06,1214.53 1390.65,1214.53 1391.24,1214.53 1391.82,1214.53 1392.41,1214.53 1393,1214.53 1393.58,1214.53 1394.17,1214.53 1394.75,1214.53 1395.34,1214.53 1395.93,1214.53 1396.51,1214.53 1397.1,1214.53 1397.69,1214.53 1398.27,1214.53 1398.86,1214.53 1399.45,1214.53 1400.03,1214.53 1400.62,1214.53 1401.21,1214.53 1401.79,1214.53 1402.38,1214.53 1402.96,1214.53 1403.55,1214.53 1404.14,1214.53 1404.72,1214.53 1405.31,1214.53 1405.9,1214.53 1406.48,1214.53 1407.07,1214.53 1407.66,1214.53 1408.24,1214.53 1408.83,1214.53 1409.42,1214.53 1410,1214.53 1410.59,1214.53 1411.17,1214.53 1411.76,1214.53 1412.35,1214.53 1412.93,1214.53 1413.52,1214.53 1414.11,1214.53 1414.69,1214.53 1415.28,1214.53 1415.87,1214.53 1416.45,1214.53 1417.04,1214.53 1417.63,1214.53 1418.21,1214.53 1418.8,1214.53 1419.38,1214.53 1419.97,1214.53 1420.56,1214.53 1421.14,1214.53 1421.73,1214.53 1422.32,1214.53 1422.9,1214.53 1423.49,1214.53 1424.08,1214.53 1424.66,1214.53 1425.25,1214.53 1425.83,1214.53 1426.42,1214.53 1427.01,1214.53 1427.59,1214.53 1428.18,1214.53 1428.77,1214.53 1429.35,1214.53 1429.94,1214.53 1430.53,1214.53 1431.11,1214.53 1431.7,1214.53 1432.29,1214.53 1432.87,1214.53 1433.46,1214.53 1434.04,1214.53 1434.63,1214.53 1435.22,1214.53 1435.8,1214.53 1436.39,1214.53 1436.98,1214.53 1437.56,1214.53 1438.15,1214.53 1438.74,1214.53 1439.32,1214.53 1439.91,1214.53 1440.5,1214.53 1441.08,1214.53 1441.67,1214.53 1442.25,1214.53 1442.84,1214.53 1443.43,1214.53 1444.01,1214.53 1444.6,1214.53 1445.19,1214.53 1445.77,1214.53 1446.36,1214.53 1446.95,1214.53 1447.53,1214.53 1448.12,1214.53 1448.7,1214.53 1449.29,1214.53 1449.88,1214.53 1450.46,1214.53 1451.05,1214.53 1451.64,1214.53 1452.22,1214.53 1452.81,1214.53 1453.4,1214.53 1453.98,1214.53 1454.57,1214.53 1455.16,1214.53 1455.74,1214.53 1456.33,1214.53 1456.91,1214.53 1457.5,1214.53 1458.09,1214.53 1458.67,1214.53 1459.26,1214.53 1459.85,1214.53 1460.43,1214.53 1461.02,1214.53 1461.61,1214.53 1462.19,1214.53 1462.78,1214.53 1463.37,1214.53 1463.95,1214.53 1464.54,1214.53 1465.12,1214.53 1465.71,1214.53 1466.3,1214.53 1466.88,1214.53 1467.47,1214.53 1468.06,1214.53 1468.64,1214.53 1469.23,1214.53 1469.82,1214.53 1470.4,1214.53 1470.99,1214.53 1471.57,1214.53 1472.16,1214.53 1472.75,1214.53 1473.33,1214.53 1473.92,1214.53 1474.51,1214.53 1475.09,1214.53 1475.68,1214.53 1476.27,1214.53 1476.85,1214.53 1477.44,1214.53 1478.03,1214.53 1478.61,1214.53 1479.2,1214.53 1479.78,1214.53 1480.37,1214.53 1480.96,1214.53 1481.54,1214.53 1482.13,1214.53 1482.72,1214.53 1483.3,1214.53 1483.89,1214.53 1484.48,1214.53 1485.06,1214.53 1485.65,1214.53 1486.24,1214.53 1486.82,1214.53 1487.41,1214.53 1487.99,1214.53 1488.58,1214.53 1489.17,1214.53 1489.75,1214.53 1490.34,1214.53 1490.93,1214.53 1491.51,1214.53 1492.1,1214.53 1492.69,1214.53 1493.27,1214.53 1493.86,1214.53 1494.45,1214.53 1495.03,1214.53 1495.62,1214.53 1496.2,1214.53 1496.79,1214.53 1497.38,1214.53 1497.96,1214.53 1498.55,1214.53 1499.14,1214.53 1499.72,1214.53 1500.31,1214.53 1500.9,1214.53 1501.48,1214.53 1502.07,1214.53 1502.65,1214.53 1503.24,1214.53 1503.83,1214.53 1504.41,1214.53 1505,1214.53 1505.59,1214.53 1506.17,1214.53 1506.76,1214.53 1507.35,1214.53 1507.93,1214.53 1508.52,1214.53 1509.11,1214.53 1509.69,1214.53 1510.28,1214.53 1510.86,1214.53 1511.45,1214.53 1512.04,1214.53 1512.62,1214.53 1513.21,1214.53 1513.8,1214.53 1514.38,1214.53 1514.97,1214.53 1515.56,1214.53 1516.14,1214.53 1516.73,1214.53 1517.32,1214.53 1517.9,1214.53 1518.49,1214.53 1519.07,1214.53 1519.66,1214.53 1520.25,1214.53 1520.83,1214.53 1521.42,1214.53 1522.01,1214.53 1522.59,1214.53 1523.18,1214.53 1523.77,1214.53 1524.35,1214.53 1524.94,1214.53 1525.52,1214.53 1526.11,1214.53 1526.7,1214.53 1527.28,1214.53 1527.87,1214.53 1528.46,1214.53 1529.04,1214.53 1529.63,1214.53 1530.22,1214.53 1530.8,1214.53 1531.39,1214.53 1531.98,1214.53 1532.56,1214.53 1533.15,1214.53 1533.73,1214.53 1534.32,1214.53 1534.91,1214.53 1535.49,1214.53 1536.08,1214.53 1536.67,1214.53 1537.25,1214.53 1537.84,1214.53 1538.43,1214.53 1539.01,1214.53 1539.6,1214.53 1540.19,1214.53 1540.77,1214.53 1541.36,1214.53 1541.94,1214.53 1542.53,1214.53 1543.12,1214.53 1543.7,1214.53 1544.29,1214.53 1544.88,1214.53 1545.46,1214.53 1546.05,1214.53 1546.64,1214.53 1547.22,1214.53 1547.81,1214.53 1548.4,1214.53 1548.98,1214.53 1549.57,1214.53 1550.15,1214.53 1550.74,1214.53 1551.33,1214.53 1551.91,1214.53 1552.5,1214.53 1553.09,1214.53 1553.67,1214.53 1554.26,1214.53 1554.85,1214.53 1555.43,1214.53 1556.02,1214.53 1556.6,1214.53 1557.19,1214.53 1557.78,1214.53 1558.36,1214.53 1558.95,1214.53 1559.54,1214.53 1560.12,1214.53 1560.71,1214.53 1561.3,1214.53 1561.88,1214.53 1562.47,1214.53 1563.06,1214.53 1563.64,1214.53 1564.23,1214.53 1564.81,1214.53 1565.4,1214.53 1565.99,1214.53 1566.57,1214.53 1567.16,1214.53 1567.75,1214.53 1568.33,1214.53 1568.92,1214.53 1569.51,1214.53 1570.09,1214.53 1570.68,1214.53 1571.27,1214.53 1571.85,1214.53 1572.44,1214.53 1573.02,1214.53 1573.61,1214.53 1574.2,1214.53 1574.78,1214.53 1575.37,1214.53 1575.96,1214.53 1576.54,1214.53 1577.13,1214.53 1577.72,1214.53 1578.3,1214.53 1578.89,1214.53 1579.47,1214.53 1580.06,1214.53 1580.65,1214.53 1581.23,1214.53 1581.82,1214.53 1582.41,1214.53 1582.99,1214.53 1583.58,1214.53 1584.17,1214.53 1584.75,1214.53 1585.34,1214.53 1585.93,1214.53 1586.51,1214.53 1587.1,1214.53 1587.68,1214.53 1588.27,1214.53 1588.86,1214.53 1589.44,1214.53 1590.03,1214.53 1590.62,1214.53 1591.2,1214.53 1591.79,1214.53 1592.38,1214.53 1592.96,1214.53 1593.55,1214.53 1594.14,1214.53 1594.72,1214.53 1595.31,1214.53 1595.89,1214.53 1596.48,1214.53 1597.07,1214.53 1597.65,1214.53 1598.24,1214.53 1598.83,1214.53 1599.41,1214.53 1600,1214.53 1600.59,1214.53 1601.17,1214.53 1601.76,1214.53 1602.34,1214.53 1602.93,1214.53 1603.52,1214.53 1604.1,1214.53 1604.69,1214.53 1605.28,1214.53 1605.86,1214.53 1606.45,1214.53 1607.04,1214.53 1607.62,1214.53 1608.21,1214.53 1608.8,1214.53 1609.38,1214.53 1609.97,1214.53 1610.55,1214.53 1611.14,1214.53 1611.73,1214.53 1612.31,1214.53 1612.9,1214.53 1613.49,1214.53 1614.07,1214.53 1614.66,1214.53 1615.25,1214.53 1615.83,1214.53 1616.42,1214.53 1617.01,1214.53 1617.59,1214.53 1618.18,1214.53 1618.76,1214.53 1619.35,1214.53 1619.94,1214.53 1620.52,1214.53 1621.11,1214.53 1621.7,1214.53 1622.28,1214.53 1622.87,1214.53 1623.46,1214.53 1624.04,1214.53 1624.63,1214.53 1625.22,1214.53 1625.8,1214.53 1626.39,1214.53 1626.97,1214.53 1627.56,1214.53 1628.15,1214.53 1628.73,1214.53 1629.32,1214.53 1629.91,1214.53 1630.49,1214.53 1631.08,1214.53 1631.67,1214.53 1632.25,1214.53 1632.84,1214.53 1633.42,1214.53 1634.01,1214.53 1634.6,1214.53 1635.18,1214.53 1635.77,1214.53 1636.36,1214.53 1636.94,1214.53 1637.53,1214.53 1638.12,1214.53 1638.7,1214.53 1639.29,1214.53 1639.88,1214.53 1640.46,1214.53 1641.05,1214.53 1641.63,1214.53 1642.22,1214.53 1642.81,1214.53 1643.39,1214.53 1643.98,1214.53 1644.57,1214.53 1645.15,1214.53 1645.74,1214.53 1646.33,1214.53 1646.91,1214.53 1647.5,1214.53 1648.09,1214.53 1648.67,1214.53 1649.26,1214.53 1649.84,1214.53 1650.43,1214.53 1651.02,1214.53 1651.6,1214.53 1652.19,1214.53 1652.78,1214.53 1653.36,1214.53 1653.95,1214.53 1654.54,1214.53 1655.12,1214.53 1655.71,1214.53 1656.29,1214.53 1656.88,1214.53 1657.47,1214.53 1658.05,1214.53 1658.64,1214.53 1659.23,1214.53 1659.81,1214.53 1660.4,1214.53 1660.99,1214.53 1661.57,1214.53 1662.16,1214.53 1662.75,1214.53 1663.33,1214.53 1663.92,1214.53 1664.5,1214.53 1665.09,1214.53 1665.68,1214.53 1666.26,1214.53 1666.85,1214.53 1667.44,1214.53 1668.02,1214.53 1668.61,1214.53 1669.2,1214.53 1669.78,1214.53 1670.37,1214.53 1670.96,1214.53 1671.54,1214.53 1672.13,1214.53 1672.71,1214.53 1673.3,1214.53 1673.89,1214.53 1674.47,1214.53 1675.06,1214.53 1675.65,1214.53 1676.23,1214.53 1676.82,1214.53 1677.41,1214.53 1677.99,1214.53 1678.58,1214.53 1679.17,1214.53 1679.75,1214.53 1680.34,1214.53 1680.92,1214.53 1681.51,1214.53 1682.1,1214.53 1682.68,1214.53 1683.27,1214.53 1683.86,1214.53 1684.44,1214.53 1685.03,1214.53 1685.62,1214.53 1686.2,1214.53 1686.79,1214.53 1687.37,1214.53 1687.96,1214.53 1688.55,1214.53 1689.13,1214.53 1689.72,1214.53 1690.31,1214.53 1690.89,1214.53 1691.48,1214.53 1692.07,1214.53 1692.65,1214.53 1693.24,1214.53 1693.83,1214.53 1694.41,1214.53 1695,1214.53 1695.58,1214.53 1696.17,1214.53 1696.76,1214.53 1697.34,1214.53 1697.93,1214.53 1698.52,1214.53 1699.1,1214.53 1699.69,1214.53 1700.28,1214.53 1700.86,1214.53 1701.45,1214.53 1702.04,1214.53 1702.62,1214.53 1703.21,1214.53 1703.79,1214.53 1704.38,1214.53 1704.97,1214.53 1705.55,1214.53 1706.14,1214.53 1706.73,1214.53 1707.31,1214.53 1707.9,1214.53 1708.49,1214.53 1709.07,1214.53 1709.66,1214.53 1710.24,1214.53 1710.83,1214.53 1711.42,1214.53 1712,1214.53 1712.59,1214.53 1713.18,1214.53 1713.76,1214.53 1714.35,1214.53 1714.94,1214.53 1715.52,1214.53 1716.11,1214.53 1716.7,1214.53 1717.28,1214.53 1717.87,1214.53 1718.45,1214.53 1719.04,1214.53 1719.63,1214.53 1720.21,1214.53 1720.8,1214.53 1721.39,1214.53 1721.97,1214.53 1722.56,1214.53 1723.15,1214.53 1723.73,1214.53 1724.32,1214.53 1724.91,1214.53 1725.49,1214.53 1726.08,1214.53 1726.66,1214.53 1727.25,1214.53 1727.84,1214.53 1728.42,1214.53 1729.01,1214.53 1729.6,1214.53 1730.18,1214.53 1730.77,1214.53 1731.36,1214.53 1731.94,1214.53 1732.53,1214.53 1733.11,1214.53 1733.7,1214.53 1734.29,1214.53 1734.87,1214.53 1735.46,1214.53 1736.05,1214.53 1736.63,1214.53 1737.22,1214.53 1737.81,1214.53 1738.39,1214.53 1738.98,1214.53 1739.57,1214.53 1740.15,1214.53 1740.74,1214.53 1741.32,1214.53 1741.91,1214.53 1742.5,1214.53 1743.08,1214.53 1743.67,1214.53 1744.26,1214.53 1744.84,1214.53 1745.43,1214.53 1746.02,1214.53 1746.6,1214.53 1747.19,1214.53 1747.78,1214.53 1748.36,1214.53 1748.95,1214.53 1749.53,1214.53 1750.12,1214.53 1750.71,1214.53 1751.29,1214.53 1751.88,1214.53 1752.47,1214.53 1753.05,1214.53 1753.64,1214.53 1754.23,1214.53 1754.81,1214.53 1755.4,1214.53 1755.99,1214.53 1756.57,1214.53 1757.16,1214.53 1757.74,1214.53 1758.33,1214.53 1758.92,1214.53 1759.5,1214.53 1760.09,1214.53 1760.68,1214.53 1761.26,1214.53 1761.85,1214.53 1762.44,1214.53 1763.02,1214.53 1763.61,1214.53 1764.19,1214.53 1764.78,1214.53 1765.37,1214.53 1765.95,1214.53 1766.54,1214.53 1767.13,1214.53 1767.71,1214.53 1768.3,1214.53 1768.89,1214.53 1769.47,1214.53 1770.06,1214.53 1770.65,1214.53 1771.23,1214.53 1771.82,1214.53 1772.4,1214.53 1772.99,1214.53 1773.58,1214.53 1774.16,1214.53 1774.75,1214.53 1775.34,1214.53 1775.92,1214.53 1776.51,1214.53 1777.1,1214.53 1777.68,1214.53 1778.27,1214.53 1778.86,1214.53 1779.44,1214.53 1780.03,1214.53 1780.61,1214.53 1781.2,1214.53 1781.79,1214.53 1782.37,1214.53 1782.96,1214.53 1783.55,1214.53 1784.13,1214.53 1784.72,1214.53 1785.31,1214.53 1785.89,1214.53 1786.48,1214.53 1787.06,1214.53 1787.65,1214.53 1788.24,1214.53 1788.82,1214.53 1789.41,1214.53 1790,1214.53 1790.58,1214.53 1791.17,1214.53 1791.76,1214.53 1792.34,1214.53 1792.93,1214.53 1793.52,1214.53 1794.1,1214.53 1794.69,1214.53 1795.27,1214.53 1795.86,1214.53 1796.45,1214.53 1797.03,1214.53 1797.62,1214.53 1798.21,1214.53 1798.79,1214.53 1799.38,1214.53 1799.97,1214.53 1800.55,1214.53 1801.14,1214.53 1801.73,1214.53 1802.31,1214.53 1802.9,1214.53 1803.48,1214.53 1804.07,1214.53 1804.66,1214.53 1805.24,1214.53 1805.83,1214.53 1806.42,1214.53 1807,1214.53 1807.59,1214.53 1808.18,1214.53 1808.76,1214.53 1809.35,1214.53 1809.94,1214.53 1810.52,1214.53 1811.11,1214.53 1811.69,1214.53 1812.28,1214.53 1812.87,1214.53 1813.45,1214.53 1814.04,1214.53 1814.63,1214.53 1815.21,1214.53 1815.8,1214.53 1816.39,1214.53 1816.97,1214.53 1817.56,1214.53 1818.14,1214.53 1818.73,1214.53 1819.32,1214.53 1819.9,1214.53 1820.49,1214.53 1821.08,1214.53 1821.66,1214.53 1822.25,1214.53 1822.84,1214.53 1823.42,1214.53 1824.01,1214.53 1824.6,1214.53 1825.18,1214.53 1825.77,1214.53 1826.35,1214.53 1826.94,1214.53 1827.53,1214.53 1828.11,1214.53 1828.7,1214.53 1829.29,1214.53 1829.87,1214.53 1830.46,1214.53 1831.05,1214.53 1831.63,1214.53 1832.22,1214.53 1832.81,1214.53 1833.39,1214.53 1833.98,1214.53 1834.56,1214.53 1835.15,1214.53 1835.74,1214.53 1836.32,1214.53 1836.91,1214.53 1837.5,1214.53 1838.08,1214.53 1838.67,1214.53 1839.26,1214.53 1839.84,1214.53 1840.43,1214.53 1841.01,1214.53 1841.6,1214.53 1842.19,1214.53 1842.77,1214.53 1843.36,1214.53 1843.95,1214.53 1844.53,1214.53 1845.12,1214.53 1845.71,1214.53 1846.29,1214.53 1846.88,1214.53 1847.47,1214.53 1848.05,1214.53 1848.64,1214.53 1849.22,1214.53 1849.81,1214.53 1850.4,1214.53 1850.98,1214.53 1851.57,1214.53 1852.16,1214.53 1852.74,1214.53 1853.33,1214.53 1853.92,1214.53 1854.5,1214.53 1855.09,1214.53 1855.68,1214.53 1856.26,1214.53 1856.85,1214.53 1857.43,1214.53 1858.02,1214.53 1858.61,1214.53 1859.19,1214.53 1859.78,1214.53 1860.37,1214.53 1860.95,1214.53 1861.54,1214.53 1862.13,1214.53 1862.71,1214.53 1863.3,1214.53 1863.88,1214.53 1864.47,1214.53 1865.06,1214.53 1865.64,1214.53 1866.23,1214.53 1866.82,1214.53 1867.4,1214.53 1867.99,1214.53 1868.58,1214.53 1869.16,1214.53 1869.75,1214.53 1870.34,1214.53 1870.92,1214.53 1871.51,1214.53 1872.09,1214.53 1872.68,1214.53 1873.27,1214.53 1873.85,1214.53 1874.44,1214.53 1875.03,1214.53 1875.61,1214.53 1876.2,1214.53 1876.79,1214.53 1877.37,1214.53 1877.96,1214.53 1878.55,1214.53 1879.13,1214.53 1879.72,1214.53 1880.3,1214.53 1880.89,1214.53 1881.48,1214.53 1882.06,1214.53 1882.65,1214.53 1883.24,1214.53 1883.82,1214.53 1884.41,1214.53 1885,1214.53 1885.58,1214.53 1886.17,1214.53 1886.76,1214.53 1887.34,1214.53 1887.93,1214.53 1888.51,1214.53 1889.1,1214.53 1889.69,1214.53 1890.27,1214.53 1890.86,1214.53 1891.45,1214.53 1892.03,1214.53 1892.62,1214.53 1893.21,1214.53 1893.79,1214.53 1894.38,1214.53 1894.96,1214.53 1895.55,1214.53 1896.14,1214.53 1896.72,1214.53 1897.31,1214.53 1897.9,1214.53 1898.48,1214.53 1899.07,1214.53 1899.66,1214.53 1900.24,1214.53 1900.83,1214.53 1901.42,1214.53 1902,1214.53 1902.59,1214.53 1903.17,1214.53 1903.76,1214.53 1904.35,1214.53 1904.93,1214.53 1905.52,1214.53 1906.11,1214.53 1906.69,1214.53 1907.28,1214.53 1907.87,1214.53 1908.45,1214.53 1909.04,1214.53 1909.63,1214.53 1910.21,1214.53 1910.8,1214.53 1911.38,1214.53 1911.97,1214.53 1912.56,1214.53 1913.14,1214.53 1913.73,1214.53 1914.32,1214.53 1914.9,1214.53 1915.49,1214.53 1916.08,1214.53 1916.66,1214.53 1917.25,1214.53 1917.83,1214.53 1918.42,1214.53 1919.01,1214.53 1919.59,1214.53 1920.18,1214.53 1920.77,1214.53 1921.35,1214.53 1921.94,1214.53 1922.53,1214.53 1923.11,1214.53 1923.7,1214.53 1924.29,1214.53 1924.87,1214.53 1925.46,1214.53 1926.04,1214.53 1926.63,1214.53 1927.22,1214.53 1927.8,1214.53 1928.39,1214.53 1928.98,1214.53 1929.56,1214.53 1930.15,1214.53 1930.74,1214.53 1931.32,1214.53 1931.91,1214.53 1932.5,1214.53 1933.08,1214.53 1933.67,1214.53 1934.25,1214.53 1934.84,1214.53 1935.43,1214.53 1936.01,1214.53 1936.6,1214.53 1937.19,1214.53 1937.77,1214.53 1938.36,1214.53 1938.95,1214.53 1939.53,1214.53 1940.12,1214.53 1940.71,1214.53 1941.29,1214.53 1941.88,1214.53 1942.46,1214.53 1943.05,1214.53 1943.64,1214.53 1944.22,1214.53 1944.81,1214.53 1945.4,1214.53 1945.98,1214.53 1946.57,1214.53 1947.16,1214.53 1947.74,1214.53 1948.33,1214.53 1948.91,1214.53 1949.5,1214.53 1950.09,1214.53 1950.67,1214.53 1951.26,1214.53 1951.85,1214.53 1952.43,1214.53 1953.02,1214.53 1953.61,1214.53 1954.19,1214.53 1954.78,1214.53 1955.37,1214.53 1955.95,1214.53 1956.54,1214.53 1957.12,1214.53 1957.71,1214.53 1958.3,1214.53 1958.88,1214.53 1959.47,1214.53 1960.06,1214.53 1960.64,1214.53 1961.23,1214.53 1961.82,1214.53 1962.4,1214.53 1962.99,1214.53 1963.58,1214.53 1964.16,1214.53 1964.75,1214.53 1965.33,1214.53 1965.92,1214.53 1966.51,1214.53 1967.09,1214.53 1967.68,1214.53 1968.27,1214.53 1968.85,1214.53 1969.44,1214.53 1970.03,1214.53 1970.61,1214.53 1971.2,1214.53 1971.78,1214.53 1972.37,1214.53 1972.96,1214.53 1973.54,1214.53 1974.13,1214.53 1974.72,1214.53 1975.3,1214.53 1975.89,1214.53 1976.48,1214.53 1977.06,1214.53 1977.65,1214.53 1978.24,1214.53 1978.82,1214.53 1979.41,1214.53 1979.99,1214.53 1980.58,1214.53 1981.17,1214.53 1981.75,1214.53 1982.34,1214.53 1982.93,1214.53 1983.51,1214.53 1984.1,1214.53 1984.69,1214.53 1985.27,1214.53 1985.86,1214.53 1986.45,1214.53 1987.03,1214.53 1987.62,1214.53 1988.2,1214.53 1988.79,1214.53 1989.38,1214.53 1989.96,1214.53 1990.55,1214.53 1991.14,1214.53 1991.72,1214.53 1992.31,1214.53 1992.9,1214.53 1993.48,1214.53 1994.07,1214.53 1994.65,1214.53 1995.24,1214.53 1995.83,1214.53 1996.41,1214.53 1997,1214.53 1997.59,1214.53 1998.17,1214.53 1998.76,1214.53 1999.35,1214.53 1999.93,1214.53 2000.52,1214.53 2001.11,1214.53 2001.69,1214.53 2002.28,1214.53 2002.86,1214.53 2003.45,1214.53 2004.04,1214.53 2004.62,1214.53 2005.21,1214.53 2005.8,1214.53 2006.38,1214.53 2006.97,1214.53 2007.56,1214.53 2008.14,1214.53 2008.73,1214.53 2009.32,1214.53 2009.9,1214.53 2010.49,1214.53 2011.07,1214.53 2011.66,1214.53 2012.25,1214.53 2012.83,1214.53 2013.42,1214.53 2014.01,1214.53 2014.59,1214.53 2015.18,1214.53 2015.77,1214.53 2016.35,1214.53 2016.94,1214.53 2017.53,1214.53 2018.11,1214.53 2018.7,1214.53 2019.28,1214.53 2019.87,1214.53 2020.46,1214.53 2021.04,1214.53 2021.63,1214.53 2022.22,1214.53 2022.8,1214.53 2023.39,1214.53 2023.98,1214.53 2024.56,1214.53 2025.15,1214.53 2025.73,1214.53 2026.32,1214.53 2026.91,1214.53 2027.49,1214.53 2028.08,1214.53 2028.67,1214.53 2029.25,1214.53 2029.84,1214.53 2030.43,1214.53 2031.01,1214.53 2031.6,1214.53 2032.19,1214.53 2032.77,1214.53 2033.36,1214.53 2033.94,1214.53 2034.53,1214.53 2035.12,1214.53 2035.7,1214.53 2036.29,1214.53 2036.88,1214.53 2037.46,1214.53 2038.05,1214.53 2038.64,1214.53 2039.22,1214.53 2039.81,1214.53 2040.4,1214.53 2040.98,1214.53 2041.57,1214.53 2042.15,1214.53 2042.74,1214.53 2043.33,1214.53 2043.91,1214.53 2044.5,1214.53 2045.09,1214.53 2045.67,1214.53 2046.26,1214.53 2046.85,1214.53 2047.43,1214.53 2048.02,1214.53 2048.6,1214.53 2049.19,1214.53 2049.78,1214.53 2050.36,1214.53 2050.95,1214.53 2051.54,1214.53 2052.12,1214.53 2052.71,1214.53 2053.3,1214.53 2053.88,1214.53 2054.47,1214.53 2055.06,1214.53 2055.64,1214.53 2056.23,1214.53 2056.81,1214.53 2057.4,1214.53 2057.99,1214.53 2058.57,1214.53 2059.16,1214.53 2059.75,1214.53 2060.33,1214.53 2060.92,1214.53 2061.51,1214.53 2062.09,1214.53 2062.68,1214.53 2063.27,1214.53 2063.85,1214.53 2064.44,1214.53 2065.02,1214.53 2065.61,1214.53 2066.2,1214.53 2066.78,1214.53 2067.37,1214.53 2067.96,1214.53 2068.54,1214.53 2069.13,1214.53 2069.72,1214.53 2070.3,1214.53 2070.89,1214.53 2071.48,1214.53 2072.06,1214.53 2072.65,1214.53 2073.23,1214.53 2073.82,1214.53 2074.41,1214.53 2074.99,1214.53 2075.58,1214.53 2076.17,1214.53 2076.75,1214.53 2077.34,1214.53 2077.93,1214.53 2078.51,1214.53 2079.1,1214.53 2079.68,1214.53 2080.27,1214.53 2080.86,1214.53 2081.44,1214.53 2082.03,1214.53 2082.62,1214.53 2083.2,1214.53 2083.79,1214.53 2084.38,1214.53 2084.96,1214.53 2085.55,1214.53 2086.14,1214.53 2086.72,1214.53 2087.31,1214.53 2087.89,1214.53 2088.48,1214.53 2089.07,1214.53 2089.65,1214.53 2090.24,1214.53 2090.83,1214.53 2091.41,1214.53 2092,1214.53 2092.59,1214.53 2093.17,1214.53 2093.76,1214.53 2094.35,1214.53 2094.93,1214.53 2095.52,1214.53 2096.1,1214.53 2096.69,1214.53 2097.28,1214.53 2097.86,1214.53 2098.45,1214.53 2099.04,1214.53 2099.62,1214.53 2100.21,1214.53 2100.8,1214.53 2101.38,1214.53 2101.97,1214.53 2102.55,1214.53 2103.14,1214.53 2103.73,1214.53 2104.31,1214.53 2104.9,1214.53 2105.49,1214.53 2106.07,1214.53 2106.66,1214.53 2107.25,1214.53 2107.83,1214.53 2108.42,1214.53 2109.01,1214.53 2109.59,1214.53 2110.18,1214.53 2110.76,1214.53 2111.35,1214.53 2111.94,1214.53 2112.52,1214.53 2113.11,1214.53 2113.7,1214.53 2114.28,1214.53 2114.87,1214.53 2115.46,1214.53 2116.04,1214.53 2116.63,1214.53 2117.22,1214.53 2117.8,1214.53 2118.39,1214.53 2118.97,1214.53 2119.56,1214.53 2120.15,1214.53 2120.73,1214.53 2121.32,1214.53 2121.91,1214.53 2122.49,1214.53 2123.08,1214.53 2123.67,1214.53 2124.25,1214.53 2124.84,1214.53 2125.42,1214.53 2126.01,1214.53 2126.6,1214.53 2127.18,1214.53 2127.77,1214.53 2128.36,1214.53 2128.94,1214.53 2129.53,1214.53 2130.12,1214.53 2130.7,1214.53 2131.29,1214.53 2131.88,1214.53 2132.46,1214.53 2133.05,1214.53 2133.63,1214.53 2134.22,1214.53 2134.81,1214.53 2135.39,1214.53 2135.98,1214.53 2136.57,1214.53 2137.15,1214.53 2137.74,1214.53 2138.33,1214.53 2138.91,1214.53 2139.5,1214.53 2140.09,1214.53 2140.67,1214.53 2141.26,1214.53 2141.84,1214.53 2142.43,1214.53 2143.02,1214.53 2143.6,1214.53 2144.19,1214.53 2144.78,1214.53 2145.36,1214.53 2145.95,1214.53 2146.54,1214.53 2147.12,1214.53 2147.71,1214.53 2148.3,1214.53 2148.88,1214.53 2149.47,1214.53 2150.05,1214.53 2150.64,1214.53 2151.23,1214.53 2151.81,1214.53 2152.4,1214.53 2152.99,1214.53 2153.57,1214.53 2154.16,1214.53 2154.75,1214.53 2155.33,1214.53 2155.92,1214.53 2156.5,1214.53 2157.09,1214.53 2157.68,1214.53 2158.26,1214.53 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.5,1197.25 1398.86,899.083 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.32 985.439,1197.25 2158.26,1197.25 2158.26,1231.32 985.439,1231.32 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip623\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip623)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-11219.8 168.825,-11615.7 169.384,-11963.6 169.943,-10744.7 170.503,-11065.8 171.062,-11345 171.621,-11585.2 172.18,-11778.7 172.74,-11936.5 173.299,-12075.8 173.858,-11700 174.417,-11816.6 174.977,-11094.5 175.536,-10808.1 176.095,-10865.6 176.655,-10900.5 177.214,-10920.2 177.773,-10915.3 178.332,-10903.7 178.892,-10875.5 179.451,-10347.3 180.01,-10301.6 180.569,-10022.3 181.129,-9741.58 181.688,-9660.61 182.247,-9558.26 182.806,-9458.53 183.366,-9347.06 183.925,-9225.9 184.484,-8962.48 185.043,-8704.26 185.603,-8569.89 186.162,-8309.08 186.721,-8051.96 187.28,-7588.52 187.84,-7361.84 188.399,-7225.15 188.958,-6995.05 189.517,-6867.03 190.077,-6736.11 190.636,-6439.25 191.195,-6297.26 191.754,-6090.82 192.314,-5898.87 192.873,-5714.25 193.432,-5402.16 193.991,-5225.57 194.551,-5122.29 195.11,-4951.68 195.669,-4790.02 196.228,-4630.48 196.788,-4474.56 197.347,-4320.55 197.906,-4224.25 198.465,-4029.94 199.025,-3879.37 199.584,-3744.21 200.143,-3569.21 200.702,-3438.74 201.262,-3227.74 201.821,-3108.59 202.38,-2871.44 202.939,-2758.37 203.499,-2582.46 204.058,-2478.41 204.617,-2380.08 205.176,-2250.89 205.736,-2123.04 206.295,-1966.12 206.854,-1883.06 207.413,-1830.46 207.973,-1782.39 208.532,-1700.02 209.091,-1558.09 209.65,-1456.13 210.21,-1383.05 210.769,-1251.66 211.328,-1181.07 211.887,-1145.3 212.447,-1051.69 213.006,-931.468 213.565,-819.323 214.124,-713.96 214.684,-680.751 215.243,-651.903 215.802,-646.674 216.361,-512.294 216.921,-462.365 217.48,-437.664 218.039,-390.547 218.598,-364.26 219.158,-315.752 219.717,-290.527 220.276,-219.092 220.835,-195.902 221.395,-190.57 221.954,-165.698 222.513,-119.879 223.072,-92.2334 223.632,-84.3561 224.191,-54.3772 224.75,39.4284 225.309,126.397 225.869,165.824 226.428,227.987 226.987,307.149 227.546,317.474 228.106,370.01 228.665,442.023 229.224,469.438 229.783,474.994 230.343,502.037 230.902,586.63 231.461,627.308 232.02,625.342 232.58,642.989 233.139,679.408 233.698,696.589 234.257,711.846 234.817,731.296 235.376,730.949 235.935,748.527 236.494,789.634 237.054,844.67 237.613,876.486 238.172,874.271 238.731,867.906 239.291,865.327 239.85,879.537 240.409,897.032 240.968,893.352 241.528,942.717 242.087,991.644 242.646,1004.54 243.205,998.977 243.765,1042.86 244.324,1028.73 244.883,1002.88 245.442,994.038 246.002,1023.4 246.561,1049.29 247.12,1055.21 247.679,1046.56 248.239,1036.35 248.798,1042.18 249.357,1033.43 249.916,1007.76 250.476,985.946 251.035,980.264 251.594,995.366 252.153,988.85 252.713,1001.39 253.272,995.305 253.831,1025.52 254.39,1019.3 254.95,1063.86 255.509,1073.44 256.068,1061.58 256.627,1056.31 257.187,1051.48 257.746,1011.83 258.305,1040.93 258.864,1072.35 259.424,1082.35 259.983,1072.76 260.542,1066.44 261.101,1076.51 261.661,1070.62 262.22,1095.02 262.779,1072.36 263.338,1047.92 263.898,1041.8 264.457,1052.06 265.016,1031.49 265.575,1046.98 266.135,1040.06 266.694,1036.08 267.253,1032.54 267.812,1081.73 268.372,1073.9 268.931,1100.36 269.49,1128.82 270.049,1137.37 270.609,1129.49 271.168,1135.97 271.727,1145.56 272.286,1138.77 272.846,1129.04 273.405,1136.63 273.964,1109.26 274.523,1102.39 275.083,1077.35 275.642,1073.28 276.201,1065.37 276.76,1092.29 277.32,1134.48 277.879,1106.06 278.438,1099.56 278.997,1090.87 279.557,1068.51 280.116,1114.82 280.675,1121.18 281.234,1094.84 281.794,1087.81 282.353,1066.55 282.912,1045.29 283.471,1019.04 284.031,1032.72 284.59,1061.05 285.149,1084.14 285.708,1078.02 286.268,1084.39 286.827,1075.47 287.386,1067.4 287.945,1060.73 288.505,1069.22 289.064,1077.59 289.623,1068.94 290.182,1058.72 290.742,1051.82 291.301,1094.31 291.86,1082.02 292.419,1059.58 292.979,1069.91 293.538,1094.13 294.097,1069.85 294.656,1097.15 295.216,1055.54 295.775,1112.9 296.334,1047.81 296.893,1090.54 297.453,1062.56 298.012,1055.14 298.571,1049.75 299.13,1029.16 299.69,1039.44 300.249,1034.98 300.808,1029.44 301.368,1075.84 301.927,1068.75 302.486,1097.43 303.045,1101.57 303.605,1087.98 304.164,1092.6 304.723,1100.98 305.282,1125.94 305.842,1097.06 306.401,1087.46 306.96,1076.13 307.519,1066.73 308.079,1025.74 308.638,1002.3 309.197,979.636 309.756,1006.23 310.316,1016.01 310.875,989.428 311.434,986.616 311.993,981.616 312.553,978.501 313.112,973.316 313.671,968.752 314.23,949.425 314.79,949.203 315.349,945.61 315.908,942.105 316.467,953.256 317.027,968.85 317.586,964.717 318.145,944.228 318.704,957.481 319.264,952.527 319.823,950.038 320.382,980.323 320.941,1041.55 321.501,1045.25 322.06,1038.17 322.619,1013.51 323.178,1005.84 323.738,968.07 324.297,994.321 324.856,1022.63 325.415,1077.62 325.975,1050.42 326.534,1026 327.093,999.202 327.652,992.733 328.212,957.707 328.771,970.162 329.33,982.724 329.889,974.552 330.449,966.533 331.008,945.15 331.567,938.48 332.126,918.302 332.686,945.373 333.245,941.404 333.804,949.651 334.363,944.52 334.923,955.96 335.482,982.082 336.041,972.587 336.6,919.879 337.16,950.96 337.719,964.719 338.278,941.672 338.837,953.32 339.397,995.465 339.956,972.979 340.515,998.444 341.074,974.16 341.634,1002.78 342.193,996.178 342.752,1003.91 343.311,997.748 343.871,979.92 344.43,923.616 344.989,916.114 345.548,960.054 346.108,953.176 346.667,945.258 347.226,938.041 347.785,903.42 348.345,899.284 348.904,859.556 349.463,887.482 350.022,918.947 350.582,897.239 351.141,876.176 351.7,907.868 352.259,937.376 352.819,930.757 353.378,925.48 353.937,922.693 354.496,937.635 355.056,964.198 355.615,988.971 356.174,964.585 356.733,941.613 357.293,952.154 357.852,974.748 358.411,950.549 358.97,924.528 359.53,870.131 360.089,867.321 360.648,848.945 361.207,827.304 361.767,824.796 362.326,808.305 362.885,809.895 363.444,828.048 364.004,858.979 364.563,822.321 365.122,804.735 365.681,838.365 366.241,809.211 366.8,826.126 367.359,823.923 367.918,840.901 368.478,840.814 369.037,820.274 369.596,818.835 370.155,817.686 370.715,834.414 371.274,849.325 371.833,828.952 372.392,780.422 372.952,763.508 373.511,783.789 374.07,766.839 374.629,780.665 375.189,799.41 375.748,798.201 376.307,802.958 376.866,821.009 377.426,804.921 377.985,805.296 378.544,841.428 379.103,888.673 379.663,885.843 380.222,876.824 380.781,839.173 381.34,856.827 381.9,857.146 382.459,867.159 383.018,899.151 383.577,928.717 384.137,921.198 384.696,913.581 385.255,874.947 385.814,871.327 386.374,834.104 386.933,831.199 387.492,844.846 388.051,839.465 388.611,850.537 389.17,833.931 389.729,832.961 390.288,828.485 390.848,824.08 391.407,823.306 391.966,789.39 392.525,820.863 393.085,817.363 393.644,837.003 394.203,850.633 394.762,896.828 395.322,891.222 395.881,902.591 396.44,850.933 396.999,847.115 397.559,891.862 398.118,932.268 398.677,927.618 399.236,919.986 399.796,933.91 400.355,927.862 400.914,922.051 401.473,895.046 402.033,903.994 402.592,915.074 403.151,877.072 403.71,871.266 404.27,871.233 404.829,880.629 405.388,845.746 405.947,854.928 406.507,868.085 407.066,891.417 407.625,915.847 408.184,893.199 408.744,887.669 409.303,865.413 409.862,861.699 410.421,856.914 410.981,869.431 411.54,884.057 412.099,891.977 412.658,918.332 413.218,880.3 413.777,855.839 414.336,816.711 414.895,818.596 415.455,831.703 416.014,813.664 416.573,809.752 417.132,822.935 417.692,786.449 418.251,786.195 418.81,790.726 419.369,854.853 419.929,868.506 420.488,844.983 421.047,825.689 421.606,855.904 422.166,871.658 422.725,832.047 423.284,827.591 423.843,837.225 424.403,832.105 424.962,827.237 425.521,823.909 426.08,835.812 426.64,830.336 427.199,797.04 427.758,810.514 428.318,807.277 428.877,756.743 429.436,756.264 429.995,789.936 430.555,805.022 431.114,802.583 431.673,833.526 432.232,845.881 432.792,856.738 433.351,839.155 433.91,836.154 434.469,783.281 435.029,782.353 435.588,783.204 436.147,785.363 436.706,804.125 437.266,768.595 437.825,754.221 438.384,753.67 438.943,755.367 439.503,737.737 440.062,754.581 440.621,753.613 441.18,770.582 441.74,740.592 442.299,756.959 442.858,725.828 443.417,710.136 443.977,648.841 444.536,683.256 445.095,702.114 445.654,690.224 446.214,679.239 446.773,682.157 447.332,704.148 447.891,707.838 448.451,708.56 449.01,673.848 449.569,695.252 450.128,698.534 450.688,682.577 451.247,704.188 451.806,722.684 452.365,721.44 452.925,720.628 453.484,710.352 454.043,712.571 454.602,699.656 455.162,682.527 455.721,672.917 456.28,677.455 456.839,680.236 457.399,697.491 457.958,717.82 458.517,733.892 459.076,752.023 459.636,770.332 460.195,801.265 460.754,813.302 461.313,794.527 461.873,793.55 462.432,792.452 462.991,789.048 463.55,782.285 464.11,779.595 464.669,761.119 465.228,774.28 465.787,773.401 466.347,787.751 466.906,818.713 467.465,843.814 468.024,854.752 468.584,880.653 469.143,876.158 469.702,868.165 470.261,829.939 470.821,821.266 471.38,833.215 471.939,813.015 472.498,777.788 473.058,759.603 473.617,761.858 474.176,762.46 474.735,730.349 475.295,746.721 475.854,744.959 476.413,744.631 476.972,761.942 477.532,777.724 478.091,805.226 478.65,800.111 479.209,815.373 479.769,828.686 480.328,873.017 480.887,864.278 481.446,874.243 482.006,896.567 482.565,856.871 483.124,799.737 483.683,763.995 484.243,810.807 484.802,873.425 485.361,848.939 485.92,841.986 486.48,816.837 487.039,815.067 487.598,828.195 488.157,823.958 488.717,835.312 489.276,813.976 489.835,759.9 490.394,776.803 490.954,789.29 491.513,772.415 492.072,804.469 492.631,785.639 493.191,833.105 493.75,797.438 494.309,780.112 494.868,727.579 495.428,745.078 495.987,762.669 496.546,760.969 497.105,760.902 497.665,741.74 498.224,759.973 498.783,741.651 499.342,709.388 499.902,677.36 500.461,695.93 501.02,695.772 501.579,683.648 502.139,684.694 502.698,704.994 503.257,671.074 503.816,656.048 504.376,674.927 504.935,677.022 505.494,678.649 506.053,679.659 506.613,681.084 507.172,696.952 507.731,695.111 508.29,661.854 508.85,680.309 509.409,699.843 509.968,667.958 510.527,670.499 511.087,642.722 511.646,644.275 512.205,646.688 512.764,683.131 513.324,718.132 513.883,736.892 514.442,749.786 515.001,795.57 515.561,807.433 516.12,768.747 516.679,750.019 517.238,751.002 517.798,715.47 518.357,732.073 518.916,715.636 519.475,731.411 520.035,749.978 520.594,699.761 521.153,731.131 521.712,714.618 522.272,697.483 522.831,714.236 523.39,750.253 523.949,730.393 524.509,750.078 525.068,750.758 525.627,750.969 526.186,746.352 526.746,696.652 527.305,744.586 527.864,770.54 528.423,736.759 528.983,770.19 529.542,767.336 530.101,815.16 530.66,809.17 531.22,788.353 531.779,800.723 532.338,825.791 532.897,835.266 533.457,811.156 534.016,806.589 534.575,787.875 535.134,798.359 535.694,781.115 536.253,745.732 536.812,726.501 537.371,728.746 537.931,727.416 538.49,742.048 539.049,711.079 539.608,714.068 540.168,700.543 540.727,699.475 541.286,669.124 541.845,687.212 542.405,689.029 542.964,660.988 543.523,666.504 544.082,636.006 544.642,658.603 545.201,646.538 545.76,619.013 546.319,603.603 546.879,626.823 547.438,649.71 547.997,634.586 548.556,624.086 549.116,613.01 549.675,620.134 550.234,640.654 550.793,626.542 551.353,634.992 551.912,669.884 552.471,692.971 553.031,692.918 553.59,692.154 554.149,710.905 554.708,729.467 555.268,777.801 555.827,777.166 556.386,790.081 556.945,802.423 557.505,734.919 558.064,736.263 558.623,731.458 559.182,762.061 559.742,790.698 560.301,785.73 560.86,761.67 561.419,757.531 561.979,773.151 562.538,770.493 563.097,736.307 563.656,754.483 564.216,735.358 564.775,737.75 565.334,721.344 565.893,704.894 566.453,705.082 567.012,737.098 567.571,703.873 568.13,718.055 568.69,699.646 569.249,698.32 569.808,647.952 570.367,621.326 570.927,610.906 571.486,615.555 572.045,619.526 572.604,652.867 573.164,624.002 573.723,613.55 574.282,651.812 574.841,638.789 575.401,690.811 575.96,694.655 576.519,694.645 577.078,747.567 577.638,681.442 578.197,668.593 578.756,604.25 579.315,642.142 579.875,648.34 580.434,683.844 580.993,667.597 581.552,670.249 582.112,655.311 582.671,693.068 583.23,660.654 583.789,710.374 584.349,724.409 584.908,740.123 585.467,757.775 586.026,757.361 586.586,740.986 587.145,723.569 587.704,723.585 588.263,724.45 588.823,723.664 589.382,737.949 589.941,718.573 590.5,734.761 591.06,719.259 591.619,691.611 592.178,741.805 592.737,724.893 593.297,722.98 593.856,725.801 594.415,709.462 594.974,708.239 595.534,693.137 596.093,713.297 596.652,664.073 597.211,682.512 597.771,702.181 598.33,703.724 598.889,719.231 599.448,717.935 600.008,718.742 600.567,697.739 601.126,686.687 601.685,706.194 602.245,703.853 602.804,724.954 603.363,723.418 603.922,738.974 604.482,736.679 605.041,708.19 605.6,691.452 606.159,705.112 606.719,723.223 607.278,753.511 607.837,765.661 608.396,779.257 608.956,776.939 609.515,789.003 610.074,752.346 610.633,748.313 611.193,747.044 611.752,731.181 612.311,715.708 612.87,730.319 613.43,743.681 613.989,742.051 614.548,740.246 615.107,724.786 615.667,721.31 616.226,720.853 616.785,705.075 617.344,702.71 617.904,688.068 618.463,686.803 619.022,655.972 619.581,658.316 620.141,676.309 620.7,691.812 621.259,692.267 621.818,659.328 622.378,678.081 622.937,664.914 623.496,668.956 624.055,671.698 624.615,707.909 625.174,708.647 625.733,721.521 626.292,705.312 626.852,685.27 627.411,703.227 627.97,719.208 628.529,720.443 629.089,752.823 629.648,765.89 630.207,761.062 630.766,742.945 631.326,740.488 631.885,735.562 632.444,752.077 633.003,778.802 633.563,820.39 634.122,797.443 634.681,822.439 635.24,815.289 635.8,845.063 636.359,854.574 636.918,848.226 637.477,839.904 638.037,865.245 638.596,825.406 639.155,804.105 639.714,782.081 640.274,778.316 640.833,792.995 641.392,772.143 641.951,752.398 642.511,781.41 643.07,728.369 643.629,725.667 644.188,723.327 644.748,752.19 645.307,716.894 645.866,736.48 646.425,734.729 646.985,747.089 647.544,748.134 648.103,716.031 648.662,702.773 649.222,717.924 649.781,715.215 650.34,743.356 650.899,723.472 651.459,723.639 652.018,704.004 652.577,738.711 653.136,719.381 653.696,722.114 654.255,739.908 654.814,736.942 655.373,734.197 655.933,697.052 656.492,731.727 657.051,728.186 657.61,725.5 658.17,727.268 658.729,759.168 659.288,757.924 659.847,788.607 660.407,771.154 660.966,768.403 661.525,762.325 662.084,721.615 662.644,763.942 663.203,809.62 663.762,821.038 664.321,799.389 664.881,793.784 665.44,788.501 665.999,784.924 666.558,766.536 667.118,729.682 667.677,697.113 668.236,727.056 668.795,723.715 669.355,674.56 669.914,672.712 670.473,642.356 671.032,612.287 671.592,618.693 672.151,589.988 672.71,598.355 673.269,602.959 673.829,625.633 674.388,615.017 674.947,620.865 675.506,641.99 676.066,642.629 676.625,612.197 677.184,648.658 677.743,651.451 678.303,654.335 678.862,674.283 679.421,644.186 679.981,634.555 680.54,672.112 681.099,673.488 681.658,675.137 682.218,660.133 682.777,646.053 683.336,647.453 683.895,667.859 684.455,668.141 685.014,668.417 685.573,670.583 686.132,643.849 686.692,642.89 687.251,663.027 687.81,681.541 688.369,680.195 688.929,697.691 689.488,715.993 690.047,698.624 690.606,699.69 691.166,696.403 691.725,680.45 692.284,664.277 692.843,600.678 693.403,607.183 693.962,627.423 694.521,649.208 695.08,680.572 695.64,651.159 696.199,637.463 696.758,690.251 697.317,660.172 697.877,662.059 698.436,696.067 698.995,732.605 699.554,746.046 700.114,710.134 700.673,697.353 701.232,696.339 701.791,713.797 702.351,709.865 702.91,713.05 703.469,712.424 704.028,677.927 704.588,663.769 705.147,615.966 705.706,602.915 706.265,605.799 706.825,609.599 707.384,596.501 707.943,648.049 708.502,650.849 709.062,654.375 709.621,641.265 710.18,659.475 710.739,664.345 711.299,652.727 711.858,671.583 712.417,688.885 712.976,720.817 713.536,705.399 714.095,703.96 714.654,686 715.213,703.323 715.773,701.632 716.332,734.098 716.891,765.367 717.45,747.812 718.01,759.047 718.569,784.74 719.128,780.003 719.687,758.685 720.247,738.861 720.806,785.461 721.365,814.725 721.924,825.106 722.484,833.628 723.043,826.93 723.602,800.942 724.161,794.591 724.721,743.487 725.28,758.507 725.839,757.259 726.398,702.936 726.958,716.911 727.517,700.934 728.076,702.686 728.635,652.553 729.195,621.742 729.754,606.463 730.313,627.692 730.872,613.509 731.432,614.823 731.991,622.059 732.55,609.147 733.109,648.619 733.669,664.786 734.228,666.727 734.787,620.118 735.346,619.225 735.906,619.071 736.465,635.313 737.024,672.211 737.583,675.365 738.143,662.796 738.702,646.108 739.261,629.444 739.82,646.832 740.38,649.058 740.939,653.343 741.498,672.725 742.057,676.812 742.617,697.5 743.176,713.103 743.735,728.506 744.294,725.26 744.854,690.36 745.413,676.295 745.972,692.543 746.531,677.24 747.091,679.795 747.65,743.424 748.209,740.795 748.768,723.906 749.328,720.849 749.887,719.268 750.446,734.168 751.005,702.041 751.565,703.714 752.124,719.414 752.683,719.613 753.242,734.124 753.802,712.734 754.361,725.779 754.92,704.845 755.479,705.707 756.039,720.179 756.598,735.958 757.157,716.627 757.716,715.876 758.276,715.076 758.835,682.461 759.394,678.781 759.953,693.534 760.513,697.303 761.072,712.416 761.631,739.343 762.19,687.893 762.75,704.969 763.309,702.019 763.868,735.383 764.427,719.941 764.987,731.303 765.546,732.796 766.105,696.646 766.664,664.936 767.224,631.809 767.783,649.272 768.342,649.694 768.901,652.99 769.461,685.135 770.02,688.434 770.579,671.11 771.138,675.49 771.698,695.008 772.257,678.853 772.816,679.574 773.375,683.886 773.935,668.526 774.494,666.738 775.053,667.46 775.612,686.933 776.172,653.348 776.731,639.878 777.29,690 777.849,693.724 778.409,692.224 778.968,675.26 779.527,710.239 780.086,705.967 780.646,688.633 781.205,670.72 781.764,642.993 782.323,615.866 782.883,619.807 783.442,593.551 784.001,550.621 784.56,560.228 785.12,569.152 785.679,591.648 786.238,609.919 786.797,599.788 787.357,621.021 787.916,625.591 788.475,629.993 789.034,648.806 789.594,635.54 790.153,649.519 790.712,649.482 791.271,650.646 791.831,683.008 792.39,686.669 792.949,668.675 793.508,666.01 794.068,649.153 794.627,666.361 795.186,685.936 795.745,686.674 796.305,722.61 796.864,735.41 797.423,718.738 797.982,686.556 798.542,716.774 799.101,730.447 799.66,747.233 800.219,744.072 800.779,724.733 801.338,675.96 801.897,662.779 802.456,678.546 803.016,665.217 803.575,651.242 804.134,625.449 804.693,658.755 805.253,677.216 805.812,677.268 806.371,678.433 806.931,677.368 807.49,675.67 808.049,660.813 808.608,645.069 809.168,646.483 809.727,681.792 810.286,684.89 810.845,669.146 811.405,681.221 811.964,667.621 812.523,667.227 813.082,700.379 813.642,698.255 814.201,700.105 814.76,745.928 815.319,742.996 815.879,736.75 816.438,749.859 816.997,780.524 817.556,759.947 818.116,758.496 818.675,754.34 819.234,751.243 819.793,745.547 820.353,709.547 820.912,724.002 821.471,704.171 822.03,688.241 822.59,703.797 823.149,671.079 823.708,624.576 824.267,629.517 824.827,649.614 825.386,637.07 825.945,609.258 826.504,611.485 827.064,613.516 827.623,601.926 828.182,609.022 828.741,610.205 829.301,600.452 829.86,619.292 830.419,627.13 830.978,629.385 831.538,648.314 832.097,637.17 832.656,576.192 833.215,568.078 833.775,590.233 834.334,596.228 834.893,614.193 835.452,576.444 836.012,583.114 836.571,605.172 837.13,641.409 837.689,646.164 838.249,665.324 838.808,648.523 839.367,637.27 839.926,660.736 840.486,627.313 841.045,709.637 841.604,739.111 842.163,736.632 842.723,732.977 843.282,732.375 843.841,748.286 844.4,759.728 844.96,792.718 845.519,770.029 846.078,779.336 846.637,790.011 847.197,816.141 847.756,808.533 848.315,821.158 848.874,799.903 849.434,761.723 849.993,758.636 850.552,736.218 851.111,750.262 851.671,751.138 852.23,763.277 852.789,723.952 853.348,687.851 853.908,685.501 854.467,683.383 855.026,735.177 855.585,731.108 856.145,712.005 856.704,727.079 857.263,708.72 857.822,739.333 858.382,754.053 858.941,731.206 859.5,745.662 860.059,744.888 860.619,725.93 861.178,740.527 861.737,721.276 862.296,733.581 862.856,727.896 863.415,724.132 863.974,739.663 864.533,770.246 865.093,733.788 865.652,748.82 866.211,729.991 866.77,760.188 867.33,775.272 867.889,790.663 868.448,801.028 869.007,793.564 869.567,807.901 870.126,803.964 870.685,799.975 871.244,794.399 871.804,808.932 872.363,803.169 872.922,778.784 873.481,754.144 874.041,770.542 874.6,765.635 875.159,760.181 875.718,757.802 876.278,755.065 876.837,748.36 877.396,709.846 877.955,674.562 878.515,675.948 879.074,693.317 879.633,710.624 880.192,723.7 880.752,739.48 881.311,751.599 881.87,763.389 882.429,755.167 882.989,719.165 883.548,703.632 884.107,717.079 884.666,697.28 885.226,664.676 885.785,668.566 886.344,654.743 886.903,692.899 887.463,646.905 888.022,633.421 888.581,672.198 889.14,672.647 889.7,704.138 890.259,700.481 890.818,697.558 891.377,729.669 891.937,744.776 892.496,740.189 893.055,737.361 893.614,702.43 894.174,669.857 894.733,619.386 895.292,619.832 895.851,607.041 896.411,592.275 896.97,599.512 897.529,573.83 898.088,628.88 898.648,649.305 899.207,632.847 899.766,668.231 900.325,717.656 900.885,733.246 901.444,747.511 902.003,760.83 902.562,756.111 903.122,734.408 903.681,717.071 904.24,683.359 904.799,667.666 905.359,716.431 905.918,697.827 906.477,699.374 907.036,697.282 907.596,714.727 908.155,712.711 908.714,716.66 909.273,729.956 909.833,677.758 910.392,695.19 910.951,691.513 911.51,705.997 912.07,672.75 912.629,688.39 913.188,652.634 913.747,653.852 914.307,635.039 914.866,636.451 915.425,607.633 915.984,611.156 916.544,615.068 917.103,632.904 917.662,651.64 918.221,651.767 918.781,588.594 919.34,640.366 919.899,655.898 920.458,656.659 921.018,625.329 921.577,656.685 922.136,703.803 922.695,719.823 923.255,750.082 923.814,748.417 924.373,743.797 924.932,760.436 925.492,741.059 926.051,737.049 926.61,720.725 927.169,732.694 927.729,734.94 928.288,698.792 928.847,699.674 929.406,682.071 929.966,748 930.525,732.034 931.084,699.235 931.644,699.677 932.203,697.542 932.762,696.398 933.321,681.587 933.881,652.081 934.44,665.096 934.999,671.173 935.558,668.881 936.118,656.937 936.677,625.222 937.236,677.219 937.795,662.184 938.355,678.408 938.914,693.066 939.473,692.548 940.032,674.944 940.592,677.23 941.151,663.06 941.71,647.592 942.269,648.369 942.829,664.26 943.388,695.757 943.947,697.143 944.506,728.244 945.066,757.284 945.625,657.843 946.184,674.344 946.743,671.259 947.303,671.658 947.862,686.818 948.421,641.603 948.98,645.909 949.54,664.253 950.099,697.105 950.658,681.266 951.217,682.942 951.777,680.195 952.336,666.148 952.895,679.501 953.454,663.136 954.014,681.308 954.573,699.879 955.132,684.067 955.691,699.794 956.251,701.226 956.81,684.524 957.369,665.41 957.928,664.473 958.488,662.479 959.047,681.153 959.606,679.602 960.165,698.039 960.725,712.377 961.284,678.178 961.843,677.421 962.402,727.139 962.962,724.046 963.521,722.944 964.08,705.492 964.639,717.004 965.199,718.116 965.758,717.165 966.317,713.695 966.876,693.107 967.436,710.337 967.995,708.796 968.554,711.335 969.113,692.588 969.673,707.979 970.232,692.279 970.791,690.259 971.35,708.001 971.91,657.483 972.469,655.725 973.028,673.856 973.587,687.146 974.147,703.737 974.706,720.36 975.265,750.047 975.824,746.029 976.384,743.637 976.943,742.964 977.502,724.54 978.061,710.452 978.621,662.07 979.18,660.077 979.739,676.739 980.298,691.027 980.858,725.004 981.417,725.495 981.976,724.623 982.535,704.44 983.095,685.104 983.654,701.915 984.213,701.13 984.772,683.153 985.332,653.23 985.891,640.722 986.45,662.399 987.009,680.783 987.569,650.337 988.128,683.673 988.687,715.296 989.246,729.855 989.806,725.483 990.365,725.571 990.924,740.985 991.483,768.992 992.043,763.308 992.602,744.554 993.161,677.115 993.72,642.561 994.28,661.351 994.839,710.123 995.398,706.218 995.957,703.273 996.517,699.748 997.076,684.161 997.635,699.568 998.194,682.946 998.754,683.812 999.313,669.198 999.872,635.077 1000.43,640.622 1000.99,675.98 1001.55,660.969 1002.11,656.956 1002.67,659.379 1003.23,642.074 1003.79,642.745 1004.35,661.388 1004.91,645.212 1005.46,677.977 1006.02,676.042 1006.58,710.996 1007.14,710.988 1007.7,724.717 1008.26,720.775 1008.82,719.646 1009.38,718.772 1009.94,669.03 1010.5,671.45 1011.06,720.824 1011.62,685.51 1012.18,687.918 1012.73,703.555 1013.29,731.868 1013.85,731.924 1014.41,729.515 1014.97,743.762 1015.53,724.462 1016.09,691.622 1016.65,693.745 1017.21,724.263 1017.77,726.52 1018.33,711.211 1018.89,688.008 1019.45,702.407 1020.01,703.283 1020.56,718.557 1021.12,716.228 1021.68,700.875 1022.24,702.829 1022.8,673.075 1023.36,676.937 1023.92,680.234 1024.48,698.216 1025.04,695.648 1025.6,709.394 1026.16,678.356 1026.72,678.417 1027.28,681.075 1027.83,700.129 1028.39,716.8 1028.95,747.87 1029.51,727.389 1030.07,725.443 1030.63,706.635 1031.19,691.598 1031.75,692.596 1032.31,711.14 1032.87,676.958 1033.43,662.84 1033.99,644.501 1034.55,629.101 1035.1,648.615 1035.66,631.6 1036.22,633.197 1036.78,617.373 1037.34,621.826 1037.9,627.554 1038.46,599.552 1039.02,572.523 1039.58,593.969 1040.14,598.679 1040.7,652.957 1041.26,668.313 1041.82,670.48 1042.38,668.828 1042.93,671.94 1043.49,674.495 1044.05,672.938 1044.61,673.98 1045.17,690.303 1045.73,688.603 1046.29,694.599 1046.85,714.154 1047.41,712.827 1047.97,712.682 1048.53,726.793 1049.09,758.24 1049.65,753.631 1050.2,717.302 1050.76,716.451 1051.32,682.033 1051.88,731.277 1052.44,728.745 1053,678.044 1053.56,698.538 1054.12,716.759 1054.68,727.447 1055.24,687.479 1055.8,704.037 1056.36,718.566 1056.92,766.721 1057.48,778.279 1058.03,771.415 1058.59,764.991 1059.15,810.704 1059.71,753.635 1060.27,781.208 1060.83,741.377 1061.39,753.586 1061.95,748.646 1062.51,759.077 1063.07,737.449 1063.63,703.026 1064.19,700.61 1064.75,683.036 1065.3,663.862 1065.86,648.856 1066.42,652.757 1066.98,633.913 1067.54,618.98 1068.1,621.415 1068.66,625.435 1069.22,644.498 1069.78,627.651 1070.34,519.531 1070.9,514.024 1071.46,491.57 1072.02,503.204 1072.57,514.785 1073.13,557.21 1073.69,564.201 1074.25,619.098 1074.81,640.299 1075.37,693.457 1075.93,741.255 1076.49,755.435 1077.05,735.746 1077.61,751.771 1078.17,730.97 1078.73,747.498 1079.29,759.34 1079.85,707.569 1080.4,689.385 1080.96,673.466 1081.52,676.506 1082.08,691.246 1082.64,692.273 1083.2,674.163 1083.76,659.688 1084.32,678.251 1084.88,694.541 1085.44,707.942 1086,705.823 1086.56,689.961 1087.12,719.17 1087.67,718.345 1088.23,701.732 1088.79,669.421 1089.35,653.682 1089.91,655.873 1090.47,611.529 1091.03,615.194 1091.59,621.058 1092.15,640.371 1092.71,626.627 1093.27,648.3 1093.83,633.256 1094.39,703.542 1094.94,719.269 1095.5,737.797 1096.06,752.493 1096.62,747.806 1097.18,730.307 1097.74,747.973 1098.3,760.385 1098.86,759.694 1099.42,753.619 1099.98,752.393 1100.54,780.131 1101.1,793.328 1101.66,786.913 1102.22,763.312 1102.77,774.067 1103.33,818.032 1103.89,792.468 1104.45,768.713 1105.01,779.002 1105.57,741.43 1106.13,720.002 1106.69,704.248 1107.25,718.298 1107.81,698.482 1108.37,695.795 1108.93,681.299 1109.49,664.513 1110.04,666.561 1110.6,715.812 1111.16,717.337 1111.72,714.893 1112.28,678.799 1112.84,646.92 1113.4,646.864 1113.96,663.601 1114.52,599.223 1115.08,605.176 1115.64,610.5 1116.2,614.901 1116.76,633.159 1117.31,634.095 1117.87,588.095 1118.43,591.719 1118.99,581.837 1119.55,586.336 1120.11,607.887 1120.67,627.266 1121.23,662.903 1121.79,628.799 1122.35,616.813 1122.91,637.115 1123.47,672.756 1124.03,674.517 1124.59,672.123 1125.14,654.712 1125.7,672.589 1126.26,672.034 1126.82,638.896 1127.38,609.636 1127.94,611.875 1128.5,620.101 1129.06,592.281 1129.62,599.457 1130.18,572.804 1130.74,597.862 1131.3,618.944 1131.86,670.121 1132.41,668.036 1132.97,669.442 1133.53,687.477 1134.09,686.746 1134.65,670.426 1135.21,638.354 1135.77,658.606 1136.33,695.549 1136.89,678.703 1137.45,717.439 1138.01,701.765 1138.57,719.679 1139.13,719.385 1139.68,722.227 1140.24,707.841 1140.8,721.138 1141.36,718.855 1141.92,748.011 1142.48,759.294 1143.04,757.726 1143.6,739.182 1144.16,689.477 1144.72,738.191 1145.28,737.208 1145.84,747.776 1146.4,777.42 1146.96,788.103 1147.51,812.227 1148.07,787.285 1148.63,815.258 1149.19,747.915 1149.75,748.194 1150.31,761.778 1150.87,741.728 1151.43,737.429 1151.99,755.367 1152.55,753.701 1153.11,753.326 1153.67,748.219 1154.23,744.752 1154.78,758.488 1155.34,754.887 1155.9,783.55 1156.46,761.259 1157.02,773.874 1157.58,784.448 1158.14,761.831 1158.7,772.405 1159.26,767.266 1159.82,781.103 1160.38,773.819 1160.94,780.836 1161.5,789.799 1162.05,751.413 1162.61,685.487 1163.17,648.904 1163.73,651.527 1164.29,668.761 1164.85,685.779 1165.41,686.678 1165.97,686.507 1166.53,687.459 1167.09,688.711 1167.65,735.418 1168.21,702.515 1168.77,669.774 1169.33,671.599 1169.88,686.359 1170.44,654.075 1171,655.567 1171.56,639.572 1172.12,642.783 1172.68,678.895 1173.24,678.009 1173.8,709.747 1174.36,710.877 1174.92,692.055 1175.48,689.088 1176.04,691.449 1176.6,658.941 1177.15,690.723 1177.71,688.22 1178.27,689.394 1178.83,657.433 1179.39,677.15 1179.95,677.022 1180.51,641.964 1181.07,663.523 1181.63,663.751 1182.19,649.114 1182.75,632.027 1183.31,652.698 1183.87,639.049 1184.43,639.542 1184.98,608.769 1185.54,597.532 1186.1,586.904 1186.66,619.965 1187.22,643.765 1187.78,645.433 1188.34,615.217 1188.9,621.862 1189.46,654.601 1190.02,660.093 1190.58,616.443 1191.14,635.427 1191.7,637.744 1192.25,625.403 1192.81,641.269 1193.37,646.347 1193.93,617.84 1194.49,620.544 1195.05,638.838 1195.61,627.447 1196.17,629.158 1196.73,613.081 1197.29,616.372 1197.85,588.085 1198.41,592.624 1198.97,629.418 1199.52,605.116 1200.08,610.783 1200.64,582.759 1201.2,633.04 1201.76,637.026 1202.32,611.422 1202.88,614.38 1203.44,568.82 1204,596.135 1204.56,602.581 1205.12,626.609 1205.68,631.409 1206.24,633.099 1206.8,635.604 1207.35,620.229 1207.91,609.177 1208.47,629.385 1209.03,649.543 1209.59,667.304 1210.15,671.201 1210.71,688.11 1211.27,692.282 1211.83,709.668 1212.39,721.31 1212.95,730.084 1213.51,710.155 1214.07,743.347 1214.62,739.961 1215.18,736.626 1215.74,736.164 1216.3,736.06 1216.86,746.841 1217.42,726.914 1217.98,757.581 1218.54,818.71 1219.1,827.698 1219.66,832.58 1220.22,793.05 1220.78,835.612 1221.34,796.429 1221.89,740.282 1222.45,751.365 1223.01,763.202 1223.57,776.285 1224.13,773.817 1224.69,769.945 1225.25,748.501 1225.81,729.866 1226.37,762.477 1226.93,762.282 1227.49,690.832 1228.05,688.006 1228.61,703.953 1229.17,683.695 1229.72,621.616 1230.28,625.971 1230.84,646.619 1231.4,636.744 1231.96,621.951 1232.52,623.779 1233.08,609.433 1233.64,598.264 1234.2,638.569 1234.76,626.461 1235.32,631.389 1235.88,637.452 1236.44,687.429 1236.99,702.56 1237.55,703.673 1238.11,737.108 1238.67,721.663 1239.23,718.211 1239.79,712.142 1240.35,692.339 1240.91,708.568 1241.47,708.944 1242.03,704.781 1242.59,700.882 1243.15,666.685 1243.71,651.993 1244.26,652.483 1244.82,671.089 1245.38,685.212 1245.94,652.265 1246.5,668.407 1247.06,716.387 1247.62,701.438 1248.18,687.589 1248.74,705.342 1249.3,689.531 1249.86,705.238 1250.42,734.85 1250.98,750.83 1251.54,746.902 1252.09,728.488 1252.65,740.162 1253.21,736.871 1253.77,720.368 1254.33,718.919 1254.89,718.231 1255.45,717.371 1256.01,734.78 1256.57,715.15 1257.13,681.118 1257.69,699.085 1258.25,683.484 1258.81,685.85 1259.36,668.686 1259.92,670.326 1260.48,652.969 1261.04,621.509 1261.6,639.13 1262.16,676.069 1262.72,676.636 1263.28,646.137 1263.84,678.552 1264.4,680.122 1264.96,645.633 1265.52,649.21 1266.08,648.866 1266.63,638.108 1267.19,641.144 1267.75,659.319 1268.31,660.895 1268.87,678.58 1269.43,677.678 1269.99,662.477 1270.55,645.718 1271.11,647.692 1271.67,681.869 1272.23,670.51 1272.79,671.972 1273.35,674.262 1273.91,676.219 1274.46,624.388 1275.02,610.625 1275.58,597.567 1276.14,602.645 1276.7,593.736 1277.26,597.346 1277.82,616.169 1278.38,603.276 1278.94,612.245 1279.5,617.767 1280.06,618.34 1280.62,652.036 1281.18,670.554 1281.73,669.248 1282.29,650.418 1282.85,666.48 1283.41,653.545 1283.97,703.546 1284.53,688.502 1285.09,703.17 1285.65,702.122 1286.21,719.265 1286.77,715.373 1287.33,713.299 1287.89,695.362 1288.45,677.116 1289,692.874 1289.56,674.953 1290.12,705.301 1290.68,703.726 1291.24,704.593 1291.8,688.647 1292.36,686.189 1292.92,671.035 1293.48,656.914 1294.04,644.173 1294.6,644.81 1295.16,647.516 1295.72,664.079 1296.28,648.246 1296.83,618.674 1297.39,638.551 1297.95,627.807 1298.51,628.1 1299.07,629.971 1299.63,634.469 1300.19,603.124 1300.75,622.896 1301.31,640.533 1301.87,625.405 1302.43,633.975 1302.99,635.946 1303.55,623.498 1304.1,628.398 1304.66,662.598 1305.22,645.87 1305.78,648.55 1306.34,653.095 1306.9,656.971 1307.46,605.709 1308.02,621.495 1308.58,641.455 1309.14,609.099 1309.7,611.982 1310.26,631.842 1310.82,683.352 1311.38,648.08 1311.93,618.633 1312.49,655.441 1313.05,671.433 1313.61,668.071 1314.17,683.59 1314.73,650.158 1315.29,634.335 1315.85,601.368 1316.41,605.772 1316.97,592.234 1317.53,597.244 1318.09,619.622 1318.65,621.066 1319.2,607.212 1319.76,613.768 1320.32,667.688 1320.88,636.596 1321.44,640.29 1322,630.935 1322.56,648.332 1323.12,633.531 1323.68,648.856 1324.24,618.797 1324.8,657.381 1325.36,659.232 1325.92,644.491 1326.47,642.955 1327.03,661.636 1327.59,643.678 1328.15,663.172 1328.71,664.774 1329.27,698.92 1329.83,730.692 1330.39,741.581 1330.95,736.723 1331.51,734.108 1332.07,732.358 1332.63,748.617 1333.19,775.961 1333.75,774.71 1334.3,773.861 1334.86,772.964 1335.42,785.375 1335.98,783.182 1336.54,761.74 1337.1,807.925 1337.66,804.257 1338.22,812.206 1338.78,840.973 1339.34,849.099 1339.9,857.806 1340.46,848.322 1341.02,825.236 1341.57,782.537 1342.13,791.26 1342.69,769.556 1343.25,736.066 1343.81,731.643 1344.37,761.971 1344.93,759.704 1345.49,738.043 1346.05,720.151 1346.61,719.675 1347.17,719.463 1347.73,702.624 1348.29,763.785 1348.84,774.301 1349.4,768.878 1349.96,747.41 1350.52,744.404 1351.08,721.217 1351.64,735.935 1352.2,719.591 1352.76,747.796 1353.32,762.51 1353.88,789.822 1354.44,768.545 1355,764.6 1355.56,760.862 1356.12,739.661 1356.67,733.501 1357.23,746.731 1357.79,727.299 1358.35,706.697 1358.91,720.06 1359.47,734.336 1360.03,777.118 1360.59,800.429 1361.15,823.976 1361.71,800.362 1362.27,793.618 1362.83,788.199 1363.39,768.715 1363.94,748.676 1364.5,722.602 1365.06,690.205 1365.62,702.033 1366.18,733.701 1366.74,746.617 1367.3,728.088 1367.86,727.322 1368.42,744.231 1368.98,760.431 1369.54,741.018 1370.1,736.938 1370.66,703.144 1371.21,699.66 1371.77,681.681 1372.33,683.511 1372.89,690.848 1373.45,673.244 1374.01,692.829 1374.57,673.387 1375.13,704.265 1375.69,703.979 1376.25,700.017 1376.81,711.605 1377.37,709.285 1377.93,704.41 1378.49,687.455 1379.04,654.495 1379.6,705.352 1380.16,703.708 1380.72,702.832 1381.28,688.67 1381.84,672.011 1382.4,689.164 1382.96,703.553 1383.52,702.757 1384.08,702.823 1384.64,714.545 1385.2,696.485 1385.76,712.952 1386.31,710.004 1386.87,659.901 1387.43,679.285 1387.99,647.141 1388.55,635.503 1389.11,638.587 1389.67,659.045 1390.23,660.323 1390.79,644.546 1391.35,676.943 1391.91,679.011 1392.47,680.565 1393.03,633.341 1393.58,639.661 1394.14,638.372 1394.7,641.674 1395.26,662.04 1395.82,695.987 1396.38,695.478 1396.94,694.941 1397.5,722.365 1398.06,703.876 1398.62,651.505 1399.18,671.412 1399.74,651.488 1400.3,652.007 1400.86,621.436 1401.41,625.491 1401.97,628.883 1402.53,617.727 1403.09,604.997 1403.65,596.854 1404.21,619.726 1404.77,642.502 1405.33,611.595 1405.89,616.034 1406.45,617.03 1407.01,624.978 1407.57,648.523 1408.13,634.036 1408.68,652.597 1409.24,668.87 1409.8,702.216 1410.36,685.599 1410.92,670.101 1411.48,654.173 1412.04,644.132 1412.6,644.057 1413.16,617.802 1413.72,605.98 1414.28,628.614 1414.84,633.12 1415.4,633.511 1415.95,637.303 1416.51,654.241 1417.07,673.526 1417.63,674.393 1418.19,658.61 1418.75,691.542 1419.31,723.31 1419.87,717.567 1420.43,731.198 1420.99,745.745 1421.55,728.275 1422.11,727.478 1422.67,713.327 1423.23,730.496 1423.78,696.081 1424.34,695.246 1424.9,725.496 1425.46,754.916 1426.02,747.726 1426.58,744.811 1427.14,723.725 1427.7,673.961 1428.26,660.065 1428.82,679.673 1429.38,679.137 1429.94,693.056 1430.5,694.438 1431.05,693.622 1431.61,694.339 1432.17,663.829 1432.73,698.17 1433.29,716.31 1433.85,732.019 1434.41,715.133 1434.97,684.1 1435.53,666.889 1436.09,667.906 1436.65,667.475 1437.21,651.049 1437.77,639.078 1438.33,639.7 1438.88,639.619 1439.44,624.59 1440,630 1440.56,631.768 1441.12,683.028 1441.68,716.61 1442.24,714.834 1442.8,727.065 1443.36,712.434 1443.92,712.844 1444.48,711.627 1445.04,723.729 1445.6,756.307 1446.15,702.461 1446.71,718.158 1447.27,713.548 1447.83,711.193 1448.39,675.544 1448.95,706.558 1449.51,705.363 1450.07,703.217 1450.63,668.548 1451.19,668.346 1451.75,655.359 1452.31,674.665 1452.87,642.446 1453.42,643.146 1453.98,643.335 1454.54,628.469 1455.1,595.759 1455.66,567.198 1456.22,578.418 1456.78,598.94 1457.34,651.916 1457.9,704.99 1458.46,720.008 1459.02,702.451 1459.58,686.703 1460.14,670.486 1460.7,651.072 1461.25,623.18 1461.81,642.705 1462.37,676.665 1462.93,678.295 1463.49,697.304 1464.05,679.696 1464.61,682.061 1465.17,714.653 1465.73,714.643 1466.29,729.615 1466.85,741.25 1467.41,689.731 1467.97,703.178 1468.52,685.985 1469.08,704.213 1469.64,706.858 1470.2,640.695 1470.76,646.829 1471.32,648.133 1471.88,650.02 1472.44,637.405 1473,588.526 1473.56,612.224 1474.12,634.561 1474.68,652.35 1475.24,649.071 1475.79,631.696 1476.35,635.374 1476.91,633.119 1477.47,634.87 1478.03,605.092 1478.59,607.308 1479.15,612.281 1479.71,615.006 1480.27,587.161 1480.83,614.435 1481.39,649.22 1481.95,650.046 1482.51,668.558 1483.07,670.793 1483.62,672.207 1484.18,670.009 1484.74,671.442 1485.3,658.764 1485.86,674.855 1486.42,676.856 1486.98,677.466 1487.54,694.579 1488.1,678.213 1488.66,694.006 1489.22,674.073 1489.78,691.464 1490.34,675.657 1490.89,691.423 1491.45,657.523 1492.01,675.166 1492.57,679.551 1493.13,659.831 1493.69,692.191 1494.25,659.932 1494.81,661.941 1495.37,678.464 1495.93,668.09 1496.49,668.14 1497.05,666.299 1497.61,667.782 1498.16,655.799 1498.72,654.953 1499.28,656.34 1499.84,642.765 1500.4,679.266 1500.96,677.228 1501.52,711.966 1502.08,712.868 1502.64,678.721 1503.2,680.461 1503.76,694.124 1504.32,693.48 1504.88,697.087 1505.44,696.686 1505.99,680.517 1506.55,683.177 1507.11,719.093 1507.67,718.374 1508.23,717.861 1508.79,733.119 1509.35,717.99 1509.91,717.343 1510.47,729.389 1511.03,724.658 1511.59,722.929 1512.15,722.239 1512.71,721.613 1513.26,704.934 1513.82,690.803 1514.38,687.884 1514.94,688.11 1515.5,703.729 1516.06,718.779 1516.62,734.073 1517.18,714.121 1517.74,727.928 1518.3,740.345 1518.86,720.421 1519.42,700.856 1519.98,699.704 1520.53,680.786 1521.09,681.971 1521.65,669.004 1522.21,668.433 1522.77,666.252 1523.33,700.895 1523.89,700.813 1524.45,679.518 1525.01,664.292 1525.57,664.799 1526.13,666.435 1526.69,696.241 1527.25,725.172 1527.81,772.202 1528.36,783.58 1528.92,764.781 1529.48,759.498 1530.04,740.113 1530.6,734.765 1531.16,734.979 1531.72,672.088 1532.28,655.925 1532.84,662.677 1533.4,709.799 1533.96,693.926 1534.52,678.697 1535.08,677.798 1535.63,689.994 1536.19,672.051 1536.75,688.982 1537.31,656.622 1537.87,673.006 1538.43,624.028 1538.99,630.283 1539.55,667.662 1540.11,681.244 1540.67,699.693 1541.23,742.886 1541.79,725.279 1542.35,724.919 1542.9,690.134 1543.46,703.773 1544.02,690.416 1544.58,705.784 1545.14,704.73 1545.7,716.61 1546.26,698.247 1546.82,712.305 1547.38,726.156 1547.94,709.27 1548.5,726.204 1549.06,725.368 1549.62,753.204 1550.18,747.194 1550.73,758.827 1551.29,753.156 1551.85,716.714 1552.41,746.218 1552.97,710.61 1553.53,744.138 1554.09,723.861 1554.65,737.071 1555.21,697.129 1555.77,698.298 1556.33,671.399 1556.89,659.81 1557.45,665.407 1558,699.787 1558.56,682.91 1559.12,681.979 1559.68,697.924 1560.24,700.177 1560.8,668.409 1561.36,682.694 1561.92,713.404 1562.48,709.34 1563.04,673.31 1563.6,675.111 1564.16,676.244 1564.72,675.067 1565.28,643.318 1565.83,711.468 1566.39,729.542 1566.95,729.939 1567.51,742.239 1568.07,739.407 1568.63,752.869 1569.19,731.948 1569.75,708.841 1570.31,705.81 1570.87,703.675 1571.43,689.763 1571.99,707.188 1572.55,721.651 1573.1,672.659 1573.66,705.704 1574.22,688.632 1574.78,689.192 1575.34,705.746 1575.9,705.096 1576.46,668.178 1577.02,686.421 1577.58,658.137 1578.14,679.493 1578.7,647.76 1579.26,668.988 1579.82,704.426 1580.37,707.42 1580.93,736.82 1581.49,717.197 1582.05,715.693 1582.61,744.496 1583.17,758.787 1583.73,735.766 1584.29,734.145 1584.85,731.894 1585.41,713.989 1585.97,679.592 1586.53,677.943 1587.09,677.951 1587.65,678.014 1588.2,646.57 1588.76,664.428 1589.32,664.077 1589.88,635.928 1590.44,638.119 1591,606.956 1591.56,594.495 1592.12,616.028 1592.68,604.572 1593.24,606.825 1593.8,574.686 1594.36,597.974 1594.92,603.039 1595.47,622.605 1596.03,624.598 1596.59,632.636 1597.15,685.292 1597.71,700.57 1598.27,684.608 1598.83,666.859 1599.39,666.532 1599.95,670.766 1600.51,703.333 1601.07,669.81 1601.63,668.814 1602.19,670.42 1602.74,720.918 1603.3,765.844 1603.86,747.41 1604.42,743.609 1604.98,707.497 1605.54,739.703 1606.1,756.575 1606.66,754.032 1607.22,797.511 1607.78,758.516 1608.34,773.517 1608.9,754.414 1609.46,704.758 1610.02,723.713 1610.57,718.435 1611.13,737.417 1611.69,753.687 1612.25,734.991 1612.81,699.308 1613.37,716.105 1613.93,694.797 1614.49,677.283 1615.05,708.06 1615.61,720.719 1616.17,702.66 1616.73,704.512 1617.29,712.792 1617.84,740.996 1618.4,722.787 1618.96,691.912 1619.52,671.424 1620.08,638.929 1620.64,642.449 1621.2,659.56 1621.76,657.495 1622.32,614.053 1622.88,634.416 1623.44,669.271 1624,669.888 1624.56,656.362 1625.11,672.32 1625.67,652.013 1626.23,671.511 1626.79,690.396 1627.35,670.883 1627.91,656.373 1628.47,674.035 1629.03,674.786 1629.59,691.95 1630.15,691.831 1630.71,703.456 1631.27,718.098 1631.83,698.936 1632.39,681.173 1632.94,648.27 1633.5,667.741 1634.06,680.93 1634.62,713.994 1635.18,775.79 1635.74,740.119 1636.3,755.192 1636.86,784.223 1637.42,763.86 1637.98,777.564 1638.54,785.549 1639.1,766.255 1639.66,730.54 1640.21,725.77 1640.77,692.54 1641.33,690.677 1641.89,723.756 1642.45,736.585 1643.01,700.042 1643.57,697.749 1644.13,695.366 1644.69,677.484 1645.25,711.7 1645.81,709.901 1646.37,676.196 1646.93,670.868 1647.48,653.665 1648.04,639.305 1648.6,655.488 1649.16,688.028 1649.72,686.541 1650.28,689.176 1650.84,688.903 1651.4,672.736 1651.96,658.976 1652.52,674.408 1653.08,673.386 1653.64,658.135 1654.2,644.93 1654.76,613.969 1655.31,600.73 1655.87,588.752 1656.43,593.112 1656.99,645.825 1657.55,646.223 1658.11,648.22 1658.67,615.533 1659.23,619.102 1659.79,623.245 1660.35,625.431 1660.91,633.346 1661.47,571.658 1662.03,576.746 1662.58,585.645 1663.14,622.266 1663.7,628.656 1664.26,650.687 1664.82,653.924 1665.38,687.812 1665.94,690.72 1666.5,658.623 1667.06,628.349 1667.62,598.642 1668.18,585.436 1668.74,636.835 1669.3,638.092 1669.85,658.718 1670.41,711.292 1670.97,690.798 1671.53,722.8 1672.09,720.313 1672.65,718.484 1673.21,715.522 1673.77,694.492 1674.33,711.453 1674.89,697.379 1675.45,678.652 1676.01,712.843 1676.57,694.569 1677.13,677.961 1677.68,696.858 1678.24,697.856 1678.8,696.058 1679.36,681.492 1679.92,664.313 1680.48,644.728 1681.04,648.539 1681.6,683.652 1682.16,668.326 1682.72,621.528 1683.28,638.386 1683.84,624.385 1684.4,612.846 1684.95,601.287 1685.51,586.404 1686.07,577.488 1686.63,566.365 1687.19,590.937 1687.75,597.993 1688.31,587.394 1688.87,611.335 1689.43,641.97 1689.99,609.9 1690.55,627.482 1691.11,632.069 1691.67,619.327 1692.23,620.549 1692.78,623.456 1693.34,640.23 1693.9,661.434 1694.46,678.703 1695.02,713.118 1695.58,694.738 1696.14,695.118 1696.7,694.279 1697.26,724.641 1697.82,689.921 1698.38,689.99 1698.94,674.814 1699.5,675.932 1700.05,645.62 1700.61,650.674 1701.17,699.58 1701.73,699.435 1702.29,699.758 1702.85,682.913 1703.41,683.794 1703.97,668.668 1704.53,688.364 1705.09,674.008 1705.65,693.656 1706.21,708.607 1706.77,706.881 1707.32,722.557 1707.88,705.927 1708.44,704.523 1709,734.611 1709.56,778.797 1710.12,788.806 1710.68,767.841 1711.24,796.472 1711.8,790.909 1712.36,751.913 1712.92,763.109 1713.48,743.919 1714.04,724.752 1714.6,692.56 1715.15,675.749 1715.71,660.309 1716.27,643.619 1716.83,647.38 1717.39,629.965 1717.95,633.129 1718.51,651.978 1719.07,635.32 1719.63,652.349 1720.19,653.271 1720.75,668.275 1721.31,653.671 1721.87,626.87 1722.42,630.414 1722.98,647.567 1723.54,668.696 1724.1,671.982 1724.66,675.282 1725.22,657.615 1725.78,641.507 1726.34,693.093 1726.9,676.205 1727.46,661.129 1728.02,664.916 1728.58,653.353 1729.14,685.211 1729.69,670.463 1730.25,654.416 1730.81,642.774 1731.37,643.09 1731.93,659.64 1732.49,658.724 1733.05,657.261 1733.61,643.522 1734.17,646.92 1734.73,665.377 1735.29,649.953 1735.85,667.134 1736.41,664.279 1736.97,650.131 1737.52,667.048 1738.08,670.901 1738.64,669.51 1739.2,670.251 1739.76,685.517 1740.32,682.543 1740.88,648.137 1741.44,636.597 1742,608.331 1742.56,647.845 1743.12,635.971 1743.68,639.164 1744.24,626.38 1744.79,631.422 1745.35,682.72 1745.91,664.712 1746.47,667.307 1747.03,667.574 1747.59,684.876 1748.15,684.705 1748.71,683.758 1749.27,713.871 1749.83,729.479 1750.39,754.754 1750.95,735.463 1751.51,748.298 1752.06,729.768 1752.62,730.494 1753.18,710.256 1753.74,710.105 1754.3,696.004 1754.86,709.041 1755.42,754.055 1755.98,749.131 1756.54,733.761 1757.1,702.915 1757.66,703.32 1758.22,720.276 1758.78,767.727 1759.34,759.568 1759.89,739.685 1760.45,721.913 1761.01,685.485 1761.57,683.009 1762.13,681.316 1762.69,716.43 1763.25,681.11 1763.81,665.651 1764.37,649.412 1764.93,652.17 1765.49,652.728 1766.05,651.901 1766.61,652.078 1767.16,653.375 1767.72,687.494 1768.28,686.474 1768.84,689.668 1769.4,671.073 1769.96,622.015 1770.52,626.204 1771.08,643.261 1771.64,674.053 1772.2,657.956 1772.76,645.885 1773.32,664.188 1773.88,683.323 1774.43,702.725 1774.99,719.705 1775.55,687.412 1776.11,699.947 1776.67,682.703 1777.23,663.116 1777.79,698.154 1778.35,680.615 1778.91,679.671 1779.47,682.231 1780.03,714.232 1780.59,695.927 1781.15,679.498 1781.71,663.288 1782.26,663.878 1782.82,664.784 1783.38,668.329 1783.94,651.329 1784.5,671.218 1785.06,683.937 1785.62,714.26 1786.18,741.573 1786.74,766.835 1787.3,776.274 1787.86,739.536 1788.42,752.374 1788.98,717.257 1789.53,698.804 1790.09,694.455 1790.65,724.438 1791.21,721.395 1791.77,669.617 1792.33,685.907 1792.89,685.708 1793.45,686.293 1794.01,718.329 1794.57,716.573 1795.13,730.125 1795.69,741.746 1796.25,718.502 1796.8,718.464 1797.36,727.724 1797.92,727.412 1798.48,724.359 1799.04,705.767 1799.6,688.621 1800.16,719.466 1800.72,767.495 1801.28,744.057 1801.84,723.966 1802.4,738.064 1802.96,649.836 1803.52,650.691 1804.08,666.417 1804.63,637.194 1805.19,607.922 1805.75,612.995 1806.31,615.419 1806.87,621.154 1807.43,606.526 1807.99,646.06 1808.55,681.559 1809.11,698.612 1809.67,762.045 1810.23,772.195 1810.79,749.144 1811.35,779.462 1811.9,727.038 1812.46,708.224 1813.02,708.263 1813.58,708.198 1814.14,676.751 1814.7,725.671 1815.26,737.465 1815.82,734.474 1816.38,731.454 1816.94,741.907 1817.5,739.264 1818.06,701.31 1818.62,682.456 1819.18,687.365 1819.73,670.406 1820.29,688.806 1820.85,657.314 1821.41,689.77 1821.97,686.456 1822.53,671.661 1823.09,686.124 1823.65,636.766 1824.21,625.358 1824.77,635.219 1825.33,621.174 1825.89,627.96 1826.45,630.42 1827,635.097 1827.56,620.766 1828.12,655.582 1828.68,658.817 1829.24,694.013 1829.8,692.487 1830.36,675.177 1830.92,659.257 1831.48,664.67 1832.04,683.321 1832.6,697.034 1833.16,717.576 1833.72,698.707 1834.27,713.016 1834.83,696.21 1835.39,691.93 1835.95,676.314 1836.51,694.725 1837.07,678.293 1837.63,649.238 1838.19,651.118 \"/>\n<path clip-path=\"url(#clip623)\" d=\"M720.247 690.55 L720.806 690.55 L721.365 690.55 L721.924 690.55 L722.484 690.55 L723.043 690.55 L723.602 690.55 L724.161 690.55 L724.721 690.55 L725.28 690.55 L725.839 690.55 L726.398 690.55 L726.958 690.55 L727.517 690.55 L728.076 690.55 L728.635 690.55 L729.195 690.55 L729.754 690.55 L730.313 690.55 L730.872 690.55 L731.432 690.55 L731.991 690.55 L732.55 690.55 L733.109 690.55 L733.669 690.55 L734.228 690.55 L734.787 690.55 L735.346 690.55 L735.906 690.55 L736.465 690.55 L737.024 690.55 L737.583 690.55 L738.143 690.55 L738.702 690.55 L739.261 690.55 L739.82 690.55 L740.38 690.55 L740.939 690.55 L741.498 690.55 L742.057 690.55 L742.617 690.55 L743.176 690.55 L743.735 690.55 L744.294 690.55 L744.854 690.55 L745.413 690.55 L745.972 690.55 L746.531 690.55 L747.091 690.55 L747.65 690.55 L748.209 690.55 L748.768 690.55 L749.328 690.55 L749.887 690.55 L750.446 690.55 L751.005 690.55 L751.565 690.55 L752.124 690.55 L752.683 690.55 L753.242 690.55 L753.802 690.55 L754.361 690.55 L754.92 690.55 L755.479 690.55 L756.039 690.55 L756.598 690.55 L757.157 690.55 L757.716 690.55 L758.276 690.55 L758.835 690.55 L759.394 690.55 L759.953 690.55 L760.513 690.55 L761.072 690.55 L761.631 690.55 L762.19 690.55 L762.75 690.55 L763.309 690.55 L763.868 690.55 L764.427 690.55 L764.987 690.55 L765.546 690.55 L766.105 690.55 L766.664 690.55 L767.224 690.55 L767.783 690.55 L768.342 690.55 L768.901 690.55 L769.461 690.55 L770.02 690.55 L770.579 690.55 L771.138 690.55 L771.698 690.55 L772.257 690.55 L772.816 690.55 L773.375 690.55 L773.935 690.55 L774.494 690.55 L775.053 690.55 L775.612 690.55 L776.172 690.55 L776.731 690.55 L777.29 690.55 L777.849 690.55 L778.409 690.55 L778.968 690.55 L779.527 690.55 L780.086 690.55 L780.646 690.55 L781.205 690.55 L781.764 690.55 L782.323 690.55 L782.883 690.55 L783.442 690.55 L784.001 690.55 L784.56 690.55 L785.12 690.55 L785.679 690.55 L786.238 690.55 L786.797 690.55 L787.357 690.55 L787.916 690.55 L788.475 690.55 L789.034 690.55 L789.594 690.55 L790.153 690.55 L790.712 690.55 L791.271 690.55 L791.831 690.55 L792.39 690.55 L792.949 690.55 L793.508 690.55 L794.068 690.55 L794.627 690.55 L795.186 690.55 L795.745 690.55 L796.305 690.55 L796.864 690.55 L797.423 690.55 L797.982 690.55 L798.542 690.55 L799.101 690.55 L799.66 690.55 L800.219 690.55 L800.779 690.55 L801.338 690.55 L801.897 690.55 L802.456 690.55 L803.016 690.55 L803.575 690.55 L804.134 690.55 L804.693 690.55 L805.253 690.55 L805.812 690.55 L806.371 690.55 L806.931 690.55 L807.49 690.55 L808.049 690.55 L808.608 690.55 L809.168 690.55 L809.727 690.55 L810.286 690.55 L810.845 690.55 L811.405 690.55 L811.964 690.55 L812.523 690.55 L813.082 690.55 L813.642 690.55 L814.201 690.55 L814.76 690.55 L815.319 690.55 L815.879 690.55 L816.438 690.55 L816.997 690.55 L817.556 690.55 L818.116 690.55 L818.675 690.55 L819.234 690.55 L819.793 690.55 L820.353 690.55 L820.912 690.55 L821.471 690.55 L822.03 690.55 L822.59 690.55 L823.149 690.55 L823.708 690.55 L824.267 690.55 L824.827 690.55 L825.386 690.55 L825.945 690.55 L826.504 690.55 L827.064 690.55 L827.623 690.55 L828.182 690.55 L828.741 690.55 L829.301 690.55 L829.86 690.55 L830.419 690.55 L830.978 690.55 L831.538 690.55 L832.097 690.55 L832.656 690.55 L833.215 690.55 L833.775 690.55 L834.334 690.55 L834.893 690.55 L835.452 690.55 L836.012 690.55 L836.571 690.55 L837.13 690.55 L837.689 690.55 L838.249 690.55 L838.808 690.55 L839.367 690.55 L839.926 690.55 L840.486 690.55 L841.045 690.55 L841.604 690.55 L842.163 690.55 L842.723 690.55 L843.282 690.55 L843.841 690.55 L844.4 690.55 L844.96 690.55 L845.519 690.55 L846.078 690.55 L846.637 690.55 L847.197 690.55 L847.756 690.55 L848.315 690.55 L848.874 690.55 L849.434 690.55 L849.993 690.55 L850.552 690.55 L851.111 690.55 L851.671 690.55 L852.23 690.55 L852.789 690.55 L853.348 690.55 L853.908 690.55 L854.467 690.55 L855.026 690.55 L855.585 690.55 L856.145 690.55 L856.704 690.55 L857.263 690.55 L857.822 690.55 L858.382 690.55 L858.941 690.55 L859.5 690.55 L860.059 690.55 L860.619 690.55 L861.178 690.55 L861.737 690.55 L862.296 690.55 L862.856 690.55 L863.415 690.55 L863.974 690.55 L864.533 690.55 L865.093 690.55 L865.652 690.55 L866.211 690.55 L866.77 690.55 L867.33 690.55 L867.889 690.55 L868.448 690.55 L869.007 690.55 L869.567 690.55 L870.126 690.55 L870.685 690.55 L871.244 690.55 L871.804 690.55 L872.363 690.55 L872.922 690.55 L873.481 690.55 L874.041 690.55 L874.6 690.55 L875.159 690.55 L875.718 690.55 L876.278 690.55 L876.837 690.55 L877.396 690.55 L877.955 690.55 L878.515 690.55 L879.074 690.55 L879.633 690.55 L880.192 690.55 L880.752 690.55 L881.311 690.55 L881.87 690.55 L882.429 690.55 L882.989 690.55 L883.548 690.55 L884.107 690.55 L884.666 690.55 L885.226 690.55 L885.785 690.55 L886.344 690.55 L886.903 690.55 L887.463 690.55 L888.022 690.55 L888.581 690.55 L889.14 690.55 L889.7 690.55 L890.259 690.55 L890.818 690.55 L891.377 690.55 L891.937 690.55 L892.496 690.55 L893.055 690.55 L893.614 690.55 L894.174 690.55 L894.733 690.55 L895.292 690.55 L895.851 690.55 L896.411 690.55 L896.97 690.55 L897.529 690.55 L898.088 690.55 L898.648 690.55 L899.207 690.55 L899.766 690.55 L900.325 690.55 L900.885 690.55 L901.444 690.55 L902.003 690.55 L902.562 690.55 L903.122 690.55 L903.681 690.55 L904.24 690.55 L904.799 690.55 L905.359 690.55 L905.918 690.55 L906.477 690.55 L907.036 690.55 L907.596 690.55 L908.155 690.55 L908.714 690.55 L909.273 690.55 L909.833 690.55 L910.392 690.55 L910.951 690.55 L911.51 690.55 L912.07 690.55 L912.629 690.55 L913.188 690.55 L913.747 690.55 L914.307 690.55 L914.866 690.55 L915.425 690.55 L915.984 690.55 L916.544 690.55 L917.103 690.55 L917.662 690.55 L918.221 690.55 L918.781 690.55 L919.34 690.55 L919.899 690.55 L920.458 690.55 L921.018 690.55 L921.577 690.55 L922.136 690.55 L922.695 690.55 L923.255 690.55 L923.814 690.55 L924.373 690.55 L924.932 690.55 L925.492 690.55 L926.051 690.55 L926.61 690.55 L927.169 690.55 L927.729 690.55 L928.288 690.55 L928.847 690.55 L929.406 690.55 L929.966 690.55 L930.525 690.55 L931.084 690.55 L931.644 690.55 L932.203 690.55 L932.762 690.55 L933.321 690.55 L933.881 690.55 L934.44 690.55 L934.999 690.55 L935.558 690.55 L936.118 690.55 L936.677 690.55 L937.236 690.55 L937.795 690.55 L938.355 690.55 L938.914 690.55 L939.473 690.55 L940.032 690.55 L940.592 690.55 L941.151 690.55 L941.71 690.55 L942.269 690.55 L942.829 690.55 L943.388 690.55 L943.947 690.55 L944.506 690.55 L945.066 690.55 L945.625 690.55 L946.184 690.55 L946.743 690.55 L947.303 690.55 L947.862 690.55 L948.421 690.55 L948.98 690.55 L949.54 690.55 L950.099 690.55 L950.658 690.55 L951.217 690.55 L951.777 690.55 L952.336 690.55 L952.895 690.55 L953.454 690.55 L954.014 690.55 L954.573 690.55 L955.132 690.55 L955.691 690.55 L956.251 690.55 L956.81 690.55 L957.369 690.55 L957.928 690.55 L958.488 690.55 L959.047 690.55 L959.606 690.55 L960.165 690.55 L960.725 690.55 L961.284 690.55 L961.843 690.55 L962.402 690.55 L962.962 690.55 L963.521 690.55 L964.08 690.55 L964.639 690.55 L965.199 690.55 L965.758 690.55 L966.317 690.55 L966.876 690.55 L967.436 690.55 L967.995 690.55 L968.554 690.55 L969.113 690.55 L969.673 690.55 L970.232 690.55 L970.791 690.55 L971.35 690.55 L971.91 690.55 L972.469 690.55 L973.028 690.55 L973.587 690.55 L974.147 690.55 L974.706 690.55 L975.265 690.55 L975.824 690.55 L976.384 690.55 L976.943 690.55 L977.502 690.55 L978.061 690.55 L978.621 690.55 L979.18 690.55 L979.739 690.55 L980.298 690.55 L980.858 690.55 L981.417 690.55 L981.976 690.55 L982.535 690.55 L983.095 690.55 L983.654 690.55 L984.213 690.55 L984.772 690.55 L985.332 690.55 L985.891 690.55 L986.45 690.55 L987.009 690.55 L987.569 690.55 L988.128 690.55 L988.687 690.55 L989.246 690.55 L989.806 690.55 L990.365 690.55 L990.924 690.55 L991.483 690.55 L992.043 690.55 L992.602 690.55 L993.161 690.55 L993.72 690.55 L994.28 690.55 L994.839 690.55 L995.398 690.55 L995.957 690.55 L996.517 690.55 L997.076 690.55 L997.635 690.55 L998.194 690.55 L998.754 690.55 L999.313 690.55 L999.872 690.55 L1000.43 690.55 L1000.99 690.55 L1001.55 690.55 L1002.11 690.55 L1002.67 690.55 L1003.23 690.55 L1003.79 690.55 L1004.35 690.55 L1004.91 690.55 L1005.46 690.55 L1006.02 690.55 L1006.58 690.55 L1007.14 690.55 L1007.7 690.55 L1008.26 690.55 L1008.82 690.55 L1009.38 690.55 L1009.94 690.55 L1010.5 690.55 L1011.06 690.55 L1011.62 690.55 L1012.18 690.55 L1012.73 690.55 L1013.29 690.55 L1013.85 690.55 L1014.41 690.55 L1014.97 690.55 L1015.53 690.55 L1016.09 690.55 L1016.65 690.55 L1017.21 690.55 L1017.77 690.55 L1018.33 690.55 L1018.89 690.55 L1019.45 690.55 L1020.01 690.55 L1020.56 690.55 L1021.12 690.55 L1021.68 690.55 L1022.24 690.55 L1022.8 690.55 L1023.36 690.55 L1023.92 690.55 L1024.48 690.55 L1025.04 690.55 L1025.6 690.55 L1026.16 690.55 L1026.72 690.55 L1027.28 690.55 L1027.83 690.55 L1028.39 690.55 L1028.95 690.55 L1029.51 690.55 L1030.07 690.55 L1030.63 690.55 L1031.19 690.55 L1031.75 690.55 L1032.31 690.55 L1032.87 690.55 L1033.43 690.55 L1033.99 690.55 L1034.55 690.55 L1035.1 690.55 L1035.66 690.55 L1036.22 690.55 L1036.78 690.55 L1037.34 690.55 L1037.9 690.55 L1038.46 690.55 L1039.02 690.55 L1039.58 690.55 L1040.14 690.55 L1040.7 690.55 L1041.26 690.55 L1041.82 690.55 L1042.38 690.55 L1042.93 690.55 L1043.49 690.55 L1044.05 690.55 L1044.61 690.55 L1045.17 690.55 L1045.73 690.55 L1046.29 690.55 L1046.85 690.55 L1047.41 690.55 L1047.97 690.55 L1048.53 690.55 L1049.09 690.55 L1049.65 690.55 L1050.2 690.55 L1050.76 690.55 L1051.32 690.55 L1051.88 690.55 L1052.44 690.55 L1053 690.55 L1053.56 690.55 L1054.12 690.55 L1054.68 690.55 L1055.24 690.55 L1055.8 690.55 L1056.36 690.55 L1056.92 690.55 L1057.48 690.55 L1058.03 690.55 L1058.59 690.55 L1059.15 690.55 L1059.71 690.55 L1060.27 690.55 L1060.83 690.55 L1061.39 690.55 L1061.95 690.55 L1062.51 690.55 L1063.07 690.55 L1063.63 690.55 L1064.19 690.55 L1064.75 690.55 L1065.3 690.55 L1065.86 690.55 L1066.42 690.55 L1066.98 690.55 L1067.54 690.55 L1068.1 690.55 L1068.66 690.55 L1069.22 690.55 L1069.78 690.55 L1070.34 690.55 L1070.9 690.55 L1071.46 690.55 L1072.02 690.55 L1072.57 690.55 L1073.13 690.55 L1073.69 690.55 L1074.25 690.55 L1074.81 690.55 L1075.37 690.55 L1075.93 690.55 L1076.49 690.55 L1077.05 690.55 L1077.61 690.55 L1078.17 690.55 L1078.73 690.55 L1079.29 690.55 L1079.85 690.55 L1080.4 690.55 L1080.96 690.55 L1081.52 690.55 L1082.08 690.55 L1082.64 690.55 L1083.2 690.55 L1083.76 690.55 L1084.32 690.55 L1084.88 690.55 L1085.44 690.55 L1086 690.55 L1086.56 690.55 L1087.12 690.55 L1087.67 690.55 L1088.23 690.55 L1088.79 690.55 L1089.35 690.55 L1089.91 690.55 L1090.47 690.55 L1091.03 690.55 L1091.59 690.55 L1092.15 690.55 L1092.71 690.55 L1093.27 690.55 L1093.83 690.55 L1094.39 690.55 L1094.94 690.55 L1095.5 690.55 L1096.06 690.55 L1096.62 690.55 L1097.18 690.55 L1097.74 690.55 L1098.3 690.55 L1098.86 690.55 L1099.42 690.55 L1099.98 690.55 L1100.54 690.55 L1101.1 690.55 L1101.66 690.55 L1102.22 690.55 L1102.77 690.55 L1103.33 690.55 L1103.89 690.55 L1104.45 690.55 L1105.01 690.55 L1105.57 690.55 L1106.13 690.55 L1106.69 690.55 L1107.25 690.55 L1107.81 690.55 L1108.37 690.55 L1108.93 690.55 L1109.49 690.55 L1110.04 690.55 L1110.6 690.55 L1111.16 690.55 L1111.72 690.55 L1112.28 690.55 L1112.84 690.55 L1113.4 690.55 L1113.96 690.55 L1114.52 690.55 L1115.08 690.55 L1115.64 690.55 L1116.2 690.55 L1116.76 690.55 L1117.31 690.55 L1117.87 690.55 L1118.43 690.55 L1118.99 690.55 L1119.55 690.55 L1120.11 690.55 L1120.67 690.55 L1121.23 690.55 L1121.79 690.55 L1122.35 690.55 L1122.91 690.55 L1123.47 690.55 L1124.03 690.55 L1124.59 690.55 L1125.14 690.55 L1125.7 690.55 L1126.26 690.55 L1126.82 690.55 L1127.38 690.55 L1127.94 690.55 L1128.5 690.55 L1129.06 690.55 L1129.62 690.55 L1130.18 690.55 L1130.74 690.55 L1131.3 690.55 L1131.86 690.55 L1132.41 690.55 L1132.97 690.55 L1133.53 690.55 L1134.09 690.55 L1134.65 690.55 L1135.21 690.55 L1135.77 690.55 L1136.33 690.55 L1136.89 690.55 L1137.45 690.55 L1138.01 690.55 L1138.57 690.55 L1139.13 690.55 L1139.68 690.55 L1140.24 690.55 L1140.8 690.55 L1141.36 690.55 L1141.92 690.55 L1142.48 690.55 L1143.04 690.55 L1143.6 690.55 L1144.16 690.55 L1144.72 690.55 L1145.28 690.55 L1145.84 690.55 L1146.4 690.55 L1146.96 690.55 L1147.51 690.55 L1148.07 690.55 L1148.63 690.55 L1149.19 690.55 L1149.75 690.55 L1150.31 690.55 L1150.87 690.55 L1151.43 690.55 L1151.99 690.55 L1152.55 690.55 L1153.11 690.55 L1153.67 690.55 L1154.23 690.55 L1154.78 690.55 L1155.34 690.55 L1155.9 690.55 L1156.46 690.55 L1157.02 690.55 L1157.58 690.55 L1158.14 690.55 L1158.7 690.55 L1159.26 690.55 L1159.82 690.55 L1160.38 690.55 L1160.94 690.55 L1161.5 690.55 L1162.05 690.55 L1162.61 690.55 L1163.17 690.55 L1163.73 690.55 L1164.29 690.55 L1164.85 690.55 L1165.41 690.55 L1165.97 690.55 L1166.53 690.55 L1167.09 690.55 L1167.65 690.55 L1168.21 690.55 L1168.77 690.55 L1169.33 690.55 L1169.88 690.55 L1170.44 690.55 L1171 690.55 L1171.56 690.55 L1172.12 690.55 L1172.68 690.55 L1173.24 690.55 L1173.8 690.55 L1174.36 690.55 L1174.92 690.55 L1175.48 690.55 L1176.04 690.55 L1176.6 690.55 L1177.15 690.55 L1177.71 690.55 L1178.27 690.55 L1178.83 690.55 L1179.39 690.55 L1179.95 690.55 L1180.51 690.55 L1181.07 690.55 L1181.63 690.55 L1182.19 690.55 L1182.75 690.55 L1183.31 690.55 L1183.87 690.55 L1184.43 690.55 L1184.98 690.55 L1185.54 690.55 L1186.1 690.55 L1186.66 690.55 L1187.22 690.55 L1187.78 690.55 L1188.34 690.55 L1188.9 690.55 L1189.46 690.55 L1190.02 690.55 L1190.58 690.55 L1191.14 690.55 L1191.7 690.55 L1192.25 690.55 L1192.81 690.55 L1193.37 690.55 L1193.93 690.55 L1194.49 690.55 L1195.05 690.55 L1195.61 690.55 L1196.17 690.55 L1196.73 690.55 L1197.29 690.55 L1197.85 690.55 L1198.41 690.55 L1198.97 690.55 L1199.52 690.55 L1200.08 690.55 L1200.64 690.55 L1201.2 690.55 L1201.76 690.55 L1202.32 690.55 L1202.88 690.55 L1203.44 690.55 L1204 690.55 L1204.56 690.55 L1205.12 690.55 L1205.68 690.55 L1206.24 690.55 L1206.8 690.55 L1207.35 690.55 L1207.91 690.55 L1208.47 690.55 L1209.03 690.55 L1209.59 690.55 L1210.15 690.55 L1210.71 690.55 L1211.27 690.55 L1211.83 690.55 L1212.39 690.55 L1212.95 690.55 L1213.51 690.55 L1214.07 690.55 L1214.62 690.55 L1215.18 690.55 L1215.74 690.55 L1216.3 690.55 L1216.86 690.55 L1217.42 690.55 L1217.98 690.55 L1218.54 690.55 L1219.1 690.55 L1219.66 690.55 L1220.22 690.55 L1220.78 690.55 L1221.34 690.55 L1221.89 690.55 L1222.45 690.55 L1223.01 690.55 L1223.57 690.55 L1224.13 690.55 L1224.69 690.55 L1225.25 690.55 L1225.81 690.55 L1226.37 690.55 L1226.93 690.55 L1227.49 690.55 L1228.05 690.55 L1228.61 690.55 L1229.17 690.55 L1229.72 690.55 L1230.28 690.55 L1230.84 690.55 L1231.4 690.55 L1231.96 690.55 L1232.52 690.55 L1233.08 690.55 L1233.64 690.55 L1234.2 690.55 L1234.76 690.55 L1235.32 690.55 L1235.88 690.55 L1236.44 690.55 L1236.99 690.55 L1237.55 690.55 L1238.11 690.55 L1238.67 690.55 L1239.23 690.55 L1239.79 690.55 L1240.35 690.55 L1240.91 690.55 L1241.47 690.55 L1242.03 690.55 L1242.59 690.55 L1243.15 690.55 L1243.71 690.55 L1244.26 690.55 L1244.82 690.55 L1245.38 690.55 L1245.94 690.55 L1246.5 690.55 L1247.06 690.55 L1247.62 690.55 L1248.18 690.55 L1248.74 690.55 L1249.3 690.55 L1249.86 690.55 L1250.42 690.55 L1250.98 690.55 L1251.54 690.55 L1252.09 690.55 L1252.65 690.55 L1253.21 690.55 L1253.77 690.55 L1254.33 690.55 L1254.89 690.55 L1255.45 690.55 L1256.01 690.55 L1256.57 690.55 L1257.13 690.55 L1257.69 690.55 L1258.25 690.55 L1258.81 690.55 L1259.36 690.55 L1259.92 690.55 L1260.48 690.55 L1261.04 690.55 L1261.6 690.55 L1262.16 690.55 L1262.72 690.55 L1263.28 690.55 L1263.84 690.55 L1264.4 690.55 L1264.96 690.55 L1265.52 690.55 L1266.08 690.55 L1266.63 690.55 L1267.19 690.55 L1267.75 690.55 L1268.31 690.55 L1268.87 690.55 L1269.43 690.55 L1269.99 690.55 L1270.55 690.55 L1271.11 690.55 L1271.67 690.55 L1272.23 690.55 L1272.79 690.55 L1273.35 690.55 L1273.91 690.55 L1274.46 690.55 L1275.02 690.55 L1275.58 690.55 L1276.14 690.55 L1276.7 690.55 L1277.26 690.55 L1277.82 690.55 L1278.38 690.55 L1278.94 690.55 L1279.5 690.55 L1280.06 690.55 L1280.62 690.55 L1281.18 690.55 L1281.73 690.55 L1282.29 690.55 L1282.85 690.55 L1283.41 690.55 L1283.97 690.55 L1284.53 690.55 L1285.09 690.55 L1285.65 690.55 L1286.21 690.55 L1286.77 690.55 L1287.33 690.55 L1287.89 690.55 L1288.45 690.55 L1289 690.55 L1289.56 690.55 L1290.12 690.55 L1290.68 690.55 L1291.24 690.55 L1291.8 690.55 L1292.36 690.55 L1292.92 690.55 L1293.48 690.55 L1294.04 690.55 L1294.6 690.55 L1295.16 690.55 L1295.72 690.55 L1296.28 690.55 L1296.83 690.55 L1297.39 690.55 L1297.95 690.55 L1298.51 690.55 L1299.07 690.55 L1299.63 690.55 L1300.19 690.55 L1300.75 690.55 L1301.31 690.55 L1301.87 690.55 L1302.43 690.55 L1302.99 690.55 L1303.55 690.55 L1304.1 690.55 L1304.66 690.55 L1305.22 690.55 L1305.78 690.55 L1306.34 690.55 L1306.9 690.55 L1307.46 690.55 L1308.02 690.55 L1308.58 690.55 L1309.14 690.55 L1309.7 690.55 L1310.26 690.55 L1310.82 690.55 L1311.38 690.55 L1311.93 690.55 L1312.49 690.55 L1313.05 690.55 L1313.61 690.55 L1314.17 690.55 L1314.73 690.55 L1315.29 690.55 L1315.85 690.55 L1316.41 690.55 L1316.97 690.55 L1317.53 690.55 L1318.09 690.55 L1318.65 690.55 L1319.2 690.55 L1319.76 690.55 L1320.32 690.55 L1320.88 690.55 L1321.44 690.55 L1322 690.55 L1322.56 690.55 L1323.12 690.55 L1323.68 690.55 L1324.24 690.55 L1324.8 690.55 L1325.36 690.55 L1325.92 690.55 L1326.47 690.55 L1327.03 690.55 L1327.59 690.55 L1328.15 690.55 L1328.71 690.55 L1329.27 690.55 L1329.83 690.55 L1330.39 690.55 L1330.95 690.55 L1331.51 690.55 L1332.07 690.55 L1332.63 690.55 L1333.19 690.55 L1333.75 690.55 L1334.3 690.55 L1334.86 690.55 L1335.42 690.55 L1335.98 690.55 L1336.54 690.55 L1337.1 690.55 L1337.66 690.55 L1338.22 690.55 L1338.78 690.55 L1339.34 690.55 L1339.9 690.55 L1340.46 690.55 L1341.02 690.55 L1341.57 690.55 L1342.13 690.55 L1342.69 690.55 L1343.25 690.55 L1343.81 690.55 L1344.37 690.55 L1344.93 690.55 L1345.49 690.55 L1346.05 690.55 L1346.61 690.55 L1347.17 690.55 L1347.73 690.55 L1348.29 690.55 L1348.84 690.55 L1349.4 690.55 L1349.96 690.55 L1350.52 690.55 L1351.08 690.55 L1351.64 690.55 L1352.2 690.55 L1352.76 690.55 L1353.32 690.55 L1353.88 690.55 L1354.44 690.55 L1355 690.55 L1355.56 690.55 L1356.12 690.55 L1356.67 690.55 L1357.23 690.55 L1357.79 690.55 L1358.35 690.55 L1358.91 690.55 L1359.47 690.55 L1360.03 690.55 L1360.59 690.55 L1361.15 690.55 L1361.71 690.55 L1362.27 690.55 L1362.83 690.55 L1363.39 690.55 L1363.94 690.55 L1364.5 690.55 L1365.06 690.55 L1365.62 690.55 L1366.18 690.55 L1366.74 690.55 L1367.3 690.55 L1367.86 690.55 L1368.42 690.55 L1368.98 690.55 L1369.54 690.55 L1370.1 690.55 L1370.66 690.55 L1371.21 690.55 L1371.77 690.55 L1372.33 690.55 L1372.89 690.55 L1373.45 690.55 L1374.01 690.55 L1374.57 690.55 L1375.13 690.55 L1375.69 690.55 L1376.25 690.55 L1376.81 690.55 L1377.37 690.55 L1377.93 690.55 L1378.49 690.55 L1379.04 690.55 L1379.6 690.55 L1380.16 690.55 L1380.72 690.55 L1381.28 690.55 L1381.84 690.55 L1382.4 690.55 L1382.96 690.55 L1383.52 690.55 L1384.08 690.55 L1384.64 690.55 L1385.2 690.55 L1385.76 690.55 L1386.31 690.55 L1386.87 690.55 L1387.43 690.55 L1387.99 690.55 L1388.55 690.55 L1389.11 690.55 L1389.67 690.55 L1390.23 690.55 L1390.79 690.55 L1391.35 690.55 L1391.91 690.55 L1392.47 690.55 L1393.03 690.55 L1393.58 690.55 L1394.14 690.55 L1394.7 690.55 L1395.26 690.55 L1395.82 690.55 L1396.38 690.55 L1396.94 690.55 L1397.5 690.55 L1398.06 690.55 L1398.62 690.55 L1399.18 690.55 L1399.74 690.55 L1400.3 690.55 L1400.86 690.55 L1401.41 690.55 L1401.97 690.55 L1402.53 690.55 L1403.09 690.55 L1403.65 690.55 L1404.21 690.55 L1404.77 690.55 L1405.33 690.55 L1405.89 690.55 L1406.45 690.55 L1407.01 690.55 L1407.57 690.55 L1408.13 690.55 L1408.68 690.55 L1409.24 690.55 L1409.8 690.55 L1410.36 690.55 L1410.92 690.55 L1411.48 690.55 L1412.04 690.55 L1412.6 690.55 L1413.16 690.55 L1413.72 690.55 L1414.28 690.55 L1414.84 690.55 L1415.4 690.55 L1415.95 690.55 L1416.51 690.55 L1417.07 690.55 L1417.63 690.55 L1418.19 690.55 L1418.75 690.55 L1419.31 690.55 L1419.87 690.55 L1420.43 690.55 L1420.99 690.55 L1421.55 690.55 L1422.11 690.55 L1422.67 690.55 L1423.23 690.55 L1423.78 690.55 L1424.34 690.55 L1424.9 690.55 L1425.46 690.55 L1426.02 690.55 L1426.58 690.55 L1427.14 690.55 L1427.7 690.55 L1428.26 690.55 L1428.82 690.55 L1429.38 690.55 L1429.94 690.55 L1430.5 690.55 L1431.05 690.55 L1431.61 690.55 L1432.17 690.55 L1432.73 690.55 L1433.29 690.55 L1433.85 690.55 L1434.41 690.55 L1434.97 690.55 L1435.53 690.55 L1436.09 690.55 L1436.65 690.55 L1437.21 690.55 L1437.77 690.55 L1438.33 690.55 L1438.88 690.55 L1439.44 690.55 L1440 690.55 L1440.56 690.55 L1441.12 690.55 L1441.68 690.55 L1442.24 690.55 L1442.8 690.55 L1443.36 690.55 L1443.92 690.55 L1444.48 690.55 L1445.04 690.55 L1445.6 690.55 L1446.15 690.55 L1446.71 690.55 L1447.27 690.55 L1447.83 690.55 L1448.39 690.55 L1448.95 690.55 L1449.51 690.55 L1450.07 690.55 L1450.63 690.55 L1451.19 690.55 L1451.75 690.55 L1452.31 690.55 L1452.87 690.55 L1453.42 690.55 L1453.98 690.55 L1454.54 690.55 L1455.1 690.55 L1455.66 690.55 L1456.22 690.55 L1456.78 690.55 L1457.34 690.55 L1457.9 690.55 L1458.46 690.55 L1459.02 690.55 L1459.58 690.55 L1460.14 690.55 L1460.7 690.55 L1461.25 690.55 L1461.81 690.55 L1462.37 690.55 L1462.93 690.55 L1463.49 690.55 L1464.05 690.55 L1464.61 690.55 L1465.17 690.55 L1465.73 690.55 L1466.29 690.55 L1466.85 690.55 L1467.41 690.55 L1467.97 690.55 L1468.52 690.55 L1469.08 690.55 L1469.64 690.55 L1470.2 690.55 L1470.76 690.55 L1471.32 690.55 L1471.88 690.55 L1472.44 690.55 L1473 690.55 L1473.56 690.55 L1474.12 690.55 L1474.68 690.55 L1475.24 690.55 L1475.79 690.55 L1476.35 690.55 L1476.91 690.55 L1477.47 690.55 L1478.03 690.55 L1478.59 690.55 L1479.15 690.55 L1479.71 690.55 L1480.27 690.55 L1480.83 690.55 L1481.39 690.55 L1481.95 690.55 L1482.51 690.55 L1483.07 690.55 L1483.62 690.55 L1484.18 690.55 L1484.74 690.55 L1485.3 690.55 L1485.86 690.55 L1486.42 690.55 L1486.98 690.55 L1487.54 690.55 L1488.1 690.55 L1488.66 690.55 L1489.22 690.55 L1489.78 690.55 L1490.34 690.55 L1490.89 690.55 L1491.45 690.55 L1492.01 690.55 L1492.57 690.55 L1493.13 690.55 L1493.69 690.55 L1494.25 690.55 L1494.81 690.55 L1495.37 690.55 L1495.93 690.55 L1496.49 690.55 L1497.05 690.55 L1497.61 690.55 L1498.16 690.55 L1498.72 690.55 L1499.28 690.55 L1499.84 690.55 L1500.4 690.55 L1500.96 690.55 L1501.52 690.55 L1502.08 690.55 L1502.64 690.55 L1503.2 690.55 L1503.76 690.55 L1504.32 690.55 L1504.88 690.55 L1505.44 690.55 L1505.99 690.55 L1506.55 690.55 L1507.11 690.55 L1507.67 690.55 L1508.23 690.55 L1508.79 690.55 L1509.35 690.55 L1509.91 690.55 L1510.47 690.55 L1511.03 690.55 L1511.59 690.55 L1512.15 690.55 L1512.71 690.55 L1513.26 690.55 L1513.82 690.55 L1514.38 690.55 L1514.94 690.55 L1515.5 690.55 L1516.06 690.55 L1516.62 690.55 L1517.18 690.55 L1517.74 690.55 L1518.3 690.55 L1518.86 690.55 L1519.42 690.55 L1519.98 690.55 L1520.53 690.55 L1521.09 690.55 L1521.65 690.55 L1522.21 690.55 L1522.77 690.55 L1523.33 690.55 L1523.89 690.55 L1524.45 690.55 L1525.01 690.55 L1525.57 690.55 L1526.13 690.55 L1526.69 690.55 L1527.25 690.55 L1527.81 690.55 L1528.36 690.55 L1528.92 690.55 L1529.48 690.55 L1530.04 690.55 L1530.6 690.55 L1531.16 690.55 L1531.72 690.55 L1532.28 690.55 L1532.84 690.55 L1533.4 690.55 L1533.96 690.55 L1534.52 690.55 L1535.08 690.55 L1535.63 690.55 L1536.19 690.55 L1536.75 690.55 L1537.31 690.55 L1537.87 690.55 L1538.43 690.55 L1538.99 690.55 L1539.55 690.55 L1540.11 690.55 L1540.67 690.55 L1541.23 690.55 L1541.79 690.55 L1542.35 690.55 L1542.9 690.55 L1543.46 690.55 L1544.02 690.55 L1544.58 690.55 L1545.14 690.55 L1545.7 690.55 L1546.26 690.55 L1546.82 690.55 L1547.38 690.55 L1547.94 690.55 L1548.5 690.55 L1549.06 690.55 L1549.62 690.55 L1550.18 690.55 L1550.73 690.55 L1551.29 690.55 L1551.85 690.55 L1552.41 690.55 L1552.97 690.55 L1553.53 690.55 L1554.09 690.55 L1554.65 690.55 L1555.21 690.55 L1555.77 690.55 L1556.33 690.55 L1556.89 690.55 L1557.45 690.55 L1558 690.55 L1558.56 690.55 L1559.12 690.55 L1559.68 690.55 L1560.24 690.55 L1560.8 690.55 L1561.36 690.55 L1561.92 690.55 L1562.48 690.55 L1563.04 690.55 L1563.6 690.55 L1564.16 690.55 L1564.72 690.55 L1565.28 690.55 L1565.83 690.55 L1566.39 690.55 L1566.95 690.55 L1567.51 690.55 L1568.07 690.55 L1568.63 690.55 L1569.19 690.55 L1569.75 690.55 L1570.31 690.55 L1570.87 690.55 L1571.43 690.55 L1571.99 690.55 L1572.55 690.55 L1573.1 690.55 L1573.66 690.55 L1574.22 690.55 L1574.78 690.55 L1575.34 690.55 L1575.9 690.55 L1576.46 690.55 L1577.02 690.55 L1577.58 690.55 L1578.14 690.55 L1578.7 690.55 L1579.26 690.55 L1579.82 690.55 L1580.37 690.55 L1580.93 690.55 L1581.49 690.55 L1582.05 690.55 L1582.61 690.55 L1583.17 690.55 L1583.73 690.55 L1584.29 690.55 L1584.85 690.55 L1585.41 690.55 L1585.97 690.55 L1586.53 690.55 L1587.09 690.55 L1587.65 690.55 L1588.2 690.55 L1588.76 690.55 L1589.32 690.55 L1589.88 690.55 L1590.44 690.55 L1591 690.55 L1591.56 690.55 L1592.12 690.55 L1592.68 690.55 L1593.24 690.55 L1593.8 690.55 L1594.36 690.55 L1594.92 690.55 L1595.47 690.55 L1596.03 690.55 L1596.59 690.55 L1597.15 690.55 L1597.71 690.55 L1598.27 690.55 L1598.83 690.55 L1599.39 690.55 L1599.95 690.55 L1600.51 690.55 L1601.07 690.55 L1601.63 690.55 L1602.19 690.55 L1602.74 690.55 L1603.3 690.55 L1603.86 690.55 L1604.42 690.55 L1604.98 690.55 L1605.54 690.55 L1606.1 690.55 L1606.66 690.55 L1607.22 690.55 L1607.78 690.55 L1608.34 690.55 L1608.9 690.55 L1609.46 690.55 L1610.02 690.55 L1610.57 690.55 L1611.13 690.55 L1611.69 690.55 L1612.25 690.55 L1612.81 690.55 L1613.37 690.55 L1613.93 690.55 L1614.49 690.55 L1615.05 690.55 L1615.61 690.55 L1616.17 690.55 L1616.73 690.55 L1617.29 690.55 L1617.84 690.55 L1618.4 690.55 L1618.96 690.55 L1619.52 690.55 L1620.08 690.55 L1620.64 690.55 L1621.2 690.55 L1621.76 690.55 L1622.32 690.55 L1622.88 690.55 L1623.44 690.55 L1624 690.55 L1624.56 690.55 L1625.11 690.55 L1625.67 690.55 L1626.23 690.55 L1626.79 690.55 L1627.35 690.55 L1627.91 690.55 L1628.47 690.55 L1629.03 690.55 L1629.59 690.55 L1630.15 690.55 L1630.71 690.55 L1631.27 690.55 L1631.83 690.55 L1632.39 690.55 L1632.94 690.55 L1633.5 690.55 L1634.06 690.55 L1634.62 690.55 L1635.18 690.55 L1635.74 690.55 L1636.3 690.55 L1636.86 690.55 L1637.42 690.55 L1637.98 690.55 L1638.54 690.55 L1639.1 690.55 L1639.66 690.55 L1640.21 690.55 L1640.77 690.55 L1641.33 690.55 L1641.89 690.55 L1642.45 690.55 L1643.01 690.55 L1643.57 690.55 L1644.13 690.55 L1644.69 690.55 L1645.25 690.55 L1645.81 690.55 L1646.37 690.55 L1646.93 690.55 L1647.48 690.55 L1648.04 690.55 L1648.6 690.55 L1649.16 690.55 L1649.72 690.55 L1650.28 690.55 L1650.84 690.55 L1651.4 690.55 L1651.96 690.55 L1652.52 690.55 L1653.08 690.55 L1653.64 690.55 L1654.2 690.55 L1654.76 690.55 L1655.31 690.55 L1655.87 690.55 L1656.43 690.55 L1656.99 690.55 L1657.55 690.55 L1658.11 690.55 L1658.67 690.55 L1659.23 690.55 L1659.79 690.55 L1660.35 690.55 L1660.91 690.55 L1661.47 690.55 L1662.03 690.55 L1662.58 690.55 L1663.14 690.55 L1663.7 690.55 L1664.26 690.55 L1664.82 690.55 L1665.38 690.55 L1665.94 690.55 L1666.5 690.55 L1667.06 690.55 L1667.62 690.55 L1668.18 690.55 L1668.74 690.55 L1669.3 690.55 L1669.85 690.55 L1670.41 690.55 L1670.97 690.55 L1671.53 690.55 L1672.09 690.55 L1672.65 690.55 L1673.21 690.55 L1673.77 690.55 L1674.33 690.55 L1674.89 690.55 L1675.45 690.55 L1676.01 690.55 L1676.57 690.55 L1677.13 690.55 L1677.68 690.55 L1678.24 690.55 L1678.8 690.55 L1679.36 690.55 L1679.92 690.55 L1680.48 690.55 L1681.04 690.55 L1681.6 690.55 L1682.16 690.55 L1682.72 690.55 L1683.28 690.55 L1683.84 690.55 L1684.4 690.55 L1684.95 690.55 L1685.51 690.55 L1686.07 690.55 L1686.63 690.55 L1687.19 690.55 L1687.75 690.55 L1688.31 690.55 L1688.87 690.55 L1689.43 690.55 L1689.99 690.55 L1690.55 690.55 L1691.11 690.55 L1691.67 690.55 L1692.23 690.55 L1692.78 690.55 L1693.34 690.55 L1693.9 690.55 L1694.46 690.55 L1695.02 690.55 L1695.58 690.55 L1696.14 690.55 L1696.7 690.55 L1697.26 690.55 L1697.82 690.55 L1698.38 690.55 L1698.94 690.55 L1699.5 690.55 L1700.05 690.55 L1700.61 690.55 L1701.17 690.55 L1701.73 690.55 L1702.29 690.55 L1702.85 690.55 L1703.41 690.55 L1703.97 690.55 L1704.53 690.55 L1705.09 690.55 L1705.65 690.55 L1706.21 690.55 L1706.77 690.55 L1707.32 690.55 L1707.88 690.55 L1708.44 690.55 L1709 690.55 L1709.56 690.55 L1710.12 690.55 L1710.68 690.55 L1711.24 690.55 L1711.8 690.55 L1712.36 690.55 L1712.92 690.55 L1713.48 690.55 L1714.04 690.55 L1714.6 690.55 L1715.15 690.55 L1715.71 690.55 L1716.27 690.55 L1716.83 690.55 L1717.39 690.55 L1717.95 690.55 L1718.51 690.55 L1719.07 690.55 L1719.63 690.55 L1720.19 690.55 L1720.75 690.55 L1721.31 690.55 L1721.87 690.55 L1722.42 690.55 L1722.98 690.55 L1723.54 690.55 L1724.1 690.55 L1724.66 690.55 L1725.22 690.55 L1725.78 690.55 L1726.34 690.55 L1726.9 690.55 L1727.46 690.55 L1728.02 690.55 L1728.58 690.55 L1729.14 690.55 L1729.69 690.55 L1730.25 690.55 L1730.81 690.55 L1731.37 690.55 L1731.93 690.55 L1732.49 690.55 L1733.05 690.55 L1733.61 690.55 L1734.17 690.55 L1734.73 690.55 L1735.29 690.55 L1735.85 690.55 L1736.41 690.55 L1736.97 690.55 L1737.52 690.55 L1738.08 690.55 L1738.64 690.55 L1739.2 690.55 L1739.76 690.55 L1740.32 690.55 L1740.88 690.55 L1741.44 690.55 L1742 690.55 L1742.56 690.55 L1743.12 690.55 L1743.68 690.55 L1744.24 690.55 L1744.79 690.55 L1745.35 690.55 L1745.91 690.55 L1746.47 690.55 L1747.03 690.55 L1747.59 690.55 L1748.15 690.55 L1748.71 690.55 L1749.27 690.55 L1749.83 690.55 L1750.39 690.55 L1750.95 690.55 L1751.51 690.55 L1752.06 690.55 L1752.62 690.55 L1753.18 690.55 L1753.74 690.55 L1754.3 690.55 L1754.86 690.55 L1755.42 690.55 L1755.98 690.55 L1756.54 690.55 L1757.1 690.55 L1757.66 690.55 L1758.22 690.55 L1758.78 690.55 L1759.34 690.55 L1759.89 690.55 L1760.45 690.55 L1761.01 690.55 L1761.57 690.55 L1762.13 690.55 L1762.69 690.55 L1763.25 690.55 L1763.81 690.55 L1764.37 690.55 L1764.93 690.55 L1765.49 690.55 L1766.05 690.55 L1766.61 690.55 L1767.16 690.55 L1767.72 690.55 L1768.28 690.55 L1768.84 690.55 L1769.4 690.55 L1769.96 690.55 L1770.52 690.55 L1771.08 690.55 L1771.64 690.55 L1772.2 690.55 L1772.76 690.55 L1773.32 690.55 L1773.88 690.55 L1774.43 690.55 L1774.99 690.55 L1775.55 690.55 L1776.11 690.55 L1776.67 690.55 L1777.23 690.55 L1777.79 690.55 L1778.35 690.55 L1778.91 690.55 L1779.47 690.55 L1780.03 690.55 L1780.59 690.55 L1781.15 690.55 L1781.71 690.55 L1782.26 690.55 L1782.82 690.55 L1783.38 690.55 L1783.94 690.55 L1784.5 690.55 L1785.06 690.55 L1785.62 690.55 L1786.18 690.55 L1786.74 690.55 L1787.3 690.55 L1787.86 690.55 L1788.42 690.55 L1788.98 690.55 L1789.53 690.55 L1790.09 690.55 L1790.65 690.55 L1791.21 690.55 L1791.77 690.55 L1792.33 690.55 L1792.89 690.55 L1793.45 690.55 L1794.01 690.55 L1794.57 690.55 L1795.13 690.55 L1795.69 690.55 L1796.25 690.55 L1796.8 690.55 L1797.36 690.55 L1797.92 690.55 L1798.48 690.55 L1799.04 690.55 L1799.6 690.55 L1800.16 690.55 L1800.72 690.55 L1801.28 690.55 L1801.84 690.55 L1802.4 690.55 L1802.96 690.55 L1803.52 690.55 L1804.08 690.55 L1804.63 690.55 L1805.19 690.55 L1805.75 690.55 L1806.31 690.55 L1806.87 690.55 L1807.43 690.55 L1807.99 690.55 L1808.55 690.55 L1809.11 690.55 L1809.67 690.55 L1810.23 690.55 L1810.79 690.55 L1811.35 690.55 L1811.9 690.55 L1812.46 690.55 L1813.02 690.55 L1813.58 690.55 L1814.14 690.55 L1814.7 690.55 L1815.26 690.55 L1815.82 690.55 L1816.38 690.55 L1816.94 690.55 L1817.5 690.55 L1818.06 690.55 L1818.62 690.55 L1819.18 690.55 L1819.73 690.55 L1820.29 690.55 L1820.85 690.55 L1821.41 690.55 L1821.97 690.55 L1822.53 690.55 L1823.09 690.55 L1823.65 690.55 L1824.21 690.55 L1824.77 690.55 L1825.33 690.55 L1825.89 690.55 L1826.45 690.55 L1827 690.55 L1827.56 690.55 L1828.12 690.55 L1828.68 690.55 L1829.24 690.55 L1829.8 690.55 L1830.36 690.55 L1830.92 690.55 L1831.48 690.55 L1832.04 690.55 L1832.6 690.55 L1833.16 690.55 L1833.72 690.55 L1834.27 690.55 L1834.83 690.55 L1835.39 690.55 L1835.95 690.55 L1836.51 690.55 L1837.07 690.55 L1837.63 690.55 L1838.19 690.55 L1838.19 683.502 L1837.63 683.502 L1837.07 683.502 L1836.51 683.502 L1835.95 683.502 L1835.39 683.502 L1834.83 683.502 L1834.27 683.502 L1833.72 683.502 L1833.16 683.502 L1832.6 683.502 L1832.04 683.502 L1831.48 683.502 L1830.92 683.502 L1830.36 683.502 L1829.8 683.502 L1829.24 683.502 L1828.68 683.502 L1828.12 683.502 L1827.56 683.502 L1827 683.502 L1826.45 683.502 L1825.89 683.502 L1825.33 683.502 L1824.77 683.502 L1824.21 683.502 L1823.65 683.502 L1823.09 683.502 L1822.53 683.502 L1821.97 683.502 L1821.41 683.502 L1820.85 683.502 L1820.29 683.502 L1819.73 683.502 L1819.18 683.502 L1818.62 683.502 L1818.06 683.502 L1817.5 683.502 L1816.94 683.502 L1816.38 683.502 L1815.82 683.502 L1815.26 683.502 L1814.7 683.502 L1814.14 683.502 L1813.58 683.502 L1813.02 683.502 L1812.46 683.502 L1811.9 683.502 L1811.35 683.502 L1810.79 683.502 L1810.23 683.502 L1809.67 683.502 L1809.11 683.502 L1808.55 683.502 L1807.99 683.502 L1807.43 683.502 L1806.87 683.502 L1806.31 683.502 L1805.75 683.502 L1805.19 683.502 L1804.63 683.502 L1804.08 683.502 L1803.52 683.502 L1802.96 683.502 L1802.4 683.502 L1801.84 683.502 L1801.28 683.502 L1800.72 683.502 L1800.16 683.502 L1799.6 683.502 L1799.04 683.502 L1798.48 683.502 L1797.92 683.502 L1797.36 683.502 L1796.8 683.502 L1796.25 683.502 L1795.69 683.502 L1795.13 683.502 L1794.57 683.502 L1794.01 683.502 L1793.45 683.502 L1792.89 683.502 L1792.33 683.502 L1791.77 683.502 L1791.21 683.502 L1790.65 683.502 L1790.09 683.502 L1789.53 683.502 L1788.98 683.502 L1788.42 683.502 L1787.86 683.502 L1787.3 683.502 L1786.74 683.502 L1786.18 683.502 L1785.62 683.502 L1785.06 683.502 L1784.5 683.502 L1783.94 683.502 L1783.38 683.502 L1782.82 683.502 L1782.26 683.502 L1781.71 683.502 L1781.15 683.502 L1780.59 683.502 L1780.03 683.502 L1779.47 683.502 L1778.91 683.502 L1778.35 683.502 L1777.79 683.502 L1777.23 683.502 L1776.67 683.502 L1776.11 683.502 L1775.55 683.502 L1774.99 683.502 L1774.43 683.502 L1773.88 683.502 L1773.32 683.502 L1772.76 683.502 L1772.2 683.502 L1771.64 683.502 L1771.08 683.502 L1770.52 683.502 L1769.96 683.502 L1769.4 683.502 L1768.84 683.502 L1768.28 683.502 L1767.72 683.502 L1767.16 683.502 L1766.61 683.502 L1766.05 683.502 L1765.49 683.502 L1764.93 683.502 L1764.37 683.502 L1763.81 683.502 L1763.25 683.502 L1762.69 683.502 L1762.13 683.502 L1761.57 683.502 L1761.01 683.502 L1760.45 683.502 L1759.89 683.502 L1759.34 683.502 L1758.78 683.502 L1758.22 683.502 L1757.66 683.502 L1757.1 683.502 L1756.54 683.502 L1755.98 683.502 L1755.42 683.502 L1754.86 683.502 L1754.3 683.502 L1753.74 683.502 L1753.18 683.502 L1752.62 683.502 L1752.06 683.502 L1751.51 683.502 L1750.95 683.502 L1750.39 683.502 L1749.83 683.502 L1749.27 683.502 L1748.71 683.502 L1748.15 683.502 L1747.59 683.502 L1747.03 683.502 L1746.47 683.502 L1745.91 683.502 L1745.35 683.502 L1744.79 683.502 L1744.24 683.502 L1743.68 683.502 L1743.12 683.502 L1742.56 683.502 L1742 683.502 L1741.44 683.502 L1740.88 683.502 L1740.32 683.502 L1739.76 683.502 L1739.2 683.502 L1738.64 683.502 L1738.08 683.502 L1737.52 683.502 L1736.97 683.502 L1736.41 683.502 L1735.85 683.502 L1735.29 683.502 L1734.73 683.502 L1734.17 683.502 L1733.61 683.502 L1733.05 683.502 L1732.49 683.502 L1731.93 683.502 L1731.37 683.502 L1730.81 683.502 L1730.25 683.502 L1729.69 683.502 L1729.14 683.502 L1728.58 683.502 L1728.02 683.502 L1727.46 683.502 L1726.9 683.502 L1726.34 683.502 L1725.78 683.502 L1725.22 683.502 L1724.66 683.502 L1724.1 683.502 L1723.54 683.502 L1722.98 683.502 L1722.42 683.502 L1721.87 683.502 L1721.31 683.502 L1720.75 683.502 L1720.19 683.502 L1719.63 683.502 L1719.07 683.502 L1718.51 683.502 L1717.95 683.502 L1717.39 683.502 L1716.83 683.502 L1716.27 683.502 L1715.71 683.502 L1715.15 683.502 L1714.6 683.502 L1714.04 683.502 L1713.48 683.502 L1712.92 683.502 L1712.36 683.502 L1711.8 683.502 L1711.24 683.502 L1710.68 683.502 L1710.12 683.502 L1709.56 683.502 L1709 683.502 L1708.44 683.502 L1707.88 683.502 L1707.32 683.502 L1706.77 683.502 L1706.21 683.502 L1705.65 683.502 L1705.09 683.502 L1704.53 683.502 L1703.97 683.502 L1703.41 683.502 L1702.85 683.502 L1702.29 683.502 L1701.73 683.502 L1701.17 683.502 L1700.61 683.502 L1700.05 683.502 L1699.5 683.502 L1698.94 683.502 L1698.38 683.502 L1697.82 683.502 L1697.26 683.502 L1696.7 683.502 L1696.14 683.502 L1695.58 683.502 L1695.02 683.502 L1694.46 683.502 L1693.9 683.502 L1693.34 683.502 L1692.78 683.502 L1692.23 683.502 L1691.67 683.502 L1691.11 683.502 L1690.55 683.502 L1689.99 683.502 L1689.43 683.502 L1688.87 683.502 L1688.31 683.502 L1687.75 683.502 L1687.19 683.502 L1686.63 683.502 L1686.07 683.502 L1685.51 683.502 L1684.95 683.502 L1684.4 683.502 L1683.84 683.502 L1683.28 683.502 L1682.72 683.502 L1682.16 683.502 L1681.6 683.502 L1681.04 683.502 L1680.48 683.502 L1679.92 683.502 L1679.36 683.502 L1678.8 683.502 L1678.24 683.502 L1677.68 683.502 L1677.13 683.502 L1676.57 683.502 L1676.01 683.502 L1675.45 683.502 L1674.89 683.502 L1674.33 683.502 L1673.77 683.502 L1673.21 683.502 L1672.65 683.502 L1672.09 683.502 L1671.53 683.502 L1670.97 683.502 L1670.41 683.502 L1669.85 683.502 L1669.3 683.502 L1668.74 683.502 L1668.18 683.502 L1667.62 683.502 L1667.06 683.502 L1666.5 683.502 L1665.94 683.502 L1665.38 683.502 L1664.82 683.502 L1664.26 683.502 L1663.7 683.502 L1663.14 683.502 L1662.58 683.502 L1662.03 683.502 L1661.47 683.502 L1660.91 683.502 L1660.35 683.502 L1659.79 683.502 L1659.23 683.502 L1658.67 683.502 L1658.11 683.502 L1657.55 683.502 L1656.99 683.502 L1656.43 683.502 L1655.87 683.502 L1655.31 683.502 L1654.76 683.502 L1654.2 683.502 L1653.64 683.502 L1653.08 683.502 L1652.52 683.502 L1651.96 683.502 L1651.4 683.502 L1650.84 683.502 L1650.28 683.502 L1649.72 683.502 L1649.16 683.502 L1648.6 683.502 L1648.04 683.502 L1647.48 683.502 L1646.93 683.502 L1646.37 683.502 L1645.81 683.502 L1645.25 683.502 L1644.69 683.502 L1644.13 683.502 L1643.57 683.502 L1643.01 683.502 L1642.45 683.502 L1641.89 683.502 L1641.33 683.502 L1640.77 683.502 L1640.21 683.502 L1639.66 683.502 L1639.1 683.502 L1638.54 683.502 L1637.98 683.502 L1637.42 683.502 L1636.86 683.502 L1636.3 683.502 L1635.74 683.502 L1635.18 683.502 L1634.62 683.502 L1634.06 683.502 L1633.5 683.502 L1632.94 683.502 L1632.39 683.502 L1631.83 683.502 L1631.27 683.502 L1630.71 683.502 L1630.15 683.502 L1629.59 683.502 L1629.03 683.502 L1628.47 683.502 L1627.91 683.502 L1627.35 683.502 L1626.79 683.502 L1626.23 683.502 L1625.67 683.502 L1625.11 683.502 L1624.56 683.502 L1624 683.502 L1623.44 683.502 L1622.88 683.502 L1622.32 683.502 L1621.76 683.502 L1621.2 683.502 L1620.64 683.502 L1620.08 683.502 L1619.52 683.502 L1618.96 683.502 L1618.4 683.502 L1617.84 683.502 L1617.29 683.502 L1616.73 683.502 L1616.17 683.502 L1615.61 683.502 L1615.05 683.502 L1614.49 683.502 L1613.93 683.502 L1613.37 683.502 L1612.81 683.502 L1612.25 683.502 L1611.69 683.502 L1611.13 683.502 L1610.57 683.502 L1610.02 683.502 L1609.46 683.502 L1608.9 683.502 L1608.34 683.502 L1607.78 683.502 L1607.22 683.502 L1606.66 683.502 L1606.1 683.502 L1605.54 683.502 L1604.98 683.502 L1604.42 683.502 L1603.86 683.502 L1603.3 683.502 L1602.74 683.502 L1602.19 683.502 L1601.63 683.502 L1601.07 683.502 L1600.51 683.502 L1599.95 683.502 L1599.39 683.502 L1598.83 683.502 L1598.27 683.502 L1597.71 683.502 L1597.15 683.502 L1596.59 683.502 L1596.03 683.502 L1595.47 683.502 L1594.92 683.502 L1594.36 683.502 L1593.8 683.502 L1593.24 683.502 L1592.68 683.502 L1592.12 683.502 L1591.56 683.502 L1591 683.502 L1590.44 683.502 L1589.88 683.502 L1589.32 683.502 L1588.76 683.502 L1588.2 683.502 L1587.65 683.502 L1587.09 683.502 L1586.53 683.502 L1585.97 683.502 L1585.41 683.502 L1584.85 683.502 L1584.29 683.502 L1583.73 683.502 L1583.17 683.502 L1582.61 683.502 L1582.05 683.502 L1581.49 683.502 L1580.93 683.502 L1580.37 683.502 L1579.82 683.502 L1579.26 683.502 L1578.7 683.502 L1578.14 683.502 L1577.58 683.502 L1577.02 683.502 L1576.46 683.502 L1575.9 683.502 L1575.34 683.502 L1574.78 683.502 L1574.22 683.502 L1573.66 683.502 L1573.1 683.502 L1572.55 683.502 L1571.99 683.502 L1571.43 683.502 L1570.87 683.502 L1570.31 683.502 L1569.75 683.502 L1569.19 683.502 L1568.63 683.502 L1568.07 683.502 L1567.51 683.502 L1566.95 683.502 L1566.39 683.502 L1565.83 683.502 L1565.28 683.502 L1564.72 683.502 L1564.16 683.502 L1563.6 683.502 L1563.04 683.502 L1562.48 683.502 L1561.92 683.502 L1561.36 683.502 L1560.8 683.502 L1560.24 683.502 L1559.68 683.502 L1559.12 683.502 L1558.56 683.502 L1558 683.502 L1557.45 683.502 L1556.89 683.502 L1556.33 683.502 L1555.77 683.502 L1555.21 683.502 L1554.65 683.502 L1554.09 683.502 L1553.53 683.502 L1552.97 683.502 L1552.41 683.502 L1551.85 683.502 L1551.29 683.502 L1550.73 683.502 L1550.18 683.502 L1549.62 683.502 L1549.06 683.502 L1548.5 683.502 L1547.94 683.502 L1547.38 683.502 L1546.82 683.502 L1546.26 683.502 L1545.7 683.502 L1545.14 683.502 L1544.58 683.502 L1544.02 683.502 L1543.46 683.502 L1542.9 683.502 L1542.35 683.502 L1541.79 683.502 L1541.23 683.502 L1540.67 683.502 L1540.11 683.502 L1539.55 683.502 L1538.99 683.502 L1538.43 683.502 L1537.87 683.502 L1537.31 683.502 L1536.75 683.502 L1536.19 683.502 L1535.63 683.502 L1535.08 683.502 L1534.52 683.502 L1533.96 683.502 L1533.4 683.502 L1532.84 683.502 L1532.28 683.502 L1531.72 683.502 L1531.16 683.502 L1530.6 683.502 L1530.04 683.502 L1529.48 683.502 L1528.92 683.502 L1528.36 683.502 L1527.81 683.502 L1527.25 683.502 L1526.69 683.502 L1526.13 683.502 L1525.57 683.502 L1525.01 683.502 L1524.45 683.502 L1523.89 683.502 L1523.33 683.502 L1522.77 683.502 L1522.21 683.502 L1521.65 683.502 L1521.09 683.502 L1520.53 683.502 L1519.98 683.502 L1519.42 683.502 L1518.86 683.502 L1518.3 683.502 L1517.74 683.502 L1517.18 683.502 L1516.62 683.502 L1516.06 683.502 L1515.5 683.502 L1514.94 683.502 L1514.38 683.502 L1513.82 683.502 L1513.26 683.502 L1512.71 683.502 L1512.15 683.502 L1511.59 683.502 L1511.03 683.502 L1510.47 683.502 L1509.91 683.502 L1509.35 683.502 L1508.79 683.502 L1508.23 683.502 L1507.67 683.502 L1507.11 683.502 L1506.55 683.502 L1505.99 683.502 L1505.44 683.502 L1504.88 683.502 L1504.32 683.502 L1503.76 683.502 L1503.2 683.502 L1502.64 683.502 L1502.08 683.502 L1501.52 683.502 L1500.96 683.502 L1500.4 683.502 L1499.84 683.502 L1499.28 683.502 L1498.72 683.502 L1498.16 683.502 L1497.61 683.502 L1497.05 683.502 L1496.49 683.502 L1495.93 683.502 L1495.37 683.502 L1494.81 683.502 L1494.25 683.502 L1493.69 683.502 L1493.13 683.502 L1492.57 683.502 L1492.01 683.502 L1491.45 683.502 L1490.89 683.502 L1490.34 683.502 L1489.78 683.502 L1489.22 683.502 L1488.66 683.502 L1488.1 683.502 L1487.54 683.502 L1486.98 683.502 L1486.42 683.502 L1485.86 683.502 L1485.3 683.502 L1484.74 683.502 L1484.18 683.502 L1483.62 683.502 L1483.07 683.502 L1482.51 683.502 L1481.95 683.502 L1481.39 683.502 L1480.83 683.502 L1480.27 683.502 L1479.71 683.502 L1479.15 683.502 L1478.59 683.502 L1478.03 683.502 L1477.47 683.502 L1476.91 683.502 L1476.35 683.502 L1475.79 683.502 L1475.24 683.502 L1474.68 683.502 L1474.12 683.502 L1473.56 683.502 L1473 683.502 L1472.44 683.502 L1471.88 683.502 L1471.32 683.502 L1470.76 683.502 L1470.2 683.502 L1469.64 683.502 L1469.08 683.502 L1468.52 683.502 L1467.97 683.502 L1467.41 683.502 L1466.85 683.502 L1466.29 683.502 L1465.73 683.502 L1465.17 683.502 L1464.61 683.502 L1464.05 683.502 L1463.49 683.502 L1462.93 683.502 L1462.37 683.502 L1461.81 683.502 L1461.25 683.502 L1460.7 683.502 L1460.14 683.502 L1459.58 683.502 L1459.02 683.502 L1458.46 683.502 L1457.9 683.502 L1457.34 683.502 L1456.78 683.502 L1456.22 683.502 L1455.66 683.502 L1455.1 683.502 L1454.54 683.502 L1453.98 683.502 L1453.42 683.502 L1452.87 683.502 L1452.31 683.502 L1451.75 683.502 L1451.19 683.502 L1450.63 683.502 L1450.07 683.502 L1449.51 683.502 L1448.95 683.502 L1448.39 683.502 L1447.83 683.502 L1447.27 683.502 L1446.71 683.502 L1446.15 683.502 L1445.6 683.502 L1445.04 683.502 L1444.48 683.502 L1443.92 683.502 L1443.36 683.502 L1442.8 683.502 L1442.24 683.502 L1441.68 683.502 L1441.12 683.502 L1440.56 683.502 L1440 683.502 L1439.44 683.502 L1438.88 683.502 L1438.33 683.502 L1437.77 683.502 L1437.21 683.502 L1436.65 683.502 L1436.09 683.502 L1435.53 683.502 L1434.97 683.502 L1434.41 683.502 L1433.85 683.502 L1433.29 683.502 L1432.73 683.502 L1432.17 683.502 L1431.61 683.502 L1431.05 683.502 L1430.5 683.502 L1429.94 683.502 L1429.38 683.502 L1428.82 683.502 L1428.26 683.502 L1427.7 683.502 L1427.14 683.502 L1426.58 683.502 L1426.02 683.502 L1425.46 683.502 L1424.9 683.502 L1424.34 683.502 L1423.78 683.502 L1423.23 683.502 L1422.67 683.502 L1422.11 683.502 L1421.55 683.502 L1420.99 683.502 L1420.43 683.502 L1419.87 683.502 L1419.31 683.502 L1418.75 683.502 L1418.19 683.502 L1417.63 683.502 L1417.07 683.502 L1416.51 683.502 L1415.95 683.502 L1415.4 683.502 L1414.84 683.502 L1414.28 683.502 L1413.72 683.502 L1413.16 683.502 L1412.6 683.502 L1412.04 683.502 L1411.48 683.502 L1410.92 683.502 L1410.36 683.502 L1409.8 683.502 L1409.24 683.502 L1408.68 683.502 L1408.13 683.502 L1407.57 683.502 L1407.01 683.502 L1406.45 683.502 L1405.89 683.502 L1405.33 683.502 L1404.77 683.502 L1404.21 683.502 L1403.65 683.502 L1403.09 683.502 L1402.53 683.502 L1401.97 683.502 L1401.41 683.502 L1400.86 683.502 L1400.3 683.502 L1399.74 683.502 L1399.18 683.502 L1398.62 683.502 L1398.06 683.502 L1397.5 683.502 L1396.94 683.502 L1396.38 683.502 L1395.82 683.502 L1395.26 683.502 L1394.7 683.502 L1394.14 683.502 L1393.58 683.502 L1393.03 683.502 L1392.47 683.502 L1391.91 683.502 L1391.35 683.502 L1390.79 683.502 L1390.23 683.502 L1389.67 683.502 L1389.11 683.502 L1388.55 683.502 L1387.99 683.502 L1387.43 683.502 L1386.87 683.502 L1386.31 683.502 L1385.76 683.502 L1385.2 683.502 L1384.64 683.502 L1384.08 683.502 L1383.52 683.502 L1382.96 683.502 L1382.4 683.502 L1381.84 683.502 L1381.28 683.502 L1380.72 683.502 L1380.16 683.502 L1379.6 683.502 L1379.04 683.502 L1378.49 683.502 L1377.93 683.502 L1377.37 683.502 L1376.81 683.502 L1376.25 683.502 L1375.69 683.502 L1375.13 683.502 L1374.57 683.502 L1374.01 683.502 L1373.45 683.502 L1372.89 683.502 L1372.33 683.502 L1371.77 683.502 L1371.21 683.502 L1370.66 683.502 L1370.1 683.502 L1369.54 683.502 L1368.98 683.502 L1368.42 683.502 L1367.86 683.502 L1367.3 683.502 L1366.74 683.502 L1366.18 683.502 L1365.62 683.502 L1365.06 683.502 L1364.5 683.502 L1363.94 683.502 L1363.39 683.502 L1362.83 683.502 L1362.27 683.502 L1361.71 683.502 L1361.15 683.502 L1360.59 683.502 L1360.03 683.502 L1359.47 683.502 L1358.91 683.502 L1358.35 683.502 L1357.79 683.502 L1357.23 683.502 L1356.67 683.502 L1356.12 683.502 L1355.56 683.502 L1355 683.502 L1354.44 683.502 L1353.88 683.502 L1353.32 683.502 L1352.76 683.502 L1352.2 683.502 L1351.64 683.502 L1351.08 683.502 L1350.52 683.502 L1349.96 683.502 L1349.4 683.502 L1348.84 683.502 L1348.29 683.502 L1347.73 683.502 L1347.17 683.502 L1346.61 683.502 L1346.05 683.502 L1345.49 683.502 L1344.93 683.502 L1344.37 683.502 L1343.81 683.502 L1343.25 683.502 L1342.69 683.502 L1342.13 683.502 L1341.57 683.502 L1341.02 683.502 L1340.46 683.502 L1339.9 683.502 L1339.34 683.502 L1338.78 683.502 L1338.22 683.502 L1337.66 683.502 L1337.1 683.502 L1336.54 683.502 L1335.98 683.502 L1335.42 683.502 L1334.86 683.502 L1334.3 683.502 L1333.75 683.502 L1333.19 683.502 L1332.63 683.502 L1332.07 683.502 L1331.51 683.502 L1330.95 683.502 L1330.39 683.502 L1329.83 683.502 L1329.27 683.502 L1328.71 683.502 L1328.15 683.502 L1327.59 683.502 L1327.03 683.502 L1326.47 683.502 L1325.92 683.502 L1325.36 683.502 L1324.8 683.502 L1324.24 683.502 L1323.68 683.502 L1323.12 683.502 L1322.56 683.502 L1322 683.502 L1321.44 683.502 L1320.88 683.502 L1320.32 683.502 L1319.76 683.502 L1319.2 683.502 L1318.65 683.502 L1318.09 683.502 L1317.53 683.502 L1316.97 683.502 L1316.41 683.502 L1315.85 683.502 L1315.29 683.502 L1314.73 683.502 L1314.17 683.502 L1313.61 683.502 L1313.05 683.502 L1312.49 683.502 L1311.93 683.502 L1311.38 683.502 L1310.82 683.502 L1310.26 683.502 L1309.7 683.502 L1309.14 683.502 L1308.58 683.502 L1308.02 683.502 L1307.46 683.502 L1306.9 683.502 L1306.34 683.502 L1305.78 683.502 L1305.22 683.502 L1304.66 683.502 L1304.1 683.502 L1303.55 683.502 L1302.99 683.502 L1302.43 683.502 L1301.87 683.502 L1301.31 683.502 L1300.75 683.502 L1300.19 683.502 L1299.63 683.502 L1299.07 683.502 L1298.51 683.502 L1297.95 683.502 L1297.39 683.502 L1296.83 683.502 L1296.28 683.502 L1295.72 683.502 L1295.16 683.502 L1294.6 683.502 L1294.04 683.502 L1293.48 683.502 L1292.92 683.502 L1292.36 683.502 L1291.8 683.502 L1291.24 683.502 L1290.68 683.502 L1290.12 683.502 L1289.56 683.502 L1289 683.502 L1288.45 683.502 L1287.89 683.502 L1287.33 683.502 L1286.77 683.502 L1286.21 683.502 L1285.65 683.502 L1285.09 683.502 L1284.53 683.502 L1283.97 683.502 L1283.41 683.502 L1282.85 683.502 L1282.29 683.502 L1281.73 683.502 L1281.18 683.502 L1280.62 683.502 L1280.06 683.502 L1279.5 683.502 L1278.94 683.502 L1278.38 683.502 L1277.82 683.502 L1277.26 683.502 L1276.7 683.502 L1276.14 683.502 L1275.58 683.502 L1275.02 683.502 L1274.46 683.502 L1273.91 683.502 L1273.35 683.502 L1272.79 683.502 L1272.23 683.502 L1271.67 683.502 L1271.11 683.502 L1270.55 683.502 L1269.99 683.502 L1269.43 683.502 L1268.87 683.502 L1268.31 683.502 L1267.75 683.502 L1267.19 683.502 L1266.63 683.502 L1266.08 683.502 L1265.52 683.502 L1264.96 683.502 L1264.4 683.502 L1263.84 683.502 L1263.28 683.502 L1262.72 683.502 L1262.16 683.502 L1261.6 683.502 L1261.04 683.502 L1260.48 683.502 L1259.92 683.502 L1259.36 683.502 L1258.81 683.502 L1258.25 683.502 L1257.69 683.502 L1257.13 683.502 L1256.57 683.502 L1256.01 683.502 L1255.45 683.502 L1254.89 683.502 L1254.33 683.502 L1253.77 683.502 L1253.21 683.502 L1252.65 683.502 L1252.09 683.502 L1251.54 683.502 L1250.98 683.502 L1250.42 683.502 L1249.86 683.502 L1249.3 683.502 L1248.74 683.502 L1248.18 683.502 L1247.62 683.502 L1247.06 683.502 L1246.5 683.502 L1245.94 683.502 L1245.38 683.502 L1244.82 683.502 L1244.26 683.502 L1243.71 683.502 L1243.15 683.502 L1242.59 683.502 L1242.03 683.502 L1241.47 683.502 L1240.91 683.502 L1240.35 683.502 L1239.79 683.502 L1239.23 683.502 L1238.67 683.502 L1238.11 683.502 L1237.55 683.502 L1236.99 683.502 L1236.44 683.502 L1235.88 683.502 L1235.32 683.502 L1234.76 683.502 L1234.2 683.502 L1233.64 683.502 L1233.08 683.502 L1232.52 683.502 L1231.96 683.502 L1231.4 683.502 L1230.84 683.502 L1230.28 683.502 L1229.72 683.502 L1229.17 683.502 L1228.61 683.502 L1228.05 683.502 L1227.49 683.502 L1226.93 683.502 L1226.37 683.502 L1225.81 683.502 L1225.25 683.502 L1224.69 683.502 L1224.13 683.502 L1223.57 683.502 L1223.01 683.502 L1222.45 683.502 L1221.89 683.502 L1221.34 683.502 L1220.78 683.502 L1220.22 683.502 L1219.66 683.502 L1219.1 683.502 L1218.54 683.502 L1217.98 683.502 L1217.42 683.502 L1216.86 683.502 L1216.3 683.502 L1215.74 683.502 L1215.18 683.502 L1214.62 683.502 L1214.07 683.502 L1213.51 683.502 L1212.95 683.502 L1212.39 683.502 L1211.83 683.502 L1211.27 683.502 L1210.71 683.502 L1210.15 683.502 L1209.59 683.502 L1209.03 683.502 L1208.47 683.502 L1207.91 683.502 L1207.35 683.502 L1206.8 683.502 L1206.24 683.502 L1205.68 683.502 L1205.12 683.502 L1204.56 683.502 L1204 683.502 L1203.44 683.502 L1202.88 683.502 L1202.32 683.502 L1201.76 683.502 L1201.2 683.502 L1200.64 683.502 L1200.08 683.502 L1199.52 683.502 L1198.97 683.502 L1198.41 683.502 L1197.85 683.502 L1197.29 683.502 L1196.73 683.502 L1196.17 683.502 L1195.61 683.502 L1195.05 683.502 L1194.49 683.502 L1193.93 683.502 L1193.37 683.502 L1192.81 683.502 L1192.25 683.502 L1191.7 683.502 L1191.14 683.502 L1190.58 683.502 L1190.02 683.502 L1189.46 683.502 L1188.9 683.502 L1188.34 683.502 L1187.78 683.502 L1187.22 683.502 L1186.66 683.502 L1186.1 683.502 L1185.54 683.502 L1184.98 683.502 L1184.43 683.502 L1183.87 683.502 L1183.31 683.502 L1182.75 683.502 L1182.19 683.502 L1181.63 683.502 L1181.07 683.502 L1180.51 683.502 L1179.95 683.502 L1179.39 683.502 L1178.83 683.502 L1178.27 683.502 L1177.71 683.502 L1177.15 683.502 L1176.6 683.502 L1176.04 683.502 L1175.48 683.502 L1174.92 683.502 L1174.36 683.502 L1173.8 683.502 L1173.24 683.502 L1172.68 683.502 L1172.12 683.502 L1171.56 683.502 L1171 683.502 L1170.44 683.502 L1169.88 683.502 L1169.33 683.502 L1168.77 683.502 L1168.21 683.502 L1167.65 683.502 L1167.09 683.502 L1166.53 683.502 L1165.97 683.502 L1165.41 683.502 L1164.85 683.502 L1164.29 683.502 L1163.73 683.502 L1163.17 683.502 L1162.61 683.502 L1162.05 683.502 L1161.5 683.502 L1160.94 683.502 L1160.38 683.502 L1159.82 683.502 L1159.26 683.502 L1158.7 683.502 L1158.14 683.502 L1157.58 683.502 L1157.02 683.502 L1156.46 683.502 L1155.9 683.502 L1155.34 683.502 L1154.78 683.502 L1154.23 683.502 L1153.67 683.502 L1153.11 683.502 L1152.55 683.502 L1151.99 683.502 L1151.43 683.502 L1150.87 683.502 L1150.31 683.502 L1149.75 683.502 L1149.19 683.502 L1148.63 683.502 L1148.07 683.502 L1147.51 683.502 L1146.96 683.502 L1146.4 683.502 L1145.84 683.502 L1145.28 683.502 L1144.72 683.502 L1144.16 683.502 L1143.6 683.502 L1143.04 683.502 L1142.48 683.502 L1141.92 683.502 L1141.36 683.502 L1140.8 683.502 L1140.24 683.502 L1139.68 683.502 L1139.13 683.502 L1138.57 683.502 L1138.01 683.502 L1137.45 683.502 L1136.89 683.502 L1136.33 683.502 L1135.77 683.502 L1135.21 683.502 L1134.65 683.502 L1134.09 683.502 L1133.53 683.502 L1132.97 683.502 L1132.41 683.502 L1131.86 683.502 L1131.3 683.502 L1130.74 683.502 L1130.18 683.502 L1129.62 683.502 L1129.06 683.502 L1128.5 683.502 L1127.94 683.502 L1127.38 683.502 L1126.82 683.502 L1126.26 683.502 L1125.7 683.502 L1125.14 683.502 L1124.59 683.502 L1124.03 683.502 L1123.47 683.502 L1122.91 683.502 L1122.35 683.502 L1121.79 683.502 L1121.23 683.502 L1120.67 683.502 L1120.11 683.502 L1119.55 683.502 L1118.99 683.502 L1118.43 683.502 L1117.87 683.502 L1117.31 683.502 L1116.76 683.502 L1116.2 683.502 L1115.64 683.502 L1115.08 683.502 L1114.52 683.502 L1113.96 683.502 L1113.4 683.502 L1112.84 683.502 L1112.28 683.502 L1111.72 683.502 L1111.16 683.502 L1110.6 683.502 L1110.04 683.502 L1109.49 683.502 L1108.93 683.502 L1108.37 683.502 L1107.81 683.502 L1107.25 683.502 L1106.69 683.502 L1106.13 683.502 L1105.57 683.502 L1105.01 683.502 L1104.45 683.502 L1103.89 683.502 L1103.33 683.502 L1102.77 683.502 L1102.22 683.502 L1101.66 683.502 L1101.1 683.502 L1100.54 683.502 L1099.98 683.502 L1099.42 683.502 L1098.86 683.502 L1098.3 683.502 L1097.74 683.502 L1097.18 683.502 L1096.62 683.502 L1096.06 683.502 L1095.5 683.502 L1094.94 683.502 L1094.39 683.502 L1093.83 683.502 L1093.27 683.502 L1092.71 683.502 L1092.15 683.502 L1091.59 683.502 L1091.03 683.502 L1090.47 683.502 L1089.91 683.502 L1089.35 683.502 L1088.79 683.502 L1088.23 683.502 L1087.67 683.502 L1087.12 683.502 L1086.56 683.502 L1086 683.502 L1085.44 683.502 L1084.88 683.502 L1084.32 683.502 L1083.76 683.502 L1083.2 683.502 L1082.64 683.502 L1082.08 683.502 L1081.52 683.502 L1080.96 683.502 L1080.4 683.502 L1079.85 683.502 L1079.29 683.502 L1078.73 683.502 L1078.17 683.502 L1077.61 683.502 L1077.05 683.502 L1076.49 683.502 L1075.93 683.502 L1075.37 683.502 L1074.81 683.502 L1074.25 683.502 L1073.69 683.502 L1073.13 683.502 L1072.57 683.502 L1072.02 683.502 L1071.46 683.502 L1070.9 683.502 L1070.34 683.502 L1069.78 683.502 L1069.22 683.502 L1068.66 683.502 L1068.1 683.502 L1067.54 683.502 L1066.98 683.502 L1066.42 683.502 L1065.86 683.502 L1065.3 683.502 L1064.75 683.502 L1064.19 683.502 L1063.63 683.502 L1063.07 683.502 L1062.51 683.502 L1061.95 683.502 L1061.39 683.502 L1060.83 683.502 L1060.27 683.502 L1059.71 683.502 L1059.15 683.502 L1058.59 683.502 L1058.03 683.502 L1057.48 683.502 L1056.92 683.502 L1056.36 683.502 L1055.8 683.502 L1055.24 683.502 L1054.68 683.502 L1054.12 683.502 L1053.56 683.502 L1053 683.502 L1052.44 683.502 L1051.88 683.502 L1051.32 683.502 L1050.76 683.502 L1050.2 683.502 L1049.65 683.502 L1049.09 683.502 L1048.53 683.502 L1047.97 683.502 L1047.41 683.502 L1046.85 683.502 L1046.29 683.502 L1045.73 683.502 L1045.17 683.502 L1044.61 683.502 L1044.05 683.502 L1043.49 683.502 L1042.93 683.502 L1042.38 683.502 L1041.82 683.502 L1041.26 683.502 L1040.7 683.502 L1040.14 683.502 L1039.58 683.502 L1039.02 683.502 L1038.46 683.502 L1037.9 683.502 L1037.34 683.502 L1036.78 683.502 L1036.22 683.502 L1035.66 683.502 L1035.1 683.502 L1034.55 683.502 L1033.99 683.502 L1033.43 683.502 L1032.87 683.502 L1032.31 683.502 L1031.75 683.502 L1031.19 683.502 L1030.63 683.502 L1030.07 683.502 L1029.51 683.502 L1028.95 683.502 L1028.39 683.502 L1027.83 683.502 L1027.28 683.502 L1026.72 683.502 L1026.16 683.502 L1025.6 683.502 L1025.04 683.502 L1024.48 683.502 L1023.92 683.502 L1023.36 683.502 L1022.8 683.502 L1022.24 683.502 L1021.68 683.502 L1021.12 683.502 L1020.56 683.502 L1020.01 683.502 L1019.45 683.502 L1018.89 683.502 L1018.33 683.502 L1017.77 683.502 L1017.21 683.502 L1016.65 683.502 L1016.09 683.502 L1015.53 683.502 L1014.97 683.502 L1014.41 683.502 L1013.85 683.502 L1013.29 683.502 L1012.73 683.502 L1012.18 683.502 L1011.62 683.502 L1011.06 683.502 L1010.5 683.502 L1009.94 683.502 L1009.38 683.502 L1008.82 683.502 L1008.26 683.502 L1007.7 683.502 L1007.14 683.502 L1006.58 683.502 L1006.02 683.502 L1005.46 683.502 L1004.91 683.502 L1004.35 683.502 L1003.79 683.502 L1003.23 683.502 L1002.67 683.502 L1002.11 683.502 L1001.55 683.502 L1000.99 683.502 L1000.43 683.502 L999.872 683.502 L999.313 683.502 L998.754 683.502 L998.194 683.502 L997.635 683.502 L997.076 683.502 L996.517 683.502 L995.957 683.502 L995.398 683.502 L994.839 683.502 L994.28 683.502 L993.72 683.502 L993.161 683.502 L992.602 683.502 L992.043 683.502 L991.483 683.502 L990.924 683.502 L990.365 683.502 L989.806 683.502 L989.246 683.502 L988.687 683.502 L988.128 683.502 L987.569 683.502 L987.009 683.502 L986.45 683.502 L985.891 683.502 L985.332 683.502 L984.772 683.502 L984.213 683.502 L983.654 683.502 L983.095 683.502 L982.535 683.502 L981.976 683.502 L981.417 683.502 L980.858 683.502 L980.298 683.502 L979.739 683.502 L979.18 683.502 L978.621 683.502 L978.061 683.502 L977.502 683.502 L976.943 683.502 L976.384 683.502 L975.824 683.502 L975.265 683.502 L974.706 683.502 L974.147 683.502 L973.587 683.502 L973.028 683.502 L972.469 683.502 L971.91 683.502 L971.35 683.502 L970.791 683.502 L970.232 683.502 L969.673 683.502 L969.113 683.502 L968.554 683.502 L967.995 683.502 L967.436 683.502 L966.876 683.502 L966.317 683.502 L965.758 683.502 L965.199 683.502 L964.639 683.502 L964.08 683.502 L963.521 683.502 L962.962 683.502 L962.402 683.502 L961.843 683.502 L961.284 683.502 L960.725 683.502 L960.165 683.502 L959.606 683.502 L959.047 683.502 L958.488 683.502 L957.928 683.502 L957.369 683.502 L956.81 683.502 L956.251 683.502 L955.691 683.502 L955.132 683.502 L954.573 683.502 L954.014 683.502 L953.454 683.502 L952.895 683.502 L952.336 683.502 L951.777 683.502 L951.217 683.502 L950.658 683.502 L950.099 683.502 L949.54 683.502 L948.98 683.502 L948.421 683.502 L947.862 683.502 L947.303 683.502 L946.743 683.502 L946.184 683.502 L945.625 683.502 L945.066 683.502 L944.506 683.502 L943.947 683.502 L943.388 683.502 L942.829 683.502 L942.269 683.502 L941.71 683.502 L941.151 683.502 L940.592 683.502 L940.032 683.502 L939.473 683.502 L938.914 683.502 L938.355 683.502 L937.795 683.502 L937.236 683.502 L936.677 683.502 L936.118 683.502 L935.558 683.502 L934.999 683.502 L934.44 683.502 L933.881 683.502 L933.321 683.502 L932.762 683.502 L932.203 683.502 L931.644 683.502 L931.084 683.502 L930.525 683.502 L929.966 683.502 L929.406 683.502 L928.847 683.502 L928.288 683.502 L927.729 683.502 L927.169 683.502 L926.61 683.502 L926.051 683.502 L925.492 683.502 L924.932 683.502 L924.373 683.502 L923.814 683.502 L923.255 683.502 L922.695 683.502 L922.136 683.502 L921.577 683.502 L921.018 683.502 L920.458 683.502 L919.899 683.502 L919.34 683.502 L918.781 683.502 L918.221 683.502 L917.662 683.502 L917.103 683.502 L916.544 683.502 L915.984 683.502 L915.425 683.502 L914.866 683.502 L914.307 683.502 L913.747 683.502 L913.188 683.502 L912.629 683.502 L912.07 683.502 L911.51 683.502 L910.951 683.502 L910.392 683.502 L909.833 683.502 L909.273 683.502 L908.714 683.502 L908.155 683.502 L907.596 683.502 L907.036 683.502 L906.477 683.502 L905.918 683.502 L905.359 683.502 L904.799 683.502 L904.24 683.502 L903.681 683.502 L903.122 683.502 L902.562 683.502 L902.003 683.502 L901.444 683.502 L900.885 683.502 L900.325 683.502 L899.766 683.502 L899.207 683.502 L898.648 683.502 L898.088 683.502 L897.529 683.502 L896.97 683.502 L896.411 683.502 L895.851 683.502 L895.292 683.502 L894.733 683.502 L894.174 683.502 L893.614 683.502 L893.055 683.502 L892.496 683.502 L891.937 683.502 L891.377 683.502 L890.818 683.502 L890.259 683.502 L889.7 683.502 L889.14 683.502 L888.581 683.502 L888.022 683.502 L887.463 683.502 L886.903 683.502 L886.344 683.502 L885.785 683.502 L885.226 683.502 L884.666 683.502 L884.107 683.502 L883.548 683.502 L882.989 683.502 L882.429 683.502 L881.87 683.502 L881.311 683.502 L880.752 683.502 L880.192 683.502 L879.633 683.502 L879.074 683.502 L878.515 683.502 L877.955 683.502 L877.396 683.502 L876.837 683.502 L876.278 683.502 L875.718 683.502 L875.159 683.502 L874.6 683.502 L874.041 683.502 L873.481 683.502 L872.922 683.502 L872.363 683.502 L871.804 683.502 L871.244 683.502 L870.685 683.502 L870.126 683.502 L869.567 683.502 L869.007 683.502 L868.448 683.502 L867.889 683.502 L867.33 683.502 L866.77 683.502 L866.211 683.502 L865.652 683.502 L865.093 683.502 L864.533 683.502 L863.974 683.502 L863.415 683.502 L862.856 683.502 L862.296 683.502 L861.737 683.502 L861.178 683.502 L860.619 683.502 L860.059 683.502 L859.5 683.502 L858.941 683.502 L858.382 683.502 L857.822 683.502 L857.263 683.502 L856.704 683.502 L856.145 683.502 L855.585 683.502 L855.026 683.502 L854.467 683.502 L853.908 683.502 L853.348 683.502 L852.789 683.502 L852.23 683.502 L851.671 683.502 L851.111 683.502 L850.552 683.502 L849.993 683.502 L849.434 683.502 L848.874 683.502 L848.315 683.502 L847.756 683.502 L847.197 683.502 L846.637 683.502 L846.078 683.502 L845.519 683.502 L844.96 683.502 L844.4 683.502 L843.841 683.502 L843.282 683.502 L842.723 683.502 L842.163 683.502 L841.604 683.502 L841.045 683.502 L840.486 683.502 L839.926 683.502 L839.367 683.502 L838.808 683.502 L838.249 683.502 L837.689 683.502 L837.13 683.502 L836.571 683.502 L836.012 683.502 L835.452 683.502 L834.893 683.502 L834.334 683.502 L833.775 683.502 L833.215 683.502 L832.656 683.502 L832.097 683.502 L831.538 683.502 L830.978 683.502 L830.419 683.502 L829.86 683.502 L829.301 683.502 L828.741 683.502 L828.182 683.502 L827.623 683.502 L827.064 683.502 L826.504 683.502 L825.945 683.502 L825.386 683.502 L824.827 683.502 L824.267 683.502 L823.708 683.502 L823.149 683.502 L822.59 683.502 L822.03 683.502 L821.471 683.502 L820.912 683.502 L820.353 683.502 L819.793 683.502 L819.234 683.502 L818.675 683.502 L818.116 683.502 L817.556 683.502 L816.997 683.502 L816.438 683.502 L815.879 683.502 L815.319 683.502 L814.76 683.502 L814.201 683.502 L813.642 683.502 L813.082 683.502 L812.523 683.502 L811.964 683.502 L811.405 683.502 L810.845 683.502 L810.286 683.502 L809.727 683.502 L809.168 683.502 L808.608 683.502 L808.049 683.502 L807.49 683.502 L806.931 683.502 L806.371 683.502 L805.812 683.502 L805.253 683.502 L804.693 683.502 L804.134 683.502 L803.575 683.502 L803.016 683.502 L802.456 683.502 L801.897 683.502 L801.338 683.502 L800.779 683.502 L800.219 683.502 L799.66 683.502 L799.101 683.502 L798.542 683.502 L797.982 683.502 L797.423 683.502 L796.864 683.502 L796.305 683.502 L795.745 683.502 L795.186 683.502 L794.627 683.502 L794.068 683.502 L793.508 683.502 L792.949 683.502 L792.39 683.502 L791.831 683.502 L791.271 683.502 L790.712 683.502 L790.153 683.502 L789.594 683.502 L789.034 683.502 L788.475 683.502 L787.916 683.502 L787.357 683.502 L786.797 683.502 L786.238 683.502 L785.679 683.502 L785.12 683.502 L784.56 683.502 L784.001 683.502 L783.442 683.502 L782.883 683.502 L782.323 683.502 L781.764 683.502 L781.205 683.502 L780.646 683.502 L780.086 683.502 L779.527 683.502 L778.968 683.502 L778.409 683.502 L777.849 683.502 L777.29 683.502 L776.731 683.502 L776.172 683.502 L775.612 683.502 L775.053 683.502 L774.494 683.502 L773.935 683.502 L773.375 683.502 L772.816 683.502 L772.257 683.502 L771.698 683.502 L771.138 683.502 L770.579 683.502 L770.02 683.502 L769.461 683.502 L768.901 683.502 L768.342 683.502 L767.783 683.502 L767.224 683.502 L766.664 683.502 L766.105 683.502 L765.546 683.502 L764.987 683.502 L764.427 683.502 L763.868 683.502 L763.309 683.502 L762.75 683.502 L762.19 683.502 L761.631 683.502 L761.072 683.502 L760.513 683.502 L759.953 683.502 L759.394 683.502 L758.835 683.502 L758.276 683.502 L757.716 683.502 L757.157 683.502 L756.598 683.502 L756.039 683.502 L755.479 683.502 L754.92 683.502 L754.361 683.502 L753.802 683.502 L753.242 683.502 L752.683 683.502 L752.124 683.502 L751.565 683.502 L751.005 683.502 L750.446 683.502 L749.887 683.502 L749.328 683.502 L748.768 683.502 L748.209 683.502 L747.65 683.502 L747.091 683.502 L746.531 683.502 L745.972 683.502 L745.413 683.502 L744.854 683.502 L744.294 683.502 L743.735 683.502 L743.176 683.502 L742.617 683.502 L742.057 683.502 L741.498 683.502 L740.939 683.502 L740.38 683.502 L739.82 683.502 L739.261 683.502 L738.702 683.502 L738.143 683.502 L737.583 683.502 L737.024 683.502 L736.465 683.502 L735.906 683.502 L735.346 683.502 L734.787 683.502 L734.228 683.502 L733.669 683.502 L733.109 683.502 L732.55 683.502 L731.991 683.502 L731.432 683.502 L730.872 683.502 L730.313 683.502 L729.754 683.502 L729.195 683.502 L728.635 683.502 L728.076 683.502 L727.517 683.502 L726.958 683.502 L726.398 683.502 L725.839 683.502 L725.28 683.502 L724.721 683.502 L724.161 683.502 L723.602 683.502 L723.043 683.502 L722.484 683.502 L721.924 683.502 L721.365 683.502 L720.806 683.502 L720.247 683.502  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.026 720.806,687.026 721.365,687.026 721.924,687.026 722.484,687.026 723.043,687.026 723.602,687.026 724.161,687.026 724.721,687.026 725.28,687.026 725.839,687.026 726.398,687.026 726.958,687.026 727.517,687.026 728.076,687.026 728.635,687.026 729.195,687.026 729.754,687.026 730.313,687.026 730.872,687.026 731.432,687.026 731.991,687.026 732.55,687.026 733.109,687.026 733.669,687.026 734.228,687.026 734.787,687.026 735.346,687.026 735.906,687.026 736.465,687.026 737.024,687.026 737.583,687.026 738.143,687.026 738.702,687.026 739.261,687.026 739.82,687.026 740.38,687.026 740.939,687.026 741.498,687.026 742.057,687.026 742.617,687.026 743.176,687.026 743.735,687.026 744.294,687.026 744.854,687.026 745.413,687.026 745.972,687.026 746.531,687.026 747.091,687.026 747.65,687.026 748.209,687.026 748.768,687.026 749.328,687.026 749.887,687.026 750.446,687.026 751.005,687.026 751.565,687.026 752.124,687.026 752.683,687.026 753.242,687.026 753.802,687.026 754.361,687.026 754.92,687.026 755.479,687.026 756.039,687.026 756.598,687.026 757.157,687.026 757.716,687.026 758.276,687.026 758.835,687.026 759.394,687.026 759.953,687.026 760.513,687.026 761.072,687.026 761.631,687.026 762.19,687.026 762.75,687.026 763.309,687.026 763.868,687.026 764.427,687.026 764.987,687.026 765.546,687.026 766.105,687.026 766.664,687.026 767.224,687.026 767.783,687.026 768.342,687.026 768.901,687.026 769.461,687.026 770.02,687.026 770.579,687.026 771.138,687.026 771.698,687.026 772.257,687.026 772.816,687.026 773.375,687.026 773.935,687.026 774.494,687.026 775.053,687.026 775.612,687.026 776.172,687.026 776.731,687.026 777.29,687.026 777.849,687.026 778.409,687.026 778.968,687.026 779.527,687.026 780.086,687.026 780.646,687.026 781.205,687.026 781.764,687.026 782.323,687.026 782.883,687.026 783.442,687.026 784.001,687.026 784.56,687.026 785.12,687.026 785.679,687.026 786.238,687.026 786.797,687.026 787.357,687.026 787.916,687.026 788.475,687.026 789.034,687.026 789.594,687.026 790.153,687.026 790.712,687.026 791.271,687.026 791.831,687.026 792.39,687.026 792.949,687.026 793.508,687.026 794.068,687.026 794.627,687.026 795.186,687.026 795.745,687.026 796.305,687.026 796.864,687.026 797.423,687.026 797.982,687.026 798.542,687.026 799.101,687.026 799.66,687.026 800.219,687.026 800.779,687.026 801.338,687.026 801.897,687.026 802.456,687.026 803.016,687.026 803.575,687.026 804.134,687.026 804.693,687.026 805.253,687.026 805.812,687.026 806.371,687.026 806.931,687.026 807.49,687.026 808.049,687.026 808.608,687.026 809.168,687.026 809.727,687.026 810.286,687.026 810.845,687.026 811.405,687.026 811.964,687.026 812.523,687.026 813.082,687.026 813.642,687.026 814.201,687.026 814.76,687.026 815.319,687.026 815.879,687.026 816.438,687.026 816.997,687.026 817.556,687.026 818.116,687.026 818.675,687.026 819.234,687.026 819.793,687.026 820.353,687.026 820.912,687.026 821.471,687.026 822.03,687.026 822.59,687.026 823.149,687.026 823.708,687.026 824.267,687.026 824.827,687.026 825.386,687.026 825.945,687.026 826.504,687.026 827.064,687.026 827.623,687.026 828.182,687.026 828.741,687.026 829.301,687.026 829.86,687.026 830.419,687.026 830.978,687.026 831.538,687.026 832.097,687.026 832.656,687.026 833.215,687.026 833.775,687.026 834.334,687.026 834.893,687.026 835.452,687.026 836.012,687.026 836.571,687.026 837.13,687.026 837.689,687.026 838.249,687.026 838.808,687.026 839.367,687.026 839.926,687.026 840.486,687.026 841.045,687.026 841.604,687.026 842.163,687.026 842.723,687.026 843.282,687.026 843.841,687.026 844.4,687.026 844.96,687.026 845.519,687.026 846.078,687.026 846.637,687.026 847.197,687.026 847.756,687.026 848.315,687.026 848.874,687.026 849.434,687.026 849.993,687.026 850.552,687.026 851.111,687.026 851.671,687.026 852.23,687.026 852.789,687.026 853.348,687.026 853.908,687.026 854.467,687.026 855.026,687.026 855.585,687.026 856.145,687.026 856.704,687.026 857.263,687.026 857.822,687.026 858.382,687.026 858.941,687.026 859.5,687.026 860.059,687.026 860.619,687.026 861.178,687.026 861.737,687.026 862.296,687.026 862.856,687.026 863.415,687.026 863.974,687.026 864.533,687.026 865.093,687.026 865.652,687.026 866.211,687.026 866.77,687.026 867.33,687.026 867.889,687.026 868.448,687.026 869.007,687.026 869.567,687.026 870.126,687.026 870.685,687.026 871.244,687.026 871.804,687.026 872.363,687.026 872.922,687.026 873.481,687.026 874.041,687.026 874.6,687.026 875.159,687.026 875.718,687.026 876.278,687.026 876.837,687.026 877.396,687.026 877.955,687.026 878.515,687.026 879.074,687.026 879.633,687.026 880.192,687.026 880.752,687.026 881.311,687.026 881.87,687.026 882.429,687.026 882.989,687.026 883.548,687.026 884.107,687.026 884.666,687.026 885.226,687.026 885.785,687.026 886.344,687.026 886.903,687.026 887.463,687.026 888.022,687.026 888.581,687.026 889.14,687.026 889.7,687.026 890.259,687.026 890.818,687.026 891.377,687.026 891.937,687.026 892.496,687.026 893.055,687.026 893.614,687.026 894.174,687.026 894.733,687.026 895.292,687.026 895.851,687.026 896.411,687.026 896.97,687.026 897.529,687.026 898.088,687.026 898.648,687.026 899.207,687.026 899.766,687.026 900.325,687.026 900.885,687.026 901.444,687.026 902.003,687.026 902.562,687.026 903.122,687.026 903.681,687.026 904.24,687.026 904.799,687.026 905.359,687.026 905.918,687.026 906.477,687.026 907.036,687.026 907.596,687.026 908.155,687.026 908.714,687.026 909.273,687.026 909.833,687.026 910.392,687.026 910.951,687.026 911.51,687.026 912.07,687.026 912.629,687.026 913.188,687.026 913.747,687.026 914.307,687.026 914.866,687.026 915.425,687.026 915.984,687.026 916.544,687.026 917.103,687.026 917.662,687.026 918.221,687.026 918.781,687.026 919.34,687.026 919.899,687.026 920.458,687.026 921.018,687.026 921.577,687.026 922.136,687.026 922.695,687.026 923.255,687.026 923.814,687.026 924.373,687.026 924.932,687.026 925.492,687.026 926.051,687.026 926.61,687.026 927.169,687.026 927.729,687.026 928.288,687.026 928.847,687.026 929.406,687.026 929.966,687.026 930.525,687.026 931.084,687.026 931.644,687.026 932.203,687.026 932.762,687.026 933.321,687.026 933.881,687.026 934.44,687.026 934.999,687.026 935.558,687.026 936.118,687.026 936.677,687.026 937.236,687.026 937.795,687.026 938.355,687.026 938.914,687.026 939.473,687.026 940.032,687.026 940.592,687.026 941.151,687.026 941.71,687.026 942.269,687.026 942.829,687.026 943.388,687.026 943.947,687.026 944.506,687.026 945.066,687.026 945.625,687.026 946.184,687.026 946.743,687.026 947.303,687.026 947.862,687.026 948.421,687.026 948.98,687.026 949.54,687.026 950.099,687.026 950.658,687.026 951.217,687.026 951.777,687.026 952.336,687.026 952.895,687.026 953.454,687.026 954.014,687.026 954.573,687.026 955.132,687.026 955.691,687.026 956.251,687.026 956.81,687.026 957.369,687.026 957.928,687.026 958.488,687.026 959.047,687.026 959.606,687.026 960.165,687.026 960.725,687.026 961.284,687.026 961.843,687.026 962.402,687.026 962.962,687.026 963.521,687.026 964.08,687.026 964.639,687.026 965.199,687.026 965.758,687.026 966.317,687.026 966.876,687.026 967.436,687.026 967.995,687.026 968.554,687.026 969.113,687.026 969.673,687.026 970.232,687.026 970.791,687.026 971.35,687.026 971.91,687.026 972.469,687.026 973.028,687.026 973.587,687.026 974.147,687.026 974.706,687.026 975.265,687.026 975.824,687.026 976.384,687.026 976.943,687.026 977.502,687.026 978.061,687.026 978.621,687.026 979.18,687.026 979.739,687.026 980.298,687.026 980.858,687.026 981.417,687.026 981.976,687.026 982.535,687.026 983.095,687.026 983.654,687.026 984.213,687.026 984.772,687.026 985.332,687.026 985.891,687.026 986.45,687.026 987.009,687.026 987.569,687.026 988.128,687.026 988.687,687.026 989.246,687.026 989.806,687.026 990.365,687.026 990.924,687.026 991.483,687.026 992.043,687.026 992.602,687.026 993.161,687.026 993.72,687.026 994.28,687.026 994.839,687.026 995.398,687.026 995.957,687.026 996.517,687.026 997.076,687.026 997.635,687.026 998.194,687.026 998.754,687.026 999.313,687.026 999.872,687.026 1000.43,687.026 1000.99,687.026 1001.55,687.026 1002.11,687.026 1002.67,687.026 1003.23,687.026 1003.79,687.026 1004.35,687.026 1004.91,687.026 1005.46,687.026 1006.02,687.026 1006.58,687.026 1007.14,687.026 1007.7,687.026 1008.26,687.026 1008.82,687.026 1009.38,687.026 1009.94,687.026 1010.5,687.026 1011.06,687.026 1011.62,687.026 1012.18,687.026 1012.73,687.026 1013.29,687.026 1013.85,687.026 1014.41,687.026 1014.97,687.026 1015.53,687.026 1016.09,687.026 1016.65,687.026 1017.21,687.026 1017.77,687.026 1018.33,687.026 1018.89,687.026 1019.45,687.026 1020.01,687.026 1020.56,687.026 1021.12,687.026 1021.68,687.026 1022.24,687.026 1022.8,687.026 1023.36,687.026 1023.92,687.026 1024.48,687.026 1025.04,687.026 1025.6,687.026 1026.16,687.026 1026.72,687.026 1027.28,687.026 1027.83,687.026 1028.39,687.026 1028.95,687.026 1029.51,687.026 1030.07,687.026 1030.63,687.026 1031.19,687.026 1031.75,687.026 1032.31,687.026 1032.87,687.026 1033.43,687.026 1033.99,687.026 1034.55,687.026 1035.1,687.026 1035.66,687.026 1036.22,687.026 1036.78,687.026 1037.34,687.026 1037.9,687.026 1038.46,687.026 1039.02,687.026 1039.58,687.026 1040.14,687.026 1040.7,687.026 1041.26,687.026 1041.82,687.026 1042.38,687.026 1042.93,687.026 1043.49,687.026 1044.05,687.026 1044.61,687.026 1045.17,687.026 1045.73,687.026 1046.29,687.026 1046.85,687.026 1047.41,687.026 1047.97,687.026 1048.53,687.026 1049.09,687.026 1049.65,687.026 1050.2,687.026 1050.76,687.026 1051.32,687.026 1051.88,687.026 1052.44,687.026 1053,687.026 1053.56,687.026 1054.12,687.026 1054.68,687.026 1055.24,687.026 1055.8,687.026 1056.36,687.026 1056.92,687.026 1057.48,687.026 1058.03,687.026 1058.59,687.026 1059.15,687.026 1059.71,687.026 1060.27,687.026 1060.83,687.026 1061.39,687.026 1061.95,687.026 1062.51,687.026 1063.07,687.026 1063.63,687.026 1064.19,687.026 1064.75,687.026 1065.3,687.026 1065.86,687.026 1066.42,687.026 1066.98,687.026 1067.54,687.026 1068.1,687.026 1068.66,687.026 1069.22,687.026 1069.78,687.026 1070.34,687.026 1070.9,687.026 1071.46,687.026 1072.02,687.026 1072.57,687.026 1073.13,687.026 1073.69,687.026 1074.25,687.026 1074.81,687.026 1075.37,687.026 1075.93,687.026 1076.49,687.026 1077.05,687.026 1077.61,687.026 1078.17,687.026 1078.73,687.026 1079.29,687.026 1079.85,687.026 1080.4,687.026 1080.96,687.026 1081.52,687.026 1082.08,687.026 1082.64,687.026 1083.2,687.026 1083.76,687.026 1084.32,687.026 1084.88,687.026 1085.44,687.026 1086,687.026 1086.56,687.026 1087.12,687.026 1087.67,687.026 1088.23,687.026 1088.79,687.026 1089.35,687.026 1089.91,687.026 1090.47,687.026 1091.03,687.026 1091.59,687.026 1092.15,687.026 1092.71,687.026 1093.27,687.026 1093.83,687.026 1094.39,687.026 1094.94,687.026 1095.5,687.026 1096.06,687.026 1096.62,687.026 1097.18,687.026 1097.74,687.026 1098.3,687.026 1098.86,687.026 1099.42,687.026 1099.98,687.026 1100.54,687.026 1101.1,687.026 1101.66,687.026 1102.22,687.026 1102.77,687.026 1103.33,687.026 1103.89,687.026 1104.45,687.026 1105.01,687.026 1105.57,687.026 1106.13,687.026 1106.69,687.026 1107.25,687.026 1107.81,687.026 1108.37,687.026 1108.93,687.026 1109.49,687.026 1110.04,687.026 1110.6,687.026 1111.16,687.026 1111.72,687.026 1112.28,687.026 1112.84,687.026 1113.4,687.026 1113.96,687.026 1114.52,687.026 1115.08,687.026 1115.64,687.026 1116.2,687.026 1116.76,687.026 1117.31,687.026 1117.87,687.026 1118.43,687.026 1118.99,687.026 1119.55,687.026 1120.11,687.026 1120.67,687.026 1121.23,687.026 1121.79,687.026 1122.35,687.026 1122.91,687.026 1123.47,687.026 1124.03,687.026 1124.59,687.026 1125.14,687.026 1125.7,687.026 1126.26,687.026 1126.82,687.026 1127.38,687.026 1127.94,687.026 1128.5,687.026 1129.06,687.026 1129.62,687.026 1130.18,687.026 1130.74,687.026 1131.3,687.026 1131.86,687.026 1132.41,687.026 1132.97,687.026 1133.53,687.026 1134.09,687.026 1134.65,687.026 1135.21,687.026 1135.77,687.026 1136.33,687.026 1136.89,687.026 1137.45,687.026 1138.01,687.026 1138.57,687.026 1139.13,687.026 1139.68,687.026 1140.24,687.026 1140.8,687.026 1141.36,687.026 1141.92,687.026 1142.48,687.026 1143.04,687.026 1143.6,687.026 1144.16,687.026 1144.72,687.026 1145.28,687.026 1145.84,687.026 1146.4,687.026 1146.96,687.026 1147.51,687.026 1148.07,687.026 1148.63,687.026 1149.19,687.026 1149.75,687.026 1150.31,687.026 1150.87,687.026 1151.43,687.026 1151.99,687.026 1152.55,687.026 1153.11,687.026 1153.67,687.026 1154.23,687.026 1154.78,687.026 1155.34,687.026 1155.9,687.026 1156.46,687.026 1157.02,687.026 1157.58,687.026 1158.14,687.026 1158.7,687.026 1159.26,687.026 1159.82,687.026 1160.38,687.026 1160.94,687.026 1161.5,687.026 1162.05,687.026 1162.61,687.026 1163.17,687.026 1163.73,687.026 1164.29,687.026 1164.85,687.026 1165.41,687.026 1165.97,687.026 1166.53,687.026 1167.09,687.026 1167.65,687.026 1168.21,687.026 1168.77,687.026 1169.33,687.026 1169.88,687.026 1170.44,687.026 1171,687.026 1171.56,687.026 1172.12,687.026 1172.68,687.026 1173.24,687.026 1173.8,687.026 1174.36,687.026 1174.92,687.026 1175.48,687.026 1176.04,687.026 1176.6,687.026 1177.15,687.026 1177.71,687.026 1178.27,687.026 1178.83,687.026 1179.39,687.026 1179.95,687.026 1180.51,687.026 1181.07,687.026 1181.63,687.026 1182.19,687.026 1182.75,687.026 1183.31,687.026 1183.87,687.026 1184.43,687.026 1184.98,687.026 1185.54,687.026 1186.1,687.026 1186.66,687.026 1187.22,687.026 1187.78,687.026 1188.34,687.026 1188.9,687.026 1189.46,687.026 1190.02,687.026 1190.58,687.026 1191.14,687.026 1191.7,687.026 1192.25,687.026 1192.81,687.026 1193.37,687.026 1193.93,687.026 1194.49,687.026 1195.05,687.026 1195.61,687.026 1196.17,687.026 1196.73,687.026 1197.29,687.026 1197.85,687.026 1198.41,687.026 1198.97,687.026 1199.52,687.026 1200.08,687.026 1200.64,687.026 1201.2,687.026 1201.76,687.026 1202.32,687.026 1202.88,687.026 1203.44,687.026 1204,687.026 1204.56,687.026 1205.12,687.026 1205.68,687.026 1206.24,687.026 1206.8,687.026 1207.35,687.026 1207.91,687.026 1208.47,687.026 1209.03,687.026 1209.59,687.026 1210.15,687.026 1210.71,687.026 1211.27,687.026 1211.83,687.026 1212.39,687.026 1212.95,687.026 1213.51,687.026 1214.07,687.026 1214.62,687.026 1215.18,687.026 1215.74,687.026 1216.3,687.026 1216.86,687.026 1217.42,687.026 1217.98,687.026 1218.54,687.026 1219.1,687.026 1219.66,687.026 1220.22,687.026 1220.78,687.026 1221.34,687.026 1221.89,687.026 1222.45,687.026 1223.01,687.026 1223.57,687.026 1224.13,687.026 1224.69,687.026 1225.25,687.026 1225.81,687.026 1226.37,687.026 1226.93,687.026 1227.49,687.026 1228.05,687.026 1228.61,687.026 1229.17,687.026 1229.72,687.026 1230.28,687.026 1230.84,687.026 1231.4,687.026 1231.96,687.026 1232.52,687.026 1233.08,687.026 1233.64,687.026 1234.2,687.026 1234.76,687.026 1235.32,687.026 1235.88,687.026 1236.44,687.026 1236.99,687.026 1237.55,687.026 1238.11,687.026 1238.67,687.026 1239.23,687.026 1239.79,687.026 1240.35,687.026 1240.91,687.026 1241.47,687.026 1242.03,687.026 1242.59,687.026 1243.15,687.026 1243.71,687.026 1244.26,687.026 1244.82,687.026 1245.38,687.026 1245.94,687.026 1246.5,687.026 1247.06,687.026 1247.62,687.026 1248.18,687.026 1248.74,687.026 1249.3,687.026 1249.86,687.026 1250.42,687.026 1250.98,687.026 1251.54,687.026 1252.09,687.026 1252.65,687.026 1253.21,687.026 1253.77,687.026 1254.33,687.026 1254.89,687.026 1255.45,687.026 1256.01,687.026 1256.57,687.026 1257.13,687.026 1257.69,687.026 1258.25,687.026 1258.81,687.026 1259.36,687.026 1259.92,687.026 1260.48,687.026 1261.04,687.026 1261.6,687.026 1262.16,687.026 1262.72,687.026 1263.28,687.026 1263.84,687.026 1264.4,687.026 1264.96,687.026 1265.52,687.026 1266.08,687.026 1266.63,687.026 1267.19,687.026 1267.75,687.026 1268.31,687.026 1268.87,687.026 1269.43,687.026 1269.99,687.026 1270.55,687.026 1271.11,687.026 1271.67,687.026 1272.23,687.026 1272.79,687.026 1273.35,687.026 1273.91,687.026 1274.46,687.026 1275.02,687.026 1275.58,687.026 1276.14,687.026 1276.7,687.026 1277.26,687.026 1277.82,687.026 1278.38,687.026 1278.94,687.026 1279.5,687.026 1280.06,687.026 1280.62,687.026 1281.18,687.026 1281.73,687.026 1282.29,687.026 1282.85,687.026 1283.41,687.026 1283.97,687.026 1284.53,687.026 1285.09,687.026 1285.65,687.026 1286.21,687.026 1286.77,687.026 1287.33,687.026 1287.89,687.026 1288.45,687.026 1289,687.026 1289.56,687.026 1290.12,687.026 1290.68,687.026 1291.24,687.026 1291.8,687.026 1292.36,687.026 1292.92,687.026 1293.48,687.026 1294.04,687.026 1294.6,687.026 1295.16,687.026 1295.72,687.026 1296.28,687.026 1296.83,687.026 1297.39,687.026 1297.95,687.026 1298.51,687.026 1299.07,687.026 1299.63,687.026 1300.19,687.026 1300.75,687.026 1301.31,687.026 1301.87,687.026 1302.43,687.026 1302.99,687.026 1303.55,687.026 1304.1,687.026 1304.66,687.026 1305.22,687.026 1305.78,687.026 1306.34,687.026 1306.9,687.026 1307.46,687.026 1308.02,687.026 1308.58,687.026 1309.14,687.026 1309.7,687.026 1310.26,687.026 1310.82,687.026 1311.38,687.026 1311.93,687.026 1312.49,687.026 1313.05,687.026 1313.61,687.026 1314.17,687.026 1314.73,687.026 1315.29,687.026 1315.85,687.026 1316.41,687.026 1316.97,687.026 1317.53,687.026 1318.09,687.026 1318.65,687.026 1319.2,687.026 1319.76,687.026 1320.32,687.026 1320.88,687.026 1321.44,687.026 1322,687.026 1322.56,687.026 1323.12,687.026 1323.68,687.026 1324.24,687.026 1324.8,687.026 1325.36,687.026 1325.92,687.026 1326.47,687.026 1327.03,687.026 1327.59,687.026 1328.15,687.026 1328.71,687.026 1329.27,687.026 1329.83,687.026 1330.39,687.026 1330.95,687.026 1331.51,687.026 1332.07,687.026 1332.63,687.026 1333.19,687.026 1333.75,687.026 1334.3,687.026 1334.86,687.026 1335.42,687.026 1335.98,687.026 1336.54,687.026 1337.1,687.026 1337.66,687.026 1338.22,687.026 1338.78,687.026 1339.34,687.026 1339.9,687.026 1340.46,687.026 1341.02,687.026 1341.57,687.026 1342.13,687.026 1342.69,687.026 1343.25,687.026 1343.81,687.026 1344.37,687.026 1344.93,687.026 1345.49,687.026 1346.05,687.026 1346.61,687.026 1347.17,687.026 1347.73,687.026 1348.29,687.026 1348.84,687.026 1349.4,687.026 1349.96,687.026 1350.52,687.026 1351.08,687.026 1351.64,687.026 1352.2,687.026 1352.76,687.026 1353.32,687.026 1353.88,687.026 1354.44,687.026 1355,687.026 1355.56,687.026 1356.12,687.026 1356.67,687.026 1357.23,687.026 1357.79,687.026 1358.35,687.026 1358.91,687.026 1359.47,687.026 1360.03,687.026 1360.59,687.026 1361.15,687.026 1361.71,687.026 1362.27,687.026 1362.83,687.026 1363.39,687.026 1363.94,687.026 1364.5,687.026 1365.06,687.026 1365.62,687.026 1366.18,687.026 1366.74,687.026 1367.3,687.026 1367.86,687.026 1368.42,687.026 1368.98,687.026 1369.54,687.026 1370.1,687.026 1370.66,687.026 1371.21,687.026 1371.77,687.026 1372.33,687.026 1372.89,687.026 1373.45,687.026 1374.01,687.026 1374.57,687.026 1375.13,687.026 1375.69,687.026 1376.25,687.026 1376.81,687.026 1377.37,687.026 1377.93,687.026 1378.49,687.026 1379.04,687.026 1379.6,687.026 1380.16,687.026 1380.72,687.026 1381.28,687.026 1381.84,687.026 1382.4,687.026 1382.96,687.026 1383.52,687.026 1384.08,687.026 1384.64,687.026 1385.2,687.026 1385.76,687.026 1386.31,687.026 1386.87,687.026 1387.43,687.026 1387.99,687.026 1388.55,687.026 1389.11,687.026 1389.67,687.026 1390.23,687.026 1390.79,687.026 1391.35,687.026 1391.91,687.026 1392.47,687.026 1393.03,687.026 1393.58,687.026 1394.14,687.026 1394.7,687.026 1395.26,687.026 1395.82,687.026 1396.38,687.026 1396.94,687.026 1397.5,687.026 1398.06,687.026 1398.62,687.026 1399.18,687.026 1399.74,687.026 1400.3,687.026 1400.86,687.026 1401.41,687.026 1401.97,687.026 1402.53,687.026 1403.09,687.026 1403.65,687.026 1404.21,687.026 1404.77,687.026 1405.33,687.026 1405.89,687.026 1406.45,687.026 1407.01,687.026 1407.57,687.026 1408.13,687.026 1408.68,687.026 1409.24,687.026 1409.8,687.026 1410.36,687.026 1410.92,687.026 1411.48,687.026 1412.04,687.026 1412.6,687.026 1413.16,687.026 1413.72,687.026 1414.28,687.026 1414.84,687.026 1415.4,687.026 1415.95,687.026 1416.51,687.026 1417.07,687.026 1417.63,687.026 1418.19,687.026 1418.75,687.026 1419.31,687.026 1419.87,687.026 1420.43,687.026 1420.99,687.026 1421.55,687.026 1422.11,687.026 1422.67,687.026 1423.23,687.026 1423.78,687.026 1424.34,687.026 1424.9,687.026 1425.46,687.026 1426.02,687.026 1426.58,687.026 1427.14,687.026 1427.7,687.026 1428.26,687.026 1428.82,687.026 1429.38,687.026 1429.94,687.026 1430.5,687.026 1431.05,687.026 1431.61,687.026 1432.17,687.026 1432.73,687.026 1433.29,687.026 1433.85,687.026 1434.41,687.026 1434.97,687.026 1435.53,687.026 1436.09,687.026 1436.65,687.026 1437.21,687.026 1437.77,687.026 1438.33,687.026 1438.88,687.026 1439.44,687.026 1440,687.026 1440.56,687.026 1441.12,687.026 1441.68,687.026 1442.24,687.026 1442.8,687.026 1443.36,687.026 1443.92,687.026 1444.48,687.026 1445.04,687.026 1445.6,687.026 1446.15,687.026 1446.71,687.026 1447.27,687.026 1447.83,687.026 1448.39,687.026 1448.95,687.026 1449.51,687.026 1450.07,687.026 1450.63,687.026 1451.19,687.026 1451.75,687.026 1452.31,687.026 1452.87,687.026 1453.42,687.026 1453.98,687.026 1454.54,687.026 1455.1,687.026 1455.66,687.026 1456.22,687.026 1456.78,687.026 1457.34,687.026 1457.9,687.026 1458.46,687.026 1459.02,687.026 1459.58,687.026 1460.14,687.026 1460.7,687.026 1461.25,687.026 1461.81,687.026 1462.37,687.026 1462.93,687.026 1463.49,687.026 1464.05,687.026 1464.61,687.026 1465.17,687.026 1465.73,687.026 1466.29,687.026 1466.85,687.026 1467.41,687.026 1467.97,687.026 1468.52,687.026 1469.08,687.026 1469.64,687.026 1470.2,687.026 1470.76,687.026 1471.32,687.026 1471.88,687.026 1472.44,687.026 1473,687.026 1473.56,687.026 1474.12,687.026 1474.68,687.026 1475.24,687.026 1475.79,687.026 1476.35,687.026 1476.91,687.026 1477.47,687.026 1478.03,687.026 1478.59,687.026 1479.15,687.026 1479.71,687.026 1480.27,687.026 1480.83,687.026 1481.39,687.026 1481.95,687.026 1482.51,687.026 1483.07,687.026 1483.62,687.026 1484.18,687.026 1484.74,687.026 1485.3,687.026 1485.86,687.026 1486.42,687.026 1486.98,687.026 1487.54,687.026 1488.1,687.026 1488.66,687.026 1489.22,687.026 1489.78,687.026 1490.34,687.026 1490.89,687.026 1491.45,687.026 1492.01,687.026 1492.57,687.026 1493.13,687.026 1493.69,687.026 1494.25,687.026 1494.81,687.026 1495.37,687.026 1495.93,687.026 1496.49,687.026 1497.05,687.026 1497.61,687.026 1498.16,687.026 1498.72,687.026 1499.28,687.026 1499.84,687.026 1500.4,687.026 1500.96,687.026 1501.52,687.026 1502.08,687.026 1502.64,687.026 1503.2,687.026 1503.76,687.026 1504.32,687.026 1504.88,687.026 1505.44,687.026 1505.99,687.026 1506.55,687.026 1507.11,687.026 1507.67,687.026 1508.23,687.026 1508.79,687.026 1509.35,687.026 1509.91,687.026 1510.47,687.026 1511.03,687.026 1511.59,687.026 1512.15,687.026 1512.71,687.026 1513.26,687.026 1513.82,687.026 1514.38,687.026 1514.94,687.026 1515.5,687.026 1516.06,687.026 1516.62,687.026 1517.18,687.026 1517.74,687.026 1518.3,687.026 1518.86,687.026 1519.42,687.026 1519.98,687.026 1520.53,687.026 1521.09,687.026 1521.65,687.026 1522.21,687.026 1522.77,687.026 1523.33,687.026 1523.89,687.026 1524.45,687.026 1525.01,687.026 1525.57,687.026 1526.13,687.026 1526.69,687.026 1527.25,687.026 1527.81,687.026 1528.36,687.026 1528.92,687.026 1529.48,687.026 1530.04,687.026 1530.6,687.026 1531.16,687.026 1531.72,687.026 1532.28,687.026 1532.84,687.026 1533.4,687.026 1533.96,687.026 1534.52,687.026 1535.08,687.026 1535.63,687.026 1536.19,687.026 1536.75,687.026 1537.31,687.026 1537.87,687.026 1538.43,687.026 1538.99,687.026 1539.55,687.026 1540.11,687.026 1540.67,687.026 1541.23,687.026 1541.79,687.026 1542.35,687.026 1542.9,687.026 1543.46,687.026 1544.02,687.026 1544.58,687.026 1545.14,687.026 1545.7,687.026 1546.26,687.026 1546.82,687.026 1547.38,687.026 1547.94,687.026 1548.5,687.026 1549.06,687.026 1549.62,687.026 1550.18,687.026 1550.73,687.026 1551.29,687.026 1551.85,687.026 1552.41,687.026 1552.97,687.026 1553.53,687.026 1554.09,687.026 1554.65,687.026 1555.21,687.026 1555.77,687.026 1556.33,687.026 1556.89,687.026 1557.45,687.026 1558,687.026 1558.56,687.026 1559.12,687.026 1559.68,687.026 1560.24,687.026 1560.8,687.026 1561.36,687.026 1561.92,687.026 1562.48,687.026 1563.04,687.026 1563.6,687.026 1564.16,687.026 1564.72,687.026 1565.28,687.026 1565.83,687.026 1566.39,687.026 1566.95,687.026 1567.51,687.026 1568.07,687.026 1568.63,687.026 1569.19,687.026 1569.75,687.026 1570.31,687.026 1570.87,687.026 1571.43,687.026 1571.99,687.026 1572.55,687.026 1573.1,687.026 1573.66,687.026 1574.22,687.026 1574.78,687.026 1575.34,687.026 1575.9,687.026 1576.46,687.026 1577.02,687.026 1577.58,687.026 1578.14,687.026 1578.7,687.026 1579.26,687.026 1579.82,687.026 1580.37,687.026 1580.93,687.026 1581.49,687.026 1582.05,687.026 1582.61,687.026 1583.17,687.026 1583.73,687.026 1584.29,687.026 1584.85,687.026 1585.41,687.026 1585.97,687.026 1586.53,687.026 1587.09,687.026 1587.65,687.026 1588.2,687.026 1588.76,687.026 1589.32,687.026 1589.88,687.026 1590.44,687.026 1591,687.026 1591.56,687.026 1592.12,687.026 1592.68,687.026 1593.24,687.026 1593.8,687.026 1594.36,687.026 1594.92,687.026 1595.47,687.026 1596.03,687.026 1596.59,687.026 1597.15,687.026 1597.71,687.026 1598.27,687.026 1598.83,687.026 1599.39,687.026 1599.95,687.026 1600.51,687.026 1601.07,687.026 1601.63,687.026 1602.19,687.026 1602.74,687.026 1603.3,687.026 1603.86,687.026 1604.42,687.026 1604.98,687.026 1605.54,687.026 1606.1,687.026 1606.66,687.026 1607.22,687.026 1607.78,687.026 1608.34,687.026 1608.9,687.026 1609.46,687.026 1610.02,687.026 1610.57,687.026 1611.13,687.026 1611.69,687.026 1612.25,687.026 1612.81,687.026 1613.37,687.026 1613.93,687.026 1614.49,687.026 1615.05,687.026 1615.61,687.026 1616.17,687.026 1616.73,687.026 1617.29,687.026 1617.84,687.026 1618.4,687.026 1618.96,687.026 1619.52,687.026 1620.08,687.026 1620.64,687.026 1621.2,687.026 1621.76,687.026 1622.32,687.026 1622.88,687.026 1623.44,687.026 1624,687.026 1624.56,687.026 1625.11,687.026 1625.67,687.026 1626.23,687.026 1626.79,687.026 1627.35,687.026 1627.91,687.026 1628.47,687.026 1629.03,687.026 1629.59,687.026 1630.15,687.026 1630.71,687.026 1631.27,687.026 1631.83,687.026 1632.39,687.026 1632.94,687.026 1633.5,687.026 1634.06,687.026 1634.62,687.026 1635.18,687.026 1635.74,687.026 1636.3,687.026 1636.86,687.026 1637.42,687.026 1637.98,687.026 1638.54,687.026 1639.1,687.026 1639.66,687.026 1640.21,687.026 1640.77,687.026 1641.33,687.026 1641.89,687.026 1642.45,687.026 1643.01,687.026 1643.57,687.026 1644.13,687.026 1644.69,687.026 1645.25,687.026 1645.81,687.026 1646.37,687.026 1646.93,687.026 1647.48,687.026 1648.04,687.026 1648.6,687.026 1649.16,687.026 1649.72,687.026 1650.28,687.026 1650.84,687.026 1651.4,687.026 1651.96,687.026 1652.52,687.026 1653.08,687.026 1653.64,687.026 1654.2,687.026 1654.76,687.026 1655.31,687.026 1655.87,687.026 1656.43,687.026 1656.99,687.026 1657.55,687.026 1658.11,687.026 1658.67,687.026 1659.23,687.026 1659.79,687.026 1660.35,687.026 1660.91,687.026 1661.47,687.026 1662.03,687.026 1662.58,687.026 1663.14,687.026 1663.7,687.026 1664.26,687.026 1664.82,687.026 1665.38,687.026 1665.94,687.026 1666.5,687.026 1667.06,687.026 1667.62,687.026 1668.18,687.026 1668.74,687.026 1669.3,687.026 1669.85,687.026 1670.41,687.026 1670.97,687.026 1671.53,687.026 1672.09,687.026 1672.65,687.026 1673.21,687.026 1673.77,687.026 1674.33,687.026 1674.89,687.026 1675.45,687.026 1676.01,687.026 1676.57,687.026 1677.13,687.026 1677.68,687.026 1678.24,687.026 1678.8,687.026 1679.36,687.026 1679.92,687.026 1680.48,687.026 1681.04,687.026 1681.6,687.026 1682.16,687.026 1682.72,687.026 1683.28,687.026 1683.84,687.026 1684.4,687.026 1684.95,687.026 1685.51,687.026 1686.07,687.026 1686.63,687.026 1687.19,687.026 1687.75,687.026 1688.31,687.026 1688.87,687.026 1689.43,687.026 1689.99,687.026 1690.55,687.026 1691.11,687.026 1691.67,687.026 1692.23,687.026 1692.78,687.026 1693.34,687.026 1693.9,687.026 1694.46,687.026 1695.02,687.026 1695.58,687.026 1696.14,687.026 1696.7,687.026 1697.26,687.026 1697.82,687.026 1698.38,687.026 1698.94,687.026 1699.5,687.026 1700.05,687.026 1700.61,687.026 1701.17,687.026 1701.73,687.026 1702.29,687.026 1702.85,687.026 1703.41,687.026 1703.97,687.026 1704.53,687.026 1705.09,687.026 1705.65,687.026 1706.21,687.026 1706.77,687.026 1707.32,687.026 1707.88,687.026 1708.44,687.026 1709,687.026 1709.56,687.026 1710.12,687.026 1710.68,687.026 1711.24,687.026 1711.8,687.026 1712.36,687.026 1712.92,687.026 1713.48,687.026 1714.04,687.026 1714.6,687.026 1715.15,687.026 1715.71,687.026 1716.27,687.026 1716.83,687.026 1717.39,687.026 1717.95,687.026 1718.51,687.026 1719.07,687.026 1719.63,687.026 1720.19,687.026 1720.75,687.026 1721.31,687.026 1721.87,687.026 1722.42,687.026 1722.98,687.026 1723.54,687.026 1724.1,687.026 1724.66,687.026 1725.22,687.026 1725.78,687.026 1726.34,687.026 1726.9,687.026 1727.46,687.026 1728.02,687.026 1728.58,687.026 1729.14,687.026 1729.69,687.026 1730.25,687.026 1730.81,687.026 1731.37,687.026 1731.93,687.026 1732.49,687.026 1733.05,687.026 1733.61,687.026 1734.17,687.026 1734.73,687.026 1735.29,687.026 1735.85,687.026 1736.41,687.026 1736.97,687.026 1737.52,687.026 1738.08,687.026 1738.64,687.026 1739.2,687.026 1739.76,687.026 1740.32,687.026 1740.88,687.026 1741.44,687.026 1742,687.026 1742.56,687.026 1743.12,687.026 1743.68,687.026 1744.24,687.026 1744.79,687.026 1745.35,687.026 1745.91,687.026 1746.47,687.026 1747.03,687.026 1747.59,687.026 1748.15,687.026 1748.71,687.026 1749.27,687.026 1749.83,687.026 1750.39,687.026 1750.95,687.026 1751.51,687.026 1752.06,687.026 1752.62,687.026 1753.18,687.026 1753.74,687.026 1754.3,687.026 1754.86,687.026 1755.42,687.026 1755.98,687.026 1756.54,687.026 1757.1,687.026 1757.66,687.026 1758.22,687.026 1758.78,687.026 1759.34,687.026 1759.89,687.026 1760.45,687.026 1761.01,687.026 1761.57,687.026 1762.13,687.026 1762.69,687.026 1763.25,687.026 1763.81,687.026 1764.37,687.026 1764.93,687.026 1765.49,687.026 1766.05,687.026 1766.61,687.026 1767.16,687.026 1767.72,687.026 1768.28,687.026 1768.84,687.026 1769.4,687.026 1769.96,687.026 1770.52,687.026 1771.08,687.026 1771.64,687.026 1772.2,687.026 1772.76,687.026 1773.32,687.026 1773.88,687.026 1774.43,687.026 1774.99,687.026 1775.55,687.026 1776.11,687.026 1776.67,687.026 1777.23,687.026 1777.79,687.026 1778.35,687.026 1778.91,687.026 1779.47,687.026 1780.03,687.026 1780.59,687.026 1781.15,687.026 1781.71,687.026 1782.26,687.026 1782.82,687.026 1783.38,687.026 1783.94,687.026 1784.5,687.026 1785.06,687.026 1785.62,687.026 1786.18,687.026 1786.74,687.026 1787.3,687.026 1787.86,687.026 1788.42,687.026 1788.98,687.026 1789.53,687.026 1790.09,687.026 1790.65,687.026 1791.21,687.026 1791.77,687.026 1792.33,687.026 1792.89,687.026 1793.45,687.026 1794.01,687.026 1794.57,687.026 1795.13,687.026 1795.69,687.026 1796.25,687.026 1796.8,687.026 1797.36,687.026 1797.92,687.026 1798.48,687.026 1799.04,687.026 1799.6,687.026 1800.16,687.026 1800.72,687.026 1801.28,687.026 1801.84,687.026 1802.4,687.026 1802.96,687.026 1803.52,687.026 1804.08,687.026 1804.63,687.026 1805.19,687.026 1805.75,687.026 1806.31,687.026 1806.87,687.026 1807.43,687.026 1807.99,687.026 1808.55,687.026 1809.11,687.026 1809.67,687.026 1810.23,687.026 1810.79,687.026 1811.35,687.026 1811.9,687.026 1812.46,687.026 1813.02,687.026 1813.58,687.026 1814.14,687.026 1814.7,687.026 1815.26,687.026 1815.82,687.026 1816.38,687.026 1816.94,687.026 1817.5,687.026 1818.06,687.026 1818.62,687.026 1819.18,687.026 1819.73,687.026 1820.29,687.026 1820.85,687.026 1821.41,687.026 1821.97,687.026 1822.53,687.026 1823.09,687.026 1823.65,687.026 1824.21,687.026 1824.77,687.026 1825.33,687.026 1825.89,687.026 1826.45,687.026 1827,687.026 1827.56,687.026 1828.12,687.026 1828.68,687.026 1829.24,687.026 1829.8,687.026 1830.36,687.026 1830.92,687.026 1831.48,687.026 1832.04,687.026 1832.6,687.026 1833.16,687.026 1833.72,687.026 1834.27,687.026 1834.83,687.026 1835.39,687.026 1835.95,687.026 1836.51,687.026 1837.07,687.026 1837.63,687.026 1838.19,687.026 \"/>\n<path clip-path=\"url(#clip623)\" d=\"M720.247 685.337 L720.806 685.337 L721.365 685.337 L721.924 685.337 L722.484 685.337 L723.043 685.337 L723.602 685.337 L724.161 685.337 L724.721 685.337 L725.28 685.337 L725.839 685.337 L726.398 685.337 L726.958 685.337 L727.517 685.337 L728.076 685.337 L728.635 685.337 L729.195 685.337 L729.754 685.337 L730.313 685.337 L730.872 685.337 L731.432 685.337 L731.991 685.337 L732.55 685.337 L733.109 685.337 L733.669 685.337 L734.228 685.337 L734.787 685.337 L735.346 685.337 L735.906 685.337 L736.465 685.337 L737.024 685.337 L737.583 685.337 L738.143 685.337 L738.702 685.337 L739.261 685.337 L739.82 685.337 L740.38 685.337 L740.939 685.337 L741.498 685.337 L742.057 685.337 L742.617 685.337 L743.176 685.337 L743.735 685.337 L744.294 685.337 L744.854 685.337 L745.413 685.337 L745.972 685.337 L746.531 685.337 L747.091 685.337 L747.65 685.337 L748.209 685.337 L748.768 685.337 L749.328 685.337 L749.887 685.337 L750.446 685.337 L751.005 685.337 L751.565 685.337 L752.124 685.337 L752.683 685.337 L753.242 685.337 L753.802 685.337 L754.361 685.337 L754.92 685.337 L755.479 685.337 L756.039 685.337 L756.598 685.337 L757.157 685.337 L757.716 685.337 L758.276 685.337 L758.835 685.337 L759.394 685.337 L759.953 685.337 L760.513 685.337 L761.072 685.337 L761.631 685.337 L762.19 685.337 L762.75 685.337 L763.309 685.337 L763.868 685.337 L764.427 685.337 L764.987 685.337 L765.546 685.337 L766.105 685.337 L766.664 685.337 L767.224 685.337 L767.783 685.337 L768.342 685.337 L768.901 685.337 L769.461 685.337 L770.02 685.337 L770.579 685.337 L771.138 685.337 L771.698 685.337 L772.257 685.337 L772.816 685.337 L773.375 685.337 L773.935 685.337 L774.494 685.337 L775.053 685.337 L775.612 685.337 L776.172 685.337 L776.731 685.337 L777.29 685.337 L777.849 685.337 L778.409 685.337 L778.968 685.337 L779.527 685.337 L780.086 685.337 L780.646 685.337 L781.205 685.337 L781.764 685.337 L782.323 685.337 L782.883 685.337 L783.442 685.337 L784.001 685.337 L784.56 685.337 L785.12 685.337 L785.679 685.337 L786.238 685.337 L786.797 685.337 L787.357 685.337 L787.916 685.337 L788.475 685.337 L789.034 685.337 L789.594 685.337 L790.153 685.337 L790.712 685.337 L791.271 685.337 L791.831 685.337 L792.39 685.337 L792.949 685.337 L793.508 685.337 L794.068 685.337 L794.627 685.337 L795.186 685.337 L795.745 685.337 L796.305 685.337 L796.864 685.337 L797.423 685.337 L797.982 685.337 L798.542 685.337 L799.101 685.337 L799.66 685.337 L800.219 685.337 L800.779 685.337 L801.338 685.337 L801.897 685.337 L802.456 685.337 L803.016 685.337 L803.575 685.337 L804.134 685.337 L804.693 685.337 L805.253 685.337 L805.812 685.337 L806.371 685.337 L806.931 685.337 L807.49 685.337 L808.049 685.337 L808.608 685.337 L809.168 685.337 L809.727 685.337 L810.286 685.337 L810.845 685.337 L811.405 685.337 L811.964 685.337 L812.523 685.337 L813.082 685.337 L813.642 685.337 L814.201 685.337 L814.76 685.337 L815.319 685.337 L815.879 685.337 L816.438 685.337 L816.997 685.337 L817.556 685.337 L818.116 685.337 L818.675 685.337 L819.234 685.337 L819.793 685.337 L820.353 685.337 L820.912 685.337 L821.471 685.337 L822.03 685.337 L822.59 685.337 L823.149 685.337 L823.708 685.337 L824.267 685.337 L824.827 685.337 L825.386 685.337 L825.945 685.337 L826.504 685.337 L827.064 685.337 L827.623 685.337 L828.182 685.337 L828.741 685.337 L829.301 685.337 L829.86 685.337 L830.419 685.337 L830.978 685.337 L831.538 685.337 L832.097 685.337 L832.656 685.337 L833.215 685.337 L833.775 685.337 L834.334 685.337 L834.893 685.337 L835.452 685.337 L836.012 685.337 L836.571 685.337 L837.13 685.337 L837.689 685.337 L838.249 685.337 L838.808 685.337 L839.367 685.337 L839.926 685.337 L840.486 685.337 L841.045 685.337 L841.604 685.337 L842.163 685.337 L842.723 685.337 L843.282 685.337 L843.841 685.337 L844.4 685.337 L844.96 685.337 L845.519 685.337 L846.078 685.337 L846.637 685.337 L847.197 685.337 L847.756 685.337 L848.315 685.337 L848.874 685.337 L849.434 685.337 L849.993 685.337 L850.552 685.337 L851.111 685.337 L851.671 685.337 L852.23 685.337 L852.789 685.337 L853.348 685.337 L853.908 685.337 L854.467 685.337 L855.026 685.337 L855.585 685.337 L856.145 685.337 L856.704 685.337 L857.263 685.337 L857.822 685.337 L858.382 685.337 L858.941 685.337 L859.5 685.337 L860.059 685.337 L860.619 685.337 L861.178 685.337 L861.737 685.337 L862.296 685.337 L862.856 685.337 L863.415 685.337 L863.974 685.337 L864.533 685.337 L865.093 685.337 L865.652 685.337 L866.211 685.337 L866.77 685.337 L867.33 685.337 L867.889 685.337 L868.448 685.337 L869.007 685.337 L869.567 685.337 L870.126 685.337 L870.685 685.337 L871.244 685.337 L871.804 685.337 L872.363 685.337 L872.922 685.337 L873.481 685.337 L874.041 685.337 L874.6 685.337 L875.159 685.337 L875.718 685.337 L876.278 685.337 L876.837 685.337 L877.396 685.337 L877.955 685.337 L878.515 685.337 L879.074 685.337 L879.633 685.337 L880.192 685.337 L880.752 685.337 L881.311 685.337 L881.87 685.337 L882.429 685.337 L882.989 685.337 L883.548 685.337 L884.107 685.337 L884.666 685.337 L885.226 685.337 L885.785 685.337 L886.344 685.337 L886.903 685.337 L887.463 685.337 L888.022 685.337 L888.581 685.337 L889.14 685.337 L889.7 685.337 L890.259 685.337 L890.818 685.337 L891.377 685.337 L891.937 685.337 L892.496 685.337 L893.055 685.337 L893.614 685.337 L894.174 685.337 L894.733 685.337 L895.292 685.337 L895.851 685.337 L896.411 685.337 L896.97 685.337 L897.529 685.337 L898.088 685.337 L898.648 685.337 L899.207 685.337 L899.766 685.337 L900.325 685.337 L900.885 685.337 L901.444 685.337 L902.003 685.337 L902.562 685.337 L903.122 685.337 L903.681 685.337 L904.24 685.337 L904.799 685.337 L905.359 685.337 L905.918 685.337 L906.477 685.337 L907.036 685.337 L907.596 685.337 L908.155 685.337 L908.714 685.337 L909.273 685.337 L909.833 685.337 L910.392 685.337 L910.951 685.337 L911.51 685.337 L912.07 685.337 L912.629 685.337 L913.188 685.337 L913.747 685.337 L914.307 685.337 L914.866 685.337 L915.425 685.337 L915.984 685.337 L916.544 685.337 L917.103 685.337 L917.662 685.337 L918.221 685.337 L918.781 685.337 L919.34 685.337 L919.899 685.337 L920.458 685.337 L921.018 685.337 L921.577 685.337 L922.136 685.337 L922.695 685.337 L923.255 685.337 L923.814 685.337 L924.373 685.337 L924.932 685.337 L925.492 685.337 L926.051 685.337 L926.61 685.337 L927.169 685.337 L927.729 685.337 L928.288 685.337 L928.847 685.337 L929.406 685.337 L929.966 685.337 L930.525 685.337 L931.084 685.337 L931.644 685.337 L932.203 685.337 L932.762 685.337 L933.321 685.337 L933.881 685.337 L934.44 685.337 L934.999 685.337 L935.558 685.337 L936.118 685.337 L936.677 685.337 L937.236 685.337 L937.795 685.337 L938.355 685.337 L938.914 685.337 L939.473 685.337 L940.032 685.337 L940.592 685.337 L941.151 685.337 L941.71 685.337 L942.269 685.337 L942.829 685.337 L943.388 685.337 L943.947 685.337 L944.506 685.337 L945.066 685.337 L945.625 685.337 L946.184 685.337 L946.743 685.337 L947.303 685.337 L947.862 685.337 L948.421 685.337 L948.98 685.337 L949.54 685.337 L950.099 685.337 L950.658 685.337 L951.217 685.337 L951.777 685.337 L952.336 685.337 L952.895 685.337 L953.454 685.337 L954.014 685.337 L954.573 685.337 L955.132 685.337 L955.691 685.337 L956.251 685.337 L956.81 685.337 L957.369 685.337 L957.928 685.337 L958.488 685.337 L959.047 685.337 L959.606 685.337 L960.165 685.337 L960.725 685.337 L961.284 685.337 L961.843 685.337 L962.402 685.337 L962.962 685.337 L963.521 685.337 L964.08 685.337 L964.639 685.337 L965.199 685.337 L965.758 685.337 L966.317 685.337 L966.876 685.337 L967.436 685.337 L967.995 685.337 L968.554 685.337 L969.113 685.337 L969.673 685.337 L970.232 685.337 L970.791 685.337 L971.35 685.337 L971.91 685.337 L972.469 685.337 L973.028 685.337 L973.587 685.337 L974.147 685.337 L974.706 685.337 L975.265 685.337 L975.824 685.337 L976.384 685.337 L976.943 685.337 L977.502 685.337 L978.061 685.337 L978.621 685.337 L979.18 685.337 L979.739 685.337 L980.298 685.337 L980.858 685.337 L981.417 685.337 L981.976 685.337 L982.535 685.337 L983.095 685.337 L983.654 685.337 L984.213 685.337 L984.772 685.337 L985.332 685.337 L985.891 685.337 L986.45 685.337 L987.009 685.337 L987.569 685.337 L988.128 685.337 L988.687 685.337 L989.246 685.337 L989.806 685.337 L990.365 685.337 L990.924 685.337 L991.483 685.337 L992.043 685.337 L992.602 685.337 L993.161 685.337 L993.72 685.337 L994.28 685.337 L994.839 685.337 L995.398 685.337 L995.957 685.337 L996.517 685.337 L997.076 685.337 L997.635 685.337 L998.194 685.337 L998.754 685.337 L999.313 685.337 L999.872 685.337 L1000.43 685.337 L1000.99 685.337 L1001.55 685.337 L1002.11 685.337 L1002.67 685.337 L1003.23 685.337 L1003.79 685.337 L1004.35 685.337 L1004.91 685.337 L1005.46 685.337 L1006.02 685.337 L1006.58 685.337 L1007.14 685.337 L1007.7 685.337 L1008.26 685.337 L1008.82 685.337 L1009.38 685.337 L1009.94 685.337 L1010.5 685.337 L1011.06 685.337 L1011.62 685.337 L1012.18 685.337 L1012.73 685.337 L1013.29 685.337 L1013.85 685.337 L1014.41 685.337 L1014.97 685.337 L1015.53 685.337 L1016.09 685.337 L1016.65 685.337 L1017.21 685.337 L1017.77 685.337 L1018.33 685.337 L1018.89 685.337 L1019.45 685.337 L1020.01 685.337 L1020.56 685.337 L1021.12 685.337 L1021.68 685.337 L1022.24 685.337 L1022.8 685.337 L1023.36 685.337 L1023.92 685.337 L1024.48 685.337 L1025.04 685.337 L1025.6 685.337 L1026.16 685.337 L1026.72 685.337 L1027.28 685.337 L1027.83 685.337 L1028.39 685.337 L1028.95 685.337 L1029.51 685.337 L1030.07 685.337 L1030.63 685.337 L1031.19 685.337 L1031.75 685.337 L1032.31 685.337 L1032.87 685.337 L1033.43 685.337 L1033.99 685.337 L1034.55 685.337 L1035.1 685.337 L1035.66 685.337 L1036.22 685.337 L1036.78 685.337 L1037.34 685.337 L1037.9 685.337 L1038.46 685.337 L1039.02 685.337 L1039.58 685.337 L1040.14 685.337 L1040.7 685.337 L1041.26 685.337 L1041.82 685.337 L1042.38 685.337 L1042.93 685.337 L1043.49 685.337 L1044.05 685.337 L1044.61 685.337 L1045.17 685.337 L1045.73 685.337 L1046.29 685.337 L1046.85 685.337 L1047.41 685.337 L1047.97 685.337 L1048.53 685.337 L1049.09 685.337 L1049.65 685.337 L1050.2 685.337 L1050.76 685.337 L1051.32 685.337 L1051.88 685.337 L1052.44 685.337 L1053 685.337 L1053.56 685.337 L1054.12 685.337 L1054.68 685.337 L1055.24 685.337 L1055.8 685.337 L1056.36 685.337 L1056.92 685.337 L1057.48 685.337 L1058.03 685.337 L1058.59 685.337 L1059.15 685.337 L1059.71 685.337 L1060.27 685.337 L1060.83 685.337 L1061.39 685.337 L1061.95 685.337 L1062.51 685.337 L1063.07 685.337 L1063.63 685.337 L1064.19 685.337 L1064.75 685.337 L1065.3 685.337 L1065.86 685.337 L1066.42 685.337 L1066.98 685.337 L1067.54 685.337 L1068.1 685.337 L1068.66 685.337 L1069.22 685.337 L1069.78 685.337 L1070.34 685.337 L1070.9 685.337 L1071.46 685.337 L1072.02 685.337 L1072.57 685.337 L1073.13 685.337 L1073.69 685.337 L1074.25 685.337 L1074.81 685.337 L1075.37 685.337 L1075.93 685.337 L1076.49 685.337 L1077.05 685.337 L1077.61 685.337 L1078.17 685.337 L1078.73 685.337 L1079.29 685.337 L1079.85 685.337 L1080.4 685.337 L1080.96 685.337 L1081.52 685.337 L1082.08 685.337 L1082.64 685.337 L1083.2 685.337 L1083.76 685.337 L1084.32 685.337 L1084.88 685.337 L1085.44 685.337 L1086 685.337 L1086.56 685.337 L1087.12 685.337 L1087.67 685.337 L1088.23 685.337 L1088.79 685.337 L1089.35 685.337 L1089.91 685.337 L1090.47 685.337 L1091.03 685.337 L1091.59 685.337 L1092.15 685.337 L1092.71 685.337 L1093.27 685.337 L1093.83 685.337 L1094.39 685.337 L1094.94 685.337 L1095.5 685.337 L1096.06 685.337 L1096.62 685.337 L1097.18 685.337 L1097.74 685.337 L1098.3 685.337 L1098.86 685.337 L1099.42 685.337 L1099.98 685.337 L1100.54 685.337 L1101.1 685.337 L1101.66 685.337 L1102.22 685.337 L1102.77 685.337 L1103.33 685.337 L1103.89 685.337 L1104.45 685.337 L1105.01 685.337 L1105.57 685.337 L1106.13 685.337 L1106.69 685.337 L1107.25 685.337 L1107.81 685.337 L1108.37 685.337 L1108.93 685.337 L1109.49 685.337 L1110.04 685.337 L1110.6 685.337 L1111.16 685.337 L1111.72 685.337 L1112.28 685.337 L1112.84 685.337 L1113.4 685.337 L1113.96 685.337 L1114.52 685.337 L1115.08 685.337 L1115.64 685.337 L1116.2 685.337 L1116.76 685.337 L1117.31 685.337 L1117.87 685.337 L1118.43 685.337 L1118.99 685.337 L1119.55 685.337 L1120.11 685.337 L1120.67 685.337 L1121.23 685.337 L1121.79 685.337 L1122.35 685.337 L1122.91 685.337 L1123.47 685.337 L1124.03 685.337 L1124.59 685.337 L1125.14 685.337 L1125.7 685.337 L1126.26 685.337 L1126.82 685.337 L1127.38 685.337 L1127.94 685.337 L1128.5 685.337 L1129.06 685.337 L1129.62 685.337 L1130.18 685.337 L1130.74 685.337 L1131.3 685.337 L1131.86 685.337 L1132.41 685.337 L1132.97 685.337 L1133.53 685.337 L1134.09 685.337 L1134.65 685.337 L1135.21 685.337 L1135.77 685.337 L1136.33 685.337 L1136.89 685.337 L1137.45 685.337 L1138.01 685.337 L1138.57 685.337 L1139.13 685.337 L1139.68 685.337 L1140.24 685.337 L1140.8 685.337 L1141.36 685.337 L1141.92 685.337 L1142.48 685.337 L1143.04 685.337 L1143.6 685.337 L1144.16 685.337 L1144.72 685.337 L1145.28 685.337 L1145.84 685.337 L1146.4 685.337 L1146.96 685.337 L1147.51 685.337 L1148.07 685.337 L1148.63 685.337 L1149.19 685.337 L1149.75 685.337 L1150.31 685.337 L1150.87 685.337 L1151.43 685.337 L1151.99 685.337 L1152.55 685.337 L1153.11 685.337 L1153.67 685.337 L1154.23 685.337 L1154.78 685.337 L1155.34 685.337 L1155.9 685.337 L1156.46 685.337 L1157.02 685.337 L1157.58 685.337 L1158.14 685.337 L1158.7 685.337 L1159.26 685.337 L1159.82 685.337 L1160.38 685.337 L1160.94 685.337 L1161.5 685.337 L1162.05 685.337 L1162.61 685.337 L1163.17 685.337 L1163.73 685.337 L1164.29 685.337 L1164.85 685.337 L1165.41 685.337 L1165.97 685.337 L1166.53 685.337 L1167.09 685.337 L1167.65 685.337 L1168.21 685.337 L1168.77 685.337 L1169.33 685.337 L1169.88 685.337 L1170.44 685.337 L1171 685.337 L1171.56 685.337 L1172.12 685.337 L1172.68 685.337 L1173.24 685.337 L1173.8 685.337 L1174.36 685.337 L1174.92 685.337 L1175.48 685.337 L1176.04 685.337 L1176.6 685.337 L1177.15 685.337 L1177.71 685.337 L1178.27 685.337 L1178.83 685.337 L1179.39 685.337 L1179.95 685.337 L1180.51 685.337 L1181.07 685.337 L1181.63 685.337 L1182.19 685.337 L1182.75 685.337 L1183.31 685.337 L1183.87 685.337 L1184.43 685.337 L1184.98 685.337 L1185.54 685.337 L1186.1 685.337 L1186.66 685.337 L1187.22 685.337 L1187.78 685.337 L1188.34 685.337 L1188.9 685.337 L1189.46 685.337 L1190.02 685.337 L1190.58 685.337 L1191.14 685.337 L1191.7 685.337 L1192.25 685.337 L1192.81 685.337 L1193.37 685.337 L1193.93 685.337 L1194.49 685.337 L1195.05 685.337 L1195.61 685.337 L1196.17 685.337 L1196.73 685.337 L1197.29 685.337 L1197.85 685.337 L1198.41 685.337 L1198.97 685.337 L1199.52 685.337 L1200.08 685.337 L1200.64 685.337 L1201.2 685.337 L1201.76 685.337 L1202.32 685.337 L1202.88 685.337 L1203.44 685.337 L1204 685.337 L1204.56 685.337 L1205.12 685.337 L1205.68 685.337 L1206.24 685.337 L1206.8 685.337 L1207.35 685.337 L1207.91 685.337 L1208.47 685.337 L1209.03 685.337 L1209.59 685.337 L1210.15 685.337 L1210.71 685.337 L1211.27 685.337 L1211.83 685.337 L1212.39 685.337 L1212.95 685.337 L1213.51 685.337 L1214.07 685.337 L1214.62 685.337 L1215.18 685.337 L1215.74 685.337 L1216.3 685.337 L1216.86 685.337 L1217.42 685.337 L1217.98 685.337 L1218.54 685.337 L1219.1 685.337 L1219.66 685.337 L1220.22 685.337 L1220.78 685.337 L1221.34 685.337 L1221.89 685.337 L1222.45 685.337 L1223.01 685.337 L1223.57 685.337 L1224.13 685.337 L1224.69 685.337 L1225.25 685.337 L1225.81 685.337 L1226.37 685.337 L1226.93 685.337 L1227.49 685.337 L1228.05 685.337 L1228.61 685.337 L1229.17 685.337 L1229.72 685.337 L1230.28 685.337 L1230.84 685.337 L1231.4 685.337 L1231.96 685.337 L1232.52 685.337 L1233.08 685.337 L1233.64 685.337 L1234.2 685.337 L1234.76 685.337 L1235.32 685.337 L1235.88 685.337 L1236.44 685.337 L1236.99 685.337 L1237.55 685.337 L1238.11 685.337 L1238.67 685.337 L1239.23 685.337 L1239.79 685.337 L1240.35 685.337 L1240.91 685.337 L1241.47 685.337 L1242.03 685.337 L1242.59 685.337 L1243.15 685.337 L1243.71 685.337 L1244.26 685.337 L1244.82 685.337 L1245.38 685.337 L1245.94 685.337 L1246.5 685.337 L1247.06 685.337 L1247.62 685.337 L1248.18 685.337 L1248.74 685.337 L1249.3 685.337 L1249.86 685.337 L1250.42 685.337 L1250.98 685.337 L1251.54 685.337 L1252.09 685.337 L1252.65 685.337 L1253.21 685.337 L1253.77 685.337 L1254.33 685.337 L1254.89 685.337 L1255.45 685.337 L1256.01 685.337 L1256.57 685.337 L1257.13 685.337 L1257.69 685.337 L1258.25 685.337 L1258.81 685.337 L1259.36 685.337 L1259.92 685.337 L1260.48 685.337 L1261.04 685.337 L1261.6 685.337 L1262.16 685.337 L1262.72 685.337 L1263.28 685.337 L1263.84 685.337 L1264.4 685.337 L1264.96 685.337 L1265.52 685.337 L1266.08 685.337 L1266.63 685.337 L1267.19 685.337 L1267.75 685.337 L1268.31 685.337 L1268.87 685.337 L1269.43 685.337 L1269.99 685.337 L1270.55 685.337 L1271.11 685.337 L1271.67 685.337 L1272.23 685.337 L1272.79 685.337 L1273.35 685.337 L1273.91 685.337 L1274.46 685.337 L1275.02 685.337 L1275.58 685.337 L1276.14 685.337 L1276.7 685.337 L1277.26 685.337 L1277.82 685.337 L1278.38 685.337 L1278.94 685.337 L1279.5 685.337 L1280.06 685.337 L1280.62 685.337 L1281.18 685.337 L1281.73 685.337 L1282.29 685.337 L1282.85 685.337 L1283.41 685.337 L1283.97 685.337 L1284.53 685.337 L1285.09 685.337 L1285.65 685.337 L1286.21 685.337 L1286.77 685.337 L1287.33 685.337 L1287.89 685.337 L1288.45 685.337 L1289 685.337 L1289.56 685.337 L1290.12 685.337 L1290.68 685.337 L1291.24 685.337 L1291.8 685.337 L1292.36 685.337 L1292.92 685.337 L1293.48 685.337 L1294.04 685.337 L1294.6 685.337 L1295.16 685.337 L1295.72 685.337 L1296.28 685.337 L1296.83 685.337 L1297.39 685.337 L1297.95 685.337 L1298.51 685.337 L1299.07 685.337 L1299.63 685.337 L1300.19 685.337 L1300.75 685.337 L1301.31 685.337 L1301.87 685.337 L1302.43 685.337 L1302.99 685.337 L1303.55 685.337 L1304.1 685.337 L1304.66 685.337 L1305.22 685.337 L1305.78 685.337 L1306.34 685.337 L1306.9 685.337 L1307.46 685.337 L1308.02 685.337 L1308.58 685.337 L1309.14 685.337 L1309.7 685.337 L1310.26 685.337 L1310.82 685.337 L1311.38 685.337 L1311.93 685.337 L1312.49 685.337 L1313.05 685.337 L1313.61 685.337 L1314.17 685.337 L1314.73 685.337 L1315.29 685.337 L1315.85 685.337 L1316.41 685.337 L1316.97 685.337 L1317.53 685.337 L1318.09 685.337 L1318.65 685.337 L1319.2 685.337 L1319.76 685.337 L1320.32 685.337 L1320.88 685.337 L1321.44 685.337 L1322 685.337 L1322.56 685.337 L1323.12 685.337 L1323.68 685.337 L1324.24 685.337 L1324.8 685.337 L1325.36 685.337 L1325.92 685.337 L1326.47 685.337 L1327.03 685.337 L1327.59 685.337 L1328.15 685.337 L1328.71 685.337 L1329.27 685.337 L1329.83 685.337 L1330.39 685.337 L1330.95 685.337 L1331.51 685.337 L1332.07 685.337 L1332.63 685.337 L1333.19 685.337 L1333.75 685.337 L1334.3 685.337 L1334.86 685.337 L1335.42 685.337 L1335.98 685.337 L1336.54 685.337 L1337.1 685.337 L1337.66 685.337 L1338.22 685.337 L1338.78 685.337 L1339.34 685.337 L1339.9 685.337 L1340.46 685.337 L1341.02 685.337 L1341.57 685.337 L1342.13 685.337 L1342.69 685.337 L1343.25 685.337 L1343.81 685.337 L1344.37 685.337 L1344.93 685.337 L1345.49 685.337 L1346.05 685.337 L1346.61 685.337 L1347.17 685.337 L1347.73 685.337 L1348.29 685.337 L1348.84 685.337 L1349.4 685.337 L1349.96 685.337 L1350.52 685.337 L1351.08 685.337 L1351.64 685.337 L1352.2 685.337 L1352.76 685.337 L1353.32 685.337 L1353.88 685.337 L1354.44 685.337 L1355 685.337 L1355.56 685.337 L1356.12 685.337 L1356.67 685.337 L1357.23 685.337 L1357.79 685.337 L1358.35 685.337 L1358.91 685.337 L1359.47 685.337 L1360.03 685.337 L1360.59 685.337 L1361.15 685.337 L1361.71 685.337 L1362.27 685.337 L1362.83 685.337 L1363.39 685.337 L1363.94 685.337 L1364.5 685.337 L1365.06 685.337 L1365.62 685.337 L1366.18 685.337 L1366.74 685.337 L1367.3 685.337 L1367.86 685.337 L1368.42 685.337 L1368.98 685.337 L1369.54 685.337 L1370.1 685.337 L1370.66 685.337 L1371.21 685.337 L1371.77 685.337 L1372.33 685.337 L1372.89 685.337 L1373.45 685.337 L1374.01 685.337 L1374.57 685.337 L1375.13 685.337 L1375.69 685.337 L1376.25 685.337 L1376.81 685.337 L1377.37 685.337 L1377.93 685.337 L1378.49 685.337 L1379.04 685.337 L1379.6 685.337 L1380.16 685.337 L1380.72 685.337 L1381.28 685.337 L1381.84 685.337 L1382.4 685.337 L1382.96 685.337 L1383.52 685.337 L1384.08 685.337 L1384.64 685.337 L1385.2 685.337 L1385.76 685.337 L1386.31 685.337 L1386.87 685.337 L1387.43 685.337 L1387.99 685.337 L1388.55 685.337 L1389.11 685.337 L1389.67 685.337 L1390.23 685.337 L1390.79 685.337 L1391.35 685.337 L1391.91 685.337 L1392.47 685.337 L1393.03 685.337 L1393.58 685.337 L1394.14 685.337 L1394.7 685.337 L1395.26 685.337 L1395.82 685.337 L1396.38 685.337 L1396.94 685.337 L1397.5 685.337 L1398.06 685.337 L1398.62 685.337 L1399.18 685.337 L1399.74 685.337 L1400.3 685.337 L1400.86 685.337 L1401.41 685.337 L1401.97 685.337 L1402.53 685.337 L1403.09 685.337 L1403.65 685.337 L1404.21 685.337 L1404.77 685.337 L1405.33 685.337 L1405.89 685.337 L1406.45 685.337 L1407.01 685.337 L1407.57 685.337 L1408.13 685.337 L1408.68 685.337 L1409.24 685.337 L1409.8 685.337 L1410.36 685.337 L1410.92 685.337 L1411.48 685.337 L1412.04 685.337 L1412.6 685.337 L1413.16 685.337 L1413.72 685.337 L1414.28 685.337 L1414.84 685.337 L1415.4 685.337 L1415.95 685.337 L1416.51 685.337 L1417.07 685.337 L1417.63 685.337 L1418.19 685.337 L1418.75 685.337 L1419.31 685.337 L1419.87 685.337 L1420.43 685.337 L1420.99 685.337 L1421.55 685.337 L1422.11 685.337 L1422.67 685.337 L1423.23 685.337 L1423.78 685.337 L1424.34 685.337 L1424.9 685.337 L1425.46 685.337 L1426.02 685.337 L1426.58 685.337 L1427.14 685.337 L1427.7 685.337 L1428.26 685.337 L1428.82 685.337 L1429.38 685.337 L1429.94 685.337 L1430.5 685.337 L1431.05 685.337 L1431.61 685.337 L1432.17 685.337 L1432.73 685.337 L1433.29 685.337 L1433.85 685.337 L1434.41 685.337 L1434.97 685.337 L1435.53 685.337 L1436.09 685.337 L1436.65 685.337 L1437.21 685.337 L1437.77 685.337 L1438.33 685.337 L1438.88 685.337 L1439.44 685.337 L1440 685.337 L1440.56 685.337 L1441.12 685.337 L1441.68 685.337 L1442.24 685.337 L1442.8 685.337 L1443.36 685.337 L1443.92 685.337 L1444.48 685.337 L1445.04 685.337 L1445.6 685.337 L1446.15 685.337 L1446.71 685.337 L1447.27 685.337 L1447.83 685.337 L1448.39 685.337 L1448.95 685.337 L1449.51 685.337 L1450.07 685.337 L1450.63 685.337 L1451.19 685.337 L1451.75 685.337 L1452.31 685.337 L1452.87 685.337 L1453.42 685.337 L1453.98 685.337 L1454.54 685.337 L1455.1 685.337 L1455.66 685.337 L1456.22 685.337 L1456.78 685.337 L1457.34 685.337 L1457.9 685.337 L1458.46 685.337 L1459.02 685.337 L1459.58 685.337 L1460.14 685.337 L1460.7 685.337 L1461.25 685.337 L1461.81 685.337 L1462.37 685.337 L1462.93 685.337 L1463.49 685.337 L1464.05 685.337 L1464.61 685.337 L1465.17 685.337 L1465.73 685.337 L1466.29 685.337 L1466.85 685.337 L1467.41 685.337 L1467.97 685.337 L1468.52 685.337 L1469.08 685.337 L1469.64 685.337 L1470.2 685.337 L1470.76 685.337 L1471.32 685.337 L1471.88 685.337 L1472.44 685.337 L1473 685.337 L1473.56 685.337 L1474.12 685.337 L1474.68 685.337 L1475.24 685.337 L1475.79 685.337 L1476.35 685.337 L1476.91 685.337 L1477.47 685.337 L1478.03 685.337 L1478.59 685.337 L1479.15 685.337 L1479.71 685.337 L1480.27 685.337 L1480.83 685.337 L1481.39 685.337 L1481.95 685.337 L1482.51 685.337 L1483.07 685.337 L1483.62 685.337 L1484.18 685.337 L1484.74 685.337 L1485.3 685.337 L1485.86 685.337 L1486.42 685.337 L1486.98 685.337 L1487.54 685.337 L1488.1 685.337 L1488.66 685.337 L1489.22 685.337 L1489.78 685.337 L1490.34 685.337 L1490.89 685.337 L1491.45 685.337 L1492.01 685.337 L1492.57 685.337 L1493.13 685.337 L1493.69 685.337 L1494.25 685.337 L1494.81 685.337 L1495.37 685.337 L1495.93 685.337 L1496.49 685.337 L1497.05 685.337 L1497.61 685.337 L1498.16 685.337 L1498.72 685.337 L1499.28 685.337 L1499.84 685.337 L1500.4 685.337 L1500.96 685.337 L1501.52 685.337 L1502.08 685.337 L1502.64 685.337 L1503.2 685.337 L1503.76 685.337 L1504.32 685.337 L1504.88 685.337 L1505.44 685.337 L1505.99 685.337 L1506.55 685.337 L1507.11 685.337 L1507.67 685.337 L1508.23 685.337 L1508.79 685.337 L1509.35 685.337 L1509.91 685.337 L1510.47 685.337 L1511.03 685.337 L1511.59 685.337 L1512.15 685.337 L1512.71 685.337 L1513.26 685.337 L1513.82 685.337 L1514.38 685.337 L1514.94 685.337 L1515.5 685.337 L1516.06 685.337 L1516.62 685.337 L1517.18 685.337 L1517.74 685.337 L1518.3 685.337 L1518.86 685.337 L1519.42 685.337 L1519.98 685.337 L1520.53 685.337 L1521.09 685.337 L1521.65 685.337 L1522.21 685.337 L1522.77 685.337 L1523.33 685.337 L1523.89 685.337 L1524.45 685.337 L1525.01 685.337 L1525.57 685.337 L1526.13 685.337 L1526.69 685.337 L1527.25 685.337 L1527.81 685.337 L1528.36 685.337 L1528.92 685.337 L1529.48 685.337 L1530.04 685.337 L1530.6 685.337 L1531.16 685.337 L1531.72 685.337 L1532.28 685.337 L1532.84 685.337 L1533.4 685.337 L1533.96 685.337 L1534.52 685.337 L1535.08 685.337 L1535.63 685.337 L1536.19 685.337 L1536.75 685.337 L1537.31 685.337 L1537.87 685.337 L1538.43 685.337 L1538.99 685.337 L1539.55 685.337 L1540.11 685.337 L1540.67 685.337 L1541.23 685.337 L1541.79 685.337 L1542.35 685.337 L1542.9 685.337 L1543.46 685.337 L1544.02 685.337 L1544.58 685.337 L1545.14 685.337 L1545.7 685.337 L1546.26 685.337 L1546.82 685.337 L1547.38 685.337 L1547.94 685.337 L1548.5 685.337 L1549.06 685.337 L1549.62 685.337 L1550.18 685.337 L1550.73 685.337 L1551.29 685.337 L1551.85 685.337 L1552.41 685.337 L1552.97 685.337 L1553.53 685.337 L1554.09 685.337 L1554.65 685.337 L1555.21 685.337 L1555.77 685.337 L1556.33 685.337 L1556.89 685.337 L1557.45 685.337 L1558 685.337 L1558.56 685.337 L1559.12 685.337 L1559.68 685.337 L1560.24 685.337 L1560.8 685.337 L1561.36 685.337 L1561.92 685.337 L1562.48 685.337 L1563.04 685.337 L1563.6 685.337 L1564.16 685.337 L1564.72 685.337 L1565.28 685.337 L1565.83 685.337 L1566.39 685.337 L1566.95 685.337 L1567.51 685.337 L1568.07 685.337 L1568.63 685.337 L1569.19 685.337 L1569.75 685.337 L1570.31 685.337 L1570.87 685.337 L1571.43 685.337 L1571.99 685.337 L1572.55 685.337 L1573.1 685.337 L1573.66 685.337 L1574.22 685.337 L1574.78 685.337 L1575.34 685.337 L1575.9 685.337 L1576.46 685.337 L1577.02 685.337 L1577.58 685.337 L1578.14 685.337 L1578.7 685.337 L1579.26 685.337 L1579.82 685.337 L1580.37 685.337 L1580.93 685.337 L1581.49 685.337 L1582.05 685.337 L1582.61 685.337 L1583.17 685.337 L1583.73 685.337 L1584.29 685.337 L1584.85 685.337 L1585.41 685.337 L1585.97 685.337 L1586.53 685.337 L1587.09 685.337 L1587.65 685.337 L1588.2 685.337 L1588.76 685.337 L1589.32 685.337 L1589.88 685.337 L1590.44 685.337 L1591 685.337 L1591.56 685.337 L1592.12 685.337 L1592.68 685.337 L1593.24 685.337 L1593.8 685.337 L1594.36 685.337 L1594.92 685.337 L1595.47 685.337 L1596.03 685.337 L1596.59 685.337 L1597.15 685.337 L1597.71 685.337 L1598.27 685.337 L1598.83 685.337 L1599.39 685.337 L1599.95 685.337 L1600.51 685.337 L1601.07 685.337 L1601.63 685.337 L1602.19 685.337 L1602.74 685.337 L1603.3 685.337 L1603.86 685.337 L1604.42 685.337 L1604.98 685.337 L1605.54 685.337 L1606.1 685.337 L1606.66 685.337 L1607.22 685.337 L1607.78 685.337 L1608.34 685.337 L1608.9 685.337 L1609.46 685.337 L1610.02 685.337 L1610.57 685.337 L1611.13 685.337 L1611.69 685.337 L1612.25 685.337 L1612.81 685.337 L1613.37 685.337 L1613.93 685.337 L1614.49 685.337 L1615.05 685.337 L1615.61 685.337 L1616.17 685.337 L1616.73 685.337 L1617.29 685.337 L1617.84 685.337 L1618.4 685.337 L1618.96 685.337 L1619.52 685.337 L1620.08 685.337 L1620.64 685.337 L1621.2 685.337 L1621.76 685.337 L1622.32 685.337 L1622.88 685.337 L1623.44 685.337 L1624 685.337 L1624.56 685.337 L1625.11 685.337 L1625.67 685.337 L1626.23 685.337 L1626.79 685.337 L1627.35 685.337 L1627.91 685.337 L1628.47 685.337 L1629.03 685.337 L1629.59 685.337 L1630.15 685.337 L1630.71 685.337 L1631.27 685.337 L1631.83 685.337 L1632.39 685.337 L1632.94 685.337 L1633.5 685.337 L1634.06 685.337 L1634.62 685.337 L1635.18 685.337 L1635.74 685.337 L1636.3 685.337 L1636.86 685.337 L1637.42 685.337 L1637.98 685.337 L1638.54 685.337 L1639.1 685.337 L1639.66 685.337 L1640.21 685.337 L1640.77 685.337 L1641.33 685.337 L1641.89 685.337 L1642.45 685.337 L1643.01 685.337 L1643.57 685.337 L1644.13 685.337 L1644.69 685.337 L1645.25 685.337 L1645.81 685.337 L1646.37 685.337 L1646.93 685.337 L1647.48 685.337 L1648.04 685.337 L1648.6 685.337 L1649.16 685.337 L1649.72 685.337 L1650.28 685.337 L1650.84 685.337 L1651.4 685.337 L1651.96 685.337 L1652.52 685.337 L1653.08 685.337 L1653.64 685.337 L1654.2 685.337 L1654.76 685.337 L1655.31 685.337 L1655.87 685.337 L1656.43 685.337 L1656.99 685.337 L1657.55 685.337 L1658.11 685.337 L1658.67 685.337 L1659.23 685.337 L1659.79 685.337 L1660.35 685.337 L1660.91 685.337 L1661.47 685.337 L1662.03 685.337 L1662.58 685.337 L1663.14 685.337 L1663.7 685.337 L1664.26 685.337 L1664.82 685.337 L1665.38 685.337 L1665.94 685.337 L1666.5 685.337 L1667.06 685.337 L1667.62 685.337 L1668.18 685.337 L1668.74 685.337 L1669.3 685.337 L1669.85 685.337 L1670.41 685.337 L1670.97 685.337 L1671.53 685.337 L1672.09 685.337 L1672.65 685.337 L1673.21 685.337 L1673.77 685.337 L1674.33 685.337 L1674.89 685.337 L1675.45 685.337 L1676.01 685.337 L1676.57 685.337 L1677.13 685.337 L1677.68 685.337 L1678.24 685.337 L1678.8 685.337 L1679.36 685.337 L1679.92 685.337 L1680.48 685.337 L1681.04 685.337 L1681.6 685.337 L1682.16 685.337 L1682.72 685.337 L1683.28 685.337 L1683.84 685.337 L1684.4 685.337 L1684.95 685.337 L1685.51 685.337 L1686.07 685.337 L1686.63 685.337 L1687.19 685.337 L1687.75 685.337 L1688.31 685.337 L1688.87 685.337 L1689.43 685.337 L1689.99 685.337 L1690.55 685.337 L1691.11 685.337 L1691.67 685.337 L1692.23 685.337 L1692.78 685.337 L1693.34 685.337 L1693.9 685.337 L1694.46 685.337 L1695.02 685.337 L1695.58 685.337 L1696.14 685.337 L1696.7 685.337 L1697.26 685.337 L1697.82 685.337 L1698.38 685.337 L1698.94 685.337 L1699.5 685.337 L1700.05 685.337 L1700.61 685.337 L1701.17 685.337 L1701.73 685.337 L1702.29 685.337 L1702.85 685.337 L1703.41 685.337 L1703.97 685.337 L1704.53 685.337 L1705.09 685.337 L1705.65 685.337 L1706.21 685.337 L1706.77 685.337 L1707.32 685.337 L1707.88 685.337 L1708.44 685.337 L1709 685.337 L1709.56 685.337 L1710.12 685.337 L1710.68 685.337 L1711.24 685.337 L1711.8 685.337 L1712.36 685.337 L1712.92 685.337 L1713.48 685.337 L1714.04 685.337 L1714.6 685.337 L1715.15 685.337 L1715.71 685.337 L1716.27 685.337 L1716.83 685.337 L1717.39 685.337 L1717.95 685.337 L1718.51 685.337 L1719.07 685.337 L1719.63 685.337 L1720.19 685.337 L1720.75 685.337 L1721.31 685.337 L1721.87 685.337 L1722.42 685.337 L1722.98 685.337 L1723.54 685.337 L1724.1 685.337 L1724.66 685.337 L1725.22 685.337 L1725.78 685.337 L1726.34 685.337 L1726.9 685.337 L1727.46 685.337 L1728.02 685.337 L1728.58 685.337 L1729.14 685.337 L1729.69 685.337 L1730.25 685.337 L1730.81 685.337 L1731.37 685.337 L1731.93 685.337 L1732.49 685.337 L1733.05 685.337 L1733.61 685.337 L1734.17 685.337 L1734.73 685.337 L1735.29 685.337 L1735.85 685.337 L1736.41 685.337 L1736.97 685.337 L1737.52 685.337 L1738.08 685.337 L1738.64 685.337 L1739.2 685.337 L1739.76 685.337 L1740.32 685.337 L1740.88 685.337 L1741.44 685.337 L1742 685.337 L1742.56 685.337 L1743.12 685.337 L1743.68 685.337 L1744.24 685.337 L1744.79 685.337 L1745.35 685.337 L1745.91 685.337 L1746.47 685.337 L1747.03 685.337 L1747.59 685.337 L1748.15 685.337 L1748.71 685.337 L1749.27 685.337 L1749.83 685.337 L1750.39 685.337 L1750.95 685.337 L1751.51 685.337 L1752.06 685.337 L1752.62 685.337 L1753.18 685.337 L1753.74 685.337 L1754.3 685.337 L1754.86 685.337 L1755.42 685.337 L1755.98 685.337 L1756.54 685.337 L1757.1 685.337 L1757.66 685.337 L1758.22 685.337 L1758.78 685.337 L1759.34 685.337 L1759.89 685.337 L1760.45 685.337 L1761.01 685.337 L1761.57 685.337 L1762.13 685.337 L1762.69 685.337 L1763.25 685.337 L1763.81 685.337 L1764.37 685.337 L1764.93 685.337 L1765.49 685.337 L1766.05 685.337 L1766.61 685.337 L1767.16 685.337 L1767.72 685.337 L1768.28 685.337 L1768.84 685.337 L1769.4 685.337 L1769.96 685.337 L1770.52 685.337 L1771.08 685.337 L1771.64 685.337 L1772.2 685.337 L1772.76 685.337 L1773.32 685.337 L1773.88 685.337 L1774.43 685.337 L1774.99 685.337 L1775.55 685.337 L1776.11 685.337 L1776.67 685.337 L1777.23 685.337 L1777.79 685.337 L1778.35 685.337 L1778.91 685.337 L1779.47 685.337 L1780.03 685.337 L1780.59 685.337 L1781.15 685.337 L1781.71 685.337 L1782.26 685.337 L1782.82 685.337 L1783.38 685.337 L1783.94 685.337 L1784.5 685.337 L1785.06 685.337 L1785.62 685.337 L1786.18 685.337 L1786.74 685.337 L1787.3 685.337 L1787.86 685.337 L1788.42 685.337 L1788.98 685.337 L1789.53 685.337 L1790.09 685.337 L1790.65 685.337 L1791.21 685.337 L1791.77 685.337 L1792.33 685.337 L1792.89 685.337 L1793.45 685.337 L1794.01 685.337 L1794.57 685.337 L1795.13 685.337 L1795.69 685.337 L1796.25 685.337 L1796.8 685.337 L1797.36 685.337 L1797.92 685.337 L1798.48 685.337 L1799.04 685.337 L1799.6 685.337 L1800.16 685.337 L1800.72 685.337 L1801.28 685.337 L1801.84 685.337 L1802.4 685.337 L1802.96 685.337 L1803.52 685.337 L1804.08 685.337 L1804.63 685.337 L1805.19 685.337 L1805.75 685.337 L1806.31 685.337 L1806.87 685.337 L1807.43 685.337 L1807.99 685.337 L1808.55 685.337 L1809.11 685.337 L1809.67 685.337 L1810.23 685.337 L1810.79 685.337 L1811.35 685.337 L1811.9 685.337 L1812.46 685.337 L1813.02 685.337 L1813.58 685.337 L1814.14 685.337 L1814.7 685.337 L1815.26 685.337 L1815.82 685.337 L1816.38 685.337 L1816.94 685.337 L1817.5 685.337 L1818.06 685.337 L1818.62 685.337 L1819.18 685.337 L1819.73 685.337 L1820.29 685.337 L1820.85 685.337 L1821.41 685.337 L1821.97 685.337 L1822.53 685.337 L1823.09 685.337 L1823.65 685.337 L1824.21 685.337 L1824.77 685.337 L1825.33 685.337 L1825.89 685.337 L1826.45 685.337 L1827 685.337 L1827.56 685.337 L1828.12 685.337 L1828.68 685.337 L1829.24 685.337 L1829.8 685.337 L1830.36 685.337 L1830.92 685.337 L1831.48 685.337 L1832.04 685.337 L1832.6 685.337 L1833.16 685.337 L1833.72 685.337 L1834.27 685.337 L1834.83 685.337 L1835.39 685.337 L1835.95 685.337 L1836.51 685.337 L1837.07 685.337 L1837.63 685.337 L1838.19 685.337 L1838.19 682.277 L1837.63 682.277 L1837.07 682.277 L1836.51 682.277 L1835.95 682.277 L1835.39 682.277 L1834.83 682.277 L1834.27 682.277 L1833.72 682.277 L1833.16 682.277 L1832.6 682.277 L1832.04 682.277 L1831.48 682.277 L1830.92 682.277 L1830.36 682.277 L1829.8 682.277 L1829.24 682.277 L1828.68 682.277 L1828.12 682.277 L1827.56 682.277 L1827 682.277 L1826.45 682.277 L1825.89 682.277 L1825.33 682.277 L1824.77 682.277 L1824.21 682.277 L1823.65 682.277 L1823.09 682.277 L1822.53 682.277 L1821.97 682.277 L1821.41 682.277 L1820.85 682.277 L1820.29 682.277 L1819.73 682.277 L1819.18 682.277 L1818.62 682.277 L1818.06 682.277 L1817.5 682.277 L1816.94 682.277 L1816.38 682.277 L1815.82 682.277 L1815.26 682.277 L1814.7 682.277 L1814.14 682.277 L1813.58 682.277 L1813.02 682.277 L1812.46 682.277 L1811.9 682.277 L1811.35 682.277 L1810.79 682.277 L1810.23 682.277 L1809.67 682.277 L1809.11 682.277 L1808.55 682.277 L1807.99 682.277 L1807.43 682.277 L1806.87 682.277 L1806.31 682.277 L1805.75 682.277 L1805.19 682.277 L1804.63 682.277 L1804.08 682.277 L1803.52 682.277 L1802.96 682.277 L1802.4 682.277 L1801.84 682.277 L1801.28 682.277 L1800.72 682.277 L1800.16 682.277 L1799.6 682.277 L1799.04 682.277 L1798.48 682.277 L1797.92 682.277 L1797.36 682.277 L1796.8 682.277 L1796.25 682.277 L1795.69 682.277 L1795.13 682.277 L1794.57 682.277 L1794.01 682.277 L1793.45 682.277 L1792.89 682.277 L1792.33 682.277 L1791.77 682.277 L1791.21 682.277 L1790.65 682.277 L1790.09 682.277 L1789.53 682.277 L1788.98 682.277 L1788.42 682.277 L1787.86 682.277 L1787.3 682.277 L1786.74 682.277 L1786.18 682.277 L1785.62 682.277 L1785.06 682.277 L1784.5 682.277 L1783.94 682.277 L1783.38 682.277 L1782.82 682.277 L1782.26 682.277 L1781.71 682.277 L1781.15 682.277 L1780.59 682.277 L1780.03 682.277 L1779.47 682.277 L1778.91 682.277 L1778.35 682.277 L1777.79 682.277 L1777.23 682.277 L1776.67 682.277 L1776.11 682.277 L1775.55 682.277 L1774.99 682.277 L1774.43 682.277 L1773.88 682.277 L1773.32 682.277 L1772.76 682.277 L1772.2 682.277 L1771.64 682.277 L1771.08 682.277 L1770.52 682.277 L1769.96 682.277 L1769.4 682.277 L1768.84 682.277 L1768.28 682.277 L1767.72 682.277 L1767.16 682.277 L1766.61 682.277 L1766.05 682.277 L1765.49 682.277 L1764.93 682.277 L1764.37 682.277 L1763.81 682.277 L1763.25 682.277 L1762.69 682.277 L1762.13 682.277 L1761.57 682.277 L1761.01 682.277 L1760.45 682.277 L1759.89 682.277 L1759.34 682.277 L1758.78 682.277 L1758.22 682.277 L1757.66 682.277 L1757.1 682.277 L1756.54 682.277 L1755.98 682.277 L1755.42 682.277 L1754.86 682.277 L1754.3 682.277 L1753.74 682.277 L1753.18 682.277 L1752.62 682.277 L1752.06 682.277 L1751.51 682.277 L1750.95 682.277 L1750.39 682.277 L1749.83 682.277 L1749.27 682.277 L1748.71 682.277 L1748.15 682.277 L1747.59 682.277 L1747.03 682.277 L1746.47 682.277 L1745.91 682.277 L1745.35 682.277 L1744.79 682.277 L1744.24 682.277 L1743.68 682.277 L1743.12 682.277 L1742.56 682.277 L1742 682.277 L1741.44 682.277 L1740.88 682.277 L1740.32 682.277 L1739.76 682.277 L1739.2 682.277 L1738.64 682.277 L1738.08 682.277 L1737.52 682.277 L1736.97 682.277 L1736.41 682.277 L1735.85 682.277 L1735.29 682.277 L1734.73 682.277 L1734.17 682.277 L1733.61 682.277 L1733.05 682.277 L1732.49 682.277 L1731.93 682.277 L1731.37 682.277 L1730.81 682.277 L1730.25 682.277 L1729.69 682.277 L1729.14 682.277 L1728.58 682.277 L1728.02 682.277 L1727.46 682.277 L1726.9 682.277 L1726.34 682.277 L1725.78 682.277 L1725.22 682.277 L1724.66 682.277 L1724.1 682.277 L1723.54 682.277 L1722.98 682.277 L1722.42 682.277 L1721.87 682.277 L1721.31 682.277 L1720.75 682.277 L1720.19 682.277 L1719.63 682.277 L1719.07 682.277 L1718.51 682.277 L1717.95 682.277 L1717.39 682.277 L1716.83 682.277 L1716.27 682.277 L1715.71 682.277 L1715.15 682.277 L1714.6 682.277 L1714.04 682.277 L1713.48 682.277 L1712.92 682.277 L1712.36 682.277 L1711.8 682.277 L1711.24 682.277 L1710.68 682.277 L1710.12 682.277 L1709.56 682.277 L1709 682.277 L1708.44 682.277 L1707.88 682.277 L1707.32 682.277 L1706.77 682.277 L1706.21 682.277 L1705.65 682.277 L1705.09 682.277 L1704.53 682.277 L1703.97 682.277 L1703.41 682.277 L1702.85 682.277 L1702.29 682.277 L1701.73 682.277 L1701.17 682.277 L1700.61 682.277 L1700.05 682.277 L1699.5 682.277 L1698.94 682.277 L1698.38 682.277 L1697.82 682.277 L1697.26 682.277 L1696.7 682.277 L1696.14 682.277 L1695.58 682.277 L1695.02 682.277 L1694.46 682.277 L1693.9 682.277 L1693.34 682.277 L1692.78 682.277 L1692.23 682.277 L1691.67 682.277 L1691.11 682.277 L1690.55 682.277 L1689.99 682.277 L1689.43 682.277 L1688.87 682.277 L1688.31 682.277 L1687.75 682.277 L1687.19 682.277 L1686.63 682.277 L1686.07 682.277 L1685.51 682.277 L1684.95 682.277 L1684.4 682.277 L1683.84 682.277 L1683.28 682.277 L1682.72 682.277 L1682.16 682.277 L1681.6 682.277 L1681.04 682.277 L1680.48 682.277 L1679.92 682.277 L1679.36 682.277 L1678.8 682.277 L1678.24 682.277 L1677.68 682.277 L1677.13 682.277 L1676.57 682.277 L1676.01 682.277 L1675.45 682.277 L1674.89 682.277 L1674.33 682.277 L1673.77 682.277 L1673.21 682.277 L1672.65 682.277 L1672.09 682.277 L1671.53 682.277 L1670.97 682.277 L1670.41 682.277 L1669.85 682.277 L1669.3 682.277 L1668.74 682.277 L1668.18 682.277 L1667.62 682.277 L1667.06 682.277 L1666.5 682.277 L1665.94 682.277 L1665.38 682.277 L1664.82 682.277 L1664.26 682.277 L1663.7 682.277 L1663.14 682.277 L1662.58 682.277 L1662.03 682.277 L1661.47 682.277 L1660.91 682.277 L1660.35 682.277 L1659.79 682.277 L1659.23 682.277 L1658.67 682.277 L1658.11 682.277 L1657.55 682.277 L1656.99 682.277 L1656.43 682.277 L1655.87 682.277 L1655.31 682.277 L1654.76 682.277 L1654.2 682.277 L1653.64 682.277 L1653.08 682.277 L1652.52 682.277 L1651.96 682.277 L1651.4 682.277 L1650.84 682.277 L1650.28 682.277 L1649.72 682.277 L1649.16 682.277 L1648.6 682.277 L1648.04 682.277 L1647.48 682.277 L1646.93 682.277 L1646.37 682.277 L1645.81 682.277 L1645.25 682.277 L1644.69 682.277 L1644.13 682.277 L1643.57 682.277 L1643.01 682.277 L1642.45 682.277 L1641.89 682.277 L1641.33 682.277 L1640.77 682.277 L1640.21 682.277 L1639.66 682.277 L1639.1 682.277 L1638.54 682.277 L1637.98 682.277 L1637.42 682.277 L1636.86 682.277 L1636.3 682.277 L1635.74 682.277 L1635.18 682.277 L1634.62 682.277 L1634.06 682.277 L1633.5 682.277 L1632.94 682.277 L1632.39 682.277 L1631.83 682.277 L1631.27 682.277 L1630.71 682.277 L1630.15 682.277 L1629.59 682.277 L1629.03 682.277 L1628.47 682.277 L1627.91 682.277 L1627.35 682.277 L1626.79 682.277 L1626.23 682.277 L1625.67 682.277 L1625.11 682.277 L1624.56 682.277 L1624 682.277 L1623.44 682.277 L1622.88 682.277 L1622.32 682.277 L1621.76 682.277 L1621.2 682.277 L1620.64 682.277 L1620.08 682.277 L1619.52 682.277 L1618.96 682.277 L1618.4 682.277 L1617.84 682.277 L1617.29 682.277 L1616.73 682.277 L1616.17 682.277 L1615.61 682.277 L1615.05 682.277 L1614.49 682.277 L1613.93 682.277 L1613.37 682.277 L1612.81 682.277 L1612.25 682.277 L1611.69 682.277 L1611.13 682.277 L1610.57 682.277 L1610.02 682.277 L1609.46 682.277 L1608.9 682.277 L1608.34 682.277 L1607.78 682.277 L1607.22 682.277 L1606.66 682.277 L1606.1 682.277 L1605.54 682.277 L1604.98 682.277 L1604.42 682.277 L1603.86 682.277 L1603.3 682.277 L1602.74 682.277 L1602.19 682.277 L1601.63 682.277 L1601.07 682.277 L1600.51 682.277 L1599.95 682.277 L1599.39 682.277 L1598.83 682.277 L1598.27 682.277 L1597.71 682.277 L1597.15 682.277 L1596.59 682.277 L1596.03 682.277 L1595.47 682.277 L1594.92 682.277 L1594.36 682.277 L1593.8 682.277 L1593.24 682.277 L1592.68 682.277 L1592.12 682.277 L1591.56 682.277 L1591 682.277 L1590.44 682.277 L1589.88 682.277 L1589.32 682.277 L1588.76 682.277 L1588.2 682.277 L1587.65 682.277 L1587.09 682.277 L1586.53 682.277 L1585.97 682.277 L1585.41 682.277 L1584.85 682.277 L1584.29 682.277 L1583.73 682.277 L1583.17 682.277 L1582.61 682.277 L1582.05 682.277 L1581.49 682.277 L1580.93 682.277 L1580.37 682.277 L1579.82 682.277 L1579.26 682.277 L1578.7 682.277 L1578.14 682.277 L1577.58 682.277 L1577.02 682.277 L1576.46 682.277 L1575.9 682.277 L1575.34 682.277 L1574.78 682.277 L1574.22 682.277 L1573.66 682.277 L1573.1 682.277 L1572.55 682.277 L1571.99 682.277 L1571.43 682.277 L1570.87 682.277 L1570.31 682.277 L1569.75 682.277 L1569.19 682.277 L1568.63 682.277 L1568.07 682.277 L1567.51 682.277 L1566.95 682.277 L1566.39 682.277 L1565.83 682.277 L1565.28 682.277 L1564.72 682.277 L1564.16 682.277 L1563.6 682.277 L1563.04 682.277 L1562.48 682.277 L1561.92 682.277 L1561.36 682.277 L1560.8 682.277 L1560.24 682.277 L1559.68 682.277 L1559.12 682.277 L1558.56 682.277 L1558 682.277 L1557.45 682.277 L1556.89 682.277 L1556.33 682.277 L1555.77 682.277 L1555.21 682.277 L1554.65 682.277 L1554.09 682.277 L1553.53 682.277 L1552.97 682.277 L1552.41 682.277 L1551.85 682.277 L1551.29 682.277 L1550.73 682.277 L1550.18 682.277 L1549.62 682.277 L1549.06 682.277 L1548.5 682.277 L1547.94 682.277 L1547.38 682.277 L1546.82 682.277 L1546.26 682.277 L1545.7 682.277 L1545.14 682.277 L1544.58 682.277 L1544.02 682.277 L1543.46 682.277 L1542.9 682.277 L1542.35 682.277 L1541.79 682.277 L1541.23 682.277 L1540.67 682.277 L1540.11 682.277 L1539.55 682.277 L1538.99 682.277 L1538.43 682.277 L1537.87 682.277 L1537.31 682.277 L1536.75 682.277 L1536.19 682.277 L1535.63 682.277 L1535.08 682.277 L1534.52 682.277 L1533.96 682.277 L1533.4 682.277 L1532.84 682.277 L1532.28 682.277 L1531.72 682.277 L1531.16 682.277 L1530.6 682.277 L1530.04 682.277 L1529.48 682.277 L1528.92 682.277 L1528.36 682.277 L1527.81 682.277 L1527.25 682.277 L1526.69 682.277 L1526.13 682.277 L1525.57 682.277 L1525.01 682.277 L1524.45 682.277 L1523.89 682.277 L1523.33 682.277 L1522.77 682.277 L1522.21 682.277 L1521.65 682.277 L1521.09 682.277 L1520.53 682.277 L1519.98 682.277 L1519.42 682.277 L1518.86 682.277 L1518.3 682.277 L1517.74 682.277 L1517.18 682.277 L1516.62 682.277 L1516.06 682.277 L1515.5 682.277 L1514.94 682.277 L1514.38 682.277 L1513.82 682.277 L1513.26 682.277 L1512.71 682.277 L1512.15 682.277 L1511.59 682.277 L1511.03 682.277 L1510.47 682.277 L1509.91 682.277 L1509.35 682.277 L1508.79 682.277 L1508.23 682.277 L1507.67 682.277 L1507.11 682.277 L1506.55 682.277 L1505.99 682.277 L1505.44 682.277 L1504.88 682.277 L1504.32 682.277 L1503.76 682.277 L1503.2 682.277 L1502.64 682.277 L1502.08 682.277 L1501.52 682.277 L1500.96 682.277 L1500.4 682.277 L1499.84 682.277 L1499.28 682.277 L1498.72 682.277 L1498.16 682.277 L1497.61 682.277 L1497.05 682.277 L1496.49 682.277 L1495.93 682.277 L1495.37 682.277 L1494.81 682.277 L1494.25 682.277 L1493.69 682.277 L1493.13 682.277 L1492.57 682.277 L1492.01 682.277 L1491.45 682.277 L1490.89 682.277 L1490.34 682.277 L1489.78 682.277 L1489.22 682.277 L1488.66 682.277 L1488.1 682.277 L1487.54 682.277 L1486.98 682.277 L1486.42 682.277 L1485.86 682.277 L1485.3 682.277 L1484.74 682.277 L1484.18 682.277 L1483.62 682.277 L1483.07 682.277 L1482.51 682.277 L1481.95 682.277 L1481.39 682.277 L1480.83 682.277 L1480.27 682.277 L1479.71 682.277 L1479.15 682.277 L1478.59 682.277 L1478.03 682.277 L1477.47 682.277 L1476.91 682.277 L1476.35 682.277 L1475.79 682.277 L1475.24 682.277 L1474.68 682.277 L1474.12 682.277 L1473.56 682.277 L1473 682.277 L1472.44 682.277 L1471.88 682.277 L1471.32 682.277 L1470.76 682.277 L1470.2 682.277 L1469.64 682.277 L1469.08 682.277 L1468.52 682.277 L1467.97 682.277 L1467.41 682.277 L1466.85 682.277 L1466.29 682.277 L1465.73 682.277 L1465.17 682.277 L1464.61 682.277 L1464.05 682.277 L1463.49 682.277 L1462.93 682.277 L1462.37 682.277 L1461.81 682.277 L1461.25 682.277 L1460.7 682.277 L1460.14 682.277 L1459.58 682.277 L1459.02 682.277 L1458.46 682.277 L1457.9 682.277 L1457.34 682.277 L1456.78 682.277 L1456.22 682.277 L1455.66 682.277 L1455.1 682.277 L1454.54 682.277 L1453.98 682.277 L1453.42 682.277 L1452.87 682.277 L1452.31 682.277 L1451.75 682.277 L1451.19 682.277 L1450.63 682.277 L1450.07 682.277 L1449.51 682.277 L1448.95 682.277 L1448.39 682.277 L1447.83 682.277 L1447.27 682.277 L1446.71 682.277 L1446.15 682.277 L1445.6 682.277 L1445.04 682.277 L1444.48 682.277 L1443.92 682.277 L1443.36 682.277 L1442.8 682.277 L1442.24 682.277 L1441.68 682.277 L1441.12 682.277 L1440.56 682.277 L1440 682.277 L1439.44 682.277 L1438.88 682.277 L1438.33 682.277 L1437.77 682.277 L1437.21 682.277 L1436.65 682.277 L1436.09 682.277 L1435.53 682.277 L1434.97 682.277 L1434.41 682.277 L1433.85 682.277 L1433.29 682.277 L1432.73 682.277 L1432.17 682.277 L1431.61 682.277 L1431.05 682.277 L1430.5 682.277 L1429.94 682.277 L1429.38 682.277 L1428.82 682.277 L1428.26 682.277 L1427.7 682.277 L1427.14 682.277 L1426.58 682.277 L1426.02 682.277 L1425.46 682.277 L1424.9 682.277 L1424.34 682.277 L1423.78 682.277 L1423.23 682.277 L1422.67 682.277 L1422.11 682.277 L1421.55 682.277 L1420.99 682.277 L1420.43 682.277 L1419.87 682.277 L1419.31 682.277 L1418.75 682.277 L1418.19 682.277 L1417.63 682.277 L1417.07 682.277 L1416.51 682.277 L1415.95 682.277 L1415.4 682.277 L1414.84 682.277 L1414.28 682.277 L1413.72 682.277 L1413.16 682.277 L1412.6 682.277 L1412.04 682.277 L1411.48 682.277 L1410.92 682.277 L1410.36 682.277 L1409.8 682.277 L1409.24 682.277 L1408.68 682.277 L1408.13 682.277 L1407.57 682.277 L1407.01 682.277 L1406.45 682.277 L1405.89 682.277 L1405.33 682.277 L1404.77 682.277 L1404.21 682.277 L1403.65 682.277 L1403.09 682.277 L1402.53 682.277 L1401.97 682.277 L1401.41 682.277 L1400.86 682.277 L1400.3 682.277 L1399.74 682.277 L1399.18 682.277 L1398.62 682.277 L1398.06 682.277 L1397.5 682.277 L1396.94 682.277 L1396.38 682.277 L1395.82 682.277 L1395.26 682.277 L1394.7 682.277 L1394.14 682.277 L1393.58 682.277 L1393.03 682.277 L1392.47 682.277 L1391.91 682.277 L1391.35 682.277 L1390.79 682.277 L1390.23 682.277 L1389.67 682.277 L1389.11 682.277 L1388.55 682.277 L1387.99 682.277 L1387.43 682.277 L1386.87 682.277 L1386.31 682.277 L1385.76 682.277 L1385.2 682.277 L1384.64 682.277 L1384.08 682.277 L1383.52 682.277 L1382.96 682.277 L1382.4 682.277 L1381.84 682.277 L1381.28 682.277 L1380.72 682.277 L1380.16 682.277 L1379.6 682.277 L1379.04 682.277 L1378.49 682.277 L1377.93 682.277 L1377.37 682.277 L1376.81 682.277 L1376.25 682.277 L1375.69 682.277 L1375.13 682.277 L1374.57 682.277 L1374.01 682.277 L1373.45 682.277 L1372.89 682.277 L1372.33 682.277 L1371.77 682.277 L1371.21 682.277 L1370.66 682.277 L1370.1 682.277 L1369.54 682.277 L1368.98 682.277 L1368.42 682.277 L1367.86 682.277 L1367.3 682.277 L1366.74 682.277 L1366.18 682.277 L1365.62 682.277 L1365.06 682.277 L1364.5 682.277 L1363.94 682.277 L1363.39 682.277 L1362.83 682.277 L1362.27 682.277 L1361.71 682.277 L1361.15 682.277 L1360.59 682.277 L1360.03 682.277 L1359.47 682.277 L1358.91 682.277 L1358.35 682.277 L1357.79 682.277 L1357.23 682.277 L1356.67 682.277 L1356.12 682.277 L1355.56 682.277 L1355 682.277 L1354.44 682.277 L1353.88 682.277 L1353.32 682.277 L1352.76 682.277 L1352.2 682.277 L1351.64 682.277 L1351.08 682.277 L1350.52 682.277 L1349.96 682.277 L1349.4 682.277 L1348.84 682.277 L1348.29 682.277 L1347.73 682.277 L1347.17 682.277 L1346.61 682.277 L1346.05 682.277 L1345.49 682.277 L1344.93 682.277 L1344.37 682.277 L1343.81 682.277 L1343.25 682.277 L1342.69 682.277 L1342.13 682.277 L1341.57 682.277 L1341.02 682.277 L1340.46 682.277 L1339.9 682.277 L1339.34 682.277 L1338.78 682.277 L1338.22 682.277 L1337.66 682.277 L1337.1 682.277 L1336.54 682.277 L1335.98 682.277 L1335.42 682.277 L1334.86 682.277 L1334.3 682.277 L1333.75 682.277 L1333.19 682.277 L1332.63 682.277 L1332.07 682.277 L1331.51 682.277 L1330.95 682.277 L1330.39 682.277 L1329.83 682.277 L1329.27 682.277 L1328.71 682.277 L1328.15 682.277 L1327.59 682.277 L1327.03 682.277 L1326.47 682.277 L1325.92 682.277 L1325.36 682.277 L1324.8 682.277 L1324.24 682.277 L1323.68 682.277 L1323.12 682.277 L1322.56 682.277 L1322 682.277 L1321.44 682.277 L1320.88 682.277 L1320.32 682.277 L1319.76 682.277 L1319.2 682.277 L1318.65 682.277 L1318.09 682.277 L1317.53 682.277 L1316.97 682.277 L1316.41 682.277 L1315.85 682.277 L1315.29 682.277 L1314.73 682.277 L1314.17 682.277 L1313.61 682.277 L1313.05 682.277 L1312.49 682.277 L1311.93 682.277 L1311.38 682.277 L1310.82 682.277 L1310.26 682.277 L1309.7 682.277 L1309.14 682.277 L1308.58 682.277 L1308.02 682.277 L1307.46 682.277 L1306.9 682.277 L1306.34 682.277 L1305.78 682.277 L1305.22 682.277 L1304.66 682.277 L1304.1 682.277 L1303.55 682.277 L1302.99 682.277 L1302.43 682.277 L1301.87 682.277 L1301.31 682.277 L1300.75 682.277 L1300.19 682.277 L1299.63 682.277 L1299.07 682.277 L1298.51 682.277 L1297.95 682.277 L1297.39 682.277 L1296.83 682.277 L1296.28 682.277 L1295.72 682.277 L1295.16 682.277 L1294.6 682.277 L1294.04 682.277 L1293.48 682.277 L1292.92 682.277 L1292.36 682.277 L1291.8 682.277 L1291.24 682.277 L1290.68 682.277 L1290.12 682.277 L1289.56 682.277 L1289 682.277 L1288.45 682.277 L1287.89 682.277 L1287.33 682.277 L1286.77 682.277 L1286.21 682.277 L1285.65 682.277 L1285.09 682.277 L1284.53 682.277 L1283.97 682.277 L1283.41 682.277 L1282.85 682.277 L1282.29 682.277 L1281.73 682.277 L1281.18 682.277 L1280.62 682.277 L1280.06 682.277 L1279.5 682.277 L1278.94 682.277 L1278.38 682.277 L1277.82 682.277 L1277.26 682.277 L1276.7 682.277 L1276.14 682.277 L1275.58 682.277 L1275.02 682.277 L1274.46 682.277 L1273.91 682.277 L1273.35 682.277 L1272.79 682.277 L1272.23 682.277 L1271.67 682.277 L1271.11 682.277 L1270.55 682.277 L1269.99 682.277 L1269.43 682.277 L1268.87 682.277 L1268.31 682.277 L1267.75 682.277 L1267.19 682.277 L1266.63 682.277 L1266.08 682.277 L1265.52 682.277 L1264.96 682.277 L1264.4 682.277 L1263.84 682.277 L1263.28 682.277 L1262.72 682.277 L1262.16 682.277 L1261.6 682.277 L1261.04 682.277 L1260.48 682.277 L1259.92 682.277 L1259.36 682.277 L1258.81 682.277 L1258.25 682.277 L1257.69 682.277 L1257.13 682.277 L1256.57 682.277 L1256.01 682.277 L1255.45 682.277 L1254.89 682.277 L1254.33 682.277 L1253.77 682.277 L1253.21 682.277 L1252.65 682.277 L1252.09 682.277 L1251.54 682.277 L1250.98 682.277 L1250.42 682.277 L1249.86 682.277 L1249.3 682.277 L1248.74 682.277 L1248.18 682.277 L1247.62 682.277 L1247.06 682.277 L1246.5 682.277 L1245.94 682.277 L1245.38 682.277 L1244.82 682.277 L1244.26 682.277 L1243.71 682.277 L1243.15 682.277 L1242.59 682.277 L1242.03 682.277 L1241.47 682.277 L1240.91 682.277 L1240.35 682.277 L1239.79 682.277 L1239.23 682.277 L1238.67 682.277 L1238.11 682.277 L1237.55 682.277 L1236.99 682.277 L1236.44 682.277 L1235.88 682.277 L1235.32 682.277 L1234.76 682.277 L1234.2 682.277 L1233.64 682.277 L1233.08 682.277 L1232.52 682.277 L1231.96 682.277 L1231.4 682.277 L1230.84 682.277 L1230.28 682.277 L1229.72 682.277 L1229.17 682.277 L1228.61 682.277 L1228.05 682.277 L1227.49 682.277 L1226.93 682.277 L1226.37 682.277 L1225.81 682.277 L1225.25 682.277 L1224.69 682.277 L1224.13 682.277 L1223.57 682.277 L1223.01 682.277 L1222.45 682.277 L1221.89 682.277 L1221.34 682.277 L1220.78 682.277 L1220.22 682.277 L1219.66 682.277 L1219.1 682.277 L1218.54 682.277 L1217.98 682.277 L1217.42 682.277 L1216.86 682.277 L1216.3 682.277 L1215.74 682.277 L1215.18 682.277 L1214.62 682.277 L1214.07 682.277 L1213.51 682.277 L1212.95 682.277 L1212.39 682.277 L1211.83 682.277 L1211.27 682.277 L1210.71 682.277 L1210.15 682.277 L1209.59 682.277 L1209.03 682.277 L1208.47 682.277 L1207.91 682.277 L1207.35 682.277 L1206.8 682.277 L1206.24 682.277 L1205.68 682.277 L1205.12 682.277 L1204.56 682.277 L1204 682.277 L1203.44 682.277 L1202.88 682.277 L1202.32 682.277 L1201.76 682.277 L1201.2 682.277 L1200.64 682.277 L1200.08 682.277 L1199.52 682.277 L1198.97 682.277 L1198.41 682.277 L1197.85 682.277 L1197.29 682.277 L1196.73 682.277 L1196.17 682.277 L1195.61 682.277 L1195.05 682.277 L1194.49 682.277 L1193.93 682.277 L1193.37 682.277 L1192.81 682.277 L1192.25 682.277 L1191.7 682.277 L1191.14 682.277 L1190.58 682.277 L1190.02 682.277 L1189.46 682.277 L1188.9 682.277 L1188.34 682.277 L1187.78 682.277 L1187.22 682.277 L1186.66 682.277 L1186.1 682.277 L1185.54 682.277 L1184.98 682.277 L1184.43 682.277 L1183.87 682.277 L1183.31 682.277 L1182.75 682.277 L1182.19 682.277 L1181.63 682.277 L1181.07 682.277 L1180.51 682.277 L1179.95 682.277 L1179.39 682.277 L1178.83 682.277 L1178.27 682.277 L1177.71 682.277 L1177.15 682.277 L1176.6 682.277 L1176.04 682.277 L1175.48 682.277 L1174.92 682.277 L1174.36 682.277 L1173.8 682.277 L1173.24 682.277 L1172.68 682.277 L1172.12 682.277 L1171.56 682.277 L1171 682.277 L1170.44 682.277 L1169.88 682.277 L1169.33 682.277 L1168.77 682.277 L1168.21 682.277 L1167.65 682.277 L1167.09 682.277 L1166.53 682.277 L1165.97 682.277 L1165.41 682.277 L1164.85 682.277 L1164.29 682.277 L1163.73 682.277 L1163.17 682.277 L1162.61 682.277 L1162.05 682.277 L1161.5 682.277 L1160.94 682.277 L1160.38 682.277 L1159.82 682.277 L1159.26 682.277 L1158.7 682.277 L1158.14 682.277 L1157.58 682.277 L1157.02 682.277 L1156.46 682.277 L1155.9 682.277 L1155.34 682.277 L1154.78 682.277 L1154.23 682.277 L1153.67 682.277 L1153.11 682.277 L1152.55 682.277 L1151.99 682.277 L1151.43 682.277 L1150.87 682.277 L1150.31 682.277 L1149.75 682.277 L1149.19 682.277 L1148.63 682.277 L1148.07 682.277 L1147.51 682.277 L1146.96 682.277 L1146.4 682.277 L1145.84 682.277 L1145.28 682.277 L1144.72 682.277 L1144.16 682.277 L1143.6 682.277 L1143.04 682.277 L1142.48 682.277 L1141.92 682.277 L1141.36 682.277 L1140.8 682.277 L1140.24 682.277 L1139.68 682.277 L1139.13 682.277 L1138.57 682.277 L1138.01 682.277 L1137.45 682.277 L1136.89 682.277 L1136.33 682.277 L1135.77 682.277 L1135.21 682.277 L1134.65 682.277 L1134.09 682.277 L1133.53 682.277 L1132.97 682.277 L1132.41 682.277 L1131.86 682.277 L1131.3 682.277 L1130.74 682.277 L1130.18 682.277 L1129.62 682.277 L1129.06 682.277 L1128.5 682.277 L1127.94 682.277 L1127.38 682.277 L1126.82 682.277 L1126.26 682.277 L1125.7 682.277 L1125.14 682.277 L1124.59 682.277 L1124.03 682.277 L1123.47 682.277 L1122.91 682.277 L1122.35 682.277 L1121.79 682.277 L1121.23 682.277 L1120.67 682.277 L1120.11 682.277 L1119.55 682.277 L1118.99 682.277 L1118.43 682.277 L1117.87 682.277 L1117.31 682.277 L1116.76 682.277 L1116.2 682.277 L1115.64 682.277 L1115.08 682.277 L1114.52 682.277 L1113.96 682.277 L1113.4 682.277 L1112.84 682.277 L1112.28 682.277 L1111.72 682.277 L1111.16 682.277 L1110.6 682.277 L1110.04 682.277 L1109.49 682.277 L1108.93 682.277 L1108.37 682.277 L1107.81 682.277 L1107.25 682.277 L1106.69 682.277 L1106.13 682.277 L1105.57 682.277 L1105.01 682.277 L1104.45 682.277 L1103.89 682.277 L1103.33 682.277 L1102.77 682.277 L1102.22 682.277 L1101.66 682.277 L1101.1 682.277 L1100.54 682.277 L1099.98 682.277 L1099.42 682.277 L1098.86 682.277 L1098.3 682.277 L1097.74 682.277 L1097.18 682.277 L1096.62 682.277 L1096.06 682.277 L1095.5 682.277 L1094.94 682.277 L1094.39 682.277 L1093.83 682.277 L1093.27 682.277 L1092.71 682.277 L1092.15 682.277 L1091.59 682.277 L1091.03 682.277 L1090.47 682.277 L1089.91 682.277 L1089.35 682.277 L1088.79 682.277 L1088.23 682.277 L1087.67 682.277 L1087.12 682.277 L1086.56 682.277 L1086 682.277 L1085.44 682.277 L1084.88 682.277 L1084.32 682.277 L1083.76 682.277 L1083.2 682.277 L1082.64 682.277 L1082.08 682.277 L1081.52 682.277 L1080.96 682.277 L1080.4 682.277 L1079.85 682.277 L1079.29 682.277 L1078.73 682.277 L1078.17 682.277 L1077.61 682.277 L1077.05 682.277 L1076.49 682.277 L1075.93 682.277 L1075.37 682.277 L1074.81 682.277 L1074.25 682.277 L1073.69 682.277 L1073.13 682.277 L1072.57 682.277 L1072.02 682.277 L1071.46 682.277 L1070.9 682.277 L1070.34 682.277 L1069.78 682.277 L1069.22 682.277 L1068.66 682.277 L1068.1 682.277 L1067.54 682.277 L1066.98 682.277 L1066.42 682.277 L1065.86 682.277 L1065.3 682.277 L1064.75 682.277 L1064.19 682.277 L1063.63 682.277 L1063.07 682.277 L1062.51 682.277 L1061.95 682.277 L1061.39 682.277 L1060.83 682.277 L1060.27 682.277 L1059.71 682.277 L1059.15 682.277 L1058.59 682.277 L1058.03 682.277 L1057.48 682.277 L1056.92 682.277 L1056.36 682.277 L1055.8 682.277 L1055.24 682.277 L1054.68 682.277 L1054.12 682.277 L1053.56 682.277 L1053 682.277 L1052.44 682.277 L1051.88 682.277 L1051.32 682.277 L1050.76 682.277 L1050.2 682.277 L1049.65 682.277 L1049.09 682.277 L1048.53 682.277 L1047.97 682.277 L1047.41 682.277 L1046.85 682.277 L1046.29 682.277 L1045.73 682.277 L1045.17 682.277 L1044.61 682.277 L1044.05 682.277 L1043.49 682.277 L1042.93 682.277 L1042.38 682.277 L1041.82 682.277 L1041.26 682.277 L1040.7 682.277 L1040.14 682.277 L1039.58 682.277 L1039.02 682.277 L1038.46 682.277 L1037.9 682.277 L1037.34 682.277 L1036.78 682.277 L1036.22 682.277 L1035.66 682.277 L1035.1 682.277 L1034.55 682.277 L1033.99 682.277 L1033.43 682.277 L1032.87 682.277 L1032.31 682.277 L1031.75 682.277 L1031.19 682.277 L1030.63 682.277 L1030.07 682.277 L1029.51 682.277 L1028.95 682.277 L1028.39 682.277 L1027.83 682.277 L1027.28 682.277 L1026.72 682.277 L1026.16 682.277 L1025.6 682.277 L1025.04 682.277 L1024.48 682.277 L1023.92 682.277 L1023.36 682.277 L1022.8 682.277 L1022.24 682.277 L1021.68 682.277 L1021.12 682.277 L1020.56 682.277 L1020.01 682.277 L1019.45 682.277 L1018.89 682.277 L1018.33 682.277 L1017.77 682.277 L1017.21 682.277 L1016.65 682.277 L1016.09 682.277 L1015.53 682.277 L1014.97 682.277 L1014.41 682.277 L1013.85 682.277 L1013.29 682.277 L1012.73 682.277 L1012.18 682.277 L1011.62 682.277 L1011.06 682.277 L1010.5 682.277 L1009.94 682.277 L1009.38 682.277 L1008.82 682.277 L1008.26 682.277 L1007.7 682.277 L1007.14 682.277 L1006.58 682.277 L1006.02 682.277 L1005.46 682.277 L1004.91 682.277 L1004.35 682.277 L1003.79 682.277 L1003.23 682.277 L1002.67 682.277 L1002.11 682.277 L1001.55 682.277 L1000.99 682.277 L1000.43 682.277 L999.872 682.277 L999.313 682.277 L998.754 682.277 L998.194 682.277 L997.635 682.277 L997.076 682.277 L996.517 682.277 L995.957 682.277 L995.398 682.277 L994.839 682.277 L994.28 682.277 L993.72 682.277 L993.161 682.277 L992.602 682.277 L992.043 682.277 L991.483 682.277 L990.924 682.277 L990.365 682.277 L989.806 682.277 L989.246 682.277 L988.687 682.277 L988.128 682.277 L987.569 682.277 L987.009 682.277 L986.45 682.277 L985.891 682.277 L985.332 682.277 L984.772 682.277 L984.213 682.277 L983.654 682.277 L983.095 682.277 L982.535 682.277 L981.976 682.277 L981.417 682.277 L980.858 682.277 L980.298 682.277 L979.739 682.277 L979.18 682.277 L978.621 682.277 L978.061 682.277 L977.502 682.277 L976.943 682.277 L976.384 682.277 L975.824 682.277 L975.265 682.277 L974.706 682.277 L974.147 682.277 L973.587 682.277 L973.028 682.277 L972.469 682.277 L971.91 682.277 L971.35 682.277 L970.791 682.277 L970.232 682.277 L969.673 682.277 L969.113 682.277 L968.554 682.277 L967.995 682.277 L967.436 682.277 L966.876 682.277 L966.317 682.277 L965.758 682.277 L965.199 682.277 L964.639 682.277 L964.08 682.277 L963.521 682.277 L962.962 682.277 L962.402 682.277 L961.843 682.277 L961.284 682.277 L960.725 682.277 L960.165 682.277 L959.606 682.277 L959.047 682.277 L958.488 682.277 L957.928 682.277 L957.369 682.277 L956.81 682.277 L956.251 682.277 L955.691 682.277 L955.132 682.277 L954.573 682.277 L954.014 682.277 L953.454 682.277 L952.895 682.277 L952.336 682.277 L951.777 682.277 L951.217 682.277 L950.658 682.277 L950.099 682.277 L949.54 682.277 L948.98 682.277 L948.421 682.277 L947.862 682.277 L947.303 682.277 L946.743 682.277 L946.184 682.277 L945.625 682.277 L945.066 682.277 L944.506 682.277 L943.947 682.277 L943.388 682.277 L942.829 682.277 L942.269 682.277 L941.71 682.277 L941.151 682.277 L940.592 682.277 L940.032 682.277 L939.473 682.277 L938.914 682.277 L938.355 682.277 L937.795 682.277 L937.236 682.277 L936.677 682.277 L936.118 682.277 L935.558 682.277 L934.999 682.277 L934.44 682.277 L933.881 682.277 L933.321 682.277 L932.762 682.277 L932.203 682.277 L931.644 682.277 L931.084 682.277 L930.525 682.277 L929.966 682.277 L929.406 682.277 L928.847 682.277 L928.288 682.277 L927.729 682.277 L927.169 682.277 L926.61 682.277 L926.051 682.277 L925.492 682.277 L924.932 682.277 L924.373 682.277 L923.814 682.277 L923.255 682.277 L922.695 682.277 L922.136 682.277 L921.577 682.277 L921.018 682.277 L920.458 682.277 L919.899 682.277 L919.34 682.277 L918.781 682.277 L918.221 682.277 L917.662 682.277 L917.103 682.277 L916.544 682.277 L915.984 682.277 L915.425 682.277 L914.866 682.277 L914.307 682.277 L913.747 682.277 L913.188 682.277 L912.629 682.277 L912.07 682.277 L911.51 682.277 L910.951 682.277 L910.392 682.277 L909.833 682.277 L909.273 682.277 L908.714 682.277 L908.155 682.277 L907.596 682.277 L907.036 682.277 L906.477 682.277 L905.918 682.277 L905.359 682.277 L904.799 682.277 L904.24 682.277 L903.681 682.277 L903.122 682.277 L902.562 682.277 L902.003 682.277 L901.444 682.277 L900.885 682.277 L900.325 682.277 L899.766 682.277 L899.207 682.277 L898.648 682.277 L898.088 682.277 L897.529 682.277 L896.97 682.277 L896.411 682.277 L895.851 682.277 L895.292 682.277 L894.733 682.277 L894.174 682.277 L893.614 682.277 L893.055 682.277 L892.496 682.277 L891.937 682.277 L891.377 682.277 L890.818 682.277 L890.259 682.277 L889.7 682.277 L889.14 682.277 L888.581 682.277 L888.022 682.277 L887.463 682.277 L886.903 682.277 L886.344 682.277 L885.785 682.277 L885.226 682.277 L884.666 682.277 L884.107 682.277 L883.548 682.277 L882.989 682.277 L882.429 682.277 L881.87 682.277 L881.311 682.277 L880.752 682.277 L880.192 682.277 L879.633 682.277 L879.074 682.277 L878.515 682.277 L877.955 682.277 L877.396 682.277 L876.837 682.277 L876.278 682.277 L875.718 682.277 L875.159 682.277 L874.6 682.277 L874.041 682.277 L873.481 682.277 L872.922 682.277 L872.363 682.277 L871.804 682.277 L871.244 682.277 L870.685 682.277 L870.126 682.277 L869.567 682.277 L869.007 682.277 L868.448 682.277 L867.889 682.277 L867.33 682.277 L866.77 682.277 L866.211 682.277 L865.652 682.277 L865.093 682.277 L864.533 682.277 L863.974 682.277 L863.415 682.277 L862.856 682.277 L862.296 682.277 L861.737 682.277 L861.178 682.277 L860.619 682.277 L860.059 682.277 L859.5 682.277 L858.941 682.277 L858.382 682.277 L857.822 682.277 L857.263 682.277 L856.704 682.277 L856.145 682.277 L855.585 682.277 L855.026 682.277 L854.467 682.277 L853.908 682.277 L853.348 682.277 L852.789 682.277 L852.23 682.277 L851.671 682.277 L851.111 682.277 L850.552 682.277 L849.993 682.277 L849.434 682.277 L848.874 682.277 L848.315 682.277 L847.756 682.277 L847.197 682.277 L846.637 682.277 L846.078 682.277 L845.519 682.277 L844.96 682.277 L844.4 682.277 L843.841 682.277 L843.282 682.277 L842.723 682.277 L842.163 682.277 L841.604 682.277 L841.045 682.277 L840.486 682.277 L839.926 682.277 L839.367 682.277 L838.808 682.277 L838.249 682.277 L837.689 682.277 L837.13 682.277 L836.571 682.277 L836.012 682.277 L835.452 682.277 L834.893 682.277 L834.334 682.277 L833.775 682.277 L833.215 682.277 L832.656 682.277 L832.097 682.277 L831.538 682.277 L830.978 682.277 L830.419 682.277 L829.86 682.277 L829.301 682.277 L828.741 682.277 L828.182 682.277 L827.623 682.277 L827.064 682.277 L826.504 682.277 L825.945 682.277 L825.386 682.277 L824.827 682.277 L824.267 682.277 L823.708 682.277 L823.149 682.277 L822.59 682.277 L822.03 682.277 L821.471 682.277 L820.912 682.277 L820.353 682.277 L819.793 682.277 L819.234 682.277 L818.675 682.277 L818.116 682.277 L817.556 682.277 L816.997 682.277 L816.438 682.277 L815.879 682.277 L815.319 682.277 L814.76 682.277 L814.201 682.277 L813.642 682.277 L813.082 682.277 L812.523 682.277 L811.964 682.277 L811.405 682.277 L810.845 682.277 L810.286 682.277 L809.727 682.277 L809.168 682.277 L808.608 682.277 L808.049 682.277 L807.49 682.277 L806.931 682.277 L806.371 682.277 L805.812 682.277 L805.253 682.277 L804.693 682.277 L804.134 682.277 L803.575 682.277 L803.016 682.277 L802.456 682.277 L801.897 682.277 L801.338 682.277 L800.779 682.277 L800.219 682.277 L799.66 682.277 L799.101 682.277 L798.542 682.277 L797.982 682.277 L797.423 682.277 L796.864 682.277 L796.305 682.277 L795.745 682.277 L795.186 682.277 L794.627 682.277 L794.068 682.277 L793.508 682.277 L792.949 682.277 L792.39 682.277 L791.831 682.277 L791.271 682.277 L790.712 682.277 L790.153 682.277 L789.594 682.277 L789.034 682.277 L788.475 682.277 L787.916 682.277 L787.357 682.277 L786.797 682.277 L786.238 682.277 L785.679 682.277 L785.12 682.277 L784.56 682.277 L784.001 682.277 L783.442 682.277 L782.883 682.277 L782.323 682.277 L781.764 682.277 L781.205 682.277 L780.646 682.277 L780.086 682.277 L779.527 682.277 L778.968 682.277 L778.409 682.277 L777.849 682.277 L777.29 682.277 L776.731 682.277 L776.172 682.277 L775.612 682.277 L775.053 682.277 L774.494 682.277 L773.935 682.277 L773.375 682.277 L772.816 682.277 L772.257 682.277 L771.698 682.277 L771.138 682.277 L770.579 682.277 L770.02 682.277 L769.461 682.277 L768.901 682.277 L768.342 682.277 L767.783 682.277 L767.224 682.277 L766.664 682.277 L766.105 682.277 L765.546 682.277 L764.987 682.277 L764.427 682.277 L763.868 682.277 L763.309 682.277 L762.75 682.277 L762.19 682.277 L761.631 682.277 L761.072 682.277 L760.513 682.277 L759.953 682.277 L759.394 682.277 L758.835 682.277 L758.276 682.277 L757.716 682.277 L757.157 682.277 L756.598 682.277 L756.039 682.277 L755.479 682.277 L754.92 682.277 L754.361 682.277 L753.802 682.277 L753.242 682.277 L752.683 682.277 L752.124 682.277 L751.565 682.277 L751.005 682.277 L750.446 682.277 L749.887 682.277 L749.328 682.277 L748.768 682.277 L748.209 682.277 L747.65 682.277 L747.091 682.277 L746.531 682.277 L745.972 682.277 L745.413 682.277 L744.854 682.277 L744.294 682.277 L743.735 682.277 L743.176 682.277 L742.617 682.277 L742.057 682.277 L741.498 682.277 L740.939 682.277 L740.38 682.277 L739.82 682.277 L739.261 682.277 L738.702 682.277 L738.143 682.277 L737.583 682.277 L737.024 682.277 L736.465 682.277 L735.906 682.277 L735.346 682.277 L734.787 682.277 L734.228 682.277 L733.669 682.277 L733.109 682.277 L732.55 682.277 L731.991 682.277 L731.432 682.277 L730.872 682.277 L730.313 682.277 L729.754 682.277 L729.195 682.277 L728.635 682.277 L728.076 682.277 L727.517 682.277 L726.958 682.277 L726.398 682.277 L725.839 682.277 L725.28 682.277 L724.721 682.277 L724.161 682.277 L723.602 682.277 L723.043 682.277 L722.484 682.277 L721.924 682.277 L721.365 682.277 L720.806 682.277 L720.247 682.277  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip623)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.74 720.806,683.74 721.365,683.74 721.924,683.74 722.484,683.74 723.043,683.74 723.602,683.74 724.161,683.74 724.721,683.74 725.28,683.74 725.839,683.74 726.398,683.74 726.958,683.74 727.517,683.74 728.076,683.74 728.635,683.74 729.195,683.74 729.754,683.74 730.313,683.74 730.872,683.74 731.432,683.74 731.991,683.74 732.55,683.74 733.109,683.74 733.669,683.74 734.228,683.74 734.787,683.74 735.346,683.74 735.906,683.74 736.465,683.74 737.024,683.74 737.583,683.74 738.143,683.74 738.702,683.74 739.261,683.74 739.82,683.74 740.38,683.74 740.939,683.74 741.498,683.74 742.057,683.74 742.617,683.74 743.176,683.74 743.735,683.74 744.294,683.74 744.854,683.74 745.413,683.74 745.972,683.74 746.531,683.74 747.091,683.74 747.65,683.74 748.209,683.74 748.768,683.74 749.328,683.74 749.887,683.74 750.446,683.74 751.005,683.74 751.565,683.74 752.124,683.74 752.683,683.74 753.242,683.74 753.802,683.74 754.361,683.74 754.92,683.74 755.479,683.74 756.039,683.74 756.598,683.74 757.157,683.74 757.716,683.74 758.276,683.74 758.835,683.74 759.394,683.74 759.953,683.74 760.513,683.74 761.072,683.74 761.631,683.74 762.19,683.74 762.75,683.74 763.309,683.74 763.868,683.74 764.427,683.74 764.987,683.74 765.546,683.74 766.105,683.74 766.664,683.74 767.224,683.74 767.783,683.74 768.342,683.74 768.901,683.74 769.461,683.74 770.02,683.74 770.579,683.74 771.138,683.74 771.698,683.74 772.257,683.74 772.816,683.74 773.375,683.74 773.935,683.74 774.494,683.74 775.053,683.74 775.612,683.74 776.172,683.74 776.731,683.74 777.29,683.74 777.849,683.74 778.409,683.74 778.968,683.74 779.527,683.74 780.086,683.74 780.646,683.74 781.205,683.74 781.764,683.74 782.323,683.74 782.883,683.74 783.442,683.74 784.001,683.74 784.56,683.74 785.12,683.74 785.679,683.74 786.238,683.74 786.797,683.74 787.357,683.74 787.916,683.74 788.475,683.74 789.034,683.74 789.594,683.74 790.153,683.74 790.712,683.74 791.271,683.74 791.831,683.74 792.39,683.74 792.949,683.74 793.508,683.74 794.068,683.74 794.627,683.74 795.186,683.74 795.745,683.74 796.305,683.74 796.864,683.74 797.423,683.74 797.982,683.74 798.542,683.74 799.101,683.74 799.66,683.74 800.219,683.74 800.779,683.74 801.338,683.74 801.897,683.74 802.456,683.74 803.016,683.74 803.575,683.74 804.134,683.74 804.693,683.74 805.253,683.74 805.812,683.74 806.371,683.74 806.931,683.74 807.49,683.74 808.049,683.74 808.608,683.74 809.168,683.74 809.727,683.74 810.286,683.74 810.845,683.74 811.405,683.74 811.964,683.74 812.523,683.74 813.082,683.74 813.642,683.74 814.201,683.74 814.76,683.74 815.319,683.74 815.879,683.74 816.438,683.74 816.997,683.74 817.556,683.74 818.116,683.74 818.675,683.74 819.234,683.74 819.793,683.74 820.353,683.74 820.912,683.74 821.471,683.74 822.03,683.74 822.59,683.74 823.149,683.74 823.708,683.74 824.267,683.74 824.827,683.74 825.386,683.74 825.945,683.74 826.504,683.74 827.064,683.74 827.623,683.74 828.182,683.74 828.741,683.74 829.301,683.74 829.86,683.74 830.419,683.74 830.978,683.74 831.538,683.74 832.097,683.74 832.656,683.74 833.215,683.74 833.775,683.74 834.334,683.74 834.893,683.74 835.452,683.74 836.012,683.74 836.571,683.74 837.13,683.74 837.689,683.74 838.249,683.74 838.808,683.74 839.367,683.74 839.926,683.74 840.486,683.74 841.045,683.74 841.604,683.74 842.163,683.74 842.723,683.74 843.282,683.74 843.841,683.74 844.4,683.74 844.96,683.74 845.519,683.74 846.078,683.74 846.637,683.74 847.197,683.74 847.756,683.74 848.315,683.74 848.874,683.74 849.434,683.74 849.993,683.74 850.552,683.74 851.111,683.74 851.671,683.74 852.23,683.74 852.789,683.74 853.348,683.74 853.908,683.74 854.467,683.74 855.026,683.74 855.585,683.74 856.145,683.74 856.704,683.74 857.263,683.74 857.822,683.74 858.382,683.74 858.941,683.74 859.5,683.74 860.059,683.74 860.619,683.74 861.178,683.74 861.737,683.74 862.296,683.74 862.856,683.74 863.415,683.74 863.974,683.74 864.533,683.74 865.093,683.74 865.652,683.74 866.211,683.74 866.77,683.74 867.33,683.74 867.889,683.74 868.448,683.74 869.007,683.74 869.567,683.74 870.126,683.74 870.685,683.74 871.244,683.74 871.804,683.74 872.363,683.74 872.922,683.74 873.481,683.74 874.041,683.74 874.6,683.74 875.159,683.74 875.718,683.74 876.278,683.74 876.837,683.74 877.396,683.74 877.955,683.74 878.515,683.74 879.074,683.74 879.633,683.74 880.192,683.74 880.752,683.74 881.311,683.74 881.87,683.74 882.429,683.74 882.989,683.74 883.548,683.74 884.107,683.74 884.666,683.74 885.226,683.74 885.785,683.74 886.344,683.74 886.903,683.74 887.463,683.74 888.022,683.74 888.581,683.74 889.14,683.74 889.7,683.74 890.259,683.74 890.818,683.74 891.377,683.74 891.937,683.74 892.496,683.74 893.055,683.74 893.614,683.74 894.174,683.74 894.733,683.74 895.292,683.74 895.851,683.74 896.411,683.74 896.97,683.74 897.529,683.74 898.088,683.74 898.648,683.74 899.207,683.74 899.766,683.74 900.325,683.74 900.885,683.74 901.444,683.74 902.003,683.74 902.562,683.74 903.122,683.74 903.681,683.74 904.24,683.74 904.799,683.74 905.359,683.74 905.918,683.74 906.477,683.74 907.036,683.74 907.596,683.74 908.155,683.74 908.714,683.74 909.273,683.74 909.833,683.74 910.392,683.74 910.951,683.74 911.51,683.74 912.07,683.74 912.629,683.74 913.188,683.74 913.747,683.74 914.307,683.74 914.866,683.74 915.425,683.74 915.984,683.74 916.544,683.74 917.103,683.74 917.662,683.74 918.221,683.74 918.781,683.74 919.34,683.74 919.899,683.74 920.458,683.74 921.018,683.74 921.577,683.74 922.136,683.74 922.695,683.74 923.255,683.74 923.814,683.74 924.373,683.74 924.932,683.74 925.492,683.74 926.051,683.74 926.61,683.74 927.169,683.74 927.729,683.74 928.288,683.74 928.847,683.74 929.406,683.74 929.966,683.74 930.525,683.74 931.084,683.74 931.644,683.74 932.203,683.74 932.762,683.74 933.321,683.74 933.881,683.74 934.44,683.74 934.999,683.74 935.558,683.74 936.118,683.74 936.677,683.74 937.236,683.74 937.795,683.74 938.355,683.74 938.914,683.74 939.473,683.74 940.032,683.74 940.592,683.74 941.151,683.74 941.71,683.74 942.269,683.74 942.829,683.74 943.388,683.74 943.947,683.74 944.506,683.74 945.066,683.74 945.625,683.74 946.184,683.74 946.743,683.74 947.303,683.74 947.862,683.74 948.421,683.74 948.98,683.74 949.54,683.74 950.099,683.74 950.658,683.74 951.217,683.74 951.777,683.74 952.336,683.74 952.895,683.74 953.454,683.74 954.014,683.74 954.573,683.74 955.132,683.74 955.691,683.74 956.251,683.74 956.81,683.74 957.369,683.74 957.928,683.74 958.488,683.74 959.047,683.74 959.606,683.74 960.165,683.74 960.725,683.74 961.284,683.74 961.843,683.74 962.402,683.74 962.962,683.74 963.521,683.74 964.08,683.74 964.639,683.74 965.199,683.74 965.758,683.74 966.317,683.74 966.876,683.74 967.436,683.74 967.995,683.74 968.554,683.74 969.113,683.74 969.673,683.74 970.232,683.74 970.791,683.74 971.35,683.74 971.91,683.74 972.469,683.74 973.028,683.74 973.587,683.74 974.147,683.74 974.706,683.74 975.265,683.74 975.824,683.74 976.384,683.74 976.943,683.74 977.502,683.74 978.061,683.74 978.621,683.74 979.18,683.74 979.739,683.74 980.298,683.74 980.858,683.74 981.417,683.74 981.976,683.74 982.535,683.74 983.095,683.74 983.654,683.74 984.213,683.74 984.772,683.74 985.332,683.74 985.891,683.74 986.45,683.74 987.009,683.74 987.569,683.74 988.128,683.74 988.687,683.74 989.246,683.74 989.806,683.74 990.365,683.74 990.924,683.74 991.483,683.74 992.043,683.74 992.602,683.74 993.161,683.74 993.72,683.74 994.28,683.74 994.839,683.74 995.398,683.74 995.957,683.74 996.517,683.74 997.076,683.74 997.635,683.74 998.194,683.74 998.754,683.74 999.313,683.74 999.872,683.74 1000.43,683.74 1000.99,683.74 1001.55,683.74 1002.11,683.74 1002.67,683.74 1003.23,683.74 1003.79,683.74 1004.35,683.74 1004.91,683.74 1005.46,683.74 1006.02,683.74 1006.58,683.74 1007.14,683.74 1007.7,683.74 1008.26,683.74 1008.82,683.74 1009.38,683.74 1009.94,683.74 1010.5,683.74 1011.06,683.74 1011.62,683.74 1012.18,683.74 1012.73,683.74 1013.29,683.74 1013.85,683.74 1014.41,683.74 1014.97,683.74 1015.53,683.74 1016.09,683.74 1016.65,683.74 1017.21,683.74 1017.77,683.74 1018.33,683.74 1018.89,683.74 1019.45,683.74 1020.01,683.74 1020.56,683.74 1021.12,683.74 1021.68,683.74 1022.24,683.74 1022.8,683.74 1023.36,683.74 1023.92,683.74 1024.48,683.74 1025.04,683.74 1025.6,683.74 1026.16,683.74 1026.72,683.74 1027.28,683.74 1027.83,683.74 1028.39,683.74 1028.95,683.74 1029.51,683.74 1030.07,683.74 1030.63,683.74 1031.19,683.74 1031.75,683.74 1032.31,683.74 1032.87,683.74 1033.43,683.74 1033.99,683.74 1034.55,683.74 1035.1,683.74 1035.66,683.74 1036.22,683.74 1036.78,683.74 1037.34,683.74 1037.9,683.74 1038.46,683.74 1039.02,683.74 1039.58,683.74 1040.14,683.74 1040.7,683.74 1041.26,683.74 1041.82,683.74 1042.38,683.74 1042.93,683.74 1043.49,683.74 1044.05,683.74 1044.61,683.74 1045.17,683.74 1045.73,683.74 1046.29,683.74 1046.85,683.74 1047.41,683.74 1047.97,683.74 1048.53,683.74 1049.09,683.74 1049.65,683.74 1050.2,683.74 1050.76,683.74 1051.32,683.74 1051.88,683.74 1052.44,683.74 1053,683.74 1053.56,683.74 1054.12,683.74 1054.68,683.74 1055.24,683.74 1055.8,683.74 1056.36,683.74 1056.92,683.74 1057.48,683.74 1058.03,683.74 1058.59,683.74 1059.15,683.74 1059.71,683.74 1060.27,683.74 1060.83,683.74 1061.39,683.74 1061.95,683.74 1062.51,683.74 1063.07,683.74 1063.63,683.74 1064.19,683.74 1064.75,683.74 1065.3,683.74 1065.86,683.74 1066.42,683.74 1066.98,683.74 1067.54,683.74 1068.1,683.74 1068.66,683.74 1069.22,683.74 1069.78,683.74 1070.34,683.74 1070.9,683.74 1071.46,683.74 1072.02,683.74 1072.57,683.74 1073.13,683.74 1073.69,683.74 1074.25,683.74 1074.81,683.74 1075.37,683.74 1075.93,683.74 1076.49,683.74 1077.05,683.74 1077.61,683.74 1078.17,683.74 1078.73,683.74 1079.29,683.74 1079.85,683.74 1080.4,683.74 1080.96,683.74 1081.52,683.74 1082.08,683.74 1082.64,683.74 1083.2,683.74 1083.76,683.74 1084.32,683.74 1084.88,683.74 1085.44,683.74 1086,683.74 1086.56,683.74 1087.12,683.74 1087.67,683.74 1088.23,683.74 1088.79,683.74 1089.35,683.74 1089.91,683.74 1090.47,683.74 1091.03,683.74 1091.59,683.74 1092.15,683.74 1092.71,683.74 1093.27,683.74 1093.83,683.74 1094.39,683.74 1094.94,683.74 1095.5,683.74 1096.06,683.74 1096.62,683.74 1097.18,683.74 1097.74,683.74 1098.3,683.74 1098.86,683.74 1099.42,683.74 1099.98,683.74 1100.54,683.74 1101.1,683.74 1101.66,683.74 1102.22,683.74 1102.77,683.74 1103.33,683.74 1103.89,683.74 1104.45,683.74 1105.01,683.74 1105.57,683.74 1106.13,683.74 1106.69,683.74 1107.25,683.74 1107.81,683.74 1108.37,683.74 1108.93,683.74 1109.49,683.74 1110.04,683.74 1110.6,683.74 1111.16,683.74 1111.72,683.74 1112.28,683.74 1112.84,683.74 1113.4,683.74 1113.96,683.74 1114.52,683.74 1115.08,683.74 1115.64,683.74 1116.2,683.74 1116.76,683.74 1117.31,683.74 1117.87,683.74 1118.43,683.74 1118.99,683.74 1119.55,683.74 1120.11,683.74 1120.67,683.74 1121.23,683.74 1121.79,683.74 1122.35,683.74 1122.91,683.74 1123.47,683.74 1124.03,683.74 1124.59,683.74 1125.14,683.74 1125.7,683.74 1126.26,683.74 1126.82,683.74 1127.38,683.74 1127.94,683.74 1128.5,683.74 1129.06,683.74 1129.62,683.74 1130.18,683.74 1130.74,683.74 1131.3,683.74 1131.86,683.74 1132.41,683.74 1132.97,683.74 1133.53,683.74 1134.09,683.74 1134.65,683.74 1135.21,683.74 1135.77,683.74 1136.33,683.74 1136.89,683.74 1137.45,683.74 1138.01,683.74 1138.57,683.74 1139.13,683.74 1139.68,683.74 1140.24,683.74 1140.8,683.74 1141.36,683.74 1141.92,683.74 1142.48,683.74 1143.04,683.74 1143.6,683.74 1144.16,683.74 1144.72,683.74 1145.28,683.74 1145.84,683.74 1146.4,683.74 1146.96,683.74 1147.51,683.74 1148.07,683.74 1148.63,683.74 1149.19,683.74 1149.75,683.74 1150.31,683.74 1150.87,683.74 1151.43,683.74 1151.99,683.74 1152.55,683.74 1153.11,683.74 1153.67,683.74 1154.23,683.74 1154.78,683.74 1155.34,683.74 1155.9,683.74 1156.46,683.74 1157.02,683.74 1157.58,683.74 1158.14,683.74 1158.7,683.74 1159.26,683.74 1159.82,683.74 1160.38,683.74 1160.94,683.74 1161.5,683.74 1162.05,683.74 1162.61,683.74 1163.17,683.74 1163.73,683.74 1164.29,683.74 1164.85,683.74 1165.41,683.74 1165.97,683.74 1166.53,683.74 1167.09,683.74 1167.65,683.74 1168.21,683.74 1168.77,683.74 1169.33,683.74 1169.88,683.74 1170.44,683.74 1171,683.74 1171.56,683.74 1172.12,683.74 1172.68,683.74 1173.24,683.74 1173.8,683.74 1174.36,683.74 1174.92,683.74 1175.48,683.74 1176.04,683.74 1176.6,683.74 1177.15,683.74 1177.71,683.74 1178.27,683.74 1178.83,683.74 1179.39,683.74 1179.95,683.74 1180.51,683.74 1181.07,683.74 1181.63,683.74 1182.19,683.74 1182.75,683.74 1183.31,683.74 1183.87,683.74 1184.43,683.74 1184.98,683.74 1185.54,683.74 1186.1,683.74 1186.66,683.74 1187.22,683.74 1187.78,683.74 1188.34,683.74 1188.9,683.74 1189.46,683.74 1190.02,683.74 1190.58,683.74 1191.14,683.74 1191.7,683.74 1192.25,683.74 1192.81,683.74 1193.37,683.74 1193.93,683.74 1194.49,683.74 1195.05,683.74 1195.61,683.74 1196.17,683.74 1196.73,683.74 1197.29,683.74 1197.85,683.74 1198.41,683.74 1198.97,683.74 1199.52,683.74 1200.08,683.74 1200.64,683.74 1201.2,683.74 1201.76,683.74 1202.32,683.74 1202.88,683.74 1203.44,683.74 1204,683.74 1204.56,683.74 1205.12,683.74 1205.68,683.74 1206.24,683.74 1206.8,683.74 1207.35,683.74 1207.91,683.74 1208.47,683.74 1209.03,683.74 1209.59,683.74 1210.15,683.74 1210.71,683.74 1211.27,683.74 1211.83,683.74 1212.39,683.74 1212.95,683.74 1213.51,683.74 1214.07,683.74 1214.62,683.74 1215.18,683.74 1215.74,683.74 1216.3,683.74 1216.86,683.74 1217.42,683.74 1217.98,683.74 1218.54,683.74 1219.1,683.74 1219.66,683.74 1220.22,683.74 1220.78,683.74 1221.34,683.74 1221.89,683.74 1222.45,683.74 1223.01,683.74 1223.57,683.74 1224.13,683.74 1224.69,683.74 1225.25,683.74 1225.81,683.74 1226.37,683.74 1226.93,683.74 1227.49,683.74 1228.05,683.74 1228.61,683.74 1229.17,683.74 1229.72,683.74 1230.28,683.74 1230.84,683.74 1231.4,683.74 1231.96,683.74 1232.52,683.74 1233.08,683.74 1233.64,683.74 1234.2,683.74 1234.76,683.74 1235.32,683.74 1235.88,683.74 1236.44,683.74 1236.99,683.74 1237.55,683.74 1238.11,683.74 1238.67,683.74 1239.23,683.74 1239.79,683.74 1240.35,683.74 1240.91,683.74 1241.47,683.74 1242.03,683.74 1242.59,683.74 1243.15,683.74 1243.71,683.74 1244.26,683.74 1244.82,683.74 1245.38,683.74 1245.94,683.74 1246.5,683.74 1247.06,683.74 1247.62,683.74 1248.18,683.74 1248.74,683.74 1249.3,683.74 1249.86,683.74 1250.42,683.74 1250.98,683.74 1251.54,683.74 1252.09,683.74 1252.65,683.74 1253.21,683.74 1253.77,683.74 1254.33,683.74 1254.89,683.74 1255.45,683.74 1256.01,683.74 1256.57,683.74 1257.13,683.74 1257.69,683.74 1258.25,683.74 1258.81,683.74 1259.36,683.74 1259.92,683.74 1260.48,683.74 1261.04,683.74 1261.6,683.74 1262.16,683.74 1262.72,683.74 1263.28,683.74 1263.84,683.74 1264.4,683.74 1264.96,683.74 1265.52,683.74 1266.08,683.74 1266.63,683.74 1267.19,683.74 1267.75,683.74 1268.31,683.74 1268.87,683.74 1269.43,683.74 1269.99,683.74 1270.55,683.74 1271.11,683.74 1271.67,683.74 1272.23,683.74 1272.79,683.74 1273.35,683.74 1273.91,683.74 1274.46,683.74 1275.02,683.74 1275.58,683.74 1276.14,683.74 1276.7,683.74 1277.26,683.74 1277.82,683.74 1278.38,683.74 1278.94,683.74 1279.5,683.74 1280.06,683.74 1280.62,683.74 1281.18,683.74 1281.73,683.74 1282.29,683.74 1282.85,683.74 1283.41,683.74 1283.97,683.74 1284.53,683.74 1285.09,683.74 1285.65,683.74 1286.21,683.74 1286.77,683.74 1287.33,683.74 1287.89,683.74 1288.45,683.74 1289,683.74 1289.56,683.74 1290.12,683.74 1290.68,683.74 1291.24,683.74 1291.8,683.74 1292.36,683.74 1292.92,683.74 1293.48,683.74 1294.04,683.74 1294.6,683.74 1295.16,683.74 1295.72,683.74 1296.28,683.74 1296.83,683.74 1297.39,683.74 1297.95,683.74 1298.51,683.74 1299.07,683.74 1299.63,683.74 1300.19,683.74 1300.75,683.74 1301.31,683.74 1301.87,683.74 1302.43,683.74 1302.99,683.74 1303.55,683.74 1304.1,683.74 1304.66,683.74 1305.22,683.74 1305.78,683.74 1306.34,683.74 1306.9,683.74 1307.46,683.74 1308.02,683.74 1308.58,683.74 1309.14,683.74 1309.7,683.74 1310.26,683.74 1310.82,683.74 1311.38,683.74 1311.93,683.74 1312.49,683.74 1313.05,683.74 1313.61,683.74 1314.17,683.74 1314.73,683.74 1315.29,683.74 1315.85,683.74 1316.41,683.74 1316.97,683.74 1317.53,683.74 1318.09,683.74 1318.65,683.74 1319.2,683.74 1319.76,683.74 1320.32,683.74 1320.88,683.74 1321.44,683.74 1322,683.74 1322.56,683.74 1323.12,683.74 1323.68,683.74 1324.24,683.74 1324.8,683.74 1325.36,683.74 1325.92,683.74 1326.47,683.74 1327.03,683.74 1327.59,683.74 1328.15,683.74 1328.71,683.74 1329.27,683.74 1329.83,683.74 1330.39,683.74 1330.95,683.74 1331.51,683.74 1332.07,683.74 1332.63,683.74 1333.19,683.74 1333.75,683.74 1334.3,683.74 1334.86,683.74 1335.42,683.74 1335.98,683.74 1336.54,683.74 1337.1,683.74 1337.66,683.74 1338.22,683.74 1338.78,683.74 1339.34,683.74 1339.9,683.74 1340.46,683.74 1341.02,683.74 1341.57,683.74 1342.13,683.74 1342.69,683.74 1343.25,683.74 1343.81,683.74 1344.37,683.74 1344.93,683.74 1345.49,683.74 1346.05,683.74 1346.61,683.74 1347.17,683.74 1347.73,683.74 1348.29,683.74 1348.84,683.74 1349.4,683.74 1349.96,683.74 1350.52,683.74 1351.08,683.74 1351.64,683.74 1352.2,683.74 1352.76,683.74 1353.32,683.74 1353.88,683.74 1354.44,683.74 1355,683.74 1355.56,683.74 1356.12,683.74 1356.67,683.74 1357.23,683.74 1357.79,683.74 1358.35,683.74 1358.91,683.74 1359.47,683.74 1360.03,683.74 1360.59,683.74 1361.15,683.74 1361.71,683.74 1362.27,683.74 1362.83,683.74 1363.39,683.74 1363.94,683.74 1364.5,683.74 1365.06,683.74 1365.62,683.74 1366.18,683.74 1366.74,683.74 1367.3,683.74 1367.86,683.74 1368.42,683.74 1368.98,683.74 1369.54,683.74 1370.1,683.74 1370.66,683.74 1371.21,683.74 1371.77,683.74 1372.33,683.74 1372.89,683.74 1373.45,683.74 1374.01,683.74 1374.57,683.74 1375.13,683.74 1375.69,683.74 1376.25,683.74 1376.81,683.74 1377.37,683.74 1377.93,683.74 1378.49,683.74 1379.04,683.74 1379.6,683.74 1380.16,683.74 1380.72,683.74 1381.28,683.74 1381.84,683.74 1382.4,683.74 1382.96,683.74 1383.52,683.74 1384.08,683.74 1384.64,683.74 1385.2,683.74 1385.76,683.74 1386.31,683.74 1386.87,683.74 1387.43,683.74 1387.99,683.74 1388.55,683.74 1389.11,683.74 1389.67,683.74 1390.23,683.74 1390.79,683.74 1391.35,683.74 1391.91,683.74 1392.47,683.74 1393.03,683.74 1393.58,683.74 1394.14,683.74 1394.7,683.74 1395.26,683.74 1395.82,683.74 1396.38,683.74 1396.94,683.74 1397.5,683.74 1398.06,683.74 1398.62,683.74 1399.18,683.74 1399.74,683.74 1400.3,683.74 1400.86,683.74 1401.41,683.74 1401.97,683.74 1402.53,683.74 1403.09,683.74 1403.65,683.74 1404.21,683.74 1404.77,683.74 1405.33,683.74 1405.89,683.74 1406.45,683.74 1407.01,683.74 1407.57,683.74 1408.13,683.74 1408.68,683.74 1409.24,683.74 1409.8,683.74 1410.36,683.74 1410.92,683.74 1411.48,683.74 1412.04,683.74 1412.6,683.74 1413.16,683.74 1413.72,683.74 1414.28,683.74 1414.84,683.74 1415.4,683.74 1415.95,683.74 1416.51,683.74 1417.07,683.74 1417.63,683.74 1418.19,683.74 1418.75,683.74 1419.31,683.74 1419.87,683.74 1420.43,683.74 1420.99,683.74 1421.55,683.74 1422.11,683.74 1422.67,683.74 1423.23,683.74 1423.78,683.74 1424.34,683.74 1424.9,683.74 1425.46,683.74 1426.02,683.74 1426.58,683.74 1427.14,683.74 1427.7,683.74 1428.26,683.74 1428.82,683.74 1429.38,683.74 1429.94,683.74 1430.5,683.74 1431.05,683.74 1431.61,683.74 1432.17,683.74 1432.73,683.74 1433.29,683.74 1433.85,683.74 1434.41,683.74 1434.97,683.74 1435.53,683.74 1436.09,683.74 1436.65,683.74 1437.21,683.74 1437.77,683.74 1438.33,683.74 1438.88,683.74 1439.44,683.74 1440,683.74 1440.56,683.74 1441.12,683.74 1441.68,683.74 1442.24,683.74 1442.8,683.74 1443.36,683.74 1443.92,683.74 1444.48,683.74 1445.04,683.74 1445.6,683.74 1446.15,683.74 1446.71,683.74 1447.27,683.74 1447.83,683.74 1448.39,683.74 1448.95,683.74 1449.51,683.74 1450.07,683.74 1450.63,683.74 1451.19,683.74 1451.75,683.74 1452.31,683.74 1452.87,683.74 1453.42,683.74 1453.98,683.74 1454.54,683.74 1455.1,683.74 1455.66,683.74 1456.22,683.74 1456.78,683.74 1457.34,683.74 1457.9,683.74 1458.46,683.74 1459.02,683.74 1459.58,683.74 1460.14,683.74 1460.7,683.74 1461.25,683.74 1461.81,683.74 1462.37,683.74 1462.93,683.74 1463.49,683.74 1464.05,683.74 1464.61,683.74 1465.17,683.74 1465.73,683.74 1466.29,683.74 1466.85,683.74 1467.41,683.74 1467.97,683.74 1468.52,683.74 1469.08,683.74 1469.64,683.74 1470.2,683.74 1470.76,683.74 1471.32,683.74 1471.88,683.74 1472.44,683.74 1473,683.74 1473.56,683.74 1474.12,683.74 1474.68,683.74 1475.24,683.74 1475.79,683.74 1476.35,683.74 1476.91,683.74 1477.47,683.74 1478.03,683.74 1478.59,683.74 1479.15,683.74 1479.71,683.74 1480.27,683.74 1480.83,683.74 1481.39,683.74 1481.95,683.74 1482.51,683.74 1483.07,683.74 1483.62,683.74 1484.18,683.74 1484.74,683.74 1485.3,683.74 1485.86,683.74 1486.42,683.74 1486.98,683.74 1487.54,683.74 1488.1,683.74 1488.66,683.74 1489.22,683.74 1489.78,683.74 1490.34,683.74 1490.89,683.74 1491.45,683.74 1492.01,683.74 1492.57,683.74 1493.13,683.74 1493.69,683.74 1494.25,683.74 1494.81,683.74 1495.37,683.74 1495.93,683.74 1496.49,683.74 1497.05,683.74 1497.61,683.74 1498.16,683.74 1498.72,683.74 1499.28,683.74 1499.84,683.74 1500.4,683.74 1500.96,683.74 1501.52,683.74 1502.08,683.74 1502.64,683.74 1503.2,683.74 1503.76,683.74 1504.32,683.74 1504.88,683.74 1505.44,683.74 1505.99,683.74 1506.55,683.74 1507.11,683.74 1507.67,683.74 1508.23,683.74 1508.79,683.74 1509.35,683.74 1509.91,683.74 1510.47,683.74 1511.03,683.74 1511.59,683.74 1512.15,683.74 1512.71,683.74 1513.26,683.74 1513.82,683.74 1514.38,683.74 1514.94,683.74 1515.5,683.74 1516.06,683.74 1516.62,683.74 1517.18,683.74 1517.74,683.74 1518.3,683.74 1518.86,683.74 1519.42,683.74 1519.98,683.74 1520.53,683.74 1521.09,683.74 1521.65,683.74 1522.21,683.74 1522.77,683.74 1523.33,683.74 1523.89,683.74 1524.45,683.74 1525.01,683.74 1525.57,683.74 1526.13,683.74 1526.69,683.74 1527.25,683.74 1527.81,683.74 1528.36,683.74 1528.92,683.74 1529.48,683.74 1530.04,683.74 1530.6,683.74 1531.16,683.74 1531.72,683.74 1532.28,683.74 1532.84,683.74 1533.4,683.74 1533.96,683.74 1534.52,683.74 1535.08,683.74 1535.63,683.74 1536.19,683.74 1536.75,683.74 1537.31,683.74 1537.87,683.74 1538.43,683.74 1538.99,683.74 1539.55,683.74 1540.11,683.74 1540.67,683.74 1541.23,683.74 1541.79,683.74 1542.35,683.74 1542.9,683.74 1543.46,683.74 1544.02,683.74 1544.58,683.74 1545.14,683.74 1545.7,683.74 1546.26,683.74 1546.82,683.74 1547.38,683.74 1547.94,683.74 1548.5,683.74 1549.06,683.74 1549.62,683.74 1550.18,683.74 1550.73,683.74 1551.29,683.74 1551.85,683.74 1552.41,683.74 1552.97,683.74 1553.53,683.74 1554.09,683.74 1554.65,683.74 1555.21,683.74 1555.77,683.74 1556.33,683.74 1556.89,683.74 1557.45,683.74 1558,683.74 1558.56,683.74 1559.12,683.74 1559.68,683.74 1560.24,683.74 1560.8,683.74 1561.36,683.74 1561.92,683.74 1562.48,683.74 1563.04,683.74 1563.6,683.74 1564.16,683.74 1564.72,683.74 1565.28,683.74 1565.83,683.74 1566.39,683.74 1566.95,683.74 1567.51,683.74 1568.07,683.74 1568.63,683.74 1569.19,683.74 1569.75,683.74 1570.31,683.74 1570.87,683.74 1571.43,683.74 1571.99,683.74 1572.55,683.74 1573.1,683.74 1573.66,683.74 1574.22,683.74 1574.78,683.74 1575.34,683.74 1575.9,683.74 1576.46,683.74 1577.02,683.74 1577.58,683.74 1578.14,683.74 1578.7,683.74 1579.26,683.74 1579.82,683.74 1580.37,683.74 1580.93,683.74 1581.49,683.74 1582.05,683.74 1582.61,683.74 1583.17,683.74 1583.73,683.74 1584.29,683.74 1584.85,683.74 1585.41,683.74 1585.97,683.74 1586.53,683.74 1587.09,683.74 1587.65,683.74 1588.2,683.74 1588.76,683.74 1589.32,683.74 1589.88,683.74 1590.44,683.74 1591,683.74 1591.56,683.74 1592.12,683.74 1592.68,683.74 1593.24,683.74 1593.8,683.74 1594.36,683.74 1594.92,683.74 1595.47,683.74 1596.03,683.74 1596.59,683.74 1597.15,683.74 1597.71,683.74 1598.27,683.74 1598.83,683.74 1599.39,683.74 1599.95,683.74 1600.51,683.74 1601.07,683.74 1601.63,683.74 1602.19,683.74 1602.74,683.74 1603.3,683.74 1603.86,683.74 1604.42,683.74 1604.98,683.74 1605.54,683.74 1606.1,683.74 1606.66,683.74 1607.22,683.74 1607.78,683.74 1608.34,683.74 1608.9,683.74 1609.46,683.74 1610.02,683.74 1610.57,683.74 1611.13,683.74 1611.69,683.74 1612.25,683.74 1612.81,683.74 1613.37,683.74 1613.93,683.74 1614.49,683.74 1615.05,683.74 1615.61,683.74 1616.17,683.74 1616.73,683.74 1617.29,683.74 1617.84,683.74 1618.4,683.74 1618.96,683.74 1619.52,683.74 1620.08,683.74 1620.64,683.74 1621.2,683.74 1621.76,683.74 1622.32,683.74 1622.88,683.74 1623.44,683.74 1624,683.74 1624.56,683.74 1625.11,683.74 1625.67,683.74 1626.23,683.74 1626.79,683.74 1627.35,683.74 1627.91,683.74 1628.47,683.74 1629.03,683.74 1629.59,683.74 1630.15,683.74 1630.71,683.74 1631.27,683.74 1631.83,683.74 1632.39,683.74 1632.94,683.74 1633.5,683.74 1634.06,683.74 1634.62,683.74 1635.18,683.74 1635.74,683.74 1636.3,683.74 1636.86,683.74 1637.42,683.74 1637.98,683.74 1638.54,683.74 1639.1,683.74 1639.66,683.74 1640.21,683.74 1640.77,683.74 1641.33,683.74 1641.89,683.74 1642.45,683.74 1643.01,683.74 1643.57,683.74 1644.13,683.74 1644.69,683.74 1645.25,683.74 1645.81,683.74 1646.37,683.74 1646.93,683.74 1647.48,683.74 1648.04,683.74 1648.6,683.74 1649.16,683.74 1649.72,683.74 1650.28,683.74 1650.84,683.74 1651.4,683.74 1651.96,683.74 1652.52,683.74 1653.08,683.74 1653.64,683.74 1654.2,683.74 1654.76,683.74 1655.31,683.74 1655.87,683.74 1656.43,683.74 1656.99,683.74 1657.55,683.74 1658.11,683.74 1658.67,683.74 1659.23,683.74 1659.79,683.74 1660.35,683.74 1660.91,683.74 1661.47,683.74 1662.03,683.74 1662.58,683.74 1663.14,683.74 1663.7,683.74 1664.26,683.74 1664.82,683.74 1665.38,683.74 1665.94,683.74 1666.5,683.74 1667.06,683.74 1667.62,683.74 1668.18,683.74 1668.74,683.74 1669.3,683.74 1669.85,683.74 1670.41,683.74 1670.97,683.74 1671.53,683.74 1672.09,683.74 1672.65,683.74 1673.21,683.74 1673.77,683.74 1674.33,683.74 1674.89,683.74 1675.45,683.74 1676.01,683.74 1676.57,683.74 1677.13,683.74 1677.68,683.74 1678.24,683.74 1678.8,683.74 1679.36,683.74 1679.92,683.74 1680.48,683.74 1681.04,683.74 1681.6,683.74 1682.16,683.74 1682.72,683.74 1683.28,683.74 1683.84,683.74 1684.4,683.74 1684.95,683.74 1685.51,683.74 1686.07,683.74 1686.63,683.74 1687.19,683.74 1687.75,683.74 1688.31,683.74 1688.87,683.74 1689.43,683.74 1689.99,683.74 1690.55,683.74 1691.11,683.74 1691.67,683.74 1692.23,683.74 1692.78,683.74 1693.34,683.74 1693.9,683.74 1694.46,683.74 1695.02,683.74 1695.58,683.74 1696.14,683.74 1696.7,683.74 1697.26,683.74 1697.82,683.74 1698.38,683.74 1698.94,683.74 1699.5,683.74 1700.05,683.74 1700.61,683.74 1701.17,683.74 1701.73,683.74 1702.29,683.74 1702.85,683.74 1703.41,683.74 1703.97,683.74 1704.53,683.74 1705.09,683.74 1705.65,683.74 1706.21,683.74 1706.77,683.74 1707.32,683.74 1707.88,683.74 1708.44,683.74 1709,683.74 1709.56,683.74 1710.12,683.74 1710.68,683.74 1711.24,683.74 1711.8,683.74 1712.36,683.74 1712.92,683.74 1713.48,683.74 1714.04,683.74 1714.6,683.74 1715.15,683.74 1715.71,683.74 1716.27,683.74 1716.83,683.74 1717.39,683.74 1717.95,683.74 1718.51,683.74 1719.07,683.74 1719.63,683.74 1720.19,683.74 1720.75,683.74 1721.31,683.74 1721.87,683.74 1722.42,683.74 1722.98,683.74 1723.54,683.74 1724.1,683.74 1724.66,683.74 1725.22,683.74 1725.78,683.74 1726.34,683.74 1726.9,683.74 1727.46,683.74 1728.02,683.74 1728.58,683.74 1729.14,683.74 1729.69,683.74 1730.25,683.74 1730.81,683.74 1731.37,683.74 1731.93,683.74 1732.49,683.74 1733.05,683.74 1733.61,683.74 1734.17,683.74 1734.73,683.74 1735.29,683.74 1735.85,683.74 1736.41,683.74 1736.97,683.74 1737.52,683.74 1738.08,683.74 1738.64,683.74 1739.2,683.74 1739.76,683.74 1740.32,683.74 1740.88,683.74 1741.44,683.74 1742,683.74 1742.56,683.74 1743.12,683.74 1743.68,683.74 1744.24,683.74 1744.79,683.74 1745.35,683.74 1745.91,683.74 1746.47,683.74 1747.03,683.74 1747.59,683.74 1748.15,683.74 1748.71,683.74 1749.27,683.74 1749.83,683.74 1750.39,683.74 1750.95,683.74 1751.51,683.74 1752.06,683.74 1752.62,683.74 1753.18,683.74 1753.74,683.74 1754.3,683.74 1754.86,683.74 1755.42,683.74 1755.98,683.74 1756.54,683.74 1757.1,683.74 1757.66,683.74 1758.22,683.74 1758.78,683.74 1759.34,683.74 1759.89,683.74 1760.45,683.74 1761.01,683.74 1761.57,683.74 1762.13,683.74 1762.69,683.74 1763.25,683.74 1763.81,683.74 1764.37,683.74 1764.93,683.74 1765.49,683.74 1766.05,683.74 1766.61,683.74 1767.16,683.74 1767.72,683.74 1768.28,683.74 1768.84,683.74 1769.4,683.74 1769.96,683.74 1770.52,683.74 1771.08,683.74 1771.64,683.74 1772.2,683.74 1772.76,683.74 1773.32,683.74 1773.88,683.74 1774.43,683.74 1774.99,683.74 1775.55,683.74 1776.11,683.74 1776.67,683.74 1777.23,683.74 1777.79,683.74 1778.35,683.74 1778.91,683.74 1779.47,683.74 1780.03,683.74 1780.59,683.74 1781.15,683.74 1781.71,683.74 1782.26,683.74 1782.82,683.74 1783.38,683.74 1783.94,683.74 1784.5,683.74 1785.06,683.74 1785.62,683.74 1786.18,683.74 1786.74,683.74 1787.3,683.74 1787.86,683.74 1788.42,683.74 1788.98,683.74 1789.53,683.74 1790.09,683.74 1790.65,683.74 1791.21,683.74 1791.77,683.74 1792.33,683.74 1792.89,683.74 1793.45,683.74 1794.01,683.74 1794.57,683.74 1795.13,683.74 1795.69,683.74 1796.25,683.74 1796.8,683.74 1797.36,683.74 1797.92,683.74 1798.48,683.74 1799.04,683.74 1799.6,683.74 1800.16,683.74 1800.72,683.74 1801.28,683.74 1801.84,683.74 1802.4,683.74 1802.96,683.74 1803.52,683.74 1804.08,683.74 1804.63,683.74 1805.19,683.74 1805.75,683.74 1806.31,683.74 1806.87,683.74 1807.43,683.74 1807.99,683.74 1808.55,683.74 1809.11,683.74 1809.67,683.74 1810.23,683.74 1810.79,683.74 1811.35,683.74 1811.9,683.74 1812.46,683.74 1813.02,683.74 1813.58,683.74 1814.14,683.74 1814.7,683.74 1815.26,683.74 1815.82,683.74 1816.38,683.74 1816.94,683.74 1817.5,683.74 1818.06,683.74 1818.62,683.74 1819.18,683.74 1819.73,683.74 1820.29,683.74 1820.85,683.74 1821.41,683.74 1821.97,683.74 1822.53,683.74 1823.09,683.74 1823.65,683.74 1824.21,683.74 1824.77,683.74 1825.33,683.74 1825.89,683.74 1826.45,683.74 1827,683.74 1827.56,683.74 1828.12,683.74 1828.68,683.74 1829.24,683.74 1829.8,683.74 1830.36,683.74 1830.92,683.74 1831.48,683.74 1832.04,683.74 1832.6,683.74 1833.16,683.74 1833.72,683.74 1834.27,683.74 1834.83,683.74 1835.39,683.74 1835.95,683.74 1836.51,683.74 1837.07,683.74 1837.63,683.74 1838.19,683.74 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.03241046897152 ± 0.017741566731579103\nProjected Energy: -4.0158682002505195 ± (0.008038482278760029, 0.0073668407435425465)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.449964</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3836e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.798e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.857e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">2.534e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.937e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.804e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.759019192277087\n  0.13584182219621788\n  0.15789998694608443\n  0.8767114411781307\n  1.5305929970973216\n  1.5835732611867446\n  3.072870330325869\n  3.1256726539518356\n  4.862107221562164\n  6.260694850380598\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(address; u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
