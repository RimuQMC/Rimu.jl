var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2121415877119146 ± 0.0013025309368923713\n   G2(1) = 0.9163517785893095 ± 0.0007954787858946668\n   G2(2) = 0.9819560579008337 ± 0.0005499979380330356\n   G2(3) = 0.9912427393077978 ± 0.0010043023260203794\n   G2(4) = 0.9819560579008337 ± 0.0005499979380330356\n   G2(5) = 0.9163517785893095 ± 0.0007954787858946668\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.983155131961684 ± 0.1174827604916162\n   Replica 2: -4.009280326534524 ± 0.13353903234972006\n   Replica 3: -4.049347825061417 ± 0.1312163036101204\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip660\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip660)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip661\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip660)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip662\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.57 2211.02,1003.57 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.318 2211.02,746.318 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.067 2211.02,489.067 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.817 2211.02,231.817 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.57 423.181,1003.57 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.318 423.181,746.318 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.067 423.181,489.067 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.817 423.181,231.817 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M290.043 1016.91 L306.363 1016.91 L306.363 1020.85 L284.418 1020.85 L284.418 1016.91 Q287.08 1014.16 291.664 1009.53 Q296.27 1004.88 297.451 1003.53 Q299.696 1001.01 300.576 999.274 Q301.478 997.515 301.478 995.825 Q301.478 993.071 299.534 991.334 Q297.613 989.598 294.511 989.598 Q292.312 989.598 289.858 990.362 Q287.427 991.126 284.65 992.677 L284.65 987.955 Q287.474 986.821 289.927 986.242 Q292.381 985.663 294.418 985.663 Q299.789 985.663 302.983 988.348 Q306.177 991.033 306.177 995.524 Q306.177 997.654 305.367 999.575 Q304.58 1001.47 302.474 1004.07 Q301.895 1004.74 298.793 1007.95 Q295.691 1011.15 290.043 1016.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M316.224 986.288 L334.58 986.288 L334.58 990.223 L320.506 990.223 L320.506 998.695 Q321.524 998.348 322.543 998.186 Q323.562 998.001 324.58 998.001 Q330.367 998.001 333.747 1001.17 Q337.126 1004.34 337.126 1009.76 Q337.126 1015.34 333.654 1018.44 Q330.182 1021.52 323.862 1021.52 Q321.687 1021.52 319.418 1021.15 Q317.173 1020.78 314.765 1020.04 L314.765 1015.34 Q316.849 1016.47 319.071 1017.03 Q321.293 1017.58 323.77 1017.58 Q327.774 1017.58 330.112 1015.48 Q332.45 1013.37 332.45 1009.76 Q332.45 1006.15 330.112 1004.04 Q327.774 1001.94 323.77 1001.94 Q321.895 1001.94 320.02 1002.35 Q318.168 1002.77 316.224 1003.65 L316.224 986.288 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 989.367 Q352.728 989.367 350.899 992.932 Q349.094 996.473 349.094 1003.6 Q349.094 1010.71 350.899 1014.27 Q352.728 1017.82 356.339 1017.82 Q359.973 1017.82 361.779 1014.27 Q363.608 1010.71 363.608 1003.6 Q363.608 996.473 361.779 992.932 Q359.973 989.367 356.339 989.367 M356.339 985.663 Q362.149 985.663 365.205 990.27 Q368.284 994.853 368.284 1003.6 Q368.284 1012.33 365.205 1016.94 Q362.149 1021.52 356.339 1021.52 Q350.529 1021.52 347.45 1016.94 Q344.395 1012.33 344.395 1003.6 Q344.395 994.853 347.45 990.27 Q350.529 985.663 356.339 985.663 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M286.062 729.038 L304.418 729.038 L304.418 732.973 L290.344 732.973 L290.344 741.445 Q291.363 741.098 292.381 740.936 Q293.4 740.751 294.418 740.751 Q300.205 740.751 303.585 743.922 Q306.964 747.093 306.964 752.51 Q306.964 758.088 303.492 761.19 Q300.02 764.269 293.701 764.269 Q291.525 764.269 289.256 763.899 Q287.011 763.528 284.603 762.788 L284.603 758.088 Q286.687 759.223 288.909 759.778 Q291.131 760.334 293.608 760.334 Q297.613 760.334 299.951 758.227 Q302.288 756.121 302.288 752.51 Q302.288 748.899 299.951 746.792 Q297.613 744.686 293.608 744.686 Q291.733 744.686 289.858 745.102 Q288.006 745.519 286.062 746.399 L286.062 729.038 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M326.177 732.116 Q322.566 732.116 320.737 735.681 Q318.932 739.223 318.932 746.352 Q318.932 753.459 320.737 757.024 Q322.566 760.565 326.177 760.565 Q329.811 760.565 331.617 757.024 Q333.446 753.459 333.446 746.352 Q333.446 739.223 331.617 735.681 Q329.811 732.116 326.177 732.116 M326.177 728.413 Q331.987 728.413 335.043 733.019 Q338.122 737.602 338.122 746.352 Q338.122 755.079 335.043 759.686 Q331.987 764.269 326.177 764.269 Q320.367 764.269 317.288 759.686 Q314.233 755.079 314.233 746.352 Q314.233 737.602 317.288 733.019 Q320.367 728.413 326.177 728.413 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 732.116 Q352.728 732.116 350.899 735.681 Q349.094 739.223 349.094 746.352 Q349.094 753.459 350.899 757.024 Q352.728 760.565 356.339 760.565 Q359.973 760.565 361.779 757.024 Q363.608 753.459 363.608 746.352 Q363.608 739.223 361.779 735.681 Q359.973 732.116 356.339 732.116 M356.339 728.413 Q362.149 728.413 365.205 733.019 Q368.284 737.602 368.284 746.352 Q368.284 755.079 365.205 759.686 Q362.149 764.269 356.339 764.269 Q350.529 764.269 347.45 759.686 Q344.395 755.079 344.395 746.352 Q344.395 737.602 347.45 733.019 Q350.529 728.413 356.339 728.413 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M284.835 471.787 L307.057 471.787 L307.057 473.778 L294.511 506.347 L289.627 506.347 L301.432 475.722 L284.835 475.722 L284.835 471.787 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M316.224 471.787 L334.58 471.787 L334.58 475.722 L320.506 475.722 L320.506 484.195 Q321.524 483.847 322.543 483.685 Q323.562 483.5 324.58 483.5 Q330.367 483.5 333.747 486.671 Q337.126 489.843 337.126 495.259 Q337.126 500.838 333.654 503.94 Q330.182 507.019 323.862 507.019 Q321.687 507.019 319.418 506.648 Q317.173 506.278 314.765 505.537 L314.765 500.838 Q316.849 501.972 319.071 502.528 Q321.293 503.083 323.77 503.083 Q327.774 503.083 330.112 500.977 Q332.45 498.87 332.45 495.259 Q332.45 491.648 330.112 489.542 Q327.774 487.435 323.77 487.435 Q321.895 487.435 320.02 487.852 Q318.168 488.269 316.224 489.148 L316.224 471.787 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 474.866 Q352.728 474.866 350.899 478.431 Q349.094 481.972 349.094 489.102 Q349.094 496.208 350.899 499.773 Q352.728 503.315 356.339 503.315 Q359.973 503.315 361.779 499.773 Q363.608 496.208 363.608 489.102 Q363.608 481.972 361.779 478.431 Q359.973 474.866 356.339 474.866 M356.339 471.162 Q362.149 471.162 365.205 475.769 Q368.284 480.352 368.284 489.102 Q368.284 497.829 365.205 502.435 Q362.149 507.019 356.339 507.019 Q350.529 507.019 347.45 502.435 Q344.395 497.829 344.395 489.102 Q344.395 480.352 347.45 475.769 Q350.529 471.162 356.339 471.162 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M256.664 245.162 L264.303 245.162 L264.303 218.796 L255.992 220.463 L255.992 216.204 L264.256 214.537 L268.932 214.537 L268.932 245.162 L276.571 245.162 L276.571 249.097 L256.664 249.097 L256.664 245.162 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M296.015 217.616 Q292.404 217.616 290.576 221.18 Q288.77 224.722 288.77 231.852 Q288.77 238.958 290.576 242.523 Q292.404 246.064 296.015 246.064 Q299.65 246.064 301.455 242.523 Q303.284 238.958 303.284 231.852 Q303.284 224.722 301.455 221.18 Q299.65 217.616 296.015 217.616 M296.015 213.912 Q301.826 213.912 304.881 218.518 Q307.96 223.102 307.96 231.852 Q307.96 240.578 304.881 245.185 Q301.826 249.768 296.015 249.768 Q290.205 249.768 287.127 245.185 Q284.071 240.578 284.071 231.852 Q284.071 223.102 287.127 218.518 Q290.205 213.912 296.015 213.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M326.177 217.616 Q322.566 217.616 320.737 221.18 Q318.932 224.722 318.932 231.852 Q318.932 238.958 320.737 242.523 Q322.566 246.064 326.177 246.064 Q329.811 246.064 331.617 242.523 Q333.446 238.958 333.446 231.852 Q333.446 224.722 331.617 221.18 Q329.811 217.616 326.177 217.616 M326.177 213.912 Q331.987 213.912 335.043 218.518 Q338.122 223.102 338.122 231.852 Q338.122 240.578 335.043 245.185 Q331.987 249.768 326.177 249.768 Q320.367 249.768 317.288 245.185 Q314.233 240.578 314.233 231.852 Q314.233 223.102 317.288 218.518 Q320.367 213.912 326.177 213.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 217.616 Q352.728 217.616 350.899 221.18 Q349.094 224.722 349.094 231.852 Q349.094 238.958 350.899 242.523 Q352.728 246.064 356.339 246.064 Q359.973 246.064 361.779 242.523 Q363.608 238.958 363.608 231.852 Q363.608 224.722 361.779 221.18 Q359.973 217.616 356.339 217.616 M356.339 213.912 Q362.149 213.912 365.205 218.518 Q368.284 223.102 368.284 231.852 Q368.284 240.578 365.205 245.185 Q362.149 249.768 356.339 249.768 Q350.529 249.768 347.45 245.185 Q344.395 240.578 344.395 231.852 Q344.395 223.102 347.45 218.518 Q350.529 213.912 356.339 213.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip662)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.817 4017.76,231.817 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1246.76 458.259,1246.57 458.828,1246.24 459.396,1245.92 459.964,1245.47 460.533,1244.99 461.101,1244.36 461.669,1242.66 462.238,1241.93 462.806,1241.12 463.375,1240.21 463.943,1239.2 464.511,1238.1 465.08,1236.89 465.648,1235.57 466.216,1234.14 466.785,1232.59 467.353,1230.91 467.921,1228.08 468.49,1226.13 469.058,1223.01 469.626,1220.75 470.195,1217.33 470.763,1214.79 471.331,1212.06 471.9,1208.19 472.468,1204.11 473.036,1200.88 473.605,1196.48 474.173,1191.77 474.741,1187.99 475.31,1183.97 475.878,1179.72 476.446,1175.29 477.015,1169.66 477.583,1163.84 478.152,1158.7 478.72,1153.36 479.288,1147.87 479.857,1142.11 480.425,1135.04 480.993,1128.75 481.562,1120.2 482.13,1113.58 482.698,1106.77 483.267,1098.61 483.835,1090.29 484.403,1081.82 484.972,1074.07 485.54,1066.14 486.108,1056.96 486.677,1046.64 487.245,1036.12 487.813,1027.53 488.382,1018.6 488.95,1008.56 489.518,997.498 490.087,988.251 490.655,975.769 491.224,964.283 491.792,952.777 492.36,943.167 492.929,930.502 493.497,919.919 494.065,909.262 494.634,896.574 495.202,886.956 495.77,876.253 496.339,866.559 496.907,856.898 497.475,847.086 498.044,834.187 498.612,821.389 499.18,809.798 499.749,799.139 500.317,788.522 500.885,778.095 501.454,767.782 502.022,758.418 502.59,749.276 503.159,736.971 503.727,723.668 504.295,712.66 504.864,702.925 505.432,691.262 506.001,681.889 506.569,670.552 507.137,660.437 507.706,649.608 508.274,639.888 508.842,631.301 509.411,623.897 509.979,615.499 510.547,607.262 511.116,598.98 511.684,587.574 512.252,580.644 512.821,572.875 513.389,564.068 513.957,556.634 514.526,549.24 515.094,540.818 515.662,532.626 516.231,525.529 516.799,519.824 517.367,512.058 517.936,506.578 518.504,498.038 519.072,491.84 519.641,485.796 520.209,480.845 520.778,473.864 521.346,468.16 521.914,463.412 522.483,455.793 523.051,447.981 523.619,442.854 524.188,437.692 524.756,432.874 525.324,428 525.893,422.299 526.461,417.709 527.029,411.955 527.598,408.748 528.166,403.442 528.734,400.247 529.303,393.866 529.871,390.864 530.439,388.083 531.008,385.265 531.576,380.247 532.144,377.743 532.713,375.025 533.281,372.127 533.85,368.482 534.418,362.873 534.986,359.657 535.555,353.332 536.123,352.295 536.691,349.18 537.26,343.193 537.828,340.444 538.396,337.804 538.965,334.102 539.533,332.908 540.101,327.142 540.67,324.99 541.238,324.793 541.806,322.489 542.375,320.318 542.943,319.229 543.511,317.045 544.08,314.962 544.648,311.755 545.216,311.18 545.785,310.519 546.353,310.331 546.921,310.034 547.49,308.828 548.058,308.754 548.627,307.608 549.195,307.321 549.763,303.921 550.332,301.437 550.9,298.234 551.468,295.371 552.037,295.497 552.605,294.498 553.173,293.683 553.742,291.716 554.31,291.894 554.878,293.089 555.447,291.11 556.015,290.179 556.583,288.283 557.152,285.314 557.72,285.439 558.288,282.416 558.857,282.665 559.425,281.932 559.993,282.195 560.562,282.399 561.13,278.343 561.698,277.483 562.267,275.873 562.835,273.975 563.404,272.487 563.972,270.034 564.54,268.921 565.109,268.612 565.677,269.538 566.245,266.334 566.814,266.15 567.382,264.806 567.95,265.544 568.519,264.081 569.087,265.901 569.655,263.467 570.224,261.248 570.792,261.078 571.36,261.006 571.929,261.116 572.497,258.871 573.065,257.814 573.634,256.953 574.202,257.195 574.77,257.257 575.339,257.425 575.907,256.581 576.476,256.826 577.044,256.428 577.612,253.275 578.181,251.444 578.749,252.891 579.317,255.231 579.886,256.301 580.454,257.361 581.022,255.1 581.591,252.985 582.159,255.12 582.727,256.905 583.296,254.59 583.864,254.53 584.432,253.33 585.001,253.175 585.569,253.074 586.137,253.955 586.706,254.736 587.274,251.561 587.842,250.473 588.411,250.391 588.979,251.519 589.547,252.342 590.116,249.294 590.684,249.32 591.253,249.323 591.821,249.425 592.389,249.46 592.958,247.559 593.526,246.74 594.094,246.912 594.663,245.869 595.231,245.183 595.799,245.658 596.368,246.808 596.936,247.783 597.504,245.769 598.073,245.944 598.641,242.878 599.209,247.285 599.778,247.302 600.346,246.246 600.914,245.348 601.483,245.385 602.051,244.357 602.619,245.564 603.188,247.403 603.756,243.092 604.325,245.022 604.893,245.077 605.461,244.964 606.03,244.648 606.598,244.688 607.166,244.48 607.735,243.648 608.303,243.858 608.871,245.103 609.44,243.009 610.008,242.372 610.576,241.423 611.145,239.358 611.713,239.598 612.281,239.851 612.85,241.001 613.418,242.143 613.986,242.227 614.555,242.248 615.123,242.407 615.691,241.501 616.26,240.907 616.828,242.03 617.396,241.009 617.965,242.167 618.533,238.143 619.102,237.462 619.67,237.572 620.238,236.701 620.807,236.189 621.375,236.668 621.943,236.209 622.512,237.832 623.08,237.245 623.648,237.679 624.217,239.028 624.785,239.319 625.353,238.447 625.922,238.828 626.49,237.994 627.058,238.254 627.627,238.543 628.195,237.86 628.763,238.309 629.332,235.439 629.9,234.794 630.468,235.286 631.037,235.592 631.605,236.131 632.173,239.65 632.742,238.817 633.31,239.018 633.879,239.256 634.447,241.59 635.015,240.718 635.584,239.78 636.152,240.055 636.72,241.081 637.289,241.383 637.857,240.257 638.425,240.342 638.994,240.563 639.562,239.613 640.13,239.601 640.699,239.718 641.267,237.81 641.835,238.06 642.404,237.103 642.972,236.064 643.54,235.483 644.109,237.006 644.677,236.278 645.245,236.426 645.814,235.704 646.382,236.113 646.951,234.258 647.519,234.541 648.087,238.131 648.656,236.169 649.224,237.298 649.792,236.278 650.361,233.596 650.929,236.181 651.497,236.293 652.066,237.582 652.634,238.667 653.202,237.856 653.771,236.081 654.339,235.217 654.907,237.563 655.476,237.575 656.044,235.676 656.612,236.818 657.181,237.321 657.749,237.515 658.317,237.795 658.886,235.672 659.454,237.027 660.022,233.923 660.591,233.319 661.159,234.649 661.728,233.799 662.296,235.208 662.864,235.597 663.433,238.912 664.001,236.873 664.569,239.102 665.138,239.156 665.706,239.244 666.274,238.158 666.843,238.177 667.411,239.058 667.979,240.918 668.548,240.559 669.116,240.58 669.684,242.573 670.253,242.304 670.821,242.097 671.389,240.669 671.958,238.562 672.526,239.511 673.094,237.459 673.663,236.318 674.231,234.462 674.799,235.723 675.368,235.063 675.936,234.517 676.505,234.882 677.073,235.166 677.641,232.167 678.21,231.608 678.778,231.164 679.346,231.702 679.915,234.137 680.483,234.539 681.051,234.744 681.62,235.895 682.188,235.284 682.756,236.462 683.325,237.537 683.893,236.421 684.461,236.379 685.03,235.757 685.598,234.845 686.166,234.226 686.735,235.582 687.303,239.096 687.871,237.86 688.44,237.903 689.008,236.791 689.577,238.781 690.145,237.653 690.713,236.524 691.282,238.508 691.85,240.622 692.418,240.564 692.987,241.423 693.555,238.748 694.123,238.728 694.692,237.643 695.26,237.435 695.828,236.21 696.397,235.074 696.965,233.019 697.533,235.421 698.102,234.494 698.67,234.503 699.238,233.572 699.807,232.784 700.375,233.399 700.943,232.433 701.512,232.75 702.08,235.254 702.648,236.456 703.217,236.403 703.785,236.381 704.354,236.425 704.922,236.519 705.49,239.467 706.059,239.405 706.627,237.122 707.195,236.091 707.764,237.231 708.332,236.988 708.9,237.763 709.469,237.442 710.037,235.267 710.605,236.105 711.174,234.993 711.742,234.819 712.31,234.87 712.879,236.843 713.447,236.751 714.015,235.552 714.584,233.309 715.152,234.549 715.72,235.639 716.289,235.741 716.857,235.608 717.425,235.63 717.994,236.575 718.562,236.431 719.131,236.36 719.699,234.107 720.267,234.093 720.836,235.294 721.404,237.215 721.972,235.007 722.541,234.173 723.109,233.328 723.677,235.37 724.246,236.405 724.814,236.364 725.382,235.296 725.951,233.319 726.519,231.258 727.087,230.319 727.656,230.724 728.224,231.906 728.792,232.117 729.361,232.419 729.929,232.556 730.497,232.467 731.066,232.386 731.634,231.248 732.203,231.453 732.771,231.363 733.339,232.603 733.908,232.769 734.476,231.942 735.044,233.112 735.613,234.224 736.181,235.431 736.749,235.108 737.318,236.021 737.886,232.881 738.454,232.887 739.023,233.933 739.591,235.983 740.159,236.807 740.728,238.575 741.296,239.334 741.864,238.965 742.433,238.576 743.001,237.009 743.569,235.608 744.138,234.292 744.706,234.087 745.274,235.221 745.843,236.053 746.411,233.754 746.98,233.525 747.548,233.37 748.116,230.349 748.685,230.641 749.253,232.921 749.821,232.902 750.39,234.98 750.958,233.825 751.526,232.627 752.095,232.762 752.663,234.923 753.231,233.525 753.8,237.76 754.368,237.349 754.936,238.047 755.505,237.619 756.073,236.327 756.641,234.904 757.21,233.66 757.778,233.557 758.346,232.439 758.915,232.686 759.483,228.552 760.052,228.887 760.62,229.395 761.188,228.719 761.757,226.931 762.325,226.369 762.893,224.969 763.462,223.656 764.03,224.542 764.598,224.148 765.167,226.829 765.735,229.365 766.303,230.699 766.872,229.782 767.44,228.951 768.008,230.416 768.577,233.665 769.145,233.686 769.713,231.848 770.282,231.077 770.85,232.473 771.418,234.576 771.987,235.572 772.555,236.344 773.123,235.051 773.692,237.097 774.26,236.896 774.829,236.449 775.397,237.449 775.965,237.018 776.534,237.856 777.102,233.362 777.67,234.514 778.239,236.623 778.807,238.409 779.375,236.968 779.944,237.661 780.512,238.396 781.08,236.849 781.649,236.569 782.217,235.245 782.785,234.92 783.354,234.722 783.922,235.596 784.49,234.253 785.059,231.988 785.627,233.013 786.195,231.872 786.764,231.119 787.332,231.212 787.9,231.336 788.469,229.429 789.037,226.605 789.606,225.091 790.174,223.487 790.742,224.422 791.311,226.186 791.879,226.681 792.447,227.127 793.016,231.685 793.584,231.731 794.152,230.848 794.721,230.933 795.289,232.104 795.857,232.056 796.426,233.208 796.994,235.279 797.562,233.974 798.131,234.799 798.699,233.831 799.267,233.968 799.836,233.027 800.404,233.032 800.972,235.998 801.541,235.791 802.109,233.624 802.678,233.719 803.246,232.581 803.814,232.467 804.383,235.711 804.951,237.379 805.519,236.953 806.088,235.583 806.656,235.482 807.224,235.36 807.793,234.16 808.361,231.923 808.929,232.113 809.498,231.378 810.066,232.597 810.634,232.724 811.203,231.722 811.771,232.984 812.339,234.106 812.908,232.939 813.476,231.892 814.044,232.94 814.613,234.027 815.181,235.072 815.749,235.127 816.318,234.985 816.886,232.611 817.455,232.849 818.023,230.799 818.591,231.948 819.16,229.853 819.728,230.069 820.296,234.37 820.865,237.473 821.433,238.17 822.001,235.889 822.57,234.5 823.138,232.26 823.706,232.441 824.275,229.34 824.843,230.571 825.411,229.629 825.98,229.935 826.548,229.138 827.116,228.435 827.685,229.802 828.253,229.907 828.821,232.117 829.39,229.899 829.958,230.275 830.526,229.324 831.095,227.316 831.663,227.719 832.232,227.017 832.8,228.64 833.368,229.121 833.937,230.368 834.505,229.38 835.073,231.715 835.642,229.812 836.21,233.082 836.778,234.05 837.347,232.998 837.915,232.957 838.483,228.871 839.052,227.287 839.62,226.742 840.188,229.493 840.757,228.887 841.325,229.217 841.893,229.643 842.462,228.65 843.03,229.089 843.598,229.433 844.167,224.859 844.735,224.432 845.304,223.252 845.872,227.159 846.44,227.662 847.009,229.039 847.577,231.549 848.145,231.714 848.714,232.087 849.282,233.439 849.85,233.289 850.419,235.393 850.987,234.165 851.555,235.318 852.124,235.315 852.692,235.207 853.26,237.295 853.829,236.221 854.397,236.123 854.965,233.963 855.534,234.936 856.102,234.778 856.67,234.803 857.239,234.695 857.807,229.638 858.375,227.994 858.944,227.415 859.512,229.836 860.081,232.401 860.649,233.427 861.217,234.588 861.786,232.637 862.354,232.675 862.922,232.993 863.491,233.292 864.059,233.306 864.627,234.417 865.196,236.458 865.764,235.35 866.332,235.209 866.901,234.131 867.469,235.226 868.037,234.03 868.606,236.02 869.174,234.972 869.742,232.957 870.311,235.121 870.879,234.215 871.447,235.234 872.016,233.934 872.584,234.889 873.152,232.99 873.721,234.123 874.289,232.134 874.858,234.126 875.426,232.868 875.994,233.018 876.563,233.074 877.131,233.101 877.699,232.104 878.268,230.299 878.836,231.546 879.404,232.667 879.973,232.66 880.541,234.684 881.109,234.512 881.678,234.498 882.246,235.427 882.814,237.552 883.383,240.316 883.951,238.575 884.519,237.198 885.088,236.852 885.656,236.563 886.224,234.108 886.793,234.128 887.361,233.971 887.93,232.807 888.498,230.79 889.066,230.922 889.635,231.166 890.203,231.35 890.771,231.151 891.34,231.194 891.908,231.302 892.476,232.32 893.045,230.272 893.613,232.245 894.181,231.052 894.75,231.084 895.318,231.071 895.886,230.241 896.455,230.317 897.023,230.506 897.591,232.588 898.16,233.669 898.728,233.776 899.296,232.72 899.865,231.721 900.433,234.849 901.001,231.685 901.57,231.715 902.138,231.817 902.707,231.827 903.275,231.972 903.843,231.88 904.412,233.103 904.98,235.292 905.548,235.363 906.117,235.029 906.685,238.045 907.253,237.817 907.822,235.427 908.39,237.303 908.958,240.134 909.527,238.644 910.095,240.249 910.663,238.682 911.232,240.319 911.8,239.753 912.368,237.088 912.937,235.76 913.505,235.353 914.073,235.014 914.642,233.73 915.21,234.492 915.779,233.301 916.347,233.145 916.915,233.097 917.484,233.035 918.052,231.932 918.62,231.152 919.189,233.181 919.757,235.367 920.325,236.025 920.894,235.671 921.462,235.452 922.03,233.015 922.599,229.703 923.167,228.428 923.735,229.56 924.304,231.876 924.872,231.81 925.44,229.617 926.009,229.511 926.577,229.587 927.145,228.66 927.714,230.92 928.282,230.072 928.85,228.171 929.419,227.501 929.987,228.799 930.556,228.921 931.124,231.186 931.692,230.112 932.261,231.181 932.829,235.519 933.397,236.417 933.966,236.105 934.534,236.823 935.102,236.422 935.671,236.058 936.239,234.635 936.807,235.404 937.376,235.07 937.944,236.909 938.512,235.423 939.081,233.026 939.649,233.773 940.217,233.802 940.786,235.658 941.354,233.109 941.922,234.772 942.491,233.734 943.059,232.638 943.627,232.45 944.196,232.452 944.764,233.453 945.333,231.966 945.901,231.76 946.469,233.782 947.038,232.426 947.606,233.327 948.174,235.586 948.743,235.332 949.311,235.158 949.879,233.694 950.448,232.396 951.016,234.318 951.584,234.082 952.153,233.823 952.721,231.527 953.289,231.303 953.858,231.05 954.426,230.049 954.994,230.142 955.563,231.108 956.131,230.905 956.699,228.689 957.268,227.858 957.836,227.958 958.405,229.123 958.973,228.215 959.541,228.411 960.11,227.545 960.678,228.906 961.246,228.153 961.815,230.51 962.383,229.612 962.951,230.718 963.52,231.039 964.088,231.301 964.656,231.501 965.225,230.472 965.793,230.632 966.361,231.761 966.93,230.743 967.498,231.738 968.066,229.685 968.635,229.74 969.203,231.927 969.771,229.915 970.34,230.875 970.908,230.897 971.476,231.861 972.045,231.92 972.613,230.874 973.182,229.965 973.75,230.058 974.318,230.242 974.887,229.484 975.455,227.87 976.023,230.241 976.592,232.44 977.16,231.537 977.728,233.728 978.297,233.63 978.865,234.57 979.433,235.441 980.002,234.191 980.57,233.035 981.138,231.84 981.707,234.518 982.275,235.265 982.843,235.037 983.412,237.932 983.98,238.507 984.548,236.042 985.117,232.984 985.685,231.933 986.253,233.671 986.822,234.579 987.39,232.032 987.959,233.049 988.527,233.581 989.095,232.243 989.664,232.14 990.232,229.756 990.8,229.859 991.369,229.967 991.937,230.102 992.505,232.395 993.074,231.294 993.642,232.25 994.21,233.25 994.779,233.32 995.347,234.187 995.915,234.886 996.484,233.866 997.052,231.508 997.62,230.37 998.189,231.374 998.757,231.48 999.325,231.483 999.894,231.598 1000.46,229.418 1001.03,230.503 1001.6,229.359 1002.17,230.738 1002.74,228.86 1003.3,227.91 1003.87,231.276 1004.44,232.034 1005.01,231.61 1005.58,231.483 1006.15,229.338 1006.71,229.454 1007.28,228.436 1007.85,226.72 1008.42,228.075 1008.99,228.63 1009.56,229.903 1010.12,231.15 1010.69,230.171 1011.26,231.335 1011.83,229.491 1012.4,227.678 1012.97,228.086 1013.53,228.502 1014.1,228.728 1014.67,228.988 1015.24,227.164 1015.81,228.369 1016.38,231.429 1016.94,231.722 1017.51,232.743 1018.08,233.707 1018.65,232.573 1019.22,233.523 1019.79,233.114 1020.35,234.126 1020.92,232.929 1021.49,232.815 1022.06,230.743 1022.63,230.831 1023.2,230.748 1023.76,231.841 1024.33,230.721 1024.9,232.725 1025.47,232.723 1026.04,230.567 1026.61,229.523 1027.17,229.577 1027.74,229.783 1028.31,229.019 1028.88,229.247 1029.45,227.357 1030.02,226.378 1030.58,224.825 1031.15,223.174 1031.72,222.86 1032.29,223.547 1032.86,225.406 1033.43,227.015 1033.99,228.473 1034.56,229.931 1035.13,230.218 1035.7,230.545 1036.27,229.597 1036.84,232.032 1037.4,231.037 1037.97,230.207 1038.54,231.462 1039.11,229.465 1039.68,228.694 1040.25,231.015 1040.81,236.193 1041.38,238.004 1041.95,237.571 1042.52,238.279 1043.09,240.97 1043.66,240.274 1044.22,239.773 1044.79,240.167 1045.36,240.454 1045.93,236.786 1046.5,236.648 1047.07,235.125 1047.63,233.895 1048.2,233.648 1048.77,231.532 1049.34,231.806 1049.91,230.821 1050.48,228.036 1051.05,228.445 1051.61,229.754 1052.18,232.048 1052.75,231.062 1053.32,231.008 1053.89,229.059 1054.46,229.595 1055.02,230.679 1055.59,230.758 1056.16,232.084 1056.73,234.28 1057.3,234.264 1057.87,233.167 1058.43,232.865 1059,233.668 1059.57,230.308 1060.14,229.276 1060.71,229.595 1061.28,228.76 1061.84,229.043 1062.41,229.181 1062.98,228.226 1063.55,228.337 1064.12,228.581 1064.69,227.881 1065.25,228.187 1065.82,227.49 1066.39,228.011 1066.96,227.299 1067.53,227.826 1068.1,231.467 1068.66,234.798 1069.23,234.671 1069.8,235.694 1070.37,234.404 1070.94,233.218 1071.51,232.051 1072.07,232.286 1072.64,233.452 1073.21,233.618 1073.78,233.864 1074.35,232.97 1074.92,233.07 1075.48,234.117 1076.05,234.322 1076.62,233.19 1077.19,233.04 1077.76,231.963 1078.33,233.181 1078.89,235.435 1079.46,233.243 1080.03,233.186 1080.6,232.052 1081.17,233.086 1081.74,231.978 1082.3,232.149 1082.87,231.202 1083.44,231.307 1084.01,233.336 1084.58,232.238 1085.15,231.516 1085.71,232.671 1086.28,232.741 1086.85,233.947 1087.42,233.856 1087.99,231.936 1088.56,231.975 1089.12,230.956 1089.69,231.233 1090.26,232.179 1090.83,230.176 1091.4,231.256 1091.97,231.392 1092.53,231.538 1093.1,229.536 1093.67,230.819 1094.24,231.087 1094.81,230.033 1095.38,231.23 1095.94,231.484 1096.51,231.479 1097.08,231.633 1097.65,232.744 1098.22,231.487 1098.79,230.634 1099.35,230.716 1099.92,231.928 1100.49,230.597 1101.06,231.583 1101.63,230.54 1102.2,231.891 1102.76,233.021 1103.33,230.901 1103.9,230.092 1104.47,231.295 1105.04,232.547 1105.61,233.545 1106.17,232.581 1106.74,231.547 1107.31,230.536 1107.88,230.781 1108.45,231.914 1109.02,230.991 1109.58,232.028 1110.15,231.005 1110.72,232.229 1111.29,232.181 1111.86,233.233 1112.43,235.332 1112.99,234.268 1113.56,234.231 1114.13,234.303 1114.7,234.17 1115.27,235.129 1115.84,234.842 1116.4,235.7 1116.97,235.45 1117.54,232.019 1118.11,232.215 1118.68,234.189 1119.25,231.865 1119.81,231.872 1120.38,232.125 1120.95,230.969 1121.52,232.911 1122.09,235.959 1122.66,235.57 1123.23,236.072 1123.79,237.882 1124.36,236.151 1124.93,236.062 1125.5,237.855 1126.07,237.393 1126.64,237.862 1127.2,235.151 1127.77,232.788 1128.34,233.727 1128.91,235.625 1129.48,235.547 1130.05,235.365 1130.61,235.001 1131.18,235.87 1131.75,233.305 1132.32,230.049 1132.89,231.348 1133.46,232.297 1134.02,231.2 1134.59,229.943 1135.16,230.981 1135.73,233.117 1136.3,232.044 1136.87,233.034 1137.43,230.792 1138,228.947 1138.57,230.26 1139.14,232.495 1139.71,227.474 1140.28,225.406 1140.84,228.931 1141.41,228.873 1141.98,229.182 1142.55,228.49 1143.12,227.763 1143.69,228.007 1144.25,228.145 1144.82,228.377 1145.39,228.563 1145.96,229.79 1146.53,231.165 1147.1,232.573 1147.66,233.612 1148.23,233.45 1148.8,234.337 1149.37,233.093 1149.94,233.175 1150.51,233.033 1151.07,232.787 1151.64,231.594 1152.21,231.413 1152.78,232.639 1153.35,234.659 1153.92,233.396 1154.48,231.196 1155.05,233.201 1155.62,233.102 1156.19,235.116 1156.76,235.975 1157.33,235.362 1157.89,234.315 1158.46,234.123 1159.03,233.717 1159.6,233.504 1160.17,233.437 1160.74,232.535 1161.3,231.338 1161.87,230.226 1162.44,229.284 1163.01,227.488 1163.58,227.856 1164.15,225.795 1164.71,227.122 1165.28,228.315 1165.85,227.457 1166.42,226.688 1166.99,229.046 1167.56,228.094 1168.12,228.406 1168.69,226.55 1169.26,226.19 1169.83,226.377 1170.4,228.889 1170.97,232.081 1171.53,232.267 1172.1,234.228 1172.67,234.079 1173.24,232.78 1173.81,232.972 1174.38,231.043 1174.94,232.226 1175.51,231.188 1176.08,232.182 1176.65,232.268 1177.22,231.421 1177.79,230.4 1178.35,230.622 1178.92,230.857 1179.49,231.026 1180.06,230.093 1180.63,228.127 1181.2,228.676 1181.76,229.867 1182.33,229.032 1182.9,229.262 1183.47,228.357 1184.04,227.567 1184.61,225.879 1185.17,225.41 1185.74,228.058 1186.31,227.251 1186.88,228.484 1187.45,227.827 1188.02,230.189 1188.58,228.24 1189.15,230.802 1189.72,229.013 1190.29,229.404 1190.86,229.748 1191.43,228.976 1192,230.409 1192.56,230.741 1193.13,229.944 1193.7,230.253 1194.27,230.554 1194.84,231.931 1195.41,232.124 1195.97,230.334 1196.54,230.637 1197.11,231.026 1197.68,231.291 1198.25,231.529 1198.82,231.886 1199.38,232.083 1199.95,235.355 1200.52,235.339 1201.09,236.581 1201.66,239.522 1202.23,239.152 1202.79,238.736 1203.36,238.357 1203.93,236.847 1204.5,235.288 1205.07,234.079 1205.64,232.022 1206.2,234.149 1206.77,234.001 1207.34,231.76 1207.91,232.803 1208.48,232.523 1209.05,234.605 1209.61,233.395 1210.18,231.301 1210.75,230.269 1211.32,231.217 1211.89,230.129 1212.46,229.013 1213.02,230.156 1213.59,230.551 1214.16,230.398 1214.73,230.472 1215.3,229.577 1215.87,229.78 1216.43,229.113 1217,229.198 1217.57,231.761 1218.14,232.572 1218.71,232.557 1219.28,233.562 1219.84,233.676 1220.41,234.557 1220.98,234.475 1221.55,233.378 1222.12,233.28 1222.69,235.291 1223.25,234.303 1223.82,236.348 1224.39,234.017 1224.96,232.821 1225.53,231.671 1226.1,232.757 1226.66,232.7 1227.23,230.79 1227.8,230.995 1228.37,232.308 1228.94,232.54 1229.51,233.603 1230.07,233.493 1230.64,235.553 1231.21,235.208 1231.78,233.95 1232.35,235.842 1232.92,232.528 1233.48,232.528 1234.05,233.425 1234.62,232.291 1235.19,232.248 1235.76,230.229 1236.33,229.456 1236.89,229.754 1237.46,232.05 1238.03,234.108 1238.6,232.972 1239.17,232.812 1239.74,232.819 1240.3,233.931 1240.87,232.841 1241.44,235.818 1242.01,235.416 1242.58,235.299 1243.15,233.138 1243.71,235.183 1244.28,232.919 1244.85,232.975 1245.42,232.075 1245.99,231.968 1246.56,232.833 1247.12,232.729 1247.69,233.625 1248.26,233.476 1248.83,233.31 1249.4,234.214 1249.97,233.895 1250.53,234.65 1251.1,235.469 1251.67,236.072 1252.24,235.732 1252.81,236.346 1253.38,234.712 1253.94,234.527 1254.51,234.077 1255.08,233.812 1255.65,232.769 1256.22,232.763 1256.79,233.622 1257.35,233.446 1257.92,234.368 1258.49,232.827 1259.06,231.793 1259.63,231.787 1260.2,228.623 1260.76,231.172 1261.33,231.497 1261.9,230.395 1262.47,229.234 1263.04,230.255 1263.61,231.139 1264.18,233.239 1264.74,234.302 1265.31,239.067 1265.88,237.541 1266.45,236.049 1267.02,236.663 1267.59,235.403 1268.15,236.016 1268.72,235.681 1269.29,235.386 1269.86,234.962 1270.43,234.547 1271,235.371 1271.56,236.23 1272.13,235.102 1272.7,234.823 1273.27,234.588 1273.84,234.292 1274.41,235.928 1274.97,236.542 1275.54,236.043 1276.11,234.539 1276.68,232.416 1277.25,231.039 1277.82,231.979 1278.38,231.91 1278.95,231.992 1279.52,233.656 1280.09,234.374 1280.66,232.642 1281.23,234.573 1281.79,234.189 1282.36,235.958 1282.93,234.346 1283.5,234.11 1284.07,234.807 1284.64,231.394 1285.2,231.162 1285.77,232.023 1286.34,228.791 1286.91,226.691 1287.48,224.971 1288.05,225.407 1288.61,225.668 1289.18,227.036 1289.75,226.254 1290.32,226.694 1290.89,227.015 1291.46,226.236 1292.02,227.661 1292.59,227.789 1293.16,230.174 1293.73,229.297 1294.3,227.249 1294.87,228.337 1295.43,229.506 1296,230.606 1296.57,229.523 1297.14,229.498 1297.71,228.62 1298.28,225.526 1298.84,228.156 1299.41,230.412 1299.98,229.462 1300.55,230.511 1301.12,227.676 1301.69,229.035 1302.25,231.137 1302.82,230.129 1303.39,231.523 1303.96,231.538 1304.53,230.491 1305.1,227.824 1305.66,229.96 1306.23,230.154 1306.8,230.321 1307.37,231.471 1307.94,233.567 1308.51,231.221 1309.07,230.474 1309.64,232.4 1310.21,233.549 1310.78,232.467 1311.35,232.404 1311.92,232.376 1312.48,233.146 1313.05,233.184 1313.62,236.092 1314.19,235.68 1314.76,235.26 1315.33,234.824 1315.89,233.75 1316.46,234.833 1317.03,235.728 1317.6,236.415 1318.17,233.979 1318.74,233.829 1319.3,233.518 1319.87,234.376 1320.44,233.134 1321.01,232.028 1321.58,232.098 1322.15,234.077 1322.71,234.965 1323.28,234.611 1323.85,234.338 1324.42,234.31 1324.99,234.994 1325.56,233.748 1326.12,236.484 1326.69,235.924 1327.26,235.45 1327.83,236.969 1328.4,234.367 1328.97,233.944 1329.53,233.728 1330.1,232.596 1330.67,233.37 1331.24,232.998 1331.81,233.999 1332.38,233.842 1332.94,233.744 1333.51,233.096 1334.08,229.909 1334.65,229.853 1335.22,229.883 1335.79,227.832 1336.36,226.875 1336.92,227.053 1337.49,226.573 1338.06,225.722 1338.63,227.126 1339.2,228.551 1339.77,229.667 1340.33,228.782 1340.9,227.823 1341.47,228.054 1342.04,229.337 1342.61,230.425 1343.18,229.324 1343.74,228.409 1344.31,229.664 1344.88,229.996 1345.45,230.259 1346.02,229.364 1346.59,228.397 1347.15,227.584 1347.72,227.681 1348.29,227.961 1348.86,226.234 1349.43,225.456 1350,227.761 1350.56,229.193 1351.13,229.395 1351.7,229.785 1352.27,227.896 1352.84,230.243 1353.41,230.424 1353.97,230.415 1354.54,229.486 1355.11,228.73 1355.68,229.164 1356.25,229.273 1356.82,230.508 1357.38,232.895 1357.95,232.65 1358.52,233.78 1359.09,233.815 1359.66,233.793 1360.23,234.772 1360.79,233.344 1361.36,232.214 1361.93,231.258 1362.5,232.399 1363.07,233.37 1363.64,233.05 1364.2,230.113 1364.77,231.18 1365.34,231.137 1365.91,232.499 1366.48,233.628 1367.05,233.52 1367.61,233.484 1368.18,231.426 1368.75,232.416 1369.32,230.293 1369.89,230.471 1370.46,232.609 1371.02,231.401 1371.59,231.317 1372.16,229.289 1372.73,229.542 1373.3,229.985 1373.87,231.214 1374.43,233.339 1375,233.455 1375.57,233.464 1376.14,233.145 1376.71,233.958 1377.28,233.765 1377.84,234.683 1378.41,235.483 1378.98,235.201 1379.55,234.853 1380.12,234.612 1380.69,235.222 1381.25,234.914 1381.82,234.675 1382.39,234.5 1382.96,234.298 1383.53,233.182 1384.1,232.989 1384.66,233.942 1385.23,234.778 1385.8,235.344 1386.37,236.176 1386.94,235.761 1387.51,236.35 1388.07,236.918 1388.64,236.482 1389.21,236.073 1389.78,232.601 1390.35,232.367 1390.92,233.296 1391.48,234.371 1392.05,234.107 1392.62,232.822 1393.19,232.436 1393.76,233.122 1394.33,231.924 1394.89,231.587 1395.46,232.668 1396.03,232.586 1396.6,234.604 1397.17,234.215 1397.74,234.003 1398.3,232.431 1398.87,232.465 1399.44,233.188 1400.01,230.817 1400.58,230.827 1401.15,228.637 1401.71,229.749 1402.28,230.646 1402.85,229.566 1403.42,228.514 1403.99,229.639 1404.56,229.792 1405.13,230.79 1405.69,231.572 1406.26,230.667 1406.83,228.777 1407.4,227.787 1407.97,229.321 1408.54,229.676 1409.1,231.694 1409.67,233.799 1410.24,230.436 1410.81,231.462 1411.38,232.506 1411.95,232.248 1412.51,234.002 1413.08,232.69 1413.65,232.433 1414.22,231.374 1414.79,232.518 1415.36,231.463 1415.92,230.61 1416.49,228.724 1417.06,227.957 1417.63,225.098 1418.2,224.468 1418.77,223.946 1419.33,223.487 1419.9,227.098 1420.47,227.397 1421.04,226.683 1421.61,226.212 1422.18,226.631 1422.74,226.991 1423.31,227.122 1423.88,230.424 1424.45,230.481 1425.02,228.292 1425.59,229.709 1426.15,229.033 1426.72,231.238 1427.29,231.267 1427.86,230.307 1428.43,228.674 1429,226.855 1429.56,226.173 1430.13,226.608 1430.7,227.225 1431.27,228.459 1431.84,227.93 1432.41,227.156 1432.97,226.511 1433.54,224.749 1434.11,221.386 1434.68,222.237 1435.25,222.974 1435.82,225.697 1436.38,225.035 1436.95,225.56 1437.52,224.059 1438.09,227.744 1438.66,228.279 1439.23,228.509 1439.79,231.009 1440.36,230.393 1440.93,230.848 1441.5,231.131 1442.07,230.129 1442.64,231.518 1443.2,232.448 1443.77,233.612 1444.34,233.745 1444.91,232.627 1445.48,233.675 1446.05,234.789 1446.61,234.698 1447.18,234.563 1447.75,234.542 1448.32,233.673 1448.89,235.723 1449.46,234.541 1450.02,232.62 1450.59,232.62 1451.16,231.538 1451.73,231.664 1452.3,232.815 1452.87,235.082 1453.43,236.089 1454,234.963 1454.57,235.94 1455.14,237.667 1455.71,234.255 1456.28,234.147 1456.84,233.955 1457.41,234.008 1457.98,233.97 1458.55,237.134 1459.12,235.761 1459.69,234.525 1460.25,234.383 1460.82,232.397 1461.39,233.424 1461.96,234.346 1462.53,236.151 1463.1,233.74 1463.66,233.711 1464.23,233.763 1464.8,233.754 1465.37,233.834 1465.94,232.861 1466.51,232.946 1467.07,232.932 1467.64,232.922 1468.21,230.907 1468.78,230.064 1469.35,229.242 1469.92,229.525 1470.48,229.91 1471.05,230.052 1471.62,228.28 1472.19,230.903 1472.76,234.056 1473.33,234.115 1473.89,232.056 1474.46,231.281 1475.03,233.572 1475.6,236.692 1476.17,236.481 1476.74,237.279 1477.31,237.846 1477.87,237.59 1478.44,239.396 1479.01,237.92 1479.58,235.602 1480.15,233.293 1480.72,234.287 1481.28,235.223 1481.85,232.883 1482.42,233.642 1482.99,233.359 1483.56,234.138 1484.13,236.196 1484.69,235.716 1485.26,237.318 1485.83,236.849 1486.4,235.364 1486.97,237.113 1487.54,236.018 1488.1,236.788 1488.67,237.408 1489.24,237.956 1489.81,237.146 1490.38,237.606 1490.95,232.895 1491.51,231.767 1492.08,230.798 1492.65,229.646 1493.22,228.908 1493.79,228.063 1494.36,229.444 1494.92,233.529 1495.49,232.238 1496.06,230.07 1496.63,228.26 1497.2,226.421 1497.77,223.539 1498.33,225.113 1498.9,221.522 1499.47,222.307 1500.04,221.026 1500.61,219.895 1501.18,220.832 1501.74,221.592 1502.31,223.56 1502.88,226.184 1503.45,226.677 1504.02,227.093 1504.59,226.526 1505.15,226.339 1505.72,227.962 1506.29,229.463 1506.86,228.695 1507.43,228.01 1508,230.4 1508.56,231.515 1509.13,231.639 1509.7,231.751 1510.27,234.851 1510.84,234.802 1511.41,233.782 1511.97,235.64 1512.54,235.533 1513.11,235.569 1513.68,236.249 1514.25,234.076 1514.82,233.107 1515.38,235.125 1515.95,235.16 1516.52,235.899 1517.09,234.881 1517.66,235.796 1518.23,237.694 1518.79,236.454 1519.36,235.178 1519.93,236.07 1520.5,235.078 1521.07,234.107 1521.64,234.969 1522.2,233.663 1522.77,231.384 1523.34,229.307 1523.91,226.442 1524.48,226.926 1525.05,229.215 1525.61,231.402 1526.18,229.377 1526.75,228.674 1527.32,228.005 1527.89,226.18 1528.46,225.712 1529.02,226.315 1529.59,227.806 1530.16,227.883 1530.73,229.36 1531.3,229.482 1531.87,228.782 1532.43,228.184 1533,230.384 1533.57,232.632 1534.14,232.512 1534.71,234.568 1535.28,232.32 1535.84,231.392 1536.41,232.57 1536.98,233.759 1537.55,233.818 1538.12,232.834 1538.69,232.946 1539.25,232.928 1539.82,233.919 1540.39,234.052 1540.96,238.076 1541.53,237.486 1542.1,237.125 1542.66,237.754 1543.23,238.509 1543.8,237.056 1544.37,239.597 1544.94,237.218 1545.51,234.851 1546.08,236.756 1546.64,236.49 1547.21,235.958 1547.78,236.605 1548.35,235.056 1548.92,234.803 1549.49,233.626 1550.05,232.534 1550.62,230.471 1551.19,231.759 1551.76,230.888 1552.33,227.863 1552.9,228.922 1553.46,230.339 1554.03,230.596 1554.6,230.529 1555.17,230.454 1555.74,229.433 1556.31,228.573 1556.87,228.756 1557.44,230.951 1558.01,231.006 1558.58,232.051 1559.15,231.031 1559.72,232.258 1560.28,232.086 1560.85,230.884 1561.42,229.962 1561.99,230.98 1562.56,231.025 1563.13,231.278 1563.69,233.452 1564.26,235.33 1564.83,235.169 1565.4,233 1565.97,232.971 1566.54,232.837 1567.1,233.852 1567.67,231.46 1568.24,231.633 1568.81,229.578 1569.38,227.732 1569.95,227.838 1570.51,227.003 1571.08,228.408 1571.65,227.688 1572.22,230.108 1572.79,229.08 1573.36,230.264 1573.92,230.432 1574.49,231.593 1575.06,233.918 1575.63,233.996 1576.2,233.823 1576.77,234.826 1577.33,234.778 1577.9,236.564 1578.47,235.11 1579.04,232.744 1579.61,234.727 1580.18,235.665 1580.74,234.486 1581.31,232.38 1581.88,232.346 1582.45,236.475 1583.02,235.002 1583.59,237.902 1584.15,236.39 1584.72,237.231 1585.29,236.586 1585.86,235.173 1586.43,236.901 1587,234.396 1587.56,235.198 1588.13,235.624 1588.7,233.259 1589.27,233.084 1589.84,232.843 1590.41,231.772 1590.97,232.952 1591.54,232.561 1592.11,233.53 1592.68,233.213 1593.25,234.917 1593.82,234.724 1594.38,234.623 1594.95,235.338 1595.52,235.951 1596.09,235.496 1596.66,233.229 1597.23,232.962 1597.79,230.759 1598.36,231.692 1598.93,233.683 1599.5,232.437 1600.07,232.352 1600.64,231.996 1601.2,231.905 1601.77,230.873 1602.34,230.953 1602.91,231.966 1603.48,232.922 1604.05,231.645 1604.61,230.339 1605.18,231.284 1605.75,232.316 1606.32,232.246 1606.89,227.207 1607.46,225.255 1608.02,225.406 1608.59,224.916 1609.16,224.136 1609.73,222.607 1610.3,226.301 1610.87,226.582 1611.43,226.911 1612,227.076 1612.57,228.419 1613.14,228.391 1613.71,228.569 1614.28,227.953 1614.84,227.185 1615.41,229.337 1615.98,229.393 1616.55,230.683 1617.12,231.768 1617.69,233.016 1618.26,232.922 1618.82,232.873 1619.39,231.94 1619.96,229.715 1620.53,229.984 1621.1,231.173 1621.67,230.175 1622.23,228.41 1622.8,228.598 1623.37,227.982 1623.94,229.631 1624.51,230.181 1625.08,231.306 1625.64,230.392 1626.21,229.498 1626.78,229.533 1627.35,230.619 1627.92,230.664 1628.49,229.967 1629.05,231.214 1629.62,231.177 1630.19,233.183 1630.76,236.268 1631.33,236.035 1631.9,237.8 1632.46,236.411 1633.03,236.133 1633.6,237.118 1634.17,237.99 1634.74,237.603 1635.31,237.987 1635.87,239.416 1636.44,237.762 1637.01,237.314 1637.58,235.777 1638.15,237.427 1638.72,236.848 1639.28,235.393 1639.85,235.265 1640.42,235.269 1640.99,232.985 1641.56,232.777 1642.13,232.704 1642.69,233.802 1643.26,231.388 1643.83,231.364 1644.4,230.208 1644.97,231.199 1645.54,231.15 1646.1,232.195 1646.67,232.056 1647.24,230.895 1647.81,229.632 1648.38,229.685 1648.95,230.964 1649.51,229.034 1650.08,232.403 1650.65,232.132 1651.22,231.152 1651.79,232.311 1652.36,231.017 1652.92,227.966 1653.49,226.154 1654.06,227.423 1654.63,228.647 1655.2,227.665 1655.77,228.962 1656.33,231.125 1656.9,230.027 1657.47,228.094 1658.04,227.233 1658.61,227.869 1659.18,229.33 1659.74,227.287 1660.31,227.405 1660.88,227.733 1661.45,228.947 1662.02,229.108 1662.59,229.255 1663.15,229.313 1663.72,230.458 1664.29,230.775 1664.86,229.886 1665.43,226.137 1666,227.859 1666.56,229.225 1667.13,231.471 1667.7,231.557 1668.27,230.739 1668.84,231.111 1669.41,232.27 1669.97,234.389 1670.54,235.268 1671.11,233.241 1671.68,232.111 1672.25,232.01 1672.82,232.053 1673.38,233.16 1673.95,234.069 1674.52,233.949 1675.09,233.692 1675.66,234.682 1676.23,236.562 1676.79,238.406 1677.36,237.044 1677.93,237.77 1678.5,237.111 1679.07,239.736 1679.64,239.361 1680.2,237.833 1680.77,238.595 1681.34,238.112 1681.91,237.484 1682.48,239.251 1683.05,238.85 1683.61,240.372 1684.18,239.546 1684.75,238.943 1685.32,238.576 1685.89,236.907 1686.46,236.736 1687.02,237.172 1687.59,237.659 1688.16,238.172 1688.73,238.715 1689.3,241.369 1689.87,238.463 1690.44,234.508 1691,232.198 1691.57,231.747 1692.14,229.581 1692.71,231.567 1693.28,229.327 1693.85,229.592 1694.41,227.547 1694.98,226.727 1695.55,227.912 1696.12,226.871 1696.69,227.091 1697.26,225.351 1697.82,226.953 1698.39,226.106 1698.96,226.346 1699.53,225.569 1700.1,223.979 1700.67,225.277 1701.23,227.661 1701.8,227.828 1702.37,229.978 1702.94,226.833 1703.51,226.994 1704.08,228.323 1704.64,228.534 1705.21,229.894 1705.78,228.775 1706.35,227.916 1706.92,228.304 1707.49,229.474 1708.05,226.585 1708.62,225.003 1709.19,225.46 1709.76,225.865 1710.33,228.194 1710.9,227.298 1711.46,227.724 1712.03,228.015 1712.6,228.206 1713.17,229.56 1713.74,228.641 1714.31,228.989 1714.87,228.329 1715.44,228.682 1716.01,230.117 1716.58,228.245 1717.15,227.588 1717.72,227.858 1718.28,229.975 1718.85,230.237 1719.42,229.175 1719.99,228.206 1720.56,228.587 1721.13,228.701 1721.69,227.81 1722.26,225.838 1722.83,224.222 1723.4,222.717 1723.97,227.521 1724.54,228.81 1725.1,227.151 1725.67,227.724 1726.24,228.133 1726.81,229.633 1727.38,229.923 1727.95,231.103 1728.51,230.44 1729.08,231.649 1729.65,232.83 1730.22,233.129 1730.79,232.037 1731.36,230.157 1731.92,233.586 1732.49,230.641 1733.06,230.934 1733.63,233.941 1734.2,235.713 1734.77,235.477 1735.33,235.467 1735.9,233.238 1736.47,232.432 1737.04,231.637 1737.61,232.457 1738.18,232.527 1738.74,235.777 1739.31,234.762 1739.88,234.671 1740.45,234.869 1741.02,234.606 1741.59,234.357 1742.15,233.211 1742.72,235.142 1743.29,234.003 1743.86,236.952 1744.43,237.888 1745,238.61 1745.56,238.105 1746.13,237.893 1746.7,242.798 1747.27,240.976 1747.84,240.311 1748.41,240.632 1748.97,240.878 1749.54,238.143 1750.11,236.496 1750.68,236.558 1751.25,236.45 1751.82,235.881 1752.38,235.48 1752.95,235.069 1753.52,234.873 1754.09,236.475 1754.66,232.125 1755.23,233.194 1755.79,233.919 1756.36,232.805 1756.93,230.516 1757.5,231.463 1758.07,234.556 1758.64,235.556 1759.21,238.317 1759.77,236.838 1760.34,234.336 1760.91,236.131 1761.48,236.71 1762.05,236.143 1762.62,234.563 1763.18,233.153 1763.75,233.086 1764.32,230.881 1764.89,232.996 1765.46,233.98 1766.03,234.711 1766.59,235.514 1767.16,230.059 1767.73,231.075 1768.3,233.11 1768.87,232.764 1769.44,233.604 1770,233.443 1770.57,235.103 1771.14,235.935 1771.71,234.539 1772.28,234.093 1772.85,233.851 1773.41,232.56 1773.98,232.334 1774.55,231.068 1775.12,228.918 1775.69,231.081 1776.26,230.938 1776.82,231.813 1777.39,234.848 1777.96,233.413 1778.53,231.059 1779.1,230.997 1779.67,231.766 1780.23,231.587 1780.8,230.549 1781.37,231.455 1781.94,230.324 1782.51,228.225 1783.08,229.356 1783.64,228.168 1784.21,227.325 1784.78,227.494 1785.35,227.536 1785.92,225.825 1786.49,225.176 1787.05,226.585 1787.62,225.714 1788.19,224.96 1788.76,225.316 1789.33,223.739 1789.9,222.216 1790.46,221.743 1791.03,221.333 1791.6,220.185 1792.17,221.08 1792.74,223.981 1793.31,226.714 1793.87,227.334 1794.44,225.782 1795.01,224.414 1795.58,226.214 1796.15,226.92 1796.72,228.35 1797.28,229.695 1797.85,229.94 1798.42,230.226 1798.99,229.236 1799.56,229.51 1800.13,229.73 1800.69,232.989 1801.26,232.907 1801.83,231.68 1802.4,232.073 1802.97,230.07 1803.54,230.339 1804.1,231.607 1804.67,231.742 1805.24,230.818 1805.81,229.932 1806.38,229.191 1806.95,229.472 1807.51,227.812 1808.08,229.407 1808.65,230.571 1809.22,230.802 1809.79,230.855 1810.36,228.923 1810.92,232.225 1811.49,232.44 1812.06,233.553 1812.63,234.711 1813.2,233.573 1813.77,232.581 1814.33,230.517 1814.9,229.854 1815.47,232.309 1816.04,230.059 1816.61,231.109 1817.18,232.391 1817.74,233.299 1818.31,232.442 1818.88,231.674 1819.45,233.999 1820.02,234.894 1820.59,232.644 1821.15,233.633 1821.72,234.433 1822.29,233.342 1822.86,231.263 1823.43,231.25 1824,233.617 1824.56,233.411 1825.13,234.454 1825.7,233.473 1826.27,229.59 1826.84,230.823 1827.41,231.152 1827.97,230.129 1828.54,230.211 1829.11,230.491 1829.68,232.629 1830.25,233.642 1830.82,235.525 1831.39,236.463 1831.95,237.027 1832.52,236.651 1833.09,235.357 1833.66,235.079 1834.23,233.034 1834.8,233 1835.36,233.809 1835.93,233.714 1836.5,235.626 1837.07,236.455 1837.64,235.153 1838.21,236.1 1838.77,234.923 1839.34,234.907 1839.91,237.765 1840.48,236.134 1841.05,236.899 1841.62,235.509 1842.18,232.128 1842.75,231.069 1843.32,231.074 1843.89,228.988 1844.46,229.342 1845.03,228.377 1845.59,229.483 1846.16,229.603 1846.73,227.902 1847.3,230.36 1847.87,230.557 1848.44,231.698 1849,232.603 1849.57,231.296 1850.14,230.94 1850.71,231.917 1851.28,232.873 1851.85,232.802 1852.41,232.74 1852.98,232.654 1853.55,232.676 1854.12,229.589 1854.69,230.907 1855.26,227.86 1855.82,226.221 1856.39,226.63 1856.96,224.746 1857.53,225.274 1858.1,226.795 1858.67,226.033 1859.23,223.331 1859.8,223.792 1860.37,223.273 1860.94,224.065 1861.51,224.724 1862.08,224.404 1862.64,225.043 1863.21,224.809 1863.78,227.44 1864.35,228.006 1864.92,225.373 1865.49,227.216 1866.05,228.681 1866.62,230.197 1867.19,232.692 1867.76,232.718 1868.33,232.711 1868.9,232.81 1869.46,232.853 1870.03,230.067 1870.6,231.423 1871.17,233.673 1871.74,235.973 1872.31,238.109 1872.87,235.975 1873.44,235.824 1874.01,237.839 1874.58,239.518 1875.15,242.215 1875.72,239.647 1876.28,242.239 1876.85,241.443 1877.42,242.035 1877.99,242.542 1878.56,242.1 1879.13,243.563 1879.69,243.952 1880.26,243.103 1880.83,240.105 1881.4,237.348 1881.97,236.764 1882.54,236.341 1883.1,236.926 1883.67,236.649 1884.24,236.194 1884.81,235.843 1885.38,235.565 1885.95,236.212 1886.51,236.052 1887.08,234.722 1887.65,232.38 1888.22,233.172 1888.79,234.257 1889.36,233.058 1889.92,232.928 1890.49,230.629 1891.06,230.485 1891.63,229.463 1892.2,230.417 1892.77,230.46 1893.33,231.535 1893.9,230.625 1894.47,231.611 1895.04,231.56 1895.61,229.338 1896.18,232.582 1896.74,232.45 1897.31,232.523 1897.88,232.341 1898.45,229.95 1899.02,227.855 1899.59,227.825 1900.16,228.108 1900.72,228.319 1901.29,229.314 1901.86,227.43 1902.43,228.759 1903,229.037 1903.57,227.09 1904.13,228.536 1904.7,228.624 1905.27,230.934 1905.84,230.795 1906.41,229.844 1906.98,228.766 1907.54,230.203 1908.11,228.396 1908.68,229.743 1909.25,231.064 1909.82,231.141 1910.39,232.28 1910.95,233.149 1911.52,235.974 1912.09,234.723 1912.66,232.226 1913.23,231.131 1913.8,231.348 1914.36,231.148 1914.93,231.141 1915.5,230.064 1916.07,230.117 1916.64,230.189 1917.21,230.26 1917.77,227.273 1918.34,228.708 1918.91,229.936 1919.48,230.18 1920.05,230.228 1920.62,230.341 1921.18,234.49 1921.75,235.385 1922.32,237.248 1922.89,235.837 1923.46,234.68 1924.03,233.563 1924.59,233.329 1925.16,232.167 1925.73,232.954 1926.3,231.758 1926.87,235.8 1927.44,238.367 1928,236.963 1928.57,237.441 1929.14,234.998 1929.71,234.705 1930.28,231.386 1930.85,230.262 1931.41,230.449 1931.98,234.658 1932.55,236.443 1933.12,235.018 1933.69,235.757 1934.26,237.498 1934.82,240.018 1935.39,240.424 1935.96,240.027 1936.53,239.475 1937.1,237.845 1937.67,238.168 1938.23,235.818 1938.8,231.401 1939.37,231.153 1939.94,230.993 1940.51,233.072 1941.08,231.795 1941.64,233.64 1942.21,234.279 1942.78,234.826 1943.35,234.288 1943.92,234.824 1944.49,235.449 1945.05,236.271 1945.62,238.881 1946.19,238.45 1946.76,238.928 1947.33,239.215 1947.9,235.547 1948.46,235.417 1949.03,235.063 1949.6,234.674 1950.17,233.382 1950.74,232.877 1951.31,233.61 1951.87,232.153 1952.44,232.071 1953.01,230.958 1953.58,231.853 1954.15,232.768 1954.72,233.674 1955.28,231.199 1955.85,230.108 1956.42,231.172 1956.99,232.809 1957.56,233.593 1958.13,233.087 1958.69,231.79 1959.26,232.624 1959.83,231.325 1960.4,228.844 1960.97,228.666 1961.54,229.702 1962.1,231.469 1962.67,230.117 1963.24,230.917 1963.81,230.684 1964.38,228.484 1964.95,228.465 1965.51,229.577 1966.08,227.368 1966.65,228.646 1967.22,229.442 1967.79,229.579 1968.36,229.717 1968.92,229.75 1969.49,229.765 1970.06,229.783 1970.63,229.832 1971.2,227.757 1971.77,229.734 1972.34,228.684 1972.9,228.596 1973.47,227.568 1974.04,229.63 1974.61,227.599 1975.18,226.575 1975.75,224.645 1976.31,223.875 1976.88,226.43 1977.45,228.527 1978.02,227.729 1978.59,226.841 1979.16,228.103 1979.72,227.17 1980.29,226.454 1980.86,226.997 1981.43,226.342 1982,228.67 1982.57,230.895 1983.13,228.815 1983.7,227.871 1984.27,229.113 1984.84,228.163 1985.41,228.576 1985.98,226.692 1986.54,226.982 1987.11,227.274 1987.68,226.755 1988.25,227.033 1988.82,227.436 1989.39,226.697 1989.95,230.228 1990.52,230.585 1991.09,230.739 1991.66,230.814 1992.23,229.073 1992.8,229.176 1993.36,227.394 1993.93,225.688 1994.5,226.196 1995.07,227.692 1995.64,225.854 1996.21,226.378 1996.77,226.757 1997.34,225.204 1997.91,225.554 1998.48,228.178 1999.05,228.587 1999.62,227.837 2000.18,229.431 2000.75,230.889 2001.32,228.182 2001.89,225.538 2002.46,225.1 2003.03,226.776 2003.59,230.454 2004.16,230.476 2004.73,230.677 2005.3,229.699 2005.87,228.794 2006.44,230.115 2007,230.333 2007.57,230.604 2008.14,232.091 2008.71,232.155 2009.28,232.282 2009.85,231.304 2010.41,231.474 2010.98,230.625 2011.55,230.925 2012.12,229.039 2012.69,227.369 2013.26,226.558 2013.82,227 2014.39,226.439 2014.96,229.954 2015.53,230.424 2016.1,230.574 2016.67,230.927 2017.23,232.535 2017.8,233.746 2018.37,234.979 2018.94,234.947 2019.51,234.73 2020.08,238.814 2020.64,237.36 2021.21,235.92 2021.78,234.906 2022.35,234.774 2022.92,233.842 2023.49,232.473 2024.05,232.456 2024.62,232.637 2025.19,233.716 2025.76,236.992 2026.33,241.014 2026.9,241.495 2027.46,243.827 2028.03,241.074 2028.6,239.564 2029.17,239.288 2029.74,237.851 2030.31,239.628 2030.87,239.306 2031.44,238.905 2032.01,238.381 2032.58,237.945 2033.15,236.634 2033.72,236.374 2034.28,235.036 2034.85,233.962 2035.42,235.782 2035.99,236.489 2036.56,234.976 2037.13,234.792 2037.69,233.513 2038.26,232.49 2038.83,228.184 2039.4,227.375 2039.97,230.685 2040.54,228.685 2041.11,228.785 2041.67,230.945 2042.24,230.692 2042.81,228.89 2043.38,228.05 2043.95,230.401 2044.52,229.382 2045.08,229.65 2045.65,229.983 2046.22,230.308 2046.79,231.31 2047.36,230.389 2047.93,229.568 2048.49,229.774 2049.06,227.72 2049.63,228.253 2050.2,226.479 2050.77,230.158 2051.34,232.361 2051.9,232.123 2052.47,232.065 2053.04,234.256 2053.61,232.96 2054.18,231.999 2054.75,233.03 2055.31,234.073 2055.88,233.088 2056.45,231.888 2057.02,229.934 2057.59,230.28 2058.16,229.467 2058.72,226.601 2059.29,228.084 2059.86,229.259 2060.43,233.541 2061,235.346 2061.57,237.313 2062.13,233.944 2062.7,233.807 2063.27,234.464 2063.84,235.32 2064.41,234.869 2064.98,236.685 2065.54,235.363 2066.11,235.245 2066.68,235.943 2067.25,235.635 2067.82,235.303 2068.39,235.05 2068.95,236.101 2069.52,235.598 2070.09,233.25 2070.66,233.016 2071.23,232.841 2071.8,233.748 2072.36,233.788 2072.93,232.764 2073.5,231.394 2074.07,231.51 2074.64,229.707 2075.21,229.985 2075.77,230.019 2076.34,228.138 2076.91,230.278 2077.48,231.375 2078.05,232.505 2078.62,233.246 2079.18,236.353 2079.75,236.966 2080.32,236.606 2080.89,235.17 2081.46,233.772 2082.03,233.786 2082.59,233.74 2083.16,235.274 2083.73,236.175 2084.3,235.661 2084.87,236.195 2085.44,236.695 2086,236.18 2086.57,235.788 2087.14,236.398 2087.71,236.074 2088.28,235.589 2088.85,235.293 2089.41,231.849 2089.98,231.474 2090.55,230.501 2091.12,229.521 2091.69,229.581 2092.26,228.556 2092.82,229.779 2093.39,228.837 2093.96,229.027 2094.53,228.354 2095.1,229.365 2095.67,229.54 2096.23,229.717 2096.8,229.853 2097.37,231.007 2097.94,232.849 2098.51,231.845 2099.08,230.727 2099.64,230.837 2100.21,233.057 2100.78,231.957 2101.35,230.52 2101.92,229.457 2102.49,228.521 2103.05,228.906 2103.62,229.964 2104.19,229.997 2104.76,229.074 2105.33,231.179 2105.9,232.256 2106.46,232.364 2107.03,234.209 2107.6,232.916 2108.17,232.582 2108.74,232.405 2109.31,232.224 2109.87,231.048 2110.44,231.018 2111.01,232.113 2111.58,235.137 2112.15,233.662 2112.72,229.516 2113.29,227.469 2113.85,226.622 2114.42,226.01 2114.99,227.307 2115.56,226.321 2116.13,229.048 2116.7,228.321 2117.26,228.472 2117.83,229.787 2118.4,231.081 2118.97,231.947 2119.54,232.991 2120.11,233.12 2120.67,233.08 2121.24,234.028 2121.81,233.648 2122.38,232.491 2122.95,231.511 2123.52,230.509 2124.08,231.647 2124.65,231.396 2125.22,229.396 2125.79,228.757 2126.36,228.826 2126.93,227.75 2127.49,228.981 2128.06,227.232 2128.63,228.755 2129.2,227.899 2129.77,225.202 2130.34,227.776 2130.9,228.928 2131.47,229.025 2132.04,229.289 2132.61,229.539 2133.18,229.697 2133.75,230.067 2134.31,231.053 2134.88,232.251 2135.45,231.359 2136.02,231.268 2136.59,232.199 2137.16,232.324 2137.72,233.398 2138.29,231.406 2138.86,232.523 2139.43,232.525 2140,231.562 2140.57,231.565 2141.13,231.597 2141.7,232.84 2142.27,233.058 2142.84,230.779 2143.41,232.042 2143.98,232.949 2144.54,235.112 2145.11,234.954 2145.68,234.693 2146.25,234.571 2146.82,232.383 2147.39,232.377 2147.95,234.492 2148.52,234.445 2149.09,232.199 2149.66,231.218 2150.23,232.299 2150.8,231.095 2151.36,231.206 2151.93,230.307 2152.5,233.504 2153.07,233.317 2153.64,231.208 2154.21,232.328 2154.77,233.402 2155.34,231.119 2155.91,233.036 2156.48,232.804 2157.05,233.779 2157.62,234.65 2158.18,233.383 2158.75,234.29 2159.32,233.983 2159.89,235.623 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip660)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.026\n  with uncertainty of ± 0.0023909039689527737\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01335 ± (0.00182524, 0.001839) (MC)\n  95% confidence interval: [-4.01709, -4.0098]) (MC)\n  linear error propagation: -4.01345 ± 0.0018333\n  |δ_y| = |0.00184633| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013348436202404, val_l = 0.0037426777884910223, val_u = 0.003545100920514521)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip690\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip691\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip692\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1149.72 2211.02,1149.72 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,989.742 2211.02,989.742 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,829.761 2211.02,829.761 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,669.78 2211.02,669.78 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,509.799 2211.02,509.799 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,349.818 2211.02,349.818 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,189.837 2211.02,189.837 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1149.72 365.751,1149.72 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,989.742 365.751,989.742 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,829.761 365.751,829.761 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,669.78 365.751,669.78 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,509.799 365.751,509.799 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,349.818 365.751,349.818 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,189.837 365.751,189.837 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M298.909 1135.52 Q295.298 1135.52 293.469 1139.09 Q291.664 1142.63 291.664 1149.76 Q291.664 1156.86 293.469 1160.43 Q295.298 1163.97 298.909 1163.97 Q302.543 1163.97 304.349 1160.43 Q306.177 1156.86 306.177 1149.76 Q306.177 1142.63 304.349 1139.09 Q302.543 1135.52 298.909 1135.52 M298.909 1131.82 Q304.719 1131.82 307.775 1136.42 Q310.853 1141.01 310.853 1149.76 Q310.853 1158.48 307.775 1163.09 Q304.719 1167.67 298.909 1167.67 Q293.099 1167.67 290.02 1163.09 Q286.964 1158.48 286.964 1149.76 Q286.964 1141.01 290.02 1136.42 Q293.099 1131.82 298.909 1131.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M259.557 1003.09 L267.196 1003.09 L267.196 976.721 L258.886 978.388 L258.886 974.129 L267.15 972.462 L271.826 972.462 L271.826 1003.09 L279.465 1003.09 L279.465 1007.02 L259.557 1007.02 L259.557 1003.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 975.541 Q295.298 975.541 293.469 979.106 Q291.664 982.647 291.664 989.777 Q291.664 996.883 293.469 1000.45 Q295.298 1003.99 298.909 1003.99 Q302.543 1003.99 304.349 1000.45 Q306.177 996.883 306.177 989.777 Q306.177 982.647 304.349 979.106 Q302.543 975.541 298.909 975.541 M298.909 971.837 Q304.719 971.837 307.775 976.444 Q310.853 981.027 310.853 989.777 Q310.853 998.504 307.775 1003.11 Q304.719 1007.69 298.909 1007.69 Q293.099 1007.69 290.02 1003.11 Q286.964 998.504 286.964 989.777 Q286.964 981.027 290.02 976.444 Q293.099 971.837 298.909 971.837 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M262.775 843.106 L279.094 843.106 L279.094 847.041 L257.15 847.041 L257.15 843.106 Q259.812 840.351 264.395 835.722 Q269.002 831.069 270.182 829.726 Q272.428 827.203 273.307 825.467 Q274.21 823.708 274.21 822.018 Q274.21 819.263 272.266 817.527 Q270.344 815.791 267.242 815.791 Q265.043 815.791 262.59 816.555 Q260.159 817.319 257.381 818.87 L257.381 814.148 Q260.205 813.014 262.659 812.435 Q265.113 811.856 267.15 811.856 Q272.52 811.856 275.715 814.541 Q278.909 817.226 278.909 821.717 Q278.909 823.847 278.099 825.768 Q277.312 827.666 275.205 830.259 Q274.627 830.93 271.525 834.148 Q268.423 837.342 262.775 843.106 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 815.56 Q295.298 815.56 293.469 819.125 Q291.664 822.666 291.664 829.796 Q291.664 836.902 293.469 840.467 Q295.298 844.009 298.909 844.009 Q302.543 844.009 304.349 840.467 Q306.177 836.902 306.177 829.796 Q306.177 822.666 304.349 819.125 Q302.543 815.56 298.909 815.56 M298.909 811.856 Q304.719 811.856 307.775 816.463 Q310.853 821.046 310.853 829.796 Q310.853 838.523 307.775 843.129 Q304.719 847.712 298.909 847.712 Q293.099 847.712 290.02 843.129 Q286.964 838.523 286.964 829.796 Q286.964 821.046 290.02 816.463 Q293.099 811.856 298.909 811.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M272.914 668.426 Q276.27 669.143 278.145 671.412 Q280.043 673.681 280.043 677.014 Q280.043 682.13 276.525 684.93 Q273.006 687.731 266.525 687.731 Q264.349 687.731 262.034 687.292 Q259.742 686.875 257.289 686.018 L257.289 681.505 Q259.233 682.639 261.548 683.217 Q263.863 683.796 266.386 683.796 Q270.784 683.796 273.076 682.06 Q275.39 680.324 275.39 677.014 Q275.39 673.958 273.238 672.245 Q271.108 670.509 267.289 670.509 L263.261 670.509 L263.261 666.667 L267.474 666.667 Q270.923 666.667 272.752 665.301 Q274.58 663.912 274.58 661.319 Q274.58 658.657 272.682 657.245 Q270.807 655.81 267.289 655.81 Q265.367 655.81 263.168 656.227 Q260.969 656.644 258.33 657.523 L258.33 653.357 Q260.992 652.616 263.307 652.245 Q265.645 651.875 267.705 651.875 Q273.029 651.875 276.131 654.306 Q279.233 656.713 279.233 660.833 Q279.233 663.704 277.59 665.694 Q275.946 667.662 272.914 668.426 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 655.579 Q295.298 655.579 293.469 659.144 Q291.664 662.685 291.664 669.815 Q291.664 676.921 293.469 680.486 Q295.298 684.028 298.909 684.028 Q302.543 684.028 304.349 680.486 Q306.177 676.921 306.177 669.815 Q306.177 662.685 304.349 659.144 Q302.543 655.579 298.909 655.579 M298.909 651.875 Q304.719 651.875 307.775 656.482 Q310.853 661.065 310.853 669.815 Q310.853 678.542 307.775 683.148 Q304.719 687.731 298.909 687.731 Q293.099 687.731 290.02 683.148 Q286.964 678.542 286.964 669.815 Q286.964 661.065 290.02 656.482 Q293.099 651.875 298.909 651.875 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M271.594 496.593 L259.789 515.042 L271.594 515.042 L271.594 496.593 M270.367 492.519 L276.247 492.519 L276.247 515.042 L281.177 515.042 L281.177 518.931 L276.247 518.931 L276.247 527.079 L271.594 527.079 L271.594 518.931 L255.992 518.931 L255.992 514.417 L270.367 492.519 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 495.598 Q295.298 495.598 293.469 499.162 Q291.664 502.704 291.664 509.834 Q291.664 516.94 293.469 520.505 Q295.298 524.047 298.909 524.047 Q302.543 524.047 304.349 520.505 Q306.177 516.94 306.177 509.834 Q306.177 502.704 304.349 499.162 Q302.543 495.598 298.909 495.598 M298.909 491.894 Q304.719 491.894 307.775 496.5 Q310.853 501.084 310.853 509.834 Q310.853 518.561 307.775 523.167 Q304.719 527.75 298.909 527.75 Q293.099 527.75 290.02 523.167 Q286.964 518.561 286.964 509.834 Q286.964 501.084 290.02 496.5 Q293.099 491.894 298.909 491.894 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M258.793 332.538 L277.15 332.538 L277.15 336.473 L263.076 336.473 L263.076 344.945 Q264.094 344.598 265.113 344.436 Q266.131 344.251 267.15 344.251 Q272.937 344.251 276.316 347.422 Q279.696 350.593 279.696 356.01 Q279.696 361.589 276.224 364.691 Q272.752 367.769 266.432 367.769 Q264.256 367.769 261.988 367.399 Q259.742 367.029 257.335 366.288 L257.335 361.589 Q259.418 362.723 261.641 363.279 Q263.863 363.834 266.34 363.834 Q270.344 363.834 272.682 361.728 Q275.02 359.621 275.02 356.01 Q275.02 352.399 272.682 350.292 Q270.344 348.186 266.34 348.186 Q264.465 348.186 262.59 348.603 Q260.738 349.019 258.793 349.899 L258.793 332.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 335.617 Q295.298 335.617 293.469 339.181 Q291.664 342.723 291.664 349.853 Q291.664 356.959 293.469 360.524 Q295.298 364.066 298.909 364.066 Q302.543 364.066 304.349 360.524 Q306.177 356.959 306.177 349.853 Q306.177 342.723 304.349 339.181 Q302.543 335.617 298.909 335.617 M298.909 331.913 Q304.719 331.913 307.775 336.519 Q310.853 341.103 310.853 349.853 Q310.853 358.579 307.775 363.186 Q304.719 367.769 298.909 367.769 Q293.099 367.769 290.02 363.186 Q286.964 358.579 286.964 349.853 Q286.964 341.103 290.02 336.519 Q293.099 331.913 298.909 331.913 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M269.326 187.973 Q266.178 187.973 264.326 190.126 Q262.497 192.279 262.497 196.029 Q262.497 199.756 264.326 201.932 Q266.178 204.085 269.326 204.085 Q272.474 204.085 274.303 201.932 Q276.154 199.756 276.154 196.029 Q276.154 192.279 274.303 190.126 Q272.474 187.973 269.326 187.973 M278.608 173.321 L278.608 177.58 Q276.849 176.747 275.043 176.307 Q273.261 175.867 271.502 175.867 Q266.872 175.867 264.418 178.992 Q261.988 182.117 261.641 188.436 Q263.006 186.423 265.066 185.358 Q267.127 184.27 269.603 184.27 Q274.812 184.27 277.821 187.441 Q280.853 190.589 280.853 196.029 Q280.853 201.353 277.705 204.571 Q274.557 207.788 269.326 207.788 Q263.33 207.788 260.159 203.205 Q256.988 198.598 256.988 189.872 Q256.988 181.677 260.877 176.816 Q264.766 171.932 271.316 171.932 Q273.076 171.932 274.858 172.279 Q276.664 172.626 278.608 173.321 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 175.636 Q295.298 175.636 293.469 179.2 Q291.664 182.742 291.664 189.872 Q291.664 196.978 293.469 200.543 Q295.298 204.085 298.909 204.085 Q302.543 204.085 304.349 200.543 Q306.177 196.978 306.177 189.872 Q306.177 182.742 304.349 179.2 Q302.543 175.636 298.909 175.636 M298.909 171.932 Q304.719 171.932 307.775 176.538 Q310.853 181.122 310.853 189.872 Q310.853 198.598 307.775 203.205 Q304.719 207.788 298.909 207.788 Q293.099 207.788 290.02 203.205 Q286.964 198.598 286.964 189.872 Q286.964 181.122 290.02 176.538 Q293.099 171.932 298.909 171.932 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip692)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1031.84 400.199,923.55 400.786,824.186 401.372,852.738 401.958,972.144 402.545,879.68 403.131,799.688 403.718,718.922 404.304,649.535 404.891,581.848 405.477,526.278 406.063,548.821 406.65,496.67 407.236,449.583 407.823,407.233 408.409,369.313 408.995,335.536 409.582,305.632 410.168,279.347 410.755,256.443 411.341,236.696 411.927,219.895 412.514,247.528 413.1,234.515 413.687,260.524 414.273,251.462 414.86,275.279 415.446,268.52 416.032,264.094 416.619,285.993 417.205,307.244 417.792,305.328 418.378,325.022 418.964,346.253 419.551,346.73 420.137,349.124 420.724,353.029 421.31,357.352 421.896,376.927 422.483,395.743 423.069,402.62 423.656,410.038 424.242,417.234 424.829,425.607 425.415,445.931 426.001,455.781 426.588,485.101 427.174,494.214 427.761,503.448 428.347,522.217 428.933,540.291 429.52,557.51 430.106,568.131 430.693,578.709 431.279,596.259 431.865,619.274 432.452,641.695 433.038,651.713 433.625,662.767 434.211,678.763 434.798,698.8 435.384,708.968 435.97,733.417 436.557,752.128 437.143,769.975 437.73,779.209 438.316,800.16 438.902,812.244 439.489,824.15 440.075,842.945 440.662,850.386 441.248,861.317 441.835,868.621 442.421,875.669 443.007,883.067 443.594,899.823 444.18,915.871 444.767,928.08 445.353,937.458 445.939,946.625 446.526,955.198 447.112,963.419 447.699,969.147 448.285,974.337 448.871,987.478 449.458,1002.93 450.044,1012.77 450.631,1019.64 451.217,1030.98 451.804,1037.14 452.39,1047.74 452.976,1055.69 453.563,1065.24 454.149,1072.5 454.736,1077.5 455.322,1080.19 455.908,1085.01 456.495,1089.62 457.081,1094.44 457.668,1105.45 458.254,1107.96 458.84,1112.19 459.427,1118.49 460.013,1122.37 460.6,1126.29 461.186,1132.21 461.773,1137.84 462.359,1141.65 462.945,1143.14 463.532,1148.34 464.118,1149.73 464.705,1156.47 465.291,1159.37 465.877,1162.14 466.464,1163.2 467.05,1167.73 467.637,1170.3 468.223,1171.41 468.809,1177.3 469.396,1183.63 469.982,1185.8 470.569,1188.14 471.155,1190.04 471.742,1192.14 472.328,1195.63 472.914,1197.52 473.501,1201.29 474.087,1201.29 474.674,1204.57 475.26,1204.75 475.846,1209.82 476.433,1209.95 477.019,1209.81 477.606,1209.81 478.192,1213.13 478.778,1212.85 479.365,1212.95 479.951,1213.38 480.538,1214.97 481.124,1219.5 481.711,1220.68 482.297,1226.42 482.883,1224.69 483.47,1225.97 484.056,1231.42 484.643,1232.39 485.229,1233.27 485.815,1235.72 486.402,1234.72 486.988,1240.16 487.575,1240.67 488.161,1238.52 488.748,1239.3 489.334,1239.96 489.92,1239.17 490.507,1239.92 491.093,1240.59 491.68,1242.85 492.266,1241.57 492.852,1240.42 493.439,1238.64 494.025,1237.02 494.612,1236.65 495.198,1234.76 495.784,1234.34 496.371,1232.78 496.957,1235.47 497.544,1237 498.13,1239.56 498.717,1241.73 499.303,1239.92 499.889,1239.64 500.476,1239.13 501.062,1240.2 501.649,1238.42 502.235,1235.27 502.821,1236.37 503.408,1236.1 503.994,1237.15 504.581,1239.69 505.167,1238.15 505.753,1240.82 506.34,1239.2 506.926,1238.88 507.513,1237.25 508.099,1235.69 508.686,1239.81 509.272,1239.76 509.858,1240.74 510.445,1242.13 511.031,1243.03 511.618,1245.23 512.204,1245.73 512.79,1245.19 513.377,1243.04 513.963,1246.3 514.55,1245.67 515.136,1246.56 515.722,1244.76 516.309,1245.82 516.895,1242.62 517.482,1244.95 518.068,1247.05 518.655,1246.53 519.241,1245.89 519.827,1245.01 520.414,1247.19 521,1247.89 521.587,1248.35 522.173,1247.41 522.759,1246.69 523.346,1245.83 523.932,1246.28 524.519,1245.34 525.105,1245.23 525.691,1248.7 526.278,1250.53 526.864,1248.16 527.451,1244.6 528.037,1242.62 528.624,1240.62 529.21,1242.92 529.796,1245.08 530.383,1241.78 530.969,1238.87 531.556,1241.25 532.142,1240.75 532.728,1241.73 533.315,1241.39 533.901,1240.99 534.488,1239.31 535.074,1237.74 535.661,1241.28 536.247,1242.19 536.833,1241.83 537.42,1239.9 538.006,1238.34 538.593,1241.77 539.179,1241.3 539.765,1240.85 540.352,1240.28 540.938,1239.79 541.525,1241.8 542.111,1242.46 542.697,1241.87 543.284,1242.83 543.87,1243.36 544.457,1242.42 545.043,1240.59 545.63,1238.96 546.216,1241.15 546.802,1240.58 547.389,1244.16 547.975,1238.22 548.562,1237.81 549.148,1238.78 549.734,1239.58 550.321,1239.19 550.907,1240.17 551.494,1238.3 552.08,1235.59 552.666,1240.75 553.253,1237.99 553.839,1237.58 554.426,1237.4 555.012,1237.47 555.599,1237.1 556.185,1237.05 556.771,1237.8 557.358,1237.23 557.944,1235.33 558.531,1237.69 559.117,1238.22 559.703,1239.18 560.29,1241.58 560.876,1241.08 561.463,1240.57 562.049,1238.89 562.635,1237.2 563.222,1236.84 563.808,1236.55 564.395,1236.08 564.981,1236.98 565.568,1237.5 566.154,1235.83 566.74,1236.88 567.327,1235.17 567.913,1240.06 568.5,1240.77 569.086,1240.49 569.672,1241.46 570.259,1241.99 570.845,1241.27 571.432,1241.73 572.018,1239.55 572.605,1240.15 573.191,1239.46 573.777,1237.6 574.364,1237.04 574.95,1237.97 575.537,1237.32 576.123,1238.21 576.709,1237.72 577.296,1237.19 577.882,1237.9 578.469,1237.17 579.055,1240.67 579.641,1241.4 580.228,1240.7 580.814,1240.22 581.401,1239.44 581.987,1234.84 582.574,1235.71 583.16,1235.28 583.746,1234.8 584.333,1231.63 584.919,1232.5 585.506,1233.48 586.092,1232.93 586.678,1231.41 587.265,1230.79 587.851,1231.99 588.438,1231.67 589.024,1231.18 589.61,1232.17 590.197,1231.99 590.783,1231.65 591.37,1233.89 591.956,1233.42 592.543,1234.49 593.129,1235.68 593.715,1236.31 594.302,1234.28 594.888,1235.08 595.475,1234.78 596.061,1235.58 596.647,1234.97 597.234,1237.22 597.82,1236.8 598.407,1232.16 598.993,1234.5 599.579,1232.95 600.166,1234.12 600.752,1237.42 601.339,1234.08 601.925,1233.83 602.512,1232.08 603.098,1230.55 603.684,1231.41 604.271,1233.53 604.857,1234.52 605.444,1231.45 606.03,1231.29 606.616,1233.56 607.203,1232.01 607.789,1231.25 608.376,1230.86 608.962,1230.36 609.548,1232.92 610.135,1231.1 610.721,1234.92 611.308,1235.63 611.894,1233.91 612.481,1234.92 613.067,1233.07 613.653,1232.49 614.24,1228.17 614.826,1230.6 615.413,1227.63 615.999,1227.38 616.585,1227.08 617.172,1228.28 617.758,1228.1 618.345,1226.82 618.931,1224.26 619.518,1224.49 620.104,1224.24 620.69,1221.47 621.277,1221.55 621.863,1221.55 622.45,1223.12 623.036,1225.59 623.622,1224.21 624.209,1226.64 624.795,1227.96 625.382,1230.21 625.968,1228.54 626.554,1229.28 627.141,1229.89 627.727,1229.36 628.314,1228.92 628.9,1232.65 629.487,1233.35 630.073,1233.92 630.659,1233.25 631.246,1230.16 631.832,1229.59 632.419,1229.27 633.005,1227.73 633.591,1228.4 634.178,1226.82 634.764,1225.33 635.351,1226.61 635.937,1226.55 636.523,1227.23 637.11,1228.29 637.696,1229 638.283,1227.22 638.869,1222.64 639.456,1224.04 640.042,1223.83 640.628,1225.1 641.215,1222.44 641.801,1223.7 642.388,1225 642.974,1222.35 643.56,1219.48 644.147,1219.33 644.733,1218.02 645.32,1221.2 645.906,1221.05 646.492,1222.26 647.079,1222.38 647.665,1223.8 648.252,1225.14 648.838,1227.67 649.425,1224.59 650.011,1225.68 650.597,1225.6 651.184,1226.72 651.77,1227.67 652.357,1226.87 652.943,1228.06 653.529,1227.64 654.116,1224.43 654.702,1222.81 655.289,1222.77 655.875,1222.68 656.462,1222.51 657.048,1222.28 657.634,1218.4 658.221,1218.28 658.807,1221.01 659.394,1222.19 659.98,1220.63 660.566,1220.81 661.153,1219.69 661.739,1219.95 662.326,1222.58 662.912,1221.43 663.498,1222.74 664.085,1222.88 664.671,1222.74 665.258,1220.15 665.844,1220.14 666.431,1221.55 667.017,1224.31 667.603,1222.69 668.19,1221.24 668.776,1221.01 669.363,1221.08 669.949,1220.96 670.535,1219.66 671.122,1219.73 671.708,1219.7 672.295,1222.46 672.881,1222.42 673.467,1220.83 674.054,1218.3 674.64,1220.98 675.227,1221.96 675.813,1222.97 676.4,1220.34 676.986,1218.93 677.572,1218.87 678.159,1220.12 678.745,1222.54 679.332,1225.12 679.918,1226.33 680.504,1225.85 681.091,1224.38 681.677,1224.11 682.264,1223.72 682.85,1223.53 683.436,1223.62 684.023,1223.71 684.609,1225.14 685.196,1224.89 685.782,1225.02 686.369,1223.46 686.955,1223.23 687.541,1224.25 688.128,1222.76 688.714,1221.32 689.301,1219.72 689.887,1220.04 690.473,1218.8 691.06,1222.69 691.646,1222.65 692.233,1221.3 692.819,1218.64 693.405,1217.48 693.992,1215.1 694.578,1213.96 695.165,1214.25 695.751,1214.57 696.338,1216.4 696.924,1218.05 697.51,1219.63 698.097,1219.83 698.683,1218.33 699.27,1217.19 699.856,1220.01 700.442,1220.25 701.029,1220.41 701.615,1224.2 702.202,1223.87 702.788,1221 703.375,1221 703.961,1218.33 704.547,1219.72 705.134,1221.19 705.72,1221 706.307,1218.23 706.893,1219.93 707.479,1214.5 708.066,1214.87 708.652,1213.84 709.239,1214.23 709.825,1215.74 710.411,1217.44 710.998,1218.94 711.584,1219.03 712.171,1220.4 712.757,1220.07 713.344,1225.29 713.93,1224.95 714.516,1224.38 715.103,1225.29 715.689,1227.63 716.276,1228.46 716.862,1230.36 717.448,1232.19 718.035,1231.27 718.621,1231.95 719.208,1228.76 719.794,1225.68 720.38,1224.05 720.967,1225.24 721.553,1226.34 722.14,1224.56 722.726,1220.47 723.313,1220.4 723.899,1222.68 724.485,1223.66 725.072,1221.91 725.658,1219.22 726.245,1217.88 726.831,1216.8 727.417,1218.34 728.004,1215.65 728.59,1215.78 729.177,1216.22 729.763,1214.83 730.349,1215.24 730.936,1214.04 731.522,1219.61 732.109,1218.11 732.695,1215.36 733.282,1212.96 733.868,1214.63 734.454,1213.62 735.041,1212.53 735.627,1214.34 736.214,1214.58 736.8,1216.14 737.386,1216.47 737.973,1216.65 738.559,1215.46 739.146,1217.08 739.732,1219.89 740.318,1218.59 740.905,1220.01 741.491,1220.96 742.078,1220.86 742.664,1220.72 743.251,1223.14 743.837,1226.77 744.423,1228.81 745.01,1231 745.596,1230.03 746.183,1227.99 746.769,1227.5 747.355,1227.07 747.942,1221.41 748.528,1221.36 749.115,1222.48 749.701,1222.4 750.288,1220.94 750.874,1220.99 751.46,1219.52 752.047,1216.85 752.633,1218.43 753.22,1217.32 753.806,1218.48 754.392,1218.26 754.979,1219.4 755.565,1219.36 756.152,1215.56 756.738,1215.72 757.324,1218.38 757.911,1218.21 758.497,1219.61 759.084,1219.73 759.67,1215.59 760.257,1213.37 760.843,1213.78 761.429,1215.39 762.016,1215.43 762.602,1215.49 763.189,1216.93 763.775,1219.71 764.361,1219.47 764.948,1220.39 765.534,1218.86 766.121,1218.68 766.707,1219.93 767.293,1218.33 767.88,1216.87 768.466,1218.3 769.053,1219.6 769.639,1218.27 770.226,1216.86 770.812,1215.47 771.398,1215.32 771.985,1215.42 772.571,1218.36 773.158,1218.04 773.744,1220.61 774.33,1219.18 774.917,1221.83 775.503,1221.61 776.09,1216.19 776.676,1212.18 777.262,1211.15 777.849,1213.9 778.435,1215.56 779.022,1218.34 779.608,1218.1 780.195,1222.02 780.781,1220.52 781.367,1221.74 781.954,1221.41 782.54,1222.47 783.127,1223.42 783.713,1221.78 784.299,1221.69 784.886,1218.94 785.472,1221.74 786.059,1221.31 786.645,1222.56 787.232,1225.16 787.818,1224.76 788.404,1225.75 788.991,1223.82 789.577,1223.29 790.164,1221.78 790.75,1223.06 791.336,1220.16 791.923,1222.58 792.509,1218.48 793.096,1217.22 793.682,1218.5 794.268,1218.52 794.855,1223.67 795.441,1225.75 796.028,1226.55 796.614,1223.2 797.201,1224.02 797.787,1223.68 798.373,1223.2 798.96,1224.51 799.546,1224.04 800.133,1223.67 800.719,1229.51 801.305,1230.22 801.892,1231.88 802.478,1227.17 803.065,1226.65 803.651,1225.01 804.237,1221.9 804.824,1221.7 805.41,1221.23 805.997,1219.51 806.583,1219.66 807.17,1216.95 807.756,1218.42 808.342,1216.89 808.929,1216.81 809.515,1216.86 810.102,1214.11 810.688,1215.35 811.274,1215.36 811.861,1218 812.447,1216.71 813.034,1216.84 813.62,1216.73 814.206,1216.79 814.793,1223.14 815.379,1225.27 815.966,1226.1 816.552,1223.15 817.139,1219.94 817.725,1218.63 818.311,1217.11 818.898,1219.52 819.484,1219.45 820.071,1219.03 820.657,1218.62 821.243,1218.56 821.83,1217.11 822.416,1214.45 823.003,1215.75 823.589,1215.84 824.175,1217.12 824.762,1215.67 825.348,1217.11 825.935,1214.52 826.521,1215.75 827.108,1218.24 827.694,1215.46 828.28,1216.53 828.867,1215.17 829.453,1216.74 830.04,1215.47 830.626,1217.81 831.212,1216.34 831.799,1218.81 832.385,1216.27 832.972,1217.81 833.558,1217.6 834.145,1217.49 834.731,1217.43 835.317,1218.66 835.904,1220.94 836.49,1219.4 837.077,1217.98 837.663,1217.97 838.249,1215.38 838.836,1215.53 839.422,1215.48 840.009,1214.23 840.595,1211.43 841.181,1207.76 841.768,1209.77 842.354,1211.36 842.941,1211.67 843.527,1211.91 844.114,1214.91 844.7,1214.83 845.286,1214.97 845.873,1216.4 846.459,1218.93 847.046,1218.79 847.632,1218.51 848.218,1218.29 848.805,1218.55 849.391,1218.51 849.978,1218.39 850.564,1217.11 851.15,1219.7 851.737,1217.24 852.323,1218.74 852.91,1218.72 853.496,1218.75 854.083,1219.82 854.669,1219.76 855.255,1219.56 855.842,1216.95 856.428,1215.56 857.015,1215.38 857.601,1216.67 858.187,1217.92 858.774,1213.95 859.36,1217.89 859.947,1217.86 860.533,1217.73 861.119,1217.72 861.706,1217.53 862.292,1217.64 862.879,1216.09 863.465,1213.27 864.052,1213.1 864.638,1213.43 865.224,1209.51 865.811,1209.65 866.397,1212.54 866.984,1210.06 867.57,1206.31 868.156,1208.01 868.743,1205.78 869.329,1207.58 869.916,1205.31 870.502,1205.82 871.089,1209.03 871.675,1210.59 872.261,1211.01 872.848,1211.35 873.434,1212.91 874.021,1211.89 874.607,1213.34 875.193,1213.5 875.78,1213.53 876.366,1213.57 876.953,1214.94 877.539,1215.93 878.125,1213.37 878.712,1210.56 879.298,1209.63 879.885,1209.98 880.471,1210.16 881.058,1213.17 881.644,1217.34 882.23,1219 882.817,1217.66 883.403,1214.78 883.99,1214.86 884.576,1217.64 885.162,1217.83 885.749,1217.79 886.335,1219.02 886.922,1216.23 887.508,1217.33 888.094,1219.78 888.681,1220.72 889.267,1219.18 889.854,1219.1 890.44,1216.31 891.027,1217.68 891.613,1216.37 892.199,1210.88 892.786,1209.64 893.372,1209.92 893.959,1208.9 894.545,1209.29 895.131,1209.64 895.718,1211.34 896.304,1210.29 896.891,1210.63 897.477,1208.21 898.063,1209.97 898.65,1212.93 899.236,1211.95 899.823,1211.86 900.409,1209.45 900.996,1212.6 901.582,1210.45 902.168,1211.7 902.755,1213.04 903.341,1213.26 903.928,1213.24 904.514,1211.96 905.1,1213.8 905.687,1214.06 906.273,1211.5 906.86,1213.17 907.446,1212.01 908.032,1209.1 908.619,1209.33 909.205,1209.46 909.792,1211.24 910.378,1212.84 910.965,1210.39 911.551,1210.62 912.137,1210.9 912.724,1213.76 913.31,1214.05 913.897,1214.39 914.483,1215.68 915.069,1215.6 915.656,1214.42 916.242,1214.69 916.829,1217.52 917.415,1218.65 918.002,1218.62 918.588,1217.24 919.174,1218.46 919.761,1218.3 920.347,1219.48 920.934,1217.87 921.52,1218.89 922.106,1216 922.693,1217.17 923.279,1215.82 923.866,1215.44 924.452,1215.13 925.038,1214.89 925.625,1216.2 926.211,1216.03 926.798,1214.63 927.384,1215.92 927.971,1214.69 928.557,1217.29 929.143,1217.27 929.73,1214.55 930.316,1217.1 930.903,1215.93 931.489,1215.93 932.075,1214.73 932.662,1214.65 933.248,1215.98 933.835,1217.15 934.421,1217.08 935.007,1216.89 935.594,1217.89 936.18,1219.99 936.767,1217.09 937.353,1214.34 937.94,1215.47 938.526,1212.69 939.112,1212.77 939.699,1211.53 940.285,1210.35 940.872,1211.85 941.458,1213.26 942.044,1214.75 942.631,1211.35 943.217,1210.33 943.804,1210.53 944.39,1206.76 944.976,1205.88 945.563,1208.85 946.149,1212.64 946.736,1213.94 947.322,1211.73 947.909,1210.53 948.495,1213.7 949.081,1212.4 949.668,1211.7 950.254,1213.35 950.841,1213.47 951.427,1216.49 952.013,1216.41 952.6,1216.32 953.186,1216.19 953.773,1213.33 954.359,1214.71 954.945,1213.51 955.532,1212.23 956.118,1212.11 956.705,1210.97 957.291,1210.02 957.878,1211.24 958.464,1214.18 959.05,1215.63 959.637,1214.4 960.223,1214.27 960.81,1214.28 961.396,1214.14 961.982,1216.91 962.569,1215.59 963.155,1217.08 963.742,1215.39 964.328,1217.79 964.915,1219.07 965.501,1214.91 966.087,1213.96 966.674,1214.49 967.26,1214.66 967.847,1217.38 968.433,1217.3 969.019,1218.64 969.606,1220.89 970.192,1219.31 970.779,1218.7 971.365,1217.17 971.951,1215.64 972.538,1216.89 973.124,1215.46 973.711,1217.81 974.297,1220.16 974.884,1219.75 975.47,1219.31 976.056,1219.11 976.643,1218.86 977.229,1221.23 977.816,1219.83 978.402,1216.04 978.988,1215.67 979.575,1214.38 980.161,1213.13 980.748,1214.53 981.334,1213.3 981.92,1213.78 982.507,1212.46 983.093,1213.92 983.68,1214.04 984.266,1216.64 984.853,1216.56 985.439,1216.69 986.025,1215.33 986.612,1216.75 987.198,1214.23 987.785,1214.21 988.371,1216.93 988.957,1218.28 989.544,1218.27 990.13,1218.06 990.717,1219.08 991.303,1218.86 991.889,1221.32 992.476,1222.66 993.062,1224.76 993.649,1227.01 994.235,1227.62 994.822,1226.97 995.408,1224.84 995.994,1222.97 996.581,1221.24 997.167,1219.48 997.754,1219.16 998.34,1218.79 998.926,1220.02 999.513,1216.99 1000.1,1218.25 1000.69,1219.32 1001.27,1217.77 1001.86,1220.31 1002.44,1221.34 1003.03,1218.48 1003.62,1211.92 1004.2,1209.5 1004.79,1209.9 1005.38,1208.85 1005.96,1205.25 1006.55,1205.91 1007.14,1206.34 1007.72,1205.64 1008.31,1205.06 1008.9,1209.53 1009.48,1209.58 1010.07,1211.4 1010.65,1212.88 1011.24,1213.15 1011.83,1215.79 1012.41,1215.45 1013,1216.7 1013.59,1220.25 1014.17,1219.82 1014.76,1218.25 1015.35,1215.4 1015.93,1216.64 1016.52,1216.73 1017.11,1219.22 1017.69,1218.6 1018.28,1217.29 1018.86,1217.22 1019.45,1215.56 1020.04,1212.76 1020.62,1212.72 1021.21,1214.06 1021.8,1214.41 1022.38,1213.36 1022.97,1217.58 1023.56,1218.92 1024.14,1218.58 1024.73,1219.69 1025.32,1219.41 1025.9,1219.3 1026.49,1220.58 1027.07,1220.53 1027.66,1220.31 1028.25,1221.27 1028.83,1220.98 1029.42,1221.95 1030.01,1221.4 1030.59,1222.4 1031.18,1221.84 1031.77,1217.33 1032.35,1213.11 1032.94,1213.2 1033.52,1211.82 1034.11,1213.37 1034.7,1214.81 1035.28,1216.26 1035.87,1215.95 1036.46,1214.46 1037.04,1214.21 1037.63,1213.85 1038.22,1214.94 1038.8,1214.78 1039.39,1213.42 1039.98,1213.1 1040.56,1214.48 1041.15,1214.63 1041.73,1215.97 1042.32,1214.42 1042.91,1211.52 1043.49,1214.22 1044.08,1214.26 1044.67,1215.66 1045.25,1214.34 1045.84,1215.72 1046.43,1215.5 1047.01,1216.69 1047.6,1216.57 1048.19,1214.01 1048.77,1215.37 1049.36,1216.27 1049.94,1214.81 1050.53,1214.7 1051.12,1213.15 1051.7,1213.21 1052.29,1215.6 1052.88,1215.55 1053.46,1216.83 1054.05,1216.5 1054.64,1215.32 1055.22,1217.85 1055.81,1216.52 1056.39,1216.36 1056.98,1216.19 1057.57,1218.73 1058.15,1217.16 1058.74,1216.85 1059.33,1218.2 1059.91,1216.73 1060.5,1216.42 1061.09,1216.44 1061.67,1216.25 1062.26,1214.84 1062.85,1216.42 1063.43,1217.51 1064.02,1217.43 1064.6,1215.92 1065.19,1217.61 1065.78,1216.39 1066.36,1217.72 1066.95,1216.03 1067.54,1214.6 1068.12,1217.26 1068.71,1218.31 1069.3,1216.82 1069.88,1215.25 1070.47,1213.96 1071.06,1215.14 1071.64,1216.44 1072.23,1217.73 1072.81,1217.45 1073.4,1216.04 1073.99,1217.2 1074.57,1215.91 1075.16,1217.2 1075.75,1215.67 1076.33,1215.72 1076.92,1214.38 1077.51,1211.67 1078.09,1212.94 1078.68,1212.92 1079.26,1212.77 1079.85,1212.88 1080.44,1211.6 1081.02,1211.88 1081.61,1210.71 1082.2,1210.94 1082.78,1215.21 1083.37,1214.95 1083.96,1212.44 1084.54,1215.33 1085.13,1215.32 1085.72,1215 1086.3,1216.45 1086.89,1214.01 1087.47,1210.11 1088.06,1210.5 1088.65,1209.77 1089.23,1207.35 1089.82,1209.41 1090.41,1209.41 1090.99,1207.02 1091.58,1207.46 1092.17,1206.72 1092.75,1210.03 1093.34,1212.95 1093.93,1211.73 1094.51,1209.27 1095.1,1209.27 1095.68,1209.41 1096.27,1209.79 1096.86,1208.6 1097.44,1211.76 1098.03,1215.86 1098.62,1214.25 1099.2,1213.06 1099.79,1214.44 1100.38,1216.05 1100.96,1214.78 1101.55,1212.09 1102.14,1213.42 1102.72,1212.16 1103.31,1214.97 1103.89,1217.34 1104.48,1215.74 1105.07,1212.95 1105.65,1219.29 1106.24,1222.01 1106.83,1217.72 1107.41,1217.86 1108,1217.54 1108.59,1218.48 1109.17,1219.48 1109.76,1219.28 1110.34,1219.2 1110.93,1218.99 1111.52,1218.84 1112.1,1217.37 1112.69,1215.68 1113.28,1213.91 1113.86,1212.57 1114.45,1212.73 1115.04,1211.57 1115.62,1213.08 1116.21,1212.95 1116.8,1213.09 1117.38,1213.38 1117.97,1214.87 1118.55,1215.1 1119.14,1213.56 1119.73,1210.97 1120.31,1212.5 1120.9,1215.26 1121.49,1212.73 1122.07,1212.82 1122.66,1210.23 1123.25,1209.05 1123.83,1209.73 1124.42,1210.97 1125.01,1211.15 1125.59,1211.61 1126.18,1211.83 1126.76,1211.88 1127.35,1212.98 1127.94,1214.48 1128.52,1215.91 1129.11,1217.14 1129.7,1219.47 1130.28,1219.11 1130.87,1221.81 1131.46,1220.29 1132.04,1218.9 1132.63,1220.07 1133.21,1221.15 1133.8,1218.3 1134.39,1219.57 1134.97,1219.27 1135.56,1221.7 1136.15,1222.28 1136.73,1222.18 1137.32,1219.15 1137.91,1215.17 1138.49,1214.93 1139.08,1212.43 1139.67,1212.56 1140.25,1214.15 1140.84,1213.88 1141.42,1216.3 1142.01,1214.82 1142.6,1216.13 1143.18,1214.88 1143.77,1214.77 1144.36,1215.83 1144.94,1217.13 1145.53,1216.89 1146.12,1216.62 1146.7,1216.43 1147.29,1217.63 1147.88,1220.16 1148.46,1219.56 1149.05,1218.13 1149.63,1219.23 1150.22,1219.01 1150.81,1220.22 1151.39,1221.31 1151.98,1223.54 1152.57,1224.28 1153.15,1221.1 1153.74,1222.21 1154.33,1220.76 1154.91,1221.68 1155.5,1218.79 1156.09,1221.29 1156.67,1218.14 1157.26,1220.43 1157.84,1220.01 1158.43,1219.63 1159.02,1220.66 1159.6,1218.92 1160.19,1218.53 1160.78,1219.57 1161.36,1219.22 1161.95,1218.88 1162.54,1217.16 1163.12,1216.92 1163.71,1219.18 1164.29,1218.83 1164.88,1218.37 1165.47,1218.05 1166.05,1217.76 1166.64,1217.32 1167.23,1217.07 1167.81,1212.9 1168.4,1212.83 1168.99,1211.16 1169.57,1207.29 1170.16,1207.57 1170.75,1207.92 1171.33,1208.23 1171.92,1209.99 1172.5,1211.85 1173.09,1213.31 1173.68,1215.86 1174.26,1213.16 1174.85,1213.29 1175.44,1216.08 1176.02,1214.75 1176.61,1215.09 1177.2,1212.42 1177.78,1213.89 1178.37,1216.51 1178.96,1217.83 1179.54,1216.67 1180.13,1218.06 1180.71,1219.52 1181.3,1218.14 1181.89,1217.68 1182.47,1217.9 1183.06,1217.85 1183.65,1219.01 1184.23,1218.81 1184.82,1219.71 1185.41,1219.67 1185.99,1216.48 1186.58,1215.46 1187.16,1215.46 1187.75,1214.16 1188.34,1213.97 1188.92,1212.81 1189.51,1212.84 1190.1,1214.17 1190.68,1214.26 1191.27,1211.66 1191.86,1212.83 1192.44,1210.17 1193.03,1213.02 1193.62,1214.49 1194.2,1215.92 1194.79,1214.55 1195.37,1214.6 1195.96,1217 1196.55,1216.76 1197.13,1215.12 1197.72,1214.81 1198.31,1213.44 1198.89,1213.54 1199.48,1210.88 1200.07,1211.22 1200.65,1212.74 1201.24,1210.28 1201.83,1214.39 1202.41,1214.37 1203,1213.22 1203.58,1214.62 1204.17,1214.66 1204.76,1217.21 1205.34,1218.23 1205.93,1217.91 1206.52,1215.05 1207.1,1212.43 1207.69,1213.82 1208.28,1213.99 1208.86,1213.96 1209.45,1212.52 1210.03,1213.85 1210.62,1210.04 1211.21,1210.45 1211.79,1210.51 1212.38,1213.17 1212.97,1210.54 1213.55,1213.33 1214.14,1213.23 1214.73,1214.35 1215.31,1214.48 1215.9,1213.38 1216.49,1213.48 1217.07,1212.32 1217.66,1212.47 1218.24,1212.64 1218.83,1211.45 1219.42,1211.8 1220,1210.78 1220.59,1209.67 1221.18,1208.81 1221.76,1209.14 1222.35,1208.26 1222.94,1210.23 1223.52,1210.39 1224.11,1210.89 1224.7,1211.18 1225.28,1212.45 1225.87,1212.44 1226.45,1211.32 1227.04,1211.5 1227.63,1210.29 1228.21,1212.18 1228.8,1213.47 1229.39,1213.48 1229.97,1217.49 1230.56,1214.34 1231.15,1213.94 1231.73,1215.34 1232.32,1216.85 1232.91,1215.62 1233.49,1214.54 1234.08,1211.89 1234.66,1210.51 1235.25,1204.37 1235.84,1206.14 1236.42,1207.9 1237.01,1207.01 1237.6,1208.49 1238.18,1207.62 1238.77,1207.94 1239.36,1208.22 1239.94,1208.68 1240.53,1209.12 1241.11,1208.01 1241.7,1206.83 1242.29,1208.15 1242.87,1208.43 1243.46,1208.65 1244.05,1208.96 1244.63,1206.81 1245.22,1205.93 1245.81,1206.45 1246.39,1208.26 1246.98,1210.89 1247.57,1212.62 1248.15,1211.44 1248.74,1211.53 1249.32,1211.42 1249.91,1209.3 1250.5,1208.35 1251.08,1210.48 1251.67,1208.01 1252.26,1208.43 1252.84,1206.12 1253.43,1208.07 1254.02,1208.3 1254.6,1207.36 1255.19,1211.62 1255.78,1211.92 1256.36,1210.85 1256.95,1214.94 1257.53,1217.67 1258.12,1219.96 1258.71,1219.58 1259.29,1219.41 1259.88,1217.84 1260.47,1218.95 1261.05,1218.53 1261.64,1218.25 1262.23,1219.35 1262.81,1217.69 1263.4,1217.63 1263.98,1214.72 1264.57,1215.87 1265.16,1218.52 1265.74,1217.26 1266.33,1215.86 1266.92,1214.53 1267.5,1215.93 1268.09,1216.02 1268.68,1217.19 1269.26,1221.18 1269.85,1218.01 1270.44,1215.25 1271.02,1216.48 1271.61,1215.21 1272.19,1218.83 1272.78,1217.22 1273.37,1214.63 1273.95,1215.92 1274.54,1214.19 1275.13,1214.18 1275.71,1215.52 1276.3,1218.92 1276.89,1216.32 1277.47,1216.12 1278.06,1215.95 1278.65,1214.53 1279.23,1211.88 1279.82,1214.81 1280.4,1215.77 1280.99,1213.37 1281.58,1211.89 1282.16,1213.22 1282.75,1213.29 1283.34,1213.31 1283.92,1212.32 1284.51,1212.23 1285.1,1208.5 1285.68,1208.92 1286.27,1209.36 1286.86,1209.83 1287.44,1211.12 1288.03,1209.69 1288.61,1208.48 1289.2,1207.51 1289.79,1210.49 1290.37,1210.63 1290.96,1210.97 1291.55,1209.84 1292.13,1211.36 1292.72,1212.73 1293.31,1212.63 1293.89,1210.11 1294.48,1208.93 1295.06,1209.3 1295.65,1209.58 1296.24,1209.55 1296.82,1208.62 1297.41,1210.12 1298,1206.59 1298.58,1207.19 1299.17,1207.69 1299.76,1205.66 1300.34,1208.85 1300.93,1209.32 1301.52,1209.55 1302.1,1210.94 1302.69,1209.93 1303.27,1210.37 1303.86,1209.07 1304.45,1209.21 1305.03,1209.28 1305.62,1210.06 1306.21,1214.07 1306.79,1214.19 1307.38,1214.2 1307.97,1216.84 1308.55,1218.15 1309.14,1218.05 1309.73,1218.77 1310.31,1219.98 1310.9,1218.35 1311.48,1216.67 1312.07,1215.34 1312.66,1216.51 1313.24,1217.8 1313.83,1217.61 1314.42,1216.08 1315,1214.76 1315.59,1216.19 1316.18,1217.41 1316.76,1215.91 1317.35,1215.54 1317.93,1215.25 1318.52,1216.42 1319.11,1217.71 1319.69,1218.82 1320.28,1218.8 1320.87,1218.55 1321.45,1220.83 1322.04,1221.95 1322.63,1219.2 1323.21,1217.49 1323.8,1217.3 1324.39,1216.86 1324.97,1219.3 1325.56,1216.43 1326.14,1216.24 1326.73,1216.29 1327.32,1217.5 1327.9,1218.51 1328.49,1218.04 1329.08,1217.97 1329.66,1216.47 1330.25,1213.47 1330.84,1213.76 1331.42,1212.3 1332.01,1212.21 1332.6,1212.19 1333.18,1210.89 1333.77,1212.63 1334.35,1214.03 1334.94,1215.23 1335.53,1213.8 1336.11,1212.55 1336.7,1212.92 1337.29,1216.61 1337.87,1215.3 1338.46,1215.37 1339.05,1213.66 1339.63,1212.21 1340.22,1212.31 1340.8,1212.31 1341.39,1214.88 1341.98,1213.63 1342.56,1216.31 1343.15,1216.12 1343.74,1213.44 1344.32,1214.96 1344.91,1215.07 1345.5,1217.66 1346.08,1217.4 1346.67,1216.89 1347.26,1215.38 1347.84,1212.7 1348.43,1212.51 1349.01,1212.46 1349.6,1212.83 1350.19,1211.76 1350.77,1211.95 1351.36,1210.74 1351.95,1209.65 1352.53,1209.92 1353.12,1210.27 1353.71,1210.5 1354.29,1209.66 1354.88,1209.97 1355.47,1210.19 1356.05,1210.34 1356.64,1210.53 1357.22,1211.89 1357.81,1212.1 1358.4,1210.86 1358.98,1209.75 1359.57,1208.95 1360.16,1207.8 1360.74,1208.22 1361.33,1207.38 1361.92,1206.54 1362.5,1206.97 1363.09,1207.37 1363.68,1211.68 1364.26,1211.96 1364.85,1210.77 1365.43,1209.36 1366.02,1209.63 1366.61,1211.21 1367.19,1211.68 1367.78,1210.79 1368.37,1212.28 1368.95,1212.7 1369.54,1211.34 1370.13,1211.42 1370.71,1208.84 1371.3,1209.26 1371.88,1209.47 1372.47,1211.41 1373.06,1211.35 1373.64,1210.42 1374.23,1213.4 1374.82,1213.41 1375.4,1216.2 1375.99,1214.88 1376.58,1213.79 1377.16,1215.19 1377.75,1216.58 1378.34,1215.23 1378.92,1215.09 1379.51,1213.88 1380.09,1212.91 1380.68,1214.07 1381.27,1216.49 1381.85,1217.82 1382.44,1215.98 1383.03,1215.59 1383.61,1213.09 1384.2,1210.42 1384.79,1214.63 1385.37,1213.37 1385.96,1212.05 1386.55,1212.36 1387.13,1210.12 1387.72,1211.74 1388.3,1212.04 1388.89,1213.37 1389.48,1211.93 1390.06,1213.25 1390.65,1214.34 1391.24,1216.76 1391.82,1217.8 1392.41,1221.51 1393,1222.47 1393.58,1223.31 1394.17,1224.08 1394.75,1219.73 1395.34,1219.47 1395.93,1220.49 1396.51,1221.21 1397.1,1220.82 1397.69,1220.49 1398.27,1220.45 1398.86,1216.39 1399.45,1216.35 1400.03,1219.15 1400.62,1217.45 1401.21,1218.35 1401.79,1215.63 1402.38,1215.61 1402.96,1216.84 1403.55,1218.94 1404.14,1221.32 1404.72,1222.3 1405.31,1221.89 1405.9,1221.25 1406.48,1219.8 1407.07,1220.55 1407.66,1221.63 1408.24,1222.56 1408.83,1224.91 1409.42,1229.32 1410,1228.5 1410.59,1227.81 1411.17,1224.6 1411.76,1225.59 1412.35,1225.1 1412.93,1227.14 1413.52,1222.69 1414.11,1222.11 1414.69,1221.91 1415.28,1218.83 1415.87,1219.63 1416.45,1219.09 1417.04,1218.75 1417.63,1220.04 1418.21,1218.32 1418.8,1217.15 1419.38,1215.65 1419.97,1215.44 1420.56,1216.81 1421.14,1215.46 1421.73,1214 1422.32,1214.04 1422.9,1214.14 1423.49,1214.1 1424.08,1215.13 1424.66,1212.48 1425.25,1213.89 1425.83,1216.26 1426.42,1216.24 1427.01,1217.59 1427.59,1217.44 1428.18,1215.98 1428.77,1213.08 1429.35,1211.71 1429.94,1213.04 1430.53,1211.72 1431.11,1209.41 1431.7,1213.61 1432.29,1213.69 1432.87,1213.88 1433.46,1213.76 1434.04,1213.75 1434.63,1209.67 1435.22,1211.28 1435.8,1212.76 1436.39,1212.87 1436.98,1215.33 1437.56,1214.01 1438.15,1212.8 1438.74,1210.44 1439.32,1213.4 1439.91,1213.39 1440.5,1213.28 1441.08,1213.24 1441.67,1213.09 1442.25,1214.28 1442.84,1214.14 1443.43,1214.13 1444.01,1214.12 1444.6,1216.65 1445.19,1217.74 1445.77,1218.82 1446.36,1218.53 1446.95,1218.1 1447.53,1217.96 1448.12,1220.25 1448.7,1217.02 1449.29,1213.04 1449.88,1212.91 1450.46,1215.46 1451.05,1216.44 1451.64,1213.55 1452.22,1209.53 1452.81,1209.68 1453.4,1208.55 1453.98,1207.69 1454.57,1207.86 1455.16,1205.41 1455.74,1207.11 1456.33,1209.91 1456.91,1212.75 1457.5,1211.45 1458.09,1210.2 1458.67,1213.09 1459.26,1212.1 1459.85,1212.41 1460.43,1211.38 1461.02,1208.71 1461.61,1209.21 1462.19,1207.07 1462.78,1207.53 1463.37,1209.3 1463.95,1206.98 1464.54,1208.25 1465.12,1207.16 1465.71,1206.24 1466.3,1205.41 1466.88,1206.29 1467.47,1205.57 1468.06,1211.42 1468.64,1212.82 1469.23,1214.05 1469.82,1215.54 1470.4,1216.53 1470.99,1217.67 1471.57,1216.01 1472.16,1210.89 1472.75,1212.49 1473.33,1215.23 1473.92,1217.56 1474.51,1219.97 1475.09,1223.74 1475.68,1221.96 1476.27,1226.64 1476.85,1225.91 1477.44,1227.76 1478.03,1229.44 1478.61,1228.56 1479.2,1227.88 1479.78,1225.66 1480.37,1222.56 1480.96,1222.08 1481.54,1221.68 1482.13,1222.51 1482.72,1222.88 1483.3,1220.96 1483.89,1219.16 1484.48,1220.19 1485.06,1221.14 1485.65,1218.21 1486.24,1216.83 1486.82,1216.68 1487.41,1216.54 1487.99,1212.6 1488.58,1212.59 1489.17,1213.81 1489.75,1211.4 1490.34,1211.44 1490.93,1211.3 1491.51,1210.34 1492.1,1213 1492.69,1214.17 1493.27,1211.57 1493.86,1211.45 1494.45,1210.42 1495.03,1211.62 1495.62,1210.38 1496.2,1207.86 1496.79,1209.29 1497.38,1210.8 1497.96,1209.58 1498.55,1210.74 1499.14,1211.89 1499.72,1210.74 1500.31,1212.32 1500.9,1215.17 1501.48,1217.81 1502.07,1221.49 1502.65,1221.02 1503.24,1218.25 1503.83,1215.54 1504.41,1218.12 1505,1219.07 1505.59,1219.99 1506.17,1222.39 1506.76,1223.12 1507.35,1222.51 1507.93,1220.76 1508.52,1220.77 1509.11,1219 1509.69,1218.9 1510.28,1219.85 1510.86,1220.68 1511.45,1217.98 1512.04,1215.17 1512.62,1215.3 1513.21,1212.67 1513.8,1215.46 1514.38,1216.62 1514.97,1215.14 1515.56,1213.61 1516.14,1213.49 1516.73,1214.69 1517.32,1214.52 1517.9,1214.51 1518.49,1213.23 1519.07,1213 1519.66,1207.82 1520.25,1208.42 1520.83,1208.74 1521.42,1207.8 1522.01,1206.69 1522.59,1208.38 1523.18,1205 1523.77,1207.85 1524.35,1210.73 1524.94,1208.23 1525.52,1208.44 1526.11,1209 1526.7,1208.08 1527.28,1209.93 1527.87,1210.17 1528.46,1211.59 1529.04,1212.94 1529.63,1215.53 1530.22,1213.93 1530.8,1215.04 1531.39,1218.89 1531.98,1217.65 1532.56,1215.93 1533.15,1215.64 1533.73,1215.76 1534.32,1215.88 1534.91,1217.21 1535.49,1218.36 1536.08,1218.21 1536.67,1215.5 1537.25,1215.45 1537.84,1214.15 1538.43,1215.44 1539.01,1213.9 1539.6,1214.11 1540.19,1215.62 1540.77,1216.82 1541.36,1215.57 1541.94,1215.54 1542.53,1215.24 1543.12,1212.49 1543.7,1210.06 1544.29,1210.18 1544.88,1212.85 1545.46,1212.86 1546.05,1213 1546.64,1211.69 1547.22,1214.67 1547.81,1214.46 1548.4,1217.07 1548.98,1219.46 1549.57,1219.43 1550.15,1220.58 1550.74,1218.93 1551.33,1219.92 1551.91,1216.96 1552.5,1218.31 1553.09,1216.87 1553.67,1216.7 1554.26,1215.26 1554.85,1212.32 1555.43,1212.16 1556.02,1212.33 1556.6,1211.01 1557.19,1210.99 1557.78,1208.64 1558.36,1210.38 1558.95,1213.3 1559.54,1210.76 1560.12,1209.49 1560.71,1210.9 1561.3,1213.51 1561.88,1213.53 1562.47,1208.27 1563.06,1210.03 1563.64,1206.26 1564.23,1208.03 1564.81,1206.85 1565.4,1207.53 1565.99,1209.21 1566.57,1206.93 1567.16,1209.99 1567.75,1208.91 1568.33,1208.28 1568.92,1211.19 1569.51,1211.38 1570.09,1211.65 1570.68,1212.99 1571.27,1211.49 1571.85,1211.96 1572.44,1210.71 1573.02,1211.07 1573.61,1208.87 1574.2,1209.04 1574.78,1209.09 1575.37,1208.11 1575.96,1207.25 1576.54,1207.72 1577.13,1210.51 1577.72,1210.82 1578.3,1213.58 1578.89,1212.43 1579.47,1209.9 1580.06,1211.44 1580.65,1211.53 1581.23,1211.97 1581.82,1212.08 1582.41,1213.39 1582.99,1213.31 1583.58,1212.05 1584.17,1210.83 1584.75,1212.42 1585.34,1214.08 1585.93,1212.92 1586.51,1211.63 1587.1,1211.7 1587.68,1218.07 1588.27,1220.65 1588.86,1220.62 1589.44,1221.4 1590.03,1222.55 1590.62,1224.66 1591.2,1220.24 1591.79,1220.02 1592.38,1219.74 1592.96,1219.65 1593.55,1218.07 1594.14,1218.19 1594.72,1218.05 1595.31,1218.91 1595.89,1219.98 1596.48,1217.37 1597.07,1217.36 1597.65,1215.79 1598.24,1214.44 1598.83,1212.86 1599.41,1212.95 1600,1212.98 1600.59,1214.14 1601.17,1216.96 1601.76,1216.67 1602.34,1215.21 1602.93,1216.49 1603.52,1218.76 1604.1,1218.61 1604.69,1219.47 1605.28,1217.48 1605.86,1216.83 1606.45,1215.45 1607.04,1216.62 1607.62,1217.79 1608.21,1217.8 1608.8,1216.48 1609.38,1216.46 1609.97,1217.37 1610.55,1215.83 1611.14,1215.9 1611.73,1213.37 1612.31,1209.41 1612.9,1209.59 1613.49,1207.24 1614.07,1208.86 1614.66,1209.1 1615.25,1207.74 1615.83,1206.49 1616.42,1206.83 1617.01,1206.2 1617.59,1204.22 1618.18,1206.14 1618.76,1206.56 1619.35,1208.38 1619.94,1206.18 1620.52,1206.78 1621.11,1208.51 1621.7,1208.58 1622.28,1208.49 1622.87,1211.31 1623.46,1211.55 1624.04,1211.62 1624.63,1210.2 1625.22,1213.21 1625.8,1213.25 1626.39,1214.73 1626.97,1213.52 1627.56,1213.59 1628.15,1212.28 1628.73,1212.45 1629.32,1213.92 1629.91,1215.54 1630.49,1215.53 1631.08,1213.96 1631.67,1216.42 1632.25,1212.22 1632.84,1212.55 1633.42,1213.79 1634.01,1212.34 1634.6,1213.96 1635.18,1217.85 1635.77,1220.23 1636.36,1218.77 1636.94,1217.33 1637.53,1218.65 1638.12,1217.11 1638.7,1214.45 1639.29,1215.85 1639.88,1218.34 1640.46,1219.52 1641.05,1218.84 1641.63,1217.08 1642.22,1219.73 1642.81,1219.69 1643.39,1219.39 1643.98,1217.95 1644.57,1217.82 1645.15,1217.7 1645.74,1217.69 1646.33,1216.31 1646.91,1215.94 1647.5,1217.09 1648.09,1221.88 1648.67,1219.84 1649.26,1218.21 1649.84,1215.43 1650.43,1215.33 1651.02,1216.38 1651.6,1215.93 1652.19,1214.48 1652.78,1211.78 1653.36,1210.59 1653.95,1213.08 1654.54,1214.48 1655.12,1214.6 1655.71,1214.55 1656.29,1213.13 1656.88,1211.95 1657.47,1212.04 1658.05,1212.32 1658.64,1211.01 1659.23,1208.54 1659.81,1206.07 1660.4,1207.65 1660.99,1206.59 1661.57,1207.28 1662.16,1203.8 1662.75,1204.08 1663.33,1205.84 1663.92,1204.72 1664.5,1205.17 1665.09,1205.81 1665.68,1203.42 1666.26,1203.74 1666.85,1201.62 1667.44,1202.46 1668.02,1203.04 1668.61,1203.33 1669.2,1205.29 1669.78,1205.38 1670.37,1204.71 1670.96,1203.95 1671.54,1203.15 1672.13,1202.3 1672.71,1198.73 1673.3,1202.21 1673.89,1207.08 1674.47,1209.95 1675.06,1210.51 1675.65,1213.26 1676.23,1210.8 1676.82,1213.64 1677.41,1213.37 1677.99,1216.01 1678.58,1217.15 1679.17,1215.78 1679.75,1217.19 1680.34,1217.04 1680.92,1219.35 1681.51,1217.49 1682.1,1218.68 1682.68,1218.52 1683.27,1219.64 1683.86,1221.79 1684.44,1220.35 1685.03,1217.51 1685.62,1217.4 1686.2,1214.78 1686.79,1218.8 1687.37,1218.72 1687.96,1217.16 1688.55,1216.98 1689.13,1215.34 1689.72,1216.81 1690.31,1217.97 1690.89,1217.57 1691.48,1216.18 1692.07,1219.89 1692.65,1222.02 1693.24,1221.61 1693.83,1221.26 1694.41,1218.46 1695,1219.69 1695.58,1219.26 1696.17,1218.99 1696.76,1218.85 1697.34,1217.22 1697.93,1218.44 1698.52,1218.08 1699.1,1218.99 1699.69,1218.63 1700.28,1216.89 1700.86,1219.3 1701.45,1220.22 1702.04,1219.98 1702.62,1217.4 1703.21,1217.12 1703.79,1218.5 1704.38,1219.79 1704.97,1219.4 1705.55,1219.33 1706.14,1220.54 1706.73,1223.13 1707.31,1225.31 1707.9,1227.39 1708.49,1221.56 1709.07,1220.04 1709.66,1222.21 1710.24,1221.6 1710.83,1221.19 1711.42,1219.38 1712,1219.07 1712.59,1217.62 1713.18,1218.48 1713.76,1216.98 1714.35,1215.49 1714.94,1215.08 1715.52,1216.44 1716.11,1218.81 1716.7,1214.5 1717.28,1218.2 1717.87,1217.86 1718.45,1214.06 1719.04,1211.75 1719.63,1211.96 1720.21,1211.88 1720.8,1214.62 1721.39,1215.61 1721.97,1216.6 1722.56,1215.57 1723.15,1215.46 1723.73,1211.31 1724.32,1212.51 1724.91,1212.55 1725.49,1212.23 1726.08,1212.48 1726.66,1212.73 1727.25,1214.13 1727.84,1211.63 1728.42,1213 1729.01,1209.19 1729.6,1207.87 1730.18,1206.8 1730.77,1207.27 1731.36,1207.39 1731.94,1200.96 1732.53,1203.02 1733.11,1203.64 1733.7,1203.02 1734.29,1202.48 1734.87,1205.75 1735.46,1207.7 1736.05,1207.5 1736.63,1207.52 1737.22,1208.13 1737.81,1208.54 1738.39,1208.97 1738.98,1209.14 1739.57,1207.02 1740.15,1212.44 1740.74,1211.07 1741.32,1210.12 1741.91,1211.48 1742.5,1214.36 1743.08,1213.19 1743.67,1209.27 1744.26,1207.93 1744.84,1204.32 1745.43,1206.04 1746.02,1209.1 1746.6,1206.76 1747.19,1205.91 1747.78,1206.51 1748.36,1208.41 1748.95,1210.14 1749.53,1210.19 1750.12,1212.96 1750.71,1210.29 1751.29,1209.02 1751.88,1208.03 1752.47,1206.94 1753.05,1213.77 1753.64,1212.53 1754.23,1209.97 1754.81,1210.37 1755.4,1209.28 1755.99,1209.44 1756.57,1207.29 1757.16,1206.15 1757.74,1207.82 1758.33,1208.32 1758.92,1208.57 1759.5,1210.16 1760.09,1210.43 1760.68,1212.03 1761.26,1214.77 1761.85,1212.1 1762.44,1212.3 1763.02,1211.21 1763.61,1207.35 1764.19,1209.1 1764.78,1212.05 1765.37,1212.15 1765.95,1211.19 1766.54,1211.42 1767.13,1212.74 1767.71,1211.63 1768.3,1213.07 1768.89,1215.76 1769.47,1214.42 1770.06,1215.99 1770.65,1217.14 1771.23,1217.04 1771.82,1217.09 1772.4,1219.36 1772.99,1220.33 1773.58,1218.71 1774.16,1219.94 1774.75,1221.04 1775.34,1220.77 1775.92,1222.91 1776.51,1225.03 1777.1,1225.86 1777.68,1226.63 1778.27,1228.33 1778.86,1227.49 1779.44,1224.11 1780.03,1220.86 1780.61,1220.2 1781.2,1222.27 1781.79,1224.15 1782.37,1222.06 1782.96,1221.31 1783.55,1219.62 1784.13,1218.01 1784.72,1217.75 1785.31,1217.43 1785.89,1218.73 1786.48,1218.44 1787.06,1218.22 1787.65,1214.14 1788.24,1214.22 1788.82,1215.75 1789.41,1215.25 1790,1217.79 1790.58,1217.49 1791.17,1215.92 1791.76,1215.75 1792.34,1216.92 1792.93,1218.07 1793.52,1219.06 1794.1,1218.77 1794.69,1220.92 1795.27,1219.01 1795.86,1217.59 1796.45,1217.33 1797.03,1217.29 1797.62,1219.76 1798.21,1215.65 1798.79,1215.36 1799.38,1213.94 1799.97,1212.42 1800.55,1213.79 1801.14,1215.01 1801.73,1217.61 1802.31,1218.48 1802.9,1215.42 1803.48,1218.26 1804.07,1216.97 1804.66,1215.36 1805.24,1214.2 1805.83,1215.25 1806.42,1216.21 1807,1213.26 1807.59,1212.06 1808.18,1214.85 1808.76,1213.57 1809.35,1212.51 1809.94,1213.83 1810.52,1216.43 1811.11,1216.46 1811.69,1213.47 1812.28,1213.69 1812.87,1212.32 1813.45,1213.5 1814.04,1218.39 1814.63,1216.88 1815.21,1216.49 1815.8,1217.8 1816.39,1217.74 1816.97,1217.42 1817.56,1214.75 1818.14,1213.44 1818.73,1211 1819.32,1209.71 1819.9,1208.88 1820.49,1209.22 1821.08,1210.75 1821.66,1211.02 1822.25,1213.54 1822.84,1213.55 1823.42,1212.49 1824.01,1212.56 1824.6,1210.08 1825.18,1208.93 1825.77,1210.48 1826.35,1209.19 1826.94,1210.58 1827.53,1210.52 1828.11,1206.8 1828.7,1208.73 1829.29,1207.65 1829.87,1209.3 1830.46,1213.5 1831.05,1214.84 1831.63,1214.85 1832.22,1217.51 1832.81,1217.13 1833.39,1218.41 1833.98,1217.1 1834.56,1217.01 1835.15,1219.21 1835.74,1216.2 1836.32,1215.99 1836.91,1214.57 1837.5,1213.43 1838.08,1215.06 1838.67,1215.53 1839.26,1214.31 1839.84,1213.1 1840.43,1213.16 1841.01,1213.21 1841.6,1213.3 1842.19,1213.25 1842.77,1217.14 1843.36,1215.53 1843.95,1219.41 1844.53,1221.58 1845.12,1221.2 1845.71,1223.7 1846.29,1223.21 1846.88,1221.46 1847.47,1222.54 1848.05,1226.09 1848.64,1225.72 1849.22,1226.57 1849.81,1225.79 1850.4,1225.15 1850.98,1225.73 1851.57,1225.11 1852.16,1225.57 1852.74,1222.42 1853.33,1221.82 1853.92,1225.24 1854.5,1223.07 1855.09,1221.33 1855.68,1219.49 1856.26,1216.37 1856.85,1216.31 1857.43,1216.3 1858.02,1216.15 1858.61,1216.07 1859.19,1219.58 1859.78,1217.9 1860.37,1215.06 1860.95,1212.09 1861.54,1209.26 1862.13,1211.82 1862.71,1211.91 1863.3,1209.24 1863.88,1206.95 1864.47,1203.3 1865.06,1206.33 1865.64,1202.82 1866.23,1203.58 1866.82,1202.58 1867.4,1201.67 1867.99,1201.97 1868.58,1199.84 1869.16,1199.04 1869.75,1199.83 1870.34,1203.39 1870.92,1206.7 1871.51,1207.31 1872.09,1207.72 1872.68,1206.87 1873.27,1207.09 1873.85,1207.55 1874.44,1207.89 1875.03,1208.14 1875.61,1207.23 1876.2,1207.32 1876.79,1208.91 1877.37,1211.81 1877.96,1210.79 1878.55,1209.38 1879.13,1210.84 1879.72,1210.98 1880.3,1213.87 1880.89,1214.08 1881.48,1215.4 1882.06,1214.25 1882.65,1214.24 1883.24,1212.91 1883.82,1214.07 1884.41,1212.85 1885,1212.92 1885.58,1215.74 1886.17,1211.69 1886.76,1211.84 1887.34,1211.73 1887.93,1211.94 1888.51,1214.96 1889.1,1217.66 1889.69,1217.79 1890.27,1217.53 1890.86,1217.36 1891.45,1216.19 1892.03,1218.63 1892.62,1217.06 1893.21,1216.78 1893.79,1219.32 1894.38,1217.6 1894.96,1217.57 1895.55,1214.73 1896.14,1214.93 1896.72,1216.16 1897.31,1217.57 1897.9,1215.83 1898.48,1218.16 1899.07,1216.54 1899.66,1214.91 1900.24,1214.83 1900.83,1213.41 1901.42,1212.29 1902,1208.67 1902.59,1210.15 1903.17,1213.25 1903.76,1214.63 1904.35,1214.38 1904.93,1214.64 1905.52,1214.67 1906.11,1216.05 1906.69,1216.02 1907.28,1215.97 1907.87,1215.93 1908.45,1219.74 1909.04,1218.04 1909.63,1216.56 1910.21,1216.3 1910.8,1216.28 1911.38,1216.18 1911.97,1210.95 1912.56,1209.74 1913.14,1207.28 1913.73,1208.94 1914.32,1210.32 1914.9,1211.66 1915.49,1211.92 1916.08,1213.36 1916.66,1212.35 1917.25,1213.84 1917.83,1208.7 1918.42,1205.33 1919.01,1206.96 1919.59,1206.22 1920.18,1209.19 1920.77,1209.49 1921.35,1213.63 1921.94,1215.06 1922.53,1214.87 1923.11,1209.56 1923.7,1207.21 1924.29,1208.91 1924.87,1207.89 1925.46,1205.57 1926.04,1202.21 1926.63,1201.49 1927.22,1201.78 1927.8,1202.28 1928.39,1204.17 1928.98,1203.61 1929.56,1206.45 1930.15,1211.96 1930.74,1212.29 1931.32,1212.51 1931.91,1209.89 1932.5,1211.48 1933.08,1209.14 1933.67,1208.28 1934.25,1207.52 1934.84,1208.13 1935.43,1207.39 1936.01,1206.52 1936.6,1205.38 1937.19,1201.94 1937.77,1202.31 1938.36,1201.54 1938.95,1200.99 1939.53,1205.49 1940.12,1205.56 1940.71,1205.92 1941.29,1206.33 1941.88,1207.91 1942.46,1208.51 1943.05,1207.55 1943.64,1209.36 1944.22,1209.45 1944.81,1210.86 1945.4,1209.74 1945.98,1208.58 1946.57,1207.41 1947.16,1210.5 1947.74,1211.9 1948.33,1210.6 1948.91,1208.53 1949.5,1207.51 1950.09,1208.11 1950.67,1209.73 1951.26,1208.67 1951.85,1210.3 1952.43,1213.45 1953.02,1213.75 1953.61,1212.52 1954.19,1210.33 1954.78,1212.05 1955.37,1211.08 1955.95,1211.4 1956.54,1214.21 1957.12,1214.32 1957.71,1213 1958.3,1215.84 1958.88,1214.34 1959.47,1213.41 1960.06,1213.3 1960.64,1213.18 1961.23,1213.19 1961.82,1213.22 1962.4,1213.25 1962.99,1213.24 1963.58,1215.91 1964.16,1213.51 1964.75,1214.89 1965.33,1215.08 1965.92,1216.46 1966.51,1213.96 1967.09,1216.58 1967.68,1217.98 1968.27,1220.54 1968.85,1221.69 1969.44,1218.67 1970.03,1216.15 1970.61,1217.24 1971.2,1218.47 1971.78,1216.99 1972.37,1218.27 1972.96,1219.28 1973.54,1218.73 1974.13,1219.68 1974.72,1216.87 1975.3,1214.13 1975.89,1216.79 1976.48,1218.06 1977.06,1216.59 1977.65,1217.85 1978.24,1217.42 1978.82,1219.88 1979.41,1219.65 1979.99,1219.4 1980.58,1220.16 1981.17,1219.94 1981.75,1219.55 1982.34,1220.59 1982.93,1216.25 1983.51,1215.84 1984.1,1215.68 1984.69,1215.61 1985.27,1217.84 1985.86,1217.77 1986.45,1220.09 1987.03,1222.36 1987.62,1221.87 1988.2,1220.12 1988.79,1222.54 1989.38,1222.03 1989.96,1221.68 1990.55,1223.77 1991.14,1223.49 1991.72,1220.33 1992.31,1219.91 1992.9,1220.94 1993.48,1219.02 1994.07,1217.23 1994.65,1220.68 1995.24,1224.11 1995.83,1224.82 1996.41,1222.87 1997,1218.34 1997.59,1218.35 1998.17,1218.13 1998.76,1219.4 1999.35,1220.59 1999.93,1219 2000.52,1218.76 2001.11,1218.46 2001.69,1216.6 2002.28,1216.51 2002.86,1216.34 2003.45,1217.57 2004.04,1217.37 2004.62,1218.45 2005.21,1218.1 2005.8,1220.51 2006.38,1222.69 2006.97,1223.83 2007.56,1223.4 2008.14,1224.23 2008.73,1219.92 2009.32,1219.37 2009.9,1219.21 2010.49,1218.8 2011.07,1216.78 2011.66,1215.22 2012.25,1213.61 2012.83,1213.57 2013.42,1213.77 2014.01,1208.49 2014.59,1210.17 2015.18,1211.87 2015.77,1213.06 2016.35,1213.15 2016.94,1214.26 2017.53,1215.95 2018.11,1215.95 2018.7,1215.71 2019.28,1214.32 2019.87,1210.1 2020.46,1204.83 2021.04,1203.98 2021.63,1200.75 2022.22,1203.98 2022.8,1205.68 2023.39,1205.84 2023.98,1207.49 2024.56,1205.07 2025.15,1205.29 2025.73,1205.61 2026.32,1206.1 2026.91,1206.5 2027.49,1208.02 2028.08,1208.23 2028.67,1209.82 2029.25,1211.1 2029.84,1208.73 2030.43,1207.73 2031.01,1209.54 2031.6,1209.7 2032.19,1211.25 2032.77,1212.51 2033.36,1217.95 2033.94,1219.06 2034.53,1214.98 2035.12,1217.54 2035.7,1217.49 2036.29,1214.83 2036.88,1215.18 2037.46,1217.49 2038.05,1218.62 2038.64,1215.74 2039.22,1217.06 2039.81,1216.79 2040.4,1216.42 2040.98,1216.05 2041.57,1214.82 2042.15,1216 2042.74,1217.08 2043.33,1216.87 2043.91,1219.52 2044.5,1218.95 2045.09,1221.28 2045.67,1216.76 2046.26,1214 2046.85,1214.29 2047.43,1214.36 2048.02,1211.57 2048.6,1213.16 2049.19,1214.35 2049.78,1213.03 2050.36,1211.68 2050.95,1212.87 2051.54,1214.37 2052.12,1216.84 2052.71,1216.45 2053.3,1217.52 2053.88,1221.2 2054.47,1219.45 2055.06,1218.06 2055.64,1212.69 2056.23,1210.36 2056.81,1207.76 2057.4,1211.91 2057.99,1212.04 2058.57,1211.15 2059.16,1209.99 2059.75,1210.48 2060.33,1208.09 2060.92,1209.66 2061.51,1209.72 2062.09,1208.74 2062.68,1209.03 2063.27,1209.36 2063.85,1209.6 2064.44,1208.18 2065.02,1208.71 2065.61,1211.6 2066.2,1211.86 2066.78,1212.06 2067.37,1210.88 2067.96,1210.78 2068.54,1212.03 2069.13,1213.75 2069.72,1213.61 2070.3,1215.9 2070.89,1215.6 2071.48,1215.61 2072.06,1218.03 2072.65,1215.41 2073.23,1214.06 2073.82,1212.64 2074.41,1211.68 2074.99,1207.69 2075.58,1206.8 2076.17,1207.13 2076.75,1208.84 2077.34,1210.53 2077.93,1210.47 2078.51,1210.48 2079.1,1208.48 2079.68,1207.24 2080.27,1207.79 2080.86,1207.01 2081.44,1206.27 2082.03,1206.8 2082.62,1207.19 2083.2,1206.32 2083.79,1206.61 2084.38,1207.13 2084.96,1207.41 2085.55,1211.7 2086.14,1212.17 2086.72,1213.42 2087.31,1214.69 2087.89,1214.67 2088.48,1216.02 2089.07,1214.56 2089.65,1215.8 2090.24,1215.63 2090.83,1216.55 2091.41,1215.36 2092,1215.2 2092.59,1215.03 2093.17,1214.91 2093.76,1213.5 2094.35,1211.18 2094.93,1212.43 2095.52,1213.85 2096.1,1213.73 2096.69,1210.94 2097.28,1212.31 2097.86,1214.13 2098.45,1215.51 2099.04,1216.75 2099.62,1216.34 2100.21,1215.08 2100.8,1215.08 2101.38,1216.29 2101.97,1213.7 2102.55,1212.35 2103.14,1212.2 2103.73,1209.84 2104.31,1211.42 2104.9,1211.82 2105.49,1212.03 2106.07,1212.24 2106.66,1213.72 2107.25,1213.78 2107.83,1212.41 2108.42,1208.56 2109.01,1210.35 2109.59,1215.57 2110.18,1218.21 2110.76,1219.39 2111.35,1220.29 2111.94,1218.8 2112.52,1220.15 2113.11,1216.85 2113.7,1217.83 2114.28,1217.73 2114.87,1216.15 2115.46,1214.56 2116.04,1213.48 2116.63,1212.15 2117.22,1211.96 2117.8,1211.98 2118.39,1210.74 2118.97,1211.17 2119.56,1212.59 2120.15,1213.82 2120.73,1215.1 2121.32,1213.69 2121.91,1214.01 2122.49,1216.55 2123.08,1217.42 2123.67,1217.41 2124.25,1218.84 2124.84,1217.39 2125.42,1219.67 2126.01,1217.86 2126.6,1219.02 2127.18,1222.52 2127.77,1219.44 2128.36,1218.08 2128.94,1218.03 2129.53,1217.76 2130.12,1217.51 2130.7,1217.37 2131.29,1216.95 2131.88,1215.74 2132.46,1214.24 2133.05,1215.36 2133.63,1215.49 2134.22,1214.32 2134.81,1214.16 2135.39,1212.78 2135.98,1215.27 2136.57,1213.86 2137.15,1213.84 2137.74,1215.04 2138.33,1215.05 2138.91,1215.01 2139.5,1213.44 2140.09,1213.14 2140.67,1216 2141.26,1214.42 2141.84,1213.27 2142.43,1210.49 2143.02,1210.61 2143.6,1210.86 2144.19,1210.94 2144.78,1213.66 2145.36,1213.65 2145.95,1210.95 2146.54,1210.94 2147.12,1213.73 2147.71,1214.96 2148.3,1213.61 2148.88,1215.12 2149.47,1215 2150.05,1216.16 2150.64,1212.14 2151.23,1212.33 2151.81,1214.97 2152.4,1213.57 2152.99,1212.19 2153.57,1215.05 2154.16,1212.63 2154.75,1212.9 2155.33,1211.63 2155.92,1210.48 2156.5,1212.02 2157.09,1210.83 2157.68,1211.15 2158.26,1209.01 \"/>\n<path clip-path=\"url(#clip692)\" d=\"M986.025 1214.66 L986.612 1214.66 L987.198 1214.66 L987.785 1214.66 L988.371 1214.66 L988.957 1214.66 L989.544 1214.66 L990.13 1214.66 L990.717 1214.66 L991.303 1214.66 L991.889 1214.66 L992.476 1214.66 L993.062 1214.66 L993.649 1214.66 L994.235 1214.66 L994.822 1214.66 L995.408 1214.66 L995.994 1214.66 L996.581 1214.66 L997.167 1214.66 L997.754 1214.66 L998.34 1214.66 L998.926 1214.66 L999.513 1214.66 L1000.1 1214.66 L1000.69 1214.66 L1001.27 1214.66 L1001.86 1214.66 L1002.44 1214.66 L1003.03 1214.66 L1003.62 1214.66 L1004.2 1214.66 L1004.79 1214.66 L1005.38 1214.66 L1005.96 1214.66 L1006.55 1214.66 L1007.14 1214.66 L1007.72 1214.66 L1008.31 1214.66 L1008.9 1214.66 L1009.48 1214.66 L1010.07 1214.66 L1010.65 1214.66 L1011.24 1214.66 L1011.83 1214.66 L1012.41 1214.66 L1013 1214.66 L1013.59 1214.66 L1014.17 1214.66 L1014.76 1214.66 L1015.35 1214.66 L1015.93 1214.66 L1016.52 1214.66 L1017.11 1214.66 L1017.69 1214.66 L1018.28 1214.66 L1018.86 1214.66 L1019.45 1214.66 L1020.04 1214.66 L1020.62 1214.66 L1021.21 1214.66 L1021.8 1214.66 L1022.38 1214.66 L1022.97 1214.66 L1023.56 1214.66 L1024.14 1214.66 L1024.73 1214.66 L1025.32 1214.66 L1025.9 1214.66 L1026.49 1214.66 L1027.07 1214.66 L1027.66 1214.66 L1028.25 1214.66 L1028.83 1214.66 L1029.42 1214.66 L1030.01 1214.66 L1030.59 1214.66 L1031.18 1214.66 L1031.77 1214.66 L1032.35 1214.66 L1032.94 1214.66 L1033.52 1214.66 L1034.11 1214.66 L1034.7 1214.66 L1035.28 1214.66 L1035.87 1214.66 L1036.46 1214.66 L1037.04 1214.66 L1037.63 1214.66 L1038.22 1214.66 L1038.8 1214.66 L1039.39 1214.66 L1039.98 1214.66 L1040.56 1214.66 L1041.15 1214.66 L1041.73 1214.66 L1042.32 1214.66 L1042.91 1214.66 L1043.49 1214.66 L1044.08 1214.66 L1044.67 1214.66 L1045.25 1214.66 L1045.84 1214.66 L1046.43 1214.66 L1047.01 1214.66 L1047.6 1214.66 L1048.19 1214.66 L1048.77 1214.66 L1049.36 1214.66 L1049.94 1214.66 L1050.53 1214.66 L1051.12 1214.66 L1051.7 1214.66 L1052.29 1214.66 L1052.88 1214.66 L1053.46 1214.66 L1054.05 1214.66 L1054.64 1214.66 L1055.22 1214.66 L1055.81 1214.66 L1056.39 1214.66 L1056.98 1214.66 L1057.57 1214.66 L1058.15 1214.66 L1058.74 1214.66 L1059.33 1214.66 L1059.91 1214.66 L1060.5 1214.66 L1061.09 1214.66 L1061.67 1214.66 L1062.26 1214.66 L1062.85 1214.66 L1063.43 1214.66 L1064.02 1214.66 L1064.6 1214.66 L1065.19 1214.66 L1065.78 1214.66 L1066.36 1214.66 L1066.95 1214.66 L1067.54 1214.66 L1068.12 1214.66 L1068.71 1214.66 L1069.3 1214.66 L1069.88 1214.66 L1070.47 1214.66 L1071.06 1214.66 L1071.64 1214.66 L1072.23 1214.66 L1072.81 1214.66 L1073.4 1214.66 L1073.99 1214.66 L1074.57 1214.66 L1075.16 1214.66 L1075.75 1214.66 L1076.33 1214.66 L1076.92 1214.66 L1077.51 1214.66 L1078.09 1214.66 L1078.68 1214.66 L1079.26 1214.66 L1079.85 1214.66 L1080.44 1214.66 L1081.02 1214.66 L1081.61 1214.66 L1082.2 1214.66 L1082.78 1214.66 L1083.37 1214.66 L1083.96 1214.66 L1084.54 1214.66 L1085.13 1214.66 L1085.72 1214.66 L1086.3 1214.66 L1086.89 1214.66 L1087.47 1214.66 L1088.06 1214.66 L1088.65 1214.66 L1089.23 1214.66 L1089.82 1214.66 L1090.41 1214.66 L1090.99 1214.66 L1091.58 1214.66 L1092.17 1214.66 L1092.75 1214.66 L1093.34 1214.66 L1093.93 1214.66 L1094.51 1214.66 L1095.1 1214.66 L1095.68 1214.66 L1096.27 1214.66 L1096.86 1214.66 L1097.44 1214.66 L1098.03 1214.66 L1098.62 1214.66 L1099.2 1214.66 L1099.79 1214.66 L1100.38 1214.66 L1100.96 1214.66 L1101.55 1214.66 L1102.14 1214.66 L1102.72 1214.66 L1103.31 1214.66 L1103.89 1214.66 L1104.48 1214.66 L1105.07 1214.66 L1105.65 1214.66 L1106.24 1214.66 L1106.83 1214.66 L1107.41 1214.66 L1108 1214.66 L1108.59 1214.66 L1109.17 1214.66 L1109.76 1214.66 L1110.34 1214.66 L1110.93 1214.66 L1111.52 1214.66 L1112.1 1214.66 L1112.69 1214.66 L1113.28 1214.66 L1113.86 1214.66 L1114.45 1214.66 L1115.04 1214.66 L1115.62 1214.66 L1116.21 1214.66 L1116.8 1214.66 L1117.38 1214.66 L1117.97 1214.66 L1118.55 1214.66 L1119.14 1214.66 L1119.73 1214.66 L1120.31 1214.66 L1120.9 1214.66 L1121.49 1214.66 L1122.07 1214.66 L1122.66 1214.66 L1123.25 1214.66 L1123.83 1214.66 L1124.42 1214.66 L1125.01 1214.66 L1125.59 1214.66 L1126.18 1214.66 L1126.76 1214.66 L1127.35 1214.66 L1127.94 1214.66 L1128.52 1214.66 L1129.11 1214.66 L1129.7 1214.66 L1130.28 1214.66 L1130.87 1214.66 L1131.46 1214.66 L1132.04 1214.66 L1132.63 1214.66 L1133.21 1214.66 L1133.8 1214.66 L1134.39 1214.66 L1134.97 1214.66 L1135.56 1214.66 L1136.15 1214.66 L1136.73 1214.66 L1137.32 1214.66 L1137.91 1214.66 L1138.49 1214.66 L1139.08 1214.66 L1139.67 1214.66 L1140.25 1214.66 L1140.84 1214.66 L1141.42 1214.66 L1142.01 1214.66 L1142.6 1214.66 L1143.18 1214.66 L1143.77 1214.66 L1144.36 1214.66 L1144.94 1214.66 L1145.53 1214.66 L1146.12 1214.66 L1146.7 1214.66 L1147.29 1214.66 L1147.88 1214.66 L1148.46 1214.66 L1149.05 1214.66 L1149.63 1214.66 L1150.22 1214.66 L1150.81 1214.66 L1151.39 1214.66 L1151.98 1214.66 L1152.57 1214.66 L1153.15 1214.66 L1153.74 1214.66 L1154.33 1214.66 L1154.91 1214.66 L1155.5 1214.66 L1156.09 1214.66 L1156.67 1214.66 L1157.26 1214.66 L1157.84 1214.66 L1158.43 1214.66 L1159.02 1214.66 L1159.6 1214.66 L1160.19 1214.66 L1160.78 1214.66 L1161.36 1214.66 L1161.95 1214.66 L1162.54 1214.66 L1163.12 1214.66 L1163.71 1214.66 L1164.29 1214.66 L1164.88 1214.66 L1165.47 1214.66 L1166.05 1214.66 L1166.64 1214.66 L1167.23 1214.66 L1167.81 1214.66 L1168.4 1214.66 L1168.99 1214.66 L1169.57 1214.66 L1170.16 1214.66 L1170.75 1214.66 L1171.33 1214.66 L1171.92 1214.66 L1172.5 1214.66 L1173.09 1214.66 L1173.68 1214.66 L1174.26 1214.66 L1174.85 1214.66 L1175.44 1214.66 L1176.02 1214.66 L1176.61 1214.66 L1177.2 1214.66 L1177.78 1214.66 L1178.37 1214.66 L1178.96 1214.66 L1179.54 1214.66 L1180.13 1214.66 L1180.71 1214.66 L1181.3 1214.66 L1181.89 1214.66 L1182.47 1214.66 L1183.06 1214.66 L1183.65 1214.66 L1184.23 1214.66 L1184.82 1214.66 L1185.41 1214.66 L1185.99 1214.66 L1186.58 1214.66 L1187.16 1214.66 L1187.75 1214.66 L1188.34 1214.66 L1188.92 1214.66 L1189.51 1214.66 L1190.1 1214.66 L1190.68 1214.66 L1191.27 1214.66 L1191.86 1214.66 L1192.44 1214.66 L1193.03 1214.66 L1193.62 1214.66 L1194.2 1214.66 L1194.79 1214.66 L1195.37 1214.66 L1195.96 1214.66 L1196.55 1214.66 L1197.13 1214.66 L1197.72 1214.66 L1198.31 1214.66 L1198.89 1214.66 L1199.48 1214.66 L1200.07 1214.66 L1200.65 1214.66 L1201.24 1214.66 L1201.83 1214.66 L1202.41 1214.66 L1203 1214.66 L1203.58 1214.66 L1204.17 1214.66 L1204.76 1214.66 L1205.34 1214.66 L1205.93 1214.66 L1206.52 1214.66 L1207.1 1214.66 L1207.69 1214.66 L1208.28 1214.66 L1208.86 1214.66 L1209.45 1214.66 L1210.03 1214.66 L1210.62 1214.66 L1211.21 1214.66 L1211.79 1214.66 L1212.38 1214.66 L1212.97 1214.66 L1213.55 1214.66 L1214.14 1214.66 L1214.73 1214.66 L1215.31 1214.66 L1215.9 1214.66 L1216.49 1214.66 L1217.07 1214.66 L1217.66 1214.66 L1218.24 1214.66 L1218.83 1214.66 L1219.42 1214.66 L1220 1214.66 L1220.59 1214.66 L1221.18 1214.66 L1221.76 1214.66 L1222.35 1214.66 L1222.94 1214.66 L1223.52 1214.66 L1224.11 1214.66 L1224.7 1214.66 L1225.28 1214.66 L1225.87 1214.66 L1226.45 1214.66 L1227.04 1214.66 L1227.63 1214.66 L1228.21 1214.66 L1228.8 1214.66 L1229.39 1214.66 L1229.97 1214.66 L1230.56 1214.66 L1231.15 1214.66 L1231.73 1214.66 L1232.32 1214.66 L1232.91 1214.66 L1233.49 1214.66 L1234.08 1214.66 L1234.66 1214.66 L1235.25 1214.66 L1235.84 1214.66 L1236.42 1214.66 L1237.01 1214.66 L1237.6 1214.66 L1238.18 1214.66 L1238.77 1214.66 L1239.36 1214.66 L1239.94 1214.66 L1240.53 1214.66 L1241.11 1214.66 L1241.7 1214.66 L1242.29 1214.66 L1242.87 1214.66 L1243.46 1214.66 L1244.05 1214.66 L1244.63 1214.66 L1245.22 1214.66 L1245.81 1214.66 L1246.39 1214.66 L1246.98 1214.66 L1247.57 1214.66 L1248.15 1214.66 L1248.74 1214.66 L1249.32 1214.66 L1249.91 1214.66 L1250.5 1214.66 L1251.08 1214.66 L1251.67 1214.66 L1252.26 1214.66 L1252.84 1214.66 L1253.43 1214.66 L1254.02 1214.66 L1254.6 1214.66 L1255.19 1214.66 L1255.78 1214.66 L1256.36 1214.66 L1256.95 1214.66 L1257.53 1214.66 L1258.12 1214.66 L1258.71 1214.66 L1259.29 1214.66 L1259.88 1214.66 L1260.47 1214.66 L1261.05 1214.66 L1261.64 1214.66 L1262.23 1214.66 L1262.81 1214.66 L1263.4 1214.66 L1263.98 1214.66 L1264.57 1214.66 L1265.16 1214.66 L1265.74 1214.66 L1266.33 1214.66 L1266.92 1214.66 L1267.5 1214.66 L1268.09 1214.66 L1268.68 1214.66 L1269.26 1214.66 L1269.85 1214.66 L1270.44 1214.66 L1271.02 1214.66 L1271.61 1214.66 L1272.19 1214.66 L1272.78 1214.66 L1273.37 1214.66 L1273.95 1214.66 L1274.54 1214.66 L1275.13 1214.66 L1275.71 1214.66 L1276.3 1214.66 L1276.89 1214.66 L1277.47 1214.66 L1278.06 1214.66 L1278.65 1214.66 L1279.23 1214.66 L1279.82 1214.66 L1280.4 1214.66 L1280.99 1214.66 L1281.58 1214.66 L1282.16 1214.66 L1282.75 1214.66 L1283.34 1214.66 L1283.92 1214.66 L1284.51 1214.66 L1285.1 1214.66 L1285.68 1214.66 L1286.27 1214.66 L1286.86 1214.66 L1287.44 1214.66 L1288.03 1214.66 L1288.61 1214.66 L1289.2 1214.66 L1289.79 1214.66 L1290.37 1214.66 L1290.96 1214.66 L1291.55 1214.66 L1292.13 1214.66 L1292.72 1214.66 L1293.31 1214.66 L1293.89 1214.66 L1294.48 1214.66 L1295.06 1214.66 L1295.65 1214.66 L1296.24 1214.66 L1296.82 1214.66 L1297.41 1214.66 L1298 1214.66 L1298.58 1214.66 L1299.17 1214.66 L1299.76 1214.66 L1300.34 1214.66 L1300.93 1214.66 L1301.52 1214.66 L1302.1 1214.66 L1302.69 1214.66 L1303.27 1214.66 L1303.86 1214.66 L1304.45 1214.66 L1305.03 1214.66 L1305.62 1214.66 L1306.21 1214.66 L1306.79 1214.66 L1307.38 1214.66 L1307.97 1214.66 L1308.55 1214.66 L1309.14 1214.66 L1309.73 1214.66 L1310.31 1214.66 L1310.9 1214.66 L1311.48 1214.66 L1312.07 1214.66 L1312.66 1214.66 L1313.24 1214.66 L1313.83 1214.66 L1314.42 1214.66 L1315 1214.66 L1315.59 1214.66 L1316.18 1214.66 L1316.76 1214.66 L1317.35 1214.66 L1317.93 1214.66 L1318.52 1214.66 L1319.11 1214.66 L1319.69 1214.66 L1320.28 1214.66 L1320.87 1214.66 L1321.45 1214.66 L1322.04 1214.66 L1322.63 1214.66 L1323.21 1214.66 L1323.8 1214.66 L1324.39 1214.66 L1324.97 1214.66 L1325.56 1214.66 L1326.14 1214.66 L1326.73 1214.66 L1327.32 1214.66 L1327.9 1214.66 L1328.49 1214.66 L1329.08 1214.66 L1329.66 1214.66 L1330.25 1214.66 L1330.84 1214.66 L1331.42 1214.66 L1332.01 1214.66 L1332.6 1214.66 L1333.18 1214.66 L1333.77 1214.66 L1334.35 1214.66 L1334.94 1214.66 L1335.53 1214.66 L1336.11 1214.66 L1336.7 1214.66 L1337.29 1214.66 L1337.87 1214.66 L1338.46 1214.66 L1339.05 1214.66 L1339.63 1214.66 L1340.22 1214.66 L1340.8 1214.66 L1341.39 1214.66 L1341.98 1214.66 L1342.56 1214.66 L1343.15 1214.66 L1343.74 1214.66 L1344.32 1214.66 L1344.91 1214.66 L1345.5 1214.66 L1346.08 1214.66 L1346.67 1214.66 L1347.26 1214.66 L1347.84 1214.66 L1348.43 1214.66 L1349.01 1214.66 L1349.6 1214.66 L1350.19 1214.66 L1350.77 1214.66 L1351.36 1214.66 L1351.95 1214.66 L1352.53 1214.66 L1353.12 1214.66 L1353.71 1214.66 L1354.29 1214.66 L1354.88 1214.66 L1355.47 1214.66 L1356.05 1214.66 L1356.64 1214.66 L1357.22 1214.66 L1357.81 1214.66 L1358.4 1214.66 L1358.98 1214.66 L1359.57 1214.66 L1360.16 1214.66 L1360.74 1214.66 L1361.33 1214.66 L1361.92 1214.66 L1362.5 1214.66 L1363.09 1214.66 L1363.68 1214.66 L1364.26 1214.66 L1364.85 1214.66 L1365.43 1214.66 L1366.02 1214.66 L1366.61 1214.66 L1367.19 1214.66 L1367.78 1214.66 L1368.37 1214.66 L1368.95 1214.66 L1369.54 1214.66 L1370.13 1214.66 L1370.71 1214.66 L1371.3 1214.66 L1371.88 1214.66 L1372.47 1214.66 L1373.06 1214.66 L1373.64 1214.66 L1374.23 1214.66 L1374.82 1214.66 L1375.4 1214.66 L1375.99 1214.66 L1376.58 1214.66 L1377.16 1214.66 L1377.75 1214.66 L1378.34 1214.66 L1378.92 1214.66 L1379.51 1214.66 L1380.09 1214.66 L1380.68 1214.66 L1381.27 1214.66 L1381.85 1214.66 L1382.44 1214.66 L1383.03 1214.66 L1383.61 1214.66 L1384.2 1214.66 L1384.79 1214.66 L1385.37 1214.66 L1385.96 1214.66 L1386.55 1214.66 L1387.13 1214.66 L1387.72 1214.66 L1388.3 1214.66 L1388.89 1214.66 L1389.48 1214.66 L1390.06 1214.66 L1390.65 1214.66 L1391.24 1214.66 L1391.82 1214.66 L1392.41 1214.66 L1393 1214.66 L1393.58 1214.66 L1394.17 1214.66 L1394.75 1214.66 L1395.34 1214.66 L1395.93 1214.66 L1396.51 1214.66 L1397.1 1214.66 L1397.69 1214.66 L1398.27 1214.66 L1398.86 1214.66 L1399.45 1214.66 L1400.03 1214.66 L1400.62 1214.66 L1401.21 1214.66 L1401.79 1214.66 L1402.38 1214.66 L1402.96 1214.66 L1403.55 1214.66 L1404.14 1214.66 L1404.72 1214.66 L1405.31 1214.66 L1405.9 1214.66 L1406.48 1214.66 L1407.07 1214.66 L1407.66 1214.66 L1408.24 1214.66 L1408.83 1214.66 L1409.42 1214.66 L1410 1214.66 L1410.59 1214.66 L1411.17 1214.66 L1411.76 1214.66 L1412.35 1214.66 L1412.93 1214.66 L1413.52 1214.66 L1414.11 1214.66 L1414.69 1214.66 L1415.28 1214.66 L1415.87 1214.66 L1416.45 1214.66 L1417.04 1214.66 L1417.63 1214.66 L1418.21 1214.66 L1418.8 1214.66 L1419.38 1214.66 L1419.97 1214.66 L1420.56 1214.66 L1421.14 1214.66 L1421.73 1214.66 L1422.32 1214.66 L1422.9 1214.66 L1423.49 1214.66 L1424.08 1214.66 L1424.66 1214.66 L1425.25 1214.66 L1425.83 1214.66 L1426.42 1214.66 L1427.01 1214.66 L1427.59 1214.66 L1428.18 1214.66 L1428.77 1214.66 L1429.35 1214.66 L1429.94 1214.66 L1430.53 1214.66 L1431.11 1214.66 L1431.7 1214.66 L1432.29 1214.66 L1432.87 1214.66 L1433.46 1214.66 L1434.04 1214.66 L1434.63 1214.66 L1435.22 1214.66 L1435.8 1214.66 L1436.39 1214.66 L1436.98 1214.66 L1437.56 1214.66 L1438.15 1214.66 L1438.74 1214.66 L1439.32 1214.66 L1439.91 1214.66 L1440.5 1214.66 L1441.08 1214.66 L1441.67 1214.66 L1442.25 1214.66 L1442.84 1214.66 L1443.43 1214.66 L1444.01 1214.66 L1444.6 1214.66 L1445.19 1214.66 L1445.77 1214.66 L1446.36 1214.66 L1446.95 1214.66 L1447.53 1214.66 L1448.12 1214.66 L1448.7 1214.66 L1449.29 1214.66 L1449.88 1214.66 L1450.46 1214.66 L1451.05 1214.66 L1451.64 1214.66 L1452.22 1214.66 L1452.81 1214.66 L1453.4 1214.66 L1453.98 1214.66 L1454.57 1214.66 L1455.16 1214.66 L1455.74 1214.66 L1456.33 1214.66 L1456.91 1214.66 L1457.5 1214.66 L1458.09 1214.66 L1458.67 1214.66 L1459.26 1214.66 L1459.85 1214.66 L1460.43 1214.66 L1461.02 1214.66 L1461.61 1214.66 L1462.19 1214.66 L1462.78 1214.66 L1463.37 1214.66 L1463.95 1214.66 L1464.54 1214.66 L1465.12 1214.66 L1465.71 1214.66 L1466.3 1214.66 L1466.88 1214.66 L1467.47 1214.66 L1468.06 1214.66 L1468.64 1214.66 L1469.23 1214.66 L1469.82 1214.66 L1470.4 1214.66 L1470.99 1214.66 L1471.57 1214.66 L1472.16 1214.66 L1472.75 1214.66 L1473.33 1214.66 L1473.92 1214.66 L1474.51 1214.66 L1475.09 1214.66 L1475.68 1214.66 L1476.27 1214.66 L1476.85 1214.66 L1477.44 1214.66 L1478.03 1214.66 L1478.61 1214.66 L1479.2 1214.66 L1479.78 1214.66 L1480.37 1214.66 L1480.96 1214.66 L1481.54 1214.66 L1482.13 1214.66 L1482.72 1214.66 L1483.3 1214.66 L1483.89 1214.66 L1484.48 1214.66 L1485.06 1214.66 L1485.65 1214.66 L1486.24 1214.66 L1486.82 1214.66 L1487.41 1214.66 L1487.99 1214.66 L1488.58 1214.66 L1489.17 1214.66 L1489.75 1214.66 L1490.34 1214.66 L1490.93 1214.66 L1491.51 1214.66 L1492.1 1214.66 L1492.69 1214.66 L1493.27 1214.66 L1493.86 1214.66 L1494.45 1214.66 L1495.03 1214.66 L1495.62 1214.66 L1496.2 1214.66 L1496.79 1214.66 L1497.38 1214.66 L1497.96 1214.66 L1498.55 1214.66 L1499.14 1214.66 L1499.72 1214.66 L1500.31 1214.66 L1500.9 1214.66 L1501.48 1214.66 L1502.07 1214.66 L1502.65 1214.66 L1503.24 1214.66 L1503.83 1214.66 L1504.41 1214.66 L1505 1214.66 L1505.59 1214.66 L1506.17 1214.66 L1506.76 1214.66 L1507.35 1214.66 L1507.93 1214.66 L1508.52 1214.66 L1509.11 1214.66 L1509.69 1214.66 L1510.28 1214.66 L1510.86 1214.66 L1511.45 1214.66 L1512.04 1214.66 L1512.62 1214.66 L1513.21 1214.66 L1513.8 1214.66 L1514.38 1214.66 L1514.97 1214.66 L1515.56 1214.66 L1516.14 1214.66 L1516.73 1214.66 L1517.32 1214.66 L1517.9 1214.66 L1518.49 1214.66 L1519.07 1214.66 L1519.66 1214.66 L1520.25 1214.66 L1520.83 1214.66 L1521.42 1214.66 L1522.01 1214.66 L1522.59 1214.66 L1523.18 1214.66 L1523.77 1214.66 L1524.35 1214.66 L1524.94 1214.66 L1525.52 1214.66 L1526.11 1214.66 L1526.7 1214.66 L1527.28 1214.66 L1527.87 1214.66 L1528.46 1214.66 L1529.04 1214.66 L1529.63 1214.66 L1530.22 1214.66 L1530.8 1214.66 L1531.39 1214.66 L1531.98 1214.66 L1532.56 1214.66 L1533.15 1214.66 L1533.73 1214.66 L1534.32 1214.66 L1534.91 1214.66 L1535.49 1214.66 L1536.08 1214.66 L1536.67 1214.66 L1537.25 1214.66 L1537.84 1214.66 L1538.43 1214.66 L1539.01 1214.66 L1539.6 1214.66 L1540.19 1214.66 L1540.77 1214.66 L1541.36 1214.66 L1541.94 1214.66 L1542.53 1214.66 L1543.12 1214.66 L1543.7 1214.66 L1544.29 1214.66 L1544.88 1214.66 L1545.46 1214.66 L1546.05 1214.66 L1546.64 1214.66 L1547.22 1214.66 L1547.81 1214.66 L1548.4 1214.66 L1548.98 1214.66 L1549.57 1214.66 L1550.15 1214.66 L1550.74 1214.66 L1551.33 1214.66 L1551.91 1214.66 L1552.5 1214.66 L1553.09 1214.66 L1553.67 1214.66 L1554.26 1214.66 L1554.85 1214.66 L1555.43 1214.66 L1556.02 1214.66 L1556.6 1214.66 L1557.19 1214.66 L1557.78 1214.66 L1558.36 1214.66 L1558.95 1214.66 L1559.54 1214.66 L1560.12 1214.66 L1560.71 1214.66 L1561.3 1214.66 L1561.88 1214.66 L1562.47 1214.66 L1563.06 1214.66 L1563.64 1214.66 L1564.23 1214.66 L1564.81 1214.66 L1565.4 1214.66 L1565.99 1214.66 L1566.57 1214.66 L1567.16 1214.66 L1567.75 1214.66 L1568.33 1214.66 L1568.92 1214.66 L1569.51 1214.66 L1570.09 1214.66 L1570.68 1214.66 L1571.27 1214.66 L1571.85 1214.66 L1572.44 1214.66 L1573.02 1214.66 L1573.61 1214.66 L1574.2 1214.66 L1574.78 1214.66 L1575.37 1214.66 L1575.96 1214.66 L1576.54 1214.66 L1577.13 1214.66 L1577.72 1214.66 L1578.3 1214.66 L1578.89 1214.66 L1579.47 1214.66 L1580.06 1214.66 L1580.65 1214.66 L1581.23 1214.66 L1581.82 1214.66 L1582.41 1214.66 L1582.99 1214.66 L1583.58 1214.66 L1584.17 1214.66 L1584.75 1214.66 L1585.34 1214.66 L1585.93 1214.66 L1586.51 1214.66 L1587.1 1214.66 L1587.68 1214.66 L1588.27 1214.66 L1588.86 1214.66 L1589.44 1214.66 L1590.03 1214.66 L1590.62 1214.66 L1591.2 1214.66 L1591.79 1214.66 L1592.38 1214.66 L1592.96 1214.66 L1593.55 1214.66 L1594.14 1214.66 L1594.72 1214.66 L1595.31 1214.66 L1595.89 1214.66 L1596.48 1214.66 L1597.07 1214.66 L1597.65 1214.66 L1598.24 1214.66 L1598.83 1214.66 L1599.41 1214.66 L1600 1214.66 L1600.59 1214.66 L1601.17 1214.66 L1601.76 1214.66 L1602.34 1214.66 L1602.93 1214.66 L1603.52 1214.66 L1604.1 1214.66 L1604.69 1214.66 L1605.28 1214.66 L1605.86 1214.66 L1606.45 1214.66 L1607.04 1214.66 L1607.62 1214.66 L1608.21 1214.66 L1608.8 1214.66 L1609.38 1214.66 L1609.97 1214.66 L1610.55 1214.66 L1611.14 1214.66 L1611.73 1214.66 L1612.31 1214.66 L1612.9 1214.66 L1613.49 1214.66 L1614.07 1214.66 L1614.66 1214.66 L1615.25 1214.66 L1615.83 1214.66 L1616.42 1214.66 L1617.01 1214.66 L1617.59 1214.66 L1618.18 1214.66 L1618.76 1214.66 L1619.35 1214.66 L1619.94 1214.66 L1620.52 1214.66 L1621.11 1214.66 L1621.7 1214.66 L1622.28 1214.66 L1622.87 1214.66 L1623.46 1214.66 L1624.04 1214.66 L1624.63 1214.66 L1625.22 1214.66 L1625.8 1214.66 L1626.39 1214.66 L1626.97 1214.66 L1627.56 1214.66 L1628.15 1214.66 L1628.73 1214.66 L1629.32 1214.66 L1629.91 1214.66 L1630.49 1214.66 L1631.08 1214.66 L1631.67 1214.66 L1632.25 1214.66 L1632.84 1214.66 L1633.42 1214.66 L1634.01 1214.66 L1634.6 1214.66 L1635.18 1214.66 L1635.77 1214.66 L1636.36 1214.66 L1636.94 1214.66 L1637.53 1214.66 L1638.12 1214.66 L1638.7 1214.66 L1639.29 1214.66 L1639.88 1214.66 L1640.46 1214.66 L1641.05 1214.66 L1641.63 1214.66 L1642.22 1214.66 L1642.81 1214.66 L1643.39 1214.66 L1643.98 1214.66 L1644.57 1214.66 L1645.15 1214.66 L1645.74 1214.66 L1646.33 1214.66 L1646.91 1214.66 L1647.5 1214.66 L1648.09 1214.66 L1648.67 1214.66 L1649.26 1214.66 L1649.84 1214.66 L1650.43 1214.66 L1651.02 1214.66 L1651.6 1214.66 L1652.19 1214.66 L1652.78 1214.66 L1653.36 1214.66 L1653.95 1214.66 L1654.54 1214.66 L1655.12 1214.66 L1655.71 1214.66 L1656.29 1214.66 L1656.88 1214.66 L1657.47 1214.66 L1658.05 1214.66 L1658.64 1214.66 L1659.23 1214.66 L1659.81 1214.66 L1660.4 1214.66 L1660.99 1214.66 L1661.57 1214.66 L1662.16 1214.66 L1662.75 1214.66 L1663.33 1214.66 L1663.92 1214.66 L1664.5 1214.66 L1665.09 1214.66 L1665.68 1214.66 L1666.26 1214.66 L1666.85 1214.66 L1667.44 1214.66 L1668.02 1214.66 L1668.61 1214.66 L1669.2 1214.66 L1669.78 1214.66 L1670.37 1214.66 L1670.96 1214.66 L1671.54 1214.66 L1672.13 1214.66 L1672.71 1214.66 L1673.3 1214.66 L1673.89 1214.66 L1674.47 1214.66 L1675.06 1214.66 L1675.65 1214.66 L1676.23 1214.66 L1676.82 1214.66 L1677.41 1214.66 L1677.99 1214.66 L1678.58 1214.66 L1679.17 1214.66 L1679.75 1214.66 L1680.34 1214.66 L1680.92 1214.66 L1681.51 1214.66 L1682.1 1214.66 L1682.68 1214.66 L1683.27 1214.66 L1683.86 1214.66 L1684.44 1214.66 L1685.03 1214.66 L1685.62 1214.66 L1686.2 1214.66 L1686.79 1214.66 L1687.37 1214.66 L1687.96 1214.66 L1688.55 1214.66 L1689.13 1214.66 L1689.72 1214.66 L1690.31 1214.66 L1690.89 1214.66 L1691.48 1214.66 L1692.07 1214.66 L1692.65 1214.66 L1693.24 1214.66 L1693.83 1214.66 L1694.41 1214.66 L1695 1214.66 L1695.58 1214.66 L1696.17 1214.66 L1696.76 1214.66 L1697.34 1214.66 L1697.93 1214.66 L1698.52 1214.66 L1699.1 1214.66 L1699.69 1214.66 L1700.28 1214.66 L1700.86 1214.66 L1701.45 1214.66 L1702.04 1214.66 L1702.62 1214.66 L1703.21 1214.66 L1703.79 1214.66 L1704.38 1214.66 L1704.97 1214.66 L1705.55 1214.66 L1706.14 1214.66 L1706.73 1214.66 L1707.31 1214.66 L1707.9 1214.66 L1708.49 1214.66 L1709.07 1214.66 L1709.66 1214.66 L1710.24 1214.66 L1710.83 1214.66 L1711.42 1214.66 L1712 1214.66 L1712.59 1214.66 L1713.18 1214.66 L1713.76 1214.66 L1714.35 1214.66 L1714.94 1214.66 L1715.52 1214.66 L1716.11 1214.66 L1716.7 1214.66 L1717.28 1214.66 L1717.87 1214.66 L1718.45 1214.66 L1719.04 1214.66 L1719.63 1214.66 L1720.21 1214.66 L1720.8 1214.66 L1721.39 1214.66 L1721.97 1214.66 L1722.56 1214.66 L1723.15 1214.66 L1723.73 1214.66 L1724.32 1214.66 L1724.91 1214.66 L1725.49 1214.66 L1726.08 1214.66 L1726.66 1214.66 L1727.25 1214.66 L1727.84 1214.66 L1728.42 1214.66 L1729.01 1214.66 L1729.6 1214.66 L1730.18 1214.66 L1730.77 1214.66 L1731.36 1214.66 L1731.94 1214.66 L1732.53 1214.66 L1733.11 1214.66 L1733.7 1214.66 L1734.29 1214.66 L1734.87 1214.66 L1735.46 1214.66 L1736.05 1214.66 L1736.63 1214.66 L1737.22 1214.66 L1737.81 1214.66 L1738.39 1214.66 L1738.98 1214.66 L1739.57 1214.66 L1740.15 1214.66 L1740.74 1214.66 L1741.32 1214.66 L1741.91 1214.66 L1742.5 1214.66 L1743.08 1214.66 L1743.67 1214.66 L1744.26 1214.66 L1744.84 1214.66 L1745.43 1214.66 L1746.02 1214.66 L1746.6 1214.66 L1747.19 1214.66 L1747.78 1214.66 L1748.36 1214.66 L1748.95 1214.66 L1749.53 1214.66 L1750.12 1214.66 L1750.71 1214.66 L1751.29 1214.66 L1751.88 1214.66 L1752.47 1214.66 L1753.05 1214.66 L1753.64 1214.66 L1754.23 1214.66 L1754.81 1214.66 L1755.4 1214.66 L1755.99 1214.66 L1756.57 1214.66 L1757.16 1214.66 L1757.74 1214.66 L1758.33 1214.66 L1758.92 1214.66 L1759.5 1214.66 L1760.09 1214.66 L1760.68 1214.66 L1761.26 1214.66 L1761.85 1214.66 L1762.44 1214.66 L1763.02 1214.66 L1763.61 1214.66 L1764.19 1214.66 L1764.78 1214.66 L1765.37 1214.66 L1765.95 1214.66 L1766.54 1214.66 L1767.13 1214.66 L1767.71 1214.66 L1768.3 1214.66 L1768.89 1214.66 L1769.47 1214.66 L1770.06 1214.66 L1770.65 1214.66 L1771.23 1214.66 L1771.82 1214.66 L1772.4 1214.66 L1772.99 1214.66 L1773.58 1214.66 L1774.16 1214.66 L1774.75 1214.66 L1775.34 1214.66 L1775.92 1214.66 L1776.51 1214.66 L1777.1 1214.66 L1777.68 1214.66 L1778.27 1214.66 L1778.86 1214.66 L1779.44 1214.66 L1780.03 1214.66 L1780.61 1214.66 L1781.2 1214.66 L1781.79 1214.66 L1782.37 1214.66 L1782.96 1214.66 L1783.55 1214.66 L1784.13 1214.66 L1784.72 1214.66 L1785.31 1214.66 L1785.89 1214.66 L1786.48 1214.66 L1787.06 1214.66 L1787.65 1214.66 L1788.24 1214.66 L1788.82 1214.66 L1789.41 1214.66 L1790 1214.66 L1790.58 1214.66 L1791.17 1214.66 L1791.76 1214.66 L1792.34 1214.66 L1792.93 1214.66 L1793.52 1214.66 L1794.1 1214.66 L1794.69 1214.66 L1795.27 1214.66 L1795.86 1214.66 L1796.45 1214.66 L1797.03 1214.66 L1797.62 1214.66 L1798.21 1214.66 L1798.79 1214.66 L1799.38 1214.66 L1799.97 1214.66 L1800.55 1214.66 L1801.14 1214.66 L1801.73 1214.66 L1802.31 1214.66 L1802.9 1214.66 L1803.48 1214.66 L1804.07 1214.66 L1804.66 1214.66 L1805.24 1214.66 L1805.83 1214.66 L1806.42 1214.66 L1807 1214.66 L1807.59 1214.66 L1808.18 1214.66 L1808.76 1214.66 L1809.35 1214.66 L1809.94 1214.66 L1810.52 1214.66 L1811.11 1214.66 L1811.69 1214.66 L1812.28 1214.66 L1812.87 1214.66 L1813.45 1214.66 L1814.04 1214.66 L1814.63 1214.66 L1815.21 1214.66 L1815.8 1214.66 L1816.39 1214.66 L1816.97 1214.66 L1817.56 1214.66 L1818.14 1214.66 L1818.73 1214.66 L1819.32 1214.66 L1819.9 1214.66 L1820.49 1214.66 L1821.08 1214.66 L1821.66 1214.66 L1822.25 1214.66 L1822.84 1214.66 L1823.42 1214.66 L1824.01 1214.66 L1824.6 1214.66 L1825.18 1214.66 L1825.77 1214.66 L1826.35 1214.66 L1826.94 1214.66 L1827.53 1214.66 L1828.11 1214.66 L1828.7 1214.66 L1829.29 1214.66 L1829.87 1214.66 L1830.46 1214.66 L1831.05 1214.66 L1831.63 1214.66 L1832.22 1214.66 L1832.81 1214.66 L1833.39 1214.66 L1833.98 1214.66 L1834.56 1214.66 L1835.15 1214.66 L1835.74 1214.66 L1836.32 1214.66 L1836.91 1214.66 L1837.5 1214.66 L1838.08 1214.66 L1838.67 1214.66 L1839.26 1214.66 L1839.84 1214.66 L1840.43 1214.66 L1841.01 1214.66 L1841.6 1214.66 L1842.19 1214.66 L1842.77 1214.66 L1843.36 1214.66 L1843.95 1214.66 L1844.53 1214.66 L1845.12 1214.66 L1845.71 1214.66 L1846.29 1214.66 L1846.88 1214.66 L1847.47 1214.66 L1848.05 1214.66 L1848.64 1214.66 L1849.22 1214.66 L1849.81 1214.66 L1850.4 1214.66 L1850.98 1214.66 L1851.57 1214.66 L1852.16 1214.66 L1852.74 1214.66 L1853.33 1214.66 L1853.92 1214.66 L1854.5 1214.66 L1855.09 1214.66 L1855.68 1214.66 L1856.26 1214.66 L1856.85 1214.66 L1857.43 1214.66 L1858.02 1214.66 L1858.61 1214.66 L1859.19 1214.66 L1859.78 1214.66 L1860.37 1214.66 L1860.95 1214.66 L1861.54 1214.66 L1862.13 1214.66 L1862.71 1214.66 L1863.3 1214.66 L1863.88 1214.66 L1864.47 1214.66 L1865.06 1214.66 L1865.64 1214.66 L1866.23 1214.66 L1866.82 1214.66 L1867.4 1214.66 L1867.99 1214.66 L1868.58 1214.66 L1869.16 1214.66 L1869.75 1214.66 L1870.34 1214.66 L1870.92 1214.66 L1871.51 1214.66 L1872.09 1214.66 L1872.68 1214.66 L1873.27 1214.66 L1873.85 1214.66 L1874.44 1214.66 L1875.03 1214.66 L1875.61 1214.66 L1876.2 1214.66 L1876.79 1214.66 L1877.37 1214.66 L1877.96 1214.66 L1878.55 1214.66 L1879.13 1214.66 L1879.72 1214.66 L1880.3 1214.66 L1880.89 1214.66 L1881.48 1214.66 L1882.06 1214.66 L1882.65 1214.66 L1883.24 1214.66 L1883.82 1214.66 L1884.41 1214.66 L1885 1214.66 L1885.58 1214.66 L1886.17 1214.66 L1886.76 1214.66 L1887.34 1214.66 L1887.93 1214.66 L1888.51 1214.66 L1889.1 1214.66 L1889.69 1214.66 L1890.27 1214.66 L1890.86 1214.66 L1891.45 1214.66 L1892.03 1214.66 L1892.62 1214.66 L1893.21 1214.66 L1893.79 1214.66 L1894.38 1214.66 L1894.96 1214.66 L1895.55 1214.66 L1896.14 1214.66 L1896.72 1214.66 L1897.31 1214.66 L1897.9 1214.66 L1898.48 1214.66 L1899.07 1214.66 L1899.66 1214.66 L1900.24 1214.66 L1900.83 1214.66 L1901.42 1214.66 L1902 1214.66 L1902.59 1214.66 L1903.17 1214.66 L1903.76 1214.66 L1904.35 1214.66 L1904.93 1214.66 L1905.52 1214.66 L1906.11 1214.66 L1906.69 1214.66 L1907.28 1214.66 L1907.87 1214.66 L1908.45 1214.66 L1909.04 1214.66 L1909.63 1214.66 L1910.21 1214.66 L1910.8 1214.66 L1911.38 1214.66 L1911.97 1214.66 L1912.56 1214.66 L1913.14 1214.66 L1913.73 1214.66 L1914.32 1214.66 L1914.9 1214.66 L1915.49 1214.66 L1916.08 1214.66 L1916.66 1214.66 L1917.25 1214.66 L1917.83 1214.66 L1918.42 1214.66 L1919.01 1214.66 L1919.59 1214.66 L1920.18 1214.66 L1920.77 1214.66 L1921.35 1214.66 L1921.94 1214.66 L1922.53 1214.66 L1923.11 1214.66 L1923.7 1214.66 L1924.29 1214.66 L1924.87 1214.66 L1925.46 1214.66 L1926.04 1214.66 L1926.63 1214.66 L1927.22 1214.66 L1927.8 1214.66 L1928.39 1214.66 L1928.98 1214.66 L1929.56 1214.66 L1930.15 1214.66 L1930.74 1214.66 L1931.32 1214.66 L1931.91 1214.66 L1932.5 1214.66 L1933.08 1214.66 L1933.67 1214.66 L1934.25 1214.66 L1934.84 1214.66 L1935.43 1214.66 L1936.01 1214.66 L1936.6 1214.66 L1937.19 1214.66 L1937.77 1214.66 L1938.36 1214.66 L1938.95 1214.66 L1939.53 1214.66 L1940.12 1214.66 L1940.71 1214.66 L1941.29 1214.66 L1941.88 1214.66 L1942.46 1214.66 L1943.05 1214.66 L1943.64 1214.66 L1944.22 1214.66 L1944.81 1214.66 L1945.4 1214.66 L1945.98 1214.66 L1946.57 1214.66 L1947.16 1214.66 L1947.74 1214.66 L1948.33 1214.66 L1948.91 1214.66 L1949.5 1214.66 L1950.09 1214.66 L1950.67 1214.66 L1951.26 1214.66 L1951.85 1214.66 L1952.43 1214.66 L1953.02 1214.66 L1953.61 1214.66 L1954.19 1214.66 L1954.78 1214.66 L1955.37 1214.66 L1955.95 1214.66 L1956.54 1214.66 L1957.12 1214.66 L1957.71 1214.66 L1958.3 1214.66 L1958.88 1214.66 L1959.47 1214.66 L1960.06 1214.66 L1960.64 1214.66 L1961.23 1214.66 L1961.82 1214.66 L1962.4 1214.66 L1962.99 1214.66 L1963.58 1214.66 L1964.16 1214.66 L1964.75 1214.66 L1965.33 1214.66 L1965.92 1214.66 L1966.51 1214.66 L1967.09 1214.66 L1967.68 1214.66 L1968.27 1214.66 L1968.85 1214.66 L1969.44 1214.66 L1970.03 1214.66 L1970.61 1214.66 L1971.2 1214.66 L1971.78 1214.66 L1972.37 1214.66 L1972.96 1214.66 L1973.54 1214.66 L1974.13 1214.66 L1974.72 1214.66 L1975.3 1214.66 L1975.89 1214.66 L1976.48 1214.66 L1977.06 1214.66 L1977.65 1214.66 L1978.24 1214.66 L1978.82 1214.66 L1979.41 1214.66 L1979.99 1214.66 L1980.58 1214.66 L1981.17 1214.66 L1981.75 1214.66 L1982.34 1214.66 L1982.93 1214.66 L1983.51 1214.66 L1984.1 1214.66 L1984.69 1214.66 L1985.27 1214.66 L1985.86 1214.66 L1986.45 1214.66 L1987.03 1214.66 L1987.62 1214.66 L1988.2 1214.66 L1988.79 1214.66 L1989.38 1214.66 L1989.96 1214.66 L1990.55 1214.66 L1991.14 1214.66 L1991.72 1214.66 L1992.31 1214.66 L1992.9 1214.66 L1993.48 1214.66 L1994.07 1214.66 L1994.65 1214.66 L1995.24 1214.66 L1995.83 1214.66 L1996.41 1214.66 L1997 1214.66 L1997.59 1214.66 L1998.17 1214.66 L1998.76 1214.66 L1999.35 1214.66 L1999.93 1214.66 L2000.52 1214.66 L2001.11 1214.66 L2001.69 1214.66 L2002.28 1214.66 L2002.86 1214.66 L2003.45 1214.66 L2004.04 1214.66 L2004.62 1214.66 L2005.21 1214.66 L2005.8 1214.66 L2006.38 1214.66 L2006.97 1214.66 L2007.56 1214.66 L2008.14 1214.66 L2008.73 1214.66 L2009.32 1214.66 L2009.9 1214.66 L2010.49 1214.66 L2011.07 1214.66 L2011.66 1214.66 L2012.25 1214.66 L2012.83 1214.66 L2013.42 1214.66 L2014.01 1214.66 L2014.59 1214.66 L2015.18 1214.66 L2015.77 1214.66 L2016.35 1214.66 L2016.94 1214.66 L2017.53 1214.66 L2018.11 1214.66 L2018.7 1214.66 L2019.28 1214.66 L2019.87 1214.66 L2020.46 1214.66 L2021.04 1214.66 L2021.63 1214.66 L2022.22 1214.66 L2022.8 1214.66 L2023.39 1214.66 L2023.98 1214.66 L2024.56 1214.66 L2025.15 1214.66 L2025.73 1214.66 L2026.32 1214.66 L2026.91 1214.66 L2027.49 1214.66 L2028.08 1214.66 L2028.67 1214.66 L2029.25 1214.66 L2029.84 1214.66 L2030.43 1214.66 L2031.01 1214.66 L2031.6 1214.66 L2032.19 1214.66 L2032.77 1214.66 L2033.36 1214.66 L2033.94 1214.66 L2034.53 1214.66 L2035.12 1214.66 L2035.7 1214.66 L2036.29 1214.66 L2036.88 1214.66 L2037.46 1214.66 L2038.05 1214.66 L2038.64 1214.66 L2039.22 1214.66 L2039.81 1214.66 L2040.4 1214.66 L2040.98 1214.66 L2041.57 1214.66 L2042.15 1214.66 L2042.74 1214.66 L2043.33 1214.66 L2043.91 1214.66 L2044.5 1214.66 L2045.09 1214.66 L2045.67 1214.66 L2046.26 1214.66 L2046.85 1214.66 L2047.43 1214.66 L2048.02 1214.66 L2048.6 1214.66 L2049.19 1214.66 L2049.78 1214.66 L2050.36 1214.66 L2050.95 1214.66 L2051.54 1214.66 L2052.12 1214.66 L2052.71 1214.66 L2053.3 1214.66 L2053.88 1214.66 L2054.47 1214.66 L2055.06 1214.66 L2055.64 1214.66 L2056.23 1214.66 L2056.81 1214.66 L2057.4 1214.66 L2057.99 1214.66 L2058.57 1214.66 L2059.16 1214.66 L2059.75 1214.66 L2060.33 1214.66 L2060.92 1214.66 L2061.51 1214.66 L2062.09 1214.66 L2062.68 1214.66 L2063.27 1214.66 L2063.85 1214.66 L2064.44 1214.66 L2065.02 1214.66 L2065.61 1214.66 L2066.2 1214.66 L2066.78 1214.66 L2067.37 1214.66 L2067.96 1214.66 L2068.54 1214.66 L2069.13 1214.66 L2069.72 1214.66 L2070.3 1214.66 L2070.89 1214.66 L2071.48 1214.66 L2072.06 1214.66 L2072.65 1214.66 L2073.23 1214.66 L2073.82 1214.66 L2074.41 1214.66 L2074.99 1214.66 L2075.58 1214.66 L2076.17 1214.66 L2076.75 1214.66 L2077.34 1214.66 L2077.93 1214.66 L2078.51 1214.66 L2079.1 1214.66 L2079.68 1214.66 L2080.27 1214.66 L2080.86 1214.66 L2081.44 1214.66 L2082.03 1214.66 L2082.62 1214.66 L2083.2 1214.66 L2083.79 1214.66 L2084.38 1214.66 L2084.96 1214.66 L2085.55 1214.66 L2086.14 1214.66 L2086.72 1214.66 L2087.31 1214.66 L2087.89 1214.66 L2088.48 1214.66 L2089.07 1214.66 L2089.65 1214.66 L2090.24 1214.66 L2090.83 1214.66 L2091.41 1214.66 L2092 1214.66 L2092.59 1214.66 L2093.17 1214.66 L2093.76 1214.66 L2094.35 1214.66 L2094.93 1214.66 L2095.52 1214.66 L2096.1 1214.66 L2096.69 1214.66 L2097.28 1214.66 L2097.86 1214.66 L2098.45 1214.66 L2099.04 1214.66 L2099.62 1214.66 L2100.21 1214.66 L2100.8 1214.66 L2101.38 1214.66 L2101.97 1214.66 L2102.55 1214.66 L2103.14 1214.66 L2103.73 1214.66 L2104.31 1214.66 L2104.9 1214.66 L2105.49 1214.66 L2106.07 1214.66 L2106.66 1214.66 L2107.25 1214.66 L2107.83 1214.66 L2108.42 1214.66 L2109.01 1214.66 L2109.59 1214.66 L2110.18 1214.66 L2110.76 1214.66 L2111.35 1214.66 L2111.94 1214.66 L2112.52 1214.66 L2113.11 1214.66 L2113.7 1214.66 L2114.28 1214.66 L2114.87 1214.66 L2115.46 1214.66 L2116.04 1214.66 L2116.63 1214.66 L2117.22 1214.66 L2117.8 1214.66 L2118.39 1214.66 L2118.97 1214.66 L2119.56 1214.66 L2120.15 1214.66 L2120.73 1214.66 L2121.32 1214.66 L2121.91 1214.66 L2122.49 1214.66 L2123.08 1214.66 L2123.67 1214.66 L2124.25 1214.66 L2124.84 1214.66 L2125.42 1214.66 L2126.01 1214.66 L2126.6 1214.66 L2127.18 1214.66 L2127.77 1214.66 L2128.36 1214.66 L2128.94 1214.66 L2129.53 1214.66 L2130.12 1214.66 L2130.7 1214.66 L2131.29 1214.66 L2131.88 1214.66 L2132.46 1214.66 L2133.05 1214.66 L2133.63 1214.66 L2134.22 1214.66 L2134.81 1214.66 L2135.39 1214.66 L2135.98 1214.66 L2136.57 1214.66 L2137.15 1214.66 L2137.74 1214.66 L2138.33 1214.66 L2138.91 1214.66 L2139.5 1214.66 L2140.09 1214.66 L2140.67 1214.66 L2141.26 1214.66 L2141.84 1214.66 L2142.43 1214.66 L2143.02 1214.66 L2143.6 1214.66 L2144.19 1214.66 L2144.78 1214.66 L2145.36 1214.66 L2145.95 1214.66 L2146.54 1214.66 L2147.12 1214.66 L2147.71 1214.66 L2148.3 1214.66 L2148.88 1214.66 L2149.47 1214.66 L2150.05 1214.66 L2150.64 1214.66 L2151.23 1214.66 L2151.81 1214.66 L2152.4 1214.66 L2152.99 1214.66 L2153.57 1214.66 L2154.16 1214.66 L2154.75 1214.66 L2155.33 1214.66 L2155.92 1214.66 L2156.5 1214.66 L2157.09 1214.66 L2157.68 1214.66 L2158.26 1214.66 L2158.26 1213.82 L2157.68 1213.82 L2157.09 1213.82 L2156.5 1213.82 L2155.92 1213.82 L2155.33 1213.82 L2154.75 1213.82 L2154.16 1213.82 L2153.57 1213.82 L2152.99 1213.82 L2152.4 1213.82 L2151.81 1213.82 L2151.23 1213.82 L2150.64 1213.82 L2150.05 1213.82 L2149.47 1213.82 L2148.88 1213.82 L2148.3 1213.82 L2147.71 1213.82 L2147.12 1213.82 L2146.54 1213.82 L2145.95 1213.82 L2145.36 1213.82 L2144.78 1213.82 L2144.19 1213.82 L2143.6 1213.82 L2143.02 1213.82 L2142.43 1213.82 L2141.84 1213.82 L2141.26 1213.82 L2140.67 1213.82 L2140.09 1213.82 L2139.5 1213.82 L2138.91 1213.82 L2138.33 1213.82 L2137.74 1213.82 L2137.15 1213.82 L2136.57 1213.82 L2135.98 1213.82 L2135.39 1213.82 L2134.81 1213.82 L2134.22 1213.82 L2133.63 1213.82 L2133.05 1213.82 L2132.46 1213.82 L2131.88 1213.82 L2131.29 1213.82 L2130.7 1213.82 L2130.12 1213.82 L2129.53 1213.82 L2128.94 1213.82 L2128.36 1213.82 L2127.77 1213.82 L2127.18 1213.82 L2126.6 1213.82 L2126.01 1213.82 L2125.42 1213.82 L2124.84 1213.82 L2124.25 1213.82 L2123.67 1213.82 L2123.08 1213.82 L2122.49 1213.82 L2121.91 1213.82 L2121.32 1213.82 L2120.73 1213.82 L2120.15 1213.82 L2119.56 1213.82 L2118.97 1213.82 L2118.39 1213.82 L2117.8 1213.82 L2117.22 1213.82 L2116.63 1213.82 L2116.04 1213.82 L2115.46 1213.82 L2114.87 1213.82 L2114.28 1213.82 L2113.7 1213.82 L2113.11 1213.82 L2112.52 1213.82 L2111.94 1213.82 L2111.35 1213.82 L2110.76 1213.82 L2110.18 1213.82 L2109.59 1213.82 L2109.01 1213.82 L2108.42 1213.82 L2107.83 1213.82 L2107.25 1213.82 L2106.66 1213.82 L2106.07 1213.82 L2105.49 1213.82 L2104.9 1213.82 L2104.31 1213.82 L2103.73 1213.82 L2103.14 1213.82 L2102.55 1213.82 L2101.97 1213.82 L2101.38 1213.82 L2100.8 1213.82 L2100.21 1213.82 L2099.62 1213.82 L2099.04 1213.82 L2098.45 1213.82 L2097.86 1213.82 L2097.28 1213.82 L2096.69 1213.82 L2096.1 1213.82 L2095.52 1213.82 L2094.93 1213.82 L2094.35 1213.82 L2093.76 1213.82 L2093.17 1213.82 L2092.59 1213.82 L2092 1213.82 L2091.41 1213.82 L2090.83 1213.82 L2090.24 1213.82 L2089.65 1213.82 L2089.07 1213.82 L2088.48 1213.82 L2087.89 1213.82 L2087.31 1213.82 L2086.72 1213.82 L2086.14 1213.82 L2085.55 1213.82 L2084.96 1213.82 L2084.38 1213.82 L2083.79 1213.82 L2083.2 1213.82 L2082.62 1213.82 L2082.03 1213.82 L2081.44 1213.82 L2080.86 1213.82 L2080.27 1213.82 L2079.68 1213.82 L2079.1 1213.82 L2078.51 1213.82 L2077.93 1213.82 L2077.34 1213.82 L2076.75 1213.82 L2076.17 1213.82 L2075.58 1213.82 L2074.99 1213.82 L2074.41 1213.82 L2073.82 1213.82 L2073.23 1213.82 L2072.65 1213.82 L2072.06 1213.82 L2071.48 1213.82 L2070.89 1213.82 L2070.3 1213.82 L2069.72 1213.82 L2069.13 1213.82 L2068.54 1213.82 L2067.96 1213.82 L2067.37 1213.82 L2066.78 1213.82 L2066.2 1213.82 L2065.61 1213.82 L2065.02 1213.82 L2064.44 1213.82 L2063.85 1213.82 L2063.27 1213.82 L2062.68 1213.82 L2062.09 1213.82 L2061.51 1213.82 L2060.92 1213.82 L2060.33 1213.82 L2059.75 1213.82 L2059.16 1213.82 L2058.57 1213.82 L2057.99 1213.82 L2057.4 1213.82 L2056.81 1213.82 L2056.23 1213.82 L2055.64 1213.82 L2055.06 1213.82 L2054.47 1213.82 L2053.88 1213.82 L2053.3 1213.82 L2052.71 1213.82 L2052.12 1213.82 L2051.54 1213.82 L2050.95 1213.82 L2050.36 1213.82 L2049.78 1213.82 L2049.19 1213.82 L2048.6 1213.82 L2048.02 1213.82 L2047.43 1213.82 L2046.85 1213.82 L2046.26 1213.82 L2045.67 1213.82 L2045.09 1213.82 L2044.5 1213.82 L2043.91 1213.82 L2043.33 1213.82 L2042.74 1213.82 L2042.15 1213.82 L2041.57 1213.82 L2040.98 1213.82 L2040.4 1213.82 L2039.81 1213.82 L2039.22 1213.82 L2038.64 1213.82 L2038.05 1213.82 L2037.46 1213.82 L2036.88 1213.82 L2036.29 1213.82 L2035.7 1213.82 L2035.12 1213.82 L2034.53 1213.82 L2033.94 1213.82 L2033.36 1213.82 L2032.77 1213.82 L2032.19 1213.82 L2031.6 1213.82 L2031.01 1213.82 L2030.43 1213.82 L2029.84 1213.82 L2029.25 1213.82 L2028.67 1213.82 L2028.08 1213.82 L2027.49 1213.82 L2026.91 1213.82 L2026.32 1213.82 L2025.73 1213.82 L2025.15 1213.82 L2024.56 1213.82 L2023.98 1213.82 L2023.39 1213.82 L2022.8 1213.82 L2022.22 1213.82 L2021.63 1213.82 L2021.04 1213.82 L2020.46 1213.82 L2019.87 1213.82 L2019.28 1213.82 L2018.7 1213.82 L2018.11 1213.82 L2017.53 1213.82 L2016.94 1213.82 L2016.35 1213.82 L2015.77 1213.82 L2015.18 1213.82 L2014.59 1213.82 L2014.01 1213.82 L2013.42 1213.82 L2012.83 1213.82 L2012.25 1213.82 L2011.66 1213.82 L2011.07 1213.82 L2010.49 1213.82 L2009.9 1213.82 L2009.32 1213.82 L2008.73 1213.82 L2008.14 1213.82 L2007.56 1213.82 L2006.97 1213.82 L2006.38 1213.82 L2005.8 1213.82 L2005.21 1213.82 L2004.62 1213.82 L2004.04 1213.82 L2003.45 1213.82 L2002.86 1213.82 L2002.28 1213.82 L2001.69 1213.82 L2001.11 1213.82 L2000.52 1213.82 L1999.93 1213.82 L1999.35 1213.82 L1998.76 1213.82 L1998.17 1213.82 L1997.59 1213.82 L1997 1213.82 L1996.41 1213.82 L1995.83 1213.82 L1995.24 1213.82 L1994.65 1213.82 L1994.07 1213.82 L1993.48 1213.82 L1992.9 1213.82 L1992.31 1213.82 L1991.72 1213.82 L1991.14 1213.82 L1990.55 1213.82 L1989.96 1213.82 L1989.38 1213.82 L1988.79 1213.82 L1988.2 1213.82 L1987.62 1213.82 L1987.03 1213.82 L1986.45 1213.82 L1985.86 1213.82 L1985.27 1213.82 L1984.69 1213.82 L1984.1 1213.82 L1983.51 1213.82 L1982.93 1213.82 L1982.34 1213.82 L1981.75 1213.82 L1981.17 1213.82 L1980.58 1213.82 L1979.99 1213.82 L1979.41 1213.82 L1978.82 1213.82 L1978.24 1213.82 L1977.65 1213.82 L1977.06 1213.82 L1976.48 1213.82 L1975.89 1213.82 L1975.3 1213.82 L1974.72 1213.82 L1974.13 1213.82 L1973.54 1213.82 L1972.96 1213.82 L1972.37 1213.82 L1971.78 1213.82 L1971.2 1213.82 L1970.61 1213.82 L1970.03 1213.82 L1969.44 1213.82 L1968.85 1213.82 L1968.27 1213.82 L1967.68 1213.82 L1967.09 1213.82 L1966.51 1213.82 L1965.92 1213.82 L1965.33 1213.82 L1964.75 1213.82 L1964.16 1213.82 L1963.58 1213.82 L1962.99 1213.82 L1962.4 1213.82 L1961.82 1213.82 L1961.23 1213.82 L1960.64 1213.82 L1960.06 1213.82 L1959.47 1213.82 L1958.88 1213.82 L1958.3 1213.82 L1957.71 1213.82 L1957.12 1213.82 L1956.54 1213.82 L1955.95 1213.82 L1955.37 1213.82 L1954.78 1213.82 L1954.19 1213.82 L1953.61 1213.82 L1953.02 1213.82 L1952.43 1213.82 L1951.85 1213.82 L1951.26 1213.82 L1950.67 1213.82 L1950.09 1213.82 L1949.5 1213.82 L1948.91 1213.82 L1948.33 1213.82 L1947.74 1213.82 L1947.16 1213.82 L1946.57 1213.82 L1945.98 1213.82 L1945.4 1213.82 L1944.81 1213.82 L1944.22 1213.82 L1943.64 1213.82 L1943.05 1213.82 L1942.46 1213.82 L1941.88 1213.82 L1941.29 1213.82 L1940.71 1213.82 L1940.12 1213.82 L1939.53 1213.82 L1938.95 1213.82 L1938.36 1213.82 L1937.77 1213.82 L1937.19 1213.82 L1936.6 1213.82 L1936.01 1213.82 L1935.43 1213.82 L1934.84 1213.82 L1934.25 1213.82 L1933.67 1213.82 L1933.08 1213.82 L1932.5 1213.82 L1931.91 1213.82 L1931.32 1213.82 L1930.74 1213.82 L1930.15 1213.82 L1929.56 1213.82 L1928.98 1213.82 L1928.39 1213.82 L1927.8 1213.82 L1927.22 1213.82 L1926.63 1213.82 L1926.04 1213.82 L1925.46 1213.82 L1924.87 1213.82 L1924.29 1213.82 L1923.7 1213.82 L1923.11 1213.82 L1922.53 1213.82 L1921.94 1213.82 L1921.35 1213.82 L1920.77 1213.82 L1920.18 1213.82 L1919.59 1213.82 L1919.01 1213.82 L1918.42 1213.82 L1917.83 1213.82 L1917.25 1213.82 L1916.66 1213.82 L1916.08 1213.82 L1915.49 1213.82 L1914.9 1213.82 L1914.32 1213.82 L1913.73 1213.82 L1913.14 1213.82 L1912.56 1213.82 L1911.97 1213.82 L1911.38 1213.82 L1910.8 1213.82 L1910.21 1213.82 L1909.63 1213.82 L1909.04 1213.82 L1908.45 1213.82 L1907.87 1213.82 L1907.28 1213.82 L1906.69 1213.82 L1906.11 1213.82 L1905.52 1213.82 L1904.93 1213.82 L1904.35 1213.82 L1903.76 1213.82 L1903.17 1213.82 L1902.59 1213.82 L1902 1213.82 L1901.42 1213.82 L1900.83 1213.82 L1900.24 1213.82 L1899.66 1213.82 L1899.07 1213.82 L1898.48 1213.82 L1897.9 1213.82 L1897.31 1213.82 L1896.72 1213.82 L1896.14 1213.82 L1895.55 1213.82 L1894.96 1213.82 L1894.38 1213.82 L1893.79 1213.82 L1893.21 1213.82 L1892.62 1213.82 L1892.03 1213.82 L1891.45 1213.82 L1890.86 1213.82 L1890.27 1213.82 L1889.69 1213.82 L1889.1 1213.82 L1888.51 1213.82 L1887.93 1213.82 L1887.34 1213.82 L1886.76 1213.82 L1886.17 1213.82 L1885.58 1213.82 L1885 1213.82 L1884.41 1213.82 L1883.82 1213.82 L1883.24 1213.82 L1882.65 1213.82 L1882.06 1213.82 L1881.48 1213.82 L1880.89 1213.82 L1880.3 1213.82 L1879.72 1213.82 L1879.13 1213.82 L1878.55 1213.82 L1877.96 1213.82 L1877.37 1213.82 L1876.79 1213.82 L1876.2 1213.82 L1875.61 1213.82 L1875.03 1213.82 L1874.44 1213.82 L1873.85 1213.82 L1873.27 1213.82 L1872.68 1213.82 L1872.09 1213.82 L1871.51 1213.82 L1870.92 1213.82 L1870.34 1213.82 L1869.75 1213.82 L1869.16 1213.82 L1868.58 1213.82 L1867.99 1213.82 L1867.4 1213.82 L1866.82 1213.82 L1866.23 1213.82 L1865.64 1213.82 L1865.06 1213.82 L1864.47 1213.82 L1863.88 1213.82 L1863.3 1213.82 L1862.71 1213.82 L1862.13 1213.82 L1861.54 1213.82 L1860.95 1213.82 L1860.37 1213.82 L1859.78 1213.82 L1859.19 1213.82 L1858.61 1213.82 L1858.02 1213.82 L1857.43 1213.82 L1856.85 1213.82 L1856.26 1213.82 L1855.68 1213.82 L1855.09 1213.82 L1854.5 1213.82 L1853.92 1213.82 L1853.33 1213.82 L1852.74 1213.82 L1852.16 1213.82 L1851.57 1213.82 L1850.98 1213.82 L1850.4 1213.82 L1849.81 1213.82 L1849.22 1213.82 L1848.64 1213.82 L1848.05 1213.82 L1847.47 1213.82 L1846.88 1213.82 L1846.29 1213.82 L1845.71 1213.82 L1845.12 1213.82 L1844.53 1213.82 L1843.95 1213.82 L1843.36 1213.82 L1842.77 1213.82 L1842.19 1213.82 L1841.6 1213.82 L1841.01 1213.82 L1840.43 1213.82 L1839.84 1213.82 L1839.26 1213.82 L1838.67 1213.82 L1838.08 1213.82 L1837.5 1213.82 L1836.91 1213.82 L1836.32 1213.82 L1835.74 1213.82 L1835.15 1213.82 L1834.56 1213.82 L1833.98 1213.82 L1833.39 1213.82 L1832.81 1213.82 L1832.22 1213.82 L1831.63 1213.82 L1831.05 1213.82 L1830.46 1213.82 L1829.87 1213.82 L1829.29 1213.82 L1828.7 1213.82 L1828.11 1213.82 L1827.53 1213.82 L1826.94 1213.82 L1826.35 1213.82 L1825.77 1213.82 L1825.18 1213.82 L1824.6 1213.82 L1824.01 1213.82 L1823.42 1213.82 L1822.84 1213.82 L1822.25 1213.82 L1821.66 1213.82 L1821.08 1213.82 L1820.49 1213.82 L1819.9 1213.82 L1819.32 1213.82 L1818.73 1213.82 L1818.14 1213.82 L1817.56 1213.82 L1816.97 1213.82 L1816.39 1213.82 L1815.8 1213.82 L1815.21 1213.82 L1814.63 1213.82 L1814.04 1213.82 L1813.45 1213.82 L1812.87 1213.82 L1812.28 1213.82 L1811.69 1213.82 L1811.11 1213.82 L1810.52 1213.82 L1809.94 1213.82 L1809.35 1213.82 L1808.76 1213.82 L1808.18 1213.82 L1807.59 1213.82 L1807 1213.82 L1806.42 1213.82 L1805.83 1213.82 L1805.24 1213.82 L1804.66 1213.82 L1804.07 1213.82 L1803.48 1213.82 L1802.9 1213.82 L1802.31 1213.82 L1801.73 1213.82 L1801.14 1213.82 L1800.55 1213.82 L1799.97 1213.82 L1799.38 1213.82 L1798.79 1213.82 L1798.21 1213.82 L1797.62 1213.82 L1797.03 1213.82 L1796.45 1213.82 L1795.86 1213.82 L1795.27 1213.82 L1794.69 1213.82 L1794.1 1213.82 L1793.52 1213.82 L1792.93 1213.82 L1792.34 1213.82 L1791.76 1213.82 L1791.17 1213.82 L1790.58 1213.82 L1790 1213.82 L1789.41 1213.82 L1788.82 1213.82 L1788.24 1213.82 L1787.65 1213.82 L1787.06 1213.82 L1786.48 1213.82 L1785.89 1213.82 L1785.31 1213.82 L1784.72 1213.82 L1784.13 1213.82 L1783.55 1213.82 L1782.96 1213.82 L1782.37 1213.82 L1781.79 1213.82 L1781.2 1213.82 L1780.61 1213.82 L1780.03 1213.82 L1779.44 1213.82 L1778.86 1213.82 L1778.27 1213.82 L1777.68 1213.82 L1777.1 1213.82 L1776.51 1213.82 L1775.92 1213.82 L1775.34 1213.82 L1774.75 1213.82 L1774.16 1213.82 L1773.58 1213.82 L1772.99 1213.82 L1772.4 1213.82 L1771.82 1213.82 L1771.23 1213.82 L1770.65 1213.82 L1770.06 1213.82 L1769.47 1213.82 L1768.89 1213.82 L1768.3 1213.82 L1767.71 1213.82 L1767.13 1213.82 L1766.54 1213.82 L1765.95 1213.82 L1765.37 1213.82 L1764.78 1213.82 L1764.19 1213.82 L1763.61 1213.82 L1763.02 1213.82 L1762.44 1213.82 L1761.85 1213.82 L1761.26 1213.82 L1760.68 1213.82 L1760.09 1213.82 L1759.5 1213.82 L1758.92 1213.82 L1758.33 1213.82 L1757.74 1213.82 L1757.16 1213.82 L1756.57 1213.82 L1755.99 1213.82 L1755.4 1213.82 L1754.81 1213.82 L1754.23 1213.82 L1753.64 1213.82 L1753.05 1213.82 L1752.47 1213.82 L1751.88 1213.82 L1751.29 1213.82 L1750.71 1213.82 L1750.12 1213.82 L1749.53 1213.82 L1748.95 1213.82 L1748.36 1213.82 L1747.78 1213.82 L1747.19 1213.82 L1746.6 1213.82 L1746.02 1213.82 L1745.43 1213.82 L1744.84 1213.82 L1744.26 1213.82 L1743.67 1213.82 L1743.08 1213.82 L1742.5 1213.82 L1741.91 1213.82 L1741.32 1213.82 L1740.74 1213.82 L1740.15 1213.82 L1739.57 1213.82 L1738.98 1213.82 L1738.39 1213.82 L1737.81 1213.82 L1737.22 1213.82 L1736.63 1213.82 L1736.05 1213.82 L1735.46 1213.82 L1734.87 1213.82 L1734.29 1213.82 L1733.7 1213.82 L1733.11 1213.82 L1732.53 1213.82 L1731.94 1213.82 L1731.36 1213.82 L1730.77 1213.82 L1730.18 1213.82 L1729.6 1213.82 L1729.01 1213.82 L1728.42 1213.82 L1727.84 1213.82 L1727.25 1213.82 L1726.66 1213.82 L1726.08 1213.82 L1725.49 1213.82 L1724.91 1213.82 L1724.32 1213.82 L1723.73 1213.82 L1723.15 1213.82 L1722.56 1213.82 L1721.97 1213.82 L1721.39 1213.82 L1720.8 1213.82 L1720.21 1213.82 L1719.63 1213.82 L1719.04 1213.82 L1718.45 1213.82 L1717.87 1213.82 L1717.28 1213.82 L1716.7 1213.82 L1716.11 1213.82 L1715.52 1213.82 L1714.94 1213.82 L1714.35 1213.82 L1713.76 1213.82 L1713.18 1213.82 L1712.59 1213.82 L1712 1213.82 L1711.42 1213.82 L1710.83 1213.82 L1710.24 1213.82 L1709.66 1213.82 L1709.07 1213.82 L1708.49 1213.82 L1707.9 1213.82 L1707.31 1213.82 L1706.73 1213.82 L1706.14 1213.82 L1705.55 1213.82 L1704.97 1213.82 L1704.38 1213.82 L1703.79 1213.82 L1703.21 1213.82 L1702.62 1213.82 L1702.04 1213.82 L1701.45 1213.82 L1700.86 1213.82 L1700.28 1213.82 L1699.69 1213.82 L1699.1 1213.82 L1698.52 1213.82 L1697.93 1213.82 L1697.34 1213.82 L1696.76 1213.82 L1696.17 1213.82 L1695.58 1213.82 L1695 1213.82 L1694.41 1213.82 L1693.83 1213.82 L1693.24 1213.82 L1692.65 1213.82 L1692.07 1213.82 L1691.48 1213.82 L1690.89 1213.82 L1690.31 1213.82 L1689.72 1213.82 L1689.13 1213.82 L1688.55 1213.82 L1687.96 1213.82 L1687.37 1213.82 L1686.79 1213.82 L1686.2 1213.82 L1685.62 1213.82 L1685.03 1213.82 L1684.44 1213.82 L1683.86 1213.82 L1683.27 1213.82 L1682.68 1213.82 L1682.1 1213.82 L1681.51 1213.82 L1680.92 1213.82 L1680.34 1213.82 L1679.75 1213.82 L1679.17 1213.82 L1678.58 1213.82 L1677.99 1213.82 L1677.41 1213.82 L1676.82 1213.82 L1676.23 1213.82 L1675.65 1213.82 L1675.06 1213.82 L1674.47 1213.82 L1673.89 1213.82 L1673.3 1213.82 L1672.71 1213.82 L1672.13 1213.82 L1671.54 1213.82 L1670.96 1213.82 L1670.37 1213.82 L1669.78 1213.82 L1669.2 1213.82 L1668.61 1213.82 L1668.02 1213.82 L1667.44 1213.82 L1666.85 1213.82 L1666.26 1213.82 L1665.68 1213.82 L1665.09 1213.82 L1664.5 1213.82 L1663.92 1213.82 L1663.33 1213.82 L1662.75 1213.82 L1662.16 1213.82 L1661.57 1213.82 L1660.99 1213.82 L1660.4 1213.82 L1659.81 1213.82 L1659.23 1213.82 L1658.64 1213.82 L1658.05 1213.82 L1657.47 1213.82 L1656.88 1213.82 L1656.29 1213.82 L1655.71 1213.82 L1655.12 1213.82 L1654.54 1213.82 L1653.95 1213.82 L1653.36 1213.82 L1652.78 1213.82 L1652.19 1213.82 L1651.6 1213.82 L1651.02 1213.82 L1650.43 1213.82 L1649.84 1213.82 L1649.26 1213.82 L1648.67 1213.82 L1648.09 1213.82 L1647.5 1213.82 L1646.91 1213.82 L1646.33 1213.82 L1645.74 1213.82 L1645.15 1213.82 L1644.57 1213.82 L1643.98 1213.82 L1643.39 1213.82 L1642.81 1213.82 L1642.22 1213.82 L1641.63 1213.82 L1641.05 1213.82 L1640.46 1213.82 L1639.88 1213.82 L1639.29 1213.82 L1638.7 1213.82 L1638.12 1213.82 L1637.53 1213.82 L1636.94 1213.82 L1636.36 1213.82 L1635.77 1213.82 L1635.18 1213.82 L1634.6 1213.82 L1634.01 1213.82 L1633.42 1213.82 L1632.84 1213.82 L1632.25 1213.82 L1631.67 1213.82 L1631.08 1213.82 L1630.49 1213.82 L1629.91 1213.82 L1629.32 1213.82 L1628.73 1213.82 L1628.15 1213.82 L1627.56 1213.82 L1626.97 1213.82 L1626.39 1213.82 L1625.8 1213.82 L1625.22 1213.82 L1624.63 1213.82 L1624.04 1213.82 L1623.46 1213.82 L1622.87 1213.82 L1622.28 1213.82 L1621.7 1213.82 L1621.11 1213.82 L1620.52 1213.82 L1619.94 1213.82 L1619.35 1213.82 L1618.76 1213.82 L1618.18 1213.82 L1617.59 1213.82 L1617.01 1213.82 L1616.42 1213.82 L1615.83 1213.82 L1615.25 1213.82 L1614.66 1213.82 L1614.07 1213.82 L1613.49 1213.82 L1612.9 1213.82 L1612.31 1213.82 L1611.73 1213.82 L1611.14 1213.82 L1610.55 1213.82 L1609.97 1213.82 L1609.38 1213.82 L1608.8 1213.82 L1608.21 1213.82 L1607.62 1213.82 L1607.04 1213.82 L1606.45 1213.82 L1605.86 1213.82 L1605.28 1213.82 L1604.69 1213.82 L1604.1 1213.82 L1603.52 1213.82 L1602.93 1213.82 L1602.34 1213.82 L1601.76 1213.82 L1601.17 1213.82 L1600.59 1213.82 L1600 1213.82 L1599.41 1213.82 L1598.83 1213.82 L1598.24 1213.82 L1597.65 1213.82 L1597.07 1213.82 L1596.48 1213.82 L1595.89 1213.82 L1595.31 1213.82 L1594.72 1213.82 L1594.14 1213.82 L1593.55 1213.82 L1592.96 1213.82 L1592.38 1213.82 L1591.79 1213.82 L1591.2 1213.82 L1590.62 1213.82 L1590.03 1213.82 L1589.44 1213.82 L1588.86 1213.82 L1588.27 1213.82 L1587.68 1213.82 L1587.1 1213.82 L1586.51 1213.82 L1585.93 1213.82 L1585.34 1213.82 L1584.75 1213.82 L1584.17 1213.82 L1583.58 1213.82 L1582.99 1213.82 L1582.41 1213.82 L1581.82 1213.82 L1581.23 1213.82 L1580.65 1213.82 L1580.06 1213.82 L1579.47 1213.82 L1578.89 1213.82 L1578.3 1213.82 L1577.72 1213.82 L1577.13 1213.82 L1576.54 1213.82 L1575.96 1213.82 L1575.37 1213.82 L1574.78 1213.82 L1574.2 1213.82 L1573.61 1213.82 L1573.02 1213.82 L1572.44 1213.82 L1571.85 1213.82 L1571.27 1213.82 L1570.68 1213.82 L1570.09 1213.82 L1569.51 1213.82 L1568.92 1213.82 L1568.33 1213.82 L1567.75 1213.82 L1567.16 1213.82 L1566.57 1213.82 L1565.99 1213.82 L1565.4 1213.82 L1564.81 1213.82 L1564.23 1213.82 L1563.64 1213.82 L1563.06 1213.82 L1562.47 1213.82 L1561.88 1213.82 L1561.3 1213.82 L1560.71 1213.82 L1560.12 1213.82 L1559.54 1213.82 L1558.95 1213.82 L1558.36 1213.82 L1557.78 1213.82 L1557.19 1213.82 L1556.6 1213.82 L1556.02 1213.82 L1555.43 1213.82 L1554.85 1213.82 L1554.26 1213.82 L1553.67 1213.82 L1553.09 1213.82 L1552.5 1213.82 L1551.91 1213.82 L1551.33 1213.82 L1550.74 1213.82 L1550.15 1213.82 L1549.57 1213.82 L1548.98 1213.82 L1548.4 1213.82 L1547.81 1213.82 L1547.22 1213.82 L1546.64 1213.82 L1546.05 1213.82 L1545.46 1213.82 L1544.88 1213.82 L1544.29 1213.82 L1543.7 1213.82 L1543.12 1213.82 L1542.53 1213.82 L1541.94 1213.82 L1541.36 1213.82 L1540.77 1213.82 L1540.19 1213.82 L1539.6 1213.82 L1539.01 1213.82 L1538.43 1213.82 L1537.84 1213.82 L1537.25 1213.82 L1536.67 1213.82 L1536.08 1213.82 L1535.49 1213.82 L1534.91 1213.82 L1534.32 1213.82 L1533.73 1213.82 L1533.15 1213.82 L1532.56 1213.82 L1531.98 1213.82 L1531.39 1213.82 L1530.8 1213.82 L1530.22 1213.82 L1529.63 1213.82 L1529.04 1213.82 L1528.46 1213.82 L1527.87 1213.82 L1527.28 1213.82 L1526.7 1213.82 L1526.11 1213.82 L1525.52 1213.82 L1524.94 1213.82 L1524.35 1213.82 L1523.77 1213.82 L1523.18 1213.82 L1522.59 1213.82 L1522.01 1213.82 L1521.42 1213.82 L1520.83 1213.82 L1520.25 1213.82 L1519.66 1213.82 L1519.07 1213.82 L1518.49 1213.82 L1517.9 1213.82 L1517.32 1213.82 L1516.73 1213.82 L1516.14 1213.82 L1515.56 1213.82 L1514.97 1213.82 L1514.38 1213.82 L1513.8 1213.82 L1513.21 1213.82 L1512.62 1213.82 L1512.04 1213.82 L1511.45 1213.82 L1510.86 1213.82 L1510.28 1213.82 L1509.69 1213.82 L1509.11 1213.82 L1508.52 1213.82 L1507.93 1213.82 L1507.35 1213.82 L1506.76 1213.82 L1506.17 1213.82 L1505.59 1213.82 L1505 1213.82 L1504.41 1213.82 L1503.83 1213.82 L1503.24 1213.82 L1502.65 1213.82 L1502.07 1213.82 L1501.48 1213.82 L1500.9 1213.82 L1500.31 1213.82 L1499.72 1213.82 L1499.14 1213.82 L1498.55 1213.82 L1497.96 1213.82 L1497.38 1213.82 L1496.79 1213.82 L1496.2 1213.82 L1495.62 1213.82 L1495.03 1213.82 L1494.45 1213.82 L1493.86 1213.82 L1493.27 1213.82 L1492.69 1213.82 L1492.1 1213.82 L1491.51 1213.82 L1490.93 1213.82 L1490.34 1213.82 L1489.75 1213.82 L1489.17 1213.82 L1488.58 1213.82 L1487.99 1213.82 L1487.41 1213.82 L1486.82 1213.82 L1486.24 1213.82 L1485.65 1213.82 L1485.06 1213.82 L1484.48 1213.82 L1483.89 1213.82 L1483.3 1213.82 L1482.72 1213.82 L1482.13 1213.82 L1481.54 1213.82 L1480.96 1213.82 L1480.37 1213.82 L1479.78 1213.82 L1479.2 1213.82 L1478.61 1213.82 L1478.03 1213.82 L1477.44 1213.82 L1476.85 1213.82 L1476.27 1213.82 L1475.68 1213.82 L1475.09 1213.82 L1474.51 1213.82 L1473.92 1213.82 L1473.33 1213.82 L1472.75 1213.82 L1472.16 1213.82 L1471.57 1213.82 L1470.99 1213.82 L1470.4 1213.82 L1469.82 1213.82 L1469.23 1213.82 L1468.64 1213.82 L1468.06 1213.82 L1467.47 1213.82 L1466.88 1213.82 L1466.3 1213.82 L1465.71 1213.82 L1465.12 1213.82 L1464.54 1213.82 L1463.95 1213.82 L1463.37 1213.82 L1462.78 1213.82 L1462.19 1213.82 L1461.61 1213.82 L1461.02 1213.82 L1460.43 1213.82 L1459.85 1213.82 L1459.26 1213.82 L1458.67 1213.82 L1458.09 1213.82 L1457.5 1213.82 L1456.91 1213.82 L1456.33 1213.82 L1455.74 1213.82 L1455.16 1213.82 L1454.57 1213.82 L1453.98 1213.82 L1453.4 1213.82 L1452.81 1213.82 L1452.22 1213.82 L1451.64 1213.82 L1451.05 1213.82 L1450.46 1213.82 L1449.88 1213.82 L1449.29 1213.82 L1448.7 1213.82 L1448.12 1213.82 L1447.53 1213.82 L1446.95 1213.82 L1446.36 1213.82 L1445.77 1213.82 L1445.19 1213.82 L1444.6 1213.82 L1444.01 1213.82 L1443.43 1213.82 L1442.84 1213.82 L1442.25 1213.82 L1441.67 1213.82 L1441.08 1213.82 L1440.5 1213.82 L1439.91 1213.82 L1439.32 1213.82 L1438.74 1213.82 L1438.15 1213.82 L1437.56 1213.82 L1436.98 1213.82 L1436.39 1213.82 L1435.8 1213.82 L1435.22 1213.82 L1434.63 1213.82 L1434.04 1213.82 L1433.46 1213.82 L1432.87 1213.82 L1432.29 1213.82 L1431.7 1213.82 L1431.11 1213.82 L1430.53 1213.82 L1429.94 1213.82 L1429.35 1213.82 L1428.77 1213.82 L1428.18 1213.82 L1427.59 1213.82 L1427.01 1213.82 L1426.42 1213.82 L1425.83 1213.82 L1425.25 1213.82 L1424.66 1213.82 L1424.08 1213.82 L1423.49 1213.82 L1422.9 1213.82 L1422.32 1213.82 L1421.73 1213.82 L1421.14 1213.82 L1420.56 1213.82 L1419.97 1213.82 L1419.38 1213.82 L1418.8 1213.82 L1418.21 1213.82 L1417.63 1213.82 L1417.04 1213.82 L1416.45 1213.82 L1415.87 1213.82 L1415.28 1213.82 L1414.69 1213.82 L1414.11 1213.82 L1413.52 1213.82 L1412.93 1213.82 L1412.35 1213.82 L1411.76 1213.82 L1411.17 1213.82 L1410.59 1213.82 L1410 1213.82 L1409.42 1213.82 L1408.83 1213.82 L1408.24 1213.82 L1407.66 1213.82 L1407.07 1213.82 L1406.48 1213.82 L1405.9 1213.82 L1405.31 1213.82 L1404.72 1213.82 L1404.14 1213.82 L1403.55 1213.82 L1402.96 1213.82 L1402.38 1213.82 L1401.79 1213.82 L1401.21 1213.82 L1400.62 1213.82 L1400.03 1213.82 L1399.45 1213.82 L1398.86 1213.82 L1398.27 1213.82 L1397.69 1213.82 L1397.1 1213.82 L1396.51 1213.82 L1395.93 1213.82 L1395.34 1213.82 L1394.75 1213.82 L1394.17 1213.82 L1393.58 1213.82 L1393 1213.82 L1392.41 1213.82 L1391.82 1213.82 L1391.24 1213.82 L1390.65 1213.82 L1390.06 1213.82 L1389.48 1213.82 L1388.89 1213.82 L1388.3 1213.82 L1387.72 1213.82 L1387.13 1213.82 L1386.55 1213.82 L1385.96 1213.82 L1385.37 1213.82 L1384.79 1213.82 L1384.2 1213.82 L1383.61 1213.82 L1383.03 1213.82 L1382.44 1213.82 L1381.85 1213.82 L1381.27 1213.82 L1380.68 1213.82 L1380.09 1213.82 L1379.51 1213.82 L1378.92 1213.82 L1378.34 1213.82 L1377.75 1213.82 L1377.16 1213.82 L1376.58 1213.82 L1375.99 1213.82 L1375.4 1213.82 L1374.82 1213.82 L1374.23 1213.82 L1373.64 1213.82 L1373.06 1213.82 L1372.47 1213.82 L1371.88 1213.82 L1371.3 1213.82 L1370.71 1213.82 L1370.13 1213.82 L1369.54 1213.82 L1368.95 1213.82 L1368.37 1213.82 L1367.78 1213.82 L1367.19 1213.82 L1366.61 1213.82 L1366.02 1213.82 L1365.43 1213.82 L1364.85 1213.82 L1364.26 1213.82 L1363.68 1213.82 L1363.09 1213.82 L1362.5 1213.82 L1361.92 1213.82 L1361.33 1213.82 L1360.74 1213.82 L1360.16 1213.82 L1359.57 1213.82 L1358.98 1213.82 L1358.4 1213.82 L1357.81 1213.82 L1357.22 1213.82 L1356.64 1213.82 L1356.05 1213.82 L1355.47 1213.82 L1354.88 1213.82 L1354.29 1213.82 L1353.71 1213.82 L1353.12 1213.82 L1352.53 1213.82 L1351.95 1213.82 L1351.36 1213.82 L1350.77 1213.82 L1350.19 1213.82 L1349.6 1213.82 L1349.01 1213.82 L1348.43 1213.82 L1347.84 1213.82 L1347.26 1213.82 L1346.67 1213.82 L1346.08 1213.82 L1345.5 1213.82 L1344.91 1213.82 L1344.32 1213.82 L1343.74 1213.82 L1343.15 1213.82 L1342.56 1213.82 L1341.98 1213.82 L1341.39 1213.82 L1340.8 1213.82 L1340.22 1213.82 L1339.63 1213.82 L1339.05 1213.82 L1338.46 1213.82 L1337.87 1213.82 L1337.29 1213.82 L1336.7 1213.82 L1336.11 1213.82 L1335.53 1213.82 L1334.94 1213.82 L1334.35 1213.82 L1333.77 1213.82 L1333.18 1213.82 L1332.6 1213.82 L1332.01 1213.82 L1331.42 1213.82 L1330.84 1213.82 L1330.25 1213.82 L1329.66 1213.82 L1329.08 1213.82 L1328.49 1213.82 L1327.9 1213.82 L1327.32 1213.82 L1326.73 1213.82 L1326.14 1213.82 L1325.56 1213.82 L1324.97 1213.82 L1324.39 1213.82 L1323.8 1213.82 L1323.21 1213.82 L1322.63 1213.82 L1322.04 1213.82 L1321.45 1213.82 L1320.87 1213.82 L1320.28 1213.82 L1319.69 1213.82 L1319.11 1213.82 L1318.52 1213.82 L1317.93 1213.82 L1317.35 1213.82 L1316.76 1213.82 L1316.18 1213.82 L1315.59 1213.82 L1315 1213.82 L1314.42 1213.82 L1313.83 1213.82 L1313.24 1213.82 L1312.66 1213.82 L1312.07 1213.82 L1311.48 1213.82 L1310.9 1213.82 L1310.31 1213.82 L1309.73 1213.82 L1309.14 1213.82 L1308.55 1213.82 L1307.97 1213.82 L1307.38 1213.82 L1306.79 1213.82 L1306.21 1213.82 L1305.62 1213.82 L1305.03 1213.82 L1304.45 1213.82 L1303.86 1213.82 L1303.27 1213.82 L1302.69 1213.82 L1302.1 1213.82 L1301.52 1213.82 L1300.93 1213.82 L1300.34 1213.82 L1299.76 1213.82 L1299.17 1213.82 L1298.58 1213.82 L1298 1213.82 L1297.41 1213.82 L1296.82 1213.82 L1296.24 1213.82 L1295.65 1213.82 L1295.06 1213.82 L1294.48 1213.82 L1293.89 1213.82 L1293.31 1213.82 L1292.72 1213.82 L1292.13 1213.82 L1291.55 1213.82 L1290.96 1213.82 L1290.37 1213.82 L1289.79 1213.82 L1289.2 1213.82 L1288.61 1213.82 L1288.03 1213.82 L1287.44 1213.82 L1286.86 1213.82 L1286.27 1213.82 L1285.68 1213.82 L1285.1 1213.82 L1284.51 1213.82 L1283.92 1213.82 L1283.34 1213.82 L1282.75 1213.82 L1282.16 1213.82 L1281.58 1213.82 L1280.99 1213.82 L1280.4 1213.82 L1279.82 1213.82 L1279.23 1213.82 L1278.65 1213.82 L1278.06 1213.82 L1277.47 1213.82 L1276.89 1213.82 L1276.3 1213.82 L1275.71 1213.82 L1275.13 1213.82 L1274.54 1213.82 L1273.95 1213.82 L1273.37 1213.82 L1272.78 1213.82 L1272.19 1213.82 L1271.61 1213.82 L1271.02 1213.82 L1270.44 1213.82 L1269.85 1213.82 L1269.26 1213.82 L1268.68 1213.82 L1268.09 1213.82 L1267.5 1213.82 L1266.92 1213.82 L1266.33 1213.82 L1265.74 1213.82 L1265.16 1213.82 L1264.57 1213.82 L1263.98 1213.82 L1263.4 1213.82 L1262.81 1213.82 L1262.23 1213.82 L1261.64 1213.82 L1261.05 1213.82 L1260.47 1213.82 L1259.88 1213.82 L1259.29 1213.82 L1258.71 1213.82 L1258.12 1213.82 L1257.53 1213.82 L1256.95 1213.82 L1256.36 1213.82 L1255.78 1213.82 L1255.19 1213.82 L1254.6 1213.82 L1254.02 1213.82 L1253.43 1213.82 L1252.84 1213.82 L1252.26 1213.82 L1251.67 1213.82 L1251.08 1213.82 L1250.5 1213.82 L1249.91 1213.82 L1249.32 1213.82 L1248.74 1213.82 L1248.15 1213.82 L1247.57 1213.82 L1246.98 1213.82 L1246.39 1213.82 L1245.81 1213.82 L1245.22 1213.82 L1244.63 1213.82 L1244.05 1213.82 L1243.46 1213.82 L1242.87 1213.82 L1242.29 1213.82 L1241.7 1213.82 L1241.11 1213.82 L1240.53 1213.82 L1239.94 1213.82 L1239.36 1213.82 L1238.77 1213.82 L1238.18 1213.82 L1237.6 1213.82 L1237.01 1213.82 L1236.42 1213.82 L1235.84 1213.82 L1235.25 1213.82 L1234.66 1213.82 L1234.08 1213.82 L1233.49 1213.82 L1232.91 1213.82 L1232.32 1213.82 L1231.73 1213.82 L1231.15 1213.82 L1230.56 1213.82 L1229.97 1213.82 L1229.39 1213.82 L1228.8 1213.82 L1228.21 1213.82 L1227.63 1213.82 L1227.04 1213.82 L1226.45 1213.82 L1225.87 1213.82 L1225.28 1213.82 L1224.7 1213.82 L1224.11 1213.82 L1223.52 1213.82 L1222.94 1213.82 L1222.35 1213.82 L1221.76 1213.82 L1221.18 1213.82 L1220.59 1213.82 L1220 1213.82 L1219.42 1213.82 L1218.83 1213.82 L1218.24 1213.82 L1217.66 1213.82 L1217.07 1213.82 L1216.49 1213.82 L1215.9 1213.82 L1215.31 1213.82 L1214.73 1213.82 L1214.14 1213.82 L1213.55 1213.82 L1212.97 1213.82 L1212.38 1213.82 L1211.79 1213.82 L1211.21 1213.82 L1210.62 1213.82 L1210.03 1213.82 L1209.45 1213.82 L1208.86 1213.82 L1208.28 1213.82 L1207.69 1213.82 L1207.1 1213.82 L1206.52 1213.82 L1205.93 1213.82 L1205.34 1213.82 L1204.76 1213.82 L1204.17 1213.82 L1203.58 1213.82 L1203 1213.82 L1202.41 1213.82 L1201.83 1213.82 L1201.24 1213.82 L1200.65 1213.82 L1200.07 1213.82 L1199.48 1213.82 L1198.89 1213.82 L1198.31 1213.82 L1197.72 1213.82 L1197.13 1213.82 L1196.55 1213.82 L1195.96 1213.82 L1195.37 1213.82 L1194.79 1213.82 L1194.2 1213.82 L1193.62 1213.82 L1193.03 1213.82 L1192.44 1213.82 L1191.86 1213.82 L1191.27 1213.82 L1190.68 1213.82 L1190.1 1213.82 L1189.51 1213.82 L1188.92 1213.82 L1188.34 1213.82 L1187.75 1213.82 L1187.16 1213.82 L1186.58 1213.82 L1185.99 1213.82 L1185.41 1213.82 L1184.82 1213.82 L1184.23 1213.82 L1183.65 1213.82 L1183.06 1213.82 L1182.47 1213.82 L1181.89 1213.82 L1181.3 1213.82 L1180.71 1213.82 L1180.13 1213.82 L1179.54 1213.82 L1178.96 1213.82 L1178.37 1213.82 L1177.78 1213.82 L1177.2 1213.82 L1176.61 1213.82 L1176.02 1213.82 L1175.44 1213.82 L1174.85 1213.82 L1174.26 1213.82 L1173.68 1213.82 L1173.09 1213.82 L1172.5 1213.82 L1171.92 1213.82 L1171.33 1213.82 L1170.75 1213.82 L1170.16 1213.82 L1169.57 1213.82 L1168.99 1213.82 L1168.4 1213.82 L1167.81 1213.82 L1167.23 1213.82 L1166.64 1213.82 L1166.05 1213.82 L1165.47 1213.82 L1164.88 1213.82 L1164.29 1213.82 L1163.71 1213.82 L1163.12 1213.82 L1162.54 1213.82 L1161.95 1213.82 L1161.36 1213.82 L1160.78 1213.82 L1160.19 1213.82 L1159.6 1213.82 L1159.02 1213.82 L1158.43 1213.82 L1157.84 1213.82 L1157.26 1213.82 L1156.67 1213.82 L1156.09 1213.82 L1155.5 1213.82 L1154.91 1213.82 L1154.33 1213.82 L1153.74 1213.82 L1153.15 1213.82 L1152.57 1213.82 L1151.98 1213.82 L1151.39 1213.82 L1150.81 1213.82 L1150.22 1213.82 L1149.63 1213.82 L1149.05 1213.82 L1148.46 1213.82 L1147.88 1213.82 L1147.29 1213.82 L1146.7 1213.82 L1146.12 1213.82 L1145.53 1213.82 L1144.94 1213.82 L1144.36 1213.82 L1143.77 1213.82 L1143.18 1213.82 L1142.6 1213.82 L1142.01 1213.82 L1141.42 1213.82 L1140.84 1213.82 L1140.25 1213.82 L1139.67 1213.82 L1139.08 1213.82 L1138.49 1213.82 L1137.91 1213.82 L1137.32 1213.82 L1136.73 1213.82 L1136.15 1213.82 L1135.56 1213.82 L1134.97 1213.82 L1134.39 1213.82 L1133.8 1213.82 L1133.21 1213.82 L1132.63 1213.82 L1132.04 1213.82 L1131.46 1213.82 L1130.87 1213.82 L1130.28 1213.82 L1129.7 1213.82 L1129.11 1213.82 L1128.52 1213.82 L1127.94 1213.82 L1127.35 1213.82 L1126.76 1213.82 L1126.18 1213.82 L1125.59 1213.82 L1125.01 1213.82 L1124.42 1213.82 L1123.83 1213.82 L1123.25 1213.82 L1122.66 1213.82 L1122.07 1213.82 L1121.49 1213.82 L1120.9 1213.82 L1120.31 1213.82 L1119.73 1213.82 L1119.14 1213.82 L1118.55 1213.82 L1117.97 1213.82 L1117.38 1213.82 L1116.8 1213.82 L1116.21 1213.82 L1115.62 1213.82 L1115.04 1213.82 L1114.45 1213.82 L1113.86 1213.82 L1113.28 1213.82 L1112.69 1213.82 L1112.1 1213.82 L1111.52 1213.82 L1110.93 1213.82 L1110.34 1213.82 L1109.76 1213.82 L1109.17 1213.82 L1108.59 1213.82 L1108 1213.82 L1107.41 1213.82 L1106.83 1213.82 L1106.24 1213.82 L1105.65 1213.82 L1105.07 1213.82 L1104.48 1213.82 L1103.89 1213.82 L1103.31 1213.82 L1102.72 1213.82 L1102.14 1213.82 L1101.55 1213.82 L1100.96 1213.82 L1100.38 1213.82 L1099.79 1213.82 L1099.2 1213.82 L1098.62 1213.82 L1098.03 1213.82 L1097.44 1213.82 L1096.86 1213.82 L1096.27 1213.82 L1095.68 1213.82 L1095.1 1213.82 L1094.51 1213.82 L1093.93 1213.82 L1093.34 1213.82 L1092.75 1213.82 L1092.17 1213.82 L1091.58 1213.82 L1090.99 1213.82 L1090.41 1213.82 L1089.82 1213.82 L1089.23 1213.82 L1088.65 1213.82 L1088.06 1213.82 L1087.47 1213.82 L1086.89 1213.82 L1086.3 1213.82 L1085.72 1213.82 L1085.13 1213.82 L1084.54 1213.82 L1083.96 1213.82 L1083.37 1213.82 L1082.78 1213.82 L1082.2 1213.82 L1081.61 1213.82 L1081.02 1213.82 L1080.44 1213.82 L1079.85 1213.82 L1079.26 1213.82 L1078.68 1213.82 L1078.09 1213.82 L1077.51 1213.82 L1076.92 1213.82 L1076.33 1213.82 L1075.75 1213.82 L1075.16 1213.82 L1074.57 1213.82 L1073.99 1213.82 L1073.4 1213.82 L1072.81 1213.82 L1072.23 1213.82 L1071.64 1213.82 L1071.06 1213.82 L1070.47 1213.82 L1069.88 1213.82 L1069.3 1213.82 L1068.71 1213.82 L1068.12 1213.82 L1067.54 1213.82 L1066.95 1213.82 L1066.36 1213.82 L1065.78 1213.82 L1065.19 1213.82 L1064.6 1213.82 L1064.02 1213.82 L1063.43 1213.82 L1062.85 1213.82 L1062.26 1213.82 L1061.67 1213.82 L1061.09 1213.82 L1060.5 1213.82 L1059.91 1213.82 L1059.33 1213.82 L1058.74 1213.82 L1058.15 1213.82 L1057.57 1213.82 L1056.98 1213.82 L1056.39 1213.82 L1055.81 1213.82 L1055.22 1213.82 L1054.64 1213.82 L1054.05 1213.82 L1053.46 1213.82 L1052.88 1213.82 L1052.29 1213.82 L1051.7 1213.82 L1051.12 1213.82 L1050.53 1213.82 L1049.94 1213.82 L1049.36 1213.82 L1048.77 1213.82 L1048.19 1213.82 L1047.6 1213.82 L1047.01 1213.82 L1046.43 1213.82 L1045.84 1213.82 L1045.25 1213.82 L1044.67 1213.82 L1044.08 1213.82 L1043.49 1213.82 L1042.91 1213.82 L1042.32 1213.82 L1041.73 1213.82 L1041.15 1213.82 L1040.56 1213.82 L1039.98 1213.82 L1039.39 1213.82 L1038.8 1213.82 L1038.22 1213.82 L1037.63 1213.82 L1037.04 1213.82 L1036.46 1213.82 L1035.87 1213.82 L1035.28 1213.82 L1034.7 1213.82 L1034.11 1213.82 L1033.52 1213.82 L1032.94 1213.82 L1032.35 1213.82 L1031.77 1213.82 L1031.18 1213.82 L1030.59 1213.82 L1030.01 1213.82 L1029.42 1213.82 L1028.83 1213.82 L1028.25 1213.82 L1027.66 1213.82 L1027.07 1213.82 L1026.49 1213.82 L1025.9 1213.82 L1025.32 1213.82 L1024.73 1213.82 L1024.14 1213.82 L1023.56 1213.82 L1022.97 1213.82 L1022.38 1213.82 L1021.8 1213.82 L1021.21 1213.82 L1020.62 1213.82 L1020.04 1213.82 L1019.45 1213.82 L1018.86 1213.82 L1018.28 1213.82 L1017.69 1213.82 L1017.11 1213.82 L1016.52 1213.82 L1015.93 1213.82 L1015.35 1213.82 L1014.76 1213.82 L1014.17 1213.82 L1013.59 1213.82 L1013 1213.82 L1012.41 1213.82 L1011.83 1213.82 L1011.24 1213.82 L1010.65 1213.82 L1010.07 1213.82 L1009.48 1213.82 L1008.9 1213.82 L1008.31 1213.82 L1007.72 1213.82 L1007.14 1213.82 L1006.55 1213.82 L1005.96 1213.82 L1005.38 1213.82 L1004.79 1213.82 L1004.2 1213.82 L1003.62 1213.82 L1003.03 1213.82 L1002.44 1213.82 L1001.86 1213.82 L1001.27 1213.82 L1000.69 1213.82 L1000.1 1213.82 L999.513 1213.82 L998.926 1213.82 L998.34 1213.82 L997.754 1213.82 L997.167 1213.82 L996.581 1213.82 L995.994 1213.82 L995.408 1213.82 L994.822 1213.82 L994.235 1213.82 L993.649 1213.82 L993.062 1213.82 L992.476 1213.82 L991.889 1213.82 L991.303 1213.82 L990.717 1213.82 L990.13 1213.82 L989.544 1213.82 L988.957 1213.82 L988.371 1213.82 L987.785 1213.82 L987.198 1213.82 L986.612 1213.82 L986.025 1213.82  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.24 986.612,1214.24 987.198,1214.24 987.785,1214.24 988.371,1214.24 988.957,1214.24 989.544,1214.24 990.13,1214.24 990.717,1214.24 991.303,1214.24 991.889,1214.24 992.476,1214.24 993.062,1214.24 993.649,1214.24 994.235,1214.24 994.822,1214.24 995.408,1214.24 995.994,1214.24 996.581,1214.24 997.167,1214.24 997.754,1214.24 998.34,1214.24 998.926,1214.24 999.513,1214.24 1000.1,1214.24 1000.69,1214.24 1001.27,1214.24 1001.86,1214.24 1002.44,1214.24 1003.03,1214.24 1003.62,1214.24 1004.2,1214.24 1004.79,1214.24 1005.38,1214.24 1005.96,1214.24 1006.55,1214.24 1007.14,1214.24 1007.72,1214.24 1008.31,1214.24 1008.9,1214.24 1009.48,1214.24 1010.07,1214.24 1010.65,1214.24 1011.24,1214.24 1011.83,1214.24 1012.41,1214.24 1013,1214.24 1013.59,1214.24 1014.17,1214.24 1014.76,1214.24 1015.35,1214.24 1015.93,1214.24 1016.52,1214.24 1017.11,1214.24 1017.69,1214.24 1018.28,1214.24 1018.86,1214.24 1019.45,1214.24 1020.04,1214.24 1020.62,1214.24 1021.21,1214.24 1021.8,1214.24 1022.38,1214.24 1022.97,1214.24 1023.56,1214.24 1024.14,1214.24 1024.73,1214.24 1025.32,1214.24 1025.9,1214.24 1026.49,1214.24 1027.07,1214.24 1027.66,1214.24 1028.25,1214.24 1028.83,1214.24 1029.42,1214.24 1030.01,1214.24 1030.59,1214.24 1031.18,1214.24 1031.77,1214.24 1032.35,1214.24 1032.94,1214.24 1033.52,1214.24 1034.11,1214.24 1034.7,1214.24 1035.28,1214.24 1035.87,1214.24 1036.46,1214.24 1037.04,1214.24 1037.63,1214.24 1038.22,1214.24 1038.8,1214.24 1039.39,1214.24 1039.98,1214.24 1040.56,1214.24 1041.15,1214.24 1041.73,1214.24 1042.32,1214.24 1042.91,1214.24 1043.49,1214.24 1044.08,1214.24 1044.67,1214.24 1045.25,1214.24 1045.84,1214.24 1046.43,1214.24 1047.01,1214.24 1047.6,1214.24 1048.19,1214.24 1048.77,1214.24 1049.36,1214.24 1049.94,1214.24 1050.53,1214.24 1051.12,1214.24 1051.7,1214.24 1052.29,1214.24 1052.88,1214.24 1053.46,1214.24 1054.05,1214.24 1054.64,1214.24 1055.22,1214.24 1055.81,1214.24 1056.39,1214.24 1056.98,1214.24 1057.57,1214.24 1058.15,1214.24 1058.74,1214.24 1059.33,1214.24 1059.91,1214.24 1060.5,1214.24 1061.09,1214.24 1061.67,1214.24 1062.26,1214.24 1062.85,1214.24 1063.43,1214.24 1064.02,1214.24 1064.6,1214.24 1065.19,1214.24 1065.78,1214.24 1066.36,1214.24 1066.95,1214.24 1067.54,1214.24 1068.12,1214.24 1068.71,1214.24 1069.3,1214.24 1069.88,1214.24 1070.47,1214.24 1071.06,1214.24 1071.64,1214.24 1072.23,1214.24 1072.81,1214.24 1073.4,1214.24 1073.99,1214.24 1074.57,1214.24 1075.16,1214.24 1075.75,1214.24 1076.33,1214.24 1076.92,1214.24 1077.51,1214.24 1078.09,1214.24 1078.68,1214.24 1079.26,1214.24 1079.85,1214.24 1080.44,1214.24 1081.02,1214.24 1081.61,1214.24 1082.2,1214.24 1082.78,1214.24 1083.37,1214.24 1083.96,1214.24 1084.54,1214.24 1085.13,1214.24 1085.72,1214.24 1086.3,1214.24 1086.89,1214.24 1087.47,1214.24 1088.06,1214.24 1088.65,1214.24 1089.23,1214.24 1089.82,1214.24 1090.41,1214.24 1090.99,1214.24 1091.58,1214.24 1092.17,1214.24 1092.75,1214.24 1093.34,1214.24 1093.93,1214.24 1094.51,1214.24 1095.1,1214.24 1095.68,1214.24 1096.27,1214.24 1096.86,1214.24 1097.44,1214.24 1098.03,1214.24 1098.62,1214.24 1099.2,1214.24 1099.79,1214.24 1100.38,1214.24 1100.96,1214.24 1101.55,1214.24 1102.14,1214.24 1102.72,1214.24 1103.31,1214.24 1103.89,1214.24 1104.48,1214.24 1105.07,1214.24 1105.65,1214.24 1106.24,1214.24 1106.83,1214.24 1107.41,1214.24 1108,1214.24 1108.59,1214.24 1109.17,1214.24 1109.76,1214.24 1110.34,1214.24 1110.93,1214.24 1111.52,1214.24 1112.1,1214.24 1112.69,1214.24 1113.28,1214.24 1113.86,1214.24 1114.45,1214.24 1115.04,1214.24 1115.62,1214.24 1116.21,1214.24 1116.8,1214.24 1117.38,1214.24 1117.97,1214.24 1118.55,1214.24 1119.14,1214.24 1119.73,1214.24 1120.31,1214.24 1120.9,1214.24 1121.49,1214.24 1122.07,1214.24 1122.66,1214.24 1123.25,1214.24 1123.83,1214.24 1124.42,1214.24 1125.01,1214.24 1125.59,1214.24 1126.18,1214.24 1126.76,1214.24 1127.35,1214.24 1127.94,1214.24 1128.52,1214.24 1129.11,1214.24 1129.7,1214.24 1130.28,1214.24 1130.87,1214.24 1131.46,1214.24 1132.04,1214.24 1132.63,1214.24 1133.21,1214.24 1133.8,1214.24 1134.39,1214.24 1134.97,1214.24 1135.56,1214.24 1136.15,1214.24 1136.73,1214.24 1137.32,1214.24 1137.91,1214.24 1138.49,1214.24 1139.08,1214.24 1139.67,1214.24 1140.25,1214.24 1140.84,1214.24 1141.42,1214.24 1142.01,1214.24 1142.6,1214.24 1143.18,1214.24 1143.77,1214.24 1144.36,1214.24 1144.94,1214.24 1145.53,1214.24 1146.12,1214.24 1146.7,1214.24 1147.29,1214.24 1147.88,1214.24 1148.46,1214.24 1149.05,1214.24 1149.63,1214.24 1150.22,1214.24 1150.81,1214.24 1151.39,1214.24 1151.98,1214.24 1152.57,1214.24 1153.15,1214.24 1153.74,1214.24 1154.33,1214.24 1154.91,1214.24 1155.5,1214.24 1156.09,1214.24 1156.67,1214.24 1157.26,1214.24 1157.84,1214.24 1158.43,1214.24 1159.02,1214.24 1159.6,1214.24 1160.19,1214.24 1160.78,1214.24 1161.36,1214.24 1161.95,1214.24 1162.54,1214.24 1163.12,1214.24 1163.71,1214.24 1164.29,1214.24 1164.88,1214.24 1165.47,1214.24 1166.05,1214.24 1166.64,1214.24 1167.23,1214.24 1167.81,1214.24 1168.4,1214.24 1168.99,1214.24 1169.57,1214.24 1170.16,1214.24 1170.75,1214.24 1171.33,1214.24 1171.92,1214.24 1172.5,1214.24 1173.09,1214.24 1173.68,1214.24 1174.26,1214.24 1174.85,1214.24 1175.44,1214.24 1176.02,1214.24 1176.61,1214.24 1177.2,1214.24 1177.78,1214.24 1178.37,1214.24 1178.96,1214.24 1179.54,1214.24 1180.13,1214.24 1180.71,1214.24 1181.3,1214.24 1181.89,1214.24 1182.47,1214.24 1183.06,1214.24 1183.65,1214.24 1184.23,1214.24 1184.82,1214.24 1185.41,1214.24 1185.99,1214.24 1186.58,1214.24 1187.16,1214.24 1187.75,1214.24 1188.34,1214.24 1188.92,1214.24 1189.51,1214.24 1190.1,1214.24 1190.68,1214.24 1191.27,1214.24 1191.86,1214.24 1192.44,1214.24 1193.03,1214.24 1193.62,1214.24 1194.2,1214.24 1194.79,1214.24 1195.37,1214.24 1195.96,1214.24 1196.55,1214.24 1197.13,1214.24 1197.72,1214.24 1198.31,1214.24 1198.89,1214.24 1199.48,1214.24 1200.07,1214.24 1200.65,1214.24 1201.24,1214.24 1201.83,1214.24 1202.41,1214.24 1203,1214.24 1203.58,1214.24 1204.17,1214.24 1204.76,1214.24 1205.34,1214.24 1205.93,1214.24 1206.52,1214.24 1207.1,1214.24 1207.69,1214.24 1208.28,1214.24 1208.86,1214.24 1209.45,1214.24 1210.03,1214.24 1210.62,1214.24 1211.21,1214.24 1211.79,1214.24 1212.38,1214.24 1212.97,1214.24 1213.55,1214.24 1214.14,1214.24 1214.73,1214.24 1215.31,1214.24 1215.9,1214.24 1216.49,1214.24 1217.07,1214.24 1217.66,1214.24 1218.24,1214.24 1218.83,1214.24 1219.42,1214.24 1220,1214.24 1220.59,1214.24 1221.18,1214.24 1221.76,1214.24 1222.35,1214.24 1222.94,1214.24 1223.52,1214.24 1224.11,1214.24 1224.7,1214.24 1225.28,1214.24 1225.87,1214.24 1226.45,1214.24 1227.04,1214.24 1227.63,1214.24 1228.21,1214.24 1228.8,1214.24 1229.39,1214.24 1229.97,1214.24 1230.56,1214.24 1231.15,1214.24 1231.73,1214.24 1232.32,1214.24 1232.91,1214.24 1233.49,1214.24 1234.08,1214.24 1234.66,1214.24 1235.25,1214.24 1235.84,1214.24 1236.42,1214.24 1237.01,1214.24 1237.6,1214.24 1238.18,1214.24 1238.77,1214.24 1239.36,1214.24 1239.94,1214.24 1240.53,1214.24 1241.11,1214.24 1241.7,1214.24 1242.29,1214.24 1242.87,1214.24 1243.46,1214.24 1244.05,1214.24 1244.63,1214.24 1245.22,1214.24 1245.81,1214.24 1246.39,1214.24 1246.98,1214.24 1247.57,1214.24 1248.15,1214.24 1248.74,1214.24 1249.32,1214.24 1249.91,1214.24 1250.5,1214.24 1251.08,1214.24 1251.67,1214.24 1252.26,1214.24 1252.84,1214.24 1253.43,1214.24 1254.02,1214.24 1254.6,1214.24 1255.19,1214.24 1255.78,1214.24 1256.36,1214.24 1256.95,1214.24 1257.53,1214.24 1258.12,1214.24 1258.71,1214.24 1259.29,1214.24 1259.88,1214.24 1260.47,1214.24 1261.05,1214.24 1261.64,1214.24 1262.23,1214.24 1262.81,1214.24 1263.4,1214.24 1263.98,1214.24 1264.57,1214.24 1265.16,1214.24 1265.74,1214.24 1266.33,1214.24 1266.92,1214.24 1267.5,1214.24 1268.09,1214.24 1268.68,1214.24 1269.26,1214.24 1269.85,1214.24 1270.44,1214.24 1271.02,1214.24 1271.61,1214.24 1272.19,1214.24 1272.78,1214.24 1273.37,1214.24 1273.95,1214.24 1274.54,1214.24 1275.13,1214.24 1275.71,1214.24 1276.3,1214.24 1276.89,1214.24 1277.47,1214.24 1278.06,1214.24 1278.65,1214.24 1279.23,1214.24 1279.82,1214.24 1280.4,1214.24 1280.99,1214.24 1281.58,1214.24 1282.16,1214.24 1282.75,1214.24 1283.34,1214.24 1283.92,1214.24 1284.51,1214.24 1285.1,1214.24 1285.68,1214.24 1286.27,1214.24 1286.86,1214.24 1287.44,1214.24 1288.03,1214.24 1288.61,1214.24 1289.2,1214.24 1289.79,1214.24 1290.37,1214.24 1290.96,1214.24 1291.55,1214.24 1292.13,1214.24 1292.72,1214.24 1293.31,1214.24 1293.89,1214.24 1294.48,1214.24 1295.06,1214.24 1295.65,1214.24 1296.24,1214.24 1296.82,1214.24 1297.41,1214.24 1298,1214.24 1298.58,1214.24 1299.17,1214.24 1299.76,1214.24 1300.34,1214.24 1300.93,1214.24 1301.52,1214.24 1302.1,1214.24 1302.69,1214.24 1303.27,1214.24 1303.86,1214.24 1304.45,1214.24 1305.03,1214.24 1305.62,1214.24 1306.21,1214.24 1306.79,1214.24 1307.38,1214.24 1307.97,1214.24 1308.55,1214.24 1309.14,1214.24 1309.73,1214.24 1310.31,1214.24 1310.9,1214.24 1311.48,1214.24 1312.07,1214.24 1312.66,1214.24 1313.24,1214.24 1313.83,1214.24 1314.42,1214.24 1315,1214.24 1315.59,1214.24 1316.18,1214.24 1316.76,1214.24 1317.35,1214.24 1317.93,1214.24 1318.52,1214.24 1319.11,1214.24 1319.69,1214.24 1320.28,1214.24 1320.87,1214.24 1321.45,1214.24 1322.04,1214.24 1322.63,1214.24 1323.21,1214.24 1323.8,1214.24 1324.39,1214.24 1324.97,1214.24 1325.56,1214.24 1326.14,1214.24 1326.73,1214.24 1327.32,1214.24 1327.9,1214.24 1328.49,1214.24 1329.08,1214.24 1329.66,1214.24 1330.25,1214.24 1330.84,1214.24 1331.42,1214.24 1332.01,1214.24 1332.6,1214.24 1333.18,1214.24 1333.77,1214.24 1334.35,1214.24 1334.94,1214.24 1335.53,1214.24 1336.11,1214.24 1336.7,1214.24 1337.29,1214.24 1337.87,1214.24 1338.46,1214.24 1339.05,1214.24 1339.63,1214.24 1340.22,1214.24 1340.8,1214.24 1341.39,1214.24 1341.98,1214.24 1342.56,1214.24 1343.15,1214.24 1343.74,1214.24 1344.32,1214.24 1344.91,1214.24 1345.5,1214.24 1346.08,1214.24 1346.67,1214.24 1347.26,1214.24 1347.84,1214.24 1348.43,1214.24 1349.01,1214.24 1349.6,1214.24 1350.19,1214.24 1350.77,1214.24 1351.36,1214.24 1351.95,1214.24 1352.53,1214.24 1353.12,1214.24 1353.71,1214.24 1354.29,1214.24 1354.88,1214.24 1355.47,1214.24 1356.05,1214.24 1356.64,1214.24 1357.22,1214.24 1357.81,1214.24 1358.4,1214.24 1358.98,1214.24 1359.57,1214.24 1360.16,1214.24 1360.74,1214.24 1361.33,1214.24 1361.92,1214.24 1362.5,1214.24 1363.09,1214.24 1363.68,1214.24 1364.26,1214.24 1364.85,1214.24 1365.43,1214.24 1366.02,1214.24 1366.61,1214.24 1367.19,1214.24 1367.78,1214.24 1368.37,1214.24 1368.95,1214.24 1369.54,1214.24 1370.13,1214.24 1370.71,1214.24 1371.3,1214.24 1371.88,1214.24 1372.47,1214.24 1373.06,1214.24 1373.64,1214.24 1374.23,1214.24 1374.82,1214.24 1375.4,1214.24 1375.99,1214.24 1376.58,1214.24 1377.16,1214.24 1377.75,1214.24 1378.34,1214.24 1378.92,1214.24 1379.51,1214.24 1380.09,1214.24 1380.68,1214.24 1381.27,1214.24 1381.85,1214.24 1382.44,1214.24 1383.03,1214.24 1383.61,1214.24 1384.2,1214.24 1384.79,1214.24 1385.37,1214.24 1385.96,1214.24 1386.55,1214.24 1387.13,1214.24 1387.72,1214.24 1388.3,1214.24 1388.89,1214.24 1389.48,1214.24 1390.06,1214.24 1390.65,1214.24 1391.24,1214.24 1391.82,1214.24 1392.41,1214.24 1393,1214.24 1393.58,1214.24 1394.17,1214.24 1394.75,1214.24 1395.34,1214.24 1395.93,1214.24 1396.51,1214.24 1397.1,1214.24 1397.69,1214.24 1398.27,1214.24 1398.86,1214.24 1399.45,1214.24 1400.03,1214.24 1400.62,1214.24 1401.21,1214.24 1401.79,1214.24 1402.38,1214.24 1402.96,1214.24 1403.55,1214.24 1404.14,1214.24 1404.72,1214.24 1405.31,1214.24 1405.9,1214.24 1406.48,1214.24 1407.07,1214.24 1407.66,1214.24 1408.24,1214.24 1408.83,1214.24 1409.42,1214.24 1410,1214.24 1410.59,1214.24 1411.17,1214.24 1411.76,1214.24 1412.35,1214.24 1412.93,1214.24 1413.52,1214.24 1414.11,1214.24 1414.69,1214.24 1415.28,1214.24 1415.87,1214.24 1416.45,1214.24 1417.04,1214.24 1417.63,1214.24 1418.21,1214.24 1418.8,1214.24 1419.38,1214.24 1419.97,1214.24 1420.56,1214.24 1421.14,1214.24 1421.73,1214.24 1422.32,1214.24 1422.9,1214.24 1423.49,1214.24 1424.08,1214.24 1424.66,1214.24 1425.25,1214.24 1425.83,1214.24 1426.42,1214.24 1427.01,1214.24 1427.59,1214.24 1428.18,1214.24 1428.77,1214.24 1429.35,1214.24 1429.94,1214.24 1430.53,1214.24 1431.11,1214.24 1431.7,1214.24 1432.29,1214.24 1432.87,1214.24 1433.46,1214.24 1434.04,1214.24 1434.63,1214.24 1435.22,1214.24 1435.8,1214.24 1436.39,1214.24 1436.98,1214.24 1437.56,1214.24 1438.15,1214.24 1438.74,1214.24 1439.32,1214.24 1439.91,1214.24 1440.5,1214.24 1441.08,1214.24 1441.67,1214.24 1442.25,1214.24 1442.84,1214.24 1443.43,1214.24 1444.01,1214.24 1444.6,1214.24 1445.19,1214.24 1445.77,1214.24 1446.36,1214.24 1446.95,1214.24 1447.53,1214.24 1448.12,1214.24 1448.7,1214.24 1449.29,1214.24 1449.88,1214.24 1450.46,1214.24 1451.05,1214.24 1451.64,1214.24 1452.22,1214.24 1452.81,1214.24 1453.4,1214.24 1453.98,1214.24 1454.57,1214.24 1455.16,1214.24 1455.74,1214.24 1456.33,1214.24 1456.91,1214.24 1457.5,1214.24 1458.09,1214.24 1458.67,1214.24 1459.26,1214.24 1459.85,1214.24 1460.43,1214.24 1461.02,1214.24 1461.61,1214.24 1462.19,1214.24 1462.78,1214.24 1463.37,1214.24 1463.95,1214.24 1464.54,1214.24 1465.12,1214.24 1465.71,1214.24 1466.3,1214.24 1466.88,1214.24 1467.47,1214.24 1468.06,1214.24 1468.64,1214.24 1469.23,1214.24 1469.82,1214.24 1470.4,1214.24 1470.99,1214.24 1471.57,1214.24 1472.16,1214.24 1472.75,1214.24 1473.33,1214.24 1473.92,1214.24 1474.51,1214.24 1475.09,1214.24 1475.68,1214.24 1476.27,1214.24 1476.85,1214.24 1477.44,1214.24 1478.03,1214.24 1478.61,1214.24 1479.2,1214.24 1479.78,1214.24 1480.37,1214.24 1480.96,1214.24 1481.54,1214.24 1482.13,1214.24 1482.72,1214.24 1483.3,1214.24 1483.89,1214.24 1484.48,1214.24 1485.06,1214.24 1485.65,1214.24 1486.24,1214.24 1486.82,1214.24 1487.41,1214.24 1487.99,1214.24 1488.58,1214.24 1489.17,1214.24 1489.75,1214.24 1490.34,1214.24 1490.93,1214.24 1491.51,1214.24 1492.1,1214.24 1492.69,1214.24 1493.27,1214.24 1493.86,1214.24 1494.45,1214.24 1495.03,1214.24 1495.62,1214.24 1496.2,1214.24 1496.79,1214.24 1497.38,1214.24 1497.96,1214.24 1498.55,1214.24 1499.14,1214.24 1499.72,1214.24 1500.31,1214.24 1500.9,1214.24 1501.48,1214.24 1502.07,1214.24 1502.65,1214.24 1503.24,1214.24 1503.83,1214.24 1504.41,1214.24 1505,1214.24 1505.59,1214.24 1506.17,1214.24 1506.76,1214.24 1507.35,1214.24 1507.93,1214.24 1508.52,1214.24 1509.11,1214.24 1509.69,1214.24 1510.28,1214.24 1510.86,1214.24 1511.45,1214.24 1512.04,1214.24 1512.62,1214.24 1513.21,1214.24 1513.8,1214.24 1514.38,1214.24 1514.97,1214.24 1515.56,1214.24 1516.14,1214.24 1516.73,1214.24 1517.32,1214.24 1517.9,1214.24 1518.49,1214.24 1519.07,1214.24 1519.66,1214.24 1520.25,1214.24 1520.83,1214.24 1521.42,1214.24 1522.01,1214.24 1522.59,1214.24 1523.18,1214.24 1523.77,1214.24 1524.35,1214.24 1524.94,1214.24 1525.52,1214.24 1526.11,1214.24 1526.7,1214.24 1527.28,1214.24 1527.87,1214.24 1528.46,1214.24 1529.04,1214.24 1529.63,1214.24 1530.22,1214.24 1530.8,1214.24 1531.39,1214.24 1531.98,1214.24 1532.56,1214.24 1533.15,1214.24 1533.73,1214.24 1534.32,1214.24 1534.91,1214.24 1535.49,1214.24 1536.08,1214.24 1536.67,1214.24 1537.25,1214.24 1537.84,1214.24 1538.43,1214.24 1539.01,1214.24 1539.6,1214.24 1540.19,1214.24 1540.77,1214.24 1541.36,1214.24 1541.94,1214.24 1542.53,1214.24 1543.12,1214.24 1543.7,1214.24 1544.29,1214.24 1544.88,1214.24 1545.46,1214.24 1546.05,1214.24 1546.64,1214.24 1547.22,1214.24 1547.81,1214.24 1548.4,1214.24 1548.98,1214.24 1549.57,1214.24 1550.15,1214.24 1550.74,1214.24 1551.33,1214.24 1551.91,1214.24 1552.5,1214.24 1553.09,1214.24 1553.67,1214.24 1554.26,1214.24 1554.85,1214.24 1555.43,1214.24 1556.02,1214.24 1556.6,1214.24 1557.19,1214.24 1557.78,1214.24 1558.36,1214.24 1558.95,1214.24 1559.54,1214.24 1560.12,1214.24 1560.71,1214.24 1561.3,1214.24 1561.88,1214.24 1562.47,1214.24 1563.06,1214.24 1563.64,1214.24 1564.23,1214.24 1564.81,1214.24 1565.4,1214.24 1565.99,1214.24 1566.57,1214.24 1567.16,1214.24 1567.75,1214.24 1568.33,1214.24 1568.92,1214.24 1569.51,1214.24 1570.09,1214.24 1570.68,1214.24 1571.27,1214.24 1571.85,1214.24 1572.44,1214.24 1573.02,1214.24 1573.61,1214.24 1574.2,1214.24 1574.78,1214.24 1575.37,1214.24 1575.96,1214.24 1576.54,1214.24 1577.13,1214.24 1577.72,1214.24 1578.3,1214.24 1578.89,1214.24 1579.47,1214.24 1580.06,1214.24 1580.65,1214.24 1581.23,1214.24 1581.82,1214.24 1582.41,1214.24 1582.99,1214.24 1583.58,1214.24 1584.17,1214.24 1584.75,1214.24 1585.34,1214.24 1585.93,1214.24 1586.51,1214.24 1587.1,1214.24 1587.68,1214.24 1588.27,1214.24 1588.86,1214.24 1589.44,1214.24 1590.03,1214.24 1590.62,1214.24 1591.2,1214.24 1591.79,1214.24 1592.38,1214.24 1592.96,1214.24 1593.55,1214.24 1594.14,1214.24 1594.72,1214.24 1595.31,1214.24 1595.89,1214.24 1596.48,1214.24 1597.07,1214.24 1597.65,1214.24 1598.24,1214.24 1598.83,1214.24 1599.41,1214.24 1600,1214.24 1600.59,1214.24 1601.17,1214.24 1601.76,1214.24 1602.34,1214.24 1602.93,1214.24 1603.52,1214.24 1604.1,1214.24 1604.69,1214.24 1605.28,1214.24 1605.86,1214.24 1606.45,1214.24 1607.04,1214.24 1607.62,1214.24 1608.21,1214.24 1608.8,1214.24 1609.38,1214.24 1609.97,1214.24 1610.55,1214.24 1611.14,1214.24 1611.73,1214.24 1612.31,1214.24 1612.9,1214.24 1613.49,1214.24 1614.07,1214.24 1614.66,1214.24 1615.25,1214.24 1615.83,1214.24 1616.42,1214.24 1617.01,1214.24 1617.59,1214.24 1618.18,1214.24 1618.76,1214.24 1619.35,1214.24 1619.94,1214.24 1620.52,1214.24 1621.11,1214.24 1621.7,1214.24 1622.28,1214.24 1622.87,1214.24 1623.46,1214.24 1624.04,1214.24 1624.63,1214.24 1625.22,1214.24 1625.8,1214.24 1626.39,1214.24 1626.97,1214.24 1627.56,1214.24 1628.15,1214.24 1628.73,1214.24 1629.32,1214.24 1629.91,1214.24 1630.49,1214.24 1631.08,1214.24 1631.67,1214.24 1632.25,1214.24 1632.84,1214.24 1633.42,1214.24 1634.01,1214.24 1634.6,1214.24 1635.18,1214.24 1635.77,1214.24 1636.36,1214.24 1636.94,1214.24 1637.53,1214.24 1638.12,1214.24 1638.7,1214.24 1639.29,1214.24 1639.88,1214.24 1640.46,1214.24 1641.05,1214.24 1641.63,1214.24 1642.22,1214.24 1642.81,1214.24 1643.39,1214.24 1643.98,1214.24 1644.57,1214.24 1645.15,1214.24 1645.74,1214.24 1646.33,1214.24 1646.91,1214.24 1647.5,1214.24 1648.09,1214.24 1648.67,1214.24 1649.26,1214.24 1649.84,1214.24 1650.43,1214.24 1651.02,1214.24 1651.6,1214.24 1652.19,1214.24 1652.78,1214.24 1653.36,1214.24 1653.95,1214.24 1654.54,1214.24 1655.12,1214.24 1655.71,1214.24 1656.29,1214.24 1656.88,1214.24 1657.47,1214.24 1658.05,1214.24 1658.64,1214.24 1659.23,1214.24 1659.81,1214.24 1660.4,1214.24 1660.99,1214.24 1661.57,1214.24 1662.16,1214.24 1662.75,1214.24 1663.33,1214.24 1663.92,1214.24 1664.5,1214.24 1665.09,1214.24 1665.68,1214.24 1666.26,1214.24 1666.85,1214.24 1667.44,1214.24 1668.02,1214.24 1668.61,1214.24 1669.2,1214.24 1669.78,1214.24 1670.37,1214.24 1670.96,1214.24 1671.54,1214.24 1672.13,1214.24 1672.71,1214.24 1673.3,1214.24 1673.89,1214.24 1674.47,1214.24 1675.06,1214.24 1675.65,1214.24 1676.23,1214.24 1676.82,1214.24 1677.41,1214.24 1677.99,1214.24 1678.58,1214.24 1679.17,1214.24 1679.75,1214.24 1680.34,1214.24 1680.92,1214.24 1681.51,1214.24 1682.1,1214.24 1682.68,1214.24 1683.27,1214.24 1683.86,1214.24 1684.44,1214.24 1685.03,1214.24 1685.62,1214.24 1686.2,1214.24 1686.79,1214.24 1687.37,1214.24 1687.96,1214.24 1688.55,1214.24 1689.13,1214.24 1689.72,1214.24 1690.31,1214.24 1690.89,1214.24 1691.48,1214.24 1692.07,1214.24 1692.65,1214.24 1693.24,1214.24 1693.83,1214.24 1694.41,1214.24 1695,1214.24 1695.58,1214.24 1696.17,1214.24 1696.76,1214.24 1697.34,1214.24 1697.93,1214.24 1698.52,1214.24 1699.1,1214.24 1699.69,1214.24 1700.28,1214.24 1700.86,1214.24 1701.45,1214.24 1702.04,1214.24 1702.62,1214.24 1703.21,1214.24 1703.79,1214.24 1704.38,1214.24 1704.97,1214.24 1705.55,1214.24 1706.14,1214.24 1706.73,1214.24 1707.31,1214.24 1707.9,1214.24 1708.49,1214.24 1709.07,1214.24 1709.66,1214.24 1710.24,1214.24 1710.83,1214.24 1711.42,1214.24 1712,1214.24 1712.59,1214.24 1713.18,1214.24 1713.76,1214.24 1714.35,1214.24 1714.94,1214.24 1715.52,1214.24 1716.11,1214.24 1716.7,1214.24 1717.28,1214.24 1717.87,1214.24 1718.45,1214.24 1719.04,1214.24 1719.63,1214.24 1720.21,1214.24 1720.8,1214.24 1721.39,1214.24 1721.97,1214.24 1722.56,1214.24 1723.15,1214.24 1723.73,1214.24 1724.32,1214.24 1724.91,1214.24 1725.49,1214.24 1726.08,1214.24 1726.66,1214.24 1727.25,1214.24 1727.84,1214.24 1728.42,1214.24 1729.01,1214.24 1729.6,1214.24 1730.18,1214.24 1730.77,1214.24 1731.36,1214.24 1731.94,1214.24 1732.53,1214.24 1733.11,1214.24 1733.7,1214.24 1734.29,1214.24 1734.87,1214.24 1735.46,1214.24 1736.05,1214.24 1736.63,1214.24 1737.22,1214.24 1737.81,1214.24 1738.39,1214.24 1738.98,1214.24 1739.57,1214.24 1740.15,1214.24 1740.74,1214.24 1741.32,1214.24 1741.91,1214.24 1742.5,1214.24 1743.08,1214.24 1743.67,1214.24 1744.26,1214.24 1744.84,1214.24 1745.43,1214.24 1746.02,1214.24 1746.6,1214.24 1747.19,1214.24 1747.78,1214.24 1748.36,1214.24 1748.95,1214.24 1749.53,1214.24 1750.12,1214.24 1750.71,1214.24 1751.29,1214.24 1751.88,1214.24 1752.47,1214.24 1753.05,1214.24 1753.64,1214.24 1754.23,1214.24 1754.81,1214.24 1755.4,1214.24 1755.99,1214.24 1756.57,1214.24 1757.16,1214.24 1757.74,1214.24 1758.33,1214.24 1758.92,1214.24 1759.5,1214.24 1760.09,1214.24 1760.68,1214.24 1761.26,1214.24 1761.85,1214.24 1762.44,1214.24 1763.02,1214.24 1763.61,1214.24 1764.19,1214.24 1764.78,1214.24 1765.37,1214.24 1765.95,1214.24 1766.54,1214.24 1767.13,1214.24 1767.71,1214.24 1768.3,1214.24 1768.89,1214.24 1769.47,1214.24 1770.06,1214.24 1770.65,1214.24 1771.23,1214.24 1771.82,1214.24 1772.4,1214.24 1772.99,1214.24 1773.58,1214.24 1774.16,1214.24 1774.75,1214.24 1775.34,1214.24 1775.92,1214.24 1776.51,1214.24 1777.1,1214.24 1777.68,1214.24 1778.27,1214.24 1778.86,1214.24 1779.44,1214.24 1780.03,1214.24 1780.61,1214.24 1781.2,1214.24 1781.79,1214.24 1782.37,1214.24 1782.96,1214.24 1783.55,1214.24 1784.13,1214.24 1784.72,1214.24 1785.31,1214.24 1785.89,1214.24 1786.48,1214.24 1787.06,1214.24 1787.65,1214.24 1788.24,1214.24 1788.82,1214.24 1789.41,1214.24 1790,1214.24 1790.58,1214.24 1791.17,1214.24 1791.76,1214.24 1792.34,1214.24 1792.93,1214.24 1793.52,1214.24 1794.1,1214.24 1794.69,1214.24 1795.27,1214.24 1795.86,1214.24 1796.45,1214.24 1797.03,1214.24 1797.62,1214.24 1798.21,1214.24 1798.79,1214.24 1799.38,1214.24 1799.97,1214.24 1800.55,1214.24 1801.14,1214.24 1801.73,1214.24 1802.31,1214.24 1802.9,1214.24 1803.48,1214.24 1804.07,1214.24 1804.66,1214.24 1805.24,1214.24 1805.83,1214.24 1806.42,1214.24 1807,1214.24 1807.59,1214.24 1808.18,1214.24 1808.76,1214.24 1809.35,1214.24 1809.94,1214.24 1810.52,1214.24 1811.11,1214.24 1811.69,1214.24 1812.28,1214.24 1812.87,1214.24 1813.45,1214.24 1814.04,1214.24 1814.63,1214.24 1815.21,1214.24 1815.8,1214.24 1816.39,1214.24 1816.97,1214.24 1817.56,1214.24 1818.14,1214.24 1818.73,1214.24 1819.32,1214.24 1819.9,1214.24 1820.49,1214.24 1821.08,1214.24 1821.66,1214.24 1822.25,1214.24 1822.84,1214.24 1823.42,1214.24 1824.01,1214.24 1824.6,1214.24 1825.18,1214.24 1825.77,1214.24 1826.35,1214.24 1826.94,1214.24 1827.53,1214.24 1828.11,1214.24 1828.7,1214.24 1829.29,1214.24 1829.87,1214.24 1830.46,1214.24 1831.05,1214.24 1831.63,1214.24 1832.22,1214.24 1832.81,1214.24 1833.39,1214.24 1833.98,1214.24 1834.56,1214.24 1835.15,1214.24 1835.74,1214.24 1836.32,1214.24 1836.91,1214.24 1837.5,1214.24 1838.08,1214.24 1838.67,1214.24 1839.26,1214.24 1839.84,1214.24 1840.43,1214.24 1841.01,1214.24 1841.6,1214.24 1842.19,1214.24 1842.77,1214.24 1843.36,1214.24 1843.95,1214.24 1844.53,1214.24 1845.12,1214.24 1845.71,1214.24 1846.29,1214.24 1846.88,1214.24 1847.47,1214.24 1848.05,1214.24 1848.64,1214.24 1849.22,1214.24 1849.81,1214.24 1850.4,1214.24 1850.98,1214.24 1851.57,1214.24 1852.16,1214.24 1852.74,1214.24 1853.33,1214.24 1853.92,1214.24 1854.5,1214.24 1855.09,1214.24 1855.68,1214.24 1856.26,1214.24 1856.85,1214.24 1857.43,1214.24 1858.02,1214.24 1858.61,1214.24 1859.19,1214.24 1859.78,1214.24 1860.37,1214.24 1860.95,1214.24 1861.54,1214.24 1862.13,1214.24 1862.71,1214.24 1863.3,1214.24 1863.88,1214.24 1864.47,1214.24 1865.06,1214.24 1865.64,1214.24 1866.23,1214.24 1866.82,1214.24 1867.4,1214.24 1867.99,1214.24 1868.58,1214.24 1869.16,1214.24 1869.75,1214.24 1870.34,1214.24 1870.92,1214.24 1871.51,1214.24 1872.09,1214.24 1872.68,1214.24 1873.27,1214.24 1873.85,1214.24 1874.44,1214.24 1875.03,1214.24 1875.61,1214.24 1876.2,1214.24 1876.79,1214.24 1877.37,1214.24 1877.96,1214.24 1878.55,1214.24 1879.13,1214.24 1879.72,1214.24 1880.3,1214.24 1880.89,1214.24 1881.48,1214.24 1882.06,1214.24 1882.65,1214.24 1883.24,1214.24 1883.82,1214.24 1884.41,1214.24 1885,1214.24 1885.58,1214.24 1886.17,1214.24 1886.76,1214.24 1887.34,1214.24 1887.93,1214.24 1888.51,1214.24 1889.1,1214.24 1889.69,1214.24 1890.27,1214.24 1890.86,1214.24 1891.45,1214.24 1892.03,1214.24 1892.62,1214.24 1893.21,1214.24 1893.79,1214.24 1894.38,1214.24 1894.96,1214.24 1895.55,1214.24 1896.14,1214.24 1896.72,1214.24 1897.31,1214.24 1897.9,1214.24 1898.48,1214.24 1899.07,1214.24 1899.66,1214.24 1900.24,1214.24 1900.83,1214.24 1901.42,1214.24 1902,1214.24 1902.59,1214.24 1903.17,1214.24 1903.76,1214.24 1904.35,1214.24 1904.93,1214.24 1905.52,1214.24 1906.11,1214.24 1906.69,1214.24 1907.28,1214.24 1907.87,1214.24 1908.45,1214.24 1909.04,1214.24 1909.63,1214.24 1910.21,1214.24 1910.8,1214.24 1911.38,1214.24 1911.97,1214.24 1912.56,1214.24 1913.14,1214.24 1913.73,1214.24 1914.32,1214.24 1914.9,1214.24 1915.49,1214.24 1916.08,1214.24 1916.66,1214.24 1917.25,1214.24 1917.83,1214.24 1918.42,1214.24 1919.01,1214.24 1919.59,1214.24 1920.18,1214.24 1920.77,1214.24 1921.35,1214.24 1921.94,1214.24 1922.53,1214.24 1923.11,1214.24 1923.7,1214.24 1924.29,1214.24 1924.87,1214.24 1925.46,1214.24 1926.04,1214.24 1926.63,1214.24 1927.22,1214.24 1927.8,1214.24 1928.39,1214.24 1928.98,1214.24 1929.56,1214.24 1930.15,1214.24 1930.74,1214.24 1931.32,1214.24 1931.91,1214.24 1932.5,1214.24 1933.08,1214.24 1933.67,1214.24 1934.25,1214.24 1934.84,1214.24 1935.43,1214.24 1936.01,1214.24 1936.6,1214.24 1937.19,1214.24 1937.77,1214.24 1938.36,1214.24 1938.95,1214.24 1939.53,1214.24 1940.12,1214.24 1940.71,1214.24 1941.29,1214.24 1941.88,1214.24 1942.46,1214.24 1943.05,1214.24 1943.64,1214.24 1944.22,1214.24 1944.81,1214.24 1945.4,1214.24 1945.98,1214.24 1946.57,1214.24 1947.16,1214.24 1947.74,1214.24 1948.33,1214.24 1948.91,1214.24 1949.5,1214.24 1950.09,1214.24 1950.67,1214.24 1951.26,1214.24 1951.85,1214.24 1952.43,1214.24 1953.02,1214.24 1953.61,1214.24 1954.19,1214.24 1954.78,1214.24 1955.37,1214.24 1955.95,1214.24 1956.54,1214.24 1957.12,1214.24 1957.71,1214.24 1958.3,1214.24 1958.88,1214.24 1959.47,1214.24 1960.06,1214.24 1960.64,1214.24 1961.23,1214.24 1961.82,1214.24 1962.4,1214.24 1962.99,1214.24 1963.58,1214.24 1964.16,1214.24 1964.75,1214.24 1965.33,1214.24 1965.92,1214.24 1966.51,1214.24 1967.09,1214.24 1967.68,1214.24 1968.27,1214.24 1968.85,1214.24 1969.44,1214.24 1970.03,1214.24 1970.61,1214.24 1971.2,1214.24 1971.78,1214.24 1972.37,1214.24 1972.96,1214.24 1973.54,1214.24 1974.13,1214.24 1974.72,1214.24 1975.3,1214.24 1975.89,1214.24 1976.48,1214.24 1977.06,1214.24 1977.65,1214.24 1978.24,1214.24 1978.82,1214.24 1979.41,1214.24 1979.99,1214.24 1980.58,1214.24 1981.17,1214.24 1981.75,1214.24 1982.34,1214.24 1982.93,1214.24 1983.51,1214.24 1984.1,1214.24 1984.69,1214.24 1985.27,1214.24 1985.86,1214.24 1986.45,1214.24 1987.03,1214.24 1987.62,1214.24 1988.2,1214.24 1988.79,1214.24 1989.38,1214.24 1989.96,1214.24 1990.55,1214.24 1991.14,1214.24 1991.72,1214.24 1992.31,1214.24 1992.9,1214.24 1993.48,1214.24 1994.07,1214.24 1994.65,1214.24 1995.24,1214.24 1995.83,1214.24 1996.41,1214.24 1997,1214.24 1997.59,1214.24 1998.17,1214.24 1998.76,1214.24 1999.35,1214.24 1999.93,1214.24 2000.52,1214.24 2001.11,1214.24 2001.69,1214.24 2002.28,1214.24 2002.86,1214.24 2003.45,1214.24 2004.04,1214.24 2004.62,1214.24 2005.21,1214.24 2005.8,1214.24 2006.38,1214.24 2006.97,1214.24 2007.56,1214.24 2008.14,1214.24 2008.73,1214.24 2009.32,1214.24 2009.9,1214.24 2010.49,1214.24 2011.07,1214.24 2011.66,1214.24 2012.25,1214.24 2012.83,1214.24 2013.42,1214.24 2014.01,1214.24 2014.59,1214.24 2015.18,1214.24 2015.77,1214.24 2016.35,1214.24 2016.94,1214.24 2017.53,1214.24 2018.11,1214.24 2018.7,1214.24 2019.28,1214.24 2019.87,1214.24 2020.46,1214.24 2021.04,1214.24 2021.63,1214.24 2022.22,1214.24 2022.8,1214.24 2023.39,1214.24 2023.98,1214.24 2024.56,1214.24 2025.15,1214.24 2025.73,1214.24 2026.32,1214.24 2026.91,1214.24 2027.49,1214.24 2028.08,1214.24 2028.67,1214.24 2029.25,1214.24 2029.84,1214.24 2030.43,1214.24 2031.01,1214.24 2031.6,1214.24 2032.19,1214.24 2032.77,1214.24 2033.36,1214.24 2033.94,1214.24 2034.53,1214.24 2035.12,1214.24 2035.7,1214.24 2036.29,1214.24 2036.88,1214.24 2037.46,1214.24 2038.05,1214.24 2038.64,1214.24 2039.22,1214.24 2039.81,1214.24 2040.4,1214.24 2040.98,1214.24 2041.57,1214.24 2042.15,1214.24 2042.74,1214.24 2043.33,1214.24 2043.91,1214.24 2044.5,1214.24 2045.09,1214.24 2045.67,1214.24 2046.26,1214.24 2046.85,1214.24 2047.43,1214.24 2048.02,1214.24 2048.6,1214.24 2049.19,1214.24 2049.78,1214.24 2050.36,1214.24 2050.95,1214.24 2051.54,1214.24 2052.12,1214.24 2052.71,1214.24 2053.3,1214.24 2053.88,1214.24 2054.47,1214.24 2055.06,1214.24 2055.64,1214.24 2056.23,1214.24 2056.81,1214.24 2057.4,1214.24 2057.99,1214.24 2058.57,1214.24 2059.16,1214.24 2059.75,1214.24 2060.33,1214.24 2060.92,1214.24 2061.51,1214.24 2062.09,1214.24 2062.68,1214.24 2063.27,1214.24 2063.85,1214.24 2064.44,1214.24 2065.02,1214.24 2065.61,1214.24 2066.2,1214.24 2066.78,1214.24 2067.37,1214.24 2067.96,1214.24 2068.54,1214.24 2069.13,1214.24 2069.72,1214.24 2070.3,1214.24 2070.89,1214.24 2071.48,1214.24 2072.06,1214.24 2072.65,1214.24 2073.23,1214.24 2073.82,1214.24 2074.41,1214.24 2074.99,1214.24 2075.58,1214.24 2076.17,1214.24 2076.75,1214.24 2077.34,1214.24 2077.93,1214.24 2078.51,1214.24 2079.1,1214.24 2079.68,1214.24 2080.27,1214.24 2080.86,1214.24 2081.44,1214.24 2082.03,1214.24 2082.62,1214.24 2083.2,1214.24 2083.79,1214.24 2084.38,1214.24 2084.96,1214.24 2085.55,1214.24 2086.14,1214.24 2086.72,1214.24 2087.31,1214.24 2087.89,1214.24 2088.48,1214.24 2089.07,1214.24 2089.65,1214.24 2090.24,1214.24 2090.83,1214.24 2091.41,1214.24 2092,1214.24 2092.59,1214.24 2093.17,1214.24 2093.76,1214.24 2094.35,1214.24 2094.93,1214.24 2095.52,1214.24 2096.1,1214.24 2096.69,1214.24 2097.28,1214.24 2097.86,1214.24 2098.45,1214.24 2099.04,1214.24 2099.62,1214.24 2100.21,1214.24 2100.8,1214.24 2101.38,1214.24 2101.97,1214.24 2102.55,1214.24 2103.14,1214.24 2103.73,1214.24 2104.31,1214.24 2104.9,1214.24 2105.49,1214.24 2106.07,1214.24 2106.66,1214.24 2107.25,1214.24 2107.83,1214.24 2108.42,1214.24 2109.01,1214.24 2109.59,1214.24 2110.18,1214.24 2110.76,1214.24 2111.35,1214.24 2111.94,1214.24 2112.52,1214.24 2113.11,1214.24 2113.7,1214.24 2114.28,1214.24 2114.87,1214.24 2115.46,1214.24 2116.04,1214.24 2116.63,1214.24 2117.22,1214.24 2117.8,1214.24 2118.39,1214.24 2118.97,1214.24 2119.56,1214.24 2120.15,1214.24 2120.73,1214.24 2121.32,1214.24 2121.91,1214.24 2122.49,1214.24 2123.08,1214.24 2123.67,1214.24 2124.25,1214.24 2124.84,1214.24 2125.42,1214.24 2126.01,1214.24 2126.6,1214.24 2127.18,1214.24 2127.77,1214.24 2128.36,1214.24 2128.94,1214.24 2129.53,1214.24 2130.12,1214.24 2130.7,1214.24 2131.29,1214.24 2131.88,1214.24 2132.46,1214.24 2133.05,1214.24 2133.63,1214.24 2134.22,1214.24 2134.81,1214.24 2135.39,1214.24 2135.98,1214.24 2136.57,1214.24 2137.15,1214.24 2137.74,1214.24 2138.33,1214.24 2138.91,1214.24 2139.5,1214.24 2140.09,1214.24 2140.67,1214.24 2141.26,1214.24 2141.84,1214.24 2142.43,1214.24 2143.02,1214.24 2143.6,1214.24 2144.19,1214.24 2144.78,1214.24 2145.36,1214.24 2145.95,1214.24 2146.54,1214.24 2147.12,1214.24 2147.71,1214.24 2148.3,1214.24 2148.88,1214.24 2149.47,1214.24 2150.05,1214.24 2150.64,1214.24 2151.23,1214.24 2151.81,1214.24 2152.4,1214.24 2152.99,1214.24 2153.57,1214.24 2154.16,1214.24 2154.75,1214.24 2155.33,1214.24 2155.92,1214.24 2156.5,1214.24 2157.09,1214.24 2157.68,1214.24 2158.26,1214.24 \"/>\n<path clip-path=\"url(#clip692)\" d=\"M986.025 1213.99 L986.612 1213.99 L987.198 1213.99 L987.785 1213.99 L988.371 1213.99 L988.957 1213.99 L989.544 1213.99 L990.13 1213.99 L990.717 1213.99 L991.303 1213.99 L991.889 1213.99 L992.476 1213.99 L993.062 1213.99 L993.649 1213.99 L994.235 1213.99 L994.822 1213.99 L995.408 1213.99 L995.994 1213.99 L996.581 1213.99 L997.167 1213.99 L997.754 1213.99 L998.34 1213.99 L998.926 1213.99 L999.513 1213.99 L1000.1 1213.99 L1000.69 1213.99 L1001.27 1213.99 L1001.86 1213.99 L1002.44 1213.99 L1003.03 1213.99 L1003.62 1213.99 L1004.2 1213.99 L1004.79 1213.99 L1005.38 1213.99 L1005.96 1213.99 L1006.55 1213.99 L1007.14 1213.99 L1007.72 1213.99 L1008.31 1213.99 L1008.9 1213.99 L1009.48 1213.99 L1010.07 1213.99 L1010.65 1213.99 L1011.24 1213.99 L1011.83 1213.99 L1012.41 1213.99 L1013 1213.99 L1013.59 1213.99 L1014.17 1213.99 L1014.76 1213.99 L1015.35 1213.99 L1015.93 1213.99 L1016.52 1213.99 L1017.11 1213.99 L1017.69 1213.99 L1018.28 1213.99 L1018.86 1213.99 L1019.45 1213.99 L1020.04 1213.99 L1020.62 1213.99 L1021.21 1213.99 L1021.8 1213.99 L1022.38 1213.99 L1022.97 1213.99 L1023.56 1213.99 L1024.14 1213.99 L1024.73 1213.99 L1025.32 1213.99 L1025.9 1213.99 L1026.49 1213.99 L1027.07 1213.99 L1027.66 1213.99 L1028.25 1213.99 L1028.83 1213.99 L1029.42 1213.99 L1030.01 1213.99 L1030.59 1213.99 L1031.18 1213.99 L1031.77 1213.99 L1032.35 1213.99 L1032.94 1213.99 L1033.52 1213.99 L1034.11 1213.99 L1034.7 1213.99 L1035.28 1213.99 L1035.87 1213.99 L1036.46 1213.99 L1037.04 1213.99 L1037.63 1213.99 L1038.22 1213.99 L1038.8 1213.99 L1039.39 1213.99 L1039.98 1213.99 L1040.56 1213.99 L1041.15 1213.99 L1041.73 1213.99 L1042.32 1213.99 L1042.91 1213.99 L1043.49 1213.99 L1044.08 1213.99 L1044.67 1213.99 L1045.25 1213.99 L1045.84 1213.99 L1046.43 1213.99 L1047.01 1213.99 L1047.6 1213.99 L1048.19 1213.99 L1048.77 1213.99 L1049.36 1213.99 L1049.94 1213.99 L1050.53 1213.99 L1051.12 1213.99 L1051.7 1213.99 L1052.29 1213.99 L1052.88 1213.99 L1053.46 1213.99 L1054.05 1213.99 L1054.64 1213.99 L1055.22 1213.99 L1055.81 1213.99 L1056.39 1213.99 L1056.98 1213.99 L1057.57 1213.99 L1058.15 1213.99 L1058.74 1213.99 L1059.33 1213.99 L1059.91 1213.99 L1060.5 1213.99 L1061.09 1213.99 L1061.67 1213.99 L1062.26 1213.99 L1062.85 1213.99 L1063.43 1213.99 L1064.02 1213.99 L1064.6 1213.99 L1065.19 1213.99 L1065.78 1213.99 L1066.36 1213.99 L1066.95 1213.99 L1067.54 1213.99 L1068.12 1213.99 L1068.71 1213.99 L1069.3 1213.99 L1069.88 1213.99 L1070.47 1213.99 L1071.06 1213.99 L1071.64 1213.99 L1072.23 1213.99 L1072.81 1213.99 L1073.4 1213.99 L1073.99 1213.99 L1074.57 1213.99 L1075.16 1213.99 L1075.75 1213.99 L1076.33 1213.99 L1076.92 1213.99 L1077.51 1213.99 L1078.09 1213.99 L1078.68 1213.99 L1079.26 1213.99 L1079.85 1213.99 L1080.44 1213.99 L1081.02 1213.99 L1081.61 1213.99 L1082.2 1213.99 L1082.78 1213.99 L1083.37 1213.99 L1083.96 1213.99 L1084.54 1213.99 L1085.13 1213.99 L1085.72 1213.99 L1086.3 1213.99 L1086.89 1213.99 L1087.47 1213.99 L1088.06 1213.99 L1088.65 1213.99 L1089.23 1213.99 L1089.82 1213.99 L1090.41 1213.99 L1090.99 1213.99 L1091.58 1213.99 L1092.17 1213.99 L1092.75 1213.99 L1093.34 1213.99 L1093.93 1213.99 L1094.51 1213.99 L1095.1 1213.99 L1095.68 1213.99 L1096.27 1213.99 L1096.86 1213.99 L1097.44 1213.99 L1098.03 1213.99 L1098.62 1213.99 L1099.2 1213.99 L1099.79 1213.99 L1100.38 1213.99 L1100.96 1213.99 L1101.55 1213.99 L1102.14 1213.99 L1102.72 1213.99 L1103.31 1213.99 L1103.89 1213.99 L1104.48 1213.99 L1105.07 1213.99 L1105.65 1213.99 L1106.24 1213.99 L1106.83 1213.99 L1107.41 1213.99 L1108 1213.99 L1108.59 1213.99 L1109.17 1213.99 L1109.76 1213.99 L1110.34 1213.99 L1110.93 1213.99 L1111.52 1213.99 L1112.1 1213.99 L1112.69 1213.99 L1113.28 1213.99 L1113.86 1213.99 L1114.45 1213.99 L1115.04 1213.99 L1115.62 1213.99 L1116.21 1213.99 L1116.8 1213.99 L1117.38 1213.99 L1117.97 1213.99 L1118.55 1213.99 L1119.14 1213.99 L1119.73 1213.99 L1120.31 1213.99 L1120.9 1213.99 L1121.49 1213.99 L1122.07 1213.99 L1122.66 1213.99 L1123.25 1213.99 L1123.83 1213.99 L1124.42 1213.99 L1125.01 1213.99 L1125.59 1213.99 L1126.18 1213.99 L1126.76 1213.99 L1127.35 1213.99 L1127.94 1213.99 L1128.52 1213.99 L1129.11 1213.99 L1129.7 1213.99 L1130.28 1213.99 L1130.87 1213.99 L1131.46 1213.99 L1132.04 1213.99 L1132.63 1213.99 L1133.21 1213.99 L1133.8 1213.99 L1134.39 1213.99 L1134.97 1213.99 L1135.56 1213.99 L1136.15 1213.99 L1136.73 1213.99 L1137.32 1213.99 L1137.91 1213.99 L1138.49 1213.99 L1139.08 1213.99 L1139.67 1213.99 L1140.25 1213.99 L1140.84 1213.99 L1141.42 1213.99 L1142.01 1213.99 L1142.6 1213.99 L1143.18 1213.99 L1143.77 1213.99 L1144.36 1213.99 L1144.94 1213.99 L1145.53 1213.99 L1146.12 1213.99 L1146.7 1213.99 L1147.29 1213.99 L1147.88 1213.99 L1148.46 1213.99 L1149.05 1213.99 L1149.63 1213.99 L1150.22 1213.99 L1150.81 1213.99 L1151.39 1213.99 L1151.98 1213.99 L1152.57 1213.99 L1153.15 1213.99 L1153.74 1213.99 L1154.33 1213.99 L1154.91 1213.99 L1155.5 1213.99 L1156.09 1213.99 L1156.67 1213.99 L1157.26 1213.99 L1157.84 1213.99 L1158.43 1213.99 L1159.02 1213.99 L1159.6 1213.99 L1160.19 1213.99 L1160.78 1213.99 L1161.36 1213.99 L1161.95 1213.99 L1162.54 1213.99 L1163.12 1213.99 L1163.71 1213.99 L1164.29 1213.99 L1164.88 1213.99 L1165.47 1213.99 L1166.05 1213.99 L1166.64 1213.99 L1167.23 1213.99 L1167.81 1213.99 L1168.4 1213.99 L1168.99 1213.99 L1169.57 1213.99 L1170.16 1213.99 L1170.75 1213.99 L1171.33 1213.99 L1171.92 1213.99 L1172.5 1213.99 L1173.09 1213.99 L1173.68 1213.99 L1174.26 1213.99 L1174.85 1213.99 L1175.44 1213.99 L1176.02 1213.99 L1176.61 1213.99 L1177.2 1213.99 L1177.78 1213.99 L1178.37 1213.99 L1178.96 1213.99 L1179.54 1213.99 L1180.13 1213.99 L1180.71 1213.99 L1181.3 1213.99 L1181.89 1213.99 L1182.47 1213.99 L1183.06 1213.99 L1183.65 1213.99 L1184.23 1213.99 L1184.82 1213.99 L1185.41 1213.99 L1185.99 1213.99 L1186.58 1213.99 L1187.16 1213.99 L1187.75 1213.99 L1188.34 1213.99 L1188.92 1213.99 L1189.51 1213.99 L1190.1 1213.99 L1190.68 1213.99 L1191.27 1213.99 L1191.86 1213.99 L1192.44 1213.99 L1193.03 1213.99 L1193.62 1213.99 L1194.2 1213.99 L1194.79 1213.99 L1195.37 1213.99 L1195.96 1213.99 L1196.55 1213.99 L1197.13 1213.99 L1197.72 1213.99 L1198.31 1213.99 L1198.89 1213.99 L1199.48 1213.99 L1200.07 1213.99 L1200.65 1213.99 L1201.24 1213.99 L1201.83 1213.99 L1202.41 1213.99 L1203 1213.99 L1203.58 1213.99 L1204.17 1213.99 L1204.76 1213.99 L1205.34 1213.99 L1205.93 1213.99 L1206.52 1213.99 L1207.1 1213.99 L1207.69 1213.99 L1208.28 1213.99 L1208.86 1213.99 L1209.45 1213.99 L1210.03 1213.99 L1210.62 1213.99 L1211.21 1213.99 L1211.79 1213.99 L1212.38 1213.99 L1212.97 1213.99 L1213.55 1213.99 L1214.14 1213.99 L1214.73 1213.99 L1215.31 1213.99 L1215.9 1213.99 L1216.49 1213.99 L1217.07 1213.99 L1217.66 1213.99 L1218.24 1213.99 L1218.83 1213.99 L1219.42 1213.99 L1220 1213.99 L1220.59 1213.99 L1221.18 1213.99 L1221.76 1213.99 L1222.35 1213.99 L1222.94 1213.99 L1223.52 1213.99 L1224.11 1213.99 L1224.7 1213.99 L1225.28 1213.99 L1225.87 1213.99 L1226.45 1213.99 L1227.04 1213.99 L1227.63 1213.99 L1228.21 1213.99 L1228.8 1213.99 L1229.39 1213.99 L1229.97 1213.99 L1230.56 1213.99 L1231.15 1213.99 L1231.73 1213.99 L1232.32 1213.99 L1232.91 1213.99 L1233.49 1213.99 L1234.08 1213.99 L1234.66 1213.99 L1235.25 1213.99 L1235.84 1213.99 L1236.42 1213.99 L1237.01 1213.99 L1237.6 1213.99 L1238.18 1213.99 L1238.77 1213.99 L1239.36 1213.99 L1239.94 1213.99 L1240.53 1213.99 L1241.11 1213.99 L1241.7 1213.99 L1242.29 1213.99 L1242.87 1213.99 L1243.46 1213.99 L1244.05 1213.99 L1244.63 1213.99 L1245.22 1213.99 L1245.81 1213.99 L1246.39 1213.99 L1246.98 1213.99 L1247.57 1213.99 L1248.15 1213.99 L1248.74 1213.99 L1249.32 1213.99 L1249.91 1213.99 L1250.5 1213.99 L1251.08 1213.99 L1251.67 1213.99 L1252.26 1213.99 L1252.84 1213.99 L1253.43 1213.99 L1254.02 1213.99 L1254.6 1213.99 L1255.19 1213.99 L1255.78 1213.99 L1256.36 1213.99 L1256.95 1213.99 L1257.53 1213.99 L1258.12 1213.99 L1258.71 1213.99 L1259.29 1213.99 L1259.88 1213.99 L1260.47 1213.99 L1261.05 1213.99 L1261.64 1213.99 L1262.23 1213.99 L1262.81 1213.99 L1263.4 1213.99 L1263.98 1213.99 L1264.57 1213.99 L1265.16 1213.99 L1265.74 1213.99 L1266.33 1213.99 L1266.92 1213.99 L1267.5 1213.99 L1268.09 1213.99 L1268.68 1213.99 L1269.26 1213.99 L1269.85 1213.99 L1270.44 1213.99 L1271.02 1213.99 L1271.61 1213.99 L1272.19 1213.99 L1272.78 1213.99 L1273.37 1213.99 L1273.95 1213.99 L1274.54 1213.99 L1275.13 1213.99 L1275.71 1213.99 L1276.3 1213.99 L1276.89 1213.99 L1277.47 1213.99 L1278.06 1213.99 L1278.65 1213.99 L1279.23 1213.99 L1279.82 1213.99 L1280.4 1213.99 L1280.99 1213.99 L1281.58 1213.99 L1282.16 1213.99 L1282.75 1213.99 L1283.34 1213.99 L1283.92 1213.99 L1284.51 1213.99 L1285.1 1213.99 L1285.68 1213.99 L1286.27 1213.99 L1286.86 1213.99 L1287.44 1213.99 L1288.03 1213.99 L1288.61 1213.99 L1289.2 1213.99 L1289.79 1213.99 L1290.37 1213.99 L1290.96 1213.99 L1291.55 1213.99 L1292.13 1213.99 L1292.72 1213.99 L1293.31 1213.99 L1293.89 1213.99 L1294.48 1213.99 L1295.06 1213.99 L1295.65 1213.99 L1296.24 1213.99 L1296.82 1213.99 L1297.41 1213.99 L1298 1213.99 L1298.58 1213.99 L1299.17 1213.99 L1299.76 1213.99 L1300.34 1213.99 L1300.93 1213.99 L1301.52 1213.99 L1302.1 1213.99 L1302.69 1213.99 L1303.27 1213.99 L1303.86 1213.99 L1304.45 1213.99 L1305.03 1213.99 L1305.62 1213.99 L1306.21 1213.99 L1306.79 1213.99 L1307.38 1213.99 L1307.97 1213.99 L1308.55 1213.99 L1309.14 1213.99 L1309.73 1213.99 L1310.31 1213.99 L1310.9 1213.99 L1311.48 1213.99 L1312.07 1213.99 L1312.66 1213.99 L1313.24 1213.99 L1313.83 1213.99 L1314.42 1213.99 L1315 1213.99 L1315.59 1213.99 L1316.18 1213.99 L1316.76 1213.99 L1317.35 1213.99 L1317.93 1213.99 L1318.52 1213.99 L1319.11 1213.99 L1319.69 1213.99 L1320.28 1213.99 L1320.87 1213.99 L1321.45 1213.99 L1322.04 1213.99 L1322.63 1213.99 L1323.21 1213.99 L1323.8 1213.99 L1324.39 1213.99 L1324.97 1213.99 L1325.56 1213.99 L1326.14 1213.99 L1326.73 1213.99 L1327.32 1213.99 L1327.9 1213.99 L1328.49 1213.99 L1329.08 1213.99 L1329.66 1213.99 L1330.25 1213.99 L1330.84 1213.99 L1331.42 1213.99 L1332.01 1213.99 L1332.6 1213.99 L1333.18 1213.99 L1333.77 1213.99 L1334.35 1213.99 L1334.94 1213.99 L1335.53 1213.99 L1336.11 1213.99 L1336.7 1213.99 L1337.29 1213.99 L1337.87 1213.99 L1338.46 1213.99 L1339.05 1213.99 L1339.63 1213.99 L1340.22 1213.99 L1340.8 1213.99 L1341.39 1213.99 L1341.98 1213.99 L1342.56 1213.99 L1343.15 1213.99 L1343.74 1213.99 L1344.32 1213.99 L1344.91 1213.99 L1345.5 1213.99 L1346.08 1213.99 L1346.67 1213.99 L1347.26 1213.99 L1347.84 1213.99 L1348.43 1213.99 L1349.01 1213.99 L1349.6 1213.99 L1350.19 1213.99 L1350.77 1213.99 L1351.36 1213.99 L1351.95 1213.99 L1352.53 1213.99 L1353.12 1213.99 L1353.71 1213.99 L1354.29 1213.99 L1354.88 1213.99 L1355.47 1213.99 L1356.05 1213.99 L1356.64 1213.99 L1357.22 1213.99 L1357.81 1213.99 L1358.4 1213.99 L1358.98 1213.99 L1359.57 1213.99 L1360.16 1213.99 L1360.74 1213.99 L1361.33 1213.99 L1361.92 1213.99 L1362.5 1213.99 L1363.09 1213.99 L1363.68 1213.99 L1364.26 1213.99 L1364.85 1213.99 L1365.43 1213.99 L1366.02 1213.99 L1366.61 1213.99 L1367.19 1213.99 L1367.78 1213.99 L1368.37 1213.99 L1368.95 1213.99 L1369.54 1213.99 L1370.13 1213.99 L1370.71 1213.99 L1371.3 1213.99 L1371.88 1213.99 L1372.47 1213.99 L1373.06 1213.99 L1373.64 1213.99 L1374.23 1213.99 L1374.82 1213.99 L1375.4 1213.99 L1375.99 1213.99 L1376.58 1213.99 L1377.16 1213.99 L1377.75 1213.99 L1378.34 1213.99 L1378.92 1213.99 L1379.51 1213.99 L1380.09 1213.99 L1380.68 1213.99 L1381.27 1213.99 L1381.85 1213.99 L1382.44 1213.99 L1383.03 1213.99 L1383.61 1213.99 L1384.2 1213.99 L1384.79 1213.99 L1385.37 1213.99 L1385.96 1213.99 L1386.55 1213.99 L1387.13 1213.99 L1387.72 1213.99 L1388.3 1213.99 L1388.89 1213.99 L1389.48 1213.99 L1390.06 1213.99 L1390.65 1213.99 L1391.24 1213.99 L1391.82 1213.99 L1392.41 1213.99 L1393 1213.99 L1393.58 1213.99 L1394.17 1213.99 L1394.75 1213.99 L1395.34 1213.99 L1395.93 1213.99 L1396.51 1213.99 L1397.1 1213.99 L1397.69 1213.99 L1398.27 1213.99 L1398.86 1213.99 L1399.45 1213.99 L1400.03 1213.99 L1400.62 1213.99 L1401.21 1213.99 L1401.79 1213.99 L1402.38 1213.99 L1402.96 1213.99 L1403.55 1213.99 L1404.14 1213.99 L1404.72 1213.99 L1405.31 1213.99 L1405.9 1213.99 L1406.48 1213.99 L1407.07 1213.99 L1407.66 1213.99 L1408.24 1213.99 L1408.83 1213.99 L1409.42 1213.99 L1410 1213.99 L1410.59 1213.99 L1411.17 1213.99 L1411.76 1213.99 L1412.35 1213.99 L1412.93 1213.99 L1413.52 1213.99 L1414.11 1213.99 L1414.69 1213.99 L1415.28 1213.99 L1415.87 1213.99 L1416.45 1213.99 L1417.04 1213.99 L1417.63 1213.99 L1418.21 1213.99 L1418.8 1213.99 L1419.38 1213.99 L1419.97 1213.99 L1420.56 1213.99 L1421.14 1213.99 L1421.73 1213.99 L1422.32 1213.99 L1422.9 1213.99 L1423.49 1213.99 L1424.08 1213.99 L1424.66 1213.99 L1425.25 1213.99 L1425.83 1213.99 L1426.42 1213.99 L1427.01 1213.99 L1427.59 1213.99 L1428.18 1213.99 L1428.77 1213.99 L1429.35 1213.99 L1429.94 1213.99 L1430.53 1213.99 L1431.11 1213.99 L1431.7 1213.99 L1432.29 1213.99 L1432.87 1213.99 L1433.46 1213.99 L1434.04 1213.99 L1434.63 1213.99 L1435.22 1213.99 L1435.8 1213.99 L1436.39 1213.99 L1436.98 1213.99 L1437.56 1213.99 L1438.15 1213.99 L1438.74 1213.99 L1439.32 1213.99 L1439.91 1213.99 L1440.5 1213.99 L1441.08 1213.99 L1441.67 1213.99 L1442.25 1213.99 L1442.84 1213.99 L1443.43 1213.99 L1444.01 1213.99 L1444.6 1213.99 L1445.19 1213.99 L1445.77 1213.99 L1446.36 1213.99 L1446.95 1213.99 L1447.53 1213.99 L1448.12 1213.99 L1448.7 1213.99 L1449.29 1213.99 L1449.88 1213.99 L1450.46 1213.99 L1451.05 1213.99 L1451.64 1213.99 L1452.22 1213.99 L1452.81 1213.99 L1453.4 1213.99 L1453.98 1213.99 L1454.57 1213.99 L1455.16 1213.99 L1455.74 1213.99 L1456.33 1213.99 L1456.91 1213.99 L1457.5 1213.99 L1458.09 1213.99 L1458.67 1213.99 L1459.26 1213.99 L1459.85 1213.99 L1460.43 1213.99 L1461.02 1213.99 L1461.61 1213.99 L1462.19 1213.99 L1462.78 1213.99 L1463.37 1213.99 L1463.95 1213.99 L1464.54 1213.99 L1465.12 1213.99 L1465.71 1213.99 L1466.3 1213.99 L1466.88 1213.99 L1467.47 1213.99 L1468.06 1213.99 L1468.64 1213.99 L1469.23 1213.99 L1469.82 1213.99 L1470.4 1213.99 L1470.99 1213.99 L1471.57 1213.99 L1472.16 1213.99 L1472.75 1213.99 L1473.33 1213.99 L1473.92 1213.99 L1474.51 1213.99 L1475.09 1213.99 L1475.68 1213.99 L1476.27 1213.99 L1476.85 1213.99 L1477.44 1213.99 L1478.03 1213.99 L1478.61 1213.99 L1479.2 1213.99 L1479.78 1213.99 L1480.37 1213.99 L1480.96 1213.99 L1481.54 1213.99 L1482.13 1213.99 L1482.72 1213.99 L1483.3 1213.99 L1483.89 1213.99 L1484.48 1213.99 L1485.06 1213.99 L1485.65 1213.99 L1486.24 1213.99 L1486.82 1213.99 L1487.41 1213.99 L1487.99 1213.99 L1488.58 1213.99 L1489.17 1213.99 L1489.75 1213.99 L1490.34 1213.99 L1490.93 1213.99 L1491.51 1213.99 L1492.1 1213.99 L1492.69 1213.99 L1493.27 1213.99 L1493.86 1213.99 L1494.45 1213.99 L1495.03 1213.99 L1495.62 1213.99 L1496.2 1213.99 L1496.79 1213.99 L1497.38 1213.99 L1497.96 1213.99 L1498.55 1213.99 L1499.14 1213.99 L1499.72 1213.99 L1500.31 1213.99 L1500.9 1213.99 L1501.48 1213.99 L1502.07 1213.99 L1502.65 1213.99 L1503.24 1213.99 L1503.83 1213.99 L1504.41 1213.99 L1505 1213.99 L1505.59 1213.99 L1506.17 1213.99 L1506.76 1213.99 L1507.35 1213.99 L1507.93 1213.99 L1508.52 1213.99 L1509.11 1213.99 L1509.69 1213.99 L1510.28 1213.99 L1510.86 1213.99 L1511.45 1213.99 L1512.04 1213.99 L1512.62 1213.99 L1513.21 1213.99 L1513.8 1213.99 L1514.38 1213.99 L1514.97 1213.99 L1515.56 1213.99 L1516.14 1213.99 L1516.73 1213.99 L1517.32 1213.99 L1517.9 1213.99 L1518.49 1213.99 L1519.07 1213.99 L1519.66 1213.99 L1520.25 1213.99 L1520.83 1213.99 L1521.42 1213.99 L1522.01 1213.99 L1522.59 1213.99 L1523.18 1213.99 L1523.77 1213.99 L1524.35 1213.99 L1524.94 1213.99 L1525.52 1213.99 L1526.11 1213.99 L1526.7 1213.99 L1527.28 1213.99 L1527.87 1213.99 L1528.46 1213.99 L1529.04 1213.99 L1529.63 1213.99 L1530.22 1213.99 L1530.8 1213.99 L1531.39 1213.99 L1531.98 1213.99 L1532.56 1213.99 L1533.15 1213.99 L1533.73 1213.99 L1534.32 1213.99 L1534.91 1213.99 L1535.49 1213.99 L1536.08 1213.99 L1536.67 1213.99 L1537.25 1213.99 L1537.84 1213.99 L1538.43 1213.99 L1539.01 1213.99 L1539.6 1213.99 L1540.19 1213.99 L1540.77 1213.99 L1541.36 1213.99 L1541.94 1213.99 L1542.53 1213.99 L1543.12 1213.99 L1543.7 1213.99 L1544.29 1213.99 L1544.88 1213.99 L1545.46 1213.99 L1546.05 1213.99 L1546.64 1213.99 L1547.22 1213.99 L1547.81 1213.99 L1548.4 1213.99 L1548.98 1213.99 L1549.57 1213.99 L1550.15 1213.99 L1550.74 1213.99 L1551.33 1213.99 L1551.91 1213.99 L1552.5 1213.99 L1553.09 1213.99 L1553.67 1213.99 L1554.26 1213.99 L1554.85 1213.99 L1555.43 1213.99 L1556.02 1213.99 L1556.6 1213.99 L1557.19 1213.99 L1557.78 1213.99 L1558.36 1213.99 L1558.95 1213.99 L1559.54 1213.99 L1560.12 1213.99 L1560.71 1213.99 L1561.3 1213.99 L1561.88 1213.99 L1562.47 1213.99 L1563.06 1213.99 L1563.64 1213.99 L1564.23 1213.99 L1564.81 1213.99 L1565.4 1213.99 L1565.99 1213.99 L1566.57 1213.99 L1567.16 1213.99 L1567.75 1213.99 L1568.33 1213.99 L1568.92 1213.99 L1569.51 1213.99 L1570.09 1213.99 L1570.68 1213.99 L1571.27 1213.99 L1571.85 1213.99 L1572.44 1213.99 L1573.02 1213.99 L1573.61 1213.99 L1574.2 1213.99 L1574.78 1213.99 L1575.37 1213.99 L1575.96 1213.99 L1576.54 1213.99 L1577.13 1213.99 L1577.72 1213.99 L1578.3 1213.99 L1578.89 1213.99 L1579.47 1213.99 L1580.06 1213.99 L1580.65 1213.99 L1581.23 1213.99 L1581.82 1213.99 L1582.41 1213.99 L1582.99 1213.99 L1583.58 1213.99 L1584.17 1213.99 L1584.75 1213.99 L1585.34 1213.99 L1585.93 1213.99 L1586.51 1213.99 L1587.1 1213.99 L1587.68 1213.99 L1588.27 1213.99 L1588.86 1213.99 L1589.44 1213.99 L1590.03 1213.99 L1590.62 1213.99 L1591.2 1213.99 L1591.79 1213.99 L1592.38 1213.99 L1592.96 1213.99 L1593.55 1213.99 L1594.14 1213.99 L1594.72 1213.99 L1595.31 1213.99 L1595.89 1213.99 L1596.48 1213.99 L1597.07 1213.99 L1597.65 1213.99 L1598.24 1213.99 L1598.83 1213.99 L1599.41 1213.99 L1600 1213.99 L1600.59 1213.99 L1601.17 1213.99 L1601.76 1213.99 L1602.34 1213.99 L1602.93 1213.99 L1603.52 1213.99 L1604.1 1213.99 L1604.69 1213.99 L1605.28 1213.99 L1605.86 1213.99 L1606.45 1213.99 L1607.04 1213.99 L1607.62 1213.99 L1608.21 1213.99 L1608.8 1213.99 L1609.38 1213.99 L1609.97 1213.99 L1610.55 1213.99 L1611.14 1213.99 L1611.73 1213.99 L1612.31 1213.99 L1612.9 1213.99 L1613.49 1213.99 L1614.07 1213.99 L1614.66 1213.99 L1615.25 1213.99 L1615.83 1213.99 L1616.42 1213.99 L1617.01 1213.99 L1617.59 1213.99 L1618.18 1213.99 L1618.76 1213.99 L1619.35 1213.99 L1619.94 1213.99 L1620.52 1213.99 L1621.11 1213.99 L1621.7 1213.99 L1622.28 1213.99 L1622.87 1213.99 L1623.46 1213.99 L1624.04 1213.99 L1624.63 1213.99 L1625.22 1213.99 L1625.8 1213.99 L1626.39 1213.99 L1626.97 1213.99 L1627.56 1213.99 L1628.15 1213.99 L1628.73 1213.99 L1629.32 1213.99 L1629.91 1213.99 L1630.49 1213.99 L1631.08 1213.99 L1631.67 1213.99 L1632.25 1213.99 L1632.84 1213.99 L1633.42 1213.99 L1634.01 1213.99 L1634.6 1213.99 L1635.18 1213.99 L1635.77 1213.99 L1636.36 1213.99 L1636.94 1213.99 L1637.53 1213.99 L1638.12 1213.99 L1638.7 1213.99 L1639.29 1213.99 L1639.88 1213.99 L1640.46 1213.99 L1641.05 1213.99 L1641.63 1213.99 L1642.22 1213.99 L1642.81 1213.99 L1643.39 1213.99 L1643.98 1213.99 L1644.57 1213.99 L1645.15 1213.99 L1645.74 1213.99 L1646.33 1213.99 L1646.91 1213.99 L1647.5 1213.99 L1648.09 1213.99 L1648.67 1213.99 L1649.26 1213.99 L1649.84 1213.99 L1650.43 1213.99 L1651.02 1213.99 L1651.6 1213.99 L1652.19 1213.99 L1652.78 1213.99 L1653.36 1213.99 L1653.95 1213.99 L1654.54 1213.99 L1655.12 1213.99 L1655.71 1213.99 L1656.29 1213.99 L1656.88 1213.99 L1657.47 1213.99 L1658.05 1213.99 L1658.64 1213.99 L1659.23 1213.99 L1659.81 1213.99 L1660.4 1213.99 L1660.99 1213.99 L1661.57 1213.99 L1662.16 1213.99 L1662.75 1213.99 L1663.33 1213.99 L1663.92 1213.99 L1664.5 1213.99 L1665.09 1213.99 L1665.68 1213.99 L1666.26 1213.99 L1666.85 1213.99 L1667.44 1213.99 L1668.02 1213.99 L1668.61 1213.99 L1669.2 1213.99 L1669.78 1213.99 L1670.37 1213.99 L1670.96 1213.99 L1671.54 1213.99 L1672.13 1213.99 L1672.71 1213.99 L1673.3 1213.99 L1673.89 1213.99 L1674.47 1213.99 L1675.06 1213.99 L1675.65 1213.99 L1676.23 1213.99 L1676.82 1213.99 L1677.41 1213.99 L1677.99 1213.99 L1678.58 1213.99 L1679.17 1213.99 L1679.75 1213.99 L1680.34 1213.99 L1680.92 1213.99 L1681.51 1213.99 L1682.1 1213.99 L1682.68 1213.99 L1683.27 1213.99 L1683.86 1213.99 L1684.44 1213.99 L1685.03 1213.99 L1685.62 1213.99 L1686.2 1213.99 L1686.79 1213.99 L1687.37 1213.99 L1687.96 1213.99 L1688.55 1213.99 L1689.13 1213.99 L1689.72 1213.99 L1690.31 1213.99 L1690.89 1213.99 L1691.48 1213.99 L1692.07 1213.99 L1692.65 1213.99 L1693.24 1213.99 L1693.83 1213.99 L1694.41 1213.99 L1695 1213.99 L1695.58 1213.99 L1696.17 1213.99 L1696.76 1213.99 L1697.34 1213.99 L1697.93 1213.99 L1698.52 1213.99 L1699.1 1213.99 L1699.69 1213.99 L1700.28 1213.99 L1700.86 1213.99 L1701.45 1213.99 L1702.04 1213.99 L1702.62 1213.99 L1703.21 1213.99 L1703.79 1213.99 L1704.38 1213.99 L1704.97 1213.99 L1705.55 1213.99 L1706.14 1213.99 L1706.73 1213.99 L1707.31 1213.99 L1707.9 1213.99 L1708.49 1213.99 L1709.07 1213.99 L1709.66 1213.99 L1710.24 1213.99 L1710.83 1213.99 L1711.42 1213.99 L1712 1213.99 L1712.59 1213.99 L1713.18 1213.99 L1713.76 1213.99 L1714.35 1213.99 L1714.94 1213.99 L1715.52 1213.99 L1716.11 1213.99 L1716.7 1213.99 L1717.28 1213.99 L1717.87 1213.99 L1718.45 1213.99 L1719.04 1213.99 L1719.63 1213.99 L1720.21 1213.99 L1720.8 1213.99 L1721.39 1213.99 L1721.97 1213.99 L1722.56 1213.99 L1723.15 1213.99 L1723.73 1213.99 L1724.32 1213.99 L1724.91 1213.99 L1725.49 1213.99 L1726.08 1213.99 L1726.66 1213.99 L1727.25 1213.99 L1727.84 1213.99 L1728.42 1213.99 L1729.01 1213.99 L1729.6 1213.99 L1730.18 1213.99 L1730.77 1213.99 L1731.36 1213.99 L1731.94 1213.99 L1732.53 1213.99 L1733.11 1213.99 L1733.7 1213.99 L1734.29 1213.99 L1734.87 1213.99 L1735.46 1213.99 L1736.05 1213.99 L1736.63 1213.99 L1737.22 1213.99 L1737.81 1213.99 L1738.39 1213.99 L1738.98 1213.99 L1739.57 1213.99 L1740.15 1213.99 L1740.74 1213.99 L1741.32 1213.99 L1741.91 1213.99 L1742.5 1213.99 L1743.08 1213.99 L1743.67 1213.99 L1744.26 1213.99 L1744.84 1213.99 L1745.43 1213.99 L1746.02 1213.99 L1746.6 1213.99 L1747.19 1213.99 L1747.78 1213.99 L1748.36 1213.99 L1748.95 1213.99 L1749.53 1213.99 L1750.12 1213.99 L1750.71 1213.99 L1751.29 1213.99 L1751.88 1213.99 L1752.47 1213.99 L1753.05 1213.99 L1753.64 1213.99 L1754.23 1213.99 L1754.81 1213.99 L1755.4 1213.99 L1755.99 1213.99 L1756.57 1213.99 L1757.16 1213.99 L1757.74 1213.99 L1758.33 1213.99 L1758.92 1213.99 L1759.5 1213.99 L1760.09 1213.99 L1760.68 1213.99 L1761.26 1213.99 L1761.85 1213.99 L1762.44 1213.99 L1763.02 1213.99 L1763.61 1213.99 L1764.19 1213.99 L1764.78 1213.99 L1765.37 1213.99 L1765.95 1213.99 L1766.54 1213.99 L1767.13 1213.99 L1767.71 1213.99 L1768.3 1213.99 L1768.89 1213.99 L1769.47 1213.99 L1770.06 1213.99 L1770.65 1213.99 L1771.23 1213.99 L1771.82 1213.99 L1772.4 1213.99 L1772.99 1213.99 L1773.58 1213.99 L1774.16 1213.99 L1774.75 1213.99 L1775.34 1213.99 L1775.92 1213.99 L1776.51 1213.99 L1777.1 1213.99 L1777.68 1213.99 L1778.27 1213.99 L1778.86 1213.99 L1779.44 1213.99 L1780.03 1213.99 L1780.61 1213.99 L1781.2 1213.99 L1781.79 1213.99 L1782.37 1213.99 L1782.96 1213.99 L1783.55 1213.99 L1784.13 1213.99 L1784.72 1213.99 L1785.31 1213.99 L1785.89 1213.99 L1786.48 1213.99 L1787.06 1213.99 L1787.65 1213.99 L1788.24 1213.99 L1788.82 1213.99 L1789.41 1213.99 L1790 1213.99 L1790.58 1213.99 L1791.17 1213.99 L1791.76 1213.99 L1792.34 1213.99 L1792.93 1213.99 L1793.52 1213.99 L1794.1 1213.99 L1794.69 1213.99 L1795.27 1213.99 L1795.86 1213.99 L1796.45 1213.99 L1797.03 1213.99 L1797.62 1213.99 L1798.21 1213.99 L1798.79 1213.99 L1799.38 1213.99 L1799.97 1213.99 L1800.55 1213.99 L1801.14 1213.99 L1801.73 1213.99 L1802.31 1213.99 L1802.9 1213.99 L1803.48 1213.99 L1804.07 1213.99 L1804.66 1213.99 L1805.24 1213.99 L1805.83 1213.99 L1806.42 1213.99 L1807 1213.99 L1807.59 1213.99 L1808.18 1213.99 L1808.76 1213.99 L1809.35 1213.99 L1809.94 1213.99 L1810.52 1213.99 L1811.11 1213.99 L1811.69 1213.99 L1812.28 1213.99 L1812.87 1213.99 L1813.45 1213.99 L1814.04 1213.99 L1814.63 1213.99 L1815.21 1213.99 L1815.8 1213.99 L1816.39 1213.99 L1816.97 1213.99 L1817.56 1213.99 L1818.14 1213.99 L1818.73 1213.99 L1819.32 1213.99 L1819.9 1213.99 L1820.49 1213.99 L1821.08 1213.99 L1821.66 1213.99 L1822.25 1213.99 L1822.84 1213.99 L1823.42 1213.99 L1824.01 1213.99 L1824.6 1213.99 L1825.18 1213.99 L1825.77 1213.99 L1826.35 1213.99 L1826.94 1213.99 L1827.53 1213.99 L1828.11 1213.99 L1828.7 1213.99 L1829.29 1213.99 L1829.87 1213.99 L1830.46 1213.99 L1831.05 1213.99 L1831.63 1213.99 L1832.22 1213.99 L1832.81 1213.99 L1833.39 1213.99 L1833.98 1213.99 L1834.56 1213.99 L1835.15 1213.99 L1835.74 1213.99 L1836.32 1213.99 L1836.91 1213.99 L1837.5 1213.99 L1838.08 1213.99 L1838.67 1213.99 L1839.26 1213.99 L1839.84 1213.99 L1840.43 1213.99 L1841.01 1213.99 L1841.6 1213.99 L1842.19 1213.99 L1842.77 1213.99 L1843.36 1213.99 L1843.95 1213.99 L1844.53 1213.99 L1845.12 1213.99 L1845.71 1213.99 L1846.29 1213.99 L1846.88 1213.99 L1847.47 1213.99 L1848.05 1213.99 L1848.64 1213.99 L1849.22 1213.99 L1849.81 1213.99 L1850.4 1213.99 L1850.98 1213.99 L1851.57 1213.99 L1852.16 1213.99 L1852.74 1213.99 L1853.33 1213.99 L1853.92 1213.99 L1854.5 1213.99 L1855.09 1213.99 L1855.68 1213.99 L1856.26 1213.99 L1856.85 1213.99 L1857.43 1213.99 L1858.02 1213.99 L1858.61 1213.99 L1859.19 1213.99 L1859.78 1213.99 L1860.37 1213.99 L1860.95 1213.99 L1861.54 1213.99 L1862.13 1213.99 L1862.71 1213.99 L1863.3 1213.99 L1863.88 1213.99 L1864.47 1213.99 L1865.06 1213.99 L1865.64 1213.99 L1866.23 1213.99 L1866.82 1213.99 L1867.4 1213.99 L1867.99 1213.99 L1868.58 1213.99 L1869.16 1213.99 L1869.75 1213.99 L1870.34 1213.99 L1870.92 1213.99 L1871.51 1213.99 L1872.09 1213.99 L1872.68 1213.99 L1873.27 1213.99 L1873.85 1213.99 L1874.44 1213.99 L1875.03 1213.99 L1875.61 1213.99 L1876.2 1213.99 L1876.79 1213.99 L1877.37 1213.99 L1877.96 1213.99 L1878.55 1213.99 L1879.13 1213.99 L1879.72 1213.99 L1880.3 1213.99 L1880.89 1213.99 L1881.48 1213.99 L1882.06 1213.99 L1882.65 1213.99 L1883.24 1213.99 L1883.82 1213.99 L1884.41 1213.99 L1885 1213.99 L1885.58 1213.99 L1886.17 1213.99 L1886.76 1213.99 L1887.34 1213.99 L1887.93 1213.99 L1888.51 1213.99 L1889.1 1213.99 L1889.69 1213.99 L1890.27 1213.99 L1890.86 1213.99 L1891.45 1213.99 L1892.03 1213.99 L1892.62 1213.99 L1893.21 1213.99 L1893.79 1213.99 L1894.38 1213.99 L1894.96 1213.99 L1895.55 1213.99 L1896.14 1213.99 L1896.72 1213.99 L1897.31 1213.99 L1897.9 1213.99 L1898.48 1213.99 L1899.07 1213.99 L1899.66 1213.99 L1900.24 1213.99 L1900.83 1213.99 L1901.42 1213.99 L1902 1213.99 L1902.59 1213.99 L1903.17 1213.99 L1903.76 1213.99 L1904.35 1213.99 L1904.93 1213.99 L1905.52 1213.99 L1906.11 1213.99 L1906.69 1213.99 L1907.28 1213.99 L1907.87 1213.99 L1908.45 1213.99 L1909.04 1213.99 L1909.63 1213.99 L1910.21 1213.99 L1910.8 1213.99 L1911.38 1213.99 L1911.97 1213.99 L1912.56 1213.99 L1913.14 1213.99 L1913.73 1213.99 L1914.32 1213.99 L1914.9 1213.99 L1915.49 1213.99 L1916.08 1213.99 L1916.66 1213.99 L1917.25 1213.99 L1917.83 1213.99 L1918.42 1213.99 L1919.01 1213.99 L1919.59 1213.99 L1920.18 1213.99 L1920.77 1213.99 L1921.35 1213.99 L1921.94 1213.99 L1922.53 1213.99 L1923.11 1213.99 L1923.7 1213.99 L1924.29 1213.99 L1924.87 1213.99 L1925.46 1213.99 L1926.04 1213.99 L1926.63 1213.99 L1927.22 1213.99 L1927.8 1213.99 L1928.39 1213.99 L1928.98 1213.99 L1929.56 1213.99 L1930.15 1213.99 L1930.74 1213.99 L1931.32 1213.99 L1931.91 1213.99 L1932.5 1213.99 L1933.08 1213.99 L1933.67 1213.99 L1934.25 1213.99 L1934.84 1213.99 L1935.43 1213.99 L1936.01 1213.99 L1936.6 1213.99 L1937.19 1213.99 L1937.77 1213.99 L1938.36 1213.99 L1938.95 1213.99 L1939.53 1213.99 L1940.12 1213.99 L1940.71 1213.99 L1941.29 1213.99 L1941.88 1213.99 L1942.46 1213.99 L1943.05 1213.99 L1943.64 1213.99 L1944.22 1213.99 L1944.81 1213.99 L1945.4 1213.99 L1945.98 1213.99 L1946.57 1213.99 L1947.16 1213.99 L1947.74 1213.99 L1948.33 1213.99 L1948.91 1213.99 L1949.5 1213.99 L1950.09 1213.99 L1950.67 1213.99 L1951.26 1213.99 L1951.85 1213.99 L1952.43 1213.99 L1953.02 1213.99 L1953.61 1213.99 L1954.19 1213.99 L1954.78 1213.99 L1955.37 1213.99 L1955.95 1213.99 L1956.54 1213.99 L1957.12 1213.99 L1957.71 1213.99 L1958.3 1213.99 L1958.88 1213.99 L1959.47 1213.99 L1960.06 1213.99 L1960.64 1213.99 L1961.23 1213.99 L1961.82 1213.99 L1962.4 1213.99 L1962.99 1213.99 L1963.58 1213.99 L1964.16 1213.99 L1964.75 1213.99 L1965.33 1213.99 L1965.92 1213.99 L1966.51 1213.99 L1967.09 1213.99 L1967.68 1213.99 L1968.27 1213.99 L1968.85 1213.99 L1969.44 1213.99 L1970.03 1213.99 L1970.61 1213.99 L1971.2 1213.99 L1971.78 1213.99 L1972.37 1213.99 L1972.96 1213.99 L1973.54 1213.99 L1974.13 1213.99 L1974.72 1213.99 L1975.3 1213.99 L1975.89 1213.99 L1976.48 1213.99 L1977.06 1213.99 L1977.65 1213.99 L1978.24 1213.99 L1978.82 1213.99 L1979.41 1213.99 L1979.99 1213.99 L1980.58 1213.99 L1981.17 1213.99 L1981.75 1213.99 L1982.34 1213.99 L1982.93 1213.99 L1983.51 1213.99 L1984.1 1213.99 L1984.69 1213.99 L1985.27 1213.99 L1985.86 1213.99 L1986.45 1213.99 L1987.03 1213.99 L1987.62 1213.99 L1988.2 1213.99 L1988.79 1213.99 L1989.38 1213.99 L1989.96 1213.99 L1990.55 1213.99 L1991.14 1213.99 L1991.72 1213.99 L1992.31 1213.99 L1992.9 1213.99 L1993.48 1213.99 L1994.07 1213.99 L1994.65 1213.99 L1995.24 1213.99 L1995.83 1213.99 L1996.41 1213.99 L1997 1213.99 L1997.59 1213.99 L1998.17 1213.99 L1998.76 1213.99 L1999.35 1213.99 L1999.93 1213.99 L2000.52 1213.99 L2001.11 1213.99 L2001.69 1213.99 L2002.28 1213.99 L2002.86 1213.99 L2003.45 1213.99 L2004.04 1213.99 L2004.62 1213.99 L2005.21 1213.99 L2005.8 1213.99 L2006.38 1213.99 L2006.97 1213.99 L2007.56 1213.99 L2008.14 1213.99 L2008.73 1213.99 L2009.32 1213.99 L2009.9 1213.99 L2010.49 1213.99 L2011.07 1213.99 L2011.66 1213.99 L2012.25 1213.99 L2012.83 1213.99 L2013.42 1213.99 L2014.01 1213.99 L2014.59 1213.99 L2015.18 1213.99 L2015.77 1213.99 L2016.35 1213.99 L2016.94 1213.99 L2017.53 1213.99 L2018.11 1213.99 L2018.7 1213.99 L2019.28 1213.99 L2019.87 1213.99 L2020.46 1213.99 L2021.04 1213.99 L2021.63 1213.99 L2022.22 1213.99 L2022.8 1213.99 L2023.39 1213.99 L2023.98 1213.99 L2024.56 1213.99 L2025.15 1213.99 L2025.73 1213.99 L2026.32 1213.99 L2026.91 1213.99 L2027.49 1213.99 L2028.08 1213.99 L2028.67 1213.99 L2029.25 1213.99 L2029.84 1213.99 L2030.43 1213.99 L2031.01 1213.99 L2031.6 1213.99 L2032.19 1213.99 L2032.77 1213.99 L2033.36 1213.99 L2033.94 1213.99 L2034.53 1213.99 L2035.12 1213.99 L2035.7 1213.99 L2036.29 1213.99 L2036.88 1213.99 L2037.46 1213.99 L2038.05 1213.99 L2038.64 1213.99 L2039.22 1213.99 L2039.81 1213.99 L2040.4 1213.99 L2040.98 1213.99 L2041.57 1213.99 L2042.15 1213.99 L2042.74 1213.99 L2043.33 1213.99 L2043.91 1213.99 L2044.5 1213.99 L2045.09 1213.99 L2045.67 1213.99 L2046.26 1213.99 L2046.85 1213.99 L2047.43 1213.99 L2048.02 1213.99 L2048.6 1213.99 L2049.19 1213.99 L2049.78 1213.99 L2050.36 1213.99 L2050.95 1213.99 L2051.54 1213.99 L2052.12 1213.99 L2052.71 1213.99 L2053.3 1213.99 L2053.88 1213.99 L2054.47 1213.99 L2055.06 1213.99 L2055.64 1213.99 L2056.23 1213.99 L2056.81 1213.99 L2057.4 1213.99 L2057.99 1213.99 L2058.57 1213.99 L2059.16 1213.99 L2059.75 1213.99 L2060.33 1213.99 L2060.92 1213.99 L2061.51 1213.99 L2062.09 1213.99 L2062.68 1213.99 L2063.27 1213.99 L2063.85 1213.99 L2064.44 1213.99 L2065.02 1213.99 L2065.61 1213.99 L2066.2 1213.99 L2066.78 1213.99 L2067.37 1213.99 L2067.96 1213.99 L2068.54 1213.99 L2069.13 1213.99 L2069.72 1213.99 L2070.3 1213.99 L2070.89 1213.99 L2071.48 1213.99 L2072.06 1213.99 L2072.65 1213.99 L2073.23 1213.99 L2073.82 1213.99 L2074.41 1213.99 L2074.99 1213.99 L2075.58 1213.99 L2076.17 1213.99 L2076.75 1213.99 L2077.34 1213.99 L2077.93 1213.99 L2078.51 1213.99 L2079.1 1213.99 L2079.68 1213.99 L2080.27 1213.99 L2080.86 1213.99 L2081.44 1213.99 L2082.03 1213.99 L2082.62 1213.99 L2083.2 1213.99 L2083.79 1213.99 L2084.38 1213.99 L2084.96 1213.99 L2085.55 1213.99 L2086.14 1213.99 L2086.72 1213.99 L2087.31 1213.99 L2087.89 1213.99 L2088.48 1213.99 L2089.07 1213.99 L2089.65 1213.99 L2090.24 1213.99 L2090.83 1213.99 L2091.41 1213.99 L2092 1213.99 L2092.59 1213.99 L2093.17 1213.99 L2093.76 1213.99 L2094.35 1213.99 L2094.93 1213.99 L2095.52 1213.99 L2096.1 1213.99 L2096.69 1213.99 L2097.28 1213.99 L2097.86 1213.99 L2098.45 1213.99 L2099.04 1213.99 L2099.62 1213.99 L2100.21 1213.99 L2100.8 1213.99 L2101.38 1213.99 L2101.97 1213.99 L2102.55 1213.99 L2103.14 1213.99 L2103.73 1213.99 L2104.31 1213.99 L2104.9 1213.99 L2105.49 1213.99 L2106.07 1213.99 L2106.66 1213.99 L2107.25 1213.99 L2107.83 1213.99 L2108.42 1213.99 L2109.01 1213.99 L2109.59 1213.99 L2110.18 1213.99 L2110.76 1213.99 L2111.35 1213.99 L2111.94 1213.99 L2112.52 1213.99 L2113.11 1213.99 L2113.7 1213.99 L2114.28 1213.99 L2114.87 1213.99 L2115.46 1213.99 L2116.04 1213.99 L2116.63 1213.99 L2117.22 1213.99 L2117.8 1213.99 L2118.39 1213.99 L2118.97 1213.99 L2119.56 1213.99 L2120.15 1213.99 L2120.73 1213.99 L2121.32 1213.99 L2121.91 1213.99 L2122.49 1213.99 L2123.08 1213.99 L2123.67 1213.99 L2124.25 1213.99 L2124.84 1213.99 L2125.42 1213.99 L2126.01 1213.99 L2126.6 1213.99 L2127.18 1213.99 L2127.77 1213.99 L2128.36 1213.99 L2128.94 1213.99 L2129.53 1213.99 L2130.12 1213.99 L2130.7 1213.99 L2131.29 1213.99 L2131.88 1213.99 L2132.46 1213.99 L2133.05 1213.99 L2133.63 1213.99 L2134.22 1213.99 L2134.81 1213.99 L2135.39 1213.99 L2135.98 1213.99 L2136.57 1213.99 L2137.15 1213.99 L2137.74 1213.99 L2138.33 1213.99 L2138.91 1213.99 L2139.5 1213.99 L2140.09 1213.99 L2140.67 1213.99 L2141.26 1213.99 L2141.84 1213.99 L2142.43 1213.99 L2143.02 1213.99 L2143.6 1213.99 L2144.19 1213.99 L2144.78 1213.99 L2145.36 1213.99 L2145.95 1213.99 L2146.54 1213.99 L2147.12 1213.99 L2147.71 1213.99 L2148.3 1213.99 L2148.88 1213.99 L2149.47 1213.99 L2150.05 1213.99 L2150.64 1213.99 L2151.23 1213.99 L2151.81 1213.99 L2152.4 1213.99 L2152.99 1213.99 L2153.57 1213.99 L2154.16 1213.99 L2154.75 1213.99 L2155.33 1213.99 L2155.92 1213.99 L2156.5 1213.99 L2157.09 1213.99 L2157.68 1213.99 L2158.26 1213.99 L2158.26 1213.87 L2157.68 1213.87 L2157.09 1213.87 L2156.5 1213.87 L2155.92 1213.87 L2155.33 1213.87 L2154.75 1213.87 L2154.16 1213.87 L2153.57 1213.87 L2152.99 1213.87 L2152.4 1213.87 L2151.81 1213.87 L2151.23 1213.87 L2150.64 1213.87 L2150.05 1213.87 L2149.47 1213.87 L2148.88 1213.87 L2148.3 1213.87 L2147.71 1213.87 L2147.12 1213.87 L2146.54 1213.87 L2145.95 1213.87 L2145.36 1213.87 L2144.78 1213.87 L2144.19 1213.87 L2143.6 1213.87 L2143.02 1213.87 L2142.43 1213.87 L2141.84 1213.87 L2141.26 1213.87 L2140.67 1213.87 L2140.09 1213.87 L2139.5 1213.87 L2138.91 1213.87 L2138.33 1213.87 L2137.74 1213.87 L2137.15 1213.87 L2136.57 1213.87 L2135.98 1213.87 L2135.39 1213.87 L2134.81 1213.87 L2134.22 1213.87 L2133.63 1213.87 L2133.05 1213.87 L2132.46 1213.87 L2131.88 1213.87 L2131.29 1213.87 L2130.7 1213.87 L2130.12 1213.87 L2129.53 1213.87 L2128.94 1213.87 L2128.36 1213.87 L2127.77 1213.87 L2127.18 1213.87 L2126.6 1213.87 L2126.01 1213.87 L2125.42 1213.87 L2124.84 1213.87 L2124.25 1213.87 L2123.67 1213.87 L2123.08 1213.87 L2122.49 1213.87 L2121.91 1213.87 L2121.32 1213.87 L2120.73 1213.87 L2120.15 1213.87 L2119.56 1213.87 L2118.97 1213.87 L2118.39 1213.87 L2117.8 1213.87 L2117.22 1213.87 L2116.63 1213.87 L2116.04 1213.87 L2115.46 1213.87 L2114.87 1213.87 L2114.28 1213.87 L2113.7 1213.87 L2113.11 1213.87 L2112.52 1213.87 L2111.94 1213.87 L2111.35 1213.87 L2110.76 1213.87 L2110.18 1213.87 L2109.59 1213.87 L2109.01 1213.87 L2108.42 1213.87 L2107.83 1213.87 L2107.25 1213.87 L2106.66 1213.87 L2106.07 1213.87 L2105.49 1213.87 L2104.9 1213.87 L2104.31 1213.87 L2103.73 1213.87 L2103.14 1213.87 L2102.55 1213.87 L2101.97 1213.87 L2101.38 1213.87 L2100.8 1213.87 L2100.21 1213.87 L2099.62 1213.87 L2099.04 1213.87 L2098.45 1213.87 L2097.86 1213.87 L2097.28 1213.87 L2096.69 1213.87 L2096.1 1213.87 L2095.52 1213.87 L2094.93 1213.87 L2094.35 1213.87 L2093.76 1213.87 L2093.17 1213.87 L2092.59 1213.87 L2092 1213.87 L2091.41 1213.87 L2090.83 1213.87 L2090.24 1213.87 L2089.65 1213.87 L2089.07 1213.87 L2088.48 1213.87 L2087.89 1213.87 L2087.31 1213.87 L2086.72 1213.87 L2086.14 1213.87 L2085.55 1213.87 L2084.96 1213.87 L2084.38 1213.87 L2083.79 1213.87 L2083.2 1213.87 L2082.62 1213.87 L2082.03 1213.87 L2081.44 1213.87 L2080.86 1213.87 L2080.27 1213.87 L2079.68 1213.87 L2079.1 1213.87 L2078.51 1213.87 L2077.93 1213.87 L2077.34 1213.87 L2076.75 1213.87 L2076.17 1213.87 L2075.58 1213.87 L2074.99 1213.87 L2074.41 1213.87 L2073.82 1213.87 L2073.23 1213.87 L2072.65 1213.87 L2072.06 1213.87 L2071.48 1213.87 L2070.89 1213.87 L2070.3 1213.87 L2069.72 1213.87 L2069.13 1213.87 L2068.54 1213.87 L2067.96 1213.87 L2067.37 1213.87 L2066.78 1213.87 L2066.2 1213.87 L2065.61 1213.87 L2065.02 1213.87 L2064.44 1213.87 L2063.85 1213.87 L2063.27 1213.87 L2062.68 1213.87 L2062.09 1213.87 L2061.51 1213.87 L2060.92 1213.87 L2060.33 1213.87 L2059.75 1213.87 L2059.16 1213.87 L2058.57 1213.87 L2057.99 1213.87 L2057.4 1213.87 L2056.81 1213.87 L2056.23 1213.87 L2055.64 1213.87 L2055.06 1213.87 L2054.47 1213.87 L2053.88 1213.87 L2053.3 1213.87 L2052.71 1213.87 L2052.12 1213.87 L2051.54 1213.87 L2050.95 1213.87 L2050.36 1213.87 L2049.78 1213.87 L2049.19 1213.87 L2048.6 1213.87 L2048.02 1213.87 L2047.43 1213.87 L2046.85 1213.87 L2046.26 1213.87 L2045.67 1213.87 L2045.09 1213.87 L2044.5 1213.87 L2043.91 1213.87 L2043.33 1213.87 L2042.74 1213.87 L2042.15 1213.87 L2041.57 1213.87 L2040.98 1213.87 L2040.4 1213.87 L2039.81 1213.87 L2039.22 1213.87 L2038.64 1213.87 L2038.05 1213.87 L2037.46 1213.87 L2036.88 1213.87 L2036.29 1213.87 L2035.7 1213.87 L2035.12 1213.87 L2034.53 1213.87 L2033.94 1213.87 L2033.36 1213.87 L2032.77 1213.87 L2032.19 1213.87 L2031.6 1213.87 L2031.01 1213.87 L2030.43 1213.87 L2029.84 1213.87 L2029.25 1213.87 L2028.67 1213.87 L2028.08 1213.87 L2027.49 1213.87 L2026.91 1213.87 L2026.32 1213.87 L2025.73 1213.87 L2025.15 1213.87 L2024.56 1213.87 L2023.98 1213.87 L2023.39 1213.87 L2022.8 1213.87 L2022.22 1213.87 L2021.63 1213.87 L2021.04 1213.87 L2020.46 1213.87 L2019.87 1213.87 L2019.28 1213.87 L2018.7 1213.87 L2018.11 1213.87 L2017.53 1213.87 L2016.94 1213.87 L2016.35 1213.87 L2015.77 1213.87 L2015.18 1213.87 L2014.59 1213.87 L2014.01 1213.87 L2013.42 1213.87 L2012.83 1213.87 L2012.25 1213.87 L2011.66 1213.87 L2011.07 1213.87 L2010.49 1213.87 L2009.9 1213.87 L2009.32 1213.87 L2008.73 1213.87 L2008.14 1213.87 L2007.56 1213.87 L2006.97 1213.87 L2006.38 1213.87 L2005.8 1213.87 L2005.21 1213.87 L2004.62 1213.87 L2004.04 1213.87 L2003.45 1213.87 L2002.86 1213.87 L2002.28 1213.87 L2001.69 1213.87 L2001.11 1213.87 L2000.52 1213.87 L1999.93 1213.87 L1999.35 1213.87 L1998.76 1213.87 L1998.17 1213.87 L1997.59 1213.87 L1997 1213.87 L1996.41 1213.87 L1995.83 1213.87 L1995.24 1213.87 L1994.65 1213.87 L1994.07 1213.87 L1993.48 1213.87 L1992.9 1213.87 L1992.31 1213.87 L1991.72 1213.87 L1991.14 1213.87 L1990.55 1213.87 L1989.96 1213.87 L1989.38 1213.87 L1988.79 1213.87 L1988.2 1213.87 L1987.62 1213.87 L1987.03 1213.87 L1986.45 1213.87 L1985.86 1213.87 L1985.27 1213.87 L1984.69 1213.87 L1984.1 1213.87 L1983.51 1213.87 L1982.93 1213.87 L1982.34 1213.87 L1981.75 1213.87 L1981.17 1213.87 L1980.58 1213.87 L1979.99 1213.87 L1979.41 1213.87 L1978.82 1213.87 L1978.24 1213.87 L1977.65 1213.87 L1977.06 1213.87 L1976.48 1213.87 L1975.89 1213.87 L1975.3 1213.87 L1974.72 1213.87 L1974.13 1213.87 L1973.54 1213.87 L1972.96 1213.87 L1972.37 1213.87 L1971.78 1213.87 L1971.2 1213.87 L1970.61 1213.87 L1970.03 1213.87 L1969.44 1213.87 L1968.85 1213.87 L1968.27 1213.87 L1967.68 1213.87 L1967.09 1213.87 L1966.51 1213.87 L1965.92 1213.87 L1965.33 1213.87 L1964.75 1213.87 L1964.16 1213.87 L1963.58 1213.87 L1962.99 1213.87 L1962.4 1213.87 L1961.82 1213.87 L1961.23 1213.87 L1960.64 1213.87 L1960.06 1213.87 L1959.47 1213.87 L1958.88 1213.87 L1958.3 1213.87 L1957.71 1213.87 L1957.12 1213.87 L1956.54 1213.87 L1955.95 1213.87 L1955.37 1213.87 L1954.78 1213.87 L1954.19 1213.87 L1953.61 1213.87 L1953.02 1213.87 L1952.43 1213.87 L1951.85 1213.87 L1951.26 1213.87 L1950.67 1213.87 L1950.09 1213.87 L1949.5 1213.87 L1948.91 1213.87 L1948.33 1213.87 L1947.74 1213.87 L1947.16 1213.87 L1946.57 1213.87 L1945.98 1213.87 L1945.4 1213.87 L1944.81 1213.87 L1944.22 1213.87 L1943.64 1213.87 L1943.05 1213.87 L1942.46 1213.87 L1941.88 1213.87 L1941.29 1213.87 L1940.71 1213.87 L1940.12 1213.87 L1939.53 1213.87 L1938.95 1213.87 L1938.36 1213.87 L1937.77 1213.87 L1937.19 1213.87 L1936.6 1213.87 L1936.01 1213.87 L1935.43 1213.87 L1934.84 1213.87 L1934.25 1213.87 L1933.67 1213.87 L1933.08 1213.87 L1932.5 1213.87 L1931.91 1213.87 L1931.32 1213.87 L1930.74 1213.87 L1930.15 1213.87 L1929.56 1213.87 L1928.98 1213.87 L1928.39 1213.87 L1927.8 1213.87 L1927.22 1213.87 L1926.63 1213.87 L1926.04 1213.87 L1925.46 1213.87 L1924.87 1213.87 L1924.29 1213.87 L1923.7 1213.87 L1923.11 1213.87 L1922.53 1213.87 L1921.94 1213.87 L1921.35 1213.87 L1920.77 1213.87 L1920.18 1213.87 L1919.59 1213.87 L1919.01 1213.87 L1918.42 1213.87 L1917.83 1213.87 L1917.25 1213.87 L1916.66 1213.87 L1916.08 1213.87 L1915.49 1213.87 L1914.9 1213.87 L1914.32 1213.87 L1913.73 1213.87 L1913.14 1213.87 L1912.56 1213.87 L1911.97 1213.87 L1911.38 1213.87 L1910.8 1213.87 L1910.21 1213.87 L1909.63 1213.87 L1909.04 1213.87 L1908.45 1213.87 L1907.87 1213.87 L1907.28 1213.87 L1906.69 1213.87 L1906.11 1213.87 L1905.52 1213.87 L1904.93 1213.87 L1904.35 1213.87 L1903.76 1213.87 L1903.17 1213.87 L1902.59 1213.87 L1902 1213.87 L1901.42 1213.87 L1900.83 1213.87 L1900.24 1213.87 L1899.66 1213.87 L1899.07 1213.87 L1898.48 1213.87 L1897.9 1213.87 L1897.31 1213.87 L1896.72 1213.87 L1896.14 1213.87 L1895.55 1213.87 L1894.96 1213.87 L1894.38 1213.87 L1893.79 1213.87 L1893.21 1213.87 L1892.62 1213.87 L1892.03 1213.87 L1891.45 1213.87 L1890.86 1213.87 L1890.27 1213.87 L1889.69 1213.87 L1889.1 1213.87 L1888.51 1213.87 L1887.93 1213.87 L1887.34 1213.87 L1886.76 1213.87 L1886.17 1213.87 L1885.58 1213.87 L1885 1213.87 L1884.41 1213.87 L1883.82 1213.87 L1883.24 1213.87 L1882.65 1213.87 L1882.06 1213.87 L1881.48 1213.87 L1880.89 1213.87 L1880.3 1213.87 L1879.72 1213.87 L1879.13 1213.87 L1878.55 1213.87 L1877.96 1213.87 L1877.37 1213.87 L1876.79 1213.87 L1876.2 1213.87 L1875.61 1213.87 L1875.03 1213.87 L1874.44 1213.87 L1873.85 1213.87 L1873.27 1213.87 L1872.68 1213.87 L1872.09 1213.87 L1871.51 1213.87 L1870.92 1213.87 L1870.34 1213.87 L1869.75 1213.87 L1869.16 1213.87 L1868.58 1213.87 L1867.99 1213.87 L1867.4 1213.87 L1866.82 1213.87 L1866.23 1213.87 L1865.64 1213.87 L1865.06 1213.87 L1864.47 1213.87 L1863.88 1213.87 L1863.3 1213.87 L1862.71 1213.87 L1862.13 1213.87 L1861.54 1213.87 L1860.95 1213.87 L1860.37 1213.87 L1859.78 1213.87 L1859.19 1213.87 L1858.61 1213.87 L1858.02 1213.87 L1857.43 1213.87 L1856.85 1213.87 L1856.26 1213.87 L1855.68 1213.87 L1855.09 1213.87 L1854.5 1213.87 L1853.92 1213.87 L1853.33 1213.87 L1852.74 1213.87 L1852.16 1213.87 L1851.57 1213.87 L1850.98 1213.87 L1850.4 1213.87 L1849.81 1213.87 L1849.22 1213.87 L1848.64 1213.87 L1848.05 1213.87 L1847.47 1213.87 L1846.88 1213.87 L1846.29 1213.87 L1845.71 1213.87 L1845.12 1213.87 L1844.53 1213.87 L1843.95 1213.87 L1843.36 1213.87 L1842.77 1213.87 L1842.19 1213.87 L1841.6 1213.87 L1841.01 1213.87 L1840.43 1213.87 L1839.84 1213.87 L1839.26 1213.87 L1838.67 1213.87 L1838.08 1213.87 L1837.5 1213.87 L1836.91 1213.87 L1836.32 1213.87 L1835.74 1213.87 L1835.15 1213.87 L1834.56 1213.87 L1833.98 1213.87 L1833.39 1213.87 L1832.81 1213.87 L1832.22 1213.87 L1831.63 1213.87 L1831.05 1213.87 L1830.46 1213.87 L1829.87 1213.87 L1829.29 1213.87 L1828.7 1213.87 L1828.11 1213.87 L1827.53 1213.87 L1826.94 1213.87 L1826.35 1213.87 L1825.77 1213.87 L1825.18 1213.87 L1824.6 1213.87 L1824.01 1213.87 L1823.42 1213.87 L1822.84 1213.87 L1822.25 1213.87 L1821.66 1213.87 L1821.08 1213.87 L1820.49 1213.87 L1819.9 1213.87 L1819.32 1213.87 L1818.73 1213.87 L1818.14 1213.87 L1817.56 1213.87 L1816.97 1213.87 L1816.39 1213.87 L1815.8 1213.87 L1815.21 1213.87 L1814.63 1213.87 L1814.04 1213.87 L1813.45 1213.87 L1812.87 1213.87 L1812.28 1213.87 L1811.69 1213.87 L1811.11 1213.87 L1810.52 1213.87 L1809.94 1213.87 L1809.35 1213.87 L1808.76 1213.87 L1808.18 1213.87 L1807.59 1213.87 L1807 1213.87 L1806.42 1213.87 L1805.83 1213.87 L1805.24 1213.87 L1804.66 1213.87 L1804.07 1213.87 L1803.48 1213.87 L1802.9 1213.87 L1802.31 1213.87 L1801.73 1213.87 L1801.14 1213.87 L1800.55 1213.87 L1799.97 1213.87 L1799.38 1213.87 L1798.79 1213.87 L1798.21 1213.87 L1797.62 1213.87 L1797.03 1213.87 L1796.45 1213.87 L1795.86 1213.87 L1795.27 1213.87 L1794.69 1213.87 L1794.1 1213.87 L1793.52 1213.87 L1792.93 1213.87 L1792.34 1213.87 L1791.76 1213.87 L1791.17 1213.87 L1790.58 1213.87 L1790 1213.87 L1789.41 1213.87 L1788.82 1213.87 L1788.24 1213.87 L1787.65 1213.87 L1787.06 1213.87 L1786.48 1213.87 L1785.89 1213.87 L1785.31 1213.87 L1784.72 1213.87 L1784.13 1213.87 L1783.55 1213.87 L1782.96 1213.87 L1782.37 1213.87 L1781.79 1213.87 L1781.2 1213.87 L1780.61 1213.87 L1780.03 1213.87 L1779.44 1213.87 L1778.86 1213.87 L1778.27 1213.87 L1777.68 1213.87 L1777.1 1213.87 L1776.51 1213.87 L1775.92 1213.87 L1775.34 1213.87 L1774.75 1213.87 L1774.16 1213.87 L1773.58 1213.87 L1772.99 1213.87 L1772.4 1213.87 L1771.82 1213.87 L1771.23 1213.87 L1770.65 1213.87 L1770.06 1213.87 L1769.47 1213.87 L1768.89 1213.87 L1768.3 1213.87 L1767.71 1213.87 L1767.13 1213.87 L1766.54 1213.87 L1765.95 1213.87 L1765.37 1213.87 L1764.78 1213.87 L1764.19 1213.87 L1763.61 1213.87 L1763.02 1213.87 L1762.44 1213.87 L1761.85 1213.87 L1761.26 1213.87 L1760.68 1213.87 L1760.09 1213.87 L1759.5 1213.87 L1758.92 1213.87 L1758.33 1213.87 L1757.74 1213.87 L1757.16 1213.87 L1756.57 1213.87 L1755.99 1213.87 L1755.4 1213.87 L1754.81 1213.87 L1754.23 1213.87 L1753.64 1213.87 L1753.05 1213.87 L1752.47 1213.87 L1751.88 1213.87 L1751.29 1213.87 L1750.71 1213.87 L1750.12 1213.87 L1749.53 1213.87 L1748.95 1213.87 L1748.36 1213.87 L1747.78 1213.87 L1747.19 1213.87 L1746.6 1213.87 L1746.02 1213.87 L1745.43 1213.87 L1744.84 1213.87 L1744.26 1213.87 L1743.67 1213.87 L1743.08 1213.87 L1742.5 1213.87 L1741.91 1213.87 L1741.32 1213.87 L1740.74 1213.87 L1740.15 1213.87 L1739.57 1213.87 L1738.98 1213.87 L1738.39 1213.87 L1737.81 1213.87 L1737.22 1213.87 L1736.63 1213.87 L1736.05 1213.87 L1735.46 1213.87 L1734.87 1213.87 L1734.29 1213.87 L1733.7 1213.87 L1733.11 1213.87 L1732.53 1213.87 L1731.94 1213.87 L1731.36 1213.87 L1730.77 1213.87 L1730.18 1213.87 L1729.6 1213.87 L1729.01 1213.87 L1728.42 1213.87 L1727.84 1213.87 L1727.25 1213.87 L1726.66 1213.87 L1726.08 1213.87 L1725.49 1213.87 L1724.91 1213.87 L1724.32 1213.87 L1723.73 1213.87 L1723.15 1213.87 L1722.56 1213.87 L1721.97 1213.87 L1721.39 1213.87 L1720.8 1213.87 L1720.21 1213.87 L1719.63 1213.87 L1719.04 1213.87 L1718.45 1213.87 L1717.87 1213.87 L1717.28 1213.87 L1716.7 1213.87 L1716.11 1213.87 L1715.52 1213.87 L1714.94 1213.87 L1714.35 1213.87 L1713.76 1213.87 L1713.18 1213.87 L1712.59 1213.87 L1712 1213.87 L1711.42 1213.87 L1710.83 1213.87 L1710.24 1213.87 L1709.66 1213.87 L1709.07 1213.87 L1708.49 1213.87 L1707.9 1213.87 L1707.31 1213.87 L1706.73 1213.87 L1706.14 1213.87 L1705.55 1213.87 L1704.97 1213.87 L1704.38 1213.87 L1703.79 1213.87 L1703.21 1213.87 L1702.62 1213.87 L1702.04 1213.87 L1701.45 1213.87 L1700.86 1213.87 L1700.28 1213.87 L1699.69 1213.87 L1699.1 1213.87 L1698.52 1213.87 L1697.93 1213.87 L1697.34 1213.87 L1696.76 1213.87 L1696.17 1213.87 L1695.58 1213.87 L1695 1213.87 L1694.41 1213.87 L1693.83 1213.87 L1693.24 1213.87 L1692.65 1213.87 L1692.07 1213.87 L1691.48 1213.87 L1690.89 1213.87 L1690.31 1213.87 L1689.72 1213.87 L1689.13 1213.87 L1688.55 1213.87 L1687.96 1213.87 L1687.37 1213.87 L1686.79 1213.87 L1686.2 1213.87 L1685.62 1213.87 L1685.03 1213.87 L1684.44 1213.87 L1683.86 1213.87 L1683.27 1213.87 L1682.68 1213.87 L1682.1 1213.87 L1681.51 1213.87 L1680.92 1213.87 L1680.34 1213.87 L1679.75 1213.87 L1679.17 1213.87 L1678.58 1213.87 L1677.99 1213.87 L1677.41 1213.87 L1676.82 1213.87 L1676.23 1213.87 L1675.65 1213.87 L1675.06 1213.87 L1674.47 1213.87 L1673.89 1213.87 L1673.3 1213.87 L1672.71 1213.87 L1672.13 1213.87 L1671.54 1213.87 L1670.96 1213.87 L1670.37 1213.87 L1669.78 1213.87 L1669.2 1213.87 L1668.61 1213.87 L1668.02 1213.87 L1667.44 1213.87 L1666.85 1213.87 L1666.26 1213.87 L1665.68 1213.87 L1665.09 1213.87 L1664.5 1213.87 L1663.92 1213.87 L1663.33 1213.87 L1662.75 1213.87 L1662.16 1213.87 L1661.57 1213.87 L1660.99 1213.87 L1660.4 1213.87 L1659.81 1213.87 L1659.23 1213.87 L1658.64 1213.87 L1658.05 1213.87 L1657.47 1213.87 L1656.88 1213.87 L1656.29 1213.87 L1655.71 1213.87 L1655.12 1213.87 L1654.54 1213.87 L1653.95 1213.87 L1653.36 1213.87 L1652.78 1213.87 L1652.19 1213.87 L1651.6 1213.87 L1651.02 1213.87 L1650.43 1213.87 L1649.84 1213.87 L1649.26 1213.87 L1648.67 1213.87 L1648.09 1213.87 L1647.5 1213.87 L1646.91 1213.87 L1646.33 1213.87 L1645.74 1213.87 L1645.15 1213.87 L1644.57 1213.87 L1643.98 1213.87 L1643.39 1213.87 L1642.81 1213.87 L1642.22 1213.87 L1641.63 1213.87 L1641.05 1213.87 L1640.46 1213.87 L1639.88 1213.87 L1639.29 1213.87 L1638.7 1213.87 L1638.12 1213.87 L1637.53 1213.87 L1636.94 1213.87 L1636.36 1213.87 L1635.77 1213.87 L1635.18 1213.87 L1634.6 1213.87 L1634.01 1213.87 L1633.42 1213.87 L1632.84 1213.87 L1632.25 1213.87 L1631.67 1213.87 L1631.08 1213.87 L1630.49 1213.87 L1629.91 1213.87 L1629.32 1213.87 L1628.73 1213.87 L1628.15 1213.87 L1627.56 1213.87 L1626.97 1213.87 L1626.39 1213.87 L1625.8 1213.87 L1625.22 1213.87 L1624.63 1213.87 L1624.04 1213.87 L1623.46 1213.87 L1622.87 1213.87 L1622.28 1213.87 L1621.7 1213.87 L1621.11 1213.87 L1620.52 1213.87 L1619.94 1213.87 L1619.35 1213.87 L1618.76 1213.87 L1618.18 1213.87 L1617.59 1213.87 L1617.01 1213.87 L1616.42 1213.87 L1615.83 1213.87 L1615.25 1213.87 L1614.66 1213.87 L1614.07 1213.87 L1613.49 1213.87 L1612.9 1213.87 L1612.31 1213.87 L1611.73 1213.87 L1611.14 1213.87 L1610.55 1213.87 L1609.97 1213.87 L1609.38 1213.87 L1608.8 1213.87 L1608.21 1213.87 L1607.62 1213.87 L1607.04 1213.87 L1606.45 1213.87 L1605.86 1213.87 L1605.28 1213.87 L1604.69 1213.87 L1604.1 1213.87 L1603.52 1213.87 L1602.93 1213.87 L1602.34 1213.87 L1601.76 1213.87 L1601.17 1213.87 L1600.59 1213.87 L1600 1213.87 L1599.41 1213.87 L1598.83 1213.87 L1598.24 1213.87 L1597.65 1213.87 L1597.07 1213.87 L1596.48 1213.87 L1595.89 1213.87 L1595.31 1213.87 L1594.72 1213.87 L1594.14 1213.87 L1593.55 1213.87 L1592.96 1213.87 L1592.38 1213.87 L1591.79 1213.87 L1591.2 1213.87 L1590.62 1213.87 L1590.03 1213.87 L1589.44 1213.87 L1588.86 1213.87 L1588.27 1213.87 L1587.68 1213.87 L1587.1 1213.87 L1586.51 1213.87 L1585.93 1213.87 L1585.34 1213.87 L1584.75 1213.87 L1584.17 1213.87 L1583.58 1213.87 L1582.99 1213.87 L1582.41 1213.87 L1581.82 1213.87 L1581.23 1213.87 L1580.65 1213.87 L1580.06 1213.87 L1579.47 1213.87 L1578.89 1213.87 L1578.3 1213.87 L1577.72 1213.87 L1577.13 1213.87 L1576.54 1213.87 L1575.96 1213.87 L1575.37 1213.87 L1574.78 1213.87 L1574.2 1213.87 L1573.61 1213.87 L1573.02 1213.87 L1572.44 1213.87 L1571.85 1213.87 L1571.27 1213.87 L1570.68 1213.87 L1570.09 1213.87 L1569.51 1213.87 L1568.92 1213.87 L1568.33 1213.87 L1567.75 1213.87 L1567.16 1213.87 L1566.57 1213.87 L1565.99 1213.87 L1565.4 1213.87 L1564.81 1213.87 L1564.23 1213.87 L1563.64 1213.87 L1563.06 1213.87 L1562.47 1213.87 L1561.88 1213.87 L1561.3 1213.87 L1560.71 1213.87 L1560.12 1213.87 L1559.54 1213.87 L1558.95 1213.87 L1558.36 1213.87 L1557.78 1213.87 L1557.19 1213.87 L1556.6 1213.87 L1556.02 1213.87 L1555.43 1213.87 L1554.85 1213.87 L1554.26 1213.87 L1553.67 1213.87 L1553.09 1213.87 L1552.5 1213.87 L1551.91 1213.87 L1551.33 1213.87 L1550.74 1213.87 L1550.15 1213.87 L1549.57 1213.87 L1548.98 1213.87 L1548.4 1213.87 L1547.81 1213.87 L1547.22 1213.87 L1546.64 1213.87 L1546.05 1213.87 L1545.46 1213.87 L1544.88 1213.87 L1544.29 1213.87 L1543.7 1213.87 L1543.12 1213.87 L1542.53 1213.87 L1541.94 1213.87 L1541.36 1213.87 L1540.77 1213.87 L1540.19 1213.87 L1539.6 1213.87 L1539.01 1213.87 L1538.43 1213.87 L1537.84 1213.87 L1537.25 1213.87 L1536.67 1213.87 L1536.08 1213.87 L1535.49 1213.87 L1534.91 1213.87 L1534.32 1213.87 L1533.73 1213.87 L1533.15 1213.87 L1532.56 1213.87 L1531.98 1213.87 L1531.39 1213.87 L1530.8 1213.87 L1530.22 1213.87 L1529.63 1213.87 L1529.04 1213.87 L1528.46 1213.87 L1527.87 1213.87 L1527.28 1213.87 L1526.7 1213.87 L1526.11 1213.87 L1525.52 1213.87 L1524.94 1213.87 L1524.35 1213.87 L1523.77 1213.87 L1523.18 1213.87 L1522.59 1213.87 L1522.01 1213.87 L1521.42 1213.87 L1520.83 1213.87 L1520.25 1213.87 L1519.66 1213.87 L1519.07 1213.87 L1518.49 1213.87 L1517.9 1213.87 L1517.32 1213.87 L1516.73 1213.87 L1516.14 1213.87 L1515.56 1213.87 L1514.97 1213.87 L1514.38 1213.87 L1513.8 1213.87 L1513.21 1213.87 L1512.62 1213.87 L1512.04 1213.87 L1511.45 1213.87 L1510.86 1213.87 L1510.28 1213.87 L1509.69 1213.87 L1509.11 1213.87 L1508.52 1213.87 L1507.93 1213.87 L1507.35 1213.87 L1506.76 1213.87 L1506.17 1213.87 L1505.59 1213.87 L1505 1213.87 L1504.41 1213.87 L1503.83 1213.87 L1503.24 1213.87 L1502.65 1213.87 L1502.07 1213.87 L1501.48 1213.87 L1500.9 1213.87 L1500.31 1213.87 L1499.72 1213.87 L1499.14 1213.87 L1498.55 1213.87 L1497.96 1213.87 L1497.38 1213.87 L1496.79 1213.87 L1496.2 1213.87 L1495.62 1213.87 L1495.03 1213.87 L1494.45 1213.87 L1493.86 1213.87 L1493.27 1213.87 L1492.69 1213.87 L1492.1 1213.87 L1491.51 1213.87 L1490.93 1213.87 L1490.34 1213.87 L1489.75 1213.87 L1489.17 1213.87 L1488.58 1213.87 L1487.99 1213.87 L1487.41 1213.87 L1486.82 1213.87 L1486.24 1213.87 L1485.65 1213.87 L1485.06 1213.87 L1484.48 1213.87 L1483.89 1213.87 L1483.3 1213.87 L1482.72 1213.87 L1482.13 1213.87 L1481.54 1213.87 L1480.96 1213.87 L1480.37 1213.87 L1479.78 1213.87 L1479.2 1213.87 L1478.61 1213.87 L1478.03 1213.87 L1477.44 1213.87 L1476.85 1213.87 L1476.27 1213.87 L1475.68 1213.87 L1475.09 1213.87 L1474.51 1213.87 L1473.92 1213.87 L1473.33 1213.87 L1472.75 1213.87 L1472.16 1213.87 L1471.57 1213.87 L1470.99 1213.87 L1470.4 1213.87 L1469.82 1213.87 L1469.23 1213.87 L1468.64 1213.87 L1468.06 1213.87 L1467.47 1213.87 L1466.88 1213.87 L1466.3 1213.87 L1465.71 1213.87 L1465.12 1213.87 L1464.54 1213.87 L1463.95 1213.87 L1463.37 1213.87 L1462.78 1213.87 L1462.19 1213.87 L1461.61 1213.87 L1461.02 1213.87 L1460.43 1213.87 L1459.85 1213.87 L1459.26 1213.87 L1458.67 1213.87 L1458.09 1213.87 L1457.5 1213.87 L1456.91 1213.87 L1456.33 1213.87 L1455.74 1213.87 L1455.16 1213.87 L1454.57 1213.87 L1453.98 1213.87 L1453.4 1213.87 L1452.81 1213.87 L1452.22 1213.87 L1451.64 1213.87 L1451.05 1213.87 L1450.46 1213.87 L1449.88 1213.87 L1449.29 1213.87 L1448.7 1213.87 L1448.12 1213.87 L1447.53 1213.87 L1446.95 1213.87 L1446.36 1213.87 L1445.77 1213.87 L1445.19 1213.87 L1444.6 1213.87 L1444.01 1213.87 L1443.43 1213.87 L1442.84 1213.87 L1442.25 1213.87 L1441.67 1213.87 L1441.08 1213.87 L1440.5 1213.87 L1439.91 1213.87 L1439.32 1213.87 L1438.74 1213.87 L1438.15 1213.87 L1437.56 1213.87 L1436.98 1213.87 L1436.39 1213.87 L1435.8 1213.87 L1435.22 1213.87 L1434.63 1213.87 L1434.04 1213.87 L1433.46 1213.87 L1432.87 1213.87 L1432.29 1213.87 L1431.7 1213.87 L1431.11 1213.87 L1430.53 1213.87 L1429.94 1213.87 L1429.35 1213.87 L1428.77 1213.87 L1428.18 1213.87 L1427.59 1213.87 L1427.01 1213.87 L1426.42 1213.87 L1425.83 1213.87 L1425.25 1213.87 L1424.66 1213.87 L1424.08 1213.87 L1423.49 1213.87 L1422.9 1213.87 L1422.32 1213.87 L1421.73 1213.87 L1421.14 1213.87 L1420.56 1213.87 L1419.97 1213.87 L1419.38 1213.87 L1418.8 1213.87 L1418.21 1213.87 L1417.63 1213.87 L1417.04 1213.87 L1416.45 1213.87 L1415.87 1213.87 L1415.28 1213.87 L1414.69 1213.87 L1414.11 1213.87 L1413.52 1213.87 L1412.93 1213.87 L1412.35 1213.87 L1411.76 1213.87 L1411.17 1213.87 L1410.59 1213.87 L1410 1213.87 L1409.42 1213.87 L1408.83 1213.87 L1408.24 1213.87 L1407.66 1213.87 L1407.07 1213.87 L1406.48 1213.87 L1405.9 1213.87 L1405.31 1213.87 L1404.72 1213.87 L1404.14 1213.87 L1403.55 1213.87 L1402.96 1213.87 L1402.38 1213.87 L1401.79 1213.87 L1401.21 1213.87 L1400.62 1213.87 L1400.03 1213.87 L1399.45 1213.87 L1398.86 1213.87 L1398.27 1213.87 L1397.69 1213.87 L1397.1 1213.87 L1396.51 1213.87 L1395.93 1213.87 L1395.34 1213.87 L1394.75 1213.87 L1394.17 1213.87 L1393.58 1213.87 L1393 1213.87 L1392.41 1213.87 L1391.82 1213.87 L1391.24 1213.87 L1390.65 1213.87 L1390.06 1213.87 L1389.48 1213.87 L1388.89 1213.87 L1388.3 1213.87 L1387.72 1213.87 L1387.13 1213.87 L1386.55 1213.87 L1385.96 1213.87 L1385.37 1213.87 L1384.79 1213.87 L1384.2 1213.87 L1383.61 1213.87 L1383.03 1213.87 L1382.44 1213.87 L1381.85 1213.87 L1381.27 1213.87 L1380.68 1213.87 L1380.09 1213.87 L1379.51 1213.87 L1378.92 1213.87 L1378.34 1213.87 L1377.75 1213.87 L1377.16 1213.87 L1376.58 1213.87 L1375.99 1213.87 L1375.4 1213.87 L1374.82 1213.87 L1374.23 1213.87 L1373.64 1213.87 L1373.06 1213.87 L1372.47 1213.87 L1371.88 1213.87 L1371.3 1213.87 L1370.71 1213.87 L1370.13 1213.87 L1369.54 1213.87 L1368.95 1213.87 L1368.37 1213.87 L1367.78 1213.87 L1367.19 1213.87 L1366.61 1213.87 L1366.02 1213.87 L1365.43 1213.87 L1364.85 1213.87 L1364.26 1213.87 L1363.68 1213.87 L1363.09 1213.87 L1362.5 1213.87 L1361.92 1213.87 L1361.33 1213.87 L1360.74 1213.87 L1360.16 1213.87 L1359.57 1213.87 L1358.98 1213.87 L1358.4 1213.87 L1357.81 1213.87 L1357.22 1213.87 L1356.64 1213.87 L1356.05 1213.87 L1355.47 1213.87 L1354.88 1213.87 L1354.29 1213.87 L1353.71 1213.87 L1353.12 1213.87 L1352.53 1213.87 L1351.95 1213.87 L1351.36 1213.87 L1350.77 1213.87 L1350.19 1213.87 L1349.6 1213.87 L1349.01 1213.87 L1348.43 1213.87 L1347.84 1213.87 L1347.26 1213.87 L1346.67 1213.87 L1346.08 1213.87 L1345.5 1213.87 L1344.91 1213.87 L1344.32 1213.87 L1343.74 1213.87 L1343.15 1213.87 L1342.56 1213.87 L1341.98 1213.87 L1341.39 1213.87 L1340.8 1213.87 L1340.22 1213.87 L1339.63 1213.87 L1339.05 1213.87 L1338.46 1213.87 L1337.87 1213.87 L1337.29 1213.87 L1336.7 1213.87 L1336.11 1213.87 L1335.53 1213.87 L1334.94 1213.87 L1334.35 1213.87 L1333.77 1213.87 L1333.18 1213.87 L1332.6 1213.87 L1332.01 1213.87 L1331.42 1213.87 L1330.84 1213.87 L1330.25 1213.87 L1329.66 1213.87 L1329.08 1213.87 L1328.49 1213.87 L1327.9 1213.87 L1327.32 1213.87 L1326.73 1213.87 L1326.14 1213.87 L1325.56 1213.87 L1324.97 1213.87 L1324.39 1213.87 L1323.8 1213.87 L1323.21 1213.87 L1322.63 1213.87 L1322.04 1213.87 L1321.45 1213.87 L1320.87 1213.87 L1320.28 1213.87 L1319.69 1213.87 L1319.11 1213.87 L1318.52 1213.87 L1317.93 1213.87 L1317.35 1213.87 L1316.76 1213.87 L1316.18 1213.87 L1315.59 1213.87 L1315 1213.87 L1314.42 1213.87 L1313.83 1213.87 L1313.24 1213.87 L1312.66 1213.87 L1312.07 1213.87 L1311.48 1213.87 L1310.9 1213.87 L1310.31 1213.87 L1309.73 1213.87 L1309.14 1213.87 L1308.55 1213.87 L1307.97 1213.87 L1307.38 1213.87 L1306.79 1213.87 L1306.21 1213.87 L1305.62 1213.87 L1305.03 1213.87 L1304.45 1213.87 L1303.86 1213.87 L1303.27 1213.87 L1302.69 1213.87 L1302.1 1213.87 L1301.52 1213.87 L1300.93 1213.87 L1300.34 1213.87 L1299.76 1213.87 L1299.17 1213.87 L1298.58 1213.87 L1298 1213.87 L1297.41 1213.87 L1296.82 1213.87 L1296.24 1213.87 L1295.65 1213.87 L1295.06 1213.87 L1294.48 1213.87 L1293.89 1213.87 L1293.31 1213.87 L1292.72 1213.87 L1292.13 1213.87 L1291.55 1213.87 L1290.96 1213.87 L1290.37 1213.87 L1289.79 1213.87 L1289.2 1213.87 L1288.61 1213.87 L1288.03 1213.87 L1287.44 1213.87 L1286.86 1213.87 L1286.27 1213.87 L1285.68 1213.87 L1285.1 1213.87 L1284.51 1213.87 L1283.92 1213.87 L1283.34 1213.87 L1282.75 1213.87 L1282.16 1213.87 L1281.58 1213.87 L1280.99 1213.87 L1280.4 1213.87 L1279.82 1213.87 L1279.23 1213.87 L1278.65 1213.87 L1278.06 1213.87 L1277.47 1213.87 L1276.89 1213.87 L1276.3 1213.87 L1275.71 1213.87 L1275.13 1213.87 L1274.54 1213.87 L1273.95 1213.87 L1273.37 1213.87 L1272.78 1213.87 L1272.19 1213.87 L1271.61 1213.87 L1271.02 1213.87 L1270.44 1213.87 L1269.85 1213.87 L1269.26 1213.87 L1268.68 1213.87 L1268.09 1213.87 L1267.5 1213.87 L1266.92 1213.87 L1266.33 1213.87 L1265.74 1213.87 L1265.16 1213.87 L1264.57 1213.87 L1263.98 1213.87 L1263.4 1213.87 L1262.81 1213.87 L1262.23 1213.87 L1261.64 1213.87 L1261.05 1213.87 L1260.47 1213.87 L1259.88 1213.87 L1259.29 1213.87 L1258.71 1213.87 L1258.12 1213.87 L1257.53 1213.87 L1256.95 1213.87 L1256.36 1213.87 L1255.78 1213.87 L1255.19 1213.87 L1254.6 1213.87 L1254.02 1213.87 L1253.43 1213.87 L1252.84 1213.87 L1252.26 1213.87 L1251.67 1213.87 L1251.08 1213.87 L1250.5 1213.87 L1249.91 1213.87 L1249.32 1213.87 L1248.74 1213.87 L1248.15 1213.87 L1247.57 1213.87 L1246.98 1213.87 L1246.39 1213.87 L1245.81 1213.87 L1245.22 1213.87 L1244.63 1213.87 L1244.05 1213.87 L1243.46 1213.87 L1242.87 1213.87 L1242.29 1213.87 L1241.7 1213.87 L1241.11 1213.87 L1240.53 1213.87 L1239.94 1213.87 L1239.36 1213.87 L1238.77 1213.87 L1238.18 1213.87 L1237.6 1213.87 L1237.01 1213.87 L1236.42 1213.87 L1235.84 1213.87 L1235.25 1213.87 L1234.66 1213.87 L1234.08 1213.87 L1233.49 1213.87 L1232.91 1213.87 L1232.32 1213.87 L1231.73 1213.87 L1231.15 1213.87 L1230.56 1213.87 L1229.97 1213.87 L1229.39 1213.87 L1228.8 1213.87 L1228.21 1213.87 L1227.63 1213.87 L1227.04 1213.87 L1226.45 1213.87 L1225.87 1213.87 L1225.28 1213.87 L1224.7 1213.87 L1224.11 1213.87 L1223.52 1213.87 L1222.94 1213.87 L1222.35 1213.87 L1221.76 1213.87 L1221.18 1213.87 L1220.59 1213.87 L1220 1213.87 L1219.42 1213.87 L1218.83 1213.87 L1218.24 1213.87 L1217.66 1213.87 L1217.07 1213.87 L1216.49 1213.87 L1215.9 1213.87 L1215.31 1213.87 L1214.73 1213.87 L1214.14 1213.87 L1213.55 1213.87 L1212.97 1213.87 L1212.38 1213.87 L1211.79 1213.87 L1211.21 1213.87 L1210.62 1213.87 L1210.03 1213.87 L1209.45 1213.87 L1208.86 1213.87 L1208.28 1213.87 L1207.69 1213.87 L1207.1 1213.87 L1206.52 1213.87 L1205.93 1213.87 L1205.34 1213.87 L1204.76 1213.87 L1204.17 1213.87 L1203.58 1213.87 L1203 1213.87 L1202.41 1213.87 L1201.83 1213.87 L1201.24 1213.87 L1200.65 1213.87 L1200.07 1213.87 L1199.48 1213.87 L1198.89 1213.87 L1198.31 1213.87 L1197.72 1213.87 L1197.13 1213.87 L1196.55 1213.87 L1195.96 1213.87 L1195.37 1213.87 L1194.79 1213.87 L1194.2 1213.87 L1193.62 1213.87 L1193.03 1213.87 L1192.44 1213.87 L1191.86 1213.87 L1191.27 1213.87 L1190.68 1213.87 L1190.1 1213.87 L1189.51 1213.87 L1188.92 1213.87 L1188.34 1213.87 L1187.75 1213.87 L1187.16 1213.87 L1186.58 1213.87 L1185.99 1213.87 L1185.41 1213.87 L1184.82 1213.87 L1184.23 1213.87 L1183.65 1213.87 L1183.06 1213.87 L1182.47 1213.87 L1181.89 1213.87 L1181.3 1213.87 L1180.71 1213.87 L1180.13 1213.87 L1179.54 1213.87 L1178.96 1213.87 L1178.37 1213.87 L1177.78 1213.87 L1177.2 1213.87 L1176.61 1213.87 L1176.02 1213.87 L1175.44 1213.87 L1174.85 1213.87 L1174.26 1213.87 L1173.68 1213.87 L1173.09 1213.87 L1172.5 1213.87 L1171.92 1213.87 L1171.33 1213.87 L1170.75 1213.87 L1170.16 1213.87 L1169.57 1213.87 L1168.99 1213.87 L1168.4 1213.87 L1167.81 1213.87 L1167.23 1213.87 L1166.64 1213.87 L1166.05 1213.87 L1165.47 1213.87 L1164.88 1213.87 L1164.29 1213.87 L1163.71 1213.87 L1163.12 1213.87 L1162.54 1213.87 L1161.95 1213.87 L1161.36 1213.87 L1160.78 1213.87 L1160.19 1213.87 L1159.6 1213.87 L1159.02 1213.87 L1158.43 1213.87 L1157.84 1213.87 L1157.26 1213.87 L1156.67 1213.87 L1156.09 1213.87 L1155.5 1213.87 L1154.91 1213.87 L1154.33 1213.87 L1153.74 1213.87 L1153.15 1213.87 L1152.57 1213.87 L1151.98 1213.87 L1151.39 1213.87 L1150.81 1213.87 L1150.22 1213.87 L1149.63 1213.87 L1149.05 1213.87 L1148.46 1213.87 L1147.88 1213.87 L1147.29 1213.87 L1146.7 1213.87 L1146.12 1213.87 L1145.53 1213.87 L1144.94 1213.87 L1144.36 1213.87 L1143.77 1213.87 L1143.18 1213.87 L1142.6 1213.87 L1142.01 1213.87 L1141.42 1213.87 L1140.84 1213.87 L1140.25 1213.87 L1139.67 1213.87 L1139.08 1213.87 L1138.49 1213.87 L1137.91 1213.87 L1137.32 1213.87 L1136.73 1213.87 L1136.15 1213.87 L1135.56 1213.87 L1134.97 1213.87 L1134.39 1213.87 L1133.8 1213.87 L1133.21 1213.87 L1132.63 1213.87 L1132.04 1213.87 L1131.46 1213.87 L1130.87 1213.87 L1130.28 1213.87 L1129.7 1213.87 L1129.11 1213.87 L1128.52 1213.87 L1127.94 1213.87 L1127.35 1213.87 L1126.76 1213.87 L1126.18 1213.87 L1125.59 1213.87 L1125.01 1213.87 L1124.42 1213.87 L1123.83 1213.87 L1123.25 1213.87 L1122.66 1213.87 L1122.07 1213.87 L1121.49 1213.87 L1120.9 1213.87 L1120.31 1213.87 L1119.73 1213.87 L1119.14 1213.87 L1118.55 1213.87 L1117.97 1213.87 L1117.38 1213.87 L1116.8 1213.87 L1116.21 1213.87 L1115.62 1213.87 L1115.04 1213.87 L1114.45 1213.87 L1113.86 1213.87 L1113.28 1213.87 L1112.69 1213.87 L1112.1 1213.87 L1111.52 1213.87 L1110.93 1213.87 L1110.34 1213.87 L1109.76 1213.87 L1109.17 1213.87 L1108.59 1213.87 L1108 1213.87 L1107.41 1213.87 L1106.83 1213.87 L1106.24 1213.87 L1105.65 1213.87 L1105.07 1213.87 L1104.48 1213.87 L1103.89 1213.87 L1103.31 1213.87 L1102.72 1213.87 L1102.14 1213.87 L1101.55 1213.87 L1100.96 1213.87 L1100.38 1213.87 L1099.79 1213.87 L1099.2 1213.87 L1098.62 1213.87 L1098.03 1213.87 L1097.44 1213.87 L1096.86 1213.87 L1096.27 1213.87 L1095.68 1213.87 L1095.1 1213.87 L1094.51 1213.87 L1093.93 1213.87 L1093.34 1213.87 L1092.75 1213.87 L1092.17 1213.87 L1091.58 1213.87 L1090.99 1213.87 L1090.41 1213.87 L1089.82 1213.87 L1089.23 1213.87 L1088.65 1213.87 L1088.06 1213.87 L1087.47 1213.87 L1086.89 1213.87 L1086.3 1213.87 L1085.72 1213.87 L1085.13 1213.87 L1084.54 1213.87 L1083.96 1213.87 L1083.37 1213.87 L1082.78 1213.87 L1082.2 1213.87 L1081.61 1213.87 L1081.02 1213.87 L1080.44 1213.87 L1079.85 1213.87 L1079.26 1213.87 L1078.68 1213.87 L1078.09 1213.87 L1077.51 1213.87 L1076.92 1213.87 L1076.33 1213.87 L1075.75 1213.87 L1075.16 1213.87 L1074.57 1213.87 L1073.99 1213.87 L1073.4 1213.87 L1072.81 1213.87 L1072.23 1213.87 L1071.64 1213.87 L1071.06 1213.87 L1070.47 1213.87 L1069.88 1213.87 L1069.3 1213.87 L1068.71 1213.87 L1068.12 1213.87 L1067.54 1213.87 L1066.95 1213.87 L1066.36 1213.87 L1065.78 1213.87 L1065.19 1213.87 L1064.6 1213.87 L1064.02 1213.87 L1063.43 1213.87 L1062.85 1213.87 L1062.26 1213.87 L1061.67 1213.87 L1061.09 1213.87 L1060.5 1213.87 L1059.91 1213.87 L1059.33 1213.87 L1058.74 1213.87 L1058.15 1213.87 L1057.57 1213.87 L1056.98 1213.87 L1056.39 1213.87 L1055.81 1213.87 L1055.22 1213.87 L1054.64 1213.87 L1054.05 1213.87 L1053.46 1213.87 L1052.88 1213.87 L1052.29 1213.87 L1051.7 1213.87 L1051.12 1213.87 L1050.53 1213.87 L1049.94 1213.87 L1049.36 1213.87 L1048.77 1213.87 L1048.19 1213.87 L1047.6 1213.87 L1047.01 1213.87 L1046.43 1213.87 L1045.84 1213.87 L1045.25 1213.87 L1044.67 1213.87 L1044.08 1213.87 L1043.49 1213.87 L1042.91 1213.87 L1042.32 1213.87 L1041.73 1213.87 L1041.15 1213.87 L1040.56 1213.87 L1039.98 1213.87 L1039.39 1213.87 L1038.8 1213.87 L1038.22 1213.87 L1037.63 1213.87 L1037.04 1213.87 L1036.46 1213.87 L1035.87 1213.87 L1035.28 1213.87 L1034.7 1213.87 L1034.11 1213.87 L1033.52 1213.87 L1032.94 1213.87 L1032.35 1213.87 L1031.77 1213.87 L1031.18 1213.87 L1030.59 1213.87 L1030.01 1213.87 L1029.42 1213.87 L1028.83 1213.87 L1028.25 1213.87 L1027.66 1213.87 L1027.07 1213.87 L1026.49 1213.87 L1025.9 1213.87 L1025.32 1213.87 L1024.73 1213.87 L1024.14 1213.87 L1023.56 1213.87 L1022.97 1213.87 L1022.38 1213.87 L1021.8 1213.87 L1021.21 1213.87 L1020.62 1213.87 L1020.04 1213.87 L1019.45 1213.87 L1018.86 1213.87 L1018.28 1213.87 L1017.69 1213.87 L1017.11 1213.87 L1016.52 1213.87 L1015.93 1213.87 L1015.35 1213.87 L1014.76 1213.87 L1014.17 1213.87 L1013.59 1213.87 L1013 1213.87 L1012.41 1213.87 L1011.83 1213.87 L1011.24 1213.87 L1010.65 1213.87 L1010.07 1213.87 L1009.48 1213.87 L1008.9 1213.87 L1008.31 1213.87 L1007.72 1213.87 L1007.14 1213.87 L1006.55 1213.87 L1005.96 1213.87 L1005.38 1213.87 L1004.79 1213.87 L1004.2 1213.87 L1003.62 1213.87 L1003.03 1213.87 L1002.44 1213.87 L1001.86 1213.87 L1001.27 1213.87 L1000.69 1213.87 L1000.1 1213.87 L999.513 1213.87 L998.926 1213.87 L998.34 1213.87 L997.754 1213.87 L997.167 1213.87 L996.581 1213.87 L995.994 1213.87 L995.408 1213.87 L994.822 1213.87 L994.235 1213.87 L993.649 1213.87 L993.062 1213.87 L992.476 1213.87 L991.889 1213.87 L991.303 1213.87 L990.717 1213.87 L990.13 1213.87 L989.544 1213.87 L988.957 1213.87 L988.371 1213.87 L987.785 1213.87 L987.198 1213.87 L986.612 1213.87 L986.025 1213.87  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.93 986.612,1213.93 987.198,1213.93 987.785,1213.93 988.371,1213.93 988.957,1213.93 989.544,1213.93 990.13,1213.93 990.717,1213.93 991.303,1213.93 991.889,1213.93 992.476,1213.93 993.062,1213.93 993.649,1213.93 994.235,1213.93 994.822,1213.93 995.408,1213.93 995.994,1213.93 996.581,1213.93 997.167,1213.93 997.754,1213.93 998.34,1213.93 998.926,1213.93 999.513,1213.93 1000.1,1213.93 1000.69,1213.93 1001.27,1213.93 1001.86,1213.93 1002.44,1213.93 1003.03,1213.93 1003.62,1213.93 1004.2,1213.93 1004.79,1213.93 1005.38,1213.93 1005.96,1213.93 1006.55,1213.93 1007.14,1213.93 1007.72,1213.93 1008.31,1213.93 1008.9,1213.93 1009.48,1213.93 1010.07,1213.93 1010.65,1213.93 1011.24,1213.93 1011.83,1213.93 1012.41,1213.93 1013,1213.93 1013.59,1213.93 1014.17,1213.93 1014.76,1213.93 1015.35,1213.93 1015.93,1213.93 1016.52,1213.93 1017.11,1213.93 1017.69,1213.93 1018.28,1213.93 1018.86,1213.93 1019.45,1213.93 1020.04,1213.93 1020.62,1213.93 1021.21,1213.93 1021.8,1213.93 1022.38,1213.93 1022.97,1213.93 1023.56,1213.93 1024.14,1213.93 1024.73,1213.93 1025.32,1213.93 1025.9,1213.93 1026.49,1213.93 1027.07,1213.93 1027.66,1213.93 1028.25,1213.93 1028.83,1213.93 1029.42,1213.93 1030.01,1213.93 1030.59,1213.93 1031.18,1213.93 1031.77,1213.93 1032.35,1213.93 1032.94,1213.93 1033.52,1213.93 1034.11,1213.93 1034.7,1213.93 1035.28,1213.93 1035.87,1213.93 1036.46,1213.93 1037.04,1213.93 1037.63,1213.93 1038.22,1213.93 1038.8,1213.93 1039.39,1213.93 1039.98,1213.93 1040.56,1213.93 1041.15,1213.93 1041.73,1213.93 1042.32,1213.93 1042.91,1213.93 1043.49,1213.93 1044.08,1213.93 1044.67,1213.93 1045.25,1213.93 1045.84,1213.93 1046.43,1213.93 1047.01,1213.93 1047.6,1213.93 1048.19,1213.93 1048.77,1213.93 1049.36,1213.93 1049.94,1213.93 1050.53,1213.93 1051.12,1213.93 1051.7,1213.93 1052.29,1213.93 1052.88,1213.93 1053.46,1213.93 1054.05,1213.93 1054.64,1213.93 1055.22,1213.93 1055.81,1213.93 1056.39,1213.93 1056.98,1213.93 1057.57,1213.93 1058.15,1213.93 1058.74,1213.93 1059.33,1213.93 1059.91,1213.93 1060.5,1213.93 1061.09,1213.93 1061.67,1213.93 1062.26,1213.93 1062.85,1213.93 1063.43,1213.93 1064.02,1213.93 1064.6,1213.93 1065.19,1213.93 1065.78,1213.93 1066.36,1213.93 1066.95,1213.93 1067.54,1213.93 1068.12,1213.93 1068.71,1213.93 1069.3,1213.93 1069.88,1213.93 1070.47,1213.93 1071.06,1213.93 1071.64,1213.93 1072.23,1213.93 1072.81,1213.93 1073.4,1213.93 1073.99,1213.93 1074.57,1213.93 1075.16,1213.93 1075.75,1213.93 1076.33,1213.93 1076.92,1213.93 1077.51,1213.93 1078.09,1213.93 1078.68,1213.93 1079.26,1213.93 1079.85,1213.93 1080.44,1213.93 1081.02,1213.93 1081.61,1213.93 1082.2,1213.93 1082.78,1213.93 1083.37,1213.93 1083.96,1213.93 1084.54,1213.93 1085.13,1213.93 1085.72,1213.93 1086.3,1213.93 1086.89,1213.93 1087.47,1213.93 1088.06,1213.93 1088.65,1213.93 1089.23,1213.93 1089.82,1213.93 1090.41,1213.93 1090.99,1213.93 1091.58,1213.93 1092.17,1213.93 1092.75,1213.93 1093.34,1213.93 1093.93,1213.93 1094.51,1213.93 1095.1,1213.93 1095.68,1213.93 1096.27,1213.93 1096.86,1213.93 1097.44,1213.93 1098.03,1213.93 1098.62,1213.93 1099.2,1213.93 1099.79,1213.93 1100.38,1213.93 1100.96,1213.93 1101.55,1213.93 1102.14,1213.93 1102.72,1213.93 1103.31,1213.93 1103.89,1213.93 1104.48,1213.93 1105.07,1213.93 1105.65,1213.93 1106.24,1213.93 1106.83,1213.93 1107.41,1213.93 1108,1213.93 1108.59,1213.93 1109.17,1213.93 1109.76,1213.93 1110.34,1213.93 1110.93,1213.93 1111.52,1213.93 1112.1,1213.93 1112.69,1213.93 1113.28,1213.93 1113.86,1213.93 1114.45,1213.93 1115.04,1213.93 1115.62,1213.93 1116.21,1213.93 1116.8,1213.93 1117.38,1213.93 1117.97,1213.93 1118.55,1213.93 1119.14,1213.93 1119.73,1213.93 1120.31,1213.93 1120.9,1213.93 1121.49,1213.93 1122.07,1213.93 1122.66,1213.93 1123.25,1213.93 1123.83,1213.93 1124.42,1213.93 1125.01,1213.93 1125.59,1213.93 1126.18,1213.93 1126.76,1213.93 1127.35,1213.93 1127.94,1213.93 1128.52,1213.93 1129.11,1213.93 1129.7,1213.93 1130.28,1213.93 1130.87,1213.93 1131.46,1213.93 1132.04,1213.93 1132.63,1213.93 1133.21,1213.93 1133.8,1213.93 1134.39,1213.93 1134.97,1213.93 1135.56,1213.93 1136.15,1213.93 1136.73,1213.93 1137.32,1213.93 1137.91,1213.93 1138.49,1213.93 1139.08,1213.93 1139.67,1213.93 1140.25,1213.93 1140.84,1213.93 1141.42,1213.93 1142.01,1213.93 1142.6,1213.93 1143.18,1213.93 1143.77,1213.93 1144.36,1213.93 1144.94,1213.93 1145.53,1213.93 1146.12,1213.93 1146.7,1213.93 1147.29,1213.93 1147.88,1213.93 1148.46,1213.93 1149.05,1213.93 1149.63,1213.93 1150.22,1213.93 1150.81,1213.93 1151.39,1213.93 1151.98,1213.93 1152.57,1213.93 1153.15,1213.93 1153.74,1213.93 1154.33,1213.93 1154.91,1213.93 1155.5,1213.93 1156.09,1213.93 1156.67,1213.93 1157.26,1213.93 1157.84,1213.93 1158.43,1213.93 1159.02,1213.93 1159.6,1213.93 1160.19,1213.93 1160.78,1213.93 1161.36,1213.93 1161.95,1213.93 1162.54,1213.93 1163.12,1213.93 1163.71,1213.93 1164.29,1213.93 1164.88,1213.93 1165.47,1213.93 1166.05,1213.93 1166.64,1213.93 1167.23,1213.93 1167.81,1213.93 1168.4,1213.93 1168.99,1213.93 1169.57,1213.93 1170.16,1213.93 1170.75,1213.93 1171.33,1213.93 1171.92,1213.93 1172.5,1213.93 1173.09,1213.93 1173.68,1213.93 1174.26,1213.93 1174.85,1213.93 1175.44,1213.93 1176.02,1213.93 1176.61,1213.93 1177.2,1213.93 1177.78,1213.93 1178.37,1213.93 1178.96,1213.93 1179.54,1213.93 1180.13,1213.93 1180.71,1213.93 1181.3,1213.93 1181.89,1213.93 1182.47,1213.93 1183.06,1213.93 1183.65,1213.93 1184.23,1213.93 1184.82,1213.93 1185.41,1213.93 1185.99,1213.93 1186.58,1213.93 1187.16,1213.93 1187.75,1213.93 1188.34,1213.93 1188.92,1213.93 1189.51,1213.93 1190.1,1213.93 1190.68,1213.93 1191.27,1213.93 1191.86,1213.93 1192.44,1213.93 1193.03,1213.93 1193.62,1213.93 1194.2,1213.93 1194.79,1213.93 1195.37,1213.93 1195.96,1213.93 1196.55,1213.93 1197.13,1213.93 1197.72,1213.93 1198.31,1213.93 1198.89,1213.93 1199.48,1213.93 1200.07,1213.93 1200.65,1213.93 1201.24,1213.93 1201.83,1213.93 1202.41,1213.93 1203,1213.93 1203.58,1213.93 1204.17,1213.93 1204.76,1213.93 1205.34,1213.93 1205.93,1213.93 1206.52,1213.93 1207.1,1213.93 1207.69,1213.93 1208.28,1213.93 1208.86,1213.93 1209.45,1213.93 1210.03,1213.93 1210.62,1213.93 1211.21,1213.93 1211.79,1213.93 1212.38,1213.93 1212.97,1213.93 1213.55,1213.93 1214.14,1213.93 1214.73,1213.93 1215.31,1213.93 1215.9,1213.93 1216.49,1213.93 1217.07,1213.93 1217.66,1213.93 1218.24,1213.93 1218.83,1213.93 1219.42,1213.93 1220,1213.93 1220.59,1213.93 1221.18,1213.93 1221.76,1213.93 1222.35,1213.93 1222.94,1213.93 1223.52,1213.93 1224.11,1213.93 1224.7,1213.93 1225.28,1213.93 1225.87,1213.93 1226.45,1213.93 1227.04,1213.93 1227.63,1213.93 1228.21,1213.93 1228.8,1213.93 1229.39,1213.93 1229.97,1213.93 1230.56,1213.93 1231.15,1213.93 1231.73,1213.93 1232.32,1213.93 1232.91,1213.93 1233.49,1213.93 1234.08,1213.93 1234.66,1213.93 1235.25,1213.93 1235.84,1213.93 1236.42,1213.93 1237.01,1213.93 1237.6,1213.93 1238.18,1213.93 1238.77,1213.93 1239.36,1213.93 1239.94,1213.93 1240.53,1213.93 1241.11,1213.93 1241.7,1213.93 1242.29,1213.93 1242.87,1213.93 1243.46,1213.93 1244.05,1213.93 1244.63,1213.93 1245.22,1213.93 1245.81,1213.93 1246.39,1213.93 1246.98,1213.93 1247.57,1213.93 1248.15,1213.93 1248.74,1213.93 1249.32,1213.93 1249.91,1213.93 1250.5,1213.93 1251.08,1213.93 1251.67,1213.93 1252.26,1213.93 1252.84,1213.93 1253.43,1213.93 1254.02,1213.93 1254.6,1213.93 1255.19,1213.93 1255.78,1213.93 1256.36,1213.93 1256.95,1213.93 1257.53,1213.93 1258.12,1213.93 1258.71,1213.93 1259.29,1213.93 1259.88,1213.93 1260.47,1213.93 1261.05,1213.93 1261.64,1213.93 1262.23,1213.93 1262.81,1213.93 1263.4,1213.93 1263.98,1213.93 1264.57,1213.93 1265.16,1213.93 1265.74,1213.93 1266.33,1213.93 1266.92,1213.93 1267.5,1213.93 1268.09,1213.93 1268.68,1213.93 1269.26,1213.93 1269.85,1213.93 1270.44,1213.93 1271.02,1213.93 1271.61,1213.93 1272.19,1213.93 1272.78,1213.93 1273.37,1213.93 1273.95,1213.93 1274.54,1213.93 1275.13,1213.93 1275.71,1213.93 1276.3,1213.93 1276.89,1213.93 1277.47,1213.93 1278.06,1213.93 1278.65,1213.93 1279.23,1213.93 1279.82,1213.93 1280.4,1213.93 1280.99,1213.93 1281.58,1213.93 1282.16,1213.93 1282.75,1213.93 1283.34,1213.93 1283.92,1213.93 1284.51,1213.93 1285.1,1213.93 1285.68,1213.93 1286.27,1213.93 1286.86,1213.93 1287.44,1213.93 1288.03,1213.93 1288.61,1213.93 1289.2,1213.93 1289.79,1213.93 1290.37,1213.93 1290.96,1213.93 1291.55,1213.93 1292.13,1213.93 1292.72,1213.93 1293.31,1213.93 1293.89,1213.93 1294.48,1213.93 1295.06,1213.93 1295.65,1213.93 1296.24,1213.93 1296.82,1213.93 1297.41,1213.93 1298,1213.93 1298.58,1213.93 1299.17,1213.93 1299.76,1213.93 1300.34,1213.93 1300.93,1213.93 1301.52,1213.93 1302.1,1213.93 1302.69,1213.93 1303.27,1213.93 1303.86,1213.93 1304.45,1213.93 1305.03,1213.93 1305.62,1213.93 1306.21,1213.93 1306.79,1213.93 1307.38,1213.93 1307.97,1213.93 1308.55,1213.93 1309.14,1213.93 1309.73,1213.93 1310.31,1213.93 1310.9,1213.93 1311.48,1213.93 1312.07,1213.93 1312.66,1213.93 1313.24,1213.93 1313.83,1213.93 1314.42,1213.93 1315,1213.93 1315.59,1213.93 1316.18,1213.93 1316.76,1213.93 1317.35,1213.93 1317.93,1213.93 1318.52,1213.93 1319.11,1213.93 1319.69,1213.93 1320.28,1213.93 1320.87,1213.93 1321.45,1213.93 1322.04,1213.93 1322.63,1213.93 1323.21,1213.93 1323.8,1213.93 1324.39,1213.93 1324.97,1213.93 1325.56,1213.93 1326.14,1213.93 1326.73,1213.93 1327.32,1213.93 1327.9,1213.93 1328.49,1213.93 1329.08,1213.93 1329.66,1213.93 1330.25,1213.93 1330.84,1213.93 1331.42,1213.93 1332.01,1213.93 1332.6,1213.93 1333.18,1213.93 1333.77,1213.93 1334.35,1213.93 1334.94,1213.93 1335.53,1213.93 1336.11,1213.93 1336.7,1213.93 1337.29,1213.93 1337.87,1213.93 1338.46,1213.93 1339.05,1213.93 1339.63,1213.93 1340.22,1213.93 1340.8,1213.93 1341.39,1213.93 1341.98,1213.93 1342.56,1213.93 1343.15,1213.93 1343.74,1213.93 1344.32,1213.93 1344.91,1213.93 1345.5,1213.93 1346.08,1213.93 1346.67,1213.93 1347.26,1213.93 1347.84,1213.93 1348.43,1213.93 1349.01,1213.93 1349.6,1213.93 1350.19,1213.93 1350.77,1213.93 1351.36,1213.93 1351.95,1213.93 1352.53,1213.93 1353.12,1213.93 1353.71,1213.93 1354.29,1213.93 1354.88,1213.93 1355.47,1213.93 1356.05,1213.93 1356.64,1213.93 1357.22,1213.93 1357.81,1213.93 1358.4,1213.93 1358.98,1213.93 1359.57,1213.93 1360.16,1213.93 1360.74,1213.93 1361.33,1213.93 1361.92,1213.93 1362.5,1213.93 1363.09,1213.93 1363.68,1213.93 1364.26,1213.93 1364.85,1213.93 1365.43,1213.93 1366.02,1213.93 1366.61,1213.93 1367.19,1213.93 1367.78,1213.93 1368.37,1213.93 1368.95,1213.93 1369.54,1213.93 1370.13,1213.93 1370.71,1213.93 1371.3,1213.93 1371.88,1213.93 1372.47,1213.93 1373.06,1213.93 1373.64,1213.93 1374.23,1213.93 1374.82,1213.93 1375.4,1213.93 1375.99,1213.93 1376.58,1213.93 1377.16,1213.93 1377.75,1213.93 1378.34,1213.93 1378.92,1213.93 1379.51,1213.93 1380.09,1213.93 1380.68,1213.93 1381.27,1213.93 1381.85,1213.93 1382.44,1213.93 1383.03,1213.93 1383.61,1213.93 1384.2,1213.93 1384.79,1213.93 1385.37,1213.93 1385.96,1213.93 1386.55,1213.93 1387.13,1213.93 1387.72,1213.93 1388.3,1213.93 1388.89,1213.93 1389.48,1213.93 1390.06,1213.93 1390.65,1213.93 1391.24,1213.93 1391.82,1213.93 1392.41,1213.93 1393,1213.93 1393.58,1213.93 1394.17,1213.93 1394.75,1213.93 1395.34,1213.93 1395.93,1213.93 1396.51,1213.93 1397.1,1213.93 1397.69,1213.93 1398.27,1213.93 1398.86,1213.93 1399.45,1213.93 1400.03,1213.93 1400.62,1213.93 1401.21,1213.93 1401.79,1213.93 1402.38,1213.93 1402.96,1213.93 1403.55,1213.93 1404.14,1213.93 1404.72,1213.93 1405.31,1213.93 1405.9,1213.93 1406.48,1213.93 1407.07,1213.93 1407.66,1213.93 1408.24,1213.93 1408.83,1213.93 1409.42,1213.93 1410,1213.93 1410.59,1213.93 1411.17,1213.93 1411.76,1213.93 1412.35,1213.93 1412.93,1213.93 1413.52,1213.93 1414.11,1213.93 1414.69,1213.93 1415.28,1213.93 1415.87,1213.93 1416.45,1213.93 1417.04,1213.93 1417.63,1213.93 1418.21,1213.93 1418.8,1213.93 1419.38,1213.93 1419.97,1213.93 1420.56,1213.93 1421.14,1213.93 1421.73,1213.93 1422.32,1213.93 1422.9,1213.93 1423.49,1213.93 1424.08,1213.93 1424.66,1213.93 1425.25,1213.93 1425.83,1213.93 1426.42,1213.93 1427.01,1213.93 1427.59,1213.93 1428.18,1213.93 1428.77,1213.93 1429.35,1213.93 1429.94,1213.93 1430.53,1213.93 1431.11,1213.93 1431.7,1213.93 1432.29,1213.93 1432.87,1213.93 1433.46,1213.93 1434.04,1213.93 1434.63,1213.93 1435.22,1213.93 1435.8,1213.93 1436.39,1213.93 1436.98,1213.93 1437.56,1213.93 1438.15,1213.93 1438.74,1213.93 1439.32,1213.93 1439.91,1213.93 1440.5,1213.93 1441.08,1213.93 1441.67,1213.93 1442.25,1213.93 1442.84,1213.93 1443.43,1213.93 1444.01,1213.93 1444.6,1213.93 1445.19,1213.93 1445.77,1213.93 1446.36,1213.93 1446.95,1213.93 1447.53,1213.93 1448.12,1213.93 1448.7,1213.93 1449.29,1213.93 1449.88,1213.93 1450.46,1213.93 1451.05,1213.93 1451.64,1213.93 1452.22,1213.93 1452.81,1213.93 1453.4,1213.93 1453.98,1213.93 1454.57,1213.93 1455.16,1213.93 1455.74,1213.93 1456.33,1213.93 1456.91,1213.93 1457.5,1213.93 1458.09,1213.93 1458.67,1213.93 1459.26,1213.93 1459.85,1213.93 1460.43,1213.93 1461.02,1213.93 1461.61,1213.93 1462.19,1213.93 1462.78,1213.93 1463.37,1213.93 1463.95,1213.93 1464.54,1213.93 1465.12,1213.93 1465.71,1213.93 1466.3,1213.93 1466.88,1213.93 1467.47,1213.93 1468.06,1213.93 1468.64,1213.93 1469.23,1213.93 1469.82,1213.93 1470.4,1213.93 1470.99,1213.93 1471.57,1213.93 1472.16,1213.93 1472.75,1213.93 1473.33,1213.93 1473.92,1213.93 1474.51,1213.93 1475.09,1213.93 1475.68,1213.93 1476.27,1213.93 1476.85,1213.93 1477.44,1213.93 1478.03,1213.93 1478.61,1213.93 1479.2,1213.93 1479.78,1213.93 1480.37,1213.93 1480.96,1213.93 1481.54,1213.93 1482.13,1213.93 1482.72,1213.93 1483.3,1213.93 1483.89,1213.93 1484.48,1213.93 1485.06,1213.93 1485.65,1213.93 1486.24,1213.93 1486.82,1213.93 1487.41,1213.93 1487.99,1213.93 1488.58,1213.93 1489.17,1213.93 1489.75,1213.93 1490.34,1213.93 1490.93,1213.93 1491.51,1213.93 1492.1,1213.93 1492.69,1213.93 1493.27,1213.93 1493.86,1213.93 1494.45,1213.93 1495.03,1213.93 1495.62,1213.93 1496.2,1213.93 1496.79,1213.93 1497.38,1213.93 1497.96,1213.93 1498.55,1213.93 1499.14,1213.93 1499.72,1213.93 1500.31,1213.93 1500.9,1213.93 1501.48,1213.93 1502.07,1213.93 1502.65,1213.93 1503.24,1213.93 1503.83,1213.93 1504.41,1213.93 1505,1213.93 1505.59,1213.93 1506.17,1213.93 1506.76,1213.93 1507.35,1213.93 1507.93,1213.93 1508.52,1213.93 1509.11,1213.93 1509.69,1213.93 1510.28,1213.93 1510.86,1213.93 1511.45,1213.93 1512.04,1213.93 1512.62,1213.93 1513.21,1213.93 1513.8,1213.93 1514.38,1213.93 1514.97,1213.93 1515.56,1213.93 1516.14,1213.93 1516.73,1213.93 1517.32,1213.93 1517.9,1213.93 1518.49,1213.93 1519.07,1213.93 1519.66,1213.93 1520.25,1213.93 1520.83,1213.93 1521.42,1213.93 1522.01,1213.93 1522.59,1213.93 1523.18,1213.93 1523.77,1213.93 1524.35,1213.93 1524.94,1213.93 1525.52,1213.93 1526.11,1213.93 1526.7,1213.93 1527.28,1213.93 1527.87,1213.93 1528.46,1213.93 1529.04,1213.93 1529.63,1213.93 1530.22,1213.93 1530.8,1213.93 1531.39,1213.93 1531.98,1213.93 1532.56,1213.93 1533.15,1213.93 1533.73,1213.93 1534.32,1213.93 1534.91,1213.93 1535.49,1213.93 1536.08,1213.93 1536.67,1213.93 1537.25,1213.93 1537.84,1213.93 1538.43,1213.93 1539.01,1213.93 1539.6,1213.93 1540.19,1213.93 1540.77,1213.93 1541.36,1213.93 1541.94,1213.93 1542.53,1213.93 1543.12,1213.93 1543.7,1213.93 1544.29,1213.93 1544.88,1213.93 1545.46,1213.93 1546.05,1213.93 1546.64,1213.93 1547.22,1213.93 1547.81,1213.93 1548.4,1213.93 1548.98,1213.93 1549.57,1213.93 1550.15,1213.93 1550.74,1213.93 1551.33,1213.93 1551.91,1213.93 1552.5,1213.93 1553.09,1213.93 1553.67,1213.93 1554.26,1213.93 1554.85,1213.93 1555.43,1213.93 1556.02,1213.93 1556.6,1213.93 1557.19,1213.93 1557.78,1213.93 1558.36,1213.93 1558.95,1213.93 1559.54,1213.93 1560.12,1213.93 1560.71,1213.93 1561.3,1213.93 1561.88,1213.93 1562.47,1213.93 1563.06,1213.93 1563.64,1213.93 1564.23,1213.93 1564.81,1213.93 1565.4,1213.93 1565.99,1213.93 1566.57,1213.93 1567.16,1213.93 1567.75,1213.93 1568.33,1213.93 1568.92,1213.93 1569.51,1213.93 1570.09,1213.93 1570.68,1213.93 1571.27,1213.93 1571.85,1213.93 1572.44,1213.93 1573.02,1213.93 1573.61,1213.93 1574.2,1213.93 1574.78,1213.93 1575.37,1213.93 1575.96,1213.93 1576.54,1213.93 1577.13,1213.93 1577.72,1213.93 1578.3,1213.93 1578.89,1213.93 1579.47,1213.93 1580.06,1213.93 1580.65,1213.93 1581.23,1213.93 1581.82,1213.93 1582.41,1213.93 1582.99,1213.93 1583.58,1213.93 1584.17,1213.93 1584.75,1213.93 1585.34,1213.93 1585.93,1213.93 1586.51,1213.93 1587.1,1213.93 1587.68,1213.93 1588.27,1213.93 1588.86,1213.93 1589.44,1213.93 1590.03,1213.93 1590.62,1213.93 1591.2,1213.93 1591.79,1213.93 1592.38,1213.93 1592.96,1213.93 1593.55,1213.93 1594.14,1213.93 1594.72,1213.93 1595.31,1213.93 1595.89,1213.93 1596.48,1213.93 1597.07,1213.93 1597.65,1213.93 1598.24,1213.93 1598.83,1213.93 1599.41,1213.93 1600,1213.93 1600.59,1213.93 1601.17,1213.93 1601.76,1213.93 1602.34,1213.93 1602.93,1213.93 1603.52,1213.93 1604.1,1213.93 1604.69,1213.93 1605.28,1213.93 1605.86,1213.93 1606.45,1213.93 1607.04,1213.93 1607.62,1213.93 1608.21,1213.93 1608.8,1213.93 1609.38,1213.93 1609.97,1213.93 1610.55,1213.93 1611.14,1213.93 1611.73,1213.93 1612.31,1213.93 1612.9,1213.93 1613.49,1213.93 1614.07,1213.93 1614.66,1213.93 1615.25,1213.93 1615.83,1213.93 1616.42,1213.93 1617.01,1213.93 1617.59,1213.93 1618.18,1213.93 1618.76,1213.93 1619.35,1213.93 1619.94,1213.93 1620.52,1213.93 1621.11,1213.93 1621.7,1213.93 1622.28,1213.93 1622.87,1213.93 1623.46,1213.93 1624.04,1213.93 1624.63,1213.93 1625.22,1213.93 1625.8,1213.93 1626.39,1213.93 1626.97,1213.93 1627.56,1213.93 1628.15,1213.93 1628.73,1213.93 1629.32,1213.93 1629.91,1213.93 1630.49,1213.93 1631.08,1213.93 1631.67,1213.93 1632.25,1213.93 1632.84,1213.93 1633.42,1213.93 1634.01,1213.93 1634.6,1213.93 1635.18,1213.93 1635.77,1213.93 1636.36,1213.93 1636.94,1213.93 1637.53,1213.93 1638.12,1213.93 1638.7,1213.93 1639.29,1213.93 1639.88,1213.93 1640.46,1213.93 1641.05,1213.93 1641.63,1213.93 1642.22,1213.93 1642.81,1213.93 1643.39,1213.93 1643.98,1213.93 1644.57,1213.93 1645.15,1213.93 1645.74,1213.93 1646.33,1213.93 1646.91,1213.93 1647.5,1213.93 1648.09,1213.93 1648.67,1213.93 1649.26,1213.93 1649.84,1213.93 1650.43,1213.93 1651.02,1213.93 1651.6,1213.93 1652.19,1213.93 1652.78,1213.93 1653.36,1213.93 1653.95,1213.93 1654.54,1213.93 1655.12,1213.93 1655.71,1213.93 1656.29,1213.93 1656.88,1213.93 1657.47,1213.93 1658.05,1213.93 1658.64,1213.93 1659.23,1213.93 1659.81,1213.93 1660.4,1213.93 1660.99,1213.93 1661.57,1213.93 1662.16,1213.93 1662.75,1213.93 1663.33,1213.93 1663.92,1213.93 1664.5,1213.93 1665.09,1213.93 1665.68,1213.93 1666.26,1213.93 1666.85,1213.93 1667.44,1213.93 1668.02,1213.93 1668.61,1213.93 1669.2,1213.93 1669.78,1213.93 1670.37,1213.93 1670.96,1213.93 1671.54,1213.93 1672.13,1213.93 1672.71,1213.93 1673.3,1213.93 1673.89,1213.93 1674.47,1213.93 1675.06,1213.93 1675.65,1213.93 1676.23,1213.93 1676.82,1213.93 1677.41,1213.93 1677.99,1213.93 1678.58,1213.93 1679.17,1213.93 1679.75,1213.93 1680.34,1213.93 1680.92,1213.93 1681.51,1213.93 1682.1,1213.93 1682.68,1213.93 1683.27,1213.93 1683.86,1213.93 1684.44,1213.93 1685.03,1213.93 1685.62,1213.93 1686.2,1213.93 1686.79,1213.93 1687.37,1213.93 1687.96,1213.93 1688.55,1213.93 1689.13,1213.93 1689.72,1213.93 1690.31,1213.93 1690.89,1213.93 1691.48,1213.93 1692.07,1213.93 1692.65,1213.93 1693.24,1213.93 1693.83,1213.93 1694.41,1213.93 1695,1213.93 1695.58,1213.93 1696.17,1213.93 1696.76,1213.93 1697.34,1213.93 1697.93,1213.93 1698.52,1213.93 1699.1,1213.93 1699.69,1213.93 1700.28,1213.93 1700.86,1213.93 1701.45,1213.93 1702.04,1213.93 1702.62,1213.93 1703.21,1213.93 1703.79,1213.93 1704.38,1213.93 1704.97,1213.93 1705.55,1213.93 1706.14,1213.93 1706.73,1213.93 1707.31,1213.93 1707.9,1213.93 1708.49,1213.93 1709.07,1213.93 1709.66,1213.93 1710.24,1213.93 1710.83,1213.93 1711.42,1213.93 1712,1213.93 1712.59,1213.93 1713.18,1213.93 1713.76,1213.93 1714.35,1213.93 1714.94,1213.93 1715.52,1213.93 1716.11,1213.93 1716.7,1213.93 1717.28,1213.93 1717.87,1213.93 1718.45,1213.93 1719.04,1213.93 1719.63,1213.93 1720.21,1213.93 1720.8,1213.93 1721.39,1213.93 1721.97,1213.93 1722.56,1213.93 1723.15,1213.93 1723.73,1213.93 1724.32,1213.93 1724.91,1213.93 1725.49,1213.93 1726.08,1213.93 1726.66,1213.93 1727.25,1213.93 1727.84,1213.93 1728.42,1213.93 1729.01,1213.93 1729.6,1213.93 1730.18,1213.93 1730.77,1213.93 1731.36,1213.93 1731.94,1213.93 1732.53,1213.93 1733.11,1213.93 1733.7,1213.93 1734.29,1213.93 1734.87,1213.93 1735.46,1213.93 1736.05,1213.93 1736.63,1213.93 1737.22,1213.93 1737.81,1213.93 1738.39,1213.93 1738.98,1213.93 1739.57,1213.93 1740.15,1213.93 1740.74,1213.93 1741.32,1213.93 1741.91,1213.93 1742.5,1213.93 1743.08,1213.93 1743.67,1213.93 1744.26,1213.93 1744.84,1213.93 1745.43,1213.93 1746.02,1213.93 1746.6,1213.93 1747.19,1213.93 1747.78,1213.93 1748.36,1213.93 1748.95,1213.93 1749.53,1213.93 1750.12,1213.93 1750.71,1213.93 1751.29,1213.93 1751.88,1213.93 1752.47,1213.93 1753.05,1213.93 1753.64,1213.93 1754.23,1213.93 1754.81,1213.93 1755.4,1213.93 1755.99,1213.93 1756.57,1213.93 1757.16,1213.93 1757.74,1213.93 1758.33,1213.93 1758.92,1213.93 1759.5,1213.93 1760.09,1213.93 1760.68,1213.93 1761.26,1213.93 1761.85,1213.93 1762.44,1213.93 1763.02,1213.93 1763.61,1213.93 1764.19,1213.93 1764.78,1213.93 1765.37,1213.93 1765.95,1213.93 1766.54,1213.93 1767.13,1213.93 1767.71,1213.93 1768.3,1213.93 1768.89,1213.93 1769.47,1213.93 1770.06,1213.93 1770.65,1213.93 1771.23,1213.93 1771.82,1213.93 1772.4,1213.93 1772.99,1213.93 1773.58,1213.93 1774.16,1213.93 1774.75,1213.93 1775.34,1213.93 1775.92,1213.93 1776.51,1213.93 1777.1,1213.93 1777.68,1213.93 1778.27,1213.93 1778.86,1213.93 1779.44,1213.93 1780.03,1213.93 1780.61,1213.93 1781.2,1213.93 1781.79,1213.93 1782.37,1213.93 1782.96,1213.93 1783.55,1213.93 1784.13,1213.93 1784.72,1213.93 1785.31,1213.93 1785.89,1213.93 1786.48,1213.93 1787.06,1213.93 1787.65,1213.93 1788.24,1213.93 1788.82,1213.93 1789.41,1213.93 1790,1213.93 1790.58,1213.93 1791.17,1213.93 1791.76,1213.93 1792.34,1213.93 1792.93,1213.93 1793.52,1213.93 1794.1,1213.93 1794.69,1213.93 1795.27,1213.93 1795.86,1213.93 1796.45,1213.93 1797.03,1213.93 1797.62,1213.93 1798.21,1213.93 1798.79,1213.93 1799.38,1213.93 1799.97,1213.93 1800.55,1213.93 1801.14,1213.93 1801.73,1213.93 1802.31,1213.93 1802.9,1213.93 1803.48,1213.93 1804.07,1213.93 1804.66,1213.93 1805.24,1213.93 1805.83,1213.93 1806.42,1213.93 1807,1213.93 1807.59,1213.93 1808.18,1213.93 1808.76,1213.93 1809.35,1213.93 1809.94,1213.93 1810.52,1213.93 1811.11,1213.93 1811.69,1213.93 1812.28,1213.93 1812.87,1213.93 1813.45,1213.93 1814.04,1213.93 1814.63,1213.93 1815.21,1213.93 1815.8,1213.93 1816.39,1213.93 1816.97,1213.93 1817.56,1213.93 1818.14,1213.93 1818.73,1213.93 1819.32,1213.93 1819.9,1213.93 1820.49,1213.93 1821.08,1213.93 1821.66,1213.93 1822.25,1213.93 1822.84,1213.93 1823.42,1213.93 1824.01,1213.93 1824.6,1213.93 1825.18,1213.93 1825.77,1213.93 1826.35,1213.93 1826.94,1213.93 1827.53,1213.93 1828.11,1213.93 1828.7,1213.93 1829.29,1213.93 1829.87,1213.93 1830.46,1213.93 1831.05,1213.93 1831.63,1213.93 1832.22,1213.93 1832.81,1213.93 1833.39,1213.93 1833.98,1213.93 1834.56,1213.93 1835.15,1213.93 1835.74,1213.93 1836.32,1213.93 1836.91,1213.93 1837.5,1213.93 1838.08,1213.93 1838.67,1213.93 1839.26,1213.93 1839.84,1213.93 1840.43,1213.93 1841.01,1213.93 1841.6,1213.93 1842.19,1213.93 1842.77,1213.93 1843.36,1213.93 1843.95,1213.93 1844.53,1213.93 1845.12,1213.93 1845.71,1213.93 1846.29,1213.93 1846.88,1213.93 1847.47,1213.93 1848.05,1213.93 1848.64,1213.93 1849.22,1213.93 1849.81,1213.93 1850.4,1213.93 1850.98,1213.93 1851.57,1213.93 1852.16,1213.93 1852.74,1213.93 1853.33,1213.93 1853.92,1213.93 1854.5,1213.93 1855.09,1213.93 1855.68,1213.93 1856.26,1213.93 1856.85,1213.93 1857.43,1213.93 1858.02,1213.93 1858.61,1213.93 1859.19,1213.93 1859.78,1213.93 1860.37,1213.93 1860.95,1213.93 1861.54,1213.93 1862.13,1213.93 1862.71,1213.93 1863.3,1213.93 1863.88,1213.93 1864.47,1213.93 1865.06,1213.93 1865.64,1213.93 1866.23,1213.93 1866.82,1213.93 1867.4,1213.93 1867.99,1213.93 1868.58,1213.93 1869.16,1213.93 1869.75,1213.93 1870.34,1213.93 1870.92,1213.93 1871.51,1213.93 1872.09,1213.93 1872.68,1213.93 1873.27,1213.93 1873.85,1213.93 1874.44,1213.93 1875.03,1213.93 1875.61,1213.93 1876.2,1213.93 1876.79,1213.93 1877.37,1213.93 1877.96,1213.93 1878.55,1213.93 1879.13,1213.93 1879.72,1213.93 1880.3,1213.93 1880.89,1213.93 1881.48,1213.93 1882.06,1213.93 1882.65,1213.93 1883.24,1213.93 1883.82,1213.93 1884.41,1213.93 1885,1213.93 1885.58,1213.93 1886.17,1213.93 1886.76,1213.93 1887.34,1213.93 1887.93,1213.93 1888.51,1213.93 1889.1,1213.93 1889.69,1213.93 1890.27,1213.93 1890.86,1213.93 1891.45,1213.93 1892.03,1213.93 1892.62,1213.93 1893.21,1213.93 1893.79,1213.93 1894.38,1213.93 1894.96,1213.93 1895.55,1213.93 1896.14,1213.93 1896.72,1213.93 1897.31,1213.93 1897.9,1213.93 1898.48,1213.93 1899.07,1213.93 1899.66,1213.93 1900.24,1213.93 1900.83,1213.93 1901.42,1213.93 1902,1213.93 1902.59,1213.93 1903.17,1213.93 1903.76,1213.93 1904.35,1213.93 1904.93,1213.93 1905.52,1213.93 1906.11,1213.93 1906.69,1213.93 1907.28,1213.93 1907.87,1213.93 1908.45,1213.93 1909.04,1213.93 1909.63,1213.93 1910.21,1213.93 1910.8,1213.93 1911.38,1213.93 1911.97,1213.93 1912.56,1213.93 1913.14,1213.93 1913.73,1213.93 1914.32,1213.93 1914.9,1213.93 1915.49,1213.93 1916.08,1213.93 1916.66,1213.93 1917.25,1213.93 1917.83,1213.93 1918.42,1213.93 1919.01,1213.93 1919.59,1213.93 1920.18,1213.93 1920.77,1213.93 1921.35,1213.93 1921.94,1213.93 1922.53,1213.93 1923.11,1213.93 1923.7,1213.93 1924.29,1213.93 1924.87,1213.93 1925.46,1213.93 1926.04,1213.93 1926.63,1213.93 1927.22,1213.93 1927.8,1213.93 1928.39,1213.93 1928.98,1213.93 1929.56,1213.93 1930.15,1213.93 1930.74,1213.93 1931.32,1213.93 1931.91,1213.93 1932.5,1213.93 1933.08,1213.93 1933.67,1213.93 1934.25,1213.93 1934.84,1213.93 1935.43,1213.93 1936.01,1213.93 1936.6,1213.93 1937.19,1213.93 1937.77,1213.93 1938.36,1213.93 1938.95,1213.93 1939.53,1213.93 1940.12,1213.93 1940.71,1213.93 1941.29,1213.93 1941.88,1213.93 1942.46,1213.93 1943.05,1213.93 1943.64,1213.93 1944.22,1213.93 1944.81,1213.93 1945.4,1213.93 1945.98,1213.93 1946.57,1213.93 1947.16,1213.93 1947.74,1213.93 1948.33,1213.93 1948.91,1213.93 1949.5,1213.93 1950.09,1213.93 1950.67,1213.93 1951.26,1213.93 1951.85,1213.93 1952.43,1213.93 1953.02,1213.93 1953.61,1213.93 1954.19,1213.93 1954.78,1213.93 1955.37,1213.93 1955.95,1213.93 1956.54,1213.93 1957.12,1213.93 1957.71,1213.93 1958.3,1213.93 1958.88,1213.93 1959.47,1213.93 1960.06,1213.93 1960.64,1213.93 1961.23,1213.93 1961.82,1213.93 1962.4,1213.93 1962.99,1213.93 1963.58,1213.93 1964.16,1213.93 1964.75,1213.93 1965.33,1213.93 1965.92,1213.93 1966.51,1213.93 1967.09,1213.93 1967.68,1213.93 1968.27,1213.93 1968.85,1213.93 1969.44,1213.93 1970.03,1213.93 1970.61,1213.93 1971.2,1213.93 1971.78,1213.93 1972.37,1213.93 1972.96,1213.93 1973.54,1213.93 1974.13,1213.93 1974.72,1213.93 1975.3,1213.93 1975.89,1213.93 1976.48,1213.93 1977.06,1213.93 1977.65,1213.93 1978.24,1213.93 1978.82,1213.93 1979.41,1213.93 1979.99,1213.93 1980.58,1213.93 1981.17,1213.93 1981.75,1213.93 1982.34,1213.93 1982.93,1213.93 1983.51,1213.93 1984.1,1213.93 1984.69,1213.93 1985.27,1213.93 1985.86,1213.93 1986.45,1213.93 1987.03,1213.93 1987.62,1213.93 1988.2,1213.93 1988.79,1213.93 1989.38,1213.93 1989.96,1213.93 1990.55,1213.93 1991.14,1213.93 1991.72,1213.93 1992.31,1213.93 1992.9,1213.93 1993.48,1213.93 1994.07,1213.93 1994.65,1213.93 1995.24,1213.93 1995.83,1213.93 1996.41,1213.93 1997,1213.93 1997.59,1213.93 1998.17,1213.93 1998.76,1213.93 1999.35,1213.93 1999.93,1213.93 2000.52,1213.93 2001.11,1213.93 2001.69,1213.93 2002.28,1213.93 2002.86,1213.93 2003.45,1213.93 2004.04,1213.93 2004.62,1213.93 2005.21,1213.93 2005.8,1213.93 2006.38,1213.93 2006.97,1213.93 2007.56,1213.93 2008.14,1213.93 2008.73,1213.93 2009.32,1213.93 2009.9,1213.93 2010.49,1213.93 2011.07,1213.93 2011.66,1213.93 2012.25,1213.93 2012.83,1213.93 2013.42,1213.93 2014.01,1213.93 2014.59,1213.93 2015.18,1213.93 2015.77,1213.93 2016.35,1213.93 2016.94,1213.93 2017.53,1213.93 2018.11,1213.93 2018.7,1213.93 2019.28,1213.93 2019.87,1213.93 2020.46,1213.93 2021.04,1213.93 2021.63,1213.93 2022.22,1213.93 2022.8,1213.93 2023.39,1213.93 2023.98,1213.93 2024.56,1213.93 2025.15,1213.93 2025.73,1213.93 2026.32,1213.93 2026.91,1213.93 2027.49,1213.93 2028.08,1213.93 2028.67,1213.93 2029.25,1213.93 2029.84,1213.93 2030.43,1213.93 2031.01,1213.93 2031.6,1213.93 2032.19,1213.93 2032.77,1213.93 2033.36,1213.93 2033.94,1213.93 2034.53,1213.93 2035.12,1213.93 2035.7,1213.93 2036.29,1213.93 2036.88,1213.93 2037.46,1213.93 2038.05,1213.93 2038.64,1213.93 2039.22,1213.93 2039.81,1213.93 2040.4,1213.93 2040.98,1213.93 2041.57,1213.93 2042.15,1213.93 2042.74,1213.93 2043.33,1213.93 2043.91,1213.93 2044.5,1213.93 2045.09,1213.93 2045.67,1213.93 2046.26,1213.93 2046.85,1213.93 2047.43,1213.93 2048.02,1213.93 2048.6,1213.93 2049.19,1213.93 2049.78,1213.93 2050.36,1213.93 2050.95,1213.93 2051.54,1213.93 2052.12,1213.93 2052.71,1213.93 2053.3,1213.93 2053.88,1213.93 2054.47,1213.93 2055.06,1213.93 2055.64,1213.93 2056.23,1213.93 2056.81,1213.93 2057.4,1213.93 2057.99,1213.93 2058.57,1213.93 2059.16,1213.93 2059.75,1213.93 2060.33,1213.93 2060.92,1213.93 2061.51,1213.93 2062.09,1213.93 2062.68,1213.93 2063.27,1213.93 2063.85,1213.93 2064.44,1213.93 2065.02,1213.93 2065.61,1213.93 2066.2,1213.93 2066.78,1213.93 2067.37,1213.93 2067.96,1213.93 2068.54,1213.93 2069.13,1213.93 2069.72,1213.93 2070.3,1213.93 2070.89,1213.93 2071.48,1213.93 2072.06,1213.93 2072.65,1213.93 2073.23,1213.93 2073.82,1213.93 2074.41,1213.93 2074.99,1213.93 2075.58,1213.93 2076.17,1213.93 2076.75,1213.93 2077.34,1213.93 2077.93,1213.93 2078.51,1213.93 2079.1,1213.93 2079.68,1213.93 2080.27,1213.93 2080.86,1213.93 2081.44,1213.93 2082.03,1213.93 2082.62,1213.93 2083.2,1213.93 2083.79,1213.93 2084.38,1213.93 2084.96,1213.93 2085.55,1213.93 2086.14,1213.93 2086.72,1213.93 2087.31,1213.93 2087.89,1213.93 2088.48,1213.93 2089.07,1213.93 2089.65,1213.93 2090.24,1213.93 2090.83,1213.93 2091.41,1213.93 2092,1213.93 2092.59,1213.93 2093.17,1213.93 2093.76,1213.93 2094.35,1213.93 2094.93,1213.93 2095.52,1213.93 2096.1,1213.93 2096.69,1213.93 2097.28,1213.93 2097.86,1213.93 2098.45,1213.93 2099.04,1213.93 2099.62,1213.93 2100.21,1213.93 2100.8,1213.93 2101.38,1213.93 2101.97,1213.93 2102.55,1213.93 2103.14,1213.93 2103.73,1213.93 2104.31,1213.93 2104.9,1213.93 2105.49,1213.93 2106.07,1213.93 2106.66,1213.93 2107.25,1213.93 2107.83,1213.93 2108.42,1213.93 2109.01,1213.93 2109.59,1213.93 2110.18,1213.93 2110.76,1213.93 2111.35,1213.93 2111.94,1213.93 2112.52,1213.93 2113.11,1213.93 2113.7,1213.93 2114.28,1213.93 2114.87,1213.93 2115.46,1213.93 2116.04,1213.93 2116.63,1213.93 2117.22,1213.93 2117.8,1213.93 2118.39,1213.93 2118.97,1213.93 2119.56,1213.93 2120.15,1213.93 2120.73,1213.93 2121.32,1213.93 2121.91,1213.93 2122.49,1213.93 2123.08,1213.93 2123.67,1213.93 2124.25,1213.93 2124.84,1213.93 2125.42,1213.93 2126.01,1213.93 2126.6,1213.93 2127.18,1213.93 2127.77,1213.93 2128.36,1213.93 2128.94,1213.93 2129.53,1213.93 2130.12,1213.93 2130.7,1213.93 2131.29,1213.93 2131.88,1213.93 2132.46,1213.93 2133.05,1213.93 2133.63,1213.93 2134.22,1213.93 2134.81,1213.93 2135.39,1213.93 2135.98,1213.93 2136.57,1213.93 2137.15,1213.93 2137.74,1213.93 2138.33,1213.93 2138.91,1213.93 2139.5,1213.93 2140.09,1213.93 2140.67,1213.93 2141.26,1213.93 2141.84,1213.93 2142.43,1213.93 2143.02,1213.93 2143.6,1213.93 2144.19,1213.93 2144.78,1213.93 2145.36,1213.93 2145.95,1213.93 2146.54,1213.93 2147.12,1213.93 2147.71,1213.93 2148.3,1213.93 2148.88,1213.93 2149.47,1213.93 2150.05,1213.93 2150.64,1213.93 2151.23,1213.93 2151.81,1213.93 2152.4,1213.93 2152.99,1213.93 2153.57,1213.93 2154.16,1213.93 2154.75,1213.93 2155.33,1213.93 2155.92,1213.93 2156.5,1213.93 2157.09,1213.93 2157.68,1213.93 2158.26,1213.93 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.18,1196.12 1398.98,899.083 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.31 985.439,1196.12 2158.26,1196.12 2158.26,1231.31 985.439,1231.31 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip693\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip693)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-2318.74 163.792,-3466.77 164.351,-4459.94 164.91,-5462.73 165.469,-6324.23 166.029,-7164.63 166.588,-7854.58 167.147,-7574.68 167.706,-8222.19 168.266,-8806.82 168.825,-9332.63 169.384,-9803.44 169.943,-10222.8 170.503,-10594.1 171.062,-10920.5 171.621,-11204.8 172.18,-11450 172.74,-11658.6 173.299,-11315.5 173.858,-11477.1 174.417,-11154.2 174.977,-11266.7 175.536,-10971 176.095,-11054.9 176.655,-11109.8 177.214,-10837.9 177.773,-10574.1 178.332,-10597.9 178.892,-10353.4 179.451,-10089.8 180.01,-10083.8 180.569,-10054.1 181.129,-10005.6 181.688,-9951.95 182.247,-9708.9 182.806,-9475.29 183.366,-9389.91 183.925,-9297.8 184.484,-9208.46 185.043,-9104.51 185.603,-8852.16 186.162,-8729.86 186.721,-8365.83 187.28,-8252.68 187.84,-8138.03 188.399,-7905 188.958,-7680.59 189.517,-7466.81 190.077,-7334.94 190.636,-7203.61 191.195,-6985.7 191.754,-6699.95 192.314,-6421.58 192.873,-6297.19 193.432,-6159.94 193.991,-5961.33 194.551,-5712.56 195.11,-5586.31 195.669,-5282.76 196.228,-5050.45 196.788,-4828.85 197.347,-4714.2 197.906,-4454.08 198.465,-4304.05 199.025,-4156.22 199.584,-3922.86 200.143,-3830.49 200.702,-3694.77 201.262,-3604.08 201.821,-3516.57 202.38,-3424.71 202.939,-3216.68 203.499,-3017.43 204.058,-2865.84 204.617,-2749.4 205.176,-2635.59 205.736,-2529.15 206.295,-2427.08 206.854,-2355.96 207.413,-2291.52 207.973,-2128.36 208.532,-1936.47 209.091,-1814.28 209.65,-1729.09 210.21,-1588.29 210.769,-1511.72 211.328,-1380.16 211.887,-1281.41 212.447,-1162.9 213.006,-1072.71 213.565,-1010.62 214.124,-977.273 214.684,-917.425 215.243,-860.129 215.802,-800.271 216.361,-663.599 216.921,-632.421 217.48,-579.921 218.039,-501.699 218.598,-453.596 219.158,-404.837 219.717,-331.368 220.276,-261.473 220.835,-214.173 221.395,-195.702 221.954,-131.075 222.513,-113.909 223.072,-30.1546 223.632,5.88179 224.191,40.2075 224.75,53.3355 225.309,109.693 225.869,141.519 226.428,155.386 226.987,228.486 227.546,306.993 228.106,333.966 228.665,362.99 229.224,386.638 229.783,412.683 230.343,456.031 230.902,479.45 231.461,526.364 232.02,526.321 232.58,566.99 233.139,569.281 233.698,632.219 234.257,633.789 234.817,632.158 235.376,632.061 235.935,673.354 236.494,669.889 237.054,671.088 237.613,676.394 238.172,696.154 238.731,752.425 239.291,767.074 239.85,838.275 240.409,816.859 240.968,832.757 241.528,900.363 242.087,912.448 242.646,923.41 243.205,953.742 243.765,941.336 244.324,1008.89 244.883,1015.31 245.442,988.552 246.002,998.293 246.561,1006.45 247.12,996.621 247.679,1005.95 248.239,1014.22 248.798,1042.3 249.357,1026.42 249.916,1012.19 250.476,990.098 251.035,969.941 251.594,965.36 252.153,941.909 252.713,936.702 253.272,917.258 253.831,950.738 254.39,969.665 254.95,1001.44 255.509,1028.36 256.068,1005.98 256.627,1002.45 257.187,996.132 257.746,1009.36 258.305,987.32 258.864,948.199 259.424,961.806 259.983,958.498 260.542,971.578 261.101,1003.04 261.661,983.991 262.22,1017.14 262.779,996.99 263.338,993.028 263.898,972.807 264.457,953.472 265.016,1004.51 265.575,1003.99 266.135,1016.08 266.694,1033.36 267.253,1044.5 267.812,1071.86 268.372,1078.03 268.931,1071.4 269.49,1044.69 270.049,1085.13 270.609,1077.29 271.168,1088.39 271.727,1066.01 272.286,1079.24 272.846,1039.48 273.405,1068.38 273.964,1094.48 274.523,1088.02 275.083,1080.01 275.642,1069.09 276.201,1096.26 276.76,1104.89 277.32,1110.65 277.879,1098.9 278.438,1089.95 278.997,1079.29 279.557,1084.9 280.116,1073.21 280.675,1071.81 281.234,1114.92 281.794,1137.65 282.353,1108.27 282.912,1064.03 283.471,1039.45 284.031,1014.68 284.59,1043.18 285.149,1069.96 285.708,1028.98 286.268,992.905 286.827,1022.39 287.386,1016.24 287.945,1028.47 288.505,1024.25 289.064,1019.21 289.623,998.405 290.182,978.917 290.742,1022.82 291.301,1034.13 291.86,1029.63 292.419,1005.74 292.979,986.364 293.538,1028.88 294.097,1023.01 294.656,1017.51 295.216,1010.43 295.775,1004.38 296.334,1029.32 296.893,1037.52 297.453,1030.12 298.012,1042.09 298.571,1048.67 299.13,1036.94 299.69,1014.26 300.249,994.014 300.808,1021.24 301.368,1014.1 301.927,1058.59 302.486,984.836 303.045,979.748 303.605,991.815 304.164,1001.67 304.723,996.874 305.282,1009.06 305.842,985.886 306.401,952.227 306.96,1016.19 307.519,981.917 308.079,976.934 308.638,974.615 309.197,975.575 309.756,970.937 310.316,970.263 310.875,979.587 311.434,972.564 311.993,948.972 312.553,978.216 313.112,984.881 313.671,996.708 314.23,1026.53 314.79,1020.38 315.349,1013.96 315.908,993.196 316.467,972.182 317.027,967.639 317.586,964.072 318.145,958.311 318.704,969.429 319.264,975.874 319.823,955.19 320.382,968.256 320.941,946.99 321.501,1007.68 322.06,1016.52 322.619,1013.02 323.178,1025.02 323.738,1031.62 324.297,1022.68 324.856,1028.45 325.415,1001.39 325.975,1008.82 326.534,1000.27 327.093,977.074 327.652,970.222 328.212,981.727 328.771,973.625 329.33,984.676 329.889,978.646 330.449,972.061 331.008,980.814 331.567,971.815 332.126,1015.24 332.686,1024.32 333.245,1015.62 333.804,1009.71 334.363,1000.02 334.923,942.915 335.482,953.71 336.041,948.356 336.6,942.346 337.16,902.958 337.719,913.794 338.278,925.921 338.837,919.091 339.397,900.231 339.956,892.557 340.515,907.493 341.074,903.512 341.634,897.369 342.193,909.745 342.752,907.506 343.311,903.245 343.871,931.041 344.43,925.229 344.989,938.461 345.548,953.254 346.108,961.127 346.667,935.911 347.226,945.815 347.785,942.103 348.345,952.086 348.904,944.427 349.463,972.411 350.022,967.187 350.582,909.544 351.141,938.655 351.7,919.443 352.259,933.887 352.819,974.877 353.378,933.487 353.937,930.359 354.496,908.576 355.056,889.597 355.615,900.33 356.174,926.553 356.733,938.893 357.293,900.721 357.852,898.749 358.411,927.016 358.97,907.765 359.53,898.248 360.089,893.477 360.648,887.271 361.207,919.017 361.767,896.39 362.326,943.852 362.885,952.719 363.444,931.275 364.004,943.81 364.563,920.949 365.122,913.749 365.681,860.09 366.241,890.188 366.8,853.309 367.359,850.188 367.918,846.529 368.478,861.446 369.037,859.171 369.596,843.238 370.155,811.466 370.715,814.341 371.274,811.298 371.833,776.883 372.392,777.829 372.952,777.869 373.511,797.371 374.07,828.067 374.629,810.925 375.189,841.069 375.748,857.393 376.307,885.335 376.866,864.585 377.426,873.811 377.985,881.44 378.544,874.84 379.103,869.397 379.663,915.688 380.222,924.381 380.781,931.434 381.34,923.172 381.9,884.809 382.459,877.739 383.018,873.669 383.577,854.573 384.137,862.959 384.696,843.263 385.255,824.806 385.814,840.702 386.374,839.939 386.933,848.363 387.492,861.556 388.051,870.407 388.611,848.238 389.17,791.425 389.729,808.751 390.288,806.203 390.848,821.928 391.407,788.866 391.966,804.581 392.525,820.644 393.085,787.771 393.644,752.141 394.203,750.34 394.762,733.974 395.322,773.465 395.881,771.64 396.44,786.683 396.999,788.183 397.559,805.832 398.118,822.43 398.677,853.862 399.236,815.565 399.796,829.102 400.355,828.122 400.914,841.993 401.473,853.883 402.033,843.877 402.592,858.625 403.151,853.435 403.71,813.622 404.27,793.558 404.829,792.96 405.388,791.875 405.947,789.779 406.507,786.867 407.066,738.689 407.625,737.293 408.184,771.135 408.744,785.802 409.303,766.447 409.862,768.615 410.421,754.736 410.981,757.983 411.54,790.656 412.099,776.332 412.658,792.592 413.218,794.36 413.777,792.614 414.336,760.475 414.895,760.374 415.455,777.81 416.014,812.086 416.573,792.039 417.132,773.977 417.692,771.189 418.251,772.071 418.81,770.541 419.369,754.415 419.929,755.222 420.488,754.916 421.047,789.128 421.606,788.642 422.166,768.963 422.725,737.502 423.284,770.744 423.843,782.94 424.403,795.534 424.962,762.822 425.521,745.362 426.08,744.592 426.64,760.066 427.199,790.208 427.758,822.228 428.318,837.169 428.877,831.273 429.436,813.001 429.995,809.646 430.555,804.792 431.114,802.438 431.673,803.622 432.232,804.692 432.792,822.44 433.351,819.388 433.91,820.917 434.469,801.534 435.029,798.663 435.588,811.409 436.147,792.928 436.706,774.983 437.266,755.173 437.825,759.158 438.384,743.697 438.943,791.985 439.503,791.564 440.062,774.735 440.621,741.685 441.18,727.355 441.74,697.809 442.299,683.675 442.858,687.205 443.417,691.148 443.977,713.887 444.536,734.441 445.095,754.062 445.654,756.528 446.214,737.914 446.773,723.71 447.332,758.714 447.891,761.74 448.451,763.657 449.01,810.756 449.569,806.621 450.128,771.064 450.688,771.032 451.247,737.9 451.806,755.155 452.365,773.427 452.925,771.052 453.484,736.649 454.043,757.759 454.602,690.281 455.162,694.947 455.721,682.181 456.28,687.026 456.839,705.69 457.399,726.785 457.958,745.467 458.517,746.53 459.076,763.619 459.636,759.534 460.195,824.303 460.754,820.05 461.313,812.978 461.873,824.337 462.432,853.353 462.991,863.67 463.55,887.271 464.11,909.904 464.669,898.562 465.228,906.962 465.787,867.353 466.347,829.085 466.906,808.873 467.465,823.63 468.024,837.329 468.584,815.181 469.143,764.428 469.702,763.524 470.261,791.916 470.821,804.051 471.38,782.289 471.939,748.9 472.498,732.309 473.058,718.94 473.617,737.99 474.176,704.631 474.735,706.172 475.295,711.669 475.854,694.417 476.413,699.497 476.972,684.615 477.532,753.779 478.091,735.124 478.65,700.951 479.209,671.174 479.769,691.966 480.328,679.388 480.887,665.925 481.446,688.4 482.006,691.276 482.565,710.746 483.124,714.81 483.683,716.987 484.243,702.278 484.802,722.328 485.361,757.292 485.92,741.08 486.48,758.7 487.039,770.528 487.598,769.285 488.157,767.527 488.717,797.662 489.276,842.718 489.835,868.042 490.394,895.183 490.954,883.132 491.513,857.806 492.072,851.784 492.631,846.372 493.191,776.183 493.75,775.507 494.309,789.427 494.868,788.393 495.428,770.226 495.987,770.889 496.546,752.66 497.105,719.524 497.665,739.074 498.224,725.378 498.783,739.746 499.342,736.953 499.902,751.129 500.461,750.681 501.02,703.463 501.579,705.449 502.139,738.439 502.698,736.381 503.257,753.745 503.816,755.313 504.376,703.891 504.935,676.304 505.494,681.326 506.053,701.396 506.613,701.831 507.172,702.624 507.731,720.481 508.29,755.037 508.85,752.01 509.409,763.494 509.968,744.425 510.527,742.196 511.087,757.699 511.646,737.844 512.205,719.771 512.764,737.474 513.324,753.636 513.883,737.089 514.442,719.597 515.001,702.406 515.561,700.539 516.12,701.752 516.679,738.236 517.238,734.242 517.798,766.22 518.357,748.43 518.916,781.369 519.475,778.573 520.035,711.338 520.594,661.475 521.153,648.692 521.712,682.83 522.272,703.518 522.831,738.032 523.39,735.043 523.949,783.645 524.509,765.052 525.068,780.259 525.627,776.113 526.186,789.226 526.746,801.092 527.305,780.655 527.864,779.635 528.423,745.442 528.983,780.247 529.542,774.927 530.101,790.357 530.66,822.643 531.22,817.71 531.779,829.988 532.338,806.001 532.897,799.428 533.457,780.655 534.016,796.634 534.575,760.651 535.134,790.621 535.694,739.757 536.253,724.097 536.812,740.002 537.371,740.286 537.931,804.233 538.49,830.008 539.049,839.943 539.608,798.333 540.168,808.572 540.727,804.282 541.286,798.395 541.845,814.662 542.405,808.741 542.964,804.176 543.523,876.638 544.082,885.461 544.642,906.171 545.201,847.663 545.76,841.203 546.319,820.876 546.879,782.26 547.438,779.74 547.997,773.888 548.556,752.493 549.116,754.365 549.675,720.685 550.234,738.972 550.793,720.027 551.353,719.003 551.912,719.618 552.471,685.546 553.031,700.84 553.59,701.035 554.149,733.832 554.708,717.808 555.268,719.333 555.827,718.028 556.386,718.8 556.945,797.59 557.505,824.085 558.064,834.354 558.623,797.697 559.182,757.93 559.742,741.572 560.301,722.74 560.86,752.676 561.419,751.821 561.979,746.538 562.538,741.469 563.097,740.786 563.656,722.784 564.216,689.721 564.775,705.806 565.334,706.946 565.893,722.916 566.453,704.911 567.012,722.754 567.571,690.622 568.13,705.88 568.69,736.72 569.249,702.208 569.808,715.496 570.367,698.658 570.927,718.129 571.486,702.398 572.045,731.411 572.604,713.174 573.164,743.828 573.723,712.317 574.282,731.459 574.841,728.756 575.401,727.508 575.96,726.693 576.519,742.007 577.078,770.335 577.638,751.174 578.197,733.596 578.756,733.458 579.315,701.25 579.875,703.077 580.434,702.47 580.993,686.968 581.552,652.223 582.112,606.601 582.671,631.602 583.23,651.322 583.789,655.129 584.349,658.147 584.908,695.48 585.467,694.462 586.026,696.219 586.586,713.914 587.145,745.387 587.704,743.615 588.263,740.062 588.823,737.356 589.382,740.638 589.941,740.164 590.5,738.655 591.06,722.79 591.619,754.877 592.178,724.292 592.737,742.946 593.297,742.672 593.856,743.106 594.415,756.401 594.974,755.68 595.534,753.182 596.093,720.795 596.652,703.507 597.211,701.251 597.771,717.301 598.33,732.761 598.889,683.454 599.448,732.42 600.008,731.988 600.567,730.414 601.126,730.252 601.685,727.963 602.245,729.367 602.804,710.068 603.363,675.113 603.922,672.919 604.482,677.095 605.041,628.377 605.6,630.063 606.159,666.031 606.719,635.223 607.278,588.632 607.837,609.705 608.396,582.111 608.956,604.367 609.515,576.259 610.074,582.605 610.633,622.399 611.193,641.786 611.752,646.997 612.311,651.25 612.87,670.539 613.43,657.927 613.989,675.893 614.548,677.887 615.107,678.24 615.667,678.82 616.226,695.833 616.785,708.073 617.344,676.306 617.904,641.371 618.463,629.882 619.022,634.171 619.581,636.438 620.141,673.792 620.7,725.563 621.259,746.253 621.818,729.51 622.378,693.76 622.937,694.781 623.496,729.293 624.055,731.635 624.615,731.155 625.174,746.404 625.733,711.848 626.292,725.469 626.852,755.873 627.411,767.512 627.97,748.468 628.529,747.48 629.089,712.763 629.648,729.849 630.207,713.554 630.766,645.325 631.326,629.979 631.885,633.487 632.444,620.798 633.003,625.603 633.563,629.924 634.122,651.115 634.681,638.089 635.24,642.247 635.8,612.169 636.359,634.088 636.918,670.817 637.477,658.667 638.037,657.604 638.596,627.667 639.155,666.727 639.714,640.082 640.274,655.564 640.833,672.25 641.392,674.966 641.951,674.737 642.511,658.755 643.07,681.686 643.629,684.894 644.188,653.03 644.748,673.815 645.307,659.405 645.866,623.272 646.425,626.128 646.985,627.784 647.544,649.87 648.103,669.765 648.662,639.252 649.222,642.214 649.781,645.593 650.34,681.17 650.899,684.784 651.459,688.933 652.018,704.922 652.577,704.003 653.136,689.317 653.696,692.736 654.255,727.852 654.814,741.853 655.373,741.51 655.933,724.408 656.492,739.501 657.051,737.535 657.61,752.178 658.17,732.124 658.729,744.842 659.288,708.947 659.847,723.466 660.407,706.751 660.966,702.036 661.525,698.156 662.084,695.166 662.644,711.457 663.203,709.363 663.762,691.949 664.321,707.988 664.881,692.652 665.44,724.986 665.999,724.773 666.558,691.007 667.118,722.642 667.677,708.125 668.236,708.069 668.795,693.167 669.355,692.231 669.914,708.662 670.473,723.255 671.032,722.359 671.592,720.012 672.151,732.418 672.71,758.489 673.269,722.446 673.829,688.318 674.388,702.343 674.947,667.899 675.506,668.852 676.066,653.46 676.625,638.843 677.184,657.467 677.743,674.98 678.303,693.429 678.862,651.184 679.421,638.549 679.981,641.091 680.54,594.282 681.099,583.264 681.658,620.236 682.218,667.215 682.777,683.427 683.336,655.991 683.895,641.08 684.455,680.401 685.014,664.311 685.573,655.531 686.132,676.083 686.692,677.571 687.251,714.996 687.81,714.006 688.369,712.913 688.929,711.369 689.488,675.804 690.047,692.965 690.606,678.072 691.166,662.166 691.725,660.611 692.284,646.472 692.843,634.694 693.403,649.854 693.962,686.392 694.521,704.405 695.08,689.052 695.64,687.514 696.199,687.579 696.758,685.866 697.317,720.229 697.877,703.916 698.436,722.301 698.995,701.375 699.554,731.234 700.114,747.064 700.673,695.363 701.232,683.585 701.791,690.195 702.351,692.255 702.91,726.099 703.469,725.04 704.028,741.763 704.588,769.722 705.147,750.047 705.706,742.484 706.265,723.472 706.825,704.44 707.384,720.047 707.943,702.24 708.502,731.401 709.062,760.587 709.621,755.46 710.18,750.075 710.739,747.546 711.299,744.415 711.858,773.92 712.417,756.443 712.976,709.392 713.536,704.902 714.095,688.843 714.654,673.348 715.213,690.649 715.773,675.445 716.332,681.364 716.891,664.991 717.45,683.168 718.01,684.613 718.569,716.953 719.128,715.887 719.687,717.497 720.247,700.621 720.806,718.244 721.365,687.026 721.924,686.776 722.484,720.456 723.043,737.247 723.602,737.108 724.161,734.56 724.721,747.197 725.28,744.482 725.839,774.944 726.398,791.666 726.958,817.655 727.517,845.609 728.076,853.171 728.635,845.193 729.195,818.661 729.754,795.43 730.313,774.042 730.872,752.163 731.432,748.225 731.991,743.581 732.55,758.877 733.109,721.242 733.669,736.85 734.228,750.148 734.787,730.898 735.346,762.42 735.906,775.263 736.465,739.728 737.024,658.285 737.583,628.244 738.143,633.2 738.702,620.197 739.261,575.476 739.82,583.693 740.38,589.036 740.939,580.31 741.498,573.167 742.057,628.642 742.617,629.29 743.176,651.875 743.735,670.274 744.294,673.54 744.854,706.331 745.413,702.103 745.972,717.614 746.531,761.675 747.091,756.419 747.65,736.9 748.209,701.442 748.768,716.89 749.328,717.972 749.887,748.869 750.446,741.292 751.005,724.939 751.565,724.038 752.124,703.495 752.683,668.776 753.242,668.27 753.802,684.825 754.361,689.168 754.92,676.169 755.479,728.544 756.039,745.228 756.598,740.991 757.157,754.808 757.716,751.295 758.276,749.982 758.835,765.794 759.394,765.157 759.953,762.409 760.513,774.389 761.072,770.808 761.631,782.855 762.19,776.015 762.75,788.361 763.309,781.482 763.868,725.477 764.427,673.062 764.987,674.146 765.546,657.099 766.105,676.27 766.664,694.197 767.224,712.149 767.783,708.374 768.342,689.843 768.901,686.732 769.461,682.281 770.02,695.763 770.579,693.824 771.138,676.924 771.698,672.973 772.257,690.061 772.816,691.994 773.375,708.595 773.935,689.348 774.494,653.342 775.053,686.836 775.612,687.296 776.172,704.753 776.731,688.371 777.29,705.441 777.849,702.705 778.409,717.518 778.968,716.047 779.527,684.234 780.086,701.079 780.646,712.32 781.205,694.209 781.764,692.841 782.323,673.537 782.883,674.319 783.442,703.955 784.001,703.311 784.56,719.304 785.12,715.21 785.679,700.496 786.238,731.905 786.797,715.416 787.357,713.459 787.916,711.284 788.475,742.872 789.034,723.389 789.594,719.477 790.153,736.293 790.712,718.017 791.271,714.197 791.831,714.371 792.39,712.059 792.949,694.607 793.508,714.115 794.068,727.651 794.627,726.717 795.186,707.987 795.745,728.906 796.305,713.753 796.864,730.245 797.423,709.38 797.982,691.546 798.542,724.568 799.101,737.581 799.66,719.176 800.219,699.617 800.779,683.651 801.338,698.324 801.897,714.377 802.456,730.379 803.016,726.918 803.575,709.395 804.134,723.894 804.693,707.819 805.253,723.872 805.812,704.837 806.371,705.476 806.931,688.78 807.49,655.197 808.049,670.91 808.608,670.739 809.168,668.854 809.727,670.183 810.286,654.316 810.845,657.822 811.405,643.332 811.964,646.074 812.523,699.105 813.082,695.943 813.642,664.697 814.201,700.602 814.76,700.48 815.319,696.487 815.879,714.58 816.438,684.249 816.997,635.79 817.556,640.66 818.116,631.551 818.675,601.583 819.234,627.106 819.793,627.175 820.353,597.484 820.912,602.931 821.471,593.775 822.03,634.79 822.59,671.061 823.149,655.948 823.708,625.388 824.267,625.439 824.827,627.156 825.386,631.819 825.945,617.098 826.504,656.354 827.064,707.175 827.623,687.274 828.182,672.473 828.741,689.602 829.301,709.567 829.86,693.82 830.419,660.421 830.978,676.935 831.538,661.264 832.097,696.196 832.656,725.529 833.215,705.779 833.775,671.066 834.334,749.804 834.893,783.54 835.452,730.25 836.012,732.044 836.571,728.102 837.13,739.786 837.689,752.217 838.249,749.64 838.808,748.647 839.367,746.135 839.926,744.271 840.486,726.009 841.045,705.001 841.604,683.029 842.163,666.405 842.723,668.408 843.282,653.898 843.841,672.753 844.4,671.059 844.96,672.881 845.519,676.388 846.078,694.88 846.637,697.809 847.197,678.61 847.756,646.478 848.315,665.547 848.874,699.719 849.434,668.325 849.993,669.457 850.552,637.263 851.111,622.663 851.671,631.063 852.23,646.504 852.789,648.778 853.348,654.469 853.908,657.235 854.467,657.78 855.026,671.497 855.585,690.128 856.145,707.784 856.704,723.075 857.263,752.054 857.822,747.616 858.382,781.138 858.941,762.204 859.5,744.938 860.059,759.478 860.619,772.881 861.178,737.465 861.737,753.259 862.296,749.517 862.856,779.677 863.415,786.943 863.974,785.742 864.533,748.015 865.093,698.695 865.652,695.685 866.211,664.612 866.77,666.221 867.33,686.018 867.889,682.688 868.448,712.731 869.007,694.341 869.567,710.556 870.126,695.092 870.685,693.619 871.244,706.836 871.804,723.019 872.363,719.964 872.922,716.64 873.481,714.274 874.041,729.191 874.6,760.616 875.159,753.125 875.718,735.379 876.278,749.103 876.837,746.362 877.396,761.361 877.955,774.822 878.515,802.59 879.074,811.767 879.633,772.221 880.192,786.049 880.752,768.1 881.311,779.44 881.87,743.568 882.429,774.691 882.989,735.533 883.548,763.971 884.107,758.702 884.666,754.034 885.226,766.811 885.785,745.155 886.344,740.364 886.903,753.234 887.463,748.954 888.022,744.7 888.581,723.414 889.14,720.341 889.7,748.423 890.259,744.105 890.818,738.358 891.377,734.426 891.937,730.847 892.496,725.316 893.055,722.181 893.614,670.475 894.174,669.626 894.733,648.898 895.292,600.818 895.851,604.287 896.411,608.616 896.97,612.488 897.529,634.369 898.088,657.477 898.648,675.499 899.207,707.242 899.766,673.628 900.325,675.249 900.885,709.913 901.444,693.486 902.003,697.602 902.562,664.524 903.122,682.77 903.681,715.286 904.24,731.682 904.799,717.248 905.359,734.539 905.918,752.609 906.477,735.501 907.036,729.804 907.596,732.597 908.155,731.884 908.714,746.367 909.273,743.868 909.833,754.967 910.392,754.478 910.951,714.96 911.51,702.204 912.07,702.205 912.629,686.119 913.188,683.791 913.747,669.307 914.307,669.758 914.866,686.25 915.425,687.308 915.984,655.111 916.544,669.636 917.103,636.546 917.662,671.98 918.221,690.165 918.781,707.973 919.34,690.909 919.899,691.527 920.458,721.331 921.018,718.416 921.577,697.993 922.136,694.182 922.695,677.2 923.255,678.377 923.814,645.334 924.373,649.635 924.932,668.445 925.492,637.905 926.051,688.97 926.61,688.752 927.169,674.394 927.729,691.778 928.288,692.302 928.847,723.951 929.406,736.596 929.966,732.638 930.525,697.141 931.084,664.613 931.644,681.825 932.203,684.003 932.762,683.587 933.321,665.73 933.881,682.27 934.44,634.95 934.999,640.066 935.558,640.797 936.118,673.844 936.677,641.145 937.236,675.853 937.795,674.614 938.355,688.451 938.914,690.055 939.473,676.379 940.032,677.709 940.592,663.283 941.151,665.081 941.71,667.19 942.269,652.46 942.829,656.754 943.388,644.191 943.947,630.365 944.506,619.714 945.066,623.767 945.625,612.85 946.184,637.268 946.743,639.293 947.303,645.567 947.862,649.047 948.421,664.889 948.98,664.688 949.54,650.844 950.099,653.059 950.658,638.015 951.217,661.541 951.777,677.524 952.336,677.62 952.895,727.39 953.454,688.299 954.014,683.375 954.573,700.815 955.132,719.513 955.691,704.26 956.251,690.835 956.81,657.95 957.369,640.738 957.928,564.548 958.488,586.505 959.047,608.341 959.606,597.323 960.165,615.739 960.725,604.937 961.284,608.936 961.843,612.413 962.402,618.007 962.962,623.588 963.521,609.732 964.08,595.035 964.639,611.515 965.199,614.91 965.758,617.689 966.317,621.497 966.876,594.879 967.436,583.903 967.995,590.335 968.554,612.798 969.113,645.449 969.673,666.951 970.232,652.382 970.791,653.426 971.35,652.099 971.91,625.814 972.469,613.917 973.028,640.449 973.587,609.725 974.147,614.939 974.706,586.249 975.265,610.448 975.824,613.38 976.384,601.661 976.943,654.564 977.502,658.349 978.061,644.99 978.621,695.775 979.18,729.652 979.739,758.169 980.298,753.456 980.858,751.332 981.417,731.795 981.976,745.532 982.535,740.347 983.095,736.892 983.654,750.583 984.213,729.955 984.772,729.232 985.332,693.014 985.891,707.309 986.45,740.225 987.009,724.571 987.569,707.273 988.128,690.685 988.687,708.095 989.246,709.199 989.806,723.701 990.365,773.205 990.924,733.916 991.483,699.596 992.043,714.966 992.602,699.195 993.161,744.128 993.72,724.085 994.28,691.887 994.839,707.943 995.398,686.528 995.957,686.392 996.517,702.949 997.076,745.26 997.635,712.951 998.194,710.468 998.754,708.354 999.313,690.718 999.872,657.784 1000.43,694.224 1000.99,706.154 1001.55,676.249 1002.11,657.942 1002.67,674.477 1003.23,675.274 1003.79,675.534 1004.35,663.209 1004.91,662.2 1005.46,615.858 1006.02,621.041 1006.58,626.484 1007.14,632.317 1007.7,648.338 1008.26,630.647 1008.82,615.557 1009.38,603.485 1009.94,640.565 1010.5,642.256 1011.06,646.539 1011.62,632.478 1012.18,651.291 1012.73,668.32 1013.29,667.143 1013.85,635.851 1014.41,621.127 1014.97,625.748 1015.53,629.195 1016.09,628.851 1016.65,617.278 1017.21,635.963 1017.77,592.132 1018.33,599.55 1018.89,605.779 1019.45,580.626 1020.01,620.169 1020.56,626.059 1021.12,628.812 1021.68,646.078 1022.24,633.629 1022.8,639.011 1023.36,622.856 1023.92,624.664 1024.48,625.576 1025.04,635.205 1025.6,684.995 1026.16,686.471 1026.72,686.605 1027.28,719.41 1027.83,735.644 1028.39,734.378 1028.95,743.368 1029.51,758.323 1030.07,738.189 1030.63,717.284 1031.19,700.747 1031.75,715.324 1032.31,731.316 1032.87,728.919 1033.43,709.932 1033.99,693.585 1034.55,711.332 1035.1,726.471 1035.66,707.812 1036.22,703.259 1036.78,699.683 1037.34,714.228 1037.9,730.172 1038.46,743.991 1039.02,743.764 1039.58,740.657 1040.14,768.921 1040.7,782.824 1041.26,748.658 1041.82,727.421 1042.38,725.064 1042.93,719.669 1043.49,749.968 1044.05,714.311 1044.61,711.944 1045.17,712.522 1045.73,727.558 1046.29,740.151 1046.85,734.296 1047.41,733.391 1047.97,714.767 1048.53,677.577 1049.09,681.108 1049.65,663.025 1050.2,661.871 1050.76,661.594 1051.32,645.53 1051.88,667.157 1052.44,684.499 1053,699.427 1053.56,681.623 1054.12,666.133 1054.68,670.708 1055.24,716.575 1055.8,700.311 1056.36,701.185 1056.92,679.953 1057.48,661.926 1058.03,663.075 1058.59,663.118 1059.15,695.042 1059.71,679.564 1060.27,712.806 1060.83,710.469 1061.39,677.223 1061.95,696.009 1062.51,697.462 1063.07,729.507 1063.63,726.319 1064.19,720.045 1064.75,701.276 1065.3,667.98 1065.86,665.681 1066.42,665.026 1066.98,669.549 1067.54,656.312 1068.1,658.699 1068.66,643.603 1069.22,630.084 1069.78,633.401 1070.34,637.857 1070.9,640.711 1071.46,630.223 1072.02,634.035 1072.57,636.848 1073.13,638.73 1073.69,641.089 1074.25,657.936 1074.81,660.558 1075.37,645.159 1075.93,631.306 1076.49,621.438 1077.05,607.196 1077.61,612.407 1078.17,601.873 1078.73,591.483 1079.29,596.796 1079.85,601.826 1080.4,655.328 1080.96,658.774 1081.52,643.956 1082.08,626.541 1082.64,629.915 1083.2,649.488 1083.76,655.258 1084.32,644.253 1084.88,662.723 1085.44,668.003 1086,651.047 1086.56,652.074 1087.12,619.999 1087.67,625.271 1088.23,627.875 1088.79,652.003 1089.35,651.269 1089.91,639.678 1090.47,676.609 1091.03,676.748 1091.59,711.479 1092.15,694.988 1092.71,681.517 1093.27,698.871 1093.83,716.095 1094.39,699.438 1094.94,697.699 1095.5,682.632 1096.06,670.642 1096.62,684.961 1097.18,715.028 1097.74,731.507 1098.3,708.653 1098.86,703.851 1099.42,672.761 1099.98,639.611 1100.54,691.982 1101.1,676.257 1101.66,659.929 1102.22,663.776 1102.77,635.987 1103.33,656.001 1103.89,659.783 1104.45,676.28 1105.01,658.384 1105.57,674.801 1106.13,688.325 1106.69,718.351 1107.25,731.345 1107.81,777.334 1108.37,789.264 1108.93,799.69 1109.49,809.282 1110.04,755.321 1110.6,752.083 1111.16,764.642 1111.72,773.61 1112.28,768.764 1112.84,764.727 1113.4,764.16 1113.96,713.747 1114.52,713.275 1115.08,748.083 1115.64,726.907 1116.2,738.188 1116.76,704.368 1117.31,704.089 1117.87,719.373 1118.43,745.502 1118.99,775.01 1119.55,787.229 1120.11,782.141 1120.67,774.083 1121.23,756.127 1121.79,765.477 1122.35,778.806 1122.91,790.356 1123.47,819.583 1124.03,874.282 1124.59,864.209 1125.14,855.643 1125.7,815.782 1126.26,828.04 1126.82,821.907 1127.38,847.318 1127.94,791.995 1128.5,784.853 1129.06,782.324 1129.62,744.049 1130.18,753.997 1130.74,747.277 1131.3,743.114 1131.86,759.089 1132.41,737.75 1132.97,723.201 1133.53,704.652 1134.09,701.995 1134.65,719.022 1135.21,702.254 1135.77,684.081 1136.33,684.598 1136.89,685.84 1137.45,685.331 1138.01,698.208 1138.57,665.25 1139.13,682.716 1139.68,712.182 1140.24,711.934 1140.8,728.744 1141.36,726.84 1141.92,708.746 1142.48,672.661 1143.04,655.727 1143.6,672.211 1144.16,655.793 1144.72,627.178 1145.28,679.333 1145.84,680.282 1146.4,682.584 1146.96,681.086 1147.51,681.015 1148.07,630.323 1148.63,650.408 1149.19,668.711 1149.75,670.124 1150.31,700.661 1150.87,684.294 1151.43,669.231 1151.99,639.928 1152.55,676.68 1153.11,676.551 1153.67,675.131 1154.23,674.672 1154.78,672.814 1155.34,687.538 1155.9,685.885 1156.46,685.748 1157.02,685.564 1157.58,716.961 1158.14,730.515 1158.7,743.968 1159.26,740.31 1159.82,734.964 1160.38,733.333 1160.94,761.707 1161.5,721.578 1162.05,672.153 1162.61,670.542 1163.17,702.301 1163.73,714.435 1164.29,678.481 1164.85,628.647 1165.41,630.465 1165.97,616.394 1166.53,605.722 1167.09,607.906 1167.65,577.482 1168.21,598.541 1168.77,633.348 1169.33,668.635 1169.88,652.487 1170.44,636.945 1171,672.821 1171.56,660.529 1172.12,664.432 1172.68,651.649 1173.24,618.422 1173.8,624.656 1174.36,598.092 1174.92,603.818 1175.48,625.752 1176.04,596.98 1176.6,612.675 1177.15,599.184 1177.71,587.832 1178.27,577.414 1178.83,588.348 1179.39,579.417 1179.95,652.077 1180.51,669.52 1181.07,684.78 1181.63,703.227 1182.19,715.485 1182.75,729.642 1183.31,709.114 1183.87,645.529 1184.43,665.351 1184.98,699.354 1185.54,728.327 1186.1,758.263 1186.66,805.018 1187.22,782.949 1187.78,841.117 1188.34,832.039 1188.9,854.937 1189.46,875.87 1190.02,864.937 1190.58,856.473 1191.14,828.89 1191.7,790.371 1192.25,784.381 1192.81,779.449 1193.37,789.79 1193.93,794.35 1194.49,770.587 1195.05,748.208 1195.61,760.996 1196.17,772.709 1196.73,736.329 1197.29,719.214 1197.85,717.365 1198.41,715.65 1198.97,666.765 1199.52,666.608 1200.08,681.786 1200.64,651.83 1201.2,652.338 1201.76,650.623 1202.32,638.716 1202.88,671.675 1203.44,686.264 1204,654.009 1204.56,652.441 1205.12,639.721 1205.68,654.55 1206.24,639.137 1206.8,607.862 1207.35,625.68 1207.91,644.414 1208.47,629.274 1209.03,643.645 1209.59,657.973 1210.15,643.645 1210.71,663.287 1211.27,698.65 1211.83,731.445 1212.39,777.176 1212.95,771.251 1213.51,736.835 1214.07,703.235 1214.62,735.216 1215.18,747.018 1215.74,758.477 1216.3,788.273 1216.86,797.334 1217.42,789.78 1217.98,768.091 1218.54,768.12 1219.1,746.138 1219.66,744.974 1220.22,756.705 1220.78,767.026 1221.34,733.583 1221.89,698.626 1222.45,700.262 1223.01,667.602 1223.57,702.226 1224.13,716.683 1224.69,698.257 1225.25,679.272 1225.81,677.74 1226.37,692.633 1226.93,690.567 1227.49,690.491 1228.05,674.525 1228.61,671.764 1229.17,607.436 1229.72,614.836 1230.28,618.804 1230.84,607.193 1231.4,593.384 1231.96,614.341 1232.52,572.438 1233.08,607.737 1233.64,643.509 1234.2,612.444 1234.76,615.114 1235.32,622.083 1235.88,610.576 1236.44,633.581 1236.99,636.579 1237.55,654.24 1238.11,670.902 1238.67,703.16 1239.23,683.301 1239.79,697.039 1240.35,744.865 1240.91,729.457 1241.47,708.08 1242.03,704.49 1242.59,705.914 1243.15,707.488 1243.71,723.968 1244.26,738.21 1244.82,736.334 1245.38,702.779 1245.94,702.178 1246.5,685.964 1247.06,701.958 1247.62,682.88 1248.18,685.455 1248.74,704.292 1249.3,719.089 1249.86,703.65 1250.42,703.194 1250.98,699.454 1251.54,665.368 1252.09,635.204 1252.65,636.668 1253.21,669.869 1253.77,669.958 1254.33,671.72 1254.89,655.392 1255.45,692.462 1256.01,689.846 1256.57,722.237 1257.13,751.919 1257.69,751.519 1258.25,765.832 1258.81,745.27 1259.36,757.622 1259.92,720.889 1260.48,737.578 1261.04,719.801 1261.6,717.641 1262.16,699.794 1262.72,663.207 1263.28,661.327 1263.84,663.396 1264.4,646.937 1264.96,646.763 1265.52,617.609 1266.08,639.131 1266.63,675.459 1267.19,643.872 1267.75,628.15 1268.31,645.591 1268.87,677.981 1269.43,678.344 1269.99,612.98 1270.55,634.828 1271.11,587.959 1271.67,610.017 1272.23,595.296 1272.79,603.823 1273.35,624.699 1273.91,596.329 1274.46,634.356 1275.02,620.893 1275.58,613.104 1276.14,649.283 1276.7,651.587 1277.26,654.999 1277.82,671.565 1278.38,652.985 1278.94,658.786 1279.5,643.288 1280.06,647.747 1280.62,620.42 1281.18,622.513 1281.73,623.213 1282.29,611.042 1282.85,600.267 1283.41,606.176 1283.97,640.832 1284.53,644.616 1285.09,678.958 1285.65,664.594 1286.21,633.249 1286.77,652.329 1287.33,653.465 1287.89,658.921 1288.45,660.288 1289,676.512 1289.56,675.549 1290.12,659.866 1290.68,644.741 1291.24,664.534 1291.8,685.136 1292.36,670.724 1292.92,654.632 1293.48,655.581 1294.04,734.666 1294.6,766.656 1295.16,766.311 1295.72,775.964 1296.28,790.29 1296.83,816.53 1297.39,761.602 1297.95,758.89 1298.51,755.346 1299.07,754.269 1299.63,734.666 1300.19,736.154 1300.75,734.412 1301.31,745.089 1301.87,758.328 1302.43,725.963 1302.99,725.858 1303.55,706.31 1304.1,689.579 1304.66,669.925 1305.22,671.043 1305.78,671.474 1306.34,685.858 1306.9,720.834 1307.46,717.248 1308.02,699.112 1308.58,715.013 1309.14,743.252 1309.7,741.35 1310.26,752.015 1310.82,727.3 1311.38,719.314 1311.93,702.126 1312.49,716.671 1313.05,731.165 1313.61,731.325 1314.17,714.949 1314.73,714.619 1315.29,725.931 1315.85,706.881 1316.41,707.662 1316.97,676.239 1317.53,627.087 1318.09,629.396 1318.65,600.148 1319.2,620.29 1319.76,623.274 1320.32,606.339 1320.88,590.883 1321.44,595.113 1322,587.227 1322.56,562.667 1323.12,586.526 1323.68,591.781 1324.24,614.398 1324.8,587.073 1325.36,594.49 1325.92,615.953 1326.47,616.867 1327.03,615.734 1327.59,650.737 1328.15,653.656 1328.71,654.511 1329.27,636.916 1329.83,674.351 1330.39,674.853 1330.95,693.19 1331.51,678.098 1332.07,679.059 1332.63,662.796 1333.19,664.87 1333.75,683.088 1334.3,703.239 1334.86,703.079 1335.42,683.616 1335.98,714.224 1336.54,662.072 1337.1,666.162 1337.66,681.499 1338.22,663.454 1338.78,683.676 1339.34,731.87 1339.9,761.473 1340.46,743.32 1341.02,725.476 1341.57,741.862 1342.13,722.785 1342.69,689.654 1343.25,707.138 1343.81,738.052 1344.37,752.712 1344.93,744.15 1345.49,722.418 1346.05,755.26 1346.61,754.8 1347.17,751.012 1347.73,733.22 1348.29,731.584 1348.84,730.098 1349.4,729.981 1349.96,712.758 1350.52,708.19 1351.08,722.49 1351.64,781.926 1352.2,756.677 1352.76,736.45 1353.32,701.919 1353.88,700.665 1354.44,713.618 1355,708.108 1355.56,690.06 1356.12,656.495 1356.67,641.811 1357.23,672.747 1357.79,690.126 1358.35,691.63 1358.91,690.891 1359.47,673.366 1360.03,658.616 1360.59,659.805 1361.15,663.213 1361.71,646.996 1362.27,616.38 1362.83,585.71 1363.39,605.239 1363.94,592.136 1364.5,600.73 1365.06,557.476 1365.62,560.973 1366.18,582.86 1366.74,568.913 1367.3,574.475 1367.86,582.474 1368.42,552.707 1368.98,556.764 1369.54,530.432 1370.1,540.886 1370.66,548.062 1371.21,551.669 1371.77,576.011 1372.33,577.148 1372.89,568.716 1373.45,559.355 1374.01,549.406 1374.57,538.832 1375.13,494.556 1375.69,537.727 1376.25,598.244 1376.81,633.853 1377.37,640.846 1377.93,674.945 1378.49,644.391 1379.04,679.697 1379.6,676.314 1380.16,709.103 1380.72,723.282 1381.28,706.257 1381.84,723.786 1382.4,721.864 1382.96,750.582 1383.52,727.473 1384.08,742.253 1384.64,740.25 1385.2,754.109 1385.76,780.9 1386.31,763.005 1386.87,727.669 1387.43,726.329 1387.99,693.787 1388.55,743.724 1389.11,742.74 1389.67,723.37 1390.23,721.143 1390.79,700.789 1391.35,718.96 1391.91,733.392 1392.47,728.493 1393.03,711.212 1393.58,757.26 1394.14,783.652 1394.7,778.597 1395.26,774.216 1395.82,739.527 1396.38,754.713 1396.94,749.412 1397.5,746.108 1398.06,744.29 1398.62,724.136 1399.18,739.262 1399.74,734.78 1400.3,746.017 1400.86,741.551 1401.41,719.971 1401.97,749.894 1402.53,761.316 1403.09,758.388 1403.65,726.353 1404.21,722.796 1404.77,739.978 1405.33,756.012 1405.89,751.135 1406.45,750.351 1407.01,765.291 1407.57,797.435 1408.13,824.575 1408.68,850.421 1409.24,778.044 1409.8,759.136 1410.36,786.095 1410.92,778.538 1411.48,773.386 1412.04,750.962 1412.6,747.081 1413.16,729.105 1413.72,739.747 1414.28,721.147 1414.84,702.587 1415.4,697.555 1415.95,714.37 1416.51,743.89 1417.07,690.387 1417.63,736.243 1418.19,732.005 1418.75,684.876 1419.31,656.221 1419.87,658.746 1420.43,657.772 1420.99,691.846 1421.55,704.112 1422.11,716.452 1422.67,703.589 1423.23,702.292 1423.78,650.753 1424.34,665.567 1424.9,666.098 1425.46,662.092 1426.02,665.304 1426.58,668.374 1427.14,685.673 1427.7,654.754 1428.26,671.711 1428.82,624.424 1429.38,608.01 1429.94,594.677 1430.5,600.58 1431.05,601.992 1431.61,522.207 1432.17,547.784 1432.73,555.507 1433.29,547.765 1433.85,541.121 1434.41,581.714 1434.97,605.842 1435.53,603.407 1436.09,603.649 1436.65,611.222 1437.21,616.294 1437.77,621.662 1438.33,623.761 1438.88,597.486 1439.44,664.73 1440,647.777 1440.56,635.905 1441.12,652.833 1441.68,688.572 1442.24,674.076 1442.8,625.415 1443.36,608.755 1443.92,563.892 1444.48,585.309 1445.04,623.303 1445.6,594.167 1446.15,583.66 1446.71,591.13 1447.27,614.756 1447.83,636.168 1448.39,636.814 1448.95,671.158 1449.51,638.117 1450.07,622.232 1450.63,610.029 1451.19,596.436 1451.75,681.306 1452.31,665.859 1452.87,634.023 1453.42,639.076 1453.98,625.543 1454.54,627.526 1455.1,600.809 1455.66,586.638 1456.22,607.43 1456.78,613.64 1457.34,616.749 1457.9,636.482 1458.46,639.821 1459.02,659.602 1459.58,693.633 1460.14,660.509 1460.7,662.994 1461.25,649.49 1461.81,601.614 1462.37,623.331 1462.93,659.932 1463.49,661.14 1464.05,649.282 1464.61,652.128 1465.17,668.53 1465.73,654.665 1466.29,672.569 1466.85,706.01 1467.41,689.351 1467.97,708.776 1468.52,723.127 1469.08,721.856 1469.64,722.534 1470.2,750.662 1470.76,762.67 1471.32,742.656 1471.88,757.903 1472.44,771.588 1473,768.129 1473.56,794.791 1474.12,821.065 1474.68,831.398 1475.24,840.892 1475.79,861.999 1476.35,851.634 1476.91,809.64 1477.47,769.264 1478.03,761.119 1478.59,786.818 1479.15,810.091 1479.71,784.189 1480.27,774.853 1480.83,753.935 1481.39,733.871 1481.95,730.674 1482.51,726.752 1483.07,742.807 1483.62,739.3 1484.18,736.559 1484.74,685.882 1485.3,686.817 1485.86,705.824 1486.42,699.67 1486.98,731.123 1487.54,727.428 1488.1,707.933 1488.66,705.867 1489.22,720.429 1489.78,734.68 1490.34,746.909 1490.89,743.304 1491.45,770.093 1492.01,746.275 1492.57,728.725 1493.13,725.467 1493.69,724.954 1494.25,755.622 1494.81,704.561 1495.37,701.06 1495.93,683.315 1496.49,664.495 1497.05,681.559 1497.61,696.67 1498.16,728.924 1498.72,739.752 1499.28,701.725 1499.84,736.985 1500.4,721.012 1500.96,701.036 1501.52,686.548 1502.08,699.604 1502.64,711.513 1503.2,674.893 1503.76,660.077 1504.32,694.639 1504.88,678.793 1505.44,665.603 1505.99,682 1506.55,714.294 1507.11,714.674 1507.67,677.547 1508.23,680.238 1508.79,663.278 1509.35,677.95 1509.91,738.581 1510.47,719.879 1511.03,715.015 1511.59,731.31 1512.15,730.543 1512.71,726.628 1513.26,693.371 1513.82,677.143 1514.38,646.848 1514.94,630.855 1515.5,620.501 1516.06,624.827 1516.62,643.805 1517.18,647.098 1517.74,678.379 1518.3,678.526 1518.86,665.406 1519.42,666.282 1519.98,635.508 1520.53,621.209 1521.09,640.361 1521.65,624.358 1522.21,641.638 1522.77,640.935 1523.33,594.751 1523.89,618.732 1524.45,605.287 1525.01,625.714 1525.57,677.919 1526.13,694.502 1526.69,694.663 1527.25,727.69 1527.81,722.999 1528.36,738.927 1528.92,722.602 1529.48,721.437 1530.04,748.839 1530.6,711.423 1531.16,708.783 1531.72,691.206 1532.28,676.982 1532.84,697.325 1533.4,703.095 1533.96,687.985 1534.52,672.888 1535.08,673.675 1535.63,674.357 1536.19,675.42 1536.75,674.825 1537.31,723.148 1537.87,703.107 1538.43,751.264 1538.99,778.177 1539.55,773.493 1540.11,804.595 1540.67,798.513 1541.23,776.694 1541.79,790.189 1542.35,834.24 1542.9,829.64 1543.46,840.226 1544.02,830.475 1544.58,822.553 1545.14,829.747 1545.7,822.03 1546.26,827.774 1546.82,788.718 1547.38,781.182 1547.94,823.623 1548.5,796.732 1549.06,775.16 1549.62,752.3 1550.18,713.521 1550.73,712.836 1551.29,712.673 1551.85,710.842 1552.41,709.848 1552.97,753.403 1553.53,732.603 1554.09,697.262 1554.65,660.356 1555.21,625.251 1555.77,657.078 1556.33,658.182 1556.89,625.051 1557.45,596.556 1558,551.314 1558.56,588.9 1559.12,545.272 1559.68,554.699 1560.24,542.303 1560.8,531.066 1561.36,534.757 1561.92,508.27 1562.48,498.429 1563.04,508.193 1563.6,552.358 1564.16,593.509 1564.72,601.048 1565.28,606.205 1565.83,595.544 1566.39,598.34 1566.95,604.045 1567.51,608.242 1568.07,611.4 1568.63,600.002 1569.19,601.177 1569.75,620.883 1570.31,656.934 1570.87,644.278 1571.43,626.741 1571.99,644.9 1572.55,646.566 1573.1,682.444 1573.66,685.077 1574.22,701.55 1574.78,687.276 1575.34,687.04 1575.9,670.533 1576.46,684.948 1577.02,669.798 1577.58,670.656 1578.14,705.684 1578.7,655.404 1579.26,657.248 1579.82,655.893 1580.37,658.546 1580.93,696.018 1581.49,729.501 1582.05,731.204 1582.61,727.992 1583.17,725.823 1583.73,711.265 1584.29,741.617 1584.85,722.109 1585.41,718.687 1585.97,750.11 1586.53,728.868 1587.09,728.497 1587.65,693.17 1588.2,695.628 1588.76,710.908 1589.32,728.455 1589.88,706.816 1590.44,735.709 1591,715.598 1591.56,695.453 1592.12,694.484 1592.68,676.753 1593.24,662.911 1593.8,617.881 1594.36,636.361 1594.92,674.857 1595.47,691.977 1596.03,688.777 1596.59,692.065 1597.15,692.386 1597.71,709.54 1598.27,709.24 1598.83,708.64 1599.39,708.02 1599.95,755.41 1600.51,734.292 1601.07,715.95 1601.63,712.692 1602.19,712.448 1602.74,711.165 1603.3,646.233 1603.86,631.263 1604.42,600.676 1604.98,621.328 1605.54,638.369 1606.1,655.112 1606.66,658.271 1607.22,676.127 1607.78,663.608 1608.34,682.107 1608.9,618.337 1609.46,576.458 1610.02,596.679 1610.57,587.516 1611.13,624.407 1611.69,628.062 1612.25,679.504 1612.81,697.332 1613.37,694.862 1613.93,628.941 1614.49,599.851 1615.05,620.951 1615.61,608.279 1616.17,579.497 1616.73,537.782 1617.29,528.792 1617.84,532.419 1618.4,538.648 1618.96,562.109 1619.52,555.124 1620.08,590.37 1620.64,658.829 1621.2,662.852 1621.76,665.571 1622.32,633.082 1622.88,652.819 1623.44,623.743 1624,613.088 1624.56,603.679 1625.11,611.247 1625.67,602.016 1626.23,591.222 1626.79,577.088 1627.35,534.372 1627.91,539.014 1628.47,529.381 1629.03,522.619 1629.59,578.415 1630.15,579.324 1630.71,583.803 1631.27,588.938 1631.83,608.461 1632.39,615.939 1632.94,604.049 1633.5,626.475 1634.06,627.653 1634.62,645.111 1635.18,631.272 1635.74,616.841 1636.3,602.256 1636.86,640.699 1637.42,658.053 1637.98,641.845 1638.54,616.246 1639.1,603.571 1639.66,611.01 1640.21,631.065 1640.77,617.931 1641.33,638.143 1641.89,677.313 1642.45,681.015 1643.01,665.718 1643.57,638.563 1644.13,659.947 1644.69,647.888 1645.25,651.833 1645.81,686.752 1646.37,688.091 1646.93,671.652 1647.48,707.019 1648.04,688.346 1648.6,676.816 1649.16,675.398 1649.72,673.913 1650.28,674.043 1650.84,674.452 1651.4,674.798 1651.96,674.646 1652.52,707.846 1653.08,678.062 1653.64,695.191 1654.2,697.548 1654.76,714.671 1655.31,683.598 1655.87,716.176 1656.43,733.533 1656.99,765.351 1657.55,779.611 1658.11,742.069 1658.67,710.832 1659.23,724.375 1659.79,739.557 1660.35,721.292 1660.91,737.075 1661.47,749.734 1662.03,742.867 1662.58,754.619 1663.14,719.8 1663.7,685.788 1664.26,718.778 1664.82,734.512 1665.38,716.23 1665.94,731.98 1666.5,726.623 1667.06,757.184 1667.62,754.214 1668.18,751.131 1668.74,760.661 1669.3,757.866 1669.85,753.017 1670.41,765.963 1670.97,712.09 1671.53,706.964 1672.09,704.922 1672.65,704.075 1673.21,731.768 1673.77,730.987 1674.33,759.775 1674.89,787.885 1675.45,781.816 1676.01,760.083 1676.57,790.171 1677.13,783.799 1677.68,779.532 1678.24,805.41 1678.8,801.97 1679.36,762.765 1679.92,757.462 1680.48,770.235 1681.04,746.437 1681.6,724.243 1682.16,767.075 1682.72,809.642 1683.28,818.434 1683.84,794.246 1684.4,738.04 1684.95,738.12 1685.51,735.366 1686.07,751.108 1686.63,765.984 1687.19,746.147 1687.75,743.248 1688.31,739.44 1688.87,716.408 1689.43,715.308 1689.99,713.202 1690.55,728.458 1691.11,725.943 1691.67,739.413 1692.23,735.069 1692.78,764.987 1693.34,792.063 1693.9,806.148 1694.46,800.833 1695.02,811.124 1695.58,757.604 1696.14,750.778 1696.7,748.858 1697.26,743.683 1697.82,718.638 1698.38,699.318 1698.94,679.243 1699.5,678.765 1700.05,681.24 1700.61,615.687 1701.17,636.562 1701.73,657.639 1702.29,672.39 1702.85,673.529 1703.41,687.332 1703.97,708.299 1704.53,708.357 1705.09,705.303 1705.65,688.036 1706.21,635.675 1706.77,570.272 1707.32,559.767 1707.88,519.637 1708.44,559.721 1709,580.833 1709.56,582.823 1710.12,603.292 1710.68,573.24 1711.24,575.922 1711.8,579.959 1712.36,586.074 1712.92,590.953 1713.48,609.82 1714.04,612.432 1714.6,632.182 1715.15,648.15 1715.71,618.732 1716.27,606.323 1716.83,628.791 1717.39,630.724 1717.95,649.999 1718.51,665.605 1719.07,733.126 1719.63,746.947 1720.19,696.316 1720.75,728.104 1721.31,727.497 1721.87,694.478 1722.42,698.72 1722.98,727.405 1723.54,741.483 1724.1,705.711 1724.66,722.172 1725.22,718.713 1725.78,714.136 1726.34,709.597 1726.9,694.292 1727.46,708.943 1728.02,722.301 1728.58,719.752 1729.14,752.633 1729.69,745.542 1730.25,774.456 1730.81,718.356 1731.37,684.172 1731.93,687.754 1732.49,688.574 1733.05,653.943 1733.61,673.638 1734.17,688.437 1734.73,672.123 1735.29,655.301 1735.85,670.147 1736.41,688.661 1736.97,719.391 1737.52,714.528 1738.08,727.795 1738.64,773.488 1739.2,751.84 1739.76,734.544 1740.32,667.914 1740.88,638.878 1741.44,606.661 1742,658.222 1742.56,659.722 1743.12,648.743 1743.68,634.392 1744.24,640.444 1744.79,610.778 1745.35,630.18 1745.91,630.951 1746.47,618.848 1747.03,622.445 1747.59,626.508 1748.15,629.437 1748.71,611.821 1749.27,618.453 1749.83,654.349 1750.39,657.609 1750.95,659.994 1751.51,645.369 1752.06,644.141 1752.62,659.69 1753.18,680.977 1753.74,679.282 1754.3,707.747 1754.86,704.017 1755.42,704.048 1755.98,734.16 1756.54,701.668 1757.1,684.884 1757.66,667.212 1758.22,655.32 1758.78,605.798 1759.34,594.694 1759.89,598.787 1760.45,620.022 1761.01,641.059 1761.57,640.233 1762.13,640.357 1762.69,615.535 1763.25,600.212 1763.81,606.996 1764.37,597.36 1764.93,588.092 1765.49,594.733 1766.05,599.584 1766.61,588.71 1767.16,592.41 1767.72,598.77 1768.28,602.277 1768.84,655.537 1769.4,661.444 1769.96,676.859 1770.52,692.672 1771.08,692.442 1771.64,709.231 1772.2,691.017 1772.76,706.449 1773.32,704.391 1773.88,715.817 1774.43,701.002 1774.99,699.016 1775.55,696.937 1776.11,695.445 1776.67,677.889 1777.23,649.122 1777.79,664.627 1778.35,682.219 1778.91,680.823 1779.47,646.158 1780.03,663.105 1780.59,685.686 1781.15,702.81 1781.71,718.241 1782.26,713.204 1782.82,697.479 1783.38,697.533 1783.94,712.604 1784.5,680.345 1785.06,663.574 1785.62,661.746 1786.18,632.464 1786.74,652.132 1787.3,657.049 1787.86,659.615 1788.42,662.273 1788.98,680.677 1789.53,681.377 1790.09,664.383 1790.65,616.579 1791.21,638.84 1791.77,703.567 1792.33,736.408 1792.89,751.026 1793.45,762.215 1794.01,743.677 1794.57,760.536 1795.13,719.443 1795.69,731.702 1796.25,730.417 1796.8,710.786 1797.36,691.059 1797.92,677.65 1798.48,661.156 1799.04,658.756 1799.6,658.981 1800.16,643.63 1800.72,648.957 1801.28,666.633 1801.84,681.864 1802.4,697.731 1802.96,680.222 1803.52,684.23 1804.08,715.815 1804.63,726.6 1805.19,726.459 1805.75,744.272 1806.31,726.201 1806.87,754.528 1807.43,732.031 1807.99,746.418 1808.55,789.899 1809.11,751.601 1809.67,734.755 1810.23,734.119 1810.79,730.839 1811.35,727.692 1811.9,725.902 1812.46,720.743 1813.02,705.765 1813.58,687.136 1814.14,701.05 1814.7,702.63 1815.26,688.133 1815.82,686.046 1816.38,668.964 1816.94,699.856 1817.5,682.398 1818.06,682.147 1818.62,697.093 1819.18,697.134 1819.73,696.707 1820.29,677.184 1820.85,673.431 1821.41,708.946 1821.97,689.388 1822.53,675.01 1823.09,640.52 1823.65,641.997 1824.21,645.15 1824.77,646.182 1825.33,679.85 1825.89,679.781 1826.45,646.23 1827,646.159 1827.56,680.769 1828.12,696.096 1828.68,679.254 1829.24,698.08 1829.8,696.549 1830.36,710.89 1830.92,660.99 1831.48,663.413 1832.04,696.194 1832.6,678.731 1833.16,661.638 1833.72,697.128 1834.27,667.144 1834.83,670.429 1835.39,654.742 1835.95,640.387 1836.51,659.508 1837.07,644.711 1837.63,648.786 1838.19,622.213 \"/>\n<path clip-path=\"url(#clip693)\" d=\"M720.247 692.348 L720.806 692.348 L721.365 692.348 L721.924 692.348 L722.484 692.348 L723.043 692.348 L723.602 692.348 L724.161 692.348 L724.721 692.348 L725.28 692.348 L725.839 692.348 L726.398 692.348 L726.958 692.348 L727.517 692.348 L728.076 692.348 L728.635 692.348 L729.195 692.348 L729.754 692.348 L730.313 692.348 L730.872 692.348 L731.432 692.348 L731.991 692.348 L732.55 692.348 L733.109 692.348 L733.669 692.348 L734.228 692.348 L734.787 692.348 L735.346 692.348 L735.906 692.348 L736.465 692.348 L737.024 692.348 L737.583 692.348 L738.143 692.348 L738.702 692.348 L739.261 692.348 L739.82 692.348 L740.38 692.348 L740.939 692.348 L741.498 692.348 L742.057 692.348 L742.617 692.348 L743.176 692.348 L743.735 692.348 L744.294 692.348 L744.854 692.348 L745.413 692.348 L745.972 692.348 L746.531 692.348 L747.091 692.348 L747.65 692.348 L748.209 692.348 L748.768 692.348 L749.328 692.348 L749.887 692.348 L750.446 692.348 L751.005 692.348 L751.565 692.348 L752.124 692.348 L752.683 692.348 L753.242 692.348 L753.802 692.348 L754.361 692.348 L754.92 692.348 L755.479 692.348 L756.039 692.348 L756.598 692.348 L757.157 692.348 L757.716 692.348 L758.276 692.348 L758.835 692.348 L759.394 692.348 L759.953 692.348 L760.513 692.348 L761.072 692.348 L761.631 692.348 L762.19 692.348 L762.75 692.348 L763.309 692.348 L763.868 692.348 L764.427 692.348 L764.987 692.348 L765.546 692.348 L766.105 692.348 L766.664 692.348 L767.224 692.348 L767.783 692.348 L768.342 692.348 L768.901 692.348 L769.461 692.348 L770.02 692.348 L770.579 692.348 L771.138 692.348 L771.698 692.348 L772.257 692.348 L772.816 692.348 L773.375 692.348 L773.935 692.348 L774.494 692.348 L775.053 692.348 L775.612 692.348 L776.172 692.348 L776.731 692.348 L777.29 692.348 L777.849 692.348 L778.409 692.348 L778.968 692.348 L779.527 692.348 L780.086 692.348 L780.646 692.348 L781.205 692.348 L781.764 692.348 L782.323 692.348 L782.883 692.348 L783.442 692.348 L784.001 692.348 L784.56 692.348 L785.12 692.348 L785.679 692.348 L786.238 692.348 L786.797 692.348 L787.357 692.348 L787.916 692.348 L788.475 692.348 L789.034 692.348 L789.594 692.348 L790.153 692.348 L790.712 692.348 L791.271 692.348 L791.831 692.348 L792.39 692.348 L792.949 692.348 L793.508 692.348 L794.068 692.348 L794.627 692.348 L795.186 692.348 L795.745 692.348 L796.305 692.348 L796.864 692.348 L797.423 692.348 L797.982 692.348 L798.542 692.348 L799.101 692.348 L799.66 692.348 L800.219 692.348 L800.779 692.348 L801.338 692.348 L801.897 692.348 L802.456 692.348 L803.016 692.348 L803.575 692.348 L804.134 692.348 L804.693 692.348 L805.253 692.348 L805.812 692.348 L806.371 692.348 L806.931 692.348 L807.49 692.348 L808.049 692.348 L808.608 692.348 L809.168 692.348 L809.727 692.348 L810.286 692.348 L810.845 692.348 L811.405 692.348 L811.964 692.348 L812.523 692.348 L813.082 692.348 L813.642 692.348 L814.201 692.348 L814.76 692.348 L815.319 692.348 L815.879 692.348 L816.438 692.348 L816.997 692.348 L817.556 692.348 L818.116 692.348 L818.675 692.348 L819.234 692.348 L819.793 692.348 L820.353 692.348 L820.912 692.348 L821.471 692.348 L822.03 692.348 L822.59 692.348 L823.149 692.348 L823.708 692.348 L824.267 692.348 L824.827 692.348 L825.386 692.348 L825.945 692.348 L826.504 692.348 L827.064 692.348 L827.623 692.348 L828.182 692.348 L828.741 692.348 L829.301 692.348 L829.86 692.348 L830.419 692.348 L830.978 692.348 L831.538 692.348 L832.097 692.348 L832.656 692.348 L833.215 692.348 L833.775 692.348 L834.334 692.348 L834.893 692.348 L835.452 692.348 L836.012 692.348 L836.571 692.348 L837.13 692.348 L837.689 692.348 L838.249 692.348 L838.808 692.348 L839.367 692.348 L839.926 692.348 L840.486 692.348 L841.045 692.348 L841.604 692.348 L842.163 692.348 L842.723 692.348 L843.282 692.348 L843.841 692.348 L844.4 692.348 L844.96 692.348 L845.519 692.348 L846.078 692.348 L846.637 692.348 L847.197 692.348 L847.756 692.348 L848.315 692.348 L848.874 692.348 L849.434 692.348 L849.993 692.348 L850.552 692.348 L851.111 692.348 L851.671 692.348 L852.23 692.348 L852.789 692.348 L853.348 692.348 L853.908 692.348 L854.467 692.348 L855.026 692.348 L855.585 692.348 L856.145 692.348 L856.704 692.348 L857.263 692.348 L857.822 692.348 L858.382 692.348 L858.941 692.348 L859.5 692.348 L860.059 692.348 L860.619 692.348 L861.178 692.348 L861.737 692.348 L862.296 692.348 L862.856 692.348 L863.415 692.348 L863.974 692.348 L864.533 692.348 L865.093 692.348 L865.652 692.348 L866.211 692.348 L866.77 692.348 L867.33 692.348 L867.889 692.348 L868.448 692.348 L869.007 692.348 L869.567 692.348 L870.126 692.348 L870.685 692.348 L871.244 692.348 L871.804 692.348 L872.363 692.348 L872.922 692.348 L873.481 692.348 L874.041 692.348 L874.6 692.348 L875.159 692.348 L875.718 692.348 L876.278 692.348 L876.837 692.348 L877.396 692.348 L877.955 692.348 L878.515 692.348 L879.074 692.348 L879.633 692.348 L880.192 692.348 L880.752 692.348 L881.311 692.348 L881.87 692.348 L882.429 692.348 L882.989 692.348 L883.548 692.348 L884.107 692.348 L884.666 692.348 L885.226 692.348 L885.785 692.348 L886.344 692.348 L886.903 692.348 L887.463 692.348 L888.022 692.348 L888.581 692.348 L889.14 692.348 L889.7 692.348 L890.259 692.348 L890.818 692.348 L891.377 692.348 L891.937 692.348 L892.496 692.348 L893.055 692.348 L893.614 692.348 L894.174 692.348 L894.733 692.348 L895.292 692.348 L895.851 692.348 L896.411 692.348 L896.97 692.348 L897.529 692.348 L898.088 692.348 L898.648 692.348 L899.207 692.348 L899.766 692.348 L900.325 692.348 L900.885 692.348 L901.444 692.348 L902.003 692.348 L902.562 692.348 L903.122 692.348 L903.681 692.348 L904.24 692.348 L904.799 692.348 L905.359 692.348 L905.918 692.348 L906.477 692.348 L907.036 692.348 L907.596 692.348 L908.155 692.348 L908.714 692.348 L909.273 692.348 L909.833 692.348 L910.392 692.348 L910.951 692.348 L911.51 692.348 L912.07 692.348 L912.629 692.348 L913.188 692.348 L913.747 692.348 L914.307 692.348 L914.866 692.348 L915.425 692.348 L915.984 692.348 L916.544 692.348 L917.103 692.348 L917.662 692.348 L918.221 692.348 L918.781 692.348 L919.34 692.348 L919.899 692.348 L920.458 692.348 L921.018 692.348 L921.577 692.348 L922.136 692.348 L922.695 692.348 L923.255 692.348 L923.814 692.348 L924.373 692.348 L924.932 692.348 L925.492 692.348 L926.051 692.348 L926.61 692.348 L927.169 692.348 L927.729 692.348 L928.288 692.348 L928.847 692.348 L929.406 692.348 L929.966 692.348 L930.525 692.348 L931.084 692.348 L931.644 692.348 L932.203 692.348 L932.762 692.348 L933.321 692.348 L933.881 692.348 L934.44 692.348 L934.999 692.348 L935.558 692.348 L936.118 692.348 L936.677 692.348 L937.236 692.348 L937.795 692.348 L938.355 692.348 L938.914 692.348 L939.473 692.348 L940.032 692.348 L940.592 692.348 L941.151 692.348 L941.71 692.348 L942.269 692.348 L942.829 692.348 L943.388 692.348 L943.947 692.348 L944.506 692.348 L945.066 692.348 L945.625 692.348 L946.184 692.348 L946.743 692.348 L947.303 692.348 L947.862 692.348 L948.421 692.348 L948.98 692.348 L949.54 692.348 L950.099 692.348 L950.658 692.348 L951.217 692.348 L951.777 692.348 L952.336 692.348 L952.895 692.348 L953.454 692.348 L954.014 692.348 L954.573 692.348 L955.132 692.348 L955.691 692.348 L956.251 692.348 L956.81 692.348 L957.369 692.348 L957.928 692.348 L958.488 692.348 L959.047 692.348 L959.606 692.348 L960.165 692.348 L960.725 692.348 L961.284 692.348 L961.843 692.348 L962.402 692.348 L962.962 692.348 L963.521 692.348 L964.08 692.348 L964.639 692.348 L965.199 692.348 L965.758 692.348 L966.317 692.348 L966.876 692.348 L967.436 692.348 L967.995 692.348 L968.554 692.348 L969.113 692.348 L969.673 692.348 L970.232 692.348 L970.791 692.348 L971.35 692.348 L971.91 692.348 L972.469 692.348 L973.028 692.348 L973.587 692.348 L974.147 692.348 L974.706 692.348 L975.265 692.348 L975.824 692.348 L976.384 692.348 L976.943 692.348 L977.502 692.348 L978.061 692.348 L978.621 692.348 L979.18 692.348 L979.739 692.348 L980.298 692.348 L980.858 692.348 L981.417 692.348 L981.976 692.348 L982.535 692.348 L983.095 692.348 L983.654 692.348 L984.213 692.348 L984.772 692.348 L985.332 692.348 L985.891 692.348 L986.45 692.348 L987.009 692.348 L987.569 692.348 L988.128 692.348 L988.687 692.348 L989.246 692.348 L989.806 692.348 L990.365 692.348 L990.924 692.348 L991.483 692.348 L992.043 692.348 L992.602 692.348 L993.161 692.348 L993.72 692.348 L994.28 692.348 L994.839 692.348 L995.398 692.348 L995.957 692.348 L996.517 692.348 L997.076 692.348 L997.635 692.348 L998.194 692.348 L998.754 692.348 L999.313 692.348 L999.872 692.348 L1000.43 692.348 L1000.99 692.348 L1001.55 692.348 L1002.11 692.348 L1002.67 692.348 L1003.23 692.348 L1003.79 692.348 L1004.35 692.348 L1004.91 692.348 L1005.46 692.348 L1006.02 692.348 L1006.58 692.348 L1007.14 692.348 L1007.7 692.348 L1008.26 692.348 L1008.82 692.348 L1009.38 692.348 L1009.94 692.348 L1010.5 692.348 L1011.06 692.348 L1011.62 692.348 L1012.18 692.348 L1012.73 692.348 L1013.29 692.348 L1013.85 692.348 L1014.41 692.348 L1014.97 692.348 L1015.53 692.348 L1016.09 692.348 L1016.65 692.348 L1017.21 692.348 L1017.77 692.348 L1018.33 692.348 L1018.89 692.348 L1019.45 692.348 L1020.01 692.348 L1020.56 692.348 L1021.12 692.348 L1021.68 692.348 L1022.24 692.348 L1022.8 692.348 L1023.36 692.348 L1023.92 692.348 L1024.48 692.348 L1025.04 692.348 L1025.6 692.348 L1026.16 692.348 L1026.72 692.348 L1027.28 692.348 L1027.83 692.348 L1028.39 692.348 L1028.95 692.348 L1029.51 692.348 L1030.07 692.348 L1030.63 692.348 L1031.19 692.348 L1031.75 692.348 L1032.31 692.348 L1032.87 692.348 L1033.43 692.348 L1033.99 692.348 L1034.55 692.348 L1035.1 692.348 L1035.66 692.348 L1036.22 692.348 L1036.78 692.348 L1037.34 692.348 L1037.9 692.348 L1038.46 692.348 L1039.02 692.348 L1039.58 692.348 L1040.14 692.348 L1040.7 692.348 L1041.26 692.348 L1041.82 692.348 L1042.38 692.348 L1042.93 692.348 L1043.49 692.348 L1044.05 692.348 L1044.61 692.348 L1045.17 692.348 L1045.73 692.348 L1046.29 692.348 L1046.85 692.348 L1047.41 692.348 L1047.97 692.348 L1048.53 692.348 L1049.09 692.348 L1049.65 692.348 L1050.2 692.348 L1050.76 692.348 L1051.32 692.348 L1051.88 692.348 L1052.44 692.348 L1053 692.348 L1053.56 692.348 L1054.12 692.348 L1054.68 692.348 L1055.24 692.348 L1055.8 692.348 L1056.36 692.348 L1056.92 692.348 L1057.48 692.348 L1058.03 692.348 L1058.59 692.348 L1059.15 692.348 L1059.71 692.348 L1060.27 692.348 L1060.83 692.348 L1061.39 692.348 L1061.95 692.348 L1062.51 692.348 L1063.07 692.348 L1063.63 692.348 L1064.19 692.348 L1064.75 692.348 L1065.3 692.348 L1065.86 692.348 L1066.42 692.348 L1066.98 692.348 L1067.54 692.348 L1068.1 692.348 L1068.66 692.348 L1069.22 692.348 L1069.78 692.348 L1070.34 692.348 L1070.9 692.348 L1071.46 692.348 L1072.02 692.348 L1072.57 692.348 L1073.13 692.348 L1073.69 692.348 L1074.25 692.348 L1074.81 692.348 L1075.37 692.348 L1075.93 692.348 L1076.49 692.348 L1077.05 692.348 L1077.61 692.348 L1078.17 692.348 L1078.73 692.348 L1079.29 692.348 L1079.85 692.348 L1080.4 692.348 L1080.96 692.348 L1081.52 692.348 L1082.08 692.348 L1082.64 692.348 L1083.2 692.348 L1083.76 692.348 L1084.32 692.348 L1084.88 692.348 L1085.44 692.348 L1086 692.348 L1086.56 692.348 L1087.12 692.348 L1087.67 692.348 L1088.23 692.348 L1088.79 692.348 L1089.35 692.348 L1089.91 692.348 L1090.47 692.348 L1091.03 692.348 L1091.59 692.348 L1092.15 692.348 L1092.71 692.348 L1093.27 692.348 L1093.83 692.348 L1094.39 692.348 L1094.94 692.348 L1095.5 692.348 L1096.06 692.348 L1096.62 692.348 L1097.18 692.348 L1097.74 692.348 L1098.3 692.348 L1098.86 692.348 L1099.42 692.348 L1099.98 692.348 L1100.54 692.348 L1101.1 692.348 L1101.66 692.348 L1102.22 692.348 L1102.77 692.348 L1103.33 692.348 L1103.89 692.348 L1104.45 692.348 L1105.01 692.348 L1105.57 692.348 L1106.13 692.348 L1106.69 692.348 L1107.25 692.348 L1107.81 692.348 L1108.37 692.348 L1108.93 692.348 L1109.49 692.348 L1110.04 692.348 L1110.6 692.348 L1111.16 692.348 L1111.72 692.348 L1112.28 692.348 L1112.84 692.348 L1113.4 692.348 L1113.96 692.348 L1114.52 692.348 L1115.08 692.348 L1115.64 692.348 L1116.2 692.348 L1116.76 692.348 L1117.31 692.348 L1117.87 692.348 L1118.43 692.348 L1118.99 692.348 L1119.55 692.348 L1120.11 692.348 L1120.67 692.348 L1121.23 692.348 L1121.79 692.348 L1122.35 692.348 L1122.91 692.348 L1123.47 692.348 L1124.03 692.348 L1124.59 692.348 L1125.14 692.348 L1125.7 692.348 L1126.26 692.348 L1126.82 692.348 L1127.38 692.348 L1127.94 692.348 L1128.5 692.348 L1129.06 692.348 L1129.62 692.348 L1130.18 692.348 L1130.74 692.348 L1131.3 692.348 L1131.86 692.348 L1132.41 692.348 L1132.97 692.348 L1133.53 692.348 L1134.09 692.348 L1134.65 692.348 L1135.21 692.348 L1135.77 692.348 L1136.33 692.348 L1136.89 692.348 L1137.45 692.348 L1138.01 692.348 L1138.57 692.348 L1139.13 692.348 L1139.68 692.348 L1140.24 692.348 L1140.8 692.348 L1141.36 692.348 L1141.92 692.348 L1142.48 692.348 L1143.04 692.348 L1143.6 692.348 L1144.16 692.348 L1144.72 692.348 L1145.28 692.348 L1145.84 692.348 L1146.4 692.348 L1146.96 692.348 L1147.51 692.348 L1148.07 692.348 L1148.63 692.348 L1149.19 692.348 L1149.75 692.348 L1150.31 692.348 L1150.87 692.348 L1151.43 692.348 L1151.99 692.348 L1152.55 692.348 L1153.11 692.348 L1153.67 692.348 L1154.23 692.348 L1154.78 692.348 L1155.34 692.348 L1155.9 692.348 L1156.46 692.348 L1157.02 692.348 L1157.58 692.348 L1158.14 692.348 L1158.7 692.348 L1159.26 692.348 L1159.82 692.348 L1160.38 692.348 L1160.94 692.348 L1161.5 692.348 L1162.05 692.348 L1162.61 692.348 L1163.17 692.348 L1163.73 692.348 L1164.29 692.348 L1164.85 692.348 L1165.41 692.348 L1165.97 692.348 L1166.53 692.348 L1167.09 692.348 L1167.65 692.348 L1168.21 692.348 L1168.77 692.348 L1169.33 692.348 L1169.88 692.348 L1170.44 692.348 L1171 692.348 L1171.56 692.348 L1172.12 692.348 L1172.68 692.348 L1173.24 692.348 L1173.8 692.348 L1174.36 692.348 L1174.92 692.348 L1175.48 692.348 L1176.04 692.348 L1176.6 692.348 L1177.15 692.348 L1177.71 692.348 L1178.27 692.348 L1178.83 692.348 L1179.39 692.348 L1179.95 692.348 L1180.51 692.348 L1181.07 692.348 L1181.63 692.348 L1182.19 692.348 L1182.75 692.348 L1183.31 692.348 L1183.87 692.348 L1184.43 692.348 L1184.98 692.348 L1185.54 692.348 L1186.1 692.348 L1186.66 692.348 L1187.22 692.348 L1187.78 692.348 L1188.34 692.348 L1188.9 692.348 L1189.46 692.348 L1190.02 692.348 L1190.58 692.348 L1191.14 692.348 L1191.7 692.348 L1192.25 692.348 L1192.81 692.348 L1193.37 692.348 L1193.93 692.348 L1194.49 692.348 L1195.05 692.348 L1195.61 692.348 L1196.17 692.348 L1196.73 692.348 L1197.29 692.348 L1197.85 692.348 L1198.41 692.348 L1198.97 692.348 L1199.52 692.348 L1200.08 692.348 L1200.64 692.348 L1201.2 692.348 L1201.76 692.348 L1202.32 692.348 L1202.88 692.348 L1203.44 692.348 L1204 692.348 L1204.56 692.348 L1205.12 692.348 L1205.68 692.348 L1206.24 692.348 L1206.8 692.348 L1207.35 692.348 L1207.91 692.348 L1208.47 692.348 L1209.03 692.348 L1209.59 692.348 L1210.15 692.348 L1210.71 692.348 L1211.27 692.348 L1211.83 692.348 L1212.39 692.348 L1212.95 692.348 L1213.51 692.348 L1214.07 692.348 L1214.62 692.348 L1215.18 692.348 L1215.74 692.348 L1216.3 692.348 L1216.86 692.348 L1217.42 692.348 L1217.98 692.348 L1218.54 692.348 L1219.1 692.348 L1219.66 692.348 L1220.22 692.348 L1220.78 692.348 L1221.34 692.348 L1221.89 692.348 L1222.45 692.348 L1223.01 692.348 L1223.57 692.348 L1224.13 692.348 L1224.69 692.348 L1225.25 692.348 L1225.81 692.348 L1226.37 692.348 L1226.93 692.348 L1227.49 692.348 L1228.05 692.348 L1228.61 692.348 L1229.17 692.348 L1229.72 692.348 L1230.28 692.348 L1230.84 692.348 L1231.4 692.348 L1231.96 692.348 L1232.52 692.348 L1233.08 692.348 L1233.64 692.348 L1234.2 692.348 L1234.76 692.348 L1235.32 692.348 L1235.88 692.348 L1236.44 692.348 L1236.99 692.348 L1237.55 692.348 L1238.11 692.348 L1238.67 692.348 L1239.23 692.348 L1239.79 692.348 L1240.35 692.348 L1240.91 692.348 L1241.47 692.348 L1242.03 692.348 L1242.59 692.348 L1243.15 692.348 L1243.71 692.348 L1244.26 692.348 L1244.82 692.348 L1245.38 692.348 L1245.94 692.348 L1246.5 692.348 L1247.06 692.348 L1247.62 692.348 L1248.18 692.348 L1248.74 692.348 L1249.3 692.348 L1249.86 692.348 L1250.42 692.348 L1250.98 692.348 L1251.54 692.348 L1252.09 692.348 L1252.65 692.348 L1253.21 692.348 L1253.77 692.348 L1254.33 692.348 L1254.89 692.348 L1255.45 692.348 L1256.01 692.348 L1256.57 692.348 L1257.13 692.348 L1257.69 692.348 L1258.25 692.348 L1258.81 692.348 L1259.36 692.348 L1259.92 692.348 L1260.48 692.348 L1261.04 692.348 L1261.6 692.348 L1262.16 692.348 L1262.72 692.348 L1263.28 692.348 L1263.84 692.348 L1264.4 692.348 L1264.96 692.348 L1265.52 692.348 L1266.08 692.348 L1266.63 692.348 L1267.19 692.348 L1267.75 692.348 L1268.31 692.348 L1268.87 692.348 L1269.43 692.348 L1269.99 692.348 L1270.55 692.348 L1271.11 692.348 L1271.67 692.348 L1272.23 692.348 L1272.79 692.348 L1273.35 692.348 L1273.91 692.348 L1274.46 692.348 L1275.02 692.348 L1275.58 692.348 L1276.14 692.348 L1276.7 692.348 L1277.26 692.348 L1277.82 692.348 L1278.38 692.348 L1278.94 692.348 L1279.5 692.348 L1280.06 692.348 L1280.62 692.348 L1281.18 692.348 L1281.73 692.348 L1282.29 692.348 L1282.85 692.348 L1283.41 692.348 L1283.97 692.348 L1284.53 692.348 L1285.09 692.348 L1285.65 692.348 L1286.21 692.348 L1286.77 692.348 L1287.33 692.348 L1287.89 692.348 L1288.45 692.348 L1289 692.348 L1289.56 692.348 L1290.12 692.348 L1290.68 692.348 L1291.24 692.348 L1291.8 692.348 L1292.36 692.348 L1292.92 692.348 L1293.48 692.348 L1294.04 692.348 L1294.6 692.348 L1295.16 692.348 L1295.72 692.348 L1296.28 692.348 L1296.83 692.348 L1297.39 692.348 L1297.95 692.348 L1298.51 692.348 L1299.07 692.348 L1299.63 692.348 L1300.19 692.348 L1300.75 692.348 L1301.31 692.348 L1301.87 692.348 L1302.43 692.348 L1302.99 692.348 L1303.55 692.348 L1304.1 692.348 L1304.66 692.348 L1305.22 692.348 L1305.78 692.348 L1306.34 692.348 L1306.9 692.348 L1307.46 692.348 L1308.02 692.348 L1308.58 692.348 L1309.14 692.348 L1309.7 692.348 L1310.26 692.348 L1310.82 692.348 L1311.38 692.348 L1311.93 692.348 L1312.49 692.348 L1313.05 692.348 L1313.61 692.348 L1314.17 692.348 L1314.73 692.348 L1315.29 692.348 L1315.85 692.348 L1316.41 692.348 L1316.97 692.348 L1317.53 692.348 L1318.09 692.348 L1318.65 692.348 L1319.2 692.348 L1319.76 692.348 L1320.32 692.348 L1320.88 692.348 L1321.44 692.348 L1322 692.348 L1322.56 692.348 L1323.12 692.348 L1323.68 692.348 L1324.24 692.348 L1324.8 692.348 L1325.36 692.348 L1325.92 692.348 L1326.47 692.348 L1327.03 692.348 L1327.59 692.348 L1328.15 692.348 L1328.71 692.348 L1329.27 692.348 L1329.83 692.348 L1330.39 692.348 L1330.95 692.348 L1331.51 692.348 L1332.07 692.348 L1332.63 692.348 L1333.19 692.348 L1333.75 692.348 L1334.3 692.348 L1334.86 692.348 L1335.42 692.348 L1335.98 692.348 L1336.54 692.348 L1337.1 692.348 L1337.66 692.348 L1338.22 692.348 L1338.78 692.348 L1339.34 692.348 L1339.9 692.348 L1340.46 692.348 L1341.02 692.348 L1341.57 692.348 L1342.13 692.348 L1342.69 692.348 L1343.25 692.348 L1343.81 692.348 L1344.37 692.348 L1344.93 692.348 L1345.49 692.348 L1346.05 692.348 L1346.61 692.348 L1347.17 692.348 L1347.73 692.348 L1348.29 692.348 L1348.84 692.348 L1349.4 692.348 L1349.96 692.348 L1350.52 692.348 L1351.08 692.348 L1351.64 692.348 L1352.2 692.348 L1352.76 692.348 L1353.32 692.348 L1353.88 692.348 L1354.44 692.348 L1355 692.348 L1355.56 692.348 L1356.12 692.348 L1356.67 692.348 L1357.23 692.348 L1357.79 692.348 L1358.35 692.348 L1358.91 692.348 L1359.47 692.348 L1360.03 692.348 L1360.59 692.348 L1361.15 692.348 L1361.71 692.348 L1362.27 692.348 L1362.83 692.348 L1363.39 692.348 L1363.94 692.348 L1364.5 692.348 L1365.06 692.348 L1365.62 692.348 L1366.18 692.348 L1366.74 692.348 L1367.3 692.348 L1367.86 692.348 L1368.42 692.348 L1368.98 692.348 L1369.54 692.348 L1370.1 692.348 L1370.66 692.348 L1371.21 692.348 L1371.77 692.348 L1372.33 692.348 L1372.89 692.348 L1373.45 692.348 L1374.01 692.348 L1374.57 692.348 L1375.13 692.348 L1375.69 692.348 L1376.25 692.348 L1376.81 692.348 L1377.37 692.348 L1377.93 692.348 L1378.49 692.348 L1379.04 692.348 L1379.6 692.348 L1380.16 692.348 L1380.72 692.348 L1381.28 692.348 L1381.84 692.348 L1382.4 692.348 L1382.96 692.348 L1383.52 692.348 L1384.08 692.348 L1384.64 692.348 L1385.2 692.348 L1385.76 692.348 L1386.31 692.348 L1386.87 692.348 L1387.43 692.348 L1387.99 692.348 L1388.55 692.348 L1389.11 692.348 L1389.67 692.348 L1390.23 692.348 L1390.79 692.348 L1391.35 692.348 L1391.91 692.348 L1392.47 692.348 L1393.03 692.348 L1393.58 692.348 L1394.14 692.348 L1394.7 692.348 L1395.26 692.348 L1395.82 692.348 L1396.38 692.348 L1396.94 692.348 L1397.5 692.348 L1398.06 692.348 L1398.62 692.348 L1399.18 692.348 L1399.74 692.348 L1400.3 692.348 L1400.86 692.348 L1401.41 692.348 L1401.97 692.348 L1402.53 692.348 L1403.09 692.348 L1403.65 692.348 L1404.21 692.348 L1404.77 692.348 L1405.33 692.348 L1405.89 692.348 L1406.45 692.348 L1407.01 692.348 L1407.57 692.348 L1408.13 692.348 L1408.68 692.348 L1409.24 692.348 L1409.8 692.348 L1410.36 692.348 L1410.92 692.348 L1411.48 692.348 L1412.04 692.348 L1412.6 692.348 L1413.16 692.348 L1413.72 692.348 L1414.28 692.348 L1414.84 692.348 L1415.4 692.348 L1415.95 692.348 L1416.51 692.348 L1417.07 692.348 L1417.63 692.348 L1418.19 692.348 L1418.75 692.348 L1419.31 692.348 L1419.87 692.348 L1420.43 692.348 L1420.99 692.348 L1421.55 692.348 L1422.11 692.348 L1422.67 692.348 L1423.23 692.348 L1423.78 692.348 L1424.34 692.348 L1424.9 692.348 L1425.46 692.348 L1426.02 692.348 L1426.58 692.348 L1427.14 692.348 L1427.7 692.348 L1428.26 692.348 L1428.82 692.348 L1429.38 692.348 L1429.94 692.348 L1430.5 692.348 L1431.05 692.348 L1431.61 692.348 L1432.17 692.348 L1432.73 692.348 L1433.29 692.348 L1433.85 692.348 L1434.41 692.348 L1434.97 692.348 L1435.53 692.348 L1436.09 692.348 L1436.65 692.348 L1437.21 692.348 L1437.77 692.348 L1438.33 692.348 L1438.88 692.348 L1439.44 692.348 L1440 692.348 L1440.56 692.348 L1441.12 692.348 L1441.68 692.348 L1442.24 692.348 L1442.8 692.348 L1443.36 692.348 L1443.92 692.348 L1444.48 692.348 L1445.04 692.348 L1445.6 692.348 L1446.15 692.348 L1446.71 692.348 L1447.27 692.348 L1447.83 692.348 L1448.39 692.348 L1448.95 692.348 L1449.51 692.348 L1450.07 692.348 L1450.63 692.348 L1451.19 692.348 L1451.75 692.348 L1452.31 692.348 L1452.87 692.348 L1453.42 692.348 L1453.98 692.348 L1454.54 692.348 L1455.1 692.348 L1455.66 692.348 L1456.22 692.348 L1456.78 692.348 L1457.34 692.348 L1457.9 692.348 L1458.46 692.348 L1459.02 692.348 L1459.58 692.348 L1460.14 692.348 L1460.7 692.348 L1461.25 692.348 L1461.81 692.348 L1462.37 692.348 L1462.93 692.348 L1463.49 692.348 L1464.05 692.348 L1464.61 692.348 L1465.17 692.348 L1465.73 692.348 L1466.29 692.348 L1466.85 692.348 L1467.41 692.348 L1467.97 692.348 L1468.52 692.348 L1469.08 692.348 L1469.64 692.348 L1470.2 692.348 L1470.76 692.348 L1471.32 692.348 L1471.88 692.348 L1472.44 692.348 L1473 692.348 L1473.56 692.348 L1474.12 692.348 L1474.68 692.348 L1475.24 692.348 L1475.79 692.348 L1476.35 692.348 L1476.91 692.348 L1477.47 692.348 L1478.03 692.348 L1478.59 692.348 L1479.15 692.348 L1479.71 692.348 L1480.27 692.348 L1480.83 692.348 L1481.39 692.348 L1481.95 692.348 L1482.51 692.348 L1483.07 692.348 L1483.62 692.348 L1484.18 692.348 L1484.74 692.348 L1485.3 692.348 L1485.86 692.348 L1486.42 692.348 L1486.98 692.348 L1487.54 692.348 L1488.1 692.348 L1488.66 692.348 L1489.22 692.348 L1489.78 692.348 L1490.34 692.348 L1490.89 692.348 L1491.45 692.348 L1492.01 692.348 L1492.57 692.348 L1493.13 692.348 L1493.69 692.348 L1494.25 692.348 L1494.81 692.348 L1495.37 692.348 L1495.93 692.348 L1496.49 692.348 L1497.05 692.348 L1497.61 692.348 L1498.16 692.348 L1498.72 692.348 L1499.28 692.348 L1499.84 692.348 L1500.4 692.348 L1500.96 692.348 L1501.52 692.348 L1502.08 692.348 L1502.64 692.348 L1503.2 692.348 L1503.76 692.348 L1504.32 692.348 L1504.88 692.348 L1505.44 692.348 L1505.99 692.348 L1506.55 692.348 L1507.11 692.348 L1507.67 692.348 L1508.23 692.348 L1508.79 692.348 L1509.35 692.348 L1509.91 692.348 L1510.47 692.348 L1511.03 692.348 L1511.59 692.348 L1512.15 692.348 L1512.71 692.348 L1513.26 692.348 L1513.82 692.348 L1514.38 692.348 L1514.94 692.348 L1515.5 692.348 L1516.06 692.348 L1516.62 692.348 L1517.18 692.348 L1517.74 692.348 L1518.3 692.348 L1518.86 692.348 L1519.42 692.348 L1519.98 692.348 L1520.53 692.348 L1521.09 692.348 L1521.65 692.348 L1522.21 692.348 L1522.77 692.348 L1523.33 692.348 L1523.89 692.348 L1524.45 692.348 L1525.01 692.348 L1525.57 692.348 L1526.13 692.348 L1526.69 692.348 L1527.25 692.348 L1527.81 692.348 L1528.36 692.348 L1528.92 692.348 L1529.48 692.348 L1530.04 692.348 L1530.6 692.348 L1531.16 692.348 L1531.72 692.348 L1532.28 692.348 L1532.84 692.348 L1533.4 692.348 L1533.96 692.348 L1534.52 692.348 L1535.08 692.348 L1535.63 692.348 L1536.19 692.348 L1536.75 692.348 L1537.31 692.348 L1537.87 692.348 L1538.43 692.348 L1538.99 692.348 L1539.55 692.348 L1540.11 692.348 L1540.67 692.348 L1541.23 692.348 L1541.79 692.348 L1542.35 692.348 L1542.9 692.348 L1543.46 692.348 L1544.02 692.348 L1544.58 692.348 L1545.14 692.348 L1545.7 692.348 L1546.26 692.348 L1546.82 692.348 L1547.38 692.348 L1547.94 692.348 L1548.5 692.348 L1549.06 692.348 L1549.62 692.348 L1550.18 692.348 L1550.73 692.348 L1551.29 692.348 L1551.85 692.348 L1552.41 692.348 L1552.97 692.348 L1553.53 692.348 L1554.09 692.348 L1554.65 692.348 L1555.21 692.348 L1555.77 692.348 L1556.33 692.348 L1556.89 692.348 L1557.45 692.348 L1558 692.348 L1558.56 692.348 L1559.12 692.348 L1559.68 692.348 L1560.24 692.348 L1560.8 692.348 L1561.36 692.348 L1561.92 692.348 L1562.48 692.348 L1563.04 692.348 L1563.6 692.348 L1564.16 692.348 L1564.72 692.348 L1565.28 692.348 L1565.83 692.348 L1566.39 692.348 L1566.95 692.348 L1567.51 692.348 L1568.07 692.348 L1568.63 692.348 L1569.19 692.348 L1569.75 692.348 L1570.31 692.348 L1570.87 692.348 L1571.43 692.348 L1571.99 692.348 L1572.55 692.348 L1573.1 692.348 L1573.66 692.348 L1574.22 692.348 L1574.78 692.348 L1575.34 692.348 L1575.9 692.348 L1576.46 692.348 L1577.02 692.348 L1577.58 692.348 L1578.14 692.348 L1578.7 692.348 L1579.26 692.348 L1579.82 692.348 L1580.37 692.348 L1580.93 692.348 L1581.49 692.348 L1582.05 692.348 L1582.61 692.348 L1583.17 692.348 L1583.73 692.348 L1584.29 692.348 L1584.85 692.348 L1585.41 692.348 L1585.97 692.348 L1586.53 692.348 L1587.09 692.348 L1587.65 692.348 L1588.2 692.348 L1588.76 692.348 L1589.32 692.348 L1589.88 692.348 L1590.44 692.348 L1591 692.348 L1591.56 692.348 L1592.12 692.348 L1592.68 692.348 L1593.24 692.348 L1593.8 692.348 L1594.36 692.348 L1594.92 692.348 L1595.47 692.348 L1596.03 692.348 L1596.59 692.348 L1597.15 692.348 L1597.71 692.348 L1598.27 692.348 L1598.83 692.348 L1599.39 692.348 L1599.95 692.348 L1600.51 692.348 L1601.07 692.348 L1601.63 692.348 L1602.19 692.348 L1602.74 692.348 L1603.3 692.348 L1603.86 692.348 L1604.42 692.348 L1604.98 692.348 L1605.54 692.348 L1606.1 692.348 L1606.66 692.348 L1607.22 692.348 L1607.78 692.348 L1608.34 692.348 L1608.9 692.348 L1609.46 692.348 L1610.02 692.348 L1610.57 692.348 L1611.13 692.348 L1611.69 692.348 L1612.25 692.348 L1612.81 692.348 L1613.37 692.348 L1613.93 692.348 L1614.49 692.348 L1615.05 692.348 L1615.61 692.348 L1616.17 692.348 L1616.73 692.348 L1617.29 692.348 L1617.84 692.348 L1618.4 692.348 L1618.96 692.348 L1619.52 692.348 L1620.08 692.348 L1620.64 692.348 L1621.2 692.348 L1621.76 692.348 L1622.32 692.348 L1622.88 692.348 L1623.44 692.348 L1624 692.348 L1624.56 692.348 L1625.11 692.348 L1625.67 692.348 L1626.23 692.348 L1626.79 692.348 L1627.35 692.348 L1627.91 692.348 L1628.47 692.348 L1629.03 692.348 L1629.59 692.348 L1630.15 692.348 L1630.71 692.348 L1631.27 692.348 L1631.83 692.348 L1632.39 692.348 L1632.94 692.348 L1633.5 692.348 L1634.06 692.348 L1634.62 692.348 L1635.18 692.348 L1635.74 692.348 L1636.3 692.348 L1636.86 692.348 L1637.42 692.348 L1637.98 692.348 L1638.54 692.348 L1639.1 692.348 L1639.66 692.348 L1640.21 692.348 L1640.77 692.348 L1641.33 692.348 L1641.89 692.348 L1642.45 692.348 L1643.01 692.348 L1643.57 692.348 L1644.13 692.348 L1644.69 692.348 L1645.25 692.348 L1645.81 692.348 L1646.37 692.348 L1646.93 692.348 L1647.48 692.348 L1648.04 692.348 L1648.6 692.348 L1649.16 692.348 L1649.72 692.348 L1650.28 692.348 L1650.84 692.348 L1651.4 692.348 L1651.96 692.348 L1652.52 692.348 L1653.08 692.348 L1653.64 692.348 L1654.2 692.348 L1654.76 692.348 L1655.31 692.348 L1655.87 692.348 L1656.43 692.348 L1656.99 692.348 L1657.55 692.348 L1658.11 692.348 L1658.67 692.348 L1659.23 692.348 L1659.79 692.348 L1660.35 692.348 L1660.91 692.348 L1661.47 692.348 L1662.03 692.348 L1662.58 692.348 L1663.14 692.348 L1663.7 692.348 L1664.26 692.348 L1664.82 692.348 L1665.38 692.348 L1665.94 692.348 L1666.5 692.348 L1667.06 692.348 L1667.62 692.348 L1668.18 692.348 L1668.74 692.348 L1669.3 692.348 L1669.85 692.348 L1670.41 692.348 L1670.97 692.348 L1671.53 692.348 L1672.09 692.348 L1672.65 692.348 L1673.21 692.348 L1673.77 692.348 L1674.33 692.348 L1674.89 692.348 L1675.45 692.348 L1676.01 692.348 L1676.57 692.348 L1677.13 692.348 L1677.68 692.348 L1678.24 692.348 L1678.8 692.348 L1679.36 692.348 L1679.92 692.348 L1680.48 692.348 L1681.04 692.348 L1681.6 692.348 L1682.16 692.348 L1682.72 692.348 L1683.28 692.348 L1683.84 692.348 L1684.4 692.348 L1684.95 692.348 L1685.51 692.348 L1686.07 692.348 L1686.63 692.348 L1687.19 692.348 L1687.75 692.348 L1688.31 692.348 L1688.87 692.348 L1689.43 692.348 L1689.99 692.348 L1690.55 692.348 L1691.11 692.348 L1691.67 692.348 L1692.23 692.348 L1692.78 692.348 L1693.34 692.348 L1693.9 692.348 L1694.46 692.348 L1695.02 692.348 L1695.58 692.348 L1696.14 692.348 L1696.7 692.348 L1697.26 692.348 L1697.82 692.348 L1698.38 692.348 L1698.94 692.348 L1699.5 692.348 L1700.05 692.348 L1700.61 692.348 L1701.17 692.348 L1701.73 692.348 L1702.29 692.348 L1702.85 692.348 L1703.41 692.348 L1703.97 692.348 L1704.53 692.348 L1705.09 692.348 L1705.65 692.348 L1706.21 692.348 L1706.77 692.348 L1707.32 692.348 L1707.88 692.348 L1708.44 692.348 L1709 692.348 L1709.56 692.348 L1710.12 692.348 L1710.68 692.348 L1711.24 692.348 L1711.8 692.348 L1712.36 692.348 L1712.92 692.348 L1713.48 692.348 L1714.04 692.348 L1714.6 692.348 L1715.15 692.348 L1715.71 692.348 L1716.27 692.348 L1716.83 692.348 L1717.39 692.348 L1717.95 692.348 L1718.51 692.348 L1719.07 692.348 L1719.63 692.348 L1720.19 692.348 L1720.75 692.348 L1721.31 692.348 L1721.87 692.348 L1722.42 692.348 L1722.98 692.348 L1723.54 692.348 L1724.1 692.348 L1724.66 692.348 L1725.22 692.348 L1725.78 692.348 L1726.34 692.348 L1726.9 692.348 L1727.46 692.348 L1728.02 692.348 L1728.58 692.348 L1729.14 692.348 L1729.69 692.348 L1730.25 692.348 L1730.81 692.348 L1731.37 692.348 L1731.93 692.348 L1732.49 692.348 L1733.05 692.348 L1733.61 692.348 L1734.17 692.348 L1734.73 692.348 L1735.29 692.348 L1735.85 692.348 L1736.41 692.348 L1736.97 692.348 L1737.52 692.348 L1738.08 692.348 L1738.64 692.348 L1739.2 692.348 L1739.76 692.348 L1740.32 692.348 L1740.88 692.348 L1741.44 692.348 L1742 692.348 L1742.56 692.348 L1743.12 692.348 L1743.68 692.348 L1744.24 692.348 L1744.79 692.348 L1745.35 692.348 L1745.91 692.348 L1746.47 692.348 L1747.03 692.348 L1747.59 692.348 L1748.15 692.348 L1748.71 692.348 L1749.27 692.348 L1749.83 692.348 L1750.39 692.348 L1750.95 692.348 L1751.51 692.348 L1752.06 692.348 L1752.62 692.348 L1753.18 692.348 L1753.74 692.348 L1754.3 692.348 L1754.86 692.348 L1755.42 692.348 L1755.98 692.348 L1756.54 692.348 L1757.1 692.348 L1757.66 692.348 L1758.22 692.348 L1758.78 692.348 L1759.34 692.348 L1759.89 692.348 L1760.45 692.348 L1761.01 692.348 L1761.57 692.348 L1762.13 692.348 L1762.69 692.348 L1763.25 692.348 L1763.81 692.348 L1764.37 692.348 L1764.93 692.348 L1765.49 692.348 L1766.05 692.348 L1766.61 692.348 L1767.16 692.348 L1767.72 692.348 L1768.28 692.348 L1768.84 692.348 L1769.4 692.348 L1769.96 692.348 L1770.52 692.348 L1771.08 692.348 L1771.64 692.348 L1772.2 692.348 L1772.76 692.348 L1773.32 692.348 L1773.88 692.348 L1774.43 692.348 L1774.99 692.348 L1775.55 692.348 L1776.11 692.348 L1776.67 692.348 L1777.23 692.348 L1777.79 692.348 L1778.35 692.348 L1778.91 692.348 L1779.47 692.348 L1780.03 692.348 L1780.59 692.348 L1781.15 692.348 L1781.71 692.348 L1782.26 692.348 L1782.82 692.348 L1783.38 692.348 L1783.94 692.348 L1784.5 692.348 L1785.06 692.348 L1785.62 692.348 L1786.18 692.348 L1786.74 692.348 L1787.3 692.348 L1787.86 692.348 L1788.42 692.348 L1788.98 692.348 L1789.53 692.348 L1790.09 692.348 L1790.65 692.348 L1791.21 692.348 L1791.77 692.348 L1792.33 692.348 L1792.89 692.348 L1793.45 692.348 L1794.01 692.348 L1794.57 692.348 L1795.13 692.348 L1795.69 692.348 L1796.25 692.348 L1796.8 692.348 L1797.36 692.348 L1797.92 692.348 L1798.48 692.348 L1799.04 692.348 L1799.6 692.348 L1800.16 692.348 L1800.72 692.348 L1801.28 692.348 L1801.84 692.348 L1802.4 692.348 L1802.96 692.348 L1803.52 692.348 L1804.08 692.348 L1804.63 692.348 L1805.19 692.348 L1805.75 692.348 L1806.31 692.348 L1806.87 692.348 L1807.43 692.348 L1807.99 692.348 L1808.55 692.348 L1809.11 692.348 L1809.67 692.348 L1810.23 692.348 L1810.79 692.348 L1811.35 692.348 L1811.9 692.348 L1812.46 692.348 L1813.02 692.348 L1813.58 692.348 L1814.14 692.348 L1814.7 692.348 L1815.26 692.348 L1815.82 692.348 L1816.38 692.348 L1816.94 692.348 L1817.5 692.348 L1818.06 692.348 L1818.62 692.348 L1819.18 692.348 L1819.73 692.348 L1820.29 692.348 L1820.85 692.348 L1821.41 692.348 L1821.97 692.348 L1822.53 692.348 L1823.09 692.348 L1823.65 692.348 L1824.21 692.348 L1824.77 692.348 L1825.33 692.348 L1825.89 692.348 L1826.45 692.348 L1827 692.348 L1827.56 692.348 L1828.12 692.348 L1828.68 692.348 L1829.24 692.348 L1829.8 692.348 L1830.36 692.348 L1830.92 692.348 L1831.48 692.348 L1832.04 692.348 L1832.6 692.348 L1833.16 692.348 L1833.72 692.348 L1834.27 692.348 L1834.83 692.348 L1835.39 692.348 L1835.95 692.348 L1836.51 692.348 L1837.07 692.348 L1837.63 692.348 L1838.19 692.348 L1838.19 681.857 L1837.63 681.857 L1837.07 681.857 L1836.51 681.857 L1835.95 681.857 L1835.39 681.857 L1834.83 681.857 L1834.27 681.857 L1833.72 681.857 L1833.16 681.857 L1832.6 681.857 L1832.04 681.857 L1831.48 681.857 L1830.92 681.857 L1830.36 681.857 L1829.8 681.857 L1829.24 681.857 L1828.68 681.857 L1828.12 681.857 L1827.56 681.857 L1827 681.857 L1826.45 681.857 L1825.89 681.857 L1825.33 681.857 L1824.77 681.857 L1824.21 681.857 L1823.65 681.857 L1823.09 681.857 L1822.53 681.857 L1821.97 681.857 L1821.41 681.857 L1820.85 681.857 L1820.29 681.857 L1819.73 681.857 L1819.18 681.857 L1818.62 681.857 L1818.06 681.857 L1817.5 681.857 L1816.94 681.857 L1816.38 681.857 L1815.82 681.857 L1815.26 681.857 L1814.7 681.857 L1814.14 681.857 L1813.58 681.857 L1813.02 681.857 L1812.46 681.857 L1811.9 681.857 L1811.35 681.857 L1810.79 681.857 L1810.23 681.857 L1809.67 681.857 L1809.11 681.857 L1808.55 681.857 L1807.99 681.857 L1807.43 681.857 L1806.87 681.857 L1806.31 681.857 L1805.75 681.857 L1805.19 681.857 L1804.63 681.857 L1804.08 681.857 L1803.52 681.857 L1802.96 681.857 L1802.4 681.857 L1801.84 681.857 L1801.28 681.857 L1800.72 681.857 L1800.16 681.857 L1799.6 681.857 L1799.04 681.857 L1798.48 681.857 L1797.92 681.857 L1797.36 681.857 L1796.8 681.857 L1796.25 681.857 L1795.69 681.857 L1795.13 681.857 L1794.57 681.857 L1794.01 681.857 L1793.45 681.857 L1792.89 681.857 L1792.33 681.857 L1791.77 681.857 L1791.21 681.857 L1790.65 681.857 L1790.09 681.857 L1789.53 681.857 L1788.98 681.857 L1788.42 681.857 L1787.86 681.857 L1787.3 681.857 L1786.74 681.857 L1786.18 681.857 L1785.62 681.857 L1785.06 681.857 L1784.5 681.857 L1783.94 681.857 L1783.38 681.857 L1782.82 681.857 L1782.26 681.857 L1781.71 681.857 L1781.15 681.857 L1780.59 681.857 L1780.03 681.857 L1779.47 681.857 L1778.91 681.857 L1778.35 681.857 L1777.79 681.857 L1777.23 681.857 L1776.67 681.857 L1776.11 681.857 L1775.55 681.857 L1774.99 681.857 L1774.43 681.857 L1773.88 681.857 L1773.32 681.857 L1772.76 681.857 L1772.2 681.857 L1771.64 681.857 L1771.08 681.857 L1770.52 681.857 L1769.96 681.857 L1769.4 681.857 L1768.84 681.857 L1768.28 681.857 L1767.72 681.857 L1767.16 681.857 L1766.61 681.857 L1766.05 681.857 L1765.49 681.857 L1764.93 681.857 L1764.37 681.857 L1763.81 681.857 L1763.25 681.857 L1762.69 681.857 L1762.13 681.857 L1761.57 681.857 L1761.01 681.857 L1760.45 681.857 L1759.89 681.857 L1759.34 681.857 L1758.78 681.857 L1758.22 681.857 L1757.66 681.857 L1757.1 681.857 L1756.54 681.857 L1755.98 681.857 L1755.42 681.857 L1754.86 681.857 L1754.3 681.857 L1753.74 681.857 L1753.18 681.857 L1752.62 681.857 L1752.06 681.857 L1751.51 681.857 L1750.95 681.857 L1750.39 681.857 L1749.83 681.857 L1749.27 681.857 L1748.71 681.857 L1748.15 681.857 L1747.59 681.857 L1747.03 681.857 L1746.47 681.857 L1745.91 681.857 L1745.35 681.857 L1744.79 681.857 L1744.24 681.857 L1743.68 681.857 L1743.12 681.857 L1742.56 681.857 L1742 681.857 L1741.44 681.857 L1740.88 681.857 L1740.32 681.857 L1739.76 681.857 L1739.2 681.857 L1738.64 681.857 L1738.08 681.857 L1737.52 681.857 L1736.97 681.857 L1736.41 681.857 L1735.85 681.857 L1735.29 681.857 L1734.73 681.857 L1734.17 681.857 L1733.61 681.857 L1733.05 681.857 L1732.49 681.857 L1731.93 681.857 L1731.37 681.857 L1730.81 681.857 L1730.25 681.857 L1729.69 681.857 L1729.14 681.857 L1728.58 681.857 L1728.02 681.857 L1727.46 681.857 L1726.9 681.857 L1726.34 681.857 L1725.78 681.857 L1725.22 681.857 L1724.66 681.857 L1724.1 681.857 L1723.54 681.857 L1722.98 681.857 L1722.42 681.857 L1721.87 681.857 L1721.31 681.857 L1720.75 681.857 L1720.19 681.857 L1719.63 681.857 L1719.07 681.857 L1718.51 681.857 L1717.95 681.857 L1717.39 681.857 L1716.83 681.857 L1716.27 681.857 L1715.71 681.857 L1715.15 681.857 L1714.6 681.857 L1714.04 681.857 L1713.48 681.857 L1712.92 681.857 L1712.36 681.857 L1711.8 681.857 L1711.24 681.857 L1710.68 681.857 L1710.12 681.857 L1709.56 681.857 L1709 681.857 L1708.44 681.857 L1707.88 681.857 L1707.32 681.857 L1706.77 681.857 L1706.21 681.857 L1705.65 681.857 L1705.09 681.857 L1704.53 681.857 L1703.97 681.857 L1703.41 681.857 L1702.85 681.857 L1702.29 681.857 L1701.73 681.857 L1701.17 681.857 L1700.61 681.857 L1700.05 681.857 L1699.5 681.857 L1698.94 681.857 L1698.38 681.857 L1697.82 681.857 L1697.26 681.857 L1696.7 681.857 L1696.14 681.857 L1695.58 681.857 L1695.02 681.857 L1694.46 681.857 L1693.9 681.857 L1693.34 681.857 L1692.78 681.857 L1692.23 681.857 L1691.67 681.857 L1691.11 681.857 L1690.55 681.857 L1689.99 681.857 L1689.43 681.857 L1688.87 681.857 L1688.31 681.857 L1687.75 681.857 L1687.19 681.857 L1686.63 681.857 L1686.07 681.857 L1685.51 681.857 L1684.95 681.857 L1684.4 681.857 L1683.84 681.857 L1683.28 681.857 L1682.72 681.857 L1682.16 681.857 L1681.6 681.857 L1681.04 681.857 L1680.48 681.857 L1679.92 681.857 L1679.36 681.857 L1678.8 681.857 L1678.24 681.857 L1677.68 681.857 L1677.13 681.857 L1676.57 681.857 L1676.01 681.857 L1675.45 681.857 L1674.89 681.857 L1674.33 681.857 L1673.77 681.857 L1673.21 681.857 L1672.65 681.857 L1672.09 681.857 L1671.53 681.857 L1670.97 681.857 L1670.41 681.857 L1669.85 681.857 L1669.3 681.857 L1668.74 681.857 L1668.18 681.857 L1667.62 681.857 L1667.06 681.857 L1666.5 681.857 L1665.94 681.857 L1665.38 681.857 L1664.82 681.857 L1664.26 681.857 L1663.7 681.857 L1663.14 681.857 L1662.58 681.857 L1662.03 681.857 L1661.47 681.857 L1660.91 681.857 L1660.35 681.857 L1659.79 681.857 L1659.23 681.857 L1658.67 681.857 L1658.11 681.857 L1657.55 681.857 L1656.99 681.857 L1656.43 681.857 L1655.87 681.857 L1655.31 681.857 L1654.76 681.857 L1654.2 681.857 L1653.64 681.857 L1653.08 681.857 L1652.52 681.857 L1651.96 681.857 L1651.4 681.857 L1650.84 681.857 L1650.28 681.857 L1649.72 681.857 L1649.16 681.857 L1648.6 681.857 L1648.04 681.857 L1647.48 681.857 L1646.93 681.857 L1646.37 681.857 L1645.81 681.857 L1645.25 681.857 L1644.69 681.857 L1644.13 681.857 L1643.57 681.857 L1643.01 681.857 L1642.45 681.857 L1641.89 681.857 L1641.33 681.857 L1640.77 681.857 L1640.21 681.857 L1639.66 681.857 L1639.1 681.857 L1638.54 681.857 L1637.98 681.857 L1637.42 681.857 L1636.86 681.857 L1636.3 681.857 L1635.74 681.857 L1635.18 681.857 L1634.62 681.857 L1634.06 681.857 L1633.5 681.857 L1632.94 681.857 L1632.39 681.857 L1631.83 681.857 L1631.27 681.857 L1630.71 681.857 L1630.15 681.857 L1629.59 681.857 L1629.03 681.857 L1628.47 681.857 L1627.91 681.857 L1627.35 681.857 L1626.79 681.857 L1626.23 681.857 L1625.67 681.857 L1625.11 681.857 L1624.56 681.857 L1624 681.857 L1623.44 681.857 L1622.88 681.857 L1622.32 681.857 L1621.76 681.857 L1621.2 681.857 L1620.64 681.857 L1620.08 681.857 L1619.52 681.857 L1618.96 681.857 L1618.4 681.857 L1617.84 681.857 L1617.29 681.857 L1616.73 681.857 L1616.17 681.857 L1615.61 681.857 L1615.05 681.857 L1614.49 681.857 L1613.93 681.857 L1613.37 681.857 L1612.81 681.857 L1612.25 681.857 L1611.69 681.857 L1611.13 681.857 L1610.57 681.857 L1610.02 681.857 L1609.46 681.857 L1608.9 681.857 L1608.34 681.857 L1607.78 681.857 L1607.22 681.857 L1606.66 681.857 L1606.1 681.857 L1605.54 681.857 L1604.98 681.857 L1604.42 681.857 L1603.86 681.857 L1603.3 681.857 L1602.74 681.857 L1602.19 681.857 L1601.63 681.857 L1601.07 681.857 L1600.51 681.857 L1599.95 681.857 L1599.39 681.857 L1598.83 681.857 L1598.27 681.857 L1597.71 681.857 L1597.15 681.857 L1596.59 681.857 L1596.03 681.857 L1595.47 681.857 L1594.92 681.857 L1594.36 681.857 L1593.8 681.857 L1593.24 681.857 L1592.68 681.857 L1592.12 681.857 L1591.56 681.857 L1591 681.857 L1590.44 681.857 L1589.88 681.857 L1589.32 681.857 L1588.76 681.857 L1588.2 681.857 L1587.65 681.857 L1587.09 681.857 L1586.53 681.857 L1585.97 681.857 L1585.41 681.857 L1584.85 681.857 L1584.29 681.857 L1583.73 681.857 L1583.17 681.857 L1582.61 681.857 L1582.05 681.857 L1581.49 681.857 L1580.93 681.857 L1580.37 681.857 L1579.82 681.857 L1579.26 681.857 L1578.7 681.857 L1578.14 681.857 L1577.58 681.857 L1577.02 681.857 L1576.46 681.857 L1575.9 681.857 L1575.34 681.857 L1574.78 681.857 L1574.22 681.857 L1573.66 681.857 L1573.1 681.857 L1572.55 681.857 L1571.99 681.857 L1571.43 681.857 L1570.87 681.857 L1570.31 681.857 L1569.75 681.857 L1569.19 681.857 L1568.63 681.857 L1568.07 681.857 L1567.51 681.857 L1566.95 681.857 L1566.39 681.857 L1565.83 681.857 L1565.28 681.857 L1564.72 681.857 L1564.16 681.857 L1563.6 681.857 L1563.04 681.857 L1562.48 681.857 L1561.92 681.857 L1561.36 681.857 L1560.8 681.857 L1560.24 681.857 L1559.68 681.857 L1559.12 681.857 L1558.56 681.857 L1558 681.857 L1557.45 681.857 L1556.89 681.857 L1556.33 681.857 L1555.77 681.857 L1555.21 681.857 L1554.65 681.857 L1554.09 681.857 L1553.53 681.857 L1552.97 681.857 L1552.41 681.857 L1551.85 681.857 L1551.29 681.857 L1550.73 681.857 L1550.18 681.857 L1549.62 681.857 L1549.06 681.857 L1548.5 681.857 L1547.94 681.857 L1547.38 681.857 L1546.82 681.857 L1546.26 681.857 L1545.7 681.857 L1545.14 681.857 L1544.58 681.857 L1544.02 681.857 L1543.46 681.857 L1542.9 681.857 L1542.35 681.857 L1541.79 681.857 L1541.23 681.857 L1540.67 681.857 L1540.11 681.857 L1539.55 681.857 L1538.99 681.857 L1538.43 681.857 L1537.87 681.857 L1537.31 681.857 L1536.75 681.857 L1536.19 681.857 L1535.63 681.857 L1535.08 681.857 L1534.52 681.857 L1533.96 681.857 L1533.4 681.857 L1532.84 681.857 L1532.28 681.857 L1531.72 681.857 L1531.16 681.857 L1530.6 681.857 L1530.04 681.857 L1529.48 681.857 L1528.92 681.857 L1528.36 681.857 L1527.81 681.857 L1527.25 681.857 L1526.69 681.857 L1526.13 681.857 L1525.57 681.857 L1525.01 681.857 L1524.45 681.857 L1523.89 681.857 L1523.33 681.857 L1522.77 681.857 L1522.21 681.857 L1521.65 681.857 L1521.09 681.857 L1520.53 681.857 L1519.98 681.857 L1519.42 681.857 L1518.86 681.857 L1518.3 681.857 L1517.74 681.857 L1517.18 681.857 L1516.62 681.857 L1516.06 681.857 L1515.5 681.857 L1514.94 681.857 L1514.38 681.857 L1513.82 681.857 L1513.26 681.857 L1512.71 681.857 L1512.15 681.857 L1511.59 681.857 L1511.03 681.857 L1510.47 681.857 L1509.91 681.857 L1509.35 681.857 L1508.79 681.857 L1508.23 681.857 L1507.67 681.857 L1507.11 681.857 L1506.55 681.857 L1505.99 681.857 L1505.44 681.857 L1504.88 681.857 L1504.32 681.857 L1503.76 681.857 L1503.2 681.857 L1502.64 681.857 L1502.08 681.857 L1501.52 681.857 L1500.96 681.857 L1500.4 681.857 L1499.84 681.857 L1499.28 681.857 L1498.72 681.857 L1498.16 681.857 L1497.61 681.857 L1497.05 681.857 L1496.49 681.857 L1495.93 681.857 L1495.37 681.857 L1494.81 681.857 L1494.25 681.857 L1493.69 681.857 L1493.13 681.857 L1492.57 681.857 L1492.01 681.857 L1491.45 681.857 L1490.89 681.857 L1490.34 681.857 L1489.78 681.857 L1489.22 681.857 L1488.66 681.857 L1488.1 681.857 L1487.54 681.857 L1486.98 681.857 L1486.42 681.857 L1485.86 681.857 L1485.3 681.857 L1484.74 681.857 L1484.18 681.857 L1483.62 681.857 L1483.07 681.857 L1482.51 681.857 L1481.95 681.857 L1481.39 681.857 L1480.83 681.857 L1480.27 681.857 L1479.71 681.857 L1479.15 681.857 L1478.59 681.857 L1478.03 681.857 L1477.47 681.857 L1476.91 681.857 L1476.35 681.857 L1475.79 681.857 L1475.24 681.857 L1474.68 681.857 L1474.12 681.857 L1473.56 681.857 L1473 681.857 L1472.44 681.857 L1471.88 681.857 L1471.32 681.857 L1470.76 681.857 L1470.2 681.857 L1469.64 681.857 L1469.08 681.857 L1468.52 681.857 L1467.97 681.857 L1467.41 681.857 L1466.85 681.857 L1466.29 681.857 L1465.73 681.857 L1465.17 681.857 L1464.61 681.857 L1464.05 681.857 L1463.49 681.857 L1462.93 681.857 L1462.37 681.857 L1461.81 681.857 L1461.25 681.857 L1460.7 681.857 L1460.14 681.857 L1459.58 681.857 L1459.02 681.857 L1458.46 681.857 L1457.9 681.857 L1457.34 681.857 L1456.78 681.857 L1456.22 681.857 L1455.66 681.857 L1455.1 681.857 L1454.54 681.857 L1453.98 681.857 L1453.42 681.857 L1452.87 681.857 L1452.31 681.857 L1451.75 681.857 L1451.19 681.857 L1450.63 681.857 L1450.07 681.857 L1449.51 681.857 L1448.95 681.857 L1448.39 681.857 L1447.83 681.857 L1447.27 681.857 L1446.71 681.857 L1446.15 681.857 L1445.6 681.857 L1445.04 681.857 L1444.48 681.857 L1443.92 681.857 L1443.36 681.857 L1442.8 681.857 L1442.24 681.857 L1441.68 681.857 L1441.12 681.857 L1440.56 681.857 L1440 681.857 L1439.44 681.857 L1438.88 681.857 L1438.33 681.857 L1437.77 681.857 L1437.21 681.857 L1436.65 681.857 L1436.09 681.857 L1435.53 681.857 L1434.97 681.857 L1434.41 681.857 L1433.85 681.857 L1433.29 681.857 L1432.73 681.857 L1432.17 681.857 L1431.61 681.857 L1431.05 681.857 L1430.5 681.857 L1429.94 681.857 L1429.38 681.857 L1428.82 681.857 L1428.26 681.857 L1427.7 681.857 L1427.14 681.857 L1426.58 681.857 L1426.02 681.857 L1425.46 681.857 L1424.9 681.857 L1424.34 681.857 L1423.78 681.857 L1423.23 681.857 L1422.67 681.857 L1422.11 681.857 L1421.55 681.857 L1420.99 681.857 L1420.43 681.857 L1419.87 681.857 L1419.31 681.857 L1418.75 681.857 L1418.19 681.857 L1417.63 681.857 L1417.07 681.857 L1416.51 681.857 L1415.95 681.857 L1415.4 681.857 L1414.84 681.857 L1414.28 681.857 L1413.72 681.857 L1413.16 681.857 L1412.6 681.857 L1412.04 681.857 L1411.48 681.857 L1410.92 681.857 L1410.36 681.857 L1409.8 681.857 L1409.24 681.857 L1408.68 681.857 L1408.13 681.857 L1407.57 681.857 L1407.01 681.857 L1406.45 681.857 L1405.89 681.857 L1405.33 681.857 L1404.77 681.857 L1404.21 681.857 L1403.65 681.857 L1403.09 681.857 L1402.53 681.857 L1401.97 681.857 L1401.41 681.857 L1400.86 681.857 L1400.3 681.857 L1399.74 681.857 L1399.18 681.857 L1398.62 681.857 L1398.06 681.857 L1397.5 681.857 L1396.94 681.857 L1396.38 681.857 L1395.82 681.857 L1395.26 681.857 L1394.7 681.857 L1394.14 681.857 L1393.58 681.857 L1393.03 681.857 L1392.47 681.857 L1391.91 681.857 L1391.35 681.857 L1390.79 681.857 L1390.23 681.857 L1389.67 681.857 L1389.11 681.857 L1388.55 681.857 L1387.99 681.857 L1387.43 681.857 L1386.87 681.857 L1386.31 681.857 L1385.76 681.857 L1385.2 681.857 L1384.64 681.857 L1384.08 681.857 L1383.52 681.857 L1382.96 681.857 L1382.4 681.857 L1381.84 681.857 L1381.28 681.857 L1380.72 681.857 L1380.16 681.857 L1379.6 681.857 L1379.04 681.857 L1378.49 681.857 L1377.93 681.857 L1377.37 681.857 L1376.81 681.857 L1376.25 681.857 L1375.69 681.857 L1375.13 681.857 L1374.57 681.857 L1374.01 681.857 L1373.45 681.857 L1372.89 681.857 L1372.33 681.857 L1371.77 681.857 L1371.21 681.857 L1370.66 681.857 L1370.1 681.857 L1369.54 681.857 L1368.98 681.857 L1368.42 681.857 L1367.86 681.857 L1367.3 681.857 L1366.74 681.857 L1366.18 681.857 L1365.62 681.857 L1365.06 681.857 L1364.5 681.857 L1363.94 681.857 L1363.39 681.857 L1362.83 681.857 L1362.27 681.857 L1361.71 681.857 L1361.15 681.857 L1360.59 681.857 L1360.03 681.857 L1359.47 681.857 L1358.91 681.857 L1358.35 681.857 L1357.79 681.857 L1357.23 681.857 L1356.67 681.857 L1356.12 681.857 L1355.56 681.857 L1355 681.857 L1354.44 681.857 L1353.88 681.857 L1353.32 681.857 L1352.76 681.857 L1352.2 681.857 L1351.64 681.857 L1351.08 681.857 L1350.52 681.857 L1349.96 681.857 L1349.4 681.857 L1348.84 681.857 L1348.29 681.857 L1347.73 681.857 L1347.17 681.857 L1346.61 681.857 L1346.05 681.857 L1345.49 681.857 L1344.93 681.857 L1344.37 681.857 L1343.81 681.857 L1343.25 681.857 L1342.69 681.857 L1342.13 681.857 L1341.57 681.857 L1341.02 681.857 L1340.46 681.857 L1339.9 681.857 L1339.34 681.857 L1338.78 681.857 L1338.22 681.857 L1337.66 681.857 L1337.1 681.857 L1336.54 681.857 L1335.98 681.857 L1335.42 681.857 L1334.86 681.857 L1334.3 681.857 L1333.75 681.857 L1333.19 681.857 L1332.63 681.857 L1332.07 681.857 L1331.51 681.857 L1330.95 681.857 L1330.39 681.857 L1329.83 681.857 L1329.27 681.857 L1328.71 681.857 L1328.15 681.857 L1327.59 681.857 L1327.03 681.857 L1326.47 681.857 L1325.92 681.857 L1325.36 681.857 L1324.8 681.857 L1324.24 681.857 L1323.68 681.857 L1323.12 681.857 L1322.56 681.857 L1322 681.857 L1321.44 681.857 L1320.88 681.857 L1320.32 681.857 L1319.76 681.857 L1319.2 681.857 L1318.65 681.857 L1318.09 681.857 L1317.53 681.857 L1316.97 681.857 L1316.41 681.857 L1315.85 681.857 L1315.29 681.857 L1314.73 681.857 L1314.17 681.857 L1313.61 681.857 L1313.05 681.857 L1312.49 681.857 L1311.93 681.857 L1311.38 681.857 L1310.82 681.857 L1310.26 681.857 L1309.7 681.857 L1309.14 681.857 L1308.58 681.857 L1308.02 681.857 L1307.46 681.857 L1306.9 681.857 L1306.34 681.857 L1305.78 681.857 L1305.22 681.857 L1304.66 681.857 L1304.1 681.857 L1303.55 681.857 L1302.99 681.857 L1302.43 681.857 L1301.87 681.857 L1301.31 681.857 L1300.75 681.857 L1300.19 681.857 L1299.63 681.857 L1299.07 681.857 L1298.51 681.857 L1297.95 681.857 L1297.39 681.857 L1296.83 681.857 L1296.28 681.857 L1295.72 681.857 L1295.16 681.857 L1294.6 681.857 L1294.04 681.857 L1293.48 681.857 L1292.92 681.857 L1292.36 681.857 L1291.8 681.857 L1291.24 681.857 L1290.68 681.857 L1290.12 681.857 L1289.56 681.857 L1289 681.857 L1288.45 681.857 L1287.89 681.857 L1287.33 681.857 L1286.77 681.857 L1286.21 681.857 L1285.65 681.857 L1285.09 681.857 L1284.53 681.857 L1283.97 681.857 L1283.41 681.857 L1282.85 681.857 L1282.29 681.857 L1281.73 681.857 L1281.18 681.857 L1280.62 681.857 L1280.06 681.857 L1279.5 681.857 L1278.94 681.857 L1278.38 681.857 L1277.82 681.857 L1277.26 681.857 L1276.7 681.857 L1276.14 681.857 L1275.58 681.857 L1275.02 681.857 L1274.46 681.857 L1273.91 681.857 L1273.35 681.857 L1272.79 681.857 L1272.23 681.857 L1271.67 681.857 L1271.11 681.857 L1270.55 681.857 L1269.99 681.857 L1269.43 681.857 L1268.87 681.857 L1268.31 681.857 L1267.75 681.857 L1267.19 681.857 L1266.63 681.857 L1266.08 681.857 L1265.52 681.857 L1264.96 681.857 L1264.4 681.857 L1263.84 681.857 L1263.28 681.857 L1262.72 681.857 L1262.16 681.857 L1261.6 681.857 L1261.04 681.857 L1260.48 681.857 L1259.92 681.857 L1259.36 681.857 L1258.81 681.857 L1258.25 681.857 L1257.69 681.857 L1257.13 681.857 L1256.57 681.857 L1256.01 681.857 L1255.45 681.857 L1254.89 681.857 L1254.33 681.857 L1253.77 681.857 L1253.21 681.857 L1252.65 681.857 L1252.09 681.857 L1251.54 681.857 L1250.98 681.857 L1250.42 681.857 L1249.86 681.857 L1249.3 681.857 L1248.74 681.857 L1248.18 681.857 L1247.62 681.857 L1247.06 681.857 L1246.5 681.857 L1245.94 681.857 L1245.38 681.857 L1244.82 681.857 L1244.26 681.857 L1243.71 681.857 L1243.15 681.857 L1242.59 681.857 L1242.03 681.857 L1241.47 681.857 L1240.91 681.857 L1240.35 681.857 L1239.79 681.857 L1239.23 681.857 L1238.67 681.857 L1238.11 681.857 L1237.55 681.857 L1236.99 681.857 L1236.44 681.857 L1235.88 681.857 L1235.32 681.857 L1234.76 681.857 L1234.2 681.857 L1233.64 681.857 L1233.08 681.857 L1232.52 681.857 L1231.96 681.857 L1231.4 681.857 L1230.84 681.857 L1230.28 681.857 L1229.72 681.857 L1229.17 681.857 L1228.61 681.857 L1228.05 681.857 L1227.49 681.857 L1226.93 681.857 L1226.37 681.857 L1225.81 681.857 L1225.25 681.857 L1224.69 681.857 L1224.13 681.857 L1223.57 681.857 L1223.01 681.857 L1222.45 681.857 L1221.89 681.857 L1221.34 681.857 L1220.78 681.857 L1220.22 681.857 L1219.66 681.857 L1219.1 681.857 L1218.54 681.857 L1217.98 681.857 L1217.42 681.857 L1216.86 681.857 L1216.3 681.857 L1215.74 681.857 L1215.18 681.857 L1214.62 681.857 L1214.07 681.857 L1213.51 681.857 L1212.95 681.857 L1212.39 681.857 L1211.83 681.857 L1211.27 681.857 L1210.71 681.857 L1210.15 681.857 L1209.59 681.857 L1209.03 681.857 L1208.47 681.857 L1207.91 681.857 L1207.35 681.857 L1206.8 681.857 L1206.24 681.857 L1205.68 681.857 L1205.12 681.857 L1204.56 681.857 L1204 681.857 L1203.44 681.857 L1202.88 681.857 L1202.32 681.857 L1201.76 681.857 L1201.2 681.857 L1200.64 681.857 L1200.08 681.857 L1199.52 681.857 L1198.97 681.857 L1198.41 681.857 L1197.85 681.857 L1197.29 681.857 L1196.73 681.857 L1196.17 681.857 L1195.61 681.857 L1195.05 681.857 L1194.49 681.857 L1193.93 681.857 L1193.37 681.857 L1192.81 681.857 L1192.25 681.857 L1191.7 681.857 L1191.14 681.857 L1190.58 681.857 L1190.02 681.857 L1189.46 681.857 L1188.9 681.857 L1188.34 681.857 L1187.78 681.857 L1187.22 681.857 L1186.66 681.857 L1186.1 681.857 L1185.54 681.857 L1184.98 681.857 L1184.43 681.857 L1183.87 681.857 L1183.31 681.857 L1182.75 681.857 L1182.19 681.857 L1181.63 681.857 L1181.07 681.857 L1180.51 681.857 L1179.95 681.857 L1179.39 681.857 L1178.83 681.857 L1178.27 681.857 L1177.71 681.857 L1177.15 681.857 L1176.6 681.857 L1176.04 681.857 L1175.48 681.857 L1174.92 681.857 L1174.36 681.857 L1173.8 681.857 L1173.24 681.857 L1172.68 681.857 L1172.12 681.857 L1171.56 681.857 L1171 681.857 L1170.44 681.857 L1169.88 681.857 L1169.33 681.857 L1168.77 681.857 L1168.21 681.857 L1167.65 681.857 L1167.09 681.857 L1166.53 681.857 L1165.97 681.857 L1165.41 681.857 L1164.85 681.857 L1164.29 681.857 L1163.73 681.857 L1163.17 681.857 L1162.61 681.857 L1162.05 681.857 L1161.5 681.857 L1160.94 681.857 L1160.38 681.857 L1159.82 681.857 L1159.26 681.857 L1158.7 681.857 L1158.14 681.857 L1157.58 681.857 L1157.02 681.857 L1156.46 681.857 L1155.9 681.857 L1155.34 681.857 L1154.78 681.857 L1154.23 681.857 L1153.67 681.857 L1153.11 681.857 L1152.55 681.857 L1151.99 681.857 L1151.43 681.857 L1150.87 681.857 L1150.31 681.857 L1149.75 681.857 L1149.19 681.857 L1148.63 681.857 L1148.07 681.857 L1147.51 681.857 L1146.96 681.857 L1146.4 681.857 L1145.84 681.857 L1145.28 681.857 L1144.72 681.857 L1144.16 681.857 L1143.6 681.857 L1143.04 681.857 L1142.48 681.857 L1141.92 681.857 L1141.36 681.857 L1140.8 681.857 L1140.24 681.857 L1139.68 681.857 L1139.13 681.857 L1138.57 681.857 L1138.01 681.857 L1137.45 681.857 L1136.89 681.857 L1136.33 681.857 L1135.77 681.857 L1135.21 681.857 L1134.65 681.857 L1134.09 681.857 L1133.53 681.857 L1132.97 681.857 L1132.41 681.857 L1131.86 681.857 L1131.3 681.857 L1130.74 681.857 L1130.18 681.857 L1129.62 681.857 L1129.06 681.857 L1128.5 681.857 L1127.94 681.857 L1127.38 681.857 L1126.82 681.857 L1126.26 681.857 L1125.7 681.857 L1125.14 681.857 L1124.59 681.857 L1124.03 681.857 L1123.47 681.857 L1122.91 681.857 L1122.35 681.857 L1121.79 681.857 L1121.23 681.857 L1120.67 681.857 L1120.11 681.857 L1119.55 681.857 L1118.99 681.857 L1118.43 681.857 L1117.87 681.857 L1117.31 681.857 L1116.76 681.857 L1116.2 681.857 L1115.64 681.857 L1115.08 681.857 L1114.52 681.857 L1113.96 681.857 L1113.4 681.857 L1112.84 681.857 L1112.28 681.857 L1111.72 681.857 L1111.16 681.857 L1110.6 681.857 L1110.04 681.857 L1109.49 681.857 L1108.93 681.857 L1108.37 681.857 L1107.81 681.857 L1107.25 681.857 L1106.69 681.857 L1106.13 681.857 L1105.57 681.857 L1105.01 681.857 L1104.45 681.857 L1103.89 681.857 L1103.33 681.857 L1102.77 681.857 L1102.22 681.857 L1101.66 681.857 L1101.1 681.857 L1100.54 681.857 L1099.98 681.857 L1099.42 681.857 L1098.86 681.857 L1098.3 681.857 L1097.74 681.857 L1097.18 681.857 L1096.62 681.857 L1096.06 681.857 L1095.5 681.857 L1094.94 681.857 L1094.39 681.857 L1093.83 681.857 L1093.27 681.857 L1092.71 681.857 L1092.15 681.857 L1091.59 681.857 L1091.03 681.857 L1090.47 681.857 L1089.91 681.857 L1089.35 681.857 L1088.79 681.857 L1088.23 681.857 L1087.67 681.857 L1087.12 681.857 L1086.56 681.857 L1086 681.857 L1085.44 681.857 L1084.88 681.857 L1084.32 681.857 L1083.76 681.857 L1083.2 681.857 L1082.64 681.857 L1082.08 681.857 L1081.52 681.857 L1080.96 681.857 L1080.4 681.857 L1079.85 681.857 L1079.29 681.857 L1078.73 681.857 L1078.17 681.857 L1077.61 681.857 L1077.05 681.857 L1076.49 681.857 L1075.93 681.857 L1075.37 681.857 L1074.81 681.857 L1074.25 681.857 L1073.69 681.857 L1073.13 681.857 L1072.57 681.857 L1072.02 681.857 L1071.46 681.857 L1070.9 681.857 L1070.34 681.857 L1069.78 681.857 L1069.22 681.857 L1068.66 681.857 L1068.1 681.857 L1067.54 681.857 L1066.98 681.857 L1066.42 681.857 L1065.86 681.857 L1065.3 681.857 L1064.75 681.857 L1064.19 681.857 L1063.63 681.857 L1063.07 681.857 L1062.51 681.857 L1061.95 681.857 L1061.39 681.857 L1060.83 681.857 L1060.27 681.857 L1059.71 681.857 L1059.15 681.857 L1058.59 681.857 L1058.03 681.857 L1057.48 681.857 L1056.92 681.857 L1056.36 681.857 L1055.8 681.857 L1055.24 681.857 L1054.68 681.857 L1054.12 681.857 L1053.56 681.857 L1053 681.857 L1052.44 681.857 L1051.88 681.857 L1051.32 681.857 L1050.76 681.857 L1050.2 681.857 L1049.65 681.857 L1049.09 681.857 L1048.53 681.857 L1047.97 681.857 L1047.41 681.857 L1046.85 681.857 L1046.29 681.857 L1045.73 681.857 L1045.17 681.857 L1044.61 681.857 L1044.05 681.857 L1043.49 681.857 L1042.93 681.857 L1042.38 681.857 L1041.82 681.857 L1041.26 681.857 L1040.7 681.857 L1040.14 681.857 L1039.58 681.857 L1039.02 681.857 L1038.46 681.857 L1037.9 681.857 L1037.34 681.857 L1036.78 681.857 L1036.22 681.857 L1035.66 681.857 L1035.1 681.857 L1034.55 681.857 L1033.99 681.857 L1033.43 681.857 L1032.87 681.857 L1032.31 681.857 L1031.75 681.857 L1031.19 681.857 L1030.63 681.857 L1030.07 681.857 L1029.51 681.857 L1028.95 681.857 L1028.39 681.857 L1027.83 681.857 L1027.28 681.857 L1026.72 681.857 L1026.16 681.857 L1025.6 681.857 L1025.04 681.857 L1024.48 681.857 L1023.92 681.857 L1023.36 681.857 L1022.8 681.857 L1022.24 681.857 L1021.68 681.857 L1021.12 681.857 L1020.56 681.857 L1020.01 681.857 L1019.45 681.857 L1018.89 681.857 L1018.33 681.857 L1017.77 681.857 L1017.21 681.857 L1016.65 681.857 L1016.09 681.857 L1015.53 681.857 L1014.97 681.857 L1014.41 681.857 L1013.85 681.857 L1013.29 681.857 L1012.73 681.857 L1012.18 681.857 L1011.62 681.857 L1011.06 681.857 L1010.5 681.857 L1009.94 681.857 L1009.38 681.857 L1008.82 681.857 L1008.26 681.857 L1007.7 681.857 L1007.14 681.857 L1006.58 681.857 L1006.02 681.857 L1005.46 681.857 L1004.91 681.857 L1004.35 681.857 L1003.79 681.857 L1003.23 681.857 L1002.67 681.857 L1002.11 681.857 L1001.55 681.857 L1000.99 681.857 L1000.43 681.857 L999.872 681.857 L999.313 681.857 L998.754 681.857 L998.194 681.857 L997.635 681.857 L997.076 681.857 L996.517 681.857 L995.957 681.857 L995.398 681.857 L994.839 681.857 L994.28 681.857 L993.72 681.857 L993.161 681.857 L992.602 681.857 L992.043 681.857 L991.483 681.857 L990.924 681.857 L990.365 681.857 L989.806 681.857 L989.246 681.857 L988.687 681.857 L988.128 681.857 L987.569 681.857 L987.009 681.857 L986.45 681.857 L985.891 681.857 L985.332 681.857 L984.772 681.857 L984.213 681.857 L983.654 681.857 L983.095 681.857 L982.535 681.857 L981.976 681.857 L981.417 681.857 L980.858 681.857 L980.298 681.857 L979.739 681.857 L979.18 681.857 L978.621 681.857 L978.061 681.857 L977.502 681.857 L976.943 681.857 L976.384 681.857 L975.824 681.857 L975.265 681.857 L974.706 681.857 L974.147 681.857 L973.587 681.857 L973.028 681.857 L972.469 681.857 L971.91 681.857 L971.35 681.857 L970.791 681.857 L970.232 681.857 L969.673 681.857 L969.113 681.857 L968.554 681.857 L967.995 681.857 L967.436 681.857 L966.876 681.857 L966.317 681.857 L965.758 681.857 L965.199 681.857 L964.639 681.857 L964.08 681.857 L963.521 681.857 L962.962 681.857 L962.402 681.857 L961.843 681.857 L961.284 681.857 L960.725 681.857 L960.165 681.857 L959.606 681.857 L959.047 681.857 L958.488 681.857 L957.928 681.857 L957.369 681.857 L956.81 681.857 L956.251 681.857 L955.691 681.857 L955.132 681.857 L954.573 681.857 L954.014 681.857 L953.454 681.857 L952.895 681.857 L952.336 681.857 L951.777 681.857 L951.217 681.857 L950.658 681.857 L950.099 681.857 L949.54 681.857 L948.98 681.857 L948.421 681.857 L947.862 681.857 L947.303 681.857 L946.743 681.857 L946.184 681.857 L945.625 681.857 L945.066 681.857 L944.506 681.857 L943.947 681.857 L943.388 681.857 L942.829 681.857 L942.269 681.857 L941.71 681.857 L941.151 681.857 L940.592 681.857 L940.032 681.857 L939.473 681.857 L938.914 681.857 L938.355 681.857 L937.795 681.857 L937.236 681.857 L936.677 681.857 L936.118 681.857 L935.558 681.857 L934.999 681.857 L934.44 681.857 L933.881 681.857 L933.321 681.857 L932.762 681.857 L932.203 681.857 L931.644 681.857 L931.084 681.857 L930.525 681.857 L929.966 681.857 L929.406 681.857 L928.847 681.857 L928.288 681.857 L927.729 681.857 L927.169 681.857 L926.61 681.857 L926.051 681.857 L925.492 681.857 L924.932 681.857 L924.373 681.857 L923.814 681.857 L923.255 681.857 L922.695 681.857 L922.136 681.857 L921.577 681.857 L921.018 681.857 L920.458 681.857 L919.899 681.857 L919.34 681.857 L918.781 681.857 L918.221 681.857 L917.662 681.857 L917.103 681.857 L916.544 681.857 L915.984 681.857 L915.425 681.857 L914.866 681.857 L914.307 681.857 L913.747 681.857 L913.188 681.857 L912.629 681.857 L912.07 681.857 L911.51 681.857 L910.951 681.857 L910.392 681.857 L909.833 681.857 L909.273 681.857 L908.714 681.857 L908.155 681.857 L907.596 681.857 L907.036 681.857 L906.477 681.857 L905.918 681.857 L905.359 681.857 L904.799 681.857 L904.24 681.857 L903.681 681.857 L903.122 681.857 L902.562 681.857 L902.003 681.857 L901.444 681.857 L900.885 681.857 L900.325 681.857 L899.766 681.857 L899.207 681.857 L898.648 681.857 L898.088 681.857 L897.529 681.857 L896.97 681.857 L896.411 681.857 L895.851 681.857 L895.292 681.857 L894.733 681.857 L894.174 681.857 L893.614 681.857 L893.055 681.857 L892.496 681.857 L891.937 681.857 L891.377 681.857 L890.818 681.857 L890.259 681.857 L889.7 681.857 L889.14 681.857 L888.581 681.857 L888.022 681.857 L887.463 681.857 L886.903 681.857 L886.344 681.857 L885.785 681.857 L885.226 681.857 L884.666 681.857 L884.107 681.857 L883.548 681.857 L882.989 681.857 L882.429 681.857 L881.87 681.857 L881.311 681.857 L880.752 681.857 L880.192 681.857 L879.633 681.857 L879.074 681.857 L878.515 681.857 L877.955 681.857 L877.396 681.857 L876.837 681.857 L876.278 681.857 L875.718 681.857 L875.159 681.857 L874.6 681.857 L874.041 681.857 L873.481 681.857 L872.922 681.857 L872.363 681.857 L871.804 681.857 L871.244 681.857 L870.685 681.857 L870.126 681.857 L869.567 681.857 L869.007 681.857 L868.448 681.857 L867.889 681.857 L867.33 681.857 L866.77 681.857 L866.211 681.857 L865.652 681.857 L865.093 681.857 L864.533 681.857 L863.974 681.857 L863.415 681.857 L862.856 681.857 L862.296 681.857 L861.737 681.857 L861.178 681.857 L860.619 681.857 L860.059 681.857 L859.5 681.857 L858.941 681.857 L858.382 681.857 L857.822 681.857 L857.263 681.857 L856.704 681.857 L856.145 681.857 L855.585 681.857 L855.026 681.857 L854.467 681.857 L853.908 681.857 L853.348 681.857 L852.789 681.857 L852.23 681.857 L851.671 681.857 L851.111 681.857 L850.552 681.857 L849.993 681.857 L849.434 681.857 L848.874 681.857 L848.315 681.857 L847.756 681.857 L847.197 681.857 L846.637 681.857 L846.078 681.857 L845.519 681.857 L844.96 681.857 L844.4 681.857 L843.841 681.857 L843.282 681.857 L842.723 681.857 L842.163 681.857 L841.604 681.857 L841.045 681.857 L840.486 681.857 L839.926 681.857 L839.367 681.857 L838.808 681.857 L838.249 681.857 L837.689 681.857 L837.13 681.857 L836.571 681.857 L836.012 681.857 L835.452 681.857 L834.893 681.857 L834.334 681.857 L833.775 681.857 L833.215 681.857 L832.656 681.857 L832.097 681.857 L831.538 681.857 L830.978 681.857 L830.419 681.857 L829.86 681.857 L829.301 681.857 L828.741 681.857 L828.182 681.857 L827.623 681.857 L827.064 681.857 L826.504 681.857 L825.945 681.857 L825.386 681.857 L824.827 681.857 L824.267 681.857 L823.708 681.857 L823.149 681.857 L822.59 681.857 L822.03 681.857 L821.471 681.857 L820.912 681.857 L820.353 681.857 L819.793 681.857 L819.234 681.857 L818.675 681.857 L818.116 681.857 L817.556 681.857 L816.997 681.857 L816.438 681.857 L815.879 681.857 L815.319 681.857 L814.76 681.857 L814.201 681.857 L813.642 681.857 L813.082 681.857 L812.523 681.857 L811.964 681.857 L811.405 681.857 L810.845 681.857 L810.286 681.857 L809.727 681.857 L809.168 681.857 L808.608 681.857 L808.049 681.857 L807.49 681.857 L806.931 681.857 L806.371 681.857 L805.812 681.857 L805.253 681.857 L804.693 681.857 L804.134 681.857 L803.575 681.857 L803.016 681.857 L802.456 681.857 L801.897 681.857 L801.338 681.857 L800.779 681.857 L800.219 681.857 L799.66 681.857 L799.101 681.857 L798.542 681.857 L797.982 681.857 L797.423 681.857 L796.864 681.857 L796.305 681.857 L795.745 681.857 L795.186 681.857 L794.627 681.857 L794.068 681.857 L793.508 681.857 L792.949 681.857 L792.39 681.857 L791.831 681.857 L791.271 681.857 L790.712 681.857 L790.153 681.857 L789.594 681.857 L789.034 681.857 L788.475 681.857 L787.916 681.857 L787.357 681.857 L786.797 681.857 L786.238 681.857 L785.679 681.857 L785.12 681.857 L784.56 681.857 L784.001 681.857 L783.442 681.857 L782.883 681.857 L782.323 681.857 L781.764 681.857 L781.205 681.857 L780.646 681.857 L780.086 681.857 L779.527 681.857 L778.968 681.857 L778.409 681.857 L777.849 681.857 L777.29 681.857 L776.731 681.857 L776.172 681.857 L775.612 681.857 L775.053 681.857 L774.494 681.857 L773.935 681.857 L773.375 681.857 L772.816 681.857 L772.257 681.857 L771.698 681.857 L771.138 681.857 L770.579 681.857 L770.02 681.857 L769.461 681.857 L768.901 681.857 L768.342 681.857 L767.783 681.857 L767.224 681.857 L766.664 681.857 L766.105 681.857 L765.546 681.857 L764.987 681.857 L764.427 681.857 L763.868 681.857 L763.309 681.857 L762.75 681.857 L762.19 681.857 L761.631 681.857 L761.072 681.857 L760.513 681.857 L759.953 681.857 L759.394 681.857 L758.835 681.857 L758.276 681.857 L757.716 681.857 L757.157 681.857 L756.598 681.857 L756.039 681.857 L755.479 681.857 L754.92 681.857 L754.361 681.857 L753.802 681.857 L753.242 681.857 L752.683 681.857 L752.124 681.857 L751.565 681.857 L751.005 681.857 L750.446 681.857 L749.887 681.857 L749.328 681.857 L748.768 681.857 L748.209 681.857 L747.65 681.857 L747.091 681.857 L746.531 681.857 L745.972 681.857 L745.413 681.857 L744.854 681.857 L744.294 681.857 L743.735 681.857 L743.176 681.857 L742.617 681.857 L742.057 681.857 L741.498 681.857 L740.939 681.857 L740.38 681.857 L739.82 681.857 L739.261 681.857 L738.702 681.857 L738.143 681.857 L737.583 681.857 L737.024 681.857 L736.465 681.857 L735.906 681.857 L735.346 681.857 L734.787 681.857 L734.228 681.857 L733.669 681.857 L733.109 681.857 L732.55 681.857 L731.991 681.857 L731.432 681.857 L730.872 681.857 L730.313 681.857 L729.754 681.857 L729.195 681.857 L728.635 681.857 L728.076 681.857 L727.517 681.857 L726.958 681.857 L726.398 681.857 L725.839 681.857 L725.28 681.857 L724.721 681.857 L724.161 681.857 L723.602 681.857 L723.043 681.857 L722.484 681.857 L721.924 681.857 L721.365 681.857 L720.806 681.857 L720.247 681.857  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.102 720.806,687.102 721.365,687.102 721.924,687.102 722.484,687.102 723.043,687.102 723.602,687.102 724.161,687.102 724.721,687.102 725.28,687.102 725.839,687.102 726.398,687.102 726.958,687.102 727.517,687.102 728.076,687.102 728.635,687.102 729.195,687.102 729.754,687.102 730.313,687.102 730.872,687.102 731.432,687.102 731.991,687.102 732.55,687.102 733.109,687.102 733.669,687.102 734.228,687.102 734.787,687.102 735.346,687.102 735.906,687.102 736.465,687.102 737.024,687.102 737.583,687.102 738.143,687.102 738.702,687.102 739.261,687.102 739.82,687.102 740.38,687.102 740.939,687.102 741.498,687.102 742.057,687.102 742.617,687.102 743.176,687.102 743.735,687.102 744.294,687.102 744.854,687.102 745.413,687.102 745.972,687.102 746.531,687.102 747.091,687.102 747.65,687.102 748.209,687.102 748.768,687.102 749.328,687.102 749.887,687.102 750.446,687.102 751.005,687.102 751.565,687.102 752.124,687.102 752.683,687.102 753.242,687.102 753.802,687.102 754.361,687.102 754.92,687.102 755.479,687.102 756.039,687.102 756.598,687.102 757.157,687.102 757.716,687.102 758.276,687.102 758.835,687.102 759.394,687.102 759.953,687.102 760.513,687.102 761.072,687.102 761.631,687.102 762.19,687.102 762.75,687.102 763.309,687.102 763.868,687.102 764.427,687.102 764.987,687.102 765.546,687.102 766.105,687.102 766.664,687.102 767.224,687.102 767.783,687.102 768.342,687.102 768.901,687.102 769.461,687.102 770.02,687.102 770.579,687.102 771.138,687.102 771.698,687.102 772.257,687.102 772.816,687.102 773.375,687.102 773.935,687.102 774.494,687.102 775.053,687.102 775.612,687.102 776.172,687.102 776.731,687.102 777.29,687.102 777.849,687.102 778.409,687.102 778.968,687.102 779.527,687.102 780.086,687.102 780.646,687.102 781.205,687.102 781.764,687.102 782.323,687.102 782.883,687.102 783.442,687.102 784.001,687.102 784.56,687.102 785.12,687.102 785.679,687.102 786.238,687.102 786.797,687.102 787.357,687.102 787.916,687.102 788.475,687.102 789.034,687.102 789.594,687.102 790.153,687.102 790.712,687.102 791.271,687.102 791.831,687.102 792.39,687.102 792.949,687.102 793.508,687.102 794.068,687.102 794.627,687.102 795.186,687.102 795.745,687.102 796.305,687.102 796.864,687.102 797.423,687.102 797.982,687.102 798.542,687.102 799.101,687.102 799.66,687.102 800.219,687.102 800.779,687.102 801.338,687.102 801.897,687.102 802.456,687.102 803.016,687.102 803.575,687.102 804.134,687.102 804.693,687.102 805.253,687.102 805.812,687.102 806.371,687.102 806.931,687.102 807.49,687.102 808.049,687.102 808.608,687.102 809.168,687.102 809.727,687.102 810.286,687.102 810.845,687.102 811.405,687.102 811.964,687.102 812.523,687.102 813.082,687.102 813.642,687.102 814.201,687.102 814.76,687.102 815.319,687.102 815.879,687.102 816.438,687.102 816.997,687.102 817.556,687.102 818.116,687.102 818.675,687.102 819.234,687.102 819.793,687.102 820.353,687.102 820.912,687.102 821.471,687.102 822.03,687.102 822.59,687.102 823.149,687.102 823.708,687.102 824.267,687.102 824.827,687.102 825.386,687.102 825.945,687.102 826.504,687.102 827.064,687.102 827.623,687.102 828.182,687.102 828.741,687.102 829.301,687.102 829.86,687.102 830.419,687.102 830.978,687.102 831.538,687.102 832.097,687.102 832.656,687.102 833.215,687.102 833.775,687.102 834.334,687.102 834.893,687.102 835.452,687.102 836.012,687.102 836.571,687.102 837.13,687.102 837.689,687.102 838.249,687.102 838.808,687.102 839.367,687.102 839.926,687.102 840.486,687.102 841.045,687.102 841.604,687.102 842.163,687.102 842.723,687.102 843.282,687.102 843.841,687.102 844.4,687.102 844.96,687.102 845.519,687.102 846.078,687.102 846.637,687.102 847.197,687.102 847.756,687.102 848.315,687.102 848.874,687.102 849.434,687.102 849.993,687.102 850.552,687.102 851.111,687.102 851.671,687.102 852.23,687.102 852.789,687.102 853.348,687.102 853.908,687.102 854.467,687.102 855.026,687.102 855.585,687.102 856.145,687.102 856.704,687.102 857.263,687.102 857.822,687.102 858.382,687.102 858.941,687.102 859.5,687.102 860.059,687.102 860.619,687.102 861.178,687.102 861.737,687.102 862.296,687.102 862.856,687.102 863.415,687.102 863.974,687.102 864.533,687.102 865.093,687.102 865.652,687.102 866.211,687.102 866.77,687.102 867.33,687.102 867.889,687.102 868.448,687.102 869.007,687.102 869.567,687.102 870.126,687.102 870.685,687.102 871.244,687.102 871.804,687.102 872.363,687.102 872.922,687.102 873.481,687.102 874.041,687.102 874.6,687.102 875.159,687.102 875.718,687.102 876.278,687.102 876.837,687.102 877.396,687.102 877.955,687.102 878.515,687.102 879.074,687.102 879.633,687.102 880.192,687.102 880.752,687.102 881.311,687.102 881.87,687.102 882.429,687.102 882.989,687.102 883.548,687.102 884.107,687.102 884.666,687.102 885.226,687.102 885.785,687.102 886.344,687.102 886.903,687.102 887.463,687.102 888.022,687.102 888.581,687.102 889.14,687.102 889.7,687.102 890.259,687.102 890.818,687.102 891.377,687.102 891.937,687.102 892.496,687.102 893.055,687.102 893.614,687.102 894.174,687.102 894.733,687.102 895.292,687.102 895.851,687.102 896.411,687.102 896.97,687.102 897.529,687.102 898.088,687.102 898.648,687.102 899.207,687.102 899.766,687.102 900.325,687.102 900.885,687.102 901.444,687.102 902.003,687.102 902.562,687.102 903.122,687.102 903.681,687.102 904.24,687.102 904.799,687.102 905.359,687.102 905.918,687.102 906.477,687.102 907.036,687.102 907.596,687.102 908.155,687.102 908.714,687.102 909.273,687.102 909.833,687.102 910.392,687.102 910.951,687.102 911.51,687.102 912.07,687.102 912.629,687.102 913.188,687.102 913.747,687.102 914.307,687.102 914.866,687.102 915.425,687.102 915.984,687.102 916.544,687.102 917.103,687.102 917.662,687.102 918.221,687.102 918.781,687.102 919.34,687.102 919.899,687.102 920.458,687.102 921.018,687.102 921.577,687.102 922.136,687.102 922.695,687.102 923.255,687.102 923.814,687.102 924.373,687.102 924.932,687.102 925.492,687.102 926.051,687.102 926.61,687.102 927.169,687.102 927.729,687.102 928.288,687.102 928.847,687.102 929.406,687.102 929.966,687.102 930.525,687.102 931.084,687.102 931.644,687.102 932.203,687.102 932.762,687.102 933.321,687.102 933.881,687.102 934.44,687.102 934.999,687.102 935.558,687.102 936.118,687.102 936.677,687.102 937.236,687.102 937.795,687.102 938.355,687.102 938.914,687.102 939.473,687.102 940.032,687.102 940.592,687.102 941.151,687.102 941.71,687.102 942.269,687.102 942.829,687.102 943.388,687.102 943.947,687.102 944.506,687.102 945.066,687.102 945.625,687.102 946.184,687.102 946.743,687.102 947.303,687.102 947.862,687.102 948.421,687.102 948.98,687.102 949.54,687.102 950.099,687.102 950.658,687.102 951.217,687.102 951.777,687.102 952.336,687.102 952.895,687.102 953.454,687.102 954.014,687.102 954.573,687.102 955.132,687.102 955.691,687.102 956.251,687.102 956.81,687.102 957.369,687.102 957.928,687.102 958.488,687.102 959.047,687.102 959.606,687.102 960.165,687.102 960.725,687.102 961.284,687.102 961.843,687.102 962.402,687.102 962.962,687.102 963.521,687.102 964.08,687.102 964.639,687.102 965.199,687.102 965.758,687.102 966.317,687.102 966.876,687.102 967.436,687.102 967.995,687.102 968.554,687.102 969.113,687.102 969.673,687.102 970.232,687.102 970.791,687.102 971.35,687.102 971.91,687.102 972.469,687.102 973.028,687.102 973.587,687.102 974.147,687.102 974.706,687.102 975.265,687.102 975.824,687.102 976.384,687.102 976.943,687.102 977.502,687.102 978.061,687.102 978.621,687.102 979.18,687.102 979.739,687.102 980.298,687.102 980.858,687.102 981.417,687.102 981.976,687.102 982.535,687.102 983.095,687.102 983.654,687.102 984.213,687.102 984.772,687.102 985.332,687.102 985.891,687.102 986.45,687.102 987.009,687.102 987.569,687.102 988.128,687.102 988.687,687.102 989.246,687.102 989.806,687.102 990.365,687.102 990.924,687.102 991.483,687.102 992.043,687.102 992.602,687.102 993.161,687.102 993.72,687.102 994.28,687.102 994.839,687.102 995.398,687.102 995.957,687.102 996.517,687.102 997.076,687.102 997.635,687.102 998.194,687.102 998.754,687.102 999.313,687.102 999.872,687.102 1000.43,687.102 1000.99,687.102 1001.55,687.102 1002.11,687.102 1002.67,687.102 1003.23,687.102 1003.79,687.102 1004.35,687.102 1004.91,687.102 1005.46,687.102 1006.02,687.102 1006.58,687.102 1007.14,687.102 1007.7,687.102 1008.26,687.102 1008.82,687.102 1009.38,687.102 1009.94,687.102 1010.5,687.102 1011.06,687.102 1011.62,687.102 1012.18,687.102 1012.73,687.102 1013.29,687.102 1013.85,687.102 1014.41,687.102 1014.97,687.102 1015.53,687.102 1016.09,687.102 1016.65,687.102 1017.21,687.102 1017.77,687.102 1018.33,687.102 1018.89,687.102 1019.45,687.102 1020.01,687.102 1020.56,687.102 1021.12,687.102 1021.68,687.102 1022.24,687.102 1022.8,687.102 1023.36,687.102 1023.92,687.102 1024.48,687.102 1025.04,687.102 1025.6,687.102 1026.16,687.102 1026.72,687.102 1027.28,687.102 1027.83,687.102 1028.39,687.102 1028.95,687.102 1029.51,687.102 1030.07,687.102 1030.63,687.102 1031.19,687.102 1031.75,687.102 1032.31,687.102 1032.87,687.102 1033.43,687.102 1033.99,687.102 1034.55,687.102 1035.1,687.102 1035.66,687.102 1036.22,687.102 1036.78,687.102 1037.34,687.102 1037.9,687.102 1038.46,687.102 1039.02,687.102 1039.58,687.102 1040.14,687.102 1040.7,687.102 1041.26,687.102 1041.82,687.102 1042.38,687.102 1042.93,687.102 1043.49,687.102 1044.05,687.102 1044.61,687.102 1045.17,687.102 1045.73,687.102 1046.29,687.102 1046.85,687.102 1047.41,687.102 1047.97,687.102 1048.53,687.102 1049.09,687.102 1049.65,687.102 1050.2,687.102 1050.76,687.102 1051.32,687.102 1051.88,687.102 1052.44,687.102 1053,687.102 1053.56,687.102 1054.12,687.102 1054.68,687.102 1055.24,687.102 1055.8,687.102 1056.36,687.102 1056.92,687.102 1057.48,687.102 1058.03,687.102 1058.59,687.102 1059.15,687.102 1059.71,687.102 1060.27,687.102 1060.83,687.102 1061.39,687.102 1061.95,687.102 1062.51,687.102 1063.07,687.102 1063.63,687.102 1064.19,687.102 1064.75,687.102 1065.3,687.102 1065.86,687.102 1066.42,687.102 1066.98,687.102 1067.54,687.102 1068.1,687.102 1068.66,687.102 1069.22,687.102 1069.78,687.102 1070.34,687.102 1070.9,687.102 1071.46,687.102 1072.02,687.102 1072.57,687.102 1073.13,687.102 1073.69,687.102 1074.25,687.102 1074.81,687.102 1075.37,687.102 1075.93,687.102 1076.49,687.102 1077.05,687.102 1077.61,687.102 1078.17,687.102 1078.73,687.102 1079.29,687.102 1079.85,687.102 1080.4,687.102 1080.96,687.102 1081.52,687.102 1082.08,687.102 1082.64,687.102 1083.2,687.102 1083.76,687.102 1084.32,687.102 1084.88,687.102 1085.44,687.102 1086,687.102 1086.56,687.102 1087.12,687.102 1087.67,687.102 1088.23,687.102 1088.79,687.102 1089.35,687.102 1089.91,687.102 1090.47,687.102 1091.03,687.102 1091.59,687.102 1092.15,687.102 1092.71,687.102 1093.27,687.102 1093.83,687.102 1094.39,687.102 1094.94,687.102 1095.5,687.102 1096.06,687.102 1096.62,687.102 1097.18,687.102 1097.74,687.102 1098.3,687.102 1098.86,687.102 1099.42,687.102 1099.98,687.102 1100.54,687.102 1101.1,687.102 1101.66,687.102 1102.22,687.102 1102.77,687.102 1103.33,687.102 1103.89,687.102 1104.45,687.102 1105.01,687.102 1105.57,687.102 1106.13,687.102 1106.69,687.102 1107.25,687.102 1107.81,687.102 1108.37,687.102 1108.93,687.102 1109.49,687.102 1110.04,687.102 1110.6,687.102 1111.16,687.102 1111.72,687.102 1112.28,687.102 1112.84,687.102 1113.4,687.102 1113.96,687.102 1114.52,687.102 1115.08,687.102 1115.64,687.102 1116.2,687.102 1116.76,687.102 1117.31,687.102 1117.87,687.102 1118.43,687.102 1118.99,687.102 1119.55,687.102 1120.11,687.102 1120.67,687.102 1121.23,687.102 1121.79,687.102 1122.35,687.102 1122.91,687.102 1123.47,687.102 1124.03,687.102 1124.59,687.102 1125.14,687.102 1125.7,687.102 1126.26,687.102 1126.82,687.102 1127.38,687.102 1127.94,687.102 1128.5,687.102 1129.06,687.102 1129.62,687.102 1130.18,687.102 1130.74,687.102 1131.3,687.102 1131.86,687.102 1132.41,687.102 1132.97,687.102 1133.53,687.102 1134.09,687.102 1134.65,687.102 1135.21,687.102 1135.77,687.102 1136.33,687.102 1136.89,687.102 1137.45,687.102 1138.01,687.102 1138.57,687.102 1139.13,687.102 1139.68,687.102 1140.24,687.102 1140.8,687.102 1141.36,687.102 1141.92,687.102 1142.48,687.102 1143.04,687.102 1143.6,687.102 1144.16,687.102 1144.72,687.102 1145.28,687.102 1145.84,687.102 1146.4,687.102 1146.96,687.102 1147.51,687.102 1148.07,687.102 1148.63,687.102 1149.19,687.102 1149.75,687.102 1150.31,687.102 1150.87,687.102 1151.43,687.102 1151.99,687.102 1152.55,687.102 1153.11,687.102 1153.67,687.102 1154.23,687.102 1154.78,687.102 1155.34,687.102 1155.9,687.102 1156.46,687.102 1157.02,687.102 1157.58,687.102 1158.14,687.102 1158.7,687.102 1159.26,687.102 1159.82,687.102 1160.38,687.102 1160.94,687.102 1161.5,687.102 1162.05,687.102 1162.61,687.102 1163.17,687.102 1163.73,687.102 1164.29,687.102 1164.85,687.102 1165.41,687.102 1165.97,687.102 1166.53,687.102 1167.09,687.102 1167.65,687.102 1168.21,687.102 1168.77,687.102 1169.33,687.102 1169.88,687.102 1170.44,687.102 1171,687.102 1171.56,687.102 1172.12,687.102 1172.68,687.102 1173.24,687.102 1173.8,687.102 1174.36,687.102 1174.92,687.102 1175.48,687.102 1176.04,687.102 1176.6,687.102 1177.15,687.102 1177.71,687.102 1178.27,687.102 1178.83,687.102 1179.39,687.102 1179.95,687.102 1180.51,687.102 1181.07,687.102 1181.63,687.102 1182.19,687.102 1182.75,687.102 1183.31,687.102 1183.87,687.102 1184.43,687.102 1184.98,687.102 1185.54,687.102 1186.1,687.102 1186.66,687.102 1187.22,687.102 1187.78,687.102 1188.34,687.102 1188.9,687.102 1189.46,687.102 1190.02,687.102 1190.58,687.102 1191.14,687.102 1191.7,687.102 1192.25,687.102 1192.81,687.102 1193.37,687.102 1193.93,687.102 1194.49,687.102 1195.05,687.102 1195.61,687.102 1196.17,687.102 1196.73,687.102 1197.29,687.102 1197.85,687.102 1198.41,687.102 1198.97,687.102 1199.52,687.102 1200.08,687.102 1200.64,687.102 1201.2,687.102 1201.76,687.102 1202.32,687.102 1202.88,687.102 1203.44,687.102 1204,687.102 1204.56,687.102 1205.12,687.102 1205.68,687.102 1206.24,687.102 1206.8,687.102 1207.35,687.102 1207.91,687.102 1208.47,687.102 1209.03,687.102 1209.59,687.102 1210.15,687.102 1210.71,687.102 1211.27,687.102 1211.83,687.102 1212.39,687.102 1212.95,687.102 1213.51,687.102 1214.07,687.102 1214.62,687.102 1215.18,687.102 1215.74,687.102 1216.3,687.102 1216.86,687.102 1217.42,687.102 1217.98,687.102 1218.54,687.102 1219.1,687.102 1219.66,687.102 1220.22,687.102 1220.78,687.102 1221.34,687.102 1221.89,687.102 1222.45,687.102 1223.01,687.102 1223.57,687.102 1224.13,687.102 1224.69,687.102 1225.25,687.102 1225.81,687.102 1226.37,687.102 1226.93,687.102 1227.49,687.102 1228.05,687.102 1228.61,687.102 1229.17,687.102 1229.72,687.102 1230.28,687.102 1230.84,687.102 1231.4,687.102 1231.96,687.102 1232.52,687.102 1233.08,687.102 1233.64,687.102 1234.2,687.102 1234.76,687.102 1235.32,687.102 1235.88,687.102 1236.44,687.102 1236.99,687.102 1237.55,687.102 1238.11,687.102 1238.67,687.102 1239.23,687.102 1239.79,687.102 1240.35,687.102 1240.91,687.102 1241.47,687.102 1242.03,687.102 1242.59,687.102 1243.15,687.102 1243.71,687.102 1244.26,687.102 1244.82,687.102 1245.38,687.102 1245.94,687.102 1246.5,687.102 1247.06,687.102 1247.62,687.102 1248.18,687.102 1248.74,687.102 1249.3,687.102 1249.86,687.102 1250.42,687.102 1250.98,687.102 1251.54,687.102 1252.09,687.102 1252.65,687.102 1253.21,687.102 1253.77,687.102 1254.33,687.102 1254.89,687.102 1255.45,687.102 1256.01,687.102 1256.57,687.102 1257.13,687.102 1257.69,687.102 1258.25,687.102 1258.81,687.102 1259.36,687.102 1259.92,687.102 1260.48,687.102 1261.04,687.102 1261.6,687.102 1262.16,687.102 1262.72,687.102 1263.28,687.102 1263.84,687.102 1264.4,687.102 1264.96,687.102 1265.52,687.102 1266.08,687.102 1266.63,687.102 1267.19,687.102 1267.75,687.102 1268.31,687.102 1268.87,687.102 1269.43,687.102 1269.99,687.102 1270.55,687.102 1271.11,687.102 1271.67,687.102 1272.23,687.102 1272.79,687.102 1273.35,687.102 1273.91,687.102 1274.46,687.102 1275.02,687.102 1275.58,687.102 1276.14,687.102 1276.7,687.102 1277.26,687.102 1277.82,687.102 1278.38,687.102 1278.94,687.102 1279.5,687.102 1280.06,687.102 1280.62,687.102 1281.18,687.102 1281.73,687.102 1282.29,687.102 1282.85,687.102 1283.41,687.102 1283.97,687.102 1284.53,687.102 1285.09,687.102 1285.65,687.102 1286.21,687.102 1286.77,687.102 1287.33,687.102 1287.89,687.102 1288.45,687.102 1289,687.102 1289.56,687.102 1290.12,687.102 1290.68,687.102 1291.24,687.102 1291.8,687.102 1292.36,687.102 1292.92,687.102 1293.48,687.102 1294.04,687.102 1294.6,687.102 1295.16,687.102 1295.72,687.102 1296.28,687.102 1296.83,687.102 1297.39,687.102 1297.95,687.102 1298.51,687.102 1299.07,687.102 1299.63,687.102 1300.19,687.102 1300.75,687.102 1301.31,687.102 1301.87,687.102 1302.43,687.102 1302.99,687.102 1303.55,687.102 1304.1,687.102 1304.66,687.102 1305.22,687.102 1305.78,687.102 1306.34,687.102 1306.9,687.102 1307.46,687.102 1308.02,687.102 1308.58,687.102 1309.14,687.102 1309.7,687.102 1310.26,687.102 1310.82,687.102 1311.38,687.102 1311.93,687.102 1312.49,687.102 1313.05,687.102 1313.61,687.102 1314.17,687.102 1314.73,687.102 1315.29,687.102 1315.85,687.102 1316.41,687.102 1316.97,687.102 1317.53,687.102 1318.09,687.102 1318.65,687.102 1319.2,687.102 1319.76,687.102 1320.32,687.102 1320.88,687.102 1321.44,687.102 1322,687.102 1322.56,687.102 1323.12,687.102 1323.68,687.102 1324.24,687.102 1324.8,687.102 1325.36,687.102 1325.92,687.102 1326.47,687.102 1327.03,687.102 1327.59,687.102 1328.15,687.102 1328.71,687.102 1329.27,687.102 1329.83,687.102 1330.39,687.102 1330.95,687.102 1331.51,687.102 1332.07,687.102 1332.63,687.102 1333.19,687.102 1333.75,687.102 1334.3,687.102 1334.86,687.102 1335.42,687.102 1335.98,687.102 1336.54,687.102 1337.1,687.102 1337.66,687.102 1338.22,687.102 1338.78,687.102 1339.34,687.102 1339.9,687.102 1340.46,687.102 1341.02,687.102 1341.57,687.102 1342.13,687.102 1342.69,687.102 1343.25,687.102 1343.81,687.102 1344.37,687.102 1344.93,687.102 1345.49,687.102 1346.05,687.102 1346.61,687.102 1347.17,687.102 1347.73,687.102 1348.29,687.102 1348.84,687.102 1349.4,687.102 1349.96,687.102 1350.52,687.102 1351.08,687.102 1351.64,687.102 1352.2,687.102 1352.76,687.102 1353.32,687.102 1353.88,687.102 1354.44,687.102 1355,687.102 1355.56,687.102 1356.12,687.102 1356.67,687.102 1357.23,687.102 1357.79,687.102 1358.35,687.102 1358.91,687.102 1359.47,687.102 1360.03,687.102 1360.59,687.102 1361.15,687.102 1361.71,687.102 1362.27,687.102 1362.83,687.102 1363.39,687.102 1363.94,687.102 1364.5,687.102 1365.06,687.102 1365.62,687.102 1366.18,687.102 1366.74,687.102 1367.3,687.102 1367.86,687.102 1368.42,687.102 1368.98,687.102 1369.54,687.102 1370.1,687.102 1370.66,687.102 1371.21,687.102 1371.77,687.102 1372.33,687.102 1372.89,687.102 1373.45,687.102 1374.01,687.102 1374.57,687.102 1375.13,687.102 1375.69,687.102 1376.25,687.102 1376.81,687.102 1377.37,687.102 1377.93,687.102 1378.49,687.102 1379.04,687.102 1379.6,687.102 1380.16,687.102 1380.72,687.102 1381.28,687.102 1381.84,687.102 1382.4,687.102 1382.96,687.102 1383.52,687.102 1384.08,687.102 1384.64,687.102 1385.2,687.102 1385.76,687.102 1386.31,687.102 1386.87,687.102 1387.43,687.102 1387.99,687.102 1388.55,687.102 1389.11,687.102 1389.67,687.102 1390.23,687.102 1390.79,687.102 1391.35,687.102 1391.91,687.102 1392.47,687.102 1393.03,687.102 1393.58,687.102 1394.14,687.102 1394.7,687.102 1395.26,687.102 1395.82,687.102 1396.38,687.102 1396.94,687.102 1397.5,687.102 1398.06,687.102 1398.62,687.102 1399.18,687.102 1399.74,687.102 1400.3,687.102 1400.86,687.102 1401.41,687.102 1401.97,687.102 1402.53,687.102 1403.09,687.102 1403.65,687.102 1404.21,687.102 1404.77,687.102 1405.33,687.102 1405.89,687.102 1406.45,687.102 1407.01,687.102 1407.57,687.102 1408.13,687.102 1408.68,687.102 1409.24,687.102 1409.8,687.102 1410.36,687.102 1410.92,687.102 1411.48,687.102 1412.04,687.102 1412.6,687.102 1413.16,687.102 1413.72,687.102 1414.28,687.102 1414.84,687.102 1415.4,687.102 1415.95,687.102 1416.51,687.102 1417.07,687.102 1417.63,687.102 1418.19,687.102 1418.75,687.102 1419.31,687.102 1419.87,687.102 1420.43,687.102 1420.99,687.102 1421.55,687.102 1422.11,687.102 1422.67,687.102 1423.23,687.102 1423.78,687.102 1424.34,687.102 1424.9,687.102 1425.46,687.102 1426.02,687.102 1426.58,687.102 1427.14,687.102 1427.7,687.102 1428.26,687.102 1428.82,687.102 1429.38,687.102 1429.94,687.102 1430.5,687.102 1431.05,687.102 1431.61,687.102 1432.17,687.102 1432.73,687.102 1433.29,687.102 1433.85,687.102 1434.41,687.102 1434.97,687.102 1435.53,687.102 1436.09,687.102 1436.65,687.102 1437.21,687.102 1437.77,687.102 1438.33,687.102 1438.88,687.102 1439.44,687.102 1440,687.102 1440.56,687.102 1441.12,687.102 1441.68,687.102 1442.24,687.102 1442.8,687.102 1443.36,687.102 1443.92,687.102 1444.48,687.102 1445.04,687.102 1445.6,687.102 1446.15,687.102 1446.71,687.102 1447.27,687.102 1447.83,687.102 1448.39,687.102 1448.95,687.102 1449.51,687.102 1450.07,687.102 1450.63,687.102 1451.19,687.102 1451.75,687.102 1452.31,687.102 1452.87,687.102 1453.42,687.102 1453.98,687.102 1454.54,687.102 1455.1,687.102 1455.66,687.102 1456.22,687.102 1456.78,687.102 1457.34,687.102 1457.9,687.102 1458.46,687.102 1459.02,687.102 1459.58,687.102 1460.14,687.102 1460.7,687.102 1461.25,687.102 1461.81,687.102 1462.37,687.102 1462.93,687.102 1463.49,687.102 1464.05,687.102 1464.61,687.102 1465.17,687.102 1465.73,687.102 1466.29,687.102 1466.85,687.102 1467.41,687.102 1467.97,687.102 1468.52,687.102 1469.08,687.102 1469.64,687.102 1470.2,687.102 1470.76,687.102 1471.32,687.102 1471.88,687.102 1472.44,687.102 1473,687.102 1473.56,687.102 1474.12,687.102 1474.68,687.102 1475.24,687.102 1475.79,687.102 1476.35,687.102 1476.91,687.102 1477.47,687.102 1478.03,687.102 1478.59,687.102 1479.15,687.102 1479.71,687.102 1480.27,687.102 1480.83,687.102 1481.39,687.102 1481.95,687.102 1482.51,687.102 1483.07,687.102 1483.62,687.102 1484.18,687.102 1484.74,687.102 1485.3,687.102 1485.86,687.102 1486.42,687.102 1486.98,687.102 1487.54,687.102 1488.1,687.102 1488.66,687.102 1489.22,687.102 1489.78,687.102 1490.34,687.102 1490.89,687.102 1491.45,687.102 1492.01,687.102 1492.57,687.102 1493.13,687.102 1493.69,687.102 1494.25,687.102 1494.81,687.102 1495.37,687.102 1495.93,687.102 1496.49,687.102 1497.05,687.102 1497.61,687.102 1498.16,687.102 1498.72,687.102 1499.28,687.102 1499.84,687.102 1500.4,687.102 1500.96,687.102 1501.52,687.102 1502.08,687.102 1502.64,687.102 1503.2,687.102 1503.76,687.102 1504.32,687.102 1504.88,687.102 1505.44,687.102 1505.99,687.102 1506.55,687.102 1507.11,687.102 1507.67,687.102 1508.23,687.102 1508.79,687.102 1509.35,687.102 1509.91,687.102 1510.47,687.102 1511.03,687.102 1511.59,687.102 1512.15,687.102 1512.71,687.102 1513.26,687.102 1513.82,687.102 1514.38,687.102 1514.94,687.102 1515.5,687.102 1516.06,687.102 1516.62,687.102 1517.18,687.102 1517.74,687.102 1518.3,687.102 1518.86,687.102 1519.42,687.102 1519.98,687.102 1520.53,687.102 1521.09,687.102 1521.65,687.102 1522.21,687.102 1522.77,687.102 1523.33,687.102 1523.89,687.102 1524.45,687.102 1525.01,687.102 1525.57,687.102 1526.13,687.102 1526.69,687.102 1527.25,687.102 1527.81,687.102 1528.36,687.102 1528.92,687.102 1529.48,687.102 1530.04,687.102 1530.6,687.102 1531.16,687.102 1531.72,687.102 1532.28,687.102 1532.84,687.102 1533.4,687.102 1533.96,687.102 1534.52,687.102 1535.08,687.102 1535.63,687.102 1536.19,687.102 1536.75,687.102 1537.31,687.102 1537.87,687.102 1538.43,687.102 1538.99,687.102 1539.55,687.102 1540.11,687.102 1540.67,687.102 1541.23,687.102 1541.79,687.102 1542.35,687.102 1542.9,687.102 1543.46,687.102 1544.02,687.102 1544.58,687.102 1545.14,687.102 1545.7,687.102 1546.26,687.102 1546.82,687.102 1547.38,687.102 1547.94,687.102 1548.5,687.102 1549.06,687.102 1549.62,687.102 1550.18,687.102 1550.73,687.102 1551.29,687.102 1551.85,687.102 1552.41,687.102 1552.97,687.102 1553.53,687.102 1554.09,687.102 1554.65,687.102 1555.21,687.102 1555.77,687.102 1556.33,687.102 1556.89,687.102 1557.45,687.102 1558,687.102 1558.56,687.102 1559.12,687.102 1559.68,687.102 1560.24,687.102 1560.8,687.102 1561.36,687.102 1561.92,687.102 1562.48,687.102 1563.04,687.102 1563.6,687.102 1564.16,687.102 1564.72,687.102 1565.28,687.102 1565.83,687.102 1566.39,687.102 1566.95,687.102 1567.51,687.102 1568.07,687.102 1568.63,687.102 1569.19,687.102 1569.75,687.102 1570.31,687.102 1570.87,687.102 1571.43,687.102 1571.99,687.102 1572.55,687.102 1573.1,687.102 1573.66,687.102 1574.22,687.102 1574.78,687.102 1575.34,687.102 1575.9,687.102 1576.46,687.102 1577.02,687.102 1577.58,687.102 1578.14,687.102 1578.7,687.102 1579.26,687.102 1579.82,687.102 1580.37,687.102 1580.93,687.102 1581.49,687.102 1582.05,687.102 1582.61,687.102 1583.17,687.102 1583.73,687.102 1584.29,687.102 1584.85,687.102 1585.41,687.102 1585.97,687.102 1586.53,687.102 1587.09,687.102 1587.65,687.102 1588.2,687.102 1588.76,687.102 1589.32,687.102 1589.88,687.102 1590.44,687.102 1591,687.102 1591.56,687.102 1592.12,687.102 1592.68,687.102 1593.24,687.102 1593.8,687.102 1594.36,687.102 1594.92,687.102 1595.47,687.102 1596.03,687.102 1596.59,687.102 1597.15,687.102 1597.71,687.102 1598.27,687.102 1598.83,687.102 1599.39,687.102 1599.95,687.102 1600.51,687.102 1601.07,687.102 1601.63,687.102 1602.19,687.102 1602.74,687.102 1603.3,687.102 1603.86,687.102 1604.42,687.102 1604.98,687.102 1605.54,687.102 1606.1,687.102 1606.66,687.102 1607.22,687.102 1607.78,687.102 1608.34,687.102 1608.9,687.102 1609.46,687.102 1610.02,687.102 1610.57,687.102 1611.13,687.102 1611.69,687.102 1612.25,687.102 1612.81,687.102 1613.37,687.102 1613.93,687.102 1614.49,687.102 1615.05,687.102 1615.61,687.102 1616.17,687.102 1616.73,687.102 1617.29,687.102 1617.84,687.102 1618.4,687.102 1618.96,687.102 1619.52,687.102 1620.08,687.102 1620.64,687.102 1621.2,687.102 1621.76,687.102 1622.32,687.102 1622.88,687.102 1623.44,687.102 1624,687.102 1624.56,687.102 1625.11,687.102 1625.67,687.102 1626.23,687.102 1626.79,687.102 1627.35,687.102 1627.91,687.102 1628.47,687.102 1629.03,687.102 1629.59,687.102 1630.15,687.102 1630.71,687.102 1631.27,687.102 1631.83,687.102 1632.39,687.102 1632.94,687.102 1633.5,687.102 1634.06,687.102 1634.62,687.102 1635.18,687.102 1635.74,687.102 1636.3,687.102 1636.86,687.102 1637.42,687.102 1637.98,687.102 1638.54,687.102 1639.1,687.102 1639.66,687.102 1640.21,687.102 1640.77,687.102 1641.33,687.102 1641.89,687.102 1642.45,687.102 1643.01,687.102 1643.57,687.102 1644.13,687.102 1644.69,687.102 1645.25,687.102 1645.81,687.102 1646.37,687.102 1646.93,687.102 1647.48,687.102 1648.04,687.102 1648.6,687.102 1649.16,687.102 1649.72,687.102 1650.28,687.102 1650.84,687.102 1651.4,687.102 1651.96,687.102 1652.52,687.102 1653.08,687.102 1653.64,687.102 1654.2,687.102 1654.76,687.102 1655.31,687.102 1655.87,687.102 1656.43,687.102 1656.99,687.102 1657.55,687.102 1658.11,687.102 1658.67,687.102 1659.23,687.102 1659.79,687.102 1660.35,687.102 1660.91,687.102 1661.47,687.102 1662.03,687.102 1662.58,687.102 1663.14,687.102 1663.7,687.102 1664.26,687.102 1664.82,687.102 1665.38,687.102 1665.94,687.102 1666.5,687.102 1667.06,687.102 1667.62,687.102 1668.18,687.102 1668.74,687.102 1669.3,687.102 1669.85,687.102 1670.41,687.102 1670.97,687.102 1671.53,687.102 1672.09,687.102 1672.65,687.102 1673.21,687.102 1673.77,687.102 1674.33,687.102 1674.89,687.102 1675.45,687.102 1676.01,687.102 1676.57,687.102 1677.13,687.102 1677.68,687.102 1678.24,687.102 1678.8,687.102 1679.36,687.102 1679.92,687.102 1680.48,687.102 1681.04,687.102 1681.6,687.102 1682.16,687.102 1682.72,687.102 1683.28,687.102 1683.84,687.102 1684.4,687.102 1684.95,687.102 1685.51,687.102 1686.07,687.102 1686.63,687.102 1687.19,687.102 1687.75,687.102 1688.31,687.102 1688.87,687.102 1689.43,687.102 1689.99,687.102 1690.55,687.102 1691.11,687.102 1691.67,687.102 1692.23,687.102 1692.78,687.102 1693.34,687.102 1693.9,687.102 1694.46,687.102 1695.02,687.102 1695.58,687.102 1696.14,687.102 1696.7,687.102 1697.26,687.102 1697.82,687.102 1698.38,687.102 1698.94,687.102 1699.5,687.102 1700.05,687.102 1700.61,687.102 1701.17,687.102 1701.73,687.102 1702.29,687.102 1702.85,687.102 1703.41,687.102 1703.97,687.102 1704.53,687.102 1705.09,687.102 1705.65,687.102 1706.21,687.102 1706.77,687.102 1707.32,687.102 1707.88,687.102 1708.44,687.102 1709,687.102 1709.56,687.102 1710.12,687.102 1710.68,687.102 1711.24,687.102 1711.8,687.102 1712.36,687.102 1712.92,687.102 1713.48,687.102 1714.04,687.102 1714.6,687.102 1715.15,687.102 1715.71,687.102 1716.27,687.102 1716.83,687.102 1717.39,687.102 1717.95,687.102 1718.51,687.102 1719.07,687.102 1719.63,687.102 1720.19,687.102 1720.75,687.102 1721.31,687.102 1721.87,687.102 1722.42,687.102 1722.98,687.102 1723.54,687.102 1724.1,687.102 1724.66,687.102 1725.22,687.102 1725.78,687.102 1726.34,687.102 1726.9,687.102 1727.46,687.102 1728.02,687.102 1728.58,687.102 1729.14,687.102 1729.69,687.102 1730.25,687.102 1730.81,687.102 1731.37,687.102 1731.93,687.102 1732.49,687.102 1733.05,687.102 1733.61,687.102 1734.17,687.102 1734.73,687.102 1735.29,687.102 1735.85,687.102 1736.41,687.102 1736.97,687.102 1737.52,687.102 1738.08,687.102 1738.64,687.102 1739.2,687.102 1739.76,687.102 1740.32,687.102 1740.88,687.102 1741.44,687.102 1742,687.102 1742.56,687.102 1743.12,687.102 1743.68,687.102 1744.24,687.102 1744.79,687.102 1745.35,687.102 1745.91,687.102 1746.47,687.102 1747.03,687.102 1747.59,687.102 1748.15,687.102 1748.71,687.102 1749.27,687.102 1749.83,687.102 1750.39,687.102 1750.95,687.102 1751.51,687.102 1752.06,687.102 1752.62,687.102 1753.18,687.102 1753.74,687.102 1754.3,687.102 1754.86,687.102 1755.42,687.102 1755.98,687.102 1756.54,687.102 1757.1,687.102 1757.66,687.102 1758.22,687.102 1758.78,687.102 1759.34,687.102 1759.89,687.102 1760.45,687.102 1761.01,687.102 1761.57,687.102 1762.13,687.102 1762.69,687.102 1763.25,687.102 1763.81,687.102 1764.37,687.102 1764.93,687.102 1765.49,687.102 1766.05,687.102 1766.61,687.102 1767.16,687.102 1767.72,687.102 1768.28,687.102 1768.84,687.102 1769.4,687.102 1769.96,687.102 1770.52,687.102 1771.08,687.102 1771.64,687.102 1772.2,687.102 1772.76,687.102 1773.32,687.102 1773.88,687.102 1774.43,687.102 1774.99,687.102 1775.55,687.102 1776.11,687.102 1776.67,687.102 1777.23,687.102 1777.79,687.102 1778.35,687.102 1778.91,687.102 1779.47,687.102 1780.03,687.102 1780.59,687.102 1781.15,687.102 1781.71,687.102 1782.26,687.102 1782.82,687.102 1783.38,687.102 1783.94,687.102 1784.5,687.102 1785.06,687.102 1785.62,687.102 1786.18,687.102 1786.74,687.102 1787.3,687.102 1787.86,687.102 1788.42,687.102 1788.98,687.102 1789.53,687.102 1790.09,687.102 1790.65,687.102 1791.21,687.102 1791.77,687.102 1792.33,687.102 1792.89,687.102 1793.45,687.102 1794.01,687.102 1794.57,687.102 1795.13,687.102 1795.69,687.102 1796.25,687.102 1796.8,687.102 1797.36,687.102 1797.92,687.102 1798.48,687.102 1799.04,687.102 1799.6,687.102 1800.16,687.102 1800.72,687.102 1801.28,687.102 1801.84,687.102 1802.4,687.102 1802.96,687.102 1803.52,687.102 1804.08,687.102 1804.63,687.102 1805.19,687.102 1805.75,687.102 1806.31,687.102 1806.87,687.102 1807.43,687.102 1807.99,687.102 1808.55,687.102 1809.11,687.102 1809.67,687.102 1810.23,687.102 1810.79,687.102 1811.35,687.102 1811.9,687.102 1812.46,687.102 1813.02,687.102 1813.58,687.102 1814.14,687.102 1814.7,687.102 1815.26,687.102 1815.82,687.102 1816.38,687.102 1816.94,687.102 1817.5,687.102 1818.06,687.102 1818.62,687.102 1819.18,687.102 1819.73,687.102 1820.29,687.102 1820.85,687.102 1821.41,687.102 1821.97,687.102 1822.53,687.102 1823.09,687.102 1823.65,687.102 1824.21,687.102 1824.77,687.102 1825.33,687.102 1825.89,687.102 1826.45,687.102 1827,687.102 1827.56,687.102 1828.12,687.102 1828.68,687.102 1829.24,687.102 1829.8,687.102 1830.36,687.102 1830.92,687.102 1831.48,687.102 1832.04,687.102 1832.6,687.102 1833.16,687.102 1833.72,687.102 1834.27,687.102 1834.83,687.102 1835.39,687.102 1835.95,687.102 1836.51,687.102 1837.07,687.102 1837.63,687.102 1838.19,687.102 \"/>\n<path clip-path=\"url(#clip693)\" d=\"M720.247 683.983 L720.806 683.983 L721.365 683.983 L721.924 683.983 L722.484 683.983 L723.043 683.983 L723.602 683.983 L724.161 683.983 L724.721 683.983 L725.28 683.983 L725.839 683.983 L726.398 683.983 L726.958 683.983 L727.517 683.983 L728.076 683.983 L728.635 683.983 L729.195 683.983 L729.754 683.983 L730.313 683.983 L730.872 683.983 L731.432 683.983 L731.991 683.983 L732.55 683.983 L733.109 683.983 L733.669 683.983 L734.228 683.983 L734.787 683.983 L735.346 683.983 L735.906 683.983 L736.465 683.983 L737.024 683.983 L737.583 683.983 L738.143 683.983 L738.702 683.983 L739.261 683.983 L739.82 683.983 L740.38 683.983 L740.939 683.983 L741.498 683.983 L742.057 683.983 L742.617 683.983 L743.176 683.983 L743.735 683.983 L744.294 683.983 L744.854 683.983 L745.413 683.983 L745.972 683.983 L746.531 683.983 L747.091 683.983 L747.65 683.983 L748.209 683.983 L748.768 683.983 L749.328 683.983 L749.887 683.983 L750.446 683.983 L751.005 683.983 L751.565 683.983 L752.124 683.983 L752.683 683.983 L753.242 683.983 L753.802 683.983 L754.361 683.983 L754.92 683.983 L755.479 683.983 L756.039 683.983 L756.598 683.983 L757.157 683.983 L757.716 683.983 L758.276 683.983 L758.835 683.983 L759.394 683.983 L759.953 683.983 L760.513 683.983 L761.072 683.983 L761.631 683.983 L762.19 683.983 L762.75 683.983 L763.309 683.983 L763.868 683.983 L764.427 683.983 L764.987 683.983 L765.546 683.983 L766.105 683.983 L766.664 683.983 L767.224 683.983 L767.783 683.983 L768.342 683.983 L768.901 683.983 L769.461 683.983 L770.02 683.983 L770.579 683.983 L771.138 683.983 L771.698 683.983 L772.257 683.983 L772.816 683.983 L773.375 683.983 L773.935 683.983 L774.494 683.983 L775.053 683.983 L775.612 683.983 L776.172 683.983 L776.731 683.983 L777.29 683.983 L777.849 683.983 L778.409 683.983 L778.968 683.983 L779.527 683.983 L780.086 683.983 L780.646 683.983 L781.205 683.983 L781.764 683.983 L782.323 683.983 L782.883 683.983 L783.442 683.983 L784.001 683.983 L784.56 683.983 L785.12 683.983 L785.679 683.983 L786.238 683.983 L786.797 683.983 L787.357 683.983 L787.916 683.983 L788.475 683.983 L789.034 683.983 L789.594 683.983 L790.153 683.983 L790.712 683.983 L791.271 683.983 L791.831 683.983 L792.39 683.983 L792.949 683.983 L793.508 683.983 L794.068 683.983 L794.627 683.983 L795.186 683.983 L795.745 683.983 L796.305 683.983 L796.864 683.983 L797.423 683.983 L797.982 683.983 L798.542 683.983 L799.101 683.983 L799.66 683.983 L800.219 683.983 L800.779 683.983 L801.338 683.983 L801.897 683.983 L802.456 683.983 L803.016 683.983 L803.575 683.983 L804.134 683.983 L804.693 683.983 L805.253 683.983 L805.812 683.983 L806.371 683.983 L806.931 683.983 L807.49 683.983 L808.049 683.983 L808.608 683.983 L809.168 683.983 L809.727 683.983 L810.286 683.983 L810.845 683.983 L811.405 683.983 L811.964 683.983 L812.523 683.983 L813.082 683.983 L813.642 683.983 L814.201 683.983 L814.76 683.983 L815.319 683.983 L815.879 683.983 L816.438 683.983 L816.997 683.983 L817.556 683.983 L818.116 683.983 L818.675 683.983 L819.234 683.983 L819.793 683.983 L820.353 683.983 L820.912 683.983 L821.471 683.983 L822.03 683.983 L822.59 683.983 L823.149 683.983 L823.708 683.983 L824.267 683.983 L824.827 683.983 L825.386 683.983 L825.945 683.983 L826.504 683.983 L827.064 683.983 L827.623 683.983 L828.182 683.983 L828.741 683.983 L829.301 683.983 L829.86 683.983 L830.419 683.983 L830.978 683.983 L831.538 683.983 L832.097 683.983 L832.656 683.983 L833.215 683.983 L833.775 683.983 L834.334 683.983 L834.893 683.983 L835.452 683.983 L836.012 683.983 L836.571 683.983 L837.13 683.983 L837.689 683.983 L838.249 683.983 L838.808 683.983 L839.367 683.983 L839.926 683.983 L840.486 683.983 L841.045 683.983 L841.604 683.983 L842.163 683.983 L842.723 683.983 L843.282 683.983 L843.841 683.983 L844.4 683.983 L844.96 683.983 L845.519 683.983 L846.078 683.983 L846.637 683.983 L847.197 683.983 L847.756 683.983 L848.315 683.983 L848.874 683.983 L849.434 683.983 L849.993 683.983 L850.552 683.983 L851.111 683.983 L851.671 683.983 L852.23 683.983 L852.789 683.983 L853.348 683.983 L853.908 683.983 L854.467 683.983 L855.026 683.983 L855.585 683.983 L856.145 683.983 L856.704 683.983 L857.263 683.983 L857.822 683.983 L858.382 683.983 L858.941 683.983 L859.5 683.983 L860.059 683.983 L860.619 683.983 L861.178 683.983 L861.737 683.983 L862.296 683.983 L862.856 683.983 L863.415 683.983 L863.974 683.983 L864.533 683.983 L865.093 683.983 L865.652 683.983 L866.211 683.983 L866.77 683.983 L867.33 683.983 L867.889 683.983 L868.448 683.983 L869.007 683.983 L869.567 683.983 L870.126 683.983 L870.685 683.983 L871.244 683.983 L871.804 683.983 L872.363 683.983 L872.922 683.983 L873.481 683.983 L874.041 683.983 L874.6 683.983 L875.159 683.983 L875.718 683.983 L876.278 683.983 L876.837 683.983 L877.396 683.983 L877.955 683.983 L878.515 683.983 L879.074 683.983 L879.633 683.983 L880.192 683.983 L880.752 683.983 L881.311 683.983 L881.87 683.983 L882.429 683.983 L882.989 683.983 L883.548 683.983 L884.107 683.983 L884.666 683.983 L885.226 683.983 L885.785 683.983 L886.344 683.983 L886.903 683.983 L887.463 683.983 L888.022 683.983 L888.581 683.983 L889.14 683.983 L889.7 683.983 L890.259 683.983 L890.818 683.983 L891.377 683.983 L891.937 683.983 L892.496 683.983 L893.055 683.983 L893.614 683.983 L894.174 683.983 L894.733 683.983 L895.292 683.983 L895.851 683.983 L896.411 683.983 L896.97 683.983 L897.529 683.983 L898.088 683.983 L898.648 683.983 L899.207 683.983 L899.766 683.983 L900.325 683.983 L900.885 683.983 L901.444 683.983 L902.003 683.983 L902.562 683.983 L903.122 683.983 L903.681 683.983 L904.24 683.983 L904.799 683.983 L905.359 683.983 L905.918 683.983 L906.477 683.983 L907.036 683.983 L907.596 683.983 L908.155 683.983 L908.714 683.983 L909.273 683.983 L909.833 683.983 L910.392 683.983 L910.951 683.983 L911.51 683.983 L912.07 683.983 L912.629 683.983 L913.188 683.983 L913.747 683.983 L914.307 683.983 L914.866 683.983 L915.425 683.983 L915.984 683.983 L916.544 683.983 L917.103 683.983 L917.662 683.983 L918.221 683.983 L918.781 683.983 L919.34 683.983 L919.899 683.983 L920.458 683.983 L921.018 683.983 L921.577 683.983 L922.136 683.983 L922.695 683.983 L923.255 683.983 L923.814 683.983 L924.373 683.983 L924.932 683.983 L925.492 683.983 L926.051 683.983 L926.61 683.983 L927.169 683.983 L927.729 683.983 L928.288 683.983 L928.847 683.983 L929.406 683.983 L929.966 683.983 L930.525 683.983 L931.084 683.983 L931.644 683.983 L932.203 683.983 L932.762 683.983 L933.321 683.983 L933.881 683.983 L934.44 683.983 L934.999 683.983 L935.558 683.983 L936.118 683.983 L936.677 683.983 L937.236 683.983 L937.795 683.983 L938.355 683.983 L938.914 683.983 L939.473 683.983 L940.032 683.983 L940.592 683.983 L941.151 683.983 L941.71 683.983 L942.269 683.983 L942.829 683.983 L943.388 683.983 L943.947 683.983 L944.506 683.983 L945.066 683.983 L945.625 683.983 L946.184 683.983 L946.743 683.983 L947.303 683.983 L947.862 683.983 L948.421 683.983 L948.98 683.983 L949.54 683.983 L950.099 683.983 L950.658 683.983 L951.217 683.983 L951.777 683.983 L952.336 683.983 L952.895 683.983 L953.454 683.983 L954.014 683.983 L954.573 683.983 L955.132 683.983 L955.691 683.983 L956.251 683.983 L956.81 683.983 L957.369 683.983 L957.928 683.983 L958.488 683.983 L959.047 683.983 L959.606 683.983 L960.165 683.983 L960.725 683.983 L961.284 683.983 L961.843 683.983 L962.402 683.983 L962.962 683.983 L963.521 683.983 L964.08 683.983 L964.639 683.983 L965.199 683.983 L965.758 683.983 L966.317 683.983 L966.876 683.983 L967.436 683.983 L967.995 683.983 L968.554 683.983 L969.113 683.983 L969.673 683.983 L970.232 683.983 L970.791 683.983 L971.35 683.983 L971.91 683.983 L972.469 683.983 L973.028 683.983 L973.587 683.983 L974.147 683.983 L974.706 683.983 L975.265 683.983 L975.824 683.983 L976.384 683.983 L976.943 683.983 L977.502 683.983 L978.061 683.983 L978.621 683.983 L979.18 683.983 L979.739 683.983 L980.298 683.983 L980.858 683.983 L981.417 683.983 L981.976 683.983 L982.535 683.983 L983.095 683.983 L983.654 683.983 L984.213 683.983 L984.772 683.983 L985.332 683.983 L985.891 683.983 L986.45 683.983 L987.009 683.983 L987.569 683.983 L988.128 683.983 L988.687 683.983 L989.246 683.983 L989.806 683.983 L990.365 683.983 L990.924 683.983 L991.483 683.983 L992.043 683.983 L992.602 683.983 L993.161 683.983 L993.72 683.983 L994.28 683.983 L994.839 683.983 L995.398 683.983 L995.957 683.983 L996.517 683.983 L997.076 683.983 L997.635 683.983 L998.194 683.983 L998.754 683.983 L999.313 683.983 L999.872 683.983 L1000.43 683.983 L1000.99 683.983 L1001.55 683.983 L1002.11 683.983 L1002.67 683.983 L1003.23 683.983 L1003.79 683.983 L1004.35 683.983 L1004.91 683.983 L1005.46 683.983 L1006.02 683.983 L1006.58 683.983 L1007.14 683.983 L1007.7 683.983 L1008.26 683.983 L1008.82 683.983 L1009.38 683.983 L1009.94 683.983 L1010.5 683.983 L1011.06 683.983 L1011.62 683.983 L1012.18 683.983 L1012.73 683.983 L1013.29 683.983 L1013.85 683.983 L1014.41 683.983 L1014.97 683.983 L1015.53 683.983 L1016.09 683.983 L1016.65 683.983 L1017.21 683.983 L1017.77 683.983 L1018.33 683.983 L1018.89 683.983 L1019.45 683.983 L1020.01 683.983 L1020.56 683.983 L1021.12 683.983 L1021.68 683.983 L1022.24 683.983 L1022.8 683.983 L1023.36 683.983 L1023.92 683.983 L1024.48 683.983 L1025.04 683.983 L1025.6 683.983 L1026.16 683.983 L1026.72 683.983 L1027.28 683.983 L1027.83 683.983 L1028.39 683.983 L1028.95 683.983 L1029.51 683.983 L1030.07 683.983 L1030.63 683.983 L1031.19 683.983 L1031.75 683.983 L1032.31 683.983 L1032.87 683.983 L1033.43 683.983 L1033.99 683.983 L1034.55 683.983 L1035.1 683.983 L1035.66 683.983 L1036.22 683.983 L1036.78 683.983 L1037.34 683.983 L1037.9 683.983 L1038.46 683.983 L1039.02 683.983 L1039.58 683.983 L1040.14 683.983 L1040.7 683.983 L1041.26 683.983 L1041.82 683.983 L1042.38 683.983 L1042.93 683.983 L1043.49 683.983 L1044.05 683.983 L1044.61 683.983 L1045.17 683.983 L1045.73 683.983 L1046.29 683.983 L1046.85 683.983 L1047.41 683.983 L1047.97 683.983 L1048.53 683.983 L1049.09 683.983 L1049.65 683.983 L1050.2 683.983 L1050.76 683.983 L1051.32 683.983 L1051.88 683.983 L1052.44 683.983 L1053 683.983 L1053.56 683.983 L1054.12 683.983 L1054.68 683.983 L1055.24 683.983 L1055.8 683.983 L1056.36 683.983 L1056.92 683.983 L1057.48 683.983 L1058.03 683.983 L1058.59 683.983 L1059.15 683.983 L1059.71 683.983 L1060.27 683.983 L1060.83 683.983 L1061.39 683.983 L1061.95 683.983 L1062.51 683.983 L1063.07 683.983 L1063.63 683.983 L1064.19 683.983 L1064.75 683.983 L1065.3 683.983 L1065.86 683.983 L1066.42 683.983 L1066.98 683.983 L1067.54 683.983 L1068.1 683.983 L1068.66 683.983 L1069.22 683.983 L1069.78 683.983 L1070.34 683.983 L1070.9 683.983 L1071.46 683.983 L1072.02 683.983 L1072.57 683.983 L1073.13 683.983 L1073.69 683.983 L1074.25 683.983 L1074.81 683.983 L1075.37 683.983 L1075.93 683.983 L1076.49 683.983 L1077.05 683.983 L1077.61 683.983 L1078.17 683.983 L1078.73 683.983 L1079.29 683.983 L1079.85 683.983 L1080.4 683.983 L1080.96 683.983 L1081.52 683.983 L1082.08 683.983 L1082.64 683.983 L1083.2 683.983 L1083.76 683.983 L1084.32 683.983 L1084.88 683.983 L1085.44 683.983 L1086 683.983 L1086.56 683.983 L1087.12 683.983 L1087.67 683.983 L1088.23 683.983 L1088.79 683.983 L1089.35 683.983 L1089.91 683.983 L1090.47 683.983 L1091.03 683.983 L1091.59 683.983 L1092.15 683.983 L1092.71 683.983 L1093.27 683.983 L1093.83 683.983 L1094.39 683.983 L1094.94 683.983 L1095.5 683.983 L1096.06 683.983 L1096.62 683.983 L1097.18 683.983 L1097.74 683.983 L1098.3 683.983 L1098.86 683.983 L1099.42 683.983 L1099.98 683.983 L1100.54 683.983 L1101.1 683.983 L1101.66 683.983 L1102.22 683.983 L1102.77 683.983 L1103.33 683.983 L1103.89 683.983 L1104.45 683.983 L1105.01 683.983 L1105.57 683.983 L1106.13 683.983 L1106.69 683.983 L1107.25 683.983 L1107.81 683.983 L1108.37 683.983 L1108.93 683.983 L1109.49 683.983 L1110.04 683.983 L1110.6 683.983 L1111.16 683.983 L1111.72 683.983 L1112.28 683.983 L1112.84 683.983 L1113.4 683.983 L1113.96 683.983 L1114.52 683.983 L1115.08 683.983 L1115.64 683.983 L1116.2 683.983 L1116.76 683.983 L1117.31 683.983 L1117.87 683.983 L1118.43 683.983 L1118.99 683.983 L1119.55 683.983 L1120.11 683.983 L1120.67 683.983 L1121.23 683.983 L1121.79 683.983 L1122.35 683.983 L1122.91 683.983 L1123.47 683.983 L1124.03 683.983 L1124.59 683.983 L1125.14 683.983 L1125.7 683.983 L1126.26 683.983 L1126.82 683.983 L1127.38 683.983 L1127.94 683.983 L1128.5 683.983 L1129.06 683.983 L1129.62 683.983 L1130.18 683.983 L1130.74 683.983 L1131.3 683.983 L1131.86 683.983 L1132.41 683.983 L1132.97 683.983 L1133.53 683.983 L1134.09 683.983 L1134.65 683.983 L1135.21 683.983 L1135.77 683.983 L1136.33 683.983 L1136.89 683.983 L1137.45 683.983 L1138.01 683.983 L1138.57 683.983 L1139.13 683.983 L1139.68 683.983 L1140.24 683.983 L1140.8 683.983 L1141.36 683.983 L1141.92 683.983 L1142.48 683.983 L1143.04 683.983 L1143.6 683.983 L1144.16 683.983 L1144.72 683.983 L1145.28 683.983 L1145.84 683.983 L1146.4 683.983 L1146.96 683.983 L1147.51 683.983 L1148.07 683.983 L1148.63 683.983 L1149.19 683.983 L1149.75 683.983 L1150.31 683.983 L1150.87 683.983 L1151.43 683.983 L1151.99 683.983 L1152.55 683.983 L1153.11 683.983 L1153.67 683.983 L1154.23 683.983 L1154.78 683.983 L1155.34 683.983 L1155.9 683.983 L1156.46 683.983 L1157.02 683.983 L1157.58 683.983 L1158.14 683.983 L1158.7 683.983 L1159.26 683.983 L1159.82 683.983 L1160.38 683.983 L1160.94 683.983 L1161.5 683.983 L1162.05 683.983 L1162.61 683.983 L1163.17 683.983 L1163.73 683.983 L1164.29 683.983 L1164.85 683.983 L1165.41 683.983 L1165.97 683.983 L1166.53 683.983 L1167.09 683.983 L1167.65 683.983 L1168.21 683.983 L1168.77 683.983 L1169.33 683.983 L1169.88 683.983 L1170.44 683.983 L1171 683.983 L1171.56 683.983 L1172.12 683.983 L1172.68 683.983 L1173.24 683.983 L1173.8 683.983 L1174.36 683.983 L1174.92 683.983 L1175.48 683.983 L1176.04 683.983 L1176.6 683.983 L1177.15 683.983 L1177.71 683.983 L1178.27 683.983 L1178.83 683.983 L1179.39 683.983 L1179.95 683.983 L1180.51 683.983 L1181.07 683.983 L1181.63 683.983 L1182.19 683.983 L1182.75 683.983 L1183.31 683.983 L1183.87 683.983 L1184.43 683.983 L1184.98 683.983 L1185.54 683.983 L1186.1 683.983 L1186.66 683.983 L1187.22 683.983 L1187.78 683.983 L1188.34 683.983 L1188.9 683.983 L1189.46 683.983 L1190.02 683.983 L1190.58 683.983 L1191.14 683.983 L1191.7 683.983 L1192.25 683.983 L1192.81 683.983 L1193.37 683.983 L1193.93 683.983 L1194.49 683.983 L1195.05 683.983 L1195.61 683.983 L1196.17 683.983 L1196.73 683.983 L1197.29 683.983 L1197.85 683.983 L1198.41 683.983 L1198.97 683.983 L1199.52 683.983 L1200.08 683.983 L1200.64 683.983 L1201.2 683.983 L1201.76 683.983 L1202.32 683.983 L1202.88 683.983 L1203.44 683.983 L1204 683.983 L1204.56 683.983 L1205.12 683.983 L1205.68 683.983 L1206.24 683.983 L1206.8 683.983 L1207.35 683.983 L1207.91 683.983 L1208.47 683.983 L1209.03 683.983 L1209.59 683.983 L1210.15 683.983 L1210.71 683.983 L1211.27 683.983 L1211.83 683.983 L1212.39 683.983 L1212.95 683.983 L1213.51 683.983 L1214.07 683.983 L1214.62 683.983 L1215.18 683.983 L1215.74 683.983 L1216.3 683.983 L1216.86 683.983 L1217.42 683.983 L1217.98 683.983 L1218.54 683.983 L1219.1 683.983 L1219.66 683.983 L1220.22 683.983 L1220.78 683.983 L1221.34 683.983 L1221.89 683.983 L1222.45 683.983 L1223.01 683.983 L1223.57 683.983 L1224.13 683.983 L1224.69 683.983 L1225.25 683.983 L1225.81 683.983 L1226.37 683.983 L1226.93 683.983 L1227.49 683.983 L1228.05 683.983 L1228.61 683.983 L1229.17 683.983 L1229.72 683.983 L1230.28 683.983 L1230.84 683.983 L1231.4 683.983 L1231.96 683.983 L1232.52 683.983 L1233.08 683.983 L1233.64 683.983 L1234.2 683.983 L1234.76 683.983 L1235.32 683.983 L1235.88 683.983 L1236.44 683.983 L1236.99 683.983 L1237.55 683.983 L1238.11 683.983 L1238.67 683.983 L1239.23 683.983 L1239.79 683.983 L1240.35 683.983 L1240.91 683.983 L1241.47 683.983 L1242.03 683.983 L1242.59 683.983 L1243.15 683.983 L1243.71 683.983 L1244.26 683.983 L1244.82 683.983 L1245.38 683.983 L1245.94 683.983 L1246.5 683.983 L1247.06 683.983 L1247.62 683.983 L1248.18 683.983 L1248.74 683.983 L1249.3 683.983 L1249.86 683.983 L1250.42 683.983 L1250.98 683.983 L1251.54 683.983 L1252.09 683.983 L1252.65 683.983 L1253.21 683.983 L1253.77 683.983 L1254.33 683.983 L1254.89 683.983 L1255.45 683.983 L1256.01 683.983 L1256.57 683.983 L1257.13 683.983 L1257.69 683.983 L1258.25 683.983 L1258.81 683.983 L1259.36 683.983 L1259.92 683.983 L1260.48 683.983 L1261.04 683.983 L1261.6 683.983 L1262.16 683.983 L1262.72 683.983 L1263.28 683.983 L1263.84 683.983 L1264.4 683.983 L1264.96 683.983 L1265.52 683.983 L1266.08 683.983 L1266.63 683.983 L1267.19 683.983 L1267.75 683.983 L1268.31 683.983 L1268.87 683.983 L1269.43 683.983 L1269.99 683.983 L1270.55 683.983 L1271.11 683.983 L1271.67 683.983 L1272.23 683.983 L1272.79 683.983 L1273.35 683.983 L1273.91 683.983 L1274.46 683.983 L1275.02 683.983 L1275.58 683.983 L1276.14 683.983 L1276.7 683.983 L1277.26 683.983 L1277.82 683.983 L1278.38 683.983 L1278.94 683.983 L1279.5 683.983 L1280.06 683.983 L1280.62 683.983 L1281.18 683.983 L1281.73 683.983 L1282.29 683.983 L1282.85 683.983 L1283.41 683.983 L1283.97 683.983 L1284.53 683.983 L1285.09 683.983 L1285.65 683.983 L1286.21 683.983 L1286.77 683.983 L1287.33 683.983 L1287.89 683.983 L1288.45 683.983 L1289 683.983 L1289.56 683.983 L1290.12 683.983 L1290.68 683.983 L1291.24 683.983 L1291.8 683.983 L1292.36 683.983 L1292.92 683.983 L1293.48 683.983 L1294.04 683.983 L1294.6 683.983 L1295.16 683.983 L1295.72 683.983 L1296.28 683.983 L1296.83 683.983 L1297.39 683.983 L1297.95 683.983 L1298.51 683.983 L1299.07 683.983 L1299.63 683.983 L1300.19 683.983 L1300.75 683.983 L1301.31 683.983 L1301.87 683.983 L1302.43 683.983 L1302.99 683.983 L1303.55 683.983 L1304.1 683.983 L1304.66 683.983 L1305.22 683.983 L1305.78 683.983 L1306.34 683.983 L1306.9 683.983 L1307.46 683.983 L1308.02 683.983 L1308.58 683.983 L1309.14 683.983 L1309.7 683.983 L1310.26 683.983 L1310.82 683.983 L1311.38 683.983 L1311.93 683.983 L1312.49 683.983 L1313.05 683.983 L1313.61 683.983 L1314.17 683.983 L1314.73 683.983 L1315.29 683.983 L1315.85 683.983 L1316.41 683.983 L1316.97 683.983 L1317.53 683.983 L1318.09 683.983 L1318.65 683.983 L1319.2 683.983 L1319.76 683.983 L1320.32 683.983 L1320.88 683.983 L1321.44 683.983 L1322 683.983 L1322.56 683.983 L1323.12 683.983 L1323.68 683.983 L1324.24 683.983 L1324.8 683.983 L1325.36 683.983 L1325.92 683.983 L1326.47 683.983 L1327.03 683.983 L1327.59 683.983 L1328.15 683.983 L1328.71 683.983 L1329.27 683.983 L1329.83 683.983 L1330.39 683.983 L1330.95 683.983 L1331.51 683.983 L1332.07 683.983 L1332.63 683.983 L1333.19 683.983 L1333.75 683.983 L1334.3 683.983 L1334.86 683.983 L1335.42 683.983 L1335.98 683.983 L1336.54 683.983 L1337.1 683.983 L1337.66 683.983 L1338.22 683.983 L1338.78 683.983 L1339.34 683.983 L1339.9 683.983 L1340.46 683.983 L1341.02 683.983 L1341.57 683.983 L1342.13 683.983 L1342.69 683.983 L1343.25 683.983 L1343.81 683.983 L1344.37 683.983 L1344.93 683.983 L1345.49 683.983 L1346.05 683.983 L1346.61 683.983 L1347.17 683.983 L1347.73 683.983 L1348.29 683.983 L1348.84 683.983 L1349.4 683.983 L1349.96 683.983 L1350.52 683.983 L1351.08 683.983 L1351.64 683.983 L1352.2 683.983 L1352.76 683.983 L1353.32 683.983 L1353.88 683.983 L1354.44 683.983 L1355 683.983 L1355.56 683.983 L1356.12 683.983 L1356.67 683.983 L1357.23 683.983 L1357.79 683.983 L1358.35 683.983 L1358.91 683.983 L1359.47 683.983 L1360.03 683.983 L1360.59 683.983 L1361.15 683.983 L1361.71 683.983 L1362.27 683.983 L1362.83 683.983 L1363.39 683.983 L1363.94 683.983 L1364.5 683.983 L1365.06 683.983 L1365.62 683.983 L1366.18 683.983 L1366.74 683.983 L1367.3 683.983 L1367.86 683.983 L1368.42 683.983 L1368.98 683.983 L1369.54 683.983 L1370.1 683.983 L1370.66 683.983 L1371.21 683.983 L1371.77 683.983 L1372.33 683.983 L1372.89 683.983 L1373.45 683.983 L1374.01 683.983 L1374.57 683.983 L1375.13 683.983 L1375.69 683.983 L1376.25 683.983 L1376.81 683.983 L1377.37 683.983 L1377.93 683.983 L1378.49 683.983 L1379.04 683.983 L1379.6 683.983 L1380.16 683.983 L1380.72 683.983 L1381.28 683.983 L1381.84 683.983 L1382.4 683.983 L1382.96 683.983 L1383.52 683.983 L1384.08 683.983 L1384.64 683.983 L1385.2 683.983 L1385.76 683.983 L1386.31 683.983 L1386.87 683.983 L1387.43 683.983 L1387.99 683.983 L1388.55 683.983 L1389.11 683.983 L1389.67 683.983 L1390.23 683.983 L1390.79 683.983 L1391.35 683.983 L1391.91 683.983 L1392.47 683.983 L1393.03 683.983 L1393.58 683.983 L1394.14 683.983 L1394.7 683.983 L1395.26 683.983 L1395.82 683.983 L1396.38 683.983 L1396.94 683.983 L1397.5 683.983 L1398.06 683.983 L1398.62 683.983 L1399.18 683.983 L1399.74 683.983 L1400.3 683.983 L1400.86 683.983 L1401.41 683.983 L1401.97 683.983 L1402.53 683.983 L1403.09 683.983 L1403.65 683.983 L1404.21 683.983 L1404.77 683.983 L1405.33 683.983 L1405.89 683.983 L1406.45 683.983 L1407.01 683.983 L1407.57 683.983 L1408.13 683.983 L1408.68 683.983 L1409.24 683.983 L1409.8 683.983 L1410.36 683.983 L1410.92 683.983 L1411.48 683.983 L1412.04 683.983 L1412.6 683.983 L1413.16 683.983 L1413.72 683.983 L1414.28 683.983 L1414.84 683.983 L1415.4 683.983 L1415.95 683.983 L1416.51 683.983 L1417.07 683.983 L1417.63 683.983 L1418.19 683.983 L1418.75 683.983 L1419.31 683.983 L1419.87 683.983 L1420.43 683.983 L1420.99 683.983 L1421.55 683.983 L1422.11 683.983 L1422.67 683.983 L1423.23 683.983 L1423.78 683.983 L1424.34 683.983 L1424.9 683.983 L1425.46 683.983 L1426.02 683.983 L1426.58 683.983 L1427.14 683.983 L1427.7 683.983 L1428.26 683.983 L1428.82 683.983 L1429.38 683.983 L1429.94 683.983 L1430.5 683.983 L1431.05 683.983 L1431.61 683.983 L1432.17 683.983 L1432.73 683.983 L1433.29 683.983 L1433.85 683.983 L1434.41 683.983 L1434.97 683.983 L1435.53 683.983 L1436.09 683.983 L1436.65 683.983 L1437.21 683.983 L1437.77 683.983 L1438.33 683.983 L1438.88 683.983 L1439.44 683.983 L1440 683.983 L1440.56 683.983 L1441.12 683.983 L1441.68 683.983 L1442.24 683.983 L1442.8 683.983 L1443.36 683.983 L1443.92 683.983 L1444.48 683.983 L1445.04 683.983 L1445.6 683.983 L1446.15 683.983 L1446.71 683.983 L1447.27 683.983 L1447.83 683.983 L1448.39 683.983 L1448.95 683.983 L1449.51 683.983 L1450.07 683.983 L1450.63 683.983 L1451.19 683.983 L1451.75 683.983 L1452.31 683.983 L1452.87 683.983 L1453.42 683.983 L1453.98 683.983 L1454.54 683.983 L1455.1 683.983 L1455.66 683.983 L1456.22 683.983 L1456.78 683.983 L1457.34 683.983 L1457.9 683.983 L1458.46 683.983 L1459.02 683.983 L1459.58 683.983 L1460.14 683.983 L1460.7 683.983 L1461.25 683.983 L1461.81 683.983 L1462.37 683.983 L1462.93 683.983 L1463.49 683.983 L1464.05 683.983 L1464.61 683.983 L1465.17 683.983 L1465.73 683.983 L1466.29 683.983 L1466.85 683.983 L1467.41 683.983 L1467.97 683.983 L1468.52 683.983 L1469.08 683.983 L1469.64 683.983 L1470.2 683.983 L1470.76 683.983 L1471.32 683.983 L1471.88 683.983 L1472.44 683.983 L1473 683.983 L1473.56 683.983 L1474.12 683.983 L1474.68 683.983 L1475.24 683.983 L1475.79 683.983 L1476.35 683.983 L1476.91 683.983 L1477.47 683.983 L1478.03 683.983 L1478.59 683.983 L1479.15 683.983 L1479.71 683.983 L1480.27 683.983 L1480.83 683.983 L1481.39 683.983 L1481.95 683.983 L1482.51 683.983 L1483.07 683.983 L1483.62 683.983 L1484.18 683.983 L1484.74 683.983 L1485.3 683.983 L1485.86 683.983 L1486.42 683.983 L1486.98 683.983 L1487.54 683.983 L1488.1 683.983 L1488.66 683.983 L1489.22 683.983 L1489.78 683.983 L1490.34 683.983 L1490.89 683.983 L1491.45 683.983 L1492.01 683.983 L1492.57 683.983 L1493.13 683.983 L1493.69 683.983 L1494.25 683.983 L1494.81 683.983 L1495.37 683.983 L1495.93 683.983 L1496.49 683.983 L1497.05 683.983 L1497.61 683.983 L1498.16 683.983 L1498.72 683.983 L1499.28 683.983 L1499.84 683.983 L1500.4 683.983 L1500.96 683.983 L1501.52 683.983 L1502.08 683.983 L1502.64 683.983 L1503.2 683.983 L1503.76 683.983 L1504.32 683.983 L1504.88 683.983 L1505.44 683.983 L1505.99 683.983 L1506.55 683.983 L1507.11 683.983 L1507.67 683.983 L1508.23 683.983 L1508.79 683.983 L1509.35 683.983 L1509.91 683.983 L1510.47 683.983 L1511.03 683.983 L1511.59 683.983 L1512.15 683.983 L1512.71 683.983 L1513.26 683.983 L1513.82 683.983 L1514.38 683.983 L1514.94 683.983 L1515.5 683.983 L1516.06 683.983 L1516.62 683.983 L1517.18 683.983 L1517.74 683.983 L1518.3 683.983 L1518.86 683.983 L1519.42 683.983 L1519.98 683.983 L1520.53 683.983 L1521.09 683.983 L1521.65 683.983 L1522.21 683.983 L1522.77 683.983 L1523.33 683.983 L1523.89 683.983 L1524.45 683.983 L1525.01 683.983 L1525.57 683.983 L1526.13 683.983 L1526.69 683.983 L1527.25 683.983 L1527.81 683.983 L1528.36 683.983 L1528.92 683.983 L1529.48 683.983 L1530.04 683.983 L1530.6 683.983 L1531.16 683.983 L1531.72 683.983 L1532.28 683.983 L1532.84 683.983 L1533.4 683.983 L1533.96 683.983 L1534.52 683.983 L1535.08 683.983 L1535.63 683.983 L1536.19 683.983 L1536.75 683.983 L1537.31 683.983 L1537.87 683.983 L1538.43 683.983 L1538.99 683.983 L1539.55 683.983 L1540.11 683.983 L1540.67 683.983 L1541.23 683.983 L1541.79 683.983 L1542.35 683.983 L1542.9 683.983 L1543.46 683.983 L1544.02 683.983 L1544.58 683.983 L1545.14 683.983 L1545.7 683.983 L1546.26 683.983 L1546.82 683.983 L1547.38 683.983 L1547.94 683.983 L1548.5 683.983 L1549.06 683.983 L1549.62 683.983 L1550.18 683.983 L1550.73 683.983 L1551.29 683.983 L1551.85 683.983 L1552.41 683.983 L1552.97 683.983 L1553.53 683.983 L1554.09 683.983 L1554.65 683.983 L1555.21 683.983 L1555.77 683.983 L1556.33 683.983 L1556.89 683.983 L1557.45 683.983 L1558 683.983 L1558.56 683.983 L1559.12 683.983 L1559.68 683.983 L1560.24 683.983 L1560.8 683.983 L1561.36 683.983 L1561.92 683.983 L1562.48 683.983 L1563.04 683.983 L1563.6 683.983 L1564.16 683.983 L1564.72 683.983 L1565.28 683.983 L1565.83 683.983 L1566.39 683.983 L1566.95 683.983 L1567.51 683.983 L1568.07 683.983 L1568.63 683.983 L1569.19 683.983 L1569.75 683.983 L1570.31 683.983 L1570.87 683.983 L1571.43 683.983 L1571.99 683.983 L1572.55 683.983 L1573.1 683.983 L1573.66 683.983 L1574.22 683.983 L1574.78 683.983 L1575.34 683.983 L1575.9 683.983 L1576.46 683.983 L1577.02 683.983 L1577.58 683.983 L1578.14 683.983 L1578.7 683.983 L1579.26 683.983 L1579.82 683.983 L1580.37 683.983 L1580.93 683.983 L1581.49 683.983 L1582.05 683.983 L1582.61 683.983 L1583.17 683.983 L1583.73 683.983 L1584.29 683.983 L1584.85 683.983 L1585.41 683.983 L1585.97 683.983 L1586.53 683.983 L1587.09 683.983 L1587.65 683.983 L1588.2 683.983 L1588.76 683.983 L1589.32 683.983 L1589.88 683.983 L1590.44 683.983 L1591 683.983 L1591.56 683.983 L1592.12 683.983 L1592.68 683.983 L1593.24 683.983 L1593.8 683.983 L1594.36 683.983 L1594.92 683.983 L1595.47 683.983 L1596.03 683.983 L1596.59 683.983 L1597.15 683.983 L1597.71 683.983 L1598.27 683.983 L1598.83 683.983 L1599.39 683.983 L1599.95 683.983 L1600.51 683.983 L1601.07 683.983 L1601.63 683.983 L1602.19 683.983 L1602.74 683.983 L1603.3 683.983 L1603.86 683.983 L1604.42 683.983 L1604.98 683.983 L1605.54 683.983 L1606.1 683.983 L1606.66 683.983 L1607.22 683.983 L1607.78 683.983 L1608.34 683.983 L1608.9 683.983 L1609.46 683.983 L1610.02 683.983 L1610.57 683.983 L1611.13 683.983 L1611.69 683.983 L1612.25 683.983 L1612.81 683.983 L1613.37 683.983 L1613.93 683.983 L1614.49 683.983 L1615.05 683.983 L1615.61 683.983 L1616.17 683.983 L1616.73 683.983 L1617.29 683.983 L1617.84 683.983 L1618.4 683.983 L1618.96 683.983 L1619.52 683.983 L1620.08 683.983 L1620.64 683.983 L1621.2 683.983 L1621.76 683.983 L1622.32 683.983 L1622.88 683.983 L1623.44 683.983 L1624 683.983 L1624.56 683.983 L1625.11 683.983 L1625.67 683.983 L1626.23 683.983 L1626.79 683.983 L1627.35 683.983 L1627.91 683.983 L1628.47 683.983 L1629.03 683.983 L1629.59 683.983 L1630.15 683.983 L1630.71 683.983 L1631.27 683.983 L1631.83 683.983 L1632.39 683.983 L1632.94 683.983 L1633.5 683.983 L1634.06 683.983 L1634.62 683.983 L1635.18 683.983 L1635.74 683.983 L1636.3 683.983 L1636.86 683.983 L1637.42 683.983 L1637.98 683.983 L1638.54 683.983 L1639.1 683.983 L1639.66 683.983 L1640.21 683.983 L1640.77 683.983 L1641.33 683.983 L1641.89 683.983 L1642.45 683.983 L1643.01 683.983 L1643.57 683.983 L1644.13 683.983 L1644.69 683.983 L1645.25 683.983 L1645.81 683.983 L1646.37 683.983 L1646.93 683.983 L1647.48 683.983 L1648.04 683.983 L1648.6 683.983 L1649.16 683.983 L1649.72 683.983 L1650.28 683.983 L1650.84 683.983 L1651.4 683.983 L1651.96 683.983 L1652.52 683.983 L1653.08 683.983 L1653.64 683.983 L1654.2 683.983 L1654.76 683.983 L1655.31 683.983 L1655.87 683.983 L1656.43 683.983 L1656.99 683.983 L1657.55 683.983 L1658.11 683.983 L1658.67 683.983 L1659.23 683.983 L1659.79 683.983 L1660.35 683.983 L1660.91 683.983 L1661.47 683.983 L1662.03 683.983 L1662.58 683.983 L1663.14 683.983 L1663.7 683.983 L1664.26 683.983 L1664.82 683.983 L1665.38 683.983 L1665.94 683.983 L1666.5 683.983 L1667.06 683.983 L1667.62 683.983 L1668.18 683.983 L1668.74 683.983 L1669.3 683.983 L1669.85 683.983 L1670.41 683.983 L1670.97 683.983 L1671.53 683.983 L1672.09 683.983 L1672.65 683.983 L1673.21 683.983 L1673.77 683.983 L1674.33 683.983 L1674.89 683.983 L1675.45 683.983 L1676.01 683.983 L1676.57 683.983 L1677.13 683.983 L1677.68 683.983 L1678.24 683.983 L1678.8 683.983 L1679.36 683.983 L1679.92 683.983 L1680.48 683.983 L1681.04 683.983 L1681.6 683.983 L1682.16 683.983 L1682.72 683.983 L1683.28 683.983 L1683.84 683.983 L1684.4 683.983 L1684.95 683.983 L1685.51 683.983 L1686.07 683.983 L1686.63 683.983 L1687.19 683.983 L1687.75 683.983 L1688.31 683.983 L1688.87 683.983 L1689.43 683.983 L1689.99 683.983 L1690.55 683.983 L1691.11 683.983 L1691.67 683.983 L1692.23 683.983 L1692.78 683.983 L1693.34 683.983 L1693.9 683.983 L1694.46 683.983 L1695.02 683.983 L1695.58 683.983 L1696.14 683.983 L1696.7 683.983 L1697.26 683.983 L1697.82 683.983 L1698.38 683.983 L1698.94 683.983 L1699.5 683.983 L1700.05 683.983 L1700.61 683.983 L1701.17 683.983 L1701.73 683.983 L1702.29 683.983 L1702.85 683.983 L1703.41 683.983 L1703.97 683.983 L1704.53 683.983 L1705.09 683.983 L1705.65 683.983 L1706.21 683.983 L1706.77 683.983 L1707.32 683.983 L1707.88 683.983 L1708.44 683.983 L1709 683.983 L1709.56 683.983 L1710.12 683.983 L1710.68 683.983 L1711.24 683.983 L1711.8 683.983 L1712.36 683.983 L1712.92 683.983 L1713.48 683.983 L1714.04 683.983 L1714.6 683.983 L1715.15 683.983 L1715.71 683.983 L1716.27 683.983 L1716.83 683.983 L1717.39 683.983 L1717.95 683.983 L1718.51 683.983 L1719.07 683.983 L1719.63 683.983 L1720.19 683.983 L1720.75 683.983 L1721.31 683.983 L1721.87 683.983 L1722.42 683.983 L1722.98 683.983 L1723.54 683.983 L1724.1 683.983 L1724.66 683.983 L1725.22 683.983 L1725.78 683.983 L1726.34 683.983 L1726.9 683.983 L1727.46 683.983 L1728.02 683.983 L1728.58 683.983 L1729.14 683.983 L1729.69 683.983 L1730.25 683.983 L1730.81 683.983 L1731.37 683.983 L1731.93 683.983 L1732.49 683.983 L1733.05 683.983 L1733.61 683.983 L1734.17 683.983 L1734.73 683.983 L1735.29 683.983 L1735.85 683.983 L1736.41 683.983 L1736.97 683.983 L1737.52 683.983 L1738.08 683.983 L1738.64 683.983 L1739.2 683.983 L1739.76 683.983 L1740.32 683.983 L1740.88 683.983 L1741.44 683.983 L1742 683.983 L1742.56 683.983 L1743.12 683.983 L1743.68 683.983 L1744.24 683.983 L1744.79 683.983 L1745.35 683.983 L1745.91 683.983 L1746.47 683.983 L1747.03 683.983 L1747.59 683.983 L1748.15 683.983 L1748.71 683.983 L1749.27 683.983 L1749.83 683.983 L1750.39 683.983 L1750.95 683.983 L1751.51 683.983 L1752.06 683.983 L1752.62 683.983 L1753.18 683.983 L1753.74 683.983 L1754.3 683.983 L1754.86 683.983 L1755.42 683.983 L1755.98 683.983 L1756.54 683.983 L1757.1 683.983 L1757.66 683.983 L1758.22 683.983 L1758.78 683.983 L1759.34 683.983 L1759.89 683.983 L1760.45 683.983 L1761.01 683.983 L1761.57 683.983 L1762.13 683.983 L1762.69 683.983 L1763.25 683.983 L1763.81 683.983 L1764.37 683.983 L1764.93 683.983 L1765.49 683.983 L1766.05 683.983 L1766.61 683.983 L1767.16 683.983 L1767.72 683.983 L1768.28 683.983 L1768.84 683.983 L1769.4 683.983 L1769.96 683.983 L1770.52 683.983 L1771.08 683.983 L1771.64 683.983 L1772.2 683.983 L1772.76 683.983 L1773.32 683.983 L1773.88 683.983 L1774.43 683.983 L1774.99 683.983 L1775.55 683.983 L1776.11 683.983 L1776.67 683.983 L1777.23 683.983 L1777.79 683.983 L1778.35 683.983 L1778.91 683.983 L1779.47 683.983 L1780.03 683.983 L1780.59 683.983 L1781.15 683.983 L1781.71 683.983 L1782.26 683.983 L1782.82 683.983 L1783.38 683.983 L1783.94 683.983 L1784.5 683.983 L1785.06 683.983 L1785.62 683.983 L1786.18 683.983 L1786.74 683.983 L1787.3 683.983 L1787.86 683.983 L1788.42 683.983 L1788.98 683.983 L1789.53 683.983 L1790.09 683.983 L1790.65 683.983 L1791.21 683.983 L1791.77 683.983 L1792.33 683.983 L1792.89 683.983 L1793.45 683.983 L1794.01 683.983 L1794.57 683.983 L1795.13 683.983 L1795.69 683.983 L1796.25 683.983 L1796.8 683.983 L1797.36 683.983 L1797.92 683.983 L1798.48 683.983 L1799.04 683.983 L1799.6 683.983 L1800.16 683.983 L1800.72 683.983 L1801.28 683.983 L1801.84 683.983 L1802.4 683.983 L1802.96 683.983 L1803.52 683.983 L1804.08 683.983 L1804.63 683.983 L1805.19 683.983 L1805.75 683.983 L1806.31 683.983 L1806.87 683.983 L1807.43 683.983 L1807.99 683.983 L1808.55 683.983 L1809.11 683.983 L1809.67 683.983 L1810.23 683.983 L1810.79 683.983 L1811.35 683.983 L1811.9 683.983 L1812.46 683.983 L1813.02 683.983 L1813.58 683.983 L1814.14 683.983 L1814.7 683.983 L1815.26 683.983 L1815.82 683.983 L1816.38 683.983 L1816.94 683.983 L1817.5 683.983 L1818.06 683.983 L1818.62 683.983 L1819.18 683.983 L1819.73 683.983 L1820.29 683.983 L1820.85 683.983 L1821.41 683.983 L1821.97 683.983 L1822.53 683.983 L1823.09 683.983 L1823.65 683.983 L1824.21 683.983 L1824.77 683.983 L1825.33 683.983 L1825.89 683.983 L1826.45 683.983 L1827 683.983 L1827.56 683.983 L1828.12 683.983 L1828.68 683.983 L1829.24 683.983 L1829.8 683.983 L1830.36 683.983 L1830.92 683.983 L1831.48 683.983 L1832.04 683.983 L1832.6 683.983 L1833.16 683.983 L1833.72 683.983 L1834.27 683.983 L1834.83 683.983 L1835.39 683.983 L1835.95 683.983 L1836.51 683.983 L1837.07 683.983 L1837.63 683.983 L1838.19 683.983 L1838.19 682.536 L1837.63 682.536 L1837.07 682.536 L1836.51 682.536 L1835.95 682.536 L1835.39 682.536 L1834.83 682.536 L1834.27 682.536 L1833.72 682.536 L1833.16 682.536 L1832.6 682.536 L1832.04 682.536 L1831.48 682.536 L1830.92 682.536 L1830.36 682.536 L1829.8 682.536 L1829.24 682.536 L1828.68 682.536 L1828.12 682.536 L1827.56 682.536 L1827 682.536 L1826.45 682.536 L1825.89 682.536 L1825.33 682.536 L1824.77 682.536 L1824.21 682.536 L1823.65 682.536 L1823.09 682.536 L1822.53 682.536 L1821.97 682.536 L1821.41 682.536 L1820.85 682.536 L1820.29 682.536 L1819.73 682.536 L1819.18 682.536 L1818.62 682.536 L1818.06 682.536 L1817.5 682.536 L1816.94 682.536 L1816.38 682.536 L1815.82 682.536 L1815.26 682.536 L1814.7 682.536 L1814.14 682.536 L1813.58 682.536 L1813.02 682.536 L1812.46 682.536 L1811.9 682.536 L1811.35 682.536 L1810.79 682.536 L1810.23 682.536 L1809.67 682.536 L1809.11 682.536 L1808.55 682.536 L1807.99 682.536 L1807.43 682.536 L1806.87 682.536 L1806.31 682.536 L1805.75 682.536 L1805.19 682.536 L1804.63 682.536 L1804.08 682.536 L1803.52 682.536 L1802.96 682.536 L1802.4 682.536 L1801.84 682.536 L1801.28 682.536 L1800.72 682.536 L1800.16 682.536 L1799.6 682.536 L1799.04 682.536 L1798.48 682.536 L1797.92 682.536 L1797.36 682.536 L1796.8 682.536 L1796.25 682.536 L1795.69 682.536 L1795.13 682.536 L1794.57 682.536 L1794.01 682.536 L1793.45 682.536 L1792.89 682.536 L1792.33 682.536 L1791.77 682.536 L1791.21 682.536 L1790.65 682.536 L1790.09 682.536 L1789.53 682.536 L1788.98 682.536 L1788.42 682.536 L1787.86 682.536 L1787.3 682.536 L1786.74 682.536 L1786.18 682.536 L1785.62 682.536 L1785.06 682.536 L1784.5 682.536 L1783.94 682.536 L1783.38 682.536 L1782.82 682.536 L1782.26 682.536 L1781.71 682.536 L1781.15 682.536 L1780.59 682.536 L1780.03 682.536 L1779.47 682.536 L1778.91 682.536 L1778.35 682.536 L1777.79 682.536 L1777.23 682.536 L1776.67 682.536 L1776.11 682.536 L1775.55 682.536 L1774.99 682.536 L1774.43 682.536 L1773.88 682.536 L1773.32 682.536 L1772.76 682.536 L1772.2 682.536 L1771.64 682.536 L1771.08 682.536 L1770.52 682.536 L1769.96 682.536 L1769.4 682.536 L1768.84 682.536 L1768.28 682.536 L1767.72 682.536 L1767.16 682.536 L1766.61 682.536 L1766.05 682.536 L1765.49 682.536 L1764.93 682.536 L1764.37 682.536 L1763.81 682.536 L1763.25 682.536 L1762.69 682.536 L1762.13 682.536 L1761.57 682.536 L1761.01 682.536 L1760.45 682.536 L1759.89 682.536 L1759.34 682.536 L1758.78 682.536 L1758.22 682.536 L1757.66 682.536 L1757.1 682.536 L1756.54 682.536 L1755.98 682.536 L1755.42 682.536 L1754.86 682.536 L1754.3 682.536 L1753.74 682.536 L1753.18 682.536 L1752.62 682.536 L1752.06 682.536 L1751.51 682.536 L1750.95 682.536 L1750.39 682.536 L1749.83 682.536 L1749.27 682.536 L1748.71 682.536 L1748.15 682.536 L1747.59 682.536 L1747.03 682.536 L1746.47 682.536 L1745.91 682.536 L1745.35 682.536 L1744.79 682.536 L1744.24 682.536 L1743.68 682.536 L1743.12 682.536 L1742.56 682.536 L1742 682.536 L1741.44 682.536 L1740.88 682.536 L1740.32 682.536 L1739.76 682.536 L1739.2 682.536 L1738.64 682.536 L1738.08 682.536 L1737.52 682.536 L1736.97 682.536 L1736.41 682.536 L1735.85 682.536 L1735.29 682.536 L1734.73 682.536 L1734.17 682.536 L1733.61 682.536 L1733.05 682.536 L1732.49 682.536 L1731.93 682.536 L1731.37 682.536 L1730.81 682.536 L1730.25 682.536 L1729.69 682.536 L1729.14 682.536 L1728.58 682.536 L1728.02 682.536 L1727.46 682.536 L1726.9 682.536 L1726.34 682.536 L1725.78 682.536 L1725.22 682.536 L1724.66 682.536 L1724.1 682.536 L1723.54 682.536 L1722.98 682.536 L1722.42 682.536 L1721.87 682.536 L1721.31 682.536 L1720.75 682.536 L1720.19 682.536 L1719.63 682.536 L1719.07 682.536 L1718.51 682.536 L1717.95 682.536 L1717.39 682.536 L1716.83 682.536 L1716.27 682.536 L1715.71 682.536 L1715.15 682.536 L1714.6 682.536 L1714.04 682.536 L1713.48 682.536 L1712.92 682.536 L1712.36 682.536 L1711.8 682.536 L1711.24 682.536 L1710.68 682.536 L1710.12 682.536 L1709.56 682.536 L1709 682.536 L1708.44 682.536 L1707.88 682.536 L1707.32 682.536 L1706.77 682.536 L1706.21 682.536 L1705.65 682.536 L1705.09 682.536 L1704.53 682.536 L1703.97 682.536 L1703.41 682.536 L1702.85 682.536 L1702.29 682.536 L1701.73 682.536 L1701.17 682.536 L1700.61 682.536 L1700.05 682.536 L1699.5 682.536 L1698.94 682.536 L1698.38 682.536 L1697.82 682.536 L1697.26 682.536 L1696.7 682.536 L1696.14 682.536 L1695.58 682.536 L1695.02 682.536 L1694.46 682.536 L1693.9 682.536 L1693.34 682.536 L1692.78 682.536 L1692.23 682.536 L1691.67 682.536 L1691.11 682.536 L1690.55 682.536 L1689.99 682.536 L1689.43 682.536 L1688.87 682.536 L1688.31 682.536 L1687.75 682.536 L1687.19 682.536 L1686.63 682.536 L1686.07 682.536 L1685.51 682.536 L1684.95 682.536 L1684.4 682.536 L1683.84 682.536 L1683.28 682.536 L1682.72 682.536 L1682.16 682.536 L1681.6 682.536 L1681.04 682.536 L1680.48 682.536 L1679.92 682.536 L1679.36 682.536 L1678.8 682.536 L1678.24 682.536 L1677.68 682.536 L1677.13 682.536 L1676.57 682.536 L1676.01 682.536 L1675.45 682.536 L1674.89 682.536 L1674.33 682.536 L1673.77 682.536 L1673.21 682.536 L1672.65 682.536 L1672.09 682.536 L1671.53 682.536 L1670.97 682.536 L1670.41 682.536 L1669.85 682.536 L1669.3 682.536 L1668.74 682.536 L1668.18 682.536 L1667.62 682.536 L1667.06 682.536 L1666.5 682.536 L1665.94 682.536 L1665.38 682.536 L1664.82 682.536 L1664.26 682.536 L1663.7 682.536 L1663.14 682.536 L1662.58 682.536 L1662.03 682.536 L1661.47 682.536 L1660.91 682.536 L1660.35 682.536 L1659.79 682.536 L1659.23 682.536 L1658.67 682.536 L1658.11 682.536 L1657.55 682.536 L1656.99 682.536 L1656.43 682.536 L1655.87 682.536 L1655.31 682.536 L1654.76 682.536 L1654.2 682.536 L1653.64 682.536 L1653.08 682.536 L1652.52 682.536 L1651.96 682.536 L1651.4 682.536 L1650.84 682.536 L1650.28 682.536 L1649.72 682.536 L1649.16 682.536 L1648.6 682.536 L1648.04 682.536 L1647.48 682.536 L1646.93 682.536 L1646.37 682.536 L1645.81 682.536 L1645.25 682.536 L1644.69 682.536 L1644.13 682.536 L1643.57 682.536 L1643.01 682.536 L1642.45 682.536 L1641.89 682.536 L1641.33 682.536 L1640.77 682.536 L1640.21 682.536 L1639.66 682.536 L1639.1 682.536 L1638.54 682.536 L1637.98 682.536 L1637.42 682.536 L1636.86 682.536 L1636.3 682.536 L1635.74 682.536 L1635.18 682.536 L1634.62 682.536 L1634.06 682.536 L1633.5 682.536 L1632.94 682.536 L1632.39 682.536 L1631.83 682.536 L1631.27 682.536 L1630.71 682.536 L1630.15 682.536 L1629.59 682.536 L1629.03 682.536 L1628.47 682.536 L1627.91 682.536 L1627.35 682.536 L1626.79 682.536 L1626.23 682.536 L1625.67 682.536 L1625.11 682.536 L1624.56 682.536 L1624 682.536 L1623.44 682.536 L1622.88 682.536 L1622.32 682.536 L1621.76 682.536 L1621.2 682.536 L1620.64 682.536 L1620.08 682.536 L1619.52 682.536 L1618.96 682.536 L1618.4 682.536 L1617.84 682.536 L1617.29 682.536 L1616.73 682.536 L1616.17 682.536 L1615.61 682.536 L1615.05 682.536 L1614.49 682.536 L1613.93 682.536 L1613.37 682.536 L1612.81 682.536 L1612.25 682.536 L1611.69 682.536 L1611.13 682.536 L1610.57 682.536 L1610.02 682.536 L1609.46 682.536 L1608.9 682.536 L1608.34 682.536 L1607.78 682.536 L1607.22 682.536 L1606.66 682.536 L1606.1 682.536 L1605.54 682.536 L1604.98 682.536 L1604.42 682.536 L1603.86 682.536 L1603.3 682.536 L1602.74 682.536 L1602.19 682.536 L1601.63 682.536 L1601.07 682.536 L1600.51 682.536 L1599.95 682.536 L1599.39 682.536 L1598.83 682.536 L1598.27 682.536 L1597.71 682.536 L1597.15 682.536 L1596.59 682.536 L1596.03 682.536 L1595.47 682.536 L1594.92 682.536 L1594.36 682.536 L1593.8 682.536 L1593.24 682.536 L1592.68 682.536 L1592.12 682.536 L1591.56 682.536 L1591 682.536 L1590.44 682.536 L1589.88 682.536 L1589.32 682.536 L1588.76 682.536 L1588.2 682.536 L1587.65 682.536 L1587.09 682.536 L1586.53 682.536 L1585.97 682.536 L1585.41 682.536 L1584.85 682.536 L1584.29 682.536 L1583.73 682.536 L1583.17 682.536 L1582.61 682.536 L1582.05 682.536 L1581.49 682.536 L1580.93 682.536 L1580.37 682.536 L1579.82 682.536 L1579.26 682.536 L1578.7 682.536 L1578.14 682.536 L1577.58 682.536 L1577.02 682.536 L1576.46 682.536 L1575.9 682.536 L1575.34 682.536 L1574.78 682.536 L1574.22 682.536 L1573.66 682.536 L1573.1 682.536 L1572.55 682.536 L1571.99 682.536 L1571.43 682.536 L1570.87 682.536 L1570.31 682.536 L1569.75 682.536 L1569.19 682.536 L1568.63 682.536 L1568.07 682.536 L1567.51 682.536 L1566.95 682.536 L1566.39 682.536 L1565.83 682.536 L1565.28 682.536 L1564.72 682.536 L1564.16 682.536 L1563.6 682.536 L1563.04 682.536 L1562.48 682.536 L1561.92 682.536 L1561.36 682.536 L1560.8 682.536 L1560.24 682.536 L1559.68 682.536 L1559.12 682.536 L1558.56 682.536 L1558 682.536 L1557.45 682.536 L1556.89 682.536 L1556.33 682.536 L1555.77 682.536 L1555.21 682.536 L1554.65 682.536 L1554.09 682.536 L1553.53 682.536 L1552.97 682.536 L1552.41 682.536 L1551.85 682.536 L1551.29 682.536 L1550.73 682.536 L1550.18 682.536 L1549.62 682.536 L1549.06 682.536 L1548.5 682.536 L1547.94 682.536 L1547.38 682.536 L1546.82 682.536 L1546.26 682.536 L1545.7 682.536 L1545.14 682.536 L1544.58 682.536 L1544.02 682.536 L1543.46 682.536 L1542.9 682.536 L1542.35 682.536 L1541.79 682.536 L1541.23 682.536 L1540.67 682.536 L1540.11 682.536 L1539.55 682.536 L1538.99 682.536 L1538.43 682.536 L1537.87 682.536 L1537.31 682.536 L1536.75 682.536 L1536.19 682.536 L1535.63 682.536 L1535.08 682.536 L1534.52 682.536 L1533.96 682.536 L1533.4 682.536 L1532.84 682.536 L1532.28 682.536 L1531.72 682.536 L1531.16 682.536 L1530.6 682.536 L1530.04 682.536 L1529.48 682.536 L1528.92 682.536 L1528.36 682.536 L1527.81 682.536 L1527.25 682.536 L1526.69 682.536 L1526.13 682.536 L1525.57 682.536 L1525.01 682.536 L1524.45 682.536 L1523.89 682.536 L1523.33 682.536 L1522.77 682.536 L1522.21 682.536 L1521.65 682.536 L1521.09 682.536 L1520.53 682.536 L1519.98 682.536 L1519.42 682.536 L1518.86 682.536 L1518.3 682.536 L1517.74 682.536 L1517.18 682.536 L1516.62 682.536 L1516.06 682.536 L1515.5 682.536 L1514.94 682.536 L1514.38 682.536 L1513.82 682.536 L1513.26 682.536 L1512.71 682.536 L1512.15 682.536 L1511.59 682.536 L1511.03 682.536 L1510.47 682.536 L1509.91 682.536 L1509.35 682.536 L1508.79 682.536 L1508.23 682.536 L1507.67 682.536 L1507.11 682.536 L1506.55 682.536 L1505.99 682.536 L1505.44 682.536 L1504.88 682.536 L1504.32 682.536 L1503.76 682.536 L1503.2 682.536 L1502.64 682.536 L1502.08 682.536 L1501.52 682.536 L1500.96 682.536 L1500.4 682.536 L1499.84 682.536 L1499.28 682.536 L1498.72 682.536 L1498.16 682.536 L1497.61 682.536 L1497.05 682.536 L1496.49 682.536 L1495.93 682.536 L1495.37 682.536 L1494.81 682.536 L1494.25 682.536 L1493.69 682.536 L1493.13 682.536 L1492.57 682.536 L1492.01 682.536 L1491.45 682.536 L1490.89 682.536 L1490.34 682.536 L1489.78 682.536 L1489.22 682.536 L1488.66 682.536 L1488.1 682.536 L1487.54 682.536 L1486.98 682.536 L1486.42 682.536 L1485.86 682.536 L1485.3 682.536 L1484.74 682.536 L1484.18 682.536 L1483.62 682.536 L1483.07 682.536 L1482.51 682.536 L1481.95 682.536 L1481.39 682.536 L1480.83 682.536 L1480.27 682.536 L1479.71 682.536 L1479.15 682.536 L1478.59 682.536 L1478.03 682.536 L1477.47 682.536 L1476.91 682.536 L1476.35 682.536 L1475.79 682.536 L1475.24 682.536 L1474.68 682.536 L1474.12 682.536 L1473.56 682.536 L1473 682.536 L1472.44 682.536 L1471.88 682.536 L1471.32 682.536 L1470.76 682.536 L1470.2 682.536 L1469.64 682.536 L1469.08 682.536 L1468.52 682.536 L1467.97 682.536 L1467.41 682.536 L1466.85 682.536 L1466.29 682.536 L1465.73 682.536 L1465.17 682.536 L1464.61 682.536 L1464.05 682.536 L1463.49 682.536 L1462.93 682.536 L1462.37 682.536 L1461.81 682.536 L1461.25 682.536 L1460.7 682.536 L1460.14 682.536 L1459.58 682.536 L1459.02 682.536 L1458.46 682.536 L1457.9 682.536 L1457.34 682.536 L1456.78 682.536 L1456.22 682.536 L1455.66 682.536 L1455.1 682.536 L1454.54 682.536 L1453.98 682.536 L1453.42 682.536 L1452.87 682.536 L1452.31 682.536 L1451.75 682.536 L1451.19 682.536 L1450.63 682.536 L1450.07 682.536 L1449.51 682.536 L1448.95 682.536 L1448.39 682.536 L1447.83 682.536 L1447.27 682.536 L1446.71 682.536 L1446.15 682.536 L1445.6 682.536 L1445.04 682.536 L1444.48 682.536 L1443.92 682.536 L1443.36 682.536 L1442.8 682.536 L1442.24 682.536 L1441.68 682.536 L1441.12 682.536 L1440.56 682.536 L1440 682.536 L1439.44 682.536 L1438.88 682.536 L1438.33 682.536 L1437.77 682.536 L1437.21 682.536 L1436.65 682.536 L1436.09 682.536 L1435.53 682.536 L1434.97 682.536 L1434.41 682.536 L1433.85 682.536 L1433.29 682.536 L1432.73 682.536 L1432.17 682.536 L1431.61 682.536 L1431.05 682.536 L1430.5 682.536 L1429.94 682.536 L1429.38 682.536 L1428.82 682.536 L1428.26 682.536 L1427.7 682.536 L1427.14 682.536 L1426.58 682.536 L1426.02 682.536 L1425.46 682.536 L1424.9 682.536 L1424.34 682.536 L1423.78 682.536 L1423.23 682.536 L1422.67 682.536 L1422.11 682.536 L1421.55 682.536 L1420.99 682.536 L1420.43 682.536 L1419.87 682.536 L1419.31 682.536 L1418.75 682.536 L1418.19 682.536 L1417.63 682.536 L1417.07 682.536 L1416.51 682.536 L1415.95 682.536 L1415.4 682.536 L1414.84 682.536 L1414.28 682.536 L1413.72 682.536 L1413.16 682.536 L1412.6 682.536 L1412.04 682.536 L1411.48 682.536 L1410.92 682.536 L1410.36 682.536 L1409.8 682.536 L1409.24 682.536 L1408.68 682.536 L1408.13 682.536 L1407.57 682.536 L1407.01 682.536 L1406.45 682.536 L1405.89 682.536 L1405.33 682.536 L1404.77 682.536 L1404.21 682.536 L1403.65 682.536 L1403.09 682.536 L1402.53 682.536 L1401.97 682.536 L1401.41 682.536 L1400.86 682.536 L1400.3 682.536 L1399.74 682.536 L1399.18 682.536 L1398.62 682.536 L1398.06 682.536 L1397.5 682.536 L1396.94 682.536 L1396.38 682.536 L1395.82 682.536 L1395.26 682.536 L1394.7 682.536 L1394.14 682.536 L1393.58 682.536 L1393.03 682.536 L1392.47 682.536 L1391.91 682.536 L1391.35 682.536 L1390.79 682.536 L1390.23 682.536 L1389.67 682.536 L1389.11 682.536 L1388.55 682.536 L1387.99 682.536 L1387.43 682.536 L1386.87 682.536 L1386.31 682.536 L1385.76 682.536 L1385.2 682.536 L1384.64 682.536 L1384.08 682.536 L1383.52 682.536 L1382.96 682.536 L1382.4 682.536 L1381.84 682.536 L1381.28 682.536 L1380.72 682.536 L1380.16 682.536 L1379.6 682.536 L1379.04 682.536 L1378.49 682.536 L1377.93 682.536 L1377.37 682.536 L1376.81 682.536 L1376.25 682.536 L1375.69 682.536 L1375.13 682.536 L1374.57 682.536 L1374.01 682.536 L1373.45 682.536 L1372.89 682.536 L1372.33 682.536 L1371.77 682.536 L1371.21 682.536 L1370.66 682.536 L1370.1 682.536 L1369.54 682.536 L1368.98 682.536 L1368.42 682.536 L1367.86 682.536 L1367.3 682.536 L1366.74 682.536 L1366.18 682.536 L1365.62 682.536 L1365.06 682.536 L1364.5 682.536 L1363.94 682.536 L1363.39 682.536 L1362.83 682.536 L1362.27 682.536 L1361.71 682.536 L1361.15 682.536 L1360.59 682.536 L1360.03 682.536 L1359.47 682.536 L1358.91 682.536 L1358.35 682.536 L1357.79 682.536 L1357.23 682.536 L1356.67 682.536 L1356.12 682.536 L1355.56 682.536 L1355 682.536 L1354.44 682.536 L1353.88 682.536 L1353.32 682.536 L1352.76 682.536 L1352.2 682.536 L1351.64 682.536 L1351.08 682.536 L1350.52 682.536 L1349.96 682.536 L1349.4 682.536 L1348.84 682.536 L1348.29 682.536 L1347.73 682.536 L1347.17 682.536 L1346.61 682.536 L1346.05 682.536 L1345.49 682.536 L1344.93 682.536 L1344.37 682.536 L1343.81 682.536 L1343.25 682.536 L1342.69 682.536 L1342.13 682.536 L1341.57 682.536 L1341.02 682.536 L1340.46 682.536 L1339.9 682.536 L1339.34 682.536 L1338.78 682.536 L1338.22 682.536 L1337.66 682.536 L1337.1 682.536 L1336.54 682.536 L1335.98 682.536 L1335.42 682.536 L1334.86 682.536 L1334.3 682.536 L1333.75 682.536 L1333.19 682.536 L1332.63 682.536 L1332.07 682.536 L1331.51 682.536 L1330.95 682.536 L1330.39 682.536 L1329.83 682.536 L1329.27 682.536 L1328.71 682.536 L1328.15 682.536 L1327.59 682.536 L1327.03 682.536 L1326.47 682.536 L1325.92 682.536 L1325.36 682.536 L1324.8 682.536 L1324.24 682.536 L1323.68 682.536 L1323.12 682.536 L1322.56 682.536 L1322 682.536 L1321.44 682.536 L1320.88 682.536 L1320.32 682.536 L1319.76 682.536 L1319.2 682.536 L1318.65 682.536 L1318.09 682.536 L1317.53 682.536 L1316.97 682.536 L1316.41 682.536 L1315.85 682.536 L1315.29 682.536 L1314.73 682.536 L1314.17 682.536 L1313.61 682.536 L1313.05 682.536 L1312.49 682.536 L1311.93 682.536 L1311.38 682.536 L1310.82 682.536 L1310.26 682.536 L1309.7 682.536 L1309.14 682.536 L1308.58 682.536 L1308.02 682.536 L1307.46 682.536 L1306.9 682.536 L1306.34 682.536 L1305.78 682.536 L1305.22 682.536 L1304.66 682.536 L1304.1 682.536 L1303.55 682.536 L1302.99 682.536 L1302.43 682.536 L1301.87 682.536 L1301.31 682.536 L1300.75 682.536 L1300.19 682.536 L1299.63 682.536 L1299.07 682.536 L1298.51 682.536 L1297.95 682.536 L1297.39 682.536 L1296.83 682.536 L1296.28 682.536 L1295.72 682.536 L1295.16 682.536 L1294.6 682.536 L1294.04 682.536 L1293.48 682.536 L1292.92 682.536 L1292.36 682.536 L1291.8 682.536 L1291.24 682.536 L1290.68 682.536 L1290.12 682.536 L1289.56 682.536 L1289 682.536 L1288.45 682.536 L1287.89 682.536 L1287.33 682.536 L1286.77 682.536 L1286.21 682.536 L1285.65 682.536 L1285.09 682.536 L1284.53 682.536 L1283.97 682.536 L1283.41 682.536 L1282.85 682.536 L1282.29 682.536 L1281.73 682.536 L1281.18 682.536 L1280.62 682.536 L1280.06 682.536 L1279.5 682.536 L1278.94 682.536 L1278.38 682.536 L1277.82 682.536 L1277.26 682.536 L1276.7 682.536 L1276.14 682.536 L1275.58 682.536 L1275.02 682.536 L1274.46 682.536 L1273.91 682.536 L1273.35 682.536 L1272.79 682.536 L1272.23 682.536 L1271.67 682.536 L1271.11 682.536 L1270.55 682.536 L1269.99 682.536 L1269.43 682.536 L1268.87 682.536 L1268.31 682.536 L1267.75 682.536 L1267.19 682.536 L1266.63 682.536 L1266.08 682.536 L1265.52 682.536 L1264.96 682.536 L1264.4 682.536 L1263.84 682.536 L1263.28 682.536 L1262.72 682.536 L1262.16 682.536 L1261.6 682.536 L1261.04 682.536 L1260.48 682.536 L1259.92 682.536 L1259.36 682.536 L1258.81 682.536 L1258.25 682.536 L1257.69 682.536 L1257.13 682.536 L1256.57 682.536 L1256.01 682.536 L1255.45 682.536 L1254.89 682.536 L1254.33 682.536 L1253.77 682.536 L1253.21 682.536 L1252.65 682.536 L1252.09 682.536 L1251.54 682.536 L1250.98 682.536 L1250.42 682.536 L1249.86 682.536 L1249.3 682.536 L1248.74 682.536 L1248.18 682.536 L1247.62 682.536 L1247.06 682.536 L1246.5 682.536 L1245.94 682.536 L1245.38 682.536 L1244.82 682.536 L1244.26 682.536 L1243.71 682.536 L1243.15 682.536 L1242.59 682.536 L1242.03 682.536 L1241.47 682.536 L1240.91 682.536 L1240.35 682.536 L1239.79 682.536 L1239.23 682.536 L1238.67 682.536 L1238.11 682.536 L1237.55 682.536 L1236.99 682.536 L1236.44 682.536 L1235.88 682.536 L1235.32 682.536 L1234.76 682.536 L1234.2 682.536 L1233.64 682.536 L1233.08 682.536 L1232.52 682.536 L1231.96 682.536 L1231.4 682.536 L1230.84 682.536 L1230.28 682.536 L1229.72 682.536 L1229.17 682.536 L1228.61 682.536 L1228.05 682.536 L1227.49 682.536 L1226.93 682.536 L1226.37 682.536 L1225.81 682.536 L1225.25 682.536 L1224.69 682.536 L1224.13 682.536 L1223.57 682.536 L1223.01 682.536 L1222.45 682.536 L1221.89 682.536 L1221.34 682.536 L1220.78 682.536 L1220.22 682.536 L1219.66 682.536 L1219.1 682.536 L1218.54 682.536 L1217.98 682.536 L1217.42 682.536 L1216.86 682.536 L1216.3 682.536 L1215.74 682.536 L1215.18 682.536 L1214.62 682.536 L1214.07 682.536 L1213.51 682.536 L1212.95 682.536 L1212.39 682.536 L1211.83 682.536 L1211.27 682.536 L1210.71 682.536 L1210.15 682.536 L1209.59 682.536 L1209.03 682.536 L1208.47 682.536 L1207.91 682.536 L1207.35 682.536 L1206.8 682.536 L1206.24 682.536 L1205.68 682.536 L1205.12 682.536 L1204.56 682.536 L1204 682.536 L1203.44 682.536 L1202.88 682.536 L1202.32 682.536 L1201.76 682.536 L1201.2 682.536 L1200.64 682.536 L1200.08 682.536 L1199.52 682.536 L1198.97 682.536 L1198.41 682.536 L1197.85 682.536 L1197.29 682.536 L1196.73 682.536 L1196.17 682.536 L1195.61 682.536 L1195.05 682.536 L1194.49 682.536 L1193.93 682.536 L1193.37 682.536 L1192.81 682.536 L1192.25 682.536 L1191.7 682.536 L1191.14 682.536 L1190.58 682.536 L1190.02 682.536 L1189.46 682.536 L1188.9 682.536 L1188.34 682.536 L1187.78 682.536 L1187.22 682.536 L1186.66 682.536 L1186.1 682.536 L1185.54 682.536 L1184.98 682.536 L1184.43 682.536 L1183.87 682.536 L1183.31 682.536 L1182.75 682.536 L1182.19 682.536 L1181.63 682.536 L1181.07 682.536 L1180.51 682.536 L1179.95 682.536 L1179.39 682.536 L1178.83 682.536 L1178.27 682.536 L1177.71 682.536 L1177.15 682.536 L1176.6 682.536 L1176.04 682.536 L1175.48 682.536 L1174.92 682.536 L1174.36 682.536 L1173.8 682.536 L1173.24 682.536 L1172.68 682.536 L1172.12 682.536 L1171.56 682.536 L1171 682.536 L1170.44 682.536 L1169.88 682.536 L1169.33 682.536 L1168.77 682.536 L1168.21 682.536 L1167.65 682.536 L1167.09 682.536 L1166.53 682.536 L1165.97 682.536 L1165.41 682.536 L1164.85 682.536 L1164.29 682.536 L1163.73 682.536 L1163.17 682.536 L1162.61 682.536 L1162.05 682.536 L1161.5 682.536 L1160.94 682.536 L1160.38 682.536 L1159.82 682.536 L1159.26 682.536 L1158.7 682.536 L1158.14 682.536 L1157.58 682.536 L1157.02 682.536 L1156.46 682.536 L1155.9 682.536 L1155.34 682.536 L1154.78 682.536 L1154.23 682.536 L1153.67 682.536 L1153.11 682.536 L1152.55 682.536 L1151.99 682.536 L1151.43 682.536 L1150.87 682.536 L1150.31 682.536 L1149.75 682.536 L1149.19 682.536 L1148.63 682.536 L1148.07 682.536 L1147.51 682.536 L1146.96 682.536 L1146.4 682.536 L1145.84 682.536 L1145.28 682.536 L1144.72 682.536 L1144.16 682.536 L1143.6 682.536 L1143.04 682.536 L1142.48 682.536 L1141.92 682.536 L1141.36 682.536 L1140.8 682.536 L1140.24 682.536 L1139.68 682.536 L1139.13 682.536 L1138.57 682.536 L1138.01 682.536 L1137.45 682.536 L1136.89 682.536 L1136.33 682.536 L1135.77 682.536 L1135.21 682.536 L1134.65 682.536 L1134.09 682.536 L1133.53 682.536 L1132.97 682.536 L1132.41 682.536 L1131.86 682.536 L1131.3 682.536 L1130.74 682.536 L1130.18 682.536 L1129.62 682.536 L1129.06 682.536 L1128.5 682.536 L1127.94 682.536 L1127.38 682.536 L1126.82 682.536 L1126.26 682.536 L1125.7 682.536 L1125.14 682.536 L1124.59 682.536 L1124.03 682.536 L1123.47 682.536 L1122.91 682.536 L1122.35 682.536 L1121.79 682.536 L1121.23 682.536 L1120.67 682.536 L1120.11 682.536 L1119.55 682.536 L1118.99 682.536 L1118.43 682.536 L1117.87 682.536 L1117.31 682.536 L1116.76 682.536 L1116.2 682.536 L1115.64 682.536 L1115.08 682.536 L1114.52 682.536 L1113.96 682.536 L1113.4 682.536 L1112.84 682.536 L1112.28 682.536 L1111.72 682.536 L1111.16 682.536 L1110.6 682.536 L1110.04 682.536 L1109.49 682.536 L1108.93 682.536 L1108.37 682.536 L1107.81 682.536 L1107.25 682.536 L1106.69 682.536 L1106.13 682.536 L1105.57 682.536 L1105.01 682.536 L1104.45 682.536 L1103.89 682.536 L1103.33 682.536 L1102.77 682.536 L1102.22 682.536 L1101.66 682.536 L1101.1 682.536 L1100.54 682.536 L1099.98 682.536 L1099.42 682.536 L1098.86 682.536 L1098.3 682.536 L1097.74 682.536 L1097.18 682.536 L1096.62 682.536 L1096.06 682.536 L1095.5 682.536 L1094.94 682.536 L1094.39 682.536 L1093.83 682.536 L1093.27 682.536 L1092.71 682.536 L1092.15 682.536 L1091.59 682.536 L1091.03 682.536 L1090.47 682.536 L1089.91 682.536 L1089.35 682.536 L1088.79 682.536 L1088.23 682.536 L1087.67 682.536 L1087.12 682.536 L1086.56 682.536 L1086 682.536 L1085.44 682.536 L1084.88 682.536 L1084.32 682.536 L1083.76 682.536 L1083.2 682.536 L1082.64 682.536 L1082.08 682.536 L1081.52 682.536 L1080.96 682.536 L1080.4 682.536 L1079.85 682.536 L1079.29 682.536 L1078.73 682.536 L1078.17 682.536 L1077.61 682.536 L1077.05 682.536 L1076.49 682.536 L1075.93 682.536 L1075.37 682.536 L1074.81 682.536 L1074.25 682.536 L1073.69 682.536 L1073.13 682.536 L1072.57 682.536 L1072.02 682.536 L1071.46 682.536 L1070.9 682.536 L1070.34 682.536 L1069.78 682.536 L1069.22 682.536 L1068.66 682.536 L1068.1 682.536 L1067.54 682.536 L1066.98 682.536 L1066.42 682.536 L1065.86 682.536 L1065.3 682.536 L1064.75 682.536 L1064.19 682.536 L1063.63 682.536 L1063.07 682.536 L1062.51 682.536 L1061.95 682.536 L1061.39 682.536 L1060.83 682.536 L1060.27 682.536 L1059.71 682.536 L1059.15 682.536 L1058.59 682.536 L1058.03 682.536 L1057.48 682.536 L1056.92 682.536 L1056.36 682.536 L1055.8 682.536 L1055.24 682.536 L1054.68 682.536 L1054.12 682.536 L1053.56 682.536 L1053 682.536 L1052.44 682.536 L1051.88 682.536 L1051.32 682.536 L1050.76 682.536 L1050.2 682.536 L1049.65 682.536 L1049.09 682.536 L1048.53 682.536 L1047.97 682.536 L1047.41 682.536 L1046.85 682.536 L1046.29 682.536 L1045.73 682.536 L1045.17 682.536 L1044.61 682.536 L1044.05 682.536 L1043.49 682.536 L1042.93 682.536 L1042.38 682.536 L1041.82 682.536 L1041.26 682.536 L1040.7 682.536 L1040.14 682.536 L1039.58 682.536 L1039.02 682.536 L1038.46 682.536 L1037.9 682.536 L1037.34 682.536 L1036.78 682.536 L1036.22 682.536 L1035.66 682.536 L1035.1 682.536 L1034.55 682.536 L1033.99 682.536 L1033.43 682.536 L1032.87 682.536 L1032.31 682.536 L1031.75 682.536 L1031.19 682.536 L1030.63 682.536 L1030.07 682.536 L1029.51 682.536 L1028.95 682.536 L1028.39 682.536 L1027.83 682.536 L1027.28 682.536 L1026.72 682.536 L1026.16 682.536 L1025.6 682.536 L1025.04 682.536 L1024.48 682.536 L1023.92 682.536 L1023.36 682.536 L1022.8 682.536 L1022.24 682.536 L1021.68 682.536 L1021.12 682.536 L1020.56 682.536 L1020.01 682.536 L1019.45 682.536 L1018.89 682.536 L1018.33 682.536 L1017.77 682.536 L1017.21 682.536 L1016.65 682.536 L1016.09 682.536 L1015.53 682.536 L1014.97 682.536 L1014.41 682.536 L1013.85 682.536 L1013.29 682.536 L1012.73 682.536 L1012.18 682.536 L1011.62 682.536 L1011.06 682.536 L1010.5 682.536 L1009.94 682.536 L1009.38 682.536 L1008.82 682.536 L1008.26 682.536 L1007.7 682.536 L1007.14 682.536 L1006.58 682.536 L1006.02 682.536 L1005.46 682.536 L1004.91 682.536 L1004.35 682.536 L1003.79 682.536 L1003.23 682.536 L1002.67 682.536 L1002.11 682.536 L1001.55 682.536 L1000.99 682.536 L1000.43 682.536 L999.872 682.536 L999.313 682.536 L998.754 682.536 L998.194 682.536 L997.635 682.536 L997.076 682.536 L996.517 682.536 L995.957 682.536 L995.398 682.536 L994.839 682.536 L994.28 682.536 L993.72 682.536 L993.161 682.536 L992.602 682.536 L992.043 682.536 L991.483 682.536 L990.924 682.536 L990.365 682.536 L989.806 682.536 L989.246 682.536 L988.687 682.536 L988.128 682.536 L987.569 682.536 L987.009 682.536 L986.45 682.536 L985.891 682.536 L985.332 682.536 L984.772 682.536 L984.213 682.536 L983.654 682.536 L983.095 682.536 L982.535 682.536 L981.976 682.536 L981.417 682.536 L980.858 682.536 L980.298 682.536 L979.739 682.536 L979.18 682.536 L978.621 682.536 L978.061 682.536 L977.502 682.536 L976.943 682.536 L976.384 682.536 L975.824 682.536 L975.265 682.536 L974.706 682.536 L974.147 682.536 L973.587 682.536 L973.028 682.536 L972.469 682.536 L971.91 682.536 L971.35 682.536 L970.791 682.536 L970.232 682.536 L969.673 682.536 L969.113 682.536 L968.554 682.536 L967.995 682.536 L967.436 682.536 L966.876 682.536 L966.317 682.536 L965.758 682.536 L965.199 682.536 L964.639 682.536 L964.08 682.536 L963.521 682.536 L962.962 682.536 L962.402 682.536 L961.843 682.536 L961.284 682.536 L960.725 682.536 L960.165 682.536 L959.606 682.536 L959.047 682.536 L958.488 682.536 L957.928 682.536 L957.369 682.536 L956.81 682.536 L956.251 682.536 L955.691 682.536 L955.132 682.536 L954.573 682.536 L954.014 682.536 L953.454 682.536 L952.895 682.536 L952.336 682.536 L951.777 682.536 L951.217 682.536 L950.658 682.536 L950.099 682.536 L949.54 682.536 L948.98 682.536 L948.421 682.536 L947.862 682.536 L947.303 682.536 L946.743 682.536 L946.184 682.536 L945.625 682.536 L945.066 682.536 L944.506 682.536 L943.947 682.536 L943.388 682.536 L942.829 682.536 L942.269 682.536 L941.71 682.536 L941.151 682.536 L940.592 682.536 L940.032 682.536 L939.473 682.536 L938.914 682.536 L938.355 682.536 L937.795 682.536 L937.236 682.536 L936.677 682.536 L936.118 682.536 L935.558 682.536 L934.999 682.536 L934.44 682.536 L933.881 682.536 L933.321 682.536 L932.762 682.536 L932.203 682.536 L931.644 682.536 L931.084 682.536 L930.525 682.536 L929.966 682.536 L929.406 682.536 L928.847 682.536 L928.288 682.536 L927.729 682.536 L927.169 682.536 L926.61 682.536 L926.051 682.536 L925.492 682.536 L924.932 682.536 L924.373 682.536 L923.814 682.536 L923.255 682.536 L922.695 682.536 L922.136 682.536 L921.577 682.536 L921.018 682.536 L920.458 682.536 L919.899 682.536 L919.34 682.536 L918.781 682.536 L918.221 682.536 L917.662 682.536 L917.103 682.536 L916.544 682.536 L915.984 682.536 L915.425 682.536 L914.866 682.536 L914.307 682.536 L913.747 682.536 L913.188 682.536 L912.629 682.536 L912.07 682.536 L911.51 682.536 L910.951 682.536 L910.392 682.536 L909.833 682.536 L909.273 682.536 L908.714 682.536 L908.155 682.536 L907.596 682.536 L907.036 682.536 L906.477 682.536 L905.918 682.536 L905.359 682.536 L904.799 682.536 L904.24 682.536 L903.681 682.536 L903.122 682.536 L902.562 682.536 L902.003 682.536 L901.444 682.536 L900.885 682.536 L900.325 682.536 L899.766 682.536 L899.207 682.536 L898.648 682.536 L898.088 682.536 L897.529 682.536 L896.97 682.536 L896.411 682.536 L895.851 682.536 L895.292 682.536 L894.733 682.536 L894.174 682.536 L893.614 682.536 L893.055 682.536 L892.496 682.536 L891.937 682.536 L891.377 682.536 L890.818 682.536 L890.259 682.536 L889.7 682.536 L889.14 682.536 L888.581 682.536 L888.022 682.536 L887.463 682.536 L886.903 682.536 L886.344 682.536 L885.785 682.536 L885.226 682.536 L884.666 682.536 L884.107 682.536 L883.548 682.536 L882.989 682.536 L882.429 682.536 L881.87 682.536 L881.311 682.536 L880.752 682.536 L880.192 682.536 L879.633 682.536 L879.074 682.536 L878.515 682.536 L877.955 682.536 L877.396 682.536 L876.837 682.536 L876.278 682.536 L875.718 682.536 L875.159 682.536 L874.6 682.536 L874.041 682.536 L873.481 682.536 L872.922 682.536 L872.363 682.536 L871.804 682.536 L871.244 682.536 L870.685 682.536 L870.126 682.536 L869.567 682.536 L869.007 682.536 L868.448 682.536 L867.889 682.536 L867.33 682.536 L866.77 682.536 L866.211 682.536 L865.652 682.536 L865.093 682.536 L864.533 682.536 L863.974 682.536 L863.415 682.536 L862.856 682.536 L862.296 682.536 L861.737 682.536 L861.178 682.536 L860.619 682.536 L860.059 682.536 L859.5 682.536 L858.941 682.536 L858.382 682.536 L857.822 682.536 L857.263 682.536 L856.704 682.536 L856.145 682.536 L855.585 682.536 L855.026 682.536 L854.467 682.536 L853.908 682.536 L853.348 682.536 L852.789 682.536 L852.23 682.536 L851.671 682.536 L851.111 682.536 L850.552 682.536 L849.993 682.536 L849.434 682.536 L848.874 682.536 L848.315 682.536 L847.756 682.536 L847.197 682.536 L846.637 682.536 L846.078 682.536 L845.519 682.536 L844.96 682.536 L844.4 682.536 L843.841 682.536 L843.282 682.536 L842.723 682.536 L842.163 682.536 L841.604 682.536 L841.045 682.536 L840.486 682.536 L839.926 682.536 L839.367 682.536 L838.808 682.536 L838.249 682.536 L837.689 682.536 L837.13 682.536 L836.571 682.536 L836.012 682.536 L835.452 682.536 L834.893 682.536 L834.334 682.536 L833.775 682.536 L833.215 682.536 L832.656 682.536 L832.097 682.536 L831.538 682.536 L830.978 682.536 L830.419 682.536 L829.86 682.536 L829.301 682.536 L828.741 682.536 L828.182 682.536 L827.623 682.536 L827.064 682.536 L826.504 682.536 L825.945 682.536 L825.386 682.536 L824.827 682.536 L824.267 682.536 L823.708 682.536 L823.149 682.536 L822.59 682.536 L822.03 682.536 L821.471 682.536 L820.912 682.536 L820.353 682.536 L819.793 682.536 L819.234 682.536 L818.675 682.536 L818.116 682.536 L817.556 682.536 L816.997 682.536 L816.438 682.536 L815.879 682.536 L815.319 682.536 L814.76 682.536 L814.201 682.536 L813.642 682.536 L813.082 682.536 L812.523 682.536 L811.964 682.536 L811.405 682.536 L810.845 682.536 L810.286 682.536 L809.727 682.536 L809.168 682.536 L808.608 682.536 L808.049 682.536 L807.49 682.536 L806.931 682.536 L806.371 682.536 L805.812 682.536 L805.253 682.536 L804.693 682.536 L804.134 682.536 L803.575 682.536 L803.016 682.536 L802.456 682.536 L801.897 682.536 L801.338 682.536 L800.779 682.536 L800.219 682.536 L799.66 682.536 L799.101 682.536 L798.542 682.536 L797.982 682.536 L797.423 682.536 L796.864 682.536 L796.305 682.536 L795.745 682.536 L795.186 682.536 L794.627 682.536 L794.068 682.536 L793.508 682.536 L792.949 682.536 L792.39 682.536 L791.831 682.536 L791.271 682.536 L790.712 682.536 L790.153 682.536 L789.594 682.536 L789.034 682.536 L788.475 682.536 L787.916 682.536 L787.357 682.536 L786.797 682.536 L786.238 682.536 L785.679 682.536 L785.12 682.536 L784.56 682.536 L784.001 682.536 L783.442 682.536 L782.883 682.536 L782.323 682.536 L781.764 682.536 L781.205 682.536 L780.646 682.536 L780.086 682.536 L779.527 682.536 L778.968 682.536 L778.409 682.536 L777.849 682.536 L777.29 682.536 L776.731 682.536 L776.172 682.536 L775.612 682.536 L775.053 682.536 L774.494 682.536 L773.935 682.536 L773.375 682.536 L772.816 682.536 L772.257 682.536 L771.698 682.536 L771.138 682.536 L770.579 682.536 L770.02 682.536 L769.461 682.536 L768.901 682.536 L768.342 682.536 L767.783 682.536 L767.224 682.536 L766.664 682.536 L766.105 682.536 L765.546 682.536 L764.987 682.536 L764.427 682.536 L763.868 682.536 L763.309 682.536 L762.75 682.536 L762.19 682.536 L761.631 682.536 L761.072 682.536 L760.513 682.536 L759.953 682.536 L759.394 682.536 L758.835 682.536 L758.276 682.536 L757.716 682.536 L757.157 682.536 L756.598 682.536 L756.039 682.536 L755.479 682.536 L754.92 682.536 L754.361 682.536 L753.802 682.536 L753.242 682.536 L752.683 682.536 L752.124 682.536 L751.565 682.536 L751.005 682.536 L750.446 682.536 L749.887 682.536 L749.328 682.536 L748.768 682.536 L748.209 682.536 L747.65 682.536 L747.091 682.536 L746.531 682.536 L745.972 682.536 L745.413 682.536 L744.854 682.536 L744.294 682.536 L743.735 682.536 L743.176 682.536 L742.617 682.536 L742.057 682.536 L741.498 682.536 L740.939 682.536 L740.38 682.536 L739.82 682.536 L739.261 682.536 L738.702 682.536 L738.143 682.536 L737.583 682.536 L737.024 682.536 L736.465 682.536 L735.906 682.536 L735.346 682.536 L734.787 682.536 L734.228 682.536 L733.669 682.536 L733.109 682.536 L732.55 682.536 L731.991 682.536 L731.432 682.536 L730.872 682.536 L730.313 682.536 L729.754 682.536 L729.195 682.536 L728.635 682.536 L728.076 682.536 L727.517 682.536 L726.958 682.536 L726.398 682.536 L725.839 682.536 L725.28 682.536 L724.721 682.536 L724.161 682.536 L723.602 682.536 L723.043 682.536 L722.484 682.536 L721.924 682.536 L721.365 682.536 L720.806 682.536 L720.247 682.536  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.24 720.806,683.24 721.365,683.24 721.924,683.24 722.484,683.24 723.043,683.24 723.602,683.24 724.161,683.24 724.721,683.24 725.28,683.24 725.839,683.24 726.398,683.24 726.958,683.24 727.517,683.24 728.076,683.24 728.635,683.24 729.195,683.24 729.754,683.24 730.313,683.24 730.872,683.24 731.432,683.24 731.991,683.24 732.55,683.24 733.109,683.24 733.669,683.24 734.228,683.24 734.787,683.24 735.346,683.24 735.906,683.24 736.465,683.24 737.024,683.24 737.583,683.24 738.143,683.24 738.702,683.24 739.261,683.24 739.82,683.24 740.38,683.24 740.939,683.24 741.498,683.24 742.057,683.24 742.617,683.24 743.176,683.24 743.735,683.24 744.294,683.24 744.854,683.24 745.413,683.24 745.972,683.24 746.531,683.24 747.091,683.24 747.65,683.24 748.209,683.24 748.768,683.24 749.328,683.24 749.887,683.24 750.446,683.24 751.005,683.24 751.565,683.24 752.124,683.24 752.683,683.24 753.242,683.24 753.802,683.24 754.361,683.24 754.92,683.24 755.479,683.24 756.039,683.24 756.598,683.24 757.157,683.24 757.716,683.24 758.276,683.24 758.835,683.24 759.394,683.24 759.953,683.24 760.513,683.24 761.072,683.24 761.631,683.24 762.19,683.24 762.75,683.24 763.309,683.24 763.868,683.24 764.427,683.24 764.987,683.24 765.546,683.24 766.105,683.24 766.664,683.24 767.224,683.24 767.783,683.24 768.342,683.24 768.901,683.24 769.461,683.24 770.02,683.24 770.579,683.24 771.138,683.24 771.698,683.24 772.257,683.24 772.816,683.24 773.375,683.24 773.935,683.24 774.494,683.24 775.053,683.24 775.612,683.24 776.172,683.24 776.731,683.24 777.29,683.24 777.849,683.24 778.409,683.24 778.968,683.24 779.527,683.24 780.086,683.24 780.646,683.24 781.205,683.24 781.764,683.24 782.323,683.24 782.883,683.24 783.442,683.24 784.001,683.24 784.56,683.24 785.12,683.24 785.679,683.24 786.238,683.24 786.797,683.24 787.357,683.24 787.916,683.24 788.475,683.24 789.034,683.24 789.594,683.24 790.153,683.24 790.712,683.24 791.271,683.24 791.831,683.24 792.39,683.24 792.949,683.24 793.508,683.24 794.068,683.24 794.627,683.24 795.186,683.24 795.745,683.24 796.305,683.24 796.864,683.24 797.423,683.24 797.982,683.24 798.542,683.24 799.101,683.24 799.66,683.24 800.219,683.24 800.779,683.24 801.338,683.24 801.897,683.24 802.456,683.24 803.016,683.24 803.575,683.24 804.134,683.24 804.693,683.24 805.253,683.24 805.812,683.24 806.371,683.24 806.931,683.24 807.49,683.24 808.049,683.24 808.608,683.24 809.168,683.24 809.727,683.24 810.286,683.24 810.845,683.24 811.405,683.24 811.964,683.24 812.523,683.24 813.082,683.24 813.642,683.24 814.201,683.24 814.76,683.24 815.319,683.24 815.879,683.24 816.438,683.24 816.997,683.24 817.556,683.24 818.116,683.24 818.675,683.24 819.234,683.24 819.793,683.24 820.353,683.24 820.912,683.24 821.471,683.24 822.03,683.24 822.59,683.24 823.149,683.24 823.708,683.24 824.267,683.24 824.827,683.24 825.386,683.24 825.945,683.24 826.504,683.24 827.064,683.24 827.623,683.24 828.182,683.24 828.741,683.24 829.301,683.24 829.86,683.24 830.419,683.24 830.978,683.24 831.538,683.24 832.097,683.24 832.656,683.24 833.215,683.24 833.775,683.24 834.334,683.24 834.893,683.24 835.452,683.24 836.012,683.24 836.571,683.24 837.13,683.24 837.689,683.24 838.249,683.24 838.808,683.24 839.367,683.24 839.926,683.24 840.486,683.24 841.045,683.24 841.604,683.24 842.163,683.24 842.723,683.24 843.282,683.24 843.841,683.24 844.4,683.24 844.96,683.24 845.519,683.24 846.078,683.24 846.637,683.24 847.197,683.24 847.756,683.24 848.315,683.24 848.874,683.24 849.434,683.24 849.993,683.24 850.552,683.24 851.111,683.24 851.671,683.24 852.23,683.24 852.789,683.24 853.348,683.24 853.908,683.24 854.467,683.24 855.026,683.24 855.585,683.24 856.145,683.24 856.704,683.24 857.263,683.24 857.822,683.24 858.382,683.24 858.941,683.24 859.5,683.24 860.059,683.24 860.619,683.24 861.178,683.24 861.737,683.24 862.296,683.24 862.856,683.24 863.415,683.24 863.974,683.24 864.533,683.24 865.093,683.24 865.652,683.24 866.211,683.24 866.77,683.24 867.33,683.24 867.889,683.24 868.448,683.24 869.007,683.24 869.567,683.24 870.126,683.24 870.685,683.24 871.244,683.24 871.804,683.24 872.363,683.24 872.922,683.24 873.481,683.24 874.041,683.24 874.6,683.24 875.159,683.24 875.718,683.24 876.278,683.24 876.837,683.24 877.396,683.24 877.955,683.24 878.515,683.24 879.074,683.24 879.633,683.24 880.192,683.24 880.752,683.24 881.311,683.24 881.87,683.24 882.429,683.24 882.989,683.24 883.548,683.24 884.107,683.24 884.666,683.24 885.226,683.24 885.785,683.24 886.344,683.24 886.903,683.24 887.463,683.24 888.022,683.24 888.581,683.24 889.14,683.24 889.7,683.24 890.259,683.24 890.818,683.24 891.377,683.24 891.937,683.24 892.496,683.24 893.055,683.24 893.614,683.24 894.174,683.24 894.733,683.24 895.292,683.24 895.851,683.24 896.411,683.24 896.97,683.24 897.529,683.24 898.088,683.24 898.648,683.24 899.207,683.24 899.766,683.24 900.325,683.24 900.885,683.24 901.444,683.24 902.003,683.24 902.562,683.24 903.122,683.24 903.681,683.24 904.24,683.24 904.799,683.24 905.359,683.24 905.918,683.24 906.477,683.24 907.036,683.24 907.596,683.24 908.155,683.24 908.714,683.24 909.273,683.24 909.833,683.24 910.392,683.24 910.951,683.24 911.51,683.24 912.07,683.24 912.629,683.24 913.188,683.24 913.747,683.24 914.307,683.24 914.866,683.24 915.425,683.24 915.984,683.24 916.544,683.24 917.103,683.24 917.662,683.24 918.221,683.24 918.781,683.24 919.34,683.24 919.899,683.24 920.458,683.24 921.018,683.24 921.577,683.24 922.136,683.24 922.695,683.24 923.255,683.24 923.814,683.24 924.373,683.24 924.932,683.24 925.492,683.24 926.051,683.24 926.61,683.24 927.169,683.24 927.729,683.24 928.288,683.24 928.847,683.24 929.406,683.24 929.966,683.24 930.525,683.24 931.084,683.24 931.644,683.24 932.203,683.24 932.762,683.24 933.321,683.24 933.881,683.24 934.44,683.24 934.999,683.24 935.558,683.24 936.118,683.24 936.677,683.24 937.236,683.24 937.795,683.24 938.355,683.24 938.914,683.24 939.473,683.24 940.032,683.24 940.592,683.24 941.151,683.24 941.71,683.24 942.269,683.24 942.829,683.24 943.388,683.24 943.947,683.24 944.506,683.24 945.066,683.24 945.625,683.24 946.184,683.24 946.743,683.24 947.303,683.24 947.862,683.24 948.421,683.24 948.98,683.24 949.54,683.24 950.099,683.24 950.658,683.24 951.217,683.24 951.777,683.24 952.336,683.24 952.895,683.24 953.454,683.24 954.014,683.24 954.573,683.24 955.132,683.24 955.691,683.24 956.251,683.24 956.81,683.24 957.369,683.24 957.928,683.24 958.488,683.24 959.047,683.24 959.606,683.24 960.165,683.24 960.725,683.24 961.284,683.24 961.843,683.24 962.402,683.24 962.962,683.24 963.521,683.24 964.08,683.24 964.639,683.24 965.199,683.24 965.758,683.24 966.317,683.24 966.876,683.24 967.436,683.24 967.995,683.24 968.554,683.24 969.113,683.24 969.673,683.24 970.232,683.24 970.791,683.24 971.35,683.24 971.91,683.24 972.469,683.24 973.028,683.24 973.587,683.24 974.147,683.24 974.706,683.24 975.265,683.24 975.824,683.24 976.384,683.24 976.943,683.24 977.502,683.24 978.061,683.24 978.621,683.24 979.18,683.24 979.739,683.24 980.298,683.24 980.858,683.24 981.417,683.24 981.976,683.24 982.535,683.24 983.095,683.24 983.654,683.24 984.213,683.24 984.772,683.24 985.332,683.24 985.891,683.24 986.45,683.24 987.009,683.24 987.569,683.24 988.128,683.24 988.687,683.24 989.246,683.24 989.806,683.24 990.365,683.24 990.924,683.24 991.483,683.24 992.043,683.24 992.602,683.24 993.161,683.24 993.72,683.24 994.28,683.24 994.839,683.24 995.398,683.24 995.957,683.24 996.517,683.24 997.076,683.24 997.635,683.24 998.194,683.24 998.754,683.24 999.313,683.24 999.872,683.24 1000.43,683.24 1000.99,683.24 1001.55,683.24 1002.11,683.24 1002.67,683.24 1003.23,683.24 1003.79,683.24 1004.35,683.24 1004.91,683.24 1005.46,683.24 1006.02,683.24 1006.58,683.24 1007.14,683.24 1007.7,683.24 1008.26,683.24 1008.82,683.24 1009.38,683.24 1009.94,683.24 1010.5,683.24 1011.06,683.24 1011.62,683.24 1012.18,683.24 1012.73,683.24 1013.29,683.24 1013.85,683.24 1014.41,683.24 1014.97,683.24 1015.53,683.24 1016.09,683.24 1016.65,683.24 1017.21,683.24 1017.77,683.24 1018.33,683.24 1018.89,683.24 1019.45,683.24 1020.01,683.24 1020.56,683.24 1021.12,683.24 1021.68,683.24 1022.24,683.24 1022.8,683.24 1023.36,683.24 1023.92,683.24 1024.48,683.24 1025.04,683.24 1025.6,683.24 1026.16,683.24 1026.72,683.24 1027.28,683.24 1027.83,683.24 1028.39,683.24 1028.95,683.24 1029.51,683.24 1030.07,683.24 1030.63,683.24 1031.19,683.24 1031.75,683.24 1032.31,683.24 1032.87,683.24 1033.43,683.24 1033.99,683.24 1034.55,683.24 1035.1,683.24 1035.66,683.24 1036.22,683.24 1036.78,683.24 1037.34,683.24 1037.9,683.24 1038.46,683.24 1039.02,683.24 1039.58,683.24 1040.14,683.24 1040.7,683.24 1041.26,683.24 1041.82,683.24 1042.38,683.24 1042.93,683.24 1043.49,683.24 1044.05,683.24 1044.61,683.24 1045.17,683.24 1045.73,683.24 1046.29,683.24 1046.85,683.24 1047.41,683.24 1047.97,683.24 1048.53,683.24 1049.09,683.24 1049.65,683.24 1050.2,683.24 1050.76,683.24 1051.32,683.24 1051.88,683.24 1052.44,683.24 1053,683.24 1053.56,683.24 1054.12,683.24 1054.68,683.24 1055.24,683.24 1055.8,683.24 1056.36,683.24 1056.92,683.24 1057.48,683.24 1058.03,683.24 1058.59,683.24 1059.15,683.24 1059.71,683.24 1060.27,683.24 1060.83,683.24 1061.39,683.24 1061.95,683.24 1062.51,683.24 1063.07,683.24 1063.63,683.24 1064.19,683.24 1064.75,683.24 1065.3,683.24 1065.86,683.24 1066.42,683.24 1066.98,683.24 1067.54,683.24 1068.1,683.24 1068.66,683.24 1069.22,683.24 1069.78,683.24 1070.34,683.24 1070.9,683.24 1071.46,683.24 1072.02,683.24 1072.57,683.24 1073.13,683.24 1073.69,683.24 1074.25,683.24 1074.81,683.24 1075.37,683.24 1075.93,683.24 1076.49,683.24 1077.05,683.24 1077.61,683.24 1078.17,683.24 1078.73,683.24 1079.29,683.24 1079.85,683.24 1080.4,683.24 1080.96,683.24 1081.52,683.24 1082.08,683.24 1082.64,683.24 1083.2,683.24 1083.76,683.24 1084.32,683.24 1084.88,683.24 1085.44,683.24 1086,683.24 1086.56,683.24 1087.12,683.24 1087.67,683.24 1088.23,683.24 1088.79,683.24 1089.35,683.24 1089.91,683.24 1090.47,683.24 1091.03,683.24 1091.59,683.24 1092.15,683.24 1092.71,683.24 1093.27,683.24 1093.83,683.24 1094.39,683.24 1094.94,683.24 1095.5,683.24 1096.06,683.24 1096.62,683.24 1097.18,683.24 1097.74,683.24 1098.3,683.24 1098.86,683.24 1099.42,683.24 1099.98,683.24 1100.54,683.24 1101.1,683.24 1101.66,683.24 1102.22,683.24 1102.77,683.24 1103.33,683.24 1103.89,683.24 1104.45,683.24 1105.01,683.24 1105.57,683.24 1106.13,683.24 1106.69,683.24 1107.25,683.24 1107.81,683.24 1108.37,683.24 1108.93,683.24 1109.49,683.24 1110.04,683.24 1110.6,683.24 1111.16,683.24 1111.72,683.24 1112.28,683.24 1112.84,683.24 1113.4,683.24 1113.96,683.24 1114.52,683.24 1115.08,683.24 1115.64,683.24 1116.2,683.24 1116.76,683.24 1117.31,683.24 1117.87,683.24 1118.43,683.24 1118.99,683.24 1119.55,683.24 1120.11,683.24 1120.67,683.24 1121.23,683.24 1121.79,683.24 1122.35,683.24 1122.91,683.24 1123.47,683.24 1124.03,683.24 1124.59,683.24 1125.14,683.24 1125.7,683.24 1126.26,683.24 1126.82,683.24 1127.38,683.24 1127.94,683.24 1128.5,683.24 1129.06,683.24 1129.62,683.24 1130.18,683.24 1130.74,683.24 1131.3,683.24 1131.86,683.24 1132.41,683.24 1132.97,683.24 1133.53,683.24 1134.09,683.24 1134.65,683.24 1135.21,683.24 1135.77,683.24 1136.33,683.24 1136.89,683.24 1137.45,683.24 1138.01,683.24 1138.57,683.24 1139.13,683.24 1139.68,683.24 1140.24,683.24 1140.8,683.24 1141.36,683.24 1141.92,683.24 1142.48,683.24 1143.04,683.24 1143.6,683.24 1144.16,683.24 1144.72,683.24 1145.28,683.24 1145.84,683.24 1146.4,683.24 1146.96,683.24 1147.51,683.24 1148.07,683.24 1148.63,683.24 1149.19,683.24 1149.75,683.24 1150.31,683.24 1150.87,683.24 1151.43,683.24 1151.99,683.24 1152.55,683.24 1153.11,683.24 1153.67,683.24 1154.23,683.24 1154.78,683.24 1155.34,683.24 1155.9,683.24 1156.46,683.24 1157.02,683.24 1157.58,683.24 1158.14,683.24 1158.7,683.24 1159.26,683.24 1159.82,683.24 1160.38,683.24 1160.94,683.24 1161.5,683.24 1162.05,683.24 1162.61,683.24 1163.17,683.24 1163.73,683.24 1164.29,683.24 1164.85,683.24 1165.41,683.24 1165.97,683.24 1166.53,683.24 1167.09,683.24 1167.65,683.24 1168.21,683.24 1168.77,683.24 1169.33,683.24 1169.88,683.24 1170.44,683.24 1171,683.24 1171.56,683.24 1172.12,683.24 1172.68,683.24 1173.24,683.24 1173.8,683.24 1174.36,683.24 1174.92,683.24 1175.48,683.24 1176.04,683.24 1176.6,683.24 1177.15,683.24 1177.71,683.24 1178.27,683.24 1178.83,683.24 1179.39,683.24 1179.95,683.24 1180.51,683.24 1181.07,683.24 1181.63,683.24 1182.19,683.24 1182.75,683.24 1183.31,683.24 1183.87,683.24 1184.43,683.24 1184.98,683.24 1185.54,683.24 1186.1,683.24 1186.66,683.24 1187.22,683.24 1187.78,683.24 1188.34,683.24 1188.9,683.24 1189.46,683.24 1190.02,683.24 1190.58,683.24 1191.14,683.24 1191.7,683.24 1192.25,683.24 1192.81,683.24 1193.37,683.24 1193.93,683.24 1194.49,683.24 1195.05,683.24 1195.61,683.24 1196.17,683.24 1196.73,683.24 1197.29,683.24 1197.85,683.24 1198.41,683.24 1198.97,683.24 1199.52,683.24 1200.08,683.24 1200.64,683.24 1201.2,683.24 1201.76,683.24 1202.32,683.24 1202.88,683.24 1203.44,683.24 1204,683.24 1204.56,683.24 1205.12,683.24 1205.68,683.24 1206.24,683.24 1206.8,683.24 1207.35,683.24 1207.91,683.24 1208.47,683.24 1209.03,683.24 1209.59,683.24 1210.15,683.24 1210.71,683.24 1211.27,683.24 1211.83,683.24 1212.39,683.24 1212.95,683.24 1213.51,683.24 1214.07,683.24 1214.62,683.24 1215.18,683.24 1215.74,683.24 1216.3,683.24 1216.86,683.24 1217.42,683.24 1217.98,683.24 1218.54,683.24 1219.1,683.24 1219.66,683.24 1220.22,683.24 1220.78,683.24 1221.34,683.24 1221.89,683.24 1222.45,683.24 1223.01,683.24 1223.57,683.24 1224.13,683.24 1224.69,683.24 1225.25,683.24 1225.81,683.24 1226.37,683.24 1226.93,683.24 1227.49,683.24 1228.05,683.24 1228.61,683.24 1229.17,683.24 1229.72,683.24 1230.28,683.24 1230.84,683.24 1231.4,683.24 1231.96,683.24 1232.52,683.24 1233.08,683.24 1233.64,683.24 1234.2,683.24 1234.76,683.24 1235.32,683.24 1235.88,683.24 1236.44,683.24 1236.99,683.24 1237.55,683.24 1238.11,683.24 1238.67,683.24 1239.23,683.24 1239.79,683.24 1240.35,683.24 1240.91,683.24 1241.47,683.24 1242.03,683.24 1242.59,683.24 1243.15,683.24 1243.71,683.24 1244.26,683.24 1244.82,683.24 1245.38,683.24 1245.94,683.24 1246.5,683.24 1247.06,683.24 1247.62,683.24 1248.18,683.24 1248.74,683.24 1249.3,683.24 1249.86,683.24 1250.42,683.24 1250.98,683.24 1251.54,683.24 1252.09,683.24 1252.65,683.24 1253.21,683.24 1253.77,683.24 1254.33,683.24 1254.89,683.24 1255.45,683.24 1256.01,683.24 1256.57,683.24 1257.13,683.24 1257.69,683.24 1258.25,683.24 1258.81,683.24 1259.36,683.24 1259.92,683.24 1260.48,683.24 1261.04,683.24 1261.6,683.24 1262.16,683.24 1262.72,683.24 1263.28,683.24 1263.84,683.24 1264.4,683.24 1264.96,683.24 1265.52,683.24 1266.08,683.24 1266.63,683.24 1267.19,683.24 1267.75,683.24 1268.31,683.24 1268.87,683.24 1269.43,683.24 1269.99,683.24 1270.55,683.24 1271.11,683.24 1271.67,683.24 1272.23,683.24 1272.79,683.24 1273.35,683.24 1273.91,683.24 1274.46,683.24 1275.02,683.24 1275.58,683.24 1276.14,683.24 1276.7,683.24 1277.26,683.24 1277.82,683.24 1278.38,683.24 1278.94,683.24 1279.5,683.24 1280.06,683.24 1280.62,683.24 1281.18,683.24 1281.73,683.24 1282.29,683.24 1282.85,683.24 1283.41,683.24 1283.97,683.24 1284.53,683.24 1285.09,683.24 1285.65,683.24 1286.21,683.24 1286.77,683.24 1287.33,683.24 1287.89,683.24 1288.45,683.24 1289,683.24 1289.56,683.24 1290.12,683.24 1290.68,683.24 1291.24,683.24 1291.8,683.24 1292.36,683.24 1292.92,683.24 1293.48,683.24 1294.04,683.24 1294.6,683.24 1295.16,683.24 1295.72,683.24 1296.28,683.24 1296.83,683.24 1297.39,683.24 1297.95,683.24 1298.51,683.24 1299.07,683.24 1299.63,683.24 1300.19,683.24 1300.75,683.24 1301.31,683.24 1301.87,683.24 1302.43,683.24 1302.99,683.24 1303.55,683.24 1304.1,683.24 1304.66,683.24 1305.22,683.24 1305.78,683.24 1306.34,683.24 1306.9,683.24 1307.46,683.24 1308.02,683.24 1308.58,683.24 1309.14,683.24 1309.7,683.24 1310.26,683.24 1310.82,683.24 1311.38,683.24 1311.93,683.24 1312.49,683.24 1313.05,683.24 1313.61,683.24 1314.17,683.24 1314.73,683.24 1315.29,683.24 1315.85,683.24 1316.41,683.24 1316.97,683.24 1317.53,683.24 1318.09,683.24 1318.65,683.24 1319.2,683.24 1319.76,683.24 1320.32,683.24 1320.88,683.24 1321.44,683.24 1322,683.24 1322.56,683.24 1323.12,683.24 1323.68,683.24 1324.24,683.24 1324.8,683.24 1325.36,683.24 1325.92,683.24 1326.47,683.24 1327.03,683.24 1327.59,683.24 1328.15,683.24 1328.71,683.24 1329.27,683.24 1329.83,683.24 1330.39,683.24 1330.95,683.24 1331.51,683.24 1332.07,683.24 1332.63,683.24 1333.19,683.24 1333.75,683.24 1334.3,683.24 1334.86,683.24 1335.42,683.24 1335.98,683.24 1336.54,683.24 1337.1,683.24 1337.66,683.24 1338.22,683.24 1338.78,683.24 1339.34,683.24 1339.9,683.24 1340.46,683.24 1341.02,683.24 1341.57,683.24 1342.13,683.24 1342.69,683.24 1343.25,683.24 1343.81,683.24 1344.37,683.24 1344.93,683.24 1345.49,683.24 1346.05,683.24 1346.61,683.24 1347.17,683.24 1347.73,683.24 1348.29,683.24 1348.84,683.24 1349.4,683.24 1349.96,683.24 1350.52,683.24 1351.08,683.24 1351.64,683.24 1352.2,683.24 1352.76,683.24 1353.32,683.24 1353.88,683.24 1354.44,683.24 1355,683.24 1355.56,683.24 1356.12,683.24 1356.67,683.24 1357.23,683.24 1357.79,683.24 1358.35,683.24 1358.91,683.24 1359.47,683.24 1360.03,683.24 1360.59,683.24 1361.15,683.24 1361.71,683.24 1362.27,683.24 1362.83,683.24 1363.39,683.24 1363.94,683.24 1364.5,683.24 1365.06,683.24 1365.62,683.24 1366.18,683.24 1366.74,683.24 1367.3,683.24 1367.86,683.24 1368.42,683.24 1368.98,683.24 1369.54,683.24 1370.1,683.24 1370.66,683.24 1371.21,683.24 1371.77,683.24 1372.33,683.24 1372.89,683.24 1373.45,683.24 1374.01,683.24 1374.57,683.24 1375.13,683.24 1375.69,683.24 1376.25,683.24 1376.81,683.24 1377.37,683.24 1377.93,683.24 1378.49,683.24 1379.04,683.24 1379.6,683.24 1380.16,683.24 1380.72,683.24 1381.28,683.24 1381.84,683.24 1382.4,683.24 1382.96,683.24 1383.52,683.24 1384.08,683.24 1384.64,683.24 1385.2,683.24 1385.76,683.24 1386.31,683.24 1386.87,683.24 1387.43,683.24 1387.99,683.24 1388.55,683.24 1389.11,683.24 1389.67,683.24 1390.23,683.24 1390.79,683.24 1391.35,683.24 1391.91,683.24 1392.47,683.24 1393.03,683.24 1393.58,683.24 1394.14,683.24 1394.7,683.24 1395.26,683.24 1395.82,683.24 1396.38,683.24 1396.94,683.24 1397.5,683.24 1398.06,683.24 1398.62,683.24 1399.18,683.24 1399.74,683.24 1400.3,683.24 1400.86,683.24 1401.41,683.24 1401.97,683.24 1402.53,683.24 1403.09,683.24 1403.65,683.24 1404.21,683.24 1404.77,683.24 1405.33,683.24 1405.89,683.24 1406.45,683.24 1407.01,683.24 1407.57,683.24 1408.13,683.24 1408.68,683.24 1409.24,683.24 1409.8,683.24 1410.36,683.24 1410.92,683.24 1411.48,683.24 1412.04,683.24 1412.6,683.24 1413.16,683.24 1413.72,683.24 1414.28,683.24 1414.84,683.24 1415.4,683.24 1415.95,683.24 1416.51,683.24 1417.07,683.24 1417.63,683.24 1418.19,683.24 1418.75,683.24 1419.31,683.24 1419.87,683.24 1420.43,683.24 1420.99,683.24 1421.55,683.24 1422.11,683.24 1422.67,683.24 1423.23,683.24 1423.78,683.24 1424.34,683.24 1424.9,683.24 1425.46,683.24 1426.02,683.24 1426.58,683.24 1427.14,683.24 1427.7,683.24 1428.26,683.24 1428.82,683.24 1429.38,683.24 1429.94,683.24 1430.5,683.24 1431.05,683.24 1431.61,683.24 1432.17,683.24 1432.73,683.24 1433.29,683.24 1433.85,683.24 1434.41,683.24 1434.97,683.24 1435.53,683.24 1436.09,683.24 1436.65,683.24 1437.21,683.24 1437.77,683.24 1438.33,683.24 1438.88,683.24 1439.44,683.24 1440,683.24 1440.56,683.24 1441.12,683.24 1441.68,683.24 1442.24,683.24 1442.8,683.24 1443.36,683.24 1443.92,683.24 1444.48,683.24 1445.04,683.24 1445.6,683.24 1446.15,683.24 1446.71,683.24 1447.27,683.24 1447.83,683.24 1448.39,683.24 1448.95,683.24 1449.51,683.24 1450.07,683.24 1450.63,683.24 1451.19,683.24 1451.75,683.24 1452.31,683.24 1452.87,683.24 1453.42,683.24 1453.98,683.24 1454.54,683.24 1455.1,683.24 1455.66,683.24 1456.22,683.24 1456.78,683.24 1457.34,683.24 1457.9,683.24 1458.46,683.24 1459.02,683.24 1459.58,683.24 1460.14,683.24 1460.7,683.24 1461.25,683.24 1461.81,683.24 1462.37,683.24 1462.93,683.24 1463.49,683.24 1464.05,683.24 1464.61,683.24 1465.17,683.24 1465.73,683.24 1466.29,683.24 1466.85,683.24 1467.41,683.24 1467.97,683.24 1468.52,683.24 1469.08,683.24 1469.64,683.24 1470.2,683.24 1470.76,683.24 1471.32,683.24 1471.88,683.24 1472.44,683.24 1473,683.24 1473.56,683.24 1474.12,683.24 1474.68,683.24 1475.24,683.24 1475.79,683.24 1476.35,683.24 1476.91,683.24 1477.47,683.24 1478.03,683.24 1478.59,683.24 1479.15,683.24 1479.71,683.24 1480.27,683.24 1480.83,683.24 1481.39,683.24 1481.95,683.24 1482.51,683.24 1483.07,683.24 1483.62,683.24 1484.18,683.24 1484.74,683.24 1485.3,683.24 1485.86,683.24 1486.42,683.24 1486.98,683.24 1487.54,683.24 1488.1,683.24 1488.66,683.24 1489.22,683.24 1489.78,683.24 1490.34,683.24 1490.89,683.24 1491.45,683.24 1492.01,683.24 1492.57,683.24 1493.13,683.24 1493.69,683.24 1494.25,683.24 1494.81,683.24 1495.37,683.24 1495.93,683.24 1496.49,683.24 1497.05,683.24 1497.61,683.24 1498.16,683.24 1498.72,683.24 1499.28,683.24 1499.84,683.24 1500.4,683.24 1500.96,683.24 1501.52,683.24 1502.08,683.24 1502.64,683.24 1503.2,683.24 1503.76,683.24 1504.32,683.24 1504.88,683.24 1505.44,683.24 1505.99,683.24 1506.55,683.24 1507.11,683.24 1507.67,683.24 1508.23,683.24 1508.79,683.24 1509.35,683.24 1509.91,683.24 1510.47,683.24 1511.03,683.24 1511.59,683.24 1512.15,683.24 1512.71,683.24 1513.26,683.24 1513.82,683.24 1514.38,683.24 1514.94,683.24 1515.5,683.24 1516.06,683.24 1516.62,683.24 1517.18,683.24 1517.74,683.24 1518.3,683.24 1518.86,683.24 1519.42,683.24 1519.98,683.24 1520.53,683.24 1521.09,683.24 1521.65,683.24 1522.21,683.24 1522.77,683.24 1523.33,683.24 1523.89,683.24 1524.45,683.24 1525.01,683.24 1525.57,683.24 1526.13,683.24 1526.69,683.24 1527.25,683.24 1527.81,683.24 1528.36,683.24 1528.92,683.24 1529.48,683.24 1530.04,683.24 1530.6,683.24 1531.16,683.24 1531.72,683.24 1532.28,683.24 1532.84,683.24 1533.4,683.24 1533.96,683.24 1534.52,683.24 1535.08,683.24 1535.63,683.24 1536.19,683.24 1536.75,683.24 1537.31,683.24 1537.87,683.24 1538.43,683.24 1538.99,683.24 1539.55,683.24 1540.11,683.24 1540.67,683.24 1541.23,683.24 1541.79,683.24 1542.35,683.24 1542.9,683.24 1543.46,683.24 1544.02,683.24 1544.58,683.24 1545.14,683.24 1545.7,683.24 1546.26,683.24 1546.82,683.24 1547.38,683.24 1547.94,683.24 1548.5,683.24 1549.06,683.24 1549.62,683.24 1550.18,683.24 1550.73,683.24 1551.29,683.24 1551.85,683.24 1552.41,683.24 1552.97,683.24 1553.53,683.24 1554.09,683.24 1554.65,683.24 1555.21,683.24 1555.77,683.24 1556.33,683.24 1556.89,683.24 1557.45,683.24 1558,683.24 1558.56,683.24 1559.12,683.24 1559.68,683.24 1560.24,683.24 1560.8,683.24 1561.36,683.24 1561.92,683.24 1562.48,683.24 1563.04,683.24 1563.6,683.24 1564.16,683.24 1564.72,683.24 1565.28,683.24 1565.83,683.24 1566.39,683.24 1566.95,683.24 1567.51,683.24 1568.07,683.24 1568.63,683.24 1569.19,683.24 1569.75,683.24 1570.31,683.24 1570.87,683.24 1571.43,683.24 1571.99,683.24 1572.55,683.24 1573.1,683.24 1573.66,683.24 1574.22,683.24 1574.78,683.24 1575.34,683.24 1575.9,683.24 1576.46,683.24 1577.02,683.24 1577.58,683.24 1578.14,683.24 1578.7,683.24 1579.26,683.24 1579.82,683.24 1580.37,683.24 1580.93,683.24 1581.49,683.24 1582.05,683.24 1582.61,683.24 1583.17,683.24 1583.73,683.24 1584.29,683.24 1584.85,683.24 1585.41,683.24 1585.97,683.24 1586.53,683.24 1587.09,683.24 1587.65,683.24 1588.2,683.24 1588.76,683.24 1589.32,683.24 1589.88,683.24 1590.44,683.24 1591,683.24 1591.56,683.24 1592.12,683.24 1592.68,683.24 1593.24,683.24 1593.8,683.24 1594.36,683.24 1594.92,683.24 1595.47,683.24 1596.03,683.24 1596.59,683.24 1597.15,683.24 1597.71,683.24 1598.27,683.24 1598.83,683.24 1599.39,683.24 1599.95,683.24 1600.51,683.24 1601.07,683.24 1601.63,683.24 1602.19,683.24 1602.74,683.24 1603.3,683.24 1603.86,683.24 1604.42,683.24 1604.98,683.24 1605.54,683.24 1606.1,683.24 1606.66,683.24 1607.22,683.24 1607.78,683.24 1608.34,683.24 1608.9,683.24 1609.46,683.24 1610.02,683.24 1610.57,683.24 1611.13,683.24 1611.69,683.24 1612.25,683.24 1612.81,683.24 1613.37,683.24 1613.93,683.24 1614.49,683.24 1615.05,683.24 1615.61,683.24 1616.17,683.24 1616.73,683.24 1617.29,683.24 1617.84,683.24 1618.4,683.24 1618.96,683.24 1619.52,683.24 1620.08,683.24 1620.64,683.24 1621.2,683.24 1621.76,683.24 1622.32,683.24 1622.88,683.24 1623.44,683.24 1624,683.24 1624.56,683.24 1625.11,683.24 1625.67,683.24 1626.23,683.24 1626.79,683.24 1627.35,683.24 1627.91,683.24 1628.47,683.24 1629.03,683.24 1629.59,683.24 1630.15,683.24 1630.71,683.24 1631.27,683.24 1631.83,683.24 1632.39,683.24 1632.94,683.24 1633.5,683.24 1634.06,683.24 1634.62,683.24 1635.18,683.24 1635.74,683.24 1636.3,683.24 1636.86,683.24 1637.42,683.24 1637.98,683.24 1638.54,683.24 1639.1,683.24 1639.66,683.24 1640.21,683.24 1640.77,683.24 1641.33,683.24 1641.89,683.24 1642.45,683.24 1643.01,683.24 1643.57,683.24 1644.13,683.24 1644.69,683.24 1645.25,683.24 1645.81,683.24 1646.37,683.24 1646.93,683.24 1647.48,683.24 1648.04,683.24 1648.6,683.24 1649.16,683.24 1649.72,683.24 1650.28,683.24 1650.84,683.24 1651.4,683.24 1651.96,683.24 1652.52,683.24 1653.08,683.24 1653.64,683.24 1654.2,683.24 1654.76,683.24 1655.31,683.24 1655.87,683.24 1656.43,683.24 1656.99,683.24 1657.55,683.24 1658.11,683.24 1658.67,683.24 1659.23,683.24 1659.79,683.24 1660.35,683.24 1660.91,683.24 1661.47,683.24 1662.03,683.24 1662.58,683.24 1663.14,683.24 1663.7,683.24 1664.26,683.24 1664.82,683.24 1665.38,683.24 1665.94,683.24 1666.5,683.24 1667.06,683.24 1667.62,683.24 1668.18,683.24 1668.74,683.24 1669.3,683.24 1669.85,683.24 1670.41,683.24 1670.97,683.24 1671.53,683.24 1672.09,683.24 1672.65,683.24 1673.21,683.24 1673.77,683.24 1674.33,683.24 1674.89,683.24 1675.45,683.24 1676.01,683.24 1676.57,683.24 1677.13,683.24 1677.68,683.24 1678.24,683.24 1678.8,683.24 1679.36,683.24 1679.92,683.24 1680.48,683.24 1681.04,683.24 1681.6,683.24 1682.16,683.24 1682.72,683.24 1683.28,683.24 1683.84,683.24 1684.4,683.24 1684.95,683.24 1685.51,683.24 1686.07,683.24 1686.63,683.24 1687.19,683.24 1687.75,683.24 1688.31,683.24 1688.87,683.24 1689.43,683.24 1689.99,683.24 1690.55,683.24 1691.11,683.24 1691.67,683.24 1692.23,683.24 1692.78,683.24 1693.34,683.24 1693.9,683.24 1694.46,683.24 1695.02,683.24 1695.58,683.24 1696.14,683.24 1696.7,683.24 1697.26,683.24 1697.82,683.24 1698.38,683.24 1698.94,683.24 1699.5,683.24 1700.05,683.24 1700.61,683.24 1701.17,683.24 1701.73,683.24 1702.29,683.24 1702.85,683.24 1703.41,683.24 1703.97,683.24 1704.53,683.24 1705.09,683.24 1705.65,683.24 1706.21,683.24 1706.77,683.24 1707.32,683.24 1707.88,683.24 1708.44,683.24 1709,683.24 1709.56,683.24 1710.12,683.24 1710.68,683.24 1711.24,683.24 1711.8,683.24 1712.36,683.24 1712.92,683.24 1713.48,683.24 1714.04,683.24 1714.6,683.24 1715.15,683.24 1715.71,683.24 1716.27,683.24 1716.83,683.24 1717.39,683.24 1717.95,683.24 1718.51,683.24 1719.07,683.24 1719.63,683.24 1720.19,683.24 1720.75,683.24 1721.31,683.24 1721.87,683.24 1722.42,683.24 1722.98,683.24 1723.54,683.24 1724.1,683.24 1724.66,683.24 1725.22,683.24 1725.78,683.24 1726.34,683.24 1726.9,683.24 1727.46,683.24 1728.02,683.24 1728.58,683.24 1729.14,683.24 1729.69,683.24 1730.25,683.24 1730.81,683.24 1731.37,683.24 1731.93,683.24 1732.49,683.24 1733.05,683.24 1733.61,683.24 1734.17,683.24 1734.73,683.24 1735.29,683.24 1735.85,683.24 1736.41,683.24 1736.97,683.24 1737.52,683.24 1738.08,683.24 1738.64,683.24 1739.2,683.24 1739.76,683.24 1740.32,683.24 1740.88,683.24 1741.44,683.24 1742,683.24 1742.56,683.24 1743.12,683.24 1743.68,683.24 1744.24,683.24 1744.79,683.24 1745.35,683.24 1745.91,683.24 1746.47,683.24 1747.03,683.24 1747.59,683.24 1748.15,683.24 1748.71,683.24 1749.27,683.24 1749.83,683.24 1750.39,683.24 1750.95,683.24 1751.51,683.24 1752.06,683.24 1752.62,683.24 1753.18,683.24 1753.74,683.24 1754.3,683.24 1754.86,683.24 1755.42,683.24 1755.98,683.24 1756.54,683.24 1757.1,683.24 1757.66,683.24 1758.22,683.24 1758.78,683.24 1759.34,683.24 1759.89,683.24 1760.45,683.24 1761.01,683.24 1761.57,683.24 1762.13,683.24 1762.69,683.24 1763.25,683.24 1763.81,683.24 1764.37,683.24 1764.93,683.24 1765.49,683.24 1766.05,683.24 1766.61,683.24 1767.16,683.24 1767.72,683.24 1768.28,683.24 1768.84,683.24 1769.4,683.24 1769.96,683.24 1770.52,683.24 1771.08,683.24 1771.64,683.24 1772.2,683.24 1772.76,683.24 1773.32,683.24 1773.88,683.24 1774.43,683.24 1774.99,683.24 1775.55,683.24 1776.11,683.24 1776.67,683.24 1777.23,683.24 1777.79,683.24 1778.35,683.24 1778.91,683.24 1779.47,683.24 1780.03,683.24 1780.59,683.24 1781.15,683.24 1781.71,683.24 1782.26,683.24 1782.82,683.24 1783.38,683.24 1783.94,683.24 1784.5,683.24 1785.06,683.24 1785.62,683.24 1786.18,683.24 1786.74,683.24 1787.3,683.24 1787.86,683.24 1788.42,683.24 1788.98,683.24 1789.53,683.24 1790.09,683.24 1790.65,683.24 1791.21,683.24 1791.77,683.24 1792.33,683.24 1792.89,683.24 1793.45,683.24 1794.01,683.24 1794.57,683.24 1795.13,683.24 1795.69,683.24 1796.25,683.24 1796.8,683.24 1797.36,683.24 1797.92,683.24 1798.48,683.24 1799.04,683.24 1799.6,683.24 1800.16,683.24 1800.72,683.24 1801.28,683.24 1801.84,683.24 1802.4,683.24 1802.96,683.24 1803.52,683.24 1804.08,683.24 1804.63,683.24 1805.19,683.24 1805.75,683.24 1806.31,683.24 1806.87,683.24 1807.43,683.24 1807.99,683.24 1808.55,683.24 1809.11,683.24 1809.67,683.24 1810.23,683.24 1810.79,683.24 1811.35,683.24 1811.9,683.24 1812.46,683.24 1813.02,683.24 1813.58,683.24 1814.14,683.24 1814.7,683.24 1815.26,683.24 1815.82,683.24 1816.38,683.24 1816.94,683.24 1817.5,683.24 1818.06,683.24 1818.62,683.24 1819.18,683.24 1819.73,683.24 1820.29,683.24 1820.85,683.24 1821.41,683.24 1821.97,683.24 1822.53,683.24 1823.09,683.24 1823.65,683.24 1824.21,683.24 1824.77,683.24 1825.33,683.24 1825.89,683.24 1826.45,683.24 1827,683.24 1827.56,683.24 1828.12,683.24 1828.68,683.24 1829.24,683.24 1829.8,683.24 1830.36,683.24 1830.92,683.24 1831.48,683.24 1832.04,683.24 1832.6,683.24 1833.16,683.24 1833.72,683.24 1834.27,683.24 1834.83,683.24 1835.39,683.24 1835.95,683.24 1836.51,683.24 1837.07,683.24 1837.63,683.24 1838.19,683.24 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0327933880475495 ± 0.026408397494509267\nProjected Energy: -4.013348436202404 ± (0.0037426777884910223, 0.003545100920514521)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.474453</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.2554e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">8.736e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.506e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.212e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.534e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.644e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.3631242916133584\n -0.7590191922770853\n  0.13584182219622676\n  0.15789998694608087\n  0.8767114411781396\n  1.5305929970973269\n  1.5835732611867472\n  3.072870330325866\n  3.1256726539518365\n  4.862107221562167\n  6.2606948503805935\n  6.402671211183114\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(address; u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0)\n\nImplements a one-dimensional extended Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
