var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2149287830824442 ± 0.0013894655678306012\n   G2(1) = 0.9166922715190012 ± 0.0008657615342720491\n   G2(2) = 0.9815021682006428 ± 0.0006365344044955407\n   G2(3) = 0.9886823374782663 ± 0.0009283862743891436\n   G2(4) = 0.9815021682006428 ± 0.0006365344044955407\n   G2(5) = 0.9166922715190012 ± 0.0008657615342720491\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.996607292154325 ± 0.13668584560919572\n   Replica 2: -4.025616251739127 ± 0.133811640487716\n   Replica 3: -3.9851740060862517 ± 0.12972756017550124\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip260\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip260)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip261\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip260)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip262\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.68 2211.02,1003.68 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.553 2211.02,746.553 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.422 2211.02,489.422 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.292 2211.02,232.292 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.68 423.181,1003.68 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.553 423.181,746.553 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.422 423.181,489.422 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.292 423.181,232.292 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.95 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.95 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.18 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.18 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M290.043 1017.03 L306.363 1017.03 L306.363 1020.96 L284.418 1020.96 L284.418 1017.03 Q287.08 1014.27 291.664 1009.64 Q296.27 1004.99 297.451 1003.65 Q299.696 1001.13 300.576 999.389 Q301.478 997.63 301.478 995.94 Q301.478 993.186 299.534 991.45 Q297.613 989.713 294.511 989.713 Q292.312 989.713 289.858 990.477 Q287.427 991.241 284.65 992.792 L284.65 988.07 Q287.474 986.936 289.927 986.357 Q292.381 985.778 294.418 985.778 Q299.789 985.778 302.983 988.463 Q306.177 991.149 306.177 995.639 Q306.177 997.769 305.367 999.69 Q304.58 1001.59 302.474 1004.18 Q301.895 1004.85 298.793 1008.07 Q295.691 1011.26 290.043 1017.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M316.224 986.403 L334.58 986.403 L334.58 990.338 L320.506 990.338 L320.506 998.811 Q321.524 998.463 322.543 998.301 Q323.562 998.116 324.58 998.116 Q330.367 998.116 333.747 1001.29 Q337.126 1004.46 337.126 1009.88 Q337.126 1015.45 333.654 1018.56 Q330.182 1021.63 323.862 1021.63 Q321.687 1021.63 319.418 1021.26 Q317.173 1020.89 314.765 1020.15 L314.765 1015.45 Q316.849 1016.59 319.071 1017.14 Q321.293 1017.7 323.77 1017.7 Q327.774 1017.7 330.112 1015.59 Q332.45 1013.49 332.45 1009.88 Q332.45 1006.26 330.112 1004.16 Q327.774 1002.05 323.77 1002.05 Q321.895 1002.05 320.02 1002.47 Q318.168 1002.88 316.224 1003.76 L316.224 986.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M356.339 989.482 Q352.728 989.482 350.899 993.047 Q349.094 996.588 349.094 1003.72 Q349.094 1010.82 350.899 1014.39 Q352.728 1017.93 356.339 1017.93 Q359.973 1017.93 361.779 1014.39 Q363.608 1010.82 363.608 1003.72 Q363.608 996.588 361.779 993.047 Q359.973 989.482 356.339 989.482 M356.339 985.778 Q362.149 985.778 365.205 990.385 Q368.284 994.968 368.284 1003.72 Q368.284 1012.44 365.205 1017.05 Q362.149 1021.63 356.339 1021.63 Q350.529 1021.63 347.45 1017.05 Q344.395 1012.44 344.395 1003.72 Q344.395 994.968 347.45 990.385 Q350.529 985.778 356.339 985.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M286.062 729.273 L304.418 729.273 L304.418 733.208 L290.344 733.208 L290.344 741.68 Q291.363 741.333 292.381 741.171 Q293.4 740.986 294.418 740.986 Q300.205 740.986 303.585 744.157 Q306.964 747.328 306.964 752.745 Q306.964 758.324 303.492 761.425 Q300.02 764.504 293.701 764.504 Q291.525 764.504 289.256 764.134 Q287.011 763.763 284.603 763.023 L284.603 758.324 Q286.687 759.458 288.909 760.013 Q291.131 760.569 293.608 760.569 Q297.613 760.569 299.951 758.462 Q302.288 756.356 302.288 752.745 Q302.288 749.134 299.951 747.027 Q297.613 744.921 293.608 744.921 Q291.733 744.921 289.858 745.337 Q288.006 745.754 286.062 746.634 L286.062 729.273 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M326.177 732.351 Q322.566 732.351 320.737 735.916 Q318.932 739.458 318.932 746.587 Q318.932 753.694 320.737 757.259 Q322.566 760.8 326.177 760.8 Q329.811 760.8 331.617 757.259 Q333.446 753.694 333.446 746.587 Q333.446 739.458 331.617 735.916 Q329.811 732.351 326.177 732.351 M326.177 728.648 Q331.987 728.648 335.043 733.254 Q338.122 737.838 338.122 746.587 Q338.122 755.314 335.043 759.921 Q331.987 764.504 326.177 764.504 Q320.367 764.504 317.288 759.921 Q314.233 755.314 314.233 746.587 Q314.233 737.838 317.288 733.254 Q320.367 728.648 326.177 728.648 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M356.339 732.351 Q352.728 732.351 350.899 735.916 Q349.094 739.458 349.094 746.587 Q349.094 753.694 350.899 757.259 Q352.728 760.8 356.339 760.8 Q359.973 760.8 361.779 757.259 Q363.608 753.694 363.608 746.587 Q363.608 739.458 361.779 735.916 Q359.973 732.351 356.339 732.351 M356.339 728.648 Q362.149 728.648 365.205 733.254 Q368.284 737.838 368.284 746.587 Q368.284 755.314 365.205 759.921 Q362.149 764.504 356.339 764.504 Q350.529 764.504 347.45 759.921 Q344.395 755.314 344.395 746.587 Q344.395 737.838 347.45 733.254 Q350.529 728.648 356.339 728.648 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M284.835 472.142 L307.057 472.142 L307.057 474.133 L294.511 506.702 L289.627 506.702 L301.432 476.077 L284.835 476.077 L284.835 472.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M316.224 472.142 L334.58 472.142 L334.58 476.077 L320.506 476.077 L320.506 484.55 Q321.524 484.202 322.543 484.04 Q323.562 483.855 324.58 483.855 Q330.367 483.855 333.747 487.026 Q337.126 490.198 337.126 495.614 Q337.126 501.193 333.654 504.295 Q330.182 507.374 323.862 507.374 Q321.687 507.374 319.418 507.003 Q317.173 506.633 314.765 505.892 L314.765 501.193 Q316.849 502.327 319.071 502.883 Q321.293 503.438 323.77 503.438 Q327.774 503.438 330.112 501.332 Q332.45 499.225 332.45 495.614 Q332.45 492.003 330.112 489.897 Q327.774 487.79 323.77 487.79 Q321.895 487.79 320.02 488.207 Q318.168 488.624 316.224 489.503 L316.224 472.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M356.339 475.221 Q352.728 475.221 350.899 478.786 Q349.094 482.327 349.094 489.457 Q349.094 496.563 350.899 500.128 Q352.728 503.67 356.339 503.67 Q359.973 503.67 361.779 500.128 Q363.608 496.563 363.608 489.457 Q363.608 482.327 361.779 478.786 Q359.973 475.221 356.339 475.221 M356.339 471.517 Q362.149 471.517 365.205 476.124 Q368.284 480.707 368.284 489.457 Q368.284 498.184 365.205 502.79 Q362.149 507.374 356.339 507.374 Q350.529 507.374 347.45 502.79 Q344.395 498.184 344.395 489.457 Q344.395 480.707 347.45 476.124 Q350.529 471.517 356.339 471.517 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M256.664 245.637 L264.303 245.637 L264.303 219.271 L255.992 220.938 L255.992 216.678 L264.256 215.012 L268.932 215.012 L268.932 245.637 L276.571 245.637 L276.571 249.572 L256.664 249.572 L256.664 245.637 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M296.015 218.09 Q292.404 218.09 290.576 221.655 Q288.77 225.197 288.77 232.326 Q288.77 239.433 290.576 242.998 Q292.404 246.539 296.015 246.539 Q299.65 246.539 301.455 242.998 Q303.284 239.433 303.284 232.326 Q303.284 225.197 301.455 221.655 Q299.65 218.09 296.015 218.09 M296.015 214.387 Q301.826 214.387 304.881 218.993 Q307.96 223.577 307.96 232.326 Q307.96 241.053 304.881 245.66 Q301.826 250.243 296.015 250.243 Q290.205 250.243 287.127 245.66 Q284.071 241.053 284.071 232.326 Q284.071 223.577 287.127 218.993 Q290.205 214.387 296.015 214.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M326.177 218.09 Q322.566 218.09 320.737 221.655 Q318.932 225.197 318.932 232.326 Q318.932 239.433 320.737 242.998 Q322.566 246.539 326.177 246.539 Q329.811 246.539 331.617 242.998 Q333.446 239.433 333.446 232.326 Q333.446 225.197 331.617 221.655 Q329.811 218.09 326.177 218.09 M326.177 214.387 Q331.987 214.387 335.043 218.993 Q338.122 223.577 338.122 232.326 Q338.122 241.053 335.043 245.66 Q331.987 250.243 326.177 250.243 Q320.367 250.243 317.288 245.66 Q314.233 241.053 314.233 232.326 Q314.233 223.577 317.288 218.993 Q320.367 214.387 326.177 214.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M356.339 218.09 Q352.728 218.09 350.899 221.655 Q349.094 225.197 349.094 232.326 Q349.094 239.433 350.899 242.998 Q352.728 246.539 356.339 246.539 Q359.973 246.539 361.779 242.998 Q363.608 239.433 363.608 232.326 Q363.608 225.197 361.779 221.655 Q359.973 218.09 356.339 218.09 M356.339 214.387 Q362.149 214.387 365.205 218.993 Q368.284 223.577 368.284 232.326 Q368.284 241.053 365.205 245.66 Q362.149 250.243 356.339 250.243 Q350.529 250.243 347.45 245.66 Q344.395 241.053 344.395 232.326 Q344.395 223.577 347.45 218.993 Q350.529 214.387 356.339 214.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip262)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.292 4017.76,232.292 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1248.03 459.396,1247.61 459.964,1247.1 460.533,1246.52 461.101,1245.86 461.669,1244.09 462.238,1243.28 462.806,1242.4 463.375,1241.43 463.943,1239.33 464.511,1236.12 465.08,1234.88 465.648,1233.51 466.216,1231 466.785,1229.42 467.353,1227.7 467.921,1225.8 468.49,1223.79 469.058,1220.62 469.626,1218.35 470.195,1215.92 470.763,1212.25 471.331,1209.46 471.9,1206.5 472.468,1202.35 473.036,1199.05 473.605,1195.56 474.173,1191.88 474.741,1185.98 475.31,1180.92 475.878,1175.66 476.446,1169.12 477.015,1163.45 477.583,1158.64 478.152,1153.6 478.72,1147.29 479.288,1140.79 479.857,1134.08 480.425,1128.19 480.993,1122.07 481.562,1115.79 482.13,1109.29 482.698,1102.47 483.267,1092.36 483.835,1083.2 484.403,1073.87 484.972,1066.38 485.54,1057.85 486.108,1049.03 486.677,1039.11 487.245,1030 487.813,1021.89 488.382,1011.48 488.95,1003.05 489.518,992.463 490.087,980.817 490.655,972.24 491.224,960.429 491.792,951.691 492.36,942.802 492.929,931.776 493.497,921.666 494.065,910.288 494.634,899.211 495.202,887.004 495.77,877.806 496.339,867.685 496.907,858.358 497.475,848.062 498.044,838.775 498.612,828.352 499.18,814.968 499.749,803.65 500.317,793.501 500.885,784.466 501.454,774.394 502.022,760.244 502.59,748.448 503.159,737.956 503.727,727.457 504.295,718.972 504.864,706.478 505.432,697.264 506.001,688.125 506.569,680.057 507.137,669.975 507.706,661.047 508.274,652.296 508.842,644.631 509.411,637.041 509.979,628.354 510.547,618.731 511.116,610.379 511.684,602.923 512.252,594.732 512.821,584.359 513.389,577.283 513.957,569.369 514.526,561.57 515.094,551.977 515.662,545.434 516.231,539.377 516.799,529.168 517.367,523.054 517.936,514.993 518.504,509.389 519.072,503.698 519.641,496.227 520.209,490.881 520.778,484.693 521.346,476.494 521.914,469.687 522.483,464.91 523.051,460.271 523.619,452.38 524.188,447.93 524.756,441.451 525.324,434.228 525.893,429.346 526.461,423.55 527.029,415.842 527.598,410.393 528.166,407.183 528.734,404.053 529.303,398.894 529.871,394.868 530.439,387.924 531.008,385.133 531.576,380.418 532.144,376.984 532.713,373.448 533.281,371.318 533.85,367.941 534.418,363.856 534.986,361.652 535.555,359.6 536.123,358.387 536.691,355.507 537.26,353.164 537.828,348.9 538.396,344.893 538.965,342.196 539.533,341.468 540.101,339.608 540.67,336.667 541.238,333.057 541.806,330.16 542.375,328.626 542.943,328.058 543.511,325.229 544.08,323.571 544.648,324.134 545.216,320.472 545.785,318.881 546.353,316.309 546.921,313.852 547.49,310.354 548.058,309.409 548.627,306.054 549.195,305.751 549.763,304.535 550.332,303.281 550.9,300.924 551.468,298.765 552.037,297.751 552.605,295.767 553.173,294.831 553.742,296.009 554.31,294.916 554.878,291.536 555.447,288.574 556.015,286.976 556.583,287.354 557.152,287.318 557.72,285.253 558.288,283.634 558.857,280.663 559.425,279.062 559.993,280.51 560.562,280.857 561.13,280.075 561.698,276.104 562.267,273.623 562.835,270.969 563.404,270.631 563.972,269.261 564.54,269.111 565.109,267.732 565.677,266.675 566.245,266.548 566.814,264.395 567.382,264.338 567.95,263.48 568.519,264.581 569.087,262.742 569.655,263.826 570.224,263.536 570.792,264.355 571.36,262.936 571.929,263.497 572.497,262.112 573.065,259.698 573.634,257.564 574.202,255.74 574.77,256.773 575.339,254.071 575.907,255.316 576.476,254.284 577.044,253.415 577.612,250.721 578.181,251.046 578.749,251.276 579.317,250.622 579.886,252.98 580.454,252.161 581.022,252.403 581.591,253.863 582.159,255.943 582.727,254.871 583.296,255.948 583.864,252.624 584.432,250.637 585.001,247.707 585.569,249.988 586.137,249.179 586.706,248.389 587.274,246.708 587.842,246.125 588.411,245.45 588.979,243.864 589.547,245.497 590.116,247.003 590.684,245.323 591.253,247.705 591.821,247.859 592.389,248.172 592.958,247.232 593.526,248.476 594.094,246.587 594.663,246.951 595.231,247.247 595.799,244.167 596.368,244.795 596.936,243.277 597.504,242.815 598.073,242.298 598.641,242.971 599.209,243.498 599.778,244.061 600.346,245.338 600.914,244.616 601.483,246.937 602.051,246.171 602.619,246.383 603.188,245.439 603.756,246.749 604.325,245.929 604.893,245.977 605.461,246.124 606.03,244.069 606.598,242.021 607.166,241.313 607.735,240.752 608.303,242.905 608.871,245.287 609.44,245.582 610.008,247.835 610.576,247.838 611.145,244.477 611.713,244.665 612.281,246.957 612.85,247.856 613.418,247.52 613.986,249.472 614.555,248.225 615.123,247.975 615.691,246.814 616.26,247.679 616.828,248.528 617.396,246.28 617.965,245.106 618.533,246.228 619.102,246.128 619.67,244.966 620.238,244.872 620.807,245.525 621.375,245.428 621.943,246.456 622.512,245.269 623.08,244.229 623.648,243.996 624.217,241.692 624.785,241.939 625.353,240.861 625.922,239.79 626.49,238.773 627.058,236.914 627.627,236.278 628.195,238.852 628.763,238.965 629.332,238.882 629.9,236.879 630.468,236.216 631.037,236.747 631.605,237.982 632.173,239.254 632.742,238.436 633.31,237.679 633.879,236.997 634.447,235.393 635.015,235.982 635.584,234.493 636.152,237.121 636.72,239.43 637.289,239.501 637.857,240.657 638.425,241.667 638.994,240.571 639.562,241.648 640.13,239.464 640.699,240.656 641.267,240.779 641.835,241.836 642.404,243.978 642.972,242.716 643.54,242.388 644.109,245.324 644.677,242.84 645.245,242.556 645.814,240.332 646.382,240.139 646.951,242.1 647.519,241.903 648.087,242.66 648.656,241.351 649.224,242.331 649.792,240.688 650.361,240.641 650.929,241.609 651.497,242.546 652.066,242.245 652.634,241.831 653.202,241.377 653.771,242.397 654.339,243.206 654.907,242.781 655.476,242.393 656.044,239.854 656.612,239.794 657.181,240.496 657.749,242.544 658.317,243.301 658.886,244.906 659.454,245.283 660.022,244.6 660.591,243.203 661.159,241.623 661.728,243.14 662.296,242.736 662.864,242.34 663.433,240.125 664.001,237.918 664.569,238.018 665.138,234.816 665.706,230.903 666.274,231.187 666.843,229.602 667.411,228.084 667.979,228.699 668.548,230.373 669.116,231.818 669.684,230.293 670.253,232.886 670.821,231.96 671.389,234.301 671.958,233.543 672.526,234.028 673.094,233.319 673.663,235.405 674.231,233.441 674.799,233.679 675.368,235.132 675.936,235.435 676.505,234.478 677.073,234.632 677.641,237.177 678.21,234.023 678.778,234.404 679.346,236.471 679.915,236.517 680.483,235.398 681.051,235.574 681.62,235.545 682.188,235.316 682.756,236.57 683.325,235.489 683.893,232.631 684.461,233.846 685.03,232.082 685.598,232.417 686.166,234.968 686.735,233 687.303,232.139 687.871,232.128 688.44,231.383 689.008,231.582 689.577,230.915 690.145,231.366 690.713,229.792 691.282,229.175 691.85,230.787 692.418,230.131 692.987,229.659 693.555,232.21 694.123,234.77 694.692,233.916 695.26,235.173 695.828,235.317 696.397,235.707 696.965,235.769 697.533,234.874 698.102,233.965 698.67,234.302 699.238,233.537 699.807,231.677 700.375,233.279 700.943,231.69 701.512,232.972 702.08,233.298 702.648,234.697 703.217,232.86 703.785,233.284 704.354,234.624 704.922,236.907 705.49,235.568 706.059,236.679 706.627,238.64 707.195,238.555 707.764,239.312 708.332,239.221 708.9,239.096 709.469,238 710.037,235.057 710.605,235.062 711.174,236.09 711.742,236.131 712.31,232.963 712.879,233.311 713.447,233.259 714.015,232.583 714.584,229.72 715.152,230.163 715.72,229.649 716.289,231.171 716.857,231.329 717.425,231.597 717.994,231.921 718.562,231.149 719.131,232.419 719.699,233.84 720.267,236.018 720.836,235.809 721.404,237.897 721.972,235.742 722.541,234.711 723.109,235.892 723.677,235.677 724.246,235.865 724.814,236.732 725.382,235.778 725.951,234.684 726.519,234.704 727.087,233.72 727.656,231.79 728.224,233.057 728.792,233.232 729.361,233.338 729.929,233.453 730.497,232.438 731.066,233.847 731.634,233.03 732.203,233.268 732.771,233.435 733.339,233.897 733.908,234.104 734.476,231.146 735.044,231.345 735.613,230.644 736.181,233.158 736.749,233.365 737.318,232.446 737.886,234.784 738.454,233.745 739.023,234.773 739.591,234.865 740.159,236.026 740.728,233.918 741.296,232.967 741.864,232.247 742.433,231.488 743.001,231.775 743.569,234.381 744.138,234.408 744.706,234.436 745.274,235.835 745.843,237.004 746.411,237.026 746.98,236.896 747.548,237.711 748.116,235.736 748.685,234.619 749.253,234.738 749.821,237.962 750.39,237.678 750.958,237.462 751.526,237.55 752.095,241.455 752.663,241.682 753.231,240.229 753.8,240.058 754.368,240.663 754.936,238.218 755.505,237.969 756.073,237.749 756.641,238.484 757.21,237.21 757.778,236.996 758.346,239.195 758.915,240.136 759.483,238.769 760.052,240.292 760.62,240.782 761.188,241.221 761.757,240.659 762.325,238.898 762.893,238.383 763.462,237.867 764.03,237.572 764.598,237.231 765.167,237.951 765.735,238.676 766.303,237.292 766.872,237.091 767.44,236.901 768.008,235.86 768.577,235.584 769.145,235.409 769.713,235.123 770.282,234.866 770.85,233.696 771.418,234.655 771.987,231.598 772.555,230.767 773.123,231.887 773.692,231.121 774.26,231.115 774.829,230.1 775.397,229.95 775.965,231.063 776.534,230.162 777.102,227.289 777.67,229.799 778.239,229.922 778.807,231.153 779.375,232.421 779.944,233.394 780.512,233.168 781.08,236.149 781.649,237.784 782.217,238.394 782.785,236.994 783.354,238.829 783.922,238.446 784.49,235.922 785.059,234.453 785.627,232.476 786.195,231.703 786.764,232.582 787.332,232.676 787.9,229.624 788.469,229.831 789.037,230.275 789.606,230.267 790.174,229.488 790.742,230.905 791.311,229.946 791.879,230.155 792.447,231.456 793.016,228.466 793.584,229.671 794.152,231.056 794.721,232.137 795.289,232.327 795.857,232.454 796.426,231.478 796.994,231.523 797.562,230.687 798.131,229.904 798.699,228.222 799.267,230.591 799.836,228.726 800.404,227.977 800.972,228.402 801.541,229.723 802.109,228.95 802.678,229.213 803.246,230.492 803.814,229.603 804.383,229.886 804.951,231.062 805.519,231.428 806.088,230.605 806.656,231.568 807.224,230.694 807.793,230.749 808.361,232.019 808.929,232 809.498,232.137 810.066,231.192 810.634,230.432 811.203,229.602 811.771,231.003 812.339,229.122 812.908,230.342 813.476,230.428 814.044,234.847 814.613,234.709 815.181,232.775 815.749,231.945 816.318,227.878 816.886,228.434 817.455,226.958 818.023,228.444 818.591,230.958 819.16,231.012 819.728,232.367 820.296,233.48 820.865,233.554 821.433,234.79 822.001,233.758 822.57,233.941 823.138,235.071 823.706,234.016 824.275,232.891 824.843,233.149 825.411,233.458 825.98,233.428 826.548,232.535 827.116,234.742 827.685,234.78 828.253,235.66 828.821,235.521 829.39,234.572 829.958,235.588 830.526,233.468 831.095,232.698 831.663,231.981 832.232,232.382 832.8,231.703 833.368,230.996 833.937,233.176 834.505,232.495 835.073,232.708 835.642,231.818 836.21,232.891 836.778,233.955 837.347,235.096 837.915,233.03 838.483,231.196 839.052,231.254 839.62,229.643 840.188,229.903 840.757,232.266 841.325,234.528 841.893,234.573 842.462,232.45 843.03,234.636 843.598,233.879 844.167,233.065 844.735,232.219 845.304,231.559 845.872,231.41 846.44,233.495 847.009,232.589 847.577,233.497 848.145,231.541 848.714,231.641 849.282,232.913 849.85,233.008 850.419,235.131 850.987,235.254 851.555,236.216 852.124,234.137 852.692,233.119 853.26,236.297 853.829,236.245 854.397,238.134 854.965,236.67 855.534,235.304 856.102,236.266 856.67,237.103 857.239,237.857 857.807,236.467 858.375,237.149 858.944,236.095 859.512,233.717 860.081,233.691 860.649,233.869 861.217,234.974 861.786,235.041 862.354,234.02 862.922,232.991 863.491,235.041 864.059,233.732 864.627,233.737 865.196,232.79 865.764,232.684 866.332,231.681 866.901,231.818 867.469,228.864 868.037,230.288 868.606,230.485 869.174,230.651 869.742,231.604 870.311,230.531 870.879,232.923 871.447,236.106 872.016,236.899 872.584,236.728 873.152,236.556 873.721,236.184 874.289,235.96 874.858,236.829 875.426,237.726 875.994,236.372 876.563,234.115 877.131,233.059 877.699,233.212 878.268,232.075 878.836,232.144 879.404,233.26 879.973,232.309 880.541,233.549 881.109,233.473 881.678,234.351 882.246,234.359 882.814,233.335 883.383,234.324 883.951,235.305 884.519,236.127 885.088,234.743 885.656,234.643 886.224,235.613 886.793,238.604 887.361,239.289 887.93,237.845 888.498,236.374 889.066,236.242 889.635,235.984 890.203,234.717 890.771,232.367 891.34,232.392 891.908,232.446 892.476,232.401 893.045,232.298 893.613,229.32 894.181,228.772 894.75,228.978 895.318,230.24 895.886,230.318 896.455,230.682 897.023,232.896 897.591,231.804 898.16,235.097 898.728,234.781 899.296,233.738 899.865,233.921 900.433,232.85 901.001,230.597 901.57,232.032 902.138,231.184 902.707,229.229 903.275,229.483 903.843,230.669 904.412,230.628 904.98,230.708 905.548,231.025 906.117,231.274 906.685,230.291 907.253,230.442 907.822,229.745 908.39,229.041 908.958,230.489 909.527,229.811 910.095,228.983 910.663,229.238 911.232,229.416 911.8,230.669 912.368,229.944 912.937,230.044 913.505,231.319 914.073,234.68 914.642,235.564 915.21,234.118 915.779,235.156 916.347,234.855 916.915,234.808 917.484,231.735 918.052,232.878 918.62,233.078 919.189,231.036 919.757,232.381 920.325,231.35 920.894,231.281 921.462,231.564 922.03,232.767 922.599,233.936 923.167,232.863 923.735,232.765 924.304,231.84 924.872,232.848 925.44,231.654 926.009,230.983 926.577,231.333 927.145,232.236 927.714,232.36 928.282,232.615 928.85,232.784 929.419,234.808 929.987,233.629 930.556,233.837 931.124,234.836 931.692,233.417 932.261,232.242 932.829,233.187 933.397,233.132 933.966,234.114 934.534,235.098 935.102,232.841 935.671,235.136 936.239,234.085 936.807,234.028 937.376,234.882 937.944,236.61 938.512,238.437 939.081,236.048 939.649,236.764 940.217,236.664 940.786,235.373 941.354,235.294 941.922,235.114 942.491,236.01 943.059,233.537 943.627,232.419 944.196,235.592 944.764,234.413 945.333,234.155 945.901,232.965 946.469,232.881 947.038,233.965 947.606,232.882 948.174,231.924 948.743,230.891 949.311,232.185 949.879,231.887 950.448,233.919 951.016,235.942 951.584,236.512 952.153,238.316 952.721,237.982 953.289,235.397 953.858,234.104 954.426,232.716 954.994,236.712 955.563,236.299 956.131,238.108 956.699,236.849 957.268,236.404 957.836,237.162 958.405,237.636 958.973,237.346 959.541,237.041 960.11,236.664 960.678,234.112 961.246,230.864 961.815,230.805 962.383,229.829 962.951,230.921 963.52,233.03 964.088,232.747 964.656,233.658 965.225,233.571 965.793,233.598 966.361,232.327 966.93,232.22 967.498,230.209 968.066,230.221 968.635,227.185 969.203,226.372 969.771,227.789 970.34,229.131 970.908,229.248 971.476,228.434 972.045,230.55 972.613,232.451 973.182,233.311 973.75,232.265 974.318,232.963 974.887,232.966 975.455,233.851 976.023,234.87 976.592,234.625 977.16,235.43 977.728,230.946 978.297,232.069 978.865,231.827 979.433,232.824 980.002,233.721 980.57,234.681 981.138,233.741 981.707,235.61 982.275,235.15 982.843,232.841 983.412,231.778 983.98,233.688 984.548,235.445 985.117,235.098 985.685,234.779 986.253,235.625 986.822,235.166 987.39,235.808 987.959,234.386 988.527,235.307 989.095,236.372 989.664,235.946 990.232,236.709 990.8,236.463 991.369,237.076 991.937,236.558 992.505,236.287 993.074,236.776 993.642,236.243 994.21,235.883 994.779,234.18 995.347,232.935 995.915,233.873 996.484,232.593 997.052,233.433 997.62,234.139 998.189,233.8 998.757,231.542 999.325,233.439 999.894,234.421 1000.46,234.133 1001.03,232.956 1001.6,231.753 1002.17,229.552 1002.74,228.641 1003.3,229.054 1003.87,227.079 1004.44,226.189 1005.01,226.507 1005.58,225.683 1006.15,226.053 1006.71,223.456 1007.28,223.829 1007.85,225.431 1008.42,224.845 1008.99,224.458 1009.56,223.825 1010.12,222.369 1010.69,222.981 1011.26,222.454 1011.83,222.3 1012.4,222.941 1012.97,223.471 1013.53,222.971 1014.1,223.684 1014.67,225.559 1015.24,227.265 1015.81,229.726 1016.38,226.899 1016.94,225.191 1017.51,225.855 1018.08,226.545 1018.65,228.303 1019.22,228.662 1019.79,229.81 1020.35,228.965 1020.92,228.319 1021.49,228.808 1022.06,228.294 1022.63,227.684 1023.2,227.873 1023.76,227.263 1024.33,227.948 1024.9,227.39 1025.47,227.96 1026.04,228.448 1026.61,229.696 1027.17,231.044 1027.74,234.586 1028.31,236.769 1028.88,232.525 1029.45,232.507 1030.02,232.676 1030.58,233.962 1031.15,231.944 1031.72,234.389 1032.29,234.266 1032.86,233.284 1033.43,233.494 1033.99,235.757 1034.56,236.916 1035.13,237.876 1035.7,236.667 1036.27,236.567 1036.84,235.071 1037.4,236.744 1037.97,235.564 1038.54,236.605 1039.11,237.237 1039.68,236.789 1040.25,237.615 1040.81,238.423 1041.38,236.338 1041.95,236.37 1042.52,238.151 1043.09,239.076 1043.66,237.751 1044.22,236.436 1044.79,233.205 1045.36,233.206 1045.93,233.166 1046.5,233.082 1047.07,235.235 1047.63,234.118 1048.2,232.987 1048.77,233.19 1049.34,232.026 1049.91,232.931 1050.48,235.12 1051.05,233.899 1051.61,233.909 1052.18,236.035 1052.75,237.844 1053.32,237.382 1053.89,237.003 1054.46,234.887 1055.02,234.646 1055.59,235.455 1056.16,235.374 1056.73,234.105 1057.3,235.205 1057.87,237.051 1058.43,234.638 1059,234.299 1059.57,235.092 1060.14,234.949 1060.71,234.721 1061.28,232.694 1061.84,230.447 1062.41,229.421 1062.98,227.448 1063.55,226.664 1064.12,227.967 1064.69,230.391 1065.25,228.539 1065.82,228.855 1066.39,229.215 1066.96,229.472 1067.53,229.619 1068.1,229.842 1068.66,233.051 1069.23,231.951 1069.8,232.028 1070.37,232.125 1070.94,233.134 1071.51,234.124 1072.07,235.926 1072.64,237.715 1073.21,239.567 1073.78,239.193 1074.35,240.435 1074.92,237.823 1075.48,237.309 1076.05,238.124 1076.62,237.669 1077.19,237.22 1077.76,233.851 1078.33,231.563 1078.89,230.433 1079.46,229.244 1080.03,230.395 1080.6,232.427 1081.17,232.51 1081.74,234.509 1082.3,233.249 1082.87,233.008 1083.44,231.74 1084.01,231.905 1084.58,234.066 1085.15,232.732 1085.71,232.671 1086.28,232.711 1086.85,233.833 1087.42,232.51 1087.99,232.525 1088.56,234.449 1089.12,233.234 1089.69,231.895 1090.26,229.847 1090.83,228.947 1091.4,230.91 1091.97,231.155 1092.53,230.068 1093.1,233.093 1093.67,235.037 1094.24,234.824 1094.81,236.818 1095.38,235.498 1095.94,234.187 1096.51,234.042 1097.08,233.99 1097.65,235.043 1098.22,231.825 1098.79,235.698 1099.35,235.246 1099.92,233.865 1100.49,230.497 1101.06,232.57 1101.63,231.482 1102.2,231.519 1102.76,229.292 1103.33,227.404 1103.9,227.682 1104.47,226.631 1105.04,223.786 1105.61,223.451 1106.17,219.895 1106.74,222.739 1107.31,223.484 1107.88,224.206 1108.45,222.592 1109.02,222.468 1109.58,223.041 1110.15,223.777 1110.72,223.324 1111.29,225.849 1111.86,228.297 1112.43,227.645 1112.99,228.023 1113.56,229.761 1114.13,232.145 1114.7,231.913 1115.27,231.899 1115.84,234.1 1116.4,232.055 1116.97,232.191 1117.54,230.134 1118.11,232.176 1118.68,231.333 1119.25,230.35 1119.81,231.69 1120.38,231.978 1120.95,233.365 1121.52,233.55 1122.09,232.841 1122.66,232.82 1123.23,233.047 1123.79,233.152 1124.36,232.319 1124.93,233.361 1125.5,234.661 1126.07,235.776 1126.64,236.726 1127.2,236.329 1127.77,235.221 1128.34,236.243 1128.91,235.24 1129.48,237.148 1130.05,235.792 1130.61,235.6 1131.18,235.123 1131.75,234.859 1132.32,235.59 1132.89,234.507 1133.46,235.44 1134.02,235.167 1134.59,236.935 1135.16,236.337 1135.73,234.712 1136.3,231.512 1136.87,232.639 1137.43,232.677 1138,230.507 1138.57,230.664 1139.14,229.851 1139.71,229.147 1140.28,225.102 1140.84,226.728 1141.41,227.135 1141.98,229.733 1142.55,229.998 1143.12,229.084 1143.69,228.309 1144.25,230.665 1144.82,230.727 1145.39,228.778 1145.96,229.036 1146.53,228.278 1147.1,227.694 1147.66,227.877 1148.23,228.234 1148.8,227.665 1149.37,226.178 1149.94,227.992 1150.51,227.201 1151.07,227.526 1151.64,231.025 1152.21,232.375 1152.78,231.677 1153.35,230.934 1153.92,230.244 1154.48,230.523 1155.05,230.651 1155.62,233.867 1156.19,232.977 1156.76,232.176 1157.33,233.197 1157.89,232.302 1158.46,234.451 1159.03,236.673 1159.6,237.748 1160.17,239.612 1160.74,240.193 1161.3,238.837 1161.87,238.621 1162.44,238.277 1163.01,237.858 1163.58,240.677 1164.15,240.301 1164.71,240.678 1165.28,240.258 1165.85,240.643 1166.42,239.797 1166.99,239.257 1167.56,239.709 1168.12,241.076 1168.69,239.288 1169.26,237.729 1169.83,237.587 1170.4,238.09 1170.97,237.523 1171.53,234.988 1172.1,235.933 1172.67,235.661 1173.24,236.386 1173.81,236.043 1174.38,235.704 1174.94,234.384 1175.51,234.189 1176.08,234.194 1176.65,234.833 1177.22,234.493 1177.79,232.157 1178.35,229.021 1178.92,227.207 1179.49,228.501 1180.06,227.782 1180.63,228.151 1181.2,228.541 1181.76,227.595 1182.33,228.12 1182.9,229.61 1183.47,229.133 1184.04,228.35 1184.61,229.587 1185.17,229.847 1185.74,228.97 1186.31,229.162 1186.88,229.528 1187.45,230.701 1188.02,226.896 1188.58,226.3 1189.15,226.726 1189.72,227.098 1190.29,228.572 1190.86,228.761 1191.43,229.161 1192,229.325 1192.56,228.627 1193.13,225.984 1193.7,226.435 1194.27,226.739 1194.84,227.396 1195.41,227.641 1195.97,230.256 1196.54,229.578 1197.11,230.835 1197.68,229.07 1198.25,228.297 1198.82,230.967 1199.38,232.257 1199.95,234.46 1200.52,234.387 1201.09,234.514 1201.66,236.489 1202.23,236.398 1202.79,236.084 1203.36,234.894 1203.93,234.776 1204.5,236.826 1205.07,237.464 1205.64,237.04 1206.2,236.779 1206.77,239.765 1207.34,237.322 1207.91,231.913 1208.48,228.78 1209.05,230.296 1209.61,232.512 1210.18,233.678 1210.75,233.626 1211.32,233.366 1211.89,235.529 1212.46,236.475 1213.02,235.137 1213.59,235.115 1214.16,237.085 1214.73,235.671 1215.3,235.413 1215.87,234.224 1216.43,233.809 1217,236.831 1217.57,236.48 1218.14,238.325 1218.71,237.897 1219.28,235.423 1219.84,235.24 1220.41,235.006 1220.98,237.956 1221.55,237.474 1222.12,236.885 1222.69,237.507 1223.25,238.855 1223.82,237.353 1224.39,235.827 1224.96,235.25 1225.53,232.926 1226.1,232.808 1226.66,231.66 1227.23,232.697 1227.8,233.573 1228.37,236.463 1228.94,237.241 1229.51,237.716 1230.07,234.952 1230.64,235.304 1231.21,232.82 1231.78,231.624 1232.35,231.486 1232.92,229.402 1233.48,229.465 1234.05,230.547 1234.62,233.627 1235.19,231.232 1235.76,230.134 1236.33,230.238 1236.89,234.499 1237.46,235.163 1238.03,236.896 1238.6,236.325 1239.17,233.65 1239.74,233.217 1240.3,232.002 1240.87,230.779 1241.44,230.793 1242.01,227.809 1242.58,231.167 1243.15,228.948 1243.71,230.338 1244.28,231.426 1244.85,230.409 1245.42,229.351 1245.99,226.454 1246.56,226.699 1247.12,227.926 1247.69,232.38 1248.26,232.376 1248.83,231.468 1249.4,231.553 1249.97,231.614 1250.53,231.554 1251.1,233.587 1251.67,235.524 1252.24,234.299 1252.81,235.035 1253.38,231.569 1253.94,231.431 1254.51,231.436 1255.08,230.431 1255.65,230.237 1256.22,229.158 1256.79,228.369 1257.35,228.764 1257.92,228.716 1258.49,231.036 1259.06,230.015 1259.63,232.353 1260.2,232.06 1260.76,231.236 1261.33,231.16 1261.9,231.168 1262.47,231.253 1263.04,230.1 1263.61,228.277 1264.18,227.484 1264.74,225.627 1265.31,225.113 1265.88,228.747 1266.45,229.153 1267.02,229.412 1267.59,229.44 1268.15,229.885 1268.72,227.202 1269.29,228.69 1269.86,228.965 1270.43,227.307 1271,227.912 1271.56,228.224 1272.13,228.388 1272.7,232.89 1273.27,233.786 1273.84,233.669 1274.41,231.5 1274.97,233.493 1275.54,233.532 1276.11,232.716 1276.68,229.728 1277.25,230.052 1277.82,229.103 1278.38,230.336 1278.95,231.603 1279.52,230.677 1280.09,229.934 1280.66,231.354 1281.23,231.34 1281.79,230.552 1282.36,232.873 1282.93,235.13 1283.5,236.852 1284.07,236.709 1284.64,238.402 1285.2,234.819 1285.77,233.591 1286.34,232.392 1286.91,232.514 1287.48,235.484 1288.05,235.34 1288.61,237.231 1289.18,235.794 1289.75,233.488 1290.32,234.428 1290.89,235.408 1291.46,236.258 1292.02,235.003 1292.59,234.751 1293.16,235.696 1293.73,235.503 1294.3,235.224 1294.87,234.812 1295.43,232.797 1296,231.76 1296.57,232.759 1297.14,232.567 1297.71,233.296 1298.28,232.131 1298.84,231.058 1299.41,232.413 1299.98,233.418 1300.55,230.261 1301.12,230.221 1301.69,229.342 1302.25,227.443 1302.82,227.718 1303.39,227.048 1303.96,224.415 1304.53,226.953 1305.1,225.252 1305.66,225.591 1306.23,223.915 1306.8,224.517 1307.37,225.226 1307.94,228.087 1308.51,228.5 1309.07,227.791 1309.64,229.027 1310.21,230.512 1310.78,230.669 1311.35,233.81 1311.92,234.767 1312.48,235.725 1313.05,235.652 1313.62,235.514 1314.19,236.486 1314.76,238.186 1315.33,237.706 1315.89,238.506 1316.46,236.961 1317.03,236.716 1317.6,238.432 1318.17,239.005 1318.74,238.655 1319.3,237.069 1319.87,235.706 1320.44,234.211 1321.01,235.144 1321.58,233.766 1322.15,233.533 1322.71,236.638 1323.28,232.366 1323.85,232.563 1324.42,236.92 1324.99,236.496 1325.56,236.361 1326.12,237.256 1326.69,235.948 1327.26,236.597 1327.83,236.31 1328.4,235.122 1328.97,234.87 1329.53,234.453 1330.1,235.126 1330.67,236.858 1331.24,235.449 1331.81,235.377 1332.38,235.014 1332.94,235.907 1333.51,235.425 1334.08,233.854 1334.65,233.497 1335.22,232.154 1335.79,230.965 1336.36,230.954 1336.92,228.971 1337.49,227.866 1338.06,227.154 1338.63,227.322 1339.2,227.735 1339.77,229.008 1340.33,225.226 1340.9,225.403 1341.47,222.794 1342.04,224.636 1342.61,225.217 1343.18,223.78 1343.74,224.379 1344.31,224.816 1344.88,227.45 1345.45,229.023 1346.02,231.447 1346.59,231.633 1347.15,232.841 1347.72,232.839 1348.29,231.809 1348.86,232.024 1349.43,233.139 1350,234.117 1350.56,233.052 1351.13,231.946 1351.7,232.056 1352.27,230.924 1352.84,231.073 1353.41,229.268 1353.97,230.479 1354.54,230.758 1355.11,231.112 1355.68,232.122 1356.25,230.877 1356.82,231.993 1357.38,235.346 1357.95,236.092 1358.52,236.754 1359.09,237.357 1359.66,237.026 1360.23,234.44 1360.79,234.523 1361.36,233.141 1361.93,232.77 1362.5,233.602 1363.07,233.427 1363.64,233.334 1364.2,233.338 1364.77,232.096 1365.34,232.018 1365.91,233.141 1366.48,229.961 1367.05,229.241 1367.61,229.438 1368.18,232.846 1368.75,234.01 1369.32,235.079 1369.89,233.989 1370.46,232.901 1371.02,232.956 1371.59,232.013 1372.16,234.13 1372.73,235.866 1373.3,232.599 1373.87,230.462 1374.43,228.47 1375,228.771 1375.57,227.895 1376.14,227.147 1376.71,227.519 1377.28,230.02 1377.84,228.264 1378.41,228.502 1378.98,228.86 1379.55,232.295 1380.12,233.107 1380.69,232.163 1381.25,232.103 1381.82,234.251 1382.39,234.064 1382.96,234.023 1383.53,231.897 1384.1,233.181 1384.66,231.173 1385.23,231.325 1385.8,231.556 1386.37,230.707 1386.94,230.884 1387.51,231.026 1388.07,231.121 1388.64,231.306 1389.21,230.307 1389.78,231.588 1390.35,231.852 1390.92,230.799 1391.48,233.116 1392.05,231.123 1392.62,233.488 1393.19,234.303 1393.76,236.375 1394.33,235.833 1394.89,234.572 1395.46,235.318 1396.03,237.109 1396.6,235.614 1397.17,238.539 1397.74,237.098 1398.3,236.622 1398.87,238.196 1399.44,238.533 1400.01,238.105 1400.58,236.526 1401.15,236.386 1401.71,234.942 1402.28,234.832 1402.85,234.668 1403.42,231.45 1403.99,232.554 1404.56,230.565 1405.13,229.734 1405.69,230.87 1406.26,229.833 1406.83,230.916 1407.4,232.233 1407.97,231.252 1408.54,229.352 1409.1,225.716 1409.67,228.362 1410.24,229.671 1410.81,230.953 1411.38,228.02 1411.95,229.221 1412.51,226.987 1413.08,227.152 1413.65,226.464 1414.22,226.719 1414.79,229.349 1415.36,230.6 1415.92,231.002 1416.49,231.276 1417.06,231.289 1417.63,231.41 1418.2,231.485 1418.77,231.609 1419.33,230.676 1419.9,230.828 1420.47,229.082 1421.04,229.462 1421.61,226.736 1422.18,227.069 1422.74,229.463 1423.31,231.649 1423.88,233.61 1424.45,234.727 1425.02,232.676 1425.59,232.271 1426.15,233.199 1426.72,230.09 1427.29,231.448 1427.86,231.671 1428.43,231.772 1429,232.697 1429.56,232.915 1430.13,231.917 1430.7,230.938 1431.27,231.026 1431.84,230.061 1432.41,230.15 1432.97,231.466 1433.54,229.708 1434.11,230.981 1434.68,231.051 1435.25,232.379 1435.82,233.373 1436.38,233.312 1436.95,232.377 1437.52,233.483 1438.09,233.608 1438.66,232.625 1439.23,233.636 1439.79,234.492 1440.36,235.616 1440.93,235.266 1441.5,235.102 1442.07,232.954 1442.64,232.907 1443.2,234.931 1443.77,234.894 1444.34,236.85 1444.91,236.667 1445.48,237.443 1446.05,237.079 1446.61,235.69 1447.18,237.521 1447.75,237.047 1448.32,238.621 1448.89,238.092 1449.46,239.597 1450.02,237.037 1450.59,234.863 1451.16,235.366 1451.73,234.141 1452.3,236.012 1452.87,235.7 1453.43,235.599 1454,236.393 1454.57,236.925 1455.14,235.511 1455.71,236.075 1456.28,237.738 1456.84,236.21 1457.41,234.769 1457.98,235.485 1458.55,238.133 1459.12,237.649 1459.69,237.361 1460.25,236.941 1460.82,236.689 1461.39,236.508 1461.96,238.017 1462.53,236.595 1463.1,236.152 1463.66,235.844 1464.23,236.51 1464.8,235.852 1465.37,234.438 1465.94,234.181 1466.51,232.88 1467.07,232.623 1467.64,234.49 1468.21,235.386 1468.78,232.975 1469.35,233.855 1469.92,232.511 1470.48,233.45 1471.05,236.282 1471.62,233.673 1472.19,232.699 1472.76,231.59 1473.33,231.318 1473.89,230.05 1474.46,229.004 1475.03,227.282 1475.6,227.347 1476.17,226.536 1476.74,227.778 1477.31,228.914 1477.87,228.033 1478.44,228.337 1479.01,227.444 1479.58,226.466 1480.15,227.925 1480.72,229.035 1481.28,230.316 1481.85,230.369 1482.42,232.379 1482.99,233.357 1483.56,233.186 1484.13,232.015 1484.69,232.077 1485.26,231.862 1485.83,232.028 1486.4,232.013 1486.97,229.932 1487.54,231.119 1488.1,229.981 1488.67,230.262 1489.24,230.31 1489.81,231.472 1490.38,230.337 1490.95,231.378 1491.51,232.388 1492.08,232.212 1492.65,232.329 1493.22,231.6 1493.79,228.395 1494.36,228.632 1494.92,228.839 1495.49,230.242 1496.06,228.367 1496.63,227.655 1497.2,226.747 1497.77,227.082 1498.33,228.554 1498.9,226.914 1499.47,227.331 1500.04,226.589 1500.61,225.01 1501.18,224.476 1501.74,225.95 1502.31,227.428 1502.88,233.105 1503.45,233.113 1504.02,232.107 1504.59,231.068 1505.15,229.056 1505.72,230.362 1506.29,229.489 1506.86,229.834 1507.43,229.901 1508,233.454 1508.56,232.348 1509.13,231.296 1509.7,230.317 1510.27,229.556 1510.84,229.813 1511.41,230.075 1511.97,232.321 1512.54,232.492 1513.11,229.456 1513.68,230.805 1514.25,231.857 1514.82,234.1 1515.38,234.085 1515.95,234.069 1516.52,233.94 1517.09,237.038 1517.66,238.922 1518.23,237.296 1518.79,236.888 1519.36,236.621 1519.93,238.304 1520.5,236.884 1521.07,236.444 1521.64,235.057 1522.2,235.967 1522.77,235.644 1523.34,234.277 1523.91,233.177 1524.48,233.982 1525.05,233.849 1525.61,233.738 1526.18,234.595 1526.75,233.367 1527.32,234.399 1527.89,235.1 1528.46,235.815 1529.02,235.416 1529.59,233.956 1530.16,232.79 1530.73,232.881 1531.3,229.546 1531.87,229.56 1532.43,227.726 1533,230.124 1533.57,230.272 1534.14,231.368 1534.71,231.164 1535.28,230.342 1535.84,229.438 1536.41,231.333 1536.98,230.156 1537.55,230.199 1538.12,229.428 1538.69,229.537 1539.25,232.65 1539.82,232.598 1540.39,232.499 1540.96,231.461 1541.53,232.663 1542.1,230.481 1542.66,229.61 1543.23,230.655 1543.8,229.614 1544.37,230.806 1544.94,230.843 1545.51,231.81 1546.08,230.598 1546.64,230.74 1547.21,233.904 1547.78,233.865 1548.35,234.831 1548.92,234.487 1549.49,235.362 1550.05,235.239 1550.62,236.095 1551.19,235.818 1551.76,236.309 1552.33,236.274 1552.9,232.735 1553.46,232.568 1554.03,232.291 1554.6,231.212 1555.17,230.211 1555.74,231.568 1556.31,231.641 1556.87,231.742 1557.44,230.658 1558.01,230.71 1558.58,229.71 1559.15,229.502 1559.72,231.548 1560.28,230.364 1560.85,228.344 1561.42,226.698 1561.99,229.271 1562.56,226.237 1563.13,224.783 1563.69,224.091 1564.26,224.56 1564.83,222.897 1565.4,225.605 1565.97,225.861 1566.54,227.494 1567.1,226.627 1567.67,226.027 1568.24,225.466 1568.81,224.264 1569.38,226.978 1569.95,226.238 1570.51,228.549 1571.08,228.869 1571.65,229.071 1572.22,233.536 1572.79,231.365 1573.36,229.62 1573.92,229.979 1574.49,230.149 1575.06,232.377 1575.63,231.292 1576.2,229.302 1576.77,231.642 1577.33,230.755 1577.9,230.133 1578.47,231.604 1579.04,231.88 1579.61,230.06 1580.18,230.348 1580.74,231.498 1581.31,230.485 1581.88,229.987 1582.45,229.388 1583.02,229.873 1583.59,229.282 1584.15,232.937 1584.72,234.272 1585.29,233.414 1585.86,237.669 1586.43,235.541 1587,234.421 1587.56,235.429 1588.13,235.424 1588.7,235.619 1589.27,236.546 1589.84,237.377 1590.41,236.199 1590.97,236.061 1591.54,237.983 1592.11,239.802 1592.68,239.403 1593.25,239.801 1593.82,237.167 1594.38,236.015 1594.95,235.906 1595.52,232.687 1596.09,233.554 1596.66,232.575 1597.23,230.689 1597.79,231.047 1598.36,228.35 1598.93,228.693 1599.5,232.176 1600.07,233.448 1600.64,235.146 1601.2,235.248 1601.77,234.163 1602.34,233.221 1602.91,234.331 1603.48,233.317 1604.05,236.29 1604.61,232.941 1605.18,231.865 1605.75,233.183 1606.32,233.257 1606.89,233.319 1607.46,234.236 1608.02,236.305 1608.59,237.18 1609.16,237.725 1609.73,239.573 1610.3,240.318 1610.87,242.939 1611.43,244.273 1612,243.122 1612.57,241.157 1613.14,237.178 1613.71,235.036 1614.28,234.779 1614.84,234.658 1615.41,235.422 1615.98,235.131 1616.55,235.768 1617.12,234.403 1617.69,235.403 1618.26,237.086 1618.82,237.677 1619.39,237.207 1619.96,236.842 1620.53,234.494 1621.1,235.074 1621.67,234.547 1622.23,235.174 1622.8,233.451 1623.37,233.316 1623.94,232.194 1624.51,229.034 1625.08,228.85 1625.64,228.866 1626.21,230.124 1626.78,232.177 1627.35,232.908 1627.92,232.976 1628.49,229.474 1629.05,230.659 1629.62,229.84 1630.19,230.154 1630.76,229.416 1631.33,231.615 1631.9,232.675 1632.46,232.681 1633.03,230.679 1633.6,231.7 1634.17,231.578 1634.74,233.627 1635.31,231.403 1635.87,232.387 1636.44,232.322 1637.01,234.242 1637.58,233.954 1638.15,232.931 1638.72,233.72 1639.28,233.615 1639.85,231.41 1640.42,230.336 1640.99,230.539 1641.56,231.863 1642.13,232.863 1642.69,231.759 1643.26,232.671 1643.83,230.47 1644.4,231.525 1644.97,231.323 1645.54,230.1 1646.1,227.005 1646.67,229.503 1647.24,230.54 1647.81,228.795 1648.38,226.925 1648.95,226.172 1649.51,226.758 1650.08,225.024 1650.65,225.466 1651.22,225.789 1651.79,225.334 1652.36,226.87 1652.92,227.525 1653.49,230.197 1654.06,228.316 1654.63,228.787 1655.2,227.101 1655.77,228.47 1656.33,231.669 1656.9,233.716 1657.47,233.651 1658.04,232.513 1658.61,233.517 1659.18,235.552 1659.74,235.387 1660.31,235.397 1660.88,235.017 1661.45,235.006 1662.02,234.736 1662.59,235.58 1663.15,235.346 1663.72,233.097 1664.29,233.092 1664.86,232.09 1665.43,231.169 1666,232.353 1666.56,233.329 1667.13,234.173 1667.7,236.32 1668.27,236.157 1668.84,237.079 1669.41,236.913 1669.97,236.449 1670.54,233.876 1671.11,232.656 1671.68,230.577 1672.25,229.675 1672.82,230.928 1673.38,230.975 1673.95,228.732 1674.52,231.003 1675.09,231.235 1675.66,230.454 1676.23,230.652 1676.79,232.745 1677.36,234.785 1677.93,233.745 1678.5,233.697 1679.07,231.518 1679.64,230.448 1680.2,229.765 1680.77,229.006 1681.34,228.472 1681.91,229.899 1682.48,228.107 1683.05,228.436 1683.61,229.93 1684.18,231.231 1684.75,233.338 1685.32,233.513 1685.89,232.325 1686.46,229.183 1687.02,231.707 1687.59,233.738 1688.16,233.594 1688.73,231.469 1689.3,231.464 1689.87,233.714 1690.44,232.748 1691,232.814 1691.57,233.947 1692.14,234.058 1692.71,232.838 1693.28,234.824 1693.85,232.458 1694.41,233.489 1694.98,234.333 1695.55,233.174 1696.12,231.073 1696.69,231.296 1697.26,229.279 1697.82,229.416 1698.39,228.713 1698.96,231.065 1699.53,230.11 1700.1,228.322 1700.67,229.566 1701.23,230.987 1701.8,232.051 1702.37,232.944 1702.94,233.012 1703.51,230.847 1704.08,230.722 1704.64,232.085 1705.21,230.973 1705.78,230.808 1706.35,230.927 1706.92,232.069 1707.49,233.103 1708.05,233.041 1708.62,231.854 1709.19,232.724 1709.76,232.82 1710.33,235.085 1710.9,235.933 1711.46,233.751 1712.03,233.621 1712.6,234.584 1713.17,233.422 1713.74,234.477 1714.31,234.405 1714.87,234.446 1715.44,235.528 1716.01,235.241 1716.58,236.334 1717.15,237.072 1717.72,237.768 1718.28,237.002 1718.85,235.658 1719.42,235.273 1719.99,232.043 1720.56,232.85 1721.13,231.874 1721.69,233.04 1722.26,234.076 1722.83,233.97 1723.4,235.279 1723.97,236.081 1724.54,235.761 1725.1,233.431 1725.67,234.461 1726.24,234.373 1726.81,235.073 1727.38,234.884 1727.95,233.69 1728.51,230.349 1729.08,231.287 1729.65,231.164 1730.22,231.212 1730.79,231.279 1731.36,233.415 1731.92,234.142 1732.49,234.039 1733.06,235.077 1733.63,235.87 1734.2,234.551 1734.77,235.253 1735.33,234.057 1735.9,235.005 1736.47,235.812 1737.04,235.369 1737.61,233.198 1738.18,231.651 1738.74,228.701 1739.31,227.958 1739.88,225.054 1740.45,225.618 1741.02,227.111 1741.59,227.334 1742.15,228.519 1742.72,228.902 1743.29,228.1 1743.86,227.367 1744.43,227.666 1745,227.112 1745.56,226.392 1746.13,226.702 1746.7,226.979 1747.27,227.345 1747.84,228.78 1748.41,229.134 1748.97,230.54 1749.54,229.845 1750.11,233.205 1750.68,233.118 1751.25,231.952 1751.82,230.289 1752.38,229.579 1752.95,229.747 1753.52,231.882 1754.09,232.899 1754.66,233.782 1755.23,232.662 1755.79,232.952 1756.36,233.022 1756.93,234.148 1757.5,235.333 1758.07,234.97 1758.64,232.771 1759.21,232.755 1759.77,233.741 1760.34,230.665 1760.91,232.96 1761.48,233.092 1762.05,233.006 1762.62,230.915 1763.18,230.089 1763.75,230.319 1764.32,230.361 1764.89,231.536 1765.46,231.654 1766.03,232.7 1766.59,236.073 1767.16,236.807 1767.73,234.363 1768.3,233.423 1768.87,232.179 1769.44,229.997 1770,229.294 1770.57,228.371 1771.14,229.555 1771.71,228.734 1772.28,229.071 1772.85,227.318 1773.41,228.616 1773.98,228.745 1774.55,230.121 1775.12,230.302 1775.69,232.559 1776.26,232.803 1776.82,231.68 1777.39,232.918 1777.96,233.081 1778.53,231.251 1779.1,232.386 1779.67,232.454 1780.23,232.51 1780.8,233.364 1781.37,233.385 1781.94,230.223 1782.51,229.203 1783.08,232.646 1783.64,232.416 1784.21,232.322 1784.78,235.376 1785.35,236.039 1785.92,234.746 1786.49,235.656 1787.05,236.217 1787.62,232.812 1788.19,231.383 1788.76,231.57 1789.33,232.682 1789.9,234.802 1790.46,234.225 1791.03,236.184 1791.6,232.777 1792.17,234.727 1792.74,233.465 1793.31,233.306 1793.87,231.102 1794.44,232.315 1795.01,234.462 1795.58,235.257 1796.15,235.051 1796.72,234.966 1797.28,234.636 1797.85,236.483 1798.42,237.238 1798.99,236.911 1799.56,236.688 1800.13,238.319 1800.69,239.888 1801.26,239.304 1801.83,235.786 1802.4,235.389 1802.97,233.756 1803.54,232.73 1804.1,235.653 1804.67,235.465 1805.24,235.237 1805.81,237.777 1806.38,236.43 1806.95,238.089 1807.51,237.714 1808.08,237.303 1808.65,236.082 1809.22,235.822 1809.79,235.601 1810.36,235.252 1810.92,230.743 1811.49,229.779 1812.06,230.624 1812.63,230.873 1813.2,230.747 1813.77,232.876 1814.33,233.023 1814.9,233.011 1815.47,231.9 1816.04,234.043 1816.61,233.946 1817.18,235.71 1817.74,234.364 1818.31,235.102 1818.88,233.633 1819.45,232.663 1820.02,232.554 1820.59,234.144 1821.15,232.835 1821.72,231.494 1822.29,229.369 1822.86,228.408 1823.43,227.507 1824,226.696 1824.56,226.728 1825.13,228.018 1825.7,229.347 1826.27,228.624 1826.84,230.864 1827.41,229.948 1827.97,228.959 1828.54,227.087 1829.11,228.318 1829.68,228.477 1830.25,228.606 1830.82,230.707 1831.39,231.759 1831.95,231.808 1832.52,231.945 1833.09,230.897 1833.66,232.833 1834.23,231.787 1834.8,232.96 1835.36,234.827 1835.93,234.544 1836.5,235.343 1837.07,235.158 1837.64,234.84 1838.21,234.545 1838.77,232.337 1839.34,230.324 1839.91,231.615 1840.48,232.604 1841.05,232.622 1841.62,230.452 1842.18,230.407 1842.75,231.489 1843.32,232.416 1843.89,231.344 1844.46,232.478 1845.03,231.384 1845.59,232.185 1846.16,233.242 1846.73,231.039 1847.3,232.13 1847.87,232.736 1848.44,231.623 1849,232.73 1849.57,232.52 1850.14,232.497 1850.71,232.382 1851.28,231.578 1851.85,231.629 1852.41,229.576 1852.98,228.789 1853.55,228.914 1854.12,226.048 1854.69,226.595 1855.26,227.109 1855.82,227.475 1856.39,227.597 1856.96,228.993 1857.53,228.133 1858.1,229.561 1858.67,229.841 1859.23,229.945 1859.8,228.803 1860.37,228.023 1860.94,229.508 1861.51,230.935 1862.08,230.188 1862.64,231.416 1863.21,231.603 1863.78,233.631 1864.35,232.555 1864.92,234.732 1865.49,234.871 1866.05,234.914 1866.62,231.612 1867.19,228.73 1867.76,229.982 1868.33,228.931 1868.9,229.091 1869.46,229.361 1870.03,230.866 1870.6,229.967 1871.17,231.223 1871.74,231.267 1872.31,229.806 1872.87,229.07 1873.44,229.453 1874.01,228.587 1874.58,230.061 1875.15,232.278 1875.72,232.133 1876.28,232.32 1876.85,230.096 1877.42,230.153 1877.99,230.221 1878.56,230.639 1879.13,233.855 1879.69,233.914 1880.26,231.818 1880.83,230.941 1881.4,231.146 1881.97,231.256 1882.54,231.55 1883.1,231.35 1883.67,231.481 1884.24,233.54 1884.81,235.561 1885.38,235.541 1885.95,239.666 1886.51,240.281 1887.08,239.743 1887.65,239.143 1888.22,236.529 1888.79,235.155 1889.36,234.988 1889.92,235.961 1890.49,236.717 1891.06,235.366 1891.63,235.265 1892.2,235.155 1892.77,235.987 1893.33,233.433 1893.9,231.346 1894.47,232.357 1895.04,233.395 1895.61,234.18 1896.18,235.115 1896.74,232.805 1897.31,232.435 1897.88,231.168 1898.45,231.026 1899.02,232.038 1899.59,232.293 1900.16,231.154 1900.72,231.061 1901.29,233.413 1901.86,233.219 1902.43,232.234 1903,232.261 1903.57,233.374 1904.13,233.078 1904.7,233.948 1905.27,232.638 1905.84,232.617 1906.41,235.399 1906.98,237.205 1907.54,236.839 1908.11,236.518 1908.68,237.413 1909.25,235.806 1909.82,236.514 1910.39,236.207 1910.95,233.7 1911.52,233.956 1912.09,235.036 1912.66,233.801 1913.23,231.587 1913.8,232.51 1914.36,232.432 1914.93,232.332 1915.5,231.015 1916.07,232.132 1916.64,230.892 1917.21,230.931 1917.77,230.062 1918.34,230.325 1918.91,228.374 1919.48,227.517 1920.05,227.919 1920.62,226.383 1921.18,227.746 1921.75,229.14 1922.32,225.317 1922.89,226.805 1923.46,228.248 1924.03,229.672 1924.59,229.96 1925.16,229.054 1925.73,231.229 1926.3,231.437 1926.87,231.412 1927.44,230.469 1928,228.541 1928.57,228.906 1929.14,229.287 1929.71,229.653 1930.28,228.791 1930.85,229.067 1931.41,229.555 1931.98,229.884 1932.55,230.246 1933.12,230.389 1933.69,231.493 1934.26,231.876 1934.82,231.762 1935.39,231.704 1935.96,231.671 1936.53,231.718 1937.1,230.629 1937.67,231.935 1938.23,230.933 1938.8,230.129 1939.37,229.596 1939.94,228.847 1940.51,228.032 1941.08,226.258 1941.64,226.295 1942.21,225.562 1942.78,226.231 1943.35,226.983 1943.92,228.457 1944.49,228.765 1945.05,227.175 1945.62,228.494 1946.19,228.945 1946.76,228.192 1947.33,229.932 1947.9,233.456 1948.46,234.541 1949.03,236.552 1949.6,236.367 1950.17,235.337 1950.74,234.211 1951.31,233.248 1951.87,233.349 1952.44,233.363 1953.01,232.314 1953.58,230.555 1954.15,232.97 1954.72,231.344 1955.28,232.474 1955.85,231.467 1956.42,233.827 1956.99,234.175 1957.56,232.98 1958.13,232.967 1958.69,232.851 1959.26,230.869 1959.83,233.145 1960.4,232.399 1960.97,234.513 1961.54,235.322 1962.1,234.062 1962.67,234.15 1963.24,235.134 1963.81,235.965 1964.38,235.982 1964.95,235.849 1965.51,234.546 1966.08,234.376 1966.65,234.554 1967.22,236.364 1967.79,236.055 1968.36,236.109 1968.92,236.926 1969.49,236.782 1970.06,234.363 1970.63,234.507 1971.2,233.348 1971.77,232.311 1972.34,230.477 1972.9,230.776 1973.47,231.836 1974.04,234.093 1974.61,232.991 1975.18,231.816 1975.75,231.929 1976.31,232.024 1976.88,233.195 1977.45,232.204 1978.02,233.283 1978.59,232.226 1979.16,228.248 1979.72,227.863 1980.29,228.081 1980.86,230.58 1981.43,231.077 1982,233.233 1982.57,232.229 1983.13,232.301 1983.7,232.614 1984.27,229.444 1984.84,230.517 1985.41,231.825 1985.98,232.804 1986.54,230.925 1987.11,232.265 1987.68,231.493 1988.25,232.603 1988.82,232.818 1989.39,229.751 1989.95,231.214 1990.52,232.518 1991.09,232.496 1991.66,233.589 1992.23,233.591 1992.8,231.502 1993.36,232.522 1993.93,232.524 1994.5,230.482 1995.07,232.506 1995.64,231.684 1996.21,232.847 1996.77,233.955 1997.34,233.832 1997.91,233.967 1998.48,233.995 1999.05,235.239 1999.62,235.204 2000.18,234.167 2000.75,236.067 2001.32,236.136 2001.89,234.958 2002.46,234.766 2003.03,233.513 2003.59,234.36 2004.16,233.112 2004.73,234.207 2005.3,234.078 2005.87,234.232 2006.44,237.252 2007,238.011 2007.57,239.617 2008.14,238.217 2008.71,238.825 2009.28,239.226 2009.85,239.861 2010.41,239.364 2010.98,237.678 2011.55,237.013 2012.12,235.815 2012.69,234.607 2013.26,232.239 2013.82,230.073 2014.39,231.106 2014.96,231.392 2015.53,231.392 2016.1,230.26 2016.67,229.514 2017.23,230.718 2017.8,231.758 2018.37,232.675 2018.94,232.609 2019.51,233.514 2020.08,234.093 2020.64,231.838 2021.21,233.949 2021.78,234.718 2022.35,237.521 2022.92,235.965 2023.49,236.942 2024.05,238.718 2024.62,240.289 2025.19,239.448 2025.76,235.507 2026.33,235.185 2026.9,234.894 2027.46,231.442 2028.03,233.488 2028.6,233.281 2029.17,234.343 2029.74,235.233 2030.31,230.699 2030.87,232.904 2031.44,231.684 2032.01,232.626 2032.58,233.373 2033.15,233.044 2033.72,234.117 2034.28,233.791 2034.85,233.575 2035.42,234.403 2035.99,234.328 2036.56,236.216 2037.13,235.808 2037.69,234.435 2038.26,234.973 2038.83,234.473 2039.4,232.205 2039.97,233.284 2040.54,232.816 2041.11,231.255 2041.67,230.061 2042.24,230.184 2042.81,230.03 2043.38,230.024 2043.95,229.152 2044.52,229.366 2045.08,228.416 2045.65,228.644 2046.22,227.002 2046.79,229.278 2047.36,228.223 2047.93,231.589 2048.49,232.362 2049.06,232.332 2049.63,232 2050.2,230.047 2050.77,230.123 2051.34,228.852 2051.9,228.902 2052.47,231.07 2053.04,229.115 2053.61,229.317 2054.18,230.192 2054.75,231.38 2055.31,232.254 2055.88,232.35 2056.45,232.4 2057.02,229.326 2057.59,230.501 2058.16,230.337 2058.72,229.365 2059.29,228.523 2059.86,229.682 2060.43,229.75 2061,230.066 2061.57,230.163 2062.13,229.186 2062.7,228.303 2063.27,227.442 2063.84,226.635 2064.41,224.994 2064.98,224.447 2065.54,227.206 2066.11,228.777 2066.68,231.235 2067.25,229.382 2067.82,229.433 2068.39,228.651 2068.95,228.143 2069.52,228.489 2070.09,228.928 2070.66,230.275 2071.23,231.31 2071.8,231.457 2072.36,231.454 2072.93,230.479 2073.5,231.585 2074.07,231.527 2074.64,231.754 2075.21,232.88 2075.77,233.644 2076.34,234.516 2076.91,233.622 2077.48,233.481 2078.05,233.244 2078.62,233.941 2079.18,235.745 2079.75,234.347 2080.32,235.173 2080.89,232.963 2081.46,234.081 2082.03,232.76 2082.59,232.988 2083.16,232.986 2083.73,233.585 2084.3,236.666 2084.87,236.41 2085.44,237.387 2086,235.985 2086.57,236.519 2087.14,236.049 2087.71,232.745 2088.28,232.648 2088.85,234.566 2089.41,235.552 2089.98,235.434 2090.55,235.124 2091.12,235.746 2091.69,235.368 2092.26,235.108 2092.82,235.973 2093.39,236.648 2093.96,236.181 2094.53,235.001 2095.1,231.877 2095.67,230.731 2096.23,232.895 2096.8,230.877 2097.37,232.957 2097.94,231.962 2098.51,230.869 2099.08,230.944 2099.64,231.179 2100.21,232.128 2100.78,233.044 2101.35,233.899 2101.92,232.813 2102.49,232.705 2103.05,233.618 2103.62,231.658 2104.19,229.519 2104.76,231.929 2105.33,230.825 2105.9,229.841 2106.46,229.783 2107.03,231.891 2107.6,233.094 2108.17,231.026 2108.74,231.977 2109.31,231.024 2109.87,230.94 2110.44,228.9 2111.01,229.147 2111.58,230.395 2112.15,230.54 2112.72,232.745 2113.29,235.591 2113.85,236.368 2114.42,236.117 2114.99,235.798 2115.56,235.523 2116.13,234.512 2116.7,235.364 2117.26,235.157 2117.83,235.728 2118.4,236.586 2118.97,235.081 2119.54,233.824 2120.11,232.881 2120.67,233.587 2121.24,234.437 2121.81,235.358 2122.38,233.941 2122.95,234.834 2123.52,235.588 2124.08,233.194 2124.65,231.013 2125.22,230.93 2125.79,229.901 2126.36,231.149 2126.93,232.202 2127.49,230.965 2128.06,231.12 2128.63,230.98 2129.2,229.873 2129.77,229.152 2130.34,226.157 2130.9,225.681 2131.47,224.002 2132.04,224.585 2132.61,227.116 2133.18,226.657 2133.75,226.008 2134.31,224.256 2134.88,224.935 2135.45,224.415 2136.02,226.904 2136.59,227.226 2137.16,228.692 2137.72,231.185 2138.29,232.341 2138.86,234.414 2139.43,234.39 2140,234.196 2140.57,236.088 2141.13,235.726 2141.7,235.526 2142.27,236.316 2142.84,236.3 2143.41,238.264 2143.98,238.888 2144.54,238.352 2145.11,239.89 2145.68,236.316 2146.25,237.246 2146.82,237.897 2147.39,239.336 2147.95,236.613 2148.52,235.236 2149.09,233.849 2149.66,231.45 2150.23,229.238 2150.8,228.388 2151.36,230.643 2151.93,230.904 2152.5,230.849 2153.07,232.963 2153.64,230.81 2154.21,234.022 2154.77,234.89 2155.34,233.586 2155.91,232.195 2156.48,231.954 2157.05,232.094 2157.62,233.2 2158.18,233.908 2158.75,234.793 2159.32,234.309 2159.89,233.879 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip260)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.022 ± 0.022\n  with uncertainty of ± 0.0020106387337382094\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01459 ± (0.00247868, 0.00242035) (MC)\n  95% confidence interval: [-4.0192, -4.00989]) (MC)\n  linear error propagation: -4.01457 ± 0.00244518\n  |δ_y| = |0.00129631| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014585981494863, val_l = 0.004610876582490597, val_u = 0.004695543732745833)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip290\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip290)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip291\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip290)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip292\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1140.33 2211.02,1140.33 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,968.355 2211.02,968.355 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,796.376 2211.02,796.376 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,624.397 2211.02,624.397 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,452.419 2211.02,452.419 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,280.44 2211.02,280.44 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1140.33 365.751,1140.33 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,968.355 365.751,968.355 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,796.376 365.751,796.376 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,624.397 365.751,624.397 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,452.419 365.751,452.419 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,280.44 365.751,280.44 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M298.909 1126.13 Q295.298 1126.13 293.469 1129.7 Q291.664 1133.24 291.664 1140.37 Q291.664 1147.48 293.469 1151.04 Q295.298 1154.58 298.909 1154.58 Q302.543 1154.58 304.349 1151.04 Q306.177 1147.48 306.177 1140.37 Q306.177 1133.24 304.349 1129.7 Q302.543 1126.13 298.909 1126.13 M298.909 1122.43 Q304.719 1122.43 307.775 1127.04 Q310.853 1131.62 310.853 1140.37 Q310.853 1149.1 307.775 1153.7 Q304.719 1158.29 298.909 1158.29 Q293.099 1158.29 290.02 1153.7 Q286.964 1149.1 286.964 1140.37 Q286.964 1131.62 290.02 1127.04 Q293.099 1122.43 298.909 1122.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M259.557 981.7 L267.196 981.7 L267.196 955.334 L258.886 957.001 L258.886 952.742 L267.15 951.075 L271.826 951.075 L271.826 981.7 L279.465 981.7 L279.465 985.635 L259.557 985.635 L259.557 981.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M298.909 954.154 Q295.298 954.154 293.469 957.719 Q291.664 961.26 291.664 968.39 Q291.664 975.496 293.469 979.061 Q295.298 982.603 298.909 982.603 Q302.543 982.603 304.349 979.061 Q306.177 975.496 306.177 968.39 Q306.177 961.26 304.349 957.719 Q302.543 954.154 298.909 954.154 M298.909 950.45 Q304.719 950.45 307.775 955.057 Q310.853 959.64 310.853 968.39 Q310.853 977.117 307.775 981.723 Q304.719 986.306 298.909 986.306 Q293.099 986.306 290.02 981.723 Q286.964 977.117 286.964 968.39 Q286.964 959.64 290.02 955.057 Q293.099 950.45 298.909 950.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M262.775 809.721 L279.094 809.721 L279.094 813.656 L257.15 813.656 L257.15 809.721 Q259.812 806.967 264.395 802.337 Q269.002 797.684 270.182 796.342 Q272.428 793.818 273.307 792.082 Q274.21 790.323 274.21 788.633 Q274.21 785.879 272.266 784.143 Q270.344 782.406 267.242 782.406 Q265.043 782.406 262.59 783.17 Q260.159 783.934 257.381 785.485 L257.381 780.763 Q260.205 779.629 262.659 779.05 Q265.113 778.471 267.15 778.471 Q272.52 778.471 275.715 781.156 Q278.909 783.842 278.909 788.332 Q278.909 790.462 278.099 792.383 Q277.312 794.281 275.205 796.874 Q274.627 797.545 271.525 800.763 Q268.423 803.957 262.775 809.721 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M298.909 782.175 Q295.298 782.175 293.469 785.74 Q291.664 789.281 291.664 796.411 Q291.664 803.517 293.469 807.082 Q295.298 810.624 298.909 810.624 Q302.543 810.624 304.349 807.082 Q306.177 803.517 306.177 796.411 Q306.177 789.281 304.349 785.74 Q302.543 782.175 298.909 782.175 M298.909 778.471 Q304.719 778.471 307.775 783.078 Q310.853 787.661 310.853 796.411 Q310.853 805.138 307.775 809.744 Q304.719 814.328 298.909 814.328 Q293.099 814.328 290.02 809.744 Q286.964 805.138 286.964 796.411 Q286.964 787.661 290.02 783.078 Q293.099 778.471 298.909 778.471 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M272.914 623.043 Q276.27 623.761 278.145 626.029 Q280.043 628.298 280.043 631.631 Q280.043 636.747 276.525 639.548 Q273.006 642.349 266.525 642.349 Q264.349 642.349 262.034 641.909 Q259.742 641.492 257.289 640.636 L257.289 636.122 Q259.233 637.256 261.548 637.835 Q263.863 638.414 266.386 638.414 Q270.784 638.414 273.076 636.677 Q275.39 634.941 275.39 631.631 Q275.39 628.576 273.238 626.863 Q271.108 625.127 267.289 625.127 L263.261 625.127 L263.261 621.284 L267.474 621.284 Q270.923 621.284 272.752 619.918 Q274.58 618.529 274.58 615.937 Q274.58 613.275 272.682 611.863 Q270.807 610.428 267.289 610.428 Q265.367 610.428 263.168 610.844 Q260.969 611.261 258.33 612.141 L258.33 607.974 Q260.992 607.233 263.307 606.863 Q265.645 606.492 267.705 606.492 Q273.029 606.492 276.131 608.923 Q279.233 611.33 279.233 615.451 Q279.233 618.321 277.59 620.312 Q275.946 622.279 272.914 623.043 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M298.909 610.196 Q295.298 610.196 293.469 613.761 Q291.664 617.303 291.664 624.432 Q291.664 631.539 293.469 635.103 Q295.298 638.645 298.909 638.645 Q302.543 638.645 304.349 635.103 Q306.177 631.539 306.177 624.432 Q306.177 617.303 304.349 613.761 Q302.543 610.196 298.909 610.196 M298.909 606.492 Q304.719 606.492 307.775 611.099 Q310.853 615.682 310.853 624.432 Q310.853 633.159 307.775 637.765 Q304.719 642.349 298.909 642.349 Q293.099 642.349 290.02 637.765 Q286.964 633.159 286.964 624.432 Q286.964 615.682 290.02 611.099 Q293.099 606.492 298.909 606.492 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M271.594 439.213 L259.789 457.662 L271.594 457.662 L271.594 439.213 M270.367 435.139 L276.247 435.139 L276.247 457.662 L281.177 457.662 L281.177 461.55 L276.247 461.55 L276.247 469.699 L271.594 469.699 L271.594 461.55 L255.992 461.55 L255.992 457.037 L270.367 435.139 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M298.909 438.217 Q295.298 438.217 293.469 441.782 Q291.664 445.324 291.664 452.453 Q291.664 459.56 293.469 463.124 Q295.298 466.666 298.909 466.666 Q302.543 466.666 304.349 463.124 Q306.177 459.56 306.177 452.453 Q306.177 445.324 304.349 441.782 Q302.543 438.217 298.909 438.217 M298.909 434.514 Q304.719 434.514 307.775 439.12 Q310.853 443.703 310.853 452.453 Q310.853 461.18 307.775 465.787 Q304.719 470.37 298.909 470.37 Q293.099 470.37 290.02 465.787 Q286.964 461.18 286.964 452.453 Q286.964 443.703 290.02 439.12 Q293.099 434.514 298.909 434.514 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M258.793 263.16 L277.15 263.16 L277.15 267.095 L263.076 267.095 L263.076 275.567 Q264.094 275.22 265.113 275.058 Q266.131 274.873 267.15 274.873 Q272.937 274.873 276.316 278.044 Q279.696 281.215 279.696 286.632 Q279.696 292.21 276.224 295.312 Q272.752 298.391 266.432 298.391 Q264.256 298.391 261.988 298.021 Q259.742 297.65 257.335 296.909 L257.335 292.21 Q259.418 293.345 261.641 293.9 Q263.863 294.456 266.34 294.456 Q270.344 294.456 272.682 292.349 Q275.02 290.243 275.02 286.632 Q275.02 283.021 272.682 280.914 Q270.344 278.808 266.34 278.808 Q264.465 278.808 262.59 279.224 Q260.738 279.641 258.793 280.521 L258.793 263.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M298.909 266.238 Q295.298 266.238 293.469 269.803 Q291.664 273.345 291.664 280.474 Q291.664 287.581 293.469 291.146 Q295.298 294.687 298.909 294.687 Q302.543 294.687 304.349 291.146 Q306.177 287.581 306.177 280.474 Q306.177 273.345 304.349 269.803 Q302.543 266.238 298.909 266.238 M298.909 262.535 Q304.719 262.535 307.775 267.141 Q310.853 271.724 310.853 280.474 Q310.853 289.201 307.775 293.808 Q304.719 298.391 298.909 298.391 Q293.099 298.391 290.02 293.808 Q286.964 289.201 286.964 280.474 Q286.964 271.724 290.02 267.141 Q293.099 262.535 298.909 262.535 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip292)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1013.62 400.199,897.199 400.786,790.383 401.372,692.522 401.958,603.02 402.545,521.325 403.131,564.661 403.718,489.47 404.304,423.022 404.891,362.663 405.477,308.16 406.063,348.227 406.65,301.377 407.236,258.296 407.823,219.895 408.409,254.713 408.995,343.891 409.582,309.813 410.168,280.53 410.755,304.167 411.341,279.118 411.927,258.221 412.514,241.829 413.1,227.343 413.687,251.067 414.273,239.034 414.86,229.378 415.446,253.338 416.032,247.912 416.619,244.07 417.205,266.373 417.792,264.585 418.378,264.298 418.964,265.468 419.551,306.354 420.137,325.911 420.724,345.147 421.31,380.4 421.896,398.072 422.483,400.875 423.069,404.914 423.656,422.971 424.242,440.459 424.829,457.764 425.415,463.842 426.001,470.765 426.588,477.762 427.174,485.388 427.761,494.536 428.347,529.87 428.933,554.406 429.52,577.932 430.106,586.116 430.693,600.583 431.279,615.609 431.865,636.338 432.452,650.657 433.038,657.985 433.625,677.68 434.211,685.327 434.798,703.74 435.384,726.388 435.97,732.932 436.557,754.25 437.143,760.622 437.73,767.331 438.316,782.863 438.902,793.974 439.489,809.752 440.075,823.793 440.662,841.621 441.248,847.884 441.835,857.305 442.421,863.745 443.007,873.377 443.594,879.481 444.18,889.206 444.767,908.138 445.353,920.316 445.939,928.818 446.526,933.984 447.112,942.166 447.699,961.805 448.285,974.676 448.871,983.949 449.458,993.23 450.044,997.31 450.631,1011.67 451.217,1017.79 451.804,1023.81 452.39,1027.33 452.976,1035.76 453.563,1041.55 454.149,1047.04 454.736,1050.17 455.322,1053.25 455.908,1058.9 456.495,1066.71 457.081,1071.88 457.668,1075.26 458.254,1080.33 458.84,1090.06 459.427,1093.14 460.013,1098.05 460.6,1102.86 461.186,1111.37 461.773,1114.02 462.359,1115.86 462.945,1125.82 463.532,1128.13 464.118,1134.23 464.705,1135.9 465.291,1137.85 465.877,1143.2 466.464,1144.82 467.05,1148.08 467.637,1155.08 468.223,1159.75 468.809,1160.98 469.396,1162.08 469.982,1168.95 470.569,1170.02 471.155,1174.69 471.742,1180.75 472.328,1183 472.914,1186.9 473.501,1194.1 474.087,1197.71 474.674,1197.76 475.26,1197.77 475.846,1201.17 476.433,1202.84 477.019,1209.32 477.606,1209.28 478.192,1212.39 478.778,1213.58 479.365,1215.01 479.951,1214.31 480.538,1215.63 481.124,1218.15 481.711,1217.82 482.297,1217.33 482.883,1215.58 483.47,1216.45 484.056,1216.57 484.643,1219.7 485.229,1222.55 485.815,1223.48 486.402,1221.48 486.988,1221.23 487.575,1222.67 488.161,1225.2 488.748,1226.74 489.334,1226.3 489.92,1224.44 490.507,1226.01 491.093,1225.88 491.68,1222.48 492.266,1225.39 492.852,1225.29 493.439,1226.7 494.025,1228 494.612,1230.9 495.198,1230.12 495.784,1232.92 496.371,1231.32 496.957,1231.06 497.544,1230.9 498.13,1232.38 498.717,1233.63 499.303,1233.27 499.889,1234.35 500.476,1233.96 501.062,1230.52 501.649,1230.35 502.235,1233.52 502.821,1236.17 503.408,1236.93 503.994,1234.88 504.581,1233.42 505.167,1234.88 505.753,1235.75 506.34,1238.6 506.926,1239.57 507.513,1236.22 508.099,1234.4 508.686,1234.19 509.272,1238.55 509.858,1240.88 510.445,1243.52 511.031,1242.94 511.618,1243.84 512.204,1243.05 512.79,1243.99 513.377,1244.52 513.963,1243.76 514.55,1245.87 515.136,1245.07 515.722,1245.41 516.309,1243.01 516.895,1244.72 517.482,1242.37 518.068,1241.92 518.655,1239.92 519.241,1241.05 519.827,1239.43 520.414,1240.53 521,1243.1 521.587,1245.35 522.173,1247.21 522.759,1245.14 523.346,1248.24 523.932,1245.92 524.519,1246.74 525.105,1247.35 525.691,1250.53 526.278,1249.58 526.864,1248.75 527.451,1249.15 528.037,1245.38 528.624,1245.96 529.21,1245.08 529.796,1242.51 530.383,1239.02 530.969,1239.88 531.556,1237.76 532.142,1241.76 532.728,1243.97 533.315,1247.54 533.901,1243.96 534.488,1244.61 535.074,1245.25 535.661,1247.14 536.247,1247.56 536.833,1248.12 537.42,1249.96 538.006,1247.39 538.593,1244.95 539.179,1246.88 539.765,1243.23 540.352,1242.6 540.938,1241.75 541.525,1242.62 542.111,1240.5 542.697,1242.68 543.284,1241.79 543.87,1240.98 544.457,1244.84 545.043,1243.65 545.63,1245.41 546.216,1245.75 546.802,1246.18 547.389,1244.98 547.975,1243.97 548.562,1242.89 549.148,1240.81 549.734,1241.46 550.321,1237.92 550.907,1238.58 551.494,1237.91 552.08,1238.84 552.666,1236.68 553.253,1237.42 553.839,1236.99 554.426,1236.41 555.012,1238.88 555.599,1241.39 556.185,1242.1 556.771,1242.63 557.358,1239.44 557.944,1235.87 558.531,1235.11 559.117,1231.63 559.703,1231.21 560.29,1235.44 560.876,1234.85 561.463,1231.35 562.049,1229.71 562.635,1229.76 563.222,1226.64 563.808,1227.9 564.395,1227.82 564.981,1229 565.568,1227.42 566.154,1225.83 566.74,1228.5 567.327,1229.75 567.913,1227.85 568.5,1227.61 569.086,1228.85 569.672,1228.64 570.259,1227.39 570.845,1227.17 571.432,1225.4 572.018,1226.66 572.605,1227.74 573.191,1227.74 573.777,1230.61 574.364,1230.01 574.95,1231.24 575.537,1232.48 576.123,1233.68 576.709,1236.05 577.296,1236.8 577.882,1233.16 578.469,1232.83 579.055,1232.77 579.641,1235.34 580.228,1236.12 580.814,1235.29 581.401,1233.48 581.987,1231.58 582.574,1232.51 583.16,1233.39 583.746,1234.18 584.333,1236.25 584.919,1235.36 585.506,1237.3 586.092,1233.64 586.678,1230.34 587.265,1230.05 587.851,1228.27 588.438,1226.66 589.024,1227.91 589.61,1226.21 590.197,1228.96 590.783,1227.13 591.37,1226.74 591.956,1225.05 592.543,1221.84 593.129,1223.27 593.715,1223.44 594.302,1219.12 594.888,1222.2 595.475,1222.3 596.061,1225.09 596.647,1225.14 597.234,1222.23 597.82,1222.24 598.407,1220.94 598.993,1222.46 599.579,1220.87 600.166,1222.86 600.752,1222.7 601.339,1221.14 601.925,1219.6 602.512,1219.74 603.098,1220.04 603.684,1220.41 604.271,1218.76 604.857,1217.38 605.444,1217.67 606.03,1217.92 606.616,1221.14 607.203,1221.02 607.789,1219.86 608.376,1216.81 608.962,1215.5 609.548,1212.98 610.135,1212.12 610.721,1212.72 611.308,1214.31 611.894,1216.2 612.481,1213.86 613.067,1214.12 613.653,1214.39 614.24,1217.17 614.826,1219.99 615.413,1219.7 615.999,1223.93 616.585,1229.21 617.172,1228.86 617.758,1231.04 618.345,1233.18 618.931,1232.46 619.518,1230.27 620.104,1228.36 620.69,1230.45 621.277,1226.97 621.863,1228.21 622.45,1225.03 623.036,1226.01 623.622,1225.31 624.209,1226.23 624.795,1223.35 625.382,1225.96 625.968,1225.6 626.554,1223.58 627.141,1223.08 627.727,1224.31 628.314,1224.04 628.9,1220.49 629.487,1224.68 630.073,1224.11 630.659,1221.23 631.246,1221.05 631.832,1222.47 632.419,1222.15 633.005,1222.1 633.591,1222.33 634.178,1220.53 634.764,1221.89 635.351,1225.71 635.937,1224.04 636.523,1226.41 637.11,1225.96 637.696,1222.47 638.283,1225.09 638.869,1226.24 639.456,1226.26 640.042,1227.28 640.628,1227.04 641.215,1227.97 641.801,1227.39 642.388,1229.56 642.974,1230.46 643.56,1228.35 644.147,1229.29 644.733,1229.99 645.32,1226.58 645.906,1223.09 646.492,1224.19 647.079,1222.42 647.665,1222.15 648.252,1221.54 648.838,1221.36 649.425,1222.49 650.011,1223.66 650.597,1223.16 651.184,1224.15 651.77,1226.66 652.357,1224.49 652.943,1226.63 653.529,1224.89 654.116,1224.43 654.702,1222.49 655.289,1224.94 655.875,1224.34 656.462,1222.49 657.048,1219.3 657.634,1221.01 658.221,1219.4 658.807,1216.59 659.394,1216.54 659.98,1215.33 660.566,1215.27 661.153,1215.25 661.739,1216.57 662.326,1220.45 662.912,1220.37 663.498,1218.89 664.085,1218.73 664.671,1222.96 665.258,1222.47 665.844,1222.51 666.431,1223.41 667.017,1227.3 667.603,1226.77 668.19,1227.53 668.776,1225.52 669.363,1225.34 669.949,1225 670.535,1224.58 671.122,1225.64 671.708,1223.94 672.295,1221.99 672.881,1218.97 673.467,1219.16 674.054,1216.2 674.64,1219.01 675.227,1220.32 675.813,1218.64 676.4,1218.84 676.986,1218.49 677.572,1217.21 678.159,1218.4 678.745,1219.8 679.332,1219.71 679.918,1220.99 680.504,1223.59 681.091,1221.87 681.677,1221.61 682.264,1221.44 682.85,1221.26 683.436,1222.61 684.023,1220.68 684.609,1221.76 685.196,1221.41 685.782,1221.16 686.369,1220.5 686.955,1220.17 687.541,1224.16 688.128,1223.92 688.714,1224.9 689.301,1221.51 689.887,1221.21 690.473,1222.43 691.06,1219.24 691.646,1220.59 692.233,1219.15 692.819,1218.95 693.405,1217.29 693.992,1220.08 694.578,1221.33 695.165,1222.3 695.751,1223.34 696.338,1222.97 696.924,1219.42 697.51,1219.33 698.097,1219.23 698.683,1217.26 699.27,1215.56 699.856,1215.41 700.442,1215.46 701.029,1214.22 701.615,1216.78 702.202,1218.22 702.788,1217.99 703.375,1213.51 703.961,1213.75 704.547,1213.9 705.134,1213.64 705.72,1208.13 706.307,1207.57 706.893,1209.32 707.479,1209.34 708.066,1208.3 708.652,1211.44 709.239,1211.62 709.825,1211.77 710.411,1210.61 710.998,1212.19 711.584,1212.36 712.171,1209.21 712.757,1207.73 713.344,1209.4 713.93,1207.14 714.516,1206.25 715.103,1205.41 715.689,1205.95 716.276,1208.14 716.862,1208.67 717.448,1209.22 718.035,1209.47 718.621,1209.8 719.208,1208.68 719.794,1207.53 720.38,1209.26 720.967,1209.4 721.553,1209.53 722.14,1210.84 722.726,1211.12 723.313,1211.27 723.899,1211.58 724.485,1211.85 725.072,1213.38 725.658,1212.03 726.245,1216.15 726.831,1217.3 727.417,1215.81 728.004,1216.87 728.59,1216.91 729.177,1218.32 729.763,1218.58 730.349,1217.13 730.936,1218.39 731.522,1222.35 732.109,1219.07 732.695,1218.97 733.282,1217.36 733.868,1215.66 734.454,1214.33 735.041,1214.61 735.627,1210.51 736.214,1208.16 736.8,1207.18 737.386,1208.94 737.973,1206.29 738.559,1206.64 739.146,1209.94 739.732,1211.85 740.318,1214.49 740.905,1215.54 741.491,1214.36 742.078,1214.22 742.664,1218.37 743.251,1218.16 743.837,1217.62 744.423,1217.69 745.01,1218.8 745.596,1216.95 746.183,1218.29 746.769,1218.07 747.355,1216.35 747.942,1220.45 748.528,1218.91 749.115,1217.09 749.701,1215.65 750.288,1215.4 750.874,1215.22 751.46,1216.55 752.047,1216.51 752.633,1217.67 753.22,1218.78 753.806,1221.13 754.392,1218.02 754.979,1220.6 755.565,1221.71 756.152,1221.25 756.738,1219.56 757.324,1220.68 757.911,1220.41 758.497,1218.75 759.084,1220.01 759.67,1219.7 760.257,1218.16 760.843,1217.69 761.429,1218.84 762.016,1217.57 762.602,1218.78 763.189,1218.75 763.775,1217.06 764.361,1217.09 764.948,1216.91 765.534,1218.21 766.121,1219.27 766.707,1220.45 767.293,1218.61 767.88,1221.21 768.466,1219.63 769.053,1219.57 769.639,1213.59 770.226,1213.71 770.812,1216.29 771.398,1217.4 771.985,1222.95 772.571,1222.31 773.158,1224.42 773.744,1222.54 774.33,1219.23 774.917,1219.19 775.503,1217.37 776.09,1215.85 776.676,1215.72 777.262,1214 777.849,1215.34 778.435,1215.05 779.022,1213.46 779.608,1214.83 780.195,1216.32 780.781,1215.95 781.367,1215.51 781.954,1215.52 782.54,1216.7 783.127,1213.68 783.713,1213.57 784.299,1212.3 784.886,1212.39 785.472,1213.61 786.059,1212.16 786.645,1214.97 787.232,1215.99 787.818,1216.95 788.404,1216.42 788.991,1217.34 789.577,1218.32 790.164,1215.38 790.75,1216.29 791.336,1215.99 791.923,1217.19 792.509,1215.74 793.096,1214.27 793.682,1212.67 794.268,1215.41 794.855,1217.9 795.441,1217.85 796.028,1220.07 796.614,1219.79 797.201,1216.63 797.787,1213.54 798.373,1213.42 798.96,1216.26 799.546,1213.27 800.133,1214.24 800.719,1215.31 801.305,1216.44 801.892,1217.35 802.478,1217.57 803.065,1214.75 803.651,1215.95 804.237,1214.7 804.824,1217.34 805.41,1217.22 805.997,1215.51 806.583,1215.36 807.17,1212.44 807.756,1212.2 808.342,1210.8 808.929,1213.54 809.515,1214.88 810.102,1210.51 810.688,1210.47 811.274,1207.78 811.861,1209.63 812.447,1211.38 813.034,1209.99 813.62,1208.73 814.206,1207.57 814.793,1209.33 815.379,1208.28 815.966,1209.59 816.552,1212.74 817.139,1212.74 817.725,1212.46 818.311,1210.91 818.898,1210.74 819.484,1212.07 820.071,1213.43 820.657,1210.61 821.243,1212.32 821.83,1212.28 822.416,1213.53 823.003,1213.66 823.589,1215.02 824.175,1214.85 824.762,1218.88 825.348,1217.04 825.935,1216.82 826.521,1216.65 827.108,1215.39 827.694,1216.87 828.28,1213.66 828.867,1209.29 829.453,1208.1 830.04,1208.21 830.626,1208.33 831.212,1208.72 831.799,1208.92 832.385,1207.63 832.972,1206.28 833.558,1207.99 834.145,1210.97 834.731,1212.37 835.317,1212.14 835.904,1213.66 836.49,1213.58 837.077,1212.06 837.663,1213.33 838.249,1211.64 838.836,1211.71 839.422,1210.47 840.009,1210.41 840.595,1211.75 841.181,1210.37 841.768,1208.98 842.354,1207.77 842.941,1209.56 843.527,1209.63 844.114,1208.24 844.7,1204.05 845.286,1202.94 845.873,1204.74 846.459,1206.61 847.046,1206.68 847.632,1206.92 848.218,1208.56 848.805,1211.7 849.391,1211.67 849.978,1211.59 850.564,1211.65 851.15,1211.79 851.737,1215.84 852.323,1216.67 852.91,1216.48 853.496,1214.85 854.083,1214.8 854.669,1214.36 855.255,1211.38 855.842,1212.86 856.428,1208.37 857.015,1208.73 857.601,1210.09 858.187,1209.8 858.774,1211.22 859.36,1214.28 859.947,1212.37 860.533,1213.53 861.119,1216.22 861.706,1215.96 862.292,1214.42 862.879,1214.52 863.465,1214.45 864.052,1214.06 864.638,1213.76 865.224,1215.12 865.811,1214.97 866.397,1215.97 866.984,1216.99 867.57,1215.11 868.156,1216.08 868.743,1217.28 869.329,1217.02 869.916,1216.86 870.502,1215.23 871.089,1216.26 871.675,1216.18 872.261,1214.51 872.848,1209.94 873.434,1208.67 874.021,1210.56 874.607,1209.09 875.193,1209.43 875.78,1209.42 876.366,1213.55 876.953,1212.01 877.539,1211.72 878.125,1214.48 878.712,1212.68 879.298,1214.09 879.885,1214.21 880.471,1213.85 881.058,1212.23 881.644,1210.62 882.23,1212.04 882.817,1212.16 883.403,1213.41 883.99,1212.04 884.576,1213.66 885.162,1214.59 885.749,1214.15 886.335,1212.94 886.922,1212.77 887.508,1212.42 888.094,1212.18 888.681,1209.41 889.267,1210.95 889.854,1210.63 890.44,1209.22 891.027,1211.09 891.613,1212.67 892.199,1211.38 892.786,1211.43 893.372,1210.07 893.959,1208.67 894.545,1211.68 895.131,1208.53 895.718,1209.89 896.304,1209.92 896.891,1208.71 897.477,1206.27 898.063,1203.65 898.65,1206.76 899.236,1205.68 899.823,1205.7 900.409,1207.35 900.996,1207.37 901.582,1207.54 902.168,1206.24 902.755,1209.52 903.341,1211.01 903.928,1206.67 904.514,1208.2 905.1,1208.49 905.687,1210.07 906.273,1210.16 906.86,1208.67 907.446,1210.1 908.032,1211.39 908.619,1212.81 909.205,1211.09 909.792,1211.5 910.378,1208.73 910.965,1205.92 911.551,1205.04 912.137,1202.46 912.724,1202.75 913.31,1206.14 913.897,1207.83 914.483,1209.67 915.069,1204.2 915.656,1204.64 916.242,1202.06 916.829,1203.63 917.415,1204.12 918.002,1202.97 918.588,1202.19 919.174,1202.44 919.761,1202.72 920.347,1203.11 920.934,1206.49 921.52,1210.87 922.106,1210.99 922.693,1212.36 923.279,1210.94 923.866,1208.1 924.452,1208.46 925.038,1207.21 925.625,1207.29 926.211,1207.22 926.798,1208.92 927.384,1209.06 927.971,1211.81 928.557,1211.85 929.143,1216.03 929.73,1217.27 930.316,1215.5 930.903,1213.8 931.489,1213.72 932.075,1214.91 932.662,1212.14 933.248,1209.59 933.835,1208.41 934.421,1209.81 935.007,1208.86 935.594,1208.84 936.18,1207.61 936.767,1206.18 937.353,1206.44 937.94,1205.28 938.526,1211.32 939.112,1209.82 939.699,1210.16 940.285,1208.81 940.872,1207.57 941.458,1206.22 942.044,1207.44 942.631,1204.85 943.217,1205.39 943.804,1208.47 944.39,1209.9 944.976,1207.31 945.563,1204.87 946.149,1205.26 946.736,1205.62 947.322,1204.4 947.909,1204.94 948.495,1203.98 949.081,1205.83 949.668,1204.52 950.254,1202.98 950.841,1203.45 951.427,1202.31 952.013,1202.53 952.6,1201.58 953.186,1202.16 953.773,1202.41 954.359,1201.64 954.945,1202.25 955.532,1202.63 956.118,1204.87 956.705,1206.52 957.291,1205.22 957.878,1206.93 958.464,1205.77 959.05,1204.78 959.637,1205.19 960.223,1208.23 960.81,1205.66 961.396,1204.29 961.982,1204.63 962.569,1206.18 963.155,1207.81 963.742,1210.82 964.328,1212.13 964.915,1211.67 965.501,1214.44 966.087,1215.79 966.674,1215.52 967.26,1216.79 967.847,1216.46 968.433,1220.15 969.019,1219.88 969.606,1217.93 970.192,1218.91 970.779,1219.63 971.365,1220.7 971.951,1222.89 972.538,1222.33 973.124,1223.29 973.711,1223.76 974.297,1223.16 974.884,1222.69 975.47,1223.61 976.056,1222.89 976.643,1220.58 977.229,1218.44 977.816,1215.23 978.402,1219.14 978.988,1221.6 979.575,1220.89 980.161,1220.13 980.748,1217.89 981.334,1217.51 981.92,1216.05 982.507,1217.26 983.093,1218.23 983.68,1217.67 984.266,1218.46 984.853,1219.4 985.439,1219.27 986.025,1220.21 986.612,1219.42 987.198,1220.29 987.785,1219.65 988.371,1219.1 988.957,1217.51 989.544,1215.74 990.13,1210.94 990.717,1207.89 991.303,1213.57 991.889,1213.59 992.476,1213.35 993.062,1211.59 993.649,1214.3 994.235,1210.97 994.822,1211.08 995.408,1212.37 995.994,1212.05 996.581,1208.93 997.167,1207.25 997.754,1205.81 998.34,1207.31 998.926,1207.33 999.513,1209.27 1000.1,1206.9 1000.69,1208.4 1001.27,1206.89 1001.86,1205.9 1002.44,1206.38 1003.03,1205.13 1003.62,1203.88 1004.2,1206.57 1004.79,1206.42 1005.38,1203.87 1005.96,1202.44 1006.55,1204.08 1007.14,1205.74 1007.72,1210.05 1008.31,1210.02 1008.9,1210.05 1009.48,1210.14 1010.07,1207.18 1010.65,1208.63 1011.24,1210.12 1011.83,1209.83 1012.41,1211.39 1013,1210.16 1013.59,1207.15 1014.17,1208.75 1014.76,1208.69 1015.35,1205.74 1015.93,1203.16 1016.52,1203.64 1017.11,1204.03 1017.69,1206.8 1018.28,1207.06 1018.86,1205.89 1019.45,1205.92 1020.04,1207.57 1020.62,1206.02 1021.21,1203.41 1021.8,1206.59 1022.38,1206.99 1022.97,1205.85 1023.56,1205.97 1024.14,1206.21 1024.73,1208.91 1025.32,1211.97 1025.9,1213.41 1026.49,1216.17 1027.07,1217.36 1027.66,1215.75 1028.25,1212.56 1028.83,1215.13 1029.42,1214.8 1030.01,1214.41 1030.59,1214.14 1031.18,1214.02 1031.77,1213.78 1032.35,1209.47 1032.94,1210.95 1033.52,1210.86 1034.11,1210.73 1034.7,1209.36 1035.28,1207.98 1035.87,1205.47 1036.46,1202.92 1037.04,1200.23 1037.63,1200.55 1038.22,1198.66 1038.8,1202.03 1039.39,1202.58 1039.98,1201.33 1040.56,1201.8 1041.15,1202.27 1041.73,1206.75 1042.32,1209.83 1042.91,1211.39 1043.49,1213.06 1044.08,1211.58 1044.67,1208.86 1045.25,1208.74 1045.84,1206 1046.43,1207.66 1047.01,1207.97 1047.6,1209.68 1048.19,1209.47 1048.77,1206.53 1049.36,1208.3 1049.94,1208.37 1050.53,1208.31 1051.12,1206.77 1051.7,1208.53 1052.29,1208.5 1052.88,1205.87 1053.46,1207.47 1054.05,1209.28 1054.64,1212.08 1055.22,1213.37 1055.81,1210.78 1056.39,1210.49 1056.98,1212 1057.57,1207.93 1058.15,1205.25 1058.74,1205.47 1059.33,1202.67 1059.91,1204.36 1060.5,1206.07 1061.09,1206.22 1061.67,1206.24 1062.26,1204.75 1062.85,1209.08 1063.43,1203.8 1064.02,1204.32 1064.6,1206.13 1065.19,1210.69 1065.78,1207.91 1066.36,1209.38 1066.95,1209.36 1067.54,1212.41 1068.12,1215.06 1068.71,1214.81 1069.3,1216.36 1069.88,1220.36 1070.47,1221.04 1071.06,1226.08 1071.64,1222.57 1072.23,1221.82 1072.81,1221.08 1073.4,1223.48 1073.99,1223.9 1074.57,1223.39 1075.16,1222.64 1075.75,1223.48 1076.33,1220.3 1076.92,1217.15 1077.51,1218.14 1078.09,1217.75 1078.68,1215.5 1079.26,1212.32 1079.85,1212.64 1080.44,1212.67 1081.02,1209.67 1081.61,1212.42 1082.2,1212.24 1082.78,1215.05 1083.37,1212.32 1083.96,1213.47 1084.54,1214.84 1085.13,1213.06 1085.72,1212.69 1086.3,1210.8 1086.89,1210.52 1087.47,1211.46 1088.06,1211.47 1088.65,1211.14 1089.23,1210.98 1089.82,1212.1 1090.41,1210.67 1090.99,1208.87 1091.58,1207.28 1092.17,1205.88 1092.75,1206.31 1093.34,1207.72 1093.93,1206.24 1094.51,1207.51 1095.1,1204.81 1095.68,1206.54 1096.27,1206.71 1096.86,1207.28 1097.44,1207.56 1098.03,1206.49 1098.62,1207.89 1099.2,1206.55 1099.79,1206.84 1100.38,1204.34 1100.96,1205.04 1101.55,1207.15 1102.14,1211.46 1102.72,1209.94 1103.31,1209.88 1103.89,1212.83 1104.48,1212.66 1105.07,1213.81 1105.65,1214.83 1106.24,1220.41 1106.83,1218.4 1107.41,1217.99 1108,1214.6 1108.59,1214.31 1109.17,1215.61 1109.76,1216.75 1110.34,1213.65 1110.93,1213.61 1111.52,1216.3 1112.1,1216.05 1112.69,1217.16 1113.28,1218.07 1113.86,1217.94 1114.45,1217.57 1115.04,1218.45 1115.62,1220.6 1116.21,1218.3 1116.8,1219.48 1117.38,1219.18 1117.97,1214.55 1118.55,1212.74 1119.14,1213.69 1119.73,1214.72 1120.31,1215.69 1120.9,1215.37 1121.49,1215.24 1122.07,1210.9 1122.66,1212.07 1123.25,1213.15 1123.83,1211.76 1124.42,1212.95 1125.01,1210.02 1125.59,1206.92 1126.18,1205.33 1126.76,1202.62 1127.35,1201.63 1127.94,1203.28 1128.52,1203.4 1129.11,1203.7 1129.7,1204.12 1130.28,1200.09 1130.87,1200.39 1131.46,1199.65 1132.04,1200 1132.63,1199.26 1133.21,1200.2 1133.8,1200.74 1134.39,1199.93 1134.97,1197.85 1135.56,1200.08 1136.15,1202.03 1136.73,1202.08 1137.32,1201.25 1137.91,1201.87 1138.49,1205.2 1139.08,1203.83 1139.67,1204.11 1140.25,1203.03 1140.84,1203.39 1141.42,1203.75 1142.01,1205.46 1142.6,1205.67 1143.18,1205.62 1143.77,1204.69 1144.36,1205.09 1144.94,1208.22 1145.53,1212.5 1146.12,1215.05 1146.7,1213.43 1147.29,1214.5 1147.88,1214.12 1148.46,1213.7 1149.05,1215.09 1149.63,1214.5 1150.22,1212.59 1150.81,1213.31 1151.39,1214.46 1151.98,1212.88 1152.57,1212.6 1153.15,1213.86 1153.74,1213.68 1154.33,1213.27 1154.91,1211.75 1155.5,1216.96 1156.09,1217.92 1156.67,1217.5 1157.26,1217.14 1157.84,1215.28 1158.43,1215.12 1159.02,1214.67 1159.6,1214.53 1160.19,1215.56 1160.78,1219.24 1161.36,1218.8 1161.95,1218.54 1162.54,1217.8 1163.12,1217.6 1163.71,1214.17 1164.29,1215.15 1164.88,1213.5 1165.47,1215.95 1166.05,1217.08 1166.64,1213.56 1167.23,1211.83 1167.81,1208.83 1168.4,1208.87 1168.99,1208.64 1169.57,1205.88 1170.16,1205.89 1170.75,1206.21 1171.33,1207.73 1171.92,1207.83 1172.5,1204.95 1173.09,1203.96 1173.68,1204.4 1174.26,1204.63 1174.85,1200.41 1175.44,1203.56 1176.02,1210.83 1176.61,1215.1 1177.2,1213.13 1177.78,1210.17 1178.37,1208.57 1178.96,1208.6 1179.54,1208.92 1180.13,1205.94 1180.71,1204.55 1181.3,1206.27 1181.89,1206.23 1182.47,1203.45 1183.06,1205.26 1183.65,1205.52 1184.23,1207.07 1184.82,1207.58 1185.41,1203.41 1185.99,1203.77 1186.58,1201.12 1187.16,1201.55 1187.75,1204.79 1188.34,1204.96 1188.92,1205.2 1189.51,1201.08 1190.1,1201.59 1190.68,1202.26 1191.27,1201.28 1191.86,1199.29 1192.44,1201.18 1193.03,1203.13 1193.62,1203.83 1194.2,1206.93 1194.79,1207.07 1195.37,1208.62 1195.96,1207.22 1196.55,1206.02 1197.13,1202.03 1197.72,1200.85 1198.31,1200.07 1198.89,1203.71 1199.48,1203.16 1200.07,1206.47 1200.65,1208.09 1201.24,1208.29 1201.83,1211.15 1202.41,1211.15 1203,1209.75 1203.58,1205.59 1204.17,1208.83 1204.76,1210.35 1205.34,1210.27 1205.93,1204.51 1206.52,1203.54 1207.1,1201.09 1207.69,1201.75 1208.28,1205.3 1208.86,1205.85 1209.45,1207.49 1210.03,1209.16 1210.62,1209.18 1211.21,1213.28 1211.79,1208.83 1212.38,1211.89 1212.97,1210.08 1213.55,1208.65 1214.14,1210.06 1214.73,1211.55 1215.31,1215.57 1215.9,1215.39 1216.49,1213.87 1217.07,1207.92 1217.66,1207.93 1218.24,1209.16 1218.83,1209.07 1219.42,1209.01 1220,1209.11 1220.59,1206.35 1221.18,1203.67 1221.76,1205.26 1222.35,1204.2 1222.94,1208.86 1223.52,1209.06 1224.11,1209.08 1224.7,1210.47 1225.28,1210.79 1225.87,1212.31 1226.45,1213.47 1227.04,1213.03 1227.63,1213.19 1228.21,1210.13 1228.8,1211.56 1229.39,1208.43 1229.97,1208.83 1230.56,1209.96 1231.15,1210.09 1231.73,1210.11 1232.32,1210.02 1232.91,1211.62 1233.49,1214.16 1234.08,1215.35 1234.66,1217.99 1235.25,1218.87 1235.84,1214.13 1236.42,1213.67 1237.01,1213.4 1237.6,1213.44 1238.18,1212.91 1238.77,1216.62 1239.36,1214.73 1239.94,1214.46 1240.53,1216.8 1241.11,1216.11 1241.7,1215.8 1242.29,1215.69 1242.87,1209.66 1243.46,1208.42 1244.05,1208.54 1244.63,1211.46 1245.22,1208.77 1245.81,1208.68 1246.39,1209.76 1246.98,1213.82 1247.57,1213.45 1248.15,1214.8 1248.74,1213.21 1249.32,1211.53 1249.91,1212.82 1250.5,1213.87 1251.08,1212 1251.67,1212.04 1252.26,1213.14 1252.84,1210.02 1253.43,1206.92 1254.02,1204.49 1254.6,1204.56 1255.19,1202.12 1255.78,1206.87 1256.36,1208.48 1256.95,1210.08 1257.53,1209.91 1258.12,1205.85 1258.71,1205.96 1259.29,1203.29 1259.88,1205.12 1260.47,1208.18 1261.05,1206.87 1261.64,1205.47 1262.23,1204.22 1262.81,1205.83 1263.4,1206.1 1263.98,1204.75 1264.57,1204.92 1265.16,1205.21 1265.74,1205.7 1266.33,1208.38 1266.92,1209.79 1267.5,1208.44 1268.09,1208.69 1268.68,1207.68 1269.26,1209.25 1269.85,1210.72 1270.44,1208.9 1271.02,1207.52 1271.61,1211.8 1272.19,1211.91 1272.78,1213.16 1273.37,1215.82 1273.95,1215.58 1274.54,1216.61 1275.13,1220.32 1275.71,1217.09 1276.3,1219.54 1276.89,1219.27 1277.47,1221.71 1278.06,1221.12 1278.65,1220.37 1279.23,1216.67 1279.82,1216.23 1280.4,1217.29 1280.99,1215.73 1281.58,1213.8 1282.16,1213.63 1282.75,1209.39 1283.34,1208.04 1283.92,1206.66 1284.51,1206.67 1285.1,1206.77 1285.68,1205.35 1286.27,1202.91 1286.86,1203.41 1287.44,1202.17 1288.03,1204.12 1288.61,1204.33 1289.2,1201.86 1289.79,1200.91 1290.37,1201.21 1290.96,1203.21 1291.55,1204.95 1292.13,1206.9 1292.72,1205.58 1293.31,1207.38 1293.89,1207.66 1294.48,1203.38 1295.06,1209.11 1295.65,1208.84 1296.24,1202.87 1296.82,1203.33 1297.41,1203.4 1298,1202.06 1298.58,1203.72 1299.17,1202.73 1299.76,1203.01 1300.34,1204.53 1300.93,1204.8 1301.52,1205.3 1302.1,1204.32 1302.69,1201.87 1303.27,1203.68 1303.86,1203.7 1304.45,1204.11 1305.03,1202.81 1305.62,1203.38 1306.21,1205.44 1306.79,1205.89 1307.38,1207.69 1307.97,1209.31 1308.55,1209.36 1309.14,1212.1 1309.73,1213.69 1310.31,1214.78 1310.9,1214.69 1311.48,1214.26 1312.07,1212.65 1312.66,1217.87 1313.24,1217.82 1313.83,1221.53 1314.42,1219.29 1315,1218.71 1315.59,1220.85 1316.18,1220.26 1316.76,1219.88 1317.35,1216.51 1317.93,1214.5 1318.52,1211.29 1319.11,1211.06 1319.69,1209.42 1320.28,1209.41 1320.87,1210.8 1321.45,1210.52 1322.04,1209.01 1322.63,1207.65 1323.21,1209.06 1323.8,1210.55 1324.39,1210.4 1324.97,1211.95 1325.56,1211.79 1326.14,1214.28 1326.73,1212.71 1327.32,1212.38 1327.9,1211.94 1328.49,1210.59 1329.08,1212.29 1329.66,1210.81 1330.25,1206.24 1330.84,1205.13 1331.42,1204.12 1332.01,1203.18 1332.6,1203.5 1333.18,1206.91 1333.77,1206.74 1334.35,1208.57 1334.94,1209.05 1335.53,1207.9 1336.11,1208.11 1336.7,1208.2 1337.29,1208.17 1337.87,1209.84 1338.46,1209.95 1339.05,1208.42 1339.63,1212.74 1340.22,1213.78 1340.8,1213.59 1341.39,1209.02 1341.98,1207.42 1342.56,1205.91 1343.15,1207.33 1343.74,1208.77 1344.32,1208.68 1344.91,1209.94 1345.5,1207.06 1346.08,1204.64 1346.67,1209.01 1347.26,1211.91 1347.84,1214.67 1348.43,1214.36 1349.01,1215.65 1349.6,1216.78 1350.19,1216.41 1350.77,1213.14 1351.36,1215.59 1351.95,1215.37 1352.53,1214.99 1353.12,1210.4 1353.71,1209.29 1354.29,1210.56 1354.88,1210.65 1355.47,1207.72 1356.05,1207.92 1356.64,1207.93 1357.22,1210.79 1357.81,1209.04 1358.4,1211.76 1358.98,1211.58 1359.57,1211.29 1360.16,1212.47 1360.74,1212.27 1361.33,1212.12 1361.92,1212.02 1362.5,1211.8 1363.09,1213.19 1363.68,1211.49 1364.26,1211.15 1364.85,1212.6 1365.43,1209.48 1366.02,1212.18 1366.61,1208.98 1367.19,1207.83 1367.78,1204.94 1368.37,1205.58 1368.95,1207.21 1369.54,1206.13 1370.13,1203.59 1370.71,1205.51 1371.3,1201.41 1371.88,1203.22 1372.47,1203.75 1373.06,1201.47 1373.64,1200.85 1374.23,1201.27 1374.82,1203.28 1375.4,1203.36 1375.99,1205.22 1376.58,1205.3 1377.16,1205.46 1377.75,1209.79 1378.34,1208.31 1378.92,1211.01 1379.51,1212.19 1380.09,1210.71 1380.68,1212.16 1381.27,1210.75 1381.85,1208.99 1382.44,1210.33 1383.03,1212.95 1383.61,1217.97 1384.2,1214.55 1384.79,1212.87 1385.37,1211.2 1385.96,1215.22 1386.55,1213.7 1387.13,1216.82 1387.72,1216.74 1388.3,1217.81 1388.89,1217.62 1389.48,1214.19 1390.06,1212.57 1390.65,1212.07 1391.24,1211.73 1391.82,1211.74 1392.41,1211.6 1393,1211.52 1393.58,1211.37 1394.17,1212.66 1394.75,1212.5 1395.34,1214.92 1395.93,1214.48 1396.51,1218.27 1397.1,1217.96 1397.69,1214.85 1398.27,1211.95 1398.86,1209.29 1399.45,1207.72 1400.03,1210.46 1400.62,1211 1401.21,1209.74 1401.79,1213.95 1402.38,1212.16 1402.96,1211.88 1403.55,1211.76 1404.14,1210.51 1404.72,1210.2 1405.31,1211.55 1405.9,1212.89 1406.48,1212.81 1407.07,1214.16 1407.66,1214.09 1408.24,1212.36 1408.83,1214.77 1409.42,1213.11 1410,1213.05 1410.59,1211.27 1411.17,1209.91 1411.76,1209.97 1412.35,1211.22 1412.93,1209.7 1413.52,1209.5 1414.11,1210.81 1414.69,1209.42 1415.28,1208.21 1415.87,1206.62 1416.45,1207.01 1417.04,1207.15 1417.63,1210.01 1418.21,1210.06 1418.8,1207.28 1419.38,1207.26 1419.97,1204.51 1420.56,1204.64 1421.14,1203.46 1421.73,1203.82 1422.32,1205.59 1422.9,1202.99 1423.49,1203.5 1424.08,1201.21 1424.66,1201.77 1425.25,1199.55 1425.83,1202.87 1426.42,1205.71 1427.01,1204.96 1427.59,1206.55 1428.18,1203.94 1428.77,1204.27 1429.35,1204.32 1429.94,1203.14 1430.53,1202.3 1431.11,1204.11 1431.7,1203.25 1432.29,1200.87 1432.87,1202.82 1433.46,1204.69 1434.04,1203.64 1434.63,1199.93 1435.22,1200.44 1435.8,1200.69 1436.39,1201.13 1436.98,1201.35 1437.56,1201.48 1438.15,1199.3 1438.74,1201.09 1439.32,1201.58 1439.91,1201.9 1440.5,1200.89 1441.08,1201.68 1441.67,1203.52 1442.25,1203.82 1442.84,1205.54 1443.43,1205.88 1444.01,1203.32 1444.6,1202.03 1445.19,1205.25 1445.77,1204.03 1446.36,1205.82 1446.95,1204.53 1447.53,1200.63 1448.12,1204.09 1448.7,1205.38 1449.29,1206.88 1449.88,1207.27 1450.46,1209.03 1451.05,1210.51 1451.64,1212.94 1452.22,1212.99 1452.81,1214.22 1453.4,1212.69 1453.98,1211.26 1454.57,1212.55 1455.16,1212.25 1455.74,1213.57 1456.33,1215.03 1456.91,1213.2 1457.5,1211.81 1458.09,1210.15 1458.67,1210.13 1459.26,1207.44 1459.85,1206.11 1460.43,1206.31 1461.02,1207.89 1461.61,1207.81 1462.19,1208.11 1462.78,1207.89 1463.37,1207.92 1463.95,1210.76 1464.54,1209.21 1465.12,1210.79 1465.71,1210.47 1466.3,1210.46 1466.88,1208.93 1467.47,1210.5 1468.06,1209.13 1468.64,1207.78 1469.23,1208.02 1469.82,1207.86 1470.4,1208.85 1470.99,1213.23 1471.57,1213.01 1472.16,1212.83 1472.75,1211.01 1473.33,1213.62 1473.92,1214.69 1474.51,1216.05 1475.09,1215.74 1475.68,1213.88 1476.27,1216.21 1476.85,1215.79 1477.44,1216.92 1478.03,1219.22 1478.61,1220.14 1479.2,1218.35 1479.78,1216.51 1480.37,1208.91 1480.96,1208.88 1481.54,1210.23 1482.13,1211.65 1482.72,1214.42 1483.3,1212.73 1483.89,1213.97 1484.48,1213.58 1485.06,1213.55 1485.65,1208.77 1486.24,1210.25 1486.82,1211.68 1487.41,1213.04 1487.99,1214.13 1488.58,1213.85 1489.17,1213.56 1489.75,1210.56 1490.34,1210.33 1490.93,1214.46 1491.51,1212.7 1492.1,1211.3 1492.69,1208.25 1493.27,1208.22 1493.86,1208.2 1494.45,1208.33 1495.03,1204.04 1495.62,1201.33 1496.2,1203.38 1496.79,1203.81 1497.38,1204.05 1497.96,1201.63 1498.55,1203.41 1499.14,1203.89 1499.72,1205.68 1500.31,1204.36 1500.9,1204.7 1501.48,1206.49 1502.07,1207.94 1502.65,1206.81 1503.24,1206.95 1503.83,1207.06 1504.41,1205.85 1505,1207.47 1505.59,1206.03 1506.17,1205.01 1506.76,1203.96 1507.35,1204.41 1507.93,1206.32 1508.52,1207.87 1509.11,1207.73 1509.69,1212.26 1510.28,1212.32 1510.86,1214.88 1511.45,1211.74 1512.04,1211.6 1512.62,1210.16 1513.21,1210.46 1513.8,1211.61 1514.38,1212.9 1514.97,1210.39 1515.56,1212.02 1516.14,1212.02 1516.73,1213.12 1517.32,1213.05 1517.9,1208.88 1518.49,1208.95 1519.07,1209.07 1519.66,1210.48 1520.25,1208.86 1520.83,1211.83 1521.42,1213.06 1522.01,1211.71 1522.59,1213.17 1523.18,1211.62 1523.77,1211.61 1524.35,1210.33 1524.94,1212 1525.52,1211.85 1526.11,1207.57 1526.7,1207.58 1527.28,1206.22 1527.87,1206.62 1528.46,1205.37 1529.04,1205.45 1529.63,1204.2 1530.22,1204.48 1530.8,1203.71 1531.39,1203.65 1531.98,1208.39 1532.56,1208.6 1533.15,1208.97 1533.73,1210.44 1534.32,1211.84 1534.91,1210.04 1535.49,1209.96 1536.08,1209.84 1536.67,1211.33 1537.25,1211.31 1537.84,1212.71 1538.43,1213.06 1539.01,1210.35 1539.6,1211.99 1540.19,1214.78 1540.77,1217.13 1541.36,1213.78 1541.94,1217.98 1542.53,1220.11 1543.12,1221.25 1543.7,1220.83 1544.29,1223.29 1544.88,1219.87 1545.46,1219.7 1546.05,1217.66 1546.64,1218.97 1547.22,1219.93 1547.81,1220.86 1548.4,1222.67 1548.98,1219.2 1549.57,1220.35 1550.15,1217.37 1550.74,1217.04 1551.33,1216.85 1551.91,1210.85 1552.5,1213.78 1553.09,1216.19 1553.67,1215.77 1554.26,1215.6 1554.85,1212.62 1555.43,1214.1 1556.02,1216.83 1556.6,1213.73 1557.19,1214.95 1557.78,1215.84 1558.36,1213.89 1558.95,1213.53 1559.54,1216.03 1560.12,1215.69 1560.71,1214.18 1561.3,1215.58 1561.88,1216.31 1562.47,1217.18 1563.06,1216.6 1563.64,1217.47 1564.23,1212.57 1564.81,1210.73 1565.4,1211.85 1565.99,1205.99 1566.57,1208.76 1567.16,1210.21 1567.75,1208.77 1568.33,1208.7 1568.92,1208.35 1569.51,1206.99 1570.09,1205.73 1570.68,1207.21 1571.27,1207.3 1571.85,1204.56 1572.44,1201.91 1573.02,1202.26 1573.61,1201.52 1574.2,1204.93 1574.78,1206.38 1575.37,1206.43 1575.96,1210.73 1576.54,1209.54 1577.13,1210.84 1577.72,1213.41 1578.3,1212.96 1578.89,1216.67 1579.47,1216.3 1580.06,1211.66 1580.65,1209.92 1581.23,1207.57 1581.82,1207.35 1582.41,1208.76 1582.99,1210 1583.58,1208.46 1584.17,1209.79 1584.75,1205.69 1585.34,1210.17 1585.93,1211.62 1586.51,1209.83 1587.1,1209.7 1587.68,1209.59 1588.27,1208.31 1588.86,1205.43 1589.44,1204.12 1590.03,1203.24 1590.62,1200.56 1591.2,1199.34 1591.79,1195.52 1592.38,1193.39 1592.96,1194.66 1593.55,1197.07 1594.14,1202.3 1594.72,1205.1 1595.31,1205.38 1595.89,1205.48 1596.48,1204.37 1597.07,1204.68 1597.65,1203.74 1598.24,1205.51 1598.83,1204.09 1599.41,1201.7 1600,1200.76 1600.59,1201.26 1601.17,1201.63 1601.76,1204.72 1602.34,1203.87 1602.93,1204.51 1603.52,1203.6 1604.1,1205.87 1604.69,1206.03 1605.28,1207.53 1605.86,1211.84 1606.45,1212.18 1607.04,1212.25 1607.62,1210.63 1608.21,1207.89 1608.8,1206.89 1609.38,1206.78 1609.97,1211.54 1610.55,1210 1611.14,1211.16 1611.73,1210.8 1612.31,1211.86 1612.9,1208.94 1613.49,1207.51 1614.07,1207.49 1614.66,1210.21 1615.25,1208.86 1615.83,1209.05 1616.42,1206.27 1617.01,1209.27 1617.59,1207.95 1618.18,1208.04 1618.76,1205.41 1619.35,1205.75 1619.94,1207.11 1620.52,1206.01 1621.11,1206.12 1621.7,1209.09 1622.28,1210.58 1622.87,1210.35 1623.46,1208.6 1624.04,1207.24 1624.63,1208.73 1625.22,1207.5 1625.8,1210.5 1626.39,1209.11 1626.97,1209.4 1627.56,1211.09 1628.15,1215.36 1628.73,1212.11 1629.32,1210.77 1629.91,1213.19 1630.49,1215.82 1631.08,1216.99 1631.67,1216.36 1632.25,1218.86 1632.84,1218.45 1633.42,1218.2 1634.01,1218.99 1634.6,1217.09 1635.18,1216.34 1635.77,1212.84 1636.36,1215.45 1636.94,1214.92 1637.53,1217.3 1638.12,1215.58 1638.7,1211.33 1639.29,1208.55 1639.88,1208.6 1640.46,1210.12 1641.05,1208.74 1641.63,1205.93 1642.22,1206.06 1642.81,1205.97 1643.39,1206.41 1643.98,1206.35 1644.57,1206.64 1645.15,1205.42 1645.74,1205.65 1646.33,1208.65 1646.91,1208.63 1647.5,1209.98 1648.09,1211.24 1648.67,1209.66 1649.26,1208.32 1649.84,1207.14 1650.43,1204.15 1651.02,1204.27 1651.6,1202.9 1652.19,1203 1652.78,1203.51 1653.36,1206.92 1653.95,1208.54 1654.54,1211.37 1655.12,1212.64 1655.71,1211.01 1656.29,1210.98 1656.88,1214.07 1657.47,1211.07 1658.05,1210.79 1658.64,1211.88 1659.23,1211.66 1659.81,1208.85 1660.4,1206.05 1660.99,1207.41 1661.57,1207.43 1662.16,1210.37 1662.75,1211.85 1663.33,1212.83 1663.92,1213.93 1664.5,1214.74 1665.09,1212.9 1665.68,1215.4 1666.26,1215.07 1666.85,1213.14 1667.44,1211.43 1668.02,1208.58 1668.61,1208.32 1669.2,1209.91 1669.78,1214.19 1670.37,1210.83 1670.96,1208.07 1671.54,1208.23 1672.13,1211.1 1672.71,1211.13 1673.3,1208.08 1673.89,1209.36 1674.47,1209.26 1675.06,1207.69 1675.65,1207.5 1676.23,1209.12 1676.82,1206.39 1677.41,1209.55 1677.99,1208.14 1678.58,1206.96 1679.17,1208.49 1679.75,1211.33 1680.34,1211.06 1680.92,1213.83 1681.51,1213.72 1682.1,1214.76 1682.68,1211.65 1683.27,1212.99 1683.86,1215.48 1684.44,1213.89 1685.03,1212.03 1685.62,1210.61 1686.2,1209.4 1686.79,1209.29 1687.37,1212.22 1687.96,1212.43 1688.55,1210.62 1689.13,1212.14 1689.72,1212.4 1690.31,1212.27 1690.89,1210.75 1691.48,1209.35 1692.07,1209.41 1692.65,1211.01 1693.24,1209.84 1693.83,1209.69 1694.41,1206.58 1695,1205.35 1695.58,1208.24 1696.17,1208.37 1696.76,1207.02 1697.34,1208.55 1697.93,1207.08 1698.52,1207.12 1699.1,1207 1699.69,1205.47 1700.28,1205.77 1700.86,1204.2 1701.45,1203.08 1702.04,1201.99 1702.62,1202.9 1703.21,1204.61 1703.79,1205.05 1704.38,1209.38 1704.97,1208.29 1705.55,1209.61 1706.14,1208.03 1706.73,1206.59 1707.31,1206.69 1707.9,1204.85 1708.49,1203.67 1709.07,1204.01 1709.66,1207.1 1710.24,1205.67 1710.83,1205.73 1711.42,1204.72 1712,1204.9 1712.59,1206.46 1713.18,1210.98 1713.76,1209.76 1714.35,1209.95 1714.94,1209.92 1715.52,1209.85 1716.11,1206.97 1716.7,1205.94 1717.28,1206.03 1717.87,1204.57 1718.45,1203.41 1719.04,1205.12 1719.63,1204.09 1720.21,1205.65 1720.8,1204.31 1721.39,1203.13 1721.97,1203.64 1722.56,1206.53 1723.15,1208.61 1723.73,1212.65 1724.32,1213.75 1724.91,1217.81 1725.49,1217.24 1726.08,1215.39 1726.66,1215.23 1727.25,1213.75 1727.84,1213.33 1728.42,1214.51 1729.01,1215.62 1729.6,1215.34 1730.18,1216.22 1730.77,1217.33 1731.36,1217.07 1731.94,1216.84 1732.53,1216.49 1733.11,1214.67 1733.7,1214.28 1734.29,1212.45 1734.87,1213.45 1735.46,1208.93 1736.05,1209.03 1736.63,1210.6 1737.22,1212.87 1737.81,1213.89 1738.39,1213.73 1738.98,1210.89 1739.57,1209.52 1740.15,1208.29 1740.74,1209.78 1741.32,1209.38 1741.91,1209.26 1742.5,1207.71 1743.08,1206.04 1743.67,1206.45 1744.26,1209.38 1744.84,1209.39 1745.43,1208.04 1746.02,1212.19 1746.6,1209.11 1747.19,1208.91 1747.78,1209 1748.36,1211.84 1748.95,1213 1749.53,1212.75 1750.12,1212.74 1750.71,1211.19 1751.29,1211.05 1751.88,1209.64 1752.47,1205.02 1753.05,1203.91 1753.64,1207.14 1754.23,1208.36 1754.81,1210.03 1755.4,1213.01 1755.99,1214.03 1756.57,1215.36 1757.16,1213.86 1757.74,1215.05 1758.33,1214.68 1758.92,1217.15 1759.5,1215.52 1760.09,1215.44 1760.68,1213.67 1761.26,1213.48 1761.85,1210.45 1762.44,1210.11 1763.02,1211.63 1763.61,1209.96 1764.19,1209.72 1764.78,1212.2 1765.37,1210.68 1765.95,1210.58 1766.54,1210.5 1767.13,1209.33 1767.71,1209.27 1768.3,1213.55 1768.89,1215 1769.47,1210.39 1770.06,1210.69 1770.65,1210.82 1771.23,1206.64 1771.82,1205.65 1772.4,1207.32 1772.99,1206.01 1773.58,1205.15 1774.16,1209.7 1774.75,1211.64 1775.34,1211.41 1775.92,1209.91 1776.51,1207 1777.1,1207.73 1777.68,1204.99 1778.27,1209.55 1778.86,1206.87 1779.44,1208.53 1780.03,1208.71 1780.61,1211.7 1781.2,1210.07 1781.79,1207.14 1782.37,1205.99 1782.96,1206.2 1783.55,1206.24 1784.13,1206.62 1784.72,1204.03 1785.31,1202.88 1785.89,1203.2 1786.48,1203.38 1787.06,1201.02 1787.65,1198.71 1788.24,1199.31 1788.82,1203.94 1789.41,1204.39 1790,1206.54 1790.58,1207.9 1791.17,1203.9 1791.76,1204.06 1792.34,1204.29 1792.93,1200.73 1793.52,1202.43 1794.1,1200.04 1794.69,1200.4 1795.27,1200.82 1795.86,1202.36 1796.45,1202.62 1797.03,1202.82 1797.62,1203.21 1798.21,1209.29 1798.79,1210.64 1799.38,1209.56 1799.97,1209.27 1800.55,1209.47 1801.14,1206.61 1801.73,1206.4 1802.31,1206.39 1802.9,1207.89 1803.48,1204.98 1804.07,1205.06 1804.66,1202.6 1805.24,1204.35 1805.83,1203.29 1806.42,1205.22 1807,1206.51 1807.59,1206.65 1808.18,1204.47 1808.76,1206.21 1809.35,1208.02 1809.94,1210.94 1810.52,1212.32 1811.11,1213.65 1811.69,1214.88 1812.28,1214.99 1812.87,1213.38 1813.45,1211.69 1814.04,1212.75 1814.63,1209.8 1815.21,1211.09 1815.8,1212.5 1816.39,1215.13 1816.97,1213.6 1817.56,1213.49 1818.14,1213.41 1818.73,1210.65 1819.32,1209.26 1819.9,1209.21 1820.49,1209.03 1821.08,1210.47 1821.66,1207.87 1822.25,1209.28 1822.84,1207.69 1823.42,1205.12 1824.01,1205.44 1824.6,1204.29 1825.18,1204.46 1825.77,1204.82 1826.35,1205.16 1826.94,1208.11 1827.53,1210.85 1828.11,1209.15 1828.7,1207.82 1829.29,1207.78 1829.87,1210.73 1830.46,1210.84 1831.05,1209.42 1831.63,1208.18 1832.22,1209.63 1832.81,1208.11 1833.39,1209.6 1833.98,1208.53 1834.56,1207.09 1835.15,1210.07 1835.74,1208.62 1836.32,1207.8 1836.91,1209.3 1837.5,1207.81 1838.08,1208.09 1838.67,1208.11 1839.26,1208.26 1839.84,1209.36 1840.43,1209.3 1841.01,1212.12 1841.6,1213.26 1842.19,1213.19 1842.77,1217.17 1843.36,1216.59 1843.95,1216.05 1844.53,1215.69 1845.12,1215.65 1845.71,1213.88 1846.29,1215.14 1846.88,1213.31 1847.47,1213 1848.05,1212.92 1848.64,1214.54 1849.22,1215.69 1849.81,1213.79 1850.4,1211.92 1850.98,1212.97 1851.57,1211.36 1852.16,1211.12 1852.74,1208.37 1853.33,1209.81 1853.92,1206.83 1854.5,1206.57 1855.09,1206.44 1855.68,1210.88 1856.26,1214.82 1856.85,1213.22 1857.43,1214.71 1858.02,1214.58 1858.61,1214.3 1859.19,1212.33 1859.78,1213.59 1860.37,1211.94 1860.95,1211.91 1861.54,1213.93 1862.13,1214.99 1862.71,1214.56 1863.3,1215.81 1863.88,1213.91 1864.47,1210.94 1865.06,1211.14 1865.64,1210.89 1866.23,1213.92 1866.82,1213.9 1867.4,1213.87 1867.99,1213.35 1868.58,1209.01 1869.16,1208.89 1869.75,1211.71 1870.34,1212.91 1870.92,1212.67 1871.51,1212.55 1872.09,1212.18 1872.68,1212.47 1873.27,1212.32 1873.85,1209.53 1874.44,1206.73 1875.03,1206.67 1875.61,1200.93 1876.2,1199.88 1876.79,1200.41 1877.37,1201.03 1877.96,1204.44 1878.55,1206.2 1879.13,1206.36 1879.72,1204.95 1880.3,1203.82 1880.89,1205.55 1881.48,1205.61 1882.06,1205.68 1882.65,1204.46 1883.24,1207.85 1883.82,1210.67 1884.41,1209.32 1885,1207.9 1885.58,1206.8 1886.17,1205.47 1886.76,1208.55 1887.34,1209.04 1887.93,1210.76 1888.51,1210.99 1889.1,1209.64 1889.69,1209.3 1890.27,1210.85 1890.86,1211.01 1891.45,1207.83 1892.03,1208.07 1892.62,1209.39 1893.21,1209.35 1893.79,1207.84 1894.38,1208.21 1894.96,1207 1895.55,1208.75 1896.14,1208.77 1896.72,1204.96 1897.31,1202.4 1897.9,1202.77 1898.48,1203.09 1899.07,1201.75 1899.66,1203.81 1900.24,1202.75 1900.83,1203.05 1901.42,1206.38 1902,1205.99 1902.59,1204.47 1903.17,1206.08 1903.76,1209.07 1904.35,1207.83 1904.93,1207.93 1905.52,1208.06 1906.11,1209.85 1906.69,1208.37 1907.28,1210.06 1907.87,1210.04 1908.45,1211.26 1909.04,1210.97 1909.63,1213.67 1910.21,1214.94 1910.8,1214.52 1911.38,1216.73 1911.97,1215.03 1912.56,1213.26 1913.14,1218.53 1913.73,1216.7 1914.32,1214.89 1914.9,1213.06 1915.49,1212.74 1916.08,1214.03 1916.66,1211.16 1917.25,1210.9 1917.83,1210.96 1918.42,1212.27 1919.01,1214.94 1919.59,1214.54 1920.18,1214.12 1920.77,1213.7 1921.35,1214.94 1921.94,1214.66 1922.53,1214.08 1923.11,1213.71 1923.7,1213.28 1924.29,1213.14 1924.87,1211.69 1925.46,1211.18 1926.04,1211.35 1926.63,1211.44 1927.22,1211.5 1927.8,1211.46 1928.39,1212.96 1928.98,1211.22 1929.56,1212.6 1930.15,1213.73 1930.74,1214.51 1931.32,1215.6 1931.91,1216.8 1932.5,1219.33 1933.08,1219.44 1933.67,1220.59 1934.25,1219.86 1934.84,1219 1935.43,1217.14 1936.01,1216.83 1936.6,1219.08 1937.19,1217.43 1937.77,1216.91 1938.36,1218.03 1938.95,1215.77 1939.53,1211.03 1940.12,1209.51 1940.71,1206.7 1941.29,1206.84 1941.88,1208.14 1942.46,1209.6 1943.05,1210.86 1943.64,1210.7 1944.22,1210.65 1944.81,1212.06 1945.4,1214.45 1945.98,1211.21 1946.57,1213.41 1947.16,1211.89 1947.74,1213.26 1948.33,1210.06 1948.91,1209.54 1949.5,1211.13 1950.09,1211.12 1950.67,1211.27 1951.26,1213.95 1951.85,1210.89 1952.43,1211.88 1953.02,1208.99 1953.61,1207.83 1954.19,1209.47 1954.78,1209.3 1955.37,1207.9 1955.95,1206.69 1956.54,1206.57 1957.12,1206.65 1957.71,1208.34 1958.3,1208.51 1958.88,1208.21 1959.47,1205.67 1960.06,1205.99 1960.64,1205.81 1961.23,1204.59 1961.82,1204.67 1962.4,1207.86 1962.99,1207.6 1963.58,1209.13 1964.16,1210.52 1964.75,1213.02 1965.33,1212.66 1965.92,1211.25 1966.51,1208.18 1967.09,1209.64 1967.68,1211.23 1968.27,1211.08 1968.85,1210.96 1969.44,1209.37 1970.03,1210.7 1970.61,1209.23 1971.2,1210.65 1971.78,1216.07 1972.37,1216.7 1972.96,1216.52 1973.54,1213.23 1974.13,1212.6 1974.72,1209.69 1975.3,1211.04 1975.89,1210.94 1976.48,1210.51 1977.06,1214.82 1977.65,1213.44 1978.24,1211.7 1978.82,1210.38 1979.41,1212.93 1979.99,1211.14 1980.58,1212.19 1981.17,1210.7 1981.75,1210.4 1982.34,1214.56 1982.93,1212.64 1983.51,1210.89 1984.1,1210.91 1984.69,1209.42 1985.27,1209.38 1985.86,1212.19 1986.45,1210.82 1987.03,1210.82 1987.62,1213.59 1988.2,1210.88 1988.79,1212 1989.38,1210.43 1989.96,1208.9 1990.55,1209.02 1991.14,1208.8 1991.72,1208.71 1992.31,1206.97 1992.9,1206.94 1993.48,1208.28 1994.07,1205.63 1994.65,1205.43 1995.24,1206.94 1995.83,1207.13 1996.41,1208.78 1997,1207.59 1997.59,1209.24 1998.17,1207.72 1998.76,1207.84 1999.35,1207.59 1999.93,1203.4 2000.52,1202.23 2001.11,1199.87 2001.69,1201.59 2002.28,1200.6 2002.86,1199.87 2003.45,1198.81 2004.04,1199.29 2004.62,1201.42 2005.21,1202.19 2005.8,1203.7 2006.38,1205.26 2006.97,1208.43 2007.56,1211.39 2008.14,1210.04 2008.73,1209.68 2009.32,1209.7 2009.9,1211.27 2010.49,1212.34 2011.07,1210.77 2011.66,1209.4 2012.25,1208.16 2012.83,1208.24 2013.42,1207 2014.01,1206.17 2014.59,1209.2 2015.18,1206.33 2015.77,1205.24 2016.35,1201.34 2016.94,1203.33 2017.53,1201.89 2018.11,1199.33 2018.7,1197 2019.28,1197.94 2019.87,1203.15 2020.46,1203.51 2021.04,1203.83 2021.63,1208.47 2022.22,1205.7 2022.8,1205.95 2023.39,1204.48 2023.98,1203.2 2024.56,1209.31 2025.15,1206.35 2025.73,1208 2026.32,1206.73 2026.91,1205.7 2027.49,1206.12 2028.08,1204.63 2028.67,1205.03 2029.25,1205.29 2029.84,1204.12 2030.43,1204.17 2031.01,1201.53 2031.6,1201.98 2032.19,1203.77 2032.77,1202.97 2033.36,1203.58 2033.94,1206.62 2034.53,1205.15 2035.12,1205.77 2035.7,1207.88 2036.29,1209.54 2036.88,1209.43 2037.46,1209.69 2038.05,1209.76 2038.64,1211.01 2039.22,1210.8 2039.81,1212.17 2040.4,1211.97 2040.98,1214.29 2041.57,1211.34 2042.15,1212.86 2042.74,1208.38 2043.33,1207.35 2043.91,1207.39 2044.5,1207.84 2045.09,1210.51 2045.67,1210.46 2046.26,1212.25 2046.85,1212.28 2047.43,1209.42 2048.02,1212.11 2048.6,1211.92 2049.19,1210.81 2049.78,1209.25 2050.36,1208.08 2050.95,1207.95 2051.54,1207.88 2052.12,1212.06 2052.71,1210.54 2053.3,1210.81 2053.88,1212.19 2054.47,1213.41 2055.06,1211.94 2055.64,1211.92 2056.23,1211.55 2056.81,1211.48 2057.4,1212.87 2057.99,1214.15 2058.57,1215.43 2059.16,1216.65 2059.75,1219.03 2060.33,1219.96 2060.92,1216.43 2061.51,1214.43 2062.09,1211.18 2062.68,1213.73 2063.27,1213.74 2063.85,1214.88 2064.44,1215.67 2065.02,1215.31 2065.61,1214.81 2066.2,1213.07 2066.78,1211.71 2067.37,1211.54 2067.96,1211.57 2068.54,1212.92 2069.13,1211.46 2069.72,1211.56 2070.3,1211.27 2070.89,1209.74 2071.48,1208.69 2072.06,1207.46 2072.65,1208.62 2073.23,1208.78 2073.82,1209.07 2074.41,1208.09 2074.99,1205.58 2075.58,1207.4 2076.17,1206.21 2076.75,1209.16 2077.34,1207.61 2077.93,1209.37 2078.51,1209.05 2079.1,1209.03 2079.68,1208.19 2080.27,1203.94 2080.86,1204.18 2081.44,1202.73 2082.03,1204.51 2082.62,1203.68 2083.2,1204.21 2083.79,1208.63 2084.38,1208.75 2084.96,1206.12 2085.55,1204.71 2086.14,1204.78 2086.72,1205.12 2087.31,1204.19 2087.89,1204.62 2088.48,1204.89 2089.07,1203.63 2089.65,1202.61 2090.24,1203.13 2090.83,1204.64 2091.41,1208.84 2092,1210.41 2092.59,1207.5 2093.17,1210.24 2093.76,1207.44 2094.35,1208.78 2094.93,1210.28 2095.52,1210.22 2096.1,1209.93 2096.69,1208.67 2097.28,1207.42 2097.86,1206.23 2098.45,1207.67 2099.04,1207.81 2099.62,1206.55 2100.21,1209.19 2100.8,1212.12 2101.38,1208.91 2101.97,1210.42 2102.55,1211.8 2103.14,1211.95 2103.73,1209.14 2104.31,1207.51 2104.9,1210.31 2105.49,1209.05 2106.07,1210.36 2106.66,1210.5 2107.25,1213.32 2107.83,1213.07 2108.42,1211.46 2109.01,1211.31 2109.59,1208.35 2110.18,1204.45 2110.76,1203.3 2111.35,1203.53 2111.94,1203.87 2112.52,1204.15 2113.11,1205.44 2113.7,1204.22 2114.28,1204.42 2114.87,1203.56 2115.46,1202.29 2116.04,1204.24 2116.63,1205.88 2117.22,1207.13 2117.8,1206.15 2118.39,1204.95 2118.97,1203.64 2119.56,1205.49 2120.15,1204.23 2120.73,1203.13 2121.32,1206.31 2121.91,1209.26 2122.49,1209.41 2123.08,1210.85 2123.67,1209.21 2124.25,1207.81 2124.84,1209.5 2125.42,1209.32 2126.01,1209.54 2126.6,1211.09 2127.18,1212.13 2127.77,1216.28 2128.36,1217.09 2128.94,1219.54 2129.53,1218.98 2130.12,1215.75 2130.7,1216.51 2131.29,1217.54 2131.88,1220.08 2132.46,1219.38 2133.05,1220.28 2133.63,1217.11 2134.22,1216.82 2134.81,1214.96 2135.39,1211.66 2135.98,1210.12 2136.57,1207.28 2137.15,1207.26 2137.74,1207.47 2138.33,1204.83 2138.91,1205.23 2139.5,1205.41 2140.09,1204.24 2140.67,1204.15 2141.26,1201.35 2141.84,1200.34 2142.43,1200.89 2143.02,1198.62 2143.6,1203.32 2144.19,1201.94 2144.78,1200.91 2145.36,1198.79 2145.95,1202.33 2146.54,1204.1 2147.12,1205.92 2147.71,1209.15 2148.3,1212.19 2148.88,1213.42 2149.47,1210.46 2150.05,1210.15 2150.64,1210.26 2151.23,1207.42 2151.81,1210.33 2152.4,1205.99 2152.99,1204.76 2153.57,1206.47 2154.16,1208.34 2154.75,1208.67 2155.33,1208.48 2155.92,1206.98 2156.5,1205.99 2157.09,1204.74 2157.68,1205.33 2158.26,1205.86 \"/>\n<path clip-path=\"url(#clip292)\" d=\"M986.025 1209.89 L986.612 1209.89 L987.198 1209.89 L987.785 1209.89 L988.371 1209.89 L988.957 1209.89 L989.544 1209.89 L990.13 1209.89 L990.717 1209.89 L991.303 1209.89 L991.889 1209.89 L992.476 1209.89 L993.062 1209.89 L993.649 1209.89 L994.235 1209.89 L994.822 1209.89 L995.408 1209.89 L995.994 1209.89 L996.581 1209.89 L997.167 1209.89 L997.754 1209.89 L998.34 1209.89 L998.926 1209.89 L999.513 1209.89 L1000.1 1209.89 L1000.69 1209.89 L1001.27 1209.89 L1001.86 1209.89 L1002.44 1209.89 L1003.03 1209.89 L1003.62 1209.89 L1004.2 1209.89 L1004.79 1209.89 L1005.38 1209.89 L1005.96 1209.89 L1006.55 1209.89 L1007.14 1209.89 L1007.72 1209.89 L1008.31 1209.89 L1008.9 1209.89 L1009.48 1209.89 L1010.07 1209.89 L1010.65 1209.89 L1011.24 1209.89 L1011.83 1209.89 L1012.41 1209.89 L1013 1209.89 L1013.59 1209.89 L1014.17 1209.89 L1014.76 1209.89 L1015.35 1209.89 L1015.93 1209.89 L1016.52 1209.89 L1017.11 1209.89 L1017.69 1209.89 L1018.28 1209.89 L1018.86 1209.89 L1019.45 1209.89 L1020.04 1209.89 L1020.62 1209.89 L1021.21 1209.89 L1021.8 1209.89 L1022.38 1209.89 L1022.97 1209.89 L1023.56 1209.89 L1024.14 1209.89 L1024.73 1209.89 L1025.32 1209.89 L1025.9 1209.89 L1026.49 1209.89 L1027.07 1209.89 L1027.66 1209.89 L1028.25 1209.89 L1028.83 1209.89 L1029.42 1209.89 L1030.01 1209.89 L1030.59 1209.89 L1031.18 1209.89 L1031.77 1209.89 L1032.35 1209.89 L1032.94 1209.89 L1033.52 1209.89 L1034.11 1209.89 L1034.7 1209.89 L1035.28 1209.89 L1035.87 1209.89 L1036.46 1209.89 L1037.04 1209.89 L1037.63 1209.89 L1038.22 1209.89 L1038.8 1209.89 L1039.39 1209.89 L1039.98 1209.89 L1040.56 1209.89 L1041.15 1209.89 L1041.73 1209.89 L1042.32 1209.89 L1042.91 1209.89 L1043.49 1209.89 L1044.08 1209.89 L1044.67 1209.89 L1045.25 1209.89 L1045.84 1209.89 L1046.43 1209.89 L1047.01 1209.89 L1047.6 1209.89 L1048.19 1209.89 L1048.77 1209.89 L1049.36 1209.89 L1049.94 1209.89 L1050.53 1209.89 L1051.12 1209.89 L1051.7 1209.89 L1052.29 1209.89 L1052.88 1209.89 L1053.46 1209.89 L1054.05 1209.89 L1054.64 1209.89 L1055.22 1209.89 L1055.81 1209.89 L1056.39 1209.89 L1056.98 1209.89 L1057.57 1209.89 L1058.15 1209.89 L1058.74 1209.89 L1059.33 1209.89 L1059.91 1209.89 L1060.5 1209.89 L1061.09 1209.89 L1061.67 1209.89 L1062.26 1209.89 L1062.85 1209.89 L1063.43 1209.89 L1064.02 1209.89 L1064.6 1209.89 L1065.19 1209.89 L1065.78 1209.89 L1066.36 1209.89 L1066.95 1209.89 L1067.54 1209.89 L1068.12 1209.89 L1068.71 1209.89 L1069.3 1209.89 L1069.88 1209.89 L1070.47 1209.89 L1071.06 1209.89 L1071.64 1209.89 L1072.23 1209.89 L1072.81 1209.89 L1073.4 1209.89 L1073.99 1209.89 L1074.57 1209.89 L1075.16 1209.89 L1075.75 1209.89 L1076.33 1209.89 L1076.92 1209.89 L1077.51 1209.89 L1078.09 1209.89 L1078.68 1209.89 L1079.26 1209.89 L1079.85 1209.89 L1080.44 1209.89 L1081.02 1209.89 L1081.61 1209.89 L1082.2 1209.89 L1082.78 1209.89 L1083.37 1209.89 L1083.96 1209.89 L1084.54 1209.89 L1085.13 1209.89 L1085.72 1209.89 L1086.3 1209.89 L1086.89 1209.89 L1087.47 1209.89 L1088.06 1209.89 L1088.65 1209.89 L1089.23 1209.89 L1089.82 1209.89 L1090.41 1209.89 L1090.99 1209.89 L1091.58 1209.89 L1092.17 1209.89 L1092.75 1209.89 L1093.34 1209.89 L1093.93 1209.89 L1094.51 1209.89 L1095.1 1209.89 L1095.68 1209.89 L1096.27 1209.89 L1096.86 1209.89 L1097.44 1209.89 L1098.03 1209.89 L1098.62 1209.89 L1099.2 1209.89 L1099.79 1209.89 L1100.38 1209.89 L1100.96 1209.89 L1101.55 1209.89 L1102.14 1209.89 L1102.72 1209.89 L1103.31 1209.89 L1103.89 1209.89 L1104.48 1209.89 L1105.07 1209.89 L1105.65 1209.89 L1106.24 1209.89 L1106.83 1209.89 L1107.41 1209.89 L1108 1209.89 L1108.59 1209.89 L1109.17 1209.89 L1109.76 1209.89 L1110.34 1209.89 L1110.93 1209.89 L1111.52 1209.89 L1112.1 1209.89 L1112.69 1209.89 L1113.28 1209.89 L1113.86 1209.89 L1114.45 1209.89 L1115.04 1209.89 L1115.62 1209.89 L1116.21 1209.89 L1116.8 1209.89 L1117.38 1209.89 L1117.97 1209.89 L1118.55 1209.89 L1119.14 1209.89 L1119.73 1209.89 L1120.31 1209.89 L1120.9 1209.89 L1121.49 1209.89 L1122.07 1209.89 L1122.66 1209.89 L1123.25 1209.89 L1123.83 1209.89 L1124.42 1209.89 L1125.01 1209.89 L1125.59 1209.89 L1126.18 1209.89 L1126.76 1209.89 L1127.35 1209.89 L1127.94 1209.89 L1128.52 1209.89 L1129.11 1209.89 L1129.7 1209.89 L1130.28 1209.89 L1130.87 1209.89 L1131.46 1209.89 L1132.04 1209.89 L1132.63 1209.89 L1133.21 1209.89 L1133.8 1209.89 L1134.39 1209.89 L1134.97 1209.89 L1135.56 1209.89 L1136.15 1209.89 L1136.73 1209.89 L1137.32 1209.89 L1137.91 1209.89 L1138.49 1209.89 L1139.08 1209.89 L1139.67 1209.89 L1140.25 1209.89 L1140.84 1209.89 L1141.42 1209.89 L1142.01 1209.89 L1142.6 1209.89 L1143.18 1209.89 L1143.77 1209.89 L1144.36 1209.89 L1144.94 1209.89 L1145.53 1209.89 L1146.12 1209.89 L1146.7 1209.89 L1147.29 1209.89 L1147.88 1209.89 L1148.46 1209.89 L1149.05 1209.89 L1149.63 1209.89 L1150.22 1209.89 L1150.81 1209.89 L1151.39 1209.89 L1151.98 1209.89 L1152.57 1209.89 L1153.15 1209.89 L1153.74 1209.89 L1154.33 1209.89 L1154.91 1209.89 L1155.5 1209.89 L1156.09 1209.89 L1156.67 1209.89 L1157.26 1209.89 L1157.84 1209.89 L1158.43 1209.89 L1159.02 1209.89 L1159.6 1209.89 L1160.19 1209.89 L1160.78 1209.89 L1161.36 1209.89 L1161.95 1209.89 L1162.54 1209.89 L1163.12 1209.89 L1163.71 1209.89 L1164.29 1209.89 L1164.88 1209.89 L1165.47 1209.89 L1166.05 1209.89 L1166.64 1209.89 L1167.23 1209.89 L1167.81 1209.89 L1168.4 1209.89 L1168.99 1209.89 L1169.57 1209.89 L1170.16 1209.89 L1170.75 1209.89 L1171.33 1209.89 L1171.92 1209.89 L1172.5 1209.89 L1173.09 1209.89 L1173.68 1209.89 L1174.26 1209.89 L1174.85 1209.89 L1175.44 1209.89 L1176.02 1209.89 L1176.61 1209.89 L1177.2 1209.89 L1177.78 1209.89 L1178.37 1209.89 L1178.96 1209.89 L1179.54 1209.89 L1180.13 1209.89 L1180.71 1209.89 L1181.3 1209.89 L1181.89 1209.89 L1182.47 1209.89 L1183.06 1209.89 L1183.65 1209.89 L1184.23 1209.89 L1184.82 1209.89 L1185.41 1209.89 L1185.99 1209.89 L1186.58 1209.89 L1187.16 1209.89 L1187.75 1209.89 L1188.34 1209.89 L1188.92 1209.89 L1189.51 1209.89 L1190.1 1209.89 L1190.68 1209.89 L1191.27 1209.89 L1191.86 1209.89 L1192.44 1209.89 L1193.03 1209.89 L1193.62 1209.89 L1194.2 1209.89 L1194.79 1209.89 L1195.37 1209.89 L1195.96 1209.89 L1196.55 1209.89 L1197.13 1209.89 L1197.72 1209.89 L1198.31 1209.89 L1198.89 1209.89 L1199.48 1209.89 L1200.07 1209.89 L1200.65 1209.89 L1201.24 1209.89 L1201.83 1209.89 L1202.41 1209.89 L1203 1209.89 L1203.58 1209.89 L1204.17 1209.89 L1204.76 1209.89 L1205.34 1209.89 L1205.93 1209.89 L1206.52 1209.89 L1207.1 1209.89 L1207.69 1209.89 L1208.28 1209.89 L1208.86 1209.89 L1209.45 1209.89 L1210.03 1209.89 L1210.62 1209.89 L1211.21 1209.89 L1211.79 1209.89 L1212.38 1209.89 L1212.97 1209.89 L1213.55 1209.89 L1214.14 1209.89 L1214.73 1209.89 L1215.31 1209.89 L1215.9 1209.89 L1216.49 1209.89 L1217.07 1209.89 L1217.66 1209.89 L1218.24 1209.89 L1218.83 1209.89 L1219.42 1209.89 L1220 1209.89 L1220.59 1209.89 L1221.18 1209.89 L1221.76 1209.89 L1222.35 1209.89 L1222.94 1209.89 L1223.52 1209.89 L1224.11 1209.89 L1224.7 1209.89 L1225.28 1209.89 L1225.87 1209.89 L1226.45 1209.89 L1227.04 1209.89 L1227.63 1209.89 L1228.21 1209.89 L1228.8 1209.89 L1229.39 1209.89 L1229.97 1209.89 L1230.56 1209.89 L1231.15 1209.89 L1231.73 1209.89 L1232.32 1209.89 L1232.91 1209.89 L1233.49 1209.89 L1234.08 1209.89 L1234.66 1209.89 L1235.25 1209.89 L1235.84 1209.89 L1236.42 1209.89 L1237.01 1209.89 L1237.6 1209.89 L1238.18 1209.89 L1238.77 1209.89 L1239.36 1209.89 L1239.94 1209.89 L1240.53 1209.89 L1241.11 1209.89 L1241.7 1209.89 L1242.29 1209.89 L1242.87 1209.89 L1243.46 1209.89 L1244.05 1209.89 L1244.63 1209.89 L1245.22 1209.89 L1245.81 1209.89 L1246.39 1209.89 L1246.98 1209.89 L1247.57 1209.89 L1248.15 1209.89 L1248.74 1209.89 L1249.32 1209.89 L1249.91 1209.89 L1250.5 1209.89 L1251.08 1209.89 L1251.67 1209.89 L1252.26 1209.89 L1252.84 1209.89 L1253.43 1209.89 L1254.02 1209.89 L1254.6 1209.89 L1255.19 1209.89 L1255.78 1209.89 L1256.36 1209.89 L1256.95 1209.89 L1257.53 1209.89 L1258.12 1209.89 L1258.71 1209.89 L1259.29 1209.89 L1259.88 1209.89 L1260.47 1209.89 L1261.05 1209.89 L1261.64 1209.89 L1262.23 1209.89 L1262.81 1209.89 L1263.4 1209.89 L1263.98 1209.89 L1264.57 1209.89 L1265.16 1209.89 L1265.74 1209.89 L1266.33 1209.89 L1266.92 1209.89 L1267.5 1209.89 L1268.09 1209.89 L1268.68 1209.89 L1269.26 1209.89 L1269.85 1209.89 L1270.44 1209.89 L1271.02 1209.89 L1271.61 1209.89 L1272.19 1209.89 L1272.78 1209.89 L1273.37 1209.89 L1273.95 1209.89 L1274.54 1209.89 L1275.13 1209.89 L1275.71 1209.89 L1276.3 1209.89 L1276.89 1209.89 L1277.47 1209.89 L1278.06 1209.89 L1278.65 1209.89 L1279.23 1209.89 L1279.82 1209.89 L1280.4 1209.89 L1280.99 1209.89 L1281.58 1209.89 L1282.16 1209.89 L1282.75 1209.89 L1283.34 1209.89 L1283.92 1209.89 L1284.51 1209.89 L1285.1 1209.89 L1285.68 1209.89 L1286.27 1209.89 L1286.86 1209.89 L1287.44 1209.89 L1288.03 1209.89 L1288.61 1209.89 L1289.2 1209.89 L1289.79 1209.89 L1290.37 1209.89 L1290.96 1209.89 L1291.55 1209.89 L1292.13 1209.89 L1292.72 1209.89 L1293.31 1209.89 L1293.89 1209.89 L1294.48 1209.89 L1295.06 1209.89 L1295.65 1209.89 L1296.24 1209.89 L1296.82 1209.89 L1297.41 1209.89 L1298 1209.89 L1298.58 1209.89 L1299.17 1209.89 L1299.76 1209.89 L1300.34 1209.89 L1300.93 1209.89 L1301.52 1209.89 L1302.1 1209.89 L1302.69 1209.89 L1303.27 1209.89 L1303.86 1209.89 L1304.45 1209.89 L1305.03 1209.89 L1305.62 1209.89 L1306.21 1209.89 L1306.79 1209.89 L1307.38 1209.89 L1307.97 1209.89 L1308.55 1209.89 L1309.14 1209.89 L1309.73 1209.89 L1310.31 1209.89 L1310.9 1209.89 L1311.48 1209.89 L1312.07 1209.89 L1312.66 1209.89 L1313.24 1209.89 L1313.83 1209.89 L1314.42 1209.89 L1315 1209.89 L1315.59 1209.89 L1316.18 1209.89 L1316.76 1209.89 L1317.35 1209.89 L1317.93 1209.89 L1318.52 1209.89 L1319.11 1209.89 L1319.69 1209.89 L1320.28 1209.89 L1320.87 1209.89 L1321.45 1209.89 L1322.04 1209.89 L1322.63 1209.89 L1323.21 1209.89 L1323.8 1209.89 L1324.39 1209.89 L1324.97 1209.89 L1325.56 1209.89 L1326.14 1209.89 L1326.73 1209.89 L1327.32 1209.89 L1327.9 1209.89 L1328.49 1209.89 L1329.08 1209.89 L1329.66 1209.89 L1330.25 1209.89 L1330.84 1209.89 L1331.42 1209.89 L1332.01 1209.89 L1332.6 1209.89 L1333.18 1209.89 L1333.77 1209.89 L1334.35 1209.89 L1334.94 1209.89 L1335.53 1209.89 L1336.11 1209.89 L1336.7 1209.89 L1337.29 1209.89 L1337.87 1209.89 L1338.46 1209.89 L1339.05 1209.89 L1339.63 1209.89 L1340.22 1209.89 L1340.8 1209.89 L1341.39 1209.89 L1341.98 1209.89 L1342.56 1209.89 L1343.15 1209.89 L1343.74 1209.89 L1344.32 1209.89 L1344.91 1209.89 L1345.5 1209.89 L1346.08 1209.89 L1346.67 1209.89 L1347.26 1209.89 L1347.84 1209.89 L1348.43 1209.89 L1349.01 1209.89 L1349.6 1209.89 L1350.19 1209.89 L1350.77 1209.89 L1351.36 1209.89 L1351.95 1209.89 L1352.53 1209.89 L1353.12 1209.89 L1353.71 1209.89 L1354.29 1209.89 L1354.88 1209.89 L1355.47 1209.89 L1356.05 1209.89 L1356.64 1209.89 L1357.22 1209.89 L1357.81 1209.89 L1358.4 1209.89 L1358.98 1209.89 L1359.57 1209.89 L1360.16 1209.89 L1360.74 1209.89 L1361.33 1209.89 L1361.92 1209.89 L1362.5 1209.89 L1363.09 1209.89 L1363.68 1209.89 L1364.26 1209.89 L1364.85 1209.89 L1365.43 1209.89 L1366.02 1209.89 L1366.61 1209.89 L1367.19 1209.89 L1367.78 1209.89 L1368.37 1209.89 L1368.95 1209.89 L1369.54 1209.89 L1370.13 1209.89 L1370.71 1209.89 L1371.3 1209.89 L1371.88 1209.89 L1372.47 1209.89 L1373.06 1209.89 L1373.64 1209.89 L1374.23 1209.89 L1374.82 1209.89 L1375.4 1209.89 L1375.99 1209.89 L1376.58 1209.89 L1377.16 1209.89 L1377.75 1209.89 L1378.34 1209.89 L1378.92 1209.89 L1379.51 1209.89 L1380.09 1209.89 L1380.68 1209.89 L1381.27 1209.89 L1381.85 1209.89 L1382.44 1209.89 L1383.03 1209.89 L1383.61 1209.89 L1384.2 1209.89 L1384.79 1209.89 L1385.37 1209.89 L1385.96 1209.89 L1386.55 1209.89 L1387.13 1209.89 L1387.72 1209.89 L1388.3 1209.89 L1388.89 1209.89 L1389.48 1209.89 L1390.06 1209.89 L1390.65 1209.89 L1391.24 1209.89 L1391.82 1209.89 L1392.41 1209.89 L1393 1209.89 L1393.58 1209.89 L1394.17 1209.89 L1394.75 1209.89 L1395.34 1209.89 L1395.93 1209.89 L1396.51 1209.89 L1397.1 1209.89 L1397.69 1209.89 L1398.27 1209.89 L1398.86 1209.89 L1399.45 1209.89 L1400.03 1209.89 L1400.62 1209.89 L1401.21 1209.89 L1401.79 1209.89 L1402.38 1209.89 L1402.96 1209.89 L1403.55 1209.89 L1404.14 1209.89 L1404.72 1209.89 L1405.31 1209.89 L1405.9 1209.89 L1406.48 1209.89 L1407.07 1209.89 L1407.66 1209.89 L1408.24 1209.89 L1408.83 1209.89 L1409.42 1209.89 L1410 1209.89 L1410.59 1209.89 L1411.17 1209.89 L1411.76 1209.89 L1412.35 1209.89 L1412.93 1209.89 L1413.52 1209.89 L1414.11 1209.89 L1414.69 1209.89 L1415.28 1209.89 L1415.87 1209.89 L1416.45 1209.89 L1417.04 1209.89 L1417.63 1209.89 L1418.21 1209.89 L1418.8 1209.89 L1419.38 1209.89 L1419.97 1209.89 L1420.56 1209.89 L1421.14 1209.89 L1421.73 1209.89 L1422.32 1209.89 L1422.9 1209.89 L1423.49 1209.89 L1424.08 1209.89 L1424.66 1209.89 L1425.25 1209.89 L1425.83 1209.89 L1426.42 1209.89 L1427.01 1209.89 L1427.59 1209.89 L1428.18 1209.89 L1428.77 1209.89 L1429.35 1209.89 L1429.94 1209.89 L1430.53 1209.89 L1431.11 1209.89 L1431.7 1209.89 L1432.29 1209.89 L1432.87 1209.89 L1433.46 1209.89 L1434.04 1209.89 L1434.63 1209.89 L1435.22 1209.89 L1435.8 1209.89 L1436.39 1209.89 L1436.98 1209.89 L1437.56 1209.89 L1438.15 1209.89 L1438.74 1209.89 L1439.32 1209.89 L1439.91 1209.89 L1440.5 1209.89 L1441.08 1209.89 L1441.67 1209.89 L1442.25 1209.89 L1442.84 1209.89 L1443.43 1209.89 L1444.01 1209.89 L1444.6 1209.89 L1445.19 1209.89 L1445.77 1209.89 L1446.36 1209.89 L1446.95 1209.89 L1447.53 1209.89 L1448.12 1209.89 L1448.7 1209.89 L1449.29 1209.89 L1449.88 1209.89 L1450.46 1209.89 L1451.05 1209.89 L1451.64 1209.89 L1452.22 1209.89 L1452.81 1209.89 L1453.4 1209.89 L1453.98 1209.89 L1454.57 1209.89 L1455.16 1209.89 L1455.74 1209.89 L1456.33 1209.89 L1456.91 1209.89 L1457.5 1209.89 L1458.09 1209.89 L1458.67 1209.89 L1459.26 1209.89 L1459.85 1209.89 L1460.43 1209.89 L1461.02 1209.89 L1461.61 1209.89 L1462.19 1209.89 L1462.78 1209.89 L1463.37 1209.89 L1463.95 1209.89 L1464.54 1209.89 L1465.12 1209.89 L1465.71 1209.89 L1466.3 1209.89 L1466.88 1209.89 L1467.47 1209.89 L1468.06 1209.89 L1468.64 1209.89 L1469.23 1209.89 L1469.82 1209.89 L1470.4 1209.89 L1470.99 1209.89 L1471.57 1209.89 L1472.16 1209.89 L1472.75 1209.89 L1473.33 1209.89 L1473.92 1209.89 L1474.51 1209.89 L1475.09 1209.89 L1475.68 1209.89 L1476.27 1209.89 L1476.85 1209.89 L1477.44 1209.89 L1478.03 1209.89 L1478.61 1209.89 L1479.2 1209.89 L1479.78 1209.89 L1480.37 1209.89 L1480.96 1209.89 L1481.54 1209.89 L1482.13 1209.89 L1482.72 1209.89 L1483.3 1209.89 L1483.89 1209.89 L1484.48 1209.89 L1485.06 1209.89 L1485.65 1209.89 L1486.24 1209.89 L1486.82 1209.89 L1487.41 1209.89 L1487.99 1209.89 L1488.58 1209.89 L1489.17 1209.89 L1489.75 1209.89 L1490.34 1209.89 L1490.93 1209.89 L1491.51 1209.89 L1492.1 1209.89 L1492.69 1209.89 L1493.27 1209.89 L1493.86 1209.89 L1494.45 1209.89 L1495.03 1209.89 L1495.62 1209.89 L1496.2 1209.89 L1496.79 1209.89 L1497.38 1209.89 L1497.96 1209.89 L1498.55 1209.89 L1499.14 1209.89 L1499.72 1209.89 L1500.31 1209.89 L1500.9 1209.89 L1501.48 1209.89 L1502.07 1209.89 L1502.65 1209.89 L1503.24 1209.89 L1503.83 1209.89 L1504.41 1209.89 L1505 1209.89 L1505.59 1209.89 L1506.17 1209.89 L1506.76 1209.89 L1507.35 1209.89 L1507.93 1209.89 L1508.52 1209.89 L1509.11 1209.89 L1509.69 1209.89 L1510.28 1209.89 L1510.86 1209.89 L1511.45 1209.89 L1512.04 1209.89 L1512.62 1209.89 L1513.21 1209.89 L1513.8 1209.89 L1514.38 1209.89 L1514.97 1209.89 L1515.56 1209.89 L1516.14 1209.89 L1516.73 1209.89 L1517.32 1209.89 L1517.9 1209.89 L1518.49 1209.89 L1519.07 1209.89 L1519.66 1209.89 L1520.25 1209.89 L1520.83 1209.89 L1521.42 1209.89 L1522.01 1209.89 L1522.59 1209.89 L1523.18 1209.89 L1523.77 1209.89 L1524.35 1209.89 L1524.94 1209.89 L1525.52 1209.89 L1526.11 1209.89 L1526.7 1209.89 L1527.28 1209.89 L1527.87 1209.89 L1528.46 1209.89 L1529.04 1209.89 L1529.63 1209.89 L1530.22 1209.89 L1530.8 1209.89 L1531.39 1209.89 L1531.98 1209.89 L1532.56 1209.89 L1533.15 1209.89 L1533.73 1209.89 L1534.32 1209.89 L1534.91 1209.89 L1535.49 1209.89 L1536.08 1209.89 L1536.67 1209.89 L1537.25 1209.89 L1537.84 1209.89 L1538.43 1209.89 L1539.01 1209.89 L1539.6 1209.89 L1540.19 1209.89 L1540.77 1209.89 L1541.36 1209.89 L1541.94 1209.89 L1542.53 1209.89 L1543.12 1209.89 L1543.7 1209.89 L1544.29 1209.89 L1544.88 1209.89 L1545.46 1209.89 L1546.05 1209.89 L1546.64 1209.89 L1547.22 1209.89 L1547.81 1209.89 L1548.4 1209.89 L1548.98 1209.89 L1549.57 1209.89 L1550.15 1209.89 L1550.74 1209.89 L1551.33 1209.89 L1551.91 1209.89 L1552.5 1209.89 L1553.09 1209.89 L1553.67 1209.89 L1554.26 1209.89 L1554.85 1209.89 L1555.43 1209.89 L1556.02 1209.89 L1556.6 1209.89 L1557.19 1209.89 L1557.78 1209.89 L1558.36 1209.89 L1558.95 1209.89 L1559.54 1209.89 L1560.12 1209.89 L1560.71 1209.89 L1561.3 1209.89 L1561.88 1209.89 L1562.47 1209.89 L1563.06 1209.89 L1563.64 1209.89 L1564.23 1209.89 L1564.81 1209.89 L1565.4 1209.89 L1565.99 1209.89 L1566.57 1209.89 L1567.16 1209.89 L1567.75 1209.89 L1568.33 1209.89 L1568.92 1209.89 L1569.51 1209.89 L1570.09 1209.89 L1570.68 1209.89 L1571.27 1209.89 L1571.85 1209.89 L1572.44 1209.89 L1573.02 1209.89 L1573.61 1209.89 L1574.2 1209.89 L1574.78 1209.89 L1575.37 1209.89 L1575.96 1209.89 L1576.54 1209.89 L1577.13 1209.89 L1577.72 1209.89 L1578.3 1209.89 L1578.89 1209.89 L1579.47 1209.89 L1580.06 1209.89 L1580.65 1209.89 L1581.23 1209.89 L1581.82 1209.89 L1582.41 1209.89 L1582.99 1209.89 L1583.58 1209.89 L1584.17 1209.89 L1584.75 1209.89 L1585.34 1209.89 L1585.93 1209.89 L1586.51 1209.89 L1587.1 1209.89 L1587.68 1209.89 L1588.27 1209.89 L1588.86 1209.89 L1589.44 1209.89 L1590.03 1209.89 L1590.62 1209.89 L1591.2 1209.89 L1591.79 1209.89 L1592.38 1209.89 L1592.96 1209.89 L1593.55 1209.89 L1594.14 1209.89 L1594.72 1209.89 L1595.31 1209.89 L1595.89 1209.89 L1596.48 1209.89 L1597.07 1209.89 L1597.65 1209.89 L1598.24 1209.89 L1598.83 1209.89 L1599.41 1209.89 L1600 1209.89 L1600.59 1209.89 L1601.17 1209.89 L1601.76 1209.89 L1602.34 1209.89 L1602.93 1209.89 L1603.52 1209.89 L1604.1 1209.89 L1604.69 1209.89 L1605.28 1209.89 L1605.86 1209.89 L1606.45 1209.89 L1607.04 1209.89 L1607.62 1209.89 L1608.21 1209.89 L1608.8 1209.89 L1609.38 1209.89 L1609.97 1209.89 L1610.55 1209.89 L1611.14 1209.89 L1611.73 1209.89 L1612.31 1209.89 L1612.9 1209.89 L1613.49 1209.89 L1614.07 1209.89 L1614.66 1209.89 L1615.25 1209.89 L1615.83 1209.89 L1616.42 1209.89 L1617.01 1209.89 L1617.59 1209.89 L1618.18 1209.89 L1618.76 1209.89 L1619.35 1209.89 L1619.94 1209.89 L1620.52 1209.89 L1621.11 1209.89 L1621.7 1209.89 L1622.28 1209.89 L1622.87 1209.89 L1623.46 1209.89 L1624.04 1209.89 L1624.63 1209.89 L1625.22 1209.89 L1625.8 1209.89 L1626.39 1209.89 L1626.97 1209.89 L1627.56 1209.89 L1628.15 1209.89 L1628.73 1209.89 L1629.32 1209.89 L1629.91 1209.89 L1630.49 1209.89 L1631.08 1209.89 L1631.67 1209.89 L1632.25 1209.89 L1632.84 1209.89 L1633.42 1209.89 L1634.01 1209.89 L1634.6 1209.89 L1635.18 1209.89 L1635.77 1209.89 L1636.36 1209.89 L1636.94 1209.89 L1637.53 1209.89 L1638.12 1209.89 L1638.7 1209.89 L1639.29 1209.89 L1639.88 1209.89 L1640.46 1209.89 L1641.05 1209.89 L1641.63 1209.89 L1642.22 1209.89 L1642.81 1209.89 L1643.39 1209.89 L1643.98 1209.89 L1644.57 1209.89 L1645.15 1209.89 L1645.74 1209.89 L1646.33 1209.89 L1646.91 1209.89 L1647.5 1209.89 L1648.09 1209.89 L1648.67 1209.89 L1649.26 1209.89 L1649.84 1209.89 L1650.43 1209.89 L1651.02 1209.89 L1651.6 1209.89 L1652.19 1209.89 L1652.78 1209.89 L1653.36 1209.89 L1653.95 1209.89 L1654.54 1209.89 L1655.12 1209.89 L1655.71 1209.89 L1656.29 1209.89 L1656.88 1209.89 L1657.47 1209.89 L1658.05 1209.89 L1658.64 1209.89 L1659.23 1209.89 L1659.81 1209.89 L1660.4 1209.89 L1660.99 1209.89 L1661.57 1209.89 L1662.16 1209.89 L1662.75 1209.89 L1663.33 1209.89 L1663.92 1209.89 L1664.5 1209.89 L1665.09 1209.89 L1665.68 1209.89 L1666.26 1209.89 L1666.85 1209.89 L1667.44 1209.89 L1668.02 1209.89 L1668.61 1209.89 L1669.2 1209.89 L1669.78 1209.89 L1670.37 1209.89 L1670.96 1209.89 L1671.54 1209.89 L1672.13 1209.89 L1672.71 1209.89 L1673.3 1209.89 L1673.89 1209.89 L1674.47 1209.89 L1675.06 1209.89 L1675.65 1209.89 L1676.23 1209.89 L1676.82 1209.89 L1677.41 1209.89 L1677.99 1209.89 L1678.58 1209.89 L1679.17 1209.89 L1679.75 1209.89 L1680.34 1209.89 L1680.92 1209.89 L1681.51 1209.89 L1682.1 1209.89 L1682.68 1209.89 L1683.27 1209.89 L1683.86 1209.89 L1684.44 1209.89 L1685.03 1209.89 L1685.62 1209.89 L1686.2 1209.89 L1686.79 1209.89 L1687.37 1209.89 L1687.96 1209.89 L1688.55 1209.89 L1689.13 1209.89 L1689.72 1209.89 L1690.31 1209.89 L1690.89 1209.89 L1691.48 1209.89 L1692.07 1209.89 L1692.65 1209.89 L1693.24 1209.89 L1693.83 1209.89 L1694.41 1209.89 L1695 1209.89 L1695.58 1209.89 L1696.17 1209.89 L1696.76 1209.89 L1697.34 1209.89 L1697.93 1209.89 L1698.52 1209.89 L1699.1 1209.89 L1699.69 1209.89 L1700.28 1209.89 L1700.86 1209.89 L1701.45 1209.89 L1702.04 1209.89 L1702.62 1209.89 L1703.21 1209.89 L1703.79 1209.89 L1704.38 1209.89 L1704.97 1209.89 L1705.55 1209.89 L1706.14 1209.89 L1706.73 1209.89 L1707.31 1209.89 L1707.9 1209.89 L1708.49 1209.89 L1709.07 1209.89 L1709.66 1209.89 L1710.24 1209.89 L1710.83 1209.89 L1711.42 1209.89 L1712 1209.89 L1712.59 1209.89 L1713.18 1209.89 L1713.76 1209.89 L1714.35 1209.89 L1714.94 1209.89 L1715.52 1209.89 L1716.11 1209.89 L1716.7 1209.89 L1717.28 1209.89 L1717.87 1209.89 L1718.45 1209.89 L1719.04 1209.89 L1719.63 1209.89 L1720.21 1209.89 L1720.8 1209.89 L1721.39 1209.89 L1721.97 1209.89 L1722.56 1209.89 L1723.15 1209.89 L1723.73 1209.89 L1724.32 1209.89 L1724.91 1209.89 L1725.49 1209.89 L1726.08 1209.89 L1726.66 1209.89 L1727.25 1209.89 L1727.84 1209.89 L1728.42 1209.89 L1729.01 1209.89 L1729.6 1209.89 L1730.18 1209.89 L1730.77 1209.89 L1731.36 1209.89 L1731.94 1209.89 L1732.53 1209.89 L1733.11 1209.89 L1733.7 1209.89 L1734.29 1209.89 L1734.87 1209.89 L1735.46 1209.89 L1736.05 1209.89 L1736.63 1209.89 L1737.22 1209.89 L1737.81 1209.89 L1738.39 1209.89 L1738.98 1209.89 L1739.57 1209.89 L1740.15 1209.89 L1740.74 1209.89 L1741.32 1209.89 L1741.91 1209.89 L1742.5 1209.89 L1743.08 1209.89 L1743.67 1209.89 L1744.26 1209.89 L1744.84 1209.89 L1745.43 1209.89 L1746.02 1209.89 L1746.6 1209.89 L1747.19 1209.89 L1747.78 1209.89 L1748.36 1209.89 L1748.95 1209.89 L1749.53 1209.89 L1750.12 1209.89 L1750.71 1209.89 L1751.29 1209.89 L1751.88 1209.89 L1752.47 1209.89 L1753.05 1209.89 L1753.64 1209.89 L1754.23 1209.89 L1754.81 1209.89 L1755.4 1209.89 L1755.99 1209.89 L1756.57 1209.89 L1757.16 1209.89 L1757.74 1209.89 L1758.33 1209.89 L1758.92 1209.89 L1759.5 1209.89 L1760.09 1209.89 L1760.68 1209.89 L1761.26 1209.89 L1761.85 1209.89 L1762.44 1209.89 L1763.02 1209.89 L1763.61 1209.89 L1764.19 1209.89 L1764.78 1209.89 L1765.37 1209.89 L1765.95 1209.89 L1766.54 1209.89 L1767.13 1209.89 L1767.71 1209.89 L1768.3 1209.89 L1768.89 1209.89 L1769.47 1209.89 L1770.06 1209.89 L1770.65 1209.89 L1771.23 1209.89 L1771.82 1209.89 L1772.4 1209.89 L1772.99 1209.89 L1773.58 1209.89 L1774.16 1209.89 L1774.75 1209.89 L1775.34 1209.89 L1775.92 1209.89 L1776.51 1209.89 L1777.1 1209.89 L1777.68 1209.89 L1778.27 1209.89 L1778.86 1209.89 L1779.44 1209.89 L1780.03 1209.89 L1780.61 1209.89 L1781.2 1209.89 L1781.79 1209.89 L1782.37 1209.89 L1782.96 1209.89 L1783.55 1209.89 L1784.13 1209.89 L1784.72 1209.89 L1785.31 1209.89 L1785.89 1209.89 L1786.48 1209.89 L1787.06 1209.89 L1787.65 1209.89 L1788.24 1209.89 L1788.82 1209.89 L1789.41 1209.89 L1790 1209.89 L1790.58 1209.89 L1791.17 1209.89 L1791.76 1209.89 L1792.34 1209.89 L1792.93 1209.89 L1793.52 1209.89 L1794.1 1209.89 L1794.69 1209.89 L1795.27 1209.89 L1795.86 1209.89 L1796.45 1209.89 L1797.03 1209.89 L1797.62 1209.89 L1798.21 1209.89 L1798.79 1209.89 L1799.38 1209.89 L1799.97 1209.89 L1800.55 1209.89 L1801.14 1209.89 L1801.73 1209.89 L1802.31 1209.89 L1802.9 1209.89 L1803.48 1209.89 L1804.07 1209.89 L1804.66 1209.89 L1805.24 1209.89 L1805.83 1209.89 L1806.42 1209.89 L1807 1209.89 L1807.59 1209.89 L1808.18 1209.89 L1808.76 1209.89 L1809.35 1209.89 L1809.94 1209.89 L1810.52 1209.89 L1811.11 1209.89 L1811.69 1209.89 L1812.28 1209.89 L1812.87 1209.89 L1813.45 1209.89 L1814.04 1209.89 L1814.63 1209.89 L1815.21 1209.89 L1815.8 1209.89 L1816.39 1209.89 L1816.97 1209.89 L1817.56 1209.89 L1818.14 1209.89 L1818.73 1209.89 L1819.32 1209.89 L1819.9 1209.89 L1820.49 1209.89 L1821.08 1209.89 L1821.66 1209.89 L1822.25 1209.89 L1822.84 1209.89 L1823.42 1209.89 L1824.01 1209.89 L1824.6 1209.89 L1825.18 1209.89 L1825.77 1209.89 L1826.35 1209.89 L1826.94 1209.89 L1827.53 1209.89 L1828.11 1209.89 L1828.7 1209.89 L1829.29 1209.89 L1829.87 1209.89 L1830.46 1209.89 L1831.05 1209.89 L1831.63 1209.89 L1832.22 1209.89 L1832.81 1209.89 L1833.39 1209.89 L1833.98 1209.89 L1834.56 1209.89 L1835.15 1209.89 L1835.74 1209.89 L1836.32 1209.89 L1836.91 1209.89 L1837.5 1209.89 L1838.08 1209.89 L1838.67 1209.89 L1839.26 1209.89 L1839.84 1209.89 L1840.43 1209.89 L1841.01 1209.89 L1841.6 1209.89 L1842.19 1209.89 L1842.77 1209.89 L1843.36 1209.89 L1843.95 1209.89 L1844.53 1209.89 L1845.12 1209.89 L1845.71 1209.89 L1846.29 1209.89 L1846.88 1209.89 L1847.47 1209.89 L1848.05 1209.89 L1848.64 1209.89 L1849.22 1209.89 L1849.81 1209.89 L1850.4 1209.89 L1850.98 1209.89 L1851.57 1209.89 L1852.16 1209.89 L1852.74 1209.89 L1853.33 1209.89 L1853.92 1209.89 L1854.5 1209.89 L1855.09 1209.89 L1855.68 1209.89 L1856.26 1209.89 L1856.85 1209.89 L1857.43 1209.89 L1858.02 1209.89 L1858.61 1209.89 L1859.19 1209.89 L1859.78 1209.89 L1860.37 1209.89 L1860.95 1209.89 L1861.54 1209.89 L1862.13 1209.89 L1862.71 1209.89 L1863.3 1209.89 L1863.88 1209.89 L1864.47 1209.89 L1865.06 1209.89 L1865.64 1209.89 L1866.23 1209.89 L1866.82 1209.89 L1867.4 1209.89 L1867.99 1209.89 L1868.58 1209.89 L1869.16 1209.89 L1869.75 1209.89 L1870.34 1209.89 L1870.92 1209.89 L1871.51 1209.89 L1872.09 1209.89 L1872.68 1209.89 L1873.27 1209.89 L1873.85 1209.89 L1874.44 1209.89 L1875.03 1209.89 L1875.61 1209.89 L1876.2 1209.89 L1876.79 1209.89 L1877.37 1209.89 L1877.96 1209.89 L1878.55 1209.89 L1879.13 1209.89 L1879.72 1209.89 L1880.3 1209.89 L1880.89 1209.89 L1881.48 1209.89 L1882.06 1209.89 L1882.65 1209.89 L1883.24 1209.89 L1883.82 1209.89 L1884.41 1209.89 L1885 1209.89 L1885.58 1209.89 L1886.17 1209.89 L1886.76 1209.89 L1887.34 1209.89 L1887.93 1209.89 L1888.51 1209.89 L1889.1 1209.89 L1889.69 1209.89 L1890.27 1209.89 L1890.86 1209.89 L1891.45 1209.89 L1892.03 1209.89 L1892.62 1209.89 L1893.21 1209.89 L1893.79 1209.89 L1894.38 1209.89 L1894.96 1209.89 L1895.55 1209.89 L1896.14 1209.89 L1896.72 1209.89 L1897.31 1209.89 L1897.9 1209.89 L1898.48 1209.89 L1899.07 1209.89 L1899.66 1209.89 L1900.24 1209.89 L1900.83 1209.89 L1901.42 1209.89 L1902 1209.89 L1902.59 1209.89 L1903.17 1209.89 L1903.76 1209.89 L1904.35 1209.89 L1904.93 1209.89 L1905.52 1209.89 L1906.11 1209.89 L1906.69 1209.89 L1907.28 1209.89 L1907.87 1209.89 L1908.45 1209.89 L1909.04 1209.89 L1909.63 1209.89 L1910.21 1209.89 L1910.8 1209.89 L1911.38 1209.89 L1911.97 1209.89 L1912.56 1209.89 L1913.14 1209.89 L1913.73 1209.89 L1914.32 1209.89 L1914.9 1209.89 L1915.49 1209.89 L1916.08 1209.89 L1916.66 1209.89 L1917.25 1209.89 L1917.83 1209.89 L1918.42 1209.89 L1919.01 1209.89 L1919.59 1209.89 L1920.18 1209.89 L1920.77 1209.89 L1921.35 1209.89 L1921.94 1209.89 L1922.53 1209.89 L1923.11 1209.89 L1923.7 1209.89 L1924.29 1209.89 L1924.87 1209.89 L1925.46 1209.89 L1926.04 1209.89 L1926.63 1209.89 L1927.22 1209.89 L1927.8 1209.89 L1928.39 1209.89 L1928.98 1209.89 L1929.56 1209.89 L1930.15 1209.89 L1930.74 1209.89 L1931.32 1209.89 L1931.91 1209.89 L1932.5 1209.89 L1933.08 1209.89 L1933.67 1209.89 L1934.25 1209.89 L1934.84 1209.89 L1935.43 1209.89 L1936.01 1209.89 L1936.6 1209.89 L1937.19 1209.89 L1937.77 1209.89 L1938.36 1209.89 L1938.95 1209.89 L1939.53 1209.89 L1940.12 1209.89 L1940.71 1209.89 L1941.29 1209.89 L1941.88 1209.89 L1942.46 1209.89 L1943.05 1209.89 L1943.64 1209.89 L1944.22 1209.89 L1944.81 1209.89 L1945.4 1209.89 L1945.98 1209.89 L1946.57 1209.89 L1947.16 1209.89 L1947.74 1209.89 L1948.33 1209.89 L1948.91 1209.89 L1949.5 1209.89 L1950.09 1209.89 L1950.67 1209.89 L1951.26 1209.89 L1951.85 1209.89 L1952.43 1209.89 L1953.02 1209.89 L1953.61 1209.89 L1954.19 1209.89 L1954.78 1209.89 L1955.37 1209.89 L1955.95 1209.89 L1956.54 1209.89 L1957.12 1209.89 L1957.71 1209.89 L1958.3 1209.89 L1958.88 1209.89 L1959.47 1209.89 L1960.06 1209.89 L1960.64 1209.89 L1961.23 1209.89 L1961.82 1209.89 L1962.4 1209.89 L1962.99 1209.89 L1963.58 1209.89 L1964.16 1209.89 L1964.75 1209.89 L1965.33 1209.89 L1965.92 1209.89 L1966.51 1209.89 L1967.09 1209.89 L1967.68 1209.89 L1968.27 1209.89 L1968.85 1209.89 L1969.44 1209.89 L1970.03 1209.89 L1970.61 1209.89 L1971.2 1209.89 L1971.78 1209.89 L1972.37 1209.89 L1972.96 1209.89 L1973.54 1209.89 L1974.13 1209.89 L1974.72 1209.89 L1975.3 1209.89 L1975.89 1209.89 L1976.48 1209.89 L1977.06 1209.89 L1977.65 1209.89 L1978.24 1209.89 L1978.82 1209.89 L1979.41 1209.89 L1979.99 1209.89 L1980.58 1209.89 L1981.17 1209.89 L1981.75 1209.89 L1982.34 1209.89 L1982.93 1209.89 L1983.51 1209.89 L1984.1 1209.89 L1984.69 1209.89 L1985.27 1209.89 L1985.86 1209.89 L1986.45 1209.89 L1987.03 1209.89 L1987.62 1209.89 L1988.2 1209.89 L1988.79 1209.89 L1989.38 1209.89 L1989.96 1209.89 L1990.55 1209.89 L1991.14 1209.89 L1991.72 1209.89 L1992.31 1209.89 L1992.9 1209.89 L1993.48 1209.89 L1994.07 1209.89 L1994.65 1209.89 L1995.24 1209.89 L1995.83 1209.89 L1996.41 1209.89 L1997 1209.89 L1997.59 1209.89 L1998.17 1209.89 L1998.76 1209.89 L1999.35 1209.89 L1999.93 1209.89 L2000.52 1209.89 L2001.11 1209.89 L2001.69 1209.89 L2002.28 1209.89 L2002.86 1209.89 L2003.45 1209.89 L2004.04 1209.89 L2004.62 1209.89 L2005.21 1209.89 L2005.8 1209.89 L2006.38 1209.89 L2006.97 1209.89 L2007.56 1209.89 L2008.14 1209.89 L2008.73 1209.89 L2009.32 1209.89 L2009.9 1209.89 L2010.49 1209.89 L2011.07 1209.89 L2011.66 1209.89 L2012.25 1209.89 L2012.83 1209.89 L2013.42 1209.89 L2014.01 1209.89 L2014.59 1209.89 L2015.18 1209.89 L2015.77 1209.89 L2016.35 1209.89 L2016.94 1209.89 L2017.53 1209.89 L2018.11 1209.89 L2018.7 1209.89 L2019.28 1209.89 L2019.87 1209.89 L2020.46 1209.89 L2021.04 1209.89 L2021.63 1209.89 L2022.22 1209.89 L2022.8 1209.89 L2023.39 1209.89 L2023.98 1209.89 L2024.56 1209.89 L2025.15 1209.89 L2025.73 1209.89 L2026.32 1209.89 L2026.91 1209.89 L2027.49 1209.89 L2028.08 1209.89 L2028.67 1209.89 L2029.25 1209.89 L2029.84 1209.89 L2030.43 1209.89 L2031.01 1209.89 L2031.6 1209.89 L2032.19 1209.89 L2032.77 1209.89 L2033.36 1209.89 L2033.94 1209.89 L2034.53 1209.89 L2035.12 1209.89 L2035.7 1209.89 L2036.29 1209.89 L2036.88 1209.89 L2037.46 1209.89 L2038.05 1209.89 L2038.64 1209.89 L2039.22 1209.89 L2039.81 1209.89 L2040.4 1209.89 L2040.98 1209.89 L2041.57 1209.89 L2042.15 1209.89 L2042.74 1209.89 L2043.33 1209.89 L2043.91 1209.89 L2044.5 1209.89 L2045.09 1209.89 L2045.67 1209.89 L2046.26 1209.89 L2046.85 1209.89 L2047.43 1209.89 L2048.02 1209.89 L2048.6 1209.89 L2049.19 1209.89 L2049.78 1209.89 L2050.36 1209.89 L2050.95 1209.89 L2051.54 1209.89 L2052.12 1209.89 L2052.71 1209.89 L2053.3 1209.89 L2053.88 1209.89 L2054.47 1209.89 L2055.06 1209.89 L2055.64 1209.89 L2056.23 1209.89 L2056.81 1209.89 L2057.4 1209.89 L2057.99 1209.89 L2058.57 1209.89 L2059.16 1209.89 L2059.75 1209.89 L2060.33 1209.89 L2060.92 1209.89 L2061.51 1209.89 L2062.09 1209.89 L2062.68 1209.89 L2063.27 1209.89 L2063.85 1209.89 L2064.44 1209.89 L2065.02 1209.89 L2065.61 1209.89 L2066.2 1209.89 L2066.78 1209.89 L2067.37 1209.89 L2067.96 1209.89 L2068.54 1209.89 L2069.13 1209.89 L2069.72 1209.89 L2070.3 1209.89 L2070.89 1209.89 L2071.48 1209.89 L2072.06 1209.89 L2072.65 1209.89 L2073.23 1209.89 L2073.82 1209.89 L2074.41 1209.89 L2074.99 1209.89 L2075.58 1209.89 L2076.17 1209.89 L2076.75 1209.89 L2077.34 1209.89 L2077.93 1209.89 L2078.51 1209.89 L2079.1 1209.89 L2079.68 1209.89 L2080.27 1209.89 L2080.86 1209.89 L2081.44 1209.89 L2082.03 1209.89 L2082.62 1209.89 L2083.2 1209.89 L2083.79 1209.89 L2084.38 1209.89 L2084.96 1209.89 L2085.55 1209.89 L2086.14 1209.89 L2086.72 1209.89 L2087.31 1209.89 L2087.89 1209.89 L2088.48 1209.89 L2089.07 1209.89 L2089.65 1209.89 L2090.24 1209.89 L2090.83 1209.89 L2091.41 1209.89 L2092 1209.89 L2092.59 1209.89 L2093.17 1209.89 L2093.76 1209.89 L2094.35 1209.89 L2094.93 1209.89 L2095.52 1209.89 L2096.1 1209.89 L2096.69 1209.89 L2097.28 1209.89 L2097.86 1209.89 L2098.45 1209.89 L2099.04 1209.89 L2099.62 1209.89 L2100.21 1209.89 L2100.8 1209.89 L2101.38 1209.89 L2101.97 1209.89 L2102.55 1209.89 L2103.14 1209.89 L2103.73 1209.89 L2104.31 1209.89 L2104.9 1209.89 L2105.49 1209.89 L2106.07 1209.89 L2106.66 1209.89 L2107.25 1209.89 L2107.83 1209.89 L2108.42 1209.89 L2109.01 1209.89 L2109.59 1209.89 L2110.18 1209.89 L2110.76 1209.89 L2111.35 1209.89 L2111.94 1209.89 L2112.52 1209.89 L2113.11 1209.89 L2113.7 1209.89 L2114.28 1209.89 L2114.87 1209.89 L2115.46 1209.89 L2116.04 1209.89 L2116.63 1209.89 L2117.22 1209.89 L2117.8 1209.89 L2118.39 1209.89 L2118.97 1209.89 L2119.56 1209.89 L2120.15 1209.89 L2120.73 1209.89 L2121.32 1209.89 L2121.91 1209.89 L2122.49 1209.89 L2123.08 1209.89 L2123.67 1209.89 L2124.25 1209.89 L2124.84 1209.89 L2125.42 1209.89 L2126.01 1209.89 L2126.6 1209.89 L2127.18 1209.89 L2127.77 1209.89 L2128.36 1209.89 L2128.94 1209.89 L2129.53 1209.89 L2130.12 1209.89 L2130.7 1209.89 L2131.29 1209.89 L2131.88 1209.89 L2132.46 1209.89 L2133.05 1209.89 L2133.63 1209.89 L2134.22 1209.89 L2134.81 1209.89 L2135.39 1209.89 L2135.98 1209.89 L2136.57 1209.89 L2137.15 1209.89 L2137.74 1209.89 L2138.33 1209.89 L2138.91 1209.89 L2139.5 1209.89 L2140.09 1209.89 L2140.67 1209.89 L2141.26 1209.89 L2141.84 1209.89 L2142.43 1209.89 L2143.02 1209.89 L2143.6 1209.89 L2144.19 1209.89 L2144.78 1209.89 L2145.36 1209.89 L2145.95 1209.89 L2146.54 1209.89 L2147.12 1209.89 L2147.71 1209.89 L2148.3 1209.89 L2148.88 1209.89 L2149.47 1209.89 L2150.05 1209.89 L2150.64 1209.89 L2151.23 1209.89 L2151.81 1209.89 L2152.4 1209.89 L2152.99 1209.89 L2153.57 1209.89 L2154.16 1209.89 L2154.75 1209.89 L2155.33 1209.89 L2155.92 1209.89 L2156.5 1209.89 L2157.09 1209.89 L2157.68 1209.89 L2158.26 1209.89 L2158.26 1209.12 L2157.68 1209.12 L2157.09 1209.12 L2156.5 1209.12 L2155.92 1209.12 L2155.33 1209.12 L2154.75 1209.12 L2154.16 1209.12 L2153.57 1209.12 L2152.99 1209.12 L2152.4 1209.12 L2151.81 1209.12 L2151.23 1209.12 L2150.64 1209.12 L2150.05 1209.12 L2149.47 1209.12 L2148.88 1209.12 L2148.3 1209.12 L2147.71 1209.12 L2147.12 1209.12 L2146.54 1209.12 L2145.95 1209.12 L2145.36 1209.12 L2144.78 1209.12 L2144.19 1209.12 L2143.6 1209.12 L2143.02 1209.12 L2142.43 1209.12 L2141.84 1209.12 L2141.26 1209.12 L2140.67 1209.12 L2140.09 1209.12 L2139.5 1209.12 L2138.91 1209.12 L2138.33 1209.12 L2137.74 1209.12 L2137.15 1209.12 L2136.57 1209.12 L2135.98 1209.12 L2135.39 1209.12 L2134.81 1209.12 L2134.22 1209.12 L2133.63 1209.12 L2133.05 1209.12 L2132.46 1209.12 L2131.88 1209.12 L2131.29 1209.12 L2130.7 1209.12 L2130.12 1209.12 L2129.53 1209.12 L2128.94 1209.12 L2128.36 1209.12 L2127.77 1209.12 L2127.18 1209.12 L2126.6 1209.12 L2126.01 1209.12 L2125.42 1209.12 L2124.84 1209.12 L2124.25 1209.12 L2123.67 1209.12 L2123.08 1209.12 L2122.49 1209.12 L2121.91 1209.12 L2121.32 1209.12 L2120.73 1209.12 L2120.15 1209.12 L2119.56 1209.12 L2118.97 1209.12 L2118.39 1209.12 L2117.8 1209.12 L2117.22 1209.12 L2116.63 1209.12 L2116.04 1209.12 L2115.46 1209.12 L2114.87 1209.12 L2114.28 1209.12 L2113.7 1209.12 L2113.11 1209.12 L2112.52 1209.12 L2111.94 1209.12 L2111.35 1209.12 L2110.76 1209.12 L2110.18 1209.12 L2109.59 1209.12 L2109.01 1209.12 L2108.42 1209.12 L2107.83 1209.12 L2107.25 1209.12 L2106.66 1209.12 L2106.07 1209.12 L2105.49 1209.12 L2104.9 1209.12 L2104.31 1209.12 L2103.73 1209.12 L2103.14 1209.12 L2102.55 1209.12 L2101.97 1209.12 L2101.38 1209.12 L2100.8 1209.12 L2100.21 1209.12 L2099.62 1209.12 L2099.04 1209.12 L2098.45 1209.12 L2097.86 1209.12 L2097.28 1209.12 L2096.69 1209.12 L2096.1 1209.12 L2095.52 1209.12 L2094.93 1209.12 L2094.35 1209.12 L2093.76 1209.12 L2093.17 1209.12 L2092.59 1209.12 L2092 1209.12 L2091.41 1209.12 L2090.83 1209.12 L2090.24 1209.12 L2089.65 1209.12 L2089.07 1209.12 L2088.48 1209.12 L2087.89 1209.12 L2087.31 1209.12 L2086.72 1209.12 L2086.14 1209.12 L2085.55 1209.12 L2084.96 1209.12 L2084.38 1209.12 L2083.79 1209.12 L2083.2 1209.12 L2082.62 1209.12 L2082.03 1209.12 L2081.44 1209.12 L2080.86 1209.12 L2080.27 1209.12 L2079.68 1209.12 L2079.1 1209.12 L2078.51 1209.12 L2077.93 1209.12 L2077.34 1209.12 L2076.75 1209.12 L2076.17 1209.12 L2075.58 1209.12 L2074.99 1209.12 L2074.41 1209.12 L2073.82 1209.12 L2073.23 1209.12 L2072.65 1209.12 L2072.06 1209.12 L2071.48 1209.12 L2070.89 1209.12 L2070.3 1209.12 L2069.72 1209.12 L2069.13 1209.12 L2068.54 1209.12 L2067.96 1209.12 L2067.37 1209.12 L2066.78 1209.12 L2066.2 1209.12 L2065.61 1209.12 L2065.02 1209.12 L2064.44 1209.12 L2063.85 1209.12 L2063.27 1209.12 L2062.68 1209.12 L2062.09 1209.12 L2061.51 1209.12 L2060.92 1209.12 L2060.33 1209.12 L2059.75 1209.12 L2059.16 1209.12 L2058.57 1209.12 L2057.99 1209.12 L2057.4 1209.12 L2056.81 1209.12 L2056.23 1209.12 L2055.64 1209.12 L2055.06 1209.12 L2054.47 1209.12 L2053.88 1209.12 L2053.3 1209.12 L2052.71 1209.12 L2052.12 1209.12 L2051.54 1209.12 L2050.95 1209.12 L2050.36 1209.12 L2049.78 1209.12 L2049.19 1209.12 L2048.6 1209.12 L2048.02 1209.12 L2047.43 1209.12 L2046.85 1209.12 L2046.26 1209.12 L2045.67 1209.12 L2045.09 1209.12 L2044.5 1209.12 L2043.91 1209.12 L2043.33 1209.12 L2042.74 1209.12 L2042.15 1209.12 L2041.57 1209.12 L2040.98 1209.12 L2040.4 1209.12 L2039.81 1209.12 L2039.22 1209.12 L2038.64 1209.12 L2038.05 1209.12 L2037.46 1209.12 L2036.88 1209.12 L2036.29 1209.12 L2035.7 1209.12 L2035.12 1209.12 L2034.53 1209.12 L2033.94 1209.12 L2033.36 1209.12 L2032.77 1209.12 L2032.19 1209.12 L2031.6 1209.12 L2031.01 1209.12 L2030.43 1209.12 L2029.84 1209.12 L2029.25 1209.12 L2028.67 1209.12 L2028.08 1209.12 L2027.49 1209.12 L2026.91 1209.12 L2026.32 1209.12 L2025.73 1209.12 L2025.15 1209.12 L2024.56 1209.12 L2023.98 1209.12 L2023.39 1209.12 L2022.8 1209.12 L2022.22 1209.12 L2021.63 1209.12 L2021.04 1209.12 L2020.46 1209.12 L2019.87 1209.12 L2019.28 1209.12 L2018.7 1209.12 L2018.11 1209.12 L2017.53 1209.12 L2016.94 1209.12 L2016.35 1209.12 L2015.77 1209.12 L2015.18 1209.12 L2014.59 1209.12 L2014.01 1209.12 L2013.42 1209.12 L2012.83 1209.12 L2012.25 1209.12 L2011.66 1209.12 L2011.07 1209.12 L2010.49 1209.12 L2009.9 1209.12 L2009.32 1209.12 L2008.73 1209.12 L2008.14 1209.12 L2007.56 1209.12 L2006.97 1209.12 L2006.38 1209.12 L2005.8 1209.12 L2005.21 1209.12 L2004.62 1209.12 L2004.04 1209.12 L2003.45 1209.12 L2002.86 1209.12 L2002.28 1209.12 L2001.69 1209.12 L2001.11 1209.12 L2000.52 1209.12 L1999.93 1209.12 L1999.35 1209.12 L1998.76 1209.12 L1998.17 1209.12 L1997.59 1209.12 L1997 1209.12 L1996.41 1209.12 L1995.83 1209.12 L1995.24 1209.12 L1994.65 1209.12 L1994.07 1209.12 L1993.48 1209.12 L1992.9 1209.12 L1992.31 1209.12 L1991.72 1209.12 L1991.14 1209.12 L1990.55 1209.12 L1989.96 1209.12 L1989.38 1209.12 L1988.79 1209.12 L1988.2 1209.12 L1987.62 1209.12 L1987.03 1209.12 L1986.45 1209.12 L1985.86 1209.12 L1985.27 1209.12 L1984.69 1209.12 L1984.1 1209.12 L1983.51 1209.12 L1982.93 1209.12 L1982.34 1209.12 L1981.75 1209.12 L1981.17 1209.12 L1980.58 1209.12 L1979.99 1209.12 L1979.41 1209.12 L1978.82 1209.12 L1978.24 1209.12 L1977.65 1209.12 L1977.06 1209.12 L1976.48 1209.12 L1975.89 1209.12 L1975.3 1209.12 L1974.72 1209.12 L1974.13 1209.12 L1973.54 1209.12 L1972.96 1209.12 L1972.37 1209.12 L1971.78 1209.12 L1971.2 1209.12 L1970.61 1209.12 L1970.03 1209.12 L1969.44 1209.12 L1968.85 1209.12 L1968.27 1209.12 L1967.68 1209.12 L1967.09 1209.12 L1966.51 1209.12 L1965.92 1209.12 L1965.33 1209.12 L1964.75 1209.12 L1964.16 1209.12 L1963.58 1209.12 L1962.99 1209.12 L1962.4 1209.12 L1961.82 1209.12 L1961.23 1209.12 L1960.64 1209.12 L1960.06 1209.12 L1959.47 1209.12 L1958.88 1209.12 L1958.3 1209.12 L1957.71 1209.12 L1957.12 1209.12 L1956.54 1209.12 L1955.95 1209.12 L1955.37 1209.12 L1954.78 1209.12 L1954.19 1209.12 L1953.61 1209.12 L1953.02 1209.12 L1952.43 1209.12 L1951.85 1209.12 L1951.26 1209.12 L1950.67 1209.12 L1950.09 1209.12 L1949.5 1209.12 L1948.91 1209.12 L1948.33 1209.12 L1947.74 1209.12 L1947.16 1209.12 L1946.57 1209.12 L1945.98 1209.12 L1945.4 1209.12 L1944.81 1209.12 L1944.22 1209.12 L1943.64 1209.12 L1943.05 1209.12 L1942.46 1209.12 L1941.88 1209.12 L1941.29 1209.12 L1940.71 1209.12 L1940.12 1209.12 L1939.53 1209.12 L1938.95 1209.12 L1938.36 1209.12 L1937.77 1209.12 L1937.19 1209.12 L1936.6 1209.12 L1936.01 1209.12 L1935.43 1209.12 L1934.84 1209.12 L1934.25 1209.12 L1933.67 1209.12 L1933.08 1209.12 L1932.5 1209.12 L1931.91 1209.12 L1931.32 1209.12 L1930.74 1209.12 L1930.15 1209.12 L1929.56 1209.12 L1928.98 1209.12 L1928.39 1209.12 L1927.8 1209.12 L1927.22 1209.12 L1926.63 1209.12 L1926.04 1209.12 L1925.46 1209.12 L1924.87 1209.12 L1924.29 1209.12 L1923.7 1209.12 L1923.11 1209.12 L1922.53 1209.12 L1921.94 1209.12 L1921.35 1209.12 L1920.77 1209.12 L1920.18 1209.12 L1919.59 1209.12 L1919.01 1209.12 L1918.42 1209.12 L1917.83 1209.12 L1917.25 1209.12 L1916.66 1209.12 L1916.08 1209.12 L1915.49 1209.12 L1914.9 1209.12 L1914.32 1209.12 L1913.73 1209.12 L1913.14 1209.12 L1912.56 1209.12 L1911.97 1209.12 L1911.38 1209.12 L1910.8 1209.12 L1910.21 1209.12 L1909.63 1209.12 L1909.04 1209.12 L1908.45 1209.12 L1907.87 1209.12 L1907.28 1209.12 L1906.69 1209.12 L1906.11 1209.12 L1905.52 1209.12 L1904.93 1209.12 L1904.35 1209.12 L1903.76 1209.12 L1903.17 1209.12 L1902.59 1209.12 L1902 1209.12 L1901.42 1209.12 L1900.83 1209.12 L1900.24 1209.12 L1899.66 1209.12 L1899.07 1209.12 L1898.48 1209.12 L1897.9 1209.12 L1897.31 1209.12 L1896.72 1209.12 L1896.14 1209.12 L1895.55 1209.12 L1894.96 1209.12 L1894.38 1209.12 L1893.79 1209.12 L1893.21 1209.12 L1892.62 1209.12 L1892.03 1209.12 L1891.45 1209.12 L1890.86 1209.12 L1890.27 1209.12 L1889.69 1209.12 L1889.1 1209.12 L1888.51 1209.12 L1887.93 1209.12 L1887.34 1209.12 L1886.76 1209.12 L1886.17 1209.12 L1885.58 1209.12 L1885 1209.12 L1884.41 1209.12 L1883.82 1209.12 L1883.24 1209.12 L1882.65 1209.12 L1882.06 1209.12 L1881.48 1209.12 L1880.89 1209.12 L1880.3 1209.12 L1879.72 1209.12 L1879.13 1209.12 L1878.55 1209.12 L1877.96 1209.12 L1877.37 1209.12 L1876.79 1209.12 L1876.2 1209.12 L1875.61 1209.12 L1875.03 1209.12 L1874.44 1209.12 L1873.85 1209.12 L1873.27 1209.12 L1872.68 1209.12 L1872.09 1209.12 L1871.51 1209.12 L1870.92 1209.12 L1870.34 1209.12 L1869.75 1209.12 L1869.16 1209.12 L1868.58 1209.12 L1867.99 1209.12 L1867.4 1209.12 L1866.82 1209.12 L1866.23 1209.12 L1865.64 1209.12 L1865.06 1209.12 L1864.47 1209.12 L1863.88 1209.12 L1863.3 1209.12 L1862.71 1209.12 L1862.13 1209.12 L1861.54 1209.12 L1860.95 1209.12 L1860.37 1209.12 L1859.78 1209.12 L1859.19 1209.12 L1858.61 1209.12 L1858.02 1209.12 L1857.43 1209.12 L1856.85 1209.12 L1856.26 1209.12 L1855.68 1209.12 L1855.09 1209.12 L1854.5 1209.12 L1853.92 1209.12 L1853.33 1209.12 L1852.74 1209.12 L1852.16 1209.12 L1851.57 1209.12 L1850.98 1209.12 L1850.4 1209.12 L1849.81 1209.12 L1849.22 1209.12 L1848.64 1209.12 L1848.05 1209.12 L1847.47 1209.12 L1846.88 1209.12 L1846.29 1209.12 L1845.71 1209.12 L1845.12 1209.12 L1844.53 1209.12 L1843.95 1209.12 L1843.36 1209.12 L1842.77 1209.12 L1842.19 1209.12 L1841.6 1209.12 L1841.01 1209.12 L1840.43 1209.12 L1839.84 1209.12 L1839.26 1209.12 L1838.67 1209.12 L1838.08 1209.12 L1837.5 1209.12 L1836.91 1209.12 L1836.32 1209.12 L1835.74 1209.12 L1835.15 1209.12 L1834.56 1209.12 L1833.98 1209.12 L1833.39 1209.12 L1832.81 1209.12 L1832.22 1209.12 L1831.63 1209.12 L1831.05 1209.12 L1830.46 1209.12 L1829.87 1209.12 L1829.29 1209.12 L1828.7 1209.12 L1828.11 1209.12 L1827.53 1209.12 L1826.94 1209.12 L1826.35 1209.12 L1825.77 1209.12 L1825.18 1209.12 L1824.6 1209.12 L1824.01 1209.12 L1823.42 1209.12 L1822.84 1209.12 L1822.25 1209.12 L1821.66 1209.12 L1821.08 1209.12 L1820.49 1209.12 L1819.9 1209.12 L1819.32 1209.12 L1818.73 1209.12 L1818.14 1209.12 L1817.56 1209.12 L1816.97 1209.12 L1816.39 1209.12 L1815.8 1209.12 L1815.21 1209.12 L1814.63 1209.12 L1814.04 1209.12 L1813.45 1209.12 L1812.87 1209.12 L1812.28 1209.12 L1811.69 1209.12 L1811.11 1209.12 L1810.52 1209.12 L1809.94 1209.12 L1809.35 1209.12 L1808.76 1209.12 L1808.18 1209.12 L1807.59 1209.12 L1807 1209.12 L1806.42 1209.12 L1805.83 1209.12 L1805.24 1209.12 L1804.66 1209.12 L1804.07 1209.12 L1803.48 1209.12 L1802.9 1209.12 L1802.31 1209.12 L1801.73 1209.12 L1801.14 1209.12 L1800.55 1209.12 L1799.97 1209.12 L1799.38 1209.12 L1798.79 1209.12 L1798.21 1209.12 L1797.62 1209.12 L1797.03 1209.12 L1796.45 1209.12 L1795.86 1209.12 L1795.27 1209.12 L1794.69 1209.12 L1794.1 1209.12 L1793.52 1209.12 L1792.93 1209.12 L1792.34 1209.12 L1791.76 1209.12 L1791.17 1209.12 L1790.58 1209.12 L1790 1209.12 L1789.41 1209.12 L1788.82 1209.12 L1788.24 1209.12 L1787.65 1209.12 L1787.06 1209.12 L1786.48 1209.12 L1785.89 1209.12 L1785.31 1209.12 L1784.72 1209.12 L1784.13 1209.12 L1783.55 1209.12 L1782.96 1209.12 L1782.37 1209.12 L1781.79 1209.12 L1781.2 1209.12 L1780.61 1209.12 L1780.03 1209.12 L1779.44 1209.12 L1778.86 1209.12 L1778.27 1209.12 L1777.68 1209.12 L1777.1 1209.12 L1776.51 1209.12 L1775.92 1209.12 L1775.34 1209.12 L1774.75 1209.12 L1774.16 1209.12 L1773.58 1209.12 L1772.99 1209.12 L1772.4 1209.12 L1771.82 1209.12 L1771.23 1209.12 L1770.65 1209.12 L1770.06 1209.12 L1769.47 1209.12 L1768.89 1209.12 L1768.3 1209.12 L1767.71 1209.12 L1767.13 1209.12 L1766.54 1209.12 L1765.95 1209.12 L1765.37 1209.12 L1764.78 1209.12 L1764.19 1209.12 L1763.61 1209.12 L1763.02 1209.12 L1762.44 1209.12 L1761.85 1209.12 L1761.26 1209.12 L1760.68 1209.12 L1760.09 1209.12 L1759.5 1209.12 L1758.92 1209.12 L1758.33 1209.12 L1757.74 1209.12 L1757.16 1209.12 L1756.57 1209.12 L1755.99 1209.12 L1755.4 1209.12 L1754.81 1209.12 L1754.23 1209.12 L1753.64 1209.12 L1753.05 1209.12 L1752.47 1209.12 L1751.88 1209.12 L1751.29 1209.12 L1750.71 1209.12 L1750.12 1209.12 L1749.53 1209.12 L1748.95 1209.12 L1748.36 1209.12 L1747.78 1209.12 L1747.19 1209.12 L1746.6 1209.12 L1746.02 1209.12 L1745.43 1209.12 L1744.84 1209.12 L1744.26 1209.12 L1743.67 1209.12 L1743.08 1209.12 L1742.5 1209.12 L1741.91 1209.12 L1741.32 1209.12 L1740.74 1209.12 L1740.15 1209.12 L1739.57 1209.12 L1738.98 1209.12 L1738.39 1209.12 L1737.81 1209.12 L1737.22 1209.12 L1736.63 1209.12 L1736.05 1209.12 L1735.46 1209.12 L1734.87 1209.12 L1734.29 1209.12 L1733.7 1209.12 L1733.11 1209.12 L1732.53 1209.12 L1731.94 1209.12 L1731.36 1209.12 L1730.77 1209.12 L1730.18 1209.12 L1729.6 1209.12 L1729.01 1209.12 L1728.42 1209.12 L1727.84 1209.12 L1727.25 1209.12 L1726.66 1209.12 L1726.08 1209.12 L1725.49 1209.12 L1724.91 1209.12 L1724.32 1209.12 L1723.73 1209.12 L1723.15 1209.12 L1722.56 1209.12 L1721.97 1209.12 L1721.39 1209.12 L1720.8 1209.12 L1720.21 1209.12 L1719.63 1209.12 L1719.04 1209.12 L1718.45 1209.12 L1717.87 1209.12 L1717.28 1209.12 L1716.7 1209.12 L1716.11 1209.12 L1715.52 1209.12 L1714.94 1209.12 L1714.35 1209.12 L1713.76 1209.12 L1713.18 1209.12 L1712.59 1209.12 L1712 1209.12 L1711.42 1209.12 L1710.83 1209.12 L1710.24 1209.12 L1709.66 1209.12 L1709.07 1209.12 L1708.49 1209.12 L1707.9 1209.12 L1707.31 1209.12 L1706.73 1209.12 L1706.14 1209.12 L1705.55 1209.12 L1704.97 1209.12 L1704.38 1209.12 L1703.79 1209.12 L1703.21 1209.12 L1702.62 1209.12 L1702.04 1209.12 L1701.45 1209.12 L1700.86 1209.12 L1700.28 1209.12 L1699.69 1209.12 L1699.1 1209.12 L1698.52 1209.12 L1697.93 1209.12 L1697.34 1209.12 L1696.76 1209.12 L1696.17 1209.12 L1695.58 1209.12 L1695 1209.12 L1694.41 1209.12 L1693.83 1209.12 L1693.24 1209.12 L1692.65 1209.12 L1692.07 1209.12 L1691.48 1209.12 L1690.89 1209.12 L1690.31 1209.12 L1689.72 1209.12 L1689.13 1209.12 L1688.55 1209.12 L1687.96 1209.12 L1687.37 1209.12 L1686.79 1209.12 L1686.2 1209.12 L1685.62 1209.12 L1685.03 1209.12 L1684.44 1209.12 L1683.86 1209.12 L1683.27 1209.12 L1682.68 1209.12 L1682.1 1209.12 L1681.51 1209.12 L1680.92 1209.12 L1680.34 1209.12 L1679.75 1209.12 L1679.17 1209.12 L1678.58 1209.12 L1677.99 1209.12 L1677.41 1209.12 L1676.82 1209.12 L1676.23 1209.12 L1675.65 1209.12 L1675.06 1209.12 L1674.47 1209.12 L1673.89 1209.12 L1673.3 1209.12 L1672.71 1209.12 L1672.13 1209.12 L1671.54 1209.12 L1670.96 1209.12 L1670.37 1209.12 L1669.78 1209.12 L1669.2 1209.12 L1668.61 1209.12 L1668.02 1209.12 L1667.44 1209.12 L1666.85 1209.12 L1666.26 1209.12 L1665.68 1209.12 L1665.09 1209.12 L1664.5 1209.12 L1663.92 1209.12 L1663.33 1209.12 L1662.75 1209.12 L1662.16 1209.12 L1661.57 1209.12 L1660.99 1209.12 L1660.4 1209.12 L1659.81 1209.12 L1659.23 1209.12 L1658.64 1209.12 L1658.05 1209.12 L1657.47 1209.12 L1656.88 1209.12 L1656.29 1209.12 L1655.71 1209.12 L1655.12 1209.12 L1654.54 1209.12 L1653.95 1209.12 L1653.36 1209.12 L1652.78 1209.12 L1652.19 1209.12 L1651.6 1209.12 L1651.02 1209.12 L1650.43 1209.12 L1649.84 1209.12 L1649.26 1209.12 L1648.67 1209.12 L1648.09 1209.12 L1647.5 1209.12 L1646.91 1209.12 L1646.33 1209.12 L1645.74 1209.12 L1645.15 1209.12 L1644.57 1209.12 L1643.98 1209.12 L1643.39 1209.12 L1642.81 1209.12 L1642.22 1209.12 L1641.63 1209.12 L1641.05 1209.12 L1640.46 1209.12 L1639.88 1209.12 L1639.29 1209.12 L1638.7 1209.12 L1638.12 1209.12 L1637.53 1209.12 L1636.94 1209.12 L1636.36 1209.12 L1635.77 1209.12 L1635.18 1209.12 L1634.6 1209.12 L1634.01 1209.12 L1633.42 1209.12 L1632.84 1209.12 L1632.25 1209.12 L1631.67 1209.12 L1631.08 1209.12 L1630.49 1209.12 L1629.91 1209.12 L1629.32 1209.12 L1628.73 1209.12 L1628.15 1209.12 L1627.56 1209.12 L1626.97 1209.12 L1626.39 1209.12 L1625.8 1209.12 L1625.22 1209.12 L1624.63 1209.12 L1624.04 1209.12 L1623.46 1209.12 L1622.87 1209.12 L1622.28 1209.12 L1621.7 1209.12 L1621.11 1209.12 L1620.52 1209.12 L1619.94 1209.12 L1619.35 1209.12 L1618.76 1209.12 L1618.18 1209.12 L1617.59 1209.12 L1617.01 1209.12 L1616.42 1209.12 L1615.83 1209.12 L1615.25 1209.12 L1614.66 1209.12 L1614.07 1209.12 L1613.49 1209.12 L1612.9 1209.12 L1612.31 1209.12 L1611.73 1209.12 L1611.14 1209.12 L1610.55 1209.12 L1609.97 1209.12 L1609.38 1209.12 L1608.8 1209.12 L1608.21 1209.12 L1607.62 1209.12 L1607.04 1209.12 L1606.45 1209.12 L1605.86 1209.12 L1605.28 1209.12 L1604.69 1209.12 L1604.1 1209.12 L1603.52 1209.12 L1602.93 1209.12 L1602.34 1209.12 L1601.76 1209.12 L1601.17 1209.12 L1600.59 1209.12 L1600 1209.12 L1599.41 1209.12 L1598.83 1209.12 L1598.24 1209.12 L1597.65 1209.12 L1597.07 1209.12 L1596.48 1209.12 L1595.89 1209.12 L1595.31 1209.12 L1594.72 1209.12 L1594.14 1209.12 L1593.55 1209.12 L1592.96 1209.12 L1592.38 1209.12 L1591.79 1209.12 L1591.2 1209.12 L1590.62 1209.12 L1590.03 1209.12 L1589.44 1209.12 L1588.86 1209.12 L1588.27 1209.12 L1587.68 1209.12 L1587.1 1209.12 L1586.51 1209.12 L1585.93 1209.12 L1585.34 1209.12 L1584.75 1209.12 L1584.17 1209.12 L1583.58 1209.12 L1582.99 1209.12 L1582.41 1209.12 L1581.82 1209.12 L1581.23 1209.12 L1580.65 1209.12 L1580.06 1209.12 L1579.47 1209.12 L1578.89 1209.12 L1578.3 1209.12 L1577.72 1209.12 L1577.13 1209.12 L1576.54 1209.12 L1575.96 1209.12 L1575.37 1209.12 L1574.78 1209.12 L1574.2 1209.12 L1573.61 1209.12 L1573.02 1209.12 L1572.44 1209.12 L1571.85 1209.12 L1571.27 1209.12 L1570.68 1209.12 L1570.09 1209.12 L1569.51 1209.12 L1568.92 1209.12 L1568.33 1209.12 L1567.75 1209.12 L1567.16 1209.12 L1566.57 1209.12 L1565.99 1209.12 L1565.4 1209.12 L1564.81 1209.12 L1564.23 1209.12 L1563.64 1209.12 L1563.06 1209.12 L1562.47 1209.12 L1561.88 1209.12 L1561.3 1209.12 L1560.71 1209.12 L1560.12 1209.12 L1559.54 1209.12 L1558.95 1209.12 L1558.36 1209.12 L1557.78 1209.12 L1557.19 1209.12 L1556.6 1209.12 L1556.02 1209.12 L1555.43 1209.12 L1554.85 1209.12 L1554.26 1209.12 L1553.67 1209.12 L1553.09 1209.12 L1552.5 1209.12 L1551.91 1209.12 L1551.33 1209.12 L1550.74 1209.12 L1550.15 1209.12 L1549.57 1209.12 L1548.98 1209.12 L1548.4 1209.12 L1547.81 1209.12 L1547.22 1209.12 L1546.64 1209.12 L1546.05 1209.12 L1545.46 1209.12 L1544.88 1209.12 L1544.29 1209.12 L1543.7 1209.12 L1543.12 1209.12 L1542.53 1209.12 L1541.94 1209.12 L1541.36 1209.12 L1540.77 1209.12 L1540.19 1209.12 L1539.6 1209.12 L1539.01 1209.12 L1538.43 1209.12 L1537.84 1209.12 L1537.25 1209.12 L1536.67 1209.12 L1536.08 1209.12 L1535.49 1209.12 L1534.91 1209.12 L1534.32 1209.12 L1533.73 1209.12 L1533.15 1209.12 L1532.56 1209.12 L1531.98 1209.12 L1531.39 1209.12 L1530.8 1209.12 L1530.22 1209.12 L1529.63 1209.12 L1529.04 1209.12 L1528.46 1209.12 L1527.87 1209.12 L1527.28 1209.12 L1526.7 1209.12 L1526.11 1209.12 L1525.52 1209.12 L1524.94 1209.12 L1524.35 1209.12 L1523.77 1209.12 L1523.18 1209.12 L1522.59 1209.12 L1522.01 1209.12 L1521.42 1209.12 L1520.83 1209.12 L1520.25 1209.12 L1519.66 1209.12 L1519.07 1209.12 L1518.49 1209.12 L1517.9 1209.12 L1517.32 1209.12 L1516.73 1209.12 L1516.14 1209.12 L1515.56 1209.12 L1514.97 1209.12 L1514.38 1209.12 L1513.8 1209.12 L1513.21 1209.12 L1512.62 1209.12 L1512.04 1209.12 L1511.45 1209.12 L1510.86 1209.12 L1510.28 1209.12 L1509.69 1209.12 L1509.11 1209.12 L1508.52 1209.12 L1507.93 1209.12 L1507.35 1209.12 L1506.76 1209.12 L1506.17 1209.12 L1505.59 1209.12 L1505 1209.12 L1504.41 1209.12 L1503.83 1209.12 L1503.24 1209.12 L1502.65 1209.12 L1502.07 1209.12 L1501.48 1209.12 L1500.9 1209.12 L1500.31 1209.12 L1499.72 1209.12 L1499.14 1209.12 L1498.55 1209.12 L1497.96 1209.12 L1497.38 1209.12 L1496.79 1209.12 L1496.2 1209.12 L1495.62 1209.12 L1495.03 1209.12 L1494.45 1209.12 L1493.86 1209.12 L1493.27 1209.12 L1492.69 1209.12 L1492.1 1209.12 L1491.51 1209.12 L1490.93 1209.12 L1490.34 1209.12 L1489.75 1209.12 L1489.17 1209.12 L1488.58 1209.12 L1487.99 1209.12 L1487.41 1209.12 L1486.82 1209.12 L1486.24 1209.12 L1485.65 1209.12 L1485.06 1209.12 L1484.48 1209.12 L1483.89 1209.12 L1483.3 1209.12 L1482.72 1209.12 L1482.13 1209.12 L1481.54 1209.12 L1480.96 1209.12 L1480.37 1209.12 L1479.78 1209.12 L1479.2 1209.12 L1478.61 1209.12 L1478.03 1209.12 L1477.44 1209.12 L1476.85 1209.12 L1476.27 1209.12 L1475.68 1209.12 L1475.09 1209.12 L1474.51 1209.12 L1473.92 1209.12 L1473.33 1209.12 L1472.75 1209.12 L1472.16 1209.12 L1471.57 1209.12 L1470.99 1209.12 L1470.4 1209.12 L1469.82 1209.12 L1469.23 1209.12 L1468.64 1209.12 L1468.06 1209.12 L1467.47 1209.12 L1466.88 1209.12 L1466.3 1209.12 L1465.71 1209.12 L1465.12 1209.12 L1464.54 1209.12 L1463.95 1209.12 L1463.37 1209.12 L1462.78 1209.12 L1462.19 1209.12 L1461.61 1209.12 L1461.02 1209.12 L1460.43 1209.12 L1459.85 1209.12 L1459.26 1209.12 L1458.67 1209.12 L1458.09 1209.12 L1457.5 1209.12 L1456.91 1209.12 L1456.33 1209.12 L1455.74 1209.12 L1455.16 1209.12 L1454.57 1209.12 L1453.98 1209.12 L1453.4 1209.12 L1452.81 1209.12 L1452.22 1209.12 L1451.64 1209.12 L1451.05 1209.12 L1450.46 1209.12 L1449.88 1209.12 L1449.29 1209.12 L1448.7 1209.12 L1448.12 1209.12 L1447.53 1209.12 L1446.95 1209.12 L1446.36 1209.12 L1445.77 1209.12 L1445.19 1209.12 L1444.6 1209.12 L1444.01 1209.12 L1443.43 1209.12 L1442.84 1209.12 L1442.25 1209.12 L1441.67 1209.12 L1441.08 1209.12 L1440.5 1209.12 L1439.91 1209.12 L1439.32 1209.12 L1438.74 1209.12 L1438.15 1209.12 L1437.56 1209.12 L1436.98 1209.12 L1436.39 1209.12 L1435.8 1209.12 L1435.22 1209.12 L1434.63 1209.12 L1434.04 1209.12 L1433.46 1209.12 L1432.87 1209.12 L1432.29 1209.12 L1431.7 1209.12 L1431.11 1209.12 L1430.53 1209.12 L1429.94 1209.12 L1429.35 1209.12 L1428.77 1209.12 L1428.18 1209.12 L1427.59 1209.12 L1427.01 1209.12 L1426.42 1209.12 L1425.83 1209.12 L1425.25 1209.12 L1424.66 1209.12 L1424.08 1209.12 L1423.49 1209.12 L1422.9 1209.12 L1422.32 1209.12 L1421.73 1209.12 L1421.14 1209.12 L1420.56 1209.12 L1419.97 1209.12 L1419.38 1209.12 L1418.8 1209.12 L1418.21 1209.12 L1417.63 1209.12 L1417.04 1209.12 L1416.45 1209.12 L1415.87 1209.12 L1415.28 1209.12 L1414.69 1209.12 L1414.11 1209.12 L1413.52 1209.12 L1412.93 1209.12 L1412.35 1209.12 L1411.76 1209.12 L1411.17 1209.12 L1410.59 1209.12 L1410 1209.12 L1409.42 1209.12 L1408.83 1209.12 L1408.24 1209.12 L1407.66 1209.12 L1407.07 1209.12 L1406.48 1209.12 L1405.9 1209.12 L1405.31 1209.12 L1404.72 1209.12 L1404.14 1209.12 L1403.55 1209.12 L1402.96 1209.12 L1402.38 1209.12 L1401.79 1209.12 L1401.21 1209.12 L1400.62 1209.12 L1400.03 1209.12 L1399.45 1209.12 L1398.86 1209.12 L1398.27 1209.12 L1397.69 1209.12 L1397.1 1209.12 L1396.51 1209.12 L1395.93 1209.12 L1395.34 1209.12 L1394.75 1209.12 L1394.17 1209.12 L1393.58 1209.12 L1393 1209.12 L1392.41 1209.12 L1391.82 1209.12 L1391.24 1209.12 L1390.65 1209.12 L1390.06 1209.12 L1389.48 1209.12 L1388.89 1209.12 L1388.3 1209.12 L1387.72 1209.12 L1387.13 1209.12 L1386.55 1209.12 L1385.96 1209.12 L1385.37 1209.12 L1384.79 1209.12 L1384.2 1209.12 L1383.61 1209.12 L1383.03 1209.12 L1382.44 1209.12 L1381.85 1209.12 L1381.27 1209.12 L1380.68 1209.12 L1380.09 1209.12 L1379.51 1209.12 L1378.92 1209.12 L1378.34 1209.12 L1377.75 1209.12 L1377.16 1209.12 L1376.58 1209.12 L1375.99 1209.12 L1375.4 1209.12 L1374.82 1209.12 L1374.23 1209.12 L1373.64 1209.12 L1373.06 1209.12 L1372.47 1209.12 L1371.88 1209.12 L1371.3 1209.12 L1370.71 1209.12 L1370.13 1209.12 L1369.54 1209.12 L1368.95 1209.12 L1368.37 1209.12 L1367.78 1209.12 L1367.19 1209.12 L1366.61 1209.12 L1366.02 1209.12 L1365.43 1209.12 L1364.85 1209.12 L1364.26 1209.12 L1363.68 1209.12 L1363.09 1209.12 L1362.5 1209.12 L1361.92 1209.12 L1361.33 1209.12 L1360.74 1209.12 L1360.16 1209.12 L1359.57 1209.12 L1358.98 1209.12 L1358.4 1209.12 L1357.81 1209.12 L1357.22 1209.12 L1356.64 1209.12 L1356.05 1209.12 L1355.47 1209.12 L1354.88 1209.12 L1354.29 1209.12 L1353.71 1209.12 L1353.12 1209.12 L1352.53 1209.12 L1351.95 1209.12 L1351.36 1209.12 L1350.77 1209.12 L1350.19 1209.12 L1349.6 1209.12 L1349.01 1209.12 L1348.43 1209.12 L1347.84 1209.12 L1347.26 1209.12 L1346.67 1209.12 L1346.08 1209.12 L1345.5 1209.12 L1344.91 1209.12 L1344.32 1209.12 L1343.74 1209.12 L1343.15 1209.12 L1342.56 1209.12 L1341.98 1209.12 L1341.39 1209.12 L1340.8 1209.12 L1340.22 1209.12 L1339.63 1209.12 L1339.05 1209.12 L1338.46 1209.12 L1337.87 1209.12 L1337.29 1209.12 L1336.7 1209.12 L1336.11 1209.12 L1335.53 1209.12 L1334.94 1209.12 L1334.35 1209.12 L1333.77 1209.12 L1333.18 1209.12 L1332.6 1209.12 L1332.01 1209.12 L1331.42 1209.12 L1330.84 1209.12 L1330.25 1209.12 L1329.66 1209.12 L1329.08 1209.12 L1328.49 1209.12 L1327.9 1209.12 L1327.32 1209.12 L1326.73 1209.12 L1326.14 1209.12 L1325.56 1209.12 L1324.97 1209.12 L1324.39 1209.12 L1323.8 1209.12 L1323.21 1209.12 L1322.63 1209.12 L1322.04 1209.12 L1321.45 1209.12 L1320.87 1209.12 L1320.28 1209.12 L1319.69 1209.12 L1319.11 1209.12 L1318.52 1209.12 L1317.93 1209.12 L1317.35 1209.12 L1316.76 1209.12 L1316.18 1209.12 L1315.59 1209.12 L1315 1209.12 L1314.42 1209.12 L1313.83 1209.12 L1313.24 1209.12 L1312.66 1209.12 L1312.07 1209.12 L1311.48 1209.12 L1310.9 1209.12 L1310.31 1209.12 L1309.73 1209.12 L1309.14 1209.12 L1308.55 1209.12 L1307.97 1209.12 L1307.38 1209.12 L1306.79 1209.12 L1306.21 1209.12 L1305.62 1209.12 L1305.03 1209.12 L1304.45 1209.12 L1303.86 1209.12 L1303.27 1209.12 L1302.69 1209.12 L1302.1 1209.12 L1301.52 1209.12 L1300.93 1209.12 L1300.34 1209.12 L1299.76 1209.12 L1299.17 1209.12 L1298.58 1209.12 L1298 1209.12 L1297.41 1209.12 L1296.82 1209.12 L1296.24 1209.12 L1295.65 1209.12 L1295.06 1209.12 L1294.48 1209.12 L1293.89 1209.12 L1293.31 1209.12 L1292.72 1209.12 L1292.13 1209.12 L1291.55 1209.12 L1290.96 1209.12 L1290.37 1209.12 L1289.79 1209.12 L1289.2 1209.12 L1288.61 1209.12 L1288.03 1209.12 L1287.44 1209.12 L1286.86 1209.12 L1286.27 1209.12 L1285.68 1209.12 L1285.1 1209.12 L1284.51 1209.12 L1283.92 1209.12 L1283.34 1209.12 L1282.75 1209.12 L1282.16 1209.12 L1281.58 1209.12 L1280.99 1209.12 L1280.4 1209.12 L1279.82 1209.12 L1279.23 1209.12 L1278.65 1209.12 L1278.06 1209.12 L1277.47 1209.12 L1276.89 1209.12 L1276.3 1209.12 L1275.71 1209.12 L1275.13 1209.12 L1274.54 1209.12 L1273.95 1209.12 L1273.37 1209.12 L1272.78 1209.12 L1272.19 1209.12 L1271.61 1209.12 L1271.02 1209.12 L1270.44 1209.12 L1269.85 1209.12 L1269.26 1209.12 L1268.68 1209.12 L1268.09 1209.12 L1267.5 1209.12 L1266.92 1209.12 L1266.33 1209.12 L1265.74 1209.12 L1265.16 1209.12 L1264.57 1209.12 L1263.98 1209.12 L1263.4 1209.12 L1262.81 1209.12 L1262.23 1209.12 L1261.64 1209.12 L1261.05 1209.12 L1260.47 1209.12 L1259.88 1209.12 L1259.29 1209.12 L1258.71 1209.12 L1258.12 1209.12 L1257.53 1209.12 L1256.95 1209.12 L1256.36 1209.12 L1255.78 1209.12 L1255.19 1209.12 L1254.6 1209.12 L1254.02 1209.12 L1253.43 1209.12 L1252.84 1209.12 L1252.26 1209.12 L1251.67 1209.12 L1251.08 1209.12 L1250.5 1209.12 L1249.91 1209.12 L1249.32 1209.12 L1248.74 1209.12 L1248.15 1209.12 L1247.57 1209.12 L1246.98 1209.12 L1246.39 1209.12 L1245.81 1209.12 L1245.22 1209.12 L1244.63 1209.12 L1244.05 1209.12 L1243.46 1209.12 L1242.87 1209.12 L1242.29 1209.12 L1241.7 1209.12 L1241.11 1209.12 L1240.53 1209.12 L1239.94 1209.12 L1239.36 1209.12 L1238.77 1209.12 L1238.18 1209.12 L1237.6 1209.12 L1237.01 1209.12 L1236.42 1209.12 L1235.84 1209.12 L1235.25 1209.12 L1234.66 1209.12 L1234.08 1209.12 L1233.49 1209.12 L1232.91 1209.12 L1232.32 1209.12 L1231.73 1209.12 L1231.15 1209.12 L1230.56 1209.12 L1229.97 1209.12 L1229.39 1209.12 L1228.8 1209.12 L1228.21 1209.12 L1227.63 1209.12 L1227.04 1209.12 L1226.45 1209.12 L1225.87 1209.12 L1225.28 1209.12 L1224.7 1209.12 L1224.11 1209.12 L1223.52 1209.12 L1222.94 1209.12 L1222.35 1209.12 L1221.76 1209.12 L1221.18 1209.12 L1220.59 1209.12 L1220 1209.12 L1219.42 1209.12 L1218.83 1209.12 L1218.24 1209.12 L1217.66 1209.12 L1217.07 1209.12 L1216.49 1209.12 L1215.9 1209.12 L1215.31 1209.12 L1214.73 1209.12 L1214.14 1209.12 L1213.55 1209.12 L1212.97 1209.12 L1212.38 1209.12 L1211.79 1209.12 L1211.21 1209.12 L1210.62 1209.12 L1210.03 1209.12 L1209.45 1209.12 L1208.86 1209.12 L1208.28 1209.12 L1207.69 1209.12 L1207.1 1209.12 L1206.52 1209.12 L1205.93 1209.12 L1205.34 1209.12 L1204.76 1209.12 L1204.17 1209.12 L1203.58 1209.12 L1203 1209.12 L1202.41 1209.12 L1201.83 1209.12 L1201.24 1209.12 L1200.65 1209.12 L1200.07 1209.12 L1199.48 1209.12 L1198.89 1209.12 L1198.31 1209.12 L1197.72 1209.12 L1197.13 1209.12 L1196.55 1209.12 L1195.96 1209.12 L1195.37 1209.12 L1194.79 1209.12 L1194.2 1209.12 L1193.62 1209.12 L1193.03 1209.12 L1192.44 1209.12 L1191.86 1209.12 L1191.27 1209.12 L1190.68 1209.12 L1190.1 1209.12 L1189.51 1209.12 L1188.92 1209.12 L1188.34 1209.12 L1187.75 1209.12 L1187.16 1209.12 L1186.58 1209.12 L1185.99 1209.12 L1185.41 1209.12 L1184.82 1209.12 L1184.23 1209.12 L1183.65 1209.12 L1183.06 1209.12 L1182.47 1209.12 L1181.89 1209.12 L1181.3 1209.12 L1180.71 1209.12 L1180.13 1209.12 L1179.54 1209.12 L1178.96 1209.12 L1178.37 1209.12 L1177.78 1209.12 L1177.2 1209.12 L1176.61 1209.12 L1176.02 1209.12 L1175.44 1209.12 L1174.85 1209.12 L1174.26 1209.12 L1173.68 1209.12 L1173.09 1209.12 L1172.5 1209.12 L1171.92 1209.12 L1171.33 1209.12 L1170.75 1209.12 L1170.16 1209.12 L1169.57 1209.12 L1168.99 1209.12 L1168.4 1209.12 L1167.81 1209.12 L1167.23 1209.12 L1166.64 1209.12 L1166.05 1209.12 L1165.47 1209.12 L1164.88 1209.12 L1164.29 1209.12 L1163.71 1209.12 L1163.12 1209.12 L1162.54 1209.12 L1161.95 1209.12 L1161.36 1209.12 L1160.78 1209.12 L1160.19 1209.12 L1159.6 1209.12 L1159.02 1209.12 L1158.43 1209.12 L1157.84 1209.12 L1157.26 1209.12 L1156.67 1209.12 L1156.09 1209.12 L1155.5 1209.12 L1154.91 1209.12 L1154.33 1209.12 L1153.74 1209.12 L1153.15 1209.12 L1152.57 1209.12 L1151.98 1209.12 L1151.39 1209.12 L1150.81 1209.12 L1150.22 1209.12 L1149.63 1209.12 L1149.05 1209.12 L1148.46 1209.12 L1147.88 1209.12 L1147.29 1209.12 L1146.7 1209.12 L1146.12 1209.12 L1145.53 1209.12 L1144.94 1209.12 L1144.36 1209.12 L1143.77 1209.12 L1143.18 1209.12 L1142.6 1209.12 L1142.01 1209.12 L1141.42 1209.12 L1140.84 1209.12 L1140.25 1209.12 L1139.67 1209.12 L1139.08 1209.12 L1138.49 1209.12 L1137.91 1209.12 L1137.32 1209.12 L1136.73 1209.12 L1136.15 1209.12 L1135.56 1209.12 L1134.97 1209.12 L1134.39 1209.12 L1133.8 1209.12 L1133.21 1209.12 L1132.63 1209.12 L1132.04 1209.12 L1131.46 1209.12 L1130.87 1209.12 L1130.28 1209.12 L1129.7 1209.12 L1129.11 1209.12 L1128.52 1209.12 L1127.94 1209.12 L1127.35 1209.12 L1126.76 1209.12 L1126.18 1209.12 L1125.59 1209.12 L1125.01 1209.12 L1124.42 1209.12 L1123.83 1209.12 L1123.25 1209.12 L1122.66 1209.12 L1122.07 1209.12 L1121.49 1209.12 L1120.9 1209.12 L1120.31 1209.12 L1119.73 1209.12 L1119.14 1209.12 L1118.55 1209.12 L1117.97 1209.12 L1117.38 1209.12 L1116.8 1209.12 L1116.21 1209.12 L1115.62 1209.12 L1115.04 1209.12 L1114.45 1209.12 L1113.86 1209.12 L1113.28 1209.12 L1112.69 1209.12 L1112.1 1209.12 L1111.52 1209.12 L1110.93 1209.12 L1110.34 1209.12 L1109.76 1209.12 L1109.17 1209.12 L1108.59 1209.12 L1108 1209.12 L1107.41 1209.12 L1106.83 1209.12 L1106.24 1209.12 L1105.65 1209.12 L1105.07 1209.12 L1104.48 1209.12 L1103.89 1209.12 L1103.31 1209.12 L1102.72 1209.12 L1102.14 1209.12 L1101.55 1209.12 L1100.96 1209.12 L1100.38 1209.12 L1099.79 1209.12 L1099.2 1209.12 L1098.62 1209.12 L1098.03 1209.12 L1097.44 1209.12 L1096.86 1209.12 L1096.27 1209.12 L1095.68 1209.12 L1095.1 1209.12 L1094.51 1209.12 L1093.93 1209.12 L1093.34 1209.12 L1092.75 1209.12 L1092.17 1209.12 L1091.58 1209.12 L1090.99 1209.12 L1090.41 1209.12 L1089.82 1209.12 L1089.23 1209.12 L1088.65 1209.12 L1088.06 1209.12 L1087.47 1209.12 L1086.89 1209.12 L1086.3 1209.12 L1085.72 1209.12 L1085.13 1209.12 L1084.54 1209.12 L1083.96 1209.12 L1083.37 1209.12 L1082.78 1209.12 L1082.2 1209.12 L1081.61 1209.12 L1081.02 1209.12 L1080.44 1209.12 L1079.85 1209.12 L1079.26 1209.12 L1078.68 1209.12 L1078.09 1209.12 L1077.51 1209.12 L1076.92 1209.12 L1076.33 1209.12 L1075.75 1209.12 L1075.16 1209.12 L1074.57 1209.12 L1073.99 1209.12 L1073.4 1209.12 L1072.81 1209.12 L1072.23 1209.12 L1071.64 1209.12 L1071.06 1209.12 L1070.47 1209.12 L1069.88 1209.12 L1069.3 1209.12 L1068.71 1209.12 L1068.12 1209.12 L1067.54 1209.12 L1066.95 1209.12 L1066.36 1209.12 L1065.78 1209.12 L1065.19 1209.12 L1064.6 1209.12 L1064.02 1209.12 L1063.43 1209.12 L1062.85 1209.12 L1062.26 1209.12 L1061.67 1209.12 L1061.09 1209.12 L1060.5 1209.12 L1059.91 1209.12 L1059.33 1209.12 L1058.74 1209.12 L1058.15 1209.12 L1057.57 1209.12 L1056.98 1209.12 L1056.39 1209.12 L1055.81 1209.12 L1055.22 1209.12 L1054.64 1209.12 L1054.05 1209.12 L1053.46 1209.12 L1052.88 1209.12 L1052.29 1209.12 L1051.7 1209.12 L1051.12 1209.12 L1050.53 1209.12 L1049.94 1209.12 L1049.36 1209.12 L1048.77 1209.12 L1048.19 1209.12 L1047.6 1209.12 L1047.01 1209.12 L1046.43 1209.12 L1045.84 1209.12 L1045.25 1209.12 L1044.67 1209.12 L1044.08 1209.12 L1043.49 1209.12 L1042.91 1209.12 L1042.32 1209.12 L1041.73 1209.12 L1041.15 1209.12 L1040.56 1209.12 L1039.98 1209.12 L1039.39 1209.12 L1038.8 1209.12 L1038.22 1209.12 L1037.63 1209.12 L1037.04 1209.12 L1036.46 1209.12 L1035.87 1209.12 L1035.28 1209.12 L1034.7 1209.12 L1034.11 1209.12 L1033.52 1209.12 L1032.94 1209.12 L1032.35 1209.12 L1031.77 1209.12 L1031.18 1209.12 L1030.59 1209.12 L1030.01 1209.12 L1029.42 1209.12 L1028.83 1209.12 L1028.25 1209.12 L1027.66 1209.12 L1027.07 1209.12 L1026.49 1209.12 L1025.9 1209.12 L1025.32 1209.12 L1024.73 1209.12 L1024.14 1209.12 L1023.56 1209.12 L1022.97 1209.12 L1022.38 1209.12 L1021.8 1209.12 L1021.21 1209.12 L1020.62 1209.12 L1020.04 1209.12 L1019.45 1209.12 L1018.86 1209.12 L1018.28 1209.12 L1017.69 1209.12 L1017.11 1209.12 L1016.52 1209.12 L1015.93 1209.12 L1015.35 1209.12 L1014.76 1209.12 L1014.17 1209.12 L1013.59 1209.12 L1013 1209.12 L1012.41 1209.12 L1011.83 1209.12 L1011.24 1209.12 L1010.65 1209.12 L1010.07 1209.12 L1009.48 1209.12 L1008.9 1209.12 L1008.31 1209.12 L1007.72 1209.12 L1007.14 1209.12 L1006.55 1209.12 L1005.96 1209.12 L1005.38 1209.12 L1004.79 1209.12 L1004.2 1209.12 L1003.62 1209.12 L1003.03 1209.12 L1002.44 1209.12 L1001.86 1209.12 L1001.27 1209.12 L1000.69 1209.12 L1000.1 1209.12 L999.513 1209.12 L998.926 1209.12 L998.34 1209.12 L997.754 1209.12 L997.167 1209.12 L996.581 1209.12 L995.994 1209.12 L995.408 1209.12 L994.822 1209.12 L994.235 1209.12 L993.649 1209.12 L993.062 1209.12 L992.476 1209.12 L991.889 1209.12 L991.303 1209.12 L990.717 1209.12 L990.13 1209.12 L989.544 1209.12 L988.957 1209.12 L988.371 1209.12 L987.785 1209.12 L987.198 1209.12 L986.612 1209.12 L986.025 1209.12  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.5 986.612,1209.5 987.198,1209.5 987.785,1209.5 988.371,1209.5 988.957,1209.5 989.544,1209.5 990.13,1209.5 990.717,1209.5 991.303,1209.5 991.889,1209.5 992.476,1209.5 993.062,1209.5 993.649,1209.5 994.235,1209.5 994.822,1209.5 995.408,1209.5 995.994,1209.5 996.581,1209.5 997.167,1209.5 997.754,1209.5 998.34,1209.5 998.926,1209.5 999.513,1209.5 1000.1,1209.5 1000.69,1209.5 1001.27,1209.5 1001.86,1209.5 1002.44,1209.5 1003.03,1209.5 1003.62,1209.5 1004.2,1209.5 1004.79,1209.5 1005.38,1209.5 1005.96,1209.5 1006.55,1209.5 1007.14,1209.5 1007.72,1209.5 1008.31,1209.5 1008.9,1209.5 1009.48,1209.5 1010.07,1209.5 1010.65,1209.5 1011.24,1209.5 1011.83,1209.5 1012.41,1209.5 1013,1209.5 1013.59,1209.5 1014.17,1209.5 1014.76,1209.5 1015.35,1209.5 1015.93,1209.5 1016.52,1209.5 1017.11,1209.5 1017.69,1209.5 1018.28,1209.5 1018.86,1209.5 1019.45,1209.5 1020.04,1209.5 1020.62,1209.5 1021.21,1209.5 1021.8,1209.5 1022.38,1209.5 1022.97,1209.5 1023.56,1209.5 1024.14,1209.5 1024.73,1209.5 1025.32,1209.5 1025.9,1209.5 1026.49,1209.5 1027.07,1209.5 1027.66,1209.5 1028.25,1209.5 1028.83,1209.5 1029.42,1209.5 1030.01,1209.5 1030.59,1209.5 1031.18,1209.5 1031.77,1209.5 1032.35,1209.5 1032.94,1209.5 1033.52,1209.5 1034.11,1209.5 1034.7,1209.5 1035.28,1209.5 1035.87,1209.5 1036.46,1209.5 1037.04,1209.5 1037.63,1209.5 1038.22,1209.5 1038.8,1209.5 1039.39,1209.5 1039.98,1209.5 1040.56,1209.5 1041.15,1209.5 1041.73,1209.5 1042.32,1209.5 1042.91,1209.5 1043.49,1209.5 1044.08,1209.5 1044.67,1209.5 1045.25,1209.5 1045.84,1209.5 1046.43,1209.5 1047.01,1209.5 1047.6,1209.5 1048.19,1209.5 1048.77,1209.5 1049.36,1209.5 1049.94,1209.5 1050.53,1209.5 1051.12,1209.5 1051.7,1209.5 1052.29,1209.5 1052.88,1209.5 1053.46,1209.5 1054.05,1209.5 1054.64,1209.5 1055.22,1209.5 1055.81,1209.5 1056.39,1209.5 1056.98,1209.5 1057.57,1209.5 1058.15,1209.5 1058.74,1209.5 1059.33,1209.5 1059.91,1209.5 1060.5,1209.5 1061.09,1209.5 1061.67,1209.5 1062.26,1209.5 1062.85,1209.5 1063.43,1209.5 1064.02,1209.5 1064.6,1209.5 1065.19,1209.5 1065.78,1209.5 1066.36,1209.5 1066.95,1209.5 1067.54,1209.5 1068.12,1209.5 1068.71,1209.5 1069.3,1209.5 1069.88,1209.5 1070.47,1209.5 1071.06,1209.5 1071.64,1209.5 1072.23,1209.5 1072.81,1209.5 1073.4,1209.5 1073.99,1209.5 1074.57,1209.5 1075.16,1209.5 1075.75,1209.5 1076.33,1209.5 1076.92,1209.5 1077.51,1209.5 1078.09,1209.5 1078.68,1209.5 1079.26,1209.5 1079.85,1209.5 1080.44,1209.5 1081.02,1209.5 1081.61,1209.5 1082.2,1209.5 1082.78,1209.5 1083.37,1209.5 1083.96,1209.5 1084.54,1209.5 1085.13,1209.5 1085.72,1209.5 1086.3,1209.5 1086.89,1209.5 1087.47,1209.5 1088.06,1209.5 1088.65,1209.5 1089.23,1209.5 1089.82,1209.5 1090.41,1209.5 1090.99,1209.5 1091.58,1209.5 1092.17,1209.5 1092.75,1209.5 1093.34,1209.5 1093.93,1209.5 1094.51,1209.5 1095.1,1209.5 1095.68,1209.5 1096.27,1209.5 1096.86,1209.5 1097.44,1209.5 1098.03,1209.5 1098.62,1209.5 1099.2,1209.5 1099.79,1209.5 1100.38,1209.5 1100.96,1209.5 1101.55,1209.5 1102.14,1209.5 1102.72,1209.5 1103.31,1209.5 1103.89,1209.5 1104.48,1209.5 1105.07,1209.5 1105.65,1209.5 1106.24,1209.5 1106.83,1209.5 1107.41,1209.5 1108,1209.5 1108.59,1209.5 1109.17,1209.5 1109.76,1209.5 1110.34,1209.5 1110.93,1209.5 1111.52,1209.5 1112.1,1209.5 1112.69,1209.5 1113.28,1209.5 1113.86,1209.5 1114.45,1209.5 1115.04,1209.5 1115.62,1209.5 1116.21,1209.5 1116.8,1209.5 1117.38,1209.5 1117.97,1209.5 1118.55,1209.5 1119.14,1209.5 1119.73,1209.5 1120.31,1209.5 1120.9,1209.5 1121.49,1209.5 1122.07,1209.5 1122.66,1209.5 1123.25,1209.5 1123.83,1209.5 1124.42,1209.5 1125.01,1209.5 1125.59,1209.5 1126.18,1209.5 1126.76,1209.5 1127.35,1209.5 1127.94,1209.5 1128.52,1209.5 1129.11,1209.5 1129.7,1209.5 1130.28,1209.5 1130.87,1209.5 1131.46,1209.5 1132.04,1209.5 1132.63,1209.5 1133.21,1209.5 1133.8,1209.5 1134.39,1209.5 1134.97,1209.5 1135.56,1209.5 1136.15,1209.5 1136.73,1209.5 1137.32,1209.5 1137.91,1209.5 1138.49,1209.5 1139.08,1209.5 1139.67,1209.5 1140.25,1209.5 1140.84,1209.5 1141.42,1209.5 1142.01,1209.5 1142.6,1209.5 1143.18,1209.5 1143.77,1209.5 1144.36,1209.5 1144.94,1209.5 1145.53,1209.5 1146.12,1209.5 1146.7,1209.5 1147.29,1209.5 1147.88,1209.5 1148.46,1209.5 1149.05,1209.5 1149.63,1209.5 1150.22,1209.5 1150.81,1209.5 1151.39,1209.5 1151.98,1209.5 1152.57,1209.5 1153.15,1209.5 1153.74,1209.5 1154.33,1209.5 1154.91,1209.5 1155.5,1209.5 1156.09,1209.5 1156.67,1209.5 1157.26,1209.5 1157.84,1209.5 1158.43,1209.5 1159.02,1209.5 1159.6,1209.5 1160.19,1209.5 1160.78,1209.5 1161.36,1209.5 1161.95,1209.5 1162.54,1209.5 1163.12,1209.5 1163.71,1209.5 1164.29,1209.5 1164.88,1209.5 1165.47,1209.5 1166.05,1209.5 1166.64,1209.5 1167.23,1209.5 1167.81,1209.5 1168.4,1209.5 1168.99,1209.5 1169.57,1209.5 1170.16,1209.5 1170.75,1209.5 1171.33,1209.5 1171.92,1209.5 1172.5,1209.5 1173.09,1209.5 1173.68,1209.5 1174.26,1209.5 1174.85,1209.5 1175.44,1209.5 1176.02,1209.5 1176.61,1209.5 1177.2,1209.5 1177.78,1209.5 1178.37,1209.5 1178.96,1209.5 1179.54,1209.5 1180.13,1209.5 1180.71,1209.5 1181.3,1209.5 1181.89,1209.5 1182.47,1209.5 1183.06,1209.5 1183.65,1209.5 1184.23,1209.5 1184.82,1209.5 1185.41,1209.5 1185.99,1209.5 1186.58,1209.5 1187.16,1209.5 1187.75,1209.5 1188.34,1209.5 1188.92,1209.5 1189.51,1209.5 1190.1,1209.5 1190.68,1209.5 1191.27,1209.5 1191.86,1209.5 1192.44,1209.5 1193.03,1209.5 1193.62,1209.5 1194.2,1209.5 1194.79,1209.5 1195.37,1209.5 1195.96,1209.5 1196.55,1209.5 1197.13,1209.5 1197.72,1209.5 1198.31,1209.5 1198.89,1209.5 1199.48,1209.5 1200.07,1209.5 1200.65,1209.5 1201.24,1209.5 1201.83,1209.5 1202.41,1209.5 1203,1209.5 1203.58,1209.5 1204.17,1209.5 1204.76,1209.5 1205.34,1209.5 1205.93,1209.5 1206.52,1209.5 1207.1,1209.5 1207.69,1209.5 1208.28,1209.5 1208.86,1209.5 1209.45,1209.5 1210.03,1209.5 1210.62,1209.5 1211.21,1209.5 1211.79,1209.5 1212.38,1209.5 1212.97,1209.5 1213.55,1209.5 1214.14,1209.5 1214.73,1209.5 1215.31,1209.5 1215.9,1209.5 1216.49,1209.5 1217.07,1209.5 1217.66,1209.5 1218.24,1209.5 1218.83,1209.5 1219.42,1209.5 1220,1209.5 1220.59,1209.5 1221.18,1209.5 1221.76,1209.5 1222.35,1209.5 1222.94,1209.5 1223.52,1209.5 1224.11,1209.5 1224.7,1209.5 1225.28,1209.5 1225.87,1209.5 1226.45,1209.5 1227.04,1209.5 1227.63,1209.5 1228.21,1209.5 1228.8,1209.5 1229.39,1209.5 1229.97,1209.5 1230.56,1209.5 1231.15,1209.5 1231.73,1209.5 1232.32,1209.5 1232.91,1209.5 1233.49,1209.5 1234.08,1209.5 1234.66,1209.5 1235.25,1209.5 1235.84,1209.5 1236.42,1209.5 1237.01,1209.5 1237.6,1209.5 1238.18,1209.5 1238.77,1209.5 1239.36,1209.5 1239.94,1209.5 1240.53,1209.5 1241.11,1209.5 1241.7,1209.5 1242.29,1209.5 1242.87,1209.5 1243.46,1209.5 1244.05,1209.5 1244.63,1209.5 1245.22,1209.5 1245.81,1209.5 1246.39,1209.5 1246.98,1209.5 1247.57,1209.5 1248.15,1209.5 1248.74,1209.5 1249.32,1209.5 1249.91,1209.5 1250.5,1209.5 1251.08,1209.5 1251.67,1209.5 1252.26,1209.5 1252.84,1209.5 1253.43,1209.5 1254.02,1209.5 1254.6,1209.5 1255.19,1209.5 1255.78,1209.5 1256.36,1209.5 1256.95,1209.5 1257.53,1209.5 1258.12,1209.5 1258.71,1209.5 1259.29,1209.5 1259.88,1209.5 1260.47,1209.5 1261.05,1209.5 1261.64,1209.5 1262.23,1209.5 1262.81,1209.5 1263.4,1209.5 1263.98,1209.5 1264.57,1209.5 1265.16,1209.5 1265.74,1209.5 1266.33,1209.5 1266.92,1209.5 1267.5,1209.5 1268.09,1209.5 1268.68,1209.5 1269.26,1209.5 1269.85,1209.5 1270.44,1209.5 1271.02,1209.5 1271.61,1209.5 1272.19,1209.5 1272.78,1209.5 1273.37,1209.5 1273.95,1209.5 1274.54,1209.5 1275.13,1209.5 1275.71,1209.5 1276.3,1209.5 1276.89,1209.5 1277.47,1209.5 1278.06,1209.5 1278.65,1209.5 1279.23,1209.5 1279.82,1209.5 1280.4,1209.5 1280.99,1209.5 1281.58,1209.5 1282.16,1209.5 1282.75,1209.5 1283.34,1209.5 1283.92,1209.5 1284.51,1209.5 1285.1,1209.5 1285.68,1209.5 1286.27,1209.5 1286.86,1209.5 1287.44,1209.5 1288.03,1209.5 1288.61,1209.5 1289.2,1209.5 1289.79,1209.5 1290.37,1209.5 1290.96,1209.5 1291.55,1209.5 1292.13,1209.5 1292.72,1209.5 1293.31,1209.5 1293.89,1209.5 1294.48,1209.5 1295.06,1209.5 1295.65,1209.5 1296.24,1209.5 1296.82,1209.5 1297.41,1209.5 1298,1209.5 1298.58,1209.5 1299.17,1209.5 1299.76,1209.5 1300.34,1209.5 1300.93,1209.5 1301.52,1209.5 1302.1,1209.5 1302.69,1209.5 1303.27,1209.5 1303.86,1209.5 1304.45,1209.5 1305.03,1209.5 1305.62,1209.5 1306.21,1209.5 1306.79,1209.5 1307.38,1209.5 1307.97,1209.5 1308.55,1209.5 1309.14,1209.5 1309.73,1209.5 1310.31,1209.5 1310.9,1209.5 1311.48,1209.5 1312.07,1209.5 1312.66,1209.5 1313.24,1209.5 1313.83,1209.5 1314.42,1209.5 1315,1209.5 1315.59,1209.5 1316.18,1209.5 1316.76,1209.5 1317.35,1209.5 1317.93,1209.5 1318.52,1209.5 1319.11,1209.5 1319.69,1209.5 1320.28,1209.5 1320.87,1209.5 1321.45,1209.5 1322.04,1209.5 1322.63,1209.5 1323.21,1209.5 1323.8,1209.5 1324.39,1209.5 1324.97,1209.5 1325.56,1209.5 1326.14,1209.5 1326.73,1209.5 1327.32,1209.5 1327.9,1209.5 1328.49,1209.5 1329.08,1209.5 1329.66,1209.5 1330.25,1209.5 1330.84,1209.5 1331.42,1209.5 1332.01,1209.5 1332.6,1209.5 1333.18,1209.5 1333.77,1209.5 1334.35,1209.5 1334.94,1209.5 1335.53,1209.5 1336.11,1209.5 1336.7,1209.5 1337.29,1209.5 1337.87,1209.5 1338.46,1209.5 1339.05,1209.5 1339.63,1209.5 1340.22,1209.5 1340.8,1209.5 1341.39,1209.5 1341.98,1209.5 1342.56,1209.5 1343.15,1209.5 1343.74,1209.5 1344.32,1209.5 1344.91,1209.5 1345.5,1209.5 1346.08,1209.5 1346.67,1209.5 1347.26,1209.5 1347.84,1209.5 1348.43,1209.5 1349.01,1209.5 1349.6,1209.5 1350.19,1209.5 1350.77,1209.5 1351.36,1209.5 1351.95,1209.5 1352.53,1209.5 1353.12,1209.5 1353.71,1209.5 1354.29,1209.5 1354.88,1209.5 1355.47,1209.5 1356.05,1209.5 1356.64,1209.5 1357.22,1209.5 1357.81,1209.5 1358.4,1209.5 1358.98,1209.5 1359.57,1209.5 1360.16,1209.5 1360.74,1209.5 1361.33,1209.5 1361.92,1209.5 1362.5,1209.5 1363.09,1209.5 1363.68,1209.5 1364.26,1209.5 1364.85,1209.5 1365.43,1209.5 1366.02,1209.5 1366.61,1209.5 1367.19,1209.5 1367.78,1209.5 1368.37,1209.5 1368.95,1209.5 1369.54,1209.5 1370.13,1209.5 1370.71,1209.5 1371.3,1209.5 1371.88,1209.5 1372.47,1209.5 1373.06,1209.5 1373.64,1209.5 1374.23,1209.5 1374.82,1209.5 1375.4,1209.5 1375.99,1209.5 1376.58,1209.5 1377.16,1209.5 1377.75,1209.5 1378.34,1209.5 1378.92,1209.5 1379.51,1209.5 1380.09,1209.5 1380.68,1209.5 1381.27,1209.5 1381.85,1209.5 1382.44,1209.5 1383.03,1209.5 1383.61,1209.5 1384.2,1209.5 1384.79,1209.5 1385.37,1209.5 1385.96,1209.5 1386.55,1209.5 1387.13,1209.5 1387.72,1209.5 1388.3,1209.5 1388.89,1209.5 1389.48,1209.5 1390.06,1209.5 1390.65,1209.5 1391.24,1209.5 1391.82,1209.5 1392.41,1209.5 1393,1209.5 1393.58,1209.5 1394.17,1209.5 1394.75,1209.5 1395.34,1209.5 1395.93,1209.5 1396.51,1209.5 1397.1,1209.5 1397.69,1209.5 1398.27,1209.5 1398.86,1209.5 1399.45,1209.5 1400.03,1209.5 1400.62,1209.5 1401.21,1209.5 1401.79,1209.5 1402.38,1209.5 1402.96,1209.5 1403.55,1209.5 1404.14,1209.5 1404.72,1209.5 1405.31,1209.5 1405.9,1209.5 1406.48,1209.5 1407.07,1209.5 1407.66,1209.5 1408.24,1209.5 1408.83,1209.5 1409.42,1209.5 1410,1209.5 1410.59,1209.5 1411.17,1209.5 1411.76,1209.5 1412.35,1209.5 1412.93,1209.5 1413.52,1209.5 1414.11,1209.5 1414.69,1209.5 1415.28,1209.5 1415.87,1209.5 1416.45,1209.5 1417.04,1209.5 1417.63,1209.5 1418.21,1209.5 1418.8,1209.5 1419.38,1209.5 1419.97,1209.5 1420.56,1209.5 1421.14,1209.5 1421.73,1209.5 1422.32,1209.5 1422.9,1209.5 1423.49,1209.5 1424.08,1209.5 1424.66,1209.5 1425.25,1209.5 1425.83,1209.5 1426.42,1209.5 1427.01,1209.5 1427.59,1209.5 1428.18,1209.5 1428.77,1209.5 1429.35,1209.5 1429.94,1209.5 1430.53,1209.5 1431.11,1209.5 1431.7,1209.5 1432.29,1209.5 1432.87,1209.5 1433.46,1209.5 1434.04,1209.5 1434.63,1209.5 1435.22,1209.5 1435.8,1209.5 1436.39,1209.5 1436.98,1209.5 1437.56,1209.5 1438.15,1209.5 1438.74,1209.5 1439.32,1209.5 1439.91,1209.5 1440.5,1209.5 1441.08,1209.5 1441.67,1209.5 1442.25,1209.5 1442.84,1209.5 1443.43,1209.5 1444.01,1209.5 1444.6,1209.5 1445.19,1209.5 1445.77,1209.5 1446.36,1209.5 1446.95,1209.5 1447.53,1209.5 1448.12,1209.5 1448.7,1209.5 1449.29,1209.5 1449.88,1209.5 1450.46,1209.5 1451.05,1209.5 1451.64,1209.5 1452.22,1209.5 1452.81,1209.5 1453.4,1209.5 1453.98,1209.5 1454.57,1209.5 1455.16,1209.5 1455.74,1209.5 1456.33,1209.5 1456.91,1209.5 1457.5,1209.5 1458.09,1209.5 1458.67,1209.5 1459.26,1209.5 1459.85,1209.5 1460.43,1209.5 1461.02,1209.5 1461.61,1209.5 1462.19,1209.5 1462.78,1209.5 1463.37,1209.5 1463.95,1209.5 1464.54,1209.5 1465.12,1209.5 1465.71,1209.5 1466.3,1209.5 1466.88,1209.5 1467.47,1209.5 1468.06,1209.5 1468.64,1209.5 1469.23,1209.5 1469.82,1209.5 1470.4,1209.5 1470.99,1209.5 1471.57,1209.5 1472.16,1209.5 1472.75,1209.5 1473.33,1209.5 1473.92,1209.5 1474.51,1209.5 1475.09,1209.5 1475.68,1209.5 1476.27,1209.5 1476.85,1209.5 1477.44,1209.5 1478.03,1209.5 1478.61,1209.5 1479.2,1209.5 1479.78,1209.5 1480.37,1209.5 1480.96,1209.5 1481.54,1209.5 1482.13,1209.5 1482.72,1209.5 1483.3,1209.5 1483.89,1209.5 1484.48,1209.5 1485.06,1209.5 1485.65,1209.5 1486.24,1209.5 1486.82,1209.5 1487.41,1209.5 1487.99,1209.5 1488.58,1209.5 1489.17,1209.5 1489.75,1209.5 1490.34,1209.5 1490.93,1209.5 1491.51,1209.5 1492.1,1209.5 1492.69,1209.5 1493.27,1209.5 1493.86,1209.5 1494.45,1209.5 1495.03,1209.5 1495.62,1209.5 1496.2,1209.5 1496.79,1209.5 1497.38,1209.5 1497.96,1209.5 1498.55,1209.5 1499.14,1209.5 1499.72,1209.5 1500.31,1209.5 1500.9,1209.5 1501.48,1209.5 1502.07,1209.5 1502.65,1209.5 1503.24,1209.5 1503.83,1209.5 1504.41,1209.5 1505,1209.5 1505.59,1209.5 1506.17,1209.5 1506.76,1209.5 1507.35,1209.5 1507.93,1209.5 1508.52,1209.5 1509.11,1209.5 1509.69,1209.5 1510.28,1209.5 1510.86,1209.5 1511.45,1209.5 1512.04,1209.5 1512.62,1209.5 1513.21,1209.5 1513.8,1209.5 1514.38,1209.5 1514.97,1209.5 1515.56,1209.5 1516.14,1209.5 1516.73,1209.5 1517.32,1209.5 1517.9,1209.5 1518.49,1209.5 1519.07,1209.5 1519.66,1209.5 1520.25,1209.5 1520.83,1209.5 1521.42,1209.5 1522.01,1209.5 1522.59,1209.5 1523.18,1209.5 1523.77,1209.5 1524.35,1209.5 1524.94,1209.5 1525.52,1209.5 1526.11,1209.5 1526.7,1209.5 1527.28,1209.5 1527.87,1209.5 1528.46,1209.5 1529.04,1209.5 1529.63,1209.5 1530.22,1209.5 1530.8,1209.5 1531.39,1209.5 1531.98,1209.5 1532.56,1209.5 1533.15,1209.5 1533.73,1209.5 1534.32,1209.5 1534.91,1209.5 1535.49,1209.5 1536.08,1209.5 1536.67,1209.5 1537.25,1209.5 1537.84,1209.5 1538.43,1209.5 1539.01,1209.5 1539.6,1209.5 1540.19,1209.5 1540.77,1209.5 1541.36,1209.5 1541.94,1209.5 1542.53,1209.5 1543.12,1209.5 1543.7,1209.5 1544.29,1209.5 1544.88,1209.5 1545.46,1209.5 1546.05,1209.5 1546.64,1209.5 1547.22,1209.5 1547.81,1209.5 1548.4,1209.5 1548.98,1209.5 1549.57,1209.5 1550.15,1209.5 1550.74,1209.5 1551.33,1209.5 1551.91,1209.5 1552.5,1209.5 1553.09,1209.5 1553.67,1209.5 1554.26,1209.5 1554.85,1209.5 1555.43,1209.5 1556.02,1209.5 1556.6,1209.5 1557.19,1209.5 1557.78,1209.5 1558.36,1209.5 1558.95,1209.5 1559.54,1209.5 1560.12,1209.5 1560.71,1209.5 1561.3,1209.5 1561.88,1209.5 1562.47,1209.5 1563.06,1209.5 1563.64,1209.5 1564.23,1209.5 1564.81,1209.5 1565.4,1209.5 1565.99,1209.5 1566.57,1209.5 1567.16,1209.5 1567.75,1209.5 1568.33,1209.5 1568.92,1209.5 1569.51,1209.5 1570.09,1209.5 1570.68,1209.5 1571.27,1209.5 1571.85,1209.5 1572.44,1209.5 1573.02,1209.5 1573.61,1209.5 1574.2,1209.5 1574.78,1209.5 1575.37,1209.5 1575.96,1209.5 1576.54,1209.5 1577.13,1209.5 1577.72,1209.5 1578.3,1209.5 1578.89,1209.5 1579.47,1209.5 1580.06,1209.5 1580.65,1209.5 1581.23,1209.5 1581.82,1209.5 1582.41,1209.5 1582.99,1209.5 1583.58,1209.5 1584.17,1209.5 1584.75,1209.5 1585.34,1209.5 1585.93,1209.5 1586.51,1209.5 1587.1,1209.5 1587.68,1209.5 1588.27,1209.5 1588.86,1209.5 1589.44,1209.5 1590.03,1209.5 1590.62,1209.5 1591.2,1209.5 1591.79,1209.5 1592.38,1209.5 1592.96,1209.5 1593.55,1209.5 1594.14,1209.5 1594.72,1209.5 1595.31,1209.5 1595.89,1209.5 1596.48,1209.5 1597.07,1209.5 1597.65,1209.5 1598.24,1209.5 1598.83,1209.5 1599.41,1209.5 1600,1209.5 1600.59,1209.5 1601.17,1209.5 1601.76,1209.5 1602.34,1209.5 1602.93,1209.5 1603.52,1209.5 1604.1,1209.5 1604.69,1209.5 1605.28,1209.5 1605.86,1209.5 1606.45,1209.5 1607.04,1209.5 1607.62,1209.5 1608.21,1209.5 1608.8,1209.5 1609.38,1209.5 1609.97,1209.5 1610.55,1209.5 1611.14,1209.5 1611.73,1209.5 1612.31,1209.5 1612.9,1209.5 1613.49,1209.5 1614.07,1209.5 1614.66,1209.5 1615.25,1209.5 1615.83,1209.5 1616.42,1209.5 1617.01,1209.5 1617.59,1209.5 1618.18,1209.5 1618.76,1209.5 1619.35,1209.5 1619.94,1209.5 1620.52,1209.5 1621.11,1209.5 1621.7,1209.5 1622.28,1209.5 1622.87,1209.5 1623.46,1209.5 1624.04,1209.5 1624.63,1209.5 1625.22,1209.5 1625.8,1209.5 1626.39,1209.5 1626.97,1209.5 1627.56,1209.5 1628.15,1209.5 1628.73,1209.5 1629.32,1209.5 1629.91,1209.5 1630.49,1209.5 1631.08,1209.5 1631.67,1209.5 1632.25,1209.5 1632.84,1209.5 1633.42,1209.5 1634.01,1209.5 1634.6,1209.5 1635.18,1209.5 1635.77,1209.5 1636.36,1209.5 1636.94,1209.5 1637.53,1209.5 1638.12,1209.5 1638.7,1209.5 1639.29,1209.5 1639.88,1209.5 1640.46,1209.5 1641.05,1209.5 1641.63,1209.5 1642.22,1209.5 1642.81,1209.5 1643.39,1209.5 1643.98,1209.5 1644.57,1209.5 1645.15,1209.5 1645.74,1209.5 1646.33,1209.5 1646.91,1209.5 1647.5,1209.5 1648.09,1209.5 1648.67,1209.5 1649.26,1209.5 1649.84,1209.5 1650.43,1209.5 1651.02,1209.5 1651.6,1209.5 1652.19,1209.5 1652.78,1209.5 1653.36,1209.5 1653.95,1209.5 1654.54,1209.5 1655.12,1209.5 1655.71,1209.5 1656.29,1209.5 1656.88,1209.5 1657.47,1209.5 1658.05,1209.5 1658.64,1209.5 1659.23,1209.5 1659.81,1209.5 1660.4,1209.5 1660.99,1209.5 1661.57,1209.5 1662.16,1209.5 1662.75,1209.5 1663.33,1209.5 1663.92,1209.5 1664.5,1209.5 1665.09,1209.5 1665.68,1209.5 1666.26,1209.5 1666.85,1209.5 1667.44,1209.5 1668.02,1209.5 1668.61,1209.5 1669.2,1209.5 1669.78,1209.5 1670.37,1209.5 1670.96,1209.5 1671.54,1209.5 1672.13,1209.5 1672.71,1209.5 1673.3,1209.5 1673.89,1209.5 1674.47,1209.5 1675.06,1209.5 1675.65,1209.5 1676.23,1209.5 1676.82,1209.5 1677.41,1209.5 1677.99,1209.5 1678.58,1209.5 1679.17,1209.5 1679.75,1209.5 1680.34,1209.5 1680.92,1209.5 1681.51,1209.5 1682.1,1209.5 1682.68,1209.5 1683.27,1209.5 1683.86,1209.5 1684.44,1209.5 1685.03,1209.5 1685.62,1209.5 1686.2,1209.5 1686.79,1209.5 1687.37,1209.5 1687.96,1209.5 1688.55,1209.5 1689.13,1209.5 1689.72,1209.5 1690.31,1209.5 1690.89,1209.5 1691.48,1209.5 1692.07,1209.5 1692.65,1209.5 1693.24,1209.5 1693.83,1209.5 1694.41,1209.5 1695,1209.5 1695.58,1209.5 1696.17,1209.5 1696.76,1209.5 1697.34,1209.5 1697.93,1209.5 1698.52,1209.5 1699.1,1209.5 1699.69,1209.5 1700.28,1209.5 1700.86,1209.5 1701.45,1209.5 1702.04,1209.5 1702.62,1209.5 1703.21,1209.5 1703.79,1209.5 1704.38,1209.5 1704.97,1209.5 1705.55,1209.5 1706.14,1209.5 1706.73,1209.5 1707.31,1209.5 1707.9,1209.5 1708.49,1209.5 1709.07,1209.5 1709.66,1209.5 1710.24,1209.5 1710.83,1209.5 1711.42,1209.5 1712,1209.5 1712.59,1209.5 1713.18,1209.5 1713.76,1209.5 1714.35,1209.5 1714.94,1209.5 1715.52,1209.5 1716.11,1209.5 1716.7,1209.5 1717.28,1209.5 1717.87,1209.5 1718.45,1209.5 1719.04,1209.5 1719.63,1209.5 1720.21,1209.5 1720.8,1209.5 1721.39,1209.5 1721.97,1209.5 1722.56,1209.5 1723.15,1209.5 1723.73,1209.5 1724.32,1209.5 1724.91,1209.5 1725.49,1209.5 1726.08,1209.5 1726.66,1209.5 1727.25,1209.5 1727.84,1209.5 1728.42,1209.5 1729.01,1209.5 1729.6,1209.5 1730.18,1209.5 1730.77,1209.5 1731.36,1209.5 1731.94,1209.5 1732.53,1209.5 1733.11,1209.5 1733.7,1209.5 1734.29,1209.5 1734.87,1209.5 1735.46,1209.5 1736.05,1209.5 1736.63,1209.5 1737.22,1209.5 1737.81,1209.5 1738.39,1209.5 1738.98,1209.5 1739.57,1209.5 1740.15,1209.5 1740.74,1209.5 1741.32,1209.5 1741.91,1209.5 1742.5,1209.5 1743.08,1209.5 1743.67,1209.5 1744.26,1209.5 1744.84,1209.5 1745.43,1209.5 1746.02,1209.5 1746.6,1209.5 1747.19,1209.5 1747.78,1209.5 1748.36,1209.5 1748.95,1209.5 1749.53,1209.5 1750.12,1209.5 1750.71,1209.5 1751.29,1209.5 1751.88,1209.5 1752.47,1209.5 1753.05,1209.5 1753.64,1209.5 1754.23,1209.5 1754.81,1209.5 1755.4,1209.5 1755.99,1209.5 1756.57,1209.5 1757.16,1209.5 1757.74,1209.5 1758.33,1209.5 1758.92,1209.5 1759.5,1209.5 1760.09,1209.5 1760.68,1209.5 1761.26,1209.5 1761.85,1209.5 1762.44,1209.5 1763.02,1209.5 1763.61,1209.5 1764.19,1209.5 1764.78,1209.5 1765.37,1209.5 1765.95,1209.5 1766.54,1209.5 1767.13,1209.5 1767.71,1209.5 1768.3,1209.5 1768.89,1209.5 1769.47,1209.5 1770.06,1209.5 1770.65,1209.5 1771.23,1209.5 1771.82,1209.5 1772.4,1209.5 1772.99,1209.5 1773.58,1209.5 1774.16,1209.5 1774.75,1209.5 1775.34,1209.5 1775.92,1209.5 1776.51,1209.5 1777.1,1209.5 1777.68,1209.5 1778.27,1209.5 1778.86,1209.5 1779.44,1209.5 1780.03,1209.5 1780.61,1209.5 1781.2,1209.5 1781.79,1209.5 1782.37,1209.5 1782.96,1209.5 1783.55,1209.5 1784.13,1209.5 1784.72,1209.5 1785.31,1209.5 1785.89,1209.5 1786.48,1209.5 1787.06,1209.5 1787.65,1209.5 1788.24,1209.5 1788.82,1209.5 1789.41,1209.5 1790,1209.5 1790.58,1209.5 1791.17,1209.5 1791.76,1209.5 1792.34,1209.5 1792.93,1209.5 1793.52,1209.5 1794.1,1209.5 1794.69,1209.5 1795.27,1209.5 1795.86,1209.5 1796.45,1209.5 1797.03,1209.5 1797.62,1209.5 1798.21,1209.5 1798.79,1209.5 1799.38,1209.5 1799.97,1209.5 1800.55,1209.5 1801.14,1209.5 1801.73,1209.5 1802.31,1209.5 1802.9,1209.5 1803.48,1209.5 1804.07,1209.5 1804.66,1209.5 1805.24,1209.5 1805.83,1209.5 1806.42,1209.5 1807,1209.5 1807.59,1209.5 1808.18,1209.5 1808.76,1209.5 1809.35,1209.5 1809.94,1209.5 1810.52,1209.5 1811.11,1209.5 1811.69,1209.5 1812.28,1209.5 1812.87,1209.5 1813.45,1209.5 1814.04,1209.5 1814.63,1209.5 1815.21,1209.5 1815.8,1209.5 1816.39,1209.5 1816.97,1209.5 1817.56,1209.5 1818.14,1209.5 1818.73,1209.5 1819.32,1209.5 1819.9,1209.5 1820.49,1209.5 1821.08,1209.5 1821.66,1209.5 1822.25,1209.5 1822.84,1209.5 1823.42,1209.5 1824.01,1209.5 1824.6,1209.5 1825.18,1209.5 1825.77,1209.5 1826.35,1209.5 1826.94,1209.5 1827.53,1209.5 1828.11,1209.5 1828.7,1209.5 1829.29,1209.5 1829.87,1209.5 1830.46,1209.5 1831.05,1209.5 1831.63,1209.5 1832.22,1209.5 1832.81,1209.5 1833.39,1209.5 1833.98,1209.5 1834.56,1209.5 1835.15,1209.5 1835.74,1209.5 1836.32,1209.5 1836.91,1209.5 1837.5,1209.5 1838.08,1209.5 1838.67,1209.5 1839.26,1209.5 1839.84,1209.5 1840.43,1209.5 1841.01,1209.5 1841.6,1209.5 1842.19,1209.5 1842.77,1209.5 1843.36,1209.5 1843.95,1209.5 1844.53,1209.5 1845.12,1209.5 1845.71,1209.5 1846.29,1209.5 1846.88,1209.5 1847.47,1209.5 1848.05,1209.5 1848.64,1209.5 1849.22,1209.5 1849.81,1209.5 1850.4,1209.5 1850.98,1209.5 1851.57,1209.5 1852.16,1209.5 1852.74,1209.5 1853.33,1209.5 1853.92,1209.5 1854.5,1209.5 1855.09,1209.5 1855.68,1209.5 1856.26,1209.5 1856.85,1209.5 1857.43,1209.5 1858.02,1209.5 1858.61,1209.5 1859.19,1209.5 1859.78,1209.5 1860.37,1209.5 1860.95,1209.5 1861.54,1209.5 1862.13,1209.5 1862.71,1209.5 1863.3,1209.5 1863.88,1209.5 1864.47,1209.5 1865.06,1209.5 1865.64,1209.5 1866.23,1209.5 1866.82,1209.5 1867.4,1209.5 1867.99,1209.5 1868.58,1209.5 1869.16,1209.5 1869.75,1209.5 1870.34,1209.5 1870.92,1209.5 1871.51,1209.5 1872.09,1209.5 1872.68,1209.5 1873.27,1209.5 1873.85,1209.5 1874.44,1209.5 1875.03,1209.5 1875.61,1209.5 1876.2,1209.5 1876.79,1209.5 1877.37,1209.5 1877.96,1209.5 1878.55,1209.5 1879.13,1209.5 1879.72,1209.5 1880.3,1209.5 1880.89,1209.5 1881.48,1209.5 1882.06,1209.5 1882.65,1209.5 1883.24,1209.5 1883.82,1209.5 1884.41,1209.5 1885,1209.5 1885.58,1209.5 1886.17,1209.5 1886.76,1209.5 1887.34,1209.5 1887.93,1209.5 1888.51,1209.5 1889.1,1209.5 1889.69,1209.5 1890.27,1209.5 1890.86,1209.5 1891.45,1209.5 1892.03,1209.5 1892.62,1209.5 1893.21,1209.5 1893.79,1209.5 1894.38,1209.5 1894.96,1209.5 1895.55,1209.5 1896.14,1209.5 1896.72,1209.5 1897.31,1209.5 1897.9,1209.5 1898.48,1209.5 1899.07,1209.5 1899.66,1209.5 1900.24,1209.5 1900.83,1209.5 1901.42,1209.5 1902,1209.5 1902.59,1209.5 1903.17,1209.5 1903.76,1209.5 1904.35,1209.5 1904.93,1209.5 1905.52,1209.5 1906.11,1209.5 1906.69,1209.5 1907.28,1209.5 1907.87,1209.5 1908.45,1209.5 1909.04,1209.5 1909.63,1209.5 1910.21,1209.5 1910.8,1209.5 1911.38,1209.5 1911.97,1209.5 1912.56,1209.5 1913.14,1209.5 1913.73,1209.5 1914.32,1209.5 1914.9,1209.5 1915.49,1209.5 1916.08,1209.5 1916.66,1209.5 1917.25,1209.5 1917.83,1209.5 1918.42,1209.5 1919.01,1209.5 1919.59,1209.5 1920.18,1209.5 1920.77,1209.5 1921.35,1209.5 1921.94,1209.5 1922.53,1209.5 1923.11,1209.5 1923.7,1209.5 1924.29,1209.5 1924.87,1209.5 1925.46,1209.5 1926.04,1209.5 1926.63,1209.5 1927.22,1209.5 1927.8,1209.5 1928.39,1209.5 1928.98,1209.5 1929.56,1209.5 1930.15,1209.5 1930.74,1209.5 1931.32,1209.5 1931.91,1209.5 1932.5,1209.5 1933.08,1209.5 1933.67,1209.5 1934.25,1209.5 1934.84,1209.5 1935.43,1209.5 1936.01,1209.5 1936.6,1209.5 1937.19,1209.5 1937.77,1209.5 1938.36,1209.5 1938.95,1209.5 1939.53,1209.5 1940.12,1209.5 1940.71,1209.5 1941.29,1209.5 1941.88,1209.5 1942.46,1209.5 1943.05,1209.5 1943.64,1209.5 1944.22,1209.5 1944.81,1209.5 1945.4,1209.5 1945.98,1209.5 1946.57,1209.5 1947.16,1209.5 1947.74,1209.5 1948.33,1209.5 1948.91,1209.5 1949.5,1209.5 1950.09,1209.5 1950.67,1209.5 1951.26,1209.5 1951.85,1209.5 1952.43,1209.5 1953.02,1209.5 1953.61,1209.5 1954.19,1209.5 1954.78,1209.5 1955.37,1209.5 1955.95,1209.5 1956.54,1209.5 1957.12,1209.5 1957.71,1209.5 1958.3,1209.5 1958.88,1209.5 1959.47,1209.5 1960.06,1209.5 1960.64,1209.5 1961.23,1209.5 1961.82,1209.5 1962.4,1209.5 1962.99,1209.5 1963.58,1209.5 1964.16,1209.5 1964.75,1209.5 1965.33,1209.5 1965.92,1209.5 1966.51,1209.5 1967.09,1209.5 1967.68,1209.5 1968.27,1209.5 1968.85,1209.5 1969.44,1209.5 1970.03,1209.5 1970.61,1209.5 1971.2,1209.5 1971.78,1209.5 1972.37,1209.5 1972.96,1209.5 1973.54,1209.5 1974.13,1209.5 1974.72,1209.5 1975.3,1209.5 1975.89,1209.5 1976.48,1209.5 1977.06,1209.5 1977.65,1209.5 1978.24,1209.5 1978.82,1209.5 1979.41,1209.5 1979.99,1209.5 1980.58,1209.5 1981.17,1209.5 1981.75,1209.5 1982.34,1209.5 1982.93,1209.5 1983.51,1209.5 1984.1,1209.5 1984.69,1209.5 1985.27,1209.5 1985.86,1209.5 1986.45,1209.5 1987.03,1209.5 1987.62,1209.5 1988.2,1209.5 1988.79,1209.5 1989.38,1209.5 1989.96,1209.5 1990.55,1209.5 1991.14,1209.5 1991.72,1209.5 1992.31,1209.5 1992.9,1209.5 1993.48,1209.5 1994.07,1209.5 1994.65,1209.5 1995.24,1209.5 1995.83,1209.5 1996.41,1209.5 1997,1209.5 1997.59,1209.5 1998.17,1209.5 1998.76,1209.5 1999.35,1209.5 1999.93,1209.5 2000.52,1209.5 2001.11,1209.5 2001.69,1209.5 2002.28,1209.5 2002.86,1209.5 2003.45,1209.5 2004.04,1209.5 2004.62,1209.5 2005.21,1209.5 2005.8,1209.5 2006.38,1209.5 2006.97,1209.5 2007.56,1209.5 2008.14,1209.5 2008.73,1209.5 2009.32,1209.5 2009.9,1209.5 2010.49,1209.5 2011.07,1209.5 2011.66,1209.5 2012.25,1209.5 2012.83,1209.5 2013.42,1209.5 2014.01,1209.5 2014.59,1209.5 2015.18,1209.5 2015.77,1209.5 2016.35,1209.5 2016.94,1209.5 2017.53,1209.5 2018.11,1209.5 2018.7,1209.5 2019.28,1209.5 2019.87,1209.5 2020.46,1209.5 2021.04,1209.5 2021.63,1209.5 2022.22,1209.5 2022.8,1209.5 2023.39,1209.5 2023.98,1209.5 2024.56,1209.5 2025.15,1209.5 2025.73,1209.5 2026.32,1209.5 2026.91,1209.5 2027.49,1209.5 2028.08,1209.5 2028.67,1209.5 2029.25,1209.5 2029.84,1209.5 2030.43,1209.5 2031.01,1209.5 2031.6,1209.5 2032.19,1209.5 2032.77,1209.5 2033.36,1209.5 2033.94,1209.5 2034.53,1209.5 2035.12,1209.5 2035.7,1209.5 2036.29,1209.5 2036.88,1209.5 2037.46,1209.5 2038.05,1209.5 2038.64,1209.5 2039.22,1209.5 2039.81,1209.5 2040.4,1209.5 2040.98,1209.5 2041.57,1209.5 2042.15,1209.5 2042.74,1209.5 2043.33,1209.5 2043.91,1209.5 2044.5,1209.5 2045.09,1209.5 2045.67,1209.5 2046.26,1209.5 2046.85,1209.5 2047.43,1209.5 2048.02,1209.5 2048.6,1209.5 2049.19,1209.5 2049.78,1209.5 2050.36,1209.5 2050.95,1209.5 2051.54,1209.5 2052.12,1209.5 2052.71,1209.5 2053.3,1209.5 2053.88,1209.5 2054.47,1209.5 2055.06,1209.5 2055.64,1209.5 2056.23,1209.5 2056.81,1209.5 2057.4,1209.5 2057.99,1209.5 2058.57,1209.5 2059.16,1209.5 2059.75,1209.5 2060.33,1209.5 2060.92,1209.5 2061.51,1209.5 2062.09,1209.5 2062.68,1209.5 2063.27,1209.5 2063.85,1209.5 2064.44,1209.5 2065.02,1209.5 2065.61,1209.5 2066.2,1209.5 2066.78,1209.5 2067.37,1209.5 2067.96,1209.5 2068.54,1209.5 2069.13,1209.5 2069.72,1209.5 2070.3,1209.5 2070.89,1209.5 2071.48,1209.5 2072.06,1209.5 2072.65,1209.5 2073.23,1209.5 2073.82,1209.5 2074.41,1209.5 2074.99,1209.5 2075.58,1209.5 2076.17,1209.5 2076.75,1209.5 2077.34,1209.5 2077.93,1209.5 2078.51,1209.5 2079.1,1209.5 2079.68,1209.5 2080.27,1209.5 2080.86,1209.5 2081.44,1209.5 2082.03,1209.5 2082.62,1209.5 2083.2,1209.5 2083.79,1209.5 2084.38,1209.5 2084.96,1209.5 2085.55,1209.5 2086.14,1209.5 2086.72,1209.5 2087.31,1209.5 2087.89,1209.5 2088.48,1209.5 2089.07,1209.5 2089.65,1209.5 2090.24,1209.5 2090.83,1209.5 2091.41,1209.5 2092,1209.5 2092.59,1209.5 2093.17,1209.5 2093.76,1209.5 2094.35,1209.5 2094.93,1209.5 2095.52,1209.5 2096.1,1209.5 2096.69,1209.5 2097.28,1209.5 2097.86,1209.5 2098.45,1209.5 2099.04,1209.5 2099.62,1209.5 2100.21,1209.5 2100.8,1209.5 2101.38,1209.5 2101.97,1209.5 2102.55,1209.5 2103.14,1209.5 2103.73,1209.5 2104.31,1209.5 2104.9,1209.5 2105.49,1209.5 2106.07,1209.5 2106.66,1209.5 2107.25,1209.5 2107.83,1209.5 2108.42,1209.5 2109.01,1209.5 2109.59,1209.5 2110.18,1209.5 2110.76,1209.5 2111.35,1209.5 2111.94,1209.5 2112.52,1209.5 2113.11,1209.5 2113.7,1209.5 2114.28,1209.5 2114.87,1209.5 2115.46,1209.5 2116.04,1209.5 2116.63,1209.5 2117.22,1209.5 2117.8,1209.5 2118.39,1209.5 2118.97,1209.5 2119.56,1209.5 2120.15,1209.5 2120.73,1209.5 2121.32,1209.5 2121.91,1209.5 2122.49,1209.5 2123.08,1209.5 2123.67,1209.5 2124.25,1209.5 2124.84,1209.5 2125.42,1209.5 2126.01,1209.5 2126.6,1209.5 2127.18,1209.5 2127.77,1209.5 2128.36,1209.5 2128.94,1209.5 2129.53,1209.5 2130.12,1209.5 2130.7,1209.5 2131.29,1209.5 2131.88,1209.5 2132.46,1209.5 2133.05,1209.5 2133.63,1209.5 2134.22,1209.5 2134.81,1209.5 2135.39,1209.5 2135.98,1209.5 2136.57,1209.5 2137.15,1209.5 2137.74,1209.5 2138.33,1209.5 2138.91,1209.5 2139.5,1209.5 2140.09,1209.5 2140.67,1209.5 2141.26,1209.5 2141.84,1209.5 2142.43,1209.5 2143.02,1209.5 2143.6,1209.5 2144.19,1209.5 2144.78,1209.5 2145.36,1209.5 2145.95,1209.5 2146.54,1209.5 2147.12,1209.5 2147.71,1209.5 2148.3,1209.5 2148.88,1209.5 2149.47,1209.5 2150.05,1209.5 2150.64,1209.5 2151.23,1209.5 2151.81,1209.5 2152.4,1209.5 2152.99,1209.5 2153.57,1209.5 2154.16,1209.5 2154.75,1209.5 2155.33,1209.5 2155.92,1209.5 2156.5,1209.5 2157.09,1209.5 2157.68,1209.5 2158.26,1209.5 \"/>\n<path clip-path=\"url(#clip292)\" d=\"M986.025 1209.46 L986.612 1209.46 L987.198 1209.46 L987.785 1209.46 L988.371 1209.46 L988.957 1209.46 L989.544 1209.46 L990.13 1209.46 L990.717 1209.46 L991.303 1209.46 L991.889 1209.46 L992.476 1209.46 L993.062 1209.46 L993.649 1209.46 L994.235 1209.46 L994.822 1209.46 L995.408 1209.46 L995.994 1209.46 L996.581 1209.46 L997.167 1209.46 L997.754 1209.46 L998.34 1209.46 L998.926 1209.46 L999.513 1209.46 L1000.1 1209.46 L1000.69 1209.46 L1001.27 1209.46 L1001.86 1209.46 L1002.44 1209.46 L1003.03 1209.46 L1003.62 1209.46 L1004.2 1209.46 L1004.79 1209.46 L1005.38 1209.46 L1005.96 1209.46 L1006.55 1209.46 L1007.14 1209.46 L1007.72 1209.46 L1008.31 1209.46 L1008.9 1209.46 L1009.48 1209.46 L1010.07 1209.46 L1010.65 1209.46 L1011.24 1209.46 L1011.83 1209.46 L1012.41 1209.46 L1013 1209.46 L1013.59 1209.46 L1014.17 1209.46 L1014.76 1209.46 L1015.35 1209.46 L1015.93 1209.46 L1016.52 1209.46 L1017.11 1209.46 L1017.69 1209.46 L1018.28 1209.46 L1018.86 1209.46 L1019.45 1209.46 L1020.04 1209.46 L1020.62 1209.46 L1021.21 1209.46 L1021.8 1209.46 L1022.38 1209.46 L1022.97 1209.46 L1023.56 1209.46 L1024.14 1209.46 L1024.73 1209.46 L1025.32 1209.46 L1025.9 1209.46 L1026.49 1209.46 L1027.07 1209.46 L1027.66 1209.46 L1028.25 1209.46 L1028.83 1209.46 L1029.42 1209.46 L1030.01 1209.46 L1030.59 1209.46 L1031.18 1209.46 L1031.77 1209.46 L1032.35 1209.46 L1032.94 1209.46 L1033.52 1209.46 L1034.11 1209.46 L1034.7 1209.46 L1035.28 1209.46 L1035.87 1209.46 L1036.46 1209.46 L1037.04 1209.46 L1037.63 1209.46 L1038.22 1209.46 L1038.8 1209.46 L1039.39 1209.46 L1039.98 1209.46 L1040.56 1209.46 L1041.15 1209.46 L1041.73 1209.46 L1042.32 1209.46 L1042.91 1209.46 L1043.49 1209.46 L1044.08 1209.46 L1044.67 1209.46 L1045.25 1209.46 L1045.84 1209.46 L1046.43 1209.46 L1047.01 1209.46 L1047.6 1209.46 L1048.19 1209.46 L1048.77 1209.46 L1049.36 1209.46 L1049.94 1209.46 L1050.53 1209.46 L1051.12 1209.46 L1051.7 1209.46 L1052.29 1209.46 L1052.88 1209.46 L1053.46 1209.46 L1054.05 1209.46 L1054.64 1209.46 L1055.22 1209.46 L1055.81 1209.46 L1056.39 1209.46 L1056.98 1209.46 L1057.57 1209.46 L1058.15 1209.46 L1058.74 1209.46 L1059.33 1209.46 L1059.91 1209.46 L1060.5 1209.46 L1061.09 1209.46 L1061.67 1209.46 L1062.26 1209.46 L1062.85 1209.46 L1063.43 1209.46 L1064.02 1209.46 L1064.6 1209.46 L1065.19 1209.46 L1065.78 1209.46 L1066.36 1209.46 L1066.95 1209.46 L1067.54 1209.46 L1068.12 1209.46 L1068.71 1209.46 L1069.3 1209.46 L1069.88 1209.46 L1070.47 1209.46 L1071.06 1209.46 L1071.64 1209.46 L1072.23 1209.46 L1072.81 1209.46 L1073.4 1209.46 L1073.99 1209.46 L1074.57 1209.46 L1075.16 1209.46 L1075.75 1209.46 L1076.33 1209.46 L1076.92 1209.46 L1077.51 1209.46 L1078.09 1209.46 L1078.68 1209.46 L1079.26 1209.46 L1079.85 1209.46 L1080.44 1209.46 L1081.02 1209.46 L1081.61 1209.46 L1082.2 1209.46 L1082.78 1209.46 L1083.37 1209.46 L1083.96 1209.46 L1084.54 1209.46 L1085.13 1209.46 L1085.72 1209.46 L1086.3 1209.46 L1086.89 1209.46 L1087.47 1209.46 L1088.06 1209.46 L1088.65 1209.46 L1089.23 1209.46 L1089.82 1209.46 L1090.41 1209.46 L1090.99 1209.46 L1091.58 1209.46 L1092.17 1209.46 L1092.75 1209.46 L1093.34 1209.46 L1093.93 1209.46 L1094.51 1209.46 L1095.1 1209.46 L1095.68 1209.46 L1096.27 1209.46 L1096.86 1209.46 L1097.44 1209.46 L1098.03 1209.46 L1098.62 1209.46 L1099.2 1209.46 L1099.79 1209.46 L1100.38 1209.46 L1100.96 1209.46 L1101.55 1209.46 L1102.14 1209.46 L1102.72 1209.46 L1103.31 1209.46 L1103.89 1209.46 L1104.48 1209.46 L1105.07 1209.46 L1105.65 1209.46 L1106.24 1209.46 L1106.83 1209.46 L1107.41 1209.46 L1108 1209.46 L1108.59 1209.46 L1109.17 1209.46 L1109.76 1209.46 L1110.34 1209.46 L1110.93 1209.46 L1111.52 1209.46 L1112.1 1209.46 L1112.69 1209.46 L1113.28 1209.46 L1113.86 1209.46 L1114.45 1209.46 L1115.04 1209.46 L1115.62 1209.46 L1116.21 1209.46 L1116.8 1209.46 L1117.38 1209.46 L1117.97 1209.46 L1118.55 1209.46 L1119.14 1209.46 L1119.73 1209.46 L1120.31 1209.46 L1120.9 1209.46 L1121.49 1209.46 L1122.07 1209.46 L1122.66 1209.46 L1123.25 1209.46 L1123.83 1209.46 L1124.42 1209.46 L1125.01 1209.46 L1125.59 1209.46 L1126.18 1209.46 L1126.76 1209.46 L1127.35 1209.46 L1127.94 1209.46 L1128.52 1209.46 L1129.11 1209.46 L1129.7 1209.46 L1130.28 1209.46 L1130.87 1209.46 L1131.46 1209.46 L1132.04 1209.46 L1132.63 1209.46 L1133.21 1209.46 L1133.8 1209.46 L1134.39 1209.46 L1134.97 1209.46 L1135.56 1209.46 L1136.15 1209.46 L1136.73 1209.46 L1137.32 1209.46 L1137.91 1209.46 L1138.49 1209.46 L1139.08 1209.46 L1139.67 1209.46 L1140.25 1209.46 L1140.84 1209.46 L1141.42 1209.46 L1142.01 1209.46 L1142.6 1209.46 L1143.18 1209.46 L1143.77 1209.46 L1144.36 1209.46 L1144.94 1209.46 L1145.53 1209.46 L1146.12 1209.46 L1146.7 1209.46 L1147.29 1209.46 L1147.88 1209.46 L1148.46 1209.46 L1149.05 1209.46 L1149.63 1209.46 L1150.22 1209.46 L1150.81 1209.46 L1151.39 1209.46 L1151.98 1209.46 L1152.57 1209.46 L1153.15 1209.46 L1153.74 1209.46 L1154.33 1209.46 L1154.91 1209.46 L1155.5 1209.46 L1156.09 1209.46 L1156.67 1209.46 L1157.26 1209.46 L1157.84 1209.46 L1158.43 1209.46 L1159.02 1209.46 L1159.6 1209.46 L1160.19 1209.46 L1160.78 1209.46 L1161.36 1209.46 L1161.95 1209.46 L1162.54 1209.46 L1163.12 1209.46 L1163.71 1209.46 L1164.29 1209.46 L1164.88 1209.46 L1165.47 1209.46 L1166.05 1209.46 L1166.64 1209.46 L1167.23 1209.46 L1167.81 1209.46 L1168.4 1209.46 L1168.99 1209.46 L1169.57 1209.46 L1170.16 1209.46 L1170.75 1209.46 L1171.33 1209.46 L1171.92 1209.46 L1172.5 1209.46 L1173.09 1209.46 L1173.68 1209.46 L1174.26 1209.46 L1174.85 1209.46 L1175.44 1209.46 L1176.02 1209.46 L1176.61 1209.46 L1177.2 1209.46 L1177.78 1209.46 L1178.37 1209.46 L1178.96 1209.46 L1179.54 1209.46 L1180.13 1209.46 L1180.71 1209.46 L1181.3 1209.46 L1181.89 1209.46 L1182.47 1209.46 L1183.06 1209.46 L1183.65 1209.46 L1184.23 1209.46 L1184.82 1209.46 L1185.41 1209.46 L1185.99 1209.46 L1186.58 1209.46 L1187.16 1209.46 L1187.75 1209.46 L1188.34 1209.46 L1188.92 1209.46 L1189.51 1209.46 L1190.1 1209.46 L1190.68 1209.46 L1191.27 1209.46 L1191.86 1209.46 L1192.44 1209.46 L1193.03 1209.46 L1193.62 1209.46 L1194.2 1209.46 L1194.79 1209.46 L1195.37 1209.46 L1195.96 1209.46 L1196.55 1209.46 L1197.13 1209.46 L1197.72 1209.46 L1198.31 1209.46 L1198.89 1209.46 L1199.48 1209.46 L1200.07 1209.46 L1200.65 1209.46 L1201.24 1209.46 L1201.83 1209.46 L1202.41 1209.46 L1203 1209.46 L1203.58 1209.46 L1204.17 1209.46 L1204.76 1209.46 L1205.34 1209.46 L1205.93 1209.46 L1206.52 1209.46 L1207.1 1209.46 L1207.69 1209.46 L1208.28 1209.46 L1208.86 1209.46 L1209.45 1209.46 L1210.03 1209.46 L1210.62 1209.46 L1211.21 1209.46 L1211.79 1209.46 L1212.38 1209.46 L1212.97 1209.46 L1213.55 1209.46 L1214.14 1209.46 L1214.73 1209.46 L1215.31 1209.46 L1215.9 1209.46 L1216.49 1209.46 L1217.07 1209.46 L1217.66 1209.46 L1218.24 1209.46 L1218.83 1209.46 L1219.42 1209.46 L1220 1209.46 L1220.59 1209.46 L1221.18 1209.46 L1221.76 1209.46 L1222.35 1209.46 L1222.94 1209.46 L1223.52 1209.46 L1224.11 1209.46 L1224.7 1209.46 L1225.28 1209.46 L1225.87 1209.46 L1226.45 1209.46 L1227.04 1209.46 L1227.63 1209.46 L1228.21 1209.46 L1228.8 1209.46 L1229.39 1209.46 L1229.97 1209.46 L1230.56 1209.46 L1231.15 1209.46 L1231.73 1209.46 L1232.32 1209.46 L1232.91 1209.46 L1233.49 1209.46 L1234.08 1209.46 L1234.66 1209.46 L1235.25 1209.46 L1235.84 1209.46 L1236.42 1209.46 L1237.01 1209.46 L1237.6 1209.46 L1238.18 1209.46 L1238.77 1209.46 L1239.36 1209.46 L1239.94 1209.46 L1240.53 1209.46 L1241.11 1209.46 L1241.7 1209.46 L1242.29 1209.46 L1242.87 1209.46 L1243.46 1209.46 L1244.05 1209.46 L1244.63 1209.46 L1245.22 1209.46 L1245.81 1209.46 L1246.39 1209.46 L1246.98 1209.46 L1247.57 1209.46 L1248.15 1209.46 L1248.74 1209.46 L1249.32 1209.46 L1249.91 1209.46 L1250.5 1209.46 L1251.08 1209.46 L1251.67 1209.46 L1252.26 1209.46 L1252.84 1209.46 L1253.43 1209.46 L1254.02 1209.46 L1254.6 1209.46 L1255.19 1209.46 L1255.78 1209.46 L1256.36 1209.46 L1256.95 1209.46 L1257.53 1209.46 L1258.12 1209.46 L1258.71 1209.46 L1259.29 1209.46 L1259.88 1209.46 L1260.47 1209.46 L1261.05 1209.46 L1261.64 1209.46 L1262.23 1209.46 L1262.81 1209.46 L1263.4 1209.46 L1263.98 1209.46 L1264.57 1209.46 L1265.16 1209.46 L1265.74 1209.46 L1266.33 1209.46 L1266.92 1209.46 L1267.5 1209.46 L1268.09 1209.46 L1268.68 1209.46 L1269.26 1209.46 L1269.85 1209.46 L1270.44 1209.46 L1271.02 1209.46 L1271.61 1209.46 L1272.19 1209.46 L1272.78 1209.46 L1273.37 1209.46 L1273.95 1209.46 L1274.54 1209.46 L1275.13 1209.46 L1275.71 1209.46 L1276.3 1209.46 L1276.89 1209.46 L1277.47 1209.46 L1278.06 1209.46 L1278.65 1209.46 L1279.23 1209.46 L1279.82 1209.46 L1280.4 1209.46 L1280.99 1209.46 L1281.58 1209.46 L1282.16 1209.46 L1282.75 1209.46 L1283.34 1209.46 L1283.92 1209.46 L1284.51 1209.46 L1285.1 1209.46 L1285.68 1209.46 L1286.27 1209.46 L1286.86 1209.46 L1287.44 1209.46 L1288.03 1209.46 L1288.61 1209.46 L1289.2 1209.46 L1289.79 1209.46 L1290.37 1209.46 L1290.96 1209.46 L1291.55 1209.46 L1292.13 1209.46 L1292.72 1209.46 L1293.31 1209.46 L1293.89 1209.46 L1294.48 1209.46 L1295.06 1209.46 L1295.65 1209.46 L1296.24 1209.46 L1296.82 1209.46 L1297.41 1209.46 L1298 1209.46 L1298.58 1209.46 L1299.17 1209.46 L1299.76 1209.46 L1300.34 1209.46 L1300.93 1209.46 L1301.52 1209.46 L1302.1 1209.46 L1302.69 1209.46 L1303.27 1209.46 L1303.86 1209.46 L1304.45 1209.46 L1305.03 1209.46 L1305.62 1209.46 L1306.21 1209.46 L1306.79 1209.46 L1307.38 1209.46 L1307.97 1209.46 L1308.55 1209.46 L1309.14 1209.46 L1309.73 1209.46 L1310.31 1209.46 L1310.9 1209.46 L1311.48 1209.46 L1312.07 1209.46 L1312.66 1209.46 L1313.24 1209.46 L1313.83 1209.46 L1314.42 1209.46 L1315 1209.46 L1315.59 1209.46 L1316.18 1209.46 L1316.76 1209.46 L1317.35 1209.46 L1317.93 1209.46 L1318.52 1209.46 L1319.11 1209.46 L1319.69 1209.46 L1320.28 1209.46 L1320.87 1209.46 L1321.45 1209.46 L1322.04 1209.46 L1322.63 1209.46 L1323.21 1209.46 L1323.8 1209.46 L1324.39 1209.46 L1324.97 1209.46 L1325.56 1209.46 L1326.14 1209.46 L1326.73 1209.46 L1327.32 1209.46 L1327.9 1209.46 L1328.49 1209.46 L1329.08 1209.46 L1329.66 1209.46 L1330.25 1209.46 L1330.84 1209.46 L1331.42 1209.46 L1332.01 1209.46 L1332.6 1209.46 L1333.18 1209.46 L1333.77 1209.46 L1334.35 1209.46 L1334.94 1209.46 L1335.53 1209.46 L1336.11 1209.46 L1336.7 1209.46 L1337.29 1209.46 L1337.87 1209.46 L1338.46 1209.46 L1339.05 1209.46 L1339.63 1209.46 L1340.22 1209.46 L1340.8 1209.46 L1341.39 1209.46 L1341.98 1209.46 L1342.56 1209.46 L1343.15 1209.46 L1343.74 1209.46 L1344.32 1209.46 L1344.91 1209.46 L1345.5 1209.46 L1346.08 1209.46 L1346.67 1209.46 L1347.26 1209.46 L1347.84 1209.46 L1348.43 1209.46 L1349.01 1209.46 L1349.6 1209.46 L1350.19 1209.46 L1350.77 1209.46 L1351.36 1209.46 L1351.95 1209.46 L1352.53 1209.46 L1353.12 1209.46 L1353.71 1209.46 L1354.29 1209.46 L1354.88 1209.46 L1355.47 1209.46 L1356.05 1209.46 L1356.64 1209.46 L1357.22 1209.46 L1357.81 1209.46 L1358.4 1209.46 L1358.98 1209.46 L1359.57 1209.46 L1360.16 1209.46 L1360.74 1209.46 L1361.33 1209.46 L1361.92 1209.46 L1362.5 1209.46 L1363.09 1209.46 L1363.68 1209.46 L1364.26 1209.46 L1364.85 1209.46 L1365.43 1209.46 L1366.02 1209.46 L1366.61 1209.46 L1367.19 1209.46 L1367.78 1209.46 L1368.37 1209.46 L1368.95 1209.46 L1369.54 1209.46 L1370.13 1209.46 L1370.71 1209.46 L1371.3 1209.46 L1371.88 1209.46 L1372.47 1209.46 L1373.06 1209.46 L1373.64 1209.46 L1374.23 1209.46 L1374.82 1209.46 L1375.4 1209.46 L1375.99 1209.46 L1376.58 1209.46 L1377.16 1209.46 L1377.75 1209.46 L1378.34 1209.46 L1378.92 1209.46 L1379.51 1209.46 L1380.09 1209.46 L1380.68 1209.46 L1381.27 1209.46 L1381.85 1209.46 L1382.44 1209.46 L1383.03 1209.46 L1383.61 1209.46 L1384.2 1209.46 L1384.79 1209.46 L1385.37 1209.46 L1385.96 1209.46 L1386.55 1209.46 L1387.13 1209.46 L1387.72 1209.46 L1388.3 1209.46 L1388.89 1209.46 L1389.48 1209.46 L1390.06 1209.46 L1390.65 1209.46 L1391.24 1209.46 L1391.82 1209.46 L1392.41 1209.46 L1393 1209.46 L1393.58 1209.46 L1394.17 1209.46 L1394.75 1209.46 L1395.34 1209.46 L1395.93 1209.46 L1396.51 1209.46 L1397.1 1209.46 L1397.69 1209.46 L1398.27 1209.46 L1398.86 1209.46 L1399.45 1209.46 L1400.03 1209.46 L1400.62 1209.46 L1401.21 1209.46 L1401.79 1209.46 L1402.38 1209.46 L1402.96 1209.46 L1403.55 1209.46 L1404.14 1209.46 L1404.72 1209.46 L1405.31 1209.46 L1405.9 1209.46 L1406.48 1209.46 L1407.07 1209.46 L1407.66 1209.46 L1408.24 1209.46 L1408.83 1209.46 L1409.42 1209.46 L1410 1209.46 L1410.59 1209.46 L1411.17 1209.46 L1411.76 1209.46 L1412.35 1209.46 L1412.93 1209.46 L1413.52 1209.46 L1414.11 1209.46 L1414.69 1209.46 L1415.28 1209.46 L1415.87 1209.46 L1416.45 1209.46 L1417.04 1209.46 L1417.63 1209.46 L1418.21 1209.46 L1418.8 1209.46 L1419.38 1209.46 L1419.97 1209.46 L1420.56 1209.46 L1421.14 1209.46 L1421.73 1209.46 L1422.32 1209.46 L1422.9 1209.46 L1423.49 1209.46 L1424.08 1209.46 L1424.66 1209.46 L1425.25 1209.46 L1425.83 1209.46 L1426.42 1209.46 L1427.01 1209.46 L1427.59 1209.46 L1428.18 1209.46 L1428.77 1209.46 L1429.35 1209.46 L1429.94 1209.46 L1430.53 1209.46 L1431.11 1209.46 L1431.7 1209.46 L1432.29 1209.46 L1432.87 1209.46 L1433.46 1209.46 L1434.04 1209.46 L1434.63 1209.46 L1435.22 1209.46 L1435.8 1209.46 L1436.39 1209.46 L1436.98 1209.46 L1437.56 1209.46 L1438.15 1209.46 L1438.74 1209.46 L1439.32 1209.46 L1439.91 1209.46 L1440.5 1209.46 L1441.08 1209.46 L1441.67 1209.46 L1442.25 1209.46 L1442.84 1209.46 L1443.43 1209.46 L1444.01 1209.46 L1444.6 1209.46 L1445.19 1209.46 L1445.77 1209.46 L1446.36 1209.46 L1446.95 1209.46 L1447.53 1209.46 L1448.12 1209.46 L1448.7 1209.46 L1449.29 1209.46 L1449.88 1209.46 L1450.46 1209.46 L1451.05 1209.46 L1451.64 1209.46 L1452.22 1209.46 L1452.81 1209.46 L1453.4 1209.46 L1453.98 1209.46 L1454.57 1209.46 L1455.16 1209.46 L1455.74 1209.46 L1456.33 1209.46 L1456.91 1209.46 L1457.5 1209.46 L1458.09 1209.46 L1458.67 1209.46 L1459.26 1209.46 L1459.85 1209.46 L1460.43 1209.46 L1461.02 1209.46 L1461.61 1209.46 L1462.19 1209.46 L1462.78 1209.46 L1463.37 1209.46 L1463.95 1209.46 L1464.54 1209.46 L1465.12 1209.46 L1465.71 1209.46 L1466.3 1209.46 L1466.88 1209.46 L1467.47 1209.46 L1468.06 1209.46 L1468.64 1209.46 L1469.23 1209.46 L1469.82 1209.46 L1470.4 1209.46 L1470.99 1209.46 L1471.57 1209.46 L1472.16 1209.46 L1472.75 1209.46 L1473.33 1209.46 L1473.92 1209.46 L1474.51 1209.46 L1475.09 1209.46 L1475.68 1209.46 L1476.27 1209.46 L1476.85 1209.46 L1477.44 1209.46 L1478.03 1209.46 L1478.61 1209.46 L1479.2 1209.46 L1479.78 1209.46 L1480.37 1209.46 L1480.96 1209.46 L1481.54 1209.46 L1482.13 1209.46 L1482.72 1209.46 L1483.3 1209.46 L1483.89 1209.46 L1484.48 1209.46 L1485.06 1209.46 L1485.65 1209.46 L1486.24 1209.46 L1486.82 1209.46 L1487.41 1209.46 L1487.99 1209.46 L1488.58 1209.46 L1489.17 1209.46 L1489.75 1209.46 L1490.34 1209.46 L1490.93 1209.46 L1491.51 1209.46 L1492.1 1209.46 L1492.69 1209.46 L1493.27 1209.46 L1493.86 1209.46 L1494.45 1209.46 L1495.03 1209.46 L1495.62 1209.46 L1496.2 1209.46 L1496.79 1209.46 L1497.38 1209.46 L1497.96 1209.46 L1498.55 1209.46 L1499.14 1209.46 L1499.72 1209.46 L1500.31 1209.46 L1500.9 1209.46 L1501.48 1209.46 L1502.07 1209.46 L1502.65 1209.46 L1503.24 1209.46 L1503.83 1209.46 L1504.41 1209.46 L1505 1209.46 L1505.59 1209.46 L1506.17 1209.46 L1506.76 1209.46 L1507.35 1209.46 L1507.93 1209.46 L1508.52 1209.46 L1509.11 1209.46 L1509.69 1209.46 L1510.28 1209.46 L1510.86 1209.46 L1511.45 1209.46 L1512.04 1209.46 L1512.62 1209.46 L1513.21 1209.46 L1513.8 1209.46 L1514.38 1209.46 L1514.97 1209.46 L1515.56 1209.46 L1516.14 1209.46 L1516.73 1209.46 L1517.32 1209.46 L1517.9 1209.46 L1518.49 1209.46 L1519.07 1209.46 L1519.66 1209.46 L1520.25 1209.46 L1520.83 1209.46 L1521.42 1209.46 L1522.01 1209.46 L1522.59 1209.46 L1523.18 1209.46 L1523.77 1209.46 L1524.35 1209.46 L1524.94 1209.46 L1525.52 1209.46 L1526.11 1209.46 L1526.7 1209.46 L1527.28 1209.46 L1527.87 1209.46 L1528.46 1209.46 L1529.04 1209.46 L1529.63 1209.46 L1530.22 1209.46 L1530.8 1209.46 L1531.39 1209.46 L1531.98 1209.46 L1532.56 1209.46 L1533.15 1209.46 L1533.73 1209.46 L1534.32 1209.46 L1534.91 1209.46 L1535.49 1209.46 L1536.08 1209.46 L1536.67 1209.46 L1537.25 1209.46 L1537.84 1209.46 L1538.43 1209.46 L1539.01 1209.46 L1539.6 1209.46 L1540.19 1209.46 L1540.77 1209.46 L1541.36 1209.46 L1541.94 1209.46 L1542.53 1209.46 L1543.12 1209.46 L1543.7 1209.46 L1544.29 1209.46 L1544.88 1209.46 L1545.46 1209.46 L1546.05 1209.46 L1546.64 1209.46 L1547.22 1209.46 L1547.81 1209.46 L1548.4 1209.46 L1548.98 1209.46 L1549.57 1209.46 L1550.15 1209.46 L1550.74 1209.46 L1551.33 1209.46 L1551.91 1209.46 L1552.5 1209.46 L1553.09 1209.46 L1553.67 1209.46 L1554.26 1209.46 L1554.85 1209.46 L1555.43 1209.46 L1556.02 1209.46 L1556.6 1209.46 L1557.19 1209.46 L1557.78 1209.46 L1558.36 1209.46 L1558.95 1209.46 L1559.54 1209.46 L1560.12 1209.46 L1560.71 1209.46 L1561.3 1209.46 L1561.88 1209.46 L1562.47 1209.46 L1563.06 1209.46 L1563.64 1209.46 L1564.23 1209.46 L1564.81 1209.46 L1565.4 1209.46 L1565.99 1209.46 L1566.57 1209.46 L1567.16 1209.46 L1567.75 1209.46 L1568.33 1209.46 L1568.92 1209.46 L1569.51 1209.46 L1570.09 1209.46 L1570.68 1209.46 L1571.27 1209.46 L1571.85 1209.46 L1572.44 1209.46 L1573.02 1209.46 L1573.61 1209.46 L1574.2 1209.46 L1574.78 1209.46 L1575.37 1209.46 L1575.96 1209.46 L1576.54 1209.46 L1577.13 1209.46 L1577.72 1209.46 L1578.3 1209.46 L1578.89 1209.46 L1579.47 1209.46 L1580.06 1209.46 L1580.65 1209.46 L1581.23 1209.46 L1581.82 1209.46 L1582.41 1209.46 L1582.99 1209.46 L1583.58 1209.46 L1584.17 1209.46 L1584.75 1209.46 L1585.34 1209.46 L1585.93 1209.46 L1586.51 1209.46 L1587.1 1209.46 L1587.68 1209.46 L1588.27 1209.46 L1588.86 1209.46 L1589.44 1209.46 L1590.03 1209.46 L1590.62 1209.46 L1591.2 1209.46 L1591.79 1209.46 L1592.38 1209.46 L1592.96 1209.46 L1593.55 1209.46 L1594.14 1209.46 L1594.72 1209.46 L1595.31 1209.46 L1595.89 1209.46 L1596.48 1209.46 L1597.07 1209.46 L1597.65 1209.46 L1598.24 1209.46 L1598.83 1209.46 L1599.41 1209.46 L1600 1209.46 L1600.59 1209.46 L1601.17 1209.46 L1601.76 1209.46 L1602.34 1209.46 L1602.93 1209.46 L1603.52 1209.46 L1604.1 1209.46 L1604.69 1209.46 L1605.28 1209.46 L1605.86 1209.46 L1606.45 1209.46 L1607.04 1209.46 L1607.62 1209.46 L1608.21 1209.46 L1608.8 1209.46 L1609.38 1209.46 L1609.97 1209.46 L1610.55 1209.46 L1611.14 1209.46 L1611.73 1209.46 L1612.31 1209.46 L1612.9 1209.46 L1613.49 1209.46 L1614.07 1209.46 L1614.66 1209.46 L1615.25 1209.46 L1615.83 1209.46 L1616.42 1209.46 L1617.01 1209.46 L1617.59 1209.46 L1618.18 1209.46 L1618.76 1209.46 L1619.35 1209.46 L1619.94 1209.46 L1620.52 1209.46 L1621.11 1209.46 L1621.7 1209.46 L1622.28 1209.46 L1622.87 1209.46 L1623.46 1209.46 L1624.04 1209.46 L1624.63 1209.46 L1625.22 1209.46 L1625.8 1209.46 L1626.39 1209.46 L1626.97 1209.46 L1627.56 1209.46 L1628.15 1209.46 L1628.73 1209.46 L1629.32 1209.46 L1629.91 1209.46 L1630.49 1209.46 L1631.08 1209.46 L1631.67 1209.46 L1632.25 1209.46 L1632.84 1209.46 L1633.42 1209.46 L1634.01 1209.46 L1634.6 1209.46 L1635.18 1209.46 L1635.77 1209.46 L1636.36 1209.46 L1636.94 1209.46 L1637.53 1209.46 L1638.12 1209.46 L1638.7 1209.46 L1639.29 1209.46 L1639.88 1209.46 L1640.46 1209.46 L1641.05 1209.46 L1641.63 1209.46 L1642.22 1209.46 L1642.81 1209.46 L1643.39 1209.46 L1643.98 1209.46 L1644.57 1209.46 L1645.15 1209.46 L1645.74 1209.46 L1646.33 1209.46 L1646.91 1209.46 L1647.5 1209.46 L1648.09 1209.46 L1648.67 1209.46 L1649.26 1209.46 L1649.84 1209.46 L1650.43 1209.46 L1651.02 1209.46 L1651.6 1209.46 L1652.19 1209.46 L1652.78 1209.46 L1653.36 1209.46 L1653.95 1209.46 L1654.54 1209.46 L1655.12 1209.46 L1655.71 1209.46 L1656.29 1209.46 L1656.88 1209.46 L1657.47 1209.46 L1658.05 1209.46 L1658.64 1209.46 L1659.23 1209.46 L1659.81 1209.46 L1660.4 1209.46 L1660.99 1209.46 L1661.57 1209.46 L1662.16 1209.46 L1662.75 1209.46 L1663.33 1209.46 L1663.92 1209.46 L1664.5 1209.46 L1665.09 1209.46 L1665.68 1209.46 L1666.26 1209.46 L1666.85 1209.46 L1667.44 1209.46 L1668.02 1209.46 L1668.61 1209.46 L1669.2 1209.46 L1669.78 1209.46 L1670.37 1209.46 L1670.96 1209.46 L1671.54 1209.46 L1672.13 1209.46 L1672.71 1209.46 L1673.3 1209.46 L1673.89 1209.46 L1674.47 1209.46 L1675.06 1209.46 L1675.65 1209.46 L1676.23 1209.46 L1676.82 1209.46 L1677.41 1209.46 L1677.99 1209.46 L1678.58 1209.46 L1679.17 1209.46 L1679.75 1209.46 L1680.34 1209.46 L1680.92 1209.46 L1681.51 1209.46 L1682.1 1209.46 L1682.68 1209.46 L1683.27 1209.46 L1683.86 1209.46 L1684.44 1209.46 L1685.03 1209.46 L1685.62 1209.46 L1686.2 1209.46 L1686.79 1209.46 L1687.37 1209.46 L1687.96 1209.46 L1688.55 1209.46 L1689.13 1209.46 L1689.72 1209.46 L1690.31 1209.46 L1690.89 1209.46 L1691.48 1209.46 L1692.07 1209.46 L1692.65 1209.46 L1693.24 1209.46 L1693.83 1209.46 L1694.41 1209.46 L1695 1209.46 L1695.58 1209.46 L1696.17 1209.46 L1696.76 1209.46 L1697.34 1209.46 L1697.93 1209.46 L1698.52 1209.46 L1699.1 1209.46 L1699.69 1209.46 L1700.28 1209.46 L1700.86 1209.46 L1701.45 1209.46 L1702.04 1209.46 L1702.62 1209.46 L1703.21 1209.46 L1703.79 1209.46 L1704.38 1209.46 L1704.97 1209.46 L1705.55 1209.46 L1706.14 1209.46 L1706.73 1209.46 L1707.31 1209.46 L1707.9 1209.46 L1708.49 1209.46 L1709.07 1209.46 L1709.66 1209.46 L1710.24 1209.46 L1710.83 1209.46 L1711.42 1209.46 L1712 1209.46 L1712.59 1209.46 L1713.18 1209.46 L1713.76 1209.46 L1714.35 1209.46 L1714.94 1209.46 L1715.52 1209.46 L1716.11 1209.46 L1716.7 1209.46 L1717.28 1209.46 L1717.87 1209.46 L1718.45 1209.46 L1719.04 1209.46 L1719.63 1209.46 L1720.21 1209.46 L1720.8 1209.46 L1721.39 1209.46 L1721.97 1209.46 L1722.56 1209.46 L1723.15 1209.46 L1723.73 1209.46 L1724.32 1209.46 L1724.91 1209.46 L1725.49 1209.46 L1726.08 1209.46 L1726.66 1209.46 L1727.25 1209.46 L1727.84 1209.46 L1728.42 1209.46 L1729.01 1209.46 L1729.6 1209.46 L1730.18 1209.46 L1730.77 1209.46 L1731.36 1209.46 L1731.94 1209.46 L1732.53 1209.46 L1733.11 1209.46 L1733.7 1209.46 L1734.29 1209.46 L1734.87 1209.46 L1735.46 1209.46 L1736.05 1209.46 L1736.63 1209.46 L1737.22 1209.46 L1737.81 1209.46 L1738.39 1209.46 L1738.98 1209.46 L1739.57 1209.46 L1740.15 1209.46 L1740.74 1209.46 L1741.32 1209.46 L1741.91 1209.46 L1742.5 1209.46 L1743.08 1209.46 L1743.67 1209.46 L1744.26 1209.46 L1744.84 1209.46 L1745.43 1209.46 L1746.02 1209.46 L1746.6 1209.46 L1747.19 1209.46 L1747.78 1209.46 L1748.36 1209.46 L1748.95 1209.46 L1749.53 1209.46 L1750.12 1209.46 L1750.71 1209.46 L1751.29 1209.46 L1751.88 1209.46 L1752.47 1209.46 L1753.05 1209.46 L1753.64 1209.46 L1754.23 1209.46 L1754.81 1209.46 L1755.4 1209.46 L1755.99 1209.46 L1756.57 1209.46 L1757.16 1209.46 L1757.74 1209.46 L1758.33 1209.46 L1758.92 1209.46 L1759.5 1209.46 L1760.09 1209.46 L1760.68 1209.46 L1761.26 1209.46 L1761.85 1209.46 L1762.44 1209.46 L1763.02 1209.46 L1763.61 1209.46 L1764.19 1209.46 L1764.78 1209.46 L1765.37 1209.46 L1765.95 1209.46 L1766.54 1209.46 L1767.13 1209.46 L1767.71 1209.46 L1768.3 1209.46 L1768.89 1209.46 L1769.47 1209.46 L1770.06 1209.46 L1770.65 1209.46 L1771.23 1209.46 L1771.82 1209.46 L1772.4 1209.46 L1772.99 1209.46 L1773.58 1209.46 L1774.16 1209.46 L1774.75 1209.46 L1775.34 1209.46 L1775.92 1209.46 L1776.51 1209.46 L1777.1 1209.46 L1777.68 1209.46 L1778.27 1209.46 L1778.86 1209.46 L1779.44 1209.46 L1780.03 1209.46 L1780.61 1209.46 L1781.2 1209.46 L1781.79 1209.46 L1782.37 1209.46 L1782.96 1209.46 L1783.55 1209.46 L1784.13 1209.46 L1784.72 1209.46 L1785.31 1209.46 L1785.89 1209.46 L1786.48 1209.46 L1787.06 1209.46 L1787.65 1209.46 L1788.24 1209.46 L1788.82 1209.46 L1789.41 1209.46 L1790 1209.46 L1790.58 1209.46 L1791.17 1209.46 L1791.76 1209.46 L1792.34 1209.46 L1792.93 1209.46 L1793.52 1209.46 L1794.1 1209.46 L1794.69 1209.46 L1795.27 1209.46 L1795.86 1209.46 L1796.45 1209.46 L1797.03 1209.46 L1797.62 1209.46 L1798.21 1209.46 L1798.79 1209.46 L1799.38 1209.46 L1799.97 1209.46 L1800.55 1209.46 L1801.14 1209.46 L1801.73 1209.46 L1802.31 1209.46 L1802.9 1209.46 L1803.48 1209.46 L1804.07 1209.46 L1804.66 1209.46 L1805.24 1209.46 L1805.83 1209.46 L1806.42 1209.46 L1807 1209.46 L1807.59 1209.46 L1808.18 1209.46 L1808.76 1209.46 L1809.35 1209.46 L1809.94 1209.46 L1810.52 1209.46 L1811.11 1209.46 L1811.69 1209.46 L1812.28 1209.46 L1812.87 1209.46 L1813.45 1209.46 L1814.04 1209.46 L1814.63 1209.46 L1815.21 1209.46 L1815.8 1209.46 L1816.39 1209.46 L1816.97 1209.46 L1817.56 1209.46 L1818.14 1209.46 L1818.73 1209.46 L1819.32 1209.46 L1819.9 1209.46 L1820.49 1209.46 L1821.08 1209.46 L1821.66 1209.46 L1822.25 1209.46 L1822.84 1209.46 L1823.42 1209.46 L1824.01 1209.46 L1824.6 1209.46 L1825.18 1209.46 L1825.77 1209.46 L1826.35 1209.46 L1826.94 1209.46 L1827.53 1209.46 L1828.11 1209.46 L1828.7 1209.46 L1829.29 1209.46 L1829.87 1209.46 L1830.46 1209.46 L1831.05 1209.46 L1831.63 1209.46 L1832.22 1209.46 L1832.81 1209.46 L1833.39 1209.46 L1833.98 1209.46 L1834.56 1209.46 L1835.15 1209.46 L1835.74 1209.46 L1836.32 1209.46 L1836.91 1209.46 L1837.5 1209.46 L1838.08 1209.46 L1838.67 1209.46 L1839.26 1209.46 L1839.84 1209.46 L1840.43 1209.46 L1841.01 1209.46 L1841.6 1209.46 L1842.19 1209.46 L1842.77 1209.46 L1843.36 1209.46 L1843.95 1209.46 L1844.53 1209.46 L1845.12 1209.46 L1845.71 1209.46 L1846.29 1209.46 L1846.88 1209.46 L1847.47 1209.46 L1848.05 1209.46 L1848.64 1209.46 L1849.22 1209.46 L1849.81 1209.46 L1850.4 1209.46 L1850.98 1209.46 L1851.57 1209.46 L1852.16 1209.46 L1852.74 1209.46 L1853.33 1209.46 L1853.92 1209.46 L1854.5 1209.46 L1855.09 1209.46 L1855.68 1209.46 L1856.26 1209.46 L1856.85 1209.46 L1857.43 1209.46 L1858.02 1209.46 L1858.61 1209.46 L1859.19 1209.46 L1859.78 1209.46 L1860.37 1209.46 L1860.95 1209.46 L1861.54 1209.46 L1862.13 1209.46 L1862.71 1209.46 L1863.3 1209.46 L1863.88 1209.46 L1864.47 1209.46 L1865.06 1209.46 L1865.64 1209.46 L1866.23 1209.46 L1866.82 1209.46 L1867.4 1209.46 L1867.99 1209.46 L1868.58 1209.46 L1869.16 1209.46 L1869.75 1209.46 L1870.34 1209.46 L1870.92 1209.46 L1871.51 1209.46 L1872.09 1209.46 L1872.68 1209.46 L1873.27 1209.46 L1873.85 1209.46 L1874.44 1209.46 L1875.03 1209.46 L1875.61 1209.46 L1876.2 1209.46 L1876.79 1209.46 L1877.37 1209.46 L1877.96 1209.46 L1878.55 1209.46 L1879.13 1209.46 L1879.72 1209.46 L1880.3 1209.46 L1880.89 1209.46 L1881.48 1209.46 L1882.06 1209.46 L1882.65 1209.46 L1883.24 1209.46 L1883.82 1209.46 L1884.41 1209.46 L1885 1209.46 L1885.58 1209.46 L1886.17 1209.46 L1886.76 1209.46 L1887.34 1209.46 L1887.93 1209.46 L1888.51 1209.46 L1889.1 1209.46 L1889.69 1209.46 L1890.27 1209.46 L1890.86 1209.46 L1891.45 1209.46 L1892.03 1209.46 L1892.62 1209.46 L1893.21 1209.46 L1893.79 1209.46 L1894.38 1209.46 L1894.96 1209.46 L1895.55 1209.46 L1896.14 1209.46 L1896.72 1209.46 L1897.31 1209.46 L1897.9 1209.46 L1898.48 1209.46 L1899.07 1209.46 L1899.66 1209.46 L1900.24 1209.46 L1900.83 1209.46 L1901.42 1209.46 L1902 1209.46 L1902.59 1209.46 L1903.17 1209.46 L1903.76 1209.46 L1904.35 1209.46 L1904.93 1209.46 L1905.52 1209.46 L1906.11 1209.46 L1906.69 1209.46 L1907.28 1209.46 L1907.87 1209.46 L1908.45 1209.46 L1909.04 1209.46 L1909.63 1209.46 L1910.21 1209.46 L1910.8 1209.46 L1911.38 1209.46 L1911.97 1209.46 L1912.56 1209.46 L1913.14 1209.46 L1913.73 1209.46 L1914.32 1209.46 L1914.9 1209.46 L1915.49 1209.46 L1916.08 1209.46 L1916.66 1209.46 L1917.25 1209.46 L1917.83 1209.46 L1918.42 1209.46 L1919.01 1209.46 L1919.59 1209.46 L1920.18 1209.46 L1920.77 1209.46 L1921.35 1209.46 L1921.94 1209.46 L1922.53 1209.46 L1923.11 1209.46 L1923.7 1209.46 L1924.29 1209.46 L1924.87 1209.46 L1925.46 1209.46 L1926.04 1209.46 L1926.63 1209.46 L1927.22 1209.46 L1927.8 1209.46 L1928.39 1209.46 L1928.98 1209.46 L1929.56 1209.46 L1930.15 1209.46 L1930.74 1209.46 L1931.32 1209.46 L1931.91 1209.46 L1932.5 1209.46 L1933.08 1209.46 L1933.67 1209.46 L1934.25 1209.46 L1934.84 1209.46 L1935.43 1209.46 L1936.01 1209.46 L1936.6 1209.46 L1937.19 1209.46 L1937.77 1209.46 L1938.36 1209.46 L1938.95 1209.46 L1939.53 1209.46 L1940.12 1209.46 L1940.71 1209.46 L1941.29 1209.46 L1941.88 1209.46 L1942.46 1209.46 L1943.05 1209.46 L1943.64 1209.46 L1944.22 1209.46 L1944.81 1209.46 L1945.4 1209.46 L1945.98 1209.46 L1946.57 1209.46 L1947.16 1209.46 L1947.74 1209.46 L1948.33 1209.46 L1948.91 1209.46 L1949.5 1209.46 L1950.09 1209.46 L1950.67 1209.46 L1951.26 1209.46 L1951.85 1209.46 L1952.43 1209.46 L1953.02 1209.46 L1953.61 1209.46 L1954.19 1209.46 L1954.78 1209.46 L1955.37 1209.46 L1955.95 1209.46 L1956.54 1209.46 L1957.12 1209.46 L1957.71 1209.46 L1958.3 1209.46 L1958.88 1209.46 L1959.47 1209.46 L1960.06 1209.46 L1960.64 1209.46 L1961.23 1209.46 L1961.82 1209.46 L1962.4 1209.46 L1962.99 1209.46 L1963.58 1209.46 L1964.16 1209.46 L1964.75 1209.46 L1965.33 1209.46 L1965.92 1209.46 L1966.51 1209.46 L1967.09 1209.46 L1967.68 1209.46 L1968.27 1209.46 L1968.85 1209.46 L1969.44 1209.46 L1970.03 1209.46 L1970.61 1209.46 L1971.2 1209.46 L1971.78 1209.46 L1972.37 1209.46 L1972.96 1209.46 L1973.54 1209.46 L1974.13 1209.46 L1974.72 1209.46 L1975.3 1209.46 L1975.89 1209.46 L1976.48 1209.46 L1977.06 1209.46 L1977.65 1209.46 L1978.24 1209.46 L1978.82 1209.46 L1979.41 1209.46 L1979.99 1209.46 L1980.58 1209.46 L1981.17 1209.46 L1981.75 1209.46 L1982.34 1209.46 L1982.93 1209.46 L1983.51 1209.46 L1984.1 1209.46 L1984.69 1209.46 L1985.27 1209.46 L1985.86 1209.46 L1986.45 1209.46 L1987.03 1209.46 L1987.62 1209.46 L1988.2 1209.46 L1988.79 1209.46 L1989.38 1209.46 L1989.96 1209.46 L1990.55 1209.46 L1991.14 1209.46 L1991.72 1209.46 L1992.31 1209.46 L1992.9 1209.46 L1993.48 1209.46 L1994.07 1209.46 L1994.65 1209.46 L1995.24 1209.46 L1995.83 1209.46 L1996.41 1209.46 L1997 1209.46 L1997.59 1209.46 L1998.17 1209.46 L1998.76 1209.46 L1999.35 1209.46 L1999.93 1209.46 L2000.52 1209.46 L2001.11 1209.46 L2001.69 1209.46 L2002.28 1209.46 L2002.86 1209.46 L2003.45 1209.46 L2004.04 1209.46 L2004.62 1209.46 L2005.21 1209.46 L2005.8 1209.46 L2006.38 1209.46 L2006.97 1209.46 L2007.56 1209.46 L2008.14 1209.46 L2008.73 1209.46 L2009.32 1209.46 L2009.9 1209.46 L2010.49 1209.46 L2011.07 1209.46 L2011.66 1209.46 L2012.25 1209.46 L2012.83 1209.46 L2013.42 1209.46 L2014.01 1209.46 L2014.59 1209.46 L2015.18 1209.46 L2015.77 1209.46 L2016.35 1209.46 L2016.94 1209.46 L2017.53 1209.46 L2018.11 1209.46 L2018.7 1209.46 L2019.28 1209.46 L2019.87 1209.46 L2020.46 1209.46 L2021.04 1209.46 L2021.63 1209.46 L2022.22 1209.46 L2022.8 1209.46 L2023.39 1209.46 L2023.98 1209.46 L2024.56 1209.46 L2025.15 1209.46 L2025.73 1209.46 L2026.32 1209.46 L2026.91 1209.46 L2027.49 1209.46 L2028.08 1209.46 L2028.67 1209.46 L2029.25 1209.46 L2029.84 1209.46 L2030.43 1209.46 L2031.01 1209.46 L2031.6 1209.46 L2032.19 1209.46 L2032.77 1209.46 L2033.36 1209.46 L2033.94 1209.46 L2034.53 1209.46 L2035.12 1209.46 L2035.7 1209.46 L2036.29 1209.46 L2036.88 1209.46 L2037.46 1209.46 L2038.05 1209.46 L2038.64 1209.46 L2039.22 1209.46 L2039.81 1209.46 L2040.4 1209.46 L2040.98 1209.46 L2041.57 1209.46 L2042.15 1209.46 L2042.74 1209.46 L2043.33 1209.46 L2043.91 1209.46 L2044.5 1209.46 L2045.09 1209.46 L2045.67 1209.46 L2046.26 1209.46 L2046.85 1209.46 L2047.43 1209.46 L2048.02 1209.46 L2048.6 1209.46 L2049.19 1209.46 L2049.78 1209.46 L2050.36 1209.46 L2050.95 1209.46 L2051.54 1209.46 L2052.12 1209.46 L2052.71 1209.46 L2053.3 1209.46 L2053.88 1209.46 L2054.47 1209.46 L2055.06 1209.46 L2055.64 1209.46 L2056.23 1209.46 L2056.81 1209.46 L2057.4 1209.46 L2057.99 1209.46 L2058.57 1209.46 L2059.16 1209.46 L2059.75 1209.46 L2060.33 1209.46 L2060.92 1209.46 L2061.51 1209.46 L2062.09 1209.46 L2062.68 1209.46 L2063.27 1209.46 L2063.85 1209.46 L2064.44 1209.46 L2065.02 1209.46 L2065.61 1209.46 L2066.2 1209.46 L2066.78 1209.46 L2067.37 1209.46 L2067.96 1209.46 L2068.54 1209.46 L2069.13 1209.46 L2069.72 1209.46 L2070.3 1209.46 L2070.89 1209.46 L2071.48 1209.46 L2072.06 1209.46 L2072.65 1209.46 L2073.23 1209.46 L2073.82 1209.46 L2074.41 1209.46 L2074.99 1209.46 L2075.58 1209.46 L2076.17 1209.46 L2076.75 1209.46 L2077.34 1209.46 L2077.93 1209.46 L2078.51 1209.46 L2079.1 1209.46 L2079.68 1209.46 L2080.27 1209.46 L2080.86 1209.46 L2081.44 1209.46 L2082.03 1209.46 L2082.62 1209.46 L2083.2 1209.46 L2083.79 1209.46 L2084.38 1209.46 L2084.96 1209.46 L2085.55 1209.46 L2086.14 1209.46 L2086.72 1209.46 L2087.31 1209.46 L2087.89 1209.46 L2088.48 1209.46 L2089.07 1209.46 L2089.65 1209.46 L2090.24 1209.46 L2090.83 1209.46 L2091.41 1209.46 L2092 1209.46 L2092.59 1209.46 L2093.17 1209.46 L2093.76 1209.46 L2094.35 1209.46 L2094.93 1209.46 L2095.52 1209.46 L2096.1 1209.46 L2096.69 1209.46 L2097.28 1209.46 L2097.86 1209.46 L2098.45 1209.46 L2099.04 1209.46 L2099.62 1209.46 L2100.21 1209.46 L2100.8 1209.46 L2101.38 1209.46 L2101.97 1209.46 L2102.55 1209.46 L2103.14 1209.46 L2103.73 1209.46 L2104.31 1209.46 L2104.9 1209.46 L2105.49 1209.46 L2106.07 1209.46 L2106.66 1209.46 L2107.25 1209.46 L2107.83 1209.46 L2108.42 1209.46 L2109.01 1209.46 L2109.59 1209.46 L2110.18 1209.46 L2110.76 1209.46 L2111.35 1209.46 L2111.94 1209.46 L2112.52 1209.46 L2113.11 1209.46 L2113.7 1209.46 L2114.28 1209.46 L2114.87 1209.46 L2115.46 1209.46 L2116.04 1209.46 L2116.63 1209.46 L2117.22 1209.46 L2117.8 1209.46 L2118.39 1209.46 L2118.97 1209.46 L2119.56 1209.46 L2120.15 1209.46 L2120.73 1209.46 L2121.32 1209.46 L2121.91 1209.46 L2122.49 1209.46 L2123.08 1209.46 L2123.67 1209.46 L2124.25 1209.46 L2124.84 1209.46 L2125.42 1209.46 L2126.01 1209.46 L2126.6 1209.46 L2127.18 1209.46 L2127.77 1209.46 L2128.36 1209.46 L2128.94 1209.46 L2129.53 1209.46 L2130.12 1209.46 L2130.7 1209.46 L2131.29 1209.46 L2131.88 1209.46 L2132.46 1209.46 L2133.05 1209.46 L2133.63 1209.46 L2134.22 1209.46 L2134.81 1209.46 L2135.39 1209.46 L2135.98 1209.46 L2136.57 1209.46 L2137.15 1209.46 L2137.74 1209.46 L2138.33 1209.46 L2138.91 1209.46 L2139.5 1209.46 L2140.09 1209.46 L2140.67 1209.46 L2141.26 1209.46 L2141.84 1209.46 L2142.43 1209.46 L2143.02 1209.46 L2143.6 1209.46 L2144.19 1209.46 L2144.78 1209.46 L2145.36 1209.46 L2145.95 1209.46 L2146.54 1209.46 L2147.12 1209.46 L2147.71 1209.46 L2148.3 1209.46 L2148.88 1209.46 L2149.47 1209.46 L2150.05 1209.46 L2150.64 1209.46 L2151.23 1209.46 L2151.81 1209.46 L2152.4 1209.46 L2152.99 1209.46 L2153.57 1209.46 L2154.16 1209.46 L2154.75 1209.46 L2155.33 1209.46 L2155.92 1209.46 L2156.5 1209.46 L2157.09 1209.46 L2157.68 1209.46 L2158.26 1209.46 L2158.26 1209.3 L2157.68 1209.3 L2157.09 1209.3 L2156.5 1209.3 L2155.92 1209.3 L2155.33 1209.3 L2154.75 1209.3 L2154.16 1209.3 L2153.57 1209.3 L2152.99 1209.3 L2152.4 1209.3 L2151.81 1209.3 L2151.23 1209.3 L2150.64 1209.3 L2150.05 1209.3 L2149.47 1209.3 L2148.88 1209.3 L2148.3 1209.3 L2147.71 1209.3 L2147.12 1209.3 L2146.54 1209.3 L2145.95 1209.3 L2145.36 1209.3 L2144.78 1209.3 L2144.19 1209.3 L2143.6 1209.3 L2143.02 1209.3 L2142.43 1209.3 L2141.84 1209.3 L2141.26 1209.3 L2140.67 1209.3 L2140.09 1209.3 L2139.5 1209.3 L2138.91 1209.3 L2138.33 1209.3 L2137.74 1209.3 L2137.15 1209.3 L2136.57 1209.3 L2135.98 1209.3 L2135.39 1209.3 L2134.81 1209.3 L2134.22 1209.3 L2133.63 1209.3 L2133.05 1209.3 L2132.46 1209.3 L2131.88 1209.3 L2131.29 1209.3 L2130.7 1209.3 L2130.12 1209.3 L2129.53 1209.3 L2128.94 1209.3 L2128.36 1209.3 L2127.77 1209.3 L2127.18 1209.3 L2126.6 1209.3 L2126.01 1209.3 L2125.42 1209.3 L2124.84 1209.3 L2124.25 1209.3 L2123.67 1209.3 L2123.08 1209.3 L2122.49 1209.3 L2121.91 1209.3 L2121.32 1209.3 L2120.73 1209.3 L2120.15 1209.3 L2119.56 1209.3 L2118.97 1209.3 L2118.39 1209.3 L2117.8 1209.3 L2117.22 1209.3 L2116.63 1209.3 L2116.04 1209.3 L2115.46 1209.3 L2114.87 1209.3 L2114.28 1209.3 L2113.7 1209.3 L2113.11 1209.3 L2112.52 1209.3 L2111.94 1209.3 L2111.35 1209.3 L2110.76 1209.3 L2110.18 1209.3 L2109.59 1209.3 L2109.01 1209.3 L2108.42 1209.3 L2107.83 1209.3 L2107.25 1209.3 L2106.66 1209.3 L2106.07 1209.3 L2105.49 1209.3 L2104.9 1209.3 L2104.31 1209.3 L2103.73 1209.3 L2103.14 1209.3 L2102.55 1209.3 L2101.97 1209.3 L2101.38 1209.3 L2100.8 1209.3 L2100.21 1209.3 L2099.62 1209.3 L2099.04 1209.3 L2098.45 1209.3 L2097.86 1209.3 L2097.28 1209.3 L2096.69 1209.3 L2096.1 1209.3 L2095.52 1209.3 L2094.93 1209.3 L2094.35 1209.3 L2093.76 1209.3 L2093.17 1209.3 L2092.59 1209.3 L2092 1209.3 L2091.41 1209.3 L2090.83 1209.3 L2090.24 1209.3 L2089.65 1209.3 L2089.07 1209.3 L2088.48 1209.3 L2087.89 1209.3 L2087.31 1209.3 L2086.72 1209.3 L2086.14 1209.3 L2085.55 1209.3 L2084.96 1209.3 L2084.38 1209.3 L2083.79 1209.3 L2083.2 1209.3 L2082.62 1209.3 L2082.03 1209.3 L2081.44 1209.3 L2080.86 1209.3 L2080.27 1209.3 L2079.68 1209.3 L2079.1 1209.3 L2078.51 1209.3 L2077.93 1209.3 L2077.34 1209.3 L2076.75 1209.3 L2076.17 1209.3 L2075.58 1209.3 L2074.99 1209.3 L2074.41 1209.3 L2073.82 1209.3 L2073.23 1209.3 L2072.65 1209.3 L2072.06 1209.3 L2071.48 1209.3 L2070.89 1209.3 L2070.3 1209.3 L2069.72 1209.3 L2069.13 1209.3 L2068.54 1209.3 L2067.96 1209.3 L2067.37 1209.3 L2066.78 1209.3 L2066.2 1209.3 L2065.61 1209.3 L2065.02 1209.3 L2064.44 1209.3 L2063.85 1209.3 L2063.27 1209.3 L2062.68 1209.3 L2062.09 1209.3 L2061.51 1209.3 L2060.92 1209.3 L2060.33 1209.3 L2059.75 1209.3 L2059.16 1209.3 L2058.57 1209.3 L2057.99 1209.3 L2057.4 1209.3 L2056.81 1209.3 L2056.23 1209.3 L2055.64 1209.3 L2055.06 1209.3 L2054.47 1209.3 L2053.88 1209.3 L2053.3 1209.3 L2052.71 1209.3 L2052.12 1209.3 L2051.54 1209.3 L2050.95 1209.3 L2050.36 1209.3 L2049.78 1209.3 L2049.19 1209.3 L2048.6 1209.3 L2048.02 1209.3 L2047.43 1209.3 L2046.85 1209.3 L2046.26 1209.3 L2045.67 1209.3 L2045.09 1209.3 L2044.5 1209.3 L2043.91 1209.3 L2043.33 1209.3 L2042.74 1209.3 L2042.15 1209.3 L2041.57 1209.3 L2040.98 1209.3 L2040.4 1209.3 L2039.81 1209.3 L2039.22 1209.3 L2038.64 1209.3 L2038.05 1209.3 L2037.46 1209.3 L2036.88 1209.3 L2036.29 1209.3 L2035.7 1209.3 L2035.12 1209.3 L2034.53 1209.3 L2033.94 1209.3 L2033.36 1209.3 L2032.77 1209.3 L2032.19 1209.3 L2031.6 1209.3 L2031.01 1209.3 L2030.43 1209.3 L2029.84 1209.3 L2029.25 1209.3 L2028.67 1209.3 L2028.08 1209.3 L2027.49 1209.3 L2026.91 1209.3 L2026.32 1209.3 L2025.73 1209.3 L2025.15 1209.3 L2024.56 1209.3 L2023.98 1209.3 L2023.39 1209.3 L2022.8 1209.3 L2022.22 1209.3 L2021.63 1209.3 L2021.04 1209.3 L2020.46 1209.3 L2019.87 1209.3 L2019.28 1209.3 L2018.7 1209.3 L2018.11 1209.3 L2017.53 1209.3 L2016.94 1209.3 L2016.35 1209.3 L2015.77 1209.3 L2015.18 1209.3 L2014.59 1209.3 L2014.01 1209.3 L2013.42 1209.3 L2012.83 1209.3 L2012.25 1209.3 L2011.66 1209.3 L2011.07 1209.3 L2010.49 1209.3 L2009.9 1209.3 L2009.32 1209.3 L2008.73 1209.3 L2008.14 1209.3 L2007.56 1209.3 L2006.97 1209.3 L2006.38 1209.3 L2005.8 1209.3 L2005.21 1209.3 L2004.62 1209.3 L2004.04 1209.3 L2003.45 1209.3 L2002.86 1209.3 L2002.28 1209.3 L2001.69 1209.3 L2001.11 1209.3 L2000.52 1209.3 L1999.93 1209.3 L1999.35 1209.3 L1998.76 1209.3 L1998.17 1209.3 L1997.59 1209.3 L1997 1209.3 L1996.41 1209.3 L1995.83 1209.3 L1995.24 1209.3 L1994.65 1209.3 L1994.07 1209.3 L1993.48 1209.3 L1992.9 1209.3 L1992.31 1209.3 L1991.72 1209.3 L1991.14 1209.3 L1990.55 1209.3 L1989.96 1209.3 L1989.38 1209.3 L1988.79 1209.3 L1988.2 1209.3 L1987.62 1209.3 L1987.03 1209.3 L1986.45 1209.3 L1985.86 1209.3 L1985.27 1209.3 L1984.69 1209.3 L1984.1 1209.3 L1983.51 1209.3 L1982.93 1209.3 L1982.34 1209.3 L1981.75 1209.3 L1981.17 1209.3 L1980.58 1209.3 L1979.99 1209.3 L1979.41 1209.3 L1978.82 1209.3 L1978.24 1209.3 L1977.65 1209.3 L1977.06 1209.3 L1976.48 1209.3 L1975.89 1209.3 L1975.3 1209.3 L1974.72 1209.3 L1974.13 1209.3 L1973.54 1209.3 L1972.96 1209.3 L1972.37 1209.3 L1971.78 1209.3 L1971.2 1209.3 L1970.61 1209.3 L1970.03 1209.3 L1969.44 1209.3 L1968.85 1209.3 L1968.27 1209.3 L1967.68 1209.3 L1967.09 1209.3 L1966.51 1209.3 L1965.92 1209.3 L1965.33 1209.3 L1964.75 1209.3 L1964.16 1209.3 L1963.58 1209.3 L1962.99 1209.3 L1962.4 1209.3 L1961.82 1209.3 L1961.23 1209.3 L1960.64 1209.3 L1960.06 1209.3 L1959.47 1209.3 L1958.88 1209.3 L1958.3 1209.3 L1957.71 1209.3 L1957.12 1209.3 L1956.54 1209.3 L1955.95 1209.3 L1955.37 1209.3 L1954.78 1209.3 L1954.19 1209.3 L1953.61 1209.3 L1953.02 1209.3 L1952.43 1209.3 L1951.85 1209.3 L1951.26 1209.3 L1950.67 1209.3 L1950.09 1209.3 L1949.5 1209.3 L1948.91 1209.3 L1948.33 1209.3 L1947.74 1209.3 L1947.16 1209.3 L1946.57 1209.3 L1945.98 1209.3 L1945.4 1209.3 L1944.81 1209.3 L1944.22 1209.3 L1943.64 1209.3 L1943.05 1209.3 L1942.46 1209.3 L1941.88 1209.3 L1941.29 1209.3 L1940.71 1209.3 L1940.12 1209.3 L1939.53 1209.3 L1938.95 1209.3 L1938.36 1209.3 L1937.77 1209.3 L1937.19 1209.3 L1936.6 1209.3 L1936.01 1209.3 L1935.43 1209.3 L1934.84 1209.3 L1934.25 1209.3 L1933.67 1209.3 L1933.08 1209.3 L1932.5 1209.3 L1931.91 1209.3 L1931.32 1209.3 L1930.74 1209.3 L1930.15 1209.3 L1929.56 1209.3 L1928.98 1209.3 L1928.39 1209.3 L1927.8 1209.3 L1927.22 1209.3 L1926.63 1209.3 L1926.04 1209.3 L1925.46 1209.3 L1924.87 1209.3 L1924.29 1209.3 L1923.7 1209.3 L1923.11 1209.3 L1922.53 1209.3 L1921.94 1209.3 L1921.35 1209.3 L1920.77 1209.3 L1920.18 1209.3 L1919.59 1209.3 L1919.01 1209.3 L1918.42 1209.3 L1917.83 1209.3 L1917.25 1209.3 L1916.66 1209.3 L1916.08 1209.3 L1915.49 1209.3 L1914.9 1209.3 L1914.32 1209.3 L1913.73 1209.3 L1913.14 1209.3 L1912.56 1209.3 L1911.97 1209.3 L1911.38 1209.3 L1910.8 1209.3 L1910.21 1209.3 L1909.63 1209.3 L1909.04 1209.3 L1908.45 1209.3 L1907.87 1209.3 L1907.28 1209.3 L1906.69 1209.3 L1906.11 1209.3 L1905.52 1209.3 L1904.93 1209.3 L1904.35 1209.3 L1903.76 1209.3 L1903.17 1209.3 L1902.59 1209.3 L1902 1209.3 L1901.42 1209.3 L1900.83 1209.3 L1900.24 1209.3 L1899.66 1209.3 L1899.07 1209.3 L1898.48 1209.3 L1897.9 1209.3 L1897.31 1209.3 L1896.72 1209.3 L1896.14 1209.3 L1895.55 1209.3 L1894.96 1209.3 L1894.38 1209.3 L1893.79 1209.3 L1893.21 1209.3 L1892.62 1209.3 L1892.03 1209.3 L1891.45 1209.3 L1890.86 1209.3 L1890.27 1209.3 L1889.69 1209.3 L1889.1 1209.3 L1888.51 1209.3 L1887.93 1209.3 L1887.34 1209.3 L1886.76 1209.3 L1886.17 1209.3 L1885.58 1209.3 L1885 1209.3 L1884.41 1209.3 L1883.82 1209.3 L1883.24 1209.3 L1882.65 1209.3 L1882.06 1209.3 L1881.48 1209.3 L1880.89 1209.3 L1880.3 1209.3 L1879.72 1209.3 L1879.13 1209.3 L1878.55 1209.3 L1877.96 1209.3 L1877.37 1209.3 L1876.79 1209.3 L1876.2 1209.3 L1875.61 1209.3 L1875.03 1209.3 L1874.44 1209.3 L1873.85 1209.3 L1873.27 1209.3 L1872.68 1209.3 L1872.09 1209.3 L1871.51 1209.3 L1870.92 1209.3 L1870.34 1209.3 L1869.75 1209.3 L1869.16 1209.3 L1868.58 1209.3 L1867.99 1209.3 L1867.4 1209.3 L1866.82 1209.3 L1866.23 1209.3 L1865.64 1209.3 L1865.06 1209.3 L1864.47 1209.3 L1863.88 1209.3 L1863.3 1209.3 L1862.71 1209.3 L1862.13 1209.3 L1861.54 1209.3 L1860.95 1209.3 L1860.37 1209.3 L1859.78 1209.3 L1859.19 1209.3 L1858.61 1209.3 L1858.02 1209.3 L1857.43 1209.3 L1856.85 1209.3 L1856.26 1209.3 L1855.68 1209.3 L1855.09 1209.3 L1854.5 1209.3 L1853.92 1209.3 L1853.33 1209.3 L1852.74 1209.3 L1852.16 1209.3 L1851.57 1209.3 L1850.98 1209.3 L1850.4 1209.3 L1849.81 1209.3 L1849.22 1209.3 L1848.64 1209.3 L1848.05 1209.3 L1847.47 1209.3 L1846.88 1209.3 L1846.29 1209.3 L1845.71 1209.3 L1845.12 1209.3 L1844.53 1209.3 L1843.95 1209.3 L1843.36 1209.3 L1842.77 1209.3 L1842.19 1209.3 L1841.6 1209.3 L1841.01 1209.3 L1840.43 1209.3 L1839.84 1209.3 L1839.26 1209.3 L1838.67 1209.3 L1838.08 1209.3 L1837.5 1209.3 L1836.91 1209.3 L1836.32 1209.3 L1835.74 1209.3 L1835.15 1209.3 L1834.56 1209.3 L1833.98 1209.3 L1833.39 1209.3 L1832.81 1209.3 L1832.22 1209.3 L1831.63 1209.3 L1831.05 1209.3 L1830.46 1209.3 L1829.87 1209.3 L1829.29 1209.3 L1828.7 1209.3 L1828.11 1209.3 L1827.53 1209.3 L1826.94 1209.3 L1826.35 1209.3 L1825.77 1209.3 L1825.18 1209.3 L1824.6 1209.3 L1824.01 1209.3 L1823.42 1209.3 L1822.84 1209.3 L1822.25 1209.3 L1821.66 1209.3 L1821.08 1209.3 L1820.49 1209.3 L1819.9 1209.3 L1819.32 1209.3 L1818.73 1209.3 L1818.14 1209.3 L1817.56 1209.3 L1816.97 1209.3 L1816.39 1209.3 L1815.8 1209.3 L1815.21 1209.3 L1814.63 1209.3 L1814.04 1209.3 L1813.45 1209.3 L1812.87 1209.3 L1812.28 1209.3 L1811.69 1209.3 L1811.11 1209.3 L1810.52 1209.3 L1809.94 1209.3 L1809.35 1209.3 L1808.76 1209.3 L1808.18 1209.3 L1807.59 1209.3 L1807 1209.3 L1806.42 1209.3 L1805.83 1209.3 L1805.24 1209.3 L1804.66 1209.3 L1804.07 1209.3 L1803.48 1209.3 L1802.9 1209.3 L1802.31 1209.3 L1801.73 1209.3 L1801.14 1209.3 L1800.55 1209.3 L1799.97 1209.3 L1799.38 1209.3 L1798.79 1209.3 L1798.21 1209.3 L1797.62 1209.3 L1797.03 1209.3 L1796.45 1209.3 L1795.86 1209.3 L1795.27 1209.3 L1794.69 1209.3 L1794.1 1209.3 L1793.52 1209.3 L1792.93 1209.3 L1792.34 1209.3 L1791.76 1209.3 L1791.17 1209.3 L1790.58 1209.3 L1790 1209.3 L1789.41 1209.3 L1788.82 1209.3 L1788.24 1209.3 L1787.65 1209.3 L1787.06 1209.3 L1786.48 1209.3 L1785.89 1209.3 L1785.31 1209.3 L1784.72 1209.3 L1784.13 1209.3 L1783.55 1209.3 L1782.96 1209.3 L1782.37 1209.3 L1781.79 1209.3 L1781.2 1209.3 L1780.61 1209.3 L1780.03 1209.3 L1779.44 1209.3 L1778.86 1209.3 L1778.27 1209.3 L1777.68 1209.3 L1777.1 1209.3 L1776.51 1209.3 L1775.92 1209.3 L1775.34 1209.3 L1774.75 1209.3 L1774.16 1209.3 L1773.58 1209.3 L1772.99 1209.3 L1772.4 1209.3 L1771.82 1209.3 L1771.23 1209.3 L1770.65 1209.3 L1770.06 1209.3 L1769.47 1209.3 L1768.89 1209.3 L1768.3 1209.3 L1767.71 1209.3 L1767.13 1209.3 L1766.54 1209.3 L1765.95 1209.3 L1765.37 1209.3 L1764.78 1209.3 L1764.19 1209.3 L1763.61 1209.3 L1763.02 1209.3 L1762.44 1209.3 L1761.85 1209.3 L1761.26 1209.3 L1760.68 1209.3 L1760.09 1209.3 L1759.5 1209.3 L1758.92 1209.3 L1758.33 1209.3 L1757.74 1209.3 L1757.16 1209.3 L1756.57 1209.3 L1755.99 1209.3 L1755.4 1209.3 L1754.81 1209.3 L1754.23 1209.3 L1753.64 1209.3 L1753.05 1209.3 L1752.47 1209.3 L1751.88 1209.3 L1751.29 1209.3 L1750.71 1209.3 L1750.12 1209.3 L1749.53 1209.3 L1748.95 1209.3 L1748.36 1209.3 L1747.78 1209.3 L1747.19 1209.3 L1746.6 1209.3 L1746.02 1209.3 L1745.43 1209.3 L1744.84 1209.3 L1744.26 1209.3 L1743.67 1209.3 L1743.08 1209.3 L1742.5 1209.3 L1741.91 1209.3 L1741.32 1209.3 L1740.74 1209.3 L1740.15 1209.3 L1739.57 1209.3 L1738.98 1209.3 L1738.39 1209.3 L1737.81 1209.3 L1737.22 1209.3 L1736.63 1209.3 L1736.05 1209.3 L1735.46 1209.3 L1734.87 1209.3 L1734.29 1209.3 L1733.7 1209.3 L1733.11 1209.3 L1732.53 1209.3 L1731.94 1209.3 L1731.36 1209.3 L1730.77 1209.3 L1730.18 1209.3 L1729.6 1209.3 L1729.01 1209.3 L1728.42 1209.3 L1727.84 1209.3 L1727.25 1209.3 L1726.66 1209.3 L1726.08 1209.3 L1725.49 1209.3 L1724.91 1209.3 L1724.32 1209.3 L1723.73 1209.3 L1723.15 1209.3 L1722.56 1209.3 L1721.97 1209.3 L1721.39 1209.3 L1720.8 1209.3 L1720.21 1209.3 L1719.63 1209.3 L1719.04 1209.3 L1718.45 1209.3 L1717.87 1209.3 L1717.28 1209.3 L1716.7 1209.3 L1716.11 1209.3 L1715.52 1209.3 L1714.94 1209.3 L1714.35 1209.3 L1713.76 1209.3 L1713.18 1209.3 L1712.59 1209.3 L1712 1209.3 L1711.42 1209.3 L1710.83 1209.3 L1710.24 1209.3 L1709.66 1209.3 L1709.07 1209.3 L1708.49 1209.3 L1707.9 1209.3 L1707.31 1209.3 L1706.73 1209.3 L1706.14 1209.3 L1705.55 1209.3 L1704.97 1209.3 L1704.38 1209.3 L1703.79 1209.3 L1703.21 1209.3 L1702.62 1209.3 L1702.04 1209.3 L1701.45 1209.3 L1700.86 1209.3 L1700.28 1209.3 L1699.69 1209.3 L1699.1 1209.3 L1698.52 1209.3 L1697.93 1209.3 L1697.34 1209.3 L1696.76 1209.3 L1696.17 1209.3 L1695.58 1209.3 L1695 1209.3 L1694.41 1209.3 L1693.83 1209.3 L1693.24 1209.3 L1692.65 1209.3 L1692.07 1209.3 L1691.48 1209.3 L1690.89 1209.3 L1690.31 1209.3 L1689.72 1209.3 L1689.13 1209.3 L1688.55 1209.3 L1687.96 1209.3 L1687.37 1209.3 L1686.79 1209.3 L1686.2 1209.3 L1685.62 1209.3 L1685.03 1209.3 L1684.44 1209.3 L1683.86 1209.3 L1683.27 1209.3 L1682.68 1209.3 L1682.1 1209.3 L1681.51 1209.3 L1680.92 1209.3 L1680.34 1209.3 L1679.75 1209.3 L1679.17 1209.3 L1678.58 1209.3 L1677.99 1209.3 L1677.41 1209.3 L1676.82 1209.3 L1676.23 1209.3 L1675.65 1209.3 L1675.06 1209.3 L1674.47 1209.3 L1673.89 1209.3 L1673.3 1209.3 L1672.71 1209.3 L1672.13 1209.3 L1671.54 1209.3 L1670.96 1209.3 L1670.37 1209.3 L1669.78 1209.3 L1669.2 1209.3 L1668.61 1209.3 L1668.02 1209.3 L1667.44 1209.3 L1666.85 1209.3 L1666.26 1209.3 L1665.68 1209.3 L1665.09 1209.3 L1664.5 1209.3 L1663.92 1209.3 L1663.33 1209.3 L1662.75 1209.3 L1662.16 1209.3 L1661.57 1209.3 L1660.99 1209.3 L1660.4 1209.3 L1659.81 1209.3 L1659.23 1209.3 L1658.64 1209.3 L1658.05 1209.3 L1657.47 1209.3 L1656.88 1209.3 L1656.29 1209.3 L1655.71 1209.3 L1655.12 1209.3 L1654.54 1209.3 L1653.95 1209.3 L1653.36 1209.3 L1652.78 1209.3 L1652.19 1209.3 L1651.6 1209.3 L1651.02 1209.3 L1650.43 1209.3 L1649.84 1209.3 L1649.26 1209.3 L1648.67 1209.3 L1648.09 1209.3 L1647.5 1209.3 L1646.91 1209.3 L1646.33 1209.3 L1645.74 1209.3 L1645.15 1209.3 L1644.57 1209.3 L1643.98 1209.3 L1643.39 1209.3 L1642.81 1209.3 L1642.22 1209.3 L1641.63 1209.3 L1641.05 1209.3 L1640.46 1209.3 L1639.88 1209.3 L1639.29 1209.3 L1638.7 1209.3 L1638.12 1209.3 L1637.53 1209.3 L1636.94 1209.3 L1636.36 1209.3 L1635.77 1209.3 L1635.18 1209.3 L1634.6 1209.3 L1634.01 1209.3 L1633.42 1209.3 L1632.84 1209.3 L1632.25 1209.3 L1631.67 1209.3 L1631.08 1209.3 L1630.49 1209.3 L1629.91 1209.3 L1629.32 1209.3 L1628.73 1209.3 L1628.15 1209.3 L1627.56 1209.3 L1626.97 1209.3 L1626.39 1209.3 L1625.8 1209.3 L1625.22 1209.3 L1624.63 1209.3 L1624.04 1209.3 L1623.46 1209.3 L1622.87 1209.3 L1622.28 1209.3 L1621.7 1209.3 L1621.11 1209.3 L1620.52 1209.3 L1619.94 1209.3 L1619.35 1209.3 L1618.76 1209.3 L1618.18 1209.3 L1617.59 1209.3 L1617.01 1209.3 L1616.42 1209.3 L1615.83 1209.3 L1615.25 1209.3 L1614.66 1209.3 L1614.07 1209.3 L1613.49 1209.3 L1612.9 1209.3 L1612.31 1209.3 L1611.73 1209.3 L1611.14 1209.3 L1610.55 1209.3 L1609.97 1209.3 L1609.38 1209.3 L1608.8 1209.3 L1608.21 1209.3 L1607.62 1209.3 L1607.04 1209.3 L1606.45 1209.3 L1605.86 1209.3 L1605.28 1209.3 L1604.69 1209.3 L1604.1 1209.3 L1603.52 1209.3 L1602.93 1209.3 L1602.34 1209.3 L1601.76 1209.3 L1601.17 1209.3 L1600.59 1209.3 L1600 1209.3 L1599.41 1209.3 L1598.83 1209.3 L1598.24 1209.3 L1597.65 1209.3 L1597.07 1209.3 L1596.48 1209.3 L1595.89 1209.3 L1595.31 1209.3 L1594.72 1209.3 L1594.14 1209.3 L1593.55 1209.3 L1592.96 1209.3 L1592.38 1209.3 L1591.79 1209.3 L1591.2 1209.3 L1590.62 1209.3 L1590.03 1209.3 L1589.44 1209.3 L1588.86 1209.3 L1588.27 1209.3 L1587.68 1209.3 L1587.1 1209.3 L1586.51 1209.3 L1585.93 1209.3 L1585.34 1209.3 L1584.75 1209.3 L1584.17 1209.3 L1583.58 1209.3 L1582.99 1209.3 L1582.41 1209.3 L1581.82 1209.3 L1581.23 1209.3 L1580.65 1209.3 L1580.06 1209.3 L1579.47 1209.3 L1578.89 1209.3 L1578.3 1209.3 L1577.72 1209.3 L1577.13 1209.3 L1576.54 1209.3 L1575.96 1209.3 L1575.37 1209.3 L1574.78 1209.3 L1574.2 1209.3 L1573.61 1209.3 L1573.02 1209.3 L1572.44 1209.3 L1571.85 1209.3 L1571.27 1209.3 L1570.68 1209.3 L1570.09 1209.3 L1569.51 1209.3 L1568.92 1209.3 L1568.33 1209.3 L1567.75 1209.3 L1567.16 1209.3 L1566.57 1209.3 L1565.99 1209.3 L1565.4 1209.3 L1564.81 1209.3 L1564.23 1209.3 L1563.64 1209.3 L1563.06 1209.3 L1562.47 1209.3 L1561.88 1209.3 L1561.3 1209.3 L1560.71 1209.3 L1560.12 1209.3 L1559.54 1209.3 L1558.95 1209.3 L1558.36 1209.3 L1557.78 1209.3 L1557.19 1209.3 L1556.6 1209.3 L1556.02 1209.3 L1555.43 1209.3 L1554.85 1209.3 L1554.26 1209.3 L1553.67 1209.3 L1553.09 1209.3 L1552.5 1209.3 L1551.91 1209.3 L1551.33 1209.3 L1550.74 1209.3 L1550.15 1209.3 L1549.57 1209.3 L1548.98 1209.3 L1548.4 1209.3 L1547.81 1209.3 L1547.22 1209.3 L1546.64 1209.3 L1546.05 1209.3 L1545.46 1209.3 L1544.88 1209.3 L1544.29 1209.3 L1543.7 1209.3 L1543.12 1209.3 L1542.53 1209.3 L1541.94 1209.3 L1541.36 1209.3 L1540.77 1209.3 L1540.19 1209.3 L1539.6 1209.3 L1539.01 1209.3 L1538.43 1209.3 L1537.84 1209.3 L1537.25 1209.3 L1536.67 1209.3 L1536.08 1209.3 L1535.49 1209.3 L1534.91 1209.3 L1534.32 1209.3 L1533.73 1209.3 L1533.15 1209.3 L1532.56 1209.3 L1531.98 1209.3 L1531.39 1209.3 L1530.8 1209.3 L1530.22 1209.3 L1529.63 1209.3 L1529.04 1209.3 L1528.46 1209.3 L1527.87 1209.3 L1527.28 1209.3 L1526.7 1209.3 L1526.11 1209.3 L1525.52 1209.3 L1524.94 1209.3 L1524.35 1209.3 L1523.77 1209.3 L1523.18 1209.3 L1522.59 1209.3 L1522.01 1209.3 L1521.42 1209.3 L1520.83 1209.3 L1520.25 1209.3 L1519.66 1209.3 L1519.07 1209.3 L1518.49 1209.3 L1517.9 1209.3 L1517.32 1209.3 L1516.73 1209.3 L1516.14 1209.3 L1515.56 1209.3 L1514.97 1209.3 L1514.38 1209.3 L1513.8 1209.3 L1513.21 1209.3 L1512.62 1209.3 L1512.04 1209.3 L1511.45 1209.3 L1510.86 1209.3 L1510.28 1209.3 L1509.69 1209.3 L1509.11 1209.3 L1508.52 1209.3 L1507.93 1209.3 L1507.35 1209.3 L1506.76 1209.3 L1506.17 1209.3 L1505.59 1209.3 L1505 1209.3 L1504.41 1209.3 L1503.83 1209.3 L1503.24 1209.3 L1502.65 1209.3 L1502.07 1209.3 L1501.48 1209.3 L1500.9 1209.3 L1500.31 1209.3 L1499.72 1209.3 L1499.14 1209.3 L1498.55 1209.3 L1497.96 1209.3 L1497.38 1209.3 L1496.79 1209.3 L1496.2 1209.3 L1495.62 1209.3 L1495.03 1209.3 L1494.45 1209.3 L1493.86 1209.3 L1493.27 1209.3 L1492.69 1209.3 L1492.1 1209.3 L1491.51 1209.3 L1490.93 1209.3 L1490.34 1209.3 L1489.75 1209.3 L1489.17 1209.3 L1488.58 1209.3 L1487.99 1209.3 L1487.41 1209.3 L1486.82 1209.3 L1486.24 1209.3 L1485.65 1209.3 L1485.06 1209.3 L1484.48 1209.3 L1483.89 1209.3 L1483.3 1209.3 L1482.72 1209.3 L1482.13 1209.3 L1481.54 1209.3 L1480.96 1209.3 L1480.37 1209.3 L1479.78 1209.3 L1479.2 1209.3 L1478.61 1209.3 L1478.03 1209.3 L1477.44 1209.3 L1476.85 1209.3 L1476.27 1209.3 L1475.68 1209.3 L1475.09 1209.3 L1474.51 1209.3 L1473.92 1209.3 L1473.33 1209.3 L1472.75 1209.3 L1472.16 1209.3 L1471.57 1209.3 L1470.99 1209.3 L1470.4 1209.3 L1469.82 1209.3 L1469.23 1209.3 L1468.64 1209.3 L1468.06 1209.3 L1467.47 1209.3 L1466.88 1209.3 L1466.3 1209.3 L1465.71 1209.3 L1465.12 1209.3 L1464.54 1209.3 L1463.95 1209.3 L1463.37 1209.3 L1462.78 1209.3 L1462.19 1209.3 L1461.61 1209.3 L1461.02 1209.3 L1460.43 1209.3 L1459.85 1209.3 L1459.26 1209.3 L1458.67 1209.3 L1458.09 1209.3 L1457.5 1209.3 L1456.91 1209.3 L1456.33 1209.3 L1455.74 1209.3 L1455.16 1209.3 L1454.57 1209.3 L1453.98 1209.3 L1453.4 1209.3 L1452.81 1209.3 L1452.22 1209.3 L1451.64 1209.3 L1451.05 1209.3 L1450.46 1209.3 L1449.88 1209.3 L1449.29 1209.3 L1448.7 1209.3 L1448.12 1209.3 L1447.53 1209.3 L1446.95 1209.3 L1446.36 1209.3 L1445.77 1209.3 L1445.19 1209.3 L1444.6 1209.3 L1444.01 1209.3 L1443.43 1209.3 L1442.84 1209.3 L1442.25 1209.3 L1441.67 1209.3 L1441.08 1209.3 L1440.5 1209.3 L1439.91 1209.3 L1439.32 1209.3 L1438.74 1209.3 L1438.15 1209.3 L1437.56 1209.3 L1436.98 1209.3 L1436.39 1209.3 L1435.8 1209.3 L1435.22 1209.3 L1434.63 1209.3 L1434.04 1209.3 L1433.46 1209.3 L1432.87 1209.3 L1432.29 1209.3 L1431.7 1209.3 L1431.11 1209.3 L1430.53 1209.3 L1429.94 1209.3 L1429.35 1209.3 L1428.77 1209.3 L1428.18 1209.3 L1427.59 1209.3 L1427.01 1209.3 L1426.42 1209.3 L1425.83 1209.3 L1425.25 1209.3 L1424.66 1209.3 L1424.08 1209.3 L1423.49 1209.3 L1422.9 1209.3 L1422.32 1209.3 L1421.73 1209.3 L1421.14 1209.3 L1420.56 1209.3 L1419.97 1209.3 L1419.38 1209.3 L1418.8 1209.3 L1418.21 1209.3 L1417.63 1209.3 L1417.04 1209.3 L1416.45 1209.3 L1415.87 1209.3 L1415.28 1209.3 L1414.69 1209.3 L1414.11 1209.3 L1413.52 1209.3 L1412.93 1209.3 L1412.35 1209.3 L1411.76 1209.3 L1411.17 1209.3 L1410.59 1209.3 L1410 1209.3 L1409.42 1209.3 L1408.83 1209.3 L1408.24 1209.3 L1407.66 1209.3 L1407.07 1209.3 L1406.48 1209.3 L1405.9 1209.3 L1405.31 1209.3 L1404.72 1209.3 L1404.14 1209.3 L1403.55 1209.3 L1402.96 1209.3 L1402.38 1209.3 L1401.79 1209.3 L1401.21 1209.3 L1400.62 1209.3 L1400.03 1209.3 L1399.45 1209.3 L1398.86 1209.3 L1398.27 1209.3 L1397.69 1209.3 L1397.1 1209.3 L1396.51 1209.3 L1395.93 1209.3 L1395.34 1209.3 L1394.75 1209.3 L1394.17 1209.3 L1393.58 1209.3 L1393 1209.3 L1392.41 1209.3 L1391.82 1209.3 L1391.24 1209.3 L1390.65 1209.3 L1390.06 1209.3 L1389.48 1209.3 L1388.89 1209.3 L1388.3 1209.3 L1387.72 1209.3 L1387.13 1209.3 L1386.55 1209.3 L1385.96 1209.3 L1385.37 1209.3 L1384.79 1209.3 L1384.2 1209.3 L1383.61 1209.3 L1383.03 1209.3 L1382.44 1209.3 L1381.85 1209.3 L1381.27 1209.3 L1380.68 1209.3 L1380.09 1209.3 L1379.51 1209.3 L1378.92 1209.3 L1378.34 1209.3 L1377.75 1209.3 L1377.16 1209.3 L1376.58 1209.3 L1375.99 1209.3 L1375.4 1209.3 L1374.82 1209.3 L1374.23 1209.3 L1373.64 1209.3 L1373.06 1209.3 L1372.47 1209.3 L1371.88 1209.3 L1371.3 1209.3 L1370.71 1209.3 L1370.13 1209.3 L1369.54 1209.3 L1368.95 1209.3 L1368.37 1209.3 L1367.78 1209.3 L1367.19 1209.3 L1366.61 1209.3 L1366.02 1209.3 L1365.43 1209.3 L1364.85 1209.3 L1364.26 1209.3 L1363.68 1209.3 L1363.09 1209.3 L1362.5 1209.3 L1361.92 1209.3 L1361.33 1209.3 L1360.74 1209.3 L1360.16 1209.3 L1359.57 1209.3 L1358.98 1209.3 L1358.4 1209.3 L1357.81 1209.3 L1357.22 1209.3 L1356.64 1209.3 L1356.05 1209.3 L1355.47 1209.3 L1354.88 1209.3 L1354.29 1209.3 L1353.71 1209.3 L1353.12 1209.3 L1352.53 1209.3 L1351.95 1209.3 L1351.36 1209.3 L1350.77 1209.3 L1350.19 1209.3 L1349.6 1209.3 L1349.01 1209.3 L1348.43 1209.3 L1347.84 1209.3 L1347.26 1209.3 L1346.67 1209.3 L1346.08 1209.3 L1345.5 1209.3 L1344.91 1209.3 L1344.32 1209.3 L1343.74 1209.3 L1343.15 1209.3 L1342.56 1209.3 L1341.98 1209.3 L1341.39 1209.3 L1340.8 1209.3 L1340.22 1209.3 L1339.63 1209.3 L1339.05 1209.3 L1338.46 1209.3 L1337.87 1209.3 L1337.29 1209.3 L1336.7 1209.3 L1336.11 1209.3 L1335.53 1209.3 L1334.94 1209.3 L1334.35 1209.3 L1333.77 1209.3 L1333.18 1209.3 L1332.6 1209.3 L1332.01 1209.3 L1331.42 1209.3 L1330.84 1209.3 L1330.25 1209.3 L1329.66 1209.3 L1329.08 1209.3 L1328.49 1209.3 L1327.9 1209.3 L1327.32 1209.3 L1326.73 1209.3 L1326.14 1209.3 L1325.56 1209.3 L1324.97 1209.3 L1324.39 1209.3 L1323.8 1209.3 L1323.21 1209.3 L1322.63 1209.3 L1322.04 1209.3 L1321.45 1209.3 L1320.87 1209.3 L1320.28 1209.3 L1319.69 1209.3 L1319.11 1209.3 L1318.52 1209.3 L1317.93 1209.3 L1317.35 1209.3 L1316.76 1209.3 L1316.18 1209.3 L1315.59 1209.3 L1315 1209.3 L1314.42 1209.3 L1313.83 1209.3 L1313.24 1209.3 L1312.66 1209.3 L1312.07 1209.3 L1311.48 1209.3 L1310.9 1209.3 L1310.31 1209.3 L1309.73 1209.3 L1309.14 1209.3 L1308.55 1209.3 L1307.97 1209.3 L1307.38 1209.3 L1306.79 1209.3 L1306.21 1209.3 L1305.62 1209.3 L1305.03 1209.3 L1304.45 1209.3 L1303.86 1209.3 L1303.27 1209.3 L1302.69 1209.3 L1302.1 1209.3 L1301.52 1209.3 L1300.93 1209.3 L1300.34 1209.3 L1299.76 1209.3 L1299.17 1209.3 L1298.58 1209.3 L1298 1209.3 L1297.41 1209.3 L1296.82 1209.3 L1296.24 1209.3 L1295.65 1209.3 L1295.06 1209.3 L1294.48 1209.3 L1293.89 1209.3 L1293.31 1209.3 L1292.72 1209.3 L1292.13 1209.3 L1291.55 1209.3 L1290.96 1209.3 L1290.37 1209.3 L1289.79 1209.3 L1289.2 1209.3 L1288.61 1209.3 L1288.03 1209.3 L1287.44 1209.3 L1286.86 1209.3 L1286.27 1209.3 L1285.68 1209.3 L1285.1 1209.3 L1284.51 1209.3 L1283.92 1209.3 L1283.34 1209.3 L1282.75 1209.3 L1282.16 1209.3 L1281.58 1209.3 L1280.99 1209.3 L1280.4 1209.3 L1279.82 1209.3 L1279.23 1209.3 L1278.65 1209.3 L1278.06 1209.3 L1277.47 1209.3 L1276.89 1209.3 L1276.3 1209.3 L1275.71 1209.3 L1275.13 1209.3 L1274.54 1209.3 L1273.95 1209.3 L1273.37 1209.3 L1272.78 1209.3 L1272.19 1209.3 L1271.61 1209.3 L1271.02 1209.3 L1270.44 1209.3 L1269.85 1209.3 L1269.26 1209.3 L1268.68 1209.3 L1268.09 1209.3 L1267.5 1209.3 L1266.92 1209.3 L1266.33 1209.3 L1265.74 1209.3 L1265.16 1209.3 L1264.57 1209.3 L1263.98 1209.3 L1263.4 1209.3 L1262.81 1209.3 L1262.23 1209.3 L1261.64 1209.3 L1261.05 1209.3 L1260.47 1209.3 L1259.88 1209.3 L1259.29 1209.3 L1258.71 1209.3 L1258.12 1209.3 L1257.53 1209.3 L1256.95 1209.3 L1256.36 1209.3 L1255.78 1209.3 L1255.19 1209.3 L1254.6 1209.3 L1254.02 1209.3 L1253.43 1209.3 L1252.84 1209.3 L1252.26 1209.3 L1251.67 1209.3 L1251.08 1209.3 L1250.5 1209.3 L1249.91 1209.3 L1249.32 1209.3 L1248.74 1209.3 L1248.15 1209.3 L1247.57 1209.3 L1246.98 1209.3 L1246.39 1209.3 L1245.81 1209.3 L1245.22 1209.3 L1244.63 1209.3 L1244.05 1209.3 L1243.46 1209.3 L1242.87 1209.3 L1242.29 1209.3 L1241.7 1209.3 L1241.11 1209.3 L1240.53 1209.3 L1239.94 1209.3 L1239.36 1209.3 L1238.77 1209.3 L1238.18 1209.3 L1237.6 1209.3 L1237.01 1209.3 L1236.42 1209.3 L1235.84 1209.3 L1235.25 1209.3 L1234.66 1209.3 L1234.08 1209.3 L1233.49 1209.3 L1232.91 1209.3 L1232.32 1209.3 L1231.73 1209.3 L1231.15 1209.3 L1230.56 1209.3 L1229.97 1209.3 L1229.39 1209.3 L1228.8 1209.3 L1228.21 1209.3 L1227.63 1209.3 L1227.04 1209.3 L1226.45 1209.3 L1225.87 1209.3 L1225.28 1209.3 L1224.7 1209.3 L1224.11 1209.3 L1223.52 1209.3 L1222.94 1209.3 L1222.35 1209.3 L1221.76 1209.3 L1221.18 1209.3 L1220.59 1209.3 L1220 1209.3 L1219.42 1209.3 L1218.83 1209.3 L1218.24 1209.3 L1217.66 1209.3 L1217.07 1209.3 L1216.49 1209.3 L1215.9 1209.3 L1215.31 1209.3 L1214.73 1209.3 L1214.14 1209.3 L1213.55 1209.3 L1212.97 1209.3 L1212.38 1209.3 L1211.79 1209.3 L1211.21 1209.3 L1210.62 1209.3 L1210.03 1209.3 L1209.45 1209.3 L1208.86 1209.3 L1208.28 1209.3 L1207.69 1209.3 L1207.1 1209.3 L1206.52 1209.3 L1205.93 1209.3 L1205.34 1209.3 L1204.76 1209.3 L1204.17 1209.3 L1203.58 1209.3 L1203 1209.3 L1202.41 1209.3 L1201.83 1209.3 L1201.24 1209.3 L1200.65 1209.3 L1200.07 1209.3 L1199.48 1209.3 L1198.89 1209.3 L1198.31 1209.3 L1197.72 1209.3 L1197.13 1209.3 L1196.55 1209.3 L1195.96 1209.3 L1195.37 1209.3 L1194.79 1209.3 L1194.2 1209.3 L1193.62 1209.3 L1193.03 1209.3 L1192.44 1209.3 L1191.86 1209.3 L1191.27 1209.3 L1190.68 1209.3 L1190.1 1209.3 L1189.51 1209.3 L1188.92 1209.3 L1188.34 1209.3 L1187.75 1209.3 L1187.16 1209.3 L1186.58 1209.3 L1185.99 1209.3 L1185.41 1209.3 L1184.82 1209.3 L1184.23 1209.3 L1183.65 1209.3 L1183.06 1209.3 L1182.47 1209.3 L1181.89 1209.3 L1181.3 1209.3 L1180.71 1209.3 L1180.13 1209.3 L1179.54 1209.3 L1178.96 1209.3 L1178.37 1209.3 L1177.78 1209.3 L1177.2 1209.3 L1176.61 1209.3 L1176.02 1209.3 L1175.44 1209.3 L1174.85 1209.3 L1174.26 1209.3 L1173.68 1209.3 L1173.09 1209.3 L1172.5 1209.3 L1171.92 1209.3 L1171.33 1209.3 L1170.75 1209.3 L1170.16 1209.3 L1169.57 1209.3 L1168.99 1209.3 L1168.4 1209.3 L1167.81 1209.3 L1167.23 1209.3 L1166.64 1209.3 L1166.05 1209.3 L1165.47 1209.3 L1164.88 1209.3 L1164.29 1209.3 L1163.71 1209.3 L1163.12 1209.3 L1162.54 1209.3 L1161.95 1209.3 L1161.36 1209.3 L1160.78 1209.3 L1160.19 1209.3 L1159.6 1209.3 L1159.02 1209.3 L1158.43 1209.3 L1157.84 1209.3 L1157.26 1209.3 L1156.67 1209.3 L1156.09 1209.3 L1155.5 1209.3 L1154.91 1209.3 L1154.33 1209.3 L1153.74 1209.3 L1153.15 1209.3 L1152.57 1209.3 L1151.98 1209.3 L1151.39 1209.3 L1150.81 1209.3 L1150.22 1209.3 L1149.63 1209.3 L1149.05 1209.3 L1148.46 1209.3 L1147.88 1209.3 L1147.29 1209.3 L1146.7 1209.3 L1146.12 1209.3 L1145.53 1209.3 L1144.94 1209.3 L1144.36 1209.3 L1143.77 1209.3 L1143.18 1209.3 L1142.6 1209.3 L1142.01 1209.3 L1141.42 1209.3 L1140.84 1209.3 L1140.25 1209.3 L1139.67 1209.3 L1139.08 1209.3 L1138.49 1209.3 L1137.91 1209.3 L1137.32 1209.3 L1136.73 1209.3 L1136.15 1209.3 L1135.56 1209.3 L1134.97 1209.3 L1134.39 1209.3 L1133.8 1209.3 L1133.21 1209.3 L1132.63 1209.3 L1132.04 1209.3 L1131.46 1209.3 L1130.87 1209.3 L1130.28 1209.3 L1129.7 1209.3 L1129.11 1209.3 L1128.52 1209.3 L1127.94 1209.3 L1127.35 1209.3 L1126.76 1209.3 L1126.18 1209.3 L1125.59 1209.3 L1125.01 1209.3 L1124.42 1209.3 L1123.83 1209.3 L1123.25 1209.3 L1122.66 1209.3 L1122.07 1209.3 L1121.49 1209.3 L1120.9 1209.3 L1120.31 1209.3 L1119.73 1209.3 L1119.14 1209.3 L1118.55 1209.3 L1117.97 1209.3 L1117.38 1209.3 L1116.8 1209.3 L1116.21 1209.3 L1115.62 1209.3 L1115.04 1209.3 L1114.45 1209.3 L1113.86 1209.3 L1113.28 1209.3 L1112.69 1209.3 L1112.1 1209.3 L1111.52 1209.3 L1110.93 1209.3 L1110.34 1209.3 L1109.76 1209.3 L1109.17 1209.3 L1108.59 1209.3 L1108 1209.3 L1107.41 1209.3 L1106.83 1209.3 L1106.24 1209.3 L1105.65 1209.3 L1105.07 1209.3 L1104.48 1209.3 L1103.89 1209.3 L1103.31 1209.3 L1102.72 1209.3 L1102.14 1209.3 L1101.55 1209.3 L1100.96 1209.3 L1100.38 1209.3 L1099.79 1209.3 L1099.2 1209.3 L1098.62 1209.3 L1098.03 1209.3 L1097.44 1209.3 L1096.86 1209.3 L1096.27 1209.3 L1095.68 1209.3 L1095.1 1209.3 L1094.51 1209.3 L1093.93 1209.3 L1093.34 1209.3 L1092.75 1209.3 L1092.17 1209.3 L1091.58 1209.3 L1090.99 1209.3 L1090.41 1209.3 L1089.82 1209.3 L1089.23 1209.3 L1088.65 1209.3 L1088.06 1209.3 L1087.47 1209.3 L1086.89 1209.3 L1086.3 1209.3 L1085.72 1209.3 L1085.13 1209.3 L1084.54 1209.3 L1083.96 1209.3 L1083.37 1209.3 L1082.78 1209.3 L1082.2 1209.3 L1081.61 1209.3 L1081.02 1209.3 L1080.44 1209.3 L1079.85 1209.3 L1079.26 1209.3 L1078.68 1209.3 L1078.09 1209.3 L1077.51 1209.3 L1076.92 1209.3 L1076.33 1209.3 L1075.75 1209.3 L1075.16 1209.3 L1074.57 1209.3 L1073.99 1209.3 L1073.4 1209.3 L1072.81 1209.3 L1072.23 1209.3 L1071.64 1209.3 L1071.06 1209.3 L1070.47 1209.3 L1069.88 1209.3 L1069.3 1209.3 L1068.71 1209.3 L1068.12 1209.3 L1067.54 1209.3 L1066.95 1209.3 L1066.36 1209.3 L1065.78 1209.3 L1065.19 1209.3 L1064.6 1209.3 L1064.02 1209.3 L1063.43 1209.3 L1062.85 1209.3 L1062.26 1209.3 L1061.67 1209.3 L1061.09 1209.3 L1060.5 1209.3 L1059.91 1209.3 L1059.33 1209.3 L1058.74 1209.3 L1058.15 1209.3 L1057.57 1209.3 L1056.98 1209.3 L1056.39 1209.3 L1055.81 1209.3 L1055.22 1209.3 L1054.64 1209.3 L1054.05 1209.3 L1053.46 1209.3 L1052.88 1209.3 L1052.29 1209.3 L1051.7 1209.3 L1051.12 1209.3 L1050.53 1209.3 L1049.94 1209.3 L1049.36 1209.3 L1048.77 1209.3 L1048.19 1209.3 L1047.6 1209.3 L1047.01 1209.3 L1046.43 1209.3 L1045.84 1209.3 L1045.25 1209.3 L1044.67 1209.3 L1044.08 1209.3 L1043.49 1209.3 L1042.91 1209.3 L1042.32 1209.3 L1041.73 1209.3 L1041.15 1209.3 L1040.56 1209.3 L1039.98 1209.3 L1039.39 1209.3 L1038.8 1209.3 L1038.22 1209.3 L1037.63 1209.3 L1037.04 1209.3 L1036.46 1209.3 L1035.87 1209.3 L1035.28 1209.3 L1034.7 1209.3 L1034.11 1209.3 L1033.52 1209.3 L1032.94 1209.3 L1032.35 1209.3 L1031.77 1209.3 L1031.18 1209.3 L1030.59 1209.3 L1030.01 1209.3 L1029.42 1209.3 L1028.83 1209.3 L1028.25 1209.3 L1027.66 1209.3 L1027.07 1209.3 L1026.49 1209.3 L1025.9 1209.3 L1025.32 1209.3 L1024.73 1209.3 L1024.14 1209.3 L1023.56 1209.3 L1022.97 1209.3 L1022.38 1209.3 L1021.8 1209.3 L1021.21 1209.3 L1020.62 1209.3 L1020.04 1209.3 L1019.45 1209.3 L1018.86 1209.3 L1018.28 1209.3 L1017.69 1209.3 L1017.11 1209.3 L1016.52 1209.3 L1015.93 1209.3 L1015.35 1209.3 L1014.76 1209.3 L1014.17 1209.3 L1013.59 1209.3 L1013 1209.3 L1012.41 1209.3 L1011.83 1209.3 L1011.24 1209.3 L1010.65 1209.3 L1010.07 1209.3 L1009.48 1209.3 L1008.9 1209.3 L1008.31 1209.3 L1007.72 1209.3 L1007.14 1209.3 L1006.55 1209.3 L1005.96 1209.3 L1005.38 1209.3 L1004.79 1209.3 L1004.2 1209.3 L1003.62 1209.3 L1003.03 1209.3 L1002.44 1209.3 L1001.86 1209.3 L1001.27 1209.3 L1000.69 1209.3 L1000.1 1209.3 L999.513 1209.3 L998.926 1209.3 L998.34 1209.3 L997.754 1209.3 L997.167 1209.3 L996.581 1209.3 L995.994 1209.3 L995.408 1209.3 L994.822 1209.3 L994.235 1209.3 L993.649 1209.3 L993.062 1209.3 L992.476 1209.3 L991.889 1209.3 L991.303 1209.3 L990.717 1209.3 L990.13 1209.3 L989.544 1209.3 L988.957 1209.3 L988.371 1209.3 L987.785 1209.3 L987.198 1209.3 L986.612 1209.3 L986.025 1209.3  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.38 986.612,1209.38 987.198,1209.38 987.785,1209.38 988.371,1209.38 988.957,1209.38 989.544,1209.38 990.13,1209.38 990.717,1209.38 991.303,1209.38 991.889,1209.38 992.476,1209.38 993.062,1209.38 993.649,1209.38 994.235,1209.38 994.822,1209.38 995.408,1209.38 995.994,1209.38 996.581,1209.38 997.167,1209.38 997.754,1209.38 998.34,1209.38 998.926,1209.38 999.513,1209.38 1000.1,1209.38 1000.69,1209.38 1001.27,1209.38 1001.86,1209.38 1002.44,1209.38 1003.03,1209.38 1003.62,1209.38 1004.2,1209.38 1004.79,1209.38 1005.38,1209.38 1005.96,1209.38 1006.55,1209.38 1007.14,1209.38 1007.72,1209.38 1008.31,1209.38 1008.9,1209.38 1009.48,1209.38 1010.07,1209.38 1010.65,1209.38 1011.24,1209.38 1011.83,1209.38 1012.41,1209.38 1013,1209.38 1013.59,1209.38 1014.17,1209.38 1014.76,1209.38 1015.35,1209.38 1015.93,1209.38 1016.52,1209.38 1017.11,1209.38 1017.69,1209.38 1018.28,1209.38 1018.86,1209.38 1019.45,1209.38 1020.04,1209.38 1020.62,1209.38 1021.21,1209.38 1021.8,1209.38 1022.38,1209.38 1022.97,1209.38 1023.56,1209.38 1024.14,1209.38 1024.73,1209.38 1025.32,1209.38 1025.9,1209.38 1026.49,1209.38 1027.07,1209.38 1027.66,1209.38 1028.25,1209.38 1028.83,1209.38 1029.42,1209.38 1030.01,1209.38 1030.59,1209.38 1031.18,1209.38 1031.77,1209.38 1032.35,1209.38 1032.94,1209.38 1033.52,1209.38 1034.11,1209.38 1034.7,1209.38 1035.28,1209.38 1035.87,1209.38 1036.46,1209.38 1037.04,1209.38 1037.63,1209.38 1038.22,1209.38 1038.8,1209.38 1039.39,1209.38 1039.98,1209.38 1040.56,1209.38 1041.15,1209.38 1041.73,1209.38 1042.32,1209.38 1042.91,1209.38 1043.49,1209.38 1044.08,1209.38 1044.67,1209.38 1045.25,1209.38 1045.84,1209.38 1046.43,1209.38 1047.01,1209.38 1047.6,1209.38 1048.19,1209.38 1048.77,1209.38 1049.36,1209.38 1049.94,1209.38 1050.53,1209.38 1051.12,1209.38 1051.7,1209.38 1052.29,1209.38 1052.88,1209.38 1053.46,1209.38 1054.05,1209.38 1054.64,1209.38 1055.22,1209.38 1055.81,1209.38 1056.39,1209.38 1056.98,1209.38 1057.57,1209.38 1058.15,1209.38 1058.74,1209.38 1059.33,1209.38 1059.91,1209.38 1060.5,1209.38 1061.09,1209.38 1061.67,1209.38 1062.26,1209.38 1062.85,1209.38 1063.43,1209.38 1064.02,1209.38 1064.6,1209.38 1065.19,1209.38 1065.78,1209.38 1066.36,1209.38 1066.95,1209.38 1067.54,1209.38 1068.12,1209.38 1068.71,1209.38 1069.3,1209.38 1069.88,1209.38 1070.47,1209.38 1071.06,1209.38 1071.64,1209.38 1072.23,1209.38 1072.81,1209.38 1073.4,1209.38 1073.99,1209.38 1074.57,1209.38 1075.16,1209.38 1075.75,1209.38 1076.33,1209.38 1076.92,1209.38 1077.51,1209.38 1078.09,1209.38 1078.68,1209.38 1079.26,1209.38 1079.85,1209.38 1080.44,1209.38 1081.02,1209.38 1081.61,1209.38 1082.2,1209.38 1082.78,1209.38 1083.37,1209.38 1083.96,1209.38 1084.54,1209.38 1085.13,1209.38 1085.72,1209.38 1086.3,1209.38 1086.89,1209.38 1087.47,1209.38 1088.06,1209.38 1088.65,1209.38 1089.23,1209.38 1089.82,1209.38 1090.41,1209.38 1090.99,1209.38 1091.58,1209.38 1092.17,1209.38 1092.75,1209.38 1093.34,1209.38 1093.93,1209.38 1094.51,1209.38 1095.1,1209.38 1095.68,1209.38 1096.27,1209.38 1096.86,1209.38 1097.44,1209.38 1098.03,1209.38 1098.62,1209.38 1099.2,1209.38 1099.79,1209.38 1100.38,1209.38 1100.96,1209.38 1101.55,1209.38 1102.14,1209.38 1102.72,1209.38 1103.31,1209.38 1103.89,1209.38 1104.48,1209.38 1105.07,1209.38 1105.65,1209.38 1106.24,1209.38 1106.83,1209.38 1107.41,1209.38 1108,1209.38 1108.59,1209.38 1109.17,1209.38 1109.76,1209.38 1110.34,1209.38 1110.93,1209.38 1111.52,1209.38 1112.1,1209.38 1112.69,1209.38 1113.28,1209.38 1113.86,1209.38 1114.45,1209.38 1115.04,1209.38 1115.62,1209.38 1116.21,1209.38 1116.8,1209.38 1117.38,1209.38 1117.97,1209.38 1118.55,1209.38 1119.14,1209.38 1119.73,1209.38 1120.31,1209.38 1120.9,1209.38 1121.49,1209.38 1122.07,1209.38 1122.66,1209.38 1123.25,1209.38 1123.83,1209.38 1124.42,1209.38 1125.01,1209.38 1125.59,1209.38 1126.18,1209.38 1126.76,1209.38 1127.35,1209.38 1127.94,1209.38 1128.52,1209.38 1129.11,1209.38 1129.7,1209.38 1130.28,1209.38 1130.87,1209.38 1131.46,1209.38 1132.04,1209.38 1132.63,1209.38 1133.21,1209.38 1133.8,1209.38 1134.39,1209.38 1134.97,1209.38 1135.56,1209.38 1136.15,1209.38 1136.73,1209.38 1137.32,1209.38 1137.91,1209.38 1138.49,1209.38 1139.08,1209.38 1139.67,1209.38 1140.25,1209.38 1140.84,1209.38 1141.42,1209.38 1142.01,1209.38 1142.6,1209.38 1143.18,1209.38 1143.77,1209.38 1144.36,1209.38 1144.94,1209.38 1145.53,1209.38 1146.12,1209.38 1146.7,1209.38 1147.29,1209.38 1147.88,1209.38 1148.46,1209.38 1149.05,1209.38 1149.63,1209.38 1150.22,1209.38 1150.81,1209.38 1151.39,1209.38 1151.98,1209.38 1152.57,1209.38 1153.15,1209.38 1153.74,1209.38 1154.33,1209.38 1154.91,1209.38 1155.5,1209.38 1156.09,1209.38 1156.67,1209.38 1157.26,1209.38 1157.84,1209.38 1158.43,1209.38 1159.02,1209.38 1159.6,1209.38 1160.19,1209.38 1160.78,1209.38 1161.36,1209.38 1161.95,1209.38 1162.54,1209.38 1163.12,1209.38 1163.71,1209.38 1164.29,1209.38 1164.88,1209.38 1165.47,1209.38 1166.05,1209.38 1166.64,1209.38 1167.23,1209.38 1167.81,1209.38 1168.4,1209.38 1168.99,1209.38 1169.57,1209.38 1170.16,1209.38 1170.75,1209.38 1171.33,1209.38 1171.92,1209.38 1172.5,1209.38 1173.09,1209.38 1173.68,1209.38 1174.26,1209.38 1174.85,1209.38 1175.44,1209.38 1176.02,1209.38 1176.61,1209.38 1177.2,1209.38 1177.78,1209.38 1178.37,1209.38 1178.96,1209.38 1179.54,1209.38 1180.13,1209.38 1180.71,1209.38 1181.3,1209.38 1181.89,1209.38 1182.47,1209.38 1183.06,1209.38 1183.65,1209.38 1184.23,1209.38 1184.82,1209.38 1185.41,1209.38 1185.99,1209.38 1186.58,1209.38 1187.16,1209.38 1187.75,1209.38 1188.34,1209.38 1188.92,1209.38 1189.51,1209.38 1190.1,1209.38 1190.68,1209.38 1191.27,1209.38 1191.86,1209.38 1192.44,1209.38 1193.03,1209.38 1193.62,1209.38 1194.2,1209.38 1194.79,1209.38 1195.37,1209.38 1195.96,1209.38 1196.55,1209.38 1197.13,1209.38 1197.72,1209.38 1198.31,1209.38 1198.89,1209.38 1199.48,1209.38 1200.07,1209.38 1200.65,1209.38 1201.24,1209.38 1201.83,1209.38 1202.41,1209.38 1203,1209.38 1203.58,1209.38 1204.17,1209.38 1204.76,1209.38 1205.34,1209.38 1205.93,1209.38 1206.52,1209.38 1207.1,1209.38 1207.69,1209.38 1208.28,1209.38 1208.86,1209.38 1209.45,1209.38 1210.03,1209.38 1210.62,1209.38 1211.21,1209.38 1211.79,1209.38 1212.38,1209.38 1212.97,1209.38 1213.55,1209.38 1214.14,1209.38 1214.73,1209.38 1215.31,1209.38 1215.9,1209.38 1216.49,1209.38 1217.07,1209.38 1217.66,1209.38 1218.24,1209.38 1218.83,1209.38 1219.42,1209.38 1220,1209.38 1220.59,1209.38 1221.18,1209.38 1221.76,1209.38 1222.35,1209.38 1222.94,1209.38 1223.52,1209.38 1224.11,1209.38 1224.7,1209.38 1225.28,1209.38 1225.87,1209.38 1226.45,1209.38 1227.04,1209.38 1227.63,1209.38 1228.21,1209.38 1228.8,1209.38 1229.39,1209.38 1229.97,1209.38 1230.56,1209.38 1231.15,1209.38 1231.73,1209.38 1232.32,1209.38 1232.91,1209.38 1233.49,1209.38 1234.08,1209.38 1234.66,1209.38 1235.25,1209.38 1235.84,1209.38 1236.42,1209.38 1237.01,1209.38 1237.6,1209.38 1238.18,1209.38 1238.77,1209.38 1239.36,1209.38 1239.94,1209.38 1240.53,1209.38 1241.11,1209.38 1241.7,1209.38 1242.29,1209.38 1242.87,1209.38 1243.46,1209.38 1244.05,1209.38 1244.63,1209.38 1245.22,1209.38 1245.81,1209.38 1246.39,1209.38 1246.98,1209.38 1247.57,1209.38 1248.15,1209.38 1248.74,1209.38 1249.32,1209.38 1249.91,1209.38 1250.5,1209.38 1251.08,1209.38 1251.67,1209.38 1252.26,1209.38 1252.84,1209.38 1253.43,1209.38 1254.02,1209.38 1254.6,1209.38 1255.19,1209.38 1255.78,1209.38 1256.36,1209.38 1256.95,1209.38 1257.53,1209.38 1258.12,1209.38 1258.71,1209.38 1259.29,1209.38 1259.88,1209.38 1260.47,1209.38 1261.05,1209.38 1261.64,1209.38 1262.23,1209.38 1262.81,1209.38 1263.4,1209.38 1263.98,1209.38 1264.57,1209.38 1265.16,1209.38 1265.74,1209.38 1266.33,1209.38 1266.92,1209.38 1267.5,1209.38 1268.09,1209.38 1268.68,1209.38 1269.26,1209.38 1269.85,1209.38 1270.44,1209.38 1271.02,1209.38 1271.61,1209.38 1272.19,1209.38 1272.78,1209.38 1273.37,1209.38 1273.95,1209.38 1274.54,1209.38 1275.13,1209.38 1275.71,1209.38 1276.3,1209.38 1276.89,1209.38 1277.47,1209.38 1278.06,1209.38 1278.65,1209.38 1279.23,1209.38 1279.82,1209.38 1280.4,1209.38 1280.99,1209.38 1281.58,1209.38 1282.16,1209.38 1282.75,1209.38 1283.34,1209.38 1283.92,1209.38 1284.51,1209.38 1285.1,1209.38 1285.68,1209.38 1286.27,1209.38 1286.86,1209.38 1287.44,1209.38 1288.03,1209.38 1288.61,1209.38 1289.2,1209.38 1289.79,1209.38 1290.37,1209.38 1290.96,1209.38 1291.55,1209.38 1292.13,1209.38 1292.72,1209.38 1293.31,1209.38 1293.89,1209.38 1294.48,1209.38 1295.06,1209.38 1295.65,1209.38 1296.24,1209.38 1296.82,1209.38 1297.41,1209.38 1298,1209.38 1298.58,1209.38 1299.17,1209.38 1299.76,1209.38 1300.34,1209.38 1300.93,1209.38 1301.52,1209.38 1302.1,1209.38 1302.69,1209.38 1303.27,1209.38 1303.86,1209.38 1304.45,1209.38 1305.03,1209.38 1305.62,1209.38 1306.21,1209.38 1306.79,1209.38 1307.38,1209.38 1307.97,1209.38 1308.55,1209.38 1309.14,1209.38 1309.73,1209.38 1310.31,1209.38 1310.9,1209.38 1311.48,1209.38 1312.07,1209.38 1312.66,1209.38 1313.24,1209.38 1313.83,1209.38 1314.42,1209.38 1315,1209.38 1315.59,1209.38 1316.18,1209.38 1316.76,1209.38 1317.35,1209.38 1317.93,1209.38 1318.52,1209.38 1319.11,1209.38 1319.69,1209.38 1320.28,1209.38 1320.87,1209.38 1321.45,1209.38 1322.04,1209.38 1322.63,1209.38 1323.21,1209.38 1323.8,1209.38 1324.39,1209.38 1324.97,1209.38 1325.56,1209.38 1326.14,1209.38 1326.73,1209.38 1327.32,1209.38 1327.9,1209.38 1328.49,1209.38 1329.08,1209.38 1329.66,1209.38 1330.25,1209.38 1330.84,1209.38 1331.42,1209.38 1332.01,1209.38 1332.6,1209.38 1333.18,1209.38 1333.77,1209.38 1334.35,1209.38 1334.94,1209.38 1335.53,1209.38 1336.11,1209.38 1336.7,1209.38 1337.29,1209.38 1337.87,1209.38 1338.46,1209.38 1339.05,1209.38 1339.63,1209.38 1340.22,1209.38 1340.8,1209.38 1341.39,1209.38 1341.98,1209.38 1342.56,1209.38 1343.15,1209.38 1343.74,1209.38 1344.32,1209.38 1344.91,1209.38 1345.5,1209.38 1346.08,1209.38 1346.67,1209.38 1347.26,1209.38 1347.84,1209.38 1348.43,1209.38 1349.01,1209.38 1349.6,1209.38 1350.19,1209.38 1350.77,1209.38 1351.36,1209.38 1351.95,1209.38 1352.53,1209.38 1353.12,1209.38 1353.71,1209.38 1354.29,1209.38 1354.88,1209.38 1355.47,1209.38 1356.05,1209.38 1356.64,1209.38 1357.22,1209.38 1357.81,1209.38 1358.4,1209.38 1358.98,1209.38 1359.57,1209.38 1360.16,1209.38 1360.74,1209.38 1361.33,1209.38 1361.92,1209.38 1362.5,1209.38 1363.09,1209.38 1363.68,1209.38 1364.26,1209.38 1364.85,1209.38 1365.43,1209.38 1366.02,1209.38 1366.61,1209.38 1367.19,1209.38 1367.78,1209.38 1368.37,1209.38 1368.95,1209.38 1369.54,1209.38 1370.13,1209.38 1370.71,1209.38 1371.3,1209.38 1371.88,1209.38 1372.47,1209.38 1373.06,1209.38 1373.64,1209.38 1374.23,1209.38 1374.82,1209.38 1375.4,1209.38 1375.99,1209.38 1376.58,1209.38 1377.16,1209.38 1377.75,1209.38 1378.34,1209.38 1378.92,1209.38 1379.51,1209.38 1380.09,1209.38 1380.68,1209.38 1381.27,1209.38 1381.85,1209.38 1382.44,1209.38 1383.03,1209.38 1383.61,1209.38 1384.2,1209.38 1384.79,1209.38 1385.37,1209.38 1385.96,1209.38 1386.55,1209.38 1387.13,1209.38 1387.72,1209.38 1388.3,1209.38 1388.89,1209.38 1389.48,1209.38 1390.06,1209.38 1390.65,1209.38 1391.24,1209.38 1391.82,1209.38 1392.41,1209.38 1393,1209.38 1393.58,1209.38 1394.17,1209.38 1394.75,1209.38 1395.34,1209.38 1395.93,1209.38 1396.51,1209.38 1397.1,1209.38 1397.69,1209.38 1398.27,1209.38 1398.86,1209.38 1399.45,1209.38 1400.03,1209.38 1400.62,1209.38 1401.21,1209.38 1401.79,1209.38 1402.38,1209.38 1402.96,1209.38 1403.55,1209.38 1404.14,1209.38 1404.72,1209.38 1405.31,1209.38 1405.9,1209.38 1406.48,1209.38 1407.07,1209.38 1407.66,1209.38 1408.24,1209.38 1408.83,1209.38 1409.42,1209.38 1410,1209.38 1410.59,1209.38 1411.17,1209.38 1411.76,1209.38 1412.35,1209.38 1412.93,1209.38 1413.52,1209.38 1414.11,1209.38 1414.69,1209.38 1415.28,1209.38 1415.87,1209.38 1416.45,1209.38 1417.04,1209.38 1417.63,1209.38 1418.21,1209.38 1418.8,1209.38 1419.38,1209.38 1419.97,1209.38 1420.56,1209.38 1421.14,1209.38 1421.73,1209.38 1422.32,1209.38 1422.9,1209.38 1423.49,1209.38 1424.08,1209.38 1424.66,1209.38 1425.25,1209.38 1425.83,1209.38 1426.42,1209.38 1427.01,1209.38 1427.59,1209.38 1428.18,1209.38 1428.77,1209.38 1429.35,1209.38 1429.94,1209.38 1430.53,1209.38 1431.11,1209.38 1431.7,1209.38 1432.29,1209.38 1432.87,1209.38 1433.46,1209.38 1434.04,1209.38 1434.63,1209.38 1435.22,1209.38 1435.8,1209.38 1436.39,1209.38 1436.98,1209.38 1437.56,1209.38 1438.15,1209.38 1438.74,1209.38 1439.32,1209.38 1439.91,1209.38 1440.5,1209.38 1441.08,1209.38 1441.67,1209.38 1442.25,1209.38 1442.84,1209.38 1443.43,1209.38 1444.01,1209.38 1444.6,1209.38 1445.19,1209.38 1445.77,1209.38 1446.36,1209.38 1446.95,1209.38 1447.53,1209.38 1448.12,1209.38 1448.7,1209.38 1449.29,1209.38 1449.88,1209.38 1450.46,1209.38 1451.05,1209.38 1451.64,1209.38 1452.22,1209.38 1452.81,1209.38 1453.4,1209.38 1453.98,1209.38 1454.57,1209.38 1455.16,1209.38 1455.74,1209.38 1456.33,1209.38 1456.91,1209.38 1457.5,1209.38 1458.09,1209.38 1458.67,1209.38 1459.26,1209.38 1459.85,1209.38 1460.43,1209.38 1461.02,1209.38 1461.61,1209.38 1462.19,1209.38 1462.78,1209.38 1463.37,1209.38 1463.95,1209.38 1464.54,1209.38 1465.12,1209.38 1465.71,1209.38 1466.3,1209.38 1466.88,1209.38 1467.47,1209.38 1468.06,1209.38 1468.64,1209.38 1469.23,1209.38 1469.82,1209.38 1470.4,1209.38 1470.99,1209.38 1471.57,1209.38 1472.16,1209.38 1472.75,1209.38 1473.33,1209.38 1473.92,1209.38 1474.51,1209.38 1475.09,1209.38 1475.68,1209.38 1476.27,1209.38 1476.85,1209.38 1477.44,1209.38 1478.03,1209.38 1478.61,1209.38 1479.2,1209.38 1479.78,1209.38 1480.37,1209.38 1480.96,1209.38 1481.54,1209.38 1482.13,1209.38 1482.72,1209.38 1483.3,1209.38 1483.89,1209.38 1484.48,1209.38 1485.06,1209.38 1485.65,1209.38 1486.24,1209.38 1486.82,1209.38 1487.41,1209.38 1487.99,1209.38 1488.58,1209.38 1489.17,1209.38 1489.75,1209.38 1490.34,1209.38 1490.93,1209.38 1491.51,1209.38 1492.1,1209.38 1492.69,1209.38 1493.27,1209.38 1493.86,1209.38 1494.45,1209.38 1495.03,1209.38 1495.62,1209.38 1496.2,1209.38 1496.79,1209.38 1497.38,1209.38 1497.96,1209.38 1498.55,1209.38 1499.14,1209.38 1499.72,1209.38 1500.31,1209.38 1500.9,1209.38 1501.48,1209.38 1502.07,1209.38 1502.65,1209.38 1503.24,1209.38 1503.83,1209.38 1504.41,1209.38 1505,1209.38 1505.59,1209.38 1506.17,1209.38 1506.76,1209.38 1507.35,1209.38 1507.93,1209.38 1508.52,1209.38 1509.11,1209.38 1509.69,1209.38 1510.28,1209.38 1510.86,1209.38 1511.45,1209.38 1512.04,1209.38 1512.62,1209.38 1513.21,1209.38 1513.8,1209.38 1514.38,1209.38 1514.97,1209.38 1515.56,1209.38 1516.14,1209.38 1516.73,1209.38 1517.32,1209.38 1517.9,1209.38 1518.49,1209.38 1519.07,1209.38 1519.66,1209.38 1520.25,1209.38 1520.83,1209.38 1521.42,1209.38 1522.01,1209.38 1522.59,1209.38 1523.18,1209.38 1523.77,1209.38 1524.35,1209.38 1524.94,1209.38 1525.52,1209.38 1526.11,1209.38 1526.7,1209.38 1527.28,1209.38 1527.87,1209.38 1528.46,1209.38 1529.04,1209.38 1529.63,1209.38 1530.22,1209.38 1530.8,1209.38 1531.39,1209.38 1531.98,1209.38 1532.56,1209.38 1533.15,1209.38 1533.73,1209.38 1534.32,1209.38 1534.91,1209.38 1535.49,1209.38 1536.08,1209.38 1536.67,1209.38 1537.25,1209.38 1537.84,1209.38 1538.43,1209.38 1539.01,1209.38 1539.6,1209.38 1540.19,1209.38 1540.77,1209.38 1541.36,1209.38 1541.94,1209.38 1542.53,1209.38 1543.12,1209.38 1543.7,1209.38 1544.29,1209.38 1544.88,1209.38 1545.46,1209.38 1546.05,1209.38 1546.64,1209.38 1547.22,1209.38 1547.81,1209.38 1548.4,1209.38 1548.98,1209.38 1549.57,1209.38 1550.15,1209.38 1550.74,1209.38 1551.33,1209.38 1551.91,1209.38 1552.5,1209.38 1553.09,1209.38 1553.67,1209.38 1554.26,1209.38 1554.85,1209.38 1555.43,1209.38 1556.02,1209.38 1556.6,1209.38 1557.19,1209.38 1557.78,1209.38 1558.36,1209.38 1558.95,1209.38 1559.54,1209.38 1560.12,1209.38 1560.71,1209.38 1561.3,1209.38 1561.88,1209.38 1562.47,1209.38 1563.06,1209.38 1563.64,1209.38 1564.23,1209.38 1564.81,1209.38 1565.4,1209.38 1565.99,1209.38 1566.57,1209.38 1567.16,1209.38 1567.75,1209.38 1568.33,1209.38 1568.92,1209.38 1569.51,1209.38 1570.09,1209.38 1570.68,1209.38 1571.27,1209.38 1571.85,1209.38 1572.44,1209.38 1573.02,1209.38 1573.61,1209.38 1574.2,1209.38 1574.78,1209.38 1575.37,1209.38 1575.96,1209.38 1576.54,1209.38 1577.13,1209.38 1577.72,1209.38 1578.3,1209.38 1578.89,1209.38 1579.47,1209.38 1580.06,1209.38 1580.65,1209.38 1581.23,1209.38 1581.82,1209.38 1582.41,1209.38 1582.99,1209.38 1583.58,1209.38 1584.17,1209.38 1584.75,1209.38 1585.34,1209.38 1585.93,1209.38 1586.51,1209.38 1587.1,1209.38 1587.68,1209.38 1588.27,1209.38 1588.86,1209.38 1589.44,1209.38 1590.03,1209.38 1590.62,1209.38 1591.2,1209.38 1591.79,1209.38 1592.38,1209.38 1592.96,1209.38 1593.55,1209.38 1594.14,1209.38 1594.72,1209.38 1595.31,1209.38 1595.89,1209.38 1596.48,1209.38 1597.07,1209.38 1597.65,1209.38 1598.24,1209.38 1598.83,1209.38 1599.41,1209.38 1600,1209.38 1600.59,1209.38 1601.17,1209.38 1601.76,1209.38 1602.34,1209.38 1602.93,1209.38 1603.52,1209.38 1604.1,1209.38 1604.69,1209.38 1605.28,1209.38 1605.86,1209.38 1606.45,1209.38 1607.04,1209.38 1607.62,1209.38 1608.21,1209.38 1608.8,1209.38 1609.38,1209.38 1609.97,1209.38 1610.55,1209.38 1611.14,1209.38 1611.73,1209.38 1612.31,1209.38 1612.9,1209.38 1613.49,1209.38 1614.07,1209.38 1614.66,1209.38 1615.25,1209.38 1615.83,1209.38 1616.42,1209.38 1617.01,1209.38 1617.59,1209.38 1618.18,1209.38 1618.76,1209.38 1619.35,1209.38 1619.94,1209.38 1620.52,1209.38 1621.11,1209.38 1621.7,1209.38 1622.28,1209.38 1622.87,1209.38 1623.46,1209.38 1624.04,1209.38 1624.63,1209.38 1625.22,1209.38 1625.8,1209.38 1626.39,1209.38 1626.97,1209.38 1627.56,1209.38 1628.15,1209.38 1628.73,1209.38 1629.32,1209.38 1629.91,1209.38 1630.49,1209.38 1631.08,1209.38 1631.67,1209.38 1632.25,1209.38 1632.84,1209.38 1633.42,1209.38 1634.01,1209.38 1634.6,1209.38 1635.18,1209.38 1635.77,1209.38 1636.36,1209.38 1636.94,1209.38 1637.53,1209.38 1638.12,1209.38 1638.7,1209.38 1639.29,1209.38 1639.88,1209.38 1640.46,1209.38 1641.05,1209.38 1641.63,1209.38 1642.22,1209.38 1642.81,1209.38 1643.39,1209.38 1643.98,1209.38 1644.57,1209.38 1645.15,1209.38 1645.74,1209.38 1646.33,1209.38 1646.91,1209.38 1647.5,1209.38 1648.09,1209.38 1648.67,1209.38 1649.26,1209.38 1649.84,1209.38 1650.43,1209.38 1651.02,1209.38 1651.6,1209.38 1652.19,1209.38 1652.78,1209.38 1653.36,1209.38 1653.95,1209.38 1654.54,1209.38 1655.12,1209.38 1655.71,1209.38 1656.29,1209.38 1656.88,1209.38 1657.47,1209.38 1658.05,1209.38 1658.64,1209.38 1659.23,1209.38 1659.81,1209.38 1660.4,1209.38 1660.99,1209.38 1661.57,1209.38 1662.16,1209.38 1662.75,1209.38 1663.33,1209.38 1663.92,1209.38 1664.5,1209.38 1665.09,1209.38 1665.68,1209.38 1666.26,1209.38 1666.85,1209.38 1667.44,1209.38 1668.02,1209.38 1668.61,1209.38 1669.2,1209.38 1669.78,1209.38 1670.37,1209.38 1670.96,1209.38 1671.54,1209.38 1672.13,1209.38 1672.71,1209.38 1673.3,1209.38 1673.89,1209.38 1674.47,1209.38 1675.06,1209.38 1675.65,1209.38 1676.23,1209.38 1676.82,1209.38 1677.41,1209.38 1677.99,1209.38 1678.58,1209.38 1679.17,1209.38 1679.75,1209.38 1680.34,1209.38 1680.92,1209.38 1681.51,1209.38 1682.1,1209.38 1682.68,1209.38 1683.27,1209.38 1683.86,1209.38 1684.44,1209.38 1685.03,1209.38 1685.62,1209.38 1686.2,1209.38 1686.79,1209.38 1687.37,1209.38 1687.96,1209.38 1688.55,1209.38 1689.13,1209.38 1689.72,1209.38 1690.31,1209.38 1690.89,1209.38 1691.48,1209.38 1692.07,1209.38 1692.65,1209.38 1693.24,1209.38 1693.83,1209.38 1694.41,1209.38 1695,1209.38 1695.58,1209.38 1696.17,1209.38 1696.76,1209.38 1697.34,1209.38 1697.93,1209.38 1698.52,1209.38 1699.1,1209.38 1699.69,1209.38 1700.28,1209.38 1700.86,1209.38 1701.45,1209.38 1702.04,1209.38 1702.62,1209.38 1703.21,1209.38 1703.79,1209.38 1704.38,1209.38 1704.97,1209.38 1705.55,1209.38 1706.14,1209.38 1706.73,1209.38 1707.31,1209.38 1707.9,1209.38 1708.49,1209.38 1709.07,1209.38 1709.66,1209.38 1710.24,1209.38 1710.83,1209.38 1711.42,1209.38 1712,1209.38 1712.59,1209.38 1713.18,1209.38 1713.76,1209.38 1714.35,1209.38 1714.94,1209.38 1715.52,1209.38 1716.11,1209.38 1716.7,1209.38 1717.28,1209.38 1717.87,1209.38 1718.45,1209.38 1719.04,1209.38 1719.63,1209.38 1720.21,1209.38 1720.8,1209.38 1721.39,1209.38 1721.97,1209.38 1722.56,1209.38 1723.15,1209.38 1723.73,1209.38 1724.32,1209.38 1724.91,1209.38 1725.49,1209.38 1726.08,1209.38 1726.66,1209.38 1727.25,1209.38 1727.84,1209.38 1728.42,1209.38 1729.01,1209.38 1729.6,1209.38 1730.18,1209.38 1730.77,1209.38 1731.36,1209.38 1731.94,1209.38 1732.53,1209.38 1733.11,1209.38 1733.7,1209.38 1734.29,1209.38 1734.87,1209.38 1735.46,1209.38 1736.05,1209.38 1736.63,1209.38 1737.22,1209.38 1737.81,1209.38 1738.39,1209.38 1738.98,1209.38 1739.57,1209.38 1740.15,1209.38 1740.74,1209.38 1741.32,1209.38 1741.91,1209.38 1742.5,1209.38 1743.08,1209.38 1743.67,1209.38 1744.26,1209.38 1744.84,1209.38 1745.43,1209.38 1746.02,1209.38 1746.6,1209.38 1747.19,1209.38 1747.78,1209.38 1748.36,1209.38 1748.95,1209.38 1749.53,1209.38 1750.12,1209.38 1750.71,1209.38 1751.29,1209.38 1751.88,1209.38 1752.47,1209.38 1753.05,1209.38 1753.64,1209.38 1754.23,1209.38 1754.81,1209.38 1755.4,1209.38 1755.99,1209.38 1756.57,1209.38 1757.16,1209.38 1757.74,1209.38 1758.33,1209.38 1758.92,1209.38 1759.5,1209.38 1760.09,1209.38 1760.68,1209.38 1761.26,1209.38 1761.85,1209.38 1762.44,1209.38 1763.02,1209.38 1763.61,1209.38 1764.19,1209.38 1764.78,1209.38 1765.37,1209.38 1765.95,1209.38 1766.54,1209.38 1767.13,1209.38 1767.71,1209.38 1768.3,1209.38 1768.89,1209.38 1769.47,1209.38 1770.06,1209.38 1770.65,1209.38 1771.23,1209.38 1771.82,1209.38 1772.4,1209.38 1772.99,1209.38 1773.58,1209.38 1774.16,1209.38 1774.75,1209.38 1775.34,1209.38 1775.92,1209.38 1776.51,1209.38 1777.1,1209.38 1777.68,1209.38 1778.27,1209.38 1778.86,1209.38 1779.44,1209.38 1780.03,1209.38 1780.61,1209.38 1781.2,1209.38 1781.79,1209.38 1782.37,1209.38 1782.96,1209.38 1783.55,1209.38 1784.13,1209.38 1784.72,1209.38 1785.31,1209.38 1785.89,1209.38 1786.48,1209.38 1787.06,1209.38 1787.65,1209.38 1788.24,1209.38 1788.82,1209.38 1789.41,1209.38 1790,1209.38 1790.58,1209.38 1791.17,1209.38 1791.76,1209.38 1792.34,1209.38 1792.93,1209.38 1793.52,1209.38 1794.1,1209.38 1794.69,1209.38 1795.27,1209.38 1795.86,1209.38 1796.45,1209.38 1797.03,1209.38 1797.62,1209.38 1798.21,1209.38 1798.79,1209.38 1799.38,1209.38 1799.97,1209.38 1800.55,1209.38 1801.14,1209.38 1801.73,1209.38 1802.31,1209.38 1802.9,1209.38 1803.48,1209.38 1804.07,1209.38 1804.66,1209.38 1805.24,1209.38 1805.83,1209.38 1806.42,1209.38 1807,1209.38 1807.59,1209.38 1808.18,1209.38 1808.76,1209.38 1809.35,1209.38 1809.94,1209.38 1810.52,1209.38 1811.11,1209.38 1811.69,1209.38 1812.28,1209.38 1812.87,1209.38 1813.45,1209.38 1814.04,1209.38 1814.63,1209.38 1815.21,1209.38 1815.8,1209.38 1816.39,1209.38 1816.97,1209.38 1817.56,1209.38 1818.14,1209.38 1818.73,1209.38 1819.32,1209.38 1819.9,1209.38 1820.49,1209.38 1821.08,1209.38 1821.66,1209.38 1822.25,1209.38 1822.84,1209.38 1823.42,1209.38 1824.01,1209.38 1824.6,1209.38 1825.18,1209.38 1825.77,1209.38 1826.35,1209.38 1826.94,1209.38 1827.53,1209.38 1828.11,1209.38 1828.7,1209.38 1829.29,1209.38 1829.87,1209.38 1830.46,1209.38 1831.05,1209.38 1831.63,1209.38 1832.22,1209.38 1832.81,1209.38 1833.39,1209.38 1833.98,1209.38 1834.56,1209.38 1835.15,1209.38 1835.74,1209.38 1836.32,1209.38 1836.91,1209.38 1837.5,1209.38 1838.08,1209.38 1838.67,1209.38 1839.26,1209.38 1839.84,1209.38 1840.43,1209.38 1841.01,1209.38 1841.6,1209.38 1842.19,1209.38 1842.77,1209.38 1843.36,1209.38 1843.95,1209.38 1844.53,1209.38 1845.12,1209.38 1845.71,1209.38 1846.29,1209.38 1846.88,1209.38 1847.47,1209.38 1848.05,1209.38 1848.64,1209.38 1849.22,1209.38 1849.81,1209.38 1850.4,1209.38 1850.98,1209.38 1851.57,1209.38 1852.16,1209.38 1852.74,1209.38 1853.33,1209.38 1853.92,1209.38 1854.5,1209.38 1855.09,1209.38 1855.68,1209.38 1856.26,1209.38 1856.85,1209.38 1857.43,1209.38 1858.02,1209.38 1858.61,1209.38 1859.19,1209.38 1859.78,1209.38 1860.37,1209.38 1860.95,1209.38 1861.54,1209.38 1862.13,1209.38 1862.71,1209.38 1863.3,1209.38 1863.88,1209.38 1864.47,1209.38 1865.06,1209.38 1865.64,1209.38 1866.23,1209.38 1866.82,1209.38 1867.4,1209.38 1867.99,1209.38 1868.58,1209.38 1869.16,1209.38 1869.75,1209.38 1870.34,1209.38 1870.92,1209.38 1871.51,1209.38 1872.09,1209.38 1872.68,1209.38 1873.27,1209.38 1873.85,1209.38 1874.44,1209.38 1875.03,1209.38 1875.61,1209.38 1876.2,1209.38 1876.79,1209.38 1877.37,1209.38 1877.96,1209.38 1878.55,1209.38 1879.13,1209.38 1879.72,1209.38 1880.3,1209.38 1880.89,1209.38 1881.48,1209.38 1882.06,1209.38 1882.65,1209.38 1883.24,1209.38 1883.82,1209.38 1884.41,1209.38 1885,1209.38 1885.58,1209.38 1886.17,1209.38 1886.76,1209.38 1887.34,1209.38 1887.93,1209.38 1888.51,1209.38 1889.1,1209.38 1889.69,1209.38 1890.27,1209.38 1890.86,1209.38 1891.45,1209.38 1892.03,1209.38 1892.62,1209.38 1893.21,1209.38 1893.79,1209.38 1894.38,1209.38 1894.96,1209.38 1895.55,1209.38 1896.14,1209.38 1896.72,1209.38 1897.31,1209.38 1897.9,1209.38 1898.48,1209.38 1899.07,1209.38 1899.66,1209.38 1900.24,1209.38 1900.83,1209.38 1901.42,1209.38 1902,1209.38 1902.59,1209.38 1903.17,1209.38 1903.76,1209.38 1904.35,1209.38 1904.93,1209.38 1905.52,1209.38 1906.11,1209.38 1906.69,1209.38 1907.28,1209.38 1907.87,1209.38 1908.45,1209.38 1909.04,1209.38 1909.63,1209.38 1910.21,1209.38 1910.8,1209.38 1911.38,1209.38 1911.97,1209.38 1912.56,1209.38 1913.14,1209.38 1913.73,1209.38 1914.32,1209.38 1914.9,1209.38 1915.49,1209.38 1916.08,1209.38 1916.66,1209.38 1917.25,1209.38 1917.83,1209.38 1918.42,1209.38 1919.01,1209.38 1919.59,1209.38 1920.18,1209.38 1920.77,1209.38 1921.35,1209.38 1921.94,1209.38 1922.53,1209.38 1923.11,1209.38 1923.7,1209.38 1924.29,1209.38 1924.87,1209.38 1925.46,1209.38 1926.04,1209.38 1926.63,1209.38 1927.22,1209.38 1927.8,1209.38 1928.39,1209.38 1928.98,1209.38 1929.56,1209.38 1930.15,1209.38 1930.74,1209.38 1931.32,1209.38 1931.91,1209.38 1932.5,1209.38 1933.08,1209.38 1933.67,1209.38 1934.25,1209.38 1934.84,1209.38 1935.43,1209.38 1936.01,1209.38 1936.6,1209.38 1937.19,1209.38 1937.77,1209.38 1938.36,1209.38 1938.95,1209.38 1939.53,1209.38 1940.12,1209.38 1940.71,1209.38 1941.29,1209.38 1941.88,1209.38 1942.46,1209.38 1943.05,1209.38 1943.64,1209.38 1944.22,1209.38 1944.81,1209.38 1945.4,1209.38 1945.98,1209.38 1946.57,1209.38 1947.16,1209.38 1947.74,1209.38 1948.33,1209.38 1948.91,1209.38 1949.5,1209.38 1950.09,1209.38 1950.67,1209.38 1951.26,1209.38 1951.85,1209.38 1952.43,1209.38 1953.02,1209.38 1953.61,1209.38 1954.19,1209.38 1954.78,1209.38 1955.37,1209.38 1955.95,1209.38 1956.54,1209.38 1957.12,1209.38 1957.71,1209.38 1958.3,1209.38 1958.88,1209.38 1959.47,1209.38 1960.06,1209.38 1960.64,1209.38 1961.23,1209.38 1961.82,1209.38 1962.4,1209.38 1962.99,1209.38 1963.58,1209.38 1964.16,1209.38 1964.75,1209.38 1965.33,1209.38 1965.92,1209.38 1966.51,1209.38 1967.09,1209.38 1967.68,1209.38 1968.27,1209.38 1968.85,1209.38 1969.44,1209.38 1970.03,1209.38 1970.61,1209.38 1971.2,1209.38 1971.78,1209.38 1972.37,1209.38 1972.96,1209.38 1973.54,1209.38 1974.13,1209.38 1974.72,1209.38 1975.3,1209.38 1975.89,1209.38 1976.48,1209.38 1977.06,1209.38 1977.65,1209.38 1978.24,1209.38 1978.82,1209.38 1979.41,1209.38 1979.99,1209.38 1980.58,1209.38 1981.17,1209.38 1981.75,1209.38 1982.34,1209.38 1982.93,1209.38 1983.51,1209.38 1984.1,1209.38 1984.69,1209.38 1985.27,1209.38 1985.86,1209.38 1986.45,1209.38 1987.03,1209.38 1987.62,1209.38 1988.2,1209.38 1988.79,1209.38 1989.38,1209.38 1989.96,1209.38 1990.55,1209.38 1991.14,1209.38 1991.72,1209.38 1992.31,1209.38 1992.9,1209.38 1993.48,1209.38 1994.07,1209.38 1994.65,1209.38 1995.24,1209.38 1995.83,1209.38 1996.41,1209.38 1997,1209.38 1997.59,1209.38 1998.17,1209.38 1998.76,1209.38 1999.35,1209.38 1999.93,1209.38 2000.52,1209.38 2001.11,1209.38 2001.69,1209.38 2002.28,1209.38 2002.86,1209.38 2003.45,1209.38 2004.04,1209.38 2004.62,1209.38 2005.21,1209.38 2005.8,1209.38 2006.38,1209.38 2006.97,1209.38 2007.56,1209.38 2008.14,1209.38 2008.73,1209.38 2009.32,1209.38 2009.9,1209.38 2010.49,1209.38 2011.07,1209.38 2011.66,1209.38 2012.25,1209.38 2012.83,1209.38 2013.42,1209.38 2014.01,1209.38 2014.59,1209.38 2015.18,1209.38 2015.77,1209.38 2016.35,1209.38 2016.94,1209.38 2017.53,1209.38 2018.11,1209.38 2018.7,1209.38 2019.28,1209.38 2019.87,1209.38 2020.46,1209.38 2021.04,1209.38 2021.63,1209.38 2022.22,1209.38 2022.8,1209.38 2023.39,1209.38 2023.98,1209.38 2024.56,1209.38 2025.15,1209.38 2025.73,1209.38 2026.32,1209.38 2026.91,1209.38 2027.49,1209.38 2028.08,1209.38 2028.67,1209.38 2029.25,1209.38 2029.84,1209.38 2030.43,1209.38 2031.01,1209.38 2031.6,1209.38 2032.19,1209.38 2032.77,1209.38 2033.36,1209.38 2033.94,1209.38 2034.53,1209.38 2035.12,1209.38 2035.7,1209.38 2036.29,1209.38 2036.88,1209.38 2037.46,1209.38 2038.05,1209.38 2038.64,1209.38 2039.22,1209.38 2039.81,1209.38 2040.4,1209.38 2040.98,1209.38 2041.57,1209.38 2042.15,1209.38 2042.74,1209.38 2043.33,1209.38 2043.91,1209.38 2044.5,1209.38 2045.09,1209.38 2045.67,1209.38 2046.26,1209.38 2046.85,1209.38 2047.43,1209.38 2048.02,1209.38 2048.6,1209.38 2049.19,1209.38 2049.78,1209.38 2050.36,1209.38 2050.95,1209.38 2051.54,1209.38 2052.12,1209.38 2052.71,1209.38 2053.3,1209.38 2053.88,1209.38 2054.47,1209.38 2055.06,1209.38 2055.64,1209.38 2056.23,1209.38 2056.81,1209.38 2057.4,1209.38 2057.99,1209.38 2058.57,1209.38 2059.16,1209.38 2059.75,1209.38 2060.33,1209.38 2060.92,1209.38 2061.51,1209.38 2062.09,1209.38 2062.68,1209.38 2063.27,1209.38 2063.85,1209.38 2064.44,1209.38 2065.02,1209.38 2065.61,1209.38 2066.2,1209.38 2066.78,1209.38 2067.37,1209.38 2067.96,1209.38 2068.54,1209.38 2069.13,1209.38 2069.72,1209.38 2070.3,1209.38 2070.89,1209.38 2071.48,1209.38 2072.06,1209.38 2072.65,1209.38 2073.23,1209.38 2073.82,1209.38 2074.41,1209.38 2074.99,1209.38 2075.58,1209.38 2076.17,1209.38 2076.75,1209.38 2077.34,1209.38 2077.93,1209.38 2078.51,1209.38 2079.1,1209.38 2079.68,1209.38 2080.27,1209.38 2080.86,1209.38 2081.44,1209.38 2082.03,1209.38 2082.62,1209.38 2083.2,1209.38 2083.79,1209.38 2084.38,1209.38 2084.96,1209.38 2085.55,1209.38 2086.14,1209.38 2086.72,1209.38 2087.31,1209.38 2087.89,1209.38 2088.48,1209.38 2089.07,1209.38 2089.65,1209.38 2090.24,1209.38 2090.83,1209.38 2091.41,1209.38 2092,1209.38 2092.59,1209.38 2093.17,1209.38 2093.76,1209.38 2094.35,1209.38 2094.93,1209.38 2095.52,1209.38 2096.1,1209.38 2096.69,1209.38 2097.28,1209.38 2097.86,1209.38 2098.45,1209.38 2099.04,1209.38 2099.62,1209.38 2100.21,1209.38 2100.8,1209.38 2101.38,1209.38 2101.97,1209.38 2102.55,1209.38 2103.14,1209.38 2103.73,1209.38 2104.31,1209.38 2104.9,1209.38 2105.49,1209.38 2106.07,1209.38 2106.66,1209.38 2107.25,1209.38 2107.83,1209.38 2108.42,1209.38 2109.01,1209.38 2109.59,1209.38 2110.18,1209.38 2110.76,1209.38 2111.35,1209.38 2111.94,1209.38 2112.52,1209.38 2113.11,1209.38 2113.7,1209.38 2114.28,1209.38 2114.87,1209.38 2115.46,1209.38 2116.04,1209.38 2116.63,1209.38 2117.22,1209.38 2117.8,1209.38 2118.39,1209.38 2118.97,1209.38 2119.56,1209.38 2120.15,1209.38 2120.73,1209.38 2121.32,1209.38 2121.91,1209.38 2122.49,1209.38 2123.08,1209.38 2123.67,1209.38 2124.25,1209.38 2124.84,1209.38 2125.42,1209.38 2126.01,1209.38 2126.6,1209.38 2127.18,1209.38 2127.77,1209.38 2128.36,1209.38 2128.94,1209.38 2129.53,1209.38 2130.12,1209.38 2130.7,1209.38 2131.29,1209.38 2131.88,1209.38 2132.46,1209.38 2133.05,1209.38 2133.63,1209.38 2134.22,1209.38 2134.81,1209.38 2135.39,1209.38 2135.98,1209.38 2136.57,1209.38 2137.15,1209.38 2137.74,1209.38 2138.33,1209.38 2138.91,1209.38 2139.5,1209.38 2140.09,1209.38 2140.67,1209.38 2141.26,1209.38 2141.84,1209.38 2142.43,1209.38 2143.02,1209.38 2143.6,1209.38 2144.19,1209.38 2144.78,1209.38 2145.36,1209.38 2145.95,1209.38 2146.54,1209.38 2147.12,1209.38 2147.71,1209.38 2148.3,1209.38 2148.88,1209.38 2149.47,1209.38 2150.05,1209.38 2150.64,1209.38 2151.23,1209.38 2151.81,1209.38 2152.4,1209.38 2152.99,1209.38 2153.57,1209.38 2154.16,1209.38 2154.75,1209.38 2155.33,1209.38 2155.92,1209.38 2156.5,1209.38 2157.09,1209.38 2157.68,1209.38 2158.26,1209.38 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.37,1190.21 1400.03,899.083 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.04 985.439,1190.21 2158.26,1190.21 2158.26,1228.04 985.439,1228.04 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip290)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip290)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip293\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip293)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-6762.81 164.91,-7631.25 165.469,-8398.71 166.029,-9095.83 166.588,-9725.33 167.147,-9262.57 167.706,-9803.67 168.266,-10301.2 168.825,-10744.8 169.384,-10342.6 169.943,-9312.65 170.503,-9706.24 171.062,-10044.4 171.621,-9771.45 172.18,-10060.8 172.74,-10302.1 173.299,-10491.4 173.858,-10658.7 174.417,-10384.7 174.977,-10523.7 175.536,-10635.2 176.095,-10358.5 176.655,-10421.2 177.214,-10465.6 177.773,-10208 178.332,-10228.6 178.892,-10231.9 179.451,-10218.4 180.01,-9746.19 180.569,-9520.31 181.129,-9298.14 181.688,-8890.98 182.247,-8686.87 182.806,-8654.5 183.366,-8607.84 183.925,-8399.29 184.484,-8197.31 185.043,-7997.44 185.603,-7927.25 186.162,-7847.29 186.721,-7766.47 187.28,-7678.39 187.84,-7572.74 188.399,-7164.64 188.958,-6881.25 189.517,-6609.54 190.077,-6515.02 190.636,-6347.92 191.195,-6174.37 191.754,-5934.96 192.314,-5769.58 192.873,-5684.94 193.432,-5457.47 193.991,-5369.15 194.551,-5156.48 195.11,-4894.9 195.669,-4819.32 196.228,-4573.1 196.788,-4499.51 197.347,-4422.03 197.906,-4242.63 198.465,-4114.31 199.025,-3932.07 199.584,-3769.9 200.143,-3563.99 200.702,-3491.66 201.262,-3382.85 201.821,-3308.47 202.38,-3197.22 202.939,-3126.72 203.499,-3014.4 204.058,-2795.74 204.617,-2655.09 205.176,-2556.89 205.736,-2497.22 206.295,-2402.72 206.854,-2175.91 207.413,-2027.24 207.973,-1920.15 208.532,-1812.96 209.091,-1765.82 209.65,-1600.02 210.21,-1529.27 210.769,-1459.71 211.328,-1419.05 211.887,-1321.74 212.447,-1254.83 213.006,-1191.47 213.565,-1155.36 214.124,-1119.76 214.684,-1054.53 215.243,-964.308 215.802,-904.578 216.361,-865.482 216.921,-806.922 217.48,-694.539 218.039,-659.046 218.598,-602.313 219.158,-546.716 219.717,-448.498 220.276,-417.881 220.835,-396.623 221.395,-281.563 221.954,-254.923 222.513,-184.388 223.072,-165.201 223.632,-142.667 224.191,-80.8671 224.75,-62.1758 225.309,-24.4656 225.869,56.3703 226.428,110.294 226.987,124.477 227.546,137.179 228.106,216.523 228.665,228.972 229.224,282.88 229.783,352.874 230.343,378.859 230.902,423.849 231.461,507.013 232.02,548.724 232.58,549.355 233.139,549.452 233.698,588.688 234.257,608.048 234.817,682.829 235.376,682.42 235.935,718.33 236.494,732.012 237.054,748.538 237.613,740.492 238.172,755.742 238.731,784.795 239.291,781.06 239.85,775.297 240.409,755.111 240.968,765.181 241.528,766.516 242.087,802.754 242.646,835.582 243.205,846.388 243.765,823.31 244.324,820.411 244.883,837.046 245.442,866.236 246.002,884 246.561,878.91 247.12,857.52 247.679,875.552 248.239,874.145 248.798,834.871 249.357,868.386 249.916,867.309 250.476,883.548 251.035,898.576 251.594,932.081 252.153,923.113 252.713,955.401 253.272,936.876 253.831,933.958 254.39,932.053 254.95,949.172 255.509,963.632 256.068,959.483 256.627,971.939 257.187,967.406 257.746,927.699 258.305,925.71 258.864,962.374 259.424,992.973 259.983,1001.71 260.542,978.055 261.101,961.156 261.661,978.032 262.22,988.111 262.779,1021.04 263.338,1032.18 263.898,993.477 264.457,972.474 265.016,970.025 265.575,1020.4 266.135,1047.35 266.694,1077.84 267.253,1071.18 267.812,1081.53 268.372,1072.35 268.931,1083.29 269.49,1089.38 270.049,1080.65 270.609,1104.94 271.168,1095.78 271.727,1099.68 272.286,1071.98 272.846,1091.74 273.405,1064.58 273.964,1059.4 274.523,1036.28 275.083,1049.28 275.642,1030.55 276.201,1043.25 276.76,1073.04 277.32,1098.95 277.879,1120.5 278.438,1096.5 278.997,1132.4 279.557,1105.55 280.116,1114.97 280.675,1122.09 281.234,1158.78 281.794,1147.82 282.353,1138.29 282.912,1142.86 283.471,1099.27 284.031,1105.97 284.59,1095.88 285.149,1066.12 285.708,1025.87 286.268,1035.76 286.827,1011.35 287.386,1057.48 287.945,1083.04 288.505,1124.27 289.064,1082.93 289.623,1090.38 290.182,1097.78 290.742,1119.65 291.301,1124.49 291.86,1130.95 292.419,1152.16 292.979,1122.52 293.538,1094.35 294.097,1116.61 294.656,1074.49 295.216,1067.23 295.775,1057.38 296.334,1067.47 296.893,1042.92 297.453,1068.09 298.012,1057.82 298.571,1048.52 299.13,1093.05 299.69,1079.35 300.249,1099.66 300.808,1103.61 301.368,1108.56 301.927,1094.74 302.486,1083.02 303.045,1070.57 303.605,1046.55 304.164,1054.01 304.723,1013.12 305.282,1020.81 305.842,1013.09 306.401,1023.79 306.96,998.782 307.519,1007.38 308.079,1002.36 308.638,995.769 309.197,1024.26 309.756,1053.2 310.316,1061.44 310.875,1067.56 311.434,1030.69 311.993,989.425 312.553,980.673 313.112,940.523 313.671,935.637 314.23,984.493 314.79,977.712 315.349,937.255 315.908,918.314 316.467,918.852 317.027,882.846 317.586,897.478 318.145,896.503 318.704,910.187 319.264,891.84 319.823,873.463 320.382,904.361 320.941,918.754 321.501,896.854 322.06,894.112 322.619,908.37 323.178,905.929 323.738,891.584 324.297,889.03 324.856,868.523 325.415,883.066 325.975,895.631 326.534,895.621 327.093,928.677 327.652,921.83 328.212,935.97 328.771,950.332 329.33,964.132 329.889,991.575 330.449,1000.21 331.008,958.209 331.567,954.387 332.126,953.636 332.686,983.318 333.245,992.391 333.804,982.776 334.363,961.843 334.923,939.914 335.482,950.718 336.041,960.815 336.6,969.942 337.16,993.862 337.719,983.589 338.278,1005.98 338.837,963.744 339.397,925.641 339.956,922.31 340.515,901.715 341.074,883.068 341.634,897.576 342.193,877.881 342.752,909.688 343.311,888.529 343.871,883.985 344.43,864.538 344.989,827.475 345.548,843.937 346.108,845.933 346.667,796.001 347.226,831.538 347.785,832.794 348.345,864.97 348.904,865.542 349.463,831.932 350.022,832.022 350.582,816.997 351.141,834.596 351.7,816.189 352.259,839.2 352.819,837.345 353.378,819.365 353.937,801.571 354.496,803.172 355.056,806.668 355.615,810.928 356.174,791.879 356.733,775.871 357.293,779.237 357.852,782.157 358.411,819.381 358.97,817.986 359.53,804.514 360.089,769.396 360.648,754.164 361.207,725.163 361.767,715.214 362.326,722.079 362.885,740.512 363.444,762.269 364.004,735.234 364.563,738.301 365.122,741.356 365.681,773.452 366.241,806.036 366.8,802.693 367.359,851.583 367.918,912.513 368.478,908.46 369.037,933.741 369.596,958.403 370.155,950.057 370.715,924.844 371.274,902.697 371.833,926.854 372.392,886.638 372.952,901.048 373.511,864.226 374.07,875.567 374.629,867.521 375.189,878.179 375.748,844.925 376.307,874.967 376.866,870.861 377.426,847.491 377.985,841.814 378.544,855.959 379.103,852.856 379.663,811.884 380.222,860.234 380.781,853.689 381.34,820.355 381.9,818.34 382.459,834.722 383.018,830.979 383.577,830.43 384.137,833.043 384.696,812.273 385.255,828.049 385.814,872.171 386.374,852.899 386.933,880.233 387.492,875.015 388.051,834.735 388.611,864.961 389.17,878.311 389.729,878.533 390.288,890.32 390.848,887.466 391.407,898.184 391.966,891.508 392.525,916.566 393.085,927.034 393.644,902.642 394.203,913.43 394.762,921.515 395.322,882.177 395.881,841.823 396.44,854.543 396.999,834.181 397.559,831.02 398.118,823.921 398.677,821.885 399.236,834.953 399.796,848.495 400.355,842.67 400.914,854.111 401.473,883.051 402.033,857.997 402.592,882.729 403.151,862.711 403.71,857.36 404.27,834.967 404.829,863.215 405.388,856.352 405.947,834.895 406.507,798.081 407.066,817.833 407.625,799.24 408.184,766.814 408.744,766.193 409.303,752.244 409.862,751.522 410.421,751.346 410.981,766.613 411.54,811.418 412.099,810.48 412.658,793.371 413.218,791.553 413.777,840.399 414.336,834.698 414.895,835.203 415.455,845.572 416.014,890.546 416.573,884.375 417.132,893.107 417.692,869.986 418.251,867.849 418.81,863.919 419.369,859.031 419.929,871.297 420.488,851.66 421.047,829.208 421.606,794.309 422.166,796.471 422.725,762.332 423.284,794.704 423.843,809.924 424.403,790.518 424.962,792.791 425.521,788.775 426.08,773.956 426.64,787.663 427.199,803.876 427.758,802.829 428.318,817.614 428.877,847.6 429.436,827.781 429.995,824.782 430.555,822.832 431.114,820.681 431.673,836.34 432.232,814.074 432.792,826.473 433.351,822.488 433.91,819.561 434.469,811.914 435.029,808.156 435.588,854.227 436.147,851.44 436.706,862.763 437.266,823.666 437.825,820.132 438.384,834.295 438.943,797.354 439.503,812.991 440.062,796.311 440.621,794.083 441.18,774.938 441.74,807.091 442.299,821.587 442.858,832.737 443.417,844.704 443.977,840.433 444.536,799.49 445.095,798.417 445.654,797.326 446.214,774.557 446.773,754.952 447.332,753.15 447.891,753.736 448.451,739.412 449.01,768.994 449.569,785.584 450.128,782.984 450.688,731.207 451.247,733.956 451.806,735.705 452.365,732.716 452.925,669.117 453.484,662.664 454.043,682.835 454.602,683.096 455.162,671.068 455.721,707.28 456.28,709.376 456.839,711.11 457.399,697.766 457.958,716.034 458.517,717.9 459.076,681.599 459.636,664.523 460.195,683.779 460.754,657.601 461.313,647.332 461.873,637.727 462.432,643.886 462.991,669.236 463.55,675.366 464.11,681.653 464.669,684.603 465.228,688.36 465.787,675.433 466.347,662.183 466.906,682.13 467.465,683.766 468.024,685.286 468.584,700.335 469.143,703.598 469.702,705.34 470.261,708.887 470.821,712.073 471.38,729.759 471.939,714.182 472.498,761.666 473.058,774.959 473.617,757.795 474.176,769.991 474.735,770.445 475.295,786.768 475.854,789.812 476.413,773.017 476.972,787.578 477.532,833.349 478.091,795.49 478.65,794.322 479.209,775.679 479.769,756.071 480.328,740.688 480.887,743.911 481.446,696.545 482.006,669.479 482.565,658.105 483.124,678.391 483.683,647.864 484.243,651.91 484.802,689.966 485.361,712.053 485.92,742.583 486.48,754.699 487.039,741.033 487.598,739.459 488.157,787.377 488.717,784.952 489.276,778.725 489.835,779.483 490.394,792.358 490.954,770.935 491.513,786.437 492.072,783.887 492.631,764.074 493.191,811.344 493.75,793.589 494.309,772.617 494.868,755.966 495.428,753.021 495.987,751.015 496.546,766.338 497.105,765.877 497.665,779.277 498.224,792.094 498.783,819.242 499.342,783.277 499.902,813.112 500.461,825.967 501.02,820.629 501.579,801.084 502.139,814.026 502.698,810.914 503.257,791.755 503.816,806.29 504.376,802.676 504.935,784.922 505.494,779.532 506.053,792.759 506.613,778.114 507.172,792.109 507.731,791.73 508.29,772.206 508.85,772.597 509.409,770.533 509.968,785.459 510.527,797.749 511.087,811.388 511.646,790.17 512.205,820.149 512.764,801.951 513.324,801.195 513.883,732.119 514.442,733.498 515.001,763.278 515.561,776.208 516.12,840.257 516.679,832.892 517.238,857.238 517.798,835.568 518.357,797.239 518.916,796.805 519.475,775.85 520.035,758.283 520.594,756.746 521.153,736.845 521.712,752.37 522.272,749.019 522.831,730.659 523.39,746.468 523.949,763.69 524.509,759.431 525.068,754.295 525.627,754.41 526.186,768.127 526.746,733.238 527.305,731.87 527.864,717.201 528.423,718.346 528.983,732.342 529.542,715.587 530.101,748.055 530.66,759.827 531.22,771.012 531.779,764.784 532.338,775.448 532.897,786.765 533.457,752.815 534.016,763.282 534.575,759.865 535.134,773.755 535.694,756.996 536.253,740.017 536.812,721.488 537.371,753.227 537.931,781.903 538.49,781.325 539.049,806.986 539.608,803.717 540.168,767.26 540.727,731.585 541.286,730.183 541.845,762.967 542.405,728.441 542.964,739.663 543.523,752.009 544.082,765.102 544.642,775.523 545.201,778.106 545.76,745.513 546.319,759.432 546.879,745.014 547.438,775.482 547.997,774.124 548.556,754.289 549.116,752.602 549.675,718.862 550.234,716.041 550.793,699.916 551.353,731.546 551.912,747.047 552.471,696.592 553.031,696.173 553.59,665.031 554.149,686.414 554.708,706.667 555.268,690.515 555.827,676.034 556.386,662.616 556.945,682.897 557.505,670.801 558.064,685.989 558.623,722.371 559.182,722.337 559.742,719.105 560.301,701.162 560.86,699.272 561.419,714.544 561.979,730.252 562.538,697.681 563.097,717.499 563.656,716.968 564.216,731.464 564.775,732.977 565.334,748.655 565.893,746.7 566.453,793.304 567.012,771.983 567.571,769.505 568.13,767.445 568.69,752.956 569.249,770.052 569.808,732.914 570.367,682.451 570.927,668.732 571.486,670.002 572.045,671.353 572.604,675.924 573.164,678.253 573.723,663.371 574.282,647.758 574.841,667.524 575.401,701.918 575.96,718.017 576.519,715.367 577.078,733.011 577.638,731.984 578.197,714.438 578.756,729.144 579.315,709.586 579.875,710.385 580.434,696.165 580.993,695.399 581.552,710.932 582.112,694.991 582.671,678.864 583.23,664.944 583.789,685.623 584.349,686.452 584.908,670.388 585.467,622.01 586.026,609.183 586.586,629.914 587.145,651.478 587.704,652.305 588.263,655.162 588.823,674.055 589.382,710.378 589.941,709.959 590.5,709.085 591.06,709.737 591.619,711.335 592.178,758.183 592.737,767.709 593.297,765.566 593.856,746.755 594.415,746.161 594.974,741.036 595.534,706.671 596.093,723.682 596.652,671.881 597.211,676.01 597.771,691.708 598.33,688.374 598.889,704.771 599.448,740.07 600.008,718.003 600.567,731.443 601.126,762.535 601.685,759.478 602.245,741.697 602.804,742.844 603.363,742.096 603.922,737.596 604.482,734.074 605.041,749.857 605.6,748.092 606.159,759.624 606.719,771.473 607.278,749.714 607.837,760.94 608.396,774.72 608.956,771.73 609.515,769.868 610.074,751.059 610.633,762.96 611.193,762.116 611.752,742.742 612.311,690.049 612.87,675.345 613.43,697.173 613.989,680.204 614.548,684.075 615.107,684.026 615.667,731.722 616.226,713.88 616.785,710.543 617.344,742.482 617.904,721.686 618.463,737.894 619.022,739.278 619.581,735.122 620.141,716.403 620.7,697.809 621.259,714.223 621.818,715.592 622.378,730.028 622.937,714.288 623.496,732.922 624.055,743.683 624.615,738.574 625.174,724.647 625.733,722.717 626.292,718.669 626.852,715.913 627.411,683.822 627.97,701.647 628.529,697.965 629.089,681.711 629.648,703.327 630.207,721.505 630.766,706.622 631.326,707.214 631.885,691.448 632.444,675.352 633.003,710.105 633.563,673.706 634.122,689.427 634.681,689.775 635.24,675.752 635.8,647.625 636.359,617.354 636.918,653.269 637.477,640.782 638.037,640.978 638.596,660.045 639.155,660.34 639.714,662.254 640.274,647.215 640.833,685.127 641.392,702.372 641.951,652.246 642.511,669.864 643.07,673.274 643.629,691.483 644.188,692.589 644.748,675.309 645.307,691.876 645.866,706.796 646.425,723.17 646.985,703.236 647.544,707.96 648.103,676.046 648.662,643.579 649.222,633.428 649.781,603.553 650.34,606.972 650.899,646.125 651.459,665.591 652.018,686.928 652.577,623.674 653.136,628.836 653.696,598.954 654.255,617.101 654.814,622.729 655.373,609.451 655.933,600.441 656.492,603.378 657.051,606.645 657.61,611.144 658.17,650.118 658.729,700.76 659.288,702.124 659.847,717.929 660.407,701.51 660.966,668.714 661.525,672.944 662.084,658.443 662.644,659.395 663.203,658.565 663.762,678.21 664.321,679.881 664.881,711.567 665.44,712.018 665.999,760.331 666.558,774.652 667.118,754.258 667.677,734.571 668.236,733.706 668.795,747.432 669.355,715.373 669.914,685.972 670.473,672.371 671.032,688.539 671.592,677.542 672.151,677.297 672.71,663.124 673.269,646.552 673.829,649.616 674.388,636.173 674.947,705.932 675.506,688.659 676.066,692.539 676.625,676.974 677.184,662.656 677.743,647.059 678.303,661.159 678.862,631.203 679.421,637.434 679.981,673.005 680.54,689.582 681.099,659.631 681.658,631.454 682.218,635.957 682.777,640.13 683.336,625.985 683.895,632.216 684.455,621.17 685.014,642.563 685.573,627.354 686.132,609.593 686.692,615.061 687.251,601.863 687.81,604.386 688.369,593.389 688.929,600.104 689.488,603.071 690.047,594.104 690.606,601.143 691.166,605.623 691.725,631.405 692.284,650.477 692.843,635.475 693.403,655.178 693.962,641.844 694.521,630.348 695.08,635.122 695.64,670.248 696.199,640.581 696.758,624.731 697.317,628.611 697.877,646.619 698.436,665.377 698.995,700.17 699.554,715.33 700.114,709.96 700.673,741.967 701.232,757.521 701.791,754.42 702.351,769.102 702.91,765.351 703.469,807.894 704.028,804.778 704.588,782.333 705.147,793.615 705.706,801.961 706.265,814.275 706.825,839.61 707.384,833.117 707.943,844.2 708.502,849.636 709.062,842.706 709.621,837.302 710.18,847.822 710.739,839.551 711.299,812.872 711.858,788.205 712.417,751.113 712.976,796.288 713.536,824.713 714.095,816.5 714.654,807.676 715.213,781.872 715.773,777.464 716.332,760.543 716.891,774.583 717.45,785.754 718.01,779.3 718.569,788.443 719.128,799.26 719.687,797.709 720.247,808.636 720.806,799.441 721.365,809.537 721.924,802.116 722.484,795.78 723.043,777.37 723.602,756.969 724.161,701.499 724.721,666.278 725.28,731.92 725.839,732.13 726.398,729.408 726.958,708.995 727.517,740.299 728.076,701.844 728.635,703.138 729.195,718.035 729.754,714.416 730.313,678.29 730.872,658.882 731.432,642.25 731.991,659.659 732.55,659.889 733.109,682.232 733.669,654.9 734.228,672.186 734.787,654.715 735.346,643.378 735.906,648.929 736.465,634.465 737.024,620.018 737.583,651.129 738.143,649.371 738.702,619.903 739.261,603.423 739.82,622.332 740.38,641.448 740.939,691.221 741.498,690.914 742.057,691.271 742.617,692.321 743.176,658.078 743.735,674.813 744.294,692.092 744.854,688.683 745.413,706.758 745.972,692.571 746.531,657.818 747.091,676.227 747.65,675.576 748.209,641.48 748.768,611.683 749.328,617.281 749.887,621.707 750.446,653.713 751.005,656.716 751.565,643.201 752.124,643.514 752.683,662.591 753.242,644.662 753.802,614.564 754.361,651.247 754.92,655.881 755.479,642.725 756.039,644.112 756.598,646.901 757.157,678.127 757.716,713.389 758.276,730.104 758.835,761.959 759.394,775.738 759.953,757.045 760.513,720.291 761.072,749.982 761.631,746.173 762.19,741.584 762.75,738.5 763.309,737.063 763.868,734.378 764.427,684.605 764.987,701.702 765.546,700.6 766.105,699.151 766.664,683.299 767.224,667.407 767.783,638.377 768.342,608.937 768.901,577.881 769.461,581.558 770.02,559.707 770.579,598.622 771.138,605.042 771.698,590.578 772.257,595.977 772.816,601.427 773.375,653.165 773.935,688.755 774.494,706.761 775.053,726.021 775.612,708.88 776.172,677.468 776.731,676.118 777.29,644.508 777.849,663.708 778.409,667.215 778.968,686.979 779.527,684.555 780.086,650.593 780.646,671.089 781.205,671.905 781.764,671.163 782.323,653.343 782.883,673.726 783.442,673.418 784.001,643.001 784.56,661.51 785.12,682.321 785.679,714.664 786.238,729.57 786.797,699.735 787.357,696.305 787.916,713.755 788.475,666.814 789.034,635.881 789.594,638.384 790.153,606.08 790.712,625.545 791.271,645.279 791.831,646.979 792.39,647.249 792.949,630.092 793.508,680.017 794.068,619.031 794.627,625.132 795.186,646.024 795.745,698.607 796.305,666.515 796.864,683.573 797.423,683.245 797.982,718.517 798.542,749.071 799.101,746.226 799.66,764.13 800.219,810.39 800.779,818.247 801.338,876.428 801.897,835.898 802.456,827.199 803.016,818.621 803.575,846.323 804.134,851.241 804.693,845.324 805.253,836.673 805.812,846.374 806.371,809.631 806.931,773.235 807.49,784.699 808.049,780.191 808.608,754.217 809.168,717.473 809.727,721.182 810.286,721.512 810.845,686.93 811.405,718.62 811.964,716.552 812.523,748.962 813.082,717.484 813.642,730.791 814.201,746.557 814.76,726.069 815.319,721.725 815.879,699.945 816.438,696.704 816.997,707.498 817.556,707.652 818.116,703.909 818.675,702.027 819.234,714.893 819.793,698.445 820.353,677.608 820.912,659.246 821.471,643.136 822.03,648.041 822.59,664.322 823.149,647.255 823.708,661.885 824.267,630.793 824.827,650.749 825.386,652.693 825.945,659.215 826.504,662.509 827.064,650.168 827.623,666.261 828.182,650.83 828.741,654.172 829.301,625.308 829.86,633.347 830.419,657.778 830.978,707.502 831.538,689.984 832.097,689.277 832.656,723.324 833.215,721.407 833.775,734.696 834.334,746.513 834.893,810.909 835.452,787.66 836.012,782.998 836.571,743.793 837.13,740.422 837.689,755.484 838.249,768.657 838.808,732.857 839.367,732.376 839.926,763.499 840.486,760.538 841.045,773.436 841.604,783.842 842.163,782.389 842.723,778.149 843.282,788.322 843.841,813.071 844.4,786.504 844.96,800.236 845.519,796.714 846.078,743.207 846.637,722.33 847.197,733.303 847.756,745.187 848.315,756.462 848.874,752.705 849.434,751.245 849.993,701.067 850.552,714.623 851.111,727.045 851.671,710.975 852.23,724.803 852.789,690.896 853.348,655.107 853.908,636.729 854.467,605.481 855.026,593.989 855.585,613.062 856.145,614.451 856.704,617.941 857.263,622.731 857.822,576.282 858.382,579.652 858.941,571.177 859.5,575.247 860.059,566.654 860.619,577.506 861.178,583.742 861.737,574.415 862.296,550.4 862.856,576.064 863.415,598.612 863.974,599.187 864.533,589.577 865.093,596.757 865.652,635.247 866.211,619.465 866.77,622.635 867.33,610.135 867.889,614.288 868.448,618.483 869.007,638.295 869.567,640.717 870.126,640.061 870.685,629.373 871.244,633.96 871.804,670.138 872.363,719.517 872.922,748.992 873.481,730.248 874.041,742.704 874.6,738.31 875.159,733.457 875.718,749.472 876.278,742.67 876.837,720.56 877.396,728.876 877.955,742.154 878.515,723.932 879.074,720.685 879.633,735.226 880.192,733.238 880.752,728.442 881.311,710.854 881.87,771.102 882.429,782.112 882.989,777.282 883.548,773.157 884.107,751.625 884.666,749.813 885.226,744.624 885.785,743.009 886.344,754.882 886.903,797.461 887.463,792.339 888.022,789.377 888.581,780.791 889.14,778.454 889.7,738.815 890.259,750.114 890.818,731.168 891.377,759.379 891.937,772.508 892.496,731.774 893.055,711.866 893.614,677.118 894.174,677.613 894.733,674.95 895.292,643.052 895.851,643.191 896.411,646.881 896.97,664.518 897.529,665.579 898.088,632.389 898.648,620.883 899.207,626.005 899.766,628.666 900.325,579.932 900.885,616.35 901.444,700.237 902.003,749.623 902.562,726.887 903.122,692.612 903.681,674.149 904.24,674.544 904.799,678.228 905.359,643.741 905.918,627.771 906.477,647.642 907.036,647.105 907.596,615.072 908.155,635.965 908.714,638.999 909.273,656.811 909.833,662.768 910.392,614.538 910.951,618.679 911.51,588.167 912.07,593.079 912.629,630.494 913.188,632.419 913.747,635.198 914.307,587.678 914.866,593.558 915.425,601.289 915.984,590.008 916.544,567.038 917.103,588.801 917.662,611.385 918.221,619.405 918.781,655.185 919.34,656.856 919.899,674.779 920.458,658.63 921.018,644.698 921.577,598.637 922.136,585.021 922.695,575.977 923.255,618.024 923.814,611.635 924.373,649.916 924.932,668.597 925.492,670.979 926.051,704 926.61,703.912 927.169,687.769 927.729,639.779 928.288,677.119 928.847,694.716 929.406,693.755 929.966,627.222 930.525,616.056 931.084,587.753 931.644,595.371 932.203,636.393 932.762,642.802 933.321,661.666 933.881,681.017 934.44,681.253 934.999,728.605 935.558,677.22 936.118,712.46 936.677,691.634 937.236,675.113 937.795,691.386 938.355,708.605 938.914,754.981 939.473,752.928 940.032,735.407 940.592,666.718 941.151,666.75 941.71,681.031 942.269,679.941 942.829,679.206 943.388,680.368 943.947,648.545 944.506,617.549 945.066,635.905 945.625,623.663 946.184,677.486 946.743,679.878 947.303,680.068 947.862,696.157 948.421,699.775 948.98,717.369 949.54,730.73 950.099,725.738 950.658,727.585 951.217,692.211 951.777,708.664 952.336,672.556 952.895,677.15 953.454,690.211 954.014,691.726 954.573,691.948 955.132,690.965 955.691,709.424 956.251,738.733 956.81,752.425 957.369,782.999 957.928,793.11 958.488,738.344 959.047,733.064 959.606,729.952 960.165,730.415 960.725,724.286 961.284,767.156 961.843,745.374 962.402,742.165 962.962,769.22 963.521,761.267 964.08,757.717 964.639,756.398 965.199,686.774 965.758,672.456 966.317,673.841 966.876,707.598 967.436,676.438 967.995,675.439 968.554,687.931 969.113,734.842 969.673,730.53 970.232,746.139 970.791,727.738 971.35,708.402 971.91,723.201 972.469,735.377 973.028,713.764 973.587,714.272 974.147,726.968 974.706,690.949 975.265,655.142 975.824,627.031 976.384,627.882 976.943,599.704 977.502,654.504 978.061,673.118 978.621,691.62 979.18,689.67 979.739,642.719 980.298,644.005 980.858,613.149 981.417,634.359 981.976,669.688 982.535,654.494 983.095,638.34 983.654,623.936 984.213,642.551 984.772,645.701 985.332,630.006 985.891,631.99 986.45,635.407 987.009,641.007 987.569,672.028 988.128,688.215 988.687,672.643 989.246,675.523 989.806,663.94 990.365,681.994 990.924,698.948 991.483,677.984 992.043,662.097 992.602,711.484 993.161,712.736 993.72,727.202 994.28,757.927 994.839,755.094 995.398,767.018 995.957,809.869 996.517,772.557 997.076,800.833 997.635,797.703 998.194,825.984 998.754,819.142 999.313,810.452 999.872,767.781 1000.43,762.593 1000.99,774.89 1001.55,756.886 1002.11,734.534 1002.67,732.628 1003.23,683.625 1003.79,668.052 1004.35,652.133 1004.91,652.224 1005.46,653.377 1006.02,636.996 1006.58,608.78 1007.14,614.567 1007.7,600.205 1008.26,622.762 1008.82,625.185 1009.38,596.642 1009.94,585.643 1010.5,589.116 1011.06,612.276 1011.62,632.353 1012.18,654.918 1012.73,639.588 1013.29,660.468 1013.85,663.699 1014.41,614.237 1014.97,680.368 1015.53,677.235 1016.09,608.323 1016.65,613.597 1017.21,614.436 1017.77,599.011 1018.33,618.174 1018.89,606.767 1019.45,609.988 1020.01,627.522 1020.56,630.633 1021.12,636.415 1021.68,625.115 1022.24,596.843 1022.8,617.721 1023.36,617.887 1023.92,622.668 1024.48,607.701 1025.04,614.215 1025.6,638.054 1026.16,643.199 1026.72,664.013 1027.28,682.771 1027.83,683.347 1028.39,714.952 1028.95,733.321 1029.51,745.857 1030.07,744.798 1030.63,739.853 1031.19,721.272 1031.75,781.584 1032.31,780.994 1032.87,823.902 1033.43,798.037 1033.99,791.301 1034.55,815.959 1035.1,809.218 1035.66,804.819 1036.22,765.86 1036.78,742.66 1037.34,705.534 1037.9,702.878 1038.46,684.036 1039.02,683.907 1039.58,699.973 1040.14,696.733 1040.7,679.237 1041.26,663.547 1041.82,679.783 1042.38,696.985 1042.93,695.352 1043.49,713.257 1044.05,711.325 1044.61,740.085 1045.17,721.99 1045.73,718.155 1046.29,713.056 1046.85,697.512 1047.41,717.174 1047.97,700.035 1048.53,647.216 1049.09,634.475 1049.65,622.822 1050.2,611.898 1050.76,615.57 1051.32,654.997 1051.88,653.019 1052.44,674.141 1053,679.734 1053.56,666.451 1054.12,668.814 1054.68,669.933 1055.24,669.537 1055.8,688.807 1056.36,690.095 1056.92,672.479 1057.48,722.286 1058.03,734.32 1058.59,732.161 1059.15,679.4 1059.71,660.87 1060.27,643.45 1060.83,659.799 1061.39,676.44 1061.95,675.39 1062.51,690.044 1063.07,656.752 1063.63,628.75 1064.19,679.226 1064.75,712.788 1065.3,744.651 1065.86,741.1 1066.42,755.934 1066.98,769.031 1067.54,764.775 1068.1,726.975 1068.66,755.261 1069.22,752.765 1069.78,748.312 1070.34,695.341 1070.9,682.53 1071.46,697.161 1072.02,698.151 1072.57,664.327 1073.13,666.676 1073.69,666.767 1074.25,699.763 1074.81,679.64 1075.37,711.003 1075.93,708.958 1076.49,705.62 1077.05,719.22 1077.61,716.91 1078.17,715.116 1078.73,714.01 1079.29,711.457 1079.85,727.491 1080.4,707.932 1080.96,703.996 1081.52,720.709 1082.08,684.671 1082.64,715.824 1083.2,678.909 1083.76,665.671 1084.32,632.302 1084.88,639.608 1085.44,658.452 1086,645.947 1086.56,616.692 1087.12,638.851 1087.67,591.516 1088.23,612.396 1088.79,618.449 1089.35,592.187 1089.91,585.007 1090.47,589.852 1091.03,613.055 1091.59,613.969 1092.15,635.533 1092.71,636.446 1093.27,638.253 1093.83,688.266 1094.39,671.14 1094.94,702.373 1095.5,715.972 1096.06,698.895 1096.62,715.654 1097.18,699.372 1097.74,679.064 1098.3,694.524 1098.86,724.737 1099.42,782.681 1099.98,743.221 1100.54,723.867 1101.1,704.509 1101.66,751.011 1102.22,733.477 1102.77,769.492 1103.33,768.537 1103.89,780.904 1104.45,778.693 1105.01,739.135 1105.57,720.386 1106.13,714.578 1106.69,710.668 1107.25,710.774 1107.81,709.169 1108.37,708.269 1108.93,706.563 1109.49,721.462 1110.04,719.564 1110.6,747.467 1111.16,742.487 1111.72,786.152 1112.28,782.636 1112.84,746.668 1113.4,713.159 1113.96,682.439 1114.52,664.399 1115.08,696.011 1115.64,702.271 1116.2,687.651 1116.76,736.328 1117.31,715.64 1117.87,712.385 1118.43,710.988 1118.99,696.582 1119.55,693.012 1120.11,708.55 1120.67,724.085 1121.23,723.109 1121.79,738.686 1122.35,737.97 1122.91,717.932 1123.47,745.834 1124.03,726.624 1124.59,725.924 1125.14,705.387 1125.7,689.684 1126.26,690.314 1126.82,704.735 1127.38,687.277 1127.94,684.931 1128.5,700.026 1129.06,683.981 1129.62,670.061 1130.18,651.619 1130.74,656.115 1131.3,657.788 1131.86,690.828 1132.41,691.354 1132.97,659.228 1133.53,659 1134.09,627.258 1134.65,628.736 1135.21,615.106 1135.77,619.264 1136.33,639.767 1136.89,609.734 1137.45,615.627 1138.01,589.217 1138.57,595.636 1139.13,569.964 1139.68,608.283 1140.24,641.191 1140.8,632.451 1141.36,650.852 1141.92,620.706 1142.48,624.496 1143.04,625.036 1143.6,611.449 1144.16,601.77 1144.72,622.706 1145.28,612.779 1145.84,585.295 1146.4,607.789 1146.96,629.356 1147.51,617.282 1148.07,574.369 1148.63,580.233 1149.19,583.142 1149.75,588.219 1150.31,590.769 1150.87,592.261 1151.43,567.073 1151.99,587.809 1152.55,593.493 1153.11,597.162 1153.67,585.524 1154.23,594.639 1154.78,615.876 1155.34,619.269 1155.9,639.205 1156.46,643.089 1157.02,613.516 1157.58,598.689 1158.14,635.785 1158.7,621.705 1159.26,642.408 1159.82,627.538 1160.38,582.431 1160.94,622.428 1161.5,637.364 1162.05,654.707 1162.61,659.206 1163.17,679.463 1163.73,696.596 1164.29,724.637 1164.85,725.166 1165.41,739.393 1165.97,721.703 1166.53,705.254 1167.09,720.126 1167.65,716.662 1168.21,731.896 1168.77,748.731 1169.33,727.643 1169.88,711.56 1170.44,692.428 1171,692.208 1171.56,661.153 1172.12,645.701 1172.68,648.069 1173.24,666.265 1173.8,665.365 1174.36,668.813 1174.92,666.336 1175.48,666.66 1176.04,699.489 1176.6,681.543 1177.15,699.815 1177.71,696.106 1178.27,695.977 1178.83,678.307 1179.39,696.42 1179.95,680.643 1180.51,665.014 1181.07,667.762 1181.63,665.931 1182.19,677.404 1182.75,728.016 1183.31,725.497 1183.87,723.377 1184.43,702.4 1184.98,732.491 1185.54,744.872 1186.1,760.542 1186.66,756.993 1187.22,735.507 1187.78,762.397 1188.34,757.516 1188.9,770.669 1189.46,797.154 1190.02,807.751 1190.58,787.093 1191.14,765.878 1191.7,678.087 1192.25,677.717 1192.81,693.309 1193.37,709.739 1193.93,741.75 1194.49,722.221 1195.05,736.534 1195.61,731.988 1196.17,731.683 1196.73,676.467 1197.29,693.543 1197.85,710.101 1198.41,725.81 1198.97,738.384 1199.52,735.198 1200.08,731.833 1200.64,697.167 1201.2,694.457 1201.76,742.177 1202.32,721.84 1202.88,705.741 1203.44,670.496 1204,670.183 1204.56,669.884 1205.12,671.361 1205.68,621.883 1206.24,590.551 1206.8,614.277 1207.35,619.184 1207.91,621.985 1208.47,593.985 1209.03,614.616 1209.59,620.159 1210.15,640.812 1210.71,625.57 1211.27,629.53 1211.83,650.098 1212.39,666.839 1212.95,653.858 1213.51,655.445 1214.07,656.703 1214.62,642.732 1215.18,661.409 1215.74,644.783 1216.3,633.066 1216.86,620.892 1217.42,626.107 1217.98,648.199 1218.54,666.072 1219.1,664.494 1219.66,716.809 1220.22,717.433 1220.78,747.073 1221.34,710.82 1221.89,709.169 1222.45,692.54 1223.01,696.039 1223.57,709.315 1224.13,724.128 1224.69,695.202 1225.25,714.014 1225.81,714.001 1226.37,726.766 1226.93,725.95 1227.49,677.789 1228.05,678.506 1228.61,679.961 1229.17,696.248 1229.72,677.573 1230.28,711.824 1230.84,726.069 1231.4,710.471 1231.96,727.34 1232.52,709.43 1233.08,709.305 1233.64,694.518 1234.2,713.75 1234.76,712.047 1235.32,662.651 1235.88,662.779 1236.44,647.037 1236.99,651.685 1237.55,637.175 1238.11,638.182 1238.67,623.731 1239.23,626.93 1239.79,618.067 1240.35,617.391 1240.91,672.044 1241.47,674.544 1242.03,678.814 1242.59,695.807 1243.15,711.898 1243.71,691.186 1244.26,690.26 1244.82,688.869 1245.38,706.097 1245.94,705.782 1246.5,722 1247.06,726.067 1247.62,694.75 1248.18,713.615 1248.74,745.95 1249.3,772.981 1249.86,734.322 1250.42,782.855 1250.98,807.493 1251.54,820.623 1252.09,815.819 1252.65,844.183 1253.21,804.724 1253.77,802.776 1254.33,779.175 1254.89,794.24 1255.45,805.392 1256.01,816.105 1256.57,837.016 1257.13,796.98 1257.69,810.215 1258.25,775.835 1258.81,771.977 1259.36,769.847 1259.92,700.544 1260.48,734.378 1261.04,762.129 1261.6,757.302 1262.16,755.346 1262.72,720.927 1263.28,737.995 1263.84,769.596 1264.4,733.719 1264.96,747.881 1265.52,758.144 1266.08,735.649 1266.63,731.511 1267.19,760.291 1267.75,756.442 1268.31,738.956 1268.87,755.147 1269.43,763.525 1269.99,773.659 1270.55,766.925 1271.11,776.968 1271.67,720.365 1272.23,699.092 1272.79,712.023 1273.35,644.404 1273.91,676.423 1274.46,693.117 1275.02,676.532 1275.58,675.637 1276.14,671.583 1276.7,655.889 1277.26,641.427 1277.82,658.498 1278.38,659.464 1278.94,627.864 1279.5,597.254 1280.06,601.254 1280.62,592.732 1281.18,632.165 1281.73,648.893 1282.29,649.461 1282.85,699.16 1283.41,685.367 1283.97,700.421 1284.53,730.039 1285.09,724.903 1285.65,767.672 1286.21,763.502 1286.77,709.825 1287.33,689.803 1287.89,662.64 1288.45,660.137 1289,676.364 1289.56,690.658 1290.12,672.843 1290.68,688.219 1291.24,640.931 1291.8,692.601 1292.36,709.354 1292.92,688.708 1293.48,687.262 1294.04,685.994 1294.6,671.198 1295.16,637.897 1295.72,622.802 1296.28,612.665 1296.83,581.682 1297.39,567.597 1297.95,523.42 1298.51,498.852 1299.07,513.469 1299.63,541.368 1300.19,601.755 1300.75,634.113 1301.31,637.335 1301.87,638.466 1302.43,625.663 1302.99,629.291 1303.55,618.344 1304.1,638.835 1304.66,622.385 1305.22,594.8 1305.78,583.95 1306.34,589.732 1306.9,593.986 1307.46,629.7 1308.02,619.859 1308.58,627.318 1309.14,616.721 1309.7,643.034 1310.26,644.801 1310.82,662.184 1311.38,711.92 1311.93,715.819 1312.49,716.628 1313.05,697.918 1313.61,666.268 1314.17,654.779 1314.73,653.526 1315.29,708.439 1315.85,690.678 1316.41,704.053 1316.97,699.882 1317.53,712.147 1318.09,678.427 1318.65,661.944 1319.2,661.724 1319.76,693.14 1320.32,677.563 1320.88,679.667 1321.44,647.585 1322,682.226 1322.56,667.004 1323.12,668.007 1323.68,637.697 1324.24,641.646 1324.8,657.268 1325.36,644.621 1325.92,645.836 1326.47,680.192 1327.03,697.357 1327.59,694.778 1328.15,674.476 1328.71,658.85 1329.27,676.065 1329.83,661.862 1330.39,696.406 1330.95,680.361 1331.51,683.774 1332.07,703.323 1332.63,752.588 1333.19,715.017 1333.75,699.563 1334.3,727.543 1334.86,757.955 1335.42,771.416 1335.98,764.109 1336.54,792.985 1337.1,788.306 1337.66,785.351 1338.22,794.476 1338.78,772.559 1339.34,763.953 1339.9,723.457 1340.46,753.66 1341.02,747.487 1341.57,775.019 1342.13,755.142 1342.69,706.02 1343.25,673.943 1343.81,674.534 1344.37,692.05 1344.93,676.146 1345.49,643.628 1346.05,645.231 1346.61,644.123 1347.17,649.168 1347.73,648.498 1348.29,651.922 1348.84,637.817 1349.4,640.502 1349.96,675.062 1350.52,674.904 1351.08,690.45 1351.64,705.011 1352.2,686.714 1352.76,671.303 1353.32,657.669 1353.88,623.152 1354.44,624.489 1355,608.701 1355.56,609.846 1356.12,615.747 1356.67,655.124 1357.23,673.88 1357.79,706.502 1358.35,721.227 1358.91,702.328 1359.47,702.006 1360.03,737.669 1360.59,703.074 1361.15,699.818 1361.71,712.429 1362.27,709.876 1362.83,677.421 1363.39,645.087 1363.94,660.732 1364.5,661.041 1365.06,694.966 1365.62,712.039 1366.18,723.345 1366.74,736.058 1367.3,745.458 1367.86,724.224 1368.42,753.109 1368.98,749.232 1369.54,726.942 1370.1,707.21 1370.66,674.326 1371.21,671.251 1371.77,689.608 1372.33,739.027 1372.89,700.286 1373.45,668.444 1374.01,670.267 1374.57,703.37 1375.13,703.695 1375.69,668.49 1376.25,683.281 1376.81,682.108 1377.37,664.064 1377.93,661.796 1378.49,680.511 1379.04,648.992 1379.6,685.541 1380.16,669.238 1380.72,655.536 1381.28,673.196 1381.84,706.036 1382.4,702.901 1382.96,734.932 1383.52,733.703 1384.08,745.641 1384.64,709.762 1385.2,725.171 1385.76,753.94 1386.31,735.61 1386.87,714.11 1387.43,697.751 1387.99,683.754 1388.55,682.483 1389.11,716.362 1389.67,718.771 1390.23,697.803 1390.79,715.373 1391.35,718.387 1391.91,716.962 1392.47,699.4 1393.03,683.177 1393.58,683.895 1394.14,702.384 1394.7,688.802 1395.26,687.148 1395.82,651.234 1396.38,636.971 1396.94,670.312 1397.5,671.912 1398.06,656.301 1398.62,673.93 1399.18,656.932 1399.74,657.389 1400.3,656.095 1400.86,638.324 1401.41,641.863 1401.97,623.663 1402.53,610.738 1403.09,598.229 1403.65,608.674 1404.21,628.47 1404.77,633.525 1405.33,683.563 1405.89,670.914 1406.45,686.128 1407.01,667.878 1407.57,651.311 1408.13,652.432 1408.68,631.228 1409.24,617.628 1409.8,621.511 1410.36,657.235 1410.92,640.623 1411.48,641.342 1412.04,629.654 1412.6,631.778 1413.16,649.831 1413.72,702.025 1414.28,687.861 1414.84,690.116 1415.4,689.706 1415.95,688.978 1416.51,655.64 1417.07,643.813 1417.63,644.877 1418.19,627.93 1418.75,614.538 1419.31,634.281 1419.87,622.482 1420.43,640.454 1420.99,624.95 1421.55,611.351 1422.11,617.255 1422.67,650.585 1423.23,674.686 1423.78,721.285 1424.34,734.054 1424.9,780.892 1425.46,774.291 1426.02,752.957 1426.58,751.055 1427.14,733.985 1427.7,729.132 1428.26,742.773 1428.82,755.568 1429.38,752.398 1429.94,762.51 1430.5,775.395 1431.05,772.355 1431.61,769.738 1432.17,765.639 1432.73,744.632 1433.29,740.159 1433.85,719.027 1434.41,730.496 1434.97,678.347 1435.53,679.434 1436.09,697.56 1436.65,723.847 1437.21,735.617 1437.77,733.821 1438.33,701.005 1438.88,685.099 1439.44,670.986 1440,688.197 1440.56,683.501 1441.12,682.193 1441.68,664.199 1442.24,644.914 1442.8,649.707 1443.36,683.582 1443.92,683.697 1444.48,667.997 1445.04,716.018 1445.6,680.377 1446.15,678.078 1446.71,679.187 1447.27,711.916 1447.83,725.332 1448.39,722.392 1448.95,722.343 1449.51,704.444 1450.07,702.825 1450.63,686.529 1451.19,633.14 1451.75,620.357 1452.31,657.6 1452.87,671.802 1453.42,691.058 1453.98,725.439 1454.54,737.196 1455.1,752.626 1455.66,735.227 1456.22,748.98 1456.78,744.775 1457.34,773.281 1457.9,754.457 1458.46,753.562 1459.02,733.026 1459.58,730.85 1460.14,695.923 1460.7,692.002 1461.25,709.533 1461.81,690.222 1462.37,687.458 1462.93,716.04 1463.49,698.487 1464.05,697.384 1464.61,696.461 1465.17,682.926 1465.73,682.258 1466.29,731.725 1466.85,748.399 1467.41,695.168 1467.97,698.689 1468.52,700.133 1469.08,651.908 1469.64,640.476 1470.2,659.748 1470.76,644.612 1471.32,634.706 1471.88,687.258 1472.44,709.611 1473,706.955 1473.56,689.661 1474.12,656.075 1474.68,664.416 1475.24,632.856 1475.79,685.458 1476.35,654.53 1476.91,673.706 1477.47,675.84 1478.03,710.268 1478.59,691.527 1479.15,657.655 1479.71,644.41 1480.27,646.756 1480.83,647.239 1481.39,651.629 1481.95,621.712 1482.51,608.458 1483.07,612.106 1483.62,614.207 1484.18,587.007 1484.74,560.249 1485.3,567.165 1485.86,620.712 1486.42,625.909 1486.98,650.733 1487.54,666.476 1488.1,620.179 1488.66,622.118 1489.22,624.737 1489.78,583.644 1490.34,603.268 1490.89,575.706 1491.45,579.861 1492.01,584.693 1492.57,602.465 1493.13,605.404 1493.69,607.801 1494.25,612.286 1494.81,682.476 1495.37,698.122 1495.93,685.603 1496.49,682.207 1497.05,684.618 1497.61,651.569 1498.16,649.063 1498.72,649.028 1499.28,666.328 1499.84,632.652 1500.4,633.633 1500.96,605.251 1501.52,625.462 1502.08,613.17 1502.64,635.5 1503.2,650.38 1503.76,651.99 1504.32,626.826 1504.88,646.902 1505.44,667.864 1505.99,701.532 1506.55,717.538 1507.11,732.867 1507.67,747.066 1508.23,748.281 1508.79,729.759 1509.35,710.208 1509.91,722.472 1510.47,688.405 1511.03,703.254 1511.59,719.518 1512.15,749.923 1512.71,732.21 1513.26,730.948 1513.82,730.099 1514.38,698.208 1514.94,682.138 1515.5,681.518 1516.06,679.522 1516.62,696.118 1517.18,666.062 1517.74,682.374 1518.3,664.051 1518.86,634.371 1519.42,638.056 1519.98,624.739 1520.53,626.717 1521.09,630.859 1521.65,634.732 1522.21,668.86 1522.77,700.54 1523.33,680.828 1523.89,665.458 1524.45,665.078 1525.01,699.146 1525.57,700.416 1526.13,683.97 1526.69,669.622 1527.25,686.464 1527.81,668.902 1528.36,686.075 1528.92,673.739 1529.48,657.105 1530.04,691.518 1530.6,674.724 1531.16,665.234 1531.72,682.623 1532.28,665.387 1532.84,668.572 1533.4,668.858 1533.96,670.611 1534.52,683.253 1535.08,682.657 1535.63,715.167 1536.19,728.373 1536.75,727.487 1537.31,773.486 1537.87,766.834 1538.43,760.535 1538.99,756.393 1539.55,755.97 1540.11,735.493 1540.67,750.016 1541.23,728.877 1541.79,725.32 1542.35,724.44 1542.9,743.106 1543.46,756.432 1544.02,734.419 1544.58,712.839 1545.14,725.006 1545.7,706.339 1546.26,703.665 1546.82,671.905 1547.38,688.46 1547.94,654.029 1548.5,651.077 1549.06,649.596 1549.62,700.865 1550.18,746.409 1550.73,727.828 1551.29,745.064 1551.85,743.588 1552.41,740.322 1552.97,717.56 1553.53,732.155 1554.09,713.109 1554.65,712.74 1555.21,736.047 1555.77,748.37 1556.33,743.354 1556.89,757.826 1557.45,735.813 1558,701.598 1558.56,703.893 1559.12,701.002 1559.68,735.991 1560.24,735.775 1560.8,735.371 1561.36,729.429 1561.92,679.272 1562.48,677.848 1563.04,710.403 1563.6,724.349 1564.16,721.549 1564.72,720.157 1565.28,715.857 1565.83,719.229 1566.39,717.46 1566.95,685.25 1567.51,652.951 1568.07,652.26 1568.63,585.909 1569.19,573.856 1569.75,579.929 1570.31,587.133 1570.87,626.42 1571.43,646.835 1571.99,648.601 1572.55,632.384 1573.1,619.284 1573.66,639.28 1574.22,639.929 1574.78,640.751 1575.34,626.71 1575.9,665.91 1576.46,698.45 1577.02,682.809 1577.58,666.416 1578.14,653.692 1578.7,638.347 1579.26,673.933 1579.82,679.603 1580.37,699.519 1580.93,702.098 1581.49,686.557 1582.05,682.608 1582.61,700.559 1583.17,702.367 1583.73,665.682 1584.29,668.396 1584.85,683.641 1585.41,683.226 1585.97,665.698 1586.53,670.025 1587.09,656.061 1587.65,676.211 1588.2,676.434 1588.76,632.423 1589.32,602.889 1589.88,607.166 1590.44,610.827 1591,595.357 1591.56,619.201 1592.12,606.908 1592.68,610.455 1593.24,648.867 1593.8,644.385 1594.36,626.82 1594.92,645.464 1595.47,679.898 1596.03,665.583 1596.59,666.748 1597.15,668.28 1597.71,689.003 1598.27,671.805 1598.83,691.378 1599.39,691.206 1599.95,705.289 1600.51,701.849 1601.07,733.113 1601.63,747.76 1602.19,742.923 1602.74,768.37 1603.3,748.822 1603.86,728.332 1604.42,789.256 1604.98,768.096 1605.54,747.15 1606.1,726.022 1606.66,722.305 1607.22,737.262 1607.78,704.062 1608.34,701.12 1608.9,701.78 1609.46,716.892 1610.02,747.755 1610.57,743.18 1611.13,738.229 1611.69,733.411 1612.25,747.768 1612.81,744.511 1613.37,737.846 1613.93,733.51 1614.49,728.558 1615.05,726.95 1615.61,710.154 1616.17,704.372 1616.73,706.289 1617.29,707.368 1617.84,708.068 1618.4,707.523 1618.96,724.846 1619.52,704.794 1620.08,720.692 1620.64,733.75 1621.2,742.799 1621.76,755.403 1622.32,769.262 1622.88,798.396 1623.44,799.667 1624,812.99 1624.56,804.592 1625.11,794.672 1625.67,773.185 1626.23,769.531 1626.79,795.563 1627.35,776.455 1627.91,770.541 1628.47,783.403 1629.03,757.326 1629.59,702.554 1630.15,685.063 1630.71,652.575 1631.27,654.186 1631.83,669.218 1632.39,686.052 1632.94,700.664 1633.5,698.77 1634.06,698.225 1634.62,714.437 1635.18,742.125 1635.74,704.619 1636.3,730.029 1636.86,712.52 1637.42,728.333 1637.98,691.379 1638.54,685.407 1639.1,703.69 1639.66,703.679 1640.21,705.305 1640.77,736.354 1641.33,700.926 1641.89,712.434 1642.45,679.04 1643.01,665.568 1643.57,684.545 1644.13,682.599 1644.69,666.488 1645.25,652.47 1645.81,651.066 1646.37,652.02 1646.93,671.507 1647.48,673.494 1648.04,670.049 1648.6,640.732 1649.16,644.368 1649.72,642.338 1650.28,628.229 1650.84,629.081 1651.4,665.923 1651.96,663.011 1652.52,680.617 1653.08,696.649 1653.64,725.524 1654.2,721.373 1654.76,705.15 1655.31,669.696 1655.87,686.529 1656.43,704.839 1656.99,703.196 1657.55,701.815 1658.11,683.444 1658.67,698.778 1659.23,681.794 1659.79,698.164 1660.35,760.744 1660.91,768.025 1661.47,765.973 1662.03,728.01 1662.58,720.713 1663.14,687.116 1663.7,702.652 1664.26,701.541 1664.82,696.604 1665.38,746.393 1665.94,730.412 1666.5,710.36 1667.06,695.081 1667.62,724.523 1668.18,703.842 1668.74,716.012 1669.3,698.762 1669.85,695.279 1670.41,743.4 1670.97,721.176 1671.53,700.965 1672.09,701.24 1672.65,683.937 1673.21,683.506 1673.77,716.035 1674.33,700.206 1674.89,700.103 1675.45,732.193 1676.01,700.875 1676.57,713.767 1677.13,695.63 1677.68,677.978 1678.24,679.405 1678.8,676.786 1679.36,675.839 1679.92,655.651 1680.48,655.295 1681.04,670.772 1681.6,640.173 1682.16,637.91 1682.72,655.342 1683.28,657.551 1683.84,676.576 1684.4,662.828 1684.95,681.875 1685.51,664.347 1686.07,665.794 1686.63,662.811 1687.19,614.452 1687.75,600.894 1688.31,573.66 1688.87,593.591 1689.43,582.105 1689.99,573.726 1690.55,561.491 1691.11,567.037 1691.67,591.583 1692.23,600.436 1692.78,617.932 1693.34,635.926 1693.9,672.578 1694.46,706.692 1695.02,691.113 1695.58,686.987 1696.14,687.254 1696.7,705.352 1697.26,717.712 1697.82,699.632 1698.38,683.745 1698.94,669.453 1699.5,670.384 1700.05,656.007 1700.61,646.493 1701.17,681.495 1701.73,648.357 1702.29,635.704 1702.85,590.612 1703.41,613.611 1703.97,597.015 1704.53,567.434 1705.09,540.516 1705.65,551.381 1706.21,611.587 1706.77,615.688 1707.32,619.385 1707.88,673.019 1708.44,641.039 1709,643.942 1709.56,626.877 1710.12,612.175 1710.68,682.768 1711.24,648.523 1711.8,667.566 1712.36,652.904 1712.92,641.015 1713.48,645.874 1714.04,628.713 1714.6,633.3 1715.15,636.248 1715.71,622.767 1716.27,623.305 1716.83,592.838 1717.39,598.078 1717.95,618.686 1718.51,609.517 1719.07,616.588 1719.63,651.694 1720.19,634.71 1720.75,641.783 1721.31,666.207 1721.87,685.323 1722.42,684.075 1722.98,687.141 1723.54,687.936 1724.1,702.352 1724.66,699.951 1725.22,715.774 1725.78,713.398 1726.34,740.273 1726.9,706.187 1727.46,723.69 1728.02,672.021 1728.58,660.058 1729.14,660.505 1729.69,665.722 1730.25,696.563 1730.81,696.051 1731.37,716.707 1731.93,716.976 1732.49,683.933 1733.05,715.058 1733.61,712.862 1734.17,700.015 1734.73,681.969 1735.29,668.485 1735.85,666.993 1736.41,666.178 1736.97,714.53 1737.52,696.972 1738.08,700.092 1738.64,715.983 1739.2,730.114 1739.76,713.068 1740.32,712.806 1740.88,708.612 1741.44,707.788 1742,723.801 1742.56,738.619 1743.12,753.354 1743.68,767.517 1744.24,794.957 1744.79,805.747 1745.35,764.968 1745.91,741.871 1746.47,704.308 1747.03,733.79 1747.59,733.882 1748.15,747.043 1748.71,756.138 1749.27,751.986 1749.83,746.27 1750.39,726.135 1750.95,710.477 1751.51,708.453 1752.06,708.769 1752.62,724.368 1753.18,707.515 1753.74,708.659 1754.3,705.308 1754.86,687.737 1755.42,675.507 1755.98,661.324 1756.54,674.745 1757.1,676.559 1757.66,679.93 1758.22,668.635 1758.78,639.633 1759.34,660.643 1759.89,646.966 1760.45,680.955 1761.01,663.108 1761.57,683.401 1762.13,679.664 1762.69,679.483 1763.25,669.805 1763.81,620.719 1764.37,623.429 1764.93,606.678 1765.49,627.287 1766.05,617.702 1766.61,623.827 1767.16,674.839 1767.72,676.232 1768.28,645.86 1768.84,629.57 1769.4,630.42 1769.96,634.346 1770.52,623.641 1771.08,628.55 1771.64,631.704 1772.2,617.158 1772.76,605.344 1773.32,611.385 1773.88,628.833 1774.43,677.289 1774.99,695.46 1775.55,661.85 1776.11,693.448 1776.67,661.114 1777.23,676.601 1777.79,693.914 1778.35,693.17 1778.91,689.892 1779.47,675.278 1780.03,660.899 1780.59,647.174 1781.15,663.807 1781.71,665.345 1782.26,650.815 1782.82,681.314 1783.38,715.164 1783.94,678.086 1784.5,695.591 1785.06,711.512 1785.62,713.179 1786.18,680.78 1786.74,661.955 1787.3,694.281 1787.86,679.692 1788.42,694.806 1788.98,696.511 1789.53,729.012 1790.09,726.181 1790.65,707.526 1791.21,705.833 1791.77,671.643 1792.33,626.575 1792.89,613.256 1793.45,615.978 1794.01,619.837 1794.57,623.093 1795.13,638.066 1795.69,623.921 1796.25,626.24 1796.8,616.332 1797.36,601.691 1797.92,624.162 1798.48,643.148 1799.04,657.557 1799.6,646.236 1800.16,632.415 1800.72,617.205 1801.28,638.63 1801.84,624.017 1802.4,611.32 1802.96,648.107 1803.52,682.193 1804.08,683.888 1804.63,700.498 1805.19,681.595 1805.75,665.371 1806.31,684.872 1806.87,682.849 1807.43,685.421 1807.99,703.231 1808.55,715.315 1809.11,763.268 1809.67,772.604 1810.23,800.922 1810.79,794.358 1811.35,757.08 1811.9,765.879 1812.46,777.779 1813.02,807.13 1813.58,798.98 1814.14,809.394 1814.7,772.846 1815.26,769.457 1815.82,748.009 1816.38,709.917 1816.94,692.049 1817.5,659.329 1818.06,659.066 1818.62,661.472 1819.18,630.99 1819.73,635.538 1820.29,637.64 1820.85,624.139 1821.41,623.149 1821.97,590.812 1822.53,579.067 1823.09,585.515 1823.65,559.24 1824.21,613.52 1824.77,597.551 1825.33,585.708 1825.89,561.16 1826.45,602.116 1827,622.556 1827.56,643.559 1828.12,680.887 1828.68,715.951 1829.24,730.232 1829.8,696.001 1830.36,692.398 1830.92,693.694 1831.48,660.839 1832.04,694.555 1832.6,644.383 1833.16,630.138 1833.72,649.919 1834.27,671.463 1834.83,675.277 1835.39,673.178 1835.95,655.815 1836.51,644.351 1837.07,629.881 1837.63,636.754 1838.19,642.92 \"/>\n<path clip-path=\"url(#clip293)\" d=\"M720.247 689.363 L720.806 689.363 L721.365 689.363 L721.924 689.363 L722.484 689.363 L723.043 689.363 L723.602 689.363 L724.161 689.363 L724.721 689.363 L725.28 689.363 L725.839 689.363 L726.398 689.363 L726.958 689.363 L727.517 689.363 L728.076 689.363 L728.635 689.363 L729.195 689.363 L729.754 689.363 L730.313 689.363 L730.872 689.363 L731.432 689.363 L731.991 689.363 L732.55 689.363 L733.109 689.363 L733.669 689.363 L734.228 689.363 L734.787 689.363 L735.346 689.363 L735.906 689.363 L736.465 689.363 L737.024 689.363 L737.583 689.363 L738.143 689.363 L738.702 689.363 L739.261 689.363 L739.82 689.363 L740.38 689.363 L740.939 689.363 L741.498 689.363 L742.057 689.363 L742.617 689.363 L743.176 689.363 L743.735 689.363 L744.294 689.363 L744.854 689.363 L745.413 689.363 L745.972 689.363 L746.531 689.363 L747.091 689.363 L747.65 689.363 L748.209 689.363 L748.768 689.363 L749.328 689.363 L749.887 689.363 L750.446 689.363 L751.005 689.363 L751.565 689.363 L752.124 689.363 L752.683 689.363 L753.242 689.363 L753.802 689.363 L754.361 689.363 L754.92 689.363 L755.479 689.363 L756.039 689.363 L756.598 689.363 L757.157 689.363 L757.716 689.363 L758.276 689.363 L758.835 689.363 L759.394 689.363 L759.953 689.363 L760.513 689.363 L761.072 689.363 L761.631 689.363 L762.19 689.363 L762.75 689.363 L763.309 689.363 L763.868 689.363 L764.427 689.363 L764.987 689.363 L765.546 689.363 L766.105 689.363 L766.664 689.363 L767.224 689.363 L767.783 689.363 L768.342 689.363 L768.901 689.363 L769.461 689.363 L770.02 689.363 L770.579 689.363 L771.138 689.363 L771.698 689.363 L772.257 689.363 L772.816 689.363 L773.375 689.363 L773.935 689.363 L774.494 689.363 L775.053 689.363 L775.612 689.363 L776.172 689.363 L776.731 689.363 L777.29 689.363 L777.849 689.363 L778.409 689.363 L778.968 689.363 L779.527 689.363 L780.086 689.363 L780.646 689.363 L781.205 689.363 L781.764 689.363 L782.323 689.363 L782.883 689.363 L783.442 689.363 L784.001 689.363 L784.56 689.363 L785.12 689.363 L785.679 689.363 L786.238 689.363 L786.797 689.363 L787.357 689.363 L787.916 689.363 L788.475 689.363 L789.034 689.363 L789.594 689.363 L790.153 689.363 L790.712 689.363 L791.271 689.363 L791.831 689.363 L792.39 689.363 L792.949 689.363 L793.508 689.363 L794.068 689.363 L794.627 689.363 L795.186 689.363 L795.745 689.363 L796.305 689.363 L796.864 689.363 L797.423 689.363 L797.982 689.363 L798.542 689.363 L799.101 689.363 L799.66 689.363 L800.219 689.363 L800.779 689.363 L801.338 689.363 L801.897 689.363 L802.456 689.363 L803.016 689.363 L803.575 689.363 L804.134 689.363 L804.693 689.363 L805.253 689.363 L805.812 689.363 L806.371 689.363 L806.931 689.363 L807.49 689.363 L808.049 689.363 L808.608 689.363 L809.168 689.363 L809.727 689.363 L810.286 689.363 L810.845 689.363 L811.405 689.363 L811.964 689.363 L812.523 689.363 L813.082 689.363 L813.642 689.363 L814.201 689.363 L814.76 689.363 L815.319 689.363 L815.879 689.363 L816.438 689.363 L816.997 689.363 L817.556 689.363 L818.116 689.363 L818.675 689.363 L819.234 689.363 L819.793 689.363 L820.353 689.363 L820.912 689.363 L821.471 689.363 L822.03 689.363 L822.59 689.363 L823.149 689.363 L823.708 689.363 L824.267 689.363 L824.827 689.363 L825.386 689.363 L825.945 689.363 L826.504 689.363 L827.064 689.363 L827.623 689.363 L828.182 689.363 L828.741 689.363 L829.301 689.363 L829.86 689.363 L830.419 689.363 L830.978 689.363 L831.538 689.363 L832.097 689.363 L832.656 689.363 L833.215 689.363 L833.775 689.363 L834.334 689.363 L834.893 689.363 L835.452 689.363 L836.012 689.363 L836.571 689.363 L837.13 689.363 L837.689 689.363 L838.249 689.363 L838.808 689.363 L839.367 689.363 L839.926 689.363 L840.486 689.363 L841.045 689.363 L841.604 689.363 L842.163 689.363 L842.723 689.363 L843.282 689.363 L843.841 689.363 L844.4 689.363 L844.96 689.363 L845.519 689.363 L846.078 689.363 L846.637 689.363 L847.197 689.363 L847.756 689.363 L848.315 689.363 L848.874 689.363 L849.434 689.363 L849.993 689.363 L850.552 689.363 L851.111 689.363 L851.671 689.363 L852.23 689.363 L852.789 689.363 L853.348 689.363 L853.908 689.363 L854.467 689.363 L855.026 689.363 L855.585 689.363 L856.145 689.363 L856.704 689.363 L857.263 689.363 L857.822 689.363 L858.382 689.363 L858.941 689.363 L859.5 689.363 L860.059 689.363 L860.619 689.363 L861.178 689.363 L861.737 689.363 L862.296 689.363 L862.856 689.363 L863.415 689.363 L863.974 689.363 L864.533 689.363 L865.093 689.363 L865.652 689.363 L866.211 689.363 L866.77 689.363 L867.33 689.363 L867.889 689.363 L868.448 689.363 L869.007 689.363 L869.567 689.363 L870.126 689.363 L870.685 689.363 L871.244 689.363 L871.804 689.363 L872.363 689.363 L872.922 689.363 L873.481 689.363 L874.041 689.363 L874.6 689.363 L875.159 689.363 L875.718 689.363 L876.278 689.363 L876.837 689.363 L877.396 689.363 L877.955 689.363 L878.515 689.363 L879.074 689.363 L879.633 689.363 L880.192 689.363 L880.752 689.363 L881.311 689.363 L881.87 689.363 L882.429 689.363 L882.989 689.363 L883.548 689.363 L884.107 689.363 L884.666 689.363 L885.226 689.363 L885.785 689.363 L886.344 689.363 L886.903 689.363 L887.463 689.363 L888.022 689.363 L888.581 689.363 L889.14 689.363 L889.7 689.363 L890.259 689.363 L890.818 689.363 L891.377 689.363 L891.937 689.363 L892.496 689.363 L893.055 689.363 L893.614 689.363 L894.174 689.363 L894.733 689.363 L895.292 689.363 L895.851 689.363 L896.411 689.363 L896.97 689.363 L897.529 689.363 L898.088 689.363 L898.648 689.363 L899.207 689.363 L899.766 689.363 L900.325 689.363 L900.885 689.363 L901.444 689.363 L902.003 689.363 L902.562 689.363 L903.122 689.363 L903.681 689.363 L904.24 689.363 L904.799 689.363 L905.359 689.363 L905.918 689.363 L906.477 689.363 L907.036 689.363 L907.596 689.363 L908.155 689.363 L908.714 689.363 L909.273 689.363 L909.833 689.363 L910.392 689.363 L910.951 689.363 L911.51 689.363 L912.07 689.363 L912.629 689.363 L913.188 689.363 L913.747 689.363 L914.307 689.363 L914.866 689.363 L915.425 689.363 L915.984 689.363 L916.544 689.363 L917.103 689.363 L917.662 689.363 L918.221 689.363 L918.781 689.363 L919.34 689.363 L919.899 689.363 L920.458 689.363 L921.018 689.363 L921.577 689.363 L922.136 689.363 L922.695 689.363 L923.255 689.363 L923.814 689.363 L924.373 689.363 L924.932 689.363 L925.492 689.363 L926.051 689.363 L926.61 689.363 L927.169 689.363 L927.729 689.363 L928.288 689.363 L928.847 689.363 L929.406 689.363 L929.966 689.363 L930.525 689.363 L931.084 689.363 L931.644 689.363 L932.203 689.363 L932.762 689.363 L933.321 689.363 L933.881 689.363 L934.44 689.363 L934.999 689.363 L935.558 689.363 L936.118 689.363 L936.677 689.363 L937.236 689.363 L937.795 689.363 L938.355 689.363 L938.914 689.363 L939.473 689.363 L940.032 689.363 L940.592 689.363 L941.151 689.363 L941.71 689.363 L942.269 689.363 L942.829 689.363 L943.388 689.363 L943.947 689.363 L944.506 689.363 L945.066 689.363 L945.625 689.363 L946.184 689.363 L946.743 689.363 L947.303 689.363 L947.862 689.363 L948.421 689.363 L948.98 689.363 L949.54 689.363 L950.099 689.363 L950.658 689.363 L951.217 689.363 L951.777 689.363 L952.336 689.363 L952.895 689.363 L953.454 689.363 L954.014 689.363 L954.573 689.363 L955.132 689.363 L955.691 689.363 L956.251 689.363 L956.81 689.363 L957.369 689.363 L957.928 689.363 L958.488 689.363 L959.047 689.363 L959.606 689.363 L960.165 689.363 L960.725 689.363 L961.284 689.363 L961.843 689.363 L962.402 689.363 L962.962 689.363 L963.521 689.363 L964.08 689.363 L964.639 689.363 L965.199 689.363 L965.758 689.363 L966.317 689.363 L966.876 689.363 L967.436 689.363 L967.995 689.363 L968.554 689.363 L969.113 689.363 L969.673 689.363 L970.232 689.363 L970.791 689.363 L971.35 689.363 L971.91 689.363 L972.469 689.363 L973.028 689.363 L973.587 689.363 L974.147 689.363 L974.706 689.363 L975.265 689.363 L975.824 689.363 L976.384 689.363 L976.943 689.363 L977.502 689.363 L978.061 689.363 L978.621 689.363 L979.18 689.363 L979.739 689.363 L980.298 689.363 L980.858 689.363 L981.417 689.363 L981.976 689.363 L982.535 689.363 L983.095 689.363 L983.654 689.363 L984.213 689.363 L984.772 689.363 L985.332 689.363 L985.891 689.363 L986.45 689.363 L987.009 689.363 L987.569 689.363 L988.128 689.363 L988.687 689.363 L989.246 689.363 L989.806 689.363 L990.365 689.363 L990.924 689.363 L991.483 689.363 L992.043 689.363 L992.602 689.363 L993.161 689.363 L993.72 689.363 L994.28 689.363 L994.839 689.363 L995.398 689.363 L995.957 689.363 L996.517 689.363 L997.076 689.363 L997.635 689.363 L998.194 689.363 L998.754 689.363 L999.313 689.363 L999.872 689.363 L1000.43 689.363 L1000.99 689.363 L1001.55 689.363 L1002.11 689.363 L1002.67 689.363 L1003.23 689.363 L1003.79 689.363 L1004.35 689.363 L1004.91 689.363 L1005.46 689.363 L1006.02 689.363 L1006.58 689.363 L1007.14 689.363 L1007.7 689.363 L1008.26 689.363 L1008.82 689.363 L1009.38 689.363 L1009.94 689.363 L1010.5 689.363 L1011.06 689.363 L1011.62 689.363 L1012.18 689.363 L1012.73 689.363 L1013.29 689.363 L1013.85 689.363 L1014.41 689.363 L1014.97 689.363 L1015.53 689.363 L1016.09 689.363 L1016.65 689.363 L1017.21 689.363 L1017.77 689.363 L1018.33 689.363 L1018.89 689.363 L1019.45 689.363 L1020.01 689.363 L1020.56 689.363 L1021.12 689.363 L1021.68 689.363 L1022.24 689.363 L1022.8 689.363 L1023.36 689.363 L1023.92 689.363 L1024.48 689.363 L1025.04 689.363 L1025.6 689.363 L1026.16 689.363 L1026.72 689.363 L1027.28 689.363 L1027.83 689.363 L1028.39 689.363 L1028.95 689.363 L1029.51 689.363 L1030.07 689.363 L1030.63 689.363 L1031.19 689.363 L1031.75 689.363 L1032.31 689.363 L1032.87 689.363 L1033.43 689.363 L1033.99 689.363 L1034.55 689.363 L1035.1 689.363 L1035.66 689.363 L1036.22 689.363 L1036.78 689.363 L1037.34 689.363 L1037.9 689.363 L1038.46 689.363 L1039.02 689.363 L1039.58 689.363 L1040.14 689.363 L1040.7 689.363 L1041.26 689.363 L1041.82 689.363 L1042.38 689.363 L1042.93 689.363 L1043.49 689.363 L1044.05 689.363 L1044.61 689.363 L1045.17 689.363 L1045.73 689.363 L1046.29 689.363 L1046.85 689.363 L1047.41 689.363 L1047.97 689.363 L1048.53 689.363 L1049.09 689.363 L1049.65 689.363 L1050.2 689.363 L1050.76 689.363 L1051.32 689.363 L1051.88 689.363 L1052.44 689.363 L1053 689.363 L1053.56 689.363 L1054.12 689.363 L1054.68 689.363 L1055.24 689.363 L1055.8 689.363 L1056.36 689.363 L1056.92 689.363 L1057.48 689.363 L1058.03 689.363 L1058.59 689.363 L1059.15 689.363 L1059.71 689.363 L1060.27 689.363 L1060.83 689.363 L1061.39 689.363 L1061.95 689.363 L1062.51 689.363 L1063.07 689.363 L1063.63 689.363 L1064.19 689.363 L1064.75 689.363 L1065.3 689.363 L1065.86 689.363 L1066.42 689.363 L1066.98 689.363 L1067.54 689.363 L1068.1 689.363 L1068.66 689.363 L1069.22 689.363 L1069.78 689.363 L1070.34 689.363 L1070.9 689.363 L1071.46 689.363 L1072.02 689.363 L1072.57 689.363 L1073.13 689.363 L1073.69 689.363 L1074.25 689.363 L1074.81 689.363 L1075.37 689.363 L1075.93 689.363 L1076.49 689.363 L1077.05 689.363 L1077.61 689.363 L1078.17 689.363 L1078.73 689.363 L1079.29 689.363 L1079.85 689.363 L1080.4 689.363 L1080.96 689.363 L1081.52 689.363 L1082.08 689.363 L1082.64 689.363 L1083.2 689.363 L1083.76 689.363 L1084.32 689.363 L1084.88 689.363 L1085.44 689.363 L1086 689.363 L1086.56 689.363 L1087.12 689.363 L1087.67 689.363 L1088.23 689.363 L1088.79 689.363 L1089.35 689.363 L1089.91 689.363 L1090.47 689.363 L1091.03 689.363 L1091.59 689.363 L1092.15 689.363 L1092.71 689.363 L1093.27 689.363 L1093.83 689.363 L1094.39 689.363 L1094.94 689.363 L1095.5 689.363 L1096.06 689.363 L1096.62 689.363 L1097.18 689.363 L1097.74 689.363 L1098.3 689.363 L1098.86 689.363 L1099.42 689.363 L1099.98 689.363 L1100.54 689.363 L1101.1 689.363 L1101.66 689.363 L1102.22 689.363 L1102.77 689.363 L1103.33 689.363 L1103.89 689.363 L1104.45 689.363 L1105.01 689.363 L1105.57 689.363 L1106.13 689.363 L1106.69 689.363 L1107.25 689.363 L1107.81 689.363 L1108.37 689.363 L1108.93 689.363 L1109.49 689.363 L1110.04 689.363 L1110.6 689.363 L1111.16 689.363 L1111.72 689.363 L1112.28 689.363 L1112.84 689.363 L1113.4 689.363 L1113.96 689.363 L1114.52 689.363 L1115.08 689.363 L1115.64 689.363 L1116.2 689.363 L1116.76 689.363 L1117.31 689.363 L1117.87 689.363 L1118.43 689.363 L1118.99 689.363 L1119.55 689.363 L1120.11 689.363 L1120.67 689.363 L1121.23 689.363 L1121.79 689.363 L1122.35 689.363 L1122.91 689.363 L1123.47 689.363 L1124.03 689.363 L1124.59 689.363 L1125.14 689.363 L1125.7 689.363 L1126.26 689.363 L1126.82 689.363 L1127.38 689.363 L1127.94 689.363 L1128.5 689.363 L1129.06 689.363 L1129.62 689.363 L1130.18 689.363 L1130.74 689.363 L1131.3 689.363 L1131.86 689.363 L1132.41 689.363 L1132.97 689.363 L1133.53 689.363 L1134.09 689.363 L1134.65 689.363 L1135.21 689.363 L1135.77 689.363 L1136.33 689.363 L1136.89 689.363 L1137.45 689.363 L1138.01 689.363 L1138.57 689.363 L1139.13 689.363 L1139.68 689.363 L1140.24 689.363 L1140.8 689.363 L1141.36 689.363 L1141.92 689.363 L1142.48 689.363 L1143.04 689.363 L1143.6 689.363 L1144.16 689.363 L1144.72 689.363 L1145.28 689.363 L1145.84 689.363 L1146.4 689.363 L1146.96 689.363 L1147.51 689.363 L1148.07 689.363 L1148.63 689.363 L1149.19 689.363 L1149.75 689.363 L1150.31 689.363 L1150.87 689.363 L1151.43 689.363 L1151.99 689.363 L1152.55 689.363 L1153.11 689.363 L1153.67 689.363 L1154.23 689.363 L1154.78 689.363 L1155.34 689.363 L1155.9 689.363 L1156.46 689.363 L1157.02 689.363 L1157.58 689.363 L1158.14 689.363 L1158.7 689.363 L1159.26 689.363 L1159.82 689.363 L1160.38 689.363 L1160.94 689.363 L1161.5 689.363 L1162.05 689.363 L1162.61 689.363 L1163.17 689.363 L1163.73 689.363 L1164.29 689.363 L1164.85 689.363 L1165.41 689.363 L1165.97 689.363 L1166.53 689.363 L1167.09 689.363 L1167.65 689.363 L1168.21 689.363 L1168.77 689.363 L1169.33 689.363 L1169.88 689.363 L1170.44 689.363 L1171 689.363 L1171.56 689.363 L1172.12 689.363 L1172.68 689.363 L1173.24 689.363 L1173.8 689.363 L1174.36 689.363 L1174.92 689.363 L1175.48 689.363 L1176.04 689.363 L1176.6 689.363 L1177.15 689.363 L1177.71 689.363 L1178.27 689.363 L1178.83 689.363 L1179.39 689.363 L1179.95 689.363 L1180.51 689.363 L1181.07 689.363 L1181.63 689.363 L1182.19 689.363 L1182.75 689.363 L1183.31 689.363 L1183.87 689.363 L1184.43 689.363 L1184.98 689.363 L1185.54 689.363 L1186.1 689.363 L1186.66 689.363 L1187.22 689.363 L1187.78 689.363 L1188.34 689.363 L1188.9 689.363 L1189.46 689.363 L1190.02 689.363 L1190.58 689.363 L1191.14 689.363 L1191.7 689.363 L1192.25 689.363 L1192.81 689.363 L1193.37 689.363 L1193.93 689.363 L1194.49 689.363 L1195.05 689.363 L1195.61 689.363 L1196.17 689.363 L1196.73 689.363 L1197.29 689.363 L1197.85 689.363 L1198.41 689.363 L1198.97 689.363 L1199.52 689.363 L1200.08 689.363 L1200.64 689.363 L1201.2 689.363 L1201.76 689.363 L1202.32 689.363 L1202.88 689.363 L1203.44 689.363 L1204 689.363 L1204.56 689.363 L1205.12 689.363 L1205.68 689.363 L1206.24 689.363 L1206.8 689.363 L1207.35 689.363 L1207.91 689.363 L1208.47 689.363 L1209.03 689.363 L1209.59 689.363 L1210.15 689.363 L1210.71 689.363 L1211.27 689.363 L1211.83 689.363 L1212.39 689.363 L1212.95 689.363 L1213.51 689.363 L1214.07 689.363 L1214.62 689.363 L1215.18 689.363 L1215.74 689.363 L1216.3 689.363 L1216.86 689.363 L1217.42 689.363 L1217.98 689.363 L1218.54 689.363 L1219.1 689.363 L1219.66 689.363 L1220.22 689.363 L1220.78 689.363 L1221.34 689.363 L1221.89 689.363 L1222.45 689.363 L1223.01 689.363 L1223.57 689.363 L1224.13 689.363 L1224.69 689.363 L1225.25 689.363 L1225.81 689.363 L1226.37 689.363 L1226.93 689.363 L1227.49 689.363 L1228.05 689.363 L1228.61 689.363 L1229.17 689.363 L1229.72 689.363 L1230.28 689.363 L1230.84 689.363 L1231.4 689.363 L1231.96 689.363 L1232.52 689.363 L1233.08 689.363 L1233.64 689.363 L1234.2 689.363 L1234.76 689.363 L1235.32 689.363 L1235.88 689.363 L1236.44 689.363 L1236.99 689.363 L1237.55 689.363 L1238.11 689.363 L1238.67 689.363 L1239.23 689.363 L1239.79 689.363 L1240.35 689.363 L1240.91 689.363 L1241.47 689.363 L1242.03 689.363 L1242.59 689.363 L1243.15 689.363 L1243.71 689.363 L1244.26 689.363 L1244.82 689.363 L1245.38 689.363 L1245.94 689.363 L1246.5 689.363 L1247.06 689.363 L1247.62 689.363 L1248.18 689.363 L1248.74 689.363 L1249.3 689.363 L1249.86 689.363 L1250.42 689.363 L1250.98 689.363 L1251.54 689.363 L1252.09 689.363 L1252.65 689.363 L1253.21 689.363 L1253.77 689.363 L1254.33 689.363 L1254.89 689.363 L1255.45 689.363 L1256.01 689.363 L1256.57 689.363 L1257.13 689.363 L1257.69 689.363 L1258.25 689.363 L1258.81 689.363 L1259.36 689.363 L1259.92 689.363 L1260.48 689.363 L1261.04 689.363 L1261.6 689.363 L1262.16 689.363 L1262.72 689.363 L1263.28 689.363 L1263.84 689.363 L1264.4 689.363 L1264.96 689.363 L1265.52 689.363 L1266.08 689.363 L1266.63 689.363 L1267.19 689.363 L1267.75 689.363 L1268.31 689.363 L1268.87 689.363 L1269.43 689.363 L1269.99 689.363 L1270.55 689.363 L1271.11 689.363 L1271.67 689.363 L1272.23 689.363 L1272.79 689.363 L1273.35 689.363 L1273.91 689.363 L1274.46 689.363 L1275.02 689.363 L1275.58 689.363 L1276.14 689.363 L1276.7 689.363 L1277.26 689.363 L1277.82 689.363 L1278.38 689.363 L1278.94 689.363 L1279.5 689.363 L1280.06 689.363 L1280.62 689.363 L1281.18 689.363 L1281.73 689.363 L1282.29 689.363 L1282.85 689.363 L1283.41 689.363 L1283.97 689.363 L1284.53 689.363 L1285.09 689.363 L1285.65 689.363 L1286.21 689.363 L1286.77 689.363 L1287.33 689.363 L1287.89 689.363 L1288.45 689.363 L1289 689.363 L1289.56 689.363 L1290.12 689.363 L1290.68 689.363 L1291.24 689.363 L1291.8 689.363 L1292.36 689.363 L1292.92 689.363 L1293.48 689.363 L1294.04 689.363 L1294.6 689.363 L1295.16 689.363 L1295.72 689.363 L1296.28 689.363 L1296.83 689.363 L1297.39 689.363 L1297.95 689.363 L1298.51 689.363 L1299.07 689.363 L1299.63 689.363 L1300.19 689.363 L1300.75 689.363 L1301.31 689.363 L1301.87 689.363 L1302.43 689.363 L1302.99 689.363 L1303.55 689.363 L1304.1 689.363 L1304.66 689.363 L1305.22 689.363 L1305.78 689.363 L1306.34 689.363 L1306.9 689.363 L1307.46 689.363 L1308.02 689.363 L1308.58 689.363 L1309.14 689.363 L1309.7 689.363 L1310.26 689.363 L1310.82 689.363 L1311.38 689.363 L1311.93 689.363 L1312.49 689.363 L1313.05 689.363 L1313.61 689.363 L1314.17 689.363 L1314.73 689.363 L1315.29 689.363 L1315.85 689.363 L1316.41 689.363 L1316.97 689.363 L1317.53 689.363 L1318.09 689.363 L1318.65 689.363 L1319.2 689.363 L1319.76 689.363 L1320.32 689.363 L1320.88 689.363 L1321.44 689.363 L1322 689.363 L1322.56 689.363 L1323.12 689.363 L1323.68 689.363 L1324.24 689.363 L1324.8 689.363 L1325.36 689.363 L1325.92 689.363 L1326.47 689.363 L1327.03 689.363 L1327.59 689.363 L1328.15 689.363 L1328.71 689.363 L1329.27 689.363 L1329.83 689.363 L1330.39 689.363 L1330.95 689.363 L1331.51 689.363 L1332.07 689.363 L1332.63 689.363 L1333.19 689.363 L1333.75 689.363 L1334.3 689.363 L1334.86 689.363 L1335.42 689.363 L1335.98 689.363 L1336.54 689.363 L1337.1 689.363 L1337.66 689.363 L1338.22 689.363 L1338.78 689.363 L1339.34 689.363 L1339.9 689.363 L1340.46 689.363 L1341.02 689.363 L1341.57 689.363 L1342.13 689.363 L1342.69 689.363 L1343.25 689.363 L1343.81 689.363 L1344.37 689.363 L1344.93 689.363 L1345.49 689.363 L1346.05 689.363 L1346.61 689.363 L1347.17 689.363 L1347.73 689.363 L1348.29 689.363 L1348.84 689.363 L1349.4 689.363 L1349.96 689.363 L1350.52 689.363 L1351.08 689.363 L1351.64 689.363 L1352.2 689.363 L1352.76 689.363 L1353.32 689.363 L1353.88 689.363 L1354.44 689.363 L1355 689.363 L1355.56 689.363 L1356.12 689.363 L1356.67 689.363 L1357.23 689.363 L1357.79 689.363 L1358.35 689.363 L1358.91 689.363 L1359.47 689.363 L1360.03 689.363 L1360.59 689.363 L1361.15 689.363 L1361.71 689.363 L1362.27 689.363 L1362.83 689.363 L1363.39 689.363 L1363.94 689.363 L1364.5 689.363 L1365.06 689.363 L1365.62 689.363 L1366.18 689.363 L1366.74 689.363 L1367.3 689.363 L1367.86 689.363 L1368.42 689.363 L1368.98 689.363 L1369.54 689.363 L1370.1 689.363 L1370.66 689.363 L1371.21 689.363 L1371.77 689.363 L1372.33 689.363 L1372.89 689.363 L1373.45 689.363 L1374.01 689.363 L1374.57 689.363 L1375.13 689.363 L1375.69 689.363 L1376.25 689.363 L1376.81 689.363 L1377.37 689.363 L1377.93 689.363 L1378.49 689.363 L1379.04 689.363 L1379.6 689.363 L1380.16 689.363 L1380.72 689.363 L1381.28 689.363 L1381.84 689.363 L1382.4 689.363 L1382.96 689.363 L1383.52 689.363 L1384.08 689.363 L1384.64 689.363 L1385.2 689.363 L1385.76 689.363 L1386.31 689.363 L1386.87 689.363 L1387.43 689.363 L1387.99 689.363 L1388.55 689.363 L1389.11 689.363 L1389.67 689.363 L1390.23 689.363 L1390.79 689.363 L1391.35 689.363 L1391.91 689.363 L1392.47 689.363 L1393.03 689.363 L1393.58 689.363 L1394.14 689.363 L1394.7 689.363 L1395.26 689.363 L1395.82 689.363 L1396.38 689.363 L1396.94 689.363 L1397.5 689.363 L1398.06 689.363 L1398.62 689.363 L1399.18 689.363 L1399.74 689.363 L1400.3 689.363 L1400.86 689.363 L1401.41 689.363 L1401.97 689.363 L1402.53 689.363 L1403.09 689.363 L1403.65 689.363 L1404.21 689.363 L1404.77 689.363 L1405.33 689.363 L1405.89 689.363 L1406.45 689.363 L1407.01 689.363 L1407.57 689.363 L1408.13 689.363 L1408.68 689.363 L1409.24 689.363 L1409.8 689.363 L1410.36 689.363 L1410.92 689.363 L1411.48 689.363 L1412.04 689.363 L1412.6 689.363 L1413.16 689.363 L1413.72 689.363 L1414.28 689.363 L1414.84 689.363 L1415.4 689.363 L1415.95 689.363 L1416.51 689.363 L1417.07 689.363 L1417.63 689.363 L1418.19 689.363 L1418.75 689.363 L1419.31 689.363 L1419.87 689.363 L1420.43 689.363 L1420.99 689.363 L1421.55 689.363 L1422.11 689.363 L1422.67 689.363 L1423.23 689.363 L1423.78 689.363 L1424.34 689.363 L1424.9 689.363 L1425.46 689.363 L1426.02 689.363 L1426.58 689.363 L1427.14 689.363 L1427.7 689.363 L1428.26 689.363 L1428.82 689.363 L1429.38 689.363 L1429.94 689.363 L1430.5 689.363 L1431.05 689.363 L1431.61 689.363 L1432.17 689.363 L1432.73 689.363 L1433.29 689.363 L1433.85 689.363 L1434.41 689.363 L1434.97 689.363 L1435.53 689.363 L1436.09 689.363 L1436.65 689.363 L1437.21 689.363 L1437.77 689.363 L1438.33 689.363 L1438.88 689.363 L1439.44 689.363 L1440 689.363 L1440.56 689.363 L1441.12 689.363 L1441.68 689.363 L1442.24 689.363 L1442.8 689.363 L1443.36 689.363 L1443.92 689.363 L1444.48 689.363 L1445.04 689.363 L1445.6 689.363 L1446.15 689.363 L1446.71 689.363 L1447.27 689.363 L1447.83 689.363 L1448.39 689.363 L1448.95 689.363 L1449.51 689.363 L1450.07 689.363 L1450.63 689.363 L1451.19 689.363 L1451.75 689.363 L1452.31 689.363 L1452.87 689.363 L1453.42 689.363 L1453.98 689.363 L1454.54 689.363 L1455.1 689.363 L1455.66 689.363 L1456.22 689.363 L1456.78 689.363 L1457.34 689.363 L1457.9 689.363 L1458.46 689.363 L1459.02 689.363 L1459.58 689.363 L1460.14 689.363 L1460.7 689.363 L1461.25 689.363 L1461.81 689.363 L1462.37 689.363 L1462.93 689.363 L1463.49 689.363 L1464.05 689.363 L1464.61 689.363 L1465.17 689.363 L1465.73 689.363 L1466.29 689.363 L1466.85 689.363 L1467.41 689.363 L1467.97 689.363 L1468.52 689.363 L1469.08 689.363 L1469.64 689.363 L1470.2 689.363 L1470.76 689.363 L1471.32 689.363 L1471.88 689.363 L1472.44 689.363 L1473 689.363 L1473.56 689.363 L1474.12 689.363 L1474.68 689.363 L1475.24 689.363 L1475.79 689.363 L1476.35 689.363 L1476.91 689.363 L1477.47 689.363 L1478.03 689.363 L1478.59 689.363 L1479.15 689.363 L1479.71 689.363 L1480.27 689.363 L1480.83 689.363 L1481.39 689.363 L1481.95 689.363 L1482.51 689.363 L1483.07 689.363 L1483.62 689.363 L1484.18 689.363 L1484.74 689.363 L1485.3 689.363 L1485.86 689.363 L1486.42 689.363 L1486.98 689.363 L1487.54 689.363 L1488.1 689.363 L1488.66 689.363 L1489.22 689.363 L1489.78 689.363 L1490.34 689.363 L1490.89 689.363 L1491.45 689.363 L1492.01 689.363 L1492.57 689.363 L1493.13 689.363 L1493.69 689.363 L1494.25 689.363 L1494.81 689.363 L1495.37 689.363 L1495.93 689.363 L1496.49 689.363 L1497.05 689.363 L1497.61 689.363 L1498.16 689.363 L1498.72 689.363 L1499.28 689.363 L1499.84 689.363 L1500.4 689.363 L1500.96 689.363 L1501.52 689.363 L1502.08 689.363 L1502.64 689.363 L1503.2 689.363 L1503.76 689.363 L1504.32 689.363 L1504.88 689.363 L1505.44 689.363 L1505.99 689.363 L1506.55 689.363 L1507.11 689.363 L1507.67 689.363 L1508.23 689.363 L1508.79 689.363 L1509.35 689.363 L1509.91 689.363 L1510.47 689.363 L1511.03 689.363 L1511.59 689.363 L1512.15 689.363 L1512.71 689.363 L1513.26 689.363 L1513.82 689.363 L1514.38 689.363 L1514.94 689.363 L1515.5 689.363 L1516.06 689.363 L1516.62 689.363 L1517.18 689.363 L1517.74 689.363 L1518.3 689.363 L1518.86 689.363 L1519.42 689.363 L1519.98 689.363 L1520.53 689.363 L1521.09 689.363 L1521.65 689.363 L1522.21 689.363 L1522.77 689.363 L1523.33 689.363 L1523.89 689.363 L1524.45 689.363 L1525.01 689.363 L1525.57 689.363 L1526.13 689.363 L1526.69 689.363 L1527.25 689.363 L1527.81 689.363 L1528.36 689.363 L1528.92 689.363 L1529.48 689.363 L1530.04 689.363 L1530.6 689.363 L1531.16 689.363 L1531.72 689.363 L1532.28 689.363 L1532.84 689.363 L1533.4 689.363 L1533.96 689.363 L1534.52 689.363 L1535.08 689.363 L1535.63 689.363 L1536.19 689.363 L1536.75 689.363 L1537.31 689.363 L1537.87 689.363 L1538.43 689.363 L1538.99 689.363 L1539.55 689.363 L1540.11 689.363 L1540.67 689.363 L1541.23 689.363 L1541.79 689.363 L1542.35 689.363 L1542.9 689.363 L1543.46 689.363 L1544.02 689.363 L1544.58 689.363 L1545.14 689.363 L1545.7 689.363 L1546.26 689.363 L1546.82 689.363 L1547.38 689.363 L1547.94 689.363 L1548.5 689.363 L1549.06 689.363 L1549.62 689.363 L1550.18 689.363 L1550.73 689.363 L1551.29 689.363 L1551.85 689.363 L1552.41 689.363 L1552.97 689.363 L1553.53 689.363 L1554.09 689.363 L1554.65 689.363 L1555.21 689.363 L1555.77 689.363 L1556.33 689.363 L1556.89 689.363 L1557.45 689.363 L1558 689.363 L1558.56 689.363 L1559.12 689.363 L1559.68 689.363 L1560.24 689.363 L1560.8 689.363 L1561.36 689.363 L1561.92 689.363 L1562.48 689.363 L1563.04 689.363 L1563.6 689.363 L1564.16 689.363 L1564.72 689.363 L1565.28 689.363 L1565.83 689.363 L1566.39 689.363 L1566.95 689.363 L1567.51 689.363 L1568.07 689.363 L1568.63 689.363 L1569.19 689.363 L1569.75 689.363 L1570.31 689.363 L1570.87 689.363 L1571.43 689.363 L1571.99 689.363 L1572.55 689.363 L1573.1 689.363 L1573.66 689.363 L1574.22 689.363 L1574.78 689.363 L1575.34 689.363 L1575.9 689.363 L1576.46 689.363 L1577.02 689.363 L1577.58 689.363 L1578.14 689.363 L1578.7 689.363 L1579.26 689.363 L1579.82 689.363 L1580.37 689.363 L1580.93 689.363 L1581.49 689.363 L1582.05 689.363 L1582.61 689.363 L1583.17 689.363 L1583.73 689.363 L1584.29 689.363 L1584.85 689.363 L1585.41 689.363 L1585.97 689.363 L1586.53 689.363 L1587.09 689.363 L1587.65 689.363 L1588.2 689.363 L1588.76 689.363 L1589.32 689.363 L1589.88 689.363 L1590.44 689.363 L1591 689.363 L1591.56 689.363 L1592.12 689.363 L1592.68 689.363 L1593.24 689.363 L1593.8 689.363 L1594.36 689.363 L1594.92 689.363 L1595.47 689.363 L1596.03 689.363 L1596.59 689.363 L1597.15 689.363 L1597.71 689.363 L1598.27 689.363 L1598.83 689.363 L1599.39 689.363 L1599.95 689.363 L1600.51 689.363 L1601.07 689.363 L1601.63 689.363 L1602.19 689.363 L1602.74 689.363 L1603.3 689.363 L1603.86 689.363 L1604.42 689.363 L1604.98 689.363 L1605.54 689.363 L1606.1 689.363 L1606.66 689.363 L1607.22 689.363 L1607.78 689.363 L1608.34 689.363 L1608.9 689.363 L1609.46 689.363 L1610.02 689.363 L1610.57 689.363 L1611.13 689.363 L1611.69 689.363 L1612.25 689.363 L1612.81 689.363 L1613.37 689.363 L1613.93 689.363 L1614.49 689.363 L1615.05 689.363 L1615.61 689.363 L1616.17 689.363 L1616.73 689.363 L1617.29 689.363 L1617.84 689.363 L1618.4 689.363 L1618.96 689.363 L1619.52 689.363 L1620.08 689.363 L1620.64 689.363 L1621.2 689.363 L1621.76 689.363 L1622.32 689.363 L1622.88 689.363 L1623.44 689.363 L1624 689.363 L1624.56 689.363 L1625.11 689.363 L1625.67 689.363 L1626.23 689.363 L1626.79 689.363 L1627.35 689.363 L1627.91 689.363 L1628.47 689.363 L1629.03 689.363 L1629.59 689.363 L1630.15 689.363 L1630.71 689.363 L1631.27 689.363 L1631.83 689.363 L1632.39 689.363 L1632.94 689.363 L1633.5 689.363 L1634.06 689.363 L1634.62 689.363 L1635.18 689.363 L1635.74 689.363 L1636.3 689.363 L1636.86 689.363 L1637.42 689.363 L1637.98 689.363 L1638.54 689.363 L1639.1 689.363 L1639.66 689.363 L1640.21 689.363 L1640.77 689.363 L1641.33 689.363 L1641.89 689.363 L1642.45 689.363 L1643.01 689.363 L1643.57 689.363 L1644.13 689.363 L1644.69 689.363 L1645.25 689.363 L1645.81 689.363 L1646.37 689.363 L1646.93 689.363 L1647.48 689.363 L1648.04 689.363 L1648.6 689.363 L1649.16 689.363 L1649.72 689.363 L1650.28 689.363 L1650.84 689.363 L1651.4 689.363 L1651.96 689.363 L1652.52 689.363 L1653.08 689.363 L1653.64 689.363 L1654.2 689.363 L1654.76 689.363 L1655.31 689.363 L1655.87 689.363 L1656.43 689.363 L1656.99 689.363 L1657.55 689.363 L1658.11 689.363 L1658.67 689.363 L1659.23 689.363 L1659.79 689.363 L1660.35 689.363 L1660.91 689.363 L1661.47 689.363 L1662.03 689.363 L1662.58 689.363 L1663.14 689.363 L1663.7 689.363 L1664.26 689.363 L1664.82 689.363 L1665.38 689.363 L1665.94 689.363 L1666.5 689.363 L1667.06 689.363 L1667.62 689.363 L1668.18 689.363 L1668.74 689.363 L1669.3 689.363 L1669.85 689.363 L1670.41 689.363 L1670.97 689.363 L1671.53 689.363 L1672.09 689.363 L1672.65 689.363 L1673.21 689.363 L1673.77 689.363 L1674.33 689.363 L1674.89 689.363 L1675.45 689.363 L1676.01 689.363 L1676.57 689.363 L1677.13 689.363 L1677.68 689.363 L1678.24 689.363 L1678.8 689.363 L1679.36 689.363 L1679.92 689.363 L1680.48 689.363 L1681.04 689.363 L1681.6 689.363 L1682.16 689.363 L1682.72 689.363 L1683.28 689.363 L1683.84 689.363 L1684.4 689.363 L1684.95 689.363 L1685.51 689.363 L1686.07 689.363 L1686.63 689.363 L1687.19 689.363 L1687.75 689.363 L1688.31 689.363 L1688.87 689.363 L1689.43 689.363 L1689.99 689.363 L1690.55 689.363 L1691.11 689.363 L1691.67 689.363 L1692.23 689.363 L1692.78 689.363 L1693.34 689.363 L1693.9 689.363 L1694.46 689.363 L1695.02 689.363 L1695.58 689.363 L1696.14 689.363 L1696.7 689.363 L1697.26 689.363 L1697.82 689.363 L1698.38 689.363 L1698.94 689.363 L1699.5 689.363 L1700.05 689.363 L1700.61 689.363 L1701.17 689.363 L1701.73 689.363 L1702.29 689.363 L1702.85 689.363 L1703.41 689.363 L1703.97 689.363 L1704.53 689.363 L1705.09 689.363 L1705.65 689.363 L1706.21 689.363 L1706.77 689.363 L1707.32 689.363 L1707.88 689.363 L1708.44 689.363 L1709 689.363 L1709.56 689.363 L1710.12 689.363 L1710.68 689.363 L1711.24 689.363 L1711.8 689.363 L1712.36 689.363 L1712.92 689.363 L1713.48 689.363 L1714.04 689.363 L1714.6 689.363 L1715.15 689.363 L1715.71 689.363 L1716.27 689.363 L1716.83 689.363 L1717.39 689.363 L1717.95 689.363 L1718.51 689.363 L1719.07 689.363 L1719.63 689.363 L1720.19 689.363 L1720.75 689.363 L1721.31 689.363 L1721.87 689.363 L1722.42 689.363 L1722.98 689.363 L1723.54 689.363 L1724.1 689.363 L1724.66 689.363 L1725.22 689.363 L1725.78 689.363 L1726.34 689.363 L1726.9 689.363 L1727.46 689.363 L1728.02 689.363 L1728.58 689.363 L1729.14 689.363 L1729.69 689.363 L1730.25 689.363 L1730.81 689.363 L1731.37 689.363 L1731.93 689.363 L1732.49 689.363 L1733.05 689.363 L1733.61 689.363 L1734.17 689.363 L1734.73 689.363 L1735.29 689.363 L1735.85 689.363 L1736.41 689.363 L1736.97 689.363 L1737.52 689.363 L1738.08 689.363 L1738.64 689.363 L1739.2 689.363 L1739.76 689.363 L1740.32 689.363 L1740.88 689.363 L1741.44 689.363 L1742 689.363 L1742.56 689.363 L1743.12 689.363 L1743.68 689.363 L1744.24 689.363 L1744.79 689.363 L1745.35 689.363 L1745.91 689.363 L1746.47 689.363 L1747.03 689.363 L1747.59 689.363 L1748.15 689.363 L1748.71 689.363 L1749.27 689.363 L1749.83 689.363 L1750.39 689.363 L1750.95 689.363 L1751.51 689.363 L1752.06 689.363 L1752.62 689.363 L1753.18 689.363 L1753.74 689.363 L1754.3 689.363 L1754.86 689.363 L1755.42 689.363 L1755.98 689.363 L1756.54 689.363 L1757.1 689.363 L1757.66 689.363 L1758.22 689.363 L1758.78 689.363 L1759.34 689.363 L1759.89 689.363 L1760.45 689.363 L1761.01 689.363 L1761.57 689.363 L1762.13 689.363 L1762.69 689.363 L1763.25 689.363 L1763.81 689.363 L1764.37 689.363 L1764.93 689.363 L1765.49 689.363 L1766.05 689.363 L1766.61 689.363 L1767.16 689.363 L1767.72 689.363 L1768.28 689.363 L1768.84 689.363 L1769.4 689.363 L1769.96 689.363 L1770.52 689.363 L1771.08 689.363 L1771.64 689.363 L1772.2 689.363 L1772.76 689.363 L1773.32 689.363 L1773.88 689.363 L1774.43 689.363 L1774.99 689.363 L1775.55 689.363 L1776.11 689.363 L1776.67 689.363 L1777.23 689.363 L1777.79 689.363 L1778.35 689.363 L1778.91 689.363 L1779.47 689.363 L1780.03 689.363 L1780.59 689.363 L1781.15 689.363 L1781.71 689.363 L1782.26 689.363 L1782.82 689.363 L1783.38 689.363 L1783.94 689.363 L1784.5 689.363 L1785.06 689.363 L1785.62 689.363 L1786.18 689.363 L1786.74 689.363 L1787.3 689.363 L1787.86 689.363 L1788.42 689.363 L1788.98 689.363 L1789.53 689.363 L1790.09 689.363 L1790.65 689.363 L1791.21 689.363 L1791.77 689.363 L1792.33 689.363 L1792.89 689.363 L1793.45 689.363 L1794.01 689.363 L1794.57 689.363 L1795.13 689.363 L1795.69 689.363 L1796.25 689.363 L1796.8 689.363 L1797.36 689.363 L1797.92 689.363 L1798.48 689.363 L1799.04 689.363 L1799.6 689.363 L1800.16 689.363 L1800.72 689.363 L1801.28 689.363 L1801.84 689.363 L1802.4 689.363 L1802.96 689.363 L1803.52 689.363 L1804.08 689.363 L1804.63 689.363 L1805.19 689.363 L1805.75 689.363 L1806.31 689.363 L1806.87 689.363 L1807.43 689.363 L1807.99 689.363 L1808.55 689.363 L1809.11 689.363 L1809.67 689.363 L1810.23 689.363 L1810.79 689.363 L1811.35 689.363 L1811.9 689.363 L1812.46 689.363 L1813.02 689.363 L1813.58 689.363 L1814.14 689.363 L1814.7 689.363 L1815.26 689.363 L1815.82 689.363 L1816.38 689.363 L1816.94 689.363 L1817.5 689.363 L1818.06 689.363 L1818.62 689.363 L1819.18 689.363 L1819.73 689.363 L1820.29 689.363 L1820.85 689.363 L1821.41 689.363 L1821.97 689.363 L1822.53 689.363 L1823.09 689.363 L1823.65 689.363 L1824.21 689.363 L1824.77 689.363 L1825.33 689.363 L1825.89 689.363 L1826.45 689.363 L1827 689.363 L1827.56 689.363 L1828.12 689.363 L1828.68 689.363 L1829.24 689.363 L1829.8 689.363 L1830.36 689.363 L1830.92 689.363 L1831.48 689.363 L1832.04 689.363 L1832.6 689.363 L1833.16 689.363 L1833.72 689.363 L1834.27 689.363 L1834.83 689.363 L1835.39 689.363 L1835.95 689.363 L1836.51 689.363 L1837.07 689.363 L1837.63 689.363 L1838.19 689.363 L1838.19 680.541 L1837.63 680.541 L1837.07 680.541 L1836.51 680.541 L1835.95 680.541 L1835.39 680.541 L1834.83 680.541 L1834.27 680.541 L1833.72 680.541 L1833.16 680.541 L1832.6 680.541 L1832.04 680.541 L1831.48 680.541 L1830.92 680.541 L1830.36 680.541 L1829.8 680.541 L1829.24 680.541 L1828.68 680.541 L1828.12 680.541 L1827.56 680.541 L1827 680.541 L1826.45 680.541 L1825.89 680.541 L1825.33 680.541 L1824.77 680.541 L1824.21 680.541 L1823.65 680.541 L1823.09 680.541 L1822.53 680.541 L1821.97 680.541 L1821.41 680.541 L1820.85 680.541 L1820.29 680.541 L1819.73 680.541 L1819.18 680.541 L1818.62 680.541 L1818.06 680.541 L1817.5 680.541 L1816.94 680.541 L1816.38 680.541 L1815.82 680.541 L1815.26 680.541 L1814.7 680.541 L1814.14 680.541 L1813.58 680.541 L1813.02 680.541 L1812.46 680.541 L1811.9 680.541 L1811.35 680.541 L1810.79 680.541 L1810.23 680.541 L1809.67 680.541 L1809.11 680.541 L1808.55 680.541 L1807.99 680.541 L1807.43 680.541 L1806.87 680.541 L1806.31 680.541 L1805.75 680.541 L1805.19 680.541 L1804.63 680.541 L1804.08 680.541 L1803.52 680.541 L1802.96 680.541 L1802.4 680.541 L1801.84 680.541 L1801.28 680.541 L1800.72 680.541 L1800.16 680.541 L1799.6 680.541 L1799.04 680.541 L1798.48 680.541 L1797.92 680.541 L1797.36 680.541 L1796.8 680.541 L1796.25 680.541 L1795.69 680.541 L1795.13 680.541 L1794.57 680.541 L1794.01 680.541 L1793.45 680.541 L1792.89 680.541 L1792.33 680.541 L1791.77 680.541 L1791.21 680.541 L1790.65 680.541 L1790.09 680.541 L1789.53 680.541 L1788.98 680.541 L1788.42 680.541 L1787.86 680.541 L1787.3 680.541 L1786.74 680.541 L1786.18 680.541 L1785.62 680.541 L1785.06 680.541 L1784.5 680.541 L1783.94 680.541 L1783.38 680.541 L1782.82 680.541 L1782.26 680.541 L1781.71 680.541 L1781.15 680.541 L1780.59 680.541 L1780.03 680.541 L1779.47 680.541 L1778.91 680.541 L1778.35 680.541 L1777.79 680.541 L1777.23 680.541 L1776.67 680.541 L1776.11 680.541 L1775.55 680.541 L1774.99 680.541 L1774.43 680.541 L1773.88 680.541 L1773.32 680.541 L1772.76 680.541 L1772.2 680.541 L1771.64 680.541 L1771.08 680.541 L1770.52 680.541 L1769.96 680.541 L1769.4 680.541 L1768.84 680.541 L1768.28 680.541 L1767.72 680.541 L1767.16 680.541 L1766.61 680.541 L1766.05 680.541 L1765.49 680.541 L1764.93 680.541 L1764.37 680.541 L1763.81 680.541 L1763.25 680.541 L1762.69 680.541 L1762.13 680.541 L1761.57 680.541 L1761.01 680.541 L1760.45 680.541 L1759.89 680.541 L1759.34 680.541 L1758.78 680.541 L1758.22 680.541 L1757.66 680.541 L1757.1 680.541 L1756.54 680.541 L1755.98 680.541 L1755.42 680.541 L1754.86 680.541 L1754.3 680.541 L1753.74 680.541 L1753.18 680.541 L1752.62 680.541 L1752.06 680.541 L1751.51 680.541 L1750.95 680.541 L1750.39 680.541 L1749.83 680.541 L1749.27 680.541 L1748.71 680.541 L1748.15 680.541 L1747.59 680.541 L1747.03 680.541 L1746.47 680.541 L1745.91 680.541 L1745.35 680.541 L1744.79 680.541 L1744.24 680.541 L1743.68 680.541 L1743.12 680.541 L1742.56 680.541 L1742 680.541 L1741.44 680.541 L1740.88 680.541 L1740.32 680.541 L1739.76 680.541 L1739.2 680.541 L1738.64 680.541 L1738.08 680.541 L1737.52 680.541 L1736.97 680.541 L1736.41 680.541 L1735.85 680.541 L1735.29 680.541 L1734.73 680.541 L1734.17 680.541 L1733.61 680.541 L1733.05 680.541 L1732.49 680.541 L1731.93 680.541 L1731.37 680.541 L1730.81 680.541 L1730.25 680.541 L1729.69 680.541 L1729.14 680.541 L1728.58 680.541 L1728.02 680.541 L1727.46 680.541 L1726.9 680.541 L1726.34 680.541 L1725.78 680.541 L1725.22 680.541 L1724.66 680.541 L1724.1 680.541 L1723.54 680.541 L1722.98 680.541 L1722.42 680.541 L1721.87 680.541 L1721.31 680.541 L1720.75 680.541 L1720.19 680.541 L1719.63 680.541 L1719.07 680.541 L1718.51 680.541 L1717.95 680.541 L1717.39 680.541 L1716.83 680.541 L1716.27 680.541 L1715.71 680.541 L1715.15 680.541 L1714.6 680.541 L1714.04 680.541 L1713.48 680.541 L1712.92 680.541 L1712.36 680.541 L1711.8 680.541 L1711.24 680.541 L1710.68 680.541 L1710.12 680.541 L1709.56 680.541 L1709 680.541 L1708.44 680.541 L1707.88 680.541 L1707.32 680.541 L1706.77 680.541 L1706.21 680.541 L1705.65 680.541 L1705.09 680.541 L1704.53 680.541 L1703.97 680.541 L1703.41 680.541 L1702.85 680.541 L1702.29 680.541 L1701.73 680.541 L1701.17 680.541 L1700.61 680.541 L1700.05 680.541 L1699.5 680.541 L1698.94 680.541 L1698.38 680.541 L1697.82 680.541 L1697.26 680.541 L1696.7 680.541 L1696.14 680.541 L1695.58 680.541 L1695.02 680.541 L1694.46 680.541 L1693.9 680.541 L1693.34 680.541 L1692.78 680.541 L1692.23 680.541 L1691.67 680.541 L1691.11 680.541 L1690.55 680.541 L1689.99 680.541 L1689.43 680.541 L1688.87 680.541 L1688.31 680.541 L1687.75 680.541 L1687.19 680.541 L1686.63 680.541 L1686.07 680.541 L1685.51 680.541 L1684.95 680.541 L1684.4 680.541 L1683.84 680.541 L1683.28 680.541 L1682.72 680.541 L1682.16 680.541 L1681.6 680.541 L1681.04 680.541 L1680.48 680.541 L1679.92 680.541 L1679.36 680.541 L1678.8 680.541 L1678.24 680.541 L1677.68 680.541 L1677.13 680.541 L1676.57 680.541 L1676.01 680.541 L1675.45 680.541 L1674.89 680.541 L1674.33 680.541 L1673.77 680.541 L1673.21 680.541 L1672.65 680.541 L1672.09 680.541 L1671.53 680.541 L1670.97 680.541 L1670.41 680.541 L1669.85 680.541 L1669.3 680.541 L1668.74 680.541 L1668.18 680.541 L1667.62 680.541 L1667.06 680.541 L1666.5 680.541 L1665.94 680.541 L1665.38 680.541 L1664.82 680.541 L1664.26 680.541 L1663.7 680.541 L1663.14 680.541 L1662.58 680.541 L1662.03 680.541 L1661.47 680.541 L1660.91 680.541 L1660.35 680.541 L1659.79 680.541 L1659.23 680.541 L1658.67 680.541 L1658.11 680.541 L1657.55 680.541 L1656.99 680.541 L1656.43 680.541 L1655.87 680.541 L1655.31 680.541 L1654.76 680.541 L1654.2 680.541 L1653.64 680.541 L1653.08 680.541 L1652.52 680.541 L1651.96 680.541 L1651.4 680.541 L1650.84 680.541 L1650.28 680.541 L1649.72 680.541 L1649.16 680.541 L1648.6 680.541 L1648.04 680.541 L1647.48 680.541 L1646.93 680.541 L1646.37 680.541 L1645.81 680.541 L1645.25 680.541 L1644.69 680.541 L1644.13 680.541 L1643.57 680.541 L1643.01 680.541 L1642.45 680.541 L1641.89 680.541 L1641.33 680.541 L1640.77 680.541 L1640.21 680.541 L1639.66 680.541 L1639.1 680.541 L1638.54 680.541 L1637.98 680.541 L1637.42 680.541 L1636.86 680.541 L1636.3 680.541 L1635.74 680.541 L1635.18 680.541 L1634.62 680.541 L1634.06 680.541 L1633.5 680.541 L1632.94 680.541 L1632.39 680.541 L1631.83 680.541 L1631.27 680.541 L1630.71 680.541 L1630.15 680.541 L1629.59 680.541 L1629.03 680.541 L1628.47 680.541 L1627.91 680.541 L1627.35 680.541 L1626.79 680.541 L1626.23 680.541 L1625.67 680.541 L1625.11 680.541 L1624.56 680.541 L1624 680.541 L1623.44 680.541 L1622.88 680.541 L1622.32 680.541 L1621.76 680.541 L1621.2 680.541 L1620.64 680.541 L1620.08 680.541 L1619.52 680.541 L1618.96 680.541 L1618.4 680.541 L1617.84 680.541 L1617.29 680.541 L1616.73 680.541 L1616.17 680.541 L1615.61 680.541 L1615.05 680.541 L1614.49 680.541 L1613.93 680.541 L1613.37 680.541 L1612.81 680.541 L1612.25 680.541 L1611.69 680.541 L1611.13 680.541 L1610.57 680.541 L1610.02 680.541 L1609.46 680.541 L1608.9 680.541 L1608.34 680.541 L1607.78 680.541 L1607.22 680.541 L1606.66 680.541 L1606.1 680.541 L1605.54 680.541 L1604.98 680.541 L1604.42 680.541 L1603.86 680.541 L1603.3 680.541 L1602.74 680.541 L1602.19 680.541 L1601.63 680.541 L1601.07 680.541 L1600.51 680.541 L1599.95 680.541 L1599.39 680.541 L1598.83 680.541 L1598.27 680.541 L1597.71 680.541 L1597.15 680.541 L1596.59 680.541 L1596.03 680.541 L1595.47 680.541 L1594.92 680.541 L1594.36 680.541 L1593.8 680.541 L1593.24 680.541 L1592.68 680.541 L1592.12 680.541 L1591.56 680.541 L1591 680.541 L1590.44 680.541 L1589.88 680.541 L1589.32 680.541 L1588.76 680.541 L1588.2 680.541 L1587.65 680.541 L1587.09 680.541 L1586.53 680.541 L1585.97 680.541 L1585.41 680.541 L1584.85 680.541 L1584.29 680.541 L1583.73 680.541 L1583.17 680.541 L1582.61 680.541 L1582.05 680.541 L1581.49 680.541 L1580.93 680.541 L1580.37 680.541 L1579.82 680.541 L1579.26 680.541 L1578.7 680.541 L1578.14 680.541 L1577.58 680.541 L1577.02 680.541 L1576.46 680.541 L1575.9 680.541 L1575.34 680.541 L1574.78 680.541 L1574.22 680.541 L1573.66 680.541 L1573.1 680.541 L1572.55 680.541 L1571.99 680.541 L1571.43 680.541 L1570.87 680.541 L1570.31 680.541 L1569.75 680.541 L1569.19 680.541 L1568.63 680.541 L1568.07 680.541 L1567.51 680.541 L1566.95 680.541 L1566.39 680.541 L1565.83 680.541 L1565.28 680.541 L1564.72 680.541 L1564.16 680.541 L1563.6 680.541 L1563.04 680.541 L1562.48 680.541 L1561.92 680.541 L1561.36 680.541 L1560.8 680.541 L1560.24 680.541 L1559.68 680.541 L1559.12 680.541 L1558.56 680.541 L1558 680.541 L1557.45 680.541 L1556.89 680.541 L1556.33 680.541 L1555.77 680.541 L1555.21 680.541 L1554.65 680.541 L1554.09 680.541 L1553.53 680.541 L1552.97 680.541 L1552.41 680.541 L1551.85 680.541 L1551.29 680.541 L1550.73 680.541 L1550.18 680.541 L1549.62 680.541 L1549.06 680.541 L1548.5 680.541 L1547.94 680.541 L1547.38 680.541 L1546.82 680.541 L1546.26 680.541 L1545.7 680.541 L1545.14 680.541 L1544.58 680.541 L1544.02 680.541 L1543.46 680.541 L1542.9 680.541 L1542.35 680.541 L1541.79 680.541 L1541.23 680.541 L1540.67 680.541 L1540.11 680.541 L1539.55 680.541 L1538.99 680.541 L1538.43 680.541 L1537.87 680.541 L1537.31 680.541 L1536.75 680.541 L1536.19 680.541 L1535.63 680.541 L1535.08 680.541 L1534.52 680.541 L1533.96 680.541 L1533.4 680.541 L1532.84 680.541 L1532.28 680.541 L1531.72 680.541 L1531.16 680.541 L1530.6 680.541 L1530.04 680.541 L1529.48 680.541 L1528.92 680.541 L1528.36 680.541 L1527.81 680.541 L1527.25 680.541 L1526.69 680.541 L1526.13 680.541 L1525.57 680.541 L1525.01 680.541 L1524.45 680.541 L1523.89 680.541 L1523.33 680.541 L1522.77 680.541 L1522.21 680.541 L1521.65 680.541 L1521.09 680.541 L1520.53 680.541 L1519.98 680.541 L1519.42 680.541 L1518.86 680.541 L1518.3 680.541 L1517.74 680.541 L1517.18 680.541 L1516.62 680.541 L1516.06 680.541 L1515.5 680.541 L1514.94 680.541 L1514.38 680.541 L1513.82 680.541 L1513.26 680.541 L1512.71 680.541 L1512.15 680.541 L1511.59 680.541 L1511.03 680.541 L1510.47 680.541 L1509.91 680.541 L1509.35 680.541 L1508.79 680.541 L1508.23 680.541 L1507.67 680.541 L1507.11 680.541 L1506.55 680.541 L1505.99 680.541 L1505.44 680.541 L1504.88 680.541 L1504.32 680.541 L1503.76 680.541 L1503.2 680.541 L1502.64 680.541 L1502.08 680.541 L1501.52 680.541 L1500.96 680.541 L1500.4 680.541 L1499.84 680.541 L1499.28 680.541 L1498.72 680.541 L1498.16 680.541 L1497.61 680.541 L1497.05 680.541 L1496.49 680.541 L1495.93 680.541 L1495.37 680.541 L1494.81 680.541 L1494.25 680.541 L1493.69 680.541 L1493.13 680.541 L1492.57 680.541 L1492.01 680.541 L1491.45 680.541 L1490.89 680.541 L1490.34 680.541 L1489.78 680.541 L1489.22 680.541 L1488.66 680.541 L1488.1 680.541 L1487.54 680.541 L1486.98 680.541 L1486.42 680.541 L1485.86 680.541 L1485.3 680.541 L1484.74 680.541 L1484.18 680.541 L1483.62 680.541 L1483.07 680.541 L1482.51 680.541 L1481.95 680.541 L1481.39 680.541 L1480.83 680.541 L1480.27 680.541 L1479.71 680.541 L1479.15 680.541 L1478.59 680.541 L1478.03 680.541 L1477.47 680.541 L1476.91 680.541 L1476.35 680.541 L1475.79 680.541 L1475.24 680.541 L1474.68 680.541 L1474.12 680.541 L1473.56 680.541 L1473 680.541 L1472.44 680.541 L1471.88 680.541 L1471.32 680.541 L1470.76 680.541 L1470.2 680.541 L1469.64 680.541 L1469.08 680.541 L1468.52 680.541 L1467.97 680.541 L1467.41 680.541 L1466.85 680.541 L1466.29 680.541 L1465.73 680.541 L1465.17 680.541 L1464.61 680.541 L1464.05 680.541 L1463.49 680.541 L1462.93 680.541 L1462.37 680.541 L1461.81 680.541 L1461.25 680.541 L1460.7 680.541 L1460.14 680.541 L1459.58 680.541 L1459.02 680.541 L1458.46 680.541 L1457.9 680.541 L1457.34 680.541 L1456.78 680.541 L1456.22 680.541 L1455.66 680.541 L1455.1 680.541 L1454.54 680.541 L1453.98 680.541 L1453.42 680.541 L1452.87 680.541 L1452.31 680.541 L1451.75 680.541 L1451.19 680.541 L1450.63 680.541 L1450.07 680.541 L1449.51 680.541 L1448.95 680.541 L1448.39 680.541 L1447.83 680.541 L1447.27 680.541 L1446.71 680.541 L1446.15 680.541 L1445.6 680.541 L1445.04 680.541 L1444.48 680.541 L1443.92 680.541 L1443.36 680.541 L1442.8 680.541 L1442.24 680.541 L1441.68 680.541 L1441.12 680.541 L1440.56 680.541 L1440 680.541 L1439.44 680.541 L1438.88 680.541 L1438.33 680.541 L1437.77 680.541 L1437.21 680.541 L1436.65 680.541 L1436.09 680.541 L1435.53 680.541 L1434.97 680.541 L1434.41 680.541 L1433.85 680.541 L1433.29 680.541 L1432.73 680.541 L1432.17 680.541 L1431.61 680.541 L1431.05 680.541 L1430.5 680.541 L1429.94 680.541 L1429.38 680.541 L1428.82 680.541 L1428.26 680.541 L1427.7 680.541 L1427.14 680.541 L1426.58 680.541 L1426.02 680.541 L1425.46 680.541 L1424.9 680.541 L1424.34 680.541 L1423.78 680.541 L1423.23 680.541 L1422.67 680.541 L1422.11 680.541 L1421.55 680.541 L1420.99 680.541 L1420.43 680.541 L1419.87 680.541 L1419.31 680.541 L1418.75 680.541 L1418.19 680.541 L1417.63 680.541 L1417.07 680.541 L1416.51 680.541 L1415.95 680.541 L1415.4 680.541 L1414.84 680.541 L1414.28 680.541 L1413.72 680.541 L1413.16 680.541 L1412.6 680.541 L1412.04 680.541 L1411.48 680.541 L1410.92 680.541 L1410.36 680.541 L1409.8 680.541 L1409.24 680.541 L1408.68 680.541 L1408.13 680.541 L1407.57 680.541 L1407.01 680.541 L1406.45 680.541 L1405.89 680.541 L1405.33 680.541 L1404.77 680.541 L1404.21 680.541 L1403.65 680.541 L1403.09 680.541 L1402.53 680.541 L1401.97 680.541 L1401.41 680.541 L1400.86 680.541 L1400.3 680.541 L1399.74 680.541 L1399.18 680.541 L1398.62 680.541 L1398.06 680.541 L1397.5 680.541 L1396.94 680.541 L1396.38 680.541 L1395.82 680.541 L1395.26 680.541 L1394.7 680.541 L1394.14 680.541 L1393.58 680.541 L1393.03 680.541 L1392.47 680.541 L1391.91 680.541 L1391.35 680.541 L1390.79 680.541 L1390.23 680.541 L1389.67 680.541 L1389.11 680.541 L1388.55 680.541 L1387.99 680.541 L1387.43 680.541 L1386.87 680.541 L1386.31 680.541 L1385.76 680.541 L1385.2 680.541 L1384.64 680.541 L1384.08 680.541 L1383.52 680.541 L1382.96 680.541 L1382.4 680.541 L1381.84 680.541 L1381.28 680.541 L1380.72 680.541 L1380.16 680.541 L1379.6 680.541 L1379.04 680.541 L1378.49 680.541 L1377.93 680.541 L1377.37 680.541 L1376.81 680.541 L1376.25 680.541 L1375.69 680.541 L1375.13 680.541 L1374.57 680.541 L1374.01 680.541 L1373.45 680.541 L1372.89 680.541 L1372.33 680.541 L1371.77 680.541 L1371.21 680.541 L1370.66 680.541 L1370.1 680.541 L1369.54 680.541 L1368.98 680.541 L1368.42 680.541 L1367.86 680.541 L1367.3 680.541 L1366.74 680.541 L1366.18 680.541 L1365.62 680.541 L1365.06 680.541 L1364.5 680.541 L1363.94 680.541 L1363.39 680.541 L1362.83 680.541 L1362.27 680.541 L1361.71 680.541 L1361.15 680.541 L1360.59 680.541 L1360.03 680.541 L1359.47 680.541 L1358.91 680.541 L1358.35 680.541 L1357.79 680.541 L1357.23 680.541 L1356.67 680.541 L1356.12 680.541 L1355.56 680.541 L1355 680.541 L1354.44 680.541 L1353.88 680.541 L1353.32 680.541 L1352.76 680.541 L1352.2 680.541 L1351.64 680.541 L1351.08 680.541 L1350.52 680.541 L1349.96 680.541 L1349.4 680.541 L1348.84 680.541 L1348.29 680.541 L1347.73 680.541 L1347.17 680.541 L1346.61 680.541 L1346.05 680.541 L1345.49 680.541 L1344.93 680.541 L1344.37 680.541 L1343.81 680.541 L1343.25 680.541 L1342.69 680.541 L1342.13 680.541 L1341.57 680.541 L1341.02 680.541 L1340.46 680.541 L1339.9 680.541 L1339.34 680.541 L1338.78 680.541 L1338.22 680.541 L1337.66 680.541 L1337.1 680.541 L1336.54 680.541 L1335.98 680.541 L1335.42 680.541 L1334.86 680.541 L1334.3 680.541 L1333.75 680.541 L1333.19 680.541 L1332.63 680.541 L1332.07 680.541 L1331.51 680.541 L1330.95 680.541 L1330.39 680.541 L1329.83 680.541 L1329.27 680.541 L1328.71 680.541 L1328.15 680.541 L1327.59 680.541 L1327.03 680.541 L1326.47 680.541 L1325.92 680.541 L1325.36 680.541 L1324.8 680.541 L1324.24 680.541 L1323.68 680.541 L1323.12 680.541 L1322.56 680.541 L1322 680.541 L1321.44 680.541 L1320.88 680.541 L1320.32 680.541 L1319.76 680.541 L1319.2 680.541 L1318.65 680.541 L1318.09 680.541 L1317.53 680.541 L1316.97 680.541 L1316.41 680.541 L1315.85 680.541 L1315.29 680.541 L1314.73 680.541 L1314.17 680.541 L1313.61 680.541 L1313.05 680.541 L1312.49 680.541 L1311.93 680.541 L1311.38 680.541 L1310.82 680.541 L1310.26 680.541 L1309.7 680.541 L1309.14 680.541 L1308.58 680.541 L1308.02 680.541 L1307.46 680.541 L1306.9 680.541 L1306.34 680.541 L1305.78 680.541 L1305.22 680.541 L1304.66 680.541 L1304.1 680.541 L1303.55 680.541 L1302.99 680.541 L1302.43 680.541 L1301.87 680.541 L1301.31 680.541 L1300.75 680.541 L1300.19 680.541 L1299.63 680.541 L1299.07 680.541 L1298.51 680.541 L1297.95 680.541 L1297.39 680.541 L1296.83 680.541 L1296.28 680.541 L1295.72 680.541 L1295.16 680.541 L1294.6 680.541 L1294.04 680.541 L1293.48 680.541 L1292.92 680.541 L1292.36 680.541 L1291.8 680.541 L1291.24 680.541 L1290.68 680.541 L1290.12 680.541 L1289.56 680.541 L1289 680.541 L1288.45 680.541 L1287.89 680.541 L1287.33 680.541 L1286.77 680.541 L1286.21 680.541 L1285.65 680.541 L1285.09 680.541 L1284.53 680.541 L1283.97 680.541 L1283.41 680.541 L1282.85 680.541 L1282.29 680.541 L1281.73 680.541 L1281.18 680.541 L1280.62 680.541 L1280.06 680.541 L1279.5 680.541 L1278.94 680.541 L1278.38 680.541 L1277.82 680.541 L1277.26 680.541 L1276.7 680.541 L1276.14 680.541 L1275.58 680.541 L1275.02 680.541 L1274.46 680.541 L1273.91 680.541 L1273.35 680.541 L1272.79 680.541 L1272.23 680.541 L1271.67 680.541 L1271.11 680.541 L1270.55 680.541 L1269.99 680.541 L1269.43 680.541 L1268.87 680.541 L1268.31 680.541 L1267.75 680.541 L1267.19 680.541 L1266.63 680.541 L1266.08 680.541 L1265.52 680.541 L1264.96 680.541 L1264.4 680.541 L1263.84 680.541 L1263.28 680.541 L1262.72 680.541 L1262.16 680.541 L1261.6 680.541 L1261.04 680.541 L1260.48 680.541 L1259.92 680.541 L1259.36 680.541 L1258.81 680.541 L1258.25 680.541 L1257.69 680.541 L1257.13 680.541 L1256.57 680.541 L1256.01 680.541 L1255.45 680.541 L1254.89 680.541 L1254.33 680.541 L1253.77 680.541 L1253.21 680.541 L1252.65 680.541 L1252.09 680.541 L1251.54 680.541 L1250.98 680.541 L1250.42 680.541 L1249.86 680.541 L1249.3 680.541 L1248.74 680.541 L1248.18 680.541 L1247.62 680.541 L1247.06 680.541 L1246.5 680.541 L1245.94 680.541 L1245.38 680.541 L1244.82 680.541 L1244.26 680.541 L1243.71 680.541 L1243.15 680.541 L1242.59 680.541 L1242.03 680.541 L1241.47 680.541 L1240.91 680.541 L1240.35 680.541 L1239.79 680.541 L1239.23 680.541 L1238.67 680.541 L1238.11 680.541 L1237.55 680.541 L1236.99 680.541 L1236.44 680.541 L1235.88 680.541 L1235.32 680.541 L1234.76 680.541 L1234.2 680.541 L1233.64 680.541 L1233.08 680.541 L1232.52 680.541 L1231.96 680.541 L1231.4 680.541 L1230.84 680.541 L1230.28 680.541 L1229.72 680.541 L1229.17 680.541 L1228.61 680.541 L1228.05 680.541 L1227.49 680.541 L1226.93 680.541 L1226.37 680.541 L1225.81 680.541 L1225.25 680.541 L1224.69 680.541 L1224.13 680.541 L1223.57 680.541 L1223.01 680.541 L1222.45 680.541 L1221.89 680.541 L1221.34 680.541 L1220.78 680.541 L1220.22 680.541 L1219.66 680.541 L1219.1 680.541 L1218.54 680.541 L1217.98 680.541 L1217.42 680.541 L1216.86 680.541 L1216.3 680.541 L1215.74 680.541 L1215.18 680.541 L1214.62 680.541 L1214.07 680.541 L1213.51 680.541 L1212.95 680.541 L1212.39 680.541 L1211.83 680.541 L1211.27 680.541 L1210.71 680.541 L1210.15 680.541 L1209.59 680.541 L1209.03 680.541 L1208.47 680.541 L1207.91 680.541 L1207.35 680.541 L1206.8 680.541 L1206.24 680.541 L1205.68 680.541 L1205.12 680.541 L1204.56 680.541 L1204 680.541 L1203.44 680.541 L1202.88 680.541 L1202.32 680.541 L1201.76 680.541 L1201.2 680.541 L1200.64 680.541 L1200.08 680.541 L1199.52 680.541 L1198.97 680.541 L1198.41 680.541 L1197.85 680.541 L1197.29 680.541 L1196.73 680.541 L1196.17 680.541 L1195.61 680.541 L1195.05 680.541 L1194.49 680.541 L1193.93 680.541 L1193.37 680.541 L1192.81 680.541 L1192.25 680.541 L1191.7 680.541 L1191.14 680.541 L1190.58 680.541 L1190.02 680.541 L1189.46 680.541 L1188.9 680.541 L1188.34 680.541 L1187.78 680.541 L1187.22 680.541 L1186.66 680.541 L1186.1 680.541 L1185.54 680.541 L1184.98 680.541 L1184.43 680.541 L1183.87 680.541 L1183.31 680.541 L1182.75 680.541 L1182.19 680.541 L1181.63 680.541 L1181.07 680.541 L1180.51 680.541 L1179.95 680.541 L1179.39 680.541 L1178.83 680.541 L1178.27 680.541 L1177.71 680.541 L1177.15 680.541 L1176.6 680.541 L1176.04 680.541 L1175.48 680.541 L1174.92 680.541 L1174.36 680.541 L1173.8 680.541 L1173.24 680.541 L1172.68 680.541 L1172.12 680.541 L1171.56 680.541 L1171 680.541 L1170.44 680.541 L1169.88 680.541 L1169.33 680.541 L1168.77 680.541 L1168.21 680.541 L1167.65 680.541 L1167.09 680.541 L1166.53 680.541 L1165.97 680.541 L1165.41 680.541 L1164.85 680.541 L1164.29 680.541 L1163.73 680.541 L1163.17 680.541 L1162.61 680.541 L1162.05 680.541 L1161.5 680.541 L1160.94 680.541 L1160.38 680.541 L1159.82 680.541 L1159.26 680.541 L1158.7 680.541 L1158.14 680.541 L1157.58 680.541 L1157.02 680.541 L1156.46 680.541 L1155.9 680.541 L1155.34 680.541 L1154.78 680.541 L1154.23 680.541 L1153.67 680.541 L1153.11 680.541 L1152.55 680.541 L1151.99 680.541 L1151.43 680.541 L1150.87 680.541 L1150.31 680.541 L1149.75 680.541 L1149.19 680.541 L1148.63 680.541 L1148.07 680.541 L1147.51 680.541 L1146.96 680.541 L1146.4 680.541 L1145.84 680.541 L1145.28 680.541 L1144.72 680.541 L1144.16 680.541 L1143.6 680.541 L1143.04 680.541 L1142.48 680.541 L1141.92 680.541 L1141.36 680.541 L1140.8 680.541 L1140.24 680.541 L1139.68 680.541 L1139.13 680.541 L1138.57 680.541 L1138.01 680.541 L1137.45 680.541 L1136.89 680.541 L1136.33 680.541 L1135.77 680.541 L1135.21 680.541 L1134.65 680.541 L1134.09 680.541 L1133.53 680.541 L1132.97 680.541 L1132.41 680.541 L1131.86 680.541 L1131.3 680.541 L1130.74 680.541 L1130.18 680.541 L1129.62 680.541 L1129.06 680.541 L1128.5 680.541 L1127.94 680.541 L1127.38 680.541 L1126.82 680.541 L1126.26 680.541 L1125.7 680.541 L1125.14 680.541 L1124.59 680.541 L1124.03 680.541 L1123.47 680.541 L1122.91 680.541 L1122.35 680.541 L1121.79 680.541 L1121.23 680.541 L1120.67 680.541 L1120.11 680.541 L1119.55 680.541 L1118.99 680.541 L1118.43 680.541 L1117.87 680.541 L1117.31 680.541 L1116.76 680.541 L1116.2 680.541 L1115.64 680.541 L1115.08 680.541 L1114.52 680.541 L1113.96 680.541 L1113.4 680.541 L1112.84 680.541 L1112.28 680.541 L1111.72 680.541 L1111.16 680.541 L1110.6 680.541 L1110.04 680.541 L1109.49 680.541 L1108.93 680.541 L1108.37 680.541 L1107.81 680.541 L1107.25 680.541 L1106.69 680.541 L1106.13 680.541 L1105.57 680.541 L1105.01 680.541 L1104.45 680.541 L1103.89 680.541 L1103.33 680.541 L1102.77 680.541 L1102.22 680.541 L1101.66 680.541 L1101.1 680.541 L1100.54 680.541 L1099.98 680.541 L1099.42 680.541 L1098.86 680.541 L1098.3 680.541 L1097.74 680.541 L1097.18 680.541 L1096.62 680.541 L1096.06 680.541 L1095.5 680.541 L1094.94 680.541 L1094.39 680.541 L1093.83 680.541 L1093.27 680.541 L1092.71 680.541 L1092.15 680.541 L1091.59 680.541 L1091.03 680.541 L1090.47 680.541 L1089.91 680.541 L1089.35 680.541 L1088.79 680.541 L1088.23 680.541 L1087.67 680.541 L1087.12 680.541 L1086.56 680.541 L1086 680.541 L1085.44 680.541 L1084.88 680.541 L1084.32 680.541 L1083.76 680.541 L1083.2 680.541 L1082.64 680.541 L1082.08 680.541 L1081.52 680.541 L1080.96 680.541 L1080.4 680.541 L1079.85 680.541 L1079.29 680.541 L1078.73 680.541 L1078.17 680.541 L1077.61 680.541 L1077.05 680.541 L1076.49 680.541 L1075.93 680.541 L1075.37 680.541 L1074.81 680.541 L1074.25 680.541 L1073.69 680.541 L1073.13 680.541 L1072.57 680.541 L1072.02 680.541 L1071.46 680.541 L1070.9 680.541 L1070.34 680.541 L1069.78 680.541 L1069.22 680.541 L1068.66 680.541 L1068.1 680.541 L1067.54 680.541 L1066.98 680.541 L1066.42 680.541 L1065.86 680.541 L1065.3 680.541 L1064.75 680.541 L1064.19 680.541 L1063.63 680.541 L1063.07 680.541 L1062.51 680.541 L1061.95 680.541 L1061.39 680.541 L1060.83 680.541 L1060.27 680.541 L1059.71 680.541 L1059.15 680.541 L1058.59 680.541 L1058.03 680.541 L1057.48 680.541 L1056.92 680.541 L1056.36 680.541 L1055.8 680.541 L1055.24 680.541 L1054.68 680.541 L1054.12 680.541 L1053.56 680.541 L1053 680.541 L1052.44 680.541 L1051.88 680.541 L1051.32 680.541 L1050.76 680.541 L1050.2 680.541 L1049.65 680.541 L1049.09 680.541 L1048.53 680.541 L1047.97 680.541 L1047.41 680.541 L1046.85 680.541 L1046.29 680.541 L1045.73 680.541 L1045.17 680.541 L1044.61 680.541 L1044.05 680.541 L1043.49 680.541 L1042.93 680.541 L1042.38 680.541 L1041.82 680.541 L1041.26 680.541 L1040.7 680.541 L1040.14 680.541 L1039.58 680.541 L1039.02 680.541 L1038.46 680.541 L1037.9 680.541 L1037.34 680.541 L1036.78 680.541 L1036.22 680.541 L1035.66 680.541 L1035.1 680.541 L1034.55 680.541 L1033.99 680.541 L1033.43 680.541 L1032.87 680.541 L1032.31 680.541 L1031.75 680.541 L1031.19 680.541 L1030.63 680.541 L1030.07 680.541 L1029.51 680.541 L1028.95 680.541 L1028.39 680.541 L1027.83 680.541 L1027.28 680.541 L1026.72 680.541 L1026.16 680.541 L1025.6 680.541 L1025.04 680.541 L1024.48 680.541 L1023.92 680.541 L1023.36 680.541 L1022.8 680.541 L1022.24 680.541 L1021.68 680.541 L1021.12 680.541 L1020.56 680.541 L1020.01 680.541 L1019.45 680.541 L1018.89 680.541 L1018.33 680.541 L1017.77 680.541 L1017.21 680.541 L1016.65 680.541 L1016.09 680.541 L1015.53 680.541 L1014.97 680.541 L1014.41 680.541 L1013.85 680.541 L1013.29 680.541 L1012.73 680.541 L1012.18 680.541 L1011.62 680.541 L1011.06 680.541 L1010.5 680.541 L1009.94 680.541 L1009.38 680.541 L1008.82 680.541 L1008.26 680.541 L1007.7 680.541 L1007.14 680.541 L1006.58 680.541 L1006.02 680.541 L1005.46 680.541 L1004.91 680.541 L1004.35 680.541 L1003.79 680.541 L1003.23 680.541 L1002.67 680.541 L1002.11 680.541 L1001.55 680.541 L1000.99 680.541 L1000.43 680.541 L999.872 680.541 L999.313 680.541 L998.754 680.541 L998.194 680.541 L997.635 680.541 L997.076 680.541 L996.517 680.541 L995.957 680.541 L995.398 680.541 L994.839 680.541 L994.28 680.541 L993.72 680.541 L993.161 680.541 L992.602 680.541 L992.043 680.541 L991.483 680.541 L990.924 680.541 L990.365 680.541 L989.806 680.541 L989.246 680.541 L988.687 680.541 L988.128 680.541 L987.569 680.541 L987.009 680.541 L986.45 680.541 L985.891 680.541 L985.332 680.541 L984.772 680.541 L984.213 680.541 L983.654 680.541 L983.095 680.541 L982.535 680.541 L981.976 680.541 L981.417 680.541 L980.858 680.541 L980.298 680.541 L979.739 680.541 L979.18 680.541 L978.621 680.541 L978.061 680.541 L977.502 680.541 L976.943 680.541 L976.384 680.541 L975.824 680.541 L975.265 680.541 L974.706 680.541 L974.147 680.541 L973.587 680.541 L973.028 680.541 L972.469 680.541 L971.91 680.541 L971.35 680.541 L970.791 680.541 L970.232 680.541 L969.673 680.541 L969.113 680.541 L968.554 680.541 L967.995 680.541 L967.436 680.541 L966.876 680.541 L966.317 680.541 L965.758 680.541 L965.199 680.541 L964.639 680.541 L964.08 680.541 L963.521 680.541 L962.962 680.541 L962.402 680.541 L961.843 680.541 L961.284 680.541 L960.725 680.541 L960.165 680.541 L959.606 680.541 L959.047 680.541 L958.488 680.541 L957.928 680.541 L957.369 680.541 L956.81 680.541 L956.251 680.541 L955.691 680.541 L955.132 680.541 L954.573 680.541 L954.014 680.541 L953.454 680.541 L952.895 680.541 L952.336 680.541 L951.777 680.541 L951.217 680.541 L950.658 680.541 L950.099 680.541 L949.54 680.541 L948.98 680.541 L948.421 680.541 L947.862 680.541 L947.303 680.541 L946.743 680.541 L946.184 680.541 L945.625 680.541 L945.066 680.541 L944.506 680.541 L943.947 680.541 L943.388 680.541 L942.829 680.541 L942.269 680.541 L941.71 680.541 L941.151 680.541 L940.592 680.541 L940.032 680.541 L939.473 680.541 L938.914 680.541 L938.355 680.541 L937.795 680.541 L937.236 680.541 L936.677 680.541 L936.118 680.541 L935.558 680.541 L934.999 680.541 L934.44 680.541 L933.881 680.541 L933.321 680.541 L932.762 680.541 L932.203 680.541 L931.644 680.541 L931.084 680.541 L930.525 680.541 L929.966 680.541 L929.406 680.541 L928.847 680.541 L928.288 680.541 L927.729 680.541 L927.169 680.541 L926.61 680.541 L926.051 680.541 L925.492 680.541 L924.932 680.541 L924.373 680.541 L923.814 680.541 L923.255 680.541 L922.695 680.541 L922.136 680.541 L921.577 680.541 L921.018 680.541 L920.458 680.541 L919.899 680.541 L919.34 680.541 L918.781 680.541 L918.221 680.541 L917.662 680.541 L917.103 680.541 L916.544 680.541 L915.984 680.541 L915.425 680.541 L914.866 680.541 L914.307 680.541 L913.747 680.541 L913.188 680.541 L912.629 680.541 L912.07 680.541 L911.51 680.541 L910.951 680.541 L910.392 680.541 L909.833 680.541 L909.273 680.541 L908.714 680.541 L908.155 680.541 L907.596 680.541 L907.036 680.541 L906.477 680.541 L905.918 680.541 L905.359 680.541 L904.799 680.541 L904.24 680.541 L903.681 680.541 L903.122 680.541 L902.562 680.541 L902.003 680.541 L901.444 680.541 L900.885 680.541 L900.325 680.541 L899.766 680.541 L899.207 680.541 L898.648 680.541 L898.088 680.541 L897.529 680.541 L896.97 680.541 L896.411 680.541 L895.851 680.541 L895.292 680.541 L894.733 680.541 L894.174 680.541 L893.614 680.541 L893.055 680.541 L892.496 680.541 L891.937 680.541 L891.377 680.541 L890.818 680.541 L890.259 680.541 L889.7 680.541 L889.14 680.541 L888.581 680.541 L888.022 680.541 L887.463 680.541 L886.903 680.541 L886.344 680.541 L885.785 680.541 L885.226 680.541 L884.666 680.541 L884.107 680.541 L883.548 680.541 L882.989 680.541 L882.429 680.541 L881.87 680.541 L881.311 680.541 L880.752 680.541 L880.192 680.541 L879.633 680.541 L879.074 680.541 L878.515 680.541 L877.955 680.541 L877.396 680.541 L876.837 680.541 L876.278 680.541 L875.718 680.541 L875.159 680.541 L874.6 680.541 L874.041 680.541 L873.481 680.541 L872.922 680.541 L872.363 680.541 L871.804 680.541 L871.244 680.541 L870.685 680.541 L870.126 680.541 L869.567 680.541 L869.007 680.541 L868.448 680.541 L867.889 680.541 L867.33 680.541 L866.77 680.541 L866.211 680.541 L865.652 680.541 L865.093 680.541 L864.533 680.541 L863.974 680.541 L863.415 680.541 L862.856 680.541 L862.296 680.541 L861.737 680.541 L861.178 680.541 L860.619 680.541 L860.059 680.541 L859.5 680.541 L858.941 680.541 L858.382 680.541 L857.822 680.541 L857.263 680.541 L856.704 680.541 L856.145 680.541 L855.585 680.541 L855.026 680.541 L854.467 680.541 L853.908 680.541 L853.348 680.541 L852.789 680.541 L852.23 680.541 L851.671 680.541 L851.111 680.541 L850.552 680.541 L849.993 680.541 L849.434 680.541 L848.874 680.541 L848.315 680.541 L847.756 680.541 L847.197 680.541 L846.637 680.541 L846.078 680.541 L845.519 680.541 L844.96 680.541 L844.4 680.541 L843.841 680.541 L843.282 680.541 L842.723 680.541 L842.163 680.541 L841.604 680.541 L841.045 680.541 L840.486 680.541 L839.926 680.541 L839.367 680.541 L838.808 680.541 L838.249 680.541 L837.689 680.541 L837.13 680.541 L836.571 680.541 L836.012 680.541 L835.452 680.541 L834.893 680.541 L834.334 680.541 L833.775 680.541 L833.215 680.541 L832.656 680.541 L832.097 680.541 L831.538 680.541 L830.978 680.541 L830.419 680.541 L829.86 680.541 L829.301 680.541 L828.741 680.541 L828.182 680.541 L827.623 680.541 L827.064 680.541 L826.504 680.541 L825.945 680.541 L825.386 680.541 L824.827 680.541 L824.267 680.541 L823.708 680.541 L823.149 680.541 L822.59 680.541 L822.03 680.541 L821.471 680.541 L820.912 680.541 L820.353 680.541 L819.793 680.541 L819.234 680.541 L818.675 680.541 L818.116 680.541 L817.556 680.541 L816.997 680.541 L816.438 680.541 L815.879 680.541 L815.319 680.541 L814.76 680.541 L814.201 680.541 L813.642 680.541 L813.082 680.541 L812.523 680.541 L811.964 680.541 L811.405 680.541 L810.845 680.541 L810.286 680.541 L809.727 680.541 L809.168 680.541 L808.608 680.541 L808.049 680.541 L807.49 680.541 L806.931 680.541 L806.371 680.541 L805.812 680.541 L805.253 680.541 L804.693 680.541 L804.134 680.541 L803.575 680.541 L803.016 680.541 L802.456 680.541 L801.897 680.541 L801.338 680.541 L800.779 680.541 L800.219 680.541 L799.66 680.541 L799.101 680.541 L798.542 680.541 L797.982 680.541 L797.423 680.541 L796.864 680.541 L796.305 680.541 L795.745 680.541 L795.186 680.541 L794.627 680.541 L794.068 680.541 L793.508 680.541 L792.949 680.541 L792.39 680.541 L791.831 680.541 L791.271 680.541 L790.712 680.541 L790.153 680.541 L789.594 680.541 L789.034 680.541 L788.475 680.541 L787.916 680.541 L787.357 680.541 L786.797 680.541 L786.238 680.541 L785.679 680.541 L785.12 680.541 L784.56 680.541 L784.001 680.541 L783.442 680.541 L782.883 680.541 L782.323 680.541 L781.764 680.541 L781.205 680.541 L780.646 680.541 L780.086 680.541 L779.527 680.541 L778.968 680.541 L778.409 680.541 L777.849 680.541 L777.29 680.541 L776.731 680.541 L776.172 680.541 L775.612 680.541 L775.053 680.541 L774.494 680.541 L773.935 680.541 L773.375 680.541 L772.816 680.541 L772.257 680.541 L771.698 680.541 L771.138 680.541 L770.579 680.541 L770.02 680.541 L769.461 680.541 L768.901 680.541 L768.342 680.541 L767.783 680.541 L767.224 680.541 L766.664 680.541 L766.105 680.541 L765.546 680.541 L764.987 680.541 L764.427 680.541 L763.868 680.541 L763.309 680.541 L762.75 680.541 L762.19 680.541 L761.631 680.541 L761.072 680.541 L760.513 680.541 L759.953 680.541 L759.394 680.541 L758.835 680.541 L758.276 680.541 L757.716 680.541 L757.157 680.541 L756.598 680.541 L756.039 680.541 L755.479 680.541 L754.92 680.541 L754.361 680.541 L753.802 680.541 L753.242 680.541 L752.683 680.541 L752.124 680.541 L751.565 680.541 L751.005 680.541 L750.446 680.541 L749.887 680.541 L749.328 680.541 L748.768 680.541 L748.209 680.541 L747.65 680.541 L747.091 680.541 L746.531 680.541 L745.972 680.541 L745.413 680.541 L744.854 680.541 L744.294 680.541 L743.735 680.541 L743.176 680.541 L742.617 680.541 L742.057 680.541 L741.498 680.541 L740.939 680.541 L740.38 680.541 L739.82 680.541 L739.261 680.541 L738.702 680.541 L738.143 680.541 L737.583 680.541 L737.024 680.541 L736.465 680.541 L735.906 680.541 L735.346 680.541 L734.787 680.541 L734.228 680.541 L733.669 680.541 L733.109 680.541 L732.55 680.541 L731.991 680.541 L731.432 680.541 L730.872 680.541 L730.313 680.541 L729.754 680.541 L729.195 680.541 L728.635 680.541 L728.076 680.541 L727.517 680.541 L726.958 680.541 L726.398 680.541 L725.839 680.541 L725.28 680.541 L724.721 680.541 L724.161 680.541 L723.602 680.541 L723.043 680.541 L722.484 680.541 L721.924 680.541 L721.365 680.541 L720.806 680.541 L720.247 680.541  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.952 720.806,684.952 721.365,684.952 721.924,684.952 722.484,684.952 723.043,684.952 723.602,684.952 724.161,684.952 724.721,684.952 725.28,684.952 725.839,684.952 726.398,684.952 726.958,684.952 727.517,684.952 728.076,684.952 728.635,684.952 729.195,684.952 729.754,684.952 730.313,684.952 730.872,684.952 731.432,684.952 731.991,684.952 732.55,684.952 733.109,684.952 733.669,684.952 734.228,684.952 734.787,684.952 735.346,684.952 735.906,684.952 736.465,684.952 737.024,684.952 737.583,684.952 738.143,684.952 738.702,684.952 739.261,684.952 739.82,684.952 740.38,684.952 740.939,684.952 741.498,684.952 742.057,684.952 742.617,684.952 743.176,684.952 743.735,684.952 744.294,684.952 744.854,684.952 745.413,684.952 745.972,684.952 746.531,684.952 747.091,684.952 747.65,684.952 748.209,684.952 748.768,684.952 749.328,684.952 749.887,684.952 750.446,684.952 751.005,684.952 751.565,684.952 752.124,684.952 752.683,684.952 753.242,684.952 753.802,684.952 754.361,684.952 754.92,684.952 755.479,684.952 756.039,684.952 756.598,684.952 757.157,684.952 757.716,684.952 758.276,684.952 758.835,684.952 759.394,684.952 759.953,684.952 760.513,684.952 761.072,684.952 761.631,684.952 762.19,684.952 762.75,684.952 763.309,684.952 763.868,684.952 764.427,684.952 764.987,684.952 765.546,684.952 766.105,684.952 766.664,684.952 767.224,684.952 767.783,684.952 768.342,684.952 768.901,684.952 769.461,684.952 770.02,684.952 770.579,684.952 771.138,684.952 771.698,684.952 772.257,684.952 772.816,684.952 773.375,684.952 773.935,684.952 774.494,684.952 775.053,684.952 775.612,684.952 776.172,684.952 776.731,684.952 777.29,684.952 777.849,684.952 778.409,684.952 778.968,684.952 779.527,684.952 780.086,684.952 780.646,684.952 781.205,684.952 781.764,684.952 782.323,684.952 782.883,684.952 783.442,684.952 784.001,684.952 784.56,684.952 785.12,684.952 785.679,684.952 786.238,684.952 786.797,684.952 787.357,684.952 787.916,684.952 788.475,684.952 789.034,684.952 789.594,684.952 790.153,684.952 790.712,684.952 791.271,684.952 791.831,684.952 792.39,684.952 792.949,684.952 793.508,684.952 794.068,684.952 794.627,684.952 795.186,684.952 795.745,684.952 796.305,684.952 796.864,684.952 797.423,684.952 797.982,684.952 798.542,684.952 799.101,684.952 799.66,684.952 800.219,684.952 800.779,684.952 801.338,684.952 801.897,684.952 802.456,684.952 803.016,684.952 803.575,684.952 804.134,684.952 804.693,684.952 805.253,684.952 805.812,684.952 806.371,684.952 806.931,684.952 807.49,684.952 808.049,684.952 808.608,684.952 809.168,684.952 809.727,684.952 810.286,684.952 810.845,684.952 811.405,684.952 811.964,684.952 812.523,684.952 813.082,684.952 813.642,684.952 814.201,684.952 814.76,684.952 815.319,684.952 815.879,684.952 816.438,684.952 816.997,684.952 817.556,684.952 818.116,684.952 818.675,684.952 819.234,684.952 819.793,684.952 820.353,684.952 820.912,684.952 821.471,684.952 822.03,684.952 822.59,684.952 823.149,684.952 823.708,684.952 824.267,684.952 824.827,684.952 825.386,684.952 825.945,684.952 826.504,684.952 827.064,684.952 827.623,684.952 828.182,684.952 828.741,684.952 829.301,684.952 829.86,684.952 830.419,684.952 830.978,684.952 831.538,684.952 832.097,684.952 832.656,684.952 833.215,684.952 833.775,684.952 834.334,684.952 834.893,684.952 835.452,684.952 836.012,684.952 836.571,684.952 837.13,684.952 837.689,684.952 838.249,684.952 838.808,684.952 839.367,684.952 839.926,684.952 840.486,684.952 841.045,684.952 841.604,684.952 842.163,684.952 842.723,684.952 843.282,684.952 843.841,684.952 844.4,684.952 844.96,684.952 845.519,684.952 846.078,684.952 846.637,684.952 847.197,684.952 847.756,684.952 848.315,684.952 848.874,684.952 849.434,684.952 849.993,684.952 850.552,684.952 851.111,684.952 851.671,684.952 852.23,684.952 852.789,684.952 853.348,684.952 853.908,684.952 854.467,684.952 855.026,684.952 855.585,684.952 856.145,684.952 856.704,684.952 857.263,684.952 857.822,684.952 858.382,684.952 858.941,684.952 859.5,684.952 860.059,684.952 860.619,684.952 861.178,684.952 861.737,684.952 862.296,684.952 862.856,684.952 863.415,684.952 863.974,684.952 864.533,684.952 865.093,684.952 865.652,684.952 866.211,684.952 866.77,684.952 867.33,684.952 867.889,684.952 868.448,684.952 869.007,684.952 869.567,684.952 870.126,684.952 870.685,684.952 871.244,684.952 871.804,684.952 872.363,684.952 872.922,684.952 873.481,684.952 874.041,684.952 874.6,684.952 875.159,684.952 875.718,684.952 876.278,684.952 876.837,684.952 877.396,684.952 877.955,684.952 878.515,684.952 879.074,684.952 879.633,684.952 880.192,684.952 880.752,684.952 881.311,684.952 881.87,684.952 882.429,684.952 882.989,684.952 883.548,684.952 884.107,684.952 884.666,684.952 885.226,684.952 885.785,684.952 886.344,684.952 886.903,684.952 887.463,684.952 888.022,684.952 888.581,684.952 889.14,684.952 889.7,684.952 890.259,684.952 890.818,684.952 891.377,684.952 891.937,684.952 892.496,684.952 893.055,684.952 893.614,684.952 894.174,684.952 894.733,684.952 895.292,684.952 895.851,684.952 896.411,684.952 896.97,684.952 897.529,684.952 898.088,684.952 898.648,684.952 899.207,684.952 899.766,684.952 900.325,684.952 900.885,684.952 901.444,684.952 902.003,684.952 902.562,684.952 903.122,684.952 903.681,684.952 904.24,684.952 904.799,684.952 905.359,684.952 905.918,684.952 906.477,684.952 907.036,684.952 907.596,684.952 908.155,684.952 908.714,684.952 909.273,684.952 909.833,684.952 910.392,684.952 910.951,684.952 911.51,684.952 912.07,684.952 912.629,684.952 913.188,684.952 913.747,684.952 914.307,684.952 914.866,684.952 915.425,684.952 915.984,684.952 916.544,684.952 917.103,684.952 917.662,684.952 918.221,684.952 918.781,684.952 919.34,684.952 919.899,684.952 920.458,684.952 921.018,684.952 921.577,684.952 922.136,684.952 922.695,684.952 923.255,684.952 923.814,684.952 924.373,684.952 924.932,684.952 925.492,684.952 926.051,684.952 926.61,684.952 927.169,684.952 927.729,684.952 928.288,684.952 928.847,684.952 929.406,684.952 929.966,684.952 930.525,684.952 931.084,684.952 931.644,684.952 932.203,684.952 932.762,684.952 933.321,684.952 933.881,684.952 934.44,684.952 934.999,684.952 935.558,684.952 936.118,684.952 936.677,684.952 937.236,684.952 937.795,684.952 938.355,684.952 938.914,684.952 939.473,684.952 940.032,684.952 940.592,684.952 941.151,684.952 941.71,684.952 942.269,684.952 942.829,684.952 943.388,684.952 943.947,684.952 944.506,684.952 945.066,684.952 945.625,684.952 946.184,684.952 946.743,684.952 947.303,684.952 947.862,684.952 948.421,684.952 948.98,684.952 949.54,684.952 950.099,684.952 950.658,684.952 951.217,684.952 951.777,684.952 952.336,684.952 952.895,684.952 953.454,684.952 954.014,684.952 954.573,684.952 955.132,684.952 955.691,684.952 956.251,684.952 956.81,684.952 957.369,684.952 957.928,684.952 958.488,684.952 959.047,684.952 959.606,684.952 960.165,684.952 960.725,684.952 961.284,684.952 961.843,684.952 962.402,684.952 962.962,684.952 963.521,684.952 964.08,684.952 964.639,684.952 965.199,684.952 965.758,684.952 966.317,684.952 966.876,684.952 967.436,684.952 967.995,684.952 968.554,684.952 969.113,684.952 969.673,684.952 970.232,684.952 970.791,684.952 971.35,684.952 971.91,684.952 972.469,684.952 973.028,684.952 973.587,684.952 974.147,684.952 974.706,684.952 975.265,684.952 975.824,684.952 976.384,684.952 976.943,684.952 977.502,684.952 978.061,684.952 978.621,684.952 979.18,684.952 979.739,684.952 980.298,684.952 980.858,684.952 981.417,684.952 981.976,684.952 982.535,684.952 983.095,684.952 983.654,684.952 984.213,684.952 984.772,684.952 985.332,684.952 985.891,684.952 986.45,684.952 987.009,684.952 987.569,684.952 988.128,684.952 988.687,684.952 989.246,684.952 989.806,684.952 990.365,684.952 990.924,684.952 991.483,684.952 992.043,684.952 992.602,684.952 993.161,684.952 993.72,684.952 994.28,684.952 994.839,684.952 995.398,684.952 995.957,684.952 996.517,684.952 997.076,684.952 997.635,684.952 998.194,684.952 998.754,684.952 999.313,684.952 999.872,684.952 1000.43,684.952 1000.99,684.952 1001.55,684.952 1002.11,684.952 1002.67,684.952 1003.23,684.952 1003.79,684.952 1004.35,684.952 1004.91,684.952 1005.46,684.952 1006.02,684.952 1006.58,684.952 1007.14,684.952 1007.7,684.952 1008.26,684.952 1008.82,684.952 1009.38,684.952 1009.94,684.952 1010.5,684.952 1011.06,684.952 1011.62,684.952 1012.18,684.952 1012.73,684.952 1013.29,684.952 1013.85,684.952 1014.41,684.952 1014.97,684.952 1015.53,684.952 1016.09,684.952 1016.65,684.952 1017.21,684.952 1017.77,684.952 1018.33,684.952 1018.89,684.952 1019.45,684.952 1020.01,684.952 1020.56,684.952 1021.12,684.952 1021.68,684.952 1022.24,684.952 1022.8,684.952 1023.36,684.952 1023.92,684.952 1024.48,684.952 1025.04,684.952 1025.6,684.952 1026.16,684.952 1026.72,684.952 1027.28,684.952 1027.83,684.952 1028.39,684.952 1028.95,684.952 1029.51,684.952 1030.07,684.952 1030.63,684.952 1031.19,684.952 1031.75,684.952 1032.31,684.952 1032.87,684.952 1033.43,684.952 1033.99,684.952 1034.55,684.952 1035.1,684.952 1035.66,684.952 1036.22,684.952 1036.78,684.952 1037.34,684.952 1037.9,684.952 1038.46,684.952 1039.02,684.952 1039.58,684.952 1040.14,684.952 1040.7,684.952 1041.26,684.952 1041.82,684.952 1042.38,684.952 1042.93,684.952 1043.49,684.952 1044.05,684.952 1044.61,684.952 1045.17,684.952 1045.73,684.952 1046.29,684.952 1046.85,684.952 1047.41,684.952 1047.97,684.952 1048.53,684.952 1049.09,684.952 1049.65,684.952 1050.2,684.952 1050.76,684.952 1051.32,684.952 1051.88,684.952 1052.44,684.952 1053,684.952 1053.56,684.952 1054.12,684.952 1054.68,684.952 1055.24,684.952 1055.8,684.952 1056.36,684.952 1056.92,684.952 1057.48,684.952 1058.03,684.952 1058.59,684.952 1059.15,684.952 1059.71,684.952 1060.27,684.952 1060.83,684.952 1061.39,684.952 1061.95,684.952 1062.51,684.952 1063.07,684.952 1063.63,684.952 1064.19,684.952 1064.75,684.952 1065.3,684.952 1065.86,684.952 1066.42,684.952 1066.98,684.952 1067.54,684.952 1068.1,684.952 1068.66,684.952 1069.22,684.952 1069.78,684.952 1070.34,684.952 1070.9,684.952 1071.46,684.952 1072.02,684.952 1072.57,684.952 1073.13,684.952 1073.69,684.952 1074.25,684.952 1074.81,684.952 1075.37,684.952 1075.93,684.952 1076.49,684.952 1077.05,684.952 1077.61,684.952 1078.17,684.952 1078.73,684.952 1079.29,684.952 1079.85,684.952 1080.4,684.952 1080.96,684.952 1081.52,684.952 1082.08,684.952 1082.64,684.952 1083.2,684.952 1083.76,684.952 1084.32,684.952 1084.88,684.952 1085.44,684.952 1086,684.952 1086.56,684.952 1087.12,684.952 1087.67,684.952 1088.23,684.952 1088.79,684.952 1089.35,684.952 1089.91,684.952 1090.47,684.952 1091.03,684.952 1091.59,684.952 1092.15,684.952 1092.71,684.952 1093.27,684.952 1093.83,684.952 1094.39,684.952 1094.94,684.952 1095.5,684.952 1096.06,684.952 1096.62,684.952 1097.18,684.952 1097.74,684.952 1098.3,684.952 1098.86,684.952 1099.42,684.952 1099.98,684.952 1100.54,684.952 1101.1,684.952 1101.66,684.952 1102.22,684.952 1102.77,684.952 1103.33,684.952 1103.89,684.952 1104.45,684.952 1105.01,684.952 1105.57,684.952 1106.13,684.952 1106.69,684.952 1107.25,684.952 1107.81,684.952 1108.37,684.952 1108.93,684.952 1109.49,684.952 1110.04,684.952 1110.6,684.952 1111.16,684.952 1111.72,684.952 1112.28,684.952 1112.84,684.952 1113.4,684.952 1113.96,684.952 1114.52,684.952 1115.08,684.952 1115.64,684.952 1116.2,684.952 1116.76,684.952 1117.31,684.952 1117.87,684.952 1118.43,684.952 1118.99,684.952 1119.55,684.952 1120.11,684.952 1120.67,684.952 1121.23,684.952 1121.79,684.952 1122.35,684.952 1122.91,684.952 1123.47,684.952 1124.03,684.952 1124.59,684.952 1125.14,684.952 1125.7,684.952 1126.26,684.952 1126.82,684.952 1127.38,684.952 1127.94,684.952 1128.5,684.952 1129.06,684.952 1129.62,684.952 1130.18,684.952 1130.74,684.952 1131.3,684.952 1131.86,684.952 1132.41,684.952 1132.97,684.952 1133.53,684.952 1134.09,684.952 1134.65,684.952 1135.21,684.952 1135.77,684.952 1136.33,684.952 1136.89,684.952 1137.45,684.952 1138.01,684.952 1138.57,684.952 1139.13,684.952 1139.68,684.952 1140.24,684.952 1140.8,684.952 1141.36,684.952 1141.92,684.952 1142.48,684.952 1143.04,684.952 1143.6,684.952 1144.16,684.952 1144.72,684.952 1145.28,684.952 1145.84,684.952 1146.4,684.952 1146.96,684.952 1147.51,684.952 1148.07,684.952 1148.63,684.952 1149.19,684.952 1149.75,684.952 1150.31,684.952 1150.87,684.952 1151.43,684.952 1151.99,684.952 1152.55,684.952 1153.11,684.952 1153.67,684.952 1154.23,684.952 1154.78,684.952 1155.34,684.952 1155.9,684.952 1156.46,684.952 1157.02,684.952 1157.58,684.952 1158.14,684.952 1158.7,684.952 1159.26,684.952 1159.82,684.952 1160.38,684.952 1160.94,684.952 1161.5,684.952 1162.05,684.952 1162.61,684.952 1163.17,684.952 1163.73,684.952 1164.29,684.952 1164.85,684.952 1165.41,684.952 1165.97,684.952 1166.53,684.952 1167.09,684.952 1167.65,684.952 1168.21,684.952 1168.77,684.952 1169.33,684.952 1169.88,684.952 1170.44,684.952 1171,684.952 1171.56,684.952 1172.12,684.952 1172.68,684.952 1173.24,684.952 1173.8,684.952 1174.36,684.952 1174.92,684.952 1175.48,684.952 1176.04,684.952 1176.6,684.952 1177.15,684.952 1177.71,684.952 1178.27,684.952 1178.83,684.952 1179.39,684.952 1179.95,684.952 1180.51,684.952 1181.07,684.952 1181.63,684.952 1182.19,684.952 1182.75,684.952 1183.31,684.952 1183.87,684.952 1184.43,684.952 1184.98,684.952 1185.54,684.952 1186.1,684.952 1186.66,684.952 1187.22,684.952 1187.78,684.952 1188.34,684.952 1188.9,684.952 1189.46,684.952 1190.02,684.952 1190.58,684.952 1191.14,684.952 1191.7,684.952 1192.25,684.952 1192.81,684.952 1193.37,684.952 1193.93,684.952 1194.49,684.952 1195.05,684.952 1195.61,684.952 1196.17,684.952 1196.73,684.952 1197.29,684.952 1197.85,684.952 1198.41,684.952 1198.97,684.952 1199.52,684.952 1200.08,684.952 1200.64,684.952 1201.2,684.952 1201.76,684.952 1202.32,684.952 1202.88,684.952 1203.44,684.952 1204,684.952 1204.56,684.952 1205.12,684.952 1205.68,684.952 1206.24,684.952 1206.8,684.952 1207.35,684.952 1207.91,684.952 1208.47,684.952 1209.03,684.952 1209.59,684.952 1210.15,684.952 1210.71,684.952 1211.27,684.952 1211.83,684.952 1212.39,684.952 1212.95,684.952 1213.51,684.952 1214.07,684.952 1214.62,684.952 1215.18,684.952 1215.74,684.952 1216.3,684.952 1216.86,684.952 1217.42,684.952 1217.98,684.952 1218.54,684.952 1219.1,684.952 1219.66,684.952 1220.22,684.952 1220.78,684.952 1221.34,684.952 1221.89,684.952 1222.45,684.952 1223.01,684.952 1223.57,684.952 1224.13,684.952 1224.69,684.952 1225.25,684.952 1225.81,684.952 1226.37,684.952 1226.93,684.952 1227.49,684.952 1228.05,684.952 1228.61,684.952 1229.17,684.952 1229.72,684.952 1230.28,684.952 1230.84,684.952 1231.4,684.952 1231.96,684.952 1232.52,684.952 1233.08,684.952 1233.64,684.952 1234.2,684.952 1234.76,684.952 1235.32,684.952 1235.88,684.952 1236.44,684.952 1236.99,684.952 1237.55,684.952 1238.11,684.952 1238.67,684.952 1239.23,684.952 1239.79,684.952 1240.35,684.952 1240.91,684.952 1241.47,684.952 1242.03,684.952 1242.59,684.952 1243.15,684.952 1243.71,684.952 1244.26,684.952 1244.82,684.952 1245.38,684.952 1245.94,684.952 1246.5,684.952 1247.06,684.952 1247.62,684.952 1248.18,684.952 1248.74,684.952 1249.3,684.952 1249.86,684.952 1250.42,684.952 1250.98,684.952 1251.54,684.952 1252.09,684.952 1252.65,684.952 1253.21,684.952 1253.77,684.952 1254.33,684.952 1254.89,684.952 1255.45,684.952 1256.01,684.952 1256.57,684.952 1257.13,684.952 1257.69,684.952 1258.25,684.952 1258.81,684.952 1259.36,684.952 1259.92,684.952 1260.48,684.952 1261.04,684.952 1261.6,684.952 1262.16,684.952 1262.72,684.952 1263.28,684.952 1263.84,684.952 1264.4,684.952 1264.96,684.952 1265.52,684.952 1266.08,684.952 1266.63,684.952 1267.19,684.952 1267.75,684.952 1268.31,684.952 1268.87,684.952 1269.43,684.952 1269.99,684.952 1270.55,684.952 1271.11,684.952 1271.67,684.952 1272.23,684.952 1272.79,684.952 1273.35,684.952 1273.91,684.952 1274.46,684.952 1275.02,684.952 1275.58,684.952 1276.14,684.952 1276.7,684.952 1277.26,684.952 1277.82,684.952 1278.38,684.952 1278.94,684.952 1279.5,684.952 1280.06,684.952 1280.62,684.952 1281.18,684.952 1281.73,684.952 1282.29,684.952 1282.85,684.952 1283.41,684.952 1283.97,684.952 1284.53,684.952 1285.09,684.952 1285.65,684.952 1286.21,684.952 1286.77,684.952 1287.33,684.952 1287.89,684.952 1288.45,684.952 1289,684.952 1289.56,684.952 1290.12,684.952 1290.68,684.952 1291.24,684.952 1291.8,684.952 1292.36,684.952 1292.92,684.952 1293.48,684.952 1294.04,684.952 1294.6,684.952 1295.16,684.952 1295.72,684.952 1296.28,684.952 1296.83,684.952 1297.39,684.952 1297.95,684.952 1298.51,684.952 1299.07,684.952 1299.63,684.952 1300.19,684.952 1300.75,684.952 1301.31,684.952 1301.87,684.952 1302.43,684.952 1302.99,684.952 1303.55,684.952 1304.1,684.952 1304.66,684.952 1305.22,684.952 1305.78,684.952 1306.34,684.952 1306.9,684.952 1307.46,684.952 1308.02,684.952 1308.58,684.952 1309.14,684.952 1309.7,684.952 1310.26,684.952 1310.82,684.952 1311.38,684.952 1311.93,684.952 1312.49,684.952 1313.05,684.952 1313.61,684.952 1314.17,684.952 1314.73,684.952 1315.29,684.952 1315.85,684.952 1316.41,684.952 1316.97,684.952 1317.53,684.952 1318.09,684.952 1318.65,684.952 1319.2,684.952 1319.76,684.952 1320.32,684.952 1320.88,684.952 1321.44,684.952 1322,684.952 1322.56,684.952 1323.12,684.952 1323.68,684.952 1324.24,684.952 1324.8,684.952 1325.36,684.952 1325.92,684.952 1326.47,684.952 1327.03,684.952 1327.59,684.952 1328.15,684.952 1328.71,684.952 1329.27,684.952 1329.83,684.952 1330.39,684.952 1330.95,684.952 1331.51,684.952 1332.07,684.952 1332.63,684.952 1333.19,684.952 1333.75,684.952 1334.3,684.952 1334.86,684.952 1335.42,684.952 1335.98,684.952 1336.54,684.952 1337.1,684.952 1337.66,684.952 1338.22,684.952 1338.78,684.952 1339.34,684.952 1339.9,684.952 1340.46,684.952 1341.02,684.952 1341.57,684.952 1342.13,684.952 1342.69,684.952 1343.25,684.952 1343.81,684.952 1344.37,684.952 1344.93,684.952 1345.49,684.952 1346.05,684.952 1346.61,684.952 1347.17,684.952 1347.73,684.952 1348.29,684.952 1348.84,684.952 1349.4,684.952 1349.96,684.952 1350.52,684.952 1351.08,684.952 1351.64,684.952 1352.2,684.952 1352.76,684.952 1353.32,684.952 1353.88,684.952 1354.44,684.952 1355,684.952 1355.56,684.952 1356.12,684.952 1356.67,684.952 1357.23,684.952 1357.79,684.952 1358.35,684.952 1358.91,684.952 1359.47,684.952 1360.03,684.952 1360.59,684.952 1361.15,684.952 1361.71,684.952 1362.27,684.952 1362.83,684.952 1363.39,684.952 1363.94,684.952 1364.5,684.952 1365.06,684.952 1365.62,684.952 1366.18,684.952 1366.74,684.952 1367.3,684.952 1367.86,684.952 1368.42,684.952 1368.98,684.952 1369.54,684.952 1370.1,684.952 1370.66,684.952 1371.21,684.952 1371.77,684.952 1372.33,684.952 1372.89,684.952 1373.45,684.952 1374.01,684.952 1374.57,684.952 1375.13,684.952 1375.69,684.952 1376.25,684.952 1376.81,684.952 1377.37,684.952 1377.93,684.952 1378.49,684.952 1379.04,684.952 1379.6,684.952 1380.16,684.952 1380.72,684.952 1381.28,684.952 1381.84,684.952 1382.4,684.952 1382.96,684.952 1383.52,684.952 1384.08,684.952 1384.64,684.952 1385.2,684.952 1385.76,684.952 1386.31,684.952 1386.87,684.952 1387.43,684.952 1387.99,684.952 1388.55,684.952 1389.11,684.952 1389.67,684.952 1390.23,684.952 1390.79,684.952 1391.35,684.952 1391.91,684.952 1392.47,684.952 1393.03,684.952 1393.58,684.952 1394.14,684.952 1394.7,684.952 1395.26,684.952 1395.82,684.952 1396.38,684.952 1396.94,684.952 1397.5,684.952 1398.06,684.952 1398.62,684.952 1399.18,684.952 1399.74,684.952 1400.3,684.952 1400.86,684.952 1401.41,684.952 1401.97,684.952 1402.53,684.952 1403.09,684.952 1403.65,684.952 1404.21,684.952 1404.77,684.952 1405.33,684.952 1405.89,684.952 1406.45,684.952 1407.01,684.952 1407.57,684.952 1408.13,684.952 1408.68,684.952 1409.24,684.952 1409.8,684.952 1410.36,684.952 1410.92,684.952 1411.48,684.952 1412.04,684.952 1412.6,684.952 1413.16,684.952 1413.72,684.952 1414.28,684.952 1414.84,684.952 1415.4,684.952 1415.95,684.952 1416.51,684.952 1417.07,684.952 1417.63,684.952 1418.19,684.952 1418.75,684.952 1419.31,684.952 1419.87,684.952 1420.43,684.952 1420.99,684.952 1421.55,684.952 1422.11,684.952 1422.67,684.952 1423.23,684.952 1423.78,684.952 1424.34,684.952 1424.9,684.952 1425.46,684.952 1426.02,684.952 1426.58,684.952 1427.14,684.952 1427.7,684.952 1428.26,684.952 1428.82,684.952 1429.38,684.952 1429.94,684.952 1430.5,684.952 1431.05,684.952 1431.61,684.952 1432.17,684.952 1432.73,684.952 1433.29,684.952 1433.85,684.952 1434.41,684.952 1434.97,684.952 1435.53,684.952 1436.09,684.952 1436.65,684.952 1437.21,684.952 1437.77,684.952 1438.33,684.952 1438.88,684.952 1439.44,684.952 1440,684.952 1440.56,684.952 1441.12,684.952 1441.68,684.952 1442.24,684.952 1442.8,684.952 1443.36,684.952 1443.92,684.952 1444.48,684.952 1445.04,684.952 1445.6,684.952 1446.15,684.952 1446.71,684.952 1447.27,684.952 1447.83,684.952 1448.39,684.952 1448.95,684.952 1449.51,684.952 1450.07,684.952 1450.63,684.952 1451.19,684.952 1451.75,684.952 1452.31,684.952 1452.87,684.952 1453.42,684.952 1453.98,684.952 1454.54,684.952 1455.1,684.952 1455.66,684.952 1456.22,684.952 1456.78,684.952 1457.34,684.952 1457.9,684.952 1458.46,684.952 1459.02,684.952 1459.58,684.952 1460.14,684.952 1460.7,684.952 1461.25,684.952 1461.81,684.952 1462.37,684.952 1462.93,684.952 1463.49,684.952 1464.05,684.952 1464.61,684.952 1465.17,684.952 1465.73,684.952 1466.29,684.952 1466.85,684.952 1467.41,684.952 1467.97,684.952 1468.52,684.952 1469.08,684.952 1469.64,684.952 1470.2,684.952 1470.76,684.952 1471.32,684.952 1471.88,684.952 1472.44,684.952 1473,684.952 1473.56,684.952 1474.12,684.952 1474.68,684.952 1475.24,684.952 1475.79,684.952 1476.35,684.952 1476.91,684.952 1477.47,684.952 1478.03,684.952 1478.59,684.952 1479.15,684.952 1479.71,684.952 1480.27,684.952 1480.83,684.952 1481.39,684.952 1481.95,684.952 1482.51,684.952 1483.07,684.952 1483.62,684.952 1484.18,684.952 1484.74,684.952 1485.3,684.952 1485.86,684.952 1486.42,684.952 1486.98,684.952 1487.54,684.952 1488.1,684.952 1488.66,684.952 1489.22,684.952 1489.78,684.952 1490.34,684.952 1490.89,684.952 1491.45,684.952 1492.01,684.952 1492.57,684.952 1493.13,684.952 1493.69,684.952 1494.25,684.952 1494.81,684.952 1495.37,684.952 1495.93,684.952 1496.49,684.952 1497.05,684.952 1497.61,684.952 1498.16,684.952 1498.72,684.952 1499.28,684.952 1499.84,684.952 1500.4,684.952 1500.96,684.952 1501.52,684.952 1502.08,684.952 1502.64,684.952 1503.2,684.952 1503.76,684.952 1504.32,684.952 1504.88,684.952 1505.44,684.952 1505.99,684.952 1506.55,684.952 1507.11,684.952 1507.67,684.952 1508.23,684.952 1508.79,684.952 1509.35,684.952 1509.91,684.952 1510.47,684.952 1511.03,684.952 1511.59,684.952 1512.15,684.952 1512.71,684.952 1513.26,684.952 1513.82,684.952 1514.38,684.952 1514.94,684.952 1515.5,684.952 1516.06,684.952 1516.62,684.952 1517.18,684.952 1517.74,684.952 1518.3,684.952 1518.86,684.952 1519.42,684.952 1519.98,684.952 1520.53,684.952 1521.09,684.952 1521.65,684.952 1522.21,684.952 1522.77,684.952 1523.33,684.952 1523.89,684.952 1524.45,684.952 1525.01,684.952 1525.57,684.952 1526.13,684.952 1526.69,684.952 1527.25,684.952 1527.81,684.952 1528.36,684.952 1528.92,684.952 1529.48,684.952 1530.04,684.952 1530.6,684.952 1531.16,684.952 1531.72,684.952 1532.28,684.952 1532.84,684.952 1533.4,684.952 1533.96,684.952 1534.52,684.952 1535.08,684.952 1535.63,684.952 1536.19,684.952 1536.75,684.952 1537.31,684.952 1537.87,684.952 1538.43,684.952 1538.99,684.952 1539.55,684.952 1540.11,684.952 1540.67,684.952 1541.23,684.952 1541.79,684.952 1542.35,684.952 1542.9,684.952 1543.46,684.952 1544.02,684.952 1544.58,684.952 1545.14,684.952 1545.7,684.952 1546.26,684.952 1546.82,684.952 1547.38,684.952 1547.94,684.952 1548.5,684.952 1549.06,684.952 1549.62,684.952 1550.18,684.952 1550.73,684.952 1551.29,684.952 1551.85,684.952 1552.41,684.952 1552.97,684.952 1553.53,684.952 1554.09,684.952 1554.65,684.952 1555.21,684.952 1555.77,684.952 1556.33,684.952 1556.89,684.952 1557.45,684.952 1558,684.952 1558.56,684.952 1559.12,684.952 1559.68,684.952 1560.24,684.952 1560.8,684.952 1561.36,684.952 1561.92,684.952 1562.48,684.952 1563.04,684.952 1563.6,684.952 1564.16,684.952 1564.72,684.952 1565.28,684.952 1565.83,684.952 1566.39,684.952 1566.95,684.952 1567.51,684.952 1568.07,684.952 1568.63,684.952 1569.19,684.952 1569.75,684.952 1570.31,684.952 1570.87,684.952 1571.43,684.952 1571.99,684.952 1572.55,684.952 1573.1,684.952 1573.66,684.952 1574.22,684.952 1574.78,684.952 1575.34,684.952 1575.9,684.952 1576.46,684.952 1577.02,684.952 1577.58,684.952 1578.14,684.952 1578.7,684.952 1579.26,684.952 1579.82,684.952 1580.37,684.952 1580.93,684.952 1581.49,684.952 1582.05,684.952 1582.61,684.952 1583.17,684.952 1583.73,684.952 1584.29,684.952 1584.85,684.952 1585.41,684.952 1585.97,684.952 1586.53,684.952 1587.09,684.952 1587.65,684.952 1588.2,684.952 1588.76,684.952 1589.32,684.952 1589.88,684.952 1590.44,684.952 1591,684.952 1591.56,684.952 1592.12,684.952 1592.68,684.952 1593.24,684.952 1593.8,684.952 1594.36,684.952 1594.92,684.952 1595.47,684.952 1596.03,684.952 1596.59,684.952 1597.15,684.952 1597.71,684.952 1598.27,684.952 1598.83,684.952 1599.39,684.952 1599.95,684.952 1600.51,684.952 1601.07,684.952 1601.63,684.952 1602.19,684.952 1602.74,684.952 1603.3,684.952 1603.86,684.952 1604.42,684.952 1604.98,684.952 1605.54,684.952 1606.1,684.952 1606.66,684.952 1607.22,684.952 1607.78,684.952 1608.34,684.952 1608.9,684.952 1609.46,684.952 1610.02,684.952 1610.57,684.952 1611.13,684.952 1611.69,684.952 1612.25,684.952 1612.81,684.952 1613.37,684.952 1613.93,684.952 1614.49,684.952 1615.05,684.952 1615.61,684.952 1616.17,684.952 1616.73,684.952 1617.29,684.952 1617.84,684.952 1618.4,684.952 1618.96,684.952 1619.52,684.952 1620.08,684.952 1620.64,684.952 1621.2,684.952 1621.76,684.952 1622.32,684.952 1622.88,684.952 1623.44,684.952 1624,684.952 1624.56,684.952 1625.11,684.952 1625.67,684.952 1626.23,684.952 1626.79,684.952 1627.35,684.952 1627.91,684.952 1628.47,684.952 1629.03,684.952 1629.59,684.952 1630.15,684.952 1630.71,684.952 1631.27,684.952 1631.83,684.952 1632.39,684.952 1632.94,684.952 1633.5,684.952 1634.06,684.952 1634.62,684.952 1635.18,684.952 1635.74,684.952 1636.3,684.952 1636.86,684.952 1637.42,684.952 1637.98,684.952 1638.54,684.952 1639.1,684.952 1639.66,684.952 1640.21,684.952 1640.77,684.952 1641.33,684.952 1641.89,684.952 1642.45,684.952 1643.01,684.952 1643.57,684.952 1644.13,684.952 1644.69,684.952 1645.25,684.952 1645.81,684.952 1646.37,684.952 1646.93,684.952 1647.48,684.952 1648.04,684.952 1648.6,684.952 1649.16,684.952 1649.72,684.952 1650.28,684.952 1650.84,684.952 1651.4,684.952 1651.96,684.952 1652.52,684.952 1653.08,684.952 1653.64,684.952 1654.2,684.952 1654.76,684.952 1655.31,684.952 1655.87,684.952 1656.43,684.952 1656.99,684.952 1657.55,684.952 1658.11,684.952 1658.67,684.952 1659.23,684.952 1659.79,684.952 1660.35,684.952 1660.91,684.952 1661.47,684.952 1662.03,684.952 1662.58,684.952 1663.14,684.952 1663.7,684.952 1664.26,684.952 1664.82,684.952 1665.38,684.952 1665.94,684.952 1666.5,684.952 1667.06,684.952 1667.62,684.952 1668.18,684.952 1668.74,684.952 1669.3,684.952 1669.85,684.952 1670.41,684.952 1670.97,684.952 1671.53,684.952 1672.09,684.952 1672.65,684.952 1673.21,684.952 1673.77,684.952 1674.33,684.952 1674.89,684.952 1675.45,684.952 1676.01,684.952 1676.57,684.952 1677.13,684.952 1677.68,684.952 1678.24,684.952 1678.8,684.952 1679.36,684.952 1679.92,684.952 1680.48,684.952 1681.04,684.952 1681.6,684.952 1682.16,684.952 1682.72,684.952 1683.28,684.952 1683.84,684.952 1684.4,684.952 1684.95,684.952 1685.51,684.952 1686.07,684.952 1686.63,684.952 1687.19,684.952 1687.75,684.952 1688.31,684.952 1688.87,684.952 1689.43,684.952 1689.99,684.952 1690.55,684.952 1691.11,684.952 1691.67,684.952 1692.23,684.952 1692.78,684.952 1693.34,684.952 1693.9,684.952 1694.46,684.952 1695.02,684.952 1695.58,684.952 1696.14,684.952 1696.7,684.952 1697.26,684.952 1697.82,684.952 1698.38,684.952 1698.94,684.952 1699.5,684.952 1700.05,684.952 1700.61,684.952 1701.17,684.952 1701.73,684.952 1702.29,684.952 1702.85,684.952 1703.41,684.952 1703.97,684.952 1704.53,684.952 1705.09,684.952 1705.65,684.952 1706.21,684.952 1706.77,684.952 1707.32,684.952 1707.88,684.952 1708.44,684.952 1709,684.952 1709.56,684.952 1710.12,684.952 1710.68,684.952 1711.24,684.952 1711.8,684.952 1712.36,684.952 1712.92,684.952 1713.48,684.952 1714.04,684.952 1714.6,684.952 1715.15,684.952 1715.71,684.952 1716.27,684.952 1716.83,684.952 1717.39,684.952 1717.95,684.952 1718.51,684.952 1719.07,684.952 1719.63,684.952 1720.19,684.952 1720.75,684.952 1721.31,684.952 1721.87,684.952 1722.42,684.952 1722.98,684.952 1723.54,684.952 1724.1,684.952 1724.66,684.952 1725.22,684.952 1725.78,684.952 1726.34,684.952 1726.9,684.952 1727.46,684.952 1728.02,684.952 1728.58,684.952 1729.14,684.952 1729.69,684.952 1730.25,684.952 1730.81,684.952 1731.37,684.952 1731.93,684.952 1732.49,684.952 1733.05,684.952 1733.61,684.952 1734.17,684.952 1734.73,684.952 1735.29,684.952 1735.85,684.952 1736.41,684.952 1736.97,684.952 1737.52,684.952 1738.08,684.952 1738.64,684.952 1739.2,684.952 1739.76,684.952 1740.32,684.952 1740.88,684.952 1741.44,684.952 1742,684.952 1742.56,684.952 1743.12,684.952 1743.68,684.952 1744.24,684.952 1744.79,684.952 1745.35,684.952 1745.91,684.952 1746.47,684.952 1747.03,684.952 1747.59,684.952 1748.15,684.952 1748.71,684.952 1749.27,684.952 1749.83,684.952 1750.39,684.952 1750.95,684.952 1751.51,684.952 1752.06,684.952 1752.62,684.952 1753.18,684.952 1753.74,684.952 1754.3,684.952 1754.86,684.952 1755.42,684.952 1755.98,684.952 1756.54,684.952 1757.1,684.952 1757.66,684.952 1758.22,684.952 1758.78,684.952 1759.34,684.952 1759.89,684.952 1760.45,684.952 1761.01,684.952 1761.57,684.952 1762.13,684.952 1762.69,684.952 1763.25,684.952 1763.81,684.952 1764.37,684.952 1764.93,684.952 1765.49,684.952 1766.05,684.952 1766.61,684.952 1767.16,684.952 1767.72,684.952 1768.28,684.952 1768.84,684.952 1769.4,684.952 1769.96,684.952 1770.52,684.952 1771.08,684.952 1771.64,684.952 1772.2,684.952 1772.76,684.952 1773.32,684.952 1773.88,684.952 1774.43,684.952 1774.99,684.952 1775.55,684.952 1776.11,684.952 1776.67,684.952 1777.23,684.952 1777.79,684.952 1778.35,684.952 1778.91,684.952 1779.47,684.952 1780.03,684.952 1780.59,684.952 1781.15,684.952 1781.71,684.952 1782.26,684.952 1782.82,684.952 1783.38,684.952 1783.94,684.952 1784.5,684.952 1785.06,684.952 1785.62,684.952 1786.18,684.952 1786.74,684.952 1787.3,684.952 1787.86,684.952 1788.42,684.952 1788.98,684.952 1789.53,684.952 1790.09,684.952 1790.65,684.952 1791.21,684.952 1791.77,684.952 1792.33,684.952 1792.89,684.952 1793.45,684.952 1794.01,684.952 1794.57,684.952 1795.13,684.952 1795.69,684.952 1796.25,684.952 1796.8,684.952 1797.36,684.952 1797.92,684.952 1798.48,684.952 1799.04,684.952 1799.6,684.952 1800.16,684.952 1800.72,684.952 1801.28,684.952 1801.84,684.952 1802.4,684.952 1802.96,684.952 1803.52,684.952 1804.08,684.952 1804.63,684.952 1805.19,684.952 1805.75,684.952 1806.31,684.952 1806.87,684.952 1807.43,684.952 1807.99,684.952 1808.55,684.952 1809.11,684.952 1809.67,684.952 1810.23,684.952 1810.79,684.952 1811.35,684.952 1811.9,684.952 1812.46,684.952 1813.02,684.952 1813.58,684.952 1814.14,684.952 1814.7,684.952 1815.26,684.952 1815.82,684.952 1816.38,684.952 1816.94,684.952 1817.5,684.952 1818.06,684.952 1818.62,684.952 1819.18,684.952 1819.73,684.952 1820.29,684.952 1820.85,684.952 1821.41,684.952 1821.97,684.952 1822.53,684.952 1823.09,684.952 1823.65,684.952 1824.21,684.952 1824.77,684.952 1825.33,684.952 1825.89,684.952 1826.45,684.952 1827,684.952 1827.56,684.952 1828.12,684.952 1828.68,684.952 1829.24,684.952 1829.8,684.952 1830.36,684.952 1830.92,684.952 1831.48,684.952 1832.04,684.952 1832.6,684.952 1833.16,684.952 1833.72,684.952 1834.27,684.952 1834.83,684.952 1835.39,684.952 1835.95,684.952 1836.51,684.952 1837.07,684.952 1837.63,684.952 1838.19,684.952 \"/>\n<path clip-path=\"url(#clip293)\" d=\"M720.247 684.402 L720.806 684.402 L721.365 684.402 L721.924 684.402 L722.484 684.402 L723.043 684.402 L723.602 684.402 L724.161 684.402 L724.721 684.402 L725.28 684.402 L725.839 684.402 L726.398 684.402 L726.958 684.402 L727.517 684.402 L728.076 684.402 L728.635 684.402 L729.195 684.402 L729.754 684.402 L730.313 684.402 L730.872 684.402 L731.432 684.402 L731.991 684.402 L732.55 684.402 L733.109 684.402 L733.669 684.402 L734.228 684.402 L734.787 684.402 L735.346 684.402 L735.906 684.402 L736.465 684.402 L737.024 684.402 L737.583 684.402 L738.143 684.402 L738.702 684.402 L739.261 684.402 L739.82 684.402 L740.38 684.402 L740.939 684.402 L741.498 684.402 L742.057 684.402 L742.617 684.402 L743.176 684.402 L743.735 684.402 L744.294 684.402 L744.854 684.402 L745.413 684.402 L745.972 684.402 L746.531 684.402 L747.091 684.402 L747.65 684.402 L748.209 684.402 L748.768 684.402 L749.328 684.402 L749.887 684.402 L750.446 684.402 L751.005 684.402 L751.565 684.402 L752.124 684.402 L752.683 684.402 L753.242 684.402 L753.802 684.402 L754.361 684.402 L754.92 684.402 L755.479 684.402 L756.039 684.402 L756.598 684.402 L757.157 684.402 L757.716 684.402 L758.276 684.402 L758.835 684.402 L759.394 684.402 L759.953 684.402 L760.513 684.402 L761.072 684.402 L761.631 684.402 L762.19 684.402 L762.75 684.402 L763.309 684.402 L763.868 684.402 L764.427 684.402 L764.987 684.402 L765.546 684.402 L766.105 684.402 L766.664 684.402 L767.224 684.402 L767.783 684.402 L768.342 684.402 L768.901 684.402 L769.461 684.402 L770.02 684.402 L770.579 684.402 L771.138 684.402 L771.698 684.402 L772.257 684.402 L772.816 684.402 L773.375 684.402 L773.935 684.402 L774.494 684.402 L775.053 684.402 L775.612 684.402 L776.172 684.402 L776.731 684.402 L777.29 684.402 L777.849 684.402 L778.409 684.402 L778.968 684.402 L779.527 684.402 L780.086 684.402 L780.646 684.402 L781.205 684.402 L781.764 684.402 L782.323 684.402 L782.883 684.402 L783.442 684.402 L784.001 684.402 L784.56 684.402 L785.12 684.402 L785.679 684.402 L786.238 684.402 L786.797 684.402 L787.357 684.402 L787.916 684.402 L788.475 684.402 L789.034 684.402 L789.594 684.402 L790.153 684.402 L790.712 684.402 L791.271 684.402 L791.831 684.402 L792.39 684.402 L792.949 684.402 L793.508 684.402 L794.068 684.402 L794.627 684.402 L795.186 684.402 L795.745 684.402 L796.305 684.402 L796.864 684.402 L797.423 684.402 L797.982 684.402 L798.542 684.402 L799.101 684.402 L799.66 684.402 L800.219 684.402 L800.779 684.402 L801.338 684.402 L801.897 684.402 L802.456 684.402 L803.016 684.402 L803.575 684.402 L804.134 684.402 L804.693 684.402 L805.253 684.402 L805.812 684.402 L806.371 684.402 L806.931 684.402 L807.49 684.402 L808.049 684.402 L808.608 684.402 L809.168 684.402 L809.727 684.402 L810.286 684.402 L810.845 684.402 L811.405 684.402 L811.964 684.402 L812.523 684.402 L813.082 684.402 L813.642 684.402 L814.201 684.402 L814.76 684.402 L815.319 684.402 L815.879 684.402 L816.438 684.402 L816.997 684.402 L817.556 684.402 L818.116 684.402 L818.675 684.402 L819.234 684.402 L819.793 684.402 L820.353 684.402 L820.912 684.402 L821.471 684.402 L822.03 684.402 L822.59 684.402 L823.149 684.402 L823.708 684.402 L824.267 684.402 L824.827 684.402 L825.386 684.402 L825.945 684.402 L826.504 684.402 L827.064 684.402 L827.623 684.402 L828.182 684.402 L828.741 684.402 L829.301 684.402 L829.86 684.402 L830.419 684.402 L830.978 684.402 L831.538 684.402 L832.097 684.402 L832.656 684.402 L833.215 684.402 L833.775 684.402 L834.334 684.402 L834.893 684.402 L835.452 684.402 L836.012 684.402 L836.571 684.402 L837.13 684.402 L837.689 684.402 L838.249 684.402 L838.808 684.402 L839.367 684.402 L839.926 684.402 L840.486 684.402 L841.045 684.402 L841.604 684.402 L842.163 684.402 L842.723 684.402 L843.282 684.402 L843.841 684.402 L844.4 684.402 L844.96 684.402 L845.519 684.402 L846.078 684.402 L846.637 684.402 L847.197 684.402 L847.756 684.402 L848.315 684.402 L848.874 684.402 L849.434 684.402 L849.993 684.402 L850.552 684.402 L851.111 684.402 L851.671 684.402 L852.23 684.402 L852.789 684.402 L853.348 684.402 L853.908 684.402 L854.467 684.402 L855.026 684.402 L855.585 684.402 L856.145 684.402 L856.704 684.402 L857.263 684.402 L857.822 684.402 L858.382 684.402 L858.941 684.402 L859.5 684.402 L860.059 684.402 L860.619 684.402 L861.178 684.402 L861.737 684.402 L862.296 684.402 L862.856 684.402 L863.415 684.402 L863.974 684.402 L864.533 684.402 L865.093 684.402 L865.652 684.402 L866.211 684.402 L866.77 684.402 L867.33 684.402 L867.889 684.402 L868.448 684.402 L869.007 684.402 L869.567 684.402 L870.126 684.402 L870.685 684.402 L871.244 684.402 L871.804 684.402 L872.363 684.402 L872.922 684.402 L873.481 684.402 L874.041 684.402 L874.6 684.402 L875.159 684.402 L875.718 684.402 L876.278 684.402 L876.837 684.402 L877.396 684.402 L877.955 684.402 L878.515 684.402 L879.074 684.402 L879.633 684.402 L880.192 684.402 L880.752 684.402 L881.311 684.402 L881.87 684.402 L882.429 684.402 L882.989 684.402 L883.548 684.402 L884.107 684.402 L884.666 684.402 L885.226 684.402 L885.785 684.402 L886.344 684.402 L886.903 684.402 L887.463 684.402 L888.022 684.402 L888.581 684.402 L889.14 684.402 L889.7 684.402 L890.259 684.402 L890.818 684.402 L891.377 684.402 L891.937 684.402 L892.496 684.402 L893.055 684.402 L893.614 684.402 L894.174 684.402 L894.733 684.402 L895.292 684.402 L895.851 684.402 L896.411 684.402 L896.97 684.402 L897.529 684.402 L898.088 684.402 L898.648 684.402 L899.207 684.402 L899.766 684.402 L900.325 684.402 L900.885 684.402 L901.444 684.402 L902.003 684.402 L902.562 684.402 L903.122 684.402 L903.681 684.402 L904.24 684.402 L904.799 684.402 L905.359 684.402 L905.918 684.402 L906.477 684.402 L907.036 684.402 L907.596 684.402 L908.155 684.402 L908.714 684.402 L909.273 684.402 L909.833 684.402 L910.392 684.402 L910.951 684.402 L911.51 684.402 L912.07 684.402 L912.629 684.402 L913.188 684.402 L913.747 684.402 L914.307 684.402 L914.866 684.402 L915.425 684.402 L915.984 684.402 L916.544 684.402 L917.103 684.402 L917.662 684.402 L918.221 684.402 L918.781 684.402 L919.34 684.402 L919.899 684.402 L920.458 684.402 L921.018 684.402 L921.577 684.402 L922.136 684.402 L922.695 684.402 L923.255 684.402 L923.814 684.402 L924.373 684.402 L924.932 684.402 L925.492 684.402 L926.051 684.402 L926.61 684.402 L927.169 684.402 L927.729 684.402 L928.288 684.402 L928.847 684.402 L929.406 684.402 L929.966 684.402 L930.525 684.402 L931.084 684.402 L931.644 684.402 L932.203 684.402 L932.762 684.402 L933.321 684.402 L933.881 684.402 L934.44 684.402 L934.999 684.402 L935.558 684.402 L936.118 684.402 L936.677 684.402 L937.236 684.402 L937.795 684.402 L938.355 684.402 L938.914 684.402 L939.473 684.402 L940.032 684.402 L940.592 684.402 L941.151 684.402 L941.71 684.402 L942.269 684.402 L942.829 684.402 L943.388 684.402 L943.947 684.402 L944.506 684.402 L945.066 684.402 L945.625 684.402 L946.184 684.402 L946.743 684.402 L947.303 684.402 L947.862 684.402 L948.421 684.402 L948.98 684.402 L949.54 684.402 L950.099 684.402 L950.658 684.402 L951.217 684.402 L951.777 684.402 L952.336 684.402 L952.895 684.402 L953.454 684.402 L954.014 684.402 L954.573 684.402 L955.132 684.402 L955.691 684.402 L956.251 684.402 L956.81 684.402 L957.369 684.402 L957.928 684.402 L958.488 684.402 L959.047 684.402 L959.606 684.402 L960.165 684.402 L960.725 684.402 L961.284 684.402 L961.843 684.402 L962.402 684.402 L962.962 684.402 L963.521 684.402 L964.08 684.402 L964.639 684.402 L965.199 684.402 L965.758 684.402 L966.317 684.402 L966.876 684.402 L967.436 684.402 L967.995 684.402 L968.554 684.402 L969.113 684.402 L969.673 684.402 L970.232 684.402 L970.791 684.402 L971.35 684.402 L971.91 684.402 L972.469 684.402 L973.028 684.402 L973.587 684.402 L974.147 684.402 L974.706 684.402 L975.265 684.402 L975.824 684.402 L976.384 684.402 L976.943 684.402 L977.502 684.402 L978.061 684.402 L978.621 684.402 L979.18 684.402 L979.739 684.402 L980.298 684.402 L980.858 684.402 L981.417 684.402 L981.976 684.402 L982.535 684.402 L983.095 684.402 L983.654 684.402 L984.213 684.402 L984.772 684.402 L985.332 684.402 L985.891 684.402 L986.45 684.402 L987.009 684.402 L987.569 684.402 L988.128 684.402 L988.687 684.402 L989.246 684.402 L989.806 684.402 L990.365 684.402 L990.924 684.402 L991.483 684.402 L992.043 684.402 L992.602 684.402 L993.161 684.402 L993.72 684.402 L994.28 684.402 L994.839 684.402 L995.398 684.402 L995.957 684.402 L996.517 684.402 L997.076 684.402 L997.635 684.402 L998.194 684.402 L998.754 684.402 L999.313 684.402 L999.872 684.402 L1000.43 684.402 L1000.99 684.402 L1001.55 684.402 L1002.11 684.402 L1002.67 684.402 L1003.23 684.402 L1003.79 684.402 L1004.35 684.402 L1004.91 684.402 L1005.46 684.402 L1006.02 684.402 L1006.58 684.402 L1007.14 684.402 L1007.7 684.402 L1008.26 684.402 L1008.82 684.402 L1009.38 684.402 L1009.94 684.402 L1010.5 684.402 L1011.06 684.402 L1011.62 684.402 L1012.18 684.402 L1012.73 684.402 L1013.29 684.402 L1013.85 684.402 L1014.41 684.402 L1014.97 684.402 L1015.53 684.402 L1016.09 684.402 L1016.65 684.402 L1017.21 684.402 L1017.77 684.402 L1018.33 684.402 L1018.89 684.402 L1019.45 684.402 L1020.01 684.402 L1020.56 684.402 L1021.12 684.402 L1021.68 684.402 L1022.24 684.402 L1022.8 684.402 L1023.36 684.402 L1023.92 684.402 L1024.48 684.402 L1025.04 684.402 L1025.6 684.402 L1026.16 684.402 L1026.72 684.402 L1027.28 684.402 L1027.83 684.402 L1028.39 684.402 L1028.95 684.402 L1029.51 684.402 L1030.07 684.402 L1030.63 684.402 L1031.19 684.402 L1031.75 684.402 L1032.31 684.402 L1032.87 684.402 L1033.43 684.402 L1033.99 684.402 L1034.55 684.402 L1035.1 684.402 L1035.66 684.402 L1036.22 684.402 L1036.78 684.402 L1037.34 684.402 L1037.9 684.402 L1038.46 684.402 L1039.02 684.402 L1039.58 684.402 L1040.14 684.402 L1040.7 684.402 L1041.26 684.402 L1041.82 684.402 L1042.38 684.402 L1042.93 684.402 L1043.49 684.402 L1044.05 684.402 L1044.61 684.402 L1045.17 684.402 L1045.73 684.402 L1046.29 684.402 L1046.85 684.402 L1047.41 684.402 L1047.97 684.402 L1048.53 684.402 L1049.09 684.402 L1049.65 684.402 L1050.2 684.402 L1050.76 684.402 L1051.32 684.402 L1051.88 684.402 L1052.44 684.402 L1053 684.402 L1053.56 684.402 L1054.12 684.402 L1054.68 684.402 L1055.24 684.402 L1055.8 684.402 L1056.36 684.402 L1056.92 684.402 L1057.48 684.402 L1058.03 684.402 L1058.59 684.402 L1059.15 684.402 L1059.71 684.402 L1060.27 684.402 L1060.83 684.402 L1061.39 684.402 L1061.95 684.402 L1062.51 684.402 L1063.07 684.402 L1063.63 684.402 L1064.19 684.402 L1064.75 684.402 L1065.3 684.402 L1065.86 684.402 L1066.42 684.402 L1066.98 684.402 L1067.54 684.402 L1068.1 684.402 L1068.66 684.402 L1069.22 684.402 L1069.78 684.402 L1070.34 684.402 L1070.9 684.402 L1071.46 684.402 L1072.02 684.402 L1072.57 684.402 L1073.13 684.402 L1073.69 684.402 L1074.25 684.402 L1074.81 684.402 L1075.37 684.402 L1075.93 684.402 L1076.49 684.402 L1077.05 684.402 L1077.61 684.402 L1078.17 684.402 L1078.73 684.402 L1079.29 684.402 L1079.85 684.402 L1080.4 684.402 L1080.96 684.402 L1081.52 684.402 L1082.08 684.402 L1082.64 684.402 L1083.2 684.402 L1083.76 684.402 L1084.32 684.402 L1084.88 684.402 L1085.44 684.402 L1086 684.402 L1086.56 684.402 L1087.12 684.402 L1087.67 684.402 L1088.23 684.402 L1088.79 684.402 L1089.35 684.402 L1089.91 684.402 L1090.47 684.402 L1091.03 684.402 L1091.59 684.402 L1092.15 684.402 L1092.71 684.402 L1093.27 684.402 L1093.83 684.402 L1094.39 684.402 L1094.94 684.402 L1095.5 684.402 L1096.06 684.402 L1096.62 684.402 L1097.18 684.402 L1097.74 684.402 L1098.3 684.402 L1098.86 684.402 L1099.42 684.402 L1099.98 684.402 L1100.54 684.402 L1101.1 684.402 L1101.66 684.402 L1102.22 684.402 L1102.77 684.402 L1103.33 684.402 L1103.89 684.402 L1104.45 684.402 L1105.01 684.402 L1105.57 684.402 L1106.13 684.402 L1106.69 684.402 L1107.25 684.402 L1107.81 684.402 L1108.37 684.402 L1108.93 684.402 L1109.49 684.402 L1110.04 684.402 L1110.6 684.402 L1111.16 684.402 L1111.72 684.402 L1112.28 684.402 L1112.84 684.402 L1113.4 684.402 L1113.96 684.402 L1114.52 684.402 L1115.08 684.402 L1115.64 684.402 L1116.2 684.402 L1116.76 684.402 L1117.31 684.402 L1117.87 684.402 L1118.43 684.402 L1118.99 684.402 L1119.55 684.402 L1120.11 684.402 L1120.67 684.402 L1121.23 684.402 L1121.79 684.402 L1122.35 684.402 L1122.91 684.402 L1123.47 684.402 L1124.03 684.402 L1124.59 684.402 L1125.14 684.402 L1125.7 684.402 L1126.26 684.402 L1126.82 684.402 L1127.38 684.402 L1127.94 684.402 L1128.5 684.402 L1129.06 684.402 L1129.62 684.402 L1130.18 684.402 L1130.74 684.402 L1131.3 684.402 L1131.86 684.402 L1132.41 684.402 L1132.97 684.402 L1133.53 684.402 L1134.09 684.402 L1134.65 684.402 L1135.21 684.402 L1135.77 684.402 L1136.33 684.402 L1136.89 684.402 L1137.45 684.402 L1138.01 684.402 L1138.57 684.402 L1139.13 684.402 L1139.68 684.402 L1140.24 684.402 L1140.8 684.402 L1141.36 684.402 L1141.92 684.402 L1142.48 684.402 L1143.04 684.402 L1143.6 684.402 L1144.16 684.402 L1144.72 684.402 L1145.28 684.402 L1145.84 684.402 L1146.4 684.402 L1146.96 684.402 L1147.51 684.402 L1148.07 684.402 L1148.63 684.402 L1149.19 684.402 L1149.75 684.402 L1150.31 684.402 L1150.87 684.402 L1151.43 684.402 L1151.99 684.402 L1152.55 684.402 L1153.11 684.402 L1153.67 684.402 L1154.23 684.402 L1154.78 684.402 L1155.34 684.402 L1155.9 684.402 L1156.46 684.402 L1157.02 684.402 L1157.58 684.402 L1158.14 684.402 L1158.7 684.402 L1159.26 684.402 L1159.82 684.402 L1160.38 684.402 L1160.94 684.402 L1161.5 684.402 L1162.05 684.402 L1162.61 684.402 L1163.17 684.402 L1163.73 684.402 L1164.29 684.402 L1164.85 684.402 L1165.41 684.402 L1165.97 684.402 L1166.53 684.402 L1167.09 684.402 L1167.65 684.402 L1168.21 684.402 L1168.77 684.402 L1169.33 684.402 L1169.88 684.402 L1170.44 684.402 L1171 684.402 L1171.56 684.402 L1172.12 684.402 L1172.68 684.402 L1173.24 684.402 L1173.8 684.402 L1174.36 684.402 L1174.92 684.402 L1175.48 684.402 L1176.04 684.402 L1176.6 684.402 L1177.15 684.402 L1177.71 684.402 L1178.27 684.402 L1178.83 684.402 L1179.39 684.402 L1179.95 684.402 L1180.51 684.402 L1181.07 684.402 L1181.63 684.402 L1182.19 684.402 L1182.75 684.402 L1183.31 684.402 L1183.87 684.402 L1184.43 684.402 L1184.98 684.402 L1185.54 684.402 L1186.1 684.402 L1186.66 684.402 L1187.22 684.402 L1187.78 684.402 L1188.34 684.402 L1188.9 684.402 L1189.46 684.402 L1190.02 684.402 L1190.58 684.402 L1191.14 684.402 L1191.7 684.402 L1192.25 684.402 L1192.81 684.402 L1193.37 684.402 L1193.93 684.402 L1194.49 684.402 L1195.05 684.402 L1195.61 684.402 L1196.17 684.402 L1196.73 684.402 L1197.29 684.402 L1197.85 684.402 L1198.41 684.402 L1198.97 684.402 L1199.52 684.402 L1200.08 684.402 L1200.64 684.402 L1201.2 684.402 L1201.76 684.402 L1202.32 684.402 L1202.88 684.402 L1203.44 684.402 L1204 684.402 L1204.56 684.402 L1205.12 684.402 L1205.68 684.402 L1206.24 684.402 L1206.8 684.402 L1207.35 684.402 L1207.91 684.402 L1208.47 684.402 L1209.03 684.402 L1209.59 684.402 L1210.15 684.402 L1210.71 684.402 L1211.27 684.402 L1211.83 684.402 L1212.39 684.402 L1212.95 684.402 L1213.51 684.402 L1214.07 684.402 L1214.62 684.402 L1215.18 684.402 L1215.74 684.402 L1216.3 684.402 L1216.86 684.402 L1217.42 684.402 L1217.98 684.402 L1218.54 684.402 L1219.1 684.402 L1219.66 684.402 L1220.22 684.402 L1220.78 684.402 L1221.34 684.402 L1221.89 684.402 L1222.45 684.402 L1223.01 684.402 L1223.57 684.402 L1224.13 684.402 L1224.69 684.402 L1225.25 684.402 L1225.81 684.402 L1226.37 684.402 L1226.93 684.402 L1227.49 684.402 L1228.05 684.402 L1228.61 684.402 L1229.17 684.402 L1229.72 684.402 L1230.28 684.402 L1230.84 684.402 L1231.4 684.402 L1231.96 684.402 L1232.52 684.402 L1233.08 684.402 L1233.64 684.402 L1234.2 684.402 L1234.76 684.402 L1235.32 684.402 L1235.88 684.402 L1236.44 684.402 L1236.99 684.402 L1237.55 684.402 L1238.11 684.402 L1238.67 684.402 L1239.23 684.402 L1239.79 684.402 L1240.35 684.402 L1240.91 684.402 L1241.47 684.402 L1242.03 684.402 L1242.59 684.402 L1243.15 684.402 L1243.71 684.402 L1244.26 684.402 L1244.82 684.402 L1245.38 684.402 L1245.94 684.402 L1246.5 684.402 L1247.06 684.402 L1247.62 684.402 L1248.18 684.402 L1248.74 684.402 L1249.3 684.402 L1249.86 684.402 L1250.42 684.402 L1250.98 684.402 L1251.54 684.402 L1252.09 684.402 L1252.65 684.402 L1253.21 684.402 L1253.77 684.402 L1254.33 684.402 L1254.89 684.402 L1255.45 684.402 L1256.01 684.402 L1256.57 684.402 L1257.13 684.402 L1257.69 684.402 L1258.25 684.402 L1258.81 684.402 L1259.36 684.402 L1259.92 684.402 L1260.48 684.402 L1261.04 684.402 L1261.6 684.402 L1262.16 684.402 L1262.72 684.402 L1263.28 684.402 L1263.84 684.402 L1264.4 684.402 L1264.96 684.402 L1265.52 684.402 L1266.08 684.402 L1266.63 684.402 L1267.19 684.402 L1267.75 684.402 L1268.31 684.402 L1268.87 684.402 L1269.43 684.402 L1269.99 684.402 L1270.55 684.402 L1271.11 684.402 L1271.67 684.402 L1272.23 684.402 L1272.79 684.402 L1273.35 684.402 L1273.91 684.402 L1274.46 684.402 L1275.02 684.402 L1275.58 684.402 L1276.14 684.402 L1276.7 684.402 L1277.26 684.402 L1277.82 684.402 L1278.38 684.402 L1278.94 684.402 L1279.5 684.402 L1280.06 684.402 L1280.62 684.402 L1281.18 684.402 L1281.73 684.402 L1282.29 684.402 L1282.85 684.402 L1283.41 684.402 L1283.97 684.402 L1284.53 684.402 L1285.09 684.402 L1285.65 684.402 L1286.21 684.402 L1286.77 684.402 L1287.33 684.402 L1287.89 684.402 L1288.45 684.402 L1289 684.402 L1289.56 684.402 L1290.12 684.402 L1290.68 684.402 L1291.24 684.402 L1291.8 684.402 L1292.36 684.402 L1292.92 684.402 L1293.48 684.402 L1294.04 684.402 L1294.6 684.402 L1295.16 684.402 L1295.72 684.402 L1296.28 684.402 L1296.83 684.402 L1297.39 684.402 L1297.95 684.402 L1298.51 684.402 L1299.07 684.402 L1299.63 684.402 L1300.19 684.402 L1300.75 684.402 L1301.31 684.402 L1301.87 684.402 L1302.43 684.402 L1302.99 684.402 L1303.55 684.402 L1304.1 684.402 L1304.66 684.402 L1305.22 684.402 L1305.78 684.402 L1306.34 684.402 L1306.9 684.402 L1307.46 684.402 L1308.02 684.402 L1308.58 684.402 L1309.14 684.402 L1309.7 684.402 L1310.26 684.402 L1310.82 684.402 L1311.38 684.402 L1311.93 684.402 L1312.49 684.402 L1313.05 684.402 L1313.61 684.402 L1314.17 684.402 L1314.73 684.402 L1315.29 684.402 L1315.85 684.402 L1316.41 684.402 L1316.97 684.402 L1317.53 684.402 L1318.09 684.402 L1318.65 684.402 L1319.2 684.402 L1319.76 684.402 L1320.32 684.402 L1320.88 684.402 L1321.44 684.402 L1322 684.402 L1322.56 684.402 L1323.12 684.402 L1323.68 684.402 L1324.24 684.402 L1324.8 684.402 L1325.36 684.402 L1325.92 684.402 L1326.47 684.402 L1327.03 684.402 L1327.59 684.402 L1328.15 684.402 L1328.71 684.402 L1329.27 684.402 L1329.83 684.402 L1330.39 684.402 L1330.95 684.402 L1331.51 684.402 L1332.07 684.402 L1332.63 684.402 L1333.19 684.402 L1333.75 684.402 L1334.3 684.402 L1334.86 684.402 L1335.42 684.402 L1335.98 684.402 L1336.54 684.402 L1337.1 684.402 L1337.66 684.402 L1338.22 684.402 L1338.78 684.402 L1339.34 684.402 L1339.9 684.402 L1340.46 684.402 L1341.02 684.402 L1341.57 684.402 L1342.13 684.402 L1342.69 684.402 L1343.25 684.402 L1343.81 684.402 L1344.37 684.402 L1344.93 684.402 L1345.49 684.402 L1346.05 684.402 L1346.61 684.402 L1347.17 684.402 L1347.73 684.402 L1348.29 684.402 L1348.84 684.402 L1349.4 684.402 L1349.96 684.402 L1350.52 684.402 L1351.08 684.402 L1351.64 684.402 L1352.2 684.402 L1352.76 684.402 L1353.32 684.402 L1353.88 684.402 L1354.44 684.402 L1355 684.402 L1355.56 684.402 L1356.12 684.402 L1356.67 684.402 L1357.23 684.402 L1357.79 684.402 L1358.35 684.402 L1358.91 684.402 L1359.47 684.402 L1360.03 684.402 L1360.59 684.402 L1361.15 684.402 L1361.71 684.402 L1362.27 684.402 L1362.83 684.402 L1363.39 684.402 L1363.94 684.402 L1364.5 684.402 L1365.06 684.402 L1365.62 684.402 L1366.18 684.402 L1366.74 684.402 L1367.3 684.402 L1367.86 684.402 L1368.42 684.402 L1368.98 684.402 L1369.54 684.402 L1370.1 684.402 L1370.66 684.402 L1371.21 684.402 L1371.77 684.402 L1372.33 684.402 L1372.89 684.402 L1373.45 684.402 L1374.01 684.402 L1374.57 684.402 L1375.13 684.402 L1375.69 684.402 L1376.25 684.402 L1376.81 684.402 L1377.37 684.402 L1377.93 684.402 L1378.49 684.402 L1379.04 684.402 L1379.6 684.402 L1380.16 684.402 L1380.72 684.402 L1381.28 684.402 L1381.84 684.402 L1382.4 684.402 L1382.96 684.402 L1383.52 684.402 L1384.08 684.402 L1384.64 684.402 L1385.2 684.402 L1385.76 684.402 L1386.31 684.402 L1386.87 684.402 L1387.43 684.402 L1387.99 684.402 L1388.55 684.402 L1389.11 684.402 L1389.67 684.402 L1390.23 684.402 L1390.79 684.402 L1391.35 684.402 L1391.91 684.402 L1392.47 684.402 L1393.03 684.402 L1393.58 684.402 L1394.14 684.402 L1394.7 684.402 L1395.26 684.402 L1395.82 684.402 L1396.38 684.402 L1396.94 684.402 L1397.5 684.402 L1398.06 684.402 L1398.62 684.402 L1399.18 684.402 L1399.74 684.402 L1400.3 684.402 L1400.86 684.402 L1401.41 684.402 L1401.97 684.402 L1402.53 684.402 L1403.09 684.402 L1403.65 684.402 L1404.21 684.402 L1404.77 684.402 L1405.33 684.402 L1405.89 684.402 L1406.45 684.402 L1407.01 684.402 L1407.57 684.402 L1408.13 684.402 L1408.68 684.402 L1409.24 684.402 L1409.8 684.402 L1410.36 684.402 L1410.92 684.402 L1411.48 684.402 L1412.04 684.402 L1412.6 684.402 L1413.16 684.402 L1413.72 684.402 L1414.28 684.402 L1414.84 684.402 L1415.4 684.402 L1415.95 684.402 L1416.51 684.402 L1417.07 684.402 L1417.63 684.402 L1418.19 684.402 L1418.75 684.402 L1419.31 684.402 L1419.87 684.402 L1420.43 684.402 L1420.99 684.402 L1421.55 684.402 L1422.11 684.402 L1422.67 684.402 L1423.23 684.402 L1423.78 684.402 L1424.34 684.402 L1424.9 684.402 L1425.46 684.402 L1426.02 684.402 L1426.58 684.402 L1427.14 684.402 L1427.7 684.402 L1428.26 684.402 L1428.82 684.402 L1429.38 684.402 L1429.94 684.402 L1430.5 684.402 L1431.05 684.402 L1431.61 684.402 L1432.17 684.402 L1432.73 684.402 L1433.29 684.402 L1433.85 684.402 L1434.41 684.402 L1434.97 684.402 L1435.53 684.402 L1436.09 684.402 L1436.65 684.402 L1437.21 684.402 L1437.77 684.402 L1438.33 684.402 L1438.88 684.402 L1439.44 684.402 L1440 684.402 L1440.56 684.402 L1441.12 684.402 L1441.68 684.402 L1442.24 684.402 L1442.8 684.402 L1443.36 684.402 L1443.92 684.402 L1444.48 684.402 L1445.04 684.402 L1445.6 684.402 L1446.15 684.402 L1446.71 684.402 L1447.27 684.402 L1447.83 684.402 L1448.39 684.402 L1448.95 684.402 L1449.51 684.402 L1450.07 684.402 L1450.63 684.402 L1451.19 684.402 L1451.75 684.402 L1452.31 684.402 L1452.87 684.402 L1453.42 684.402 L1453.98 684.402 L1454.54 684.402 L1455.1 684.402 L1455.66 684.402 L1456.22 684.402 L1456.78 684.402 L1457.34 684.402 L1457.9 684.402 L1458.46 684.402 L1459.02 684.402 L1459.58 684.402 L1460.14 684.402 L1460.7 684.402 L1461.25 684.402 L1461.81 684.402 L1462.37 684.402 L1462.93 684.402 L1463.49 684.402 L1464.05 684.402 L1464.61 684.402 L1465.17 684.402 L1465.73 684.402 L1466.29 684.402 L1466.85 684.402 L1467.41 684.402 L1467.97 684.402 L1468.52 684.402 L1469.08 684.402 L1469.64 684.402 L1470.2 684.402 L1470.76 684.402 L1471.32 684.402 L1471.88 684.402 L1472.44 684.402 L1473 684.402 L1473.56 684.402 L1474.12 684.402 L1474.68 684.402 L1475.24 684.402 L1475.79 684.402 L1476.35 684.402 L1476.91 684.402 L1477.47 684.402 L1478.03 684.402 L1478.59 684.402 L1479.15 684.402 L1479.71 684.402 L1480.27 684.402 L1480.83 684.402 L1481.39 684.402 L1481.95 684.402 L1482.51 684.402 L1483.07 684.402 L1483.62 684.402 L1484.18 684.402 L1484.74 684.402 L1485.3 684.402 L1485.86 684.402 L1486.42 684.402 L1486.98 684.402 L1487.54 684.402 L1488.1 684.402 L1488.66 684.402 L1489.22 684.402 L1489.78 684.402 L1490.34 684.402 L1490.89 684.402 L1491.45 684.402 L1492.01 684.402 L1492.57 684.402 L1493.13 684.402 L1493.69 684.402 L1494.25 684.402 L1494.81 684.402 L1495.37 684.402 L1495.93 684.402 L1496.49 684.402 L1497.05 684.402 L1497.61 684.402 L1498.16 684.402 L1498.72 684.402 L1499.28 684.402 L1499.84 684.402 L1500.4 684.402 L1500.96 684.402 L1501.52 684.402 L1502.08 684.402 L1502.64 684.402 L1503.2 684.402 L1503.76 684.402 L1504.32 684.402 L1504.88 684.402 L1505.44 684.402 L1505.99 684.402 L1506.55 684.402 L1507.11 684.402 L1507.67 684.402 L1508.23 684.402 L1508.79 684.402 L1509.35 684.402 L1509.91 684.402 L1510.47 684.402 L1511.03 684.402 L1511.59 684.402 L1512.15 684.402 L1512.71 684.402 L1513.26 684.402 L1513.82 684.402 L1514.38 684.402 L1514.94 684.402 L1515.5 684.402 L1516.06 684.402 L1516.62 684.402 L1517.18 684.402 L1517.74 684.402 L1518.3 684.402 L1518.86 684.402 L1519.42 684.402 L1519.98 684.402 L1520.53 684.402 L1521.09 684.402 L1521.65 684.402 L1522.21 684.402 L1522.77 684.402 L1523.33 684.402 L1523.89 684.402 L1524.45 684.402 L1525.01 684.402 L1525.57 684.402 L1526.13 684.402 L1526.69 684.402 L1527.25 684.402 L1527.81 684.402 L1528.36 684.402 L1528.92 684.402 L1529.48 684.402 L1530.04 684.402 L1530.6 684.402 L1531.16 684.402 L1531.72 684.402 L1532.28 684.402 L1532.84 684.402 L1533.4 684.402 L1533.96 684.402 L1534.52 684.402 L1535.08 684.402 L1535.63 684.402 L1536.19 684.402 L1536.75 684.402 L1537.31 684.402 L1537.87 684.402 L1538.43 684.402 L1538.99 684.402 L1539.55 684.402 L1540.11 684.402 L1540.67 684.402 L1541.23 684.402 L1541.79 684.402 L1542.35 684.402 L1542.9 684.402 L1543.46 684.402 L1544.02 684.402 L1544.58 684.402 L1545.14 684.402 L1545.7 684.402 L1546.26 684.402 L1546.82 684.402 L1547.38 684.402 L1547.94 684.402 L1548.5 684.402 L1549.06 684.402 L1549.62 684.402 L1550.18 684.402 L1550.73 684.402 L1551.29 684.402 L1551.85 684.402 L1552.41 684.402 L1552.97 684.402 L1553.53 684.402 L1554.09 684.402 L1554.65 684.402 L1555.21 684.402 L1555.77 684.402 L1556.33 684.402 L1556.89 684.402 L1557.45 684.402 L1558 684.402 L1558.56 684.402 L1559.12 684.402 L1559.68 684.402 L1560.24 684.402 L1560.8 684.402 L1561.36 684.402 L1561.92 684.402 L1562.48 684.402 L1563.04 684.402 L1563.6 684.402 L1564.16 684.402 L1564.72 684.402 L1565.28 684.402 L1565.83 684.402 L1566.39 684.402 L1566.95 684.402 L1567.51 684.402 L1568.07 684.402 L1568.63 684.402 L1569.19 684.402 L1569.75 684.402 L1570.31 684.402 L1570.87 684.402 L1571.43 684.402 L1571.99 684.402 L1572.55 684.402 L1573.1 684.402 L1573.66 684.402 L1574.22 684.402 L1574.78 684.402 L1575.34 684.402 L1575.9 684.402 L1576.46 684.402 L1577.02 684.402 L1577.58 684.402 L1578.14 684.402 L1578.7 684.402 L1579.26 684.402 L1579.82 684.402 L1580.37 684.402 L1580.93 684.402 L1581.49 684.402 L1582.05 684.402 L1582.61 684.402 L1583.17 684.402 L1583.73 684.402 L1584.29 684.402 L1584.85 684.402 L1585.41 684.402 L1585.97 684.402 L1586.53 684.402 L1587.09 684.402 L1587.65 684.402 L1588.2 684.402 L1588.76 684.402 L1589.32 684.402 L1589.88 684.402 L1590.44 684.402 L1591 684.402 L1591.56 684.402 L1592.12 684.402 L1592.68 684.402 L1593.24 684.402 L1593.8 684.402 L1594.36 684.402 L1594.92 684.402 L1595.47 684.402 L1596.03 684.402 L1596.59 684.402 L1597.15 684.402 L1597.71 684.402 L1598.27 684.402 L1598.83 684.402 L1599.39 684.402 L1599.95 684.402 L1600.51 684.402 L1601.07 684.402 L1601.63 684.402 L1602.19 684.402 L1602.74 684.402 L1603.3 684.402 L1603.86 684.402 L1604.42 684.402 L1604.98 684.402 L1605.54 684.402 L1606.1 684.402 L1606.66 684.402 L1607.22 684.402 L1607.78 684.402 L1608.34 684.402 L1608.9 684.402 L1609.46 684.402 L1610.02 684.402 L1610.57 684.402 L1611.13 684.402 L1611.69 684.402 L1612.25 684.402 L1612.81 684.402 L1613.37 684.402 L1613.93 684.402 L1614.49 684.402 L1615.05 684.402 L1615.61 684.402 L1616.17 684.402 L1616.73 684.402 L1617.29 684.402 L1617.84 684.402 L1618.4 684.402 L1618.96 684.402 L1619.52 684.402 L1620.08 684.402 L1620.64 684.402 L1621.2 684.402 L1621.76 684.402 L1622.32 684.402 L1622.88 684.402 L1623.44 684.402 L1624 684.402 L1624.56 684.402 L1625.11 684.402 L1625.67 684.402 L1626.23 684.402 L1626.79 684.402 L1627.35 684.402 L1627.91 684.402 L1628.47 684.402 L1629.03 684.402 L1629.59 684.402 L1630.15 684.402 L1630.71 684.402 L1631.27 684.402 L1631.83 684.402 L1632.39 684.402 L1632.94 684.402 L1633.5 684.402 L1634.06 684.402 L1634.62 684.402 L1635.18 684.402 L1635.74 684.402 L1636.3 684.402 L1636.86 684.402 L1637.42 684.402 L1637.98 684.402 L1638.54 684.402 L1639.1 684.402 L1639.66 684.402 L1640.21 684.402 L1640.77 684.402 L1641.33 684.402 L1641.89 684.402 L1642.45 684.402 L1643.01 684.402 L1643.57 684.402 L1644.13 684.402 L1644.69 684.402 L1645.25 684.402 L1645.81 684.402 L1646.37 684.402 L1646.93 684.402 L1647.48 684.402 L1648.04 684.402 L1648.6 684.402 L1649.16 684.402 L1649.72 684.402 L1650.28 684.402 L1650.84 684.402 L1651.4 684.402 L1651.96 684.402 L1652.52 684.402 L1653.08 684.402 L1653.64 684.402 L1654.2 684.402 L1654.76 684.402 L1655.31 684.402 L1655.87 684.402 L1656.43 684.402 L1656.99 684.402 L1657.55 684.402 L1658.11 684.402 L1658.67 684.402 L1659.23 684.402 L1659.79 684.402 L1660.35 684.402 L1660.91 684.402 L1661.47 684.402 L1662.03 684.402 L1662.58 684.402 L1663.14 684.402 L1663.7 684.402 L1664.26 684.402 L1664.82 684.402 L1665.38 684.402 L1665.94 684.402 L1666.5 684.402 L1667.06 684.402 L1667.62 684.402 L1668.18 684.402 L1668.74 684.402 L1669.3 684.402 L1669.85 684.402 L1670.41 684.402 L1670.97 684.402 L1671.53 684.402 L1672.09 684.402 L1672.65 684.402 L1673.21 684.402 L1673.77 684.402 L1674.33 684.402 L1674.89 684.402 L1675.45 684.402 L1676.01 684.402 L1676.57 684.402 L1677.13 684.402 L1677.68 684.402 L1678.24 684.402 L1678.8 684.402 L1679.36 684.402 L1679.92 684.402 L1680.48 684.402 L1681.04 684.402 L1681.6 684.402 L1682.16 684.402 L1682.72 684.402 L1683.28 684.402 L1683.84 684.402 L1684.4 684.402 L1684.95 684.402 L1685.51 684.402 L1686.07 684.402 L1686.63 684.402 L1687.19 684.402 L1687.75 684.402 L1688.31 684.402 L1688.87 684.402 L1689.43 684.402 L1689.99 684.402 L1690.55 684.402 L1691.11 684.402 L1691.67 684.402 L1692.23 684.402 L1692.78 684.402 L1693.34 684.402 L1693.9 684.402 L1694.46 684.402 L1695.02 684.402 L1695.58 684.402 L1696.14 684.402 L1696.7 684.402 L1697.26 684.402 L1697.82 684.402 L1698.38 684.402 L1698.94 684.402 L1699.5 684.402 L1700.05 684.402 L1700.61 684.402 L1701.17 684.402 L1701.73 684.402 L1702.29 684.402 L1702.85 684.402 L1703.41 684.402 L1703.97 684.402 L1704.53 684.402 L1705.09 684.402 L1705.65 684.402 L1706.21 684.402 L1706.77 684.402 L1707.32 684.402 L1707.88 684.402 L1708.44 684.402 L1709 684.402 L1709.56 684.402 L1710.12 684.402 L1710.68 684.402 L1711.24 684.402 L1711.8 684.402 L1712.36 684.402 L1712.92 684.402 L1713.48 684.402 L1714.04 684.402 L1714.6 684.402 L1715.15 684.402 L1715.71 684.402 L1716.27 684.402 L1716.83 684.402 L1717.39 684.402 L1717.95 684.402 L1718.51 684.402 L1719.07 684.402 L1719.63 684.402 L1720.19 684.402 L1720.75 684.402 L1721.31 684.402 L1721.87 684.402 L1722.42 684.402 L1722.98 684.402 L1723.54 684.402 L1724.1 684.402 L1724.66 684.402 L1725.22 684.402 L1725.78 684.402 L1726.34 684.402 L1726.9 684.402 L1727.46 684.402 L1728.02 684.402 L1728.58 684.402 L1729.14 684.402 L1729.69 684.402 L1730.25 684.402 L1730.81 684.402 L1731.37 684.402 L1731.93 684.402 L1732.49 684.402 L1733.05 684.402 L1733.61 684.402 L1734.17 684.402 L1734.73 684.402 L1735.29 684.402 L1735.85 684.402 L1736.41 684.402 L1736.97 684.402 L1737.52 684.402 L1738.08 684.402 L1738.64 684.402 L1739.2 684.402 L1739.76 684.402 L1740.32 684.402 L1740.88 684.402 L1741.44 684.402 L1742 684.402 L1742.56 684.402 L1743.12 684.402 L1743.68 684.402 L1744.24 684.402 L1744.79 684.402 L1745.35 684.402 L1745.91 684.402 L1746.47 684.402 L1747.03 684.402 L1747.59 684.402 L1748.15 684.402 L1748.71 684.402 L1749.27 684.402 L1749.83 684.402 L1750.39 684.402 L1750.95 684.402 L1751.51 684.402 L1752.06 684.402 L1752.62 684.402 L1753.18 684.402 L1753.74 684.402 L1754.3 684.402 L1754.86 684.402 L1755.42 684.402 L1755.98 684.402 L1756.54 684.402 L1757.1 684.402 L1757.66 684.402 L1758.22 684.402 L1758.78 684.402 L1759.34 684.402 L1759.89 684.402 L1760.45 684.402 L1761.01 684.402 L1761.57 684.402 L1762.13 684.402 L1762.69 684.402 L1763.25 684.402 L1763.81 684.402 L1764.37 684.402 L1764.93 684.402 L1765.49 684.402 L1766.05 684.402 L1766.61 684.402 L1767.16 684.402 L1767.72 684.402 L1768.28 684.402 L1768.84 684.402 L1769.4 684.402 L1769.96 684.402 L1770.52 684.402 L1771.08 684.402 L1771.64 684.402 L1772.2 684.402 L1772.76 684.402 L1773.32 684.402 L1773.88 684.402 L1774.43 684.402 L1774.99 684.402 L1775.55 684.402 L1776.11 684.402 L1776.67 684.402 L1777.23 684.402 L1777.79 684.402 L1778.35 684.402 L1778.91 684.402 L1779.47 684.402 L1780.03 684.402 L1780.59 684.402 L1781.15 684.402 L1781.71 684.402 L1782.26 684.402 L1782.82 684.402 L1783.38 684.402 L1783.94 684.402 L1784.5 684.402 L1785.06 684.402 L1785.62 684.402 L1786.18 684.402 L1786.74 684.402 L1787.3 684.402 L1787.86 684.402 L1788.42 684.402 L1788.98 684.402 L1789.53 684.402 L1790.09 684.402 L1790.65 684.402 L1791.21 684.402 L1791.77 684.402 L1792.33 684.402 L1792.89 684.402 L1793.45 684.402 L1794.01 684.402 L1794.57 684.402 L1795.13 684.402 L1795.69 684.402 L1796.25 684.402 L1796.8 684.402 L1797.36 684.402 L1797.92 684.402 L1798.48 684.402 L1799.04 684.402 L1799.6 684.402 L1800.16 684.402 L1800.72 684.402 L1801.28 684.402 L1801.84 684.402 L1802.4 684.402 L1802.96 684.402 L1803.52 684.402 L1804.08 684.402 L1804.63 684.402 L1805.19 684.402 L1805.75 684.402 L1806.31 684.402 L1806.87 684.402 L1807.43 684.402 L1807.99 684.402 L1808.55 684.402 L1809.11 684.402 L1809.67 684.402 L1810.23 684.402 L1810.79 684.402 L1811.35 684.402 L1811.9 684.402 L1812.46 684.402 L1813.02 684.402 L1813.58 684.402 L1814.14 684.402 L1814.7 684.402 L1815.26 684.402 L1815.82 684.402 L1816.38 684.402 L1816.94 684.402 L1817.5 684.402 L1818.06 684.402 L1818.62 684.402 L1819.18 684.402 L1819.73 684.402 L1820.29 684.402 L1820.85 684.402 L1821.41 684.402 L1821.97 684.402 L1822.53 684.402 L1823.09 684.402 L1823.65 684.402 L1824.21 684.402 L1824.77 684.402 L1825.33 684.402 L1825.89 684.402 L1826.45 684.402 L1827 684.402 L1827.56 684.402 L1828.12 684.402 L1828.68 684.402 L1829.24 684.402 L1829.8 684.402 L1830.36 684.402 L1830.92 684.402 L1831.48 684.402 L1832.04 684.402 L1832.6 684.402 L1833.16 684.402 L1833.72 684.402 L1834.27 684.402 L1834.83 684.402 L1835.39 684.402 L1835.95 684.402 L1836.51 684.402 L1837.07 684.402 L1837.63 684.402 L1838.19 684.402 L1838.19 682.553 L1837.63 682.553 L1837.07 682.553 L1836.51 682.553 L1835.95 682.553 L1835.39 682.553 L1834.83 682.553 L1834.27 682.553 L1833.72 682.553 L1833.16 682.553 L1832.6 682.553 L1832.04 682.553 L1831.48 682.553 L1830.92 682.553 L1830.36 682.553 L1829.8 682.553 L1829.24 682.553 L1828.68 682.553 L1828.12 682.553 L1827.56 682.553 L1827 682.553 L1826.45 682.553 L1825.89 682.553 L1825.33 682.553 L1824.77 682.553 L1824.21 682.553 L1823.65 682.553 L1823.09 682.553 L1822.53 682.553 L1821.97 682.553 L1821.41 682.553 L1820.85 682.553 L1820.29 682.553 L1819.73 682.553 L1819.18 682.553 L1818.62 682.553 L1818.06 682.553 L1817.5 682.553 L1816.94 682.553 L1816.38 682.553 L1815.82 682.553 L1815.26 682.553 L1814.7 682.553 L1814.14 682.553 L1813.58 682.553 L1813.02 682.553 L1812.46 682.553 L1811.9 682.553 L1811.35 682.553 L1810.79 682.553 L1810.23 682.553 L1809.67 682.553 L1809.11 682.553 L1808.55 682.553 L1807.99 682.553 L1807.43 682.553 L1806.87 682.553 L1806.31 682.553 L1805.75 682.553 L1805.19 682.553 L1804.63 682.553 L1804.08 682.553 L1803.52 682.553 L1802.96 682.553 L1802.4 682.553 L1801.84 682.553 L1801.28 682.553 L1800.72 682.553 L1800.16 682.553 L1799.6 682.553 L1799.04 682.553 L1798.48 682.553 L1797.92 682.553 L1797.36 682.553 L1796.8 682.553 L1796.25 682.553 L1795.69 682.553 L1795.13 682.553 L1794.57 682.553 L1794.01 682.553 L1793.45 682.553 L1792.89 682.553 L1792.33 682.553 L1791.77 682.553 L1791.21 682.553 L1790.65 682.553 L1790.09 682.553 L1789.53 682.553 L1788.98 682.553 L1788.42 682.553 L1787.86 682.553 L1787.3 682.553 L1786.74 682.553 L1786.18 682.553 L1785.62 682.553 L1785.06 682.553 L1784.5 682.553 L1783.94 682.553 L1783.38 682.553 L1782.82 682.553 L1782.26 682.553 L1781.71 682.553 L1781.15 682.553 L1780.59 682.553 L1780.03 682.553 L1779.47 682.553 L1778.91 682.553 L1778.35 682.553 L1777.79 682.553 L1777.23 682.553 L1776.67 682.553 L1776.11 682.553 L1775.55 682.553 L1774.99 682.553 L1774.43 682.553 L1773.88 682.553 L1773.32 682.553 L1772.76 682.553 L1772.2 682.553 L1771.64 682.553 L1771.08 682.553 L1770.52 682.553 L1769.96 682.553 L1769.4 682.553 L1768.84 682.553 L1768.28 682.553 L1767.72 682.553 L1767.16 682.553 L1766.61 682.553 L1766.05 682.553 L1765.49 682.553 L1764.93 682.553 L1764.37 682.553 L1763.81 682.553 L1763.25 682.553 L1762.69 682.553 L1762.13 682.553 L1761.57 682.553 L1761.01 682.553 L1760.45 682.553 L1759.89 682.553 L1759.34 682.553 L1758.78 682.553 L1758.22 682.553 L1757.66 682.553 L1757.1 682.553 L1756.54 682.553 L1755.98 682.553 L1755.42 682.553 L1754.86 682.553 L1754.3 682.553 L1753.74 682.553 L1753.18 682.553 L1752.62 682.553 L1752.06 682.553 L1751.51 682.553 L1750.95 682.553 L1750.39 682.553 L1749.83 682.553 L1749.27 682.553 L1748.71 682.553 L1748.15 682.553 L1747.59 682.553 L1747.03 682.553 L1746.47 682.553 L1745.91 682.553 L1745.35 682.553 L1744.79 682.553 L1744.24 682.553 L1743.68 682.553 L1743.12 682.553 L1742.56 682.553 L1742 682.553 L1741.44 682.553 L1740.88 682.553 L1740.32 682.553 L1739.76 682.553 L1739.2 682.553 L1738.64 682.553 L1738.08 682.553 L1737.52 682.553 L1736.97 682.553 L1736.41 682.553 L1735.85 682.553 L1735.29 682.553 L1734.73 682.553 L1734.17 682.553 L1733.61 682.553 L1733.05 682.553 L1732.49 682.553 L1731.93 682.553 L1731.37 682.553 L1730.81 682.553 L1730.25 682.553 L1729.69 682.553 L1729.14 682.553 L1728.58 682.553 L1728.02 682.553 L1727.46 682.553 L1726.9 682.553 L1726.34 682.553 L1725.78 682.553 L1725.22 682.553 L1724.66 682.553 L1724.1 682.553 L1723.54 682.553 L1722.98 682.553 L1722.42 682.553 L1721.87 682.553 L1721.31 682.553 L1720.75 682.553 L1720.19 682.553 L1719.63 682.553 L1719.07 682.553 L1718.51 682.553 L1717.95 682.553 L1717.39 682.553 L1716.83 682.553 L1716.27 682.553 L1715.71 682.553 L1715.15 682.553 L1714.6 682.553 L1714.04 682.553 L1713.48 682.553 L1712.92 682.553 L1712.36 682.553 L1711.8 682.553 L1711.24 682.553 L1710.68 682.553 L1710.12 682.553 L1709.56 682.553 L1709 682.553 L1708.44 682.553 L1707.88 682.553 L1707.32 682.553 L1706.77 682.553 L1706.21 682.553 L1705.65 682.553 L1705.09 682.553 L1704.53 682.553 L1703.97 682.553 L1703.41 682.553 L1702.85 682.553 L1702.29 682.553 L1701.73 682.553 L1701.17 682.553 L1700.61 682.553 L1700.05 682.553 L1699.5 682.553 L1698.94 682.553 L1698.38 682.553 L1697.82 682.553 L1697.26 682.553 L1696.7 682.553 L1696.14 682.553 L1695.58 682.553 L1695.02 682.553 L1694.46 682.553 L1693.9 682.553 L1693.34 682.553 L1692.78 682.553 L1692.23 682.553 L1691.67 682.553 L1691.11 682.553 L1690.55 682.553 L1689.99 682.553 L1689.43 682.553 L1688.87 682.553 L1688.31 682.553 L1687.75 682.553 L1687.19 682.553 L1686.63 682.553 L1686.07 682.553 L1685.51 682.553 L1684.95 682.553 L1684.4 682.553 L1683.84 682.553 L1683.28 682.553 L1682.72 682.553 L1682.16 682.553 L1681.6 682.553 L1681.04 682.553 L1680.48 682.553 L1679.92 682.553 L1679.36 682.553 L1678.8 682.553 L1678.24 682.553 L1677.68 682.553 L1677.13 682.553 L1676.57 682.553 L1676.01 682.553 L1675.45 682.553 L1674.89 682.553 L1674.33 682.553 L1673.77 682.553 L1673.21 682.553 L1672.65 682.553 L1672.09 682.553 L1671.53 682.553 L1670.97 682.553 L1670.41 682.553 L1669.85 682.553 L1669.3 682.553 L1668.74 682.553 L1668.18 682.553 L1667.62 682.553 L1667.06 682.553 L1666.5 682.553 L1665.94 682.553 L1665.38 682.553 L1664.82 682.553 L1664.26 682.553 L1663.7 682.553 L1663.14 682.553 L1662.58 682.553 L1662.03 682.553 L1661.47 682.553 L1660.91 682.553 L1660.35 682.553 L1659.79 682.553 L1659.23 682.553 L1658.67 682.553 L1658.11 682.553 L1657.55 682.553 L1656.99 682.553 L1656.43 682.553 L1655.87 682.553 L1655.31 682.553 L1654.76 682.553 L1654.2 682.553 L1653.64 682.553 L1653.08 682.553 L1652.52 682.553 L1651.96 682.553 L1651.4 682.553 L1650.84 682.553 L1650.28 682.553 L1649.72 682.553 L1649.16 682.553 L1648.6 682.553 L1648.04 682.553 L1647.48 682.553 L1646.93 682.553 L1646.37 682.553 L1645.81 682.553 L1645.25 682.553 L1644.69 682.553 L1644.13 682.553 L1643.57 682.553 L1643.01 682.553 L1642.45 682.553 L1641.89 682.553 L1641.33 682.553 L1640.77 682.553 L1640.21 682.553 L1639.66 682.553 L1639.1 682.553 L1638.54 682.553 L1637.98 682.553 L1637.42 682.553 L1636.86 682.553 L1636.3 682.553 L1635.74 682.553 L1635.18 682.553 L1634.62 682.553 L1634.06 682.553 L1633.5 682.553 L1632.94 682.553 L1632.39 682.553 L1631.83 682.553 L1631.27 682.553 L1630.71 682.553 L1630.15 682.553 L1629.59 682.553 L1629.03 682.553 L1628.47 682.553 L1627.91 682.553 L1627.35 682.553 L1626.79 682.553 L1626.23 682.553 L1625.67 682.553 L1625.11 682.553 L1624.56 682.553 L1624 682.553 L1623.44 682.553 L1622.88 682.553 L1622.32 682.553 L1621.76 682.553 L1621.2 682.553 L1620.64 682.553 L1620.08 682.553 L1619.52 682.553 L1618.96 682.553 L1618.4 682.553 L1617.84 682.553 L1617.29 682.553 L1616.73 682.553 L1616.17 682.553 L1615.61 682.553 L1615.05 682.553 L1614.49 682.553 L1613.93 682.553 L1613.37 682.553 L1612.81 682.553 L1612.25 682.553 L1611.69 682.553 L1611.13 682.553 L1610.57 682.553 L1610.02 682.553 L1609.46 682.553 L1608.9 682.553 L1608.34 682.553 L1607.78 682.553 L1607.22 682.553 L1606.66 682.553 L1606.1 682.553 L1605.54 682.553 L1604.98 682.553 L1604.42 682.553 L1603.86 682.553 L1603.3 682.553 L1602.74 682.553 L1602.19 682.553 L1601.63 682.553 L1601.07 682.553 L1600.51 682.553 L1599.95 682.553 L1599.39 682.553 L1598.83 682.553 L1598.27 682.553 L1597.71 682.553 L1597.15 682.553 L1596.59 682.553 L1596.03 682.553 L1595.47 682.553 L1594.92 682.553 L1594.36 682.553 L1593.8 682.553 L1593.24 682.553 L1592.68 682.553 L1592.12 682.553 L1591.56 682.553 L1591 682.553 L1590.44 682.553 L1589.88 682.553 L1589.32 682.553 L1588.76 682.553 L1588.2 682.553 L1587.65 682.553 L1587.09 682.553 L1586.53 682.553 L1585.97 682.553 L1585.41 682.553 L1584.85 682.553 L1584.29 682.553 L1583.73 682.553 L1583.17 682.553 L1582.61 682.553 L1582.05 682.553 L1581.49 682.553 L1580.93 682.553 L1580.37 682.553 L1579.82 682.553 L1579.26 682.553 L1578.7 682.553 L1578.14 682.553 L1577.58 682.553 L1577.02 682.553 L1576.46 682.553 L1575.9 682.553 L1575.34 682.553 L1574.78 682.553 L1574.22 682.553 L1573.66 682.553 L1573.1 682.553 L1572.55 682.553 L1571.99 682.553 L1571.43 682.553 L1570.87 682.553 L1570.31 682.553 L1569.75 682.553 L1569.19 682.553 L1568.63 682.553 L1568.07 682.553 L1567.51 682.553 L1566.95 682.553 L1566.39 682.553 L1565.83 682.553 L1565.28 682.553 L1564.72 682.553 L1564.16 682.553 L1563.6 682.553 L1563.04 682.553 L1562.48 682.553 L1561.92 682.553 L1561.36 682.553 L1560.8 682.553 L1560.24 682.553 L1559.68 682.553 L1559.12 682.553 L1558.56 682.553 L1558 682.553 L1557.45 682.553 L1556.89 682.553 L1556.33 682.553 L1555.77 682.553 L1555.21 682.553 L1554.65 682.553 L1554.09 682.553 L1553.53 682.553 L1552.97 682.553 L1552.41 682.553 L1551.85 682.553 L1551.29 682.553 L1550.73 682.553 L1550.18 682.553 L1549.62 682.553 L1549.06 682.553 L1548.5 682.553 L1547.94 682.553 L1547.38 682.553 L1546.82 682.553 L1546.26 682.553 L1545.7 682.553 L1545.14 682.553 L1544.58 682.553 L1544.02 682.553 L1543.46 682.553 L1542.9 682.553 L1542.35 682.553 L1541.79 682.553 L1541.23 682.553 L1540.67 682.553 L1540.11 682.553 L1539.55 682.553 L1538.99 682.553 L1538.43 682.553 L1537.87 682.553 L1537.31 682.553 L1536.75 682.553 L1536.19 682.553 L1535.63 682.553 L1535.08 682.553 L1534.52 682.553 L1533.96 682.553 L1533.4 682.553 L1532.84 682.553 L1532.28 682.553 L1531.72 682.553 L1531.16 682.553 L1530.6 682.553 L1530.04 682.553 L1529.48 682.553 L1528.92 682.553 L1528.36 682.553 L1527.81 682.553 L1527.25 682.553 L1526.69 682.553 L1526.13 682.553 L1525.57 682.553 L1525.01 682.553 L1524.45 682.553 L1523.89 682.553 L1523.33 682.553 L1522.77 682.553 L1522.21 682.553 L1521.65 682.553 L1521.09 682.553 L1520.53 682.553 L1519.98 682.553 L1519.42 682.553 L1518.86 682.553 L1518.3 682.553 L1517.74 682.553 L1517.18 682.553 L1516.62 682.553 L1516.06 682.553 L1515.5 682.553 L1514.94 682.553 L1514.38 682.553 L1513.82 682.553 L1513.26 682.553 L1512.71 682.553 L1512.15 682.553 L1511.59 682.553 L1511.03 682.553 L1510.47 682.553 L1509.91 682.553 L1509.35 682.553 L1508.79 682.553 L1508.23 682.553 L1507.67 682.553 L1507.11 682.553 L1506.55 682.553 L1505.99 682.553 L1505.44 682.553 L1504.88 682.553 L1504.32 682.553 L1503.76 682.553 L1503.2 682.553 L1502.64 682.553 L1502.08 682.553 L1501.52 682.553 L1500.96 682.553 L1500.4 682.553 L1499.84 682.553 L1499.28 682.553 L1498.72 682.553 L1498.16 682.553 L1497.61 682.553 L1497.05 682.553 L1496.49 682.553 L1495.93 682.553 L1495.37 682.553 L1494.81 682.553 L1494.25 682.553 L1493.69 682.553 L1493.13 682.553 L1492.57 682.553 L1492.01 682.553 L1491.45 682.553 L1490.89 682.553 L1490.34 682.553 L1489.78 682.553 L1489.22 682.553 L1488.66 682.553 L1488.1 682.553 L1487.54 682.553 L1486.98 682.553 L1486.42 682.553 L1485.86 682.553 L1485.3 682.553 L1484.74 682.553 L1484.18 682.553 L1483.62 682.553 L1483.07 682.553 L1482.51 682.553 L1481.95 682.553 L1481.39 682.553 L1480.83 682.553 L1480.27 682.553 L1479.71 682.553 L1479.15 682.553 L1478.59 682.553 L1478.03 682.553 L1477.47 682.553 L1476.91 682.553 L1476.35 682.553 L1475.79 682.553 L1475.24 682.553 L1474.68 682.553 L1474.12 682.553 L1473.56 682.553 L1473 682.553 L1472.44 682.553 L1471.88 682.553 L1471.32 682.553 L1470.76 682.553 L1470.2 682.553 L1469.64 682.553 L1469.08 682.553 L1468.52 682.553 L1467.97 682.553 L1467.41 682.553 L1466.85 682.553 L1466.29 682.553 L1465.73 682.553 L1465.17 682.553 L1464.61 682.553 L1464.05 682.553 L1463.49 682.553 L1462.93 682.553 L1462.37 682.553 L1461.81 682.553 L1461.25 682.553 L1460.7 682.553 L1460.14 682.553 L1459.58 682.553 L1459.02 682.553 L1458.46 682.553 L1457.9 682.553 L1457.34 682.553 L1456.78 682.553 L1456.22 682.553 L1455.66 682.553 L1455.1 682.553 L1454.54 682.553 L1453.98 682.553 L1453.42 682.553 L1452.87 682.553 L1452.31 682.553 L1451.75 682.553 L1451.19 682.553 L1450.63 682.553 L1450.07 682.553 L1449.51 682.553 L1448.95 682.553 L1448.39 682.553 L1447.83 682.553 L1447.27 682.553 L1446.71 682.553 L1446.15 682.553 L1445.6 682.553 L1445.04 682.553 L1444.48 682.553 L1443.92 682.553 L1443.36 682.553 L1442.8 682.553 L1442.24 682.553 L1441.68 682.553 L1441.12 682.553 L1440.56 682.553 L1440 682.553 L1439.44 682.553 L1438.88 682.553 L1438.33 682.553 L1437.77 682.553 L1437.21 682.553 L1436.65 682.553 L1436.09 682.553 L1435.53 682.553 L1434.97 682.553 L1434.41 682.553 L1433.85 682.553 L1433.29 682.553 L1432.73 682.553 L1432.17 682.553 L1431.61 682.553 L1431.05 682.553 L1430.5 682.553 L1429.94 682.553 L1429.38 682.553 L1428.82 682.553 L1428.26 682.553 L1427.7 682.553 L1427.14 682.553 L1426.58 682.553 L1426.02 682.553 L1425.46 682.553 L1424.9 682.553 L1424.34 682.553 L1423.78 682.553 L1423.23 682.553 L1422.67 682.553 L1422.11 682.553 L1421.55 682.553 L1420.99 682.553 L1420.43 682.553 L1419.87 682.553 L1419.31 682.553 L1418.75 682.553 L1418.19 682.553 L1417.63 682.553 L1417.07 682.553 L1416.51 682.553 L1415.95 682.553 L1415.4 682.553 L1414.84 682.553 L1414.28 682.553 L1413.72 682.553 L1413.16 682.553 L1412.6 682.553 L1412.04 682.553 L1411.48 682.553 L1410.92 682.553 L1410.36 682.553 L1409.8 682.553 L1409.24 682.553 L1408.68 682.553 L1408.13 682.553 L1407.57 682.553 L1407.01 682.553 L1406.45 682.553 L1405.89 682.553 L1405.33 682.553 L1404.77 682.553 L1404.21 682.553 L1403.65 682.553 L1403.09 682.553 L1402.53 682.553 L1401.97 682.553 L1401.41 682.553 L1400.86 682.553 L1400.3 682.553 L1399.74 682.553 L1399.18 682.553 L1398.62 682.553 L1398.06 682.553 L1397.5 682.553 L1396.94 682.553 L1396.38 682.553 L1395.82 682.553 L1395.26 682.553 L1394.7 682.553 L1394.14 682.553 L1393.58 682.553 L1393.03 682.553 L1392.47 682.553 L1391.91 682.553 L1391.35 682.553 L1390.79 682.553 L1390.23 682.553 L1389.67 682.553 L1389.11 682.553 L1388.55 682.553 L1387.99 682.553 L1387.43 682.553 L1386.87 682.553 L1386.31 682.553 L1385.76 682.553 L1385.2 682.553 L1384.64 682.553 L1384.08 682.553 L1383.52 682.553 L1382.96 682.553 L1382.4 682.553 L1381.84 682.553 L1381.28 682.553 L1380.72 682.553 L1380.16 682.553 L1379.6 682.553 L1379.04 682.553 L1378.49 682.553 L1377.93 682.553 L1377.37 682.553 L1376.81 682.553 L1376.25 682.553 L1375.69 682.553 L1375.13 682.553 L1374.57 682.553 L1374.01 682.553 L1373.45 682.553 L1372.89 682.553 L1372.33 682.553 L1371.77 682.553 L1371.21 682.553 L1370.66 682.553 L1370.1 682.553 L1369.54 682.553 L1368.98 682.553 L1368.42 682.553 L1367.86 682.553 L1367.3 682.553 L1366.74 682.553 L1366.18 682.553 L1365.62 682.553 L1365.06 682.553 L1364.5 682.553 L1363.94 682.553 L1363.39 682.553 L1362.83 682.553 L1362.27 682.553 L1361.71 682.553 L1361.15 682.553 L1360.59 682.553 L1360.03 682.553 L1359.47 682.553 L1358.91 682.553 L1358.35 682.553 L1357.79 682.553 L1357.23 682.553 L1356.67 682.553 L1356.12 682.553 L1355.56 682.553 L1355 682.553 L1354.44 682.553 L1353.88 682.553 L1353.32 682.553 L1352.76 682.553 L1352.2 682.553 L1351.64 682.553 L1351.08 682.553 L1350.52 682.553 L1349.96 682.553 L1349.4 682.553 L1348.84 682.553 L1348.29 682.553 L1347.73 682.553 L1347.17 682.553 L1346.61 682.553 L1346.05 682.553 L1345.49 682.553 L1344.93 682.553 L1344.37 682.553 L1343.81 682.553 L1343.25 682.553 L1342.69 682.553 L1342.13 682.553 L1341.57 682.553 L1341.02 682.553 L1340.46 682.553 L1339.9 682.553 L1339.34 682.553 L1338.78 682.553 L1338.22 682.553 L1337.66 682.553 L1337.1 682.553 L1336.54 682.553 L1335.98 682.553 L1335.42 682.553 L1334.86 682.553 L1334.3 682.553 L1333.75 682.553 L1333.19 682.553 L1332.63 682.553 L1332.07 682.553 L1331.51 682.553 L1330.95 682.553 L1330.39 682.553 L1329.83 682.553 L1329.27 682.553 L1328.71 682.553 L1328.15 682.553 L1327.59 682.553 L1327.03 682.553 L1326.47 682.553 L1325.92 682.553 L1325.36 682.553 L1324.8 682.553 L1324.24 682.553 L1323.68 682.553 L1323.12 682.553 L1322.56 682.553 L1322 682.553 L1321.44 682.553 L1320.88 682.553 L1320.32 682.553 L1319.76 682.553 L1319.2 682.553 L1318.65 682.553 L1318.09 682.553 L1317.53 682.553 L1316.97 682.553 L1316.41 682.553 L1315.85 682.553 L1315.29 682.553 L1314.73 682.553 L1314.17 682.553 L1313.61 682.553 L1313.05 682.553 L1312.49 682.553 L1311.93 682.553 L1311.38 682.553 L1310.82 682.553 L1310.26 682.553 L1309.7 682.553 L1309.14 682.553 L1308.58 682.553 L1308.02 682.553 L1307.46 682.553 L1306.9 682.553 L1306.34 682.553 L1305.78 682.553 L1305.22 682.553 L1304.66 682.553 L1304.1 682.553 L1303.55 682.553 L1302.99 682.553 L1302.43 682.553 L1301.87 682.553 L1301.31 682.553 L1300.75 682.553 L1300.19 682.553 L1299.63 682.553 L1299.07 682.553 L1298.51 682.553 L1297.95 682.553 L1297.39 682.553 L1296.83 682.553 L1296.28 682.553 L1295.72 682.553 L1295.16 682.553 L1294.6 682.553 L1294.04 682.553 L1293.48 682.553 L1292.92 682.553 L1292.36 682.553 L1291.8 682.553 L1291.24 682.553 L1290.68 682.553 L1290.12 682.553 L1289.56 682.553 L1289 682.553 L1288.45 682.553 L1287.89 682.553 L1287.33 682.553 L1286.77 682.553 L1286.21 682.553 L1285.65 682.553 L1285.09 682.553 L1284.53 682.553 L1283.97 682.553 L1283.41 682.553 L1282.85 682.553 L1282.29 682.553 L1281.73 682.553 L1281.18 682.553 L1280.62 682.553 L1280.06 682.553 L1279.5 682.553 L1278.94 682.553 L1278.38 682.553 L1277.82 682.553 L1277.26 682.553 L1276.7 682.553 L1276.14 682.553 L1275.58 682.553 L1275.02 682.553 L1274.46 682.553 L1273.91 682.553 L1273.35 682.553 L1272.79 682.553 L1272.23 682.553 L1271.67 682.553 L1271.11 682.553 L1270.55 682.553 L1269.99 682.553 L1269.43 682.553 L1268.87 682.553 L1268.31 682.553 L1267.75 682.553 L1267.19 682.553 L1266.63 682.553 L1266.08 682.553 L1265.52 682.553 L1264.96 682.553 L1264.4 682.553 L1263.84 682.553 L1263.28 682.553 L1262.72 682.553 L1262.16 682.553 L1261.6 682.553 L1261.04 682.553 L1260.48 682.553 L1259.92 682.553 L1259.36 682.553 L1258.81 682.553 L1258.25 682.553 L1257.69 682.553 L1257.13 682.553 L1256.57 682.553 L1256.01 682.553 L1255.45 682.553 L1254.89 682.553 L1254.33 682.553 L1253.77 682.553 L1253.21 682.553 L1252.65 682.553 L1252.09 682.553 L1251.54 682.553 L1250.98 682.553 L1250.42 682.553 L1249.86 682.553 L1249.3 682.553 L1248.74 682.553 L1248.18 682.553 L1247.62 682.553 L1247.06 682.553 L1246.5 682.553 L1245.94 682.553 L1245.38 682.553 L1244.82 682.553 L1244.26 682.553 L1243.71 682.553 L1243.15 682.553 L1242.59 682.553 L1242.03 682.553 L1241.47 682.553 L1240.91 682.553 L1240.35 682.553 L1239.79 682.553 L1239.23 682.553 L1238.67 682.553 L1238.11 682.553 L1237.55 682.553 L1236.99 682.553 L1236.44 682.553 L1235.88 682.553 L1235.32 682.553 L1234.76 682.553 L1234.2 682.553 L1233.64 682.553 L1233.08 682.553 L1232.52 682.553 L1231.96 682.553 L1231.4 682.553 L1230.84 682.553 L1230.28 682.553 L1229.72 682.553 L1229.17 682.553 L1228.61 682.553 L1228.05 682.553 L1227.49 682.553 L1226.93 682.553 L1226.37 682.553 L1225.81 682.553 L1225.25 682.553 L1224.69 682.553 L1224.13 682.553 L1223.57 682.553 L1223.01 682.553 L1222.45 682.553 L1221.89 682.553 L1221.34 682.553 L1220.78 682.553 L1220.22 682.553 L1219.66 682.553 L1219.1 682.553 L1218.54 682.553 L1217.98 682.553 L1217.42 682.553 L1216.86 682.553 L1216.3 682.553 L1215.74 682.553 L1215.18 682.553 L1214.62 682.553 L1214.07 682.553 L1213.51 682.553 L1212.95 682.553 L1212.39 682.553 L1211.83 682.553 L1211.27 682.553 L1210.71 682.553 L1210.15 682.553 L1209.59 682.553 L1209.03 682.553 L1208.47 682.553 L1207.91 682.553 L1207.35 682.553 L1206.8 682.553 L1206.24 682.553 L1205.68 682.553 L1205.12 682.553 L1204.56 682.553 L1204 682.553 L1203.44 682.553 L1202.88 682.553 L1202.32 682.553 L1201.76 682.553 L1201.2 682.553 L1200.64 682.553 L1200.08 682.553 L1199.52 682.553 L1198.97 682.553 L1198.41 682.553 L1197.85 682.553 L1197.29 682.553 L1196.73 682.553 L1196.17 682.553 L1195.61 682.553 L1195.05 682.553 L1194.49 682.553 L1193.93 682.553 L1193.37 682.553 L1192.81 682.553 L1192.25 682.553 L1191.7 682.553 L1191.14 682.553 L1190.58 682.553 L1190.02 682.553 L1189.46 682.553 L1188.9 682.553 L1188.34 682.553 L1187.78 682.553 L1187.22 682.553 L1186.66 682.553 L1186.1 682.553 L1185.54 682.553 L1184.98 682.553 L1184.43 682.553 L1183.87 682.553 L1183.31 682.553 L1182.75 682.553 L1182.19 682.553 L1181.63 682.553 L1181.07 682.553 L1180.51 682.553 L1179.95 682.553 L1179.39 682.553 L1178.83 682.553 L1178.27 682.553 L1177.71 682.553 L1177.15 682.553 L1176.6 682.553 L1176.04 682.553 L1175.48 682.553 L1174.92 682.553 L1174.36 682.553 L1173.8 682.553 L1173.24 682.553 L1172.68 682.553 L1172.12 682.553 L1171.56 682.553 L1171 682.553 L1170.44 682.553 L1169.88 682.553 L1169.33 682.553 L1168.77 682.553 L1168.21 682.553 L1167.65 682.553 L1167.09 682.553 L1166.53 682.553 L1165.97 682.553 L1165.41 682.553 L1164.85 682.553 L1164.29 682.553 L1163.73 682.553 L1163.17 682.553 L1162.61 682.553 L1162.05 682.553 L1161.5 682.553 L1160.94 682.553 L1160.38 682.553 L1159.82 682.553 L1159.26 682.553 L1158.7 682.553 L1158.14 682.553 L1157.58 682.553 L1157.02 682.553 L1156.46 682.553 L1155.9 682.553 L1155.34 682.553 L1154.78 682.553 L1154.23 682.553 L1153.67 682.553 L1153.11 682.553 L1152.55 682.553 L1151.99 682.553 L1151.43 682.553 L1150.87 682.553 L1150.31 682.553 L1149.75 682.553 L1149.19 682.553 L1148.63 682.553 L1148.07 682.553 L1147.51 682.553 L1146.96 682.553 L1146.4 682.553 L1145.84 682.553 L1145.28 682.553 L1144.72 682.553 L1144.16 682.553 L1143.6 682.553 L1143.04 682.553 L1142.48 682.553 L1141.92 682.553 L1141.36 682.553 L1140.8 682.553 L1140.24 682.553 L1139.68 682.553 L1139.13 682.553 L1138.57 682.553 L1138.01 682.553 L1137.45 682.553 L1136.89 682.553 L1136.33 682.553 L1135.77 682.553 L1135.21 682.553 L1134.65 682.553 L1134.09 682.553 L1133.53 682.553 L1132.97 682.553 L1132.41 682.553 L1131.86 682.553 L1131.3 682.553 L1130.74 682.553 L1130.18 682.553 L1129.62 682.553 L1129.06 682.553 L1128.5 682.553 L1127.94 682.553 L1127.38 682.553 L1126.82 682.553 L1126.26 682.553 L1125.7 682.553 L1125.14 682.553 L1124.59 682.553 L1124.03 682.553 L1123.47 682.553 L1122.91 682.553 L1122.35 682.553 L1121.79 682.553 L1121.23 682.553 L1120.67 682.553 L1120.11 682.553 L1119.55 682.553 L1118.99 682.553 L1118.43 682.553 L1117.87 682.553 L1117.31 682.553 L1116.76 682.553 L1116.2 682.553 L1115.64 682.553 L1115.08 682.553 L1114.52 682.553 L1113.96 682.553 L1113.4 682.553 L1112.84 682.553 L1112.28 682.553 L1111.72 682.553 L1111.16 682.553 L1110.6 682.553 L1110.04 682.553 L1109.49 682.553 L1108.93 682.553 L1108.37 682.553 L1107.81 682.553 L1107.25 682.553 L1106.69 682.553 L1106.13 682.553 L1105.57 682.553 L1105.01 682.553 L1104.45 682.553 L1103.89 682.553 L1103.33 682.553 L1102.77 682.553 L1102.22 682.553 L1101.66 682.553 L1101.1 682.553 L1100.54 682.553 L1099.98 682.553 L1099.42 682.553 L1098.86 682.553 L1098.3 682.553 L1097.74 682.553 L1097.18 682.553 L1096.62 682.553 L1096.06 682.553 L1095.5 682.553 L1094.94 682.553 L1094.39 682.553 L1093.83 682.553 L1093.27 682.553 L1092.71 682.553 L1092.15 682.553 L1091.59 682.553 L1091.03 682.553 L1090.47 682.553 L1089.91 682.553 L1089.35 682.553 L1088.79 682.553 L1088.23 682.553 L1087.67 682.553 L1087.12 682.553 L1086.56 682.553 L1086 682.553 L1085.44 682.553 L1084.88 682.553 L1084.32 682.553 L1083.76 682.553 L1083.2 682.553 L1082.64 682.553 L1082.08 682.553 L1081.52 682.553 L1080.96 682.553 L1080.4 682.553 L1079.85 682.553 L1079.29 682.553 L1078.73 682.553 L1078.17 682.553 L1077.61 682.553 L1077.05 682.553 L1076.49 682.553 L1075.93 682.553 L1075.37 682.553 L1074.81 682.553 L1074.25 682.553 L1073.69 682.553 L1073.13 682.553 L1072.57 682.553 L1072.02 682.553 L1071.46 682.553 L1070.9 682.553 L1070.34 682.553 L1069.78 682.553 L1069.22 682.553 L1068.66 682.553 L1068.1 682.553 L1067.54 682.553 L1066.98 682.553 L1066.42 682.553 L1065.86 682.553 L1065.3 682.553 L1064.75 682.553 L1064.19 682.553 L1063.63 682.553 L1063.07 682.553 L1062.51 682.553 L1061.95 682.553 L1061.39 682.553 L1060.83 682.553 L1060.27 682.553 L1059.71 682.553 L1059.15 682.553 L1058.59 682.553 L1058.03 682.553 L1057.48 682.553 L1056.92 682.553 L1056.36 682.553 L1055.8 682.553 L1055.24 682.553 L1054.68 682.553 L1054.12 682.553 L1053.56 682.553 L1053 682.553 L1052.44 682.553 L1051.88 682.553 L1051.32 682.553 L1050.76 682.553 L1050.2 682.553 L1049.65 682.553 L1049.09 682.553 L1048.53 682.553 L1047.97 682.553 L1047.41 682.553 L1046.85 682.553 L1046.29 682.553 L1045.73 682.553 L1045.17 682.553 L1044.61 682.553 L1044.05 682.553 L1043.49 682.553 L1042.93 682.553 L1042.38 682.553 L1041.82 682.553 L1041.26 682.553 L1040.7 682.553 L1040.14 682.553 L1039.58 682.553 L1039.02 682.553 L1038.46 682.553 L1037.9 682.553 L1037.34 682.553 L1036.78 682.553 L1036.22 682.553 L1035.66 682.553 L1035.1 682.553 L1034.55 682.553 L1033.99 682.553 L1033.43 682.553 L1032.87 682.553 L1032.31 682.553 L1031.75 682.553 L1031.19 682.553 L1030.63 682.553 L1030.07 682.553 L1029.51 682.553 L1028.95 682.553 L1028.39 682.553 L1027.83 682.553 L1027.28 682.553 L1026.72 682.553 L1026.16 682.553 L1025.6 682.553 L1025.04 682.553 L1024.48 682.553 L1023.92 682.553 L1023.36 682.553 L1022.8 682.553 L1022.24 682.553 L1021.68 682.553 L1021.12 682.553 L1020.56 682.553 L1020.01 682.553 L1019.45 682.553 L1018.89 682.553 L1018.33 682.553 L1017.77 682.553 L1017.21 682.553 L1016.65 682.553 L1016.09 682.553 L1015.53 682.553 L1014.97 682.553 L1014.41 682.553 L1013.85 682.553 L1013.29 682.553 L1012.73 682.553 L1012.18 682.553 L1011.62 682.553 L1011.06 682.553 L1010.5 682.553 L1009.94 682.553 L1009.38 682.553 L1008.82 682.553 L1008.26 682.553 L1007.7 682.553 L1007.14 682.553 L1006.58 682.553 L1006.02 682.553 L1005.46 682.553 L1004.91 682.553 L1004.35 682.553 L1003.79 682.553 L1003.23 682.553 L1002.67 682.553 L1002.11 682.553 L1001.55 682.553 L1000.99 682.553 L1000.43 682.553 L999.872 682.553 L999.313 682.553 L998.754 682.553 L998.194 682.553 L997.635 682.553 L997.076 682.553 L996.517 682.553 L995.957 682.553 L995.398 682.553 L994.839 682.553 L994.28 682.553 L993.72 682.553 L993.161 682.553 L992.602 682.553 L992.043 682.553 L991.483 682.553 L990.924 682.553 L990.365 682.553 L989.806 682.553 L989.246 682.553 L988.687 682.553 L988.128 682.553 L987.569 682.553 L987.009 682.553 L986.45 682.553 L985.891 682.553 L985.332 682.553 L984.772 682.553 L984.213 682.553 L983.654 682.553 L983.095 682.553 L982.535 682.553 L981.976 682.553 L981.417 682.553 L980.858 682.553 L980.298 682.553 L979.739 682.553 L979.18 682.553 L978.621 682.553 L978.061 682.553 L977.502 682.553 L976.943 682.553 L976.384 682.553 L975.824 682.553 L975.265 682.553 L974.706 682.553 L974.147 682.553 L973.587 682.553 L973.028 682.553 L972.469 682.553 L971.91 682.553 L971.35 682.553 L970.791 682.553 L970.232 682.553 L969.673 682.553 L969.113 682.553 L968.554 682.553 L967.995 682.553 L967.436 682.553 L966.876 682.553 L966.317 682.553 L965.758 682.553 L965.199 682.553 L964.639 682.553 L964.08 682.553 L963.521 682.553 L962.962 682.553 L962.402 682.553 L961.843 682.553 L961.284 682.553 L960.725 682.553 L960.165 682.553 L959.606 682.553 L959.047 682.553 L958.488 682.553 L957.928 682.553 L957.369 682.553 L956.81 682.553 L956.251 682.553 L955.691 682.553 L955.132 682.553 L954.573 682.553 L954.014 682.553 L953.454 682.553 L952.895 682.553 L952.336 682.553 L951.777 682.553 L951.217 682.553 L950.658 682.553 L950.099 682.553 L949.54 682.553 L948.98 682.553 L948.421 682.553 L947.862 682.553 L947.303 682.553 L946.743 682.553 L946.184 682.553 L945.625 682.553 L945.066 682.553 L944.506 682.553 L943.947 682.553 L943.388 682.553 L942.829 682.553 L942.269 682.553 L941.71 682.553 L941.151 682.553 L940.592 682.553 L940.032 682.553 L939.473 682.553 L938.914 682.553 L938.355 682.553 L937.795 682.553 L937.236 682.553 L936.677 682.553 L936.118 682.553 L935.558 682.553 L934.999 682.553 L934.44 682.553 L933.881 682.553 L933.321 682.553 L932.762 682.553 L932.203 682.553 L931.644 682.553 L931.084 682.553 L930.525 682.553 L929.966 682.553 L929.406 682.553 L928.847 682.553 L928.288 682.553 L927.729 682.553 L927.169 682.553 L926.61 682.553 L926.051 682.553 L925.492 682.553 L924.932 682.553 L924.373 682.553 L923.814 682.553 L923.255 682.553 L922.695 682.553 L922.136 682.553 L921.577 682.553 L921.018 682.553 L920.458 682.553 L919.899 682.553 L919.34 682.553 L918.781 682.553 L918.221 682.553 L917.662 682.553 L917.103 682.553 L916.544 682.553 L915.984 682.553 L915.425 682.553 L914.866 682.553 L914.307 682.553 L913.747 682.553 L913.188 682.553 L912.629 682.553 L912.07 682.553 L911.51 682.553 L910.951 682.553 L910.392 682.553 L909.833 682.553 L909.273 682.553 L908.714 682.553 L908.155 682.553 L907.596 682.553 L907.036 682.553 L906.477 682.553 L905.918 682.553 L905.359 682.553 L904.799 682.553 L904.24 682.553 L903.681 682.553 L903.122 682.553 L902.562 682.553 L902.003 682.553 L901.444 682.553 L900.885 682.553 L900.325 682.553 L899.766 682.553 L899.207 682.553 L898.648 682.553 L898.088 682.553 L897.529 682.553 L896.97 682.553 L896.411 682.553 L895.851 682.553 L895.292 682.553 L894.733 682.553 L894.174 682.553 L893.614 682.553 L893.055 682.553 L892.496 682.553 L891.937 682.553 L891.377 682.553 L890.818 682.553 L890.259 682.553 L889.7 682.553 L889.14 682.553 L888.581 682.553 L888.022 682.553 L887.463 682.553 L886.903 682.553 L886.344 682.553 L885.785 682.553 L885.226 682.553 L884.666 682.553 L884.107 682.553 L883.548 682.553 L882.989 682.553 L882.429 682.553 L881.87 682.553 L881.311 682.553 L880.752 682.553 L880.192 682.553 L879.633 682.553 L879.074 682.553 L878.515 682.553 L877.955 682.553 L877.396 682.553 L876.837 682.553 L876.278 682.553 L875.718 682.553 L875.159 682.553 L874.6 682.553 L874.041 682.553 L873.481 682.553 L872.922 682.553 L872.363 682.553 L871.804 682.553 L871.244 682.553 L870.685 682.553 L870.126 682.553 L869.567 682.553 L869.007 682.553 L868.448 682.553 L867.889 682.553 L867.33 682.553 L866.77 682.553 L866.211 682.553 L865.652 682.553 L865.093 682.553 L864.533 682.553 L863.974 682.553 L863.415 682.553 L862.856 682.553 L862.296 682.553 L861.737 682.553 L861.178 682.553 L860.619 682.553 L860.059 682.553 L859.5 682.553 L858.941 682.553 L858.382 682.553 L857.822 682.553 L857.263 682.553 L856.704 682.553 L856.145 682.553 L855.585 682.553 L855.026 682.553 L854.467 682.553 L853.908 682.553 L853.348 682.553 L852.789 682.553 L852.23 682.553 L851.671 682.553 L851.111 682.553 L850.552 682.553 L849.993 682.553 L849.434 682.553 L848.874 682.553 L848.315 682.553 L847.756 682.553 L847.197 682.553 L846.637 682.553 L846.078 682.553 L845.519 682.553 L844.96 682.553 L844.4 682.553 L843.841 682.553 L843.282 682.553 L842.723 682.553 L842.163 682.553 L841.604 682.553 L841.045 682.553 L840.486 682.553 L839.926 682.553 L839.367 682.553 L838.808 682.553 L838.249 682.553 L837.689 682.553 L837.13 682.553 L836.571 682.553 L836.012 682.553 L835.452 682.553 L834.893 682.553 L834.334 682.553 L833.775 682.553 L833.215 682.553 L832.656 682.553 L832.097 682.553 L831.538 682.553 L830.978 682.553 L830.419 682.553 L829.86 682.553 L829.301 682.553 L828.741 682.553 L828.182 682.553 L827.623 682.553 L827.064 682.553 L826.504 682.553 L825.945 682.553 L825.386 682.553 L824.827 682.553 L824.267 682.553 L823.708 682.553 L823.149 682.553 L822.59 682.553 L822.03 682.553 L821.471 682.553 L820.912 682.553 L820.353 682.553 L819.793 682.553 L819.234 682.553 L818.675 682.553 L818.116 682.553 L817.556 682.553 L816.997 682.553 L816.438 682.553 L815.879 682.553 L815.319 682.553 L814.76 682.553 L814.201 682.553 L813.642 682.553 L813.082 682.553 L812.523 682.553 L811.964 682.553 L811.405 682.553 L810.845 682.553 L810.286 682.553 L809.727 682.553 L809.168 682.553 L808.608 682.553 L808.049 682.553 L807.49 682.553 L806.931 682.553 L806.371 682.553 L805.812 682.553 L805.253 682.553 L804.693 682.553 L804.134 682.553 L803.575 682.553 L803.016 682.553 L802.456 682.553 L801.897 682.553 L801.338 682.553 L800.779 682.553 L800.219 682.553 L799.66 682.553 L799.101 682.553 L798.542 682.553 L797.982 682.553 L797.423 682.553 L796.864 682.553 L796.305 682.553 L795.745 682.553 L795.186 682.553 L794.627 682.553 L794.068 682.553 L793.508 682.553 L792.949 682.553 L792.39 682.553 L791.831 682.553 L791.271 682.553 L790.712 682.553 L790.153 682.553 L789.594 682.553 L789.034 682.553 L788.475 682.553 L787.916 682.553 L787.357 682.553 L786.797 682.553 L786.238 682.553 L785.679 682.553 L785.12 682.553 L784.56 682.553 L784.001 682.553 L783.442 682.553 L782.883 682.553 L782.323 682.553 L781.764 682.553 L781.205 682.553 L780.646 682.553 L780.086 682.553 L779.527 682.553 L778.968 682.553 L778.409 682.553 L777.849 682.553 L777.29 682.553 L776.731 682.553 L776.172 682.553 L775.612 682.553 L775.053 682.553 L774.494 682.553 L773.935 682.553 L773.375 682.553 L772.816 682.553 L772.257 682.553 L771.698 682.553 L771.138 682.553 L770.579 682.553 L770.02 682.553 L769.461 682.553 L768.901 682.553 L768.342 682.553 L767.783 682.553 L767.224 682.553 L766.664 682.553 L766.105 682.553 L765.546 682.553 L764.987 682.553 L764.427 682.553 L763.868 682.553 L763.309 682.553 L762.75 682.553 L762.19 682.553 L761.631 682.553 L761.072 682.553 L760.513 682.553 L759.953 682.553 L759.394 682.553 L758.835 682.553 L758.276 682.553 L757.716 682.553 L757.157 682.553 L756.598 682.553 L756.039 682.553 L755.479 682.553 L754.92 682.553 L754.361 682.553 L753.802 682.553 L753.242 682.553 L752.683 682.553 L752.124 682.553 L751.565 682.553 L751.005 682.553 L750.446 682.553 L749.887 682.553 L749.328 682.553 L748.768 682.553 L748.209 682.553 L747.65 682.553 L747.091 682.553 L746.531 682.553 L745.972 682.553 L745.413 682.553 L744.854 682.553 L744.294 682.553 L743.735 682.553 L743.176 682.553 L742.617 682.553 L742.057 682.553 L741.498 682.553 L740.939 682.553 L740.38 682.553 L739.82 682.553 L739.261 682.553 L738.702 682.553 L738.143 682.553 L737.583 682.553 L737.024 682.553 L736.465 682.553 L735.906 682.553 L735.346 682.553 L734.787 682.553 L734.228 682.553 L733.669 682.553 L733.109 682.553 L732.55 682.553 L731.991 682.553 L731.432 682.553 L730.872 682.553 L730.313 682.553 L729.754 682.553 L729.195 682.553 L728.635 682.553 L728.076 682.553 L727.517 682.553 L726.958 682.553 L726.398 682.553 L725.839 682.553 L725.28 682.553 L724.721 682.553 L724.161 682.553 L723.602 682.553 L723.043 682.553 L722.484 682.553 L721.924 682.553 L721.365 682.553 L720.806 682.553 L720.247 682.553  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip293)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.486 720.806,683.486 721.365,683.486 721.924,683.486 722.484,683.486 723.043,683.486 723.602,683.486 724.161,683.486 724.721,683.486 725.28,683.486 725.839,683.486 726.398,683.486 726.958,683.486 727.517,683.486 728.076,683.486 728.635,683.486 729.195,683.486 729.754,683.486 730.313,683.486 730.872,683.486 731.432,683.486 731.991,683.486 732.55,683.486 733.109,683.486 733.669,683.486 734.228,683.486 734.787,683.486 735.346,683.486 735.906,683.486 736.465,683.486 737.024,683.486 737.583,683.486 738.143,683.486 738.702,683.486 739.261,683.486 739.82,683.486 740.38,683.486 740.939,683.486 741.498,683.486 742.057,683.486 742.617,683.486 743.176,683.486 743.735,683.486 744.294,683.486 744.854,683.486 745.413,683.486 745.972,683.486 746.531,683.486 747.091,683.486 747.65,683.486 748.209,683.486 748.768,683.486 749.328,683.486 749.887,683.486 750.446,683.486 751.005,683.486 751.565,683.486 752.124,683.486 752.683,683.486 753.242,683.486 753.802,683.486 754.361,683.486 754.92,683.486 755.479,683.486 756.039,683.486 756.598,683.486 757.157,683.486 757.716,683.486 758.276,683.486 758.835,683.486 759.394,683.486 759.953,683.486 760.513,683.486 761.072,683.486 761.631,683.486 762.19,683.486 762.75,683.486 763.309,683.486 763.868,683.486 764.427,683.486 764.987,683.486 765.546,683.486 766.105,683.486 766.664,683.486 767.224,683.486 767.783,683.486 768.342,683.486 768.901,683.486 769.461,683.486 770.02,683.486 770.579,683.486 771.138,683.486 771.698,683.486 772.257,683.486 772.816,683.486 773.375,683.486 773.935,683.486 774.494,683.486 775.053,683.486 775.612,683.486 776.172,683.486 776.731,683.486 777.29,683.486 777.849,683.486 778.409,683.486 778.968,683.486 779.527,683.486 780.086,683.486 780.646,683.486 781.205,683.486 781.764,683.486 782.323,683.486 782.883,683.486 783.442,683.486 784.001,683.486 784.56,683.486 785.12,683.486 785.679,683.486 786.238,683.486 786.797,683.486 787.357,683.486 787.916,683.486 788.475,683.486 789.034,683.486 789.594,683.486 790.153,683.486 790.712,683.486 791.271,683.486 791.831,683.486 792.39,683.486 792.949,683.486 793.508,683.486 794.068,683.486 794.627,683.486 795.186,683.486 795.745,683.486 796.305,683.486 796.864,683.486 797.423,683.486 797.982,683.486 798.542,683.486 799.101,683.486 799.66,683.486 800.219,683.486 800.779,683.486 801.338,683.486 801.897,683.486 802.456,683.486 803.016,683.486 803.575,683.486 804.134,683.486 804.693,683.486 805.253,683.486 805.812,683.486 806.371,683.486 806.931,683.486 807.49,683.486 808.049,683.486 808.608,683.486 809.168,683.486 809.727,683.486 810.286,683.486 810.845,683.486 811.405,683.486 811.964,683.486 812.523,683.486 813.082,683.486 813.642,683.486 814.201,683.486 814.76,683.486 815.319,683.486 815.879,683.486 816.438,683.486 816.997,683.486 817.556,683.486 818.116,683.486 818.675,683.486 819.234,683.486 819.793,683.486 820.353,683.486 820.912,683.486 821.471,683.486 822.03,683.486 822.59,683.486 823.149,683.486 823.708,683.486 824.267,683.486 824.827,683.486 825.386,683.486 825.945,683.486 826.504,683.486 827.064,683.486 827.623,683.486 828.182,683.486 828.741,683.486 829.301,683.486 829.86,683.486 830.419,683.486 830.978,683.486 831.538,683.486 832.097,683.486 832.656,683.486 833.215,683.486 833.775,683.486 834.334,683.486 834.893,683.486 835.452,683.486 836.012,683.486 836.571,683.486 837.13,683.486 837.689,683.486 838.249,683.486 838.808,683.486 839.367,683.486 839.926,683.486 840.486,683.486 841.045,683.486 841.604,683.486 842.163,683.486 842.723,683.486 843.282,683.486 843.841,683.486 844.4,683.486 844.96,683.486 845.519,683.486 846.078,683.486 846.637,683.486 847.197,683.486 847.756,683.486 848.315,683.486 848.874,683.486 849.434,683.486 849.993,683.486 850.552,683.486 851.111,683.486 851.671,683.486 852.23,683.486 852.789,683.486 853.348,683.486 853.908,683.486 854.467,683.486 855.026,683.486 855.585,683.486 856.145,683.486 856.704,683.486 857.263,683.486 857.822,683.486 858.382,683.486 858.941,683.486 859.5,683.486 860.059,683.486 860.619,683.486 861.178,683.486 861.737,683.486 862.296,683.486 862.856,683.486 863.415,683.486 863.974,683.486 864.533,683.486 865.093,683.486 865.652,683.486 866.211,683.486 866.77,683.486 867.33,683.486 867.889,683.486 868.448,683.486 869.007,683.486 869.567,683.486 870.126,683.486 870.685,683.486 871.244,683.486 871.804,683.486 872.363,683.486 872.922,683.486 873.481,683.486 874.041,683.486 874.6,683.486 875.159,683.486 875.718,683.486 876.278,683.486 876.837,683.486 877.396,683.486 877.955,683.486 878.515,683.486 879.074,683.486 879.633,683.486 880.192,683.486 880.752,683.486 881.311,683.486 881.87,683.486 882.429,683.486 882.989,683.486 883.548,683.486 884.107,683.486 884.666,683.486 885.226,683.486 885.785,683.486 886.344,683.486 886.903,683.486 887.463,683.486 888.022,683.486 888.581,683.486 889.14,683.486 889.7,683.486 890.259,683.486 890.818,683.486 891.377,683.486 891.937,683.486 892.496,683.486 893.055,683.486 893.614,683.486 894.174,683.486 894.733,683.486 895.292,683.486 895.851,683.486 896.411,683.486 896.97,683.486 897.529,683.486 898.088,683.486 898.648,683.486 899.207,683.486 899.766,683.486 900.325,683.486 900.885,683.486 901.444,683.486 902.003,683.486 902.562,683.486 903.122,683.486 903.681,683.486 904.24,683.486 904.799,683.486 905.359,683.486 905.918,683.486 906.477,683.486 907.036,683.486 907.596,683.486 908.155,683.486 908.714,683.486 909.273,683.486 909.833,683.486 910.392,683.486 910.951,683.486 911.51,683.486 912.07,683.486 912.629,683.486 913.188,683.486 913.747,683.486 914.307,683.486 914.866,683.486 915.425,683.486 915.984,683.486 916.544,683.486 917.103,683.486 917.662,683.486 918.221,683.486 918.781,683.486 919.34,683.486 919.899,683.486 920.458,683.486 921.018,683.486 921.577,683.486 922.136,683.486 922.695,683.486 923.255,683.486 923.814,683.486 924.373,683.486 924.932,683.486 925.492,683.486 926.051,683.486 926.61,683.486 927.169,683.486 927.729,683.486 928.288,683.486 928.847,683.486 929.406,683.486 929.966,683.486 930.525,683.486 931.084,683.486 931.644,683.486 932.203,683.486 932.762,683.486 933.321,683.486 933.881,683.486 934.44,683.486 934.999,683.486 935.558,683.486 936.118,683.486 936.677,683.486 937.236,683.486 937.795,683.486 938.355,683.486 938.914,683.486 939.473,683.486 940.032,683.486 940.592,683.486 941.151,683.486 941.71,683.486 942.269,683.486 942.829,683.486 943.388,683.486 943.947,683.486 944.506,683.486 945.066,683.486 945.625,683.486 946.184,683.486 946.743,683.486 947.303,683.486 947.862,683.486 948.421,683.486 948.98,683.486 949.54,683.486 950.099,683.486 950.658,683.486 951.217,683.486 951.777,683.486 952.336,683.486 952.895,683.486 953.454,683.486 954.014,683.486 954.573,683.486 955.132,683.486 955.691,683.486 956.251,683.486 956.81,683.486 957.369,683.486 957.928,683.486 958.488,683.486 959.047,683.486 959.606,683.486 960.165,683.486 960.725,683.486 961.284,683.486 961.843,683.486 962.402,683.486 962.962,683.486 963.521,683.486 964.08,683.486 964.639,683.486 965.199,683.486 965.758,683.486 966.317,683.486 966.876,683.486 967.436,683.486 967.995,683.486 968.554,683.486 969.113,683.486 969.673,683.486 970.232,683.486 970.791,683.486 971.35,683.486 971.91,683.486 972.469,683.486 973.028,683.486 973.587,683.486 974.147,683.486 974.706,683.486 975.265,683.486 975.824,683.486 976.384,683.486 976.943,683.486 977.502,683.486 978.061,683.486 978.621,683.486 979.18,683.486 979.739,683.486 980.298,683.486 980.858,683.486 981.417,683.486 981.976,683.486 982.535,683.486 983.095,683.486 983.654,683.486 984.213,683.486 984.772,683.486 985.332,683.486 985.891,683.486 986.45,683.486 987.009,683.486 987.569,683.486 988.128,683.486 988.687,683.486 989.246,683.486 989.806,683.486 990.365,683.486 990.924,683.486 991.483,683.486 992.043,683.486 992.602,683.486 993.161,683.486 993.72,683.486 994.28,683.486 994.839,683.486 995.398,683.486 995.957,683.486 996.517,683.486 997.076,683.486 997.635,683.486 998.194,683.486 998.754,683.486 999.313,683.486 999.872,683.486 1000.43,683.486 1000.99,683.486 1001.55,683.486 1002.11,683.486 1002.67,683.486 1003.23,683.486 1003.79,683.486 1004.35,683.486 1004.91,683.486 1005.46,683.486 1006.02,683.486 1006.58,683.486 1007.14,683.486 1007.7,683.486 1008.26,683.486 1008.82,683.486 1009.38,683.486 1009.94,683.486 1010.5,683.486 1011.06,683.486 1011.62,683.486 1012.18,683.486 1012.73,683.486 1013.29,683.486 1013.85,683.486 1014.41,683.486 1014.97,683.486 1015.53,683.486 1016.09,683.486 1016.65,683.486 1017.21,683.486 1017.77,683.486 1018.33,683.486 1018.89,683.486 1019.45,683.486 1020.01,683.486 1020.56,683.486 1021.12,683.486 1021.68,683.486 1022.24,683.486 1022.8,683.486 1023.36,683.486 1023.92,683.486 1024.48,683.486 1025.04,683.486 1025.6,683.486 1026.16,683.486 1026.72,683.486 1027.28,683.486 1027.83,683.486 1028.39,683.486 1028.95,683.486 1029.51,683.486 1030.07,683.486 1030.63,683.486 1031.19,683.486 1031.75,683.486 1032.31,683.486 1032.87,683.486 1033.43,683.486 1033.99,683.486 1034.55,683.486 1035.1,683.486 1035.66,683.486 1036.22,683.486 1036.78,683.486 1037.34,683.486 1037.9,683.486 1038.46,683.486 1039.02,683.486 1039.58,683.486 1040.14,683.486 1040.7,683.486 1041.26,683.486 1041.82,683.486 1042.38,683.486 1042.93,683.486 1043.49,683.486 1044.05,683.486 1044.61,683.486 1045.17,683.486 1045.73,683.486 1046.29,683.486 1046.85,683.486 1047.41,683.486 1047.97,683.486 1048.53,683.486 1049.09,683.486 1049.65,683.486 1050.2,683.486 1050.76,683.486 1051.32,683.486 1051.88,683.486 1052.44,683.486 1053,683.486 1053.56,683.486 1054.12,683.486 1054.68,683.486 1055.24,683.486 1055.8,683.486 1056.36,683.486 1056.92,683.486 1057.48,683.486 1058.03,683.486 1058.59,683.486 1059.15,683.486 1059.71,683.486 1060.27,683.486 1060.83,683.486 1061.39,683.486 1061.95,683.486 1062.51,683.486 1063.07,683.486 1063.63,683.486 1064.19,683.486 1064.75,683.486 1065.3,683.486 1065.86,683.486 1066.42,683.486 1066.98,683.486 1067.54,683.486 1068.1,683.486 1068.66,683.486 1069.22,683.486 1069.78,683.486 1070.34,683.486 1070.9,683.486 1071.46,683.486 1072.02,683.486 1072.57,683.486 1073.13,683.486 1073.69,683.486 1074.25,683.486 1074.81,683.486 1075.37,683.486 1075.93,683.486 1076.49,683.486 1077.05,683.486 1077.61,683.486 1078.17,683.486 1078.73,683.486 1079.29,683.486 1079.85,683.486 1080.4,683.486 1080.96,683.486 1081.52,683.486 1082.08,683.486 1082.64,683.486 1083.2,683.486 1083.76,683.486 1084.32,683.486 1084.88,683.486 1085.44,683.486 1086,683.486 1086.56,683.486 1087.12,683.486 1087.67,683.486 1088.23,683.486 1088.79,683.486 1089.35,683.486 1089.91,683.486 1090.47,683.486 1091.03,683.486 1091.59,683.486 1092.15,683.486 1092.71,683.486 1093.27,683.486 1093.83,683.486 1094.39,683.486 1094.94,683.486 1095.5,683.486 1096.06,683.486 1096.62,683.486 1097.18,683.486 1097.74,683.486 1098.3,683.486 1098.86,683.486 1099.42,683.486 1099.98,683.486 1100.54,683.486 1101.1,683.486 1101.66,683.486 1102.22,683.486 1102.77,683.486 1103.33,683.486 1103.89,683.486 1104.45,683.486 1105.01,683.486 1105.57,683.486 1106.13,683.486 1106.69,683.486 1107.25,683.486 1107.81,683.486 1108.37,683.486 1108.93,683.486 1109.49,683.486 1110.04,683.486 1110.6,683.486 1111.16,683.486 1111.72,683.486 1112.28,683.486 1112.84,683.486 1113.4,683.486 1113.96,683.486 1114.52,683.486 1115.08,683.486 1115.64,683.486 1116.2,683.486 1116.76,683.486 1117.31,683.486 1117.87,683.486 1118.43,683.486 1118.99,683.486 1119.55,683.486 1120.11,683.486 1120.67,683.486 1121.23,683.486 1121.79,683.486 1122.35,683.486 1122.91,683.486 1123.47,683.486 1124.03,683.486 1124.59,683.486 1125.14,683.486 1125.7,683.486 1126.26,683.486 1126.82,683.486 1127.38,683.486 1127.94,683.486 1128.5,683.486 1129.06,683.486 1129.62,683.486 1130.18,683.486 1130.74,683.486 1131.3,683.486 1131.86,683.486 1132.41,683.486 1132.97,683.486 1133.53,683.486 1134.09,683.486 1134.65,683.486 1135.21,683.486 1135.77,683.486 1136.33,683.486 1136.89,683.486 1137.45,683.486 1138.01,683.486 1138.57,683.486 1139.13,683.486 1139.68,683.486 1140.24,683.486 1140.8,683.486 1141.36,683.486 1141.92,683.486 1142.48,683.486 1143.04,683.486 1143.6,683.486 1144.16,683.486 1144.72,683.486 1145.28,683.486 1145.84,683.486 1146.4,683.486 1146.96,683.486 1147.51,683.486 1148.07,683.486 1148.63,683.486 1149.19,683.486 1149.75,683.486 1150.31,683.486 1150.87,683.486 1151.43,683.486 1151.99,683.486 1152.55,683.486 1153.11,683.486 1153.67,683.486 1154.23,683.486 1154.78,683.486 1155.34,683.486 1155.9,683.486 1156.46,683.486 1157.02,683.486 1157.58,683.486 1158.14,683.486 1158.7,683.486 1159.26,683.486 1159.82,683.486 1160.38,683.486 1160.94,683.486 1161.5,683.486 1162.05,683.486 1162.61,683.486 1163.17,683.486 1163.73,683.486 1164.29,683.486 1164.85,683.486 1165.41,683.486 1165.97,683.486 1166.53,683.486 1167.09,683.486 1167.65,683.486 1168.21,683.486 1168.77,683.486 1169.33,683.486 1169.88,683.486 1170.44,683.486 1171,683.486 1171.56,683.486 1172.12,683.486 1172.68,683.486 1173.24,683.486 1173.8,683.486 1174.36,683.486 1174.92,683.486 1175.48,683.486 1176.04,683.486 1176.6,683.486 1177.15,683.486 1177.71,683.486 1178.27,683.486 1178.83,683.486 1179.39,683.486 1179.95,683.486 1180.51,683.486 1181.07,683.486 1181.63,683.486 1182.19,683.486 1182.75,683.486 1183.31,683.486 1183.87,683.486 1184.43,683.486 1184.98,683.486 1185.54,683.486 1186.1,683.486 1186.66,683.486 1187.22,683.486 1187.78,683.486 1188.34,683.486 1188.9,683.486 1189.46,683.486 1190.02,683.486 1190.58,683.486 1191.14,683.486 1191.7,683.486 1192.25,683.486 1192.81,683.486 1193.37,683.486 1193.93,683.486 1194.49,683.486 1195.05,683.486 1195.61,683.486 1196.17,683.486 1196.73,683.486 1197.29,683.486 1197.85,683.486 1198.41,683.486 1198.97,683.486 1199.52,683.486 1200.08,683.486 1200.64,683.486 1201.2,683.486 1201.76,683.486 1202.32,683.486 1202.88,683.486 1203.44,683.486 1204,683.486 1204.56,683.486 1205.12,683.486 1205.68,683.486 1206.24,683.486 1206.8,683.486 1207.35,683.486 1207.91,683.486 1208.47,683.486 1209.03,683.486 1209.59,683.486 1210.15,683.486 1210.71,683.486 1211.27,683.486 1211.83,683.486 1212.39,683.486 1212.95,683.486 1213.51,683.486 1214.07,683.486 1214.62,683.486 1215.18,683.486 1215.74,683.486 1216.3,683.486 1216.86,683.486 1217.42,683.486 1217.98,683.486 1218.54,683.486 1219.1,683.486 1219.66,683.486 1220.22,683.486 1220.78,683.486 1221.34,683.486 1221.89,683.486 1222.45,683.486 1223.01,683.486 1223.57,683.486 1224.13,683.486 1224.69,683.486 1225.25,683.486 1225.81,683.486 1226.37,683.486 1226.93,683.486 1227.49,683.486 1228.05,683.486 1228.61,683.486 1229.17,683.486 1229.72,683.486 1230.28,683.486 1230.84,683.486 1231.4,683.486 1231.96,683.486 1232.52,683.486 1233.08,683.486 1233.64,683.486 1234.2,683.486 1234.76,683.486 1235.32,683.486 1235.88,683.486 1236.44,683.486 1236.99,683.486 1237.55,683.486 1238.11,683.486 1238.67,683.486 1239.23,683.486 1239.79,683.486 1240.35,683.486 1240.91,683.486 1241.47,683.486 1242.03,683.486 1242.59,683.486 1243.15,683.486 1243.71,683.486 1244.26,683.486 1244.82,683.486 1245.38,683.486 1245.94,683.486 1246.5,683.486 1247.06,683.486 1247.62,683.486 1248.18,683.486 1248.74,683.486 1249.3,683.486 1249.86,683.486 1250.42,683.486 1250.98,683.486 1251.54,683.486 1252.09,683.486 1252.65,683.486 1253.21,683.486 1253.77,683.486 1254.33,683.486 1254.89,683.486 1255.45,683.486 1256.01,683.486 1256.57,683.486 1257.13,683.486 1257.69,683.486 1258.25,683.486 1258.81,683.486 1259.36,683.486 1259.92,683.486 1260.48,683.486 1261.04,683.486 1261.6,683.486 1262.16,683.486 1262.72,683.486 1263.28,683.486 1263.84,683.486 1264.4,683.486 1264.96,683.486 1265.52,683.486 1266.08,683.486 1266.63,683.486 1267.19,683.486 1267.75,683.486 1268.31,683.486 1268.87,683.486 1269.43,683.486 1269.99,683.486 1270.55,683.486 1271.11,683.486 1271.67,683.486 1272.23,683.486 1272.79,683.486 1273.35,683.486 1273.91,683.486 1274.46,683.486 1275.02,683.486 1275.58,683.486 1276.14,683.486 1276.7,683.486 1277.26,683.486 1277.82,683.486 1278.38,683.486 1278.94,683.486 1279.5,683.486 1280.06,683.486 1280.62,683.486 1281.18,683.486 1281.73,683.486 1282.29,683.486 1282.85,683.486 1283.41,683.486 1283.97,683.486 1284.53,683.486 1285.09,683.486 1285.65,683.486 1286.21,683.486 1286.77,683.486 1287.33,683.486 1287.89,683.486 1288.45,683.486 1289,683.486 1289.56,683.486 1290.12,683.486 1290.68,683.486 1291.24,683.486 1291.8,683.486 1292.36,683.486 1292.92,683.486 1293.48,683.486 1294.04,683.486 1294.6,683.486 1295.16,683.486 1295.72,683.486 1296.28,683.486 1296.83,683.486 1297.39,683.486 1297.95,683.486 1298.51,683.486 1299.07,683.486 1299.63,683.486 1300.19,683.486 1300.75,683.486 1301.31,683.486 1301.87,683.486 1302.43,683.486 1302.99,683.486 1303.55,683.486 1304.1,683.486 1304.66,683.486 1305.22,683.486 1305.78,683.486 1306.34,683.486 1306.9,683.486 1307.46,683.486 1308.02,683.486 1308.58,683.486 1309.14,683.486 1309.7,683.486 1310.26,683.486 1310.82,683.486 1311.38,683.486 1311.93,683.486 1312.49,683.486 1313.05,683.486 1313.61,683.486 1314.17,683.486 1314.73,683.486 1315.29,683.486 1315.85,683.486 1316.41,683.486 1316.97,683.486 1317.53,683.486 1318.09,683.486 1318.65,683.486 1319.2,683.486 1319.76,683.486 1320.32,683.486 1320.88,683.486 1321.44,683.486 1322,683.486 1322.56,683.486 1323.12,683.486 1323.68,683.486 1324.24,683.486 1324.8,683.486 1325.36,683.486 1325.92,683.486 1326.47,683.486 1327.03,683.486 1327.59,683.486 1328.15,683.486 1328.71,683.486 1329.27,683.486 1329.83,683.486 1330.39,683.486 1330.95,683.486 1331.51,683.486 1332.07,683.486 1332.63,683.486 1333.19,683.486 1333.75,683.486 1334.3,683.486 1334.86,683.486 1335.42,683.486 1335.98,683.486 1336.54,683.486 1337.1,683.486 1337.66,683.486 1338.22,683.486 1338.78,683.486 1339.34,683.486 1339.9,683.486 1340.46,683.486 1341.02,683.486 1341.57,683.486 1342.13,683.486 1342.69,683.486 1343.25,683.486 1343.81,683.486 1344.37,683.486 1344.93,683.486 1345.49,683.486 1346.05,683.486 1346.61,683.486 1347.17,683.486 1347.73,683.486 1348.29,683.486 1348.84,683.486 1349.4,683.486 1349.96,683.486 1350.52,683.486 1351.08,683.486 1351.64,683.486 1352.2,683.486 1352.76,683.486 1353.32,683.486 1353.88,683.486 1354.44,683.486 1355,683.486 1355.56,683.486 1356.12,683.486 1356.67,683.486 1357.23,683.486 1357.79,683.486 1358.35,683.486 1358.91,683.486 1359.47,683.486 1360.03,683.486 1360.59,683.486 1361.15,683.486 1361.71,683.486 1362.27,683.486 1362.83,683.486 1363.39,683.486 1363.94,683.486 1364.5,683.486 1365.06,683.486 1365.62,683.486 1366.18,683.486 1366.74,683.486 1367.3,683.486 1367.86,683.486 1368.42,683.486 1368.98,683.486 1369.54,683.486 1370.1,683.486 1370.66,683.486 1371.21,683.486 1371.77,683.486 1372.33,683.486 1372.89,683.486 1373.45,683.486 1374.01,683.486 1374.57,683.486 1375.13,683.486 1375.69,683.486 1376.25,683.486 1376.81,683.486 1377.37,683.486 1377.93,683.486 1378.49,683.486 1379.04,683.486 1379.6,683.486 1380.16,683.486 1380.72,683.486 1381.28,683.486 1381.84,683.486 1382.4,683.486 1382.96,683.486 1383.52,683.486 1384.08,683.486 1384.64,683.486 1385.2,683.486 1385.76,683.486 1386.31,683.486 1386.87,683.486 1387.43,683.486 1387.99,683.486 1388.55,683.486 1389.11,683.486 1389.67,683.486 1390.23,683.486 1390.79,683.486 1391.35,683.486 1391.91,683.486 1392.47,683.486 1393.03,683.486 1393.58,683.486 1394.14,683.486 1394.7,683.486 1395.26,683.486 1395.82,683.486 1396.38,683.486 1396.94,683.486 1397.5,683.486 1398.06,683.486 1398.62,683.486 1399.18,683.486 1399.74,683.486 1400.3,683.486 1400.86,683.486 1401.41,683.486 1401.97,683.486 1402.53,683.486 1403.09,683.486 1403.65,683.486 1404.21,683.486 1404.77,683.486 1405.33,683.486 1405.89,683.486 1406.45,683.486 1407.01,683.486 1407.57,683.486 1408.13,683.486 1408.68,683.486 1409.24,683.486 1409.8,683.486 1410.36,683.486 1410.92,683.486 1411.48,683.486 1412.04,683.486 1412.6,683.486 1413.16,683.486 1413.72,683.486 1414.28,683.486 1414.84,683.486 1415.4,683.486 1415.95,683.486 1416.51,683.486 1417.07,683.486 1417.63,683.486 1418.19,683.486 1418.75,683.486 1419.31,683.486 1419.87,683.486 1420.43,683.486 1420.99,683.486 1421.55,683.486 1422.11,683.486 1422.67,683.486 1423.23,683.486 1423.78,683.486 1424.34,683.486 1424.9,683.486 1425.46,683.486 1426.02,683.486 1426.58,683.486 1427.14,683.486 1427.7,683.486 1428.26,683.486 1428.82,683.486 1429.38,683.486 1429.94,683.486 1430.5,683.486 1431.05,683.486 1431.61,683.486 1432.17,683.486 1432.73,683.486 1433.29,683.486 1433.85,683.486 1434.41,683.486 1434.97,683.486 1435.53,683.486 1436.09,683.486 1436.65,683.486 1437.21,683.486 1437.77,683.486 1438.33,683.486 1438.88,683.486 1439.44,683.486 1440,683.486 1440.56,683.486 1441.12,683.486 1441.68,683.486 1442.24,683.486 1442.8,683.486 1443.36,683.486 1443.92,683.486 1444.48,683.486 1445.04,683.486 1445.6,683.486 1446.15,683.486 1446.71,683.486 1447.27,683.486 1447.83,683.486 1448.39,683.486 1448.95,683.486 1449.51,683.486 1450.07,683.486 1450.63,683.486 1451.19,683.486 1451.75,683.486 1452.31,683.486 1452.87,683.486 1453.42,683.486 1453.98,683.486 1454.54,683.486 1455.1,683.486 1455.66,683.486 1456.22,683.486 1456.78,683.486 1457.34,683.486 1457.9,683.486 1458.46,683.486 1459.02,683.486 1459.58,683.486 1460.14,683.486 1460.7,683.486 1461.25,683.486 1461.81,683.486 1462.37,683.486 1462.93,683.486 1463.49,683.486 1464.05,683.486 1464.61,683.486 1465.17,683.486 1465.73,683.486 1466.29,683.486 1466.85,683.486 1467.41,683.486 1467.97,683.486 1468.52,683.486 1469.08,683.486 1469.64,683.486 1470.2,683.486 1470.76,683.486 1471.32,683.486 1471.88,683.486 1472.44,683.486 1473,683.486 1473.56,683.486 1474.12,683.486 1474.68,683.486 1475.24,683.486 1475.79,683.486 1476.35,683.486 1476.91,683.486 1477.47,683.486 1478.03,683.486 1478.59,683.486 1479.15,683.486 1479.71,683.486 1480.27,683.486 1480.83,683.486 1481.39,683.486 1481.95,683.486 1482.51,683.486 1483.07,683.486 1483.62,683.486 1484.18,683.486 1484.74,683.486 1485.3,683.486 1485.86,683.486 1486.42,683.486 1486.98,683.486 1487.54,683.486 1488.1,683.486 1488.66,683.486 1489.22,683.486 1489.78,683.486 1490.34,683.486 1490.89,683.486 1491.45,683.486 1492.01,683.486 1492.57,683.486 1493.13,683.486 1493.69,683.486 1494.25,683.486 1494.81,683.486 1495.37,683.486 1495.93,683.486 1496.49,683.486 1497.05,683.486 1497.61,683.486 1498.16,683.486 1498.72,683.486 1499.28,683.486 1499.84,683.486 1500.4,683.486 1500.96,683.486 1501.52,683.486 1502.08,683.486 1502.64,683.486 1503.2,683.486 1503.76,683.486 1504.32,683.486 1504.88,683.486 1505.44,683.486 1505.99,683.486 1506.55,683.486 1507.11,683.486 1507.67,683.486 1508.23,683.486 1508.79,683.486 1509.35,683.486 1509.91,683.486 1510.47,683.486 1511.03,683.486 1511.59,683.486 1512.15,683.486 1512.71,683.486 1513.26,683.486 1513.82,683.486 1514.38,683.486 1514.94,683.486 1515.5,683.486 1516.06,683.486 1516.62,683.486 1517.18,683.486 1517.74,683.486 1518.3,683.486 1518.86,683.486 1519.42,683.486 1519.98,683.486 1520.53,683.486 1521.09,683.486 1521.65,683.486 1522.21,683.486 1522.77,683.486 1523.33,683.486 1523.89,683.486 1524.45,683.486 1525.01,683.486 1525.57,683.486 1526.13,683.486 1526.69,683.486 1527.25,683.486 1527.81,683.486 1528.36,683.486 1528.92,683.486 1529.48,683.486 1530.04,683.486 1530.6,683.486 1531.16,683.486 1531.72,683.486 1532.28,683.486 1532.84,683.486 1533.4,683.486 1533.96,683.486 1534.52,683.486 1535.08,683.486 1535.63,683.486 1536.19,683.486 1536.75,683.486 1537.31,683.486 1537.87,683.486 1538.43,683.486 1538.99,683.486 1539.55,683.486 1540.11,683.486 1540.67,683.486 1541.23,683.486 1541.79,683.486 1542.35,683.486 1542.9,683.486 1543.46,683.486 1544.02,683.486 1544.58,683.486 1545.14,683.486 1545.7,683.486 1546.26,683.486 1546.82,683.486 1547.38,683.486 1547.94,683.486 1548.5,683.486 1549.06,683.486 1549.62,683.486 1550.18,683.486 1550.73,683.486 1551.29,683.486 1551.85,683.486 1552.41,683.486 1552.97,683.486 1553.53,683.486 1554.09,683.486 1554.65,683.486 1555.21,683.486 1555.77,683.486 1556.33,683.486 1556.89,683.486 1557.45,683.486 1558,683.486 1558.56,683.486 1559.12,683.486 1559.68,683.486 1560.24,683.486 1560.8,683.486 1561.36,683.486 1561.92,683.486 1562.48,683.486 1563.04,683.486 1563.6,683.486 1564.16,683.486 1564.72,683.486 1565.28,683.486 1565.83,683.486 1566.39,683.486 1566.95,683.486 1567.51,683.486 1568.07,683.486 1568.63,683.486 1569.19,683.486 1569.75,683.486 1570.31,683.486 1570.87,683.486 1571.43,683.486 1571.99,683.486 1572.55,683.486 1573.1,683.486 1573.66,683.486 1574.22,683.486 1574.78,683.486 1575.34,683.486 1575.9,683.486 1576.46,683.486 1577.02,683.486 1577.58,683.486 1578.14,683.486 1578.7,683.486 1579.26,683.486 1579.82,683.486 1580.37,683.486 1580.93,683.486 1581.49,683.486 1582.05,683.486 1582.61,683.486 1583.17,683.486 1583.73,683.486 1584.29,683.486 1584.85,683.486 1585.41,683.486 1585.97,683.486 1586.53,683.486 1587.09,683.486 1587.65,683.486 1588.2,683.486 1588.76,683.486 1589.32,683.486 1589.88,683.486 1590.44,683.486 1591,683.486 1591.56,683.486 1592.12,683.486 1592.68,683.486 1593.24,683.486 1593.8,683.486 1594.36,683.486 1594.92,683.486 1595.47,683.486 1596.03,683.486 1596.59,683.486 1597.15,683.486 1597.71,683.486 1598.27,683.486 1598.83,683.486 1599.39,683.486 1599.95,683.486 1600.51,683.486 1601.07,683.486 1601.63,683.486 1602.19,683.486 1602.74,683.486 1603.3,683.486 1603.86,683.486 1604.42,683.486 1604.98,683.486 1605.54,683.486 1606.1,683.486 1606.66,683.486 1607.22,683.486 1607.78,683.486 1608.34,683.486 1608.9,683.486 1609.46,683.486 1610.02,683.486 1610.57,683.486 1611.13,683.486 1611.69,683.486 1612.25,683.486 1612.81,683.486 1613.37,683.486 1613.93,683.486 1614.49,683.486 1615.05,683.486 1615.61,683.486 1616.17,683.486 1616.73,683.486 1617.29,683.486 1617.84,683.486 1618.4,683.486 1618.96,683.486 1619.52,683.486 1620.08,683.486 1620.64,683.486 1621.2,683.486 1621.76,683.486 1622.32,683.486 1622.88,683.486 1623.44,683.486 1624,683.486 1624.56,683.486 1625.11,683.486 1625.67,683.486 1626.23,683.486 1626.79,683.486 1627.35,683.486 1627.91,683.486 1628.47,683.486 1629.03,683.486 1629.59,683.486 1630.15,683.486 1630.71,683.486 1631.27,683.486 1631.83,683.486 1632.39,683.486 1632.94,683.486 1633.5,683.486 1634.06,683.486 1634.62,683.486 1635.18,683.486 1635.74,683.486 1636.3,683.486 1636.86,683.486 1637.42,683.486 1637.98,683.486 1638.54,683.486 1639.1,683.486 1639.66,683.486 1640.21,683.486 1640.77,683.486 1641.33,683.486 1641.89,683.486 1642.45,683.486 1643.01,683.486 1643.57,683.486 1644.13,683.486 1644.69,683.486 1645.25,683.486 1645.81,683.486 1646.37,683.486 1646.93,683.486 1647.48,683.486 1648.04,683.486 1648.6,683.486 1649.16,683.486 1649.72,683.486 1650.28,683.486 1650.84,683.486 1651.4,683.486 1651.96,683.486 1652.52,683.486 1653.08,683.486 1653.64,683.486 1654.2,683.486 1654.76,683.486 1655.31,683.486 1655.87,683.486 1656.43,683.486 1656.99,683.486 1657.55,683.486 1658.11,683.486 1658.67,683.486 1659.23,683.486 1659.79,683.486 1660.35,683.486 1660.91,683.486 1661.47,683.486 1662.03,683.486 1662.58,683.486 1663.14,683.486 1663.7,683.486 1664.26,683.486 1664.82,683.486 1665.38,683.486 1665.94,683.486 1666.5,683.486 1667.06,683.486 1667.62,683.486 1668.18,683.486 1668.74,683.486 1669.3,683.486 1669.85,683.486 1670.41,683.486 1670.97,683.486 1671.53,683.486 1672.09,683.486 1672.65,683.486 1673.21,683.486 1673.77,683.486 1674.33,683.486 1674.89,683.486 1675.45,683.486 1676.01,683.486 1676.57,683.486 1677.13,683.486 1677.68,683.486 1678.24,683.486 1678.8,683.486 1679.36,683.486 1679.92,683.486 1680.48,683.486 1681.04,683.486 1681.6,683.486 1682.16,683.486 1682.72,683.486 1683.28,683.486 1683.84,683.486 1684.4,683.486 1684.95,683.486 1685.51,683.486 1686.07,683.486 1686.63,683.486 1687.19,683.486 1687.75,683.486 1688.31,683.486 1688.87,683.486 1689.43,683.486 1689.99,683.486 1690.55,683.486 1691.11,683.486 1691.67,683.486 1692.23,683.486 1692.78,683.486 1693.34,683.486 1693.9,683.486 1694.46,683.486 1695.02,683.486 1695.58,683.486 1696.14,683.486 1696.7,683.486 1697.26,683.486 1697.82,683.486 1698.38,683.486 1698.94,683.486 1699.5,683.486 1700.05,683.486 1700.61,683.486 1701.17,683.486 1701.73,683.486 1702.29,683.486 1702.85,683.486 1703.41,683.486 1703.97,683.486 1704.53,683.486 1705.09,683.486 1705.65,683.486 1706.21,683.486 1706.77,683.486 1707.32,683.486 1707.88,683.486 1708.44,683.486 1709,683.486 1709.56,683.486 1710.12,683.486 1710.68,683.486 1711.24,683.486 1711.8,683.486 1712.36,683.486 1712.92,683.486 1713.48,683.486 1714.04,683.486 1714.6,683.486 1715.15,683.486 1715.71,683.486 1716.27,683.486 1716.83,683.486 1717.39,683.486 1717.95,683.486 1718.51,683.486 1719.07,683.486 1719.63,683.486 1720.19,683.486 1720.75,683.486 1721.31,683.486 1721.87,683.486 1722.42,683.486 1722.98,683.486 1723.54,683.486 1724.1,683.486 1724.66,683.486 1725.22,683.486 1725.78,683.486 1726.34,683.486 1726.9,683.486 1727.46,683.486 1728.02,683.486 1728.58,683.486 1729.14,683.486 1729.69,683.486 1730.25,683.486 1730.81,683.486 1731.37,683.486 1731.93,683.486 1732.49,683.486 1733.05,683.486 1733.61,683.486 1734.17,683.486 1734.73,683.486 1735.29,683.486 1735.85,683.486 1736.41,683.486 1736.97,683.486 1737.52,683.486 1738.08,683.486 1738.64,683.486 1739.2,683.486 1739.76,683.486 1740.32,683.486 1740.88,683.486 1741.44,683.486 1742,683.486 1742.56,683.486 1743.12,683.486 1743.68,683.486 1744.24,683.486 1744.79,683.486 1745.35,683.486 1745.91,683.486 1746.47,683.486 1747.03,683.486 1747.59,683.486 1748.15,683.486 1748.71,683.486 1749.27,683.486 1749.83,683.486 1750.39,683.486 1750.95,683.486 1751.51,683.486 1752.06,683.486 1752.62,683.486 1753.18,683.486 1753.74,683.486 1754.3,683.486 1754.86,683.486 1755.42,683.486 1755.98,683.486 1756.54,683.486 1757.1,683.486 1757.66,683.486 1758.22,683.486 1758.78,683.486 1759.34,683.486 1759.89,683.486 1760.45,683.486 1761.01,683.486 1761.57,683.486 1762.13,683.486 1762.69,683.486 1763.25,683.486 1763.81,683.486 1764.37,683.486 1764.93,683.486 1765.49,683.486 1766.05,683.486 1766.61,683.486 1767.16,683.486 1767.72,683.486 1768.28,683.486 1768.84,683.486 1769.4,683.486 1769.96,683.486 1770.52,683.486 1771.08,683.486 1771.64,683.486 1772.2,683.486 1772.76,683.486 1773.32,683.486 1773.88,683.486 1774.43,683.486 1774.99,683.486 1775.55,683.486 1776.11,683.486 1776.67,683.486 1777.23,683.486 1777.79,683.486 1778.35,683.486 1778.91,683.486 1779.47,683.486 1780.03,683.486 1780.59,683.486 1781.15,683.486 1781.71,683.486 1782.26,683.486 1782.82,683.486 1783.38,683.486 1783.94,683.486 1784.5,683.486 1785.06,683.486 1785.62,683.486 1786.18,683.486 1786.74,683.486 1787.3,683.486 1787.86,683.486 1788.42,683.486 1788.98,683.486 1789.53,683.486 1790.09,683.486 1790.65,683.486 1791.21,683.486 1791.77,683.486 1792.33,683.486 1792.89,683.486 1793.45,683.486 1794.01,683.486 1794.57,683.486 1795.13,683.486 1795.69,683.486 1796.25,683.486 1796.8,683.486 1797.36,683.486 1797.92,683.486 1798.48,683.486 1799.04,683.486 1799.6,683.486 1800.16,683.486 1800.72,683.486 1801.28,683.486 1801.84,683.486 1802.4,683.486 1802.96,683.486 1803.52,683.486 1804.08,683.486 1804.63,683.486 1805.19,683.486 1805.75,683.486 1806.31,683.486 1806.87,683.486 1807.43,683.486 1807.99,683.486 1808.55,683.486 1809.11,683.486 1809.67,683.486 1810.23,683.486 1810.79,683.486 1811.35,683.486 1811.9,683.486 1812.46,683.486 1813.02,683.486 1813.58,683.486 1814.14,683.486 1814.7,683.486 1815.26,683.486 1815.82,683.486 1816.38,683.486 1816.94,683.486 1817.5,683.486 1818.06,683.486 1818.62,683.486 1819.18,683.486 1819.73,683.486 1820.29,683.486 1820.85,683.486 1821.41,683.486 1821.97,683.486 1822.53,683.486 1823.09,683.486 1823.65,683.486 1824.21,683.486 1824.77,683.486 1825.33,683.486 1825.89,683.486 1826.45,683.486 1827,683.486 1827.56,683.486 1828.12,683.486 1828.68,683.486 1829.24,683.486 1829.8,683.486 1830.36,683.486 1830.92,683.486 1831.48,683.486 1832.04,683.486 1832.6,683.486 1833.16,683.486 1833.72,683.486 1834.27,683.486 1834.83,683.486 1835.39,683.486 1835.95,683.486 1836.51,683.486 1837.07,683.486 1837.63,683.486 1838.19,683.486 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.021967649297054 ± 0.022208230689278775\nProjected Energy: -4.014585981494863 ± (0.004610876582490597, 0.004695543732745833)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.44803</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3975e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3245e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.177e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.433e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.735e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.965e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133743\n -0.7590191922770817\n  0.13584182219621077\n  0.15789998694608265\n  0.8767114411781343\n  1.5305929970973366\n  1.5835732611867348\n  3.072870330325866\n  3.125672653951833\n  4.8621072215621695\n  6.260694850380594\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
